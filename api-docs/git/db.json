{"index":"<h1>Git</h1> <div class=\"callout quickref\"> <p> Quick reference guides: <a href=\"https://services.github.com/kit/downloads/github-git-cheat-sheet.pdf\">GitHub Cheat Sheet</a> <small class=\"light\">(PDF) | </small> <a href=\"http://ndpsoftware.com/git-cheatsheet.html\">Visual Git Cheat Sheet</a> <small class=\"light\">(SVG | PNG)</small> </p> </div> <div class=\"reference-menu\"> <div class=\"two-column\"> <div class=\"column-left\"> <h3 class=\"setup\">Setup and Config</h3> <ul class=\"unstyled\"> <li><a href=\"git-config\">config</a></li> <li><a href=\"git-help\">help</a></li> </ul> <h3 class=\"projects\">Getting and Creating Projects</h3> <ul class=\"unstyled\"> <li><a href=\"git-init\">init</a></li> <li><a href=\"git-clone\">clone</a></li> </ul> <h3 class=\"snapshotting\">Basic Snapshotting</h3> <ul class=\"unstyled\"> <li><a href=\"git-add\">add</a></li> <li><a href=\"git-status\">status</a></li> <li><a href=\"git-diff\">diff</a></li> <li><a href=\"git-commit\">commit</a></li> <li><a href=\"git-reset\">reset</a></li> <li><a href=\"git-rm\">rm</a></li> <li><a href=\"git-mv\">mv</a></li> </ul> <h3 class=\"branching\">Branching and Merging</h3> <ul class=\"unstyled\"> <li><a href=\"git-branch\">branch</a></li> <li><a href=\"git-checkout\">checkout</a></li> <li><a href=\"git-merge\">merge</a></li> <li><a href=\"git-mergetool\">mergetool</a></li> <li><a href=\"git-log\">log</a></li> <li><a href=\"git-stash\">stash</a></li> <li><a href=\"git-tag\">tag</a></li> </ul> <h3 class=\"sharing\">Sharing and Updating Projects</h3> <ul class=\"unstyled\"> <li><a href=\"git-fetch\">fetch</a></li> <li><a href=\"git-pull\">pull</a></li> <li><a href=\"git-push\">push</a></li> <li><a href=\"git-remote\">remote</a></li> <li><a href=\"git-submodule\">submodule</a></li> </ul> <h3 class=\"inspection\">Inspection and Comparison</h3> <ul class=\"unstyled\"> <li><a href=\"git-show\">show</a></li> <li><a href=\"git-log\">log</a></li> <li><a href=\"git-diff\">diff</a></li> <li><a href=\"git-shortlog\">shortlog</a></li> <li><a href=\"git-describe\">describe</a></li> </ul> <h3 class=\"patching\">Patching</h3> <ul class=\"unstyled\"> <li><a href=\"git-apply\">apply</a></li> <li><a href=\"git-cherry-pick\">cherry-pick</a></li> <li><a href=\"git-diff\">diff</a></li> <li><a href=\"git-rebase\">rebase</a></li> <li><a href=\"git-revert\">revert</a></li> </ul> </div> <div class=\"column-right\"> <h3 class=\"debugging\">Debugging</h3> <ul class=\"unstyled\"> <li><a href=\"git-bisect\">bisect</a></li> <li><a href=\"git-blame\">blame</a></li> <li><a href=\"git-grep\">grep</a></li> </ul> <h3 class=\"email\">Email</h3> <ul class=\"unstyled\"> <li><a href=\"git-am\">am</a></li> <li><a href=\"git-apply\">apply</a></li> <li><a href=\"git-format-patch\">format-patch</a></li> <li><a href=\"git-send-email\">send-email</a></li> <li><a href=\"git-request-pull\">request-pull</a></li> </ul> <h3 class=\"external\">External Systems</h3> <ul class=\"unstyled\"> <li><a href=\"git-svn\">svn</a></li> <li><a href=\"git-fast-import\">fast-import</a></li> </ul> <h3 class=\"admin\">Administration</h3> <ul class=\"unstyled\"> <li><a href=\"git-clean\">clean</a></li> <li><a href=\"git-gc\">gc</a></li> <li><a href=\"git-fsck\">fsck</a></li> <li><a href=\"git-reflog\">reflog</a></li> <li><a href=\"git-filter-branch\">filter-branch</a></li> <li><a href=\"git-instaweb\">instaweb</a></li> <li><a href=\"git-archive\">archive</a></li> <li><a href=\"git-bundle\">bundle</a></li> </ul> <h3 class=\"server-admin\">Server Admin</h3> <ul class=\"unstyled\"> <li><a href=\"git-daemon\">daemon</a></li> <li><a href=\"git-update-server-info\">update-server-info</a></li> </ul> <h3 class=\"plumbing\">Plumbing Commands</h3> <ul class=\"unstyled\"> <li><a href=\"git-cat-file\">cat-file</a></li> <li><a href=\"git-commit-tree\">commit-tree</a></li> <li><a href=\"git-count-objects\">count-objects</a></li> <li><a href=\"git-diff-index\">diff-index</a></li> <li><a href=\"git-for-each-ref\">for-each-ref</a></li> <li><a href=\"git-hash-object\">hash-object</a></li> <li><a href=\"git-ls-files\">ls-files</a></li> <li><a href=\"git-merge-base\">merge-base</a></li> <li><a href=\"git-read-tree\">read-tree</a></li> <li><a href=\"git-rev-list\">rev-list</a></li> <li><a href=\"git-rev-parse\">rev-parse</a></li> <li><a href=\"git-show-ref\">show-ref</a></li> <li><a href=\"git-symbolic-ref\">symbolic-ref</a></li> <li><a href=\"git-update-index\">update-index</a></li> <li><a href=\"git-update-ref\">update-ref</a></li> <li><a href=\"git-verify-pack\">verify-pack</a></li> <li><a href=\"git-write-tree\">write-tree</a></li> </ul> </div> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs\" class=\"_attribution-link\">https://git-scm.com/docs</a>\n  </p>\n</div>\n","git":"<h1>git</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git - the stupid content tracker</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git [--version] [--help] [-C &lt;path&gt;] [-c &lt;name&gt;=&lt;value&gt;]\n    [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]\n    [-p|--paginate|--no-pager] [--no-replace-objects] [--bare]\n    [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]\n    &lt;command&gt; [&lt;args&gt;]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Git is a fast, scalable, distributed revision control system with an unusually rich command set that provides both high-level operations and full access to internals.</p>   <p>See <a href=\"gittutorial\">gittutorial[7]</a> to get started, then see <a href=\"giteveryday\">giteveryday[7]</a> for a useful minimum set of commands. The <a href=\"user-manual\">Git User’s Manual</a> has a more in-depth introduction.</p>   <p>After you mastered the basic concepts, you can come back to this page to learn what commands Git offers. You can learn more about individual Git commands with \"git help command\". <a href=\"gitcli\">gitcli[7]</a> manual page gives you an overview of the command-line command syntax.</p>   <p>A formatted and hyperlinked copy of the latest Git documentation can be viewed at <code>https://git.github.io/htmldocs/git.html</code>.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--version</dt> <dd> <p>Prints the Git suite version that the <code>git</code> program came from.</p> </dd> <dt class=\"hdlist1\">--help</dt> <dd> <p>Prints the synopsis and a list of the most commonly used commands. If the option <code>--all</code> or <code>-a</code> is given then all available commands are printed. If a Git command is named this option will bring up the manual page for that command.</p>  <p>Other options are available to control how the manual page is displayed. See <a href=\"git-help\">git-help[1]</a> for more information, because <code>git --help ...</code> is converted internally into <code>git\nhelp ...</code>.</p>  </dd> <dt class=\"hdlist1\">-C &lt;path&gt;</dt> <dd> <p>Run as if git was started in <code>&lt;path&gt;</code> instead of the current working directory. When multiple <code>-C</code> options are given, each subsequent non-absolute <code>-C &lt;path&gt;</code> is interpreted relative to the preceding <code>-C\n&lt;path&gt;</code>.</p>  <p>This option affects options that expect path name like <code>--git-dir</code> and <code>--work-tree</code> in that their interpretations of the path names would be made relative to the working directory caused by the <code>-C</code> option. For example the following invocations are equivalent:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>git --git-dir=a.git --work-tree=b -C c status\ngit --git-dir=c/a.git --work-tree=c/b status</pre> </div> </div> </dd> <dt class=\"hdlist1\">-c &lt;name&gt;=&lt;value&gt;</dt> <dd> <p>Pass a configuration parameter to the command. The value given will override values from configuration files. The &lt;name&gt; is expected in the same format as listed by <code>git config</code> (subkeys separated by dots).</p>  <p>Note that omitting the <code>=</code> in <code>git -c foo.bar ...</code> is allowed and sets <code>foo.bar</code> to the boolean true value (just like <code>[foo]bar</code> would in a config file). Including the equals but with an empty value (like <code>git -c\nfoo.bar= ...</code>) sets <code>foo.bar</code> to the empty string.</p>  </dd> <dt class=\"hdlist1\">--exec-path[=&lt;path&gt;]</dt> <dd> <p>Path to wherever your core Git programs are installed. This can also be controlled by setting the GIT_EXEC_PATH environment variable. If no path is given, <code>git</code> will print the current setting and then exit.</p> </dd> <dt class=\"hdlist1\">--html-path</dt> <dd> <p>Print the path, without trailing slash, where Git’s HTML documentation is installed and exit.</p> </dd> <dt class=\"hdlist1\">--man-path</dt> <dd> <p>Print the manpath (see <code>man(1)</code>) for the man pages for this version of Git and exit.</p> </dd> <dt class=\"hdlist1\">--info-path</dt> <dd> <p>Print the path where the Info files documenting this version of Git are installed and exit.</p> </dd> <dt class=\"hdlist1\">-p</dt> <dt class=\"hdlist1\">--paginate</dt> <dd> <p>Pipe all output into <code>less</code> (or if set, $PAGER) if standard output is a terminal. This overrides the <code>pager.&lt;cmd&gt;</code> configuration options (see the \"Configuration Mechanism\" section below).</p> </dd> <dt class=\"hdlist1\">--no-pager</dt> <dd> <p>Do not pipe Git output into a pager.</p> </dd> <dt class=\"hdlist1\">--git-dir=&lt;path&gt;</dt> <dd> <p>Set the path to the repository. This can also be controlled by setting the <code>GIT_DIR</code> environment variable. It can be an absolute path or relative path to current working directory.</p> </dd> <dt class=\"hdlist1\">--work-tree=&lt;path&gt;</dt> <dd> <p>Set the path to the working tree. It can be an absolute path or a path relative to the current working directory. This can also be controlled by setting the GIT_WORK_TREE environment variable and the core.worktree configuration variable (see core.worktree in <a href=\"git-config\">git-config[1]</a> for a more detailed discussion).</p> </dd> <dt class=\"hdlist1\">--namespace=&lt;path&gt;</dt> <dd> <p>Set the Git namespace. See <a href=\"gitnamespaces\">gitnamespaces[7]</a> for more details. Equivalent to setting the <code>GIT_NAMESPACE</code> environment variable.</p> </dd> <dt class=\"hdlist1\">--bare</dt> <dd> <p>Treat the repository as a bare repository. If GIT_DIR environment is not set, it is set to the current working directory.</p> </dd> <dt class=\"hdlist1\">--no-replace-objects</dt> <dd> <p>Do not use replacement refs to replace Git objects. See <a href=\"git-replace\">git-replace[1]</a> for more information.</p> </dd> <dt class=\"hdlist1\">--literal-pathspecs</dt> <dd> <p>Treat pathspecs literally (i.e. no globbing, no pathspec magic). This is equivalent to setting the <code>GIT_LITERAL_PATHSPECS</code> environment variable to <code>1</code>.</p> </dd> <dt class=\"hdlist1\">--glob-pathspecs</dt> <dd> <p>Add \"glob\" magic to all pathspec. This is equivalent to setting the <code>GIT_GLOB_PATHSPECS</code> environment variable to <code>1</code>. Disabling globbing on individual pathspecs can be done using pathspec magic \":(literal)\"</p> </dd> <dt class=\"hdlist1\">--noglob-pathspecs</dt> <dd> <p>Add \"literal\" magic to all pathspec. This is equivalent to setting the <code>GIT_NOGLOB_PATHSPECS</code> environment variable to <code>1</code>. Enabling globbing on individual pathspecs can be done using pathspec magic \":(glob)\"</p> </dd> <dt class=\"hdlist1\">--icase-pathspecs</dt> <dd> <p>Add \"icase\" magic to all pathspec. This is equivalent to setting the <code>GIT_ICASE_PATHSPECS</code> environment variable to <code>1</code>.</p> </dd> </dl> </div></div>   <h2 id=\"_git_commands\">Git commands</h2> <div class=\"sectionbody\"> <p>We divide Git into high level (\"porcelain\") commands and low level (\"plumbing\") commands.</p> </div>   <h2 id=\"_high_level_commands_porcelain\">High-level commands (porcelain)</h2> <div class=\"sectionbody\"> <p>We separate the porcelain commands into the main commands and some ancillary user utilities.</p>  <div class=\"sect2\"> <h3 id=\"_main_porcelain_commands\">Main porcelain commands</h3> </div> <div class=\"sect2\"> <h3 id=\"_ancillary_commands\">Ancillary Commands</h3>  <p>Manipulators:</p>   <p>Interrogators:</p>  </div> <div class=\"sect2\"> <h3 id=\"_interacting_with_others\">Interacting with Others</h3>  <p>These commands are to interact with foreign SCM and with other people via patch over e-mail.</p>  </div>\n</div>   <h2 id=\"_low_level_commands_plumbing\">Low-level commands (plumbing)</h2> <div class=\"sectionbody\"> <p>Although Git includes its own porcelain layer, its low-level commands are sufficient to support development of alternative porcelains. Developers of such porcelains might start by reading about <a href=\"git-update-index\">git-update-index[1]</a> and <a href=\"git-read-tree\">git-read-tree[1]</a>.</p>   <p>The interface (input, output, set of options and the semantics) to these low-level commands are meant to be a lot more stable than Porcelain level commands, because these commands are primarily for scripted use. The interface to Porcelain commands on the other hand are subject to change in order to improve the end user experience.</p>   <p>The following description divides the low-level commands into commands that manipulate objects (in the repository, index, and working tree), commands that interrogate and compare objects, and commands that move objects and references between repositories.</p>  <div class=\"sect2\"> <h3 id=\"_manipulation_commands\">Manipulation commands</h3> </div> <div class=\"sect2\"> <h3 id=\"_interrogation_commands\">Interrogation commands</h3>  <p>In general, the interrogate commands do not touch the files in the working tree.</p>  </div> <div class=\"sect2\"> <h3 id=\"_synching_repositories\">Synching repositories</h3>  <p>The following are helper commands used by the above; end users typically do not use them directly.</p>  </div> <div class=\"sect2\"> <h3 id=\"_internal_helper_commands\">Internal helper commands</h3>  <p>These are internal helper commands used by other commands; end users typically do not use them directly.</p>  </div>\n</div>   <h2 id=\"_configuration_mechanism\">Configuration mechanism</h2> <div class=\"sectionbody\"> <p>Git uses a simple text format to store customizations that are per repository and are per user. Such a configuration file may look like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>#\n# A '#' or ';' character indicates a comment.\n#\n\n; core variables\n[core]\n        ; Don't trust file modes\n        filemode = false\n\n; user identity\n[user]\n        name = \"Junio C Hamano\"\n        email = \"gitster@pobox.com\"</pre> </div> </div>  <p>Various commands read from the configuration file and adjust their operation accordingly. See <a href=\"git-config\">git-config[1]</a> for a list and more details about the configuration mechanism.</p> </div>   <h2 id=\"_identifier_terminology\">Identifier terminology</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">&lt;object&gt;</dt> <dd> <p>Indicates the object name for any type of object.</p> </dd> <dt class=\"hdlist1\">&lt;blob&gt;</dt> <dd> <p>Indicates a blob object name.</p> </dd> <dt class=\"hdlist1\">&lt;tree&gt;</dt> <dd> <p>Indicates a tree object name.</p> </dd> <dt class=\"hdlist1\">&lt;commit&gt;</dt> <dd> <p>Indicates a commit object name.</p> </dd> <dt class=\"hdlist1\">&lt;tree-ish&gt;</dt> <dd> <p>Indicates a tree, commit or tag object name. A command that takes a &lt;tree-ish&gt; argument ultimately wants to operate on a &lt;tree&gt; object but automatically dereferences &lt;commit&gt; and &lt;tag&gt; objects that point at a &lt;tree&gt;.</p> </dd> <dt class=\"hdlist1\">&lt;commit-ish&gt;</dt> <dd> <p>Indicates a commit or tag object name. A command that takes a &lt;commit-ish&gt; argument ultimately wants to operate on a &lt;commit&gt; object but automatically dereferences &lt;tag&gt; objects that point at a &lt;commit&gt;.</p> </dd> <dt class=\"hdlist1\">&lt;type&gt;</dt> <dd> <p>Indicates that an object type is required. Currently one of: <code>blob</code>, <code>tree</code>, <code>commit</code>, or <code>tag</code>.</p> </dd> <dt class=\"hdlist1\">&lt;file&gt;</dt> <dd> <p>Indicates a filename - almost always relative to the root of the tree structure <code>GIT_INDEX_FILE</code> describes.</p> </dd> </dl> </div></div>   <h2 id=\"_symbolic_identifiers\">Symbolic identifiers</h2> <div class=\"sectionbody\"> <p>Any Git command accepting any &lt;object&gt; can also use the following symbolic notation:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">HEAD</dt> <dd> <p>indicates the head of the current branch.</p> </dd> <dt class=\"hdlist1\">&lt;tag&gt;</dt> <dd> <p>a valid tag <code>name</code> (i.e. a <code>refs/tags/&lt;tag&gt;</code> reference).</p> </dd> <dt class=\"hdlist1\">&lt;head&gt;</dt> <dd> <p>a valid head <code>name</code> (i.e. a <code>refs/heads/&lt;head&gt;</code> reference).</p> </dd> </dl> </div>  <p>For a more complete list of ways to spell object names, see \"SPECIFYING REVISIONS\" section in <a href=\"gitrevisions\">gitrevisions[7]</a>.</p> </div>   <h2 id=\"_file_directory_structure\">File/directory structure</h2> <div class=\"sectionbody\"> <p>Please see the <a href=\"gitrepository-layout\">gitrepository-layout[5]</a> document.</p>   <p>Read <a href=\"githooks\">githooks[5]</a> for more details about each hook.</p>   <p>Higher level SCMs may provide and manage additional information in the <code>$GIT_DIR</code>.</p> </div>   <h2 id=\"_terminology\">Terminology</h2> <div class=\"sectionbody\"> <p>Please see <a href=\"gitglossary\">gitglossary[7]</a>.</p> </div>   <h2 id=\"_environment_variables\">Environment variables</h2> <div class=\"sectionbody\"> <p>Various Git commands use the following environment variables:</p>  <div class=\"sect2\"> <h3 id=\"_the_git_repository\">The Git Repository</h3>  <p>These environment variables apply to <code>all</code> core Git commands. Nb: it is worth noting that they may be used/overridden by SCMS sitting above Git so take care if using a foreign front-end.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>GIT_INDEX_FILE</code></dt> <dd> <p>This environment allows the specification of an alternate index file. If not specified, the default of <code>$GIT_DIR/index</code> is used.</p> </dd> <dt class=\"hdlist1\"><code>GIT_INDEX_VERSION</code></dt> <dd> <p>This environment variable allows the specification of an index version for new repositories. It won’t affect existing index files. By default index file version 2 or 3 is used. See <a href=\"git-update-index\">git-update-index[1]</a> for more information.</p> </dd> <dt class=\"hdlist1\"><code>GIT_OBJECT_DIRECTORY</code></dt> <dd> <p>If the object storage directory is specified via this environment variable then the sha1 directories are created underneath - otherwise the default <code>$GIT_DIR/objects</code> directory is used.</p> </dd> <dt class=\"hdlist1\"><code>GIT_ALTERNATE_OBJECT_DIRECTORIES</code></dt> <dd> <p>Due to the immutable nature of Git objects, old objects can be archived into shared, read-only directories. This variable specifies a \":\" separated (on Windows \";\" separated) list of Git object directories which can be used to search for Git objects. New objects will not be written to these directories.</p> </dd> <dt class=\"hdlist1\"><code>GIT_DIR</code></dt> <dd> <p>If the <code>GIT_DIR</code> environment variable is set then it specifies a path to use instead of the default <code>.git</code> for the base of the repository. The <code>--git-dir</code> command-line option also sets this value.</p> </dd> <dt class=\"hdlist1\"><code>GIT_WORK_TREE</code></dt> <dd> <p>Set the path to the root of the working tree. This can also be controlled by the <code>--work-tree</code> command-line option and the core.worktree configuration variable.</p> </dd> <dt class=\"hdlist1\"><code>GIT_NAMESPACE</code></dt> <dd> <p>Set the Git namespace; see <a href=\"gitnamespaces\">gitnamespaces[7]</a> for details. The <code>--namespace</code> command-line option also sets this value.</p> </dd> <dt class=\"hdlist1\"><code>GIT_CEILING_DIRECTORIES</code></dt> <dd> <p>This should be a colon-separated list of absolute paths. If set, it is a list of directories that Git should not chdir up into while looking for a repository directory (useful for excluding slow-loading network directories). It will not exclude the current working directory or a GIT_DIR set on the command line or in the environment. Normally, Git has to read the entries in this list and resolve any symlink that might be present in order to compare them with the current directory. However, if even this access is slow, you can add an empty entry to the list to tell Git that the subsequent entries are not symlinks and needn’t be resolved; e.g., <code>GIT_CEILING_DIRECTORIES=/maybe/symlink::/very/slow/non/symlink</code>.</p> </dd> <dt class=\"hdlist1\"><code>GIT_DISCOVERY_ACROSS_FILESYSTEM</code></dt> <dd> <p>When run in a directory that does not have \".git\" repository directory, Git tries to find such a directory in the parent directories to find the top of the working tree, but by default it does not cross filesystem boundaries. This environment variable can be set to true to tell Git not to stop at filesystem boundaries. Like <code>GIT_CEILING_DIRECTORIES</code>, this will not affect an explicit repository directory set via <code>GIT_DIR</code> or on the command line.</p> </dd> <dt class=\"hdlist1\"><code>GIT_COMMON_DIR</code></dt> <dd> <p>If this variable is set to a path, non-worktree files that are normally in $GIT_DIR will be taken from this path instead. Worktree-specific files such as HEAD or index are taken from $GIT_DIR. See <a href=\"gitrepository-layout\">gitrepository-layout[5]</a> and <a href=\"git-worktree\">git-worktree[1]</a> for details. This variable has lower precedence than other path variables such as GIT_INDEX_FILE, GIT_OBJECT_DIRECTORY…​</p> </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_git_commits\">Git Commits</h3> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>GIT_AUTHOR_NAME</code></dt> <dt class=\"hdlist1\"><code>GIT_AUTHOR_EMAIL</code></dt> <dt class=\"hdlist1\"><code>GIT_AUTHOR_DATE</code></dt> <dt class=\"hdlist1\"><code>GIT_COMMITTER_NAME</code></dt> <dt class=\"hdlist1\"><code>GIT_COMMITTER_EMAIL</code></dt> <dt class=\"hdlist1\"><code>GIT_COMMITTER_DATE</code></dt> <dt class=\"hdlist1\"><em>EMAIL</em></dt> <dd> <p>see <a href=\"git-commit-tree\">git-commit-tree[1]</a></p> </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_git_diffs\">Git Diffs</h3> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>GIT_DIFF_OPTS</code></dt> <dd> <p>Only valid setting is \"--unified=??\" or \"-u??\" to set the number of context lines shown when a unified diff is created. This takes precedence over any \"-U\" or \"--unified\" option value passed on the Git diff command line.</p> </dd> <dt class=\"hdlist1\"><code>GIT_EXTERNAL_DIFF</code></dt> <dd> <p>When the environment variable <code>GIT_EXTERNAL_DIFF</code> is set, the program named by it is called, instead of the diff invocation described above. For a path that is added, removed, or modified, <code>GIT_EXTERNAL_DIFF</code> is called with 7 parameters:</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>path old-file old-hex old-mode new-file new-hex new-mode</pre> </div> </div>  <p>where:</p>  </dd> <dt class=\"hdlist1\">&lt;old|new&gt;-file</dt> <dd> <p>are files GIT_EXTERNAL_DIFF can use to read the contents of &lt;old|new&gt;,</p> </dd> <dt class=\"hdlist1\">&lt;old|new&gt;-hex</dt> <dd> <p>are the 40-hexdigit SHA-1 hashes,</p> </dd> <dt class=\"hdlist1\">&lt;old|new&gt;-mode</dt> <dd> <p>are the octal representation of the file modes.</p>  <p>The file parameters can point at the user’s working file (e.g. <code>new-file</code> in \"git-diff-files\"), <code>/dev/null</code> (e.g. <code>old-file</code> when a new file is added), or a temporary file (e.g. <code>old-file</code> in the index). <code>GIT_EXTERNAL_DIFF</code> should not worry about unlinking the temporary file --- it is removed when <code>GIT_EXTERNAL_DIFF</code> exits.</p>   <p>For a path that is unmerged, <code>GIT_EXTERNAL_DIFF</code> is called with 1 parameter, &lt;path&gt;.</p>   <p>For each path <code>GIT_EXTERNAL_DIFF</code> is called, two environment variables, <code>GIT_DIFF_PATH_COUNTER</code> and <code>GIT_DIFF_PATH_TOTAL</code> are set.</p>  </dd> <dt class=\"hdlist1\"><code>GIT_DIFF_PATH_COUNTER</code></dt> <dd> <p>A 1-based counter incremented by one for every path.</p> </dd> <dt class=\"hdlist1\"><code>GIT_DIFF_PATH_TOTAL</code></dt> <dd> <p>The total number of paths.</p> </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_other\">other</h3> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>GIT_MERGE_VERBOSITY</code></dt> <dd> <p>A number controlling the amount of output shown by the recursive merge strategy. Overrides merge.verbosity. See <a href=\"git-merge\">git-merge[1]</a></p> </dd> <dt class=\"hdlist1\"><code>GIT_PAGER</code></dt> <dd> <p>This environment variable overrides <code>$PAGER</code>. If it is set to an empty string or to the value \"cat\", Git will not launch a pager. See also the <code>core.pager</code> option in <a href=\"git-config\">git-config[1]</a>.</p> </dd> <dt class=\"hdlist1\"><code>GIT_EDITOR</code></dt> <dd> <p>This environment variable overrides <code>$EDITOR</code> and <code>$VISUAL</code>. It is used by several Git commands when, on interactive mode, an editor is to be launched. See also <a href=\"git-var\">git-var[1]</a> and the <code>core.editor</code> option in <a href=\"git-config\">git-config[1]</a>.</p> </dd> <dt class=\"hdlist1\"><code>GIT_SSH</code></dt> <dt class=\"hdlist1\"><code>GIT_SSH_COMMAND</code></dt> <dd> <p>If either of these environment variables is set then <code>git fetch</code> and <code>git push</code> will use the specified command instead of <code>ssh</code> when they need to connect to a remote system. The command will be given exactly two or four arguments: the <code>username@host</code> (or just <code>host</code>) from the URL and the shell command to execute on that remote system, optionally preceded by <code>-p</code> (literally) and the <code>port</code> from the URL when it specifies something other than the default SSH port.</p>  <p><code>$GIT_SSH_COMMAND</code> takes precedence over <code>$GIT_SSH</code>, and is interpreted by the shell, which allows additional arguments to be included. <code>$GIT_SSH</code> on the other hand must be just the path to a program (which can be a wrapper shell script, if additional arguments are needed).</p>   <p>Usually it is easier to configure any desired options through your personal <code>.ssh/config</code> file. Please consult your ssh documentation for further details.</p>  </dd> <dt class=\"hdlist1\"><code>GIT_ASKPASS</code></dt> <dd> <p>If this environment variable is set, then Git commands which need to acquire passwords or passphrases (e.g. for HTTP or IMAP authentication) will call this program with a suitable prompt as command-line argument and read the password from its STDOUT. See also the <code>core.askPass</code> option in <a href=\"git-config\">git-config[1]</a>.</p> </dd> <dt class=\"hdlist1\"><code>GIT_TERMINAL_PROMPT</code></dt> <dd> <p>If this environment variable is set to <code>0</code>, git will not prompt on the terminal (e.g., when asking for HTTP authentication).</p> </dd> <dt class=\"hdlist1\"><code>GIT_CONFIG_NOSYSTEM</code></dt> <dd> <p>Whether to skip reading settings from the system-wide <code>$(prefix)/etc/gitconfig</code> file. This environment variable can be used along with <code>$HOME</code> and <code>$XDG_CONFIG_HOME</code> to create a predictable environment for a picky script, or you can set it temporarily to avoid using a buggy <code>/etc/gitconfig</code> file while waiting for someone with sufficient permissions to fix it.</p> </dd> <dt class=\"hdlist1\"><code>GIT_FLUSH</code></dt> <dd> <p>If this environment variable is set to \"1\", then commands such as <code>git blame</code> (in incremental mode), <code>git rev-list</code>, <code>git log</code>, <code>git check-attr</code> and <code>git check-ignore</code> will force a flush of the output stream after each record have been flushed. If this variable is set to \"0\", the output of these commands will be done using completely buffered I/O. If this environment variable is not set, Git will choose buffered or record-oriented flushing based on whether stdout appears to be redirected to a file or not.</p> </dd> <dt class=\"hdlist1\"><code>GIT_TRACE</code></dt> <dd> <p>Enables general trace messages, e.g. alias expansion, built-in command execution and external command execution.</p>  <p>If this variable is set to \"1\", \"2\" or \"true\" (comparison is case insensitive), trace messages will be printed to stderr.</p>   <p>If the variable is set to an integer value greater than 2 and lower than 10 (strictly) then Git will interpret this value as an open file descriptor and will try to write the trace messages into this file descriptor.</p>   <p>Alternatively, if the variable is set to an absolute path (starting with a <code>/</code> character), Git will interpret this as a file path and will try to write the trace messages into it.</p>   <p>Unsetting the variable, or setting it to empty, \"0\" or \"false\" (case insensitive) disables trace messages.</p>  </dd> <dt class=\"hdlist1\"><code>GIT_TRACE_PACK_ACCESS</code></dt> <dd> <p>Enables trace messages for all accesses to any packs. For each access, the pack file name and an offset in the pack is recorded. This may be helpful for troubleshooting some pack-related performance problems. See <code>GIT_TRACE</code> for available trace output options.</p> </dd> <dt class=\"hdlist1\"><code>GIT_TRACE_PACKET</code></dt> <dd> <p>Enables trace messages for all packets coming in or out of a given program. This can help with debugging object negotiation or other protocol issues. Tracing is turned off at a packet starting with \"PACK\" (but see <code>GIT_TRACE_PACKFILE</code> below). See <code>GIT_TRACE</code> for available trace output options.</p> </dd> <dt class=\"hdlist1\"><code>GIT_TRACE_PACKFILE</code></dt> <dd> <p>Enables tracing of packfiles sent or received by a given program. Unlike other trace output, this trace is verbatim: no headers, and no quoting of binary data. You almost certainly want to direct into a file (e.g., <code>GIT_TRACE_PACKFILE=/tmp/my.pack</code>) rather than displaying it on the terminal or mixing it with other trace output.</p>  <p>Note that this is currently only implemented for the client side of clones and fetches.</p>  </dd> <dt class=\"hdlist1\"><code>GIT_TRACE_PERFORMANCE</code></dt> <dd> <p>Enables performance related trace messages, e.g. total execution time of each Git command. See <code>GIT_TRACE</code> for available trace output options.</p> </dd> <dt class=\"hdlist1\"><code>GIT_TRACE_SETUP</code></dt> <dd> <p>Enables trace messages printing the .git, working tree and current working directory after Git has completed its setup phase. See <code>GIT_TRACE</code> for available trace output options.</p> </dd> <dt class=\"hdlist1\"><code>GIT_TRACE_SHALLOW</code></dt> <dd> <p>Enables trace messages that can help debugging fetching / cloning of shallow repositories. See <code>GIT_TRACE</code> for available trace output options.</p> </dd> <dt class=\"hdlist1\"><code>GIT_LITERAL_PATHSPECS</code></dt> <dd> <p>Setting this variable to <code>1</code> will cause Git to treat all pathspecs literally, rather than as glob patterns. For example, running <code>GIT_LITERAL_PATHSPECS=1 git log -- '*.c'</code> will search for commits that touch the path <code>*.c</code>, not any paths that the glob <code>*.c</code> matches. You might want this if you are feeding literal paths to Git (e.g., paths previously given to you by <code>git ls-tree</code>, <code>--raw</code> diff output, etc).</p> </dd> <dt class=\"hdlist1\"><code>GIT_GLOB_PATHSPECS</code></dt> <dd> <p>Setting this variable to <code>1</code> will cause Git to treat all pathspecs as glob patterns (aka \"glob\" magic).</p> </dd> <dt class=\"hdlist1\"><code>GIT_NOGLOB_PATHSPECS</code></dt> <dd> <p>Setting this variable to <code>1</code> will cause Git to treat all pathspecs as literal (aka \"literal\" magic).</p> </dd> <dt class=\"hdlist1\"><code>GIT_ICASE_PATHSPECS</code></dt> <dd> <p>Setting this variable to <code>1</code> will cause Git to treat all pathspecs as case-insensitive.</p> </dd> <dt class=\"hdlist1\"><code>GIT_REFLOG_ACTION</code></dt> <dd> <p>When a ref is updated, reflog entries are created to keep track of the reason why the ref was updated (which is typically the name of the high-level command that updated the ref), in addition to the old and new values of the ref. A scripted Porcelain command can use set_reflog_action helper function in <code>git-sh-setup</code> to set its name to this variable when it is invoked as the top level command by the end user, to be recorded in the body of the reflog.</p> </dd> <dt class=\"hdlist1\"><code>GIT_REF_PARANOIA</code></dt> <dd> <p>If set to <code>1</code>, include broken or badly named refs when iterating over lists of refs. In a normal, non-corrupted repository, this does nothing. However, enabling it may help git to detect and abort some operations in the presence of broken refs. Git sets this variable automatically when performing destructive operations like <a href=\"git-prune\">git-prune[1]</a>. You should not need to set it yourself unless you want to be paranoid about making sure an operation has touched every ref (e.g., because you are cloning a repository to make a backup).</p> </dd> <dt class=\"hdlist1\"><code>GIT_ALLOW_PROTOCOL</code></dt> <dd> <p>If set, provide a colon-separated list of protocols which are allowed to be used with fetch/push/clone. This is useful to restrict recursive submodule initialization from an untrusted repository. Any protocol not mentioned will be disallowed (i.e., this is a whitelist, not a blacklist). If the variable is not set at all, all protocols are enabled. The protocol names currently used by git are:</p> <div class=\"ulist\"> <ul> <li> <p><code>file</code>: any local file-based path (including <code>file://</code> URLs, or local paths)</p> </li> <li> <p><code>git</code>: the anonymous git protocol over a direct TCP connection (or proxy, if configured)</p> </li> <li> <p><code>ssh</code>: git over ssh (including <code>host:path</code> syntax, <code>ssh://</code>, etc).</p> </li> <li> <p><code>http</code>: git over http, both \"smart http\" and \"dumb http\". Note that this does <code>not</code> include <code>https</code>; if you want both, you should specify both as <code>http:https</code>.</p> </li> <li> <p>any external helpers are named by their protocol (e.g., use <code>hg</code> to allow the <code>git-remote-hg</code> helper)</p> </li> </ul> </div> </dd> </dl> </div> </div>\n</div>   <h2 id=\"_discussion_a_id_discussion_a\">Discussion</h2> <div class=\"sectionbody\"> <p>More detail on the following is available from the <a href=\"user-manual#git-concepts\">Git concepts chapter of the user-manual</a> and <a href=\"gitcore-tutorial\">gitcore-tutorial[7]</a>.</p>   <p>A Git project normally consists of a working directory with a \".git\" subdirectory at the top level. The .git directory contains, among other things, a compressed object database representing the complete history of the project, an \"index\" file which links that history to the current contents of the working tree, and named pointers into that history such as tags and branch heads.</p>   <p>The object database contains objects of three main types: blobs, which hold file data; trees, which point to blobs and other trees to build up directory hierarchies; and commits, which each reference a single tree and some number of parent commits.</p>   <p>The commit, equivalent to what other systems call a \"changeset\" or \"version\", represents a step in the project’s history, and each parent represents an immediately preceding step. Commits with more than one parent represent merges of independent lines of development.</p>   <p>All objects are named by the SHA-1 hash of their contents, normally written as a string of 40 hex digits. Such names are globally unique. The entire history leading up to a commit can be vouched for by signing just that commit. A fourth object type, the tag, is provided for this purpose.</p>   <p>When first created, objects are stored in individual files, but for efficiency may later be compressed together into \"pack files\".</p>   <p>Named pointers called refs mark interesting points in history. A ref may contain the SHA-1 name of an object or the name of another ref. Refs with names beginning <code>ref/head/</code> contain the SHA-1 name of the most recent commit (or \"head\") of a branch under development. SHA-1 names of tags of interest are stored under <code>ref/tags/</code>. A special ref named <code>HEAD</code> contains the name of the currently checked-out branch.</p>   <p>The index file is initialized with a list of all paths and, for each path, a blob object and a set of attributes. The blob object represents the contents of the file as of the head of the current branch. The attributes (last modified time, size, etc.) are taken from the corresponding file in the working tree. Subsequent changes to the working tree can be found by comparing these attributes. The index may be updated with new content, and new commits may be created from the content stored in the index.</p>   <p>The index is also capable of storing multiple entries (called \"stages\") for a given pathname. These stages are used to hold the various unmerged version of a file when a merge is in progress.</p> </div>   <h2 id=\"_further_documentation\">Further documentation</h2> <div class=\"sectionbody\"> <p>See the references in the \"description\" section to get started using Git. The following is probably more detail than necessary for a first-time user.</p>   <p>The <a href=\"user-manual#git-concepts\">Git concepts chapter of the user-manual</a> and <a href=\"gitcore-tutorial\">gitcore-tutorial[7]</a> both provide introductions to the underlying Git architecture.</p>   <p>See <a href=\"gitworkflows\">gitworkflows[7]</a> for an overview of recommended workflows.</p>   <p>See also the <a href=\"https://git-scm.com/docs/howto-index.html\">howto</a> documents for some useful examples.</p>   <p>The internals are documented in the <a href=\"https://git-scm.com/docs/technical/api-index.html\">Git API documentation</a>.</p>   <p>Users migrating from CVS may also want to read <a href=\"gitcvs-migration\">gitcvs-migration[7]</a>.</p> </div>   <h2 id=\"_authors\">Authors</h2> <div class=\"sectionbody\"> <p>Git was started by Linus Torvalds, and is currently maintained by Junio C Hamano. Numerous contributions have come from the Git mailing list &lt;<a href=\"mailto:git@vger.kernel.org\">git@vger.kernel.org</a>&gt;. <a href=\"http://www.openhub.net/p/git/contributors/summary\" class=\"bare\">http://www.openhub.net/p/git/contributors/summary</a> gives you a more complete list of contributors.</p>   <p>If you have a clone of git.git itself, the output of <a href=\"git-shortlog\">git-shortlog[1]</a> and <a href=\"git-blame\">git-blame[1]</a> can show you the authors for specific parts of the project.</p> </div>   <h2 id=\"_reporting_bugs\">Reporting bugs</h2> <div class=\"sectionbody\"> <p>Report bugs to the Git mailing list &lt;<a href=\"mailto:git@vger.kernel.org\">git@vger.kernel.org</a>&gt; where the development and maintenance is primarily done. You do not have to be subscribed to the list to send a message there.</p> </div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"gittutorial\">gittutorial[7]</a>, <a href=\"gittutorial-2\">gittutorial-2[7]</a>, <a href=\"giteveryday\">giteveryday[7]</a>, <a href=\"gitcvs-migration\">gitcvs-migration[7]</a>, <a href=\"gitglossary\">gitglossary[7]</a>, <a href=\"gitcore-tutorial\">gitcore-tutorial[7]</a>, <a href=\"gitcli\">gitcli[7]</a>, <a href=\"user-manual\">The Git User’s Manual</a>, <a href=\"gitworkflows\">gitworkflows[7]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git\" class=\"_attribution-link\">https://git-scm.com/docs/git</a>\n  </p>\n</div>\n","git-config":"<h1>git-config</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-config - Get and set repository or global options</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] name [value [value_regex]]\ngit config [&lt;file-option&gt;] [type] --add name value\ngit config [&lt;file-option&gt;] [type] --replace-all name value [value_regex]\ngit config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] --get name [value_regex]\ngit config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] --get-all name [value_regex]\ngit config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] [--name-only] --get-regexp name_regex [value_regex]\ngit config [&lt;file-option&gt;] [type] [-z|--null] --get-urlmatch name URL\ngit config [&lt;file-option&gt;] --unset name [value_regex]\ngit config [&lt;file-option&gt;] --unset-all name [value_regex]\ngit config [&lt;file-option&gt;] --rename-section old_name new_name\ngit config [&lt;file-option&gt;] --remove-section name\ngit config [&lt;file-option&gt;] [--show-origin] [-z|--null] [--name-only] -l | --list\ngit config [&lt;file-option&gt;] --get-color name [default]\ngit config [&lt;file-option&gt;] --get-colorbool name [stdout-is-tty]\ngit config [&lt;file-option&gt;] -e | --edit</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>You can query/set/replace/unset options with this command. The name is actually the section and the key separated by a dot, and the value will be escaped.</p>   <p>Multiple lines can be added to an option by using the <code>--add</code> option. If you want to update or unset an option which can occur on multiple lines, a POSIX regexp <code>value_regex</code> needs to be given. Only the existing values that match the regexp are updated or unset. If you want to handle the lines that do <strong>not</strong> match the regex, just prepend a single exclamation mark in front (see also <a href=\"#EXAMPLES\">EXAMPLES</a>).</p>   <p>The type specifier can be either <code>--int</code> or <code>--bool</code>, to make <code>git config</code> ensure that the variable(s) are of the given type and convert the value to the canonical form (simple decimal number for int, a \"true\" or \"false\" string for bool), or <code>--path</code>, which does some path expansion (see <code>--path</code> below). If no type specifier is passed, no checks or transformations are performed on the value.</p>   <p>When reading, the values are read from the system, global and repository local configuration files by default, and options <code>--system</code>, <code>--global</code>, <code>--local</code> and <code>--file &lt;filename&gt;</code> can be used to tell the command to read from only that location (see <a href=\"#FILES\">FILES</a>).</p>   <p>When writing, the new value is written to the repository local configuration file by default, and options <code>--system</code>, <code>--global</code>, <code>--file &lt;filename&gt;</code> can be used to tell the command to write to that location (you can say <code>--local</code> but that is the default).</p>   <p>This command will fail with non-zero status upon error. Some exit codes are:</p>  <div class=\"ulist\"> <ul> <li> <p>The section or key is invalid (ret=1),</p> </li> <li> <p>no section or name was provided (ret=2),</p> </li> <li> <p>the config file is invalid (ret=3),</p> </li> <li> <p>the config file cannot be written (ret=4),</p> </li> <li> <p>you try to unset an option which does not exist (ret=5),</p> </li> <li> <p>you try to unset/set an option for which multiple lines match (ret=5), or</p> </li> <li> <p>you try to use an invalid regexp (ret=6).</p> </li> </ul> </div>  <p>On success, the command returns the exit code 0.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--replace-all</dt> <dd> <p>Default behavior is to replace at most one line. This replaces all lines matching the key (and optionally the value_regex).</p> </dd> <dt class=\"hdlist1\">--add</dt> <dd> <p>Adds a new line to the option without altering any existing values. This is the same as providing <code>^$</code> as the value_regex in <code>--replace-all</code>.</p> </dd> <dt class=\"hdlist1\">--get</dt> <dd> <p>Get the value for a given key (optionally filtered by a regex matching the value). Returns error code 1 if the key was not found and the last value if multiple key values were found.</p> </dd> <dt class=\"hdlist1\">--get-all</dt> <dd> <p>Like get, but returns all values for a multi-valued key.</p> </dd> <dt class=\"hdlist1\">--get-regexp</dt> <dd> <p>Like --get-all, but interprets the name as a regular expression and writes out the key names. Regular expression matching is currently case-sensitive and done against a canonicalized version of the key in which section and variable names are lowercased, but subsection names are not.</p> </dd> <dt class=\"hdlist1\">--get-urlmatch name URL</dt> <dd> <p>When given a two-part name section.key, the value for section.&lt;url&gt;.key whose &lt;url&gt; part matches the best to the given URL is returned (if no such key exists, the value for section.key is used as a fallback). When given just the section as name, do so for all the keys in the section and list them. Returns error code 1 if no value is found.</p> </dd> <dt class=\"hdlist1\">--global</dt> <dd> <p>For writing options: write to global <code>~/.gitconfig</code> file rather than the repository <code>.git/config</code>, write to <code>$XDG_CONFIG_HOME/git/config</code> file if this file exists and the <code>~/.gitconfig</code> file doesn’t.</p>  <p>For reading options: read only from global <code>~/.gitconfig</code> and from <code>$XDG_CONFIG_HOME/git/config</code> rather than from all available files.</p>   <p>See also <a href=\"#FILES\">FILES</a>.</p>  </dd> <dt class=\"hdlist1\">--system</dt> <dd> <p>For writing options: write to system-wide <code>$(prefix)/etc/gitconfig</code> rather than the repository <code>.git/config</code>.</p>  <p>For reading options: read only from system-wide <code>$(prefix)/etc/gitconfig</code> rather than from all available files.</p>   <p>See also <a href=\"#FILES\">FILES</a>.</p>  </dd> <dt class=\"hdlist1\">--local</dt> <dd> <p>For writing options: write to the repository <code>.git/config</code> file. This is the default behavior.</p>  <p>For reading options: read only from the repository <code>.git/config</code> rather than from all available files.</p>   <p>See also <a href=\"#FILES\">FILES</a>.</p>  </dd> <dt class=\"hdlist1\">-f config-file</dt> <dt class=\"hdlist1\">--file config-file</dt> <dd> <p>Use the given config file instead of the one specified by GIT_CONFIG.</p> </dd> <dt class=\"hdlist1\">--blob blob</dt> <dd> <p>Similar to <code>--file</code> but use the given blob instead of a file. E.g. you can use <code>master:.gitmodules</code> to read values from the file <code>.gitmodules</code> in the master branch. See \"SPECIFYING REVISIONS\" section in <a href=\"gitrevisions\">gitrevisions[7]</a> for a more complete list of ways to spell blob names.</p> </dd> <dt class=\"hdlist1\">--remove-section</dt> <dd> <p>Remove the given section from the configuration file.</p> </dd> <dt class=\"hdlist1\">--rename-section</dt> <dd> <p>Rename the given section to a new name.</p> </dd> <dt class=\"hdlist1\">--unset</dt> <dd> <p>Remove the line matching the key from config file.</p> </dd> <dt class=\"hdlist1\">--unset-all</dt> <dd> <p>Remove all lines matching the key from config file.</p> </dd> <dt class=\"hdlist1\">-l</dt> <dt class=\"hdlist1\">--list</dt> <dd> <p>List all variables set in config file, along with their values.</p> </dd> <dt class=\"hdlist1\">--bool</dt> <dd> <p><code>git config</code> will ensure that the output is \"true\" or \"false\"</p> </dd> <dt class=\"hdlist1\">--int</dt> <dd> <p><code>git config</code> will ensure that the output is a simple decimal number. An optional value suffix of <code>k</code>, <code>m</code>, or <code>g</code> in the config file will cause the value to be multiplied by 1024, 1048576, or 1073741824 prior to output.</p> </dd> <dt class=\"hdlist1\">--bool-or-int</dt> <dd> <p><code>git config</code> will ensure that the output matches the format of either --bool or --int, as described above.</p> </dd> <dt class=\"hdlist1\">--path</dt> <dd> <p><code>git-config</code> will expand leading <code>~</code> to the value of <code>$HOME</code>, and <code>~user</code> to the home directory for the specified user. This option has no effect when setting the value (but you can use <code>git config bla ~/</code> from the command line to let your shell do the expansion).</p> </dd> <dt class=\"hdlist1\">-z</dt> <dt class=\"hdlist1\">--null</dt> <dd> <p>For all options that output values and/or keys, always end values with the null character (instead of a newline). Use newline instead as a delimiter between key and value. This allows for secure parsing of the output without getting confused e.g. by values that contain line breaks.</p> </dd> <dt class=\"hdlist1\">--name-only</dt> <dd> <p>Output only the names of config variables for <code>--list</code> or <code>--get-regexp</code>.</p> </dd> <dt class=\"hdlist1\">--show-origin</dt> <dd> <p>Augment the output of all queried config options with the origin type (file, standard input, blob, command line) and the actual origin (config file path, ref, or blob id if applicable).</p> </dd> <dt class=\"hdlist1\">--get-colorbool name [stdout-is-tty]</dt> <dd> <p>Find the color setting for <code>name</code> (e.g. <code>color.diff</code>) and output \"true\" or \"false\". <code>stdout-is-tty</code> should be either \"true\" or \"false\", and is taken into account when configuration says \"auto\". If <code>stdout-is-tty</code> is missing, then checks the standard output of the command itself, and exits with status 0 if color is to be used, or exits with status 1 otherwise. When the color setting for <code>name</code> is undefined, the command uses <code>color.ui</code> as fallback.</p> </dd> <dt class=\"hdlist1\">--get-color name [default]</dt> <dd> <p>Find the color configured for <code>name</code> (e.g. <code>color.diff.new</code>) and output it as the ANSI color escape sequence to the standard output. The optional <code>default</code> parameter is used instead, if there is no color configured for <code>name</code>.</p> </dd> <dt class=\"hdlist1\">-e</dt> <dt class=\"hdlist1\">--edit</dt> <dd> <p>Opens an editor to modify the specified config file; either <code>--system</code>, <code>--global</code>, or repository (default).</p> </dd> <dt class=\"hdlist1\">--[no-]includes</dt> <dd> <p>Respect <code>include.*</code> directives in config files when looking up values. Defaults to <code>off</code> when a specific file is given (e.g., using <code>--file</code>, <code>--global</code>, etc) and <code>on</code> when searching all config files.</p> </dd> </dl> </div></div>   <h2 id=\"FILES\">Files</h2> <div class=\"sectionbody\"> <p>If not set explicitly with <code>--file</code>, there are four files where <code>git config</code> will search for configuration options:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">$(prefix)/etc/gitconfig</dt> <dd> <p>System-wide configuration file.</p> </dd> <dt class=\"hdlist1\">$XDG_CONFIG_HOME/git/config</dt> <dd> <p>Second user-specific configuration file. If $XDG_CONFIG_HOME is not set or empty, <code>$HOME/.config/git/config</code> will be used. Any single-valued variable set in this file will be overwritten by whatever is in <code>~/.gitconfig</code>. It is a good idea not to create this file if you sometimes use older versions of Git, as support for this file was added fairly recently.</p> </dd> <dt class=\"hdlist1\">~/.gitconfig</dt> <dd> <p>User-specific configuration file. Also called \"global\" configuration file.</p> </dd> <dt class=\"hdlist1\">$GIT_DIR/config</dt> <dd> <p>Repository specific configuration file.</p> </dd> </dl> </div>  <p>If no further options are given, all reading options will read all of these files that are available. If the global or the system-wide configuration file are not available they will be ignored. If the repository configuration file is not available or readable, <code>git config</code> will exit with a non-zero error code. However, in neither case will an error message be issued.</p>   <p>The files are read in the order given above, with last value found taking precedence over values read earlier. When multiple values are taken then all values of a key from all files will be used.</p>   <p>All writing options will per default write to the repository specific configuration file. Note that this also affects options like <code>--replace-all</code> and <code>--unset</code>. <strong><em>git config</em> will only ever change one file at a time</strong>.</p>   <p>You can override these rules either by command-line options or by environment variables. The <code>--global</code> and the <code>--system</code> options will limit the file used to the global or system-wide file respectively. The <code>GIT_CONFIG</code> environment variable has a similar effect, but you can specify any filename you want.</p> </div>   <h2 id=\"_environment\">Environment</h2> <div class=\"sectionbody\">\n<div class=\"dlist\"> <dl> <dt class=\"hdlist1\">GIT_CONFIG</dt> <dd> <p>Take the configuration from the given file instead of .git/config. Using the \"--global\" option forces this to ~/.gitconfig. Using the \"--system\" option forces this to $(prefix)/etc/gitconfig.</p> </dd> <dt class=\"hdlist1\">GIT_CONFIG_NOSYSTEM</dt> <dd> <p>Whether to skip reading settings from the system-wide $(prefix)/etc/gitconfig file. See <a href=\"git\">git[1]</a> for details.</p> </dd> </dl> </div>  <p>See also <a href=\"#FILES\">FILES</a>.</p> </div>   <h2 id=\"EXAMPLES\">Examples</h2> <div class=\"sectionbody\"> <p>Given a .git/config like this:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>#\n# This is the config file, and\n# a '#' or ';' character indicates\n# a comment\n#</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>; core variables\n[core]\n    ; Don't trust file modes\n    filemode = false</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>; Our diff algorithm\n[diff]\n    external = /usr/local/bin/diff-wrapper\n    renames = true</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>; Proxy settings\n[core]\n    gitproxy=proxy-command for kernel.org\n    gitproxy=default-proxy ; for all the rest</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>; HTTP\n[http]\n    sslVerify\n[http \"https://weak.example.com\"]\n    sslVerify = false\n    cookieFile = /tmp/cookie.txt</pre> </div> </div>  <p>you can set the filemode to true with</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>% git config core.filemode true</pre> </div> </div>  <p>The hypothetical proxy command entries actually have a postfix to discern what URL they apply to. Here is how to change the entry for kernel.org to \"ssh\".</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>% git config core.gitproxy '\"ssh\" for kernel.org' 'for kernel.org$'</pre> </div> </div>  <p>This makes sure that only the key/value pair for kernel.org is replaced.</p>   <p>To delete the entry for renames, do</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>% git config --unset diff.renames</pre> </div> </div>  <p>If you want to delete an entry for a multivar (like core.gitproxy above), you have to provide a regex matching the value of exactly one line.</p>   <p>To query the value for a given key, do</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>% git config --get core.filemode</pre> </div> </div>  <p>or</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>% git config core.filemode</pre> </div> </div>  <p>or, to query a multivar:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>% git config --get core.gitproxy \"for kernel.org$\"</pre> </div> </div>  <p>If you want to know all the values for a multivar, do:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>% git config --get-all core.gitproxy</pre> </div> </div>  <p>If you like to live dangerously, you can replace <strong>all</strong> core.gitproxy by a new one with</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>% git config --replace-all core.gitproxy ssh</pre> </div> </div>  <p>However, if you really only want to replace the line for the default proxy, i.e. the one without a \"for …​\" postfix, do something like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>% git config core.gitproxy ssh '! for '</pre> </div> </div>  <p>To actually match only values with an exclamation mark, you have to</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>% git config section.key value '[!]'</pre> </div> </div>  <p>To add a new proxy, without altering any of the existing ones, use</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>% git config --add core.gitproxy '\"proxy-command\" for example.com'</pre> </div> </div>  <p>An example to use customized color from the configuration in your script:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>#!/bin/sh\nWS=$(git config --get-color color.diff.whitespace \"blue reverse\")\nRESET=$(git config --get-color \"\" \"reset\")\necho \"${WS}your whitespace color or blue reverse${RESET}\"</pre> </div> </div>  <p>For URLs in <code>https://weak.example.com</code>, <code>http.sslVerify</code> is set to false, while it is set to <code>true</code> for all others:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>% git config --bool --get-urlmatch http.sslverify https://good.example.com\ntrue\n% git config --bool --get-urlmatch http.sslverify https://weak.example.com\nfalse\n% git config --get-urlmatch http https://weak.example.com\nhttp.cookieFile /tmp/cookie.txt\nhttp.sslverify false</pre> </div> </div>\n</div>   <h2 id=\"_configuration_file\">Configuration file</h2> <div class=\"sectionbody\"> <p>The Git configuration file contains a number of variables that affect the Git commands' behavior. The <code>.git/config</code> file in each repository is used to store the configuration for that repository, and <code>$HOME/.gitconfig</code> is used to store a per-user configuration as fallback values for the <code>.git/config</code> file. The file <code>/etc/gitconfig</code> can be used to store a system-wide default configuration.</p>   <p>The configuration variables are used by both the Git plumbing and the porcelains. The variables are divided into sections, wherein the fully qualified variable name of the variable itself is the last dot-separated segment and the section name is everything before the last dot. The variable names are case-insensitive, allow only alphanumeric characters and <code>-</code>, and must start with an alphabetic character. Some variables may appear multiple times; we say then that the variable is multivalued.</p>  <div class=\"sect2\"> <h3 id=\"_syntax\">Syntax</h3>  <p>The syntax is fairly flexible and permissive; whitespaces are mostly ignored. The <code>#</code> and <code>;</code> characters begin comments to the end of line, blank lines are ignored.</p>   <p>The file consists of sections and variables. A section begins with the name of the section in square brackets and continues until the next section begins. Section names are case-insensitive. Only alphanumeric characters, <code>-</code> and <code>.</code> are allowed in section names. Each variable must belong to some section, which means that there must be a section header before the first setting of a variable.</p>   <p>Sections can be further divided into subsections. To begin a subsection put its name in double quotes, separated by space from the section name, in the section header, like in the example below:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        [section \"subsection\"]</pre> </div> </div>  <p>Subsection names are case sensitive and can contain any characters except newline (doublequote <code>\"</code> and backslash can be included by escaping them as <code>\\\"</code> and <code>\\\\</code>, respectively). Section headers cannot span multiple lines. Variables may belong directly to a section or to a given subsection. You can have <code>[section]</code> if you have <code>[section \"subsection\"]</code>, but you don’t need to.</p>   <p>There is also a deprecated <code>[section.subsection]</code> syntax. With this syntax, the subsection name is converted to lower-case and is also compared case sensitively. These subsection names follow the same restrictions as section names.</p>   <p>All the other lines (and the remainder of the line after the section header) are recognized as setting variables, in the form <code>name = value</code> (or just <code>name</code>, which is a short-hand to say that the variable is the boolean \"true\"). The variable names are case-insensitive, allow only alphanumeric characters and <code>-</code>, and must start with an alphabetic character.</p>   <p>A line that defines a value can be continued to the next line by ending it with a <code>\\</code>; the backquote and the end-of-line are stripped. Leading whitespaces after <code>name =</code>, the remainder of the line after the first comment character <code>#</code> or <code>;</code>, and trailing whitespaces of the line are discarded unless they are enclosed in double quotes. Internal whitespaces within the value are retained verbatim.</p>   <p>Inside double quotes, double quote <code>\"</code> and backslash <code>\\</code> characters must be escaped: use <code>\\\"</code> for <code>\"</code> and <code>\\\\</code> for <code>\\</code>.</p>   <p>The following escape sequences (beside <code>\\\"</code> and <code>\\\\</code>) are recognized: <code>\\n</code> for newline character (NL), <code>\\t</code> for horizontal tabulation (HT, TAB) and <code>\\b</code> for backspace (BS). Other char escape sequences (including octal escape sequences) are invalid.</p>  </div> <div class=\"sect2\"> <h3 id=\"_includes\">Includes</h3>  <p>You can include one config file from another by setting the special <code>include.path</code> variable to the name of the file to be included. The variable takes a pathname as its value, and is subject to tilde expansion.</p>   <p>The included file is expanded immediately, as if its contents had been found at the location of the include directive. If the value of the <code>include.path</code> variable is a relative path, the path is considered to be relative to the configuration file in which the include directive was found. See below for examples.</p>  </div> <div class=\"sect2\"> <h3 id=\"_example\">Example</h3> <div class=\"literalblock\"> <div class=\"content\"> <pre># Core variables\n[core]\n    ; Don't trust file modes\n    filemode = false</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre># Our diff algorithm\n[diff]\n    external = /usr/local/bin/diff-wrapper\n    renames = true</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>[branch \"devel\"]\n    remote = origin\n    merge = refs/heads/devel</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre># Proxy settings\n[core]\n    gitProxy=\"ssh\" for \"kernel.org\"\n    gitProxy=default-proxy ; for the rest</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>[include]\n    path = /path/to/foo.inc ; include by absolute path\n    path = foo ; expand \"foo\" relative to the current file\n    path = ~/foo ; expand \"foo\" in your `$HOME` directory</pre> </div> </div> </div> <div class=\"sect2\"> <h3 id=\"_values\">Values</h3>  <p>Values of many variables are treated as a simple string, but there are variables that take values of specific types and there are rules as to how to spell them.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">boolean</dt> <dd> <p>When a variable is said to take a boolean value, many synonyms are accepted for <code>true</code> and <code>false</code>; these are all case-insensitive.</p> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">true</dt> <dd> <p>Boolean true can be spelled as <code>yes</code>, <code>on</code>, <code>true</code>, or <code>1</code>. Also, a variable defined without <code>= &lt;value&gt;</code> is taken as true.</p> </dd> <dt class=\"hdlist1\">false</dt> <dd> <p>Boolean false can be spelled as <code>no</code>, <code>off</code>, <code>false</code>, or <code>0</code>.</p>  <p>When converting value to the canonical form using <code>--bool</code> type specifier; <code>git config</code> will ensure that the output is \"true\" or \"false\" (spelled in lowercase).</p>  </dd> </dl> </div> </dd> <dt class=\"hdlist1\">integer</dt> <dd> <p>The value for many variables that specify various sizes can be suffixed with <code>k</code>, <code>M</code>,…​ to mean \"scale the number by 1024\", \"by 1024x1024\", etc.</p> </dd> <dt class=\"hdlist1\">color</dt> <dd> <p>The value for a variables that takes a color is a list of colors (at most two) and attributes (at most one), separated by spaces. The colors accepted are <code>normal</code>, <code>black</code>, <code>red</code>, <code>green</code>, <code>yellow</code>, <code>blue</code>, <code>magenta</code>, <code>cyan</code> and <code>white</code>; the attributes are <code>bold</code>, <code>dim</code>, <code>ul</code>, <code>blink</code> and <code>reverse</code>. The first color given is the foreground; the second is the background. The position of the attribute, if any, doesn’t matter. Attributes may be turned off specifically by prefixing them with <code>no</code> (e.g., <code>noreverse</code>, <code>noul</code>, etc).</p>  <p>Colors (foreground and background) may also be given as numbers between 0 and 255; these use ANSI 256-color mode (but note that not all terminals may support this). If your terminal supports it, you may also specify 24-bit RGB values as hex, like <code>#ff0ab3</code>.</p>   <p>The attributes are meant to be reset at the beginning of each item in the colored output, so setting color.decorate.branch to <code>black</code> will paint that branch name in a plain <code>black</code>, even if the previous thing on the same output line (e.g. opening parenthesis before the list of branch names in <code>log --decorate</code> output) is set to be painted with <code>bold</code> or some other attribute.</p>  </dd> <dt class=\"hdlist1\">pathname</dt> <dd> <p>A variable that takes a pathname value can be given a string that begins with \"<code>~/</code>\" or \"<code>~user/</code>\", and the usual tilde expansion happens to such a string: <code>~/</code> is expanded to the value of <code>$HOME</code>, and <code>~user/</code> to the specified user’s home directory.</p> </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_variables\">Variables</h3>  <p>Note that this list is non-comprehensive and not necessarily complete. For command-specific variables, you will find a more detailed description in the appropriate manual page.</p>   <p>Other git-related tools may and do use their own variables. When inventing new variables for use in your own tool, make sure their names do not conflict with those that are used by Git itself and other popular tools, and describe them in your documentation.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">advice.*</dt> <dd> <p>These variables control various optional help messages designed to aid new users. All <code>advice.*</code> variables default to <code>true</code>, and you can tell Git that you do not need help by setting these to <code>false</code>:</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">pushUpdateRejected</dt> <dd> <p>Set this variable to <code>false</code> if you want to disable <code>pushNonFFCurrent</code>, <code>pushNonFFMatching</code>, <code>pushAlreadyExists</code>, <code>pushFetchFirst</code>, and <code>pushNeedsForce</code> simultaneously.</p> </dd> <dt class=\"hdlist1\">pushNonFFCurrent</dt> <dd> <p>Advice shown when <a href=\"git-push\">git-push[1]</a> fails due to a non-fast-forward update to the current branch.</p> </dd> <dt class=\"hdlist1\">pushNonFFMatching</dt> <dd> <p>Advice shown when you ran <a href=\"git-push\">git-push[1]</a> and pushed <code>matching refs</code> explicitly (i.e. you used <code>:</code>, or specified a refspec that isn’t your current branch) and it resulted in a non-fast-forward error.</p> </dd> <dt class=\"hdlist1\">pushAlreadyExists</dt> <dd> <p>Shown when <a href=\"git-push\">git-push[1]</a> rejects an update that does not qualify for fast-forwarding (e.g., a tag.)</p> </dd> <dt class=\"hdlist1\">pushFetchFirst</dt> <dd> <p>Shown when <a href=\"git-push\">git-push[1]</a> rejects an update that tries to overwrite a remote ref that points at an object we do not have.</p> </dd> <dt class=\"hdlist1\">pushNeedsForce</dt> <dd> <p>Shown when <a href=\"git-push\">git-push[1]</a> rejects an update that tries to overwrite a remote ref that points at an object that is not a commit-ish, or make the remote ref point at an object that is not a commit-ish.</p> </dd> <dt class=\"hdlist1\">statusHints</dt> <dd> <p>Show directions on how to proceed from the current state in the output of <a href=\"git-status\">git-status[1]</a>, in the template shown when writing commit messages in <a href=\"git-commit\">git-commit[1]</a>, and in the help message shown by <a href=\"git-checkout\">git-checkout[1]</a> when switching branch.</p> </dd> <dt class=\"hdlist1\">statusUoption</dt> <dd> <p>Advise to consider using the <code>-u</code> option to <a href=\"git-status\">git-status[1]</a> when the command takes more than 2 seconds to enumerate untracked files.</p> </dd> <dt class=\"hdlist1\">commitBeforeMerge</dt> <dd> <p>Advice shown when <a href=\"git-merge\">git-merge[1]</a> refuses to merge to avoid overwriting local changes.</p> </dd> <dt class=\"hdlist1\">resolveConflict</dt> <dd> <p>Advice shown by various commands when conflicts prevent the operation from being performed.</p> </dd> <dt class=\"hdlist1\">implicitIdentity</dt> <dd> <p>Advice on how to set your identity configuration when your information is guessed from the system username and domain name.</p> </dd> <dt class=\"hdlist1\">detachedHead</dt> <dd> <p>Advice shown when you used <a href=\"git-checkout\">git-checkout[1]</a> to move to the detach HEAD state, to instruct how to create a local branch after the fact.</p> </dd> <dt class=\"hdlist1\">amWorkDir</dt> <dd> <p>Advice that shows the location of the patch file when <a href=\"git-am\">git-am[1]</a> fails to apply it.</p> </dd> <dt class=\"hdlist1\">rmHints</dt> <dd> <p>In case of failure in the output of <a href=\"git-rm\">git-rm[1]</a>, show directions on how to proceed from the current state.</p> </dd> </dl> </div> </div> </div> </dd> <dt class=\"hdlist1\">core.fileMode</dt> <dd> <p>Tells Git if the executable bit of files in the working tree is to be honored.</p>  <p>Some filesystems lose the executable bit when a file that is marked as executable is checked out, or checks out an non-executable file with executable bit on. <a href=\"git-clone\">git-clone[1]</a> or <a href=\"git-init\">git-init[1]</a> probe the filesystem to see if it handles the executable bit correctly and this variable is automatically set as necessary.</p>   <p>A repository, however, may be on a filesystem that handles the filemode correctly, and this variable is set to <code>true</code> when created, but later may be made accessible from another environment that loses the filemode (e.g. exporting ext4 via CIFS mount, visiting a Cygwin created repository with Git for Windows or Eclipse). In such a case it may be necessary to set this variable to <code>false</code>. See <a href=\"git-update-index\">git-update-index[1]</a>.</p>   <p>The default is true (when core.filemode is not specified in the config file).</p>  </dd> <dt class=\"hdlist1\">core.hideDotFiles</dt> <dd> <p>(Windows-only) If true, mark newly-created directories and files whose name starts with a dot as hidden. If <code>dotGitOnly</code>, only the <code>.git/</code> directory is hidden, but no other files starting with a dot. The default mode is <code>dotGitOnly</code>.</p> </dd> <dt class=\"hdlist1\">core.ignoreCase</dt> <dd> <p>If true, this option enables various workarounds to enable Git to work better on filesystems that are not case sensitive, like FAT. For example, if a directory listing finds \"makefile\" when Git expects \"Makefile\", Git will assume it is really the same file, and continue to remember it as \"Makefile\".</p>  <p>The default is false, except <a href=\"git-clone\">git-clone[1]</a> or <a href=\"git-init\">git-init[1]</a> will probe and set core.ignoreCase true if appropriate when the repository is created.</p>  </dd> <dt class=\"hdlist1\">core.precomposeUnicode</dt> <dd> <p>This option is only used by Mac OS implementation of Git. When core.precomposeUnicode=true, Git reverts the unicode decomposition of filenames done by Mac OS. This is useful when sharing a repository between Mac OS and Linux or Windows. (Git for Windows 1.7.10 or higher is needed, or Git under cygwin 1.7). When false, file names are handled fully transparent by Git, which is backward compatible with older versions of Git.</p> </dd> <dt class=\"hdlist1\">core.protectHFS</dt> <dd> <p>If set to true, do not allow checkout of paths that would be considered equivalent to <code>.git</code> on an HFS+ filesystem. Defaults to <code>true</code> on Mac OS, and <code>false</code> elsewhere.</p> </dd> <dt class=\"hdlist1\">core.protectNTFS</dt> <dd> <p>If set to true, do not allow checkout of paths that would cause problems with the NTFS filesystem, e.g. conflict with 8.3 \"short\" names. Defaults to <code>true</code> on Windows, and <code>false</code> elsewhere.</p> </dd> <dt class=\"hdlist1\">core.trustctime</dt> <dd> <p>If false, the ctime differences between the index and the working tree are ignored; useful when the inode change time is regularly modified by something outside Git (file system crawlers and some backup systems). See <a href=\"git-update-index\">git-update-index[1]</a>. True by default.</p> </dd> <dt class=\"hdlist1\">core.untrackedCache</dt> <dd> <p>Determines what to do about the untracked cache feature of the index. It will be kept, if this variable is unset or set to <code>keep</code>. It will automatically be added if set to <code>true</code>. And it will automatically be removed, if set to <code>false</code>. Before setting it to <code>true</code>, you should check that mtime is working properly on your system. See <a href=\"git-update-index\">git-update-index[1]</a>. <code>keep</code> by default.</p> </dd> <dt class=\"hdlist1\">core.checkStat</dt> <dd> <p>Determines which stat fields to match between the index and work tree. The user can set this to <code>default</code> or <code>minimal</code>. Default (or explicitly <code>default</code>), is to check all fields, including the sub-second part of mtime and ctime.</p> </dd> <dt class=\"hdlist1\">core.quotePath</dt> <dd> <p>The commands that output paths (e.g. <code>ls-files</code>, <code>diff</code>), when not given the <code>-z</code> option, will quote \"unusual\" characters in the pathname by enclosing the pathname in a double-quote pair and with backslashes the same way strings in C source code are quoted. If this variable is set to false, the bytes higher than 0x80 are not quoted but output as verbatim. Note that double quote, backslash and control characters are always quoted without <code>-z</code> regardless of the setting of this variable.</p> </dd> <dt class=\"hdlist1\">core.eol</dt> <dd> <p>Sets the line ending type to use in the working directory for files that have the <code>text</code> property set when core.autocrlf is false. Alternatives are <code>lf</code>, <code>crlf</code> and <code>native</code>, which uses the platform’s native line ending. The default value is <code>native</code>. See <a href=\"gitattributes\">gitattributes[5]</a> for more information on end-of-line conversion.</p> </dd> <dt class=\"hdlist1\">core.safecrlf</dt> <dd> <p>If true, makes Git check if converting <code>CRLF</code> is reversible when end-of-line conversion is active. Git will verify if a command modifies a file in the work tree either directly or indirectly. For example, committing a file followed by checking out the same file should yield the original file in the work tree. If this is not the case for the current setting of <code>core.autocrlf</code>, Git will reject the file. The variable can be set to \"warn\", in which case Git will only warn about an irreversible conversion but continue the operation.</p>  <p>CRLF conversion bears a slight chance of corrupting data. When it is enabled, Git will convert CRLF to LF during commit and LF to CRLF during checkout. A file that contains a mixture of LF and CRLF before the commit cannot be recreated by Git. For text files this is the right thing to do: it corrects line endings such that we have only LF line endings in the repository. But for binary files that are accidentally classified as text the conversion can corrupt data.</p>   <p>If you recognize such corruption early you can easily fix it by setting the conversion type explicitly in .gitattributes. Right after committing you still have the original file in your work tree and this file is not yet corrupted. You can explicitly tell Git that this file is binary and Git will handle the file appropriately.</p>   <p>Unfortunately, the desired effect of cleaning up text files with mixed line endings and the undesired effect of corrupting binary files cannot be distinguished. In both cases CRLFs are removed in an irreversible way. For text files this is the right thing to do because CRLFs are line endings, while for binary files converting CRLFs corrupts data.</p>   <p>Note, this safety check does not mean that a checkout will generate a file identical to the original file for a different setting of <code>core.eol</code> and <code>core.autocrlf</code>, but only for the current one. For example, a text file with <code>LF</code> would be accepted with <code>core.eol=lf</code> and could later be checked out with <code>core.eol=crlf</code>, in which case the resulting file would contain <code>CRLF</code>, although the original file contained <code>LF</code>. However, in both work trees the line endings would be consistent, that is either all <code>LF</code> or all <code>CRLF</code>, but never mixed. A file with mixed line endings would be reported by the <code>core.safecrlf</code> mechanism.</p>  </dd> <dt class=\"hdlist1\">core.autocrlf</dt> <dd> <p>Setting this variable to \"true\" is almost the same as setting the <code>text</code> attribute to \"auto\" on all files except that text files are not guaranteed to be normalized: files that contain <code>CRLF</code> in the repository will not be touched. Use this setting if you want to have <code>CRLF</code> line endings in your working directory even though the repository does not have normalized line endings. This variable can be set to <code>input</code>, in which case no output conversion is performed.</p> </dd> <dt class=\"hdlist1\">core.symlinks</dt> <dd> <p>If false, symbolic links are checked out as small plain files that contain the link text. <a href=\"git-update-index\">git-update-index[1]</a> and <a href=\"git-add\">git-add[1]</a> will not change the recorded type to regular file. Useful on filesystems like FAT that do not support symbolic links.</p>  <p>The default is true, except <a href=\"git-clone\">git-clone[1]</a> or <a href=\"git-init\">git-init[1]</a> will probe and set core.symlinks false if appropriate when the repository is created.</p>  </dd> <dt class=\"hdlist1\">core.gitProxy</dt> <dd> <p>A \"proxy command\" to execute (as <code>command host port</code>) instead of establishing direct connection to the remote server when using the Git protocol for fetching. If the variable value is in the \"COMMAND for DOMAIN\" format, the command is applied only on hostnames ending with the specified domain string. This variable may be set multiple times and is matched in the given order; the first match wins.</p>  <p>Can be overridden by the <code>GIT_PROXY_COMMAND</code> environment variable (which always applies universally, without the special \"for\" handling).</p>   <p>The special string <code>none</code> can be used as the proxy command to specify that no proxy be used for a given domain pattern. This is useful for excluding servers inside a firewall from proxy use, while defaulting to a common proxy for external domains.</p>  </dd> <dt class=\"hdlist1\">core.ignoreStat</dt> <dd> <p>If true, Git will avoid using lstat() calls to detect if files have changed by setting the \"assume-unchanged\" bit for those tracked files which it has updated identically in both the index and working tree.</p>  <p>When files are modified outside of Git, the user will need to stage the modified files explicitly (e.g. see <code>Examples</code> section in <a href=\"git-update-index\">git-update-index[1]</a>). Git will not normally detect changes to those files.</p>   <p>This is useful on systems where lstat() calls are very slow, such as CIFS/Microsoft Windows.</p>   <p>False by default.</p>  </dd> <dt class=\"hdlist1\">core.preferSymlinkRefs</dt> <dd> <p>Instead of the default \"symref\" format for HEAD and other symbolic reference files, use symbolic links. This is sometimes needed to work with old scripts that expect HEAD to be a symbolic link.</p> </dd> <dt class=\"hdlist1\">core.bare</dt> <dd> <p>If true this repository is assumed to be <code>bare</code> and has no working directory associated with it. If this is the case a number of commands that require a working directory will be disabled, such as <a href=\"git-add\">git-add[1]</a> or <a href=\"git-merge\">git-merge[1]</a>.</p>  <p>This setting is automatically guessed by <a href=\"git-clone\">git-clone[1]</a> or <a href=\"git-init\">git-init[1]</a> when the repository was created. By default a repository that ends in \"/.git\" is assumed to be not bare (bare = false), while all other repositories are assumed to be bare (bare = true).</p>  </dd> <dt class=\"hdlist1\">core.worktree</dt> <dd> <p>Set the path to the root of the working tree. If <code>GIT_COMMON_DIR</code> environment variable is set, core.worktree is ignored and not used for determining the root of working tree. This can be overridden by the <code>GIT_WORK_TREE</code> environment variable and the <code>--work-tree</code> command-line option. The value can be an absolute path or relative to the path to the .git directory, which is either specified by --git-dir or GIT_DIR, or automatically discovered. If --git-dir or GIT_DIR is specified but none of --work-tree, GIT_WORK_TREE and core.worktree is specified, the current working directory is regarded as the top level of your working tree.</p>  <p>Note that this variable is honored even when set in a configuration file in a \".git\" subdirectory of a directory and its value differs from the latter directory (e.g. \"/path/to/.git/config\" has core.worktree set to \"/different/path\"), which is most likely a misconfiguration. Running Git commands in the \"/path/to\" directory will still use \"/different/path\" as the root of the work tree and can cause confusion unless you know what you are doing (e.g. you are creating a read-only snapshot of the same index to a location different from the repository’s usual working tree).</p>  </dd> <dt class=\"hdlist1\">core.logAllRefUpdates</dt> <dd> <p>Enable the reflog. Updates to a ref &lt;ref&gt; is logged to the file \"<code>$GIT_DIR/logs/&lt;ref&gt;</code>\", by appending the new and old SHA-1, the date/time and the reason of the update, but only when the file exists. If this configuration variable is set to true, missing \"<code>$GIT_DIR/logs/&lt;ref&gt;</code>\" file is automatically created for branch heads (i.e. under refs/heads/), remote refs (i.e. under refs/remotes/), note refs (i.e. under refs/notes/), and the symbolic ref HEAD.</p>  <p>This information can be used to determine what commit was the tip of a branch \"2 days ago\".</p>   <p>This value is true by default in a repository that has a working directory associated with it, and false by default in a bare repository.</p>  </dd> <dt class=\"hdlist1\">core.repositoryFormatVersion</dt> <dd> <p>Internal variable identifying the repository format and layout version.</p> </dd> <dt class=\"hdlist1\">core.sharedRepository</dt> <dd> <p>When <code>group</code> (or <code>true</code>), the repository is made shareable between several users in a group (making sure all the files and objects are group-writable). When <code>all</code> (or <code>world</code> or <code>everybody</code>), the repository will be readable by all users, additionally to being group-shareable. When <code>umask</code> (or <code>false</code>), Git will use permissions reported by umask(2). When <code>0xxx</code>, where <code>0xxx</code> is an octal number, files in the repository will have this mode value. <code>0xxx</code> will override user’s umask value (whereas the other options will only override requested parts of the user’s umask value). Examples: <code>0660</code> will make the repo read/write-able for the owner and group, but inaccessible to others (equivalent to <code>group</code> unless umask is e.g. <code>0022</code>). <code>0640</code> is a repository that is group-readable but not group-writable. See <a href=\"git-init\">git-init[1]</a>. False by default.</p> </dd> <dt class=\"hdlist1\">core.warnAmbiguousRefs</dt> <dd> <p>If true, Git will warn you if the ref name you passed it is ambiguous and might match multiple refs in the repository. True by default.</p> </dd> <dt class=\"hdlist1\">core.compression</dt> <dd> <p>An integer -1..9, indicating a default compression level. -1 is the zlib default. 0 means no compression, and 1..9 are various speed/size tradeoffs, 9 being slowest. If set, this provides a default to other compression variables, such as <code>core.looseCompression</code> and <code>pack.compression</code>.</p> </dd> <dt class=\"hdlist1\">core.looseCompression</dt> <dd> <p>An integer -1..9, indicating the compression level for objects that are not in a pack file. -1 is the zlib default. 0 means no compression, and 1..9 are various speed/size tradeoffs, 9 being slowest. If not set, defaults to core.compression. If that is not set, defaults to 1 (best speed).</p> </dd> <dt class=\"hdlist1\">core.packedGitWindowSize</dt> <dd> <p>Number of bytes of a pack file to map into memory in a single mapping operation. Larger window sizes may allow your system to process a smaller number of large pack files more quickly. Smaller window sizes will negatively affect performance due to increased calls to the operating system’s memory manager, but may improve performance when accessing a large number of large pack files.</p>  <p>Default is 1 MiB if NO_MMAP was set at compile time, otherwise 32 MiB on 32 bit platforms and 1 GiB on 64 bit platforms. This should be reasonable for all users/operating systems. You probably do not need to adjust this value.</p>   <p>Common unit suffixes of <code>k</code>, <code>m</code>, or <code>g</code> are supported.</p>  </dd> <dt class=\"hdlist1\">core.packedGitLimit</dt> <dd> <p>Maximum number of bytes to map simultaneously into memory from pack files. If Git needs to access more than this many bytes at once to complete an operation it will unmap existing regions to reclaim virtual address space within the process.</p>  <p>Default is 256 MiB on 32 bit platforms and 8 GiB on 64 bit platforms. This should be reasonable for all users/operating systems, except on the largest projects. You probably do not need to adjust this value.</p>   <p>Common unit suffixes of <code>k</code>, <code>m</code>, or <code>g</code> are supported.</p>  </dd> <dt class=\"hdlist1\">core.deltaBaseCacheLimit</dt> <dd> <p>Maximum number of bytes to reserve for caching base objects that may be referenced by multiple deltified objects. By storing the entire decompressed base objects in a cache Git is able to avoid unpacking and decompressing frequently used base objects multiple times.</p>  <p>Default is 96 MiB on all platforms. This should be reasonable for all users/operating systems, except on the largest projects. You probably do not need to adjust this value.</p>   <p>Common unit suffixes of <code>k</code>, <code>m</code>, or <code>g</code> are supported.</p>  </dd> <dt class=\"hdlist1\">core.bigFileThreshold</dt> <dd> <p>Files larger than this size are stored deflated, without attempting delta compression. Storing large files without delta compression avoids excessive memory usage, at the slight expense of increased disk usage. Additionally files larger than this size are always treated as binary.</p>  <p>Default is 512 MiB on all platforms. This should be reasonable for most projects as source code and other text files can still be delta compressed, but larger binary media files won’t be.</p>   <p>Common unit suffixes of <code>k</code>, <code>m</code>, or <code>g</code> are supported.</p>  </dd> <dt class=\"hdlist1\">core.excludesFile</dt> <dd> <p>Specifies the pathname to the file that contains patterns to describe paths that are not meant to be tracked, in addition to <code>.gitignore</code> (per-directory) and <code>.git/info/exclude</code>. Defaults to <code>$XDG_CONFIG_HOME/git/ignore</code>. If <code>$XDG_CONFIG_HOME</code> is either not set or empty, <code>$HOME/.config/git/ignore</code> is used instead. See <a href=\"gitignore\">gitignore[5]</a>.</p> </dd> <dt class=\"hdlist1\">core.askPass</dt> <dd> <p>Some commands (e.g. svn and http interfaces) that interactively ask for a password can be told to use an external program given via the value of this variable. Can be overridden by the <code>GIT_ASKPASS</code> environment variable. If not set, fall back to the value of the <code>SSH_ASKPASS</code> environment variable or, failing that, a simple password prompt. The external program shall be given a suitable prompt as command-line argument and write the password on its STDOUT.</p> </dd> <dt class=\"hdlist1\">core.attributesFile</dt> <dd> <p>In addition to <code>.gitattributes</code> (per-directory) and <code>.git/info/attributes</code>, Git looks into this file for attributes (see <a href=\"gitattributes\">gitattributes[5]</a>). Path expansions are made the same way as for <code>core.excludesFile</code>. Its default value is <code>$XDG_CONFIG_HOME/git/attributes</code>. If <code>$XDG_CONFIG_HOME</code> is either not set or empty, <code>$HOME/.config/git/attributes</code> is used instead.</p> </dd> <dt class=\"hdlist1\">core.hooksPath</dt> <dd> <p>By default Git will look for your hooks in the <code>$GIT_DIR/hooks</code> directory. Set this to different path, e.g. <code>/etc/git/hooks</code>, and Git will try to find your hooks in that directory, e.g. <code>/etc/git/hooks/pre-receive</code> instead of in <code>$GIT_DIR/hooks/pre-receive</code>.</p>  <p>The path can be either absolute or relative. A relative path is taken as relative to the directory where the hooks are run (see the \"DESCRIPTION\" section of <a href=\"githooks\">githooks[5]</a>).</p>   <p>This configuration variable is useful in cases where you’d like to centrally configure your Git hooks instead of configuring them on a per-repository basis, or as a more flexible and centralized alternative to having an <code>init.templateDir</code> where you’ve changed default hooks.</p>  </dd> <dt class=\"hdlist1\">core.editor</dt> <dd> <p>Commands such as <code>commit</code> and <code>tag</code> that lets you edit messages by launching an editor uses the value of this variable when it is set, and the environment variable <code>GIT_EDITOR</code> is not set. See <a href=\"git-var\">git-var[1]</a>.</p> </dd> <dt class=\"hdlist1\">core.commentChar</dt> <dd> <p>Commands such as <code>commit</code> and <code>tag</code> that lets you edit messages consider a line that begins with this character commented, and removes them after the editor returns (default <code>#</code>).</p>  <p>If set to \"auto\", <code>git-commit</code> would select a character that is not the beginning character of any line in existing commit messages.</p>  </dd> <dt class=\"hdlist1\">core.packedRefsTimeout</dt> <dd> <p>The length of time, in milliseconds, to retry when trying to lock the <code>packed-refs</code> file. Value 0 means not to retry at all; -1 means to try indefinitely. Default is 1000 (i.e., retry for 1 second).</p> </dd> <dt class=\"hdlist1\">sequence.editor</dt> <dd> <p>Text editor used by <code>git rebase -i</code> for editing the rebase instruction file. The value is meant to be interpreted by the shell when it is used. It can be overridden by the <code>GIT_SEQUENCE_EDITOR</code> environment variable. When not configured the default commit message editor is used instead.</p> </dd> <dt class=\"hdlist1\">core.pager</dt> <dd> <p>Text viewer for use by Git commands (e.g., <code>less</code>). The value is meant to be interpreted by the shell. The order of preference is the <code>$GIT_PAGER</code> environment variable, then <code>core.pager</code> configuration, then <code>$PAGER</code>, and then the default chosen at compile time (usually <code>less</code>).</p>  <p>When the <code>LESS</code> environment variable is unset, Git sets it to <code>FRX</code> (if <code>LESS</code> environment variable is set, Git does not change it at all). If you want to selectively override Git’s default setting for <code>LESS</code>, you can set <code>core.pager</code> to e.g. <code>less -S</code>. This will be passed to the shell by Git, which will translate the final command to <code>LESS=FRX less -S</code>. The environment does not set the <code>S</code> option but the command line does, instructing less to truncate long lines. Similarly, setting <code>core.pager</code> to <code>less -+F</code> will deactivate the <code>F</code> option specified by the environment from the command-line, deactivating the \"quit if one screen\" behavior of <code>less</code>. One can specifically activate some flags for particular commands: for example, setting <code>pager.blame</code> to <code>less -S</code> enables line truncation only for <code>git blame</code>.</p>   <p>Likewise, when the <code>LV</code> environment variable is unset, Git sets it to <code>-c</code>. You can override this setting by exporting <code>LV</code> with another value or setting <code>core.pager</code> to <code>lv +c</code>.</p>  </dd> <dt class=\"hdlist1\">core.whitespace</dt> <dd> <p>A comma separated list of common whitespace problems to notice. <code>git diff</code> will use <code>color.diff.whitespace</code> to highlight them, and <code>git apply --whitespace=error</code> will consider them as errors. You can prefix <code>-</code> to disable any of them (e.g. <code>-trailing-space</code>):</p> <div class=\"ulist\"> <ul> <li> <p><code>blank-at-eol</code> treats trailing whitespaces at the end of the line as an error (enabled by default).</p> </li> <li> <p><code>space-before-tab</code> treats a space character that appears immediately before a tab character in the initial indent part of the line as an error (enabled by default).</p> </li> <li> <p><code>indent-with-non-tab</code> treats a line that is indented with space characters instead of the equivalent tabs as an error (not enabled by default).</p> </li> <li> <p><code>tab-in-indent</code> treats a tab character in the initial indent part of the line as an error (not enabled by default).</p> </li> <li> <p><code>blank-at-eof</code> treats blank lines added at the end of file as an error (enabled by default).</p> </li> <li> <p><code>trailing-space</code> is a short-hand to cover both <code>blank-at-eol</code> and <code>blank-at-eof</code>.</p> </li> <li> <p><code>cr-at-eol</code> treats a carriage-return at the end of line as part of the line terminator, i.e. with it, <code>trailing-space</code> does not trigger if the character before such a carriage-return is not a whitespace (not enabled by default).</p> </li> <li> <p><code>tabwidth=&lt;n&gt;</code> tells how many character positions a tab occupies; this is relevant for <code>indent-with-non-tab</code> and when Git fixes <code>tab-in-indent</code> errors. The default tab width is 8. Allowed values are 1 to 63.</p> </li> </ul> </div> </dd> <dt class=\"hdlist1\">core.fsyncObjectFiles</dt> <dd> <p>This boolean will enable <code>fsync()</code> when writing object files.</p>  <p>This is a total waste of time and effort on a filesystem that orders data writes properly, but can be useful for filesystems that do not use journalling (traditional UNIX filesystems) or that only journal metadata and not file contents (OS X’s HFS+, or Linux ext3 with \"data=writeback\").</p>  </dd> <dt class=\"hdlist1\">core.preloadIndex</dt> <dd> <p>Enable parallel index preload for operations like <code>git diff</code></p>  <p>This can speed up operations like <code>git diff</code> and <code>git status</code> especially on filesystems like NFS that have weak caching semantics and thus relatively high IO latencies. When enabled, Git will do the index comparison to the filesystem data in parallel, allowing overlapping IO’s. Defaults to true.</p>  </dd> <dt class=\"hdlist1\">core.createObject</dt> <dd> <p>You can set this to <code>link</code>, in which case a hardlink followed by a delete of the source are used to make sure that object creation will not overwrite existing objects.</p>  <p>On some file system/operating system combinations, this is unreliable. Set this config setting to <code>rename</code> there; However, This will remove the check that makes sure that existing object files will not get overwritten.</p>  </dd> <dt class=\"hdlist1\">core.notesRef</dt> <dd> <p>When showing commit messages, also show notes which are stored in the given ref. The ref must be fully qualified. If the given ref does not exist, it is not an error but means that no notes should be printed.</p>  <p>This setting defaults to \"refs/notes/commits\", and it can be overridden by the <code>GIT_NOTES_REF</code> environment variable. See <a href=\"git-notes\">git-notes[1]</a>.</p>  </dd> <dt class=\"hdlist1\">core.sparseCheckout</dt> <dd> <p>Enable \"sparse checkout\" feature. See section \"Sparse checkout\" in <a href=\"git-read-tree\">git-read-tree[1]</a> for more information.</p> </dd> <dt class=\"hdlist1\">core.abbrev</dt> <dd> <p>Set the length object names are abbreviated to. If unspecified, many commands abbreviate to 7 hexdigits, which may not be enough for abbreviated object names to stay unique for sufficiently long time.</p> </dd> <dt class=\"hdlist1\">add.ignoreErrors</dt> <dt class=\"hdlist1\">add.ignore-errors (deprecated)</dt> <dd> <p>Tells <code>git add</code> to continue adding files when some files cannot be added due to indexing errors. Equivalent to the <code>--ignore-errors</code> option of <a href=\"git-add\">git-add[1]</a>. <code>add.ignore-errors</code> is deprecated, as it does not follow the usual naming convention for configuration variables.</p> </dd> <dt class=\"hdlist1\">alias.*</dt> <dd> <p>Command aliases for the <a href=\"git\">git[1]</a> command wrapper - e.g. after defining \"alias.last = cat-file commit HEAD\", the invocation \"git last\" is equivalent to \"git cat-file commit HEAD\". To avoid confusion and troubles with script usage, aliases that hide existing Git commands are ignored. Arguments are split by spaces, the usual shell quoting and escaping is supported. A quote pair or a backslash can be used to quote them.</p>  <p>If the alias expansion is prefixed with an exclamation point, it will be treated as a shell command. For example, defining \"alias.new = !gitk --all --not ORIG_HEAD\", the invocation \"git new\" is equivalent to running the shell command \"gitk --all --not ORIG_HEAD\". Note that shell commands will be executed from the top-level directory of a repository, which may not necessarily be the current directory. <code>GIT_PREFIX</code> is set as returned by running <code>git rev-parse --show-prefix</code> from the original current directory. See <a href=\"git-rev-parse\">git-rev-parse[1]</a>.</p>  </dd> <dt class=\"hdlist1\">am.keepcr</dt> <dd> <p>If true, git-am will call git-mailsplit for patches in mbox format with parameter <code>--keep-cr</code>. In this case git-mailsplit will not remove <code>\\r</code> from lines ending with <code>\\r\\n</code>. Can be overridden by giving <code>--no-keep-cr</code> from the command line. See <a href=\"git-am\">git-am[1]</a>, <a href=\"git-mailsplit\">git-mailsplit[1]</a>.</p> </dd> <dt class=\"hdlist1\">am.threeWay</dt> <dd> <p>By default, <code>git am</code> will fail if the patch does not apply cleanly. When set to true, this setting tells <code>git am</code> to fall back on 3-way merge if the patch records the identity of blobs it is supposed to apply to and we have those blobs available locally (equivalent to giving the <code>--3way</code> option from the command line). Defaults to <code>false</code>. See <a href=\"git-am\">git-am[1]</a>.</p> </dd> <dt class=\"hdlist1\">apply.ignoreWhitespace</dt> <dd> <p>When set to <code>change</code>, tells <code>git apply</code> to ignore changes in whitespace, in the same way as the <code>--ignore-space-change</code> option. When set to one of: no, none, never, false tells <code>git apply</code> to respect all whitespace differences. See <a href=\"git-apply\">git-apply[1]</a>.</p> </dd> <dt class=\"hdlist1\">apply.whitespace</dt> <dd> <p>Tells <code>git apply</code> how to handle whitespaces, in the same way as the <code>--whitespace</code> option. See <a href=\"git-apply\">git-apply[1]</a>.</p> </dd> <dt class=\"hdlist1\">branch.autoSetupMerge</dt> <dd> <p>Tells <code>git branch</code> and <code>git checkout</code> to set up new branches so that <a href=\"git-pull\">git-pull[1]</a> will appropriately merge from the starting point branch. Note that even if this option is not set, this behavior can be chosen per-branch using the <code>--track</code> and <code>--no-track</code> options. The valid settings are: <code>false</code> — no automatic setup is done; <code>true</code> — automatic setup is done when the starting point is a remote-tracking branch; <code>always</code> — automatic setup is done when the starting point is either a local branch or remote-tracking branch. This option defaults to true.</p> </dd> <dt class=\"hdlist1\">branch.autoSetupRebase</dt> <dd> <p>When a new branch is created with <code>git branch</code> or <code>git checkout</code> that tracks another branch, this variable tells Git to set up pull to rebase instead of merge (see \"branch.&lt;name&gt;.rebase\"). When <code>never</code>, rebase is never automatically set to true. When <code>local</code>, rebase is set to true for tracked branches of other local branches. When <code>remote</code>, rebase is set to true for tracked branches of remote-tracking branches. When <code>always</code>, rebase will be set to true for all tracking branches. See \"branch.autoSetupMerge\" for details on how to set up a branch to track another branch. This option defaults to never.</p> </dd> <dt class=\"hdlist1\">branch.&lt;name&gt;.remote</dt> <dd> <p>When on branch &lt;name&gt;, it tells <code>git fetch</code> and <code>git push</code> which remote to fetch from/push to. The remote to push to may be overridden with <code>remote.pushDefault</code> (for all branches). The remote to push to, for the current branch, may be further overridden by <code>branch.&lt;name&gt;.pushRemote</code>. If no remote is configured, or if you are not on any branch, it defaults to <code>origin</code> for fetching and <code>remote.pushDefault</code> for pushing. Additionally, <code>.</code> (a period) is the current local repository (a dot-repository), see <code>branch.&lt;name&gt;.merge</code>'s final note below.</p> </dd> <dt class=\"hdlist1\">branch.&lt;name&gt;.pushRemote</dt> <dd> <p>When on branch &lt;name&gt;, it overrides <code>branch.&lt;name&gt;.remote</code> for pushing. It also overrides <code>remote.pushDefault</code> for pushing from branch &lt;name&gt;. When you pull from one place (e.g. your upstream) and push to another place (e.g. your own publishing repository), you would want to set <code>remote.pushDefault</code> to specify the remote to push to for all branches, and use this option to override it for a specific branch.</p> </dd> <dt class=\"hdlist1\">branch.&lt;name&gt;.merge</dt> <dd> <p>Defines, together with branch.&lt;name&gt;.remote, the upstream branch for the given branch. It tells <code>git fetch</code>/<code>git pull</code>/<code>git rebase</code> which branch to merge and can also affect <code>git push</code> (see push.default). When in branch &lt;name&gt;, it tells <code>git fetch</code> the default refspec to be marked for merging in FETCH_HEAD. The value is handled like the remote part of a refspec, and must match a ref which is fetched from the remote given by \"branch.&lt;name&gt;.remote\". The merge information is used by <code>git pull</code> (which at first calls <code>git fetch</code>) to lookup the default branch for merging. Without this option, <code>git pull</code> defaults to merge the first refspec fetched. Specify multiple values to get an octopus merge. If you wish to setup <code>git pull</code> so that it merges into &lt;name&gt; from another branch in the local repository, you can point branch.&lt;name&gt;.merge to the desired branch, and use the relative path setting <code>.</code> (a period) for branch.&lt;name&gt;.remote.</p> </dd> <dt class=\"hdlist1\">branch.&lt;name&gt;.mergeOptions</dt> <dd> <p>Sets default options for merging into branch &lt;name&gt;. The syntax and supported options are the same as those of <a href=\"git-merge\">git-merge[1]</a>, but option values containing whitespace characters are currently not supported.</p> </dd> <dt class=\"hdlist1\">branch.&lt;name&gt;.rebase</dt> <dd> <p>When true, rebase the branch &lt;name&gt; on top of the fetched branch, instead of merging the default branch from the default remote when \"git pull\" is run. See \"pull.rebase\" for doing this in a non branch-specific manner.</p>  <p>When preserve, also pass <code>--preserve-merges</code> along to <code>git rebase</code> so that locally committed merge commits will not be flattened by running <code>git pull</code>.</p>   <p>When the value is <code>interactive</code>, the rebase is run in interactive mode.</p>   <p><strong>NOTE</strong>: this is a possibly dangerous operation; do <strong>not</strong> use it unless you understand the implications (see <a href=\"git-rebase\">git-rebase[1]</a> for details).</p>  </dd> <dt class=\"hdlist1\">branch.&lt;name&gt;.description</dt> <dd> <p>Branch description, can be edited with <code>git branch --edit-description</code>. Branch description is automatically added in the format-patch cover letter or request-pull summary.</p> </dd> <dt class=\"hdlist1\">browser.&lt;tool&gt;.cmd</dt> <dd> <p>Specify the command to invoke the specified browser. The specified command is evaluated in shell with the URLs passed as arguments. (See <a href=\"#\">git-web{litdd}browse[1]</a>.)</p> </dd> <dt class=\"hdlist1\">browser.&lt;tool&gt;.path</dt> <dd> <p>Override the path for the given tool that may be used to browse HTML help (see <code>-w</code> option in <a href=\"git-help\">git-help[1]</a>) or a working repository in gitweb (see <a href=\"git-instaweb\">git-instaweb[1]</a>).</p> </dd> <dt class=\"hdlist1\">clean.requireForce</dt> <dd> <p>A boolean to make git-clean do nothing unless given -f, -i or -n. Defaults to true.</p> </dd> <dt class=\"hdlist1\">color.branch</dt> <dd> <p>A boolean to enable/disable color in the output of <a href=\"git-branch\">git-branch[1]</a>. May be set to <code>always</code>, <code>false</code> (or <code>never</code>) or <code>auto</code> (or <code>true</code>), in which case colors are used only when the output is to a terminal. Defaults to false.</p> </dd> <dt class=\"hdlist1\">color.branch.&lt;slot&gt;</dt> <dd> <p>Use customized color for branch coloration. <code>&lt;slot&gt;</code> is one of <code>current</code> (the current branch), <code>local</code> (a local branch), <code>remote</code> (a remote-tracking branch in refs/remotes/), <code>upstream</code> (upstream tracking branch), <code>plain</code> (other refs).</p> </dd> <dt class=\"hdlist1\">color.diff</dt> <dd> <p>Whether to use ANSI escape sequences to add color to patches. If this is set to <code>always</code>, <a href=\"git-diff\">git-diff[1]</a>, <a href=\"git-log\">git-log[1]</a>, and <a href=\"git-show\">git-show[1]</a> will use color for all patches. If it is set to <code>true</code> or <code>auto</code>, those commands will only use color when output is to the terminal. Defaults to false.</p>  <p>This does not affect <a href=\"git-format-patch\">git-format-patch[1]</a> or the <code>git-diff-*</code> plumbing commands. Can be overridden on the command line with the <code>--color[=&lt;when&gt;]</code> option.</p>  </dd> <dt class=\"hdlist1\">color.diff.&lt;slot&gt;</dt> <dd> <p>Use customized color for diff colorization. <code>&lt;slot&gt;</code> specifies which part of the patch to use the specified color, and is one of <code>context</code> (context text - <code>plain</code> is a historical synonym), <code>meta</code> (metainformation), <code>frag</code> (hunk header), <code>func</code> (function in hunk header), <code>old</code> (removed lines), <code>new</code> (added lines), <code>commit</code> (commit headers), or <code>whitespace</code> (highlighting whitespace errors).</p> </dd> <dt class=\"hdlist1\">color.decorate.&lt;slot&gt;</dt> <dd> <p>Use customized color for <code>git log --decorate</code> output. <code>&lt;slot&gt;</code> is one of <code>branch</code>, <code>remoteBranch</code>, <code>tag</code>, <code>stash</code> or <code>HEAD</code> for local branches, remote-tracking branches, tags, stash and HEAD, respectively.</p> </dd> <dt class=\"hdlist1\">color.grep</dt> <dd> <p>When set to <code>always</code>, always highlight matches. When <code>false</code> (or <code>never</code>), never. When set to <code>true</code> or <code>auto</code>, use color only when the output is written to the terminal. Defaults to <code>false</code>.</p> </dd> <dt class=\"hdlist1\">color.grep.&lt;slot&gt;</dt> <dd> <p>Use customized color for grep colorization. <code>&lt;slot&gt;</code> specifies which part of the line to use the specified color, and is one of</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>context</code></dt> <dd> <p>non-matching text in context lines (when using <code>-A</code>, <code>-B</code>, or <code>-C</code>)</p> </dd> <dt class=\"hdlist1\"><code>filename</code></dt> <dd> <p>filename prefix (when not using <code>-h</code>)</p> </dd> <dt class=\"hdlist1\"><code>function</code></dt> <dd> <p>function name lines (when using <code>-p</code>)</p> </dd> <dt class=\"hdlist1\"><code>linenumber</code></dt> <dd> <p>line number prefix (when using <code>-n</code>)</p> </dd> <dt class=\"hdlist1\"><code>match</code></dt> <dd> <p>matching text (same as setting <code>matchContext</code> and <code>matchSelected</code>)</p> </dd> <dt class=\"hdlist1\"><code>matchContext</code></dt> <dd> <p>matching text in context lines</p> </dd> <dt class=\"hdlist1\"><code>matchSelected</code></dt> <dd> <p>matching text in selected lines</p> </dd> <dt class=\"hdlist1\"><code>selected</code></dt> <dd> <p>non-matching text in selected lines</p> </dd> <dt class=\"hdlist1\"><code>separator</code></dt> <dd> <p>separators between fields on a line (<code>:</code>, <code>-</code>, and <code>=</code>) and between hunks (<code>--</code>)</p> </dd> </dl> </div> </div> </div> </dd> <dt class=\"hdlist1\">color.interactive</dt> <dd> <p>When set to <code>always</code>, always use colors for interactive prompts and displays (such as those used by \"git-add --interactive\" and \"git-clean --interactive\"). When false (or <code>never</code>), never. When set to <code>true</code> or <code>auto</code>, use colors only when the output is to the terminal. Defaults to false.</p> </dd> <dt class=\"hdlist1\">color.interactive.&lt;slot&gt;</dt> <dd> <p>Use customized color for <code>git add --interactive</code> and <code>git clean --interactive</code> output. <code>&lt;slot&gt;</code> may be <code>prompt</code>, <code>header</code>, <code>help</code> or <code>error</code>, for four distinct types of normal output from interactive commands.</p> </dd> <dt class=\"hdlist1\">color.pager</dt> <dd> <p>A boolean to enable/disable colored output when the pager is in use (default is true).</p> </dd> <dt class=\"hdlist1\">color.showBranch</dt> <dd> <p>A boolean to enable/disable color in the output of <a href=\"git-show-branch\">git-show-branch[1]</a>. May be set to <code>always</code>, <code>false</code> (or <code>never</code>) or <code>auto</code> (or <code>true</code>), in which case colors are used only when the output is to a terminal. Defaults to false.</p> </dd> <dt class=\"hdlist1\">color.status</dt> <dd> <p>A boolean to enable/disable color in the output of <a href=\"git-status\">git-status[1]</a>. May be set to <code>always</code>, <code>false</code> (or <code>never</code>) or <code>auto</code> (or <code>true</code>), in which case colors are used only when the output is to a terminal. Defaults to false.</p> </dd> <dt class=\"hdlist1\">color.status.&lt;slot&gt;</dt> <dd> <p>Use customized color for status colorization. <code>&lt;slot&gt;</code> is one of <code>header</code> (the header text of the status message), <code>added</code> or <code>updated</code> (files which are added but not committed), <code>changed</code> (files which are changed but not added in the index), <code>untracked</code> (files which are not tracked by Git), <code>branch</code> (the current branch), <code>nobranch</code> (the color the <code>no branch</code> warning is shown in, defaulting to red), or <code>unmerged</code> (files which have unmerged changes).</p> </dd> <dt class=\"hdlist1\">color.ui</dt> <dd> <p>This variable determines the default value for variables such as <code>color.diff</code> and <code>color.grep</code> that control the use of color per command family. Its scope will expand as more commands learn configuration to set a default for the <code>--color</code> option. Set it to <code>false</code> or <code>never</code> if you prefer Git commands not to use color unless enabled explicitly with some other configuration or the <code>--color</code> option. Set it to <code>always</code> if you want all output not intended for machine consumption to use color, to <code>true</code> or <code>auto</code> (this is the default since Git 1.8.4) if you want such output to use color when written to the terminal.</p> </dd> <dt class=\"hdlist1\">column.ui</dt> <dd> <p>Specify whether supported commands should output in columns. This variable consists of a list of tokens separated by spaces or commas:</p>  <p>These options control when the feature should be enabled (defaults to <code>never</code>):</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>always</code></dt> <dd> <p>always show in columns</p> </dd> <dt class=\"hdlist1\"><code>never</code></dt> <dd> <p>never show in columns</p> </dd> <dt class=\"hdlist1\"><code>auto</code></dt> <dd> <p>show in columns if the output is to the terminal</p> </dd> </dl> </div> </div> </div>  <p>These options control layout (defaults to <code>column</code>). Setting any of these implies <code>always</code> if none of <code>always</code>, <code>never</code>, or <code>auto</code> are specified.</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>column</code></dt> <dd> <p>fill columns before rows</p> </dd> <dt class=\"hdlist1\"><code>row</code></dt> <dd> <p>fill rows before columns</p> </dd> <dt class=\"hdlist1\"><code>plain</code></dt> <dd> <p>show in one column</p> </dd> </dl> </div> </div> </div>  <p>Finally, these options can be combined with a layout option (defaults to <code>nodense</code>):</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>dense</code></dt> <dd> <p>make unequal size columns to utilize more space</p> </dd> <dt class=\"hdlist1\"><code>nodense</code></dt> <dd> <p>make equal size columns</p> </dd> </dl> </div> </div> </div> </dd> <dt class=\"hdlist1\">column.branch</dt> <dd> <p>Specify whether to output branch listing in <code>git branch</code> in columns. See <code>column.ui</code> for details.</p> </dd> <dt class=\"hdlist1\">column.clean</dt> <dd> <p>Specify the layout when list items in <code>git clean -i</code>, which always shows files and directories in columns. See <code>column.ui</code> for details.</p> </dd> <dt class=\"hdlist1\">column.status</dt> <dd> <p>Specify whether to output untracked files in <code>git status</code> in columns. See <code>column.ui</code> for details.</p> </dd> <dt class=\"hdlist1\">column.tag</dt> <dd> <p>Specify whether to output tag listing in <code>git tag</code> in columns. See <code>column.ui</code> for details.</p> </dd> <dt class=\"hdlist1\">commit.cleanup</dt> <dd> <p>This setting overrides the default of the <code>--cleanup</code> option in <code>git commit</code>. See <a href=\"git-commit\">git-commit[1]</a> for details. Changing the default can be useful when you always want to keep lines that begin with comment character <code>#</code> in your log message, in which case you would do <code>git config commit.cleanup whitespace</code> (note that you will have to remove the help lines that begin with <code>#</code> in the commit log template yourself, if you do this).</p> </dd> <dt class=\"hdlist1\">commit.gpgSign</dt> <dd> <p>A boolean to specify whether all commits should be GPG signed. Use of this option when doing operations such as rebase can result in a large number of commits being signed. It may be convenient to use an agent to avoid typing your GPG passphrase several times.</p> </dd> <dt class=\"hdlist1\">commit.status</dt> <dd> <p>A boolean to enable/disable inclusion of status information in the commit message template when using an editor to prepare the commit message. Defaults to true.</p> </dd> <dt class=\"hdlist1\">commit.template</dt> <dd> <p>Specify the pathname of a file to use as the template for new commit messages.</p> </dd> <dt class=\"hdlist1\">commit.verbose</dt> <dd> <p>A boolean or int to specify the level of verbose with <code>git commit</code>. See <a href=\"git-commit\">git-commit[1]</a>.</p> </dd> <dt class=\"hdlist1\">credential.helper</dt> <dd> <p>Specify an external helper to be called when a username or password credential is needed; the helper may consult external storage to avoid prompting the user for the credentials. Note that multiple helpers may be defined. See <a href=\"gitcredentials\">gitcredentials[7]</a> for details.</p> </dd> <dt class=\"hdlist1\">credential.useHttpPath</dt> <dd> <p>When acquiring credentials, consider the \"path\" component of an http or https URL to be important. Defaults to false. See <a href=\"gitcredentials\">gitcredentials[7]</a> for more information.</p> </dd> <dt class=\"hdlist1\">credential.username</dt> <dd> <p>If no username is set for a network authentication, use this username by default. See credential.&lt;context&gt;.* below, and <a href=\"gitcredentials\">gitcredentials[7]</a>.</p> </dd> <dt class=\"hdlist1\">credential.&lt;url&gt;.*</dt> <dd> <p>Any of the credential.* options above can be applied selectively to some credentials. For example \"credential.https://example.com.username\" would set the default username only for https connections to example.com. See <a href=\"gitcredentials\">gitcredentials[7]</a> for details on how URLs are matched.</p> </dd> <dt class=\"hdlist1\">credentialCache.ignoreSIGHUP</dt> <dd> <p>Tell git-credential-cache—​daemon to ignore SIGHUP, instead of quitting.</p> </dd> <dt class=\"hdlist1\">diff.autoRefreshIndex</dt> <dd> <p>When using <code>git diff</code> to compare with work tree files, do not consider stat-only change as changed. Instead, silently run <code>git update-index --refresh</code> to update the cached stat information for paths whose contents in the work tree match the contents in the index. This option defaults to true. Note that this affects only <code>git diff</code> Porcelain, and not lower level <code>diff</code> commands such as <code>git diff-files</code>.</p> </dd> <dt class=\"hdlist1\">diff.dirstat</dt> <dd> <p>A comma separated list of <code>--dirstat</code> parameters specifying the default behavior of the <code>--dirstat</code> option to <a href=\"git-diff\">git-diff[1]</a>` and friends. The defaults can be overridden on the command line (using <code>--dirstat=&lt;param1,param2,...&gt;</code>). The fallback defaults (when not changed by <code>diff.dirstat</code>) are <code>changes,noncumulative,3</code>. The following parameters are available:</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>changes</code></dt> <dd> <p>Compute the dirstat numbers by counting the lines that have been removed from the source, or added to the destination. This ignores the amount of pure code movements within a file. In other words, rearranging lines in a file is not counted as much as other changes. This is the default behavior when no parameter is given.</p> </dd> <dt class=\"hdlist1\"><code>lines</code></dt> <dd> <p>Compute the dirstat numbers by doing the regular line-based diff analysis, and summing the removed/added line counts. (For binary files, count 64-byte chunks instead, since binary files have no natural concept of lines). This is a more expensive <code>--dirstat</code> behavior than the <code>changes</code> behavior, but it does count rearranged lines within a file as much as other changes. The resulting output is consistent with what you get from the other <code>--*stat</code> options.</p> </dd> <dt class=\"hdlist1\"><code>files</code></dt> <dd> <p>Compute the dirstat numbers by counting the number of files changed. Each changed file counts equally in the dirstat analysis. This is the computationally cheapest <code>--dirstat</code> behavior, since it does not have to look at the file contents at all.</p> </dd> <dt class=\"hdlist1\"><code>cumulative</code></dt> <dd> <p>Count changes in a child directory for the parent directory as well. Note that when using <code>cumulative</code>, the sum of the percentages reported may exceed 100%. The default (non-cumulative) behavior can be specified with the <code>noncumulative</code> parameter.</p> </dd> <dt class=\"hdlist1\">&lt;limit&gt;</dt> <dd> <p>An integer parameter specifies a cut-off percent (3% by default). Directories contributing less than this percentage of the changes are not shown in the output.</p> </dd> </dl> </div> </div> </div>  <p>Example: The following will count changed files, while ignoring directories with less than 10% of the total amount of changed files, and accumulating child directory counts in the parent directories: <code>files,10,cumulative</code>.</p>  </dd> <dt class=\"hdlist1\">diff.statGraphWidth</dt> <dd> <p>Limit the width of the graph part in --stat output. If set, applies to all commands generating --stat output except format-patch.</p> </dd> <dt class=\"hdlist1\">diff.context</dt> <dd> <p>Generate diffs with &lt;n&gt; lines of context instead of the default of 3. This value is overridden by the -U option.</p> </dd> <dt class=\"hdlist1\">diff.external</dt> <dd> <p>If this config variable is set, diff generation is not performed using the internal diff machinery, but using the given command. Can be overridden with the ‘GIT_EXTERNAL_DIFF’ environment variable. The command is called with parameters as described under \"git Diffs\" in <a href=\"git\">git[1]</a>. Note: if you want to use an external diff program only on a subset of your files, you might want to use <a href=\"gitattributes\">gitattributes[5]</a> instead.</p> </dd> <dt class=\"hdlist1\">diff.ignoreSubmodules</dt> <dd> <p>Sets the default value of --ignore-submodules. Note that this affects only <code>git diff</code> Porcelain, and not lower level <code>diff</code> commands such as <code>git diff-files</code>. <code>git checkout</code> also honors this setting when reporting uncommitted changes. Setting it to <code>all</code> disables the submodule summary normally shown by <code>git commit</code> and <code>git status</code> when <code>status.submoduleSummary</code> is set unless it is overridden by using the --ignore-submodules command-line option. The <code>git submodule</code> commands are not affected by this setting.</p> </dd> <dt class=\"hdlist1\">diff.mnemonicPrefix</dt> <dd> <p>If set, <code>git diff</code> uses a prefix pair that is different from the standard \"a/\" and \"b/\" depending on what is being compared. When this configuration is in effect, reverse diff output also swaps the order of the prefixes:</p> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>git diff</code></dt> <dd> <p>compares the (i)ndex and the (w)ork tree;</p> </dd> <dt class=\"hdlist1\"><code>git diff HEAD</code></dt> <dd> <p>compares a (c)ommit and the (w)ork tree;</p> </dd> <dt class=\"hdlist1\"><code>git diff --cached</code></dt> <dd> <p>compares a (c)ommit and the (i)ndex;</p> </dd> <dt class=\"hdlist1\"><code>git diff HEAD:file1 file2</code></dt> <dd> <p>compares an (o)bject and a (w)ork tree entity;</p> </dd> <dt class=\"hdlist1\"><code>git diff --no-index a b</code></dt> <dd> <p>compares two non-git things (1) and (2).</p> </dd> </dl> </div> </dd> <dt class=\"hdlist1\">diff.noprefix</dt> <dd> <p>If set, <code>git diff</code> does not show any source or destination prefix.</p> </dd> <dt class=\"hdlist1\">diff.orderFile</dt> <dd> <p>File indicating how to order files within a diff, using one shell glob pattern per line. Can be overridden by the <code>-O</code> option to <a href=\"git-diff\">git-diff[1]</a>.</p> </dd> <dt class=\"hdlist1\">diff.renameLimit</dt> <dd> <p>The number of files to consider when performing the copy/rename detection; equivalent to the <code>git diff</code> option <code>-l</code>.</p> </dd> <dt class=\"hdlist1\">diff.renames</dt> <dd> <p>Whether and how Git detects renames. If set to \"false\", rename detection is disabled. If set to \"true\", basic rename detection is enabled. If set to \"copies\" or \"copy\", Git will detect copies, as well. Defaults to true. Note that this affects only <code>git diff</code> Porcelain like <a href=\"git-diff\">git-diff[1]</a> and <a href=\"git-log\">git-log[1]</a>, and not lower level commands such as <a href=\"git-diff-files\">git-diff-files[1]</a>.</p> </dd> <dt class=\"hdlist1\">diff.suppressBlankEmpty</dt> <dd> <p>A boolean to inhibit the standard behavior of printing a space before each empty output line. Defaults to false.</p> </dd> <dt class=\"hdlist1\">diff.submodule</dt> <dd> <p>Specify the format in which differences in submodules are shown. The \"log\" format lists the commits in the range like <a href=\"git-submodule\">git-submodule[1]</a> <code>summary</code> does. The \"short\" format format just shows the names of the commits at the beginning and end of the range. Defaults to short.</p> </dd> <dt class=\"hdlist1\">diff.wordRegex</dt> <dd> <p>A POSIX Extended Regular Expression used to determine what is a \"word\" when performing word-by-word difference calculations. Character sequences that match the regular expression are \"words\", all other characters are <strong>ignorable</strong> whitespace.</p> </dd> <dt class=\"hdlist1\">diff.&lt;driver&gt;.command</dt> <dd> <p>The custom diff driver command. See <a href=\"gitattributes\">gitattributes[5]</a> for details.</p> </dd> <dt class=\"hdlist1\">diff.&lt;driver&gt;.xfuncname</dt> <dd> <p>The regular expression that the diff driver should use to recognize the hunk header. A built-in pattern may also be used. See <a href=\"gitattributes\">gitattributes[5]</a> for details.</p> </dd> <dt class=\"hdlist1\">diff.&lt;driver&gt;.binary</dt> <dd> <p>Set this option to true to make the diff driver treat files as binary. See <a href=\"gitattributes\">gitattributes[5]</a> for details.</p> </dd> <dt class=\"hdlist1\">diff.&lt;driver&gt;.textconv</dt> <dd> <p>The command that the diff driver should call to generate the text-converted version of a file. The result of the conversion is used to generate a human-readable diff. See <a href=\"gitattributes\">gitattributes[5]</a> for details.</p> </dd> <dt class=\"hdlist1\">diff.&lt;driver&gt;.wordRegex</dt> <dd> <p>The regular expression that the diff driver should use to split words in a line. See <a href=\"gitattributes\">gitattributes[5]</a> for details.</p> </dd> <dt class=\"hdlist1\">diff.&lt;driver&gt;.cachetextconv</dt> <dd> <p>Set this option to true to make the diff driver cache the text conversion outputs. See <a href=\"gitattributes\">gitattributes[5]</a> for details.</p> </dd> <dt class=\"hdlist1\">diff.tool</dt> <dd> <p>Controls which diff tool is used by <a href=\"git-difftool\">git-difftool[1]</a>. This variable overrides the value configured in <code>merge.tool</code>. The list below shows the valid built-in values. Any other value is treated as a custom diff tool and requires that a corresponding difftool.&lt;tool&gt;.cmd variable is defined.</p> </dd> </dl> </div> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">diff.compactionHeuristic</dt> <dd> <p>Set this option to <code>true</code> to enable an experimental heuristic that shifts the hunk boundary in an attempt to make the resulting patch easier to read.</p> </dd> <dt class=\"hdlist1\">diff.algorithm</dt> <dd> <p>Choose a diff algorithm. The variants are as follows:</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">\n<code>default</code>, <code>myers</code>\n</dt> <dd> <p>The basic greedy diff algorithm. Currently, this is the default.</p> </dd> <dt class=\"hdlist1\"><code>minimal</code></dt> <dd> <p>Spend extra time to make sure the smallest possible diff is produced.</p> </dd> <dt class=\"hdlist1\"><code>patience</code></dt> <dd> <p>Use \"patience diff\" algorithm when generating patches.</p> </dd> <dt class=\"hdlist1\"><code>histogram</code></dt> <dd> <p>This algorithm extends the patience algorithm to \"support low-occurrence common elements\".</p> </dd> </dl> </div> </div> </div> </dd> <dt class=\"hdlist1\">difftool.&lt;tool&gt;.path</dt> <dd> <p>Override the path for the given tool. This is useful in case your tool is not in the PATH.</p> </dd> <dt class=\"hdlist1\">difftool.&lt;tool&gt;.cmd</dt> <dd> <p>Specify the command to invoke the specified diff tool. The specified command is evaluated in shell with the following variables available: <code>LOCAL</code> is set to the name of the temporary file containing the contents of the diff pre-image and <code>REMOTE</code> is set to the name of the temporary file containing the contents of the diff post-image.</p> </dd> <dt class=\"hdlist1\">difftool.prompt</dt> <dd> <p>Prompt before each invocation of the diff tool.</p> </dd> <dt class=\"hdlist1\">fetch.recurseSubmodules</dt> <dd> <p>This option can be either set to a boolean value or to <code>on-demand</code>. Setting it to a boolean changes the behavior of fetch and pull to unconditionally recurse into submodules when set to true or to not recurse at all when set to false. When set to <code>on-demand</code> (the default value), fetch and pull will only recurse into a populated submodule when its superproject retrieves a commit that updates the submodule’s reference.</p> </dd> <dt class=\"hdlist1\">fetch.fsckObjects</dt> <dd> <p>If it is set to true, git-fetch-pack will check all fetched objects. It will abort in the case of a malformed object or a broken link. The result of an abort are only dangling objects. Defaults to false. If not set, the value of <code>transfer.fsckObjects</code> is used instead.</p> </dd> <dt class=\"hdlist1\">fetch.unpackLimit</dt> <dd> <p>If the number of objects fetched over the Git native transfer is below this limit, then the objects will be unpacked into loose object files. However if the number of received objects equals or exceeds this limit then the received pack will be stored as a pack, after adding any missing delta bases. Storing the pack from a push can make the push operation complete faster, especially on slow filesystems. If not set, the value of <code>transfer.unpackLimit</code> is used instead.</p> </dd> <dt class=\"hdlist1\">fetch.prune</dt> <dd> <p>If true, fetch will automatically behave as if the <code>--prune</code> option was given on the command line. See also <code>remote.&lt;name&gt;.prune</code>.</p> </dd> <dt class=\"hdlist1\">format.attach</dt> <dd> <p>Enable multipart/mixed attachments as the default for <code>format-patch</code>. The value can also be a double quoted string which will enable attachments as the default and set the value as the boundary. See the --attach option in <a href=\"git-format-patch\">git-format-patch[1]</a>.</p> </dd> <dt class=\"hdlist1\">format.numbered</dt> <dd> <p>A boolean which can enable or disable sequence numbers in patch subjects. It defaults to \"auto\" which enables it only if there is more than one patch. It can be enabled or disabled for all messages by setting it to \"true\" or \"false\". See --numbered option in <a href=\"git-format-patch\">git-format-patch[1]</a>.</p> </dd> <dt class=\"hdlist1\">format.headers</dt> <dd> <p>Additional email headers to include in a patch to be submitted by mail. See <a href=\"git-format-patch\">git-format-patch[1]</a>.</p> </dd> <dt class=\"hdlist1\">format.to</dt> <dt class=\"hdlist1\">format.cc</dt> <dd> <p>Additional recipients to include in a patch to be submitted by mail. See the --to and --cc options in <a href=\"git-format-patch\">git-format-patch[1]</a>.</p> </dd> <dt class=\"hdlist1\">format.subjectPrefix</dt> <dd> <p>The default for format-patch is to output files with the <code>[PATCH]</code> subject prefix. Use this variable to change that prefix.</p> </dd> <dt class=\"hdlist1\">format.signature</dt> <dd> <p>The default for format-patch is to output a signature containing the Git version number. Use this variable to change that default. Set this variable to the empty string (\"\") to suppress signature generation.</p> </dd> <dt class=\"hdlist1\">format.signatureFile</dt> <dd> <p>Works just like format.signature except the contents of the file specified by this variable will be used as the signature.</p> </dd> <dt class=\"hdlist1\">format.suffix</dt> <dd> <p>The default for format-patch is to output files with the suffix <code>.patch</code>. Use this variable to change that suffix (make sure to include the dot if you want it).</p> </dd> <dt class=\"hdlist1\">format.pretty</dt> <dd> <p>The default pretty format for log/show/whatchanged command, See <a href=\"git-log\">git-log[1]</a>, <a href=\"git-show\">git-show[1]</a>, <a href=\"git-whatchanged\">git-whatchanged[1]</a>.</p> </dd> <dt class=\"hdlist1\">format.thread</dt> <dd> <p>The default threading style for <code>git format-patch</code>. Can be a boolean value, or <code>shallow</code> or <code>deep</code>. <code>shallow</code> threading makes every mail a reply to the head of the series, where the head is chosen from the cover letter, the <code>--in-reply-to</code>, and the first patch mail, in this order. <code>deep</code> threading makes every mail a reply to the previous one. A true boolean value is the same as <code>shallow</code>, and a false value disables threading.</p> </dd> <dt class=\"hdlist1\">format.signOff</dt> <dd> <p>A boolean value which lets you enable the <code>-s/--signoff</code> option of format-patch by default. <strong>Note:</strong> Adding the Signed-off-by: line to a patch should be a conscious act and means that you certify you have the rights to submit this work under the same open source license. Please see the <code>SubmittingPatches</code> document for further discussion.</p> </dd> <dt class=\"hdlist1\">format.coverLetter</dt> <dd> <p>A boolean that controls whether to generate a cover-letter when format-patch is invoked, but in addition can be set to \"auto\", to generate a cover-letter only when there’s more than one patch.</p> </dd> <dt class=\"hdlist1\">format.outputDirectory</dt> <dd> <p>Set a custom directory to store the resulting files instead of the current working directory.</p> </dd> <dt class=\"hdlist1\">format.useAutoBase</dt> <dd> <p>A boolean value which lets you enable the <code>--base=auto</code> option of format-patch by default.</p> </dd> <dt class=\"hdlist1\">filter.&lt;driver&gt;.clean</dt> <dd> <p>The command which is used to convert the content of a worktree file to a blob upon checkin. See <a href=\"gitattributes\">gitattributes[5]</a> for details.</p> </dd> <dt class=\"hdlist1\">filter.&lt;driver&gt;.smudge</dt> <dd> <p>The command which is used to convert the content of a blob object to a worktree file upon checkout. See <a href=\"gitattributes\">gitattributes[5]</a> for details.</p> </dd> <dt class=\"hdlist1\">fsck.&lt;msg-id&gt;</dt> <dd> <p>Allows overriding the message type (error, warn or ignore) of a specific message ID such as <code>missingEmail</code>.</p>  <p>For convenience, fsck prefixes the error/warning with the message ID, e.g. \"missingEmail: invalid author/committer line - missing email\" means that setting <code>fsck.missingEmail = ignore</code> will hide that issue.</p>   <p>This feature is intended to support working with legacy repositories which cannot be repaired without disruptive changes.</p>  </dd> <dt class=\"hdlist1\">fsck.skipList</dt> <dd> <p>The path to a sorted list of object names (i.e. one SHA-1 per line) that are known to be broken in a non-fatal way and should be ignored. This feature is useful when an established project should be accepted despite early commits containing errors that can be safely ignored such as invalid committer email addresses. Note: corrupt objects cannot be skipped with this setting.</p> </dd> <dt class=\"hdlist1\">gc.aggressiveDepth</dt> <dd> <p>The depth parameter used in the delta compression algorithm used by <code>git gc --aggressive</code>. This defaults to 250.</p> </dd> <dt class=\"hdlist1\">gc.aggressiveWindow</dt> <dd> <p>The window size parameter used in the delta compression algorithm used by <code>git gc --aggressive</code>. This defaults to 250.</p> </dd> <dt class=\"hdlist1\">gc.auto</dt> <dd> <p>When there are approximately more than this many loose objects in the repository, <code>git gc --auto</code> will pack them. Some Porcelain commands use this command to perform a light-weight garbage collection from time to time. The default value is 6700. Setting this to 0 disables it.</p> </dd> <dt class=\"hdlist1\">gc.autoPackLimit</dt> <dd> <p>When there are more than this many packs that are not marked with <code>*.keep</code> file in the repository, <code>git gc\n--auto</code> consolidates them into one larger pack. The default value is 50. Setting this to 0 disables it.</p> </dd> <dt class=\"hdlist1\">gc.autoDetach</dt> <dd> <p>Make <code>git gc --auto</code> return immediately and run in background if the system supports it. Default is true.</p> </dd> <dt class=\"hdlist1\">gc.packRefs</dt> <dd> <p>Running <code>git pack-refs</code> in a repository renders it unclonable by Git versions prior to 1.5.1.2 over dumb transports such as HTTP. This variable determines whether <code>git gc</code> runs <code>git pack-refs</code>. This can be set to <code>notbare</code> to enable it within all non-bare repos or it can be set to a boolean value. The default is <code>true</code>.</p> </dd> <dt class=\"hdlist1\">gc.pruneExpire</dt> <dd> <p>When <code>git gc</code> is run, it will call <code>prune --expire 2.weeks.ago</code>. Override the grace period with this config variable. The value \"now\" may be used to disable this grace period and always prune unreachable objects immediately, or \"never\" may be used to suppress pruning.</p> </dd> <dt class=\"hdlist1\">gc.worktreePruneExpire</dt> <dd> <p>When <code>git gc</code> is run, it calls <code>git worktree prune --expire 3.months.ago</code>. This config variable can be used to set a different grace period. The value \"now\" may be used to disable the grace period and prune <code>$GIT_DIR/worktrees</code> immediately, or \"never\" may be used to suppress pruning.</p> </dd> <dt class=\"hdlist1\">gc.reflogExpire</dt> <dt class=\"hdlist1\">gc.&lt;pattern&gt;.reflogExpire</dt> <dd> <p><code>git reflog expire</code> removes reflog entries older than this time; defaults to 90 days. The value \"now\" expires all entries immediately, and \"never\" suppresses expiration altogether. With \"&lt;pattern&gt;\" (e.g. \"refs/stash\") in the middle the setting applies only to the refs that match the &lt;pattern&gt;.</p> </dd> <dt class=\"hdlist1\">gc.reflogExpireUnreachable</dt> <dt class=\"hdlist1\">gc.&lt;pattern&gt;.reflogExpireUnreachable</dt> <dd> <p><code>git reflog expire</code> removes reflog entries older than this time and are not reachable from the current tip; defaults to 30 days. The value \"now\" expires all entries immediately, and \"never\" suppresses expiration altogether. With \"&lt;pattern&gt;\" (e.g. \"refs/stash\") in the middle, the setting applies only to the refs that match the &lt;pattern&gt;.</p> </dd> <dt class=\"hdlist1\">gc.rerereResolved</dt> <dd> <p>Records of conflicted merge you resolved earlier are kept for this many days when <code>git rerere gc</code> is run. The default is 60 days. See <a href=\"git-rerere\">git-rerere[1]</a>.</p> </dd> <dt class=\"hdlist1\">gc.rerereUnresolved</dt> <dd> <p>Records of conflicted merge you have not resolved are kept for this many days when <code>git rerere gc</code> is run. The default is 15 days. See <a href=\"git-rerere\">git-rerere[1]</a>.</p> </dd> <dt class=\"hdlist1\">gitcvs.commitMsgAnnotation</dt> <dd> <p>Append this string to each commit message. Set to empty string to disable this feature. Defaults to \"via git-CVS emulator\".</p> </dd> <dt class=\"hdlist1\">gitcvs.enabled</dt> <dd> <p>Whether the CVS server interface is enabled for this repository. See <a href=\"git-cvsserver\">git-cvsserver[1]</a>.</p> </dd> <dt class=\"hdlist1\">gitcvs.logFile</dt> <dd> <p>Path to a log file where the CVS server interface well…​ logs various stuff. See <a href=\"git-cvsserver\">git-cvsserver[1]</a>.</p> </dd> <dt class=\"hdlist1\">gitcvs.usecrlfattr</dt> <dd> <p>If true, the server will look up the end-of-line conversion attributes for files to determine the <code>-k</code> modes to use. If the attributes force Git to treat a file as text, the <code>-k</code> mode will be left blank so CVS clients will treat it as text. If they suppress text conversion, the file will be set with <code>-kb</code> mode, which suppresses any newline munging the client might otherwise do. If the attributes do not allow the file type to be determined, then <code>gitcvs.allBinary</code> is used. See <a href=\"gitattributes\">gitattributes[5]</a>.</p> </dd> <dt class=\"hdlist1\">gitcvs.allBinary</dt> <dd> <p>This is used if <code>gitcvs.usecrlfattr</code> does not resolve the correct <code>-kb</code> mode to use. If true, all unresolved files are sent to the client in mode <code>-kb</code>. This causes the client to treat them as binary files, which suppresses any newline munging it otherwise might do. Alternatively, if it is set to \"guess\", then the contents of the file are examined to decide if it is binary, similar to <code>core.autocrlf</code>.</p> </dd> <dt class=\"hdlist1\">gitcvs.dbName</dt> <dd> <p>Database used by git-cvsserver to cache revision information derived from the Git repository. The exact meaning depends on the used database driver, for SQLite (which is the default driver) this is a filename. Supports variable substitution (see <a href=\"git-cvsserver\">git-cvsserver[1]</a> for details). May not contain semicolons (<code>;</code>). Default: <code>%Ggitcvs.%m.sqlite</code></p> </dd> <dt class=\"hdlist1\">gitcvs.dbDriver</dt> <dd> <p>Used Perl DBI driver. You can specify any available driver for this here, but it might not work. git-cvsserver is tested with <code>DBD::SQLite</code>, reported to work with <code>DBD::Pg</code>, and reported <strong>not</strong> to work with <code>DBD::mysql</code>. Experimental feature. May not contain double colons (<code>:</code>). Default: <code>SQLite</code>. See <a href=\"git-cvsserver\">git-cvsserver[1]</a>.</p> </dd> <dt class=\"hdlist1\">gitcvs.dbUser, gitcvs.dbPass</dt> <dd> <p>Database user and password. Only useful if setting <code>gitcvs.dbDriver</code>, since SQLite has no concept of database users and/or passwords. <code>gitcvs.dbUser</code> supports variable substitution (see <a href=\"git-cvsserver\">git-cvsserver[1]</a> for details).</p> </dd> <dt class=\"hdlist1\">gitcvs.dbTableNamePrefix</dt> <dd> <p>Database table name prefix. Prepended to the names of any database tables used, allowing a single database to be used for several repositories. Supports variable substitution (see <a href=\"git-cvsserver\">git-cvsserver[1]</a> for details). Any non-alphabetic characters will be replaced with underscores.</p> </dd> </dl> </div>  <p>All gitcvs variables except for <code>gitcvs.usecrlfattr</code> and <code>gitcvs.allBinary</code> can also be specified as <code>gitcvs.&lt;access_method&gt;.&lt;varname&gt;</code> (where <code>access_method</code> is one of \"ext\" and \"pserver\") to make them apply only for the given access method.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">gitweb.category</dt> <dt class=\"hdlist1\">gitweb.description</dt> <dt class=\"hdlist1\">gitweb.owner</dt> <dt class=\"hdlist1\">gitweb.url</dt> <dd> <p>See <a href=\"gitweb\">gitweb[1]</a> for description.</p> </dd> <dt class=\"hdlist1\">gitweb.avatar</dt> <dt class=\"hdlist1\">gitweb.blame</dt> <dt class=\"hdlist1\">gitweb.grep</dt> <dt class=\"hdlist1\">gitweb.highlight</dt> <dt class=\"hdlist1\">gitweb.patches</dt> <dt class=\"hdlist1\">gitweb.pickaxe</dt> <dt class=\"hdlist1\">gitweb.remote_heads</dt> <dt class=\"hdlist1\">gitweb.showSizes</dt> <dt class=\"hdlist1\">gitweb.snapshot</dt> <dd> <p>See <a href=\"gitweb.conf\">gitweb.conf[5]</a> for description.</p> </dd> <dt class=\"hdlist1\">grep.lineNumber</dt> <dd> <p>If set to true, enable <code>-n</code> option by default.</p> </dd> <dt class=\"hdlist1\">grep.patternType</dt> <dd> <p>Set the default matching behavior. Using a value of <code>basic</code>, <code>extended</code>, <code>fixed</code>, or <code>perl</code> will enable the <code>--basic-regexp</code>, <code>--extended-regexp</code>, <code>--fixed-strings</code>, or <code>--perl-regexp</code> option accordingly, while the value <code>default</code> will return to the default matching behavior.</p> </dd> <dt class=\"hdlist1\">grep.extendedRegexp</dt> <dd> <p>If set to true, enable <code>--extended-regexp</code> option by default. This option is ignored when the <code>grep.patternType</code> option is set to a value other than <code>default</code>.</p> </dd> <dt class=\"hdlist1\">grep.threads</dt> <dd> <p>Number of grep worker threads to use. See <code>grep.threads</code> in <a href=\"git-grep\">git-grep[1]</a> for more information.</p> </dd> <dt class=\"hdlist1\">grep.fallbackToNoIndex</dt> <dd> <p>If set to true, fall back to git grep --no-index if git grep is executed outside of a git repository. Defaults to false.</p> </dd> <dt class=\"hdlist1\">gpg.program</dt> <dd> <p>Use this custom program instead of \"<code>gpg</code>\" found on <code>$PATH</code> when making or verifying a PGP signature. The program must support the same command-line interface as GPG, namely, to verify a detached signature, \"<code>gpg --verify $file - &lt;$signature</code>\" is run, and the program is expected to signal a good signature by exiting with code 0, and to generate an ASCII-armored detached signature, the standard input of \"<code>gpg -bsau $key</code>\" is fed with the contents to be signed, and the program is expected to send the result to its standard output.</p> </dd> <dt class=\"hdlist1\">gui.commitMsgWidth</dt> <dd> <p>Defines how wide the commit message window is in the <a href=\"git-gui\">git-gui[1]</a>. \"75\" is the default.</p> </dd> <dt class=\"hdlist1\">gui.diffContext</dt> <dd> <p>Specifies how many context lines should be used in calls to diff made by the <a href=\"git-gui\">git-gui[1]</a>. The default is \"5\".</p> </dd> <dt class=\"hdlist1\">gui.displayUntracked</dt> <dd> <p>Determines if <a href=\"git-gui\">git-gui[1]</a> shows untracked files in the file list. The default is \"true\".</p> </dd> <dt class=\"hdlist1\">gui.encoding</dt> <dd> <p>Specifies the default encoding to use for displaying of file contents in <a href=\"git-gui\">git-gui[1]</a> and <a href=\"gitk\">gitk[1]</a>. It can be overridden by setting the <code>encoding</code> attribute for relevant files (see <a href=\"gitattributes\">gitattributes[5]</a>). If this option is not set, the tools default to the locale encoding.</p> </dd> <dt class=\"hdlist1\">gui.matchTrackingBranch</dt> <dd> <p>Determines if new branches created with <a href=\"git-gui\">git-gui[1]</a> should default to tracking remote branches with matching names or not. Default: \"false\".</p> </dd> <dt class=\"hdlist1\">gui.newBranchTemplate</dt> <dd> <p>Is used as suggested name when creating new branches using the <a href=\"git-gui\">git-gui[1]</a>.</p> </dd> <dt class=\"hdlist1\">gui.pruneDuringFetch</dt> <dd> <p>\"true\" if <a href=\"git-gui\">git-gui[1]</a> should prune remote-tracking branches when performing a fetch. The default value is \"false\".</p> </dd> <dt class=\"hdlist1\">gui.trustmtime</dt> <dd> <p>Determines if <a href=\"git-gui\">git-gui[1]</a> should trust the file modification timestamp or not. By default the timestamps are not trusted.</p> </dd> <dt class=\"hdlist1\">gui.spellingDictionary</dt> <dd> <p>Specifies the dictionary used for spell checking commit messages in the <a href=\"git-gui\">git-gui[1]</a>. When set to \"none\" spell checking is turned off.</p> </dd> <dt class=\"hdlist1\">gui.fastCopyBlame</dt> <dd> <p>If true, <code>git gui blame</code> uses <code>-C</code> instead of <code>-C -C</code> for original location detection. It makes blame significantly faster on huge repositories at the expense of less thorough copy detection.</p> </dd> <dt class=\"hdlist1\">gui.copyBlameThreshold</dt> <dd> <p>Specifies the threshold to use in <code>git gui blame</code> original location detection, measured in alphanumeric characters. See the <a href=\"git-blame\">git-blame[1]</a> manual for more information on copy detection.</p> </dd> <dt class=\"hdlist1\">gui.blamehistoryctx</dt> <dd> <p>Specifies the radius of history context in days to show in <a href=\"gitk\">gitk[1]</a> for the selected commit, when the <code>Show History\nContext</code> menu item is invoked from <code>git gui blame</code>. If this variable is set to zero, the whole history is shown.</p> </dd> <dt class=\"hdlist1\">guitool.&lt;name&gt;.cmd</dt> <dd> <p>Specifies the shell command line to execute when the corresponding item of the <a href=\"git-gui\">git-gui[1]</a> <code>Tools</code> menu is invoked. This option is mandatory for every tool. The command is executed from the root of the working directory, and in the environment it receives the name of the tool as <code>GIT_GUITOOL</code>, the name of the currently selected file as <code>FILENAME</code>, and the name of the current branch as <code>CUR_BRANCH</code> (if the head is detached, <code>CUR_BRANCH</code> is empty).</p> </dd> <dt class=\"hdlist1\">guitool.&lt;name&gt;.needsFile</dt> <dd> <p>Run the tool only if a diff is selected in the GUI. It guarantees that <code>FILENAME</code> is not empty.</p> </dd> <dt class=\"hdlist1\">guitool.&lt;name&gt;.noConsole</dt> <dd> <p>Run the command silently, without creating a window to display its output.</p> </dd> <dt class=\"hdlist1\">guitool.&lt;name&gt;.noRescan</dt> <dd> <p>Don’t rescan the working directory for changes after the tool finishes execution.</p> </dd> <dt class=\"hdlist1\">guitool.&lt;name&gt;.confirm</dt> <dd> <p>Show a confirmation dialog before actually running the tool.</p> </dd> <dt class=\"hdlist1\">guitool.&lt;name&gt;.argPrompt</dt> <dd> <p>Request a string argument from the user, and pass it to the tool through the <code>ARGS</code> environment variable. Since requesting an argument implies confirmation, the <code>confirm</code> option has no effect if this is enabled. If the option is set to <code>true</code>, <code>yes</code>, or <code>1</code>, the dialog uses a built-in generic prompt; otherwise the exact value of the variable is used.</p> </dd> <dt class=\"hdlist1\">guitool.&lt;name&gt;.revPrompt</dt> <dd> <p>Request a single valid revision from the user, and set the <code>REVISION</code> environment variable. In other aspects this option is similar to <code>argPrompt</code>, and can be used together with it.</p> </dd> <dt class=\"hdlist1\">guitool.&lt;name&gt;.revUnmerged</dt> <dd> <p>Show only unmerged branches in the <code>revPrompt</code> subdialog. This is useful for tools similar to merge or rebase, but not for things like checkout or reset.</p> </dd> <dt class=\"hdlist1\">guitool.&lt;name&gt;.title</dt> <dd> <p>Specifies the title to use for the prompt dialog. The default is the tool name.</p> </dd> <dt class=\"hdlist1\">guitool.&lt;name&gt;.prompt</dt> <dd> <p>Specifies the general prompt string to display at the top of the dialog, before subsections for <code>argPrompt</code> and <code>revPrompt</code>. The default value includes the actual command.</p> </dd> <dt class=\"hdlist1\">help.browser</dt> <dd> <p>Specify the browser that will be used to display help in the <code>web</code> format. See <a href=\"git-help\">git-help[1]</a>.</p> </dd> <dt class=\"hdlist1\">help.format</dt> <dd> <p>Override the default help format used by <a href=\"git-help\">git-help[1]</a>. Values <code>man</code>, <code>info</code>, <code>web</code> and <code>html</code> are supported. <code>man</code> is the default. <code>web</code> and <code>html</code> are the same.</p> </dd> <dt class=\"hdlist1\">help.autoCorrect</dt> <dd> <p>Automatically correct and execute mistyped commands after waiting for the given number of deciseconds (0.1 sec). If more than one command can be deduced from the entered text, nothing will be executed. If the value of this option is negative, the corrected command will be executed immediately. If the value is 0 - the command will be just shown but not executed. This is the default.</p> </dd> <dt class=\"hdlist1\">help.htmlPath</dt> <dd> <p>Specify the path where the HTML documentation resides. File system paths and URLs are supported. HTML pages will be prefixed with this path when help is displayed in the <code>web</code> format. This defaults to the documentation path of your Git installation.</p> </dd> <dt class=\"hdlist1\">http.proxy</dt> <dd> <p>Override the HTTP proxy, normally configured using the <code>http_proxy</code>, <code>https_proxy</code>, and <code>all_proxy</code> environment variables (see <code>curl(1)</code>). In addition to the syntax understood by curl, it is possible to specify a proxy string with a user name but no password, in which case git will attempt to acquire one in the same way it does for other credentials. See <a href=\"gitcredentials\">gitcredentials[7]</a> for more information. The syntax thus is <code>[protocol://][user[:password]@]proxyhost[:port]</code>. This can be overridden on a per-remote basis; see remote.&lt;name&gt;.proxy</p> </dd> <dt class=\"hdlist1\">http.proxyAuthMethod</dt> <dd> <p>Set the method with which to authenticate against the HTTP proxy. This only takes effect if the configured proxy string contains a user name part (i.e. is of the form <code>user@host</code> or <code>user@host:port</code>). This can be overridden on a per-remote basis; see <code>remote.&lt;name&gt;.proxyAuthMethod</code>. Both can be overridden by the <code>GIT_HTTP_PROXY_AUTHMETHOD</code> environment variable. Possible values are:</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"ulist\"> <ul> <li> <p><code>anyauth</code> - Automatically pick a suitable authentication method. It is assumed that the proxy answers an unauthenticated request with a 407 status code and one or more Proxy-authenticate headers with supported authentication methods. This is the default.</p> </li> <li> <p><code>basic</code> - HTTP Basic authentication</p> </li> <li> <p><code>digest</code> - HTTP Digest authentication; this prevents the password from being transmitted to the proxy in clear text</p> </li> <li> <p><code>negotiate</code> - GSS-Negotiate authentication (compare the --negotiate option of <code>curl(1)</code>)</p> </li> <li> <p><code>ntlm</code> - NTLM authentication (compare the --ntlm option of <code>curl(1)</code>)</p> </li> </ul> </div> </div> </div> </dd> <dt class=\"hdlist1\">http.emptyAuth</dt> <dd> <p>Attempt authentication without seeking a username or password. This can be used to attempt GSS-Negotiate authentication without specifying a username in the URL, as libcurl normally requires a username for authentication.</p> </dd> <dt class=\"hdlist1\">http.extraHeader</dt> <dd> <p>Pass an additional HTTP header when communicating with a server. If more than one such entry exists, all of them are added as extra headers. To allow overriding the settings inherited from the system config, an empty value will reset the extra headers to the empty list.</p> </dd> <dt class=\"hdlist1\">http.cookieFile</dt> <dd> <p>The pathname of a file containing previously stored cookie lines, which should be used in the Git http session, if they match the server. The file format of the file to read cookies from should be plain HTTP headers or the Netscape/Mozilla cookie file format (see <code>curl(1)</code>). NOTE that the file specified with http.cookieFile is used only as input unless http.saveCookies is set.</p> </dd> <dt class=\"hdlist1\">http.saveCookies</dt> <dd> <p>If set, store cookies received during requests to the file specified by http.cookieFile. Has no effect if http.cookieFile is unset.</p> </dd> <dt class=\"hdlist1\">http.sslVersion</dt> <dd> <p>The SSL version to use when negotiating an SSL connection, if you want to force the default. The available and default version depend on whether libcurl was built against NSS or OpenSSL and the particular configuration of the crypto library in use. Internally this sets the <code>CURLOPT_SSL_VERSION</code> option; see the libcurl documentation for more details on the format of this option and for the ssl version supported. Actually the possible values of this option are:</p> <div class=\"ulist\"> <ul> <li> <p>sslv2</p> </li> <li> <p>sslv3</p> </li> <li> <p>tlsv1</p> </li> <li> <p>tlsv1.0</p> </li> <li> <p>tlsv1.1</p> </li> <li> <p>tlsv1.2</p> </li> </ul> </div>  <p>Can be overridden by the <code>GIT_SSL_VERSION</code> environment variable. To force git to use libcurl’s default ssl version and ignore any explicit http.sslversion option, set <code>GIT_SSL_VERSION</code> to the empty string.</p>  </dd> <dt class=\"hdlist1\">http.sslCipherList</dt> <dd> <p>A list of SSL ciphers to use when negotiating an SSL connection. The available ciphers depend on whether libcurl was built against NSS or OpenSSL and the particular configuration of the crypto library in use. Internally this sets the <code>CURLOPT_SSL_CIPHER_LIST</code> option; see the libcurl documentation for more details on the format of this list.</p>  <p>Can be overridden by the <code>GIT_SSL_CIPHER_LIST</code> environment variable. To force git to use libcurl’s default cipher list and ignore any explicit http.sslCipherList option, set <code>GIT_SSL_CIPHER_LIST</code> to the empty string.</p>  </dd> <dt class=\"hdlist1\">http.sslVerify</dt> <dd> <p>Whether to verify the SSL certificate when fetching or pushing over HTTPS. Can be overridden by the <code>GIT_SSL_NO_VERIFY</code> environment variable.</p> </dd> <dt class=\"hdlist1\">http.sslCert</dt> <dd> <p>File containing the SSL certificate when fetching or pushing over HTTPS. Can be overridden by the <code>GIT_SSL_CERT</code> environment variable.</p> </dd> <dt class=\"hdlist1\">http.sslKey</dt> <dd> <p>File containing the SSL private key when fetching or pushing over HTTPS. Can be overridden by the <code>GIT_SSL_KEY</code> environment variable.</p> </dd> <dt class=\"hdlist1\">http.sslCertPasswordProtected</dt> <dd> <p>Enable Git’s password prompt for the SSL certificate. Otherwise OpenSSL will prompt the user, possibly many times, if the certificate or private key is encrypted. Can be overridden by the <code>GIT_SSL_CERT_PASSWORD_PROTECTED</code> environment variable.</p> </dd> <dt class=\"hdlist1\">http.sslCAInfo</dt> <dd> <p>File containing the certificates to verify the peer with when fetching or pushing over HTTPS. Can be overridden by the <code>GIT_SSL_CAINFO</code> environment variable.</p> </dd> <dt class=\"hdlist1\">http.sslCAPath</dt> <dd> <p>Path containing files with the CA certificates to verify the peer with when fetching or pushing over HTTPS. Can be overridden by the <code>GIT_SSL_CAPATH</code> environment variable.</p> </dd> <dt class=\"hdlist1\">http.pinnedpubkey</dt> <dd> <p>Public key of the https service. It may either be the filename of a PEM or DER encoded public key file or a string starting with <code>sha256//</code> followed by the base64 encoded sha256 hash of the public key. See also libcurl <code>CURLOPT_PINNEDPUBLICKEY</code>. git will exit with an error if this option is set but not supported by cURL.</p> </dd> <dt class=\"hdlist1\">http.sslTry</dt> <dd> <p>Attempt to use AUTH SSL/TLS and encrypted data transfers when connecting via regular FTP protocol. This might be needed if the FTP server requires it for security reasons or you wish to connect securely whenever remote FTP server supports it. Default is false since it might trigger certificate verification errors on misconfigured servers.</p> </dd> <dt class=\"hdlist1\">http.maxRequests</dt> <dd> <p>How many HTTP requests to launch in parallel. Can be overridden by the <code>GIT_HTTP_MAX_REQUESTS</code> environment variable. Default is 5.</p> </dd> <dt class=\"hdlist1\">http.minSessions</dt> <dd> <p>The number of curl sessions (counted across slots) to be kept across requests. They will not be ended with curl_easy_cleanup() until http_cleanup() is invoked. If USE_CURL_MULTI is not defined, this value will be capped at 1. Defaults to 1.</p> </dd> <dt class=\"hdlist1\">http.postBuffer</dt> <dd> <p>Maximum size in bytes of the buffer used by smart HTTP transports when POSTing data to the remote system. For requests larger than this buffer size, HTTP/1.1 and Transfer-Encoding: chunked is used to avoid creating a massive pack file locally. Default is 1 MiB, which is sufficient for most requests.</p> </dd> <dt class=\"hdlist1\">http.lowSpeedLimit, http.lowSpeedTime</dt> <dd> <p>If the HTTP transfer speed is less than <code>http.lowSpeedLimit</code> for longer than <code>http.lowSpeedTime</code> seconds, the transfer is aborted. Can be overridden by the <code>GIT_HTTP_LOW_SPEED_LIMIT</code> and <code>GIT_HTTP_LOW_SPEED_TIME</code> environment variables.</p> </dd> <dt class=\"hdlist1\">http.noEPSV</dt> <dd> <p>A boolean which disables using of EPSV ftp command by curl. This can helpful with some \"poor\" ftp servers which don’t support EPSV mode. Can be overridden by the <code>GIT_CURL_FTP_NO_EPSV</code> environment variable. Default is false (curl will use EPSV).</p> </dd> <dt class=\"hdlist1\">http.userAgent</dt> <dd> <p>The HTTP USER_AGENT string presented to an HTTP server. The default value represents the version of the client Git such as git/1.7.1. This option allows you to override this value to a more common value such as Mozilla/4.0. This may be necessary, for instance, if connecting through a firewall that restricts HTTP connections to a set of common USER_AGENT strings (but not including those like git/1.7.1). Can be overridden by the <code>GIT_HTTP_USER_AGENT</code> environment variable.</p> </dd> <dt class=\"hdlist1\">http.&lt;url&gt;.*</dt> <dd> <p>Any of the http.* options above can be applied selectively to some URLs. For a config key to match a URL, each element of the config key is compared to that of the URL, in the following order:</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>Scheme (e.g., <code>https</code> in <code>https://example.com/</code>). This field must match exactly between the config key and the URL.</p> </li> <li> <p>Host/domain name (e.g., <code>example.com</code> in <code>https://example.com/</code>). This field must match exactly between the config key and the URL.</p> </li> <li> <p>Port number (e.g., <code>8080</code> in <code>http://example.com:8080/</code>). This field must match exactly between the config key and the URL. Omitted port numbers are automatically converted to the correct default for the scheme before matching.</p> </li> <li> <p>Path (e.g., <code>repo.git</code> in <code>https://example.com/repo.git</code>). The path field of the config key must match the path field of the URL either exactly or as a prefix of slash-delimited path elements. This means a config key with path <code>foo/</code> matches URL path <code>foo/bar</code>. A prefix can only match on a slash (<code>/</code>) boundary. Longer matches take precedence (so a config key with path <code>foo/bar</code> is a better match to URL path <code>foo/bar</code> than a config key with just path <code>foo/</code>).</p> </li> <li> <p>User name (e.g., <code>user</code> in <code>https://user@example.com/repo.git</code>). If the config key has a user name it must match the user name in the URL exactly. If the config key does not have a user name, that config key will match a URL with any user name (including none), but at a lower precedence than a config key with a user name.</p> </li> </ol> </div> </div> </div>  <p>The list above is ordered by decreasing precedence; a URL that matches a config key’s path is preferred to one that matches its user name. For example, if the URL is <code>https://user@example.com/foo/bar</code> a config key match of <code>https://example.com/foo</code> will be preferred over a config key match of <code>https://user@example.com</code>.</p>   <p>All URLs are normalized before attempting any matching (the password part, if embedded in the URL, is always ignored for matching purposes) so that equivalent URLs that are simply spelled differently will match properly. Environment variable settings always override any matches. The URLs that are matched against are those given directly to Git commands. This means any URLs visited as a result of a redirection do not participate in matching.</p>  </dd> <dt class=\"hdlist1\">i18n.commitEncoding</dt> <dd> <p>Character encoding the commit messages are stored in; Git itself does not care per se, but this information is necessary e.g. when importing commits from emails or in the gitk graphical history browser (and possibly at other places in the future or in other porcelains). See e.g. <a href=\"git-mailinfo\">git-mailinfo[1]</a>. Defaults to <code>utf-8</code>.</p> </dd> <dt class=\"hdlist1\">i18n.logOutputEncoding</dt> <dd> <p>Character encoding the commit messages are converted to when running <code>git log</code> and friends.</p> </dd> <dt class=\"hdlist1\">imap</dt> <dd> <p>The configuration variables in the <code>imap</code> section are described in <a href=\"git-imap-send\">git-imap-send[1]</a>.</p> </dd> <dt class=\"hdlist1\">index.version</dt> <dd> <p>Specify the version with which new index files should be initialized. This does not affect existing repositories.</p> </dd> <dt class=\"hdlist1\">init.templateDir</dt> <dd> <p>Specify the directory from which templates will be copied. (See the \"TEMPLATE DIRECTORY\" section of <a href=\"git-init\">git-init[1]</a>.)</p> </dd> <dt class=\"hdlist1\">instaweb.browser</dt> <dd> <p>Specify the program that will be used to browse your working repository in gitweb. See <a href=\"git-instaweb\">git-instaweb[1]</a>.</p> </dd> <dt class=\"hdlist1\">instaweb.httpd</dt> <dd> <p>The HTTP daemon command-line to start gitweb on your working repository. See <a href=\"git-instaweb\">git-instaweb[1]</a>.</p> </dd> <dt class=\"hdlist1\">instaweb.local</dt> <dd> <p>If true the web server started by <a href=\"git-instaweb\">git-instaweb[1]</a> will be bound to the local IP (127.0.0.1).</p> </dd> <dt class=\"hdlist1\">instaweb.modulePath</dt> <dd> <p>The default module path for <a href=\"git-instaweb\">git-instaweb[1]</a> to use instead of /usr/lib/apache2/modules. Only used if httpd is Apache.</p> </dd> <dt class=\"hdlist1\">instaweb.port</dt> <dd> <p>The port number to bind the gitweb httpd to. See <a href=\"git-instaweb\">git-instaweb[1]</a>.</p> </dd> <dt class=\"hdlist1\">interactive.singleKey</dt> <dd> <p>In interactive commands, allow the user to provide one-letter input with a single key (i.e., without hitting enter). Currently this is used by the <code>--patch</code> mode of <a href=\"git-add\">git-add[1]</a>, <a href=\"git-checkout\">git-checkout[1]</a>, <a href=\"git-commit\">git-commit[1]</a>, <a href=\"git-reset\">git-reset[1]</a>, and <a href=\"git-stash\">git-stash[1]</a>. Note that this setting is silently ignored if portable keystroke input is not available; requires the Perl module Term::ReadKey.</p> </dd> <dt class=\"hdlist1\">interactive.diffFilter</dt> <dd> <p>When an interactive command (such as <code>git add --patch</code>) shows a colorized diff, git will pipe the diff through the shell command defined by this configuration variable. The command may mark up the diff further for human consumption, provided that it retains a one-to-one correspondence with the lines in the original diff. Defaults to disabled (no filtering).</p> </dd> <dt class=\"hdlist1\">log.abbrevCommit</dt> <dd> <p>If true, makes <a href=\"git-log\">git-log[1]</a>, <a href=\"git-show\">git-show[1]</a>, and <a href=\"git-whatchanged\">git-whatchanged[1]</a> assume <code>--abbrev-commit</code>. You may override this option with <code>--no-abbrev-commit</code>.</p> </dd> <dt class=\"hdlist1\">log.date</dt> <dd> <p>Set the default date-time mode for the <code>log</code> command. Setting a value for log.date is similar to using <code>git log</code>'s <code>--date</code> option. See <a href=\"git-log\">git-log[1]</a> for details.</p> </dd> <dt class=\"hdlist1\">log.decorate</dt> <dd> <p>Print out the ref names of any commits that are shown by the log command. If <code>short</code> is specified, the ref name prefixes <code>refs/heads/</code>, <code>refs/tags/</code> and <code>refs/remotes/</code> will not be printed. If <code>full</code> is specified, the full ref name (including prefix) will be printed. If <code>auto</code> is specified, then if the output is going to a terminal, the ref names are shown as if <code>short</code> were given, otherwise no ref names are shown. This is the same as the <code>--decorate</code> option of the <code>git log</code>.</p> </dd> <dt class=\"hdlist1\">log.follow</dt> <dd> <p>If <code>true</code>, <code>git log</code> will act as if the <code>--follow</code> option was used when a single &lt;path&gt; is given. This has the same limitations as <code>--follow</code>, i.e. it cannot be used to follow multiple files and does not work well on non-linear history.</p> </dd> <dt class=\"hdlist1\">log.showRoot</dt> <dd> <p>If true, the initial commit will be shown as a big creation event. This is equivalent to a diff against an empty tree. Tools like <a href=\"git-log\">git-log[1]</a> or <a href=\"git-whatchanged\">git-whatchanged[1]</a>, which normally hide the root commit will now show it. True by default.</p> </dd> <dt class=\"hdlist1\">log.mailmap</dt> <dd> <p>If true, makes <a href=\"git-log\">git-log[1]</a>, <a href=\"git-show\">git-show[1]</a>, and <a href=\"git-whatchanged\">git-whatchanged[1]</a> assume <code>--use-mailmap</code>.</p> </dd> <dt class=\"hdlist1\">mailinfo.scissors</dt> <dd> <p>If true, makes <a href=\"git-mailinfo\">git-mailinfo[1]</a> (and therefore <a href=\"git-am\">git-am[1]</a>) act by default as if the --scissors option was provided on the command-line. When active, this features removes everything from the message body before a scissors line (i.e. consisting mainly of \"&gt;8\", \"8&lt;\" and \"-\").</p> </dd> <dt class=\"hdlist1\">mailmap.file</dt> <dd> <p>The location of an augmenting mailmap file. The default mailmap, located in the root of the repository, is loaded first, then the mailmap file pointed to by this variable. The location of the mailmap file may be in a repository subdirectory, or somewhere outside of the repository itself. See <a href=\"git-shortlog\">git-shortlog[1]</a> and <a href=\"git-blame\">git-blame[1]</a>.</p> </dd> <dt class=\"hdlist1\">mailmap.blob</dt> <dd> <p>Like <code>mailmap.file</code>, but consider the value as a reference to a blob in the repository. If both <code>mailmap.file</code> and <code>mailmap.blob</code> are given, both are parsed, with entries from <code>mailmap.file</code> taking precedence. In a bare repository, this defaults to <code>HEAD:.mailmap</code>. In a non-bare repository, it defaults to empty.</p> </dd> <dt class=\"hdlist1\">man.viewer</dt> <dd> <p>Specify the programs that may be used to display help in the <code>man</code> format. See <a href=\"git-help\">git-help[1]</a>.</p> </dd> <dt class=\"hdlist1\">man.&lt;tool&gt;.cmd</dt> <dd> <p>Specify the command to invoke the specified man viewer. The specified command is evaluated in shell with the man page passed as argument. (See <a href=\"git-help\">git-help[1]</a>.)</p> </dd> <dt class=\"hdlist1\">man.&lt;tool&gt;.path</dt> <dd> <p>Override the path for the given tool that may be used to display help in the <code>man</code> format. See <a href=\"git-help\">git-help[1]</a>.</p> </dd> <dt class=\"hdlist1\">merge.conflictStyle</dt> <dd> <p>Specify the style in which conflicted hunks are written out to working tree files upon merge. The default is \"merge\", which shows a <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code> conflict marker, changes made by one side, a <code>=======</code> marker, changes made by the other side, and then a <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> marker. An alternate style, \"diff3\", adds a <code>|||||||</code> marker and the original text before the <code>=======</code> marker.</p> </dd> <dt class=\"hdlist1\">merge.defaultToUpstream</dt> <dd> <p>If merge is called without any commit argument, merge the upstream branches configured for the current branch by using their last observed values stored in their remote-tracking branches. The values of the <code>branch.&lt;current branch&gt;.merge</code> that name the branches at the remote named by <code>branch.&lt;current branch&gt;.remote</code> are consulted, and then they are mapped via <code>remote.&lt;remote&gt;.fetch</code> to their corresponding remote-tracking branches, and the tips of these tracking branches are merged.</p> </dd> <dt class=\"hdlist1\">merge.ff</dt> <dd> <p>By default, Git does not create an extra merge commit when merging a commit that is a descendant of the current commit. Instead, the tip of the current branch is fast-forwarded. When set to <code>false</code>, this variable tells Git to create an extra merge commit in such a case (equivalent to giving the <code>--no-ff</code> option from the command line). When set to <code>only</code>, only such fast-forward merges are allowed (equivalent to giving the <code>--ff-only</code> option from the command line).</p> </dd> <dt class=\"hdlist1\">merge.branchdesc</dt> <dd> <p>In addition to branch names, populate the log message with the branch description text associated with them. Defaults to false.</p> </dd> <dt class=\"hdlist1\">merge.log</dt> <dd> <p>In addition to branch names, populate the log message with at most the specified number of one-line descriptions from the actual commits that are being merged. Defaults to false, and true is a synonym for 20.</p> </dd> </dl> </div> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">merge.renameLimit</dt> <dd> <p>The number of files to consider when performing rename detection during a merge; if not specified, defaults to the value of diff.renameLimit.</p> </dd> <dt class=\"hdlist1\">merge.renormalize</dt> <dd> <p>Tell Git that canonical representation of files in the repository has changed over time (e.g. earlier commits record text files with CRLF line endings, but recent ones use LF line endings). In such a repository, Git can convert the data recorded in commits to a canonical form before performing a merge to reduce unnecessary conflicts. For more information, see section \"Merging branches with differing checkin/checkout attributes\" in <a href=\"gitattributes\">gitattributes[5]</a>.</p> </dd> <dt class=\"hdlist1\">merge.stat</dt> <dd> <p>Whether to print the diffstat between ORIG_HEAD and the merge result at the end of the merge. True by default.</p> </dd> <dt class=\"hdlist1\">merge.tool</dt> <dd> <p>Controls which merge tool is used by <a href=\"git-mergetool\">git-mergetool[1]</a>. The list below shows the valid built-in values. Any other value is treated as a custom merge tool and requires that a corresponding mergetool.&lt;tool&gt;.cmd variable is defined.</p> </dd> </dl> </div> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">merge.verbosity</dt> <dd> <p>Controls the amount of output shown by the recursive merge strategy. Level 0 outputs nothing except a final error message if conflicts were detected. Level 1 outputs only conflicts, 2 outputs conflicts and file changes. Level 5 and above outputs debugging information. The default is level 2. Can be overridden by the <code>GIT_MERGE_VERBOSITY</code> environment variable.</p> </dd> <dt class=\"hdlist1\">merge.&lt;driver&gt;.name</dt> <dd> <p>Defines a human-readable name for a custom low-level merge driver. See <a href=\"gitattributes\">gitattributes[5]</a> for details.</p> </dd> <dt class=\"hdlist1\">merge.&lt;driver&gt;.driver</dt> <dd> <p>Defines the command that implements a custom low-level merge driver. See <a href=\"gitattributes\">gitattributes[5]</a> for details.</p> </dd> <dt class=\"hdlist1\">merge.&lt;driver&gt;.recursive</dt> <dd> <p>Names a low-level merge driver to be used when performing an internal merge between common ancestors. See <a href=\"gitattributes\">gitattributes[5]</a> for details.</p> </dd> </dl> </div> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">mergetool.&lt;tool&gt;.path</dt> <dd> <p>Override the path for the given tool. This is useful in case your tool is not in the PATH.</p> </dd> <dt class=\"hdlist1\">mergetool.&lt;tool&gt;.cmd</dt> <dd> <p>Specify the command to invoke the specified merge tool. The specified command is evaluated in shell with the following variables available: <code>BASE</code> is the name of a temporary file containing the common base of the files to be merged, if available; <code>LOCAL</code> is the name of a temporary file containing the contents of the file on the current branch; <code>REMOTE</code> is the name of a temporary file containing the contents of the file from the branch being merged; <code>MERGED</code> contains the name of the file to which the merge tool should write the results of a successful merge.</p> </dd> <dt class=\"hdlist1\">mergetool.&lt;tool&gt;.trustExitCode</dt> <dd> <p>For a custom merge command, specify whether the exit code of the merge command can be used to determine whether the merge was successful. If this is not set to true then the merge target file timestamp is checked and the merge assumed to have been successful if the file has been updated, otherwise the user is prompted to indicate the success of the merge.</p> </dd> <dt class=\"hdlist1\">mergetool.meld.hasOutput</dt> <dd> <p>Older versions of <code>meld</code> do not support the <code>--output</code> option. Git will attempt to detect whether <code>meld</code> supports <code>--output</code> by inspecting the output of <code>meld --help</code>. Configuring <code>mergetool.meld.hasOutput</code> will make Git skip these checks and use the configured value instead. Setting <code>mergetool.meld.hasOutput</code> to <code>true</code> tells Git to unconditionally use the <code>--output</code> option, and <code>false</code> avoids using <code>--output</code>.</p> </dd> <dt class=\"hdlist1\">mergetool.keepBackup</dt> <dd> <p>After performing a merge, the original file with conflict markers can be saved as a file with a <code>.orig</code> extension. If this variable is set to <code>false</code> then this file is not preserved. Defaults to <code>true</code> (i.e. keep the backup files).</p> </dd> <dt class=\"hdlist1\">mergetool.keepTemporaries</dt> <dd> <p>When invoking a custom merge tool, Git uses a set of temporary files to pass to the tool. If the tool returns an error and this variable is set to <code>true</code>, then these temporary files will be preserved, otherwise they will be removed after the tool has exited. Defaults to <code>false</code>.</p> </dd> <dt class=\"hdlist1\">mergetool.writeToTemp</dt> <dd> <p>Git writes temporary <code>BASE</code>, <code>LOCAL</code>, and <code>REMOTE</code> versions of conflicting files in the worktree by default. Git will attempt to use a temporary directory for these files when set <code>true</code>. Defaults to <code>false</code>.</p> </dd> <dt class=\"hdlist1\">mergetool.prompt</dt> <dd> <p>Prompt before each invocation of the merge resolution program.</p> </dd> <dt class=\"hdlist1\">notes.mergeStrategy</dt> <dd> <p>Which merge strategy to choose by default when resolving notes conflicts. Must be one of <code>manual</code>, <code>ours</code>, <code>theirs</code>, <code>union</code>, or <code>cat_sort_uniq</code>. Defaults to <code>manual</code>. See \"NOTES MERGE STRATEGIES\" section of <a href=\"git-notes\">git-notes[1]</a> for more information on each strategy.</p> </dd> <dt class=\"hdlist1\">notes.&lt;name&gt;.mergeStrategy</dt> <dd> <p>Which merge strategy to choose when doing a notes merge into refs/notes/&lt;name&gt;. This overrides the more general \"notes.mergeStrategy\". See the \"NOTES MERGE STRATEGIES\" section in <a href=\"git-notes\">git-notes[1]</a> for more information on the available strategies.</p> </dd> <dt class=\"hdlist1\">notes.displayRef</dt> <dd> <p>The (fully qualified) refname from which to show notes when showing commit messages. The value of this variable can be set to a glob, in which case notes from all matching refs will be shown. You may also specify this configuration variable several times. A warning will be issued for refs that do not exist, but a glob that does not match any refs is silently ignored.</p>  <p>This setting can be overridden with the <code>GIT_NOTES_DISPLAY_REF</code> environment variable, which must be a colon separated list of refs or globs.</p>   <p>The effective value of \"core.notesRef\" (possibly overridden by GIT_NOTES_REF) is also implicitly added to the list of refs to be displayed.</p>  </dd> <dt class=\"hdlist1\">notes.rewrite.&lt;command&gt;</dt> <dd> <p>When rewriting commits with &lt;command&gt; (currently <code>amend</code> or <code>rebase</code>) and this variable is set to <code>true</code>, Git automatically copies your notes from the original to the rewritten commit. Defaults to <code>true</code>, but see \"notes.rewriteRef\" below.</p> </dd> <dt class=\"hdlist1\">notes.rewriteMode</dt> <dd> <p>When copying notes during a rewrite (see the \"notes.rewrite.&lt;command&gt;\" option), determines what to do if the target commit already has a note. Must be one of <code>overwrite</code>, <code>concatenate</code>, <code>cat_sort_uniq</code>, or <code>ignore</code>. Defaults to <code>concatenate</code>.</p>  <p>This setting can be overridden with the <code>GIT_NOTES_REWRITE_MODE</code> environment variable.</p>  </dd> <dt class=\"hdlist1\">notes.rewriteRef</dt> <dd> <p>When copying notes during a rewrite, specifies the (fully qualified) ref whose notes should be copied. The ref may be a glob, in which case notes in all matching refs will be copied. You may also specify this configuration several times.</p>  <p>Does not have a default value; you must configure this variable to enable note rewriting. Set it to <code>refs/notes/commits</code> to enable rewriting for the default commit notes.</p>   <p>This setting can be overridden with the <code>GIT_NOTES_REWRITE_REF</code> environment variable, which must be a colon separated list of refs or globs.</p>  </dd> <dt class=\"hdlist1\">pack.window</dt> <dd> <p>The size of the window used by <a href=\"git-pack-objects\">git-pack-objects[1]</a> when no window size is given on the command line. Defaults to 10.</p> </dd> <dt class=\"hdlist1\">pack.depth</dt> <dd> <p>The maximum delta depth used by <a href=\"git-pack-objects\">git-pack-objects[1]</a> when no maximum depth is given on the command line. Defaults to 50.</p> </dd> <dt class=\"hdlist1\">pack.windowMemory</dt> <dd> <p>The maximum size of memory that is consumed by each thread in <a href=\"git-pack-objects\">git-pack-objects[1]</a> for pack window memory when no limit is given on the command line. The value can be suffixed with \"k\", \"m\", or \"g\". When left unconfigured (or set explicitly to 0), there will be no limit.</p> </dd> <dt class=\"hdlist1\">pack.compression</dt> <dd> <p>An integer -1..9, indicating the compression level for objects in a pack file. -1 is the zlib default. 0 means no compression, and 1..9 are various speed/size tradeoffs, 9 being slowest. If not set, defaults to core.compression. If that is not set, defaults to -1, the zlib default, which is \"a default compromise between speed and compression (currently equivalent to level 6).\"</p>  <p>Note that changing the compression level will not automatically recompress all existing objects. You can force recompression by passing the -F option to <a href=\"git-repack\">git-repack[1]</a>.</p>  </dd> <dt class=\"hdlist1\">pack.deltaCacheSize</dt> <dd> <p>The maximum memory in bytes used for caching deltas in <a href=\"git-pack-objects\">git-pack-objects[1]</a> before writing them out to a pack. This cache is used to speed up the writing object phase by not having to recompute the final delta result once the best match for all objects is found. Repacking large repositories on machines which are tight with memory might be badly impacted by this though, especially if this cache pushes the system into swapping. A value of 0 means no limit. The smallest size of 1 byte may be used to virtually disable this cache. Defaults to 256 MiB.</p> </dd> <dt class=\"hdlist1\">pack.deltaCacheLimit</dt> <dd> <p>The maximum size of a delta, that is cached in <a href=\"git-pack-objects\">git-pack-objects[1]</a>. This cache is used to speed up the writing object phase by not having to recompute the final delta result once the best match for all objects is found. Defaults to 1000.</p> </dd> <dt class=\"hdlist1\">pack.threads</dt> <dd> <p>Specifies the number of threads to spawn when searching for best delta matches. This requires that <a href=\"git-pack-objects\">git-pack-objects[1]</a> be compiled with pthreads otherwise this option is ignored with a warning. This is meant to reduce packing time on multiprocessor machines. The required amount of memory for the delta search window is however multiplied by the number of threads. Specifying 0 will cause Git to auto-detect the number of CPU’s and set the number of threads accordingly.</p> </dd> <dt class=\"hdlist1\">pack.indexVersion</dt> <dd> <p>Specify the default pack index version. Valid values are 1 for legacy pack index used by Git versions prior to 1.5.2, and 2 for the new pack index with capabilities for packs larger than 4 GB as well as proper protection against the repacking of corrupted packs. Version 2 is the default. Note that version 2 is enforced and this config option ignored whenever the corresponding pack is larger than 2 GB.</p>  <p>If you have an old Git that does not understand the version 2 <code>*.idx</code> file, cloning or fetching over a non native protocol (e.g. \"http\") that will copy both <code>*.pack</code> file and corresponding <code>*.idx</code> file from the other side may give you a repository that cannot be accessed with your older version of Git. If the <code>*.pack</code> file is smaller than 2 GB, however, you can use <a href=\"git-index-pack\">git-index-pack[1]</a> on the *.pack file to regenerate the <code>*.idx</code> file.</p>  </dd> <dt class=\"hdlist1\">pack.packSizeLimit</dt> <dd> <p>The maximum size of a pack. This setting only affects packing to a file when repacking, i.e. the git:// protocol is unaffected. It can be overridden by the <code>--max-pack-size</code> option of <a href=\"git-repack\">git-repack[1]</a>. Reaching this limit results in the creation of multiple packfiles; which in turn prevents bitmaps from being created. The minimum size allowed is limited to 1 MiB. The default is unlimited. Common unit suffixes of <code>k</code>, <code>m</code>, or <code>g</code> are supported.</p> </dd> <dt class=\"hdlist1\">pack.useBitmaps</dt> <dd> <p>When true, git will use pack bitmaps (if available) when packing to stdout (e.g., during the server side of a fetch). Defaults to true. You should not generally need to turn this off unless you are debugging pack bitmaps.</p> </dd> <dt class=\"hdlist1\">pack.writeBitmaps (deprecated)</dt> <dd> <p>This is a deprecated synonym for <code>repack.writeBitmaps</code>.</p> </dd> <dt class=\"hdlist1\">pack.writeBitmapHashCache</dt> <dd> <p>When true, git will include a \"hash cache\" section in the bitmap index (if one is written). This cache can be used to feed git’s delta heuristics, potentially leading to better deltas between bitmapped and non-bitmapped objects (e.g., when serving a fetch between an older, bitmapped pack and objects that have been pushed since the last gc). The downside is that it consumes 4 bytes per object of disk space, and that JGit’s bitmap implementation does not understand it, causing it to complain if Git and JGit are used on the same repository. Defaults to false.</p> </dd> <dt class=\"hdlist1\">pager.&lt;cmd&gt;</dt> <dd> <p>If the value is boolean, turns on or off pagination of the output of a particular Git subcommand when writing to a tty. Otherwise, turns on pagination for the subcommand using the pager specified by the value of <code>pager.&lt;cmd&gt;</code>. If <code>--paginate</code> or <code>--no-pager</code> is specified on the command line, it takes precedence over this option. To disable pagination for all commands, set <code>core.pager</code> or <code>GIT_PAGER</code> to <code>cat</code>.</p> </dd> <dt class=\"hdlist1\">pretty.&lt;name&gt;</dt> <dd> <p>Alias for a --pretty= format string, as specified in <a href=\"git-log\">git-log[1]</a>. Any aliases defined here can be used just as the built-in pretty formats could. For example, running <code>git config pretty.changelog \"format:* %H %s\"</code> would cause the invocation <code>git log --pretty=changelog</code> to be equivalent to running <code>git log \"--pretty=format:* %H %s\"</code>. Note that an alias with the same name as a built-in format will be silently ignored.</p> </dd> <dt class=\"hdlist1\">pull.ff</dt> <dd> <p>By default, Git does not create an extra merge commit when merging a commit that is a descendant of the current commit. Instead, the tip of the current branch is fast-forwarded. When set to <code>false</code>, this variable tells Git to create an extra merge commit in such a case (equivalent to giving the <code>--no-ff</code> option from the command line). When set to <code>only</code>, only such fast-forward merges are allowed (equivalent to giving the <code>--ff-only</code> option from the command line). This setting overrides <code>merge.ff</code> when pulling.</p> </dd> <dt class=\"hdlist1\">pull.rebase</dt> <dd> <p>When true, rebase branches on top of the fetched branch, instead of merging the default branch from the default remote when \"git pull\" is run. See \"branch.&lt;name&gt;.rebase\" for setting this on a per-branch basis.</p>  <p>When preserve, also pass <code>--preserve-merges</code> along to <code>git rebase</code> so that locally committed merge commits will not be flattened by running <code>git pull</code>.</p>   <p>When the value is <code>interactive</code>, the rebase is run in interactive mode.</p>   <p><strong>NOTE</strong>: this is a possibly dangerous operation; do <strong>not</strong> use it unless you understand the implications (see <a href=\"git-rebase\">git-rebase[1]</a> for details).</p>  </dd> <dt class=\"hdlist1\">pull.octopus</dt> <dd> <p>The default merge strategy to use when pulling multiple branches at once.</p> </dd> <dt class=\"hdlist1\">pull.twohead</dt> <dd> <p>The default merge strategy to use when pulling a single branch.</p> </dd> <dt class=\"hdlist1\">push.default</dt> <dd> <p>Defines the action <code>git push</code> should take if no refspec is explicitly given. Different values are well-suited for specific workflows; for instance, in a purely central workflow (i.e. the fetch source is equal to the push destination), <code>upstream</code> is probably what you want. Possible values are:</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"ulist\"> <ul> <li> <p><code>nothing</code> - do not push anything (error out) unless a refspec is explicitly given. This is primarily meant for people who want to avoid mistakes by always being explicit.</p> </li> <li> <p><code>current</code> - push the current branch to update a branch with the same name on the receiving end. Works in both central and non-central workflows.</p> </li> <li> <p><code>upstream</code> - push the current branch back to the branch whose changes are usually integrated into the current branch (which is called <code>@{upstream}</code>). This mode only makes sense if you are pushing to the same repository you would normally pull from (i.e. central workflow).</p> </li> <li> <p><code>simple</code> - in centralized workflow, work like <code>upstream</code> with an added safety to refuse to push if the upstream branch’s name is different from the local one.</p>  <p>When pushing to a remote that is different from the remote you normally pull from, work as <code>current</code>. This is the safest option and is suited for beginners.</p>   <p>This mode has become the default in Git 2.0.</p>  </li> <li> <p><code>matching</code> - push all branches having the same name on both ends. This makes the repository you are pushing to remember the set of branches that will be pushed out (e.g. if you always push <code>maint</code> and <code>master</code> there and no other branches, the repository you push to will have these two branches, and your local <code>maint</code> and <code>master</code> will be pushed there).</p>  <p>To use this mode effectively, you have to make sure <code>all</code> the branches you would push out are ready to be pushed out before running <code>git push</code>, as the whole point of this mode is to allow you to push all of the branches in one go. If you usually finish work on only one branch and push out the result, while other branches are unfinished, this mode is not for you. Also this mode is not suitable for pushing into a shared central repository, as other people may add new branches there, or update the tip of existing branches outside your control.</p>   <p>This used to be the default, but not since Git 2.0 (<code>simple</code> is the new default).</p>  </li> </ul> </div> </div> </div> </dd> <dt class=\"hdlist1\">push.followTags</dt> <dd> <p>If set to true enable <code>--follow-tags</code> option by default. You may override this configuration at time of push by specifying <code>--no-follow-tags</code>.</p> </dd> <dt class=\"hdlist1\">push.gpgSign</dt> <dd> <p>May be set to a boolean value, or the string <code>if-asked</code>. A true value causes all pushes to be GPG signed, as if <code>--signed</code> is passed to <a href=\"git-push\">git-push[1]</a>. The string <code>if-asked</code> causes pushes to be signed if the server supports it, as if <code>--signed=if-asked</code> is passed to <code>git push</code>. A false value may override a value from a lower-priority config file. An explicit command-line flag always overrides this config option.</p> </dd> <dt class=\"hdlist1\">push.recurseSubmodules</dt> <dd> <p>Make sure all submodule commits used by the revisions to be pushed are available on a remote-tracking branch. If the value is <code>check</code> then Git will verify that all submodule commits that changed in the revisions to be pushed are available on at least one remote of the submodule. If any commits are missing, the push will be aborted and exit with non-zero status. If the value is <code>on-demand</code> then all submodules that changed in the revisions to be pushed will be pushed. If on-demand was not able to push all necessary revisions it will also be aborted and exit with non-zero status. If the value is <code>no</code> then default behavior of ignoring submodules when pushing is retained. You may override this configuration at time of push by specifying <code>--recurse-submodules=check|on-demand|no</code>.</p> </dd> <dt class=\"hdlist1\">rebase.stat</dt> <dd> <p>Whether to show a diffstat of what changed upstream since the last rebase. False by default.</p> </dd> <dt class=\"hdlist1\">rebase.autoSquash</dt> <dd> <p>If set to true enable <code>--autosquash</code> option by default.</p> </dd> <dt class=\"hdlist1\">rebase.autoStash</dt> <dd> <p>When set to true, automatically create a temporary stash before the operation begins, and apply it after the operation ends. This means that you can run rebase on a dirty worktree. However, use with care: the final stash application after a successful rebase might result in non-trivial conflicts. Defaults to false.</p> </dd> <dt class=\"hdlist1\">rebase.missingCommitsCheck</dt> <dd> <p>If set to \"warn\", git rebase -i will print a warning if some commits are removed (e.g. a line was deleted), however the rebase will still proceed. If set to \"error\", it will print the previous warning and stop the rebase, <code>git rebase --edit-todo</code> can then be used to correct the error. If set to \"ignore\", no checking is done. To drop a commit without warning or error, use the <code>drop</code> command in the todo-list. Defaults to \"ignore\".</p> </dd> </dl> </div>  <p>rebase.instructionFormat A format string, as specified in <a href=\"git-log\">git-log[1]</a>, to be used for the instruction list during an interactive rebase. The format will automatically have the long commit hash prepended to the format.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">receive.advertiseAtomic</dt> <dd> <p>By default, git-receive-pack will advertise the atomic push capability to its clients. If you don’t want to this capability to be advertised, set this variable to false.</p> </dd> <dt class=\"hdlist1\">receive.autogc</dt> <dd> <p>By default, git-receive-pack will run \"git-gc --auto\" after receiving data from git-push and updating refs. You can stop it by setting this variable to false.</p> </dd> <dt class=\"hdlist1\">receive.certNonceSeed</dt> <dd> <p>By setting this variable to a string, <code>git receive-pack</code> will accept a <code>git push --signed</code> and verifies it by using a \"nonce\" protected by HMAC using this string as a secret key.</p> </dd> <dt class=\"hdlist1\">receive.certNonceSlop</dt> <dd> <p>When a <code>git push --signed</code> sent a push certificate with a \"nonce\" that was issued by a receive-pack serving the same repository within this many seconds, export the \"nonce\" found in the certificate to <code>GIT_PUSH_CERT_NONCE</code> to the hooks (instead of what the receive-pack asked the sending side to include). This may allow writing checks in <code>pre-receive</code> and <code>post-receive</code> a bit easier. Instead of checking <code>GIT_PUSH_CERT_NONCE_SLOP</code> environment variable that records by how many seconds the nonce is stale to decide if they want to accept the certificate, they only can check <code>GIT_PUSH_CERT_NONCE_STATUS</code> is <code>OK</code>.</p> </dd> <dt class=\"hdlist1\">receive.fsckObjects</dt> <dd> <p>If it is set to true, git-receive-pack will check all received objects. It will abort in the case of a malformed object or a broken link. The result of an abort are only dangling objects. Defaults to false. If not set, the value of <code>transfer.fsckObjects</code> is used instead.</p> </dd> <dt class=\"hdlist1\">receive.fsck.&lt;msg-id&gt;</dt> <dd> <p>When <code>receive.fsckObjects</code> is set to true, errors can be switched to warnings and vice versa by configuring the <code>receive.fsck.&lt;msg-id&gt;</code> setting where the <code>&lt;msg-id&gt;</code> is the fsck message ID and the value is one of <code>error</code>, <code>warn</code> or <code>ignore</code>. For convenience, fsck prefixes the error/warning with the message ID, e.g. \"missingEmail: invalid author/committer line - missing email\" means that setting <code>receive.fsck.missingEmail = ignore</code> will hide that issue.</p>  <p>This feature is intended to support working with legacy repositories which would not pass pushing when <code>receive.fsckObjects = true</code>, allowing the host to accept repositories with certain known issues but still catch other issues.</p>  </dd> <dt class=\"hdlist1\">receive.fsck.skipList</dt> <dd> <p>The path to a sorted list of object names (i.e. one SHA-1 per line) that are known to be broken in a non-fatal way and should be ignored. This feature is useful when an established project should be accepted despite early commits containing errors that can be safely ignored such as invalid committer email addresses. Note: corrupt objects cannot be skipped with this setting.</p> </dd> <dt class=\"hdlist1\">receive.unpackLimit</dt> <dd> <p>If the number of objects received in a push is below this limit then the objects will be unpacked into loose object files. However if the number of received objects equals or exceeds this limit then the received pack will be stored as a pack, after adding any missing delta bases. Storing the pack from a push can make the push operation complete faster, especially on slow filesystems. If not set, the value of <code>transfer.unpackLimit</code> is used instead.</p> </dd> <dt class=\"hdlist1\">receive.denyDeletes</dt> <dd> <p>If set to true, git-receive-pack will deny a ref update that deletes the ref. Use this to prevent such a ref deletion via a push.</p> </dd> <dt class=\"hdlist1\">receive.denyDeleteCurrent</dt> <dd> <p>If set to true, git-receive-pack will deny a ref update that deletes the currently checked out branch of a non-bare repository.</p> </dd> <dt class=\"hdlist1\">receive.denyCurrentBranch</dt> <dd> <p>If set to true or \"refuse\", git-receive-pack will deny a ref update to the currently checked out branch of a non-bare repository. Such a push is potentially dangerous because it brings the HEAD out of sync with the index and working tree. If set to \"warn\", print a warning of such a push to stderr, but allow the push to proceed. If set to false or \"ignore\", allow such pushes with no message. Defaults to \"refuse\".</p>  <p>Another option is \"updateInstead\" which will update the working tree if pushing into the current branch. This option is intended for synchronizing working directories when one side is not easily accessible via interactive ssh (e.g. a live web site, hence the requirement that the working directory be clean). This mode also comes in handy when developing inside a VM to test and fix code on different Operating Systems.</p>   <p>By default, \"updateInstead\" will refuse the push if the working tree or the index have any difference from the HEAD, but the <code>push-to-checkout</code> hook can be used to customize this. See <a href=\"githooks\">githooks[5]</a>.</p>  </dd> <dt class=\"hdlist1\">receive.denyNonFastForwards</dt> <dd> <p>If set to true, git-receive-pack will deny a ref update which is not a fast-forward. Use this to prevent such an update via a push, even if that push is forced. This configuration variable is set when initializing a shared repository.</p> </dd> <dt class=\"hdlist1\">receive.hideRefs</dt> <dd> <p>This variable is the same as <code>transfer.hideRefs</code>, but applies only to <code>receive-pack</code> (and so affects pushes, but not fetches). An attempt to update or delete a hidden ref by <code>git push</code> is rejected.</p> </dd> <dt class=\"hdlist1\">receive.updateServerInfo</dt> <dd> <p>If set to true, git-receive-pack will run git-update-server-info after receiving data from git-push and updating refs.</p> </dd> <dt class=\"hdlist1\">receive.shallowUpdate</dt> <dd> <p>If set to true, .git/shallow can be updated when new refs require new shallow roots. Otherwise those refs are rejected.</p> </dd> <dt class=\"hdlist1\">remote.pushDefault</dt> <dd> <p>The remote to push to by default. Overrides <code>branch.&lt;name&gt;.remote</code> for all branches, and is overridden by <code>branch.&lt;name&gt;.pushRemote</code> for specific branches.</p> </dd> <dt class=\"hdlist1\">remote.&lt;name&gt;.url</dt> <dd> <p>The URL of a remote repository. See <a href=\"git-fetch\">git-fetch[1]</a> or <a href=\"git-push\">git-push[1]</a>.</p> </dd> <dt class=\"hdlist1\">remote.&lt;name&gt;.pushurl</dt> <dd> <p>The push URL of a remote repository. See <a href=\"git-push\">git-push[1]</a>.</p> </dd> <dt class=\"hdlist1\">remote.&lt;name&gt;.proxy</dt> <dd> <p>For remotes that require curl (http, https and ftp), the URL to the proxy to use for that remote. Set to the empty string to disable proxying for that remote.</p> </dd> <dt class=\"hdlist1\">remote.&lt;name&gt;.proxyAuthMethod</dt> <dd> <p>For remotes that require curl (http, https and ftp), the method to use for authenticating against the proxy in use (probably set in <code>remote.&lt;name&gt;.proxy</code>). See <code>http.proxyAuthMethod</code>.</p> </dd> <dt class=\"hdlist1\">remote.&lt;name&gt;.fetch</dt> <dd> <p>The default set of \"refspec\" for <a href=\"git-fetch\">git-fetch[1]</a>. See <a href=\"git-fetch\">git-fetch[1]</a>.</p> </dd> <dt class=\"hdlist1\">remote.&lt;name&gt;.push</dt> <dd> <p>The default set of \"refspec\" for <a href=\"git-push\">git-push[1]</a>. See <a href=\"git-push\">git-push[1]</a>.</p> </dd> <dt class=\"hdlist1\">remote.&lt;name&gt;.mirror</dt> <dd> <p>If true, pushing to this remote will automatically behave as if the <code>--mirror</code> option was given on the command line.</p> </dd> <dt class=\"hdlist1\">remote.&lt;name&gt;.skipDefaultUpdate</dt> <dd> <p>If true, this remote will be skipped by default when updating using <a href=\"git-fetch\">git-fetch[1]</a> or the <code>update</code> subcommand of <a href=\"git-remote\">git-remote[1]</a>.</p> </dd> <dt class=\"hdlist1\">remote.&lt;name&gt;.skipFetchAll</dt> <dd> <p>If true, this remote will be skipped by default when updating using <a href=\"git-fetch\">git-fetch[1]</a> or the <code>update</code> subcommand of <a href=\"git-remote\">git-remote[1]</a>.</p> </dd> <dt class=\"hdlist1\">remote.&lt;name&gt;.receivepack</dt> <dd> <p>The default program to execute on the remote side when pushing. See option --receive-pack of <a href=\"git-push\">git-push[1]</a>.</p> </dd> <dt class=\"hdlist1\">remote.&lt;name&gt;.uploadpack</dt> <dd> <p>The default program to execute on the remote side when fetching. See option --upload-pack of <a href=\"git-fetch-pack\">git-fetch-pack[1]</a>.</p> </dd> <dt class=\"hdlist1\">remote.&lt;name&gt;.tagOpt</dt> <dd> <p>Setting this value to --no-tags disables automatic tag following when fetching from remote &lt;name&gt;. Setting it to --tags will fetch every tag from remote &lt;name&gt;, even if they are not reachable from remote branch heads. Passing these flags directly to <a href=\"git-fetch\">git-fetch[1]</a> can override this setting. See options --tags and --no-tags of <a href=\"git-fetch\">git-fetch[1]</a>.</p> </dd> <dt class=\"hdlist1\">remote.&lt;name&gt;.vcs</dt> <dd> <p>Setting this to a value &lt;vcs&gt; will cause Git to interact with the remote with the git-remote-&lt;vcs&gt; helper.</p> </dd> <dt class=\"hdlist1\">remote.&lt;name&gt;.prune</dt> <dd> <p>When set to true, fetching from this remote by default will also remove any remote-tracking references that no longer exist on the remote (as if the <code>--prune</code> option was given on the command line). Overrides <code>fetch.prune</code> settings, if any.</p> </dd> <dt class=\"hdlist1\">remotes.&lt;group&gt;</dt> <dd> <p>The list of remotes which are fetched by \"git remote update &lt;group&gt;\". See <a href=\"git-remote\">git-remote[1]</a>.</p> </dd> <dt class=\"hdlist1\">repack.useDeltaBaseOffset</dt> <dd> <p>By default, <a href=\"git-repack\">git-repack[1]</a> creates packs that use delta-base offset. If you need to share your repository with Git older than version 1.4.4, either directly or via a dumb protocol such as http, then you need to set this option to \"false\" and repack. Access from old Git versions over the native protocol are unaffected by this option.</p> </dd> <dt class=\"hdlist1\">repack.packKeptObjects</dt> <dd> <p>If set to true, makes <code>git repack</code> act as if <code>--pack-kept-objects</code> was passed. See <a href=\"git-repack\">git-repack[1]</a> for details. Defaults to <code>false</code> normally, but <code>true</code> if a bitmap index is being written (either via <code>--write-bitmap-index</code> or <code>repack.writeBitmaps</code>).</p> </dd> <dt class=\"hdlist1\">repack.writeBitmaps</dt> <dd> <p>When true, git will write a bitmap index when packing all objects to disk (e.g., when <code>git repack -a</code> is run). This index can speed up the \"counting objects\" phase of subsequent packs created for clones and fetches, at the cost of some disk space and extra time spent on the initial repack. This has no effect if multiple packfiles are created. Defaults to false.</p> </dd> <dt class=\"hdlist1\">rerere.autoUpdate</dt> <dd> <p>When set to true, <code>git-rerere</code> updates the index with the resulting contents after it cleanly resolves conflicts using previously recorded resolution. Defaults to false.</p> </dd> <dt class=\"hdlist1\">rerere.enabled</dt> <dd> <p>Activate recording of resolved conflicts, so that identical conflict hunks can be resolved automatically, should they be encountered again. By default, <a href=\"git-rerere\">git-rerere[1]</a> is enabled if there is an <code>rr-cache</code> directory under the <code>$GIT_DIR</code>, e.g. if \"rerere\" was previously used in the repository.</p> </dd> <dt class=\"hdlist1\">sendemail.identity</dt> <dd> <p>A configuration identity. When given, causes values in the <code>sendemail.&lt;identity&gt;</code> subsection to take precedence over values in the <code>sendemail</code> section. The default identity is the value of <code>sendemail.identity</code>.</p> </dd> <dt class=\"hdlist1\">sendemail.smtpEncryption</dt> <dd> <p>See <a href=\"git-send-email\">git-send-email[1]</a> for description. Note that this setting is not subject to the <code>identity</code> mechanism.</p> </dd> <dt class=\"hdlist1\">sendemail.smtpssl (deprecated)</dt> <dd> <p>Deprecated alias for <code>sendemail.smtpEncryption = ssl</code>.</p> </dd> <dt class=\"hdlist1\">sendemail.smtpsslcertpath</dt> <dd> <p>Path to ca-certificates (either a directory or a single file). Set it to an empty string to disable certificate verification.</p> </dd> <dt class=\"hdlist1\">sendemail.&lt;identity&gt;.*</dt> <dd> <p>Identity-specific versions of the <code>sendemail.*</code> parameters found below, taking precedence over those when the this identity is selected, through command-line or <code>sendemail.identity</code>.</p> </dd> <dt class=\"hdlist1\">sendemail.aliasesFile</dt> <dt class=\"hdlist1\">sendemail.aliasFileType</dt> <dt class=\"hdlist1\">sendemail.annotate</dt> <dt class=\"hdlist1\">sendemail.bcc</dt> <dt class=\"hdlist1\">sendemail.cc</dt> <dt class=\"hdlist1\">sendemail.ccCmd</dt> <dt class=\"hdlist1\">sendemail.chainReplyTo</dt> <dt class=\"hdlist1\">sendemail.confirm</dt> <dt class=\"hdlist1\">sendemail.envelopeSender</dt> <dt class=\"hdlist1\">sendemail.from</dt> <dt class=\"hdlist1\">sendemail.multiEdit</dt> <dt class=\"hdlist1\">sendemail.signedoffbycc</dt> <dt class=\"hdlist1\">sendemail.smtpPass</dt> <dt class=\"hdlist1\">sendemail.suppresscc</dt> <dt class=\"hdlist1\">sendemail.suppressFrom</dt> <dt class=\"hdlist1\">sendemail.to</dt> <dt class=\"hdlist1\">sendemail.smtpDomain</dt> <dt class=\"hdlist1\">sendemail.smtpServer</dt> <dt class=\"hdlist1\">sendemail.smtpServerPort</dt> <dt class=\"hdlist1\">sendemail.smtpServerOption</dt> <dt class=\"hdlist1\">sendemail.smtpUser</dt> <dt class=\"hdlist1\">sendemail.thread</dt> <dt class=\"hdlist1\">sendemail.transferEncoding</dt> <dt class=\"hdlist1\">sendemail.validate</dt> <dt class=\"hdlist1\">sendemail.xmailer</dt> <dd> <p>See <a href=\"git-send-email\">git-send-email[1]</a> for description.</p> </dd> <dt class=\"hdlist1\">sendemail.signedoffcc (deprecated)</dt> <dd> <p>Deprecated alias for <code>sendemail.signedoffbycc</code>.</p> </dd> <dt class=\"hdlist1\">showbranch.default</dt> <dd> <p>The default set of branches for <a href=\"git-show-branch\">git-show-branch[1]</a>. See <a href=\"git-show-branch\">git-show-branch[1]</a>.</p> </dd> <dt class=\"hdlist1\">status.relativePaths</dt> <dd> <p>By default, <a href=\"git-status\">git-status[1]</a> shows paths relative to the current directory. Setting this variable to <code>false</code> shows paths relative to the repository root (this was the default for Git prior to v1.5.4).</p> </dd> <dt class=\"hdlist1\">status.short</dt> <dd> <p>Set to true to enable --short by default in <a href=\"git-status\">git-status[1]</a>. The option --no-short takes precedence over this variable.</p> </dd> <dt class=\"hdlist1\">status.branch</dt> <dd> <p>Set to true to enable --branch by default in <a href=\"git-status\">git-status[1]</a>. The option --no-branch takes precedence over this variable.</p> </dd> <dt class=\"hdlist1\">status.displayCommentPrefix</dt> <dd> <p>If set to true, <a href=\"git-status\">git-status[1]</a> will insert a comment prefix before each output line (starting with <code>core.commentChar</code>, i.e. <code>#</code> by default). This was the behavior of <a href=\"git-status\">git-status[1]</a> in Git 1.8.4 and previous. Defaults to false.</p> </dd> <dt class=\"hdlist1\">status.showUntrackedFiles</dt> <dd> <p>By default, <a href=\"git-status\">git-status[1]</a> and <a href=\"git-commit\">git-commit[1]</a> show files which are not currently tracked by Git. Directories which contain only untracked files, are shown with the directory name only. Showing untracked files means that Git needs to lstat() all the files in the whole repository, which might be slow on some systems. So, this variable controls how the commands displays the untracked files. Possible values are:</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"ulist\"> <ul> <li> <p><code>no</code> - Show no untracked files.</p> </li> <li> <p><code>normal</code> - Show untracked files and directories.</p> </li> <li> <p><code>all</code> - Show also individual files in untracked directories.</p> </li> </ul> </div> </div> </div>  <p>If this variable is not specified, it defaults to <code>normal</code>. This variable can be overridden with the -u|--untracked-files option of <a href=\"git-status\">git-status[1]</a> and <a href=\"git-commit\">git-commit[1]</a>.</p>  </dd> <dt class=\"hdlist1\">status.submoduleSummary</dt> <dd> <p>Defaults to false. If this is set to a non zero number or true (identical to -1 or an unlimited number), the submodule summary will be enabled and a summary of commits for modified submodules will be shown (see --summary-limit option of <a href=\"git-submodule\">git-submodule[1]</a>). Please note that the summary output command will be suppressed for all submodules when <code>diff.ignoreSubmodules</code> is set to <code>all</code> or only for those submodules where <code>submodule.&lt;name&gt;.ignore=all</code>. The only exception to that rule is that status and commit will show staged submodule changes. To also view the summary for ignored submodules you can either use the --ignore-submodules=dirty command-line option or the <code>git submodule summary</code> command, which shows a similar output but does not honor these settings.</p> </dd> <dt class=\"hdlist1\">stash.showPatch</dt> <dd> <p>If this is set to true, the <code>git stash show</code> command without an option will show the stash in patch form. Defaults to false. See description of <code>show</code> command in <a href=\"git-stash\">git-stash[1]</a>.</p> </dd> <dt class=\"hdlist1\">stash.showStat</dt> <dd> <p>If this is set to true, the <code>git stash show</code> command without an option will show diffstat of the stash. Defaults to true. See description of <code>show</code> command in <a href=\"git-stash\">git-stash[1]</a>.</p> </dd> <dt class=\"hdlist1\">submodule.&lt;name&gt;.path</dt> <dt class=\"hdlist1\">submodule.&lt;name&gt;.url</dt> <dd> <p>The path within this project and URL for a submodule. These variables are initially populated by <code>git submodule init</code>. See <a href=\"git-submodule\">git-submodule[1]</a> and <a href=\"gitmodules\">gitmodules[5]</a> for details.</p> </dd> <dt class=\"hdlist1\">submodule.&lt;name&gt;.update</dt> <dd> <p>The default update procedure for a submodule. This variable is populated by <code>git submodule init</code> from the <a href=\"gitmodules\">gitmodules[5]</a> file. See description of <code>update</code> command in <a href=\"git-submodule\">git-submodule[1]</a>.</p> </dd> <dt class=\"hdlist1\">submodule.&lt;name&gt;.branch</dt> <dd> <p>The remote branch name for a submodule, used by <code>git submodule\nupdate --remote</code>. Set this option to override the value found in the <code>.gitmodules</code> file. See <a href=\"git-submodule\">git-submodule[1]</a> and <a href=\"gitmodules\">gitmodules[5]</a> for details.</p> </dd> <dt class=\"hdlist1\">submodule.&lt;name&gt;.fetchRecurseSubmodules</dt> <dd> <p>This option can be used to control recursive fetching of this submodule. It can be overridden by using the --[no-]recurse-submodules command-line option to \"git fetch\" and \"git pull\". This setting will override that from in the <a href=\"gitmodules\">gitmodules[5]</a> file.</p> </dd> <dt class=\"hdlist1\">submodule.&lt;name&gt;.ignore</dt> <dd> <p>Defines under what circumstances \"git status\" and the diff family show a submodule as modified. When set to \"all\", it will never be considered modified (but it will nonetheless show up in the output of status and commit when it has been staged), \"dirty\" will ignore all changes to the submodules work tree and takes only differences between the HEAD of the submodule and the commit recorded in the superproject into account. \"untracked\" will additionally let submodules with modified tracked files in their work tree show up. Using \"none\" (the default when this option is not set) also shows submodules that have untracked files in their work tree as changed. This setting overrides any setting made in .gitmodules for this submodule, both settings can be overridden on the command line by using the \"--ignore-submodules\" option. The <code>git submodule</code> commands are not affected by this setting.</p> </dd> <dt class=\"hdlist1\">submodule.fetchJobs</dt> <dd> <p>Specifies how many submodules are fetched/cloned at the same time. A positive integer allows up to that number of submodules fetched in parallel. A value of 0 will give some reasonable default. If unset, it defaults to 1.</p> </dd> <dt class=\"hdlist1\">tag.forceSignAnnotated</dt> <dd> <p>A boolean to specify whether annotated tags created should be GPG signed. If <code>--annotate</code> is specified on the command line, it takes precedence over this option.</p> </dd> <dt class=\"hdlist1\">tag.sort</dt> <dd> <p>This variable controls the sort ordering of tags when displayed by <a href=\"git-tag\">git-tag[1]</a>. Without the \"--sort=&lt;value&gt;\" option provided, the value of this variable will be used as the default.</p> </dd> <dt class=\"hdlist1\">tar.umask</dt> <dd> <p>This variable can be used to restrict the permission bits of tar archive entries. The default is 0002, which turns off the world write bit. The special value \"user\" indicates that the archiving user’s umask will be used instead. See umask(2) and <a href=\"git-archive\">git-archive[1]</a>.</p> </dd> <dt class=\"hdlist1\">transfer.fsckObjects</dt> <dd> <p>When <code>fetch.fsckObjects</code> or <code>receive.fsckObjects</code> are not set, the value of this variable is used instead. Defaults to false.</p> </dd> <dt class=\"hdlist1\">transfer.hideRefs</dt> <dd> <p>String(s) <code>receive-pack</code> and <code>upload-pack</code> use to decide which refs to omit from their initial advertisements. Use more than one definition to specify multiple prefix strings. A ref that is under the hierarchies listed in the value of this variable is excluded, and is hidden when responding to <code>git push</code> or <code>git\nfetch</code>. See <code>receive.hideRefs</code> and <code>uploadpack.hideRefs</code> for program-specific versions of this config.</p>  <p>You may also include a <code>!</code> in front of the ref name to negate the entry, explicitly exposing it, even if an earlier entry marked it as hidden. If you have multiple hideRefs values, later entries override earlier ones (and entries in more-specific config files override less-specific ones).</p>   <p>If a namespace is in use, the namespace prefix is stripped from each reference before it is matched against <code>transfer.hiderefs</code> patterns. For example, if <code>refs/heads/master</code> is specified in <code>transfer.hideRefs</code> and the current namespace is <code>foo</code>, then <code>refs/namespaces/foo/refs/heads/master</code> is omitted from the advertisements but <code>refs/heads/master</code> and <code>refs/namespaces/bar/refs/heads/master</code> are still advertised as so-called \"have\" lines. In order to match refs before stripping, add a <code>^</code> in front of the ref name. If you combine <code>!</code> and <code>^</code>, <code>!</code> must be specified first.</p>  </dd> <dt class=\"hdlist1\">transfer.unpackLimit</dt> <dd> <p>When <code>fetch.unpackLimit</code> or <code>receive.unpackLimit</code> are not set, the value of this variable is used instead. The default value is 100.</p> </dd> <dt class=\"hdlist1\">uploadarchive.allowUnreachable</dt> <dd> <p>If true, allow clients to use <code>git archive --remote</code> to request any tree, whether reachable from the ref tips or not. See the discussion in the <code>SECURITY</code> section of <a href=\"git-upload-archive\">git-upload-archive[1]</a> for more details. Defaults to <code>false</code>.</p> </dd> <dt class=\"hdlist1\">uploadpack.hideRefs</dt> <dd> <p>This variable is the same as <code>transfer.hideRefs</code>, but applies only to <code>upload-pack</code> (and so affects only fetches, not pushes). An attempt to fetch a hidden ref by <code>git fetch</code> will fail. See also <code>uploadpack.allowTipSHA1InWant</code>.</p> </dd> <dt class=\"hdlist1\">uploadpack.allowTipSHA1InWant</dt> <dd> <p>When <code>uploadpack.hideRefs</code> is in effect, allow <code>upload-pack</code> to accept a fetch request that asks for an object at the tip of a hidden ref (by default, such a request is rejected). see also <code>uploadpack.hideRefs</code>.</p> </dd> <dt class=\"hdlist1\">uploadpack.allowReachableSHA1InWant</dt> <dd> <p>Allow <code>upload-pack</code> to accept a fetch request that asks for an object that is reachable from any ref tip. However, note that calculating object reachability is computationally expensive. Defaults to <code>false</code>.</p> </dd> <dt class=\"hdlist1\">uploadpack.keepAlive</dt> <dd> <p>When <code>upload-pack</code> has started <code>pack-objects</code>, there may be a quiet period while <code>pack-objects</code> prepares the pack. Normally it would output progress information, but if <code>--quiet</code> was used for the fetch, <code>pack-objects</code> will output nothing at all until the pack data begins. Some clients and networks may consider the server to be hung and give up. Setting this option instructs <code>upload-pack</code> to send an empty keepalive packet every <code>uploadpack.keepAlive</code> seconds. Setting this option to 0 disables keepalive packets entirely. The default is 5 seconds.</p> </dd> <dt class=\"hdlist1\">url.&lt;base&gt;.insteadOf</dt> <dd> <p>Any URL that starts with this value will be rewritten to start, instead, with &lt;base&gt;. In cases where some site serves a large number of repositories, and serves them with multiple access methods, and some users need to use different access methods, this feature allows people to specify any of the equivalent URLs and have Git automatically rewrite the URL to the best alternative for the particular user, even for a never-before-seen repository on the site. When more than one insteadOf strings match a given URL, the longest match is used.</p> </dd> <dt class=\"hdlist1\">url.&lt;base&gt;.pushInsteadOf</dt> <dd> <p>Any URL that starts with this value will not be pushed to; instead, it will be rewritten to start with &lt;base&gt;, and the resulting URL will be pushed to. In cases where some site serves a large number of repositories, and serves them with multiple access methods, some of which do not allow push, this feature allows people to specify a pull-only URL and have Git automatically use an appropriate URL to push, even for a never-before-seen repository on the site. When more than one pushInsteadOf strings match a given URL, the longest match is used. If a remote has an explicit pushurl, Git will ignore this setting for that remote.</p> </dd> <dt class=\"hdlist1\">user.email</dt> <dd> <p>Your email address to be recorded in any newly created commits. Can be overridden by the <code>GIT_AUTHOR_EMAIL</code>, <code>GIT_COMMITTER_EMAIL</code>, and <code>EMAIL</code> environment variables. See <a href=\"git-commit-tree\">git-commit-tree[1]</a>.</p> </dd> <dt class=\"hdlist1\">user.name</dt> <dd> <p>Your full name to be recorded in any newly created commits. Can be overridden by the <code>GIT_AUTHOR_NAME</code> and <code>GIT_COMMITTER_NAME</code> environment variables. See <a href=\"git-commit-tree\">git-commit-tree[1]</a>.</p> </dd> <dt class=\"hdlist1\">user.useConfigOnly</dt> <dd> <p>Instruct Git to avoid trying to guess defaults for <code>user.email</code> and <code>user.name</code>, and instead retrieve the values only from the configuration. For example, if you have multiple email addresses and would like to use a different one for each repository, then with this configuration option set to <code>true</code> in the global config along with a name, Git will prompt you to set up an email before making new commits in a newly cloned repository. Defaults to <code>false</code>.</p> </dd> <dt class=\"hdlist1\">user.signingKey</dt> <dd> <p>If <a href=\"git-tag\">git-tag[1]</a> or <a href=\"git-commit\">git-commit[1]</a> is not selecting the key you want it to automatically when creating a signed tag or commit, you can override the default selection with this variable. This option is passed unchanged to gpg’s --local-user parameter, so you may specify a key using any method that gpg supports.</p> </dd> <dt class=\"hdlist1\">versionsort.prereleaseSuffix</dt> <dd> <p>When version sort is used in <a href=\"git-tag\">git-tag[1]</a>, prerelease tags (e.g. \"1.0-rc1\") may appear after the main release \"1.0\". By specifying the suffix \"-rc\" in this variable, \"1.0-rc1\" will appear before \"1.0\".</p>  <p>This variable can be specified multiple times, once per suffix. The order of suffixes in the config file determines the sorting order (e.g. if \"-pre\" appears before \"-rc\" in the config file then 1.0-preXX is sorted before 1.0-rcXX). The sorting order between different suffixes is undefined if they are in multiple config files.</p>  </dd> <dt class=\"hdlist1\">web.browser</dt> <dd> <p>Specify a web browser that may be used by some commands. Currently only <a href=\"git-instaweb\">git-instaweb[1]</a> and <a href=\"git-help\">git-help[1]</a> may use it.</p> </dd> </dl> </div> </div>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-config\" class=\"_attribution-link\">https://git-scm.com/docs/git-config</a>\n  </p>\n</div>\n","git-help":"<h1>git-help</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-help - Display help information about Git</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git help [-a|--all] [-g|--guide]\n           [-i|--info|-m|--man|-w|--web] [COMMAND|GUIDE]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>With no options and no COMMAND or GUIDE given, the synopsis of the <code>git</code> command and a list of the most commonly used Git commands are printed on the standard output.</p>   <p>If the option <code>--all</code> or <code>-a</code> is given, all available commands are printed on the standard output.</p>   <p>If the option <code>--guide</code> or <code>-g</code> is given, a list of the useful Git guides is also printed on the standard output.</p>   <p>If a command, or a guide, is given, a manual page for that command or guide is brought up. The <code>man</code> program is used by default for this purpose, but this can be overridden by other options or configuration variables.</p>   <p>Note that <code>git --help ...</code> is identical to <code>git help ...</code> because the former is internally converted into the latter.</p>   <p>To display the <a href=\"git\">git[1]</a> man page, use <code>git help git</code>.</p>   <p>This page can be displayed with <code>git help help</code> or <code>git help --help</code></p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-a</dt> <dt class=\"hdlist1\">--all</dt> <dd> <p>Prints all the available commands on the standard output. This option overrides any given command or guide name.</p> </dd> <dt class=\"hdlist1\">-g</dt> <dt class=\"hdlist1\">--guides</dt> <dd> <p>Prints a list of useful guides on the standard output. This option overrides any given command or guide name.</p> </dd> <dt class=\"hdlist1\">-i</dt> <dt class=\"hdlist1\">--info</dt> <dd> <p>Display manual page for the command in the <code>info</code> format. The <code>info</code> program will be used for that purpose.</p> </dd> <dt class=\"hdlist1\">-m</dt> <dt class=\"hdlist1\">--man</dt> <dd> <p>Display manual page for the command in the <code>man</code> format. This option may be used to override a value set in the <code>help.format</code> configuration variable.</p>  <p>By default the <code>man</code> program will be used to display the manual page, but the <code>man.viewer</code> configuration variable may be used to choose other display programs (see below).</p>  </dd> <dt class=\"hdlist1\">-w</dt> <dt class=\"hdlist1\">--web</dt> <dd> <p>Display manual page for the command in the <code>web</code> (HTML) format. A web browser will be used for that purpose.</p>  <p>The web browser can be specified using the configuration variable <code>help.browser</code>, or <code>web.browser</code> if the former is not set. If none of these config variables is set, the <code>git web{litdd}browse</code> helper script (called by <code>git help</code>) will pick a suitable default. See <a href=\"#\">git-web{litdd}browse[1]</a> for more information about this.</p>  </dd> </dl> </div></div>   <h2 id=\"_configuration_variables\">Configuration variables</h2> <div class=\"sectionbody\">\n<div class=\"sect2\"> <h3 id=\"_help_format\">help.format</h3>  <p>If no command-line option is passed, the <code>help.format</code> configuration variable will be checked. The following values are supported for this variable; they make <code>git help</code> behave as their corresponding command- line option:</p>  <div class=\"ulist\"> <ul> <li> <p>\"man\" corresponds to <code>-m|--man</code>,</p> </li> <li> <p>\"info\" corresponds to <code>-i|--info</code>,</p> </li> <li> <p>\"web\" or \"html\" correspond to <code>-w|--web</code>.</p> </li> </ul> </div> </div> <div class=\"sect2\"> <h3 id=\"_help_browser_web_browser_and_browser_tool_path\">help.browser, web.browser and browser.&lt;tool&gt;.path</h3>  <p>The <code>help.browser</code>, <code>web.browser</code> and <code>browser.&lt;tool&gt;.path</code> will also be checked if the <code>web</code> format is chosen (either by command-line option or configuration variable). See <code>-w|--web</code> in the OPTIONS section above and <a href=\"#\">git-web{litdd}browse[1]</a>.</p>  </div> <div class=\"sect2\"> <h3 id=\"_man_viewer\">man.viewer</h3>  <p>The <code>man.viewer</code> configuration variable will be checked if the <code>man</code> format is chosen. The following values are currently supported:</p>  <div class=\"ulist\"> <ul> <li> <p>\"man\": use the <code>man</code> program as usual,</p> </li> <li> <p>\"woman\": use <code>emacsclient</code> to launch the \"woman\" mode in emacs (this only works starting with emacsclient versions 22),</p> </li> <li> <p>\"konqueror\": use <code>kfmclient</code> to open the man page in a new konqueror tab (see <code>Note about konqueror</code> below).</p> </li> </ul> </div>  <p>Values for other tools can be used if there is a corresponding <code>man.&lt;tool&gt;.cmd</code> configuration entry (see below).</p>   <p>Multiple values may be given to the <code>man.viewer</code> configuration variable. Their corresponding programs will be tried in the order listed in the configuration file.</p>   <p>For example, this configuration:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        [man]\n                viewer = konqueror\n                viewer = woman</pre> </div> </div>  <p>will try to use konqueror first. But this may fail (for example, if DISPLAY is not set) and in that case emacs' woman mode will be tried.</p>   <p>If everything fails, or if no viewer is configured, the viewer specified in the <code>GIT_MAN_VIEWER</code> environment variable will be tried. If that fails too, the <code>man</code> program will be tried anyway.</p>  </div> <div class=\"sect2\"> <h3 id=\"_man_tool_path\">man.&lt;tool&gt;.path</h3>  <p>You can explicitly provide a full path to your preferred man viewer by setting the configuration variable <code>man.&lt;tool&gt;.path</code>. For example, you can configure the absolute path to konqueror by setting <code>man.konqueror.path</code>. Otherwise, <code>git help</code> assumes the tool is available in PATH.</p>  </div> <div class=\"sect2\"> <h3 id=\"_man_tool_cmd\">man.&lt;tool&gt;.cmd</h3>  <p>When the man viewer, specified by the <code>man.viewer</code> configuration variables, is not among the supported ones, then the corresponding <code>man.&lt;tool&gt;.cmd</code> configuration variable will be looked up. If this variable exists then the specified tool will be treated as a custom command and a shell eval will be used to run the command with the man page passed as arguments.</p>  </div> <div class=\"sect2\"> <h3 id=\"_note_about_konqueror\">Note about konqueror</h3>  <p>When <code>konqueror</code> is specified in the <code>man.viewer</code> configuration variable, we launch <code>kfmclient</code> to try to open the man page on an already opened konqueror in a new tab if possible.</p>   <p>For consistency, we also try such a trick if <code>man.konqueror.path</code> is set to something like <code>A_PATH_TO/konqueror</code>. That means we will try to launch <code>A_PATH_TO/kfmclient</code> instead.</p>   <p>If you really want to use <code>konqueror</code>, then you can use something like the following:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        [man]\n                viewer = konq\n\n        [man \"konq\"]\n                cmd = A_PATH_TO/konqueror</pre> </div> </div> </div> <div class=\"sect2\"> <h3 id=\"_note_about_git_config_global\">Note about git config --global</h3>  <p>Note that all these configuration variables should probably be set using the <code>--global</code> flag, for example like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git config --global help.format web\n$ git config --global web.browser firefox</pre> </div> </div>  <p>as they are probably more user specific than repository specific. See <a href=\"git-config\">git-config[1]</a> for more information about this.</p>  </div>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-help\" class=\"_attribution-link\">https://git-scm.com/docs/git-help</a>\n  </p>\n</div>\n","git-init":"<h1>git-init</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-init - Create an empty Git repository or reinitialize an existing one</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git init [-q | --quiet] [--bare] [--template=&lt;template_directory&gt;]\n          [--separate-git-dir &lt;git dir&gt;]\n          [--shared[=&lt;permissions&gt;]] [directory]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>This command creates an empty Git repository - basically a <code>.git</code> directory with subdirectories for <code>objects</code>, <code>refs/heads</code>, <code>refs/tags</code>, and template files. An initial <code>HEAD</code> file that references the HEAD of the master branch is also created.</p>   <p>If the <code>$GIT_DIR</code> environment variable is set then it specifies a path to use instead of <code>./.git</code> for the base of the repository.</p>   <p>If the object storage directory is specified via the <code>$GIT_OBJECT_DIRECTORY</code> environment variable then the sha1 directories are created underneath - otherwise the default <code>$GIT_DIR/objects</code> directory is used.</p>   <p>Running <code>git init</code> in an existing repository is safe. It will not overwrite things that are already there. The primary reason for rerunning <code>git init</code> is to pick up newly added templates (or to move the repository to another place if --separate-git-dir is given).</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\">\n<div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-q</dt> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>Only print error and warning messages; all other output will be suppressed.</p> </dd> <dt class=\"hdlist1\">--bare</dt> <dd> <p>Create a bare repository. If <code>GIT_DIR</code> environment is not set, it is set to the current working directory.</p> </dd> <dt class=\"hdlist1\">--template=&lt;template_directory&gt;</dt> <dd> <p>Specify the directory from which templates will be used. (See the \"TEMPLATE DIRECTORY\" section below.)</p> </dd> <dt class=\"hdlist1\">--separate-git-dir=&lt;git dir&gt;</dt> <dd> <p>Instead of initializing the repository as a directory to either <code>$GIT_DIR</code> or <code>./.git/</code>, create a text file there containing the path to the actual repository. This file acts as filesystem-agnostic Git symbolic link to the repository.</p>  <p>If this is reinitialization, the repository will be moved to the specified path.</p>  </dd> <dt class=\"hdlist1\">--shared[=(false|true|umask|group|all|world|everybody|0xxx)]</dt> <dd> <p>Specify that the Git repository is to be shared amongst several users. This allows users belonging to the same group to push into that repository. When specified, the config variable \"core.sharedRepository\" is set so that files and directories under <code>$GIT_DIR</code> are created with the requested permissions. When not specified, Git will use permissions reported by umask(2).</p>  <p>The option can have the following values, defaulting to <code>group</code> if no value is given:</p>  </dd> </dl> </div> </div> </div> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">\n<em>umask</em> (or <em>false</em>)</dt> <dd> <p>Use permissions reported by umask(2). The default, when <code>--shared</code> is not specified.</p> </dd> <dt class=\"hdlist1\">\n<em>group</em> (or <em>true</em>)</dt> <dd> <p>Make the repository group-writable, (and g+sx, since the git group may be not the primary group of all users). This is used to loosen the permissions of an otherwise safe umask(2) value. Note that the umask still applies to the other permission bits (e.g. if umask is <code>0022</code>, using <code>group</code> will not remove read privileges from other (non-group) users). See <code>0xxx</code> for how to exactly specify the repository permissions.</p> </dd> <dt class=\"hdlist1\">\n<em>all</em> (or <em>world</em> or <em>everybody</em>)</dt> <dd> <p>Same as <code>group</code>, but make the repository readable by all users.</p> </dd> <dt class=\"hdlist1\"><em>0xxx</em></dt> <dd> <p><code>0xxx</code> is an octal number and each file will have mode <code>0xxx</code>. <code>0xxx</code> will override users' umask(2) value (and not only loosen permissions as <code>group</code> and <code>all</code> does). <code>0640</code> will create a repository which is group-readable, but not group-writable or accessible to others. <code>0660</code> will create a repo that is readable and writable to the current user and group, but inaccessible to others.</p> </dd> </dl> </div> <div class=\"openblock\"> <div class=\"content\">  <p>By default, the configuration flag <code>receive.denyNonFastForwards</code> is enabled in shared repositories, so that you cannot force a non fast-forwarding push into it.</p>   <p>If you provide a <code>directory</code>, the command is run inside it. If this directory does not exist, it will be created.</p>  </div> </div>\n</div>   <h2 id=\"_template_directory\">Template directory</h2> <div class=\"sectionbody\"> <p>The template directory contains files and directories that will be copied to the <code>$GIT_DIR</code> after it is created.</p>   <p>The template directory will be one of the following (in order):</p>  <div class=\"ulist\"> <ul> <li> <p>the argument given with the <code>--template</code> option;</p> </li> <li> <p>the contents of the <code>$GIT_TEMPLATE_DIR</code> environment variable;</p> </li> <li> <p>the <code>init.templateDir</code> configuration variable; or</p> </li> <li> <p>the default template directory: <code>/usr/share/git-core/templates</code>.</p> </li> </ul> </div>  <p>The default template directory includes some directory structure, suggested \"exclude patterns\" (see <a href=\"gitignore\">gitignore[5]</a>), and sample hook files.</p>   <p>The sample hooks are all disabled by default, To enable one of the sample hooks rename it by removing its <code>.sample</code> suffix.</p>   <p>See <a href=\"githooks\">githooks[5]</a> for more general info on hook execution.</p> </div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">Start a new Git repository for an existing code base</dt> <dd> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ cd /path/to/my/codebase\n$ git init      (1)\n$ git add .     (2)\n$ git commit    (3)</pre> </div> </div> <div class=\"colist arabic\"> <ol> <li> <p>Create a /path/to/my/codebase/.git directory.</p> </li> <li> <p>Add all existing files to the index.</p> </li> <li> <p>Record the pristine state as the first commit in the history.</p> </li> </ol> </div> </dd> </dl> </div></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-init\" class=\"_attribution-link\">https://git-scm.com/docs/git-init</a>\n  </p>\n</div>\n","git-status":"<h1>git-status</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-status - Show the working tree status</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git status [&lt;options&gt;…​] [--] [&lt;pathspec&gt;…​]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Displays paths that have differences between the index file and the current HEAD commit, paths that have differences between the working tree and the index file, and paths in the working tree that are not tracked by Git (and are not ignored by <a href=\"gitignore\">gitignore[5]</a>). The first are what you <code>would</code> commit by running <code>git commit</code>; the second and third are what you <code>could</code> commit by running <code>git add</code> before running <code>git commit</code>.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-s</dt> <dt class=\"hdlist1\">--short</dt> <dd> <p>Give the output in the short-format.</p> </dd> <dt class=\"hdlist1\">-b</dt> <dt class=\"hdlist1\">--branch</dt> <dd> <p>Show the branch and tracking info even in short-format.</p> </dd> <dt class=\"hdlist1\">--porcelain</dt> <dd> <p>Give the output in an easy-to-parse format for scripts. This is similar to the short output, but will remain stable across Git versions and regardless of user configuration. See below for details.</p> </dd> <dt class=\"hdlist1\">--long</dt> <dd> <p>Give the output in the long-format. This is the default.</p> </dd> <dt class=\"hdlist1\">-v</dt> <dt class=\"hdlist1\">--verbose</dt> <dd> <p>In addition to the names of files that have been changed, also show the textual changes that are staged to be committed (i.e., like the output of <code>git diff --cached</code>). If <code>-v</code> is specified twice, then also show the changes in the working tree that have not yet been staged (i.e., like the output of <code>git diff</code>).</p> </dd> <dt class=\"hdlist1\">-u[&lt;mode&gt;]</dt> <dt class=\"hdlist1\">--untracked-files[=&lt;mode&gt;]</dt> <dd> <p>Show untracked files.</p>  <p>The mode parameter is used to specify the handling of untracked files. It is optional: it defaults to <code>all</code>, and if specified, it must be stuck to the option (e.g. <code>-uno</code>, but not <code>-u no</code>).</p>   <p>The possible options are:</p>  <div class=\"ulist\"> <ul> <li> <p><code>no</code> - Show no untracked files.</p> </li> <li> <p><code>normal</code> - Shows untracked files and directories.</p> </li> <li> <p><code>all</code> - Also shows individual files in untracked directories.</p> </li> </ul> </div>  <p>When <code>-u</code> option is not used, untracked files and directories are shown (i.e. the same as specifying <code>normal</code>), to help you avoid forgetting to add newly created files. Because it takes extra work to find untracked files in the filesystem, this mode may take some time in a large working tree. Consider enabling untracked cache and split index if supported (see <code>git update-index --untracked-cache</code> and <code>git update-index\n--split-index</code>), Otherwise you can use <code>no</code> to have <code>git status</code> return more quickly without showing untracked files.</p>   <p>The default can be changed using the status.showUntrackedFiles configuration variable documented in <a href=\"git-config\">git-config[1]</a>.</p>  </dd> <dt class=\"hdlist1\">--ignore-submodules[=&lt;when&gt;]</dt> <dd> <p>Ignore changes to submodules when looking for changes. &lt;when&gt; can be either \"none\", \"untracked\", \"dirty\" or \"all\", which is the default. Using \"none\" will consider the submodule modified when it either contains untracked or modified files or its HEAD differs from the commit recorded in the superproject and can be used to override any settings of the <code>ignore</code> option in <a href=\"git-config\">git-config[1]</a> or <a href=\"gitmodules\">gitmodules[5]</a>. When \"untracked\" is used submodules are not considered dirty when they only contain untracked content (but they are still scanned for modified content). Using \"dirty\" ignores all changes to the work tree of submodules, only changes to the commits stored in the superproject are shown (this was the behavior before 1.7.0). Using \"all\" hides all changes to submodules (and suppresses the output of submodule summaries when the config option <code>status.submoduleSummary</code> is set).</p> </dd> <dt class=\"hdlist1\">--ignored</dt> <dd> <p>Show ignored files as well.</p> </dd> <dt class=\"hdlist1\">-z</dt> <dd> <p>Terminate entries with NUL, instead of LF. This implies the <code>--porcelain</code> output format if no other format is given.</p> </dd> <dt class=\"hdlist1\">--column[=&lt;options&gt;]</dt> <dt class=\"hdlist1\">--no-column</dt> <dd> <p>Display untracked files in columns. See configuration variable column.status for option syntax.<code>--column</code> and <code>--no-column</code> without options are equivalent to <code>always</code> and <code>never</code> respectively.</p> </dd> </dl> </div></div>   <h2 id=\"_output\">Output</h2> <div class=\"sectionbody\"> <p>The output from this command is designed to be used as a commit template comment. The default, long format, is designed to be human readable, verbose and descriptive. Its contents and format are subject to change at any time.</p>   <p>The paths mentioned in the output, unlike many other Git commands, are made relative to the current directory if you are working in a subdirectory (this is on purpose, to help cutting and pasting). See the status.relativePaths config option below.</p>  <div class=\"sect2\"> <h3 id=\"_short_format\">Short Format</h3>  <p>In the short-format, the status of each path is shown as</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>XY PATH1 -&gt; PATH2</pre> </div> </div>  <p>where <code>PATH1</code> is the path in the <code>HEAD</code>, and the \" <code>-&gt; PATH2</code>\" part is shown only when <code>PATH1</code> corresponds to a different path in the index/worktree (i.e. the file is renamed). The <code>XY</code> is a two-letter status code.</p>   <p>The fields (including the <code>-&gt;</code>) are separated from each other by a single space. If a filename contains whitespace or other nonprintable characters, that field will be quoted in the manner of a C string literal: surrounded by ASCII double quote (34) characters, and with interior special characters backslash-escaped.</p>   <p>For paths with merge conflicts, <code>X</code> and <code>Y</code> show the modification states of each side of the merge. For paths that do not have merge conflicts, <code>X</code> shows the status of the index, and <code>Y</code> shows the status of the work tree. For untracked paths, <code>XY</code> are <code>??</code>. Other status codes can be interpreted as follows:</p>  <div class=\"ulist\"> <ul> <li> <p>' ' = unmodified</p> </li> <li> <p><code>M</code> = modified</p> </li> <li> <p><code>A</code> = added</p> </li> <li> <p><code>D</code> = deleted</p> </li> <li> <p><code>R</code> = renamed</p> </li> <li> <p><code>C</code> = copied</p> </li> <li> <p><code>U</code> = updated but unmerged</p> </li> </ul> </div>  <p>Ignored files are not listed, unless <code>--ignored</code> option is in effect, in which case <code>XY</code> are <code>!!</code>.</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>X          Y     Meaning\n-------------------------------------------------\n          [MD]   not updated\nM        [ MD]   updated in index\nA        [ MD]   added to index\nD         [ M]   deleted from index\nR        [ MD]   renamed in index\nC        [ MD]   copied in index\n[MARC]           index and work tree matches\n[ MARC]     M    work tree changed since index\n[ MARC]     D    deleted in work tree\n-------------------------------------------------\nD           D    unmerged, both deleted\nA           U    unmerged, added by us\nU           D    unmerged, deleted by them\nU           A    unmerged, added by them\nD           U    unmerged, deleted by us\nA           A    unmerged, both added\nU           U    unmerged, both modified\n-------------------------------------------------\n?           ?    untracked\n!           !    ignored\n-------------------------------------------------</pre> </div> </div>  <p>If -b is used the short-format status is preceded by a line</p>  </div>\n</div>   <h2 id=\"_branchname_tracking_info\">Branchname tracking info</h2> <div class=\"sectionbody\"><div class=\"sect2\"> <h3 id=\"_porcelain_format\">Porcelain Format</h3>  <p>The porcelain format is similar to the short format, but is guaranteed not to change in a backwards-incompatible way between Git versions or based on user configuration. This makes it ideal for parsing by scripts. The description of the short format above also describes the porcelain format, with a few exceptions:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>The user’s color.status configuration is not respected; color will always be off.</p> </li> <li> <p>The user’s status.relativePaths configuration is not respected; paths shown will always be relative to the repository root.</p> </li> </ol> </div>  <p>There is also an alternate -z format recommended for machine parsing. In that format, the status field is the same, but some other things change. First, the <code>-&gt;</code> is omitted from rename entries and the field order is reversed (e.g <code>from -&gt; to</code> becomes <code>to from</code>). Second, a NUL (ASCII 0) follows each filename, replacing space as a field separator and the terminating newline (but a space still separates the status field from the first filename). Third, filenames containing special characters are not specially formatted; no quoting or backslash-escaping is performed.</p>  </div></div>   <h2 id=\"_configuration\">Configuration</h2> <div class=\"sectionbody\"> <p>The command honors <code>color.status</code> (or <code>status.color</code> — they mean the same thing and the latter is kept for backward compatibility) and <code>color.status.&lt;slot&gt;</code> configuration variables to colorize its output.</p>   <p>If the config variable <code>status.relativePaths</code> is set to false, then all paths shown are relative to the repository root, not to the current directory.</p>   <p>If <code>status.submoduleSummary</code> is set to a non zero number or true (identical to -1 or an unlimited number), the submodule summary will be enabled for the long format and a summary of commits for modified submodules will be shown (see --summary-limit option of <a href=\"git-submodule\">git-submodule[1]</a>). Please note that the summary output from the status command will be suppressed for all submodules when <code>diff.ignoreSubmodules</code> is set to <code>all</code> or only for those submodules where <code>submodule.&lt;name&gt;.ignore=all</code>. To also view the summary for ignored submodules you can either use the --ignore-submodules=dirty command line option or the <code>git submodule summary</code> command, which shows a similar output but does not honor these settings.</p> </div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"gitignore\">gitignore[5]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-status\" class=\"_attribution-link\">https://git-scm.com/docs/git-status</a>\n  </p>\n</div>\n","git-add":"<h1>git-add</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-add - Add file contents to the index</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git add [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]\n          [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]\n          [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing]\n          [--] [&lt;pathspec&gt;…​]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>This command updates the index using the current content found in the working tree, to prepare the content staged for the next commit. It typically adds the current content of existing paths as a whole, but with some options it can also be used to add content with only part of the changes made to the working tree files applied, or remove paths that do not exist in the working tree anymore.</p>   <p>The \"index\" holds a snapshot of the content of the working tree, and it is this snapshot that is taken as the contents of the next commit. Thus after making any changes to the working tree, and before running the commit command, you must use the <code>add</code> command to add any new or modified files to the index.</p>   <p>This command can be performed multiple times before a commit. It only adds the content of the specified file(s) at the time the add command is run; if you want subsequent changes included in the next commit, then you must run <code>git add</code> again to add the new content to the index.</p>   <p>The <code>git status</code> command can be used to obtain a summary of which files have changes that are staged for the next commit.</p>   <p>The <code>git add</code> command will not add ignored files by default. If any ignored files were explicitly specified on the command line, <code>git add</code> will fail with a list of ignored files. Ignored files reached by directory recursion or filename globbing performed by Git (quote your globs before the shell) will be silently ignored. The <code>git add</code> command can be used to add ignored files with the <code>-f</code> (force) option.</p>   <p>Please see <a href=\"git-commit\">git-commit[1]</a> for alternative ways to add content to a commit.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">&lt;pathspec&gt;…​</dt> <dd> <p>Files to add content from. Fileglobs (e.g. <code>*.c</code>) can be given to add all matching files. Also a leading directory name (e.g. <code>dir</code> to add <code>dir/file1</code> and <code>dir/file2</code>) can be given to update the index to match the current state of the directory as a whole (e.g. specifying <code>dir</code> will record not just a file <code>dir/file1</code> modified in the working tree, a file <code>dir/file2</code> added to the working tree, but also a file <code>dir/file3</code> removed from the working tree. Note that older versions of Git used to ignore removed files; use <code>--no-all</code> option if you want to add modified or new files but ignore removed ones.</p> </dd> <dt class=\"hdlist1\">-n</dt> <dt class=\"hdlist1\">--dry-run</dt> <dd> <p>Don’t actually add the file(s), just show if they exist and/or will be ignored.</p> </dd> <dt class=\"hdlist1\">-v</dt> <dt class=\"hdlist1\">--verbose</dt> <dd> <p>Be verbose.</p> </dd> <dt class=\"hdlist1\">-f</dt> <dt class=\"hdlist1\">--force</dt> <dd> <p>Allow adding otherwise ignored files.</p> </dd> <dt class=\"hdlist1\">-i</dt> <dt class=\"hdlist1\">--interactive</dt> <dd> <p>Add modified contents in the working tree interactively to the index. Optional path arguments may be supplied to limit operation to a subset of the working tree. See “Interactive mode” for details.</p> </dd> <dt class=\"hdlist1\">-p</dt> <dt class=\"hdlist1\">--patch</dt> <dd> <p>Interactively choose hunks of patch between the index and the work tree and add them to the index. This gives the user a chance to review the difference before adding modified contents to the index.</p>  <p>This effectively runs <code>add --interactive</code>, but bypasses the initial command menu and directly jumps to the <code>patch</code> subcommand. See “Interactive mode” for details.</p>  </dd> <dt class=\"hdlist1\">-e</dt> <dt class=\"hdlist1\">--edit</dt> <dd> <p>Open the diff vs. the index in an editor and let the user edit it. After the editor was closed, adjust the hunk headers and apply the patch to the index.</p>  <p>The intent of this option is to pick and choose lines of the patch to apply, or even to modify the contents of lines to be staged. This can be quicker and more flexible than using the interactive hunk selector. However, it is easy to confuse oneself and create a patch that does not apply to the index. See EDITING PATCHES below.</p>  </dd> <dt class=\"hdlist1\">-u</dt> <dt class=\"hdlist1\">--update</dt> <dd> <p>Update the index just where it already has an entry matching &lt;pathspec&gt;. This removes as well as modifies index entries to match the working tree, but adds no new files.</p>  <p>If no &lt;pathspec&gt; is given when <code>-u</code> option is used, all tracked files in the entire working tree are updated (old versions of Git used to limit the update to the current directory and its subdirectories).</p>  </dd> <dt class=\"hdlist1\">-A</dt> <dt class=\"hdlist1\">--all</dt> <dt class=\"hdlist1\">--no-ignore-removal</dt> <dd> <p>Update the index not only where the working tree has a file matching &lt;pathspec&gt; but also where the index already has an entry. This adds, modifies, and removes index entries to match the working tree.</p>  <p>If no &lt;pathspec&gt; is given when <code>-A</code> option is used, all files in the entire working tree are updated (old versions of Git used to limit the update to the current directory and its subdirectories).</p>  </dd> <dt class=\"hdlist1\">--no-all</dt> <dt class=\"hdlist1\">--ignore-removal</dt> <dd> <p>Update the index by adding new files that are unknown to the index and files modified in the working tree, but ignore files that have been removed from the working tree. This option is a no-op when no &lt;pathspec&gt; is used.</p>  <p>This option is primarily to help users who are used to older versions of Git, whose \"git add &lt;pathspec&gt;…​\" was a synonym for \"git add --no-all &lt;pathspec&gt;…​\", i.e. ignored removed files.</p>  </dd> <dt class=\"hdlist1\">-N</dt> <dt class=\"hdlist1\">--intent-to-add</dt> <dd> <p>Record only the fact that the path will be added later. An entry for the path is placed in the index with no content. This is useful for, among other things, showing the unstaged content of such files with <code>git diff</code> and committing them with <code>git commit\n-a</code>.</p> </dd> <dt class=\"hdlist1\">--refresh</dt> <dd> <p>Don’t add the file(s), but only refresh their stat() information in the index.</p> </dd> <dt class=\"hdlist1\">--ignore-errors</dt> <dd> <p>If some files could not be added because of errors indexing them, do not abort the operation, but continue adding the others. The command shall still exit with non-zero status. The configuration variable <code>add.ignoreErrors</code> can be set to true to make this the default behaviour.</p> </dd> <dt class=\"hdlist1\">--ignore-missing</dt> <dd> <p>This option can only be used together with --dry-run. By using this option the user can check if any of the given files would be ignored, no matter if they are already present in the work tree or not.</p> </dd> <dt class=\"hdlist1\">--</dt> <dd> <p>This option can be used to separate command-line options from the list of files, (useful when filenames might be mistaken for command-line options).</p> </dd> </dl> </div></div>   <h2 id=\"_configuration\">Configuration</h2> <div class=\"sectionbody\"> <p>The optional configuration variable <code>core.excludesFile</code> indicates a path to a file containing patterns of file names to exclude from git-add, similar to $GIT_DIR/info/exclude. Patterns in the exclude file are used in addition to those in info/exclude. See <a href=\"gitignore\">gitignore[5]</a>.</p> </div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"><div class=\"ulist\"> <ul> <li> <p>Adds content from all <code>*.txt</code> files under <code>Documentation</code> directory and its subdirectories:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git add Documentation/\\*.txt</pre> </div> </div>  <p>Note that the asterisk <code>*</code> is quoted from the shell in this example; this lets the command include the files from subdirectories of <code>Documentation/</code> directory.</p>  </li> <li> <p>Considers adding content from all git-*.sh scripts:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git add git-*.sh</pre> </div> </div>  <p>Because this example lets the shell expand the asterisk (i.e. you are listing the files explicitly), it does not consider <code>subdir/git-foo.sh</code>.</p>  </li> </ul> </div></div>   <h2 id=\"_interactive_mode\">Interactive mode</h2> <div class=\"sectionbody\"> <p>When the command enters the interactive mode, it shows the output of the <code>status</code> subcommand, and then goes into its interactive command loop.</p>   <p>The command loop shows the list of subcommands available, and gives a prompt \"What now&gt; \". In general, when the prompt ends with a single <code>&gt;</code>, you can pick only one of the choices given and type return, like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>    *** Commands ***\n      1: status       2: update       3: revert       4: add untracked\n      5: patch        6: diff         7: quit         8: help\n    What now&gt; 1</pre> </div> </div>  <p>You also could say <code>s</code> or <code>sta</code> or <code>status</code> above as long as the choice is unique.</p>   <p>The main command loop has 6 subcommands (plus help and quit).</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">status</dt> <dd> <p>This shows the change between HEAD and index (i.e. what will be committed if you say <code>git commit</code>), and between index and working tree files (i.e. what you could stage further before <code>git commit</code> using <code>git add</code>) for each path. A sample output looks like this:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>              staged     unstaged path\n     1:       binary      nothing foo.png\n     2:     +403/-35        +1/-1 git-add--interactive.perl</pre> </div> </div>  <p>It shows that foo.png has differences from HEAD (but that is binary so line count cannot be shown) and there is no difference between indexed copy and the working tree version (if the working tree version were also different, <code>binary</code> would have been shown in place of <code>nothing</code>). The other file, git-add{litdd}interactive.perl, has 403 lines added and 35 lines deleted if you commit what is in the index, but working tree file has further modifications (one addition and one deletion).</p>  </dd> <dt class=\"hdlist1\">update</dt> <dd> <p>This shows the status information and issues an \"Update&gt;&gt;\" prompt. When the prompt ends with double <code>&gt;&gt;</code>, you can make more than one selection, concatenated with whitespace or comma. Also you can say ranges. E.g. \"2-5 7,9\" to choose 2,3,4,5,7,9 from the list. If the second number in a range is omitted, all remaining patches are taken. E.g. \"7-\" to choose 7,8,9 from the list. You can say <code>*</code> to choose everything.</p>  <p>What you chose are then highlighted with <code>*</code>, like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>           staged     unstaged path\n  1:       binary      nothing foo.png\n* 2:     +403/-35        +1/-1 git-add--interactive.perl</pre> </div> </div>  <p>To remove selection, prefix the input with <code>-</code> like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>Update&gt;&gt; -2</pre> </div> </div>  <p>After making the selection, answer with an empty line to stage the contents of working tree files for selected paths in the index.</p>  </dd> <dt class=\"hdlist1\">revert</dt> <dd> <p>This has a very similar UI to <code>update</code>, and the staged information for selected paths are reverted to that of the HEAD version. Reverting new paths makes them untracked.</p> </dd> <dt class=\"hdlist1\">add untracked</dt> <dd> <p>This has a very similar UI to <code>update</code> and <code>revert</code>, and lets you add untracked paths to the index.</p> </dd> <dt class=\"hdlist1\">patch</dt> <dd> <p>This lets you choose one path out of a <code>status</code> like selection. After choosing the path, it presents the diff between the index and the working tree file and asks you if you want to stage the change of each hunk. You can select one of the following options and type return:</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>y - stage this hunk\nn - do not stage this hunk\nq - quit; do not stage this hunk or any of the remaining ones\na - stage this hunk and all later hunks in the file\nd - do not stage this hunk or any of the later hunks in the file\ng - select a hunk to go to\n/ - search for a hunk matching the given regex\nj - leave this hunk undecided, see next undecided hunk\nJ - leave this hunk undecided, see next hunk\nk - leave this hunk undecided, see previous undecided hunk\nK - leave this hunk undecided, see previous hunk\ns - split the current hunk into smaller hunks\ne - manually edit the current hunk\n? - print help</pre> </div> </div>  <p>After deciding the fate for all hunks, if there is any hunk that was chosen, the index is updated with the selected hunks.</p>   <p>You can omit having to type return here, by setting the configuration variable <code>interactive.singleKey</code> to <code>true</code>.</p>  </dd> <dt class=\"hdlist1\">diff</dt> <dd> <p>This lets you review what will be committed (i.e. between HEAD and index).</p> </dd> </dl> </div>\n</div>   <h2 id=\"_editing_patches\">Editing patches</h2> <div class=\"sectionbody\"> <p>Invoking <code>git add -e</code> or selecting <code>e</code> from the interactive hunk selector will open a patch in your editor; after the editor exits, the result is applied to the index. You are free to make arbitrary changes to the patch, but note that some changes may have confusing results, or even result in a patch that cannot be applied. If you want to abort the operation entirely (i.e., stage nothing new in the index), simply delete all lines of the patch. The list below describes some common things you may see in a patch, and which editing operations make sense on them.</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">added content</dt> <dd> <p>Added content is represented by lines beginning with \"+\". You can prevent staging any addition lines by deleting them.</p> </dd> <dt class=\"hdlist1\">removed content</dt> <dd> <p>Removed content is represented by lines beginning with \"-\". You can prevent staging their removal by converting the \"-\" to a \" \" (space).</p> </dd> <dt class=\"hdlist1\">modified content</dt> <dd> <p>Modified content is represented by \"-\" lines (removing the old content) followed by \"+\" lines (adding the replacement content). You can prevent staging the modification by converting \"-\" lines to \" \", and removing \"+\" lines. Beware that modifying only half of the pair is likely to introduce confusing changes to the index.</p> </dd> </dl> </div> </div> </div>  <p>There are also more complex operations that can be performed. But beware that because the patch is applied only to the index and not the working tree, the working tree will appear to \"undo\" the change in the index. For example, introducing a new line into the index that is in neither the HEAD nor the working tree will stage the new line for commit, but the line will appear to be reverted in the working tree.</p>   <p>Avoid using these constructs, or do so with extreme caution.</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">removing untouched content</dt> <dd> <p>Content which does not differ between the index and working tree may be shown on context lines, beginning with a \" \" (space). You can stage context lines for removal by converting the space to a \"-\". The resulting working tree file will appear to re-add the content.</p> </dd> <dt class=\"hdlist1\">modifying existing content</dt> <dd> <p>One can also modify context lines by staging them for removal (by converting \" \" to \"-\") and adding a \"+\" line with the new content. Similarly, one can modify \"+\" lines for existing additions or modifications. In all cases, the new modification will appear reverted in the working tree.</p> </dd> <dt class=\"hdlist1\">new content</dt> <dd> <p>You may also add new content that does not exist in the patch; simply add new lines, each starting with \"+\". The addition will appear reverted in the working tree.</p> </dd> </dl> </div> </div> </div>  <p>There are also several operations which should be avoided entirely, as they will make the patch impossible to apply:</p>  <div class=\"ulist\"> <ul> <li> <p>adding context (\" \") or removal (\"-\") lines</p> </li> <li> <p>deleting context or removal lines</p> </li> <li> <p>modifying the contents of context or removal lines</p> </li> </ul> </div>\n</div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-status\">git-status[1]</a> <a href=\"git-rm\">git-rm[1]</a> <a href=\"git-reset\">git-reset[1]</a> <a href=\"git-mv\">git-mv[1]</a> <a href=\"git-commit\">git-commit[1]</a> <a href=\"git-update-index\">git-update-index[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-add\" class=\"_attribution-link\">https://git-scm.com/docs/git-add</a>\n  </p>\n</div>\n","git-rm":"<h1>git-rm</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-rm - Remove files from the working tree and from the index</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git rm [-f | --force] [-n] [-r] [--cached] [--ignore-unmatch] [--quiet] [--] &lt;file&gt;…​</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Remove files from the index, or from the working tree and the index. <code>git rm</code> will not remove a file from just your working directory. (There is no option to remove a file only from the working tree and yet keep it in the index; use <code>/bin/rm</code> if you want to do that.) The files being removed have to be identical to the tip of the branch, and no updates to their contents can be staged in the index, though that default behavior can be overridden with the <code>-f</code> option. When <code>--cached</code> is given, the staged content has to match either the tip of the branch or the file on disk, allowing the file to be removed from just the index.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">&lt;file&gt;…​</dt> <dd> <p>Files to remove. Fileglobs (e.g. <code>*.c</code>) can be given to remove all matching files. If you want Git to expand file glob characters, you may need to shell-escape them. A leading directory name (e.g. <code>dir</code> to remove <code>dir/file1</code> and <code>dir/file2</code>) can be given to remove all files in the directory, and recursively all sub-directories, but this requires the <code>-r</code> option to be explicitly given.</p> </dd> <dt class=\"hdlist1\">-f</dt> <dt class=\"hdlist1\">--force</dt> <dd> <p>Override the up-to-date check.</p> </dd> <dt class=\"hdlist1\">-n</dt> <dt class=\"hdlist1\">--dry-run</dt> <dd> <p>Don’t actually remove any file(s). Instead, just show if they exist in the index and would otherwise be removed by the command.</p> </dd> <dt class=\"hdlist1\">-r</dt> <dd> <p>Allow recursive removal when a leading directory name is given.</p> </dd> <dt class=\"hdlist1\">--</dt> <dd> <p>This option can be used to separate command-line options from the list of files, (useful when filenames might be mistaken for command-line options).</p> </dd> <dt class=\"hdlist1\">--cached</dt> <dd> <p>Use this option to unstage and remove paths only from the index. Working tree files, whether modified or not, will be left alone.</p> </dd> <dt class=\"hdlist1\">--ignore-unmatch</dt> <dd> <p>Exit with a zero status even if no files matched.</p> </dd> <dt class=\"hdlist1\">-q</dt> <dt class=\"hdlist1\">--quiet</dt> <dd> <p><code>git rm</code> normally outputs one line (in the form of an <code>rm</code> command) for each file removed. This option suppresses that output.</p> </dd> </dl> </div></div>   <h2 id=\"_discussion\">Discussion</h2> <div class=\"sectionbody\"> <p>The &lt;file&gt; list given to the command can be exact pathnames, file glob patterns, or leading directory names. The command removes only the paths that are known to Git. Giving the name of a file that you have not told Git about does not remove that file.</p>   <p>File globbing matches across directory boundaries. Thus, given two directories <code>d</code> and <code>d2</code>, there is a difference between using <code>git rm 'd*'</code> and <code>git rm 'd/*'</code>, as the former will also remove all of directory <code>d2</code>.</p> </div>   <h2 id=\"_removing_files_that_have_disappeared_from_the_filesystem\">Removing files that have disappeared from the filesystem</h2> <div class=\"sectionbody\"> <p>There is no option for <code>git rm</code> to remove from the index only the paths that have disappeared from the filesystem. However, depending on the use case, there are several ways that can be done.</p>  <div class=\"sect2\"> <h3 id=\"_using_git_commit_a\">Using “git commit -a”</h3>  <p>If you intend that your next commit should record all modifications of tracked files in the working tree and record all removals of files that have been removed from the working tree with <code>rm</code> (as opposed to <code>git rm</code>), use <code>git commit -a</code>, as it will automatically notice and record all removals. You can also have a similar effect without committing by using <code>git add -u</code>.</p>  </div> <div class=\"sect2\"> <h3 id=\"_using_git_add_a\">Using “git add -A”</h3>  <p>When accepting a new code drop for a vendor branch, you probably want to record both the removal of paths and additions of new paths as well as modifications of existing paths.</p>   <p>Typically you would first remove all tracked files from the working tree using this command:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>git ls-files -z | xargs -0 rm -f</pre> </div> </div>  <p>and then untar the new code in the working tree. Alternately you could <code>rsync</code> the changes into the working tree.</p>   <p>After that, the easiest way to record all removals, additions, and modifications in the working tree is:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>git add -A</pre> </div> </div>  <p>See <a href=\"git-add\">git-add[1]</a>.</p>  </div> <div class=\"sect2\"> <h3 id=\"_other_ways\">Other ways</h3>  <p>If all you really want to do is to remove from the index the files that are no longer present in the working tree (perhaps because your working tree is dirty so that you cannot use <code>git commit -a</code>), use the following command:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>git diff --name-only --diff-filter=D -z | xargs -0 git rm --cached</pre> </div> </div> </div>\n</div>   <h2 id=\"_submodules\">Submodules</h2> <div class=\"sectionbody\"> <p>Only submodules using a gitfile (which means they were cloned with a Git version 1.7.8 or newer) will be removed from the work tree, as their repository lives inside the .git directory of the superproject. If a submodule (or one of those nested inside it) still uses a .git directory, <code>git rm</code> will fail - no matter if forced or not - to protect the submodule’s history. If it exists the submodule.&lt;name&gt; section in the <a href=\"gitmodules\">gitmodules[5]</a> file will also be removed and that file will be staged (unless --cached or -n are used).</p>   <p>A submodule is considered up-to-date when the HEAD is the same as recorded in the index, no tracked files are modified and no untracked files that aren’t ignored are present in the submodules work tree. Ignored files are deemed expendable and won’t stop a submodule’s work tree from being removed.</p>   <p>If you only want to remove the local checkout of a submodule from your work tree without committing the removal, use <a href=\"git-submodule\">git-submodule[1]</a> <code>deinit</code> instead.</p> </div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>git rm Documentation/\\*.txt</code></dt> <dd> <p>Removes all <code>*.txt</code> files from the index that are under the <code>Documentation</code> directory and any of its subdirectories.</p>  <p>Note that the asterisk <code>*</code> is quoted from the shell in this example; this lets Git, and not the shell, expand the pathnames of files and subdirectories under the <code>Documentation/</code> directory.</p>  </dd> <dt class=\"hdlist1\"><code>git rm -f git-*.sh</code></dt> <dd> <p>Because this example lets the shell expand the asterisk (i.e. you are listing the files explicitly), it does not remove <code>subdir/git-foo.sh</code>.</p> </dd> </dl> </div></div>   <h2 id=\"_bugs\">Bugs</h2> <div class=\"sectionbody\"> <p>Each time a superproject update removes a populated submodule (e.g. when switching between commits before and after the removal) a stale submodule checkout will remain in the old location. Removing the old directory is only safe when it uses a gitfile, as otherwise the history of the submodule will be deleted too. This step will be obsolete when recursive submodule update has been implemented.</p> </div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-add\">git-add[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-rm\" class=\"_attribution-link\">https://git-scm.com/docs/git-rm</a>\n  </p>\n</div>\n","git-checkout":"<h1>git-checkout</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-checkout - Switch branches or restore working tree files</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git checkout [-q] [-f] [-m] [&lt;branch&gt;]\ngit checkout [-q] [-f] [-m] --detach [&lt;branch&gt;]\ngit checkout [-q] [-f] [-m] [--detach] &lt;commit&gt;\ngit checkout [-q] [-f] [-m] [[-b|-B|--orphan] &lt;new_branch&gt;] [&lt;start_point&gt;]\ngit checkout [-f|--ours|--theirs|-m|--conflict=&lt;style&gt;] [&lt;tree-ish&gt;] [--] &lt;paths&gt;…​\ngit checkout [-p|--patch] [&lt;tree-ish&gt;] [--] [&lt;paths&gt;…​]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Updates files in the working tree to match the version in the index or the specified tree. If no paths are given, <code>git checkout</code> will also update <code>HEAD</code> to set the specified branch as the current branch.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">\n<em>git checkout</em> &lt;branch&gt;</dt> <dd> <p>To prepare for working on &lt;branch&gt;, switch to it by updating the index and the files in the working tree, and by pointing HEAD at the branch. Local modifications to the files in the working tree are kept, so that they can be committed to the &lt;branch&gt;.</p>  <p>If &lt;branch&gt; is not found but there does exist a tracking branch in exactly one remote (call it &lt;remote&gt;) with a matching name, treat as equivalent to</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout -b &lt;branch&gt; --track &lt;remote&gt;/&lt;branch&gt;</pre> </div> </div>  <p>You could omit &lt;branch&gt;, in which case the command degenerates to \"check out the current branch\", which is a glorified no-op with a rather expensive side-effects to show only the tracking information, if exists, for the current branch.</p>  </dd> <dt class=\"hdlist1\">\n<em>git checkout</em> -b|-B &lt;new_branch&gt; [&lt;start point&gt;]</dt> <dd> <p>Specifying <code>-b</code> causes a new branch to be created as if <a href=\"git-branch\">git-branch[1]</a> were called and then checked out. In this case you can use the <code>--track</code> or <code>--no-track</code> options, which will be passed to <code>git branch</code>. As a convenience, <code>--track</code> without <code>-b</code> implies branch creation; see the description of <code>--track</code> below.</p>  <p>If <code>-B</code> is given, &lt;new_branch&gt; is created if it doesn’t exist; otherwise, it is reset. This is the transactional equivalent of</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git branch -f &lt;branch&gt; [&lt;start point&gt;]\n$ git checkout &lt;branch&gt;</pre> </div> </div>  <p>that is to say, the branch is not reset/created unless \"git checkout\" is successful.</p>  </dd> <dt class=\"hdlist1\">\n<em>git checkout</em> --detach [&lt;branch&gt;]</dt> <dt class=\"hdlist1\">\n<em>git checkout</em> [--detach] &lt;commit&gt;</dt> <dd> <p>Prepare to work on top of &lt;commit&gt;, by detaching HEAD at it (see \"DETACHED HEAD\" section), and updating the index and the files in the working tree. Local modifications to the files in the working tree are kept, so that the resulting working tree will be the state recorded in the commit plus the local modifications.</p>  <p>When the &lt;commit&gt; argument is a branch name, the <code>--detach</code> option can be used to detach HEAD at the tip of the branch (<code>git checkout\n&lt;branch&gt;</code> would check out that branch without detaching HEAD).</p>   <p>Omitting &lt;branch&gt; detaches HEAD at the tip of the current branch.</p>  </dd> <dt class=\"hdlist1\">\n<em>git checkout</em> [-p|--patch] [&lt;tree-ish&gt;] [--] &lt;pathspec&gt;…​</dt> <dd> <p>When &lt;paths&gt; or <code>--patch</code> are given, <code>git checkout</code> does <strong>not</strong> switch branches. It updates the named paths in the working tree from the index file or from a named &lt;tree-ish&gt; (most often a commit). In this case, the <code>-b</code> and <code>--track</code> options are meaningless and giving either of them results in an error. The &lt;tree-ish&gt; argument can be used to specify a specific tree-ish (i.e. commit, tag or tree) to update the index for the given paths before updating the working tree.</p>  <p><code>git checkout</code> with &lt;paths&gt; or <code>--patch</code> is used to restore modified or deleted paths to their original contents from the index or replace paths with the contents from a named &lt;tree-ish&gt; (most often a commit-ish).</p>   <p>The index may contain unmerged entries because of a previous failed merge. By default, if you try to check out such an entry from the index, the checkout operation will fail and nothing will be checked out. Using <code>-f</code> will ignore these unmerged entries. The contents from a specific side of the merge can be checked out of the index by using <code>--ours</code> or <code>--theirs</code>. With <code>-m</code>, changes made to the working tree file can be discarded to re-create the original conflicted merge result.</p>  </dd> </dl> </div>\n</div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-q</dt> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>Quiet, suppress feedback messages.</p> </dd> <dt class=\"hdlist1\">--[no-]progress</dt> <dd> <p>Progress status is reported on the standard error stream by default when it is attached to a terminal, unless <code>--quiet</code> is specified. This flag enables progress reporting even if not attached to a terminal, regardless of <code>--quiet</code>.</p> </dd> <dt class=\"hdlist1\">-f</dt> <dt class=\"hdlist1\">--force</dt> <dd> <p>When switching branches, proceed even if the index or the working tree differs from HEAD. This is used to throw away local changes.</p>  <p>When checking out paths from the index, do not fail upon unmerged entries; instead, unmerged entries are ignored.</p>  </dd> <dt class=\"hdlist1\">--ours</dt> <dt class=\"hdlist1\">--theirs</dt> <dd> <p>When checking out paths from the index, check out stage #2 (<code>ours</code>) or #3 (<code>theirs</code>) for unmerged paths.</p>  <p>Note that during <code>git rebase</code> and <code>git pull --rebase</code>, <code>ours</code> and <code>theirs</code> may appear swapped; <code>--ours</code> gives the version from the branch the changes are rebased onto, while <code>--theirs</code> gives the version from the branch that holds your work that is being rebased.</p>   <p>This is because <code>rebase</code> is used in a workflow that treats the history at the remote as the shared canonical one, and treats the work done on the branch you are rebasing as the third-party work to be integrated, and you are temporarily assuming the role of the keeper of the canonical history during the rebase. As the keeper of the canonical history, you need to view the history from the remote as <code>ours</code> (i.e. \"our shared canonical history\"), while what you did on your side branch as <code>theirs</code> (i.e. \"one contributor’s work on top of it\").</p>  </dd> <dt class=\"hdlist1\">-b &lt;new_branch&gt;</dt> <dd> <p>Create a new branch named &lt;new_branch&gt; and start it at &lt;start_point&gt;; see <a href=\"git-branch\">git-branch[1]</a> for details.</p> </dd> <dt class=\"hdlist1\">-B &lt;new_branch&gt;</dt> <dd> <p>Creates the branch &lt;new_branch&gt; and start it at &lt;start_point&gt;; if it already exists, then reset it to &lt;start_point&gt;. This is equivalent to running \"git branch\" with \"-f\"; see <a href=\"git-branch\">git-branch[1]</a> for details.</p> </dd> <dt class=\"hdlist1\">-t</dt> <dt class=\"hdlist1\">--track</dt> <dd> <p>When creating a new branch, set up \"upstream\" configuration. See \"--track\" in <a href=\"git-branch\">git-branch[1]</a> for details.</p>  <p>If no <code>-b</code> option is given, the name of the new branch will be derived from the remote-tracking branch, by looking at the local part of the refspec configured for the corresponding remote, and then stripping the initial part up to the \"*\". This would tell us to use \"hack\" as the local branch when branching off of \"origin/hack\" (or \"remotes/origin/hack\", or even \"refs/remotes/origin/hack\"). If the given name has no slash, or the above guessing results in an empty name, the guessing is aborted. You can explicitly give a name with <code>-b</code> in such a case.</p>  </dd> <dt class=\"hdlist1\">--no-track</dt> <dd> <p>Do not set up \"upstream\" configuration, even if the branch.autoSetupMerge configuration variable is true.</p> </dd> <dt class=\"hdlist1\">-l</dt> <dd> <p>Create the new branch’s reflog; see <a href=\"git-branch\">git-branch[1]</a> for details.</p> </dd> <dt class=\"hdlist1\">--detach</dt> <dd> <p>Rather than checking out a branch to work on it, check out a commit for inspection and discardable experiments. This is the default behavior of \"git checkout &lt;commit&gt;\" when &lt;commit&gt; is not a branch name. See the \"DETACHED HEAD\" section below for details.</p> </dd> <dt class=\"hdlist1\">--orphan &lt;new_branch&gt;</dt> <dd> <p>Create a new <code>orphan</code> branch, named &lt;new_branch&gt;, started from &lt;start_point&gt; and switch to it. The first commit made on this new branch will have no parents and it will be the root of a new history totally disconnected from all the other branches and commits.</p>  <p>The index and the working tree are adjusted as if you had previously run \"git checkout &lt;start_point&gt;\". This allows you to start a new history that records a set of paths similar to &lt;start_point&gt; by easily running \"git commit -a\" to make the root commit.</p>   <p>This can be useful when you want to publish the tree from a commit without exposing its full history. You might want to do this to publish an open source branch of a project whose current tree is \"clean\", but whose full history contains proprietary or otherwise encumbered bits of code.</p>   <p>If you want to start a disconnected history that records a set of paths that is totally different from the one of &lt;start_point&gt;, then you should clear the index and the working tree right after creating the orphan branch by running \"git rm -rf .\" from the top level of the working tree. Afterwards you will be ready to prepare your new files, repopulating the working tree, by copying them from elsewhere, extracting a tarball, etc.</p>  </dd> <dt class=\"hdlist1\">--ignore-skip-worktree-bits</dt> <dd> <p>In sparse checkout mode, <code>git checkout -- &lt;paths&gt;</code> would update only entries matched by &lt;paths&gt; and sparse patterns in $GIT_DIR/info/sparse-checkout. This option ignores the sparse patterns and adds back any files in &lt;paths&gt;.</p> </dd> <dt class=\"hdlist1\">-m</dt> <dt class=\"hdlist1\">--merge</dt> <dd> <p>When switching branches, if you have local modifications to one or more files that are different between the current branch and the branch to which you are switching, the command refuses to switch branches in order to preserve your modifications in context. However, with this option, a three-way merge between the current branch, your working tree contents, and the new branch is done, and you will be on the new branch.</p>  <p>When a merge conflict happens, the index entries for conflicting paths are left unmerged, and you need to resolve the conflicts and mark the resolved paths with <code>git add</code> (or <code>git rm</code> if the merge should result in deletion of the path).</p>   <p>When checking out paths from the index, this option lets you recreate the conflicted merge in the specified paths.</p>  </dd> <dt class=\"hdlist1\">--conflict=&lt;style&gt;</dt> <dd> <p>The same as --merge option above, but changes the way the conflicting hunks are presented, overriding the merge.conflictStyle configuration variable. Possible values are \"merge\" (default) and \"diff3\" (in addition to what is shown by \"merge\" style, shows the original contents).</p> </dd> <dt class=\"hdlist1\">-p</dt> <dt class=\"hdlist1\">--patch</dt> <dd> <p>Interactively select hunks in the difference between the &lt;tree-ish&gt; (or the index, if unspecified) and the working tree. The chosen hunks are then applied in reverse to the working tree (and if a &lt;tree-ish&gt; was specified, the index).</p>  <p>This means that you can use <code>git checkout -p</code> to selectively discard edits from your current working tree. See the “Interactive Mode” section of <a href=\"git-add\">git-add[1]</a> to learn how to operate the <code>--patch</code> mode.</p>  </dd> <dt class=\"hdlist1\">--ignore-other-worktrees</dt> <dd> <p><code>git checkout</code> refuses when the wanted ref is already checked out by another worktree. This option makes it check the ref out anyway. In other words, the ref can be held by more than one worktree.</p> </dd> <dt class=\"hdlist1\">&lt;branch&gt;</dt> <dd> <p>Branch to checkout; if it refers to a branch (i.e., a name that, when prepended with \"refs/heads/\", is a valid ref), then that branch is checked out. Otherwise, if it refers to a valid commit, your HEAD becomes \"detached\" and you are no longer on any branch (see below for details).</p>  <p>As a special case, the <code>\"@{-N}\"</code> syntax for the N-th last branch/commit checks out branches (instead of detaching). You may also specify <code>-</code> which is synonymous with <code>\"@{-1}\"</code>.</p>   <p>As a further special case, you may use <code>\"A...B\"</code> as a shortcut for the merge base of <code>A</code> and <code>B</code> if there is exactly one merge base. You can leave out at most one of <code>A</code> and <code>B</code>, in which case it defaults to <code>HEAD</code>.</p>  </dd> <dt class=\"hdlist1\">&lt;new_branch&gt;</dt> <dd> <p>Name for the new branch.</p> </dd> <dt class=\"hdlist1\">&lt;start_point&gt;</dt> <dd> <p>The name of a commit at which to start the new branch; see <a href=\"git-branch\">git-branch[1]</a> for details. Defaults to HEAD.</p> </dd> <dt class=\"hdlist1\">&lt;tree-ish&gt;</dt> <dd> <p>Tree to checkout from (when paths are given). If not specified, the index will be used.</p> </dd> </dl> </div></div>   <h2 id=\"_detached_head\">Detached head</h2> <div class=\"sectionbody\"> <p>HEAD normally refers to a named branch (e.g. <code>master</code>). Meanwhile, each branch refers to a specific commit. Let’s look at a repo with three commits, one of them tagged, and with branch <code>master</code> checked out:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>           HEAD (refers to branch 'master')\n            |\n            v\na---b---c  branch 'master' (refers to commit 'c')\n    ^\n    |\n  tag 'v2.0' (refers to commit 'b')</pre> </div> </div>  <p>When a commit is created in this state, the branch is updated to refer to the new commit. Specifically, <code>git commit</code> creates a new commit <code>d</code>, whose parent is commit <code>c</code>, and then updates branch <code>master</code> to refer to new commit <code>d</code>. HEAD still refers to branch <code>master</code> and so indirectly now refers to commit <code>d</code>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ edit; git add; git commit\n\n               HEAD (refers to branch 'master')\n                |\n                v\na---b---c---d  branch 'master' (refers to commit 'd')\n    ^\n    |\n  tag 'v2.0' (refers to commit 'b')</pre> </div> </div>  <p>It is sometimes useful to be able to checkout a commit that is not at the tip of any named branch, or even to create a new commit that is not referenced by a named branch. Let’s look at what happens when we checkout commit <code>b</code> (here we show two ways this may be done):</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout v2.0  # or\n$ git checkout master^^\n\n   HEAD (refers to commit 'b')\n    |\n    v\na---b---c---d  branch 'master' (refers to commit 'd')\n    ^\n    |\n  tag 'v2.0' (refers to commit 'b')</pre> </div> </div>  <p>Notice that regardless of which checkout command we use, HEAD now refers directly to commit <code>b</code>. This is known as being in detached HEAD state. It means simply that HEAD refers to a specific commit, as opposed to referring to a named branch. Let’s see what happens when we create a commit:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ edit; git add; git commit\n\n     HEAD (refers to commit 'e')\n      |\n      v\n      e\n     /\na---b---c---d  branch 'master' (refers to commit 'd')\n    ^\n    |\n  tag 'v2.0' (refers to commit 'b')</pre> </div> </div>  <p>There is now a new commit <code>e</code>, but it is referenced only by HEAD. We can of course add yet another commit in this state:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ edit; git add; git commit\n\n         HEAD (refers to commit 'f')\n          |\n          v\n      e---f\n     /\na---b---c---d  branch 'master' (refers to commit 'd')\n    ^\n    |\n  tag 'v2.0' (refers to commit 'b')</pre> </div> </div>  <p>In fact, we can perform all the normal Git operations. But, let’s look at what happens when we then checkout master:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout master\n\n               HEAD (refers to branch 'master')\n      e---f     |\n     /          v\na---b---c---d  branch 'master' (refers to commit 'd')\n    ^\n    |\n  tag 'v2.0' (refers to commit 'b')</pre> </div> </div>  <p>It is important to realize that at this point nothing refers to commit <code>f</code>. Eventually commit <code>f</code> (and by extension commit <code>e</code>) will be deleted by the routine Git garbage collection process, unless we create a reference before that happens. If we have not yet moved away from commit <code>f</code>, any of these will create a reference to it:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout -b foo   (1)\n$ git branch foo        (2)\n$ git tag foo           (3)</pre> </div> </div> <div class=\"colist arabic\"> <ol> <li> <p>creates a new branch <code>foo</code>, which refers to commit <code>f</code>, and then updates HEAD to refer to branch <code>foo</code>. In other words, we’ll no longer be in detached HEAD state after this command.</p> </li> <li> <p>similarly creates a new branch <code>foo</code>, which refers to commit <code>f</code>, but leaves HEAD detached.</p> </li> <li> <p>creates a new tag <code>foo</code>, which refers to commit <code>f</code>, leaving HEAD detached.</p> </li> </ol> </div>  <p>If we have moved away from commit <code>f</code>, then we must first recover its object name (typically by using git reflog), and then we can create a reference to it. For example, to see the last two commits to which HEAD referred, we can use either of these commands:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git reflog -2 HEAD # or\n$ git log -g -2 HEAD</pre> </div> </div>\n</div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"><div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>The following sequence checks out the <code>master</code> branch, reverts the <code>Makefile</code> to two revisions back, deletes hello.c by mistake, and gets it back from the index.</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout master             (1)\n$ git checkout master~2 Makefile  (2)\n$ rm -f hello.c\n$ git checkout hello.c            (3)</pre> </div> </div> <div class=\"colist arabic\"> <ol> <li> <p>switch branch</p> </li> <li> <p>take a file out of another commit</p> </li> <li> <p>restore hello.c from the index</p> </li> </ol> </div>  <p>If you want to check out <code>all</code> C source files out of the index, you can say</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout -- '*.c'</pre> </div> </div>  <p>Note the quotes around <code>*.c</code>. The file <code>hello.c</code> will also be checked out, even though it is no longer in the working tree, because the file globbing is used to match entries in the index (not in the working tree by the shell).</p>   <p>If you have an unfortunate branch that is named <code>hello.c</code>, this step would be confused as an instruction to switch to that branch. You should instead write:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout -- hello.c</pre> </div> </div> </li> <li> <p>After working in the wrong branch, switching to the correct branch would be done using:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout mytopic</pre> </div> </div>  <p>However, your \"wrong\" branch and correct \"mytopic\" branch may differ in files that you have modified locally, in which case the above checkout would fail like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout mytopic\nerror: You have local changes to 'frotz'; not switching branches.</pre> </div> </div>  <p>You can give the <code>-m</code> flag to the command, which would try a three-way merge:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout -m mytopic\nAuto-merging frotz</pre> </div> </div>  <p>After this three-way merge, the local modifications are <code>not</code> registered in your index file, so <code>git diff</code> would show you what changes you made since the tip of the new branch.</p>  </li> <li> <p>When a merge conflict happens during switching branches with the <code>-m</code> option, you would see something like this:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout -m mytopic\nAuto-merging frotz\nERROR: Merge conflict in frotz\nfatal: merge program failed</pre> </div> </div>  <p>At this point, <code>git diff</code> shows the changes cleanly merged as in the previous example, as well as the changes in the conflicted files. Edit and resolve the conflict and mark it resolved with <code>git add</code> as usual:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ edit frotz\n$ git add frotz</pre> </div> </div> </li> </ol> </div></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-checkout\" class=\"_attribution-link\">https://git-scm.com/docs/git-checkout</a>\n  </p>\n</div>\n","git-commit":"<h1>git-commit</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-commit - Record changes to the repository</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git commit [-a | --interactive | --patch] [-s] [-v] [-u&lt;mode&gt;] [--amend]\n           [--dry-run] [(-c | -C | --fixup | --squash) &lt;commit&gt;]\n           [-F &lt;file&gt; | -m &lt;msg&gt;] [--reset-author] [--allow-empty]\n           [--allow-empty-message] [--no-verify] [-e] [--author=&lt;author&gt;]\n           [--date=&lt;date&gt;] [--cleanup=&lt;mode&gt;] [--[no-]status]\n           [-i | -o] [-S[&lt;keyid&gt;]] [--] [&lt;file&gt;…​]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Stores the current contents of the index in a new commit along with a log message from the user describing the changes.</p>   <p>The content to be added can be specified in several ways:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>by using <code>git add</code> to incrementally \"add\" changes to the index before using the <code>commit</code> command (Note: even modified files must be \"added\");</p> </li> <li> <p>by using <code>git rm</code> to remove files from the working tree and the index, again before using the <code>commit</code> command;</p> </li> <li> <p>by listing files as arguments to the <code>commit</code> command, in which case the commit will ignore changes staged in the index, and instead record the current content of the listed files (which must already be known to Git);</p> </li> <li> <p>by using the -a switch with the <code>commit</code> command to automatically \"add\" changes from all known files (i.e. all files that are already listed in the index) and to automatically \"rm\" files in the index that have been removed from the working tree, and then perform the actual commit;</p> </li> <li> <p>by using the --interactive or --patch switches with the <code>commit</code> command to decide one by one which files or hunks should be part of the commit, before finalizing the operation. See the “Interactive Mode” section of <a href=\"git-add\">git-add[1]</a> to learn how to operate these modes.</p> </li> </ol> </div>  <p>The <code>--dry-run</code> option can be used to obtain a summary of what is included by any of the above for the next commit by giving the same set of parameters (options and paths).</p>   <p>If you make a commit and then find a mistake immediately after that, you can recover from it with <code>git reset</code>.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-a</dt> <dt class=\"hdlist1\">--all</dt> <dd> <p>Tell the command to automatically stage files that have been modified and deleted, but new files you have not told Git about are not affected.</p> </dd> <dt class=\"hdlist1\">-p</dt> <dt class=\"hdlist1\">--patch</dt> <dd> <p>Use the interactive patch selection interface to chose which changes to commit. See <a href=\"git-add\">git-add[1]</a> for details.</p> </dd> <dt class=\"hdlist1\">-C &lt;commit&gt;</dt> <dt class=\"hdlist1\">--reuse-message=&lt;commit&gt;</dt> <dd> <p>Take an existing commit object, and reuse the log message and the authorship information (including the timestamp) when creating the commit.</p> </dd> <dt class=\"hdlist1\">-c &lt;commit&gt;</dt> <dt class=\"hdlist1\">--reedit-message=&lt;commit&gt;</dt> <dd> <p>Like <code>-C</code>, but with <code>-c</code> the editor is invoked, so that the user can further edit the commit message.</p> </dd> <dt class=\"hdlist1\">--fixup=&lt;commit&gt;</dt> <dd> <p>Construct a commit message for use with <code>rebase --autosquash</code>. The commit message will be the subject line from the specified commit with a prefix of \"fixup! \". See <a href=\"git-rebase\">git-rebase[1]</a> for details.</p> </dd> <dt class=\"hdlist1\">--squash=&lt;commit&gt;</dt> <dd> <p>Construct a commit message for use with <code>rebase --autosquash</code>. The commit message subject line is taken from the specified commit with a prefix of \"squash! \". Can be used with additional commit message options (<code>-m</code>/<code>-c</code>/<code>-C</code>/<code>-F</code>). See <a href=\"git-rebase\">git-rebase[1]</a> for details.</p> </dd> <dt class=\"hdlist1\">--reset-author</dt> <dd> <p>When used with -C/-c/--amend options, or when committing after a a conflicting cherry-pick, declare that the authorship of the resulting commit now belongs to the committer. This also renews the author timestamp.</p> </dd> <dt class=\"hdlist1\">--short</dt> <dd> <p>When doing a dry-run, give the output in the short-format. See <a href=\"git-status\">git-status[1]</a> for details. Implies <code>--dry-run</code>.</p> </dd> <dt class=\"hdlist1\">--branch</dt> <dd> <p>Show the branch and tracking info even in short-format.</p> </dd> <dt class=\"hdlist1\">--porcelain</dt> <dd> <p>When doing a dry-run, give the output in a porcelain-ready format. See <a href=\"git-status\">git-status[1]</a> for details. Implies <code>--dry-run</code>.</p> </dd> <dt class=\"hdlist1\">--long</dt> <dd> <p>When doing a dry-run, give the output in a the long-format. Implies <code>--dry-run</code>.</p> </dd> <dt class=\"hdlist1\">-z</dt> <dt class=\"hdlist1\">--null</dt> <dd> <p>When showing <code>short</code> or <code>porcelain</code> status output, terminate entries in the status output with NUL, instead of LF. If no format is given, implies the <code>--porcelain</code> output format.</p> </dd> <dt class=\"hdlist1\">-F &lt;file&gt;</dt> <dt class=\"hdlist1\">--file=&lt;file&gt;</dt> <dd> <p>Take the commit message from the given file. Use <code>-</code> to read the message from the standard input.</p> </dd> <dt class=\"hdlist1\">--author=&lt;author&gt;</dt> <dd> <p>Override the commit author. Specify an explicit author using the standard <code>A U Thor &lt;author@example.com&gt;</code> format. Otherwise &lt;author&gt; is assumed to be a pattern and is used to search for an existing commit by that author (i.e. rev-list --all -i --author=&lt;author&gt;); the commit author is then copied from the first such commit found.</p> </dd> <dt class=\"hdlist1\">--date=&lt;date&gt;</dt> <dd> <p>Override the author date used in the commit.</p> </dd> <dt class=\"hdlist1\">-m &lt;msg&gt;</dt> <dt class=\"hdlist1\">--message=&lt;msg&gt;</dt> <dd> <p>Use the given &lt;msg&gt; as the commit message. If multiple <code>-m</code> options are given, their values are concatenated as separate paragraphs.</p> </dd> <dt class=\"hdlist1\">-t &lt;file&gt;</dt> <dt class=\"hdlist1\">--template=&lt;file&gt;</dt> <dd> <p>When editing the commit message, start the editor with the contents in the given file. The <code>commit.template</code> configuration variable is often used to give this option implicitly to the command. This mechanism can be used by projects that want to guide participants with some hints on what to write in the message in what order. If the user exits the editor without editing the message, the commit is aborted. This has no effect when a message is given by other means, e.g. with the <code>-m</code> or <code>-F</code> options.</p> </dd> <dt class=\"hdlist1\">-s</dt> <dt class=\"hdlist1\">--signoff</dt> <dd> <p>Add Signed-off-by line by the committer at the end of the commit log message. The meaning of a signoff depends on the project, but it typically certifies that committer has the rights to submit this work under the same license and agrees to a Developer Certificate of Origin (see <a href=\"http://developercertificate.org/\" class=\"bare\">http://developercertificate.org/</a> for more information).</p> </dd> <dt class=\"hdlist1\">-n</dt> <dt class=\"hdlist1\">--no-verify</dt> <dd> <p>This option bypasses the pre-commit and commit-msg hooks. See also <a href=\"githooks\">githooks[5]</a>.</p> </dd> <dt class=\"hdlist1\">--allow-empty</dt> <dd> <p>Usually recording a commit that has the exact same tree as its sole parent commit is a mistake, and the command prevents you from making such a commit. This option bypasses the safety, and is primarily for use by foreign SCM interface scripts.</p> </dd> <dt class=\"hdlist1\">--allow-empty-message</dt> <dd> <p>Like --allow-empty this command is primarily for use by foreign SCM interface scripts. It allows you to create a commit with an empty commit message without using plumbing commands like <a href=\"git-commit-tree\">git-commit-tree[1]</a>.</p> </dd> <dt class=\"hdlist1\">--cleanup=&lt;mode&gt;</dt> <dd> <p>This option determines how the supplied commit message should be cleaned up before committing. The <code>&lt;mode&gt;</code> can be <code>strip</code>, <code>whitespace</code>, <code>verbatim</code>, <code>scissors</code> or <code>default</code>.</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">strip</dt> <dd> <p>Strip leading and trailing empty lines, trailing whitespace, commentary and collapse consecutive empty lines.</p> </dd> <dt class=\"hdlist1\">whitespace</dt> <dd> <p>Same as <code>strip</code> except #commentary is not removed.</p> </dd> <dt class=\"hdlist1\">verbatim</dt> <dd> <p>Do not change the message at all.</p> </dd> <dt class=\"hdlist1\">scissors</dt> <dd> <p>Same as <code>whitespace</code>, except that everything from (and including) the line \"<code># ------------------------ &gt;8 ------------------------</code>\" is truncated if the message is to be edited. \"<code>#</code>\" can be customized with core.commentChar.</p> </dd> <dt class=\"hdlist1\">default</dt> <dd> <p>Same as <code>strip</code> if the message is to be edited. Otherwise <code>whitespace</code>.</p> </dd> </dl> </div> </div> </div>  <p>The default can be changed by the <code>commit.cleanup</code> configuration variable (see <a href=\"git-config\">git-config[1]</a>).</p>  </dd> <dt class=\"hdlist1\">-e</dt> <dt class=\"hdlist1\">--edit</dt> <dd> <p>The message taken from file with <code>-F</code>, command line with <code>-m</code>, and from commit object with <code>-C</code> are usually used as the commit log message unmodified. This option lets you further edit the message taken from these sources.</p> </dd> <dt class=\"hdlist1\">--no-edit</dt> <dd> <p>Use the selected commit message without launching an editor. For example, <code>git commit --amend --no-edit</code> amends a commit without changing its commit message.</p> </dd> <dt class=\"hdlist1\">--amend</dt> <dd> <p>Replace the tip of the current branch by creating a new commit. The recorded tree is prepared as usual (including the effect of the <code>-i</code> and <code>-o</code> options and explicit pathspec), and the message from the original commit is used as the starting point, instead of an empty message, when no other message is specified from the command line via options such as <code>-m</code>, <code>-F</code>, <code>-c</code>, etc. The new commit has the same parents and author as the current one (the <code>--reset-author</code> option can countermand this).</p> <div class=\"openblock\"> <div class=\"content\">  <p>It is a rough equivalent for:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        $ git reset --soft HEAD^\n        $ ... do something else to come up with the right tree ...\n        $ git commit -c ORIG_HEAD</pre> </div> </div>  <p>but can be used to amend a merge commit.</p>  </div> </div>  <p>You should understand the implications of rewriting history if you amend a commit that has already been published. (See the \"RECOVERING FROM UPSTREAM REBASE\" section in <a href=\"git-rebase\">git-rebase[1]</a>.)</p>  </dd> <dt class=\"hdlist1\">--no-post-rewrite</dt> <dd> <p>Bypass the post-rewrite hook.</p> </dd> <dt class=\"hdlist1\">-i</dt> <dt class=\"hdlist1\">--include</dt> <dd> <p>Before making a commit out of staged contents so far, stage the contents of paths given on the command line as well. This is usually not what you want unless you are concluding a conflicted merge.</p> </dd> <dt class=\"hdlist1\">-o</dt> <dt class=\"hdlist1\">--only</dt> <dd> <p>Make a commit by taking the updated working tree contents of the paths specified on the command line, disregarding any contents that have been staged for other paths. This is the default mode of operation of <code>git commit</code> if any paths are given on the command line, in which case this option can be omitted. If this option is specified together with <code>--amend</code>, then no paths need to be specified, which can be used to amend the last commit without committing changes that have already been staged.</p> </dd> <dt class=\"hdlist1\">-u[&lt;mode&gt;]</dt> <dt class=\"hdlist1\">--untracked-files[=&lt;mode&gt;]</dt> <dd> <p>Show untracked files.</p>  <p>The mode parameter is optional (defaults to <code>all</code>), and is used to specify the handling of untracked files; when -u is not used, the default is <code>normal</code>, i.e. show untracked files and directories.</p>   <p>The possible options are:</p>  <div class=\"ulist\"> <ul> <li> <p><code>no</code> - Show no untracked files</p> </li> <li> <p><code>normal</code> - Shows untracked files and directories</p> </li> <li> <p><code>all</code> - Also shows individual files in untracked directories.</p> </li> </ul> </div>  <p>The default can be changed using the status.showUntrackedFiles configuration variable documented in <a href=\"git-config\">git-config[1]</a>.</p>  </dd> <dt class=\"hdlist1\">-v</dt> <dt class=\"hdlist1\">--verbose</dt> <dd> <p>Show unified diff between the HEAD commit and what would be committed at the bottom of the commit message template to help the user describe the commit by reminding what changes the commit has. Note that this diff output doesn’t have its lines prefixed with <code>#</code>. This diff will not be a part of the commit message. See the <code>commit.verbose</code> configuration variable in <a href=\"git-config\">git-config[1]</a>.</p>  <p>If specified twice, show in addition the unified diff between what would be committed and the worktree files, i.e. the unstaged changes to tracked files.</p>  </dd> <dt class=\"hdlist1\">-q</dt> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>Suppress commit summary message.</p> </dd> <dt class=\"hdlist1\">--dry-run</dt> <dd> <p>Do not create a commit, but show a list of paths that are to be committed, paths with local changes that will be left uncommitted and paths that are untracked.</p> </dd> <dt class=\"hdlist1\">--status</dt> <dd> <p>Include the output of <a href=\"git-status\">git-status[1]</a> in the commit message template when using an editor to prepare the commit message. Defaults to on, but can be used to override configuration variable commit.status.</p> </dd> <dt class=\"hdlist1\">--no-status</dt> <dd> <p>Do not include the output of <a href=\"git-status\">git-status[1]</a> in the commit message template when using an editor to prepare the default commit message.</p> </dd> <dt class=\"hdlist1\">-S[&lt;keyid&gt;]</dt> <dt class=\"hdlist1\">--gpg-sign[=&lt;keyid&gt;]</dt> <dd> <p>GPG-sign commits. The <code>keyid</code> argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space.</p> </dd> <dt class=\"hdlist1\">--no-gpg-sign</dt> <dd> <p>Countermand <code>commit.gpgSign</code> configuration variable that is set to force each and every commit to be signed.</p> </dd> <dt class=\"hdlist1\">--</dt> <dd> <p>Do not interpret any more arguments as options.</p> </dd> <dt class=\"hdlist1\">&lt;file&gt;…​</dt> <dd> <p>When files are given on the command line, the command commits the contents of the named files, without recording the changes already staged. The contents of these files are also staged for the next commit on top of what have been staged before.</p> </dd> </dl> </div></div>   <h2 id=\"_date_formats\">Date formats</h2> <div class=\"sectionbody\"> <p>The <code>GIT_AUTHOR_DATE</code>, <code>GIT_COMMITTER_DATE</code> environment variables and the <code>--date</code> option support the following date formats:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">Git internal format</dt> <dd> <p>It is <code>&lt;unix timestamp&gt; &lt;time zone offset&gt;</code>, where <code>&lt;unix\ntimestamp&gt;</code> is the number of seconds since the UNIX epoch. <code>&lt;time zone offset&gt;</code> is a positive or negative offset from UTC. For example CET (which is 2 hours ahead UTC) is <code>+0200</code>.</p> </dd> <dt class=\"hdlist1\">RFC 2822</dt> <dd> <p>The standard email format as described by RFC 2822, for example <code>Thu, 07 Apr 2005 22:13:13 +0200</code>.</p> </dd> <dt class=\"hdlist1\">ISO 8601</dt> <dd> <p>Time and date specified by the ISO 8601 standard, for example <code>2005-04-07T22:13:13</code>. The parser accepts a space instead of the <code>T</code> character as well.</p> <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> In addition, the date part is accepted in the following formats: <code>YYYY.MM.DD</code>, <code>MM/DD/YYYY</code> and <code>DD.MM.YYYY</code>. </td> </tr> </table> </div> </dd> </dl> </div>\n</div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"> <p>When recording your own work, the contents of modified files in your working tree are temporarily stored to a staging area called the \"index\" with <code>git add</code>. A file can be reverted back, only in the index but not in the working tree, to that of the last commit with <code>git reset HEAD -- &lt;file&gt;</code>, which effectively reverts <code>git add</code> and prevents the changes to this file from participating in the next commit. After building the state to be committed incrementally with these commands, <code>git commit</code> (without any pathname parameter) is used to record what has been staged so far. This is the most basic form of the command. An example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ edit hello.c\n$ git rm goodbye.c\n$ git add hello.c\n$ git commit</pre> </div> </div>  <p>Instead of staging files after each individual change, you can tell <code>git commit</code> to notice the changes to the files whose contents are tracked in your working tree and do corresponding <code>git add</code> and <code>git rm</code> for you. That is, this example does the same as the earlier example if there is no other change in your working tree:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ edit hello.c\n$ rm goodbye.c\n$ git commit -a</pre> </div> </div>  <p>The command <code>git commit -a</code> first looks at your working tree, notices that you have modified hello.c and removed goodbye.c, and performs necessary <code>git add</code> and <code>git rm</code> for you.</p>   <p>After staging changes to many files, you can alter the order the changes are recorded in, by giving pathnames to <code>git commit</code>. When pathnames are given, the command makes a commit that only records the changes made to the named paths:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ edit hello.c hello.h\n$ git add hello.c hello.h\n$ edit Makefile\n$ git commit Makefile</pre> </div> </div>  <p>This makes a commit that records the modification to <code>Makefile</code>. The changes staged for <code>hello.c</code> and <code>hello.h</code> are not included in the resulting commit. However, their changes are not lost — they are still staged and merely held back. After the above sequence, if you do:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git commit</pre> </div> </div>  <p>this second commit would record the changes to <code>hello.c</code> and <code>hello.h</code> as expected.</p>   <p>After a merge (initiated by <code>git merge</code> or <code>git pull</code>) stops because of conflicts, cleanly merged paths are already staged to be committed for you, and paths that conflicted are left in unmerged state. You would have to first check which paths are conflicting with <code>git status</code> and after fixing them manually in your working tree, you would stage the result as usual with <code>git add</code>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git status | grep unmerged\nunmerged: hello.c\n$ edit hello.c\n$ git add hello.c</pre> </div> </div>  <p>After resolving conflicts and staging the result, <code>git ls-files -u</code> would stop mentioning the conflicted path. When you are done, run <code>git commit</code> to finally record the merge:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git commit</pre> </div> </div>  <p>As with the case to record your own changes, you can use <code>-a</code> option to save typing. One difference is that during a merge resolution, you cannot use <code>git commit</code> with pathnames to alter the order the changes are committed, because the merge should be recorded as a single commit. In fact, the command refuses to run when given pathnames (but see <code>-i</code> option).</p> </div>   <h2 id=\"_discussion\">Discussion</h2> <div class=\"sectionbody\"> <p>Though not required, it’s a good idea to begin the commit message with a single short (less than 50 character) line summarizing the change, followed by a blank line and then a more thorough description. The text up to the first blank line in a commit message is treated as the commit title, and that title is used throughout Git. For example, <a href=\"git-format-patch\">git-format-patch[1]</a> turns a commit into email, and it uses the title on the Subject line and the rest of the commit in the body.</p>   <p>Git is to some extent character encoding agnostic.</p>  <div class=\"ulist\"> <ul> <li> <p>The contents of the blob objects are uninterpreted sequences of bytes. There is no encoding translation at the core level.</p> </li> <li> <p>Path names are encoded in UTF-8 normalization form C. This applies to tree objects, the index file, ref names, as well as path names in command line arguments, environment variables and config files (<code>.git/config</code> (see <a href=\"git-config\">git-config[1]</a>), <a href=\"gitignore\">gitignore[5]</a>, <a href=\"gitattributes\">gitattributes[5]</a> and <a href=\"gitmodules\">gitmodules[5]</a>).</p>  <p>Note that Git at the core level treats path names simply as sequences of non-NUL bytes, there are no path name encoding conversions (except on Mac and Windows). Therefore, using non-ASCII path names will mostly work even on platforms and file systems that use legacy extended ASCII encodings. However, repositories created on such systems will not work properly on UTF-8-based systems (e.g. Linux, Mac, Windows) and vice versa. Additionally, many Git-based tools simply assume path names to be UTF-8 and will fail to display other encodings correctly.</p>  </li> <li> <p>Commit log messages are typically encoded in UTF-8, but other extended ASCII encodings are also supported. This includes ISO-8859-x, CP125x and many others, but <code>not</code> UTF-16/32, EBCDIC and CJK multi-byte encodings (GBK, Shift-JIS, Big5, EUC-x, CP9xx etc.).</p> </li> </ul> </div>  <p>Although we encourage that the commit log messages are encoded in UTF-8, both the core and Git Porcelain are designed not to force UTF-8 on projects. If all participants of a particular project find it more convenient to use legacy encodings, Git does not forbid it. However, there are a few things to keep in mind.</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p><code>git commit</code> and <code>git commit-tree</code> issues a warning if the commit log message given to it does not look like a valid UTF-8 string, unless you explicitly say your project uses a legacy encoding. The way to say this is to have i18n.commitencoding in <code>.git/config</code> file, like this:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>[i18n]\n        commitencoding = ISO-8859-1</pre> </div> </div>  <p>Commit objects created with the above setting record the value of <code>i18n.commitencoding</code> in its <code>encoding</code> header. This is to help other people who look at them later. Lack of this header implies that the commit log message is encoded in UTF-8.</p>  </li> <li> <p><code>git log</code>, <code>git show</code>, <code>git blame</code> and friends look at the <code>encoding</code> header of a commit object, and try to re-code the log message into UTF-8 unless otherwise specified. You can specify the desired output encoding with <code>i18n.logoutputencoding</code> in <code>.git/config</code> file, like this:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>[i18n]\n        logoutputencoding = ISO-8859-1</pre> </div> </div>  <p>If you do not have this configuration variable, the value of <code>i18n.commitencoding</code> is used instead.</p>  </li> </ol> </div>  <p>Note that we deliberately chose not to re-code the commit log message when a commit is made to force UTF-8 at the commit object level, because re-coding to UTF-8 is not necessarily a reversible operation.</p> </div>   <h2 id=\"_environment_and_configuration_variables\">Environment and configuration variables</h2> <div class=\"sectionbody\"> <p>The editor used to edit the commit log message will be chosen from the <code>GIT_EDITOR</code> environment variable, the core.editor configuration variable, the <code>VISUAL</code> environment variable, or the <code>EDITOR</code> environment variable (in that order). See <a href=\"git-var\">git-var[1]</a> for details.</p> </div>   <h2 id=\"_hooks\">Hooks</h2> <div class=\"sectionbody\"> <p>This command can run <code>commit-msg</code>, <code>prepare-commit-msg</code>, <code>pre-commit</code>, and <code>post-commit</code> hooks. See <a href=\"githooks\">githooks[5]</a> for more information.</p> </div>   <h2 id=\"_files\">Files</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>$GIT_DIR/COMMIT_EDITMSG</code></dt> <dd> <p>This file contains the commit message of a commit in progress. If <code>git commit</code> exits due to an error before creating a commit, any commit message that has been provided by the user (e.g., in an editor session) will be available in this file, but will be overwritten by the next invocation of <code>git commit</code>.</p> </dd> </dl> </div></div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-add\">git-add[1]</a>, <a href=\"git-rm\">git-rm[1]</a>, <a href=\"git-mv\">git-mv[1]</a>, <a href=\"git-merge\">git-merge[1]</a>, <a href=\"git-commit-tree\">git-commit-tree[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-commit\" class=\"_attribution-link\">https://git-scm.com/docs/git-commit</a>\n  </p>\n</div>\n","git-reset":"<h1>git-reset</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-reset - Reset current HEAD to the specified state</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git reset [-q] [&lt;tree-ish&gt;] [--] &lt;paths&gt;…​\ngit reset (--patch | -p) [&lt;tree-ish&gt;] [--] [&lt;paths&gt;…​]\ngit reset [--soft | --mixed [-N] | --hard | --merge | --keep] [-q] [&lt;commit&gt;]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>In the first and second form, copy entries from &lt;tree-ish&gt; to the index. In the third form, set the current branch head (HEAD) to &lt;commit&gt;, optionally modifying index and working tree to match. The &lt;tree-ish&gt;/&lt;commit&gt; defaults to HEAD in all forms.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">\n<em>git reset</em> [-q] [&lt;tree-ish&gt;] [--] &lt;paths&gt;…​</dt> <dd> <p>This form resets the index entries for all &lt;paths&gt; to their state at &lt;tree-ish&gt;. (It does not affect the working tree or the current branch.)</p>  <p>This means that <code>git reset &lt;paths&gt;</code> is the opposite of <code>git add\n&lt;paths&gt;</code>.</p>   <p>After running <code>git reset &lt;paths&gt;</code> to update the index entry, you can use <a href=\"git-checkout\">git-checkout[1]</a> to check the contents out of the index to the working tree. Alternatively, using <a href=\"git-checkout\">git-checkout[1]</a> and specifying a commit, you can copy the contents of a path out of a commit to the index and to the working tree in one go.</p>  </dd> <dt class=\"hdlist1\">\n<em>git reset</em> (--patch | -p) [&lt;tree-ish&gt;] [--] [&lt;paths&gt;…​]</dt> <dd> <p>Interactively select hunks in the difference between the index and &lt;tree-ish&gt; (defaults to HEAD). The chosen hunks are applied in reverse to the index.</p>  <p>This means that <code>git reset -p</code> is the opposite of <code>git add -p</code>, i.e. you can use it to selectively reset hunks. See the “Interactive Mode” section of <a href=\"git-add\">git-add[1]</a> to learn how to operate the <code>--patch</code> mode.</p>  </dd> <dt class=\"hdlist1\">\n<em>git reset</em> [&lt;mode&gt;] [&lt;commit&gt;]</dt> <dd> <p>This form resets the current branch head to &lt;commit&gt; and possibly updates the index (resetting it to the tree of &lt;commit&gt;) and the working tree depending on &lt;mode&gt;. If &lt;mode&gt; is omitted, defaults to \"--mixed\". The &lt;mode&gt; must be one of the following:</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--soft</dt> <dd> <p>Does not touch the index file or the working tree at all (but resets the head to &lt;commit&gt;, just like all modes do). This leaves all your changed files \"Changes to be committed\", as <code>git status</code> would put it.</p> </dd> <dt class=\"hdlist1\">--mixed</dt> <dd> <p>Resets the index but not the working tree (i.e., the changed files are preserved but not marked for commit) and reports what has not been updated. This is the default action.</p>  <p>If <code>-N</code> is specified, removed paths are marked as intent-to-add (see <a href=\"git-add\">git-add[1]</a>).</p>  </dd> <dt class=\"hdlist1\">--hard</dt> <dd> <p>Resets the index and working tree. Any changes to tracked files in the working tree since &lt;commit&gt; are discarded.</p> </dd> <dt class=\"hdlist1\">--merge</dt> <dd> <p>Resets the index and updates the files in the working tree that are different between &lt;commit&gt; and HEAD, but keeps those which are different between the index and working tree (i.e. which have changes which have not been added). If a file that is different between &lt;commit&gt; and the index has unstaged changes, reset is aborted.</p>  <p>In other words, --merge does something like a <code>git read-tree -u -m &lt;commit&gt;</code>, but carries forward unmerged index entries.</p>  </dd> <dt class=\"hdlist1\">--keep</dt> <dd> <p>Resets index entries and updates files in the working tree that are different between &lt;commit&gt; and HEAD. If a file that is different between &lt;commit&gt; and HEAD has local changes, reset is aborted.</p> </dd> </dl> </div> </div> </div> </dd> </dl> </div>  <p>If you want to undo a commit other than the latest on a branch, <a href=\"git-revert\">git-revert[1]</a> is your friend.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-q</dt> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>Be quiet, only report errors.</p> </dd> </dl> </div></div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">Undo add</dt> <dd> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ edit                                     (1)\n$ git add frotz.c filfre.c\n$ mailx                                    (2)\n$ git reset                                (3)\n$ git pull git://info.example.com/ nitfol  (4)</pre> </div> </div> <div class=\"colist arabic\"> <ol> <li> <p>You are happily working on something, and find the changes in these files are in good order. You do not want to see them when you run \"git diff\", because you plan to work on other files and changes with these files are distracting.</p> </li> <li> <p>Somebody asks you to pull, and the changes sounds worthy of merging.</p> </li> <li> <p>However, you already dirtied the index (i.e. your index does not match the HEAD commit). But you know the pull you are going to make does not affect frotz.c or filfre.c, so you revert the index changes for these two files. Your changes in working tree remain there.</p> </li> <li> <p>Then you can pull and merge, leaving frotz.c and filfre.c changes still in the working tree.</p> </li> </ol> </div> </dd> <dt class=\"hdlist1\">Undo a commit and redo</dt> <dd> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git commit ...\n$ git reset --soft HEAD^      (1)\n$ edit                        (2)\n$ git commit -a -c ORIG_HEAD  (3)</pre> </div> </div> <div class=\"colist arabic\"> <ol> <li> <p>This is most often done when you remembered what you just committed is incomplete, or you misspelled your commit message, or both. Leaves working tree as it was before \"reset\".</p> </li> <li> <p>Make corrections to working tree files.</p> </li> <li> <p>\"reset\" copies the old head to .git/ORIG_HEAD; redo the commit by starting with its log message. If you do not need to edit the message further, you can give -C option instead.</p> </li> </ol> </div>  <p>See also the --amend option to <a href=\"git-commit\">git-commit[1]</a>.</p>  </dd> <dt class=\"hdlist1\">Undo a commit, making it a topic branch</dt> <dd> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git branch topic/wip     (1)\n$ git reset --hard HEAD~3  (2)\n$ git checkout topic/wip   (3)</pre> </div> </div> <div class=\"colist arabic\"> <ol> <li> <p>You have made some commits, but realize they were premature to be in the \"master\" branch. You want to continue polishing them in a topic branch, so create \"topic/wip\" branch off of the current HEAD.</p> </li> <li> <p>Rewind the master branch to get rid of those three commits.</p> </li> <li> <p>Switch to \"topic/wip\" branch and keep working.</p> </li> </ol> </div> </dd> <dt class=\"hdlist1\">Undo commits permanently</dt> <dd> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git commit ...\n$ git reset --hard HEAD~3   (1)</pre> </div> </div> <div class=\"colist arabic\"> <ol> <li> <p>The last three commits (HEAD, HEAD^, and HEAD~2) were bad and you do not want to ever see them again. Do <strong>not</strong> do this if you have already given these commits to somebody else. (See the \"RECOVERING FROM UPSTREAM REBASE\" section in <a href=\"git-rebase\">git-rebase[1]</a> for the implications of doing so.)</p> </li> </ol> </div> </dd> <dt class=\"hdlist1\">Undo a merge or pull</dt> <dd> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git pull                         (1)\nAuto-merging nitfol\nCONFLICT (content): Merge conflict in nitfol\nAutomatic merge failed; fix conflicts and then commit the result.\n$ git reset --hard                 (2)\n$ git pull . topic/branch          (3)\nUpdating from 41223... to 13134...\nFast-forward\n$ git reset --hard ORIG_HEAD       (4)</pre> </div> </div> <div class=\"colist arabic\"> <ol> <li> <p>Try to update from the upstream resulted in a lot of conflicts; you were not ready to spend a lot of time merging right now, so you decide to do that later.</p> </li> <li> <p>\"pull\" has not made merge commit, so \"git reset --hard\" which is a synonym for \"git reset --hard HEAD\" clears the mess from the index file and the working tree.</p> </li> <li> <p>Merge a topic branch into the current branch, which resulted in a fast-forward.</p> </li> <li> <p>But you decided that the topic branch is not ready for public consumption yet. \"pull\" or \"merge\" always leaves the original tip of the current branch in ORIG_HEAD, so resetting hard to it brings your index file and the working tree back to that state, and resets the tip of the branch to that commit.</p> </li> </ol> </div> </dd> <dt class=\"hdlist1\">Undo a merge or pull inside a dirty working tree</dt> <dd> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git pull                         (1)\nAuto-merging nitfol\nMerge made by recursive.\n nitfol                |   20 +++++----\n ...\n$ git reset --merge ORIG_HEAD      (2)</pre> </div> </div> <div class=\"colist arabic\"> <ol> <li> <p>Even if you may have local modifications in your working tree, you can safely say \"git pull\" when you know that the change in the other branch does not overlap with them.</p> </li> <li> <p>After inspecting the result of the merge, you may find that the change in the other branch is unsatisfactory. Running \"git reset --hard ORIG_HEAD\" will let you go back to where you were, but it will discard your local changes, which you do not want. \"git reset --merge\" keeps your local changes.</p> </li> </ol> </div> </dd> <dt class=\"hdlist1\">Interrupted workflow</dt> <dd>  <p>Suppose you are interrupted by an urgent fix request while you are in the middle of a large change. The files in your working tree are not in any shape to be committed yet, but you need to get to the other branch for a quick bugfix.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout feature ;# you were working in \"feature\" branch and\n$ work work work       ;# got interrupted\n$ git commit -a -m \"snapshot WIP\"                 (1)\n$ git checkout master\n$ fix fix fix\n$ git commit ;# commit with real log\n$ git checkout feature\n$ git reset --soft HEAD^ ;# go back to WIP state  (2)\n$ git reset                                       (3)</pre> </div> </div> <div class=\"colist arabic\"> <ol> <li> <p>This commit will get blown away so a throw-away log message is OK.</p> </li> <li> <p>This removes the <code>WIP</code> commit from the commit history, and sets your working tree to the state just before you made that snapshot.</p> </li> <li> <p>At this point the index file still has all the WIP changes you committed as <code>snapshot WIP</code>. This updates the index to show your WIP files as uncommitted.</p> </li> </ol> </div>  <p>See also <a href=\"git-stash\">git-stash[1]</a>.</p>  </dd> <dt class=\"hdlist1\">Reset a single file in the index</dt> <dd>  <p>Suppose you have added a file to your index, but later decide you do not want to add it to your commit. You can remove the file from the index while keeping your changes with git reset.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git reset -- frotz.c                      (1)\n$ git commit -m \"Commit files in index\"     (2)\n$ git add frotz.c                           (3)</pre> </div> </div> <div class=\"colist arabic\"> <ol> <li> <p>This removes the file from the index while keeping it in the working directory.</p> </li> <li> <p>This commits all other changes in the index.</p> </li> <li> <p>Adds the file to the index again.</p> </li> </ol> </div> </dd> <dt class=\"hdlist1\">Keep changes in working tree while discarding some previous commits</dt> <dd>  <p>Suppose you are working on something and you commit it, and then you continue working a bit more, but now you think that what you have in your working tree should be in another branch that has nothing to do with what you committed previously. You can start a new branch and reset it while keeping the changes in your working tree.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git tag start\n$ git checkout -b branch1\n$ edit\n$ git commit ...                            (1)\n$ edit\n$ git checkout -b branch2                   (2)\n$ git reset --keep start                    (3)</pre> </div> </div> <div class=\"colist arabic\"> <ol> <li> <p>This commits your first edits in branch1.</p> </li> <li> <p>In the ideal world, you could have realized that the earlier commit did not belong to the new topic when you created and switched to branch2 (i.e. \"git checkout -b branch2 start\"), but nobody is perfect.</p> </li> <li> <p>But you can use \"reset --keep\" to remove the unwanted commit after you switched to \"branch2\".</p> </li> </ol> </div> </dd> </dl> </div></div>   <h2 id=\"_discussion\">Discussion</h2> <div class=\"sectionbody\"> <p>The tables below show what happens when running:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>git reset --option target</pre> </div> </div>  <p>to reset the HEAD to another commit (<code>target</code>) with the different reset options depending on the state of the files.</p>   <p>In these tables, A, B, C and D are some different states of a file. For example, the first line of the first table means that if a file is in state A in the working tree, in state B in the index, in state C in HEAD and in state D in the target, then \"git reset --soft target\" will leave the file in the working tree in state A and in the index in state B. It resets (i.e. moves) the HEAD (i.e. the tip of the current branch, if you are on one) to \"target\" (which has the file in state D).</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>working index HEAD target         working index HEAD\n----------------------------------------------------\n A       B     C    D     --soft   A       B     D\n          --mixed  A       D     D\n          --hard   D       D     D\n          --merge (disallowed)\n          --keep  (disallowed)</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>working index HEAD target         working index HEAD\n----------------------------------------------------\n A       B     C    C     --soft   A       B     C\n          --mixed  A       C     C\n          --hard   C       C     C\n          --merge (disallowed)\n          --keep   A       C     C</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>working index HEAD target         working index HEAD\n----------------------------------------------------\n B       B     C    D     --soft   B       B     D\n          --mixed  B       D     D\n          --hard   D       D     D\n          --merge  D       D     D\n          --keep  (disallowed)</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>working index HEAD target         working index HEAD\n----------------------------------------------------\n B       B     C    C     --soft   B       B     C\n          --mixed  B       C     C\n          --hard   C       C     C\n          --merge  C       C     C\n          --keep   B       C     C</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>working index HEAD target         working index HEAD\n----------------------------------------------------\n B       C     C    D     --soft   B       C     D\n          --mixed  B       D     D\n          --hard   D       D     D\n          --merge (disallowed)\n          --keep  (disallowed)</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>working index HEAD target         working index HEAD\n----------------------------------------------------\n B       C     C    C     --soft   B       C     C\n          --mixed  B       C     C\n          --hard   C       C     C\n          --merge  B       C     C\n          --keep   B       C     C</pre> </div> </div>  <p>\"reset --merge\" is meant to be used when resetting out of a conflicted merge. Any mergy operation guarantees that the working tree file that is involved in the merge does not have local change wrt the index before it starts, and that it writes the result out to the working tree. So if we see some difference between the index and the target and also between the index and the working tree, then it means that we are not resetting out from a state that a mergy operation left after failing with a conflict. That is why we disallow --merge option in this case.</p>   <p>\"reset --keep\" is meant to be used when removing some of the last commits in the current branch while keeping changes in the working tree. If there could be conflicts between the changes in the commit we want to remove and the changes in the working tree we want to keep, the reset is disallowed. That’s why it is disallowed if there are both changes between the working tree and HEAD, and between HEAD and the target. To be safe, it is also disallowed when there are unmerged entries.</p>   <p>The following tables show what happens when there are unmerged entries:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>working index HEAD target         working index HEAD\n----------------------------------------------------\n X       U     A    B     --soft  (disallowed)\n          --mixed  X       B     B\n          --hard   B       B     B\n          --merge  B       B     B\n          --keep  (disallowed)</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>working index HEAD target         working index HEAD\n----------------------------------------------------\n X       U     A    A     --soft  (disallowed)\n          --mixed  X       A     A\n          --hard   A       A     A\n          --merge  A       A     A\n          --keep  (disallowed)</pre> </div> </div>  <p>X means any state and U means an unmerged index.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-reset\" class=\"_attribution-link\">https://git-scm.com/docs/git-reset</a>\n  </p>\n</div>\n","git-stash":"<h1>git-stash</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-stash - Stash the changes in a dirty working directory away</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git stash list [&lt;options&gt;]\ngit stash show [&lt;stash&gt;]\ngit stash drop [-q|--quiet] [&lt;stash&gt;]\ngit stash ( pop | apply ) [--index] [-q|--quiet] [&lt;stash&gt;]\ngit stash branch &lt;branchname&gt; [&lt;stash&gt;]\ngit stash [save [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet]\n             [-u|--include-untracked] [-a|--all] [&lt;message&gt;]]\ngit stash clear\ngit stash create [&lt;message&gt;]\ngit stash store [-m|--message &lt;message&gt;] [-q|--quiet] &lt;commit&gt;</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Use <code>git stash</code> when you want to record the current state of the working directory and the index, but want to go back to a clean working directory. The command saves your local modifications away and reverts the working directory to match the <code>HEAD</code> commit.</p>   <p>The modifications stashed away by this command can be listed with <code>git stash list</code>, inspected with <code>git stash show</code>, and restored (potentially on top of a different commit) with <code>git stash apply</code>. Calling <code>git stash</code> without any arguments is equivalent to <code>git stash save</code>. A stash is by default listed as \"WIP on <code>branchname</code> …​\", but you can give a more descriptive message on the command line when you create one.</p>   <p>The latest stash you created is stored in <code>refs/stash</code>; older stashes are found in the reflog of this reference and can be named using the usual reflog syntax (e.g. <code>stash@{0}</code> is the most recently created stash, <code>stash@{1}</code> is the one before it, <code>stash@{2.hours.ago}</code> is also possible).</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">save [-p|--patch] [-k|--[no-]keep-index] [-u|--include-untracked] [-a|--all] [-q|--quiet] [&lt;message&gt;]</dt> <dd> <p>Save your local modifications to a new <code>stash</code>, and run <code>git reset\n--hard</code> to revert them. The &lt;message&gt; part is optional and gives the description along with the stashed state. For quickly making a snapshot, you can omit <code>both</code> \"save\" and &lt;message&gt;, but giving only &lt;message&gt; does not trigger this action to prevent a misspelled subcommand from making an unwanted stash.</p>  <p>If the <code>--keep-index</code> option is used, all changes already added to the index are left intact.</p>   <p>If the <code>--include-untracked</code> option is used, all untracked files are also stashed and then cleaned up with <code>git clean</code>, leaving the working directory in a very clean state. If the <code>--all</code> option is used instead then the ignored files are stashed and cleaned in addition to the untracked files.</p>   <p>With <code>--patch</code>, you can interactively select hunks from the diff between HEAD and the working tree to be stashed. The stash entry is constructed such that its index state is the same as the index state of your repository, and its worktree contains only the changes you selected interactively. The selected changes are then rolled back from your worktree. See the “Interactive Mode” section of <a href=\"git-add\">git-add[1]</a> to learn how to operate the <code>--patch</code> mode.</p>   <p>The <code>--patch</code> option implies <code>--keep-index</code>. You can use <code>--no-keep-index</code> to override this.</p>  </dd> <dt class=\"hdlist1\">list [&lt;options&gt;]</dt> <dd> <p>List the stashes that you currently have. Each <code>stash</code> is listed with its name (e.g. <code>stash@{0}</code> is the latest stash, <code>stash@{1}</code> is the one before, etc.), the name of the branch that was current when the stash was made, and a short description of the commit the stash was based on.</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>stash@{0}: WIP on submit: 6ebd0e2... Update git-stash documentation\nstash@{1}: On master: 9cc0589... Add git-stash</pre> </div> </div>  <p>The command takes options applicable to the <code>git log</code> command to control what is shown and how. See <a href=\"git-log\">git-log[1]</a>.</p>  </dd> <dt class=\"hdlist1\">show [&lt;stash&gt;]</dt> <dd> <p>Show the changes recorded in the stash as a diff between the stashed state and its original parent. When no <code>&lt;stash&gt;</code> is given, shows the latest one. By default, the command shows the diffstat, but it will accept any format known to <code>git diff</code> (e.g., <code>git stash show\n-p stash@{1}</code> to view the second most recent stash in patch form). You can use stash.showStat and/or stash.showPatch config variables to change the default behavior.</p> </dd> <dt class=\"hdlist1\">pop [--index] [-q|--quiet] [&lt;stash&gt;]</dt> <dd> <p>Remove a single stashed state from the stash list and apply it on top of the current working tree state, i.e., do the inverse operation of <code>git stash save</code>. The working directory must match the index.</p>  <p>Applying the state can fail with conflicts; in this case, it is not removed from the stash list. You need to resolve the conflicts by hand and call <code>git stash drop</code> manually afterwards.</p>   <p>If the <code>--index</code> option is used, then tries to reinstate not only the working tree’s changes, but also the index’s ones. However, this can fail, when you have conflicts (which are stored in the index, where you therefore can no longer apply the changes as they were originally).</p>   <p>When no <code>&lt;stash&gt;</code> is given, <code>stash@{0}</code> is assumed, otherwise <code>&lt;stash&gt;</code> must be a reference of the form <code>stash@{&lt;revision&gt;}</code>.</p>  </dd> <dt class=\"hdlist1\">apply [--index] [-q|--quiet] [&lt;stash&gt;]</dt> <dd> <p>Like <code>pop</code>, but do not remove the state from the stash list. Unlike <code>pop</code>, <code>&lt;stash&gt;</code> may be any commit that looks like a commit created by <code>stash save</code> or <code>stash create</code>.</p> </dd> <dt class=\"hdlist1\">branch &lt;branchname&gt; [&lt;stash&gt;]</dt> <dd> <p>Creates and checks out a new branch named <code>&lt;branchname&gt;</code> starting from the commit at which the <code>&lt;stash&gt;</code> was originally created, applies the changes recorded in <code>&lt;stash&gt;</code> to the new working tree and index. If that succeeds, and <code>&lt;stash&gt;</code> is a reference of the form <code>stash@{&lt;revision&gt;}</code>, it then drops the <code>&lt;stash&gt;</code>. When no <code>&lt;stash&gt;</code> is given, applies the latest one.</p>  <p>This is useful if the branch on which you ran <code>git stash save</code> has changed enough that <code>git stash apply</code> fails due to conflicts. Since the stash is applied on top of the commit that was HEAD at the time <code>git stash</code> was run, it restores the originally stashed state with no conflicts.</p>  </dd> <dt class=\"hdlist1\">clear</dt> <dd> <p>Remove all the stashed states. Note that those states will then be subject to pruning, and may be impossible to recover (see <code>Examples</code> below for a possible strategy).</p> </dd> <dt class=\"hdlist1\">drop [-q|--quiet] [&lt;stash&gt;]</dt> <dd> <p>Remove a single stashed state from the stash list. When no <code>&lt;stash&gt;</code> is given, it removes the latest one. i.e. <code>stash@{0}</code>, otherwise <code>&lt;stash&gt;</code> must be a valid stash log reference of the form <code>stash@{&lt;revision&gt;}</code>.</p> </dd> <dt class=\"hdlist1\">create</dt> <dd> <p>Create a stash (which is a regular commit object) and return its object name, without storing it anywhere in the ref namespace. This is intended to be useful for scripts. It is probably not the command you want to use; see \"save\" above.</p> </dd> <dt class=\"hdlist1\">store</dt> <dd> <p>Store a given stash created via <code>git stash create</code> (which is a dangling merge commit) in the stash ref, updating the stash reflog. This is intended to be useful for scripts. It is probably not the command you want to use; see \"save\" above.</p> </dd> </dl> </div></div>   <h2 id=\"_discussion\">Discussion</h2> <div class=\"sectionbody\"> <p>A stash is represented as a commit whose tree records the state of the working directory, and its first parent is the commit at <code>HEAD</code> when the stash was created. The tree of the second parent records the state of the index when the stash is made, and it is made a child of the <code>HEAD</code> commit. The ancestry graph looks like this:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>       .----W\n      /    /\n-----H----I</pre> </div> </div>  <p>where <code>H</code> is the <code>HEAD</code> commit, <code>I</code> is a commit that records the state of the index, and <code>W</code> is a commit that records the state of the working tree.</p> </div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">Pulling into a dirty tree</dt> <dd> <p>When you are in the middle of something, you learn that there are upstream changes that are possibly relevant to what you are doing. When your local changes do not conflict with the changes in the upstream, a simple <code>git pull</code> will let you move forward.</p>  <p>However, there are cases in which your local changes do conflict with the upstream changes, and <code>git pull</code> refuses to overwrite your changes. In such a case, you can stash your changes away, perform a pull, and then unstash, like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git pull\n ...\nfile foobar not up to date, cannot merge.\n$ git stash\n$ git pull\n$ git stash pop</pre> </div> </div> </dd> <dt class=\"hdlist1\">Interrupted workflow</dt> <dd> <p>When you are in the middle of something, your boss comes in and demands that you fix something immediately. Traditionally, you would make a commit to a temporary branch to store your changes away, and return to your original branch to make the emergency fix, like this:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre># ... hack hack hack ...\n$ git checkout -b my_wip\n$ git commit -a -m \"WIP\"\n$ git checkout master\n$ edit emergency fix\n$ git commit -a -m \"Fix in a hurry\"\n$ git checkout my_wip\n$ git reset --soft HEAD^\n# ... continue hacking ...</pre> </div> </div>  <p>You can use <code>git stash</code> to simplify the above, like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre># ... hack hack hack ...\n$ git stash\n$ edit emergency fix\n$ git commit -a -m \"Fix in a hurry\"\n$ git stash pop\n# ... continue hacking ...</pre> </div> </div> </dd> <dt class=\"hdlist1\">Testing partial commits</dt> <dd> <p>You can use <code>git stash save --keep-index</code> when you want to make two or more commits out of the changes in the work tree, and you want to test each change before committing:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre># ... hack hack hack ...\n$ git add --patch foo            # add just first part to the index\n$ git stash save --keep-index    # save all other changes to the stash\n$ edit/build/test first part\n$ git commit -m 'First part'     # commit fully tested change\n$ git stash pop                  # prepare to work on all other changes\n# ... repeat above five steps until one commit remains ...\n$ edit/build/test remaining parts\n$ git commit foo -m 'Remaining parts'</pre> </div> </div> </dd> <dt class=\"hdlist1\">Recovering stashes that were cleared/dropped erroneously</dt> <dd> <p>If you mistakenly drop or clear stashes, they cannot be recovered through the normal safety mechanisms. However, you can try the following incantation to get a list of stashes that are still in your repository, but not reachable any more:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>git fsck --unreachable |\ngrep commit | cut -d\\  -f3 |\nxargs git log --merges --no-walk --grep=WIP</pre> </div> </div> </dd> </dl> </div></div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-checkout\">git-checkout[1]</a>, <a href=\"git-commit\">git-commit[1]</a>, <a href=\"git-reflog\">git-reflog[1]</a>, <a href=\"git-reset\">git-reset[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-stash\" class=\"_attribution-link\">https://git-scm.com/docs/git-stash</a>\n  </p>\n</div>\n","git-clone":"<h1>git-clone</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-clone - Clone a repository into a new directory</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git clone [--template=&lt;template_directory&gt;]\n          [-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]\n          [-o &lt;name&gt;] [-b &lt;name&gt;] [-u &lt;upload-pack&gt;] [--reference &lt;repository&gt;]\n          [--dissociate] [--separate-git-dir &lt;git dir&gt;]\n          [--depth &lt;depth&gt;] [--[no-]single-branch]\n          [--recursive | --recurse-submodules] [--[no-]shallow-submodules]\n          [--jobs &lt;n&gt;] [--] &lt;repository&gt; [&lt;directory&gt;]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Clones a repository into a newly created directory, creates remote-tracking branches for each branch in the cloned repository (visible using <code>git branch -r</code>), and creates and checks out an initial branch that is forked from the cloned repository’s currently active branch.</p>   <p>After the clone, a plain <code>git fetch</code> without arguments will update all the remote-tracking branches, and a <code>git pull</code> without arguments will in addition merge the remote master branch into the current master branch, if any (this is untrue when \"--single-branch\" is given; see below).</p>   <p>This default configuration is achieved by creating references to the remote branch heads under <code>refs/remotes/origin</code> and by initializing <code>remote.origin.url</code> and <code>remote.origin.fetch</code> configuration variables.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--local</dt> <dt class=\"hdlist1\">-l</dt> <dd> <p>When the repository to clone from is on a local machine, this flag bypasses the normal \"Git aware\" transport mechanism and clones the repository by making a copy of HEAD and everything under objects and refs directories. The files under <code>.git/objects/</code> directory are hardlinked to save space when possible.</p>  <p>If the repository is specified as a local path (e.g., <code>/path/to/repo</code>), this is the default, and --local is essentially a no-op. If the repository is specified as a URL, then this flag is ignored (and we never use the local optimizations). Specifying <code>--no-local</code> will override the default when <code>/path/to/repo</code> is given, using the regular Git transport instead.</p>  </dd> <dt class=\"hdlist1\">--no-hardlinks</dt> <dd> <p>Force the cloning process from a repository on a local filesystem to copy the files under the <code>.git/objects</code> directory instead of using hardlinks. This may be desirable if you are trying to make a back-up of your repository.</p> </dd> <dt class=\"hdlist1\">--shared</dt> <dt class=\"hdlist1\">-s</dt> <dd> <p>When the repository to clone is on the local machine, instead of using hard links, automatically setup <code>.git/objects/info/alternates</code> to share the objects with the source repository. The resulting repository starts out without any object of its own.</p>  <p><strong>NOTE</strong>: this is a possibly dangerous operation; do <strong>not</strong> use it unless you understand what it does. If you clone your repository using this option and then delete branches (or use any other Git command that makes any existing commit unreferenced) in the source repository, some objects may become unreferenced (or dangling). These objects may be removed by normal Git operations (such as <code>git commit</code>) which automatically call <code>git gc --auto</code>. (See <a href=\"git-gc\">git-gc[1]</a>.) If these objects are removed and were referenced by the cloned repository, then the cloned repository will become corrupt.</p>   <p>Note that running <code>git repack</code> without the <code>-l</code> option in a repository cloned with <code>-s</code> will copy objects from the source repository into a pack in the cloned repository, removing the disk space savings of <code>clone -s</code>. It is safe, however, to run <code>git gc</code>, which uses the <code>-l</code> option by default.</p>   <p>If you want to break the dependency of a repository cloned with <code>-s</code> on its source repository, you can simply run <code>git repack -a</code> to copy all objects from the source repository into a pack in the cloned repository.</p>  </dd> <dt class=\"hdlist1\">--reference &lt;repository&gt;</dt> <dd> <p>If the reference repository is on the local machine, automatically setup <code>.git/objects/info/alternates</code> to obtain objects from the reference repository. Using an already existing repository as an alternate will require fewer objects to be copied from the repository being cloned, reducing network and local storage costs.</p>  <p><strong>NOTE</strong>: see the NOTE for the <code>--shared</code> option, and also the <code>--dissociate</code> option.</p>  </dd> <dt class=\"hdlist1\">--dissociate</dt> <dd> <p>Borrow the objects from reference repositories specified with the <code>--reference</code> options only to reduce network transfer, and stop borrowing from them after a clone is made by making necessary local copies of borrowed objects. This option can also be used when cloning locally from a repository that already borrows objects from another repository—​the new repository will borrow objects from the same repository, and this option can be used to stop the borrowing.</p> </dd> <dt class=\"hdlist1\">--quiet</dt> <dt class=\"hdlist1\">-q</dt> <dd> <p>Operate quietly. Progress is not reported to the standard error stream.</p> </dd> <dt class=\"hdlist1\">--verbose</dt> <dt class=\"hdlist1\">-v</dt> <dd> <p>Run verbosely. Does not affect the reporting of progress status to the standard error stream.</p> </dd> <dt class=\"hdlist1\">--progress</dt> <dd> <p>Progress status is reported on the standard error stream by default when it is attached to a terminal, unless -q is specified. This flag forces progress status even if the standard error stream is not directed to a terminal.</p> </dd> <dt class=\"hdlist1\">--no-checkout</dt> <dt class=\"hdlist1\">-n</dt> <dd> <p>No checkout of HEAD is performed after the clone is complete.</p> </dd> <dt class=\"hdlist1\">--bare</dt> <dd> <p>Make a <code>bare</code> Git repository. That is, instead of creating <code>&lt;directory&gt;</code> and placing the administrative files in <code>&lt;directory&gt;/.git</code>, make the <code>&lt;directory&gt;</code> itself the <code>$GIT_DIR</code>. This obviously implies the <code>-n</code> because there is nowhere to check out the working tree. Also the branch heads at the remote are copied directly to corresponding local branch heads, without mapping them to <code>refs/remotes/origin/</code>. When this option is used, neither remote-tracking branches nor the related configuration variables are created.</p> </dd> <dt class=\"hdlist1\">--mirror</dt> <dd> <p>Set up a mirror of the source repository. This implies <code>--bare</code>. Compared to <code>--bare</code>, <code>--mirror</code> not only maps local branches of the source to local branches of the target, it maps all refs (including remote-tracking branches, notes etc.) and sets up a refspec configuration such that all these refs are overwritten by a <code>git remote update</code> in the target repository.</p> </dd> <dt class=\"hdlist1\">--origin &lt;name&gt;</dt> <dt class=\"hdlist1\">-o &lt;name&gt;</dt> <dd> <p>Instead of using the remote name <code>origin</code> to keep track of the upstream repository, use <code>&lt;name&gt;</code>.</p> </dd> <dt class=\"hdlist1\">--branch &lt;name&gt;</dt> <dt class=\"hdlist1\">-b &lt;name&gt;</dt> <dd> <p>Instead of pointing the newly created HEAD to the branch pointed to by the cloned repository’s HEAD, point to <code>&lt;name&gt;</code> branch instead. In a non-bare repository, this is the branch that will be checked out. <code>--branch</code> can also take tags and detaches the HEAD at that commit in the resulting repository.</p> </dd> <dt class=\"hdlist1\">--upload-pack &lt;upload-pack&gt;</dt> <dt class=\"hdlist1\">-u &lt;upload-pack&gt;</dt> <dd> <p>When given, and the repository to clone from is accessed via ssh, this specifies a non-default path for the command run on the other end.</p> </dd> <dt class=\"hdlist1\">--template=&lt;template_directory&gt;</dt> <dd> <p>Specify the directory from which templates will be used; (See the \"TEMPLATE DIRECTORY\" section of <a href=\"git-init\">git-init[1]</a>.)</p> </dd> <dt class=\"hdlist1\">--config &lt;key&gt;=&lt;value&gt;</dt> <dt class=\"hdlist1\">-c &lt;key&gt;=&lt;value&gt;</dt> <dd> <p>Set a configuration variable in the newly-created repository; this takes effect immediately after the repository is initialized, but before the remote history is fetched or any files checked out. The key is in the same format as expected by <a href=\"git-config\">git-config[1]</a> (e.g., <code>core.eol=true</code>). If multiple values are given for the same key, each value will be written to the config file. This makes it safe, for example, to add additional fetch refspecs to the origin remote.</p> </dd> <dt class=\"hdlist1\">--depth &lt;depth&gt;</dt> <dd> <p>Create a <code>shallow</code> clone with a history truncated to the specified number of commits. Implies <code>--single-branch</code> unless <code>--no-single-branch</code> is given to fetch the histories near the tips of all branches. If you want to clone submodules shallowly, also pass <code>--shallow-submodules</code>.</p> </dd> <dt class=\"hdlist1\">--[no-]single-branch</dt> <dd> <p>Clone only the history leading to the tip of a single branch, either specified by the <code>--branch</code> option or the primary branch remote’s <code>HEAD</code> points at. Further fetches into the resulting repository will only update the remote-tracking branch for the branch this option was used for the initial cloning. If the HEAD at the remote did not point at any branch when <code>--single-branch</code> clone was made, no remote-tracking branch is created.</p> </dd> <dt class=\"hdlist1\">--recursive</dt> <dt class=\"hdlist1\">--recurse-submodules</dt> <dd> <p>After the clone is created, initialize all submodules within, using their default settings. This is equivalent to running <code>git submodule update --init --recursive</code> immediately after the clone is finished. This option is ignored if the cloned repository does not have a worktree/checkout (i.e. if any of <code>--no-checkout</code>/<code>-n</code>, <code>--bare</code>, or <code>--mirror</code> is given)</p> </dd> <dt class=\"hdlist1\">--[no-]shallow-submodules</dt> <dd> <p>All submodules which are cloned will be shallow with a depth of 1.</p> </dd> <dt class=\"hdlist1\">--separate-git-dir=&lt;git dir&gt;</dt> <dd> <p>Instead of placing the cloned repository where it is supposed to be, place the cloned repository at the specified directory, then make a filesystem-agnostic Git symbolic link to there. The result is Git repository can be separated from working tree.</p> </dd> <dt class=\"hdlist1\">-j &lt;n&gt;</dt> <dt class=\"hdlist1\">--jobs &lt;n&gt;</dt> <dd> <p>The number of submodules fetched at the same time. Defaults to the <code>submodule.fetchJobs</code> option.</p> </dd> <dt class=\"hdlist1\">&lt;repository&gt;</dt> <dd> <p>The (possibly remote) repository to clone from. See the <a href=\"#URLS\">URLS</a> section below for more information on specifying repositories.</p> </dd> <dt class=\"hdlist1\">&lt;directory&gt;</dt> <dd> <p>The name of a new directory to clone into. The \"humanish\" part of the source repository is used if no directory is explicitly given (<code>repo</code> for <code>/path/to/repo.git</code> and <code>foo</code> for <code>host.xz:foo/.git</code>). Cloning into an existing directory is only allowed if the directory is empty.</p> </dd> </dl> </div></div>   <h2 id=\"_git_urls_a_id_urls_a\">Git urls</h2> <div class=\"sectionbody\"> <p>In general, URLs contain information about the transport protocol, the address of the remote server, and the path to the repository. Depending on the transport protocol, some of this information may be absent.</p>   <p>Git supports ssh, git, http, and https protocols (in addition, ftp, and ftps can be used for fetching, but this is inefficient and deprecated; do not use it).</p>   <p>The native transport (i.e. git:// URL) does no authentication and should be used with caution on unsecured networks.</p>   <p>The following syntaxes may be used with them:</p>  <div class=\"ulist\"> <ul> <li> <p>ssh://[user@]host.xz[:port]/path/to/repo.git/</p> </li> <li> <p>git://host.xz[:port]/path/to/repo.git/</p> </li> <li> <p>http[s]://host.xz[:port]/path/to/repo.git/</p> </li> <li> <p>ftp[s]://host.xz[:port]/path/to/repo.git/</p> </li> </ul> </div>  <p>An alternative scp-like syntax may also be used with the ssh protocol:</p>  <div class=\"ulist\"> <ul> <li> <p>[user@]host.xz:path/to/repo.git/</p> </li> </ul> </div>  <p>This syntax is only recognized if there are no slashes before the first colon. This helps differentiate a local path that contains a colon. For example the local path <code>foo:bar</code> could be specified as an absolute path or <code>./foo:bar</code> to avoid being misinterpreted as an ssh url.</p>   <p>The ssh and git protocols additionally support ~username expansion:</p>  <div class=\"ulist\"> <ul> <li> <p>ssh://[user@]host.xz[:port]/~[user]/path/to/repo.git/</p> </li> <li> <p>git://host.xz[:port]/~[user]/path/to/repo.git/</p> </li> <li> <p>[user@]host.xz:/~[user]/path/to/repo.git/</p> </li> </ul> </div>  <p>For local repositories, also supported by Git natively, the following syntaxes may be used:</p>  <div class=\"ulist\"> <ul> <li> <p>/path/to/repo.git/</p> </li> <li> <p>file:///path/to/repo.git/</p> </li> </ul> </div>  <p>These two syntaxes are mostly equivalent, except the former implies --local option.</p>   <p>When Git doesn’t know how to handle a certain transport protocol, it attempts to use the <code>remote-&lt;transport&gt;</code> remote helper, if one exists. To explicitly request a remote helper, the following syntax may be used:</p>  <div class=\"ulist\"> <ul> <li> <p>&lt;transport&gt;::&lt;address&gt;</p> </li> </ul> </div>  <p>where &lt;address&gt; may be a path, a server and path, or an arbitrary URL-like string recognized by the specific remote helper being invoked. See <a href=\"gitremote-helpers\">gitremote-helpers[1]</a> for details.</p>   <p>If there are a large number of similarly-named remote repositories and you want to use a different format for them (such that the URLs you use will be rewritten into URLs that work), you can create a configuration section of the form:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        [url \"&lt;actual url base&gt;\"]\n                insteadOf = &lt;other url base&gt;</pre> </div> </div>  <p>For example, with this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        [url \"git://git.host.xz/\"]\n                insteadOf = host.xz:/path/to/\n                insteadOf = work:</pre> </div> </div>  <p>a URL like \"work:repo.git\" or like \"host.xz:/path/to/repo.git\" will be rewritten in any context that takes a URL to be \"git://git.host.xz/repo.git\".</p>   <p>If you want to rewrite URLs for push only, you can create a configuration section of the form:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        [url \"&lt;actual url base&gt;\"]\n                pushInsteadOf = &lt;other url base&gt;</pre> </div> </div>  <p>For example, with this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        [url \"ssh://example.org/\"]\n                pushInsteadOf = git://example.org/</pre> </div> </div>  <p>a URL like \"git://example.org/path/to/repo.git\" will be rewritten to \"ssh://example.org/path/to/repo.git\" for pushes, but pulls will still use the original URL.</p> </div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"><div class=\"ulist\"> <ul> <li> <p>Clone from upstream:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git clone git://git.kernel.org/pub/scm/.../linux.git my-linux\n$ cd my-linux\n$ make</pre> </div> </div> </li> <li> <p>Make a local clone that borrows from the current directory, without checking things out:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git clone -l -s -n . ../copy\n$ cd ../copy\n$ git show-branch</pre> </div> </div> </li> <li> <p>Clone from upstream while borrowing from an existing local directory:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git clone --reference /git/linux.git \\\n        git://git.kernel.org/pub/scm/.../linux.git \\\n        my-linux\n$ cd my-linux</pre> </div> </div> </li> <li> <p>Create a bare repository to publish your changes to the public:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git clone --bare -l /home/proj/.git /pub/scm/proj.git</pre> </div> </div> </li> </ul> </div></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-clone\" class=\"_attribution-link\">https://git-scm.com/docs/git-clone</a>\n  </p>\n</div>\n","git-mv":"<h1>git-mv</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-mv - Move or rename a file, a directory, or a symlink</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git mv &lt;options&gt;…​ &lt;args&gt;…​</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Move or rename a file, directory or symlink.</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>git mv [-v] [-f] [-n] [-k] &lt;source&gt; &lt;destination&gt;\ngit mv [-v] [-f] [-n] [-k] &lt;source&gt; ... &lt;destination directory&gt;</pre> </div> </div>  <p>In the first form, it renames &lt;source&gt;, which must exist and be either a file, symlink or directory, to &lt;destination&gt;. In the second form, the last argument has to be an existing directory; the given sources will be moved into this directory.</p>   <p>The index is updated after successful completion, but the change must still be committed.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-f</dt> <dt class=\"hdlist1\">--force</dt> <dd> <p>Force renaming or moving of a file even if the target exists</p> </dd> <dt class=\"hdlist1\">-k</dt> <dd> <p> Skip move or rename actions which would lead to an error condition. An error happens when a source is neither existing nor controlled by Git, or when it would overwrite an existing file unless <code>-f</code> is given.</p> </dd> <dt class=\"hdlist1\">-n</dt> <dt class=\"hdlist1\">--dry-run</dt> <dd> <p>Do nothing; only show what would happen</p> </dd> <dt class=\"hdlist1\">-v</dt> <dt class=\"hdlist1\">--verbose</dt> <dd> <p>Report the names of files as they are moved.</p> </dd> </dl> </div></div>   <h2 id=\"_submodules\">Submodules</h2> <div class=\"sectionbody\"> <p>Moving a submodule using a gitfile (which means they were cloned with a Git version 1.7.8 or newer) will update the gitfile and core.worktree setting to make the submodule work in the new location. It also will attempt to update the submodule.&lt;name&gt;.path setting in the <a href=\"gitmodules\">gitmodules[5]</a> file and stage that file (unless -n is used).</p> </div>   <h2 id=\"_bugs\">Bugs</h2> <div class=\"sectionbody\"> <p>Each time a superproject update moves a populated submodule (e.g. when switching between commits before and after the move) a stale submodule checkout will remain in the old location and an empty directory will appear in the new location. To populate the submodule again in the new location the user will have to run \"git submodule update\" afterwards. Removing the old directory is only safe when it uses a gitfile, as otherwise the history of the submodule will be deleted too. Both steps will be obsolete when recursive submodule update has been implemented.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-mv\" class=\"_attribution-link\">https://git-scm.com/docs/git-mv</a>\n  </p>\n</div>\n","git-branch":"<h1>git-branch</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-branch - List, create, or delete branches</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git branch [--color[=&lt;when&gt;] | --no-color] [-r | -a]\n        [--list] [-v [--abbrev=&lt;length&gt; | --no-abbrev]]\n        [--column[=&lt;options&gt;] | --no-column]\n        [(--merged | --no-merged | --contains) [&lt;commit&gt;]] [--sort=&lt;key&gt;]\n        [--points-at &lt;object&gt;] [&lt;pattern&gt;…​]\ngit branch [--set-upstream | --track | --no-track] [-l] [-f] &lt;branchname&gt; [&lt;start-point&gt;]\ngit branch (--set-upstream-to=&lt;upstream&gt; | -u &lt;upstream&gt;) [&lt;branchname&gt;]\ngit branch --unset-upstream [&lt;branchname&gt;]\ngit branch (-m | -M) [&lt;oldbranch&gt;] &lt;newbranch&gt;\ngit branch (-d | -D) [-r] &lt;branchname&gt;…​\ngit branch --edit-description [&lt;branchname&gt;]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>If <code>--list</code> is given, or if there are no non-option arguments, existing branches are listed; the current branch will be highlighted with an asterisk. Option <code>-r</code> causes the remote-tracking branches to be listed, and option <code>-a</code> shows both local and remote branches. If a <code>&lt;pattern&gt;</code> is given, it is used as a shell wildcard to restrict the output to matching branches. If multiple patterns are given, a branch is shown if it matches any of the patterns. Note that when providing a <code>&lt;pattern&gt;</code>, you must use <code>--list</code>; otherwise the command is interpreted as branch creation.</p>   <p>With <code>--contains</code>, shows only the branches that contain the named commit (in other words, the branches whose tip commits are descendants of the named commit). With <code>--merged</code>, only branches merged into the named commit (i.e. the branches whose tip commits are reachable from the named commit) will be listed. With <code>--no-merged</code> only branches not merged into the named commit will be listed. If the &lt;commit&gt; argument is missing it defaults to <code>HEAD</code> (i.e. the tip of the current branch).</p>   <p>The command’s second form creates a new branch head named &lt;branchname&gt; which points to the current <code>HEAD</code>, or &lt;start-point&gt; if given.</p>   <p>Note that this will create the new branch, but it will not switch the working tree to it; use \"git checkout &lt;newbranch&gt;\" to switch to the new branch.</p>   <p>When a local branch is started off a remote-tracking branch, Git sets up the branch (specifically the <code>branch.&lt;name&gt;.remote</code> and <code>branch.&lt;name&gt;.merge</code> configuration entries) so that <code>git pull</code> will appropriately merge from the remote-tracking branch. This behavior may be changed via the global <code>branch.autoSetupMerge</code> configuration flag. That setting can be overridden by using the <code>--track</code> and <code>--no-track</code> options, and changed later using <code>git branch --set-upstream-to</code>.</p>   <p>With a <code>-m</code> or <code>-M</code> option, &lt;oldbranch&gt; will be renamed to &lt;newbranch&gt;. If &lt;oldbranch&gt; had a corresponding reflog, it is renamed to match &lt;newbranch&gt;, and a reflog entry is created to remember the branch renaming. If &lt;newbranch&gt; exists, -M must be used to force the rename to happen.</p>   <p>With a <code>-d</code> or <code>-D</code> option, <code>&lt;branchname&gt;</code> will be deleted. You may specify more than one branch for deletion. If the branch currently has a reflog then the reflog will also be deleted.</p>   <p>Use <code>-r</code> together with <code>-d</code> to delete remote-tracking branches. Note, that it only makes sense to delete remote-tracking branches if they no longer exist in the remote repository or if <code>git fetch</code> was configured not to fetch them again. See also the <code>prune</code> subcommand of <a href=\"git-remote\">git-remote[1]</a> for a way to clean up all obsolete remote-tracking branches.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-d</dt> <dt class=\"hdlist1\">--delete</dt> <dd> <p>Delete a branch. The branch must be fully merged in its upstream branch, or in <code>HEAD</code> if no upstream was set with <code>--track</code> or <code>--set-upstream</code>.</p> </dd> <dt class=\"hdlist1\">-D</dt> <dd> <p>Shortcut for <code>--delete --force</code>.</p> </dd> <dt class=\"hdlist1\">-l</dt> <dt class=\"hdlist1\">--create-reflog</dt> <dd> <p>Create the branch’s reflog. This activates recording of all changes made to the branch ref, enabling use of date based sha1 expressions such as \"&lt;branchname&gt;@{yesterday}\". Note that in non-bare repositories, reflogs are usually enabled by default by the <code>core.logallrefupdates</code> config option.</p> </dd> <dt class=\"hdlist1\">-f</dt> <dt class=\"hdlist1\">--force</dt> <dd> <p>Reset &lt;branchname&gt; to &lt;startpoint&gt; if &lt;branchname&gt; exists already. Without <code>-f</code> <code>git branch</code> refuses to change an existing branch. In combination with <code>-d</code> (or <code>--delete</code>), allow deleting the branch irrespective of its merged status. In combination with <code>-m</code> (or <code>--move</code>), allow renaming the branch even if the new branch name already exists.</p> </dd> <dt class=\"hdlist1\">-m</dt> <dt class=\"hdlist1\">--move</dt> <dd> <p>Move/rename a branch and the corresponding reflog.</p> </dd> <dt class=\"hdlist1\">-M</dt> <dd> <p>Shortcut for <code>--move --force</code>.</p> </dd> <dt class=\"hdlist1\">--color[=&lt;when&gt;]</dt> <dd> <p>Color branches to highlight current, local, and remote-tracking branches. The value must be always (the default), never, or auto.</p> </dd> <dt class=\"hdlist1\">--no-color</dt> <dd> <p>Turn off branch colors, even when the configuration file gives the default to color output. Same as <code>--color=never</code>.</p> </dd> <dt class=\"hdlist1\">--column[=&lt;options&gt;]</dt> <dt class=\"hdlist1\">--no-column</dt> <dd> <p>Display branch listing in columns. See configuration variable column.branch for option syntax.<code>--column</code> and <code>--no-column</code> without options are equivalent to <code>always</code> and <code>never</code> respectively.</p>  <p>This option is only applicable in non-verbose mode.</p>  </dd> <dt class=\"hdlist1\">-r</dt> <dt class=\"hdlist1\">--remotes</dt> <dd> <p>List or delete (if used with -d) the remote-tracking branches.</p> </dd> <dt class=\"hdlist1\">-a</dt> <dt class=\"hdlist1\">--all</dt> <dd> <p>List both remote-tracking branches and local branches.</p> </dd> <dt class=\"hdlist1\">--list</dt> <dd> <p>Activate the list mode. <code>git branch &lt;pattern&gt;</code> would try to create a branch, use <code>git branch --list &lt;pattern&gt;</code> to list matching branches.</p> </dd> <dt class=\"hdlist1\">-v</dt> <dt class=\"hdlist1\">-vv</dt> <dt class=\"hdlist1\">--verbose</dt> <dd> <p>When in list mode, show sha1 and commit subject line for each head, along with relationship to upstream branch (if any). If given twice, print the name of the upstream branch, as well (see also <code>git remote\nshow &lt;remote&gt;</code>).</p> </dd> <dt class=\"hdlist1\">-q</dt> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>Be more quiet when creating or deleting a branch, suppressing non-error messages.</p> </dd> <dt class=\"hdlist1\">--abbrev=&lt;length&gt;</dt> <dd> <p>Alter the sha1’s minimum display length in the output listing. The default value is 7 and can be overridden by the <code>core.abbrev</code> config option.</p> </dd> <dt class=\"hdlist1\">--no-abbrev</dt> <dd> <p>Display the full sha1s in the output listing rather than abbreviating them.</p> </dd> <dt class=\"hdlist1\">-t</dt> <dt class=\"hdlist1\">--track</dt> <dd> <p>When creating a new branch, set up <code>branch.&lt;name&gt;.remote</code> and <code>branch.&lt;name&gt;.merge</code> configuration entries to mark the start-point branch as \"upstream\" from the new branch. This configuration will tell git to show the relationship between the two branches in <code>git status</code> and <code>git branch -v</code>. Furthermore, it directs <code>git pull</code> without arguments to pull from the upstream when the new branch is checked out.</p>  <p>This behavior is the default when the start point is a remote-tracking branch. Set the branch.autoSetupMerge configuration variable to <code>false</code> if you want <code>git checkout</code> and <code>git branch</code> to always behave as if <code>--no-track</code> were given. Set it to <code>always</code> if you want this behavior when the start-point is either a local or remote-tracking branch.</p>  </dd> <dt class=\"hdlist1\">--no-track</dt> <dd> <p>Do not set up \"upstream\" configuration, even if the branch.autoSetupMerge configuration variable is true.</p> </dd> <dt class=\"hdlist1\">--set-upstream</dt> <dd> <p>If specified branch does not exist yet or if <code>--force</code> has been given, acts exactly like <code>--track</code>. Otherwise sets up configuration like <code>--track</code> would when creating the branch, except that where branch points to is not changed.</p> </dd> <dt class=\"hdlist1\">-u &lt;upstream&gt;</dt> <dt class=\"hdlist1\">--set-upstream-to=&lt;upstream&gt;</dt> <dd> <p>Set up &lt;branchname&gt;'s tracking information so &lt;upstream&gt; is considered &lt;branchname&gt;'s upstream branch. If no &lt;branchname&gt; is specified, then it defaults to the current branch.</p> </dd> <dt class=\"hdlist1\">--unset-upstream</dt> <dd> <p>Remove the upstream information for &lt;branchname&gt;. If no branch is specified it defaults to the current branch.</p> </dd> <dt class=\"hdlist1\">--edit-description</dt> <dd> <p>Open an editor and edit the text to explain what the branch is for, to be used by various other commands (e.g. <code>format-patch</code>, <code>request-pull</code>, and <code>merge</code> (if enabled)). Multi-line explanations may be used.</p> </dd> <dt class=\"hdlist1\">--contains [&lt;commit&gt;]</dt> <dd> <p>Only list branches which contain the specified commit (HEAD if not specified). Implies <code>--list</code>.</p> </dd> <dt class=\"hdlist1\">--merged [&lt;commit&gt;]</dt> <dd> <p>Only list branches whose tips are reachable from the specified commit (HEAD if not specified). Implies <code>--list</code>.</p> </dd> <dt class=\"hdlist1\">--no-merged [&lt;commit&gt;]</dt> <dd> <p>Only list branches whose tips are not reachable from the specified commit (HEAD if not specified). Implies <code>--list</code>.</p> </dd> <dt class=\"hdlist1\">&lt;branchname&gt;</dt> <dd> <p>The name of the branch to create or delete. The new branch name must pass all checks defined by <a href=\"git-check-ref-format\">git-check-ref-format[1]</a>. Some of these checks may restrict the characters allowed in a branch name.</p> </dd> <dt class=\"hdlist1\">&lt;start-point&gt;</dt> <dd> <p>The new branch head will point to this commit. It may be given as a branch name, a commit-id, or a tag. If this option is omitted, the current HEAD will be used instead.</p> </dd> <dt class=\"hdlist1\">&lt;oldbranch&gt;</dt> <dd> <p>The name of an existing branch to rename.</p> </dd> <dt class=\"hdlist1\">&lt;newbranch&gt;</dt> <dd> <p>The new name for an existing branch. The same restrictions as for &lt;branchname&gt; apply.</p> </dd> <dt class=\"hdlist1\">--sort=&lt;key&gt;</dt> <dd> <p>Sort based on the key given. Prefix <code>-</code> to sort in descending order of the value. You may use the --sort=&lt;key&gt; option multiple times, in which case the last key becomes the primary key. The keys supported are the same as those in <code>git\nfor-each-ref</code>. Sort order defaults to sorting based on the full refname (including <code>refs/...</code> prefix). This lists detached HEAD (if present) first, then local branches and finally remote-tracking branches.</p> </dd> <dt class=\"hdlist1\">--points-at &lt;object&gt;</dt> <dd> <p>Only list branches of the given object.</p> </dd> </dl> </div></div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">Start development from a known tag</dt> <dd> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git clone git://git.kernel.org/pub/scm/.../linux-2.6 my2.6\n$ cd my2.6\n$ git branch my2.6.14 v2.6.14   (1)\n$ git checkout my2.6.14</pre> </div> </div> <div class=\"colist arabic\"> <ol> <li> <p>This step and the next one could be combined into a single step with \"checkout -b my2.6.14 v2.6.14\".</p> </li> </ol> </div> </dd> <dt class=\"hdlist1\">Delete an unneeded branch</dt> <dd> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git clone git://git.kernel.org/.../git.git my.git\n$ cd my.git\n$ git branch -d -r origin/todo origin/html origin/man   (1)\n$ git branch -D test                                    (2)</pre> </div> </div> <div class=\"colist arabic\"> <ol> <li> <p>Delete the remote-tracking branches \"todo\", \"html\" and \"man\". The next <code>fetch</code> or <code>pull</code> will create them again unless you configure them not to. See <a href=\"git-fetch\">git-fetch[1]</a>.</p> </li> <li> <p>Delete the \"test\" branch even if the \"master\" branch (or whichever branch is currently checked out) does not have all commits from the test branch.</p> </li> </ol> </div> </dd> </dl> </div></div>   <h2 id=\"_notes\">Notes</h2> <div class=\"sectionbody\"> <p>If you are creating a branch that you want to checkout immediately, it is easier to use the git checkout command with its <code>-b</code> option to create a branch and check it out with a single command.</p>   <p>The options <code>--contains</code>, <code>--merged</code> and <code>--no-merged</code> serve three related but different purposes:</p>  <div class=\"ulist\"> <ul> <li> <p><code>--contains &lt;commit&gt;</code> is used to find all branches which will need special attention if &lt;commit&gt; were to be rebased or amended, since those branches contain the specified &lt;commit&gt;.</p> </li> <li> <p><code>--merged</code> is used to find all branches which can be safely deleted, since those branches are fully contained by HEAD.</p> </li> <li> <p><code>--no-merged</code> is used to find branches which are candidates for merging into HEAD, since those branches are not fully contained by HEAD.</p> </li> </ul> </div>\n</div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-check-ref-format\">git-check-ref-format[1]</a>, <a href=\"git-fetch\">git-fetch[1]</a>, <a href=\"git-remote\">git-remote[1]</a>, <a href=\"user-manual#what-is-a-branch\">“Understanding history: What is a branch?”</a> in the Git User’s Manual.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-branch\" class=\"_attribution-link\">https://git-scm.com/docs/git-branch</a>\n  </p>\n</div>\n","git-mergetool":"<h1>git-mergetool</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-mergetool - Run merge conflict resolution tools to resolve merge conflicts</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git mergetool [--tool=&lt;tool&gt;] [-y | --[no-]prompt] [&lt;file&gt;…​]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Use <code>git mergetool</code> to run one of several merge utilities to resolve merge conflicts. It is typically run after <code>git merge</code>.</p>   <p>If one or more &lt;file&gt; parameters are given, the merge tool program will be run to resolve differences on each file (skipping those without conflicts). Specifying a directory will include all unresolved files in that path. If no &lt;file&gt; names are specified, <code>git mergetool</code> will run the merge tool program on every file with merge conflicts.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-t &lt;tool&gt;</dt> <dt class=\"hdlist1\">--tool=&lt;tool&gt;</dt> <dd> <p>Use the merge resolution program specified by &lt;tool&gt;. Valid values include emerge, gvimdiff, kdiff3, meld, vimdiff, and tortoisemerge. Run <code>git mergetool --tool-help</code> for the list of valid &lt;tool&gt; settings.</p>  <p>If a merge resolution program is not specified, <code>git mergetool</code> will use the configuration variable <code>merge.tool</code>. If the configuration variable <code>merge.tool</code> is not set, <code>git mergetool</code> will pick a suitable default.</p>   <p>You can explicitly provide a full path to the tool by setting the configuration variable <code>mergetool.&lt;tool&gt;.path</code>. For example, you can configure the absolute path to kdiff3 by setting <code>mergetool.kdiff3.path</code>. Otherwise, <code>git mergetool</code> assumes the tool is available in PATH.</p>   <p>Instead of running one of the known merge tool programs, <code>git mergetool</code> can be customized to run an alternative program by specifying the command line to invoke in a configuration variable <code>mergetool.&lt;tool&gt;.cmd</code>.</p>   <p>When <code>git mergetool</code> is invoked with this tool (either through the <code>-t</code> or <code>--tool</code> option or the <code>merge.tool</code> configuration variable) the configured command line will be invoked with <code>$BASE</code> set to the name of a temporary file containing the common base for the merge, if available; <code>$LOCAL</code> set to the name of a temporary file containing the contents of the file on the current branch; <code>$REMOTE</code> set to the name of a temporary file containing the contents of the file to be merged, and <code>$MERGED</code> set to the name of the file to which the merge tool should write the result of the merge resolution.</p>   <p>If the custom merge tool correctly indicates the success of a merge resolution with its exit code, then the configuration variable <code>mergetool.&lt;tool&gt;.trustExitCode</code> can be set to <code>true</code>. Otherwise, <code>git mergetool</code> will prompt the user to indicate the success of the resolution after the custom tool has exited.</p>  </dd> <dt class=\"hdlist1\">--tool-help</dt> <dd> <p>Print a list of merge tools that may be used with <code>--tool</code>.</p> </dd> <dt class=\"hdlist1\">-y</dt> <dt class=\"hdlist1\">--no-prompt</dt> <dd> <p>Don’t prompt before each invocation of the merge resolution program. This is the default if the merge resolution program is explicitly specified with the <code>--tool</code> option or with the <code>merge.tool</code> configuration variable.</p> </dd> <dt class=\"hdlist1\">--prompt</dt> <dd> <p>Prompt before each invocation of the merge resolution program to give the user a chance to skip the path.</p> </dd> </dl> </div></div>   <h2 id=\"_temporary_files\">Temporary files</h2> <div class=\"sectionbody\"> <p><code>git mergetool</code> creates <code>*.orig</code> backup files while resolving merges. These are safe to remove once a file has been merged and its <code>git mergetool</code> session has completed.</p>   <p>Setting the <code>mergetool.keepBackup</code> configuration variable to <code>false</code> causes <code>git mergetool</code> to automatically remove the backup as files are successfully merged.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-mergetool\" class=\"_attribution-link\">https://git-scm.com/docs/git-mergetool</a>\n  </p>\n</div>\n","git-fetch":"<h1>git-fetch</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-fetch - Download objects and refs from another repository</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git fetch [&lt;options&gt;] [&lt;repository&gt; [&lt;refspec&gt;…​]]\ngit fetch [&lt;options&gt;] &lt;group&gt;\ngit fetch --multiple [&lt;options&gt;] [(&lt;repository&gt; | &lt;group&gt;)…​]\ngit fetch --all [&lt;options&gt;]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Fetch branches and/or tags (collectively, \"refs\") from one or more other repositories, along with the objects necessary to complete their histories. Remote-tracking branches are updated (see the description of &lt;refspec&gt; below for ways to control this behavior).</p>   <p>By default, any tag that points into the histories being fetched is also fetched; the effect is to fetch tags that point at branches that you are interested in. This default behavior can be changed by using the --tags or --no-tags options or by configuring remote.&lt;name&gt;.tagOpt. By using a refspec that fetches tags explicitly, you can fetch tags that do not point into branches you are interested in as well.</p>   <p><code>git fetch</code> can fetch from either a single named repository or URL, or from several repositories at once if &lt;group&gt; is given and there is a remotes.&lt;group&gt; entry in the configuration file. (See <a href=\"git-config\">git-config[1]</a>).</p>   <p>When no remote is specified, by default the <code>origin</code> remote will be used, unless there’s an upstream branch configured for the current branch.</p>   <p>The names of refs that are fetched, together with the object names they point at, are written to <code>.git/FETCH_HEAD</code>. This information may be used by scripts or other git commands, such as <a href=\"git-pull\">git-pull[1]</a>.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\">\n<div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--all</dt> <dd> <p>Fetch all remotes.</p> </dd> <dt class=\"hdlist1\">-a</dt> <dt class=\"hdlist1\">--append</dt> <dd> <p>Append ref names and object names of fetched refs to the existing contents of <code>.git/FETCH_HEAD</code>. Without this option old data in <code>.git/FETCH_HEAD</code> will be overwritten.</p> </dd> <dt class=\"hdlist1\">--depth=&lt;depth&gt;</dt> <dd> <p>Limit fetching to the specified number of commits from the tip of each remote branch history. If fetching to a <code>shallow</code> repository created by <code>git clone</code> with <code>--depth=&lt;depth&gt;</code> option (see <a href=\"git-clone\">git-clone[1]</a>), deepen or shorten the history to the specified number of commits. Tags for the deepened commits are not fetched.</p> </dd> <dt class=\"hdlist1\">--unshallow</dt> <dd> <p>If the source repository is complete, convert a shallow repository to a complete one, removing all the limitations imposed by shallow repositories.</p>  <p>If the source repository is shallow, fetch as much as possible so that the current repository has the same history as the source repository.</p>  </dd> <dt class=\"hdlist1\">--update-shallow</dt> <dd> <p>By default when fetching from a shallow repository, <code>git fetch</code> refuses refs that require updating .git/shallow. This option updates .git/shallow and accept such refs.</p> </dd> <dt class=\"hdlist1\">--dry-run</dt> <dd> <p>Show what would be done, without making any changes.</p> </dd> <dt class=\"hdlist1\">-f</dt> <dt class=\"hdlist1\">--force</dt> <dd> <p>When <code>git fetch</code> is used with <code>&lt;rbranch&gt;:&lt;lbranch&gt;</code> refspec, it refuses to update the local branch <code>&lt;lbranch&gt;</code> unless the remote branch <code>&lt;rbranch&gt;</code> it fetches is a descendant of <code>&lt;lbranch&gt;</code>. This option overrides that check.</p> </dd> <dt class=\"hdlist1\">-k</dt> <dt class=\"hdlist1\">--keep</dt> <dd> <p>Keep downloaded pack.</p> </dd> <dt class=\"hdlist1\">--multiple</dt> <dd> <p>Allow several &lt;repository&gt; and &lt;group&gt; arguments to be specified. No &lt;refspec&gt;s may be specified.</p> </dd> <dt class=\"hdlist1\">-p</dt> <dt class=\"hdlist1\">--prune</dt> <dd> <p>Before fetching, remove any remote-tracking references that no longer exist on the remote. Tags are not subject to pruning if they are fetched only because of the default tag auto-following or due to a --tags option. However, if tags are fetched due to an explicit refspec (either on the command line or in the remote configuration, for example if the remote was cloned with the --mirror option), then they are also subject to pruning.</p> </dd> <dt class=\"hdlist1\">-n</dt> <dt class=\"hdlist1\">--no-tags</dt> <dd> <p>By default, tags that point at objects that are downloaded from the remote repository are fetched and stored locally. This option disables this automatic tag following. The default behavior for a remote may be specified with the remote.&lt;name&gt;.tagOpt setting. See <a href=\"git-config\">git-config[1]</a>.</p> </dd> <dt class=\"hdlist1\">--refmap=&lt;refspec&gt;</dt> <dd> <p>When fetching refs listed on the command line, use the specified refspec (can be given more than once) to map the refs to remote-tracking branches, instead of the values of <code>remote.*.fetch</code> configuration variables for the remote repository. See section on \"Configured Remote-tracking Branches\" for details.</p> </dd> <dt class=\"hdlist1\">-t</dt> <dt class=\"hdlist1\">--tags</dt> <dd> <p>Fetch all tags from the remote (i.e., fetch remote tags <code>refs/tags/*</code> into local tags with the same name), in addition to whatever else would otherwise be fetched. Using this option alone does not subject tags to pruning, even if --prune is used (though tags may be pruned anyway if they are also the destination of an explicit refspec; see <code>--prune</code>).</p> </dd> <dt class=\"hdlist1\">--recurse-submodules[=yes|on-demand|no]</dt> <dd> <p>This option controls if and under what conditions new commits of populated submodules should be fetched too. It can be used as a boolean option to completely disable recursion when set to <code>no</code> or to unconditionally recurse into all populated submodules when set to <code>yes</code>, which is the default when this option is used without any value. Use <code>on-demand</code> to only recurse into a populated submodule when the superproject retrieves a commit that updates the submodule’s reference to a commit that isn’t already in the local submodule clone.</p> </dd> <dt class=\"hdlist1\">-j</dt> <dt class=\"hdlist1\">--jobs=&lt;n&gt;</dt> <dd> <p>Number of parallel children to be used for fetching submodules. Each will fetch from different submodules, such that fetching many submodules will be faster. By default submodules will be fetched one at a time.</p> </dd> <dt class=\"hdlist1\">--no-recurse-submodules</dt> <dd> <p>Disable recursive fetching of submodules (this has the same effect as using the <code>--recurse-submodules=no</code> option).</p> </dd> <dt class=\"hdlist1\">--submodule-prefix=&lt;path&gt;</dt> <dd> <p>Prepend &lt;path&gt; to paths printed in informative messages such as \"Fetching submodule foo\". This option is used internally when recursing over submodules.</p> </dd> <dt class=\"hdlist1\">--recurse-submodules-default=[yes|on-demand]</dt> <dd> <p>This option is used internally to temporarily provide a non-negative default value for the --recurse-submodules option. All other methods of configuring fetch’s submodule recursion (such as settings in <a href=\"gitmodules\">gitmodules[5]</a> and <a href=\"git-config\">git-config[1]</a>) override this option, as does specifying --[no-]recurse-submodules directly.</p> </dd> <dt class=\"hdlist1\">-u</dt> <dt class=\"hdlist1\">--update-head-ok</dt> <dd> <p>By default <code>git fetch</code> refuses to update the head which corresponds to the current branch. This flag disables the check. This is purely for the internal use for <code>git pull</code> to communicate with <code>git fetch</code>, and unless you are implementing your own Porcelain you are not supposed to use it.</p> </dd> <dt class=\"hdlist1\">--upload-pack &lt;upload-pack&gt;</dt> <dd> <p>When given, and the repository to fetch from is handled by <code>git fetch-pack</code>, <code>--exec=&lt;upload-pack&gt;</code> is passed to the command to specify non-default path for the command run on the other end.</p> </dd> <dt class=\"hdlist1\">-q</dt> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>Pass --quiet to git-fetch-pack and silence any other internally used git commands. Progress is not reported to the standard error stream.</p> </dd> <dt class=\"hdlist1\">-v</dt> <dt class=\"hdlist1\">--verbose</dt> <dd> <p>Be verbose.</p> </dd> <dt class=\"hdlist1\">--progress</dt> <dd> <p>Progress status is reported on the standard error stream by default when it is attached to a terminal, unless -q is specified. This flag forces progress status even if the standard error stream is not directed to a terminal.</p> </dd> <dt class=\"hdlist1\">-4</dt> <dt class=\"hdlist1\">--ipv4</dt> <dd> <p>Use IPv4 addresses only, ignoring IPv6 addresses.</p> </dd> <dt class=\"hdlist1\">-6</dt> <dt class=\"hdlist1\">--ipv6</dt> <dd> <p>Use IPv6 addresses only, ignoring IPv4 addresses.</p> </dd> </dl> </div> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">&lt;repository&gt;</dt> <dd> <p>The \"remote\" repository that is the source of a fetch or pull operation. This parameter can be either a URL (see the section <a href=\"#URLS\">GIT URLS</a> below) or the name of a remote (see the section <a href=\"#REMOTES\">REMOTES</a> below).</p> </dd> <dt class=\"hdlist1\">&lt;group&gt;</dt> <dd> <p>A name referring to a list of repositories as the value of remotes.&lt;group&gt; in the configuration file. (See <a href=\"git-config\">git-config[1]</a>).</p> </dd> <dt class=\"hdlist1\">&lt;refspec&gt;</dt> <dd> <p>Specifies which refs to fetch and which local refs to update. When no &lt;refspec&gt;s appear on the command line, the refs to fetch are read from <code>remote.&lt;repository&gt;.fetch</code> variables instead (see <a href=\"#CRTB\">CONFIGURED REMOTE-TRACKING BRANCHES</a> below).</p>  <p>The format of a &lt;refspec&gt; parameter is an optional plus <code>+</code>, followed by the source ref &lt;src&gt;, followed by a colon <code>:</code>, followed by the destination ref &lt;dst&gt;. The colon can be omitted when &lt;dst&gt; is empty.</p>   <p><code>tag &lt;tag&gt;</code> means the same as <code>refs/tags/&lt;tag&gt;:refs/tags/&lt;tag&gt;</code>; it requests fetching everything up to the given tag.</p>   <p>The remote ref that matches &lt;src&gt; is fetched, and if &lt;dst&gt; is not empty string, the local ref that matches it is fast-forwarded using &lt;src&gt;. If the optional plus <code>+</code> is used, the local ref is updated even if it does not result in a fast-forward update.</p>  <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> When the remote branch you want to fetch is known to be rewound and rebased regularly, it is expected that its new tip will not be descendant of its previous tip (as stored in your remote-tracking branch the last time you fetched). You would want to use the <code>+</code> sign to indicate non-fast-forward updates will be needed for such branches. There is no way to determine or declare that a branch will be made available in a repository with this behavior; the pulling user simply must know this is the expected usage pattern for a branch. </td> </tr> </table> </div> </dd> </dl> </div>\n</div>   <h2 id=\"_git_urls_a_id_urls_a\">Git urls</h2> <div class=\"sectionbody\"> <p>In general, URLs contain information about the transport protocol, the address of the remote server, and the path to the repository. Depending on the transport protocol, some of this information may be absent.</p>   <p>Git supports ssh, git, http, and https protocols (in addition, ftp, and ftps can be used for fetching, but this is inefficient and deprecated; do not use it).</p>   <p>The native transport (i.e. git:// URL) does no authentication and should be used with caution on unsecured networks.</p>   <p>The following syntaxes may be used with them:</p>  <div class=\"ulist\"> <ul> <li> <p>ssh://[user@]host.xz[:port]/path/to/repo.git/</p> </li> <li> <p>git://host.xz[:port]/path/to/repo.git/</p> </li> <li> <p>http[s]://host.xz[:port]/path/to/repo.git/</p> </li> <li> <p>ftp[s]://host.xz[:port]/path/to/repo.git/</p> </li> </ul> </div>  <p>An alternative scp-like syntax may also be used with the ssh protocol:</p>  <div class=\"ulist\"> <ul> <li> <p>[user@]host.xz:path/to/repo.git/</p> </li> </ul> </div>  <p>This syntax is only recognized if there are no slashes before the first colon. This helps differentiate a local path that contains a colon. For example the local path <code>foo:bar</code> could be specified as an absolute path or <code>./foo:bar</code> to avoid being misinterpreted as an ssh url.</p>   <p>The ssh and git protocols additionally support ~username expansion:</p>  <div class=\"ulist\"> <ul> <li> <p>ssh://[user@]host.xz[:port]/~[user]/path/to/repo.git/</p> </li> <li> <p>git://host.xz[:port]/~[user]/path/to/repo.git/</p> </li> <li> <p>[user@]host.xz:/~[user]/path/to/repo.git/</p> </li> </ul> </div>  <p>For local repositories, also supported by Git natively, the following syntaxes may be used:</p>  <div class=\"ulist\"> <ul> <li> <p>/path/to/repo.git/</p> </li> <li> <p>file:///path/to/repo.git/</p> </li> </ul> </div>  <p>These two syntaxes are mostly equivalent, except when cloning, when the former implies --local option. See <a href=\"git-clone\">git-clone[1]</a> for details.</p>   <p>When Git doesn’t know how to handle a certain transport protocol, it attempts to use the <code>remote-&lt;transport&gt;</code> remote helper, if one exists. To explicitly request a remote helper, the following syntax may be used:</p>  <div class=\"ulist\"> <ul> <li> <p>&lt;transport&gt;::&lt;address&gt;</p> </li> </ul> </div>  <p>where &lt;address&gt; may be a path, a server and path, or an arbitrary URL-like string recognized by the specific remote helper being invoked. See <a href=\"gitremote-helpers\">gitremote-helpers[1]</a> for details.</p>   <p>If there are a large number of similarly-named remote repositories and you want to use a different format for them (such that the URLs you use will be rewritten into URLs that work), you can create a configuration section of the form:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        [url \"&lt;actual url base&gt;\"]\n                insteadOf = &lt;other url base&gt;</pre> </div> </div>  <p>For example, with this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        [url \"git://git.host.xz/\"]\n                insteadOf = host.xz:/path/to/\n                insteadOf = work:</pre> </div> </div>  <p>a URL like \"work:repo.git\" or like \"host.xz:/path/to/repo.git\" will be rewritten in any context that takes a URL to be \"git://git.host.xz/repo.git\".</p>   <p>If you want to rewrite URLs for push only, you can create a configuration section of the form:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        [url \"&lt;actual url base&gt;\"]\n                pushInsteadOf = &lt;other url base&gt;</pre> </div> </div>  <p>For example, with this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        [url \"ssh://example.org/\"]\n                pushInsteadOf = git://example.org/</pre> </div> </div>  <p>a URL like \"git://example.org/path/to/repo.git\" will be rewritten to \"ssh://example.org/path/to/repo.git\" for pushes, but pulls will still use the original URL.</p> </div>   <h2 id=\"_remotes_a_id_remotes_a\">Remotes</h2> <div class=\"sectionbody\"> <p>The name of one of the following can be used instead of a URL as <code>&lt;repository&gt;</code> argument:</p>  <div class=\"ulist\"> <ul> <li> <p>a remote in the Git configuration file: <code>$GIT_DIR/config</code>,</p> </li> <li> <p>a file in the <code>$GIT_DIR/remotes</code> directory, or</p> </li> <li> <p>a file in the <code>$GIT_DIR/branches</code> directory.</p> </li> </ul> </div>  <p>All of these also allow you to omit the refspec from the command line because they each contain a refspec which git will use by default.</p>  <div class=\"sect2\"> <h3 id=\"_named_remote_in_configuration_file\">Named remote in configuration file</h3>  <p>You can choose to provide the name of a remote which you had previously configured using <a href=\"git-remote\">git-remote[1]</a>, <a href=\"git-config\">git-config[1]</a> or even by a manual edit to the <code>$GIT_DIR/config</code> file. The URL of this remote will be used to access the repository. The refspec of this remote will be used by default when you do not provide a refspec on the command line. The entry in the config file would appear like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        [remote \"&lt;name&gt;\"]\n                url = &lt;url&gt;\n                pushurl = &lt;pushurl&gt;\n                push = &lt;refspec&gt;\n                fetch = &lt;refspec&gt;</pre> </div> </div>  <p>The <code>&lt;pushurl&gt;</code> is used for pushes only. It is optional and defaults to <code>&lt;url&gt;</code>.</p>  </div> <div class=\"sect2\"> <h3 id=\"_named_file_in_code_git_dir_remotes_code\">Named file in <code>$GIT_DIR/remotes</code>\n</h3>  <p>You can choose to provide the name of a file in <code>$GIT_DIR/remotes</code>. The URL in this file will be used to access the repository. The refspec in this file will be used as default when you do not provide a refspec on the command line. This file should have the following format:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        URL: one of the above URL format\n        Push: &lt;refspec&gt;\n        Pull: &lt;refspec&gt;</pre> </div> </div>  <p><code>Push:</code> lines are used by <code>git push</code> and <code>Pull:</code> lines are used by <code>git pull</code> and <code>git fetch</code>. Multiple <code>Push:</code> and <code>Pull:</code> lines may be specified for additional branch mappings.</p>  </div> <div class=\"sect2\"> <h3 id=\"_named_file_in_code_git_dir_branches_code\">Named file in <code>$GIT_DIR/branches</code>\n</h3>  <p>You can choose to provide the name of a file in <code>$GIT_DIR/branches</code>. The URL in this file will be used to access the repository. This file should have the following format:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        &lt;url&gt;#&lt;head&gt;</pre> </div> </div>  <p><code>&lt;url&gt;</code> is required; <code>#&lt;head&gt;</code> is optional.</p>   <p>Depending on the operation, git will use one of the following refspecs, if you don’t provide one on the command line. <code>&lt;branch&gt;</code> is the name of this file in <code>$GIT_DIR/branches</code> and <code>&lt;head&gt;</code> defaults to <code>master</code>.</p>   <p>git fetch uses:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        refs/heads/&lt;head&gt;:refs/heads/&lt;branch&gt;</pre> </div> </div>  <p>git push uses:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        HEAD:refs/heads/&lt;head&gt;</pre> </div> </div> </div>\n</div>   <h2 id=\"_configured_remote_tracking_branches_a_id_crtb_a\">Configured remote-tracking branches</h2> <div class=\"sectionbody\"> <p>You often interact with the same remote repository by regularly and repeatedly fetching from it. In order to keep track of the progress of such a remote repository, <code>git fetch</code> allows you to configure <code>remote.&lt;repository&gt;.fetch</code> configuration variables.</p>   <p>Typically such a variable may look like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>[remote \"origin\"]\n        fetch = +refs/heads/*:refs/remotes/origin/*</pre> </div> </div>  <p>This configuration is used in two ways:</p>  <div class=\"ulist\"> <ul> <li> <p>When <code>git fetch</code> is run without specifying what branches and/or tags to fetch on the command line, e.g. <code>git fetch origin</code> or <code>git fetch</code>, <code>remote.&lt;repository&gt;.fetch</code> values are used as the refspecs—​they specify which refs to fetch and which local refs to update. The example above will fetch all branches that exist in the <code>origin</code> (i.e. any ref that matches the left-hand side of the value, <code>refs/heads/*</code>) and update the corresponding remote-tracking branches in the <code>refs/remotes/origin/*</code> hierarchy.</p> </li> <li> <p>When <code>git fetch</code> is run with explicit branches and/or tags to fetch on the command line, e.g. <code>git fetch origin master</code>, the &lt;refspec&gt;s given on the command line determine what are to be fetched (e.g. <code>master</code> in the example, which is a short-hand for <code>master:</code>, which in turn means \"fetch the <code>master</code> branch but I do not explicitly say what remote-tracking branch to update with it from the command line\"), and the example command will fetch <code>only</code> the <code>master</code> branch. The <code>remote.&lt;repository&gt;.fetch</code> values determine which remote-tracking branch, if any, is updated. When used in this way, the <code>remote.&lt;repository&gt;.fetch</code> values do not have any effect in deciding <code>what</code> gets fetched (i.e. the values are not used as refspecs when the command-line lists refspecs); they are only used to decide <code>where</code> the refs that are fetched are stored by acting as a mapping.</p> </li> </ul> </div>  <p>The latter use of the <code>remote.&lt;repository&gt;.fetch</code> values can be overridden by giving the <code>--refmap=&lt;refspec&gt;</code> parameter(s) on the command line.</p> </div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"><div class=\"ulist\"> <ul> <li> <p>Update the remote-tracking branches:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git fetch origin</pre> </div> </div>  <p>The above command copies all branches from the remote refs/heads/ namespace and stores them to the local refs/remotes/origin/ namespace, unless the branch.&lt;name&gt;.fetch option is used to specify a non-default refspec.</p>  </li> <li> <p>Using refspecs explicitly:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git fetch origin +pu:pu maint:tmp</pre> </div> </div>  <p>This updates (or creates, as necessary) branches <code>pu</code> and <code>tmp</code> in the local repository by fetching from the branches (respectively) <code>pu</code> and <code>maint</code> from the remote repository.</p>   <p>The <code>pu</code> branch will be updated even if it is does not fast-forward, because it is prefixed with a plus sign; <code>tmp</code> will not be.</p>  </li> <li> <p>Peek at a remote’s branch, without configuring the remote in your local repository:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git fetch git://git.kernel.org/pub/scm/git/git.git maint\n$ git log FETCH_HEAD</pre> </div> </div>  <p>The first command fetches the <code>maint</code> branch from the repository at <code>git://git.kernel.org/pub/scm/git/git.git</code> and the second command uses <code>FETCH_HEAD</code> to examine the branch with <a href=\"git-log\">git-log[1]</a>. The fetched objects will eventually be removed by git’s built-in housekeeping (see <a href=\"git-gc\">git-gc[1]</a>).</p>  </li> </ul> </div></div>   <h2 id=\"_bugs\">Bugs</h2> <div class=\"sectionbody\"> <p>Using --recurse-submodules can only fetch new commits in already checked out submodules right now. When e.g. upstream added a new submodule in the just fetched commits of the superproject the submodule itself can not be fetched, making it impossible to check out that submodule later without having to do a fetch again. This is expected to be fixed in a future Git version.</p> </div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-pull\">git-pull[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-fetch\" class=\"_attribution-link\">https://git-scm.com/docs/git-fetch</a>\n  </p>\n</div>\n","git-diff":"<h1>git-diff</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-diff - Show changes between commits, commit and working tree, etc</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git diff [options] [&lt;commit&gt;] [--] [&lt;path&gt;…​]\ngit diff [options] --cached [&lt;commit&gt;] [--] [&lt;path&gt;…​]\ngit diff [options] &lt;commit&gt; &lt;commit&gt; [--] [&lt;path&gt;…​]\ngit diff [options] &lt;blob&gt; &lt;blob&gt;\ngit diff [options] [--no-index] [--] &lt;path&gt; &lt;path&gt;</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Show changes between the working tree and the index or a tree, changes between the index and a tree, changes between two trees, changes between two blob objects, or changes between two files on disk.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">\n<em>git diff</em> [--options] [--] [&lt;path&gt;…​]</dt> <dd> <p>This form is to view the changes you made relative to the index (staging area for the next commit). In other words, the differences are what you <code>could</code> tell Git to further add to the index but you still haven’t. You can stage these changes by using <a href=\"git-add\">git-add[1]</a>.</p> </dd> <dt class=\"hdlist1\">\n<em>git diff</em> --no-index [--options] [--] [&lt;path&gt;…​]</dt> <dd> <p>This form is to compare the given two paths on the filesystem. You can omit the <code>--no-index</code> option when running the command in a working tree controlled by Git and at least one of the paths points outside the working tree, or when running the command outside a working tree controlled by Git.</p> </dd> <dt class=\"hdlist1\">\n<em>git diff</em> [--options] --cached [&lt;commit&gt;] [--] [&lt;path&gt;…​]</dt> <dd> <p>This form is to view the changes you staged for the next commit relative to the named &lt;commit&gt;. Typically you would want comparison with the latest commit, so if you do not give &lt;commit&gt;, it defaults to HEAD. If HEAD does not exist (e.g. unborn branches) and &lt;commit&gt; is not given, it shows all staged changes. --staged is a synonym of --cached.</p> </dd> <dt class=\"hdlist1\">\n<em>git diff</em> [--options] &lt;commit&gt; [--] [&lt;path&gt;…​]</dt> <dd> <p>This form is to view the changes you have in your working tree relative to the named &lt;commit&gt;. You can use HEAD to compare it with the latest commit, or a branch name to compare with the tip of a different branch.</p> </dd> <dt class=\"hdlist1\">\n<em>git diff</em> [--options] &lt;commit&gt; &lt;commit&gt; [--] [&lt;path&gt;…​]</dt> <dd> <p>This is to view the changes between two arbitrary &lt;commit&gt;.</p> </dd> <dt class=\"hdlist1\">\n<em>git diff</em> [--options] &lt;commit&gt;..&lt;commit&gt; [--] [&lt;path&gt;…​]</dt> <dd> <p>This is synonymous to the previous form. If &lt;commit&gt; on one side is omitted, it will have the same effect as using HEAD instead.</p> </dd> <dt class=\"hdlist1\">\n<em>git diff</em> [--options] &lt;commit&gt;...&lt;commit&gt; [--] [&lt;path&gt;…​]</dt> <dd> <p>This form is to view the changes on the branch containing and up to the second &lt;commit&gt;, starting at a common ancestor of both &lt;commit&gt;. \"git diff A...B\" is equivalent to \"git diff $(git-merge-base A B) B\". You can omit any one of &lt;commit&gt;, which has the same effect as using HEAD instead.</p> </dd> </dl> </div>  <p>Just in case if you are doing something exotic, it should be noted that all of the &lt;commit&gt; in the above description, except in the last two forms that use \"..\" notations, can be any &lt;tree&gt;.</p>   <p>For a more complete list of ways to spell &lt;commit&gt;, see \"SPECIFYING REVISIONS\" section in <a href=\"gitrevisions\">gitrevisions[7]</a>. However, \"diff\" is about comparing two <code>endpoints</code>, not ranges, and the range notations (\"&lt;commit&gt;..&lt;commit&gt;\" and \"&lt;commit&gt;...&lt;commit&gt;\") do not mean a range as defined in the \"SPECIFYING RANGES\" section in <a href=\"gitrevisions\">gitrevisions[7]</a>.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">\n<em>git diff</em> [options] &lt;blob&gt; &lt;blob&gt;</dt> <dd> <p>This form is to view the differences between the raw contents of two blob objects.</p> </dd> </dl> </div>\n</div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\">\n<div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-p</dt> <dt class=\"hdlist1\">-u</dt> <dt class=\"hdlist1\">--patch</dt> <dd> <p>Generate patch (see section on generating patches). This is the default.</p> </dd> <dt class=\"hdlist1\">-s</dt> <dt class=\"hdlist1\">--no-patch</dt> <dd> <p>Suppress diff output. Useful for commands like <code>git show</code> that show the patch by default, or to cancel the effect of <code>--patch</code>.</p> </dd> <dt class=\"hdlist1\">-U&lt;n&gt;</dt> <dt class=\"hdlist1\">--unified=&lt;n&gt;</dt> <dd> <p>Generate diffs with &lt;n&gt; lines of context instead of the usual three. Implies <code>-p</code>.</p> </dd> <dt class=\"hdlist1\">--raw</dt> <dd> <p>Generate the diff in raw format.</p> </dd> <dt class=\"hdlist1\">--patch-with-raw</dt> <dd> <p>Synonym for <code>-p --raw</code>.</p> </dd> <dt class=\"hdlist1\">--compaction-heuristic</dt> <dt class=\"hdlist1\">--no-compaction-heuristic</dt> <dd> <p>These are to help debugging and tuning an experimental heuristic (which is off by default) that shifts the hunk boundary in an attempt to make the resulting patch easier to read.</p> </dd> <dt class=\"hdlist1\">--minimal</dt> <dd> <p>Spend extra time to make sure the smallest possible diff is produced.</p> </dd> <dt class=\"hdlist1\">--patience</dt> <dd> <p>Generate a diff using the \"patience diff\" algorithm.</p> </dd> <dt class=\"hdlist1\">--histogram</dt> <dd> <p>Generate a diff using the \"histogram diff\" algorithm.</p> </dd> <dt class=\"hdlist1\">--diff-algorithm={patience|minimal|histogram|myers}</dt> <dd> <p>Choose a diff algorithm. The variants are as follows:</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">\n<code>default</code>, <code>myers</code>\n</dt> <dd> <p>The basic greedy diff algorithm. Currently, this is the default.</p> </dd> <dt class=\"hdlist1\"><code>minimal</code></dt> <dd> <p>Spend extra time to make sure the smallest possible diff is produced.</p> </dd> <dt class=\"hdlist1\"><code>patience</code></dt> <dd> <p>Use \"patience diff\" algorithm when generating patches.</p> </dd> <dt class=\"hdlist1\"><code>histogram</code></dt> <dd> <p>This algorithm extends the patience algorithm to \"support low-occurrence common elements\".</p> </dd> </dl> </div> </div> </div>  <p>For instance, if you configured diff.algorithm variable to a non-default value and want to use the default one, then you have to use <code>--diff-algorithm=default</code> option.</p>  </dd> <dt class=\"hdlist1\">--stat[=&lt;width&gt;[,&lt;name-width&gt;[,&lt;count&gt;]]]</dt> <dd> <p>Generate a diffstat. By default, as much space as necessary will be used for the filename part, and the rest for the graph part. Maximum width defaults to terminal width, or 80 columns if not connected to a terminal, and can be overridden by <code>&lt;width&gt;</code>. The width of the filename part can be limited by giving another width <code>&lt;name-width&gt;</code> after a comma. The width of the graph part can be limited by using <code>--stat-graph-width=&lt;width&gt;</code> (affects all commands generating a stat graph) or by setting <code>diff.statGraphWidth=&lt;width&gt;</code> (does not affect <code>git format-patch</code>). By giving a third parameter <code>&lt;count&gt;</code>, you can limit the output to the first <code>&lt;count&gt;</code> lines, followed by <code>...</code> if there are more.</p>  <p>These parameters can also be set individually with <code>--stat-width=&lt;width&gt;</code>, <code>--stat-name-width=&lt;name-width&gt;</code> and <code>--stat-count=&lt;count&gt;</code>.</p>  </dd> <dt class=\"hdlist1\">--numstat</dt> <dd> <p>Similar to <code>--stat</code>, but shows number of added and deleted lines in decimal notation and pathname without abbreviation, to make it more machine friendly. For binary files, outputs two <code>-</code> instead of saying <code>0 0</code>.</p> </dd> <dt class=\"hdlist1\">--shortstat</dt> <dd> <p>Output only the last line of the <code>--stat</code> format containing total number of modified files, as well as number of added and deleted lines.</p> </dd> <dt class=\"hdlist1\">--dirstat[=&lt;param1,param2,…​&gt;]</dt> <dd> <p>Output the distribution of relative amount of changes for each sub-directory. The behavior of <code>--dirstat</code> can be customized by passing it a comma separated list of parameters. The defaults are controlled by the <code>diff.dirstat</code> configuration variable (see <a href=\"git-config\">git-config[1]</a>). The following parameters are available:</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>changes</code></dt> <dd> <p>Compute the dirstat numbers by counting the lines that have been removed from the source, or added to the destination. This ignores the amount of pure code movements within a file. In other words, rearranging lines in a file is not counted as much as other changes. This is the default behavior when no parameter is given.</p> </dd> <dt class=\"hdlist1\"><code>lines</code></dt> <dd> <p>Compute the dirstat numbers by doing the regular line-based diff analysis, and summing the removed/added line counts. (For binary files, count 64-byte chunks instead, since binary files have no natural concept of lines). This is a more expensive <code>--dirstat</code> behavior than the <code>changes</code> behavior, but it does count rearranged lines within a file as much as other changes. The resulting output is consistent with what you get from the other <code>--*stat</code> options.</p> </dd> <dt class=\"hdlist1\"><code>files</code></dt> <dd> <p>Compute the dirstat numbers by counting the number of files changed. Each changed file counts equally in the dirstat analysis. This is the computationally cheapest <code>--dirstat</code> behavior, since it does not have to look at the file contents at all.</p> </dd> <dt class=\"hdlist1\"><code>cumulative</code></dt> <dd> <p>Count changes in a child directory for the parent directory as well. Note that when using <code>cumulative</code>, the sum of the percentages reported may exceed 100%. The default (non-cumulative) behavior can be specified with the <code>noncumulative</code> parameter.</p> </dd> <dt class=\"hdlist1\">&lt;limit&gt;</dt> <dd> <p>An integer parameter specifies a cut-off percent (3% by default). Directories contributing less than this percentage of the changes are not shown in the output.</p> </dd> </dl> </div> </div> </div>  <p>Example: The following will count changed files, while ignoring directories with less than 10% of the total amount of changed files, and accumulating child directory counts in the parent directories: <code>--dirstat=files,10,cumulative</code>.</p>  </dd> <dt class=\"hdlist1\">--summary</dt> <dd> <p>Output a condensed summary of extended header information such as creations, renames and mode changes.</p> </dd> <dt class=\"hdlist1\">--patch-with-stat</dt> <dd> <p>Synonym for <code>-p --stat</code>.</p> </dd> <dt class=\"hdlist1\">-z</dt> <dd> <p>When <code>--raw</code>, <code>--numstat</code>, <code>--name-only</code> or <code>--name-status</code> has been given, do not munge pathnames and use NULs as output field terminators.</p>  <p>Without this option, each pathname output will have TAB, LF, double quotes, and backslash characters replaced with <code>\\t</code>, <code>\\n</code>, <code>\\\"</code>, and <code>\\\\</code>, respectively, and the pathname will be enclosed in double quotes if any of those replacements occurred.</p>  </dd> <dt class=\"hdlist1\">--name-only</dt> <dd> <p>Show only names of changed files.</p> </dd> <dt class=\"hdlist1\">--name-status</dt> <dd> <p>Show only names and status of changed files. See the description of the <code>--diff-filter</code> option on what the status letters mean.</p> </dd> <dt class=\"hdlist1\">--submodule[=&lt;format&gt;]</dt> <dd> <p>Specify how differences in submodules are shown. When <code>--submodule</code> or <code>--submodule=log</code> is given, the <code>log</code> format is used. This format lists the commits in the range like <a href=\"git-submodule\">git-submodule[1]</a> <code>summary</code> does. Omitting the <code>--submodule</code> option or specifying <code>--submodule=short</code>, uses the <code>short</code> format. This format just shows the names of the commits at the beginning and end of the range. Can be tweaked via the <code>diff.submodule</code> configuration variable.</p> </dd> <dt class=\"hdlist1\">--color[=&lt;when&gt;]</dt> <dd> <p>Show colored diff. <code>--color</code> (i.e. without <code>=&lt;when&gt;</code>) is the same as <code>--color=always</code>. <code>&lt;when&gt;</code> can be one of <code>always</code>, <code>never</code>, or <code>auto</code>. It can be changed by the <code>color.ui</code> and <code>color.diff</code> configuration settings.</p> </dd> <dt class=\"hdlist1\">--no-color</dt> <dd> <p>Turn off colored diff. This can be used to override configuration settings. It is the same as <code>--color=never</code>.</p> </dd> <dt class=\"hdlist1\">--word-diff[=&lt;mode&gt;]</dt> <dd> <p>Show a word diff, using the &lt;mode&gt; to delimit changed words. By default, words are delimited by whitespace; see <code>--word-diff-regex</code> below. The &lt;mode&gt; defaults to <code>plain</code>, and must be one of:</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">color</dt> <dd> <p>Highlight changed words using only colors. Implies <code>--color</code>.</p> </dd> <dt class=\"hdlist1\">plain</dt> <dd> <p>Show words as <code>[-removed-]</code> and <code>{+added+}</code>. Makes no attempts to escape the delimiters if they appear in the input, so the output may be ambiguous.</p> </dd> <dt class=\"hdlist1\">porcelain</dt> <dd> <p>Use a special line-based format intended for script consumption. Added/removed/unchanged runs are printed in the usual unified diff format, starting with a <code>+</code>/<code>-</code>/` ` character at the beginning of the line and extending to the end of the line. Newlines in the input are represented by a tilde <code>~</code> on a line of its own.</p> </dd> <dt class=\"hdlist1\">none</dt> <dd> <p>Disable word diff again.</p> </dd> </dl> </div> </div> </div>  <p>Note that despite the name of the first mode, color is used to highlight the changed parts in all modes if enabled.</p>  </dd> <dt class=\"hdlist1\">--word-diff-regex=&lt;regex&gt;</dt> <dd> <p>Use &lt;regex&gt; to decide what a word is, instead of considering runs of non-whitespace to be a word. Also implies <code>--word-diff</code> unless it was already enabled.</p>  <p>Every non-overlapping match of the &lt;regex&gt; is considered a word. Anything between these matches is considered whitespace and ignored(!) for the purposes of finding differences. You may want to append <code>|[^[:space:]]</code> to your regular expression to make sure that it matches all non-whitespace characters. A match that contains a newline is silently truncated(!) at the newline.</p>   <p>For example, <code>--word-diff-regex=.</code> will treat each character as a word and, correspondingly, show differences character by character.</p>   <p>The regex can also be set via a diff driver or configuration option, see <a href=\"gitattributes\">gitattributes[5]</a> or <a href=\"git-config\">git-config[1]</a>. Giving it explicitly overrides any diff driver or configuration setting. Diff drivers override configuration settings.</p>  </dd> <dt class=\"hdlist1\">--color-words[=&lt;regex&gt;]</dt> <dd> <p>Equivalent to <code>--word-diff=color</code> plus (if a regex was specified) <code>--word-diff-regex=&lt;regex&gt;</code>.</p> </dd> <dt class=\"hdlist1\">--no-renames</dt> <dd> <p>Turn off rename detection, even when the configuration file gives the default to do so.</p> </dd> <dt class=\"hdlist1\">--check</dt> <dd> <p>Warn if changes introduce conflict markers or whitespace errors. What are considered whitespace errors is controlled by <code>core.whitespace</code> configuration. By default, trailing whitespaces (including lines that solely consist of whitespaces) and a space character that is immediately followed by a tab character inside the initial indent of the line are considered whitespace errors. Exits with non-zero status if problems are found. Not compatible with --exit-code.</p> </dd> <dt class=\"hdlist1\">--ws-error-highlight=&lt;kind&gt;</dt> <dd> <p>Highlight whitespace errors on lines specified by &lt;kind&gt; in the color specified by <code>color.diff.whitespace</code>. &lt;kind&gt; is a comma separated list of <code>old</code>, <code>new</code>, <code>context</code>. When this option is not given, only whitespace errors in <code>new</code> lines are highlighted. E.g. <code>--ws-error-highlight=new,old</code> highlights whitespace errors on both deleted and added lines. <code>all</code> can be used as a short-hand for <code>old,new,context</code>.</p> </dd> <dt class=\"hdlist1\">--full-index</dt> <dd> <p>Instead of the first handful of characters, show the full pre- and post-image blob object names on the \"index\" line when generating patch format output.</p> </dd> <dt class=\"hdlist1\">--binary</dt> <dd> <p>In addition to <code>--full-index</code>, output a binary diff that can be applied with <code>git-apply</code>.</p> </dd> <dt class=\"hdlist1\">--abbrev[=&lt;n&gt;]</dt> <dd> <p>Instead of showing the full 40-byte hexadecimal object name in diff-raw format output and diff-tree header lines, show only a partial prefix. This is independent of the <code>--full-index</code> option above, which controls the diff-patch output format. Non default number of digits can be specified with <code>--abbrev=&lt;n&gt;</code>.</p> </dd> <dt class=\"hdlist1\">-B[&lt;n&gt;][/&lt;m&gt;]</dt> <dt class=\"hdlist1\">--break-rewrites[=[&lt;n&gt;][/&lt;m&gt;]]</dt> <dd> <p>Break complete rewrite changes into pairs of delete and create. This serves two purposes:</p>  <p>It affects the way a change that amounts to a total rewrite of a file not as a series of deletion and insertion mixed together with a very few lines that happen to match textually as the context, but as a single deletion of everything old followed by a single insertion of everything new, and the number <code>m</code> controls this aspect of the -B option (defaults to 60%). <code>-B/70%</code> specifies that less than 30% of the original should remain in the result for Git to consider it a total rewrite (i.e. otherwise the resulting patch will be a series of deletion and insertion mixed together with context lines).</p>   <p>When used with -M, a totally-rewritten file is also considered as the source of a rename (usually -M only considers a file that disappeared as the source of a rename), and the number <code>n</code> controls this aspect of the -B option (defaults to 50%). <code>-B20%</code> specifies that a change with addition and deletion compared to 20% or more of the file’s size are eligible for being picked up as a possible source of a rename to another file.</p>  </dd> <dt class=\"hdlist1\">-M[&lt;n&gt;]</dt> <dt class=\"hdlist1\">--find-renames[=&lt;n&gt;]</dt> <dd> <p>Detect renames. If <code>n</code> is specified, it is a threshold on the similarity index (i.e. amount of addition/deletions compared to the file’s size). For example, <code>-M90%</code> means Git should consider a delete/add pair to be a rename if more than 90% of the file hasn’t changed. Without a <code>%</code> sign, the number is to be read as a fraction, with a decimal point before it. I.e., <code>-M5</code> becomes 0.5, and is thus the same as <code>-M50%</code>. Similarly, <code>-M05</code> is the same as <code>-M5%</code>. To limit detection to exact renames, use <code>-M100%</code>. The default similarity index is 50%.</p> </dd> <dt class=\"hdlist1\">-C[&lt;n&gt;]</dt> <dt class=\"hdlist1\">--find-copies[=&lt;n&gt;]</dt> <dd> <p>Detect copies as well as renames. See also <code>--find-copies-harder</code>. If <code>n</code> is specified, it has the same meaning as for <code>-M&lt;n&gt;</code>.</p> </dd> <dt class=\"hdlist1\">--find-copies-harder</dt> <dd> <p>For performance reasons, by default, <code>-C</code> option finds copies only if the original file of the copy was modified in the same changeset. This flag makes the command inspect unmodified files as candidates for the source of copy. This is a very expensive operation for large projects, so use it with caution. Giving more than one <code>-C</code> option has the same effect.</p> </dd> <dt class=\"hdlist1\">-D</dt> <dt class=\"hdlist1\">--irreversible-delete</dt> <dd> <p>Omit the preimage for deletes, i.e. print only the header but not the diff between the preimage and <code>/dev/null</code>. The resulting patch is not meant to be applied with <code>patch</code> or <code>git apply</code>; this is solely for people who want to just concentrate on reviewing the text after the change. In addition, the output obviously lack enough information to apply such a patch in reverse, even manually, hence the name of the option.</p>  <p>When used together with <code>-B</code>, omit also the preimage in the deletion part of a delete/create pair.</p>  </dd> <dt class=\"hdlist1\">-l&lt;num&gt;</dt> <dd> <p>The <code>-M</code> and <code>-C</code> options require O(n^2) processing time where n is the number of potential rename/copy targets. This option prevents rename/copy detection from running if the number of rename/copy targets exceeds the specified number.</p> </dd> <dt class=\"hdlist1\">--diff-filter=[(A|C|D|M|R|T|U|X|B)…​[*]]</dt> <dd> <p>Select only files that are Added (<code>A</code>), Copied (<code>C</code>), Deleted (<code>D</code>), Modified (<code>M</code>), Renamed (<code>R</code>), have their type (i.e. regular file, symlink, submodule, …​) changed (<code>T</code>), are Unmerged (<code>U</code>), are Unknown (<code>X</code>), or have had their pairing Broken (<code>B</code>). Any combination of the filter characters (including none) can be used. When <code>*</code> (All-or-none) is added to the combination, all paths are selected if there is any file that matches other criteria in the comparison; if there is no file that matches other criteria, nothing is selected.</p> </dd> <dt class=\"hdlist1\">-S&lt;string&gt;</dt> <dd> <p>Look for differences that change the number of occurrences of the specified string (i.e. addition/deletion) in a file. Intended for the scripter’s use.</p>  <p>It is useful when you’re looking for an exact block of code (like a struct), and want to know the history of that block since it first came into being: use the feature iteratively to feed the interesting block in the preimage back into <code>-S</code>, and keep going until you get the very first version of the block.</p>  </dd> <dt class=\"hdlist1\">-G&lt;regex&gt;</dt> <dd> <p>Look for differences whose patch text contains added/removed lines that match &lt;regex&gt;.</p>  <p>To illustrate the difference between <code>-S&lt;regex&gt; --pickaxe-regex</code> and <code>-G&lt;regex&gt;</code>, consider a commit with the following diff in the same file:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>+    return !regexec(regexp, two-&gt;ptr, 1, &amp;regmatch, 0);\n...\n-    hit = !regexec(regexp, mf2.ptr, 1, &amp;regmatch, 0);</pre> </div> </div>  <p>While <code>git log -G\"regexec\\(regexp\"</code> will show this commit, <code>git log\n-S\"regexec\\(regexp\" --pickaxe-regex</code> will not (because the number of occurrences of that string did not change).</p>   <p>See the <code>pickaxe</code> entry in <a href=\"gitdiffcore\">gitdiffcore[7]</a> for more information.</p>  </dd> <dt class=\"hdlist1\">--pickaxe-all</dt> <dd> <p>When <code>-S</code> or <code>-G</code> finds a change, show all the changes in that changeset, not just the files that contain the change in &lt;string&gt;.</p> </dd> <dt class=\"hdlist1\">--pickaxe-regex</dt> <dd> <p>Treat the &lt;string&gt; given to <code>-S</code> as an extended POSIX regular expression to match.</p> </dd> <dt class=\"hdlist1\">-O&lt;orderfile&gt;</dt> <dd> <p>Output the patch in the order specified in the &lt;orderfile&gt;, which has one shell glob pattern per line. This overrides the <code>diff.orderFile</code> configuration variable (see <a href=\"git-config\">git-config[1]</a>). To cancel <code>diff.orderFile</code>, use <code>-O/dev/null</code>.</p> </dd> <dt class=\"hdlist1\">-R</dt> <dd> <p>Swap two inputs; that is, show differences from index or on-disk file to tree contents.</p> </dd> <dt class=\"hdlist1\">--relative[=&lt;path&gt;]</dt> <dd> <p>When run from a subdirectory of the project, it can be told to exclude changes outside the directory and show pathnames relative to it with this option. When you are not in a subdirectory (e.g. in a bare repository), you can name which subdirectory to make the output relative to by giving a &lt;path&gt; as an argument.</p> </dd> <dt class=\"hdlist1\">-a</dt> <dt class=\"hdlist1\">--text</dt> <dd> <p>Treat all files as text.</p> </dd> <dt class=\"hdlist1\">--ignore-space-at-eol</dt> <dd> <p>Ignore changes in whitespace at EOL.</p> </dd> <dt class=\"hdlist1\">-b</dt> <dt class=\"hdlist1\">--ignore-space-change</dt> <dd> <p>Ignore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent.</p> </dd> <dt class=\"hdlist1\">-w</dt> <dt class=\"hdlist1\">--ignore-all-space</dt> <dd> <p>Ignore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none.</p> </dd> <dt class=\"hdlist1\">--ignore-blank-lines</dt> <dd> <p>Ignore changes whose lines are all blank.</p> </dd> <dt class=\"hdlist1\">--inter-hunk-context=&lt;lines&gt;</dt> <dd> <p>Show the context between diff hunks, up to the specified number of lines, thereby fusing hunks that are close to each other.</p> </dd> <dt class=\"hdlist1\">-W</dt> <dt class=\"hdlist1\">--function-context</dt> <dd> <p>Show whole surrounding functions of changes.</p> </dd> <dt class=\"hdlist1\">--exit-code</dt> <dd> <p>Make the program exit with codes similar to diff(1). That is, it exits with 1 if there were differences and 0 means no differences.</p> </dd> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>Disable all output of the program. Implies <code>--exit-code</code>.</p> </dd> <dt class=\"hdlist1\">--ext-diff</dt> <dd> <p>Allow an external diff helper to be executed. If you set an external diff driver with <a href=\"gitattributes\">gitattributes[5]</a>, you need to use this option with <a href=\"git-log\">git-log[1]</a> and friends.</p> </dd> <dt class=\"hdlist1\">--no-ext-diff</dt> <dd> <p>Disallow external diff drivers.</p> </dd> <dt class=\"hdlist1\">--textconv</dt> <dt class=\"hdlist1\">--no-textconv</dt> <dd> <p>Allow (or disallow) external text conversion filters to be run when comparing binary files. See <a href=\"gitattributes\">gitattributes[5]</a> for details. Because textconv filters are typically a one-way conversion, the resulting diff is suitable for human consumption, but cannot be applied. For this reason, textconv filters are enabled by default only for <a href=\"git-diff\">git-diff[1]</a> and <a href=\"git-log\">git-log[1]</a>, but not for <a href=\"git-format-patch\">git-format-patch[1]</a> or diff plumbing commands.</p> </dd> <dt class=\"hdlist1\">--ignore-submodules[=&lt;when&gt;]</dt> <dd> <p>Ignore changes to submodules in the diff generation. &lt;when&gt; can be either \"none\", \"untracked\", \"dirty\" or \"all\", which is the default. Using \"none\" will consider the submodule modified when it either contains untracked or modified files or its HEAD differs from the commit recorded in the superproject and can be used to override any settings of the <code>ignore</code> option in <a href=\"git-config\">git-config[1]</a> or <a href=\"gitmodules\">gitmodules[5]</a>. When \"untracked\" is used submodules are not considered dirty when they only contain untracked content (but they are still scanned for modified content). Using \"dirty\" ignores all changes to the work tree of submodules, only changes to the commits stored in the superproject are shown (this was the behavior until 1.7.0). Using \"all\" hides all changes to submodules.</p> </dd> <dt class=\"hdlist1\">--src-prefix=&lt;prefix&gt;</dt> <dd> <p>Show the given source prefix instead of \"a/\".</p> </dd> <dt class=\"hdlist1\">--dst-prefix=&lt;prefix&gt;</dt> <dd> <p>Show the given destination prefix instead of \"b/\".</p> </dd> <dt class=\"hdlist1\">--no-prefix</dt> <dd> <p>Do not show any source or destination prefix.</p> </dd> </dl> </div>  <p>For more detailed explanation on these common options, see also <a href=\"gitdiffcore\">gitdiffcore[7]</a>.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">&lt;path&gt;…​</dt> <dd> <p>The &lt;paths&gt; parameters, when given, are used to limit the diff to the named paths (you can give directory names and get diff for all files under them).</p> </dd> </dl> </div>\n</div>   <h2 id=\"_raw_output_format\">Raw output format</h2> <div class=\"sectionbody\"> <p>The raw output format from \"git-diff-index\", \"git-diff-tree\", \"git-diff-files\" and \"git diff --raw\" are very similar.</p>   <p>These commands all compare two sets of things; what is compared differs:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">git-diff-index &lt;tree-ish&gt;</dt> <dd> <p>compares the &lt;tree-ish&gt; and the files on the filesystem.</p> </dd> <dt class=\"hdlist1\">git-diff-index --cached &lt;tree-ish&gt;</dt> <dd> <p>compares the &lt;tree-ish&gt; and the index.</p> </dd> <dt class=\"hdlist1\">git-diff-tree [-r] &lt;tree-ish-1&gt; &lt;tree-ish-2&gt; [&lt;pattern&gt;…​]</dt> <dd> <p>compares the trees named by the two arguments.</p> </dd> <dt class=\"hdlist1\">git-diff-files [&lt;pattern&gt;…​]</dt> <dd> <p>compares the index and the files on the filesystem.</p> </dd> </dl> </div>  <p>The \"git-diff-tree\" command begins its output by printing the hash of what is being compared. After that, all the commands print one output line per changed file.</p>   <p>An output line is formatted this way:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>in-place edit  :100644 100644 bcd1234... 0123456... M file0\ncopy-edit      :100644 100644 abcd123... 1234567... C68 file1 file2\nrename-edit    :100644 100644 abcd123... 1234567... R86 file1 file3\ncreate         :000000 100644 0000000... 1234567... A file4\ndelete         :100644 000000 1234567... 0000000... D file5\nunmerged       :000000 000000 0000000... 0000000... U file6</pre> </div> </div>  <p>That is, from the left to the right:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>a colon.</p> </li> <li> <p>mode for \"src\"; 000000 if creation or unmerged.</p> </li> <li> <p>a space.</p> </li> <li> <p>mode for \"dst\"; 000000 if deletion or unmerged.</p> </li> <li> <p>a space.</p> </li> <li> <p>sha1 for \"src\"; 0{40} if creation or unmerged.</p> </li> <li> <p>a space.</p> </li> <li> <p>sha1 for \"dst\"; 0{40} if creation, unmerged or \"look at work tree\".</p> </li> <li> <p>a space.</p> </li> <li> <p>status, followed by optional \"score\" number.</p> </li> <li> <p>a tab or a NUL when <code>-z</code> option is used.</p> </li> <li> <p>path for \"src\"</p> </li> <li> <p>a tab or a NUL when <code>-z</code> option is used; only exists for C or R.</p> </li> <li> <p>path for \"dst\"; only exists for C or R.</p> </li> <li> <p>an LF or a NUL when <code>-z</code> option is used, to terminate the record.</p> </li> </ol> </div>  <p>Possible status letters are:</p>  <div class=\"ulist\"> <ul> <li> <p>A: addition of a file</p> </li> <li> <p>C: copy of a file into a new one</p> </li> <li> <p>D: deletion of a file</p> </li> <li> <p>M: modification of the contents or mode of a file</p> </li> <li> <p>R: renaming of a file</p> </li> <li> <p>T: change in the type of the file</p> </li> <li> <p>U: file is unmerged (you must complete the merge before it can be committed)</p> </li> <li> <p>X: \"unknown\" change type (most probably a bug, please report it)</p> </li> </ul> </div>  <p>Status letters C and R are always followed by a score (denoting the percentage of similarity between the source and target of the move or copy). Status letter M may be followed by a score (denoting the percentage of dissimilarity) for file rewrites.</p>   <p>&lt;sha1&gt; is shown as all 0’s if a file is new on the filesystem and it is out of sync with the index.</p>   <p>Example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>:100644 100644 5be4a4...... 000000...... M file.c</pre> </div> </div>  <p>When <code>-z</code> option is not used, TAB, LF, and backslash characters in pathnames are represented as <code>\\t</code>, <code>\\n</code>, and <code>\\\\</code>, respectively.</p> </div>   <h2 id=\"_diff_format_for_merges\">Diff format for merges</h2> <div class=\"sectionbody\"> <p>\"git-diff-tree\", \"git-diff-files\" and \"git-diff --raw\" can take <code>-c</code> or <code>--cc</code> option to generate diff output also for merge commits. The output differs from the format described above in the following way:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>there is a colon for each parent</p> </li> <li> <p>there are more \"src\" modes and \"src\" sha1</p> </li> <li> <p>status is concatenated status characters for each parent</p> </li> <li> <p>no optional \"score\" number</p> </li> <li> <p>single path, only for \"dst\"</p> </li> </ol> </div>  <p>Example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>::100644 100644 100644 fabadb8... cc95eb0... 4866510... MM        describe.c</pre> </div> </div>  <p>Note that <code>combined diff</code> lists only files which were modified from all parents.</p> </div>   <h2 id=\"_generating_patches_with_p\">Generating patches with -p</h2> <div class=\"sectionbody\"> <p>When \"git-diff-index\", \"git-diff-tree\", or \"git-diff-files\" are run with a <code>-p</code> option, \"git diff\" without the <code>--raw</code> option, or \"git log\" with the \"-p\" option, they do not produce the output described above; instead they produce a patch file. You can customize the creation of such patches via the <code>GIT_EXTERNAL_DIFF</code> and the <code>GIT_DIFF_OPTS</code> environment variables.</p>   <p>What the -p option produces is slightly different from the traditional diff format:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>It is preceded with a \"git diff\" header that looks like this:</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>diff --git a/file1 b/file2</pre> </div> </div>  <p>The <code>a/</code> and <code>b/</code> filenames are the same unless rename/copy is involved. Especially, even for a creation or a deletion, <code>/dev/null</code> is <code>not</code> used in place of the <code>a/</code> or <code>b/</code> filenames.</p>   <p>When rename/copy is involved, <code>file1</code> and <code>file2</code> show the name of the source file of the rename/copy and the name of the file that rename/copy produces, respectively.</p>  </li> <li> <p>It is followed by one or more extended header lines:</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>old mode &lt;mode&gt;\nnew mode &lt;mode&gt;\ndeleted file mode &lt;mode&gt;\nnew file mode &lt;mode&gt;\ncopy from &lt;path&gt;\ncopy to &lt;path&gt;\nrename from &lt;path&gt;\nrename to &lt;path&gt;\nsimilarity index &lt;number&gt;\ndissimilarity index &lt;number&gt;\nindex &lt;hash&gt;..&lt;hash&gt; &lt;mode&gt;</pre> </div> </div>  <p>File modes are printed as 6-digit octal numbers including the file type and file permission bits.</p>   <p>Path names in extended headers do not include the <code>a/</code> and <code>b/</code> prefixes.</p>   <p>The similarity index is the percentage of unchanged lines, and the dissimilarity index is the percentage of changed lines. It is a rounded down integer, followed by a percent sign. The similarity index value of 100% is thus reserved for two equal files, while 100% dissimilarity means that no line from the old file made it into the new one.</p>   <p>The index line includes the SHA-1 checksum before and after the change. The &lt;mode&gt; is included if the file mode does not change; otherwise, separate lines indicate the old and the new mode.</p>  </li> <li> <p>TAB, LF, double quote and backslash characters in pathnames are represented as <code>\\t</code>, <code>\\n</code>, <code>\\\"</code> and <code>\\\\</code>, respectively. If there is need for such substitution then the whole pathname is put in double quotes.</p> </li> <li> <p>All the <code>file1</code> files in the output refer to files before the commit, and all the <code>file2</code> files refer to files after the commit. It is incorrect to apply each change to each file sequentially. For example, this patch will swap a and b:</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>diff --git a/a b/b\nrename from a\nrename to b\ndiff --git a/b b/a\nrename from b\nrename to a</pre> </div> </div> </li> </ol> </div>\n</div>   <h2 id=\"_combined_diff_format\">Combined diff format</h2> <div class=\"sectionbody\"> <p>Any diff-generating command can take the <code>-c</code> or <code>--cc</code> option to produce a <code>combined diff</code> when showing a merge. This is the default format when showing merges with <a href=\"git-diff\">git-diff[1]</a> or <a href=\"git-show\">git-show[1]</a>. Note also that you can give the <code>-m</code> option to any of these commands to force generation of diffs with individual parents of a merge.</p>   <p>A <code>combined diff</code> format looks like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>diff --combined describe.c\nindex fabadb8,cc95eb0..4866510\n--- a/describe.c\n+++ b/describe.c\n@@@ -98,20 -98,12 +98,20 @@@\n        return (a_date &gt; b_date) ? -1 : (a_date == b_date) ? 0 : 1;\n  }\n\n- static void describe(char *arg)\n -static void describe(struct commit *cmit, int last_one)\n++static void describe(char *arg, int last_one)\n  {\n +        unsigned char sha1[20];\n +        struct commit *cmit;\n        struct commit_list *list;\n        static int initialized = 0;\n        struct commit_name *n;\n\n +        if (get_sha1(arg, sha1) &lt; 0)\n +                usage(describe_usage);\n +        cmit = lookup_commit_reference(sha1);\n +        if (!cmit)\n +                usage(describe_usage);\n +\n        if (!initialized) {\n                initialized = 1;\n                for_each_ref(get_name);</pre> </div> </div> <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>It is preceded with a \"git diff\" header, that looks like this (when <code>-c</code> option is used):</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>diff --combined file</pre> </div> </div>  <p>or like this (when <code>--cc</code> option is used):</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>diff --cc file</pre> </div> </div> </li> <li> <p>It is followed by one or more extended header lines (this example shows a merge with two parents):</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>index &lt;hash&gt;,&lt;hash&gt;..&lt;hash&gt;\nmode &lt;mode&gt;,&lt;mode&gt;..&lt;mode&gt;\nnew file mode &lt;mode&gt;\ndeleted file mode &lt;mode&gt;,&lt;mode&gt;</pre> </div> </div>  <p>The <code>mode &lt;mode&gt;,&lt;mode&gt;..&lt;mode&gt;</code> line appears only if at least one of the &lt;mode&gt; is different from the rest. Extended headers with information about detected contents movement (renames and copying detection) are designed to work with diff of two &lt;tree-ish&gt; and are not used by combined diff format.</p>  </li> <li> <p>It is followed by two-line from-file/to-file header</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>--- a/file\n+++ b/file</pre> </div> </div>  <p>Similar to two-line header for traditional <code>unified</code> diff format, <code>/dev/null</code> is used to signal created or deleted files.</p>  </li> <li> <p>Chunk header format is modified to prevent people from accidentally feeding it to <code>patch -p1</code>. Combined diff format was created for review of merge commit changes, and was not meant for apply. The change is similar to the change in the extended <code>index</code> header:</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>@@@ &lt;from-file-range&gt; &lt;from-file-range&gt; &lt;to-file-range&gt; @@@</pre> </div> </div>  <p>There are (number of parents + 1) <code>@</code> characters in the chunk header for combined diff format.</p>  </li> </ol> </div>  <p>Unlike the traditional <code>unified</code> diff format, which shows two files A and B with a single column that has <code>-</code> (minus — appears in A but removed in B), <code>+</code> (plus — missing in A but added to B), or <code>\" \"</code> (space — unchanged) prefix, this format compares two or more files file1, file2,…​ with one file X, and shows how X differs from each of fileN. One column for each of fileN is prepended to the output line to note how X’s line is different from it.</p>   <p>A <code>-</code> character in the column N means that the line appears in fileN but it does not appear in the result. A <code>+</code> character in the column N means that the line appears in the result, and fileN does not have that line (in other words, the line was added, from the point of view of that parent).</p>   <p>In the above example output, the function signature was changed from both files (hence two <code>-</code> removals from both file1 and file2, plus <code>++</code> to mean one line that was added does not appear in either file1 or file2). Also eight other lines are the same from file1 but do not appear in file2 (hence prefixed with <code>+</code>).</p>   <p>When shown by <code>git diff-tree -c</code>, it compares the parents of a merge commit with the merge result (i.e. file1..fileN are the parents). When shown by <code>git diff-files -c</code>, it compares the two unresolved merge parents with the working tree file (i.e. file1 is stage 2 aka \"our version\", file2 is stage 3 aka \"their version\").</p> </div>   <h2 id=\"_other_diff_formats\">Other diff formats</h2> <div class=\"sectionbody\"> <p>The <code>--summary</code> option describes newly added, deleted, renamed and copied files. The <code>--stat</code> option adds diffstat(1) graph to the output. These options can be combined with other options, such as <code>-p</code>, and are meant for human consumption.</p>   <p>When showing a change that involves a rename or a copy, <code>--stat</code> output formats the pathnames compactly by combining common prefix and suffix of the pathnames. For example, a change that moves <code>arch/i386/Makefile</code> to <code>arch/x86/Makefile</code> while modifying 4 lines will be shown like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>arch/{i386 =&gt; x86}/Makefile    |   4 +--</pre> </div> </div>  <p>The <code>--numstat</code> option gives the diffstat(1) information but is designed for easier machine consumption. An entry in <code>--numstat</code> output looks like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>1        2        README\n3        1        arch/{i386 =&gt; x86}/Makefile</pre> </div> </div>  <p>That is, from left to right:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>the number of added lines;</p> </li> <li> <p>a tab;</p> </li> <li> <p>the number of deleted lines;</p> </li> <li> <p>a tab;</p> </li> <li> <p>pathname (possibly with rename/copy information);</p> </li> <li> <p>a newline.</p> </li> </ol> </div>  <p>When <code>-z</code> output option is in effect, the output is formatted this way:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>1        2        README NUL\n3        1        NUL arch/i386/Makefile NUL arch/x86/Makefile NUL</pre> </div> </div>  <p>That is:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>the number of added lines;</p> </li> <li> <p>a tab;</p> </li> <li> <p>the number of deleted lines;</p> </li> <li> <p>a tab;</p> </li> <li> <p>a NUL (only exists if renamed/copied);</p> </li> <li> <p>pathname in preimage;</p> </li> <li> <p>a NUL (only exists if renamed/copied);</p> </li> <li> <p>pathname in postimage (only exists if renamed/copied);</p> </li> <li> <p>a NUL.</p> </li> </ol> </div>  <p>The extra <code>NUL</code> before the preimage path in renamed case is to allow scripts that read the output to tell if the current record being read is a single-path record or a rename/copy record without reading ahead. After reading added and deleted lines, reading up to <code>NUL</code> would yield the pathname, but if that is <code>NUL</code>, the record will show two paths.</p> </div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">Various ways to check your working tree</dt> <dd> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git diff            (1)\n$ git diff --cached   (2)\n$ git diff HEAD       (3)</pre> </div> </div> <div class=\"colist arabic\"> <ol> <li> <p>Changes in the working tree not yet staged for the next commit.</p> </li> <li> <p>Changes between the index and your last commit; what you would be committing if you run \"git commit\" without \"-a\" option.</p> </li> <li> <p>Changes in the working tree since your last commit; what you would be committing if you run \"git commit -a\"</p> </li> </ol> </div> </dd> <dt class=\"hdlist1\">Comparing with arbitrary commits</dt> <dd> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git diff test            (1)\n$ git diff HEAD -- ./test  (2)\n$ git diff HEAD^ HEAD      (3)</pre> </div> </div> <div class=\"colist arabic\"> <ol> <li> <p>Instead of using the tip of the current branch, compare with the tip of \"test\" branch.</p> </li> <li> <p>Instead of comparing with the tip of \"test\" branch, compare with the tip of the current branch, but limit the comparison to the file \"test\".</p> </li> <li> <p>Compare the version before the last commit and the last commit.</p> </li> </ol> </div> </dd> <dt class=\"hdlist1\">Comparing branches</dt> <dd> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git diff topic master    (1)\n$ git diff topic..master   (2)\n$ git diff topic...master  (3)</pre> </div> </div> <div class=\"colist arabic\"> <ol> <li> <p>Changes between the tips of the topic and the master branches.</p> </li> <li> <p>Same as above.</p> </li> <li> <p>Changes that occurred on the master branch since when the topic branch was started off it.</p> </li> </ol> </div> </dd> <dt class=\"hdlist1\">Limiting the diff output</dt> <dd> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git diff --diff-filter=MRC            (1)\n$ git diff --name-status                (2)\n$ git diff arch/i386 include/asm-i386   (3)</pre> </div> </div> <div class=\"colist arabic\"> <ol> <li> <p>Show only modification, rename, and copy, but not addition or deletion.</p> </li> <li> <p>Show only names and the nature of change, but not actual diff output.</p> </li> <li> <p>Limit diff output to named subtrees.</p> </li> </ol> </div> </dd> <dt class=\"hdlist1\">Munging the diff output</dt> <dd> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git diff --find-copies-harder -B -C  (1)\n$ git diff -R                          (2)</pre> </div> </div> <div class=\"colist arabic\"> <ol> <li> <p>Spend extra cycles to find renames, copies and complete rewrites (very expensive).</p> </li> <li> <p>Output diff in reverse.</p> </li> </ol> </div> </dd> </dl> </div></div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p>diff(1), <a href=\"git-difftool\">git-difftool[1]</a>, <a href=\"git-log\">git-log[1]</a>, <a href=\"gitdiffcore\">gitdiffcore[7]</a>, <a href=\"git-format-patch\">git-format-patch[1]</a>, <a href=\"git-apply\">git-apply[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-diff\" class=\"_attribution-link\">https://git-scm.com/docs/git-diff</a>\n  </p>\n</div>\n","git-tag":"<h1>git-tag</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-tag - Create, list, delete or verify a tag object signed with GPG</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git tag [-a | -s | -u &lt;keyid&gt;] [-f] [-m &lt;msg&gt; | -F &lt;file&gt;]\n        &lt;tagname&gt; [&lt;commit&gt; | &lt;object&gt;]\ngit tag -d &lt;tagname&gt;…​\ngit tag [-n[&lt;num&gt;]] -l [--contains &lt;commit&gt;] [--points-at &lt;object&gt;]\n        [--column[=&lt;options&gt;] | --no-column] [--create-reflog] [--sort=&lt;key&gt;]\n        [--format=&lt;format&gt;] [--[no-]merged [&lt;commit&gt;]] [&lt;pattern&gt;…​]\ngit tag -v &lt;tagname&gt;…​</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Add a tag reference in <code>refs/tags/</code>, unless <code>-d/-l/-v</code> is given to delete, list or verify tags.</p>   <p>Unless <code>-f</code> is given, the named tag must not yet exist.</p>   <p>If one of <code>-a</code>, <code>-s</code>, or <code>-u &lt;keyid&gt;</code> is passed, the command creates a <code>tag</code> object, and requires a tag message. Unless <code>-m &lt;msg&gt;</code> or <code>-F &lt;file&gt;</code> is given, an editor is started for the user to type in the tag message.</p>   <p>If <code>-m &lt;msg&gt;</code> or <code>-F &lt;file&gt;</code> is given and <code>-a</code>, <code>-s</code>, and <code>-u &lt;keyid&gt;</code> are absent, <code>-a</code> is implied.</p>   <p>Otherwise just a tag reference for the SHA-1 object name of the commit object is created (i.e. a lightweight tag).</p>   <p>A GnuPG signed tag object will be created when <code>-s</code> or <code>-u\n&lt;keyid&gt;</code> is used. When <code>-u &lt;keyid&gt;</code> is not used, the committer identity for the current user is used to find the GnuPG key for signing. The configuration variable <code>gpg.program</code> is used to specify custom GnuPG binary.</p>   <p>Tag objects (created with <code>-a</code>, <code>-s</code>, or <code>-u</code>) are called \"annotated\" tags; they contain a creation date, the tagger name and e-mail, a tagging message, and an optional GnuPG signature. Whereas a \"lightweight\" tag is simply a name for an object (usually a commit object).</p>   <p>Annotated tags are meant for release while lightweight tags are meant for private or temporary object labels. For this reason, some git commands for naming objects (like <code>git describe</code>) will ignore lightweight tags by default.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-a</dt> <dt class=\"hdlist1\">--annotate</dt> <dd> <p>Make an unsigned, annotated tag object</p> </dd> <dt class=\"hdlist1\">-s</dt> <dt class=\"hdlist1\">--sign</dt> <dd> <p>Make a GPG-signed tag, using the default e-mail address’s key.</p> </dd> <dt class=\"hdlist1\">-u &lt;keyid&gt;</dt> <dt class=\"hdlist1\">--local-user=&lt;keyid&gt;</dt> <dd> <p>Make a GPG-signed tag, using the given key.</p> </dd> <dt class=\"hdlist1\">-f</dt> <dt class=\"hdlist1\">--force</dt> <dd> <p>Replace an existing tag with the given name (instead of failing)</p> </dd> <dt class=\"hdlist1\">-d</dt> <dt class=\"hdlist1\">--delete</dt> <dd> <p>Delete existing tags with the given names.</p> </dd> <dt class=\"hdlist1\">-v</dt> <dt class=\"hdlist1\">--verify</dt> <dd> <p>Verify the GPG signature of the given tag names.</p> </dd> <dt class=\"hdlist1\">-n&lt;num&gt;</dt> <dd> <p>&lt;num&gt; specifies how many lines from the annotation, if any, are printed when using -l. The default is not to print any annotation lines. If no number is given to <code>-n</code>, only the first line is printed. If the tag is not annotated, the commit message is displayed instead.</p> </dd> <dt class=\"hdlist1\">-l &lt;pattern&gt;</dt> <dt class=\"hdlist1\">--list &lt;pattern&gt;</dt> <dd> <p>List tags with names that match the given pattern (or all if no pattern is given). Running \"git tag\" without arguments also lists all tags. The pattern is a shell wildcard (i.e., matched using fnmatch(3)). Multiple patterns may be given; if any of them matches, the tag is shown.</p> </dd> <dt class=\"hdlist1\">--sort=&lt;key&gt;</dt> <dd> <p>Sort based on the key given. Prefix <code>-</code> to sort in descending order of the value. You may use the --sort=&lt;key&gt; option multiple times, in which case the last key becomes the primary key. Also supports \"version:refname\" or \"v:refname\" (tag names are treated as versions). The \"version:refname\" sort order can also be affected by the \"versionsort.prereleaseSuffix\" configuration variable. The keys supported are the same as those in <code>git for-each-ref</code>. Sort order defaults to the value configured for the <code>tag.sort</code> variable if it exists, or lexicographic order otherwise. See <a href=\"git-config\">git-config[1]</a>.</p> </dd> <dt class=\"hdlist1\">--column[=&lt;options&gt;]</dt> <dt class=\"hdlist1\">--no-column</dt> <dd> <p>Display tag listing in columns. See configuration variable column.tag for option syntax.<code>--column</code> and <code>--no-column</code> without options are equivalent to <code>always</code> and <code>never</code> respectively.</p>  <p>This option is only applicable when listing tags without annotation lines.</p>  </dd> <dt class=\"hdlist1\">--contains [&lt;commit&gt;]</dt> <dd> <p>Only list tags which contain the specified commit (HEAD if not specified).</p> </dd> <dt class=\"hdlist1\">--points-at &lt;object&gt;</dt> <dd> <p>Only list tags of the given object.</p> </dd> <dt class=\"hdlist1\">-m &lt;msg&gt;</dt> <dt class=\"hdlist1\">--message=&lt;msg&gt;</dt> <dd> <p>Use the given tag message (instead of prompting). If multiple <code>-m</code> options are given, their values are concatenated as separate paragraphs. Implies <code>-a</code> if none of <code>-a</code>, <code>-s</code>, or <code>-u &lt;keyid&gt;</code> is given.</p> </dd> <dt class=\"hdlist1\">-F &lt;file&gt;</dt> <dt class=\"hdlist1\">--file=&lt;file&gt;</dt> <dd> <p>Take the tag message from the given file. Use <code>-</code> to read the message from the standard input. Implies <code>-a</code> if none of <code>-a</code>, <code>-s</code>, or <code>-u &lt;keyid&gt;</code> is given.</p> </dd> <dt class=\"hdlist1\">--cleanup=&lt;mode&gt;</dt> <dd> <p>This option sets how the tag message is cleaned up. The <code>&lt;mode&gt;</code> can be one of <code>verbatim</code>, <code>whitespace</code> and <code>strip</code>. The <code>strip</code> mode is default. The <code>verbatim</code> mode does not change message at all, <code>whitespace</code> removes just leading/trailing whitespace lines and <code>strip</code> removes both whitespace and commentary.</p> </dd> <dt class=\"hdlist1\">--create-reflog</dt> <dd> <p>Create a reflog for the tag.</p> </dd> <dt class=\"hdlist1\">&lt;tagname&gt;</dt> <dd> <p>The name of the tag to create, delete, or describe. The new tag name must pass all checks defined by <a href=\"git-check-ref-format\">git-check-ref-format[1]</a>. Some of these checks may restrict the characters allowed in a tag name.</p> </dd> <dt class=\"hdlist1\">&lt;commit&gt;</dt> <dt class=\"hdlist1\">&lt;object&gt;</dt> <dd> <p>The object that the new tag will refer to, usually a commit. Defaults to HEAD.</p> </dd> <dt class=\"hdlist1\">&lt;format&gt;</dt> <dd> <p>A string that interpolates <code>%(fieldname)</code> from the object pointed at by a ref being shown. The format is the same as that of <a href=\"git-for-each-ref\">git-for-each-ref[1]</a>. When unspecified, defaults to <code>%(refname:strip=2)</code>.</p> </dd> <dt class=\"hdlist1\">--[no-]merged [&lt;commit&gt;]</dt> <dd> <p>Only list tags whose tips are reachable, or not reachable if <code>--no-merged</code> is used, from the specified commit (<code>HEAD</code> if not specified).</p> </dd> </dl> </div></div>   <h2 id=\"_configuration\">Configuration</h2> <div class=\"sectionbody\"> <p>By default, <code>git tag</code> in sign-with-default mode (-s) will use your committer identity (of the form <code>Your Name &lt;your@email.address&gt;</code>) to find a key. If you want to use a different default key, you can specify it in the repository configuration as follows:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>[user]\n    signingKey = &lt;gpg-keyid&gt;</pre> </div> </div>\n</div>   <h2 id=\"_discussion\">Discussion</h2> <div class=\"sectionbody\">\n<div class=\"sect2\"> <h3 id=\"_on_re_tagging\">On Re-tagging</h3>  <p>What should you do when you tag a wrong commit and you would want to re-tag?</p>   <p>If you never pushed anything out, just re-tag it. Use \"-f\" to replace the old one. And you’re done.</p>   <p>But if you have pushed things out (or others could just read your repository directly), then others will have already seen the old tag. In that case you can do one of two things:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>The sane thing. Just admit you screwed up, and use a different name. Others have already seen one tag-name, and if you keep the same name, you may be in the situation that two people both have \"version X\", but they actually have <code>different</code> \"X\"'s. So just call it \"X.1\" and be done with it.</p> </li> <li> <p>The insane thing. You really want to call the new version \"X\" too, <code>even though</code> others have already seen the old one. So just use <code>git tag -f</code> again, as if you hadn’t already published the old one.</p> </li> </ol> </div>  <p>However, Git does <strong>not</strong> (and it should not) change tags behind users back. So if somebody already got the old tag, doing a <code>git pull</code> on your tree shouldn’t just make them overwrite the old one.</p>   <p>If somebody got a release tag from you, you cannot just change the tag for them by updating your own one. This is a big security issue, in that people MUST be able to trust their tag-names. If you really want to do the insane thing, you need to just fess up to it, and tell people that you messed up. You can do that by making a very public announcement saying:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>Ok, I messed up, and I pushed out an earlier version tagged as X. I\nthen fixed something, and retagged the *fixed* tree as X again.\n\nIf you got the wrong tag, and want the new one, please delete\nthe old one and fetch the new one by doing:\n\n        git tag -d X\n        git fetch origin tag X\n\nto get my updated tag.\n\nYou can test which tag you have by doing\n\n        git rev-parse X\n\nwhich should return 0123456789abcdef.. if you have the new version.\n\nSorry for the inconvenience.</pre> </div> </div>  <p>Does this seem a bit complicated? It <strong>should</strong> be. There is no way that it would be correct to just \"fix\" it automatically. People need to know that their tags might have been changed.</p>  </div> <div class=\"sect2\"> <h3 id=\"_on_automatic_following\">On Automatic following</h3>  <p>If you are following somebody else’s tree, you are most likely using remote-tracking branches (<code>refs/heads/origin</code> in traditional layout, or <code>refs/remotes/origin/master</code> in the separate-remote layout). You usually want the tags from the other end.</p>   <p>On the other hand, if you are fetching because you would want a one-shot merge from somebody else, you typically do not want to get tags from there. This happens more often for people near the toplevel but not limited to them. Mere mortals when pulling from each other do not necessarily want to automatically get private anchor point tags from the other person.</p>   <p>Often, \"please pull\" messages on the mailing list just provide two pieces of information: a repo URL and a branch name; this is designed to be easily cut&amp;pasted at the end of a <code>git fetch</code> command line:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>Linus, please pull from\n\n        git://git..../proj.git master\n\nto get the following updates...</pre> </div> </div>  <p>becomes:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git pull git://git..../proj.git master</pre> </div> </div>  <p>In such a case, you do not want to automatically follow the other person’s tags.</p>   <p>One important aspect of Git is its distributed nature, which largely means there is no inherent \"upstream\" or \"downstream\" in the system. On the face of it, the above example might seem to indicate that the tag namespace is owned by the upper echelon of people and that tags only flow downwards, but that is not the case. It only shows that the usage pattern determines who are interested in whose tags.</p>   <p>A one-shot pull is a sign that a commit history is now crossing the boundary between one circle of people (e.g. \"people who are primarily interested in the networking part of the kernel\") who may have their own set of tags (e.g. \"this is the third release candidate from the networking group to be proposed for general consumption with 2.6.21 release\") to another circle of people (e.g. \"people who integrate various subsystem improvements\"). The latter are usually not interested in the detailed tags used internally in the former group (that is what \"internal\" means). That is why it is desirable not to follow tags automatically in this case.</p>   <p>It may well be that among networking people, they may want to exchange the tags internal to their group, but in that workflow they are most likely tracking each other’s progress by having remote-tracking branches. Again, the heuristic to automatically follow such tags is a good thing.</p>  </div> <div class=\"sect2\"> <h3 id=\"_on_backdating_tags\">On Backdating Tags</h3>  <p>If you have imported some changes from another VCS and would like to add tags for major releases of your work, it is useful to be able to specify the date to embed inside of the tag object; such data in the tag object affects, for example, the ordering of tags in the gitweb interface.</p>   <p>To set the date used in future tag objects, set the environment variable GIT_COMMITTER_DATE (see the later discussion of possible values; the most common form is \"YYYY-MM-DD HH:MM\").</p>   <p>For example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ GIT_COMMITTER_DATE=\"2006-10-02 10:31\" git tag -s v1.0.1</pre> </div> </div> </div>\n</div>   <h2 id=\"_date_formats\">Date formats</h2> <div class=\"sectionbody\"> <p>The <code>GIT_AUTHOR_DATE</code>, <code>GIT_COMMITTER_DATE</code> environment variables support the following date formats:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">Git internal format</dt> <dd> <p>It is <code>&lt;unix timestamp&gt; &lt;time zone offset&gt;</code>, where <code>&lt;unix\ntimestamp&gt;</code> is the number of seconds since the UNIX epoch. <code>&lt;time zone offset&gt;</code> is a positive or negative offset from UTC. For example CET (which is 2 hours ahead UTC) is <code>+0200</code>.</p> </dd> <dt class=\"hdlist1\">RFC 2822</dt> <dd> <p>The standard email format as described by RFC 2822, for example <code>Thu, 07 Apr 2005 22:13:13 +0200</code>.</p> </dd> <dt class=\"hdlist1\">ISO 8601</dt> <dd> <p>Time and date specified by the ISO 8601 standard, for example <code>2005-04-07T22:13:13</code>. The parser accepts a space instead of the <code>T</code> character as well.</p> <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> In addition, the date part is accepted in the following formats: <code>YYYY.MM.DD</code>, <code>MM/DD/YYYY</code> and <code>DD.MM.YYYY</code>. </td> </tr> </table> </div> </dd> </dl> </div>\n</div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-check-ref-format\">git-check-ref-format[1]</a>. <a href=\"git-config\">git-config[1]</a>.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-tag\" class=\"_attribution-link\">https://git-scm.com/docs/git-tag</a>\n  </p>\n</div>\n","git-remote":"<h1>git-remote</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-remote - Manage set of tracked repositories</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git remote [-v | --verbose]\ngit remote add [-t &lt;branch&gt;] [-m &lt;master&gt;] [-f] [--[no-]tags] [--mirror=&lt;fetch|push&gt;] &lt;name&gt; &lt;url&gt;\ngit remote rename &lt;old&gt; &lt;new&gt;\ngit remote remove &lt;name&gt;\ngit remote set-head &lt;name&gt; (-a | --auto | -d | --delete | &lt;branch&gt;)\ngit remote set-branches [--add] &lt;name&gt; &lt;branch&gt;…​\ngit remote get-url [--push] [--all] &lt;name&gt;\ngit remote set-url [--push] &lt;name&gt; &lt;newurl&gt; [&lt;oldurl&gt;]\ngit remote set-url --add [--push] &lt;name&gt; &lt;newurl&gt;\ngit remote set-url --delete [--push] &lt;name&gt; &lt;url&gt;\ngit remote [-v | --verbose] show [-n] &lt;name&gt;…​\ngit remote prune [-n | --dry-run] &lt;name&gt;…​\ngit remote [-v | --verbose] update [-p | --prune] [(&lt;group&gt; | &lt;remote&gt;)…​]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Manage the set of repositories (\"remotes\") whose branches you track.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-v</dt> <dt class=\"hdlist1\">--verbose</dt> <dd> <p>Be a little more verbose and show remote url after name. NOTE: This must be placed between <code>remote</code> and <code>subcommand</code>.</p> </dd> </dl> </div></div>   <h2 id=\"_commands\">Commands</h2> <div class=\"sectionbody\"> <p>With no arguments, shows a list of existing remotes. Several subcommands are available to perform operations on the remotes.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><em>add</em></dt> <dd> <p>Adds a remote named &lt;name&gt; for the repository at &lt;url&gt;. The command <code>git fetch &lt;name&gt;</code> can then be used to create and update remote-tracking branches &lt;name&gt;/&lt;branch&gt;.</p>  <p>With <code>-f</code> option, <code>git fetch &lt;name&gt;</code> is run immediately after the remote information is set up.</p>   <p>With <code>--tags</code> option, <code>git fetch &lt;name&gt;</code> imports every tag from the remote repository.</p>   <p>With <code>--no-tags</code> option, <code>git fetch &lt;name&gt;</code> does not import tags from the remote repository.</p>   <p>By default, only tags on fetched branches are imported (see <a href=\"git-fetch\">git-fetch[1]</a>).</p>   <p>With <code>-t &lt;branch&gt;</code> option, instead of the default glob refspec for the remote to track all branches under the <code>refs/remotes/&lt;name&gt;/</code> namespace, a refspec to track only <code>&lt;branch&gt;</code> is created. You can give more than one <code>-t &lt;branch&gt;</code> to track multiple branches without grabbing all branches.</p>   <p>With <code>-m &lt;master&gt;</code> option, a symbolic-ref <code>refs/remotes/&lt;name&gt;/HEAD</code> is set up to point at remote’s <code>&lt;master&gt;</code> branch. See also the set-head command.</p>   <p>When a fetch mirror is created with <code>--mirror=fetch</code>, the refs will not be stored in the <code>refs/remotes/</code> namespace, but rather everything in <code>refs/</code> on the remote will be directly mirrored into <code>refs/</code> in the local repository. This option only makes sense in bare repositories, because a fetch would overwrite any local commits.</p>   <p>When a push mirror is created with <code>--mirror=push</code>, then <code>git push</code> will always behave as if <code>--mirror</code> was passed.</p>  </dd> <dt class=\"hdlist1\"><em>rename</em></dt> <dd> <p>Rename the remote named &lt;old&gt; to &lt;new&gt;. All remote-tracking branches and configuration settings for the remote are updated.</p>  <p>In case &lt;old&gt; and &lt;new&gt; are the same, and &lt;old&gt; is a file under <code>$GIT_DIR/remotes</code> or <code>$GIT_DIR/branches</code>, the remote is converted to the configuration file format.</p>  </dd> <dt class=\"hdlist1\"><em>remove</em></dt> <dt class=\"hdlist1\"><em>rm</em></dt> <dd> <p>Remove the remote named &lt;name&gt;. All remote-tracking branches and configuration settings for the remote are removed.</p> </dd> <dt class=\"hdlist1\"><em>set-head</em></dt> <dd> <p>Sets or deletes the default branch (i.e. the target of the symbolic-ref <code>refs/remotes/&lt;name&gt;/HEAD</code>) for the named remote. Having a default branch for a remote is not required, but allows the name of the remote to be specified in lieu of a specific branch. For example, if the default branch for <code>origin</code> is set to <code>master</code>, then <code>origin</code> may be specified wherever you would normally specify <code>origin/master</code>.</p>  <p>With <code>-d</code> or <code>--delete</code>, the symbolic ref <code>refs/remotes/&lt;name&gt;/HEAD</code> is deleted.</p>   <p>With <code>-a</code> or <code>--auto</code>, the remote is queried to determine its <code>HEAD</code>, then the symbolic-ref <code>refs/remotes/&lt;name&gt;/HEAD</code> is set to the same branch. e.g., if the remote <code>HEAD</code> is pointed at <code>next</code>, \"<code>git remote set-head origin -a</code>\" will set the symbolic-ref <code>refs/remotes/origin/HEAD</code> to <code>refs/remotes/origin/next</code>. This will only work if <code>refs/remotes/origin/next</code> already exists; if not it must be fetched first.</p>   <p>Use <code>&lt;branch&gt;</code> to set the symbolic-ref <code>refs/remotes/&lt;name&gt;/HEAD</code> explicitly. e.g., \"git remote set-head origin master\" will set the symbolic-ref <code>refs/remotes/origin/HEAD</code> to <code>refs/remotes/origin/master</code>. This will only work if <code>refs/remotes/origin/master</code> already exists; if not it must be fetched first.</p>  </dd> <dt class=\"hdlist1\"><em>set-branches</em></dt> <dd> <p>Changes the list of branches tracked by the named remote. This can be used to track a subset of the available remote branches after the initial setup for a remote.</p>  <p>The named branches will be interpreted as if specified with the <code>-t</code> option on the <code>git remote add</code> command line.</p>   <p>With <code>--add</code>, instead of replacing the list of currently tracked branches, adds to that list.</p>  </dd> <dt class=\"hdlist1\"><em>get-url</em></dt> <dd> <p>Retrieves the URLs for a remote. Configurations for <code>insteadOf</code> and <code>pushInsteadOf</code> are expanded here. By default, only the first URL is listed.</p>  <p>With <code>--push</code>, push URLs are queried rather than fetch URLs.</p>   <p>With <code>--all</code>, all URLs for the remote will be listed.</p>  </dd> <dt class=\"hdlist1\"><em>set-url</em></dt> <dd> <p>Changes URLs for the remote. Sets first URL for remote &lt;name&gt; that matches regex &lt;oldurl&gt; (first URL if no &lt;oldurl&gt; is given) to &lt;newurl&gt;. If &lt;oldurl&gt; doesn’t match any URL, an error occurs and nothing is changed.</p>  <p>With <code>--push</code>, push URLs are manipulated instead of fetch URLs.</p>   <p>With <code>--add</code>, instead of changing existing URLs, new URL is added.</p>   <p>With <code>--delete</code>, instead of changing existing URLs, all URLs matching regex &lt;url&gt; are deleted for remote &lt;name&gt;. Trying to delete all non-push URLs is an error.</p>   <p>Note that the push URL and the fetch URL, even though they can be set differently, must still refer to the same place. What you pushed to the push URL should be what you would see if you immediately fetched from the fetch URL. If you are trying to fetch from one place (e.g. your upstream) and push to another (e.g. your publishing repository), use two separate remotes.</p>  </dd> <dt class=\"hdlist1\"><em>show</em></dt> <dd> <p>Gives some information about the remote &lt;name&gt;.</p>  <p>With <code>-n</code> option, the remote heads are not queried first with <code>git ls-remote &lt;name&gt;</code>; cached information is used instead.</p>  </dd> <dt class=\"hdlist1\"><em>prune</em></dt> <dd> <p>Deletes all stale remote-tracking branches under &lt;name&gt;. These stale branches have already been removed from the remote repository referenced by &lt;name&gt;, but are still locally available in \"remotes/&lt;name&gt;\".</p>  <p>With <code>--dry-run</code> option, report what branches will be pruned, but do not actually prune them.</p>  </dd> <dt class=\"hdlist1\"><em>update</em></dt> <dd> <p>Fetch updates for a named set of remotes in the repository as defined by remotes.&lt;group&gt;. If a named group is not specified on the command line, the configuration parameter remotes.default will be used; if remotes.default is not defined, all remotes which do not have the configuration parameter remote.&lt;name&gt;.skipDefaultUpdate set to true will be updated. (See <a href=\"git-config\">git-config[1]</a>).</p>  <p>With <code>--prune</code> option, prune all the remotes that are updated.</p>  </dd> </dl> </div>\n</div>   <h2 id=\"_discussion\">Discussion</h2> <div class=\"sectionbody\"> <p>The remote configuration is achieved using the <code>remote.origin.url</code> and <code>remote.origin.fetch</code> configuration variables. (See <a href=\"git-config\">git-config[1]</a>).</p> </div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"><div class=\"ulist\"> <ul> <li> <p>Add a new remote, fetch, and check out a branch from it</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git remote\norigin\n$ git branch -r\n  origin/HEAD -&gt; origin/master\n  origin/master\n$ git remote add staging git://git.kernel.org/.../gregkh/staging.git\n$ git remote\norigin\nstaging\n$ git fetch staging\n...\nFrom git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging\n * [new branch]      master     -&gt; staging/master\n * [new branch]      staging-linus -&gt; staging/staging-linus\n * [new branch]      staging-next -&gt; staging/staging-next\n$ git branch -r\n  origin/HEAD -&gt; origin/master\n  origin/master\n  staging/master\n  staging/staging-linus\n  staging/staging-next\n$ git checkout -b staging staging/master\n...</pre> </div> </div> </li> <li> <p>Imitate <code>git clone</code> but track only selected branches</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ mkdir project.git\n$ cd project.git\n$ git init\n$ git remote add -f -t master -m master origin git://example.com/git.git/\n$ git merge origin</pre> </div> </div> </li> </ul> </div></div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-fetch\">git-fetch[1]</a> <a href=\"git-branch\">git-branch[1]</a> <a href=\"git-config\">git-config[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-remote\" class=\"_attribution-link\">https://git-scm.com/docs/git-remote</a>\n  </p>\n</div>\n","git-shortlog":"<h1>git-shortlog</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-shortlog - Summarize <code>git log</code> output</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git log --pretty=short | git shortlog [&lt;options&gt;]\ngit shortlog [&lt;options&gt;] [&lt;revision range&gt;] [[\\--] &lt;path&gt;…​]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Summarizes <code>git log</code> output in a format suitable for inclusion in release announcements. Each commit will be grouped by author and title.</p>   <p>Additionally, \"[PATCH]\" will be stripped from the commit description.</p>   <p>If no revisions are passed on the command line and either standard input is not a terminal or there is no current branch, <code>git shortlog</code> will output a summary of the log read from standard input, without reference to the current repository.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-n</dt> <dt class=\"hdlist1\">--numbered</dt> <dd> <p>Sort output according to the number of commits per author instead of author alphabetic order.</p> </dd> <dt class=\"hdlist1\">-s</dt> <dt class=\"hdlist1\">--summary</dt> <dd> <p>Suppress commit description and provide a commit count summary only.</p> </dd> <dt class=\"hdlist1\">-e</dt> <dt class=\"hdlist1\">--email</dt> <dd> <p>Show the email address of each author.</p> </dd> <dt class=\"hdlist1\">--format[=&lt;format&gt;]</dt> <dd> <p>Instead of the commit subject, use some other information to describe each commit. <code>&lt;format&gt;</code> can be any string accepted by the <code>--format</code> option of <code>git log</code>, such as <code>* [%h] %s</code>. (See the \"PRETTY FORMATS\" section of <a href=\"git-log\">git-log[1]</a>.)</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>Each pretty-printed commit will be rewrapped before it is shown.</pre> </div> </div> </dd> <dt class=\"hdlist1\">-w[&lt;width&gt;[,&lt;indent1&gt;[,&lt;indent2&gt;]]]</dt> <dd> <p>Linewrap the output by wrapping each line at <code>width</code>. The first line of each entry is indented by <code>indent1</code> spaces, and the second and subsequent lines are indented by <code>indent2</code> spaces. <code>width</code>, <code>indent1</code>, and <code>indent2</code> default to 76, 6 and 9 respectively.</p>  <p>If width is <code>0</code> (zero) then indent the lines of the output without wrapping them.</p>  </dd> <dt class=\"hdlist1\">&lt;revision range&gt;</dt> <dd> <p>Show only commits in the specified revision range. When no &lt;revision range&gt; is specified, it defaults to <code>HEAD</code> (i.e. the whole history leading to the current commit). <code>origin..HEAD</code> specifies all the commits reachable from the current commit (i.e. <code>HEAD</code>), but not from <code>origin</code>. For a complete list of ways to spell &lt;revision range&gt;, see the \"Specifying Ranges\" section of <a href=\"gitrevisions\">gitrevisions[7]</a>.</p> </dd> <dt class=\"hdlist1\">[\\--] &lt;path&gt;…​</dt> <dd> <p>Consider only commits that are enough to explain how the files that match the specified paths came to be.</p>  <p>Paths may need to be prefixed with \"-- \" to separate them from options or the revision range, when confusion arises.</p>  </dd> </dl> </div></div>   <h2 id=\"_mapping_authors\">Mapping authors</h2> <div class=\"sectionbody\"> <p>The <code>.mailmap</code> feature is used to coalesce together commits by the same person in the shortlog, where their name and/or email address was spelled differently.</p>   <p>If the file <code>.mailmap</code> exists at the toplevel of the repository, or at the location pointed to by the mailmap.file or mailmap.blob configuration options, it is used to map author and committer names and email addresses to canonical real names and email addresses.</p>   <p>In the simple form, each line in the file consists of the canonical real name of an author, whitespace, and an email address used in the commit (enclosed by <code>&lt;</code> and <code>&gt;</code>) to map to the name. For example:</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"literalblock\"> <div class=\"content\"> <pre>Proper Name &lt;commit@email.xx&gt;</pre> </div> </div> </div> </div>  <p>The more complex forms are:</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;proper@email.xx&gt; &lt;commit@email.xx&gt;</pre> </div> </div> </div> </div>  <p>which allows mailmap to replace only the email part of a commit, and:</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"literalblock\"> <div class=\"content\"> <pre>Proper Name &lt;proper@email.xx&gt; &lt;commit@email.xx&gt;</pre> </div> </div> </div> </div>  <p>which allows mailmap to replace both the name and the email of a commit matching the specified commit email address, and:</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"literalblock\"> <div class=\"content\"> <pre>Proper Name &lt;proper@email.xx&gt; Commit Name &lt;commit@email.xx&gt;</pre> </div> </div> </div> </div>  <p>which allows mailmap to replace both the name and the email of a commit matching both the specified commit name and email address.</p>   <p>Example 1: Your history contains commits by two authors, Jane and Joe, whose names appear in the repository under several forms:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>Joe Developer &lt;joe@example.com&gt;\nJoe R. Developer &lt;joe@example.com&gt;\nJane Doe &lt;jane@example.com&gt;\nJane Doe &lt;jane@laptop.(none)&gt;\nJane D. &lt;jane@desktop.(none)&gt;</pre> </div> </div>  <p>Now suppose that Joe wants his middle name initial used, and Jane prefers her family name fully spelled out. A proper <code>.mailmap</code> file would look like:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>Jane Doe         &lt;jane@desktop.(none)&gt;\nJoe R. Developer &lt;joe@example.com&gt;</pre> </div> </div>  <p>Note how there is no need for an entry for <code>&lt;jane@laptop.(none)&gt;</code>, because the real name of that author is already correct.</p>   <p>Example 2: Your repository contains commits from the following authors:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>nick1 &lt;bugs@company.xx&gt;\nnick2 &lt;bugs@company.xx&gt;\nnick2 &lt;nick2@company.xx&gt;\nsanta &lt;me@company.xx&gt;\nclaus &lt;me@company.xx&gt;\nCTO &lt;cto@coompany.xx&gt;</pre> </div> </div>  <p>Then you might want a <code>.mailmap</code> file that looks like:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>&lt;cto@company.xx&gt;                       &lt;cto@coompany.xx&gt;\nSome Dude &lt;some@dude.xx&gt;         nick1 &lt;bugs@company.xx&gt;\nOther Author &lt;other@author.xx&gt;   nick2 &lt;bugs@company.xx&gt;\nOther Author &lt;other@author.xx&gt;         &lt;nick2@company.xx&gt;\nSanta Claus &lt;santa.claus@northpole.xx&gt; &lt;me@company.xx&gt;</pre> </div> </div>  <p>Use hash <code>#</code> for comments that are either on their own line, or after the email address.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-shortlog\" class=\"_attribution-link\">https://git-scm.com/docs/git-shortlog</a>\n  </p>\n</div>\n","git-apply":"<h1>git-apply</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-apply - Apply a patch to files and/or to the index</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git apply [--stat] [--numstat] [--summary] [--check] [--index] [--3way]\n          [--apply] [--no-add] [--build-fake-ancestor=&lt;file&gt;] [-R | --reverse]\n          [--allow-binary-replacement | --binary] [--reject] [-z]\n          [-p&lt;n&gt;] [-C&lt;n&gt;] [--inaccurate-eof] [--recount] [--cached]\n          [--ignore-space-change | --ignore-whitespace]\n          [--whitespace=(nowarn|warn|fix|error|error-all)]\n          [--exclude=&lt;path&gt;] [--include=&lt;path&gt;] [--directory=&lt;root&gt;]\n          [--verbose] [--unsafe-paths] [&lt;patch&gt;…​]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Reads the supplied diff output (i.e. \"a patch\") and applies it to files. When running from a subdirectory in a repository, patched paths outside the directory are ignored. With the <code>--index</code> option the patch is also applied to the index, and with the <code>--cached</code> option the patch is only applied to the index. Without these options, the command applies the patch only to files, and does not require them to be in a Git repository.</p>   <p>This command applies the patch but does not create a commit. Use <a href=\"git-am\">git-am[1]</a> to create commits from patches generated by <a href=\"git-format-patch\">git-format-patch[1]</a> and/or received by email.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">&lt;patch&gt;…​</dt> <dd> <p>The files to read the patch from. <code>-</code> can be used to read from the standard input.</p> </dd> <dt class=\"hdlist1\">--stat</dt> <dd> <p>Instead of applying the patch, output diffstat for the input. Turns off \"apply\".</p> </dd> <dt class=\"hdlist1\">--numstat</dt> <dd> <p>Similar to <code>--stat</code>, but shows the number of added and deleted lines in decimal notation and the pathname without abbreviation, to make it more machine friendly. For binary files, outputs two <code>-</code> instead of saying <code>0 0</code>. Turns off \"apply\".</p> </dd> <dt class=\"hdlist1\">--summary</dt> <dd> <p>Instead of applying the patch, output a condensed summary of information obtained from git diff extended headers, such as creations, renames and mode changes. Turns off \"apply\".</p> </dd> <dt class=\"hdlist1\">--check</dt> <dd> <p>Instead of applying the patch, see if the patch is applicable to the current working tree and/or the index file and detects errors. Turns off \"apply\".</p> </dd> <dt class=\"hdlist1\">--index</dt> <dd> <p>When <code>--check</code> is in effect, or when applying the patch (which is the default when none of the options that disables it is in effect), make sure the patch is applicable to what the current index file records. If the file to be patched in the working tree is not up-to-date, it is flagged as an error. This flag also causes the index file to be updated.</p> </dd> <dt class=\"hdlist1\">--cached</dt> <dd> <p>Apply a patch without touching the working tree. Instead take the cached data, apply the patch, and store the result in the index without using the working tree. This implies <code>--index</code>.</p> </dd> <dt class=\"hdlist1\">-3</dt> <dt class=\"hdlist1\">--3way</dt> <dd> <p>When the patch does not apply cleanly, fall back on 3-way merge if the patch records the identity of blobs it is supposed to apply to, and we have those blobs available locally, possibly leaving the conflict markers in the files in the working tree for the user to resolve. This option implies the <code>--index</code> option, and is incompatible with the <code>--reject</code> and the <code>--cached</code> options.</p> </dd> <dt class=\"hdlist1\">--build-fake-ancestor=&lt;file&gt;</dt> <dd> <p>Newer <code>git diff</code> output has embedded <code>index information</code> for each blob to help identify the original version that the patch applies to. When this flag is given, and if the original versions of the blobs are available locally, builds a temporary index containing those blobs.</p>  <p>When a pure mode change is encountered (which has no index information), the information is read from the current index instead.</p>  </dd> <dt class=\"hdlist1\">-R</dt> <dt class=\"hdlist1\">--reverse</dt> <dd> <p>Apply the patch in reverse.</p> </dd> <dt class=\"hdlist1\">--reject</dt> <dd> <p>For atomicity, <code>git apply</code> by default fails the whole patch and does not touch the working tree when some of the hunks do not apply. This option makes it apply the parts of the patch that are applicable, and leave the rejected hunks in corresponding *.rej files.</p> </dd> <dt class=\"hdlist1\">-z</dt> <dd> <p>When <code>--numstat</code> has been given, do not munge pathnames, but use a NUL-terminated machine-readable format.</p>  <p>Without this option, each pathname output will have TAB, LF, double quotes, and backslash characters replaced with <code>\\t</code>, <code>\\n</code>, <code>\\\"</code>, and <code>\\\\</code>, respectively, and the pathname will be enclosed in double quotes if any of those replacements occurred.</p>  </dd> <dt class=\"hdlist1\">-p&lt;n&gt;</dt> <dd> <p>Remove &lt;n&gt; leading slashes from traditional diff paths. The default is 1.</p> </dd> <dt class=\"hdlist1\">-C&lt;n&gt;</dt> <dd> <p>Ensure at least &lt;n&gt; lines of surrounding context match before and after each change. When fewer lines of surrounding context exist they all must match. By default no context is ever ignored.</p> </dd> <dt class=\"hdlist1\">--unidiff-zero</dt> <dd> <p>By default, <code>git apply</code> expects that the patch being applied is a unified diff with at least one line of context. This provides good safety measures, but breaks down when applying a diff generated with <code>--unified=0</code>. To bypass these checks use <code>--unidiff-zero</code>.</p>  <p>Note, for the reasons stated above usage of context-free patches is discouraged.</p>  </dd> <dt class=\"hdlist1\">--apply</dt> <dd> <p>If you use any of the options marked \"Turns off <code>apply</code>\" above, <code>git apply</code> reads and outputs the requested information without actually applying the patch. Give this flag after those flags to also apply the patch.</p> </dd> <dt class=\"hdlist1\">--no-add</dt> <dd> <p>When applying a patch, ignore additions made by the patch. This can be used to extract the common part between two files by first running <code>diff</code> on them and applying the result with this option, which would apply the deletion part but not the addition part.</p> </dd> <dt class=\"hdlist1\">--allow-binary-replacement</dt> <dt class=\"hdlist1\">--binary</dt> <dd> <p>Historically we did not allow binary patch applied without an explicit permission from the user, and this flag was the way to do so. Currently we always allow binary patch application, so this is a no-op.</p> </dd> <dt class=\"hdlist1\">--exclude=&lt;path-pattern&gt;</dt> <dd> <p>Don’t apply changes to files matching the given path pattern. This can be useful when importing patchsets, where you want to exclude certain files or directories.</p> </dd> <dt class=\"hdlist1\">--include=&lt;path-pattern&gt;</dt> <dd> <p>Apply changes to files matching the given path pattern. This can be useful when importing patchsets, where you want to include certain files or directories.</p>  <p>When <code>--exclude</code> and <code>--include</code> patterns are used, they are examined in the order they appear on the command line, and the first match determines if a patch to each path is used. A patch to a path that does not match any include/exclude pattern is used by default if there is no include pattern on the command line, and ignored if there is any include pattern.</p>  </dd> <dt class=\"hdlist1\">--ignore-space-change</dt> <dt class=\"hdlist1\">--ignore-whitespace</dt> <dd> <p>When applying a patch, ignore changes in whitespace in context lines if necessary. Context lines will preserve their whitespace, and they will not undergo whitespace fixing regardless of the value of the <code>--whitespace</code> option. New lines will still be fixed, though.</p> </dd> <dt class=\"hdlist1\">--whitespace=&lt;action&gt;</dt> <dd> <p>When applying a patch, detect a new or modified line that has whitespace errors. What are considered whitespace errors is controlled by <code>core.whitespace</code> configuration. By default, trailing whitespaces (including lines that solely consist of whitespaces) and a space character that is immediately followed by a tab character inside the initial indent of the line are considered whitespace errors.</p>  <p>By default, the command outputs warning messages but applies the patch. When <code>git-apply</code> is used for statistics and not applying a patch, it defaults to <code>nowarn</code>.</p>   <p>You can use different <code>&lt;action&gt;</code> values to control this behavior:</p>  <div class=\"ulist\"> <ul> <li> <p><code>nowarn</code> turns off the trailing whitespace warning.</p> </li> <li> <p><code>warn</code> outputs warnings for a few such errors, but applies the patch as-is (default).</p> </li> <li> <p><code>fix</code> outputs warnings for a few such errors, and applies the patch after fixing them (<code>strip</code> is a synonym --- the tool used to consider only trailing whitespace characters as errors, and the fix involved <code>stripping</code> them, but modern Gits do more).</p> </li> <li> <p><code>error</code> outputs warnings for a few such errors, and refuses to apply the patch.</p> </li> <li> <p><code>error-all</code> is similar to <code>error</code> but shows all errors.</p> </li> </ul> </div> </dd> <dt class=\"hdlist1\">--inaccurate-eof</dt> <dd> <p>Under certain circumstances, some versions of <code>diff</code> do not correctly detect a missing new-line at the end of the file. As a result, patches created by such <code>diff</code> programs do not record incomplete lines correctly. This option adds support for applying such patches by working around this bug.</p> </dd> <dt class=\"hdlist1\">-v</dt> <dt class=\"hdlist1\">--verbose</dt> <dd> <p>Report progress to stderr. By default, only a message about the current patch being applied will be printed. This option will cause additional information to be reported.</p> </dd> <dt class=\"hdlist1\">--recount</dt> <dd> <p>Do not trust the line counts in the hunk headers, but infer them by inspecting the patch (e.g. after editing the patch without adjusting the hunk headers appropriately).</p> </dd> <dt class=\"hdlist1\">--directory=&lt;root&gt;</dt> <dd> <p>Prepend &lt;root&gt; to all filenames. If a \"-p\" argument was also passed, it is applied before prepending the new root.</p>  <p>For example, a patch that talks about updating <code>a/git-gui.sh</code> to <code>b/git-gui.sh</code> can be applied to the file in the working tree <code>modules/git-gui/git-gui.sh</code> by running <code>git apply --directory=modules/git-gui</code>.</p>  </dd> <dt class=\"hdlist1\">--unsafe-paths</dt> <dd> <p>By default, a patch that affects outside the working area (either a Git controlled working tree, or the current working directory when \"git apply\" is used as a replacement of GNU patch) is rejected as a mistake (or a mischief).</p>  <p>When <code>git apply</code> is used as a \"better GNU patch\", the user can pass the <code>--unsafe-paths</code> option to override this safety check. This option has no effect when <code>--index</code> or <code>--cached</code> is in use.</p>  </dd> </dl> </div></div>   <h2 id=\"_configuration\">Configuration</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">apply.ignoreWhitespace</dt> <dd> <p>Set to <code>change</code> if you want changes in whitespace to be ignored by default. Set to one of: no, none, never, false if you want changes in whitespace to be significant.</p> </dd> <dt class=\"hdlist1\">apply.whitespace</dt> <dd> <p>When no <code>--whitespace</code> flag is given from the command line, this configuration item is used as the default.</p> </dd> </dl> </div></div>   <h2 id=\"_submodules\">Submodules</h2> <div class=\"sectionbody\"> <p>If the patch contains any changes to submodules then <code>git apply</code> treats these changes as follows.</p>   <p>If <code>--index</code> is specified (explicitly or implicitly), then the submodule commits must match the index exactly for the patch to apply. If any of the submodules are checked-out, then these check-outs are completely ignored, i.e., they are not required to be up-to-date or clean and they are not updated.</p>   <p>If <code>--index</code> is not specified, then the submodule commits in the patch are ignored and only the absence or presence of the corresponding subdirectory is checked and (if possible) updated.</p> </div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-am\">git-am[1]</a>.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-apply\" class=\"_attribution-link\">https://git-scm.com/docs/git-apply</a>\n  </p>\n</div>\n","git-describe":"<h1>git-describe</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-describe - Describe a commit using the most recent tag reachable from it</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git describe [--all] [--tags] [--contains] [--abbrev=&lt;n&gt;] [&lt;commit-ish&gt;…​]\ngit describe [--all] [--tags] [--contains] [--abbrev=&lt;n&gt;] --dirty[=&lt;mark&gt;]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>The command finds the most recent tag that is reachable from a commit. If the tag points to the commit, then only the tag is shown. Otherwise, it suffixes the tag name with the number of additional commits on top of the tagged object and the abbreviated object name of the most recent commit.</p>   <p>By default (without --all or --tags) <code>git describe</code> only shows annotated tags. For more information about creating annotated tags see the -a and -s options to <a href=\"git-tag\">git-tag[1]</a>.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">&lt;commit-ish&gt;…​</dt> <dd> <p>Commit-ish object names to describe. Defaults to HEAD if omitted.</p> </dd> <dt class=\"hdlist1\">--dirty[=&lt;mark&gt;]</dt> <dd> <p>Describe the working tree. It means describe HEAD and appends &lt;mark&gt; (<code>-dirty</code> by default) if the working tree is dirty.</p> </dd> <dt class=\"hdlist1\">--all</dt> <dd> <p>Instead of using only the annotated tags, use any ref found in <code>refs/</code> namespace. This option enables matching any known branch, remote-tracking branch, or lightweight tag.</p> </dd> <dt class=\"hdlist1\">--tags</dt> <dd> <p>Instead of using only the annotated tags, use any tag found in <code>refs/tags</code> namespace. This option enables matching a lightweight (non-annotated) tag.</p> </dd> <dt class=\"hdlist1\">--contains</dt> <dd> <p>Instead of finding the tag that predates the commit, find the tag that comes after the commit, and thus contains it. Automatically implies --tags.</p> </dd> <dt class=\"hdlist1\">--abbrev=&lt;n&gt;</dt> <dd> <p>Instead of using the default 7 hexadecimal digits as the abbreviated object name, use &lt;n&gt; digits, or as many digits as needed to form a unique object name. An &lt;n&gt; of 0 will suppress long format, only showing the closest tag.</p> </dd> <dt class=\"hdlist1\">--candidates=&lt;n&gt;</dt> <dd> <p>Instead of considering only the 10 most recent tags as candidates to describe the input commit-ish consider up to &lt;n&gt; candidates. Increasing &lt;n&gt; above 10 will take slightly longer but may produce a more accurate result. An &lt;n&gt; of 0 will cause only exact matches to be output.</p> </dd> <dt class=\"hdlist1\">--exact-match</dt> <dd> <p>Only output exact matches (a tag directly references the supplied commit). This is a synonym for --candidates=0.</p> </dd> <dt class=\"hdlist1\">--debug</dt> <dd> <p>Verbosely display information about the searching strategy being employed to standard error. The tag name will still be printed to standard out.</p> </dd> <dt class=\"hdlist1\">--long</dt> <dd> <p>Always output the long format (the tag, the number of commits and the abbreviated commit name) even when it matches a tag. This is useful when you want to see parts of the commit object name in \"describe\" output, even when the commit in question happens to be a tagged version. Instead of just emitting the tag name, it will describe such a commit as v1.2-0-gdeadbee (0th commit since tag v1.2 that points at object deadbee…​.).</p> </dd> <dt class=\"hdlist1\">--match &lt;pattern&gt;</dt> <dd> <p>Only consider tags matching the given <code>glob(7)</code> pattern, excluding the \"refs/tags/\" prefix. This can be used to avoid leaking private tags from the repository.</p> </dd> <dt class=\"hdlist1\">--always</dt> <dd> <p>Show uniquely abbreviated commit object as fallback.</p> </dd> <dt class=\"hdlist1\">--first-parent</dt> <dd> <p>Follow only the first parent commit upon seeing a merge commit. This is useful when you wish to not match tags on branches merged in the history of the target commit.</p> </dd> </dl> </div></div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"> <p>With something like git.git current tree, I get:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>[torvalds@g5 git]$ git describe parent\nv1.0.4-14-g2414721</pre> </div> </div>  <p>i.e. the current head of my \"parent\" branch is based on v1.0.4, but since it has a few commits on top of that, describe has added the number of additional commits (\"14\") and an abbreviated object name for the commit itself (\"2414721\") at the end.</p>   <p>The number of additional commits is the number of commits which would be displayed by \"git log v1.0.4..parent\". The hash suffix is \"-g\" + 7-char abbreviation for the tip commit of parent (which was <code>2414721b194453f058079d897d13c4e377f92dc6</code>). The \"g\" prefix stands for \"git\" and is used to allow describing the version of a software depending on the SCM the software is managed with. This is useful in an environment where people may use different SCMs.</p>   <p>Doing a <code>git describe</code> on a tag-name will just show the tag name:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>[torvalds@g5 git]$ git describe v1.0.4\nv1.0.4</pre> </div> </div>  <p>With --all, the command can use branch heads as references, so the output shows the reference path as well:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>[torvalds@g5 git]$ git describe --all --abbrev=4 v1.0.5^2\ntags/v1.0.0-21-g975b</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>[torvalds@g5 git]$ git describe --all --abbrev=4 HEAD^\nheads/lt/describe-7-g975b</pre> </div> </div>  <p>With --abbrev set to 0, the command can be used to find the closest tagname without any suffix:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>[torvalds@g5 git]$ git describe --abbrev=0 v1.0.5^2\ntags/v1.0.0</pre> </div> </div>  <p>Note that the suffix you get if you type these commands today may be longer than what Linus saw above when he ran these commands, as your Git repository may have new commits whose object names begin with 975b that did not exist back then, and \"-g975b\" suffix alone may not be sufficient to disambiguate these commits.</p> </div>   <h2 id=\"_search_strategy\">Search strategy</h2> <div class=\"sectionbody\"> <p>For each commit-ish supplied, <code>git describe</code> will first look for a tag which tags exactly that commit. Annotated tags will always be preferred over lightweight tags, and tags with newer dates will always be preferred over tags with older dates. If an exact match is found, its name will be output and searching will stop.</p>   <p>If an exact match was not found, <code>git describe</code> will walk back through the commit history to locate an ancestor commit which has been tagged. The ancestor’s tag will be output along with an abbreviation of the input commit-ish’s SHA-1. If <code>--first-parent</code> was specified then the walk will only consider the first parent of each commit.</p>   <p>If multiple tags were found during the walk then the tag which has the fewest commits different from the input commit-ish will be selected and output. Here fewest commits different is defined as the number of commits which would be shown by <code>git log tag..input</code> will be the smallest number of commits possible.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-describe\" class=\"_attribution-link\">https://git-scm.com/docs/git-describe</a>\n  </p>\n</div>\n","git-cherry-pick":"<h1>git-cherry-pick</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-cherry-pick - Apply the changes introduced by some existing commits</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git cherry-pick [--edit] [-n] [-m parent-number] [-s] [-x] [--ff]\n                  [-S[&lt;keyid&gt;]] &lt;commit&gt;…​\ngit cherry-pick --continue\ngit cherry-pick --quit\ngit cherry-pick --abort</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Given one or more existing commits, apply the change each one introduces, recording a new commit for each. This requires your working tree to be clean (no modifications from the HEAD commit).</p>   <p>When it is not obvious how to apply a change, the following happens:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>The current branch and <code>HEAD</code> pointer stay at the last commit successfully made.</p> </li> <li> <p>The <code>CHERRY_PICK_HEAD</code> ref is set to point at the commit that introduced the change that is difficult to apply.</p> </li> <li> <p>Paths in which the change applied cleanly are updated both in the index file and in your working tree.</p> </li> <li> <p>For conflicting paths, the index file records up to three versions, as described in the \"TRUE MERGE\" section of <a href=\"git-merge\">git-merge[1]</a>. The working tree files will include a description of the conflict bracketed by the usual conflict markers <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code> and <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>.</p> </li> <li> <p>No other modifications are made.</p> </li> </ol> </div>  <p>See <a href=\"git-merge\">git-merge[1]</a> for some hints on resolving such conflicts.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">&lt;commit&gt;…​</dt> <dd> <p>Commits to cherry-pick. For a more complete list of ways to spell commits, see <a href=\"gitrevisions\">gitrevisions[7]</a>. Sets of commits can be passed but no traversal is done by default, as if the <code>--no-walk</code> option was specified, see <a href=\"git-rev-list\">git-rev-list[1]</a>. Note that specifying a range will feed all &lt;commit&gt;…​ arguments to a single revision walk (see a later example that uses <code>maint master..next</code>).</p> </dd> <dt class=\"hdlist1\">-e</dt> <dt class=\"hdlist1\">--edit</dt> <dd> <p>With this option, <code>git cherry-pick</code> will let you edit the commit message prior to committing.</p> </dd> <dt class=\"hdlist1\">-x</dt> <dd> <p>When recording the commit, append a line that says \"(cherry picked from commit …​)\" to the original commit message in order to indicate which commit this change was cherry-picked from. This is done only for cherry picks without conflicts. Do not use this option if you are cherry-picking from your private branch because the information is useless to the recipient. If on the other hand you are cherry-picking between two publicly visible branches (e.g. backporting a fix to a maintenance branch for an older release from a development branch), adding this information can be useful.</p> </dd> <dt class=\"hdlist1\">-r</dt> <dd> <p>It used to be that the command defaulted to do <code>-x</code> described above, and <code>-r</code> was to disable it. Now the default is not to do <code>-x</code> so this option is a no-op.</p> </dd> <dt class=\"hdlist1\">-m parent-number</dt> <dt class=\"hdlist1\">--mainline parent-number</dt> <dd> <p>Usually you cannot cherry-pick a merge because you do not know which side of the merge should be considered the mainline. This option specifies the parent number (starting from 1) of the mainline and allows cherry-pick to replay the change relative to the specified parent.</p> </dd> <dt class=\"hdlist1\">-n</dt> <dt class=\"hdlist1\">--no-commit</dt> <dd> <p>Usually the command automatically creates a sequence of commits. This flag applies the changes necessary to cherry-pick each named commit to your working tree and the index, without making any commit. In addition, when this option is used, your index does not have to match the HEAD commit. The cherry-pick is done against the beginning state of your index.</p>  <p>This is useful when cherry-picking more than one commits' effect to your index in a row.</p>  </dd> <dt class=\"hdlist1\">-s</dt> <dt class=\"hdlist1\">--signoff</dt> <dd> <p>Add Signed-off-by line at the end of the commit message. See the signoff option in <a href=\"git-commit\">git-commit[1]</a> for more information.</p> </dd> <dt class=\"hdlist1\">-S[&lt;keyid&gt;]</dt> <dt class=\"hdlist1\">--gpg-sign[=&lt;keyid&gt;]</dt> <dd> <p>GPG-sign commits. The <code>keyid</code> argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space.</p> </dd> <dt class=\"hdlist1\">--ff</dt> <dd> <p>If the current HEAD is the same as the parent of the cherry-pick’ed commit, then a fast forward to this commit will be performed.</p> </dd> <dt class=\"hdlist1\">--allow-empty</dt> <dd> <p>By default, cherry-picking an empty commit will fail, indicating that an explicit invocation of <code>git commit\n--allow-empty</code> is required. This option overrides that behavior, allowing empty commits to be preserved automatically in a cherry-pick. Note that when \"--ff\" is in effect, empty commits that meet the \"fast-forward\" requirement will be kept even without this option. Note also, that use of this option only keeps commits that were initially empty (i.e. the commit recorded the same tree as its parent). Commits which are made empty due to a previous commit are dropped. To force the inclusion of those commits use <code>--keep-redundant-commits</code>.</p> </dd> <dt class=\"hdlist1\">--allow-empty-message</dt> <dd> <p>By default, cherry-picking a commit with an empty message will fail. This option overrides that behavior, allowing commits with empty messages to be cherry picked.</p> </dd> <dt class=\"hdlist1\">--keep-redundant-commits</dt> <dd> <p>If a commit being cherry picked duplicates a commit already in the current history, it will become empty. By default these redundant commits cause <code>cherry-pick</code> to stop so the user can examine the commit. This option overrides that behavior and creates an empty commit object. Implies <code>--allow-empty</code>.</p> </dd> <dt class=\"hdlist1\">--strategy=&lt;strategy&gt;</dt> <dd> <p>Use the given merge strategy. Should only be used once. See the MERGE STRATEGIES section in <a href=\"git-merge\">git-merge[1]</a> for details.</p> </dd> <dt class=\"hdlist1\">-X&lt;option&gt;</dt> <dt class=\"hdlist1\">--strategy-option=&lt;option&gt;</dt> <dd> <p>Pass the merge strategy-specific option through to the merge strategy. See <a href=\"git-merge\">git-merge[1]</a> for details.</p> </dd> </dl> </div></div>   <h2 id=\"_sequencer_subcommands\">Sequencer subcommands</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--continue</dt> <dd> <p>Continue the operation in progress using the information in <code>.git/sequencer</code>. Can be used to continue after resolving conflicts in a failed cherry-pick or revert.</p> </dd> <dt class=\"hdlist1\">--quit</dt> <dd> <p>Forget about the current operation in progress. Can be used to clear the sequencer state after a failed cherry-pick or revert.</p> </dd> <dt class=\"hdlist1\">--abort</dt> <dd> <p>Cancel the operation and return to the pre-sequence state.</p> </dd> </dl> </div></div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\">\n<div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>git cherry-pick master</code></dt> <dd> <p>Apply the change introduced by the commit at the tip of the master branch and create a new commit with this change.</p> </dd> <dt class=\"hdlist1\"><code>git cherry-pick ..master</code></dt> <dt class=\"hdlist1\"><code>git cherry-pick ^HEAD master</code></dt> <dd> <p>Apply the changes introduced by all commits that are ancestors of master but not of HEAD to produce new commits.</p> </dd> <dt class=\"hdlist1\"><code>git cherry-pick maint next ^master</code></dt> <dt class=\"hdlist1\"><code>git cherry-pick maint master..next</code></dt> <dd> <p>Apply the changes introduced by all commits that are ancestors of maint or next, but not master or any of its ancestors. Note that the latter does not mean <code>maint</code> and everything between <code>master</code> and <code>next</code>; specifically, <code>maint</code> will not be used if it is included in <code>master</code>.</p> </dd> <dt class=\"hdlist1\"><code>git cherry-pick master~4 master~2</code></dt> <dd> <p>Apply the changes introduced by the fifth and third last commits pointed to by master and create 2 new commits with these changes.</p> </dd> <dt class=\"hdlist1\"><code>git cherry-pick -n master~1 next</code></dt> <dd> <p>Apply to the working tree and the index the changes introduced by the second last commit pointed to by master and by the last commit pointed to by next, but do not create any commit with these changes.</p> </dd> <dt class=\"hdlist1\"><code>git cherry-pick --ff ..next</code></dt> <dd> <p>If history is linear and HEAD is an ancestor of next, update the working tree and advance the HEAD pointer to match next. Otherwise, apply the changes introduced by those commits that are in next but not HEAD to the current branch, creating a new commit for each new change.</p> </dd> <dt class=\"hdlist1\"><code>git rev-list --reverse master -- README | git cherry-pick -n --stdin</code></dt> <dd> <p>Apply the changes introduced by all commits on the master branch that touched README to the working tree and index, so the result can be inspected and made into a single new commit if suitable.</p> </dd> </dl> </div>  <p>The following sequence attempts to backport a patch, bails out because the code the patch applies to has changed too much, and then tries again, this time exercising more care about matching up context lines.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git cherry-pick topic^             (1)\n$ git diff                           (2)\n$ git reset --merge ORIG_HEAD        (3)\n$ git cherry-pick -Xpatience topic^  (4)</pre> </div> </div> <div class=\"colist arabic\"> <ol> <li> <p>apply the change that would be shown by <code>git show topic^</code>. In this example, the patch does not apply cleanly, so information about the conflict is written to the index and working tree and no new commit results.</p> </li> <li> <p>summarize changes to be reconciled</p> </li> <li> <p>cancel the cherry-pick. In other words, return to the pre-cherry-pick state, preserving any local modifications you had in the working tree.</p> </li> <li> <p>try to apply the change introduced by <code>topic^</code> again, spending extra time to avoid mistakes based on incorrectly matching context lines.</p> </li> </ol> </div>\n</div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-revert\">git-revert[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-cherry-pick\" class=\"_attribution-link\">https://git-scm.com/docs/git-cherry-pick</a>\n  </p>\n</div>\n","git-pull":"<h1>git-pull</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-pull - Fetch from and integrate with another repository or a local branch</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git pull [options] [&lt;repository&gt; [&lt;refspec&gt;…​]]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Incorporates changes from a remote repository into the current branch. In its default mode, <code>git pull</code> is shorthand for <code>git fetch</code> followed by <code>git merge FETCH_HEAD</code>.</p>   <p>More precisely, <code>git pull</code> runs <code>git fetch</code> with the given parameters and calls <code>git merge</code> to merge the retrieved branch heads into the current branch. With <code>--rebase</code>, it runs <code>git rebase</code> instead of <code>git merge</code>.</p>   <p>&lt;repository&gt; should be the name of a remote repository as passed to <a href=\"git-fetch\">git-fetch[1]</a>. &lt;refspec&gt; can name an arbitrary remote ref (for example, the name of a tag) or even a collection of refs with corresponding remote-tracking branches (e.g., refs/heads/*:refs/remotes/origin/*), but usually it is the name of a branch in the remote repository.</p>   <p>Default values for &lt;repository&gt; and &lt;branch&gt; are read from the \"remote\" and \"merge\" configuration for the current branch as set by <a href=\"git-branch\">git-branch[1]</a> <code>--track</code>.</p>   <p>Assume the following history exists and the current branch is \"<code>master</code>\":</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>          A---B---C master on origin\n         /\n    D---E---F---G master\n        ^\n        origin/master in your repository</pre> </div> </div>  <p>Then \"<code>git pull</code>\" will fetch and replay the changes from the remote <code>master</code> branch since it diverged from the local <code>master</code> (i.e., <code>E</code>) until its current commit (<code>C</code>) on top of <code>master</code> and record the result in a new commit along with the names of the two parent commits and a log message from the user describing the changes.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>          A---B---C origin/master\n         /         \\\n    D---E---F---G---H master</pre> </div> </div>  <p>See <a href=\"git-merge\">git-merge[1]</a> for details, including how conflicts are presented and handled.</p>   <p>In Git 1.7.0 or later, to cancel a conflicting merge, use <code>git reset --merge</code>. <strong>Warning</strong>: In older versions of Git, running <code>git pull</code> with uncommitted changes is discouraged: while possible, it leaves you in a state that may be hard to back out of in the case of a conflict.</p>   <p>If any of the remote changes overlap with local uncommitted changes, the merge will be automatically cancelled and the work tree untouched. It is generally best to get any local changes in working order before pulling or stash them away with <a href=\"git-stash\">git-stash[1]</a>.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\">\n<div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-q</dt> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>This is passed to both underlying git-fetch to squelch reporting of during transfer, and underlying git-merge to squelch output during merging.</p> </dd> <dt class=\"hdlist1\">-v</dt> <dt class=\"hdlist1\">--verbose</dt> <dd> <p>Pass --verbose to git-fetch and git-merge.</p> </dd> <dt class=\"hdlist1\">--[no-]recurse-submodules[=yes|on-demand|no]</dt> <dd> <p>This option controls if new commits of all populated submodules should be fetched too (see <a href=\"git-config\">git-config[1]</a> and <a href=\"gitmodules\">gitmodules[5]</a>). That might be necessary to get the data needed for merging submodule commits, a feature Git learned in 1.7.3. Notice that the result of a merge will not be checked out in the submodule, \"git submodule update\" has to be called afterwards to bring the work tree up to date with the merge result.</p> </dd> </dl> </div> <div class=\"sect2\"> <h3 id=\"_options_related_to_merging\">Options related to merging</h3> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--commit</dt> <dt class=\"hdlist1\">--no-commit</dt> <dd> <p>Perform the merge and commit the result. This option can be used to override --no-commit.</p>  <p>With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance to inspect and further tweak the merge result before committing.</p>  </dd> <dt class=\"hdlist1\">--edit</dt> <dt class=\"hdlist1\">-e</dt> <dt class=\"hdlist1\">--no-edit</dt> <dd> <p>Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message, so that the user can explain and justify the merge. The <code>--no-edit</code> option can be used to accept the auto-generated message (this is generally discouraged).</p>  <p>Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message. They will see an editor opened when they run <code>git merge</code>. To make it easier to adjust such scripts to the updated behaviour, the environment variable <code>GIT_MERGE_AUTOEDIT</code> can be set to <code>no</code> at the beginning of them.</p>  </dd> <dt class=\"hdlist1\">--ff</dt> <dd> <p>When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This is the default behavior.</p> </dd> <dt class=\"hdlist1\">--no-ff</dt> <dd> <p>Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging an annotated (and possibly signed) tag.</p> </dd> <dt class=\"hdlist1\">--ff-only</dt> <dd> <p>Refuse to merge and exit with a non-zero status unless the current <code>HEAD</code> is already up-to-date or the merge can be resolved as a fast-forward.</p> </dd> <dt class=\"hdlist1\">--log[=&lt;n&gt;]</dt> <dt class=\"hdlist1\">--no-log</dt> <dd> <p>In addition to branch names, populate the log message with one-line descriptions from at most &lt;n&gt; actual commits that are being merged. See also <a href=\"git-fmt-merge-msg\">git-fmt-merge-msg[1]</a>.</p>  <p>With --no-log do not list one-line descriptions from the actual commits being merged.</p>  </dd> <dt class=\"hdlist1\">--stat</dt> <dt class=\"hdlist1\">-n</dt> <dt class=\"hdlist1\">--no-stat</dt> <dd> <p>Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.</p>  <p>With -n or --no-stat do not show a diffstat at the end of the merge.</p>  </dd> <dt class=\"hdlist1\">--squash</dt> <dt class=\"hdlist1\">--no-squash</dt> <dd> <p>Produce the working tree and index state as if a real merge happened (except for the merge information), but do not actually make a commit, move the <code>HEAD</code>, or record <code>$GIT_DIR/MERGE_HEAD</code> (to cause the next <code>git commit</code> command to create a merge commit). This allows you to create a single commit on top of the current branch whose effect is the same as merging another branch (or more in case of an octopus).</p>  <p>With --no-squash perform the merge and commit the result. This option can be used to override --squash.</p>  </dd> <dt class=\"hdlist1\">-s &lt;strategy&gt;</dt> <dt class=\"hdlist1\">--strategy=&lt;strategy&gt;</dt> <dd> <p>Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried. If there is no <code>-s</code> option, a built-in list of strategies is used instead (<code>git merge-recursive</code> when merging a single head, <code>git merge-octopus</code> otherwise).</p> </dd> <dt class=\"hdlist1\">-X &lt;option&gt;</dt> <dt class=\"hdlist1\">--strategy-option=&lt;option&gt;</dt> <dd> <p>Pass merge strategy specific option through to the merge strategy.</p> </dd> <dt class=\"hdlist1\">--verify-signatures</dt> <dt class=\"hdlist1\">--no-verify-signatures</dt> <dd> <p>Verify that the tip commit of the side branch being merged is signed with a valid key, i.e. a key that has a valid uid: in the default trust model, this means the signing key has been signed by a trusted key. If the tip commit of the side branch is not signed with a valid key, the merge is aborted.</p> </dd> <dt class=\"hdlist1\">--summary</dt> <dt class=\"hdlist1\">--no-summary</dt> <dd> <p>Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.</p> </dd> <dt class=\"hdlist1\">--allow-unrelated-histories</dt> <dd> <p>By default, <code>git merge</code> command refuses to merge histories that do not share a common ancestor. This option can be used to override this safety when merging histories of two projects that started their lives independently. As that is a very rare occasion, no configuration variable to enable this by default exists and will not be added.</p> </dd> </dl> </div> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-r</dt> <dt class=\"hdlist1\">--rebase[=false|true|preserve|interactive]</dt> <dd> <p>When true, rebase the current branch on top of the upstream branch after fetching. If there is a remote-tracking branch corresponding to the upstream branch and the upstream branch was rebased since last fetched, the rebase uses that information to avoid rebasing non-local changes.</p>  <p>When set to preserve, rebase with the <code>--preserve-merges</code> option passed to <code>git rebase</code> so that locally created merge commits will not be flattened.</p>   <p>When false, merge the current branch into the upstream branch.</p>   <p>When <code>interactive</code>, enable the interactive mode of rebase.</p>   <p>See <code>pull.rebase</code>, <code>branch.&lt;name&gt;.rebase</code> and <code>branch.autoSetupRebase</code> in <a href=\"git-config\">git-config[1]</a> if you want to make <code>git pull</code> always use <code>--rebase</code> instead of merging.</p>  <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> This is a potentially <em>dangerous</em> mode of operation. It rewrites history, which does not bode well when you published that history already. Do <strong>not</strong> use this option unless you have read <a href=\"git-rebase\">git-rebase[1]</a> carefully. </td> </tr> </table> </div> </dd> <dt class=\"hdlist1\">--no-rebase</dt> <dd> <p>Override earlier --rebase.</p> </dd> <dt class=\"hdlist1\">--autostash</dt> <dt class=\"hdlist1\">--no-autostash</dt> <dd> <p>Before starting rebase, stash local modifications away (see <a href=\"git-stash\">git-stash[1]</a>) if needed, and apply the stash when done. <code>--no-autostash</code> is useful to override the <code>rebase.autoStash</code> configuration variable (see <a href=\"git-config\">git-config[1]</a>).</p>  <p>This option is only valid when \"--rebase\" is used.</p>  </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_options_related_to_fetching\">Options related to fetching</h3> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--all</dt> <dd> <p>Fetch all remotes.</p> </dd> <dt class=\"hdlist1\">-a</dt> <dt class=\"hdlist1\">--append</dt> <dd> <p>Append ref names and object names of fetched refs to the existing contents of <code>.git/FETCH_HEAD</code>. Without this option old data in <code>.git/FETCH_HEAD</code> will be overwritten.</p> </dd> <dt class=\"hdlist1\">--depth=&lt;depth&gt;</dt> <dd> <p>Limit fetching to the specified number of commits from the tip of each remote branch history. If fetching to a <code>shallow</code> repository created by <code>git clone</code> with <code>--depth=&lt;depth&gt;</code> option (see <a href=\"git-clone\">git-clone[1]</a>), deepen or shorten the history to the specified number of commits. Tags for the deepened commits are not fetched.</p> </dd> <dt class=\"hdlist1\">--unshallow</dt> <dd> <p>If the source repository is complete, convert a shallow repository to a complete one, removing all the limitations imposed by shallow repositories.</p>  <p>If the source repository is shallow, fetch as much as possible so that the current repository has the same history as the source repository.</p>  </dd> <dt class=\"hdlist1\">--update-shallow</dt> <dd> <p>By default when fetching from a shallow repository, <code>git fetch</code> refuses refs that require updating .git/shallow. This option updates .git/shallow and accept such refs.</p> </dd> <dt class=\"hdlist1\">-f</dt> <dt class=\"hdlist1\">--force</dt> <dd> <p>When <code>git fetch</code> is used with <code>&lt;rbranch&gt;:&lt;lbranch&gt;</code> refspec, it refuses to update the local branch <code>&lt;lbranch&gt;</code> unless the remote branch <code>&lt;rbranch&gt;</code> it fetches is a descendant of <code>&lt;lbranch&gt;</code>. This option overrides that check.</p> </dd> <dt class=\"hdlist1\">-k</dt> <dt class=\"hdlist1\">--keep</dt> <dd> <p>Keep downloaded pack.</p> </dd> <dt class=\"hdlist1\">--no-tags</dt> <dd> <p>By default, tags that point at objects that are downloaded from the remote repository are fetched and stored locally. This option disables this automatic tag following. The default behavior for a remote may be specified with the remote.&lt;name&gt;.tagOpt setting. See <a href=\"git-config\">git-config[1]</a>.</p> </dd> <dt class=\"hdlist1\">-u</dt> <dt class=\"hdlist1\">--update-head-ok</dt> <dd> <p>By default <code>git fetch</code> refuses to update the head which corresponds to the current branch. This flag disables the check. This is purely for the internal use for <code>git pull</code> to communicate with <code>git fetch</code>, and unless you are implementing your own Porcelain you are not supposed to use it.</p> </dd> <dt class=\"hdlist1\">--upload-pack &lt;upload-pack&gt;</dt> <dd> <p>When given, and the repository to fetch from is handled by <code>git fetch-pack</code>, <code>--exec=&lt;upload-pack&gt;</code> is passed to the command to specify non-default path for the command run on the other end.</p> </dd> <dt class=\"hdlist1\">--progress</dt> <dd> <p>Progress status is reported on the standard error stream by default when it is attached to a terminal, unless -q is specified. This flag forces progress status even if the standard error stream is not directed to a terminal.</p> </dd> <dt class=\"hdlist1\">-4</dt> <dt class=\"hdlist1\">--ipv4</dt> <dd> <p>Use IPv4 addresses only, ignoring IPv6 addresses.</p> </dd> <dt class=\"hdlist1\">-6</dt> <dt class=\"hdlist1\">--ipv6</dt> <dd> <p>Use IPv6 addresses only, ignoring IPv4 addresses.</p> </dd> </dl> </div> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">&lt;repository&gt;</dt> <dd> <p>The \"remote\" repository that is the source of a fetch or pull operation. This parameter can be either a URL (see the section <a href=\"#URLS\">GIT URLS</a> below) or the name of a remote (see the section <a href=\"#REMOTES\">REMOTES</a> below).</p> </dd> <dt class=\"hdlist1\">&lt;refspec&gt;</dt> <dd> <p>Specifies which refs to fetch and which local refs to update. When no &lt;refspec&gt;s appear on the command line, the refs to fetch are read from <code>remote.&lt;repository&gt;.fetch</code> variables instead (see <a href=\"git-fetch\">git-fetch[1]</a>).</p>  <p>The format of a &lt;refspec&gt; parameter is an optional plus <code>+</code>, followed by the source ref &lt;src&gt;, followed by a colon <code>:</code>, followed by the destination ref &lt;dst&gt;. The colon can be omitted when &lt;dst&gt; is empty.</p>   <p><code>tag &lt;tag&gt;</code> means the same as <code>refs/tags/&lt;tag&gt;:refs/tags/&lt;tag&gt;</code>; it requests fetching everything up to the given tag.</p>   <p>The remote ref that matches &lt;src&gt; is fetched, and if &lt;dst&gt; is not empty string, the local ref that matches it is fast-forwarded using &lt;src&gt;. If the optional plus <code>+</code> is used, the local ref is updated even if it does not result in a fast-forward update.</p>  <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> When the remote branch you want to fetch is known to be rewound and rebased regularly, it is expected that its new tip will not be descendant of its previous tip (as stored in your remote-tracking branch the last time you fetched). You would want to use the <code>+</code> sign to indicate non-fast-forward updates will be needed for such branches. There is no way to determine or declare that a branch will be made available in a repository with this behavior; the pulling user simply must know this is the expected usage pattern for a branch. </td> </tr> </table> </div> <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> There is a difference between listing multiple &lt;refspec&gt; directly on <em>git pull</em> command line and having multiple <code>remote.&lt;repository&gt;.fetch</code> entries in your configuration for a &lt;repository&gt; and running a <em>git pull</em> command without any explicit &lt;refspec&gt; parameters. &lt;refspec&gt;s listed explicitly on the command line are always merged into the current branch after fetching. In other words, if you list more than one remote ref, <em>git pull</em> will create an Octopus merge. On the other hand, if you do not list any explicit &lt;refspec&gt; parameter on the command line, <em>git pull</em> will fetch all the &lt;refspec&gt;s it finds in the <code>remote.&lt;repository&gt;.fetch</code> configuration and merge only the first &lt;refspec&gt; found into the current branch. This is because making an Octopus from remote refs is rarely done, while keeping track of multiple remote heads in one-go by fetching more than one is often useful. </td> </tr> </table> </div> </dd> </dl> </div> </div>\n</div>   <h2 id=\"_git_urls_a_id_urls_a\">Git urls</h2> <div class=\"sectionbody\"> <p>In general, URLs contain information about the transport protocol, the address of the remote server, and the path to the repository. Depending on the transport protocol, some of this information may be absent.</p>   <p>Git supports ssh, git, http, and https protocols (in addition, ftp, and ftps can be used for fetching, but this is inefficient and deprecated; do not use it).</p>   <p>The native transport (i.e. git:// URL) does no authentication and should be used with caution on unsecured networks.</p>   <p>The following syntaxes may be used with them:</p>  <div class=\"ulist\"> <ul> <li> <p>ssh://[user@]host.xz[:port]/path/to/repo.git/</p> </li> <li> <p>git://host.xz[:port]/path/to/repo.git/</p> </li> <li> <p>http[s]://host.xz[:port]/path/to/repo.git/</p> </li> <li> <p>ftp[s]://host.xz[:port]/path/to/repo.git/</p> </li> </ul> </div>  <p>An alternative scp-like syntax may also be used with the ssh protocol:</p>  <div class=\"ulist\"> <ul> <li> <p>[user@]host.xz:path/to/repo.git/</p> </li> </ul> </div>  <p>This syntax is only recognized if there are no slashes before the first colon. This helps differentiate a local path that contains a colon. For example the local path <code>foo:bar</code> could be specified as an absolute path or <code>./foo:bar</code> to avoid being misinterpreted as an ssh url.</p>   <p>The ssh and git protocols additionally support ~username expansion:</p>  <div class=\"ulist\"> <ul> <li> <p>ssh://[user@]host.xz[:port]/~[user]/path/to/repo.git/</p> </li> <li> <p>git://host.xz[:port]/~[user]/path/to/repo.git/</p> </li> <li> <p>[user@]host.xz:/~[user]/path/to/repo.git/</p> </li> </ul> </div>  <p>For local repositories, also supported by Git natively, the following syntaxes may be used:</p>  <div class=\"ulist\"> <ul> <li> <p>/path/to/repo.git/</p> </li> <li> <p>file:///path/to/repo.git/</p> </li> </ul> </div>  <p>These two syntaxes are mostly equivalent, except when cloning, when the former implies --local option. See <a href=\"git-clone\">git-clone[1]</a> for details.</p>   <p>When Git doesn’t know how to handle a certain transport protocol, it attempts to use the <code>remote-&lt;transport&gt;</code> remote helper, if one exists. To explicitly request a remote helper, the following syntax may be used:</p>  <div class=\"ulist\"> <ul> <li> <p>&lt;transport&gt;::&lt;address&gt;</p> </li> </ul> </div>  <p>where &lt;address&gt; may be a path, a server and path, or an arbitrary URL-like string recognized by the specific remote helper being invoked. See <a href=\"gitremote-helpers\">gitremote-helpers[1]</a> for details.</p>   <p>If there are a large number of similarly-named remote repositories and you want to use a different format for them (such that the URLs you use will be rewritten into URLs that work), you can create a configuration section of the form:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        [url \"&lt;actual url base&gt;\"]\n                insteadOf = &lt;other url base&gt;</pre> </div> </div>  <p>For example, with this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        [url \"git://git.host.xz/\"]\n                insteadOf = host.xz:/path/to/\n                insteadOf = work:</pre> </div> </div>  <p>a URL like \"work:repo.git\" or like \"host.xz:/path/to/repo.git\" will be rewritten in any context that takes a URL to be \"git://git.host.xz/repo.git\".</p>   <p>If you want to rewrite URLs for push only, you can create a configuration section of the form:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        [url \"&lt;actual url base&gt;\"]\n                pushInsteadOf = &lt;other url base&gt;</pre> </div> </div>  <p>For example, with this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        [url \"ssh://example.org/\"]\n                pushInsteadOf = git://example.org/</pre> </div> </div>  <p>a URL like \"git://example.org/path/to/repo.git\" will be rewritten to \"ssh://example.org/path/to/repo.git\" for pushes, but pulls will still use the original URL.</p> </div>   <h2 id=\"_remotes_a_id_remotes_a\">Remotes</h2> <div class=\"sectionbody\"> <p>The name of one of the following can be used instead of a URL as <code>&lt;repository&gt;</code> argument:</p>  <div class=\"ulist\"> <ul> <li> <p>a remote in the Git configuration file: <code>$GIT_DIR/config</code>,</p> </li> <li> <p>a file in the <code>$GIT_DIR/remotes</code> directory, or</p> </li> <li> <p>a file in the <code>$GIT_DIR/branches</code> directory.</p> </li> </ul> </div>  <p>All of these also allow you to omit the refspec from the command line because they each contain a refspec which git will use by default.</p>  <div class=\"sect2\"> <h3 id=\"_named_remote_in_configuration_file\">Named remote in configuration file</h3>  <p>You can choose to provide the name of a remote which you had previously configured using <a href=\"git-remote\">git-remote[1]</a>, <a href=\"git-config\">git-config[1]</a> or even by a manual edit to the <code>$GIT_DIR/config</code> file. The URL of this remote will be used to access the repository. The refspec of this remote will be used by default when you do not provide a refspec on the command line. The entry in the config file would appear like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        [remote \"&lt;name&gt;\"]\n                url = &lt;url&gt;\n                pushurl = &lt;pushurl&gt;\n                push = &lt;refspec&gt;\n                fetch = &lt;refspec&gt;</pre> </div> </div>  <p>The <code>&lt;pushurl&gt;</code> is used for pushes only. It is optional and defaults to <code>&lt;url&gt;</code>.</p>  </div> <div class=\"sect2\"> <h3 id=\"_named_file_in_code_git_dir_remotes_code\">Named file in <code>$GIT_DIR/remotes</code>\n</h3>  <p>You can choose to provide the name of a file in <code>$GIT_DIR/remotes</code>. The URL in this file will be used to access the repository. The refspec in this file will be used as default when you do not provide a refspec on the command line. This file should have the following format:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        URL: one of the above URL format\n        Push: &lt;refspec&gt;\n        Pull: &lt;refspec&gt;</pre> </div> </div>  <p><code>Push:</code> lines are used by <code>git push</code> and <code>Pull:</code> lines are used by <code>git pull</code> and <code>git fetch</code>. Multiple <code>Push:</code> and <code>Pull:</code> lines may be specified for additional branch mappings.</p>  </div> <div class=\"sect2\"> <h3 id=\"_named_file_in_code_git_dir_branches_code\">Named file in <code>$GIT_DIR/branches</code>\n</h3>  <p>You can choose to provide the name of a file in <code>$GIT_DIR/branches</code>. The URL in this file will be used to access the repository. This file should have the following format:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        &lt;url&gt;#&lt;head&gt;</pre> </div> </div>  <p><code>&lt;url&gt;</code> is required; <code>#&lt;head&gt;</code> is optional.</p>   <p>Depending on the operation, git will use one of the following refspecs, if you don’t provide one on the command line. <code>&lt;branch&gt;</code> is the name of this file in <code>$GIT_DIR/branches</code> and <code>&lt;head&gt;</code> defaults to <code>master</code>.</p>   <p>git fetch uses:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        refs/heads/&lt;head&gt;:refs/heads/&lt;branch&gt;</pre> </div> </div>  <p>git push uses:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        HEAD:refs/heads/&lt;head&gt;</pre> </div> </div> </div>\n</div>   <h2 id=\"_merge_strategies\">Merge strategies</h2> <div class=\"sectionbody\"> <p>The merge mechanism (<code>git merge</code> and <code>git pull</code> commands) allows the backend <code>merge strategies</code> to be chosen with <code>-s</code> option. Some strategies can also take their own options, which can be passed by giving <code>-X&lt;option&gt;</code> arguments to <code>git merge</code> and/or <code>git pull</code>.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">resolve</dt> <dd> <p>This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.</p> </dd> <dt class=\"hdlist1\">recursive</dt> <dd> <p>This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.</p>  <p>The <code>recursive</code> strategy can take the following options:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">ours</dt> <dd> <p>This option forces conflicting hunks to be auto-resolved cleanly by favoring <code>our</code> version. Changes from the other tree that do not conflict with our side are reflected to the merge result. For a binary file, the entire contents are taken from our side.</p>  <p>This should not be confused with the <code>ours</code> merge strategy, which does not even look at what the other tree contains at all. It discards everything the other tree did, declaring <code>our</code> history contains all that happened in it.</p>  </dd> <dt class=\"hdlist1\">theirs</dt> <dd> <p>This is the opposite of <code>ours</code>.</p> </dd> <dt class=\"hdlist1\">patience</dt> <dd> <p>With this option, <code>merge-recursive</code> spends a little extra time to avoid mismerges that sometimes occur due to unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged have diverged wildly. See also <a href=\"git-diff\">git-diff[1]</a> <code>--patience</code>.</p> </dd> <dt class=\"hdlist1\">diff-algorithm=[patience|minimal|histogram|myers]</dt> <dd> <p>Tells <code>merge-recursive</code> to use a different diff algorithm, which can help avoid mismerges that occur due to unimportant matching lines (such as braces from distinct functions). See also <a href=\"git-diff\">git-diff[1]</a> <code>--diff-algorithm</code>.</p> </dd> <dt class=\"hdlist1\">ignore-space-change</dt> <dt class=\"hdlist1\">ignore-all-space</dt> <dt class=\"hdlist1\">ignore-space-at-eol</dt> <dd> <p>Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge. Whitespace changes mixed with other changes to a line are not ignored. See also <a href=\"git-diff\">git-diff[1]</a> <code>-b</code>, <code>-w</code>, and <code>--ignore-space-at-eol</code>.</p> <div class=\"ulist\"> <ul> <li> <p>If <code>their</code> version only introduces whitespace changes to a line, <code>our</code> version is used;</p> </li> <li> <p>If <code>our</code> version introduces whitespace changes but <code>their</code> version includes a substantial change, <code>their</code> version is used;</p> </li> <li> <p>Otherwise, the merge proceeds in the usual way.</p> </li> </ul> </div> </dd> <dt class=\"hdlist1\">renormalize</dt> <dd> <p>This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge. This option is meant to be used when merging branches with different clean filters or end-of-line normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in <a href=\"gitattributes\">gitattributes[5]</a> for details.</p> </dd> <dt class=\"hdlist1\">no-renormalize</dt> <dd> <p>Disables the <code>renormalize</code> option. This overrides the <code>merge.renormalize</code> configuration variable.</p> </dd> <dt class=\"hdlist1\">no-renames</dt> <dd> <p>Turn off rename detection. See also <a href=\"git-diff\">git-diff[1]</a> <code>--no-renames</code>.</p> </dd> <dt class=\"hdlist1\">find-renames[=&lt;n&gt;]</dt> <dd> <p>Turn on rename detection, optionally setting the similarity threshold. This is the default. See also <a href=\"git-diff\">git-diff[1]</a> <code>--find-renames</code>.</p> </dd> <dt class=\"hdlist1\">rename-threshold=&lt;n&gt;</dt> <dd> <p>Deprecated synonym for <code>find-renames=&lt;n&gt;</code>.</p> </dd> <dt class=\"hdlist1\">subtree[=&lt;path&gt;]</dt> <dd> <p>This option is a more advanced form of <code>subtree</code> strategy, where the strategy makes a guess on how two trees must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped from the beginning) to make the shape of two trees to match.</p> </dd> </dl> </div> </dd> <dt class=\"hdlist1\">octopus</dt> <dd> <p>This resolves cases with more than two heads, but refuses to do a complex merge that needs manual resolution. It is primarily meant to be used for bundling topic branch heads together. This is the default merge strategy when pulling or merging more than one branch.</p> </dd> <dt class=\"hdlist1\">ours</dt> <dd> <p>This resolves any number of heads, but the resulting tree of the merge is always that of the current branch head, effectively ignoring all changes from all other branches. It is meant to be used to supersede old development history of side branches. Note that this is different from the -Xours option to the <code>recursive</code> merge strategy.</p> </dd> <dt class=\"hdlist1\">subtree</dt> <dd> <p>This is a modified recursive strategy. When merging trees A and B, if B corresponds to a subtree of A, B is first adjusted to match the tree structure of A, instead of reading the trees at the same level. This adjustment is also done to the common ancestor tree.</p> </dd> </dl> </div>  <p>With the strategies that use 3-way merge (including the default, <code>recursive</code>), if a change is made on both branches, but later reverted on one of the branches, that change will be present in the merged result; some people find this behavior confusing. It occurs because only the heads and the merge base are considered when performing a merge, not the individual commits. The merge algorithm therefore considers the reverted change as no change at all, and substitutes the changed version instead.</p> </div>   <h2 id=\"_default_behaviour\">Default behaviour</h2> <div class=\"sectionbody\"> <p>Often people use <code>git pull</code> without giving any parameter. Traditionally, this has been equivalent to saying <code>git pull\norigin</code>. However, when configuration <code>branch.&lt;name&gt;.remote</code> is present while on branch <code>&lt;name&gt;</code>, that value is used instead of <code>origin</code>.</p>   <p>In order to determine what URL to use to fetch from, the value of the configuration <code>remote.&lt;origin&gt;.url</code> is consulted and if there is not any such variable, the value on <code>URL: ` line\nin `$GIT_DIR/remotes/&lt;origin&gt;</code> file is used.</p>   <p>In order to determine what remote branches to fetch (and optionally store in the remote-tracking branches) when the command is run without any refspec parameters on the command line, values of the configuration variable <code>remote.&lt;origin&gt;.fetch</code> are consulted, and if there aren’t any, <code>$GIT_DIR/remotes/&lt;origin&gt;</code> file is consulted and its `Pull: ` lines are used. In addition to the refspec formats described in the OPTIONS section, you can have a globbing refspec that looks like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>refs/heads/*:refs/remotes/origin/*</pre> </div> </div>  <p>A globbing refspec must have a non-empty RHS (i.e. must store what were fetched in remote-tracking branches), and its LHS and RHS must end with <code>/*</code>. The above specifies that all remote branches are tracked using remote-tracking branches in <code>refs/remotes/origin/</code> hierarchy under the same name.</p>   <p>The rule to determine which remote branch to merge after fetching is a bit involved, in order not to break backward compatibility.</p>   <p>If explicit refspecs were given on the command line of <code>git pull</code>, they are all merged.</p>   <p>When no refspec was given on the command line, then <code>git pull</code> uses the refspec from the configuration or <code>$GIT_DIR/remotes/&lt;origin&gt;</code>. In such cases, the following rules apply:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>If <code>branch.&lt;name&gt;.merge</code> configuration for the current branch <code>&lt;name&gt;</code> exists, that is the name of the branch at the remote site that is merged.</p> </li> <li> <p>If the refspec is a globbing one, nothing is merged.</p> </li> <li> <p>Otherwise the remote branch of the first refspec is merged.</p> </li> </ol> </div>\n</div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\">\n<div class=\"ulist\"> <ul> <li> <p>Update the remote-tracking branches for the repository you cloned from, then merge one of them into your current branch:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git pull, git pull origin</pre> </div> </div>  <p>Normally the branch merged in is the HEAD of the remote repository, but the choice is determined by the branch.&lt;name&gt;.remote and branch.&lt;name&gt;.merge options; see <a href=\"git-config\">git-config[1]</a> for details.</p>  </li> <li> <p>Merge into the current branch the remote branch <code>next</code>:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git pull origin next</pre> </div> </div>  <p>This leaves a copy of <code>next</code> temporarily in FETCH_HEAD, but does not update any remote-tracking branches. Using remote-tracking branches, the same can be done by invoking fetch and merge:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git fetch origin\n$ git merge origin/next</pre> </div> </div> </li> </ul> </div>  <p>If you tried a pull which resulted in complex conflicts and would want to start over, you can recover with <code>git reset</code>.</p> </div>   <h2 id=\"_bugs\">Bugs</h2> <div class=\"sectionbody\"> <p>Using --recurse-submodules can only fetch new commits in already checked out submodules right now. When e.g. upstream added a new submodule in the just fetched commits of the superproject the submodule itself can not be fetched, making it impossible to check out that submodule later without having to do a fetch again. This is expected to be fixed in a future Git version.</p> </div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-fetch\">git-fetch[1]</a>, <a href=\"git-merge\">git-merge[1]</a>, <a href=\"git-config\">git-config[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-pull\" class=\"_attribution-link\">https://git-scm.com/docs/git-pull</a>\n  </p>\n</div>\n","git-revert":"<h1>git-revert</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-revert - Revert some existing commits</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git revert [--[no-]edit] [-n] [-m parent-number] [-s] [-S[&lt;keyid&gt;]] &lt;commit&gt;…​\ngit revert --continue\ngit revert --quit\ngit revert --abort</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Given one or more existing commits, revert the changes that the related patches introduce, and record some new commits that record them. This requires your working tree to be clean (no modifications from the HEAD commit).</p>   <p>Note: <code>git revert</code> is used to record some new commits to reverse the effect of some earlier commits (often only a faulty one). If you want to throw away all uncommitted changes in your working directory, you should see <a href=\"git-reset\">git-reset[1]</a>, particularly the <code>--hard</code> option. If you want to extract specific files as they were in another commit, you should see <a href=\"git-checkout\">git-checkout[1]</a>, specifically the <code>git checkout\n&lt;commit&gt; -- &lt;filename&gt;</code> syntax. Take care with these alternatives as both will discard uncommitted changes in your working directory.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">&lt;commit&gt;…​</dt> <dd> <p>Commits to revert. For a more complete list of ways to spell commit names, see <a href=\"gitrevisions\">gitrevisions[7]</a>. Sets of commits can also be given but no traversal is done by default, see <a href=\"git-rev-list\">git-rev-list[1]</a> and its <code>--no-walk</code> option.</p> </dd> <dt class=\"hdlist1\">-e</dt> <dt class=\"hdlist1\">--edit</dt> <dd> <p>With this option, <code>git revert</code> will let you edit the commit message prior to committing the revert. This is the default if you run the command from a terminal.</p> </dd> <dt class=\"hdlist1\">-m parent-number</dt> <dt class=\"hdlist1\">--mainline parent-number</dt> <dd> <p>Usually you cannot revert a merge because you do not know which side of the merge should be considered the mainline. This option specifies the parent number (starting from 1) of the mainline and allows revert to reverse the change relative to the specified parent.</p>  <p>Reverting a merge commit declares that you will never want the tree changes brought in by the merge. As a result, later merges will only bring in tree changes introduced by commits that are not ancestors of the previously reverted merge. This may or may not be what you want.</p>   <p>See the <a href=\"https://git-scm.com/docs/howto/revert-a-faulty-merge.html\">revert-a-faulty-merge How-To</a> for more details.</p>  </dd> <dt class=\"hdlist1\">--no-edit</dt> <dd> <p>With this option, <code>git revert</code> will not start the commit message editor.</p> </dd> <dt class=\"hdlist1\">-n</dt> <dt class=\"hdlist1\">--no-commit</dt> <dd> <p>Usually the command automatically creates some commits with commit log messages stating which commits were reverted. This flag applies the changes necessary to revert the named commits to your working tree and the index, but does not make the commits. In addition, when this option is used, your index does not have to match the HEAD commit. The revert is done against the beginning state of your index.</p>  <p>This is useful when reverting more than one commits' effect to your index in a row.</p>  </dd> <dt class=\"hdlist1\">-S[&lt;keyid&gt;]</dt> <dt class=\"hdlist1\">--gpg-sign[=&lt;keyid&gt;]</dt> <dd> <p>GPG-sign commits. The <code>keyid</code> argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space.</p> </dd> <dt class=\"hdlist1\">-s</dt> <dt class=\"hdlist1\">--signoff</dt> <dd> <p>Add Signed-off-by line at the end of the commit message. See the signoff option in <a href=\"git-commit\">git-commit[1]</a> for more information.</p> </dd> <dt class=\"hdlist1\">--strategy=&lt;strategy&gt;</dt> <dd> <p>Use the given merge strategy. Should only be used once. See the MERGE STRATEGIES section in <a href=\"git-merge\">git-merge[1]</a> for details.</p> </dd> <dt class=\"hdlist1\">-X&lt;option&gt;</dt> <dt class=\"hdlist1\">--strategy-option=&lt;option&gt;</dt> <dd> <p>Pass the merge strategy-specific option through to the merge strategy. See <a href=\"git-merge\">git-merge[1]</a> for details.</p> </dd> </dl> </div></div>   <h2 id=\"_sequencer_subcommands\">Sequencer subcommands</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--continue</dt> <dd> <p>Continue the operation in progress using the information in <code>.git/sequencer</code>. Can be used to continue after resolving conflicts in a failed cherry-pick or revert.</p> </dd> <dt class=\"hdlist1\">--quit</dt> <dd> <p>Forget about the current operation in progress. Can be used to clear the sequencer state after a failed cherry-pick or revert.</p> </dd> <dt class=\"hdlist1\">--abort</dt> <dd> <p>Cancel the operation and return to the pre-sequence state.</p> </dd> </dl> </div></div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>git revert HEAD~3</code></dt> <dd> <p>Revert the changes specified by the fourth last commit in HEAD and create a new commit with the reverted changes.</p> </dd> <dt class=\"hdlist1\"><code>git revert -n master~5..master~2</code></dt> <dd> <p>Revert the changes done by commits from the fifth last commit in master (included) to the third last commit in master (included), but do not create any commit with the reverted changes. The revert only modifies the working tree and the index.</p> </dd> </dl> </div></div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-cherry-pick\">git-cherry-pick[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-revert\" class=\"_attribution-link\">https://git-scm.com/docs/git-revert</a>\n  </p>\n</div>\n","git-am":"<h1>git-am</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-am - Apply a series of patches from a mailbox</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git am [--signoff] [--keep] [--[no-]keep-cr] [--[no-]utf8]\n         [--[no-]3way] [--interactive] [--committer-date-is-author-date]\n         [--ignore-date] [--ignore-space-change | --ignore-whitespace]\n         [--whitespace=&lt;option&gt;] [-C&lt;n&gt;] [-p&lt;n&gt;] [--directory=&lt;dir&gt;]\n         [--exclude=&lt;path&gt;] [--include=&lt;path&gt;] [--reject] [-q | --quiet]\n         [--[no-]scissors] [-S[&lt;keyid&gt;]] [--patch-format=&lt;format&gt;]\n         [(&lt;mbox&gt; | &lt;Maildir&gt;)…​]\ngit am (--continue | --skip | --abort)</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Splits mail messages in a mailbox into commit log message, authorship information and patches, and applies them to the current branch.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">(&lt;mbox&gt;|&lt;Maildir&gt;)…​</dt> <dd> <p>The list of mailbox files to read patches from. If you do not supply this argument, the command reads from the standard input. If you supply directories, they will be treated as Maildirs.</p> </dd> <dt class=\"hdlist1\">-s</dt> <dt class=\"hdlist1\">--signoff</dt> <dd> <p>Add a <code>Signed-off-by:</code> line to the commit message, using the committer identity of yourself. See the signoff option in <a href=\"git-commit\">git-commit[1]</a> for more information.</p> </dd> <dt class=\"hdlist1\">-k</dt> <dt class=\"hdlist1\">--keep</dt> <dd> <p>Pass <code>-k</code> flag to <code>git mailinfo</code> (see <a href=\"git-mailinfo\">git-mailinfo[1]</a>).</p> </dd> <dt class=\"hdlist1\">--keep-non-patch</dt> <dd> <p>Pass <code>-b</code> flag to <code>git mailinfo</code> (see <a href=\"git-mailinfo\">git-mailinfo[1]</a>).</p> </dd> <dt class=\"hdlist1\">--[no-]keep-cr</dt> <dd> <p>With <code>--keep-cr</code>, call <code>git mailsplit</code> (see <a href=\"git-mailsplit\">git-mailsplit[1]</a>) with the same option, to prevent it from stripping CR at the end of lines. <code>am.keepcr</code> configuration variable can be used to specify the default behaviour. <code>--no-keep-cr</code> is useful to override <code>am.keepcr</code>.</p> </dd> <dt class=\"hdlist1\">-c</dt> <dt class=\"hdlist1\">--scissors</dt> <dd> <p>Remove everything in body before a scissors line (see <a href=\"git-mailinfo\">git-mailinfo[1]</a>). Can be activated by default using the <code>mailinfo.scissors</code> configuration variable.</p> </dd> <dt class=\"hdlist1\">--no-scissors</dt> <dd> <p>Ignore scissors lines (see <a href=\"git-mailinfo\">git-mailinfo[1]</a>).</p> </dd> <dt class=\"hdlist1\">-m</dt> <dt class=\"hdlist1\">--message-id</dt> <dd> <p>Pass the <code>-m</code> flag to <code>git mailinfo</code> (see <a href=\"git-mailinfo\">git-mailinfo[1]</a>), so that the Message-ID header is added to the commit message. The <code>am.messageid</code> configuration variable can be used to specify the default behaviour.</p> </dd> <dt class=\"hdlist1\">--no-message-id</dt> <dd> <p>Do not add the Message-ID header to the commit message. <code>no-message-id</code> is useful to override <code>am.messageid</code>.</p> </dd> <dt class=\"hdlist1\">-q</dt> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>Be quiet. Only print error messages.</p> </dd> <dt class=\"hdlist1\">-u</dt> <dt class=\"hdlist1\">--utf8</dt> <dd> <p>Pass <code>-u</code> flag to <code>git mailinfo</code> (see <a href=\"git-mailinfo\">git-mailinfo[1]</a>). The proposed commit log message taken from the e-mail is re-coded into UTF-8 encoding (configuration variable <code>i18n.commitencoding</code> can be used to specify project’s preferred encoding if it is not UTF-8).</p>  <p>This was optional in prior versions of git, but now it is the default. You can use <code>--no-utf8</code> to override this.</p>  </dd> <dt class=\"hdlist1\">--no-utf8</dt> <dd> <p>Pass <code>-n</code> flag to <code>git mailinfo</code> (see <a href=\"git-mailinfo\">git-mailinfo[1]</a>).</p> </dd> <dt class=\"hdlist1\">-3</dt> <dt class=\"hdlist1\">--3way</dt> <dt class=\"hdlist1\">--no-3way</dt> <dd> <p>When the patch does not apply cleanly, fall back on 3-way merge if the patch records the identity of blobs it is supposed to apply to and we have those blobs available locally. <code>--no-3way</code> can be used to override am.threeWay configuration variable. For more information, see am.threeWay in <a href=\"git-config\">git-config[1]</a>.</p> </dd> <dt class=\"hdlist1\">--ignore-space-change</dt> <dt class=\"hdlist1\">--ignore-whitespace</dt> <dt class=\"hdlist1\">--whitespace=&lt;option&gt;</dt> <dt class=\"hdlist1\">-C&lt;n&gt;</dt> <dt class=\"hdlist1\">-p&lt;n&gt;</dt> <dt class=\"hdlist1\">--directory=&lt;dir&gt;</dt> <dt class=\"hdlist1\">--exclude=&lt;path&gt;</dt> <dt class=\"hdlist1\">--include=&lt;path&gt;</dt> <dt class=\"hdlist1\">--reject</dt> <dd> <p>These flags are passed to the <code>git apply</code> (see <a href=\"git-apply\">git-apply[1]</a>) program that applies the patch.</p> </dd> <dt class=\"hdlist1\">--patch-format</dt> <dd> <p>By default the command will try to detect the patch format automatically. This option allows the user to bypass the automatic detection and specify the patch format that the patch(es) should be interpreted as. Valid formats are mbox, stgit, stgit-series and hg.</p> </dd> <dt class=\"hdlist1\">-i</dt> <dt class=\"hdlist1\">--interactive</dt> <dd> <p>Run interactively.</p> </dd> <dt class=\"hdlist1\">--committer-date-is-author-date</dt> <dd> <p>By default the command records the date from the e-mail message as the commit author date, and uses the time of commit creation as the committer date. This allows the user to lie about the committer date by using the same value as the author date.</p> </dd> <dt class=\"hdlist1\">--ignore-date</dt> <dd> <p>By default the command records the date from the e-mail message as the commit author date, and uses the time of commit creation as the committer date. This allows the user to lie about the author date by using the same value as the committer date.</p> </dd> <dt class=\"hdlist1\">--skip</dt> <dd> <p>Skip the current patch. This is only meaningful when restarting an aborted patch.</p> </dd> <dt class=\"hdlist1\">-S[&lt;keyid&gt;]</dt> <dt class=\"hdlist1\">--gpg-sign[=&lt;keyid&gt;]</dt> <dd> <p>GPG-sign commits. The <code>keyid</code> argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space.</p> </dd> <dt class=\"hdlist1\">--continue</dt> <dt class=\"hdlist1\">-r</dt> <dt class=\"hdlist1\">--resolved</dt> <dd> <p>After a patch failure (e.g. attempting to apply conflicting patch), the user has applied it by hand and the index file stores the result of the application. Make a commit using the authorship and commit log extracted from the e-mail message and the current index file, and continue.</p> </dd> <dt class=\"hdlist1\">--resolvemsg=&lt;msg&gt;</dt> <dd> <p>When a patch failure occurs, &lt;msg&gt; will be printed to the screen before exiting. This overrides the standard message informing you to use <code>--continue</code> or <code>--skip</code> to handle the failure. This is solely for internal use between <code>git rebase</code> and <code>git am</code>.</p> </dd> <dt class=\"hdlist1\">--abort</dt> <dd> <p>Restore the original branch and abort the patching operation.</p> </dd> </dl> </div></div>   <h2 id=\"_discussion\">Discussion</h2> <div class=\"sectionbody\"> <p>The commit author name is taken from the \"From: \" line of the message, and commit author date is taken from the \"Date: \" line of the message. The \"Subject: \" line is used as the title of the commit, after stripping common prefix \"[PATCH &lt;anything&gt;]\". The \"Subject: \" line is supposed to concisely describe what the commit is about in one line of text.</p>   <p>\"From: \" and \"Subject: \" lines starting the body override the respective commit author name and title values taken from the headers.</p>   <p>The commit message is formed by the title taken from the \"Subject: \", a blank line and the body of the message up to where the patch begins. Excess whitespace at the end of each line is automatically stripped.</p>   <p>The patch is expected to be inline, directly following the message. Any line that is of the form:</p>  <div class=\"ulist\"> <ul> <li> <p>three-dashes and end-of-line, or</p> </li> <li> <p>a line that begins with \"diff -\", or</p> </li> <li> <p>a line that begins with \"Index: \"</p> </li> </ul> </div>  <p>is taken as the beginning of a patch, and the commit log message is terminated before the first occurrence of such a line.</p>   <p>When initially invoking <code>git am</code>, you give it the names of the mailboxes to process. Upon seeing the first patch that does not apply, it aborts in the middle. You can recover from this in one of two ways:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>skip the current patch by re-running the command with the <code>--skip</code> option.</p> </li> <li> <p>hand resolve the conflict in the working directory, and update the index file to bring it into a state that the patch should have produced. Then run the command with the <code>--continue</code> option.</p> </li> </ol> </div>  <p>The command refuses to process new mailboxes until the current operation is finished, so if you decide to start over from scratch, run <code>git am --abort</code> before running the command with mailbox names.</p>   <p>Before any patches are applied, ORIG_HEAD is set to the tip of the current branch. This is useful if you have problems with multiple commits, like running <code>git am</code> on the wrong branch or an error in the commits that is more easily fixed by changing the mailbox (e.g. errors in the \"From:\" lines).</p> </div>   <h2 id=\"_hooks\">Hooks</h2> <div class=\"sectionbody\"> <p>This command can run <code>applypatch-msg</code>, <code>pre-applypatch</code>, and <code>post-applypatch</code> hooks. See <a href=\"githooks\">githooks[5]</a> for more information.</p> </div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-apply\">git-apply[1]</a>.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-am\" class=\"_attribution-link\">https://git-scm.com/docs/git-am</a>\n  </p>\n</div>\n","git-merge":"<h1>git-merge</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-merge - Join two or more development histories together</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git merge [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]\n        [-s &lt;strategy&gt;] [-X &lt;strategy-option&gt;] [-S[&lt;keyid&gt;]]\n        [--[no-]allow-unrelated-histories]\n        [--[no-]rerere-autoupdate] [-m &lt;msg&gt;] [&lt;commit&gt;…​]\ngit merge &lt;msg&gt; HEAD &lt;commit&gt;…​\ngit merge --abort</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Incorporates changes from the named commits (since the time their histories diverged from the current branch) into the current branch. This command is used by <code>git pull</code> to incorporate changes from another repository and can be used by hand to merge changes from one branch into another.</p>   <p>Assume the following history exists and the current branch is \"<code>master</code>\":</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>          A---B---C topic\n         /\n    D---E---F---G master</pre> </div> </div>  <p>Then \"<code>git merge topic</code>\" will replay the changes made on the <code>topic</code> branch since it diverged from <code>master</code> (i.e., <code>E</code>) until its current commit (<code>C</code>) on top of <code>master</code>, and record the result in a new commit along with the names of the two parent commits and a log message from the user describing the changes.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>          A---B---C topic\n         /         \\\n    D---E---F---G---H master</pre> </div> </div>  <p>The second syntax (&lt;msg&gt; <code>HEAD</code> &lt;commit&gt;…​) is supported for historical reasons. Do not use it from the command line or in new scripts. It is the same as <code>git merge -m &lt;msg&gt; &lt;commit&gt;...</code>.</p>   <p>The third syntax (\"<code>git merge --abort</code>\") can only be run after the merge has resulted in conflicts. <code>git merge --abort</code> will abort the merge process and try to reconstruct the pre-merge state. However, if there were uncommitted changes when the merge started (and especially if those changes were further modified after the merge was started), <code>git merge --abort</code> will in some cases be unable to reconstruct the original (pre-merge) changes. Therefore:</p>   <p><strong>Warning</strong>: Running <code>git merge</code> with non-trivial uncommitted changes is discouraged: while possible, it may leave you in a state that is hard to back out of in the case of a conflict.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\">\n<div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--commit</dt> <dt class=\"hdlist1\">--no-commit</dt> <dd> <p>Perform the merge and commit the result. This option can be used to override --no-commit.</p>  <p>With --no-commit perform the merge but pretend the merge failed and do not autocommit, to give the user a chance to inspect and further tweak the merge result before committing.</p>  </dd> <dt class=\"hdlist1\">--edit</dt> <dt class=\"hdlist1\">-e</dt> <dt class=\"hdlist1\">--no-edit</dt> <dd> <p> Invoke an editor before committing successful mechanical merge to further edit the auto-generated merge message, so that the user can explain and justify the merge. The <code>--no-edit</code> option can be used to accept the auto-generated message (this is generally discouraged). The <code>--edit</code> (or <code>-e</code>) option is still useful if you are giving a draft message with the <code>-m</code> option from the command line and want to edit it in the editor.</p>  <p>Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message. They will see an editor opened when they run <code>git merge</code>. To make it easier to adjust such scripts to the updated behaviour, the environment variable <code>GIT_MERGE_AUTOEDIT</code> can be set to <code>no</code> at the beginning of them.</p>  </dd> <dt class=\"hdlist1\">--ff</dt> <dd> <p>When the merge resolves as a fast-forward, only update the branch pointer, without creating a merge commit. This is the default behavior.</p> </dd> <dt class=\"hdlist1\">--no-ff</dt> <dd> <p>Create a merge commit even when the merge resolves as a fast-forward. This is the default behaviour when merging an annotated (and possibly signed) tag.</p> </dd> <dt class=\"hdlist1\">--ff-only</dt> <dd> <p>Refuse to merge and exit with a non-zero status unless the current <code>HEAD</code> is already up-to-date or the merge can be resolved as a fast-forward.</p> </dd> <dt class=\"hdlist1\">--log[=&lt;n&gt;]</dt> <dt class=\"hdlist1\">--no-log</dt> <dd> <p>In addition to branch names, populate the log message with one-line descriptions from at most &lt;n&gt; actual commits that are being merged. See also <a href=\"git-fmt-merge-msg\">git-fmt-merge-msg[1]</a>.</p>  <p>With --no-log do not list one-line descriptions from the actual commits being merged.</p>  </dd> <dt class=\"hdlist1\">--stat</dt> <dt class=\"hdlist1\">-n</dt> <dt class=\"hdlist1\">--no-stat</dt> <dd> <p>Show a diffstat at the end of the merge. The diffstat is also controlled by the configuration option merge.stat.</p>  <p>With -n or --no-stat do not show a diffstat at the end of the merge.</p>  </dd> <dt class=\"hdlist1\">--squash</dt> <dt class=\"hdlist1\">--no-squash</dt> <dd> <p>Produce the working tree and index state as if a real merge happened (except for the merge information), but do not actually make a commit, move the <code>HEAD</code>, or record <code>$GIT_DIR/MERGE_HEAD</code> (to cause the next <code>git commit</code> command to create a merge commit). This allows you to create a single commit on top of the current branch whose effect is the same as merging another branch (or more in case of an octopus).</p>  <p>With --no-squash perform the merge and commit the result. This option can be used to override --squash.</p>  </dd> <dt class=\"hdlist1\">-s &lt;strategy&gt;</dt> <dt class=\"hdlist1\">--strategy=&lt;strategy&gt;</dt> <dd> <p>Use the given merge strategy; can be supplied more than once to specify them in the order they should be tried. If there is no <code>-s</code> option, a built-in list of strategies is used instead (<code>git merge-recursive</code> when merging a single head, <code>git merge-octopus</code> otherwise).</p> </dd> <dt class=\"hdlist1\">-X &lt;option&gt;</dt> <dt class=\"hdlist1\">--strategy-option=&lt;option&gt;</dt> <dd> <p>Pass merge strategy specific option through to the merge strategy.</p> </dd> <dt class=\"hdlist1\">--verify-signatures</dt> <dt class=\"hdlist1\">--no-verify-signatures</dt> <dd> <p>Verify that the tip commit of the side branch being merged is signed with a valid key, i.e. a key that has a valid uid: in the default trust model, this means the signing key has been signed by a trusted key. If the tip commit of the side branch is not signed with a valid key, the merge is aborted.</p> </dd> <dt class=\"hdlist1\">--summary</dt> <dt class=\"hdlist1\">--no-summary</dt> <dd> <p>Synonyms to --stat and --no-stat; these are deprecated and will be removed in the future.</p> </dd> <dt class=\"hdlist1\">-q</dt> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>Operate quietly. Implies --no-progress.</p> </dd> <dt class=\"hdlist1\">-v</dt> <dt class=\"hdlist1\">--verbose</dt> <dd> <p>Be verbose.</p> </dd> <dt class=\"hdlist1\">--progress</dt> <dt class=\"hdlist1\">--no-progress</dt> <dd> <p>Turn progress on/off explicitly. If neither is specified, progress is shown if standard error is connected to a terminal. Note that not all merge strategies may support progress reporting.</p> </dd> <dt class=\"hdlist1\">--allow-unrelated-histories</dt> <dd> <p>By default, <code>git merge</code> command refuses to merge histories that do not share a common ancestor. This option can be used to override this safety when merging histories of two projects that started their lives independently. As that is a very rare occasion, no configuration variable to enable this by default exists and will not be added.</p> </dd> </dl> </div> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-S[&lt;keyid&gt;]</dt> <dt class=\"hdlist1\">--gpg-sign[=&lt;keyid&gt;]</dt> <dd> <p>GPG-sign the resulting merge commit. The <code>keyid</code> argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space.</p> </dd> <dt class=\"hdlist1\">-m &lt;msg&gt;</dt> <dd> <p>Set the commit message to be used for the merge commit (in case one is created).</p>  <p>If <code>--log</code> is specified, a shortlog of the commits being merged will be appended to the specified message.</p>   <p>The <code>git fmt-merge-msg</code> command can be used to give a good default for automated <code>git merge</code> invocations. The automated message can include the branch description.</p>  </dd> <dt class=\"hdlist1\">--[no-]rerere-autoupdate</dt> <dd> <p>Allow the rerere mechanism to update the index with the result of auto-conflict resolution if possible.</p> </dd> <dt class=\"hdlist1\">--abort</dt> <dd> <p>Abort the current conflict resolution process, and try to reconstruct the pre-merge state.</p>  <p>If there were uncommitted worktree changes present when the merge started, <code>git merge --abort</code> will in some cases be unable to reconstruct these changes. It is therefore recommended to always commit or stash your changes before running <code>git merge</code>.</p>   <p><code>git merge --abort</code> is equivalent to <code>git reset --merge</code> when <code>MERGE_HEAD</code> is present.</p>  </dd> <dt class=\"hdlist1\">&lt;commit&gt;…​</dt> <dd> <p>Commits, usually other branch heads, to merge into our branch. Specifying more than one commit will create a merge with more than two parents (affectionately called an Octopus merge).</p>  <p>If no commit is given from the command line, merge the remote-tracking branches that the current branch is configured to use as its upstream. See also the configuration section of this manual page.</p>   <p>When <code>FETCH_HEAD</code> (and no other commit) is specified, the branches recorded in the <code>.git/FETCH_HEAD</code> file by the previous invocation of <code>git fetch</code> for merging are merged to the current branch.</p>  </dd> </dl> </div>\n</div>   <h2 id=\"_pre_merge_checks\">Pre-merge checks</h2> <div class=\"sectionbody\"> <p>Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be clobbered if there are conflicts. See also <a href=\"git-stash\">git-stash[1]</a>. <code>git pull</code> and <code>git merge</code> will stop without doing anything when local uncommitted changes overlap with files that <code>git pull</code>/<code>git merge</code> may need to update.</p>   <p>To avoid recording unrelated changes in the merge commit, <code>git pull</code> and <code>git merge</code> will also abort if there are any changes registered in the index relative to the <code>HEAD</code> commit. (One exception is when the changed index entries are in the state that would result from the merge already.)</p>   <p>If all named commits are already ancestors of <code>HEAD</code>, <code>git merge</code> will exit early with the message \"Already up-to-date.\"</p> </div>   <h2 id=\"_fast_forward_merge\">Fast-forward merge</h2> <div class=\"sectionbody\"> <p>Often the current branch head is an ancestor of the named commit. This is the most common case especially when invoked from <code>git pull</code>: you are tracking an upstream repository, you have committed no local changes, and now you want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history; instead, the <code>HEAD</code> (along with the index) is updated to point at the named commit, without creating an extra merge commit.</p>   <p>This behavior can be suppressed with the <code>--no-ff</code> option.</p> </div>   <h2 id=\"_true_merge\">True merge</h2> <div class=\"sectionbody\"> <p>Except in a fast-forward merge (see above), the branches to be merged must be tied together by a merge commit that has both of them as its parents.</p>   <p>A merged version reconciling the changes from all branches to be merged is committed, and your <code>HEAD</code>, index, and working tree are updated to it. It is possible to have modifications in the working tree as long as they do not overlap; the update will preserve them.</p>   <p>When it is not obvious how to reconcile the changes, the following happens:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>The <code>HEAD</code> pointer stays the same.</p> </li> <li> <p>The <code>MERGE_HEAD</code> ref is set to point to the other branch head.</p> </li> <li> <p>Paths that merged cleanly are updated both in the index file and in your working tree.</p> </li> <li> <p>For conflicting paths, the index file records up to three versions: stage 1 stores the version from the common ancestor, stage 2 from <code>HEAD</code>, and stage 3 from <code>MERGE_HEAD</code> (you can inspect the stages with <code>git ls-files -u</code>). The working tree files contain the result of the \"merge\" program; i.e. 3-way merge results with familiar conflict markers <code>&lt;&lt;&lt;</code> <code>===</code> <code>&gt;&gt;&gt;</code>.</p> </li> <li> <p>No other changes are made. In particular, the local modifications you had before you started merge will stay the same and the index entries for them stay as they were, i.e. matching <code>HEAD</code>.</p> </li> </ol> </div>  <p>If you tried a merge which resulted in complex conflicts and want to start over, you can recover with <code>git merge --abort</code>.</p> </div>   <h2 id=\"_merging_tag\">Merging tag</h2> <div class=\"sectionbody\"> <p>When merging an annotated (and possibly signed) tag, Git always creates a merge commit even if a fast-forward merge is possible, and the commit message template is prepared with the tag message. Additionally, if the tag is signed, the signature check is reported as a comment in the message template. See also <a href=\"git-tag\">git-tag[1]</a>.</p>   <p>When you want to just integrate with the work leading to the commit that happens to be tagged, e.g. synchronizing with an upstream release point, you may not want to make an unnecessary merge commit.</p>   <p>In such a case, you can \"unwrap\" the tag yourself before feeding it to <code>git merge</code>, or pass <code>--ff-only</code> when you do not have any work on your own. e.g.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>git fetch origin\ngit merge v1.2.3^0\ngit merge --ff-only v1.2.3</pre> </div> </div>\n</div>   <h2 id=\"_how_conflicts_are_presented\">How conflicts are presented</h2> <div class=\"sectionbody\"> <p>During a merge, the working tree files are updated to reflect the result of the merge. Among the changes made to the common ancestor’s version, non-overlapping ones (that is, you changed an area of the file while the other side left that area intact, or vice versa) are incorporated in the final result verbatim. When both sides made changes to the same area, however, Git cannot randomly pick one side over the other, and asks you to resolve it by leaving what both sides did to that area.</p>   <p>By default, Git uses the same style as the one used by the \"merge\" program from the RCS suite to present such a conflicted hunk, like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>Here are lines that are either unchanged from the common\nancestor, or cleanly resolved because only one side changed.\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; yours:sample.txt\nConflict resolution is hard;\nlet's go shopping.\n=======\nGit makes conflict resolution easy.\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; theirs:sample.txt\nAnd here is another line that is cleanly resolved or unmodified.</pre> </div> </div>  <p>The area where a pair of conflicting changes happened is marked with markers <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code>=======</code>, and <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>. The part before the <code>=======</code> is typically your side, and the part afterwards is typically their side.</p>   <p>The default format does not show what the original said in the conflicting area. You cannot tell how many lines are deleted and replaced with Barbie’s remark on your side. The only thing you can tell is that your side wants to say it is hard and you’d prefer to go shopping, while the other side wants to claim it is easy.</p>   <p>An alternative style can be used by setting the \"merge.conflictStyle\" configuration variable to \"diff3\". In \"diff3\" style, the above conflict may look like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>Here are lines that are either unchanged from the common\nancestor, or cleanly resolved because only one side changed.\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; yours:sample.txt\nConflict resolution is hard;\nlet's go shopping.\n|||||||\nConflict resolution is hard.\n=======\nGit makes conflict resolution easy.\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; theirs:sample.txt\nAnd here is another line that is cleanly resolved or unmodified.</pre> </div> </div>  <p>In addition to the <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code>=======</code>, and <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> markers, it uses another <code>|||||||</code> marker that is followed by the original text. You can tell that the original just stated a fact, and your side simply gave in to that statement and gave up, while the other side tried to have a more positive attitude. You can sometimes come up with a better resolution by viewing the original.</p> </div>   <h2 id=\"_how_to_resolve_conflicts\">How to resolve conflicts</h2> <div class=\"sectionbody\"> <p>After seeing a conflict, you can do two things:</p>  <div class=\"ulist\"> <ul> <li> <p>Decide not to merge. The only clean-ups you need are to reset the index file to the <code>HEAD</code> commit to reverse 2. and to clean up working tree changes made by 2. and 3.; <code>git merge --abort</code> can be used for this.</p> </li> <li> <p>Resolve the conflicts. Git will mark the conflicts in the working tree. Edit the files into shape and <code>git add</code> them to the index. Use <code>git commit</code> to seal the deal.</p> </li> </ul> </div>  <p>You can work through the conflict with a number of tools:</p>  <div class=\"ulist\"> <ul> <li> <p>Use a mergetool. <code>git mergetool</code> to launch a graphical mergetool which will work you through the merge.</p> </li> <li> <p>Look at the diffs. <code>git diff</code> will show a three-way diff, highlighting changes from both the <code>HEAD</code> and <code>MERGE_HEAD</code> versions.</p> </li> <li> <p>Look at the diffs from each branch. <code>git log --merge -p &lt;path&gt;</code> will show diffs first for the <code>HEAD</code> version and then the <code>MERGE_HEAD</code> version.</p> </li> <li> <p>Look at the originals. <code>git show :1:filename</code> shows the common ancestor, <code>git show :2:filename</code> shows the <code>HEAD</code> version, and <code>git show :3:filename</code> shows the <code>MERGE_HEAD</code> version.</p> </li> </ul> </div>\n</div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"><div class=\"ulist\"> <ul> <li> <p>Merge branches <code>fixes</code> and <code>enhancements</code> on top of the current branch, making an octopus merge:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git merge fixes enhancements</pre> </div> </div> </li> <li> <p>Merge branch <code>obsolete</code> into the current branch, using <code>ours</code> merge strategy:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git merge -s ours obsolete</pre> </div> </div> </li> <li> <p>Merge branch <code>maint</code> into the current branch, but do not make a new commit automatically:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git merge --no-commit maint</pre> </div> </div>  <p>This can be used when you want to include further changes to the merge, or want to write your own merge commit message.</p>   <p>You should refrain from abusing this option to sneak substantial changes into a merge commit. Small fixups like bumping release/version name would be acceptable.</p>  </li> </ul> </div></div>   <h2 id=\"_merge_strategies\">Merge strategies</h2> <div class=\"sectionbody\"> <p>The merge mechanism (<code>git merge</code> and <code>git pull</code> commands) allows the backend <code>merge strategies</code> to be chosen with <code>-s</code> option. Some strategies can also take their own options, which can be passed by giving <code>-X&lt;option&gt;</code> arguments to <code>git merge</code> and/or <code>git pull</code>.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">resolve</dt> <dd> <p>This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.</p> </dd> <dt class=\"hdlist1\">recursive</dt> <dd> <p>This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.</p>  <p>The <code>recursive</code> strategy can take the following options:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">ours</dt> <dd> <p>This option forces conflicting hunks to be auto-resolved cleanly by favoring <code>our</code> version. Changes from the other tree that do not conflict with our side are reflected to the merge result. For a binary file, the entire contents are taken from our side.</p>  <p>This should not be confused with the <code>ours</code> merge strategy, which does not even look at what the other tree contains at all. It discards everything the other tree did, declaring <code>our</code> history contains all that happened in it.</p>  </dd> <dt class=\"hdlist1\">theirs</dt> <dd> <p>This is the opposite of <code>ours</code>.</p> </dd> <dt class=\"hdlist1\">patience</dt> <dd> <p>With this option, <code>merge-recursive</code> spends a little extra time to avoid mismerges that sometimes occur due to unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged have diverged wildly. See also <a href=\"git-diff\">git-diff[1]</a> <code>--patience</code>.</p> </dd> <dt class=\"hdlist1\">diff-algorithm=[patience|minimal|histogram|myers]</dt> <dd> <p>Tells <code>merge-recursive</code> to use a different diff algorithm, which can help avoid mismerges that occur due to unimportant matching lines (such as braces from distinct functions). See also <a href=\"git-diff\">git-diff[1]</a> <code>--diff-algorithm</code>.</p> </dd> <dt class=\"hdlist1\">ignore-space-change</dt> <dt class=\"hdlist1\">ignore-all-space</dt> <dt class=\"hdlist1\">ignore-space-at-eol</dt> <dd> <p>Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge. Whitespace changes mixed with other changes to a line are not ignored. See also <a href=\"git-diff\">git-diff[1]</a> <code>-b</code>, <code>-w</code>, and <code>--ignore-space-at-eol</code>.</p> <div class=\"ulist\"> <ul> <li> <p>If <code>their</code> version only introduces whitespace changes to a line, <code>our</code> version is used;</p> </li> <li> <p>If <code>our</code> version introduces whitespace changes but <code>their</code> version includes a substantial change, <code>their</code> version is used;</p> </li> <li> <p>Otherwise, the merge proceeds in the usual way.</p> </li> </ul> </div> </dd> <dt class=\"hdlist1\">renormalize</dt> <dd> <p>This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge. This option is meant to be used when merging branches with different clean filters or end-of-line normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in <a href=\"gitattributes\">gitattributes[5]</a> for details.</p> </dd> <dt class=\"hdlist1\">no-renormalize</dt> <dd> <p>Disables the <code>renormalize</code> option. This overrides the <code>merge.renormalize</code> configuration variable.</p> </dd> <dt class=\"hdlist1\">no-renames</dt> <dd> <p>Turn off rename detection. See also <a href=\"git-diff\">git-diff[1]</a> <code>--no-renames</code>.</p> </dd> <dt class=\"hdlist1\">find-renames[=&lt;n&gt;]</dt> <dd> <p>Turn on rename detection, optionally setting the similarity threshold. This is the default. See also <a href=\"git-diff\">git-diff[1]</a> <code>--find-renames</code>.</p> </dd> <dt class=\"hdlist1\">rename-threshold=&lt;n&gt;</dt> <dd> <p>Deprecated synonym for <code>find-renames=&lt;n&gt;</code>.</p> </dd> <dt class=\"hdlist1\">subtree[=&lt;path&gt;]</dt> <dd> <p>This option is a more advanced form of <code>subtree</code> strategy, where the strategy makes a guess on how two trees must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped from the beginning) to make the shape of two trees to match.</p> </dd> </dl> </div> </dd> <dt class=\"hdlist1\">octopus</dt> <dd> <p>This resolves cases with more than two heads, but refuses to do a complex merge that needs manual resolution. It is primarily meant to be used for bundling topic branch heads together. This is the default merge strategy when pulling or merging more than one branch.</p> </dd> <dt class=\"hdlist1\">ours</dt> <dd> <p>This resolves any number of heads, but the resulting tree of the merge is always that of the current branch head, effectively ignoring all changes from all other branches. It is meant to be used to supersede old development history of side branches. Note that this is different from the -Xours option to the <code>recursive</code> merge strategy.</p> </dd> <dt class=\"hdlist1\">subtree</dt> <dd> <p>This is a modified recursive strategy. When merging trees A and B, if B corresponds to a subtree of A, B is first adjusted to match the tree structure of A, instead of reading the trees at the same level. This adjustment is also done to the common ancestor tree.</p> </dd> </dl> </div>  <p>With the strategies that use 3-way merge (including the default, <code>recursive</code>), if a change is made on both branches, but later reverted on one of the branches, that change will be present in the merged result; some people find this behavior confusing. It occurs because only the heads and the merge base are considered when performing a merge, not the individual commits. The merge algorithm therefore considers the reverted change as no change at all, and substitutes the changed version instead.</p> </div>   <h2 id=\"_configuration\">Configuration</h2> <div class=\"sectionbody\">\n<div class=\"dlist\"> <dl> <dt class=\"hdlist1\">merge.conflictStyle</dt> <dd> <p>Specify the style in which conflicted hunks are written out to working tree files upon merge. The default is \"merge\", which shows a <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code> conflict marker, changes made by one side, a <code>=======</code> marker, changes made by the other side, and then a <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> marker. An alternate style, \"diff3\", adds a <code>|||||||</code> marker and the original text before the <code>=======</code> marker.</p> </dd> <dt class=\"hdlist1\">merge.defaultToUpstream</dt> <dd> <p>If merge is called without any commit argument, merge the upstream branches configured for the current branch by using their last observed values stored in their remote-tracking branches. The values of the <code>branch.&lt;current branch&gt;.merge</code> that name the branches at the remote named by <code>branch.&lt;current branch&gt;.remote</code> are consulted, and then they are mapped via <code>remote.&lt;remote&gt;.fetch</code> to their corresponding remote-tracking branches, and the tips of these tracking branches are merged.</p> </dd> <dt class=\"hdlist1\">merge.ff</dt> <dd> <p>By default, Git does not create an extra merge commit when merging a commit that is a descendant of the current commit. Instead, the tip of the current branch is fast-forwarded. When set to <code>false</code>, this variable tells Git to create an extra merge commit in such a case (equivalent to giving the <code>--no-ff</code> option from the command line). When set to <code>only</code>, only such fast-forward merges are allowed (equivalent to giving the <code>--ff-only</code> option from the command line).</p> </dd> <dt class=\"hdlist1\">merge.branchdesc</dt> <dd> <p>In addition to branch names, populate the log message with the branch description text associated with them. Defaults to false.</p> </dd> <dt class=\"hdlist1\">merge.log</dt> <dd> <p>In addition to branch names, populate the log message with at most the specified number of one-line descriptions from the actual commits that are being merged. Defaults to false, and true is a synonym for 20.</p> </dd> </dl> </div> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">merge.renameLimit</dt> <dd> <p>The number of files to consider when performing rename detection during a merge; if not specified, defaults to the value of diff.renameLimit.</p> </dd> <dt class=\"hdlist1\">merge.renormalize</dt> <dd> <p>Tell Git that canonical representation of files in the repository has changed over time (e.g. earlier commits record text files with CRLF line endings, but recent ones use LF line endings). In such a repository, Git can convert the data recorded in commits to a canonical form before performing a merge to reduce unnecessary conflicts. For more information, see section \"Merging branches with differing checkin/checkout attributes\" in <a href=\"gitattributes\">gitattributes[5]</a>.</p> </dd> <dt class=\"hdlist1\">merge.stat</dt> <dd> <p>Whether to print the diffstat between ORIG_HEAD and the merge result at the end of the merge. True by default.</p> </dd> <dt class=\"hdlist1\">merge.tool</dt> <dd> <p>Controls which merge tool is used by <a href=\"git-mergetool\">git-mergetool[1]</a>. The list below shows the valid built-in values. Any other value is treated as a custom merge tool and requires that a corresponding mergetool.&lt;tool&gt;.cmd variable is defined.</p> </dd> </dl> </div> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">merge.verbosity</dt> <dd> <p>Controls the amount of output shown by the recursive merge strategy. Level 0 outputs nothing except a final error message if conflicts were detected. Level 1 outputs only conflicts, 2 outputs conflicts and file changes. Level 5 and above outputs debugging information. The default is level 2. Can be overridden by the <code>GIT_MERGE_VERBOSITY</code> environment variable.</p> </dd> <dt class=\"hdlist1\">merge.&lt;driver&gt;.name</dt> <dd> <p>Defines a human-readable name for a custom low-level merge driver. See <a href=\"gitattributes\">gitattributes[5]</a> for details.</p> </dd> <dt class=\"hdlist1\">merge.&lt;driver&gt;.driver</dt> <dd> <p>Defines the command that implements a custom low-level merge driver. See <a href=\"gitattributes\">gitattributes[5]</a> for details.</p> </dd> <dt class=\"hdlist1\">merge.&lt;driver&gt;.recursive</dt> <dd> <p>Names a low-level merge driver to be used when performing an internal merge between common ancestors. See <a href=\"gitattributes\">gitattributes[5]</a> for details.</p> </dd> </dl> </div> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">branch.&lt;name&gt;.mergeOptions</dt> <dd> <p>Sets default options for merging into branch &lt;name&gt;. The syntax and supported options are the same as those of <code>git merge</code>, but option values containing whitespace characters are currently not supported.</p> </dd> </dl> </div>\n</div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-fmt-merge-msg\">git-fmt-merge-msg[1]</a>, <a href=\"git-pull\">git-pull[1]</a>, <a href=\"gitattributes\">gitattributes[5]</a>, <a href=\"git-reset\">git-reset[1]</a>, <a href=\"git-diff\">git-diff[1]</a>, <a href=\"git-ls-files\">git-ls-files[1]</a>, <a href=\"git-add\">git-add[1]</a>, <a href=\"git-rm\">git-rm[1]</a>, <a href=\"git-mergetool\">git-mergetool[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-merge\" class=\"_attribution-link\">https://git-scm.com/docs/git-merge</a>\n  </p>\n</div>\n","git-submodule":"<h1>git-submodule</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-submodule - Initialize, update or inspect submodules</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git submodule [--quiet] add [-b &lt;branch&gt;] [-f|--force] [--name &lt;name&gt;]\n              [--reference &lt;repository&gt;] [--depth &lt;depth&gt;] [--] &lt;repository&gt; [&lt;path&gt;]\ngit submodule [--quiet] status [--cached] [--recursive] [--] [&lt;path&gt;…​]\ngit submodule [--quiet] init [--] [&lt;path&gt;…​]\ngit submodule [--quiet] deinit [-f|--force] (--all|[--] &lt;path&gt;…​)\ngit submodule [--quiet] update [--init] [--remote] [-N|--no-fetch]\n              [-f|--force] [--rebase|--merge] [--reference &lt;repository&gt;]\n              [--depth &lt;depth&gt;] [--recursive] [--jobs &lt;n&gt;] [--] [&lt;path&gt;…​]\ngit submodule [--quiet] summary [--cached|--files] [(-n|--summary-limit) &lt;n&gt;]\n              [commit] [--] [&lt;path&gt;…​]\ngit submodule [--quiet] foreach [--recursive] &lt;command&gt;\ngit submodule [--quiet] sync [--recursive] [--] [&lt;path&gt;…​]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Inspects, updates and manages submodules.</p>   <p>A submodule allows you to keep another Git repository in a subdirectory of your repository. The other repository has its own history, which does not interfere with the history of the current repository. This can be used to have external dependencies such as third party libraries for example.</p>   <p>When cloning or pulling a repository containing submodules however, these will not be checked out by default; the <code>init</code> and <code>update</code> subcommands will maintain submodules checked out and at appropriate revision in your working tree.</p>   <p>Submodules are composed from a so-called <code>gitlink</code> tree entry in the main repository that refers to a particular commit object within the inner repository that is completely separate. A record in the <code>.gitmodules</code> (see <a href=\"gitmodules\">gitmodules[5]</a>) file at the root of the source tree assigns a logical name to the submodule and describes the default URL the submodule shall be cloned from. The logical name can be used for overriding this URL within your local repository configuration (see <code>submodule init</code>).</p>   <p>Submodules are not to be confused with remotes, which are other repositories of the same project; submodules are meant for different projects you would like to make part of your source tree, while the history of the two projects still stays completely independent and you cannot modify the contents of the submodule from within the main project. If you want to merge the project histories and want to treat the aggregated whole as a single project from then on, you may want to add a remote for the other project and use the <code>subtree</code> merge strategy, instead of treating the other project as a submodule. Directories that come from both projects can be cloned and checked out as a whole if you choose to go that route.</p> </div>   <h2 id=\"_commands\">Commands</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">add</dt> <dd> <p>Add the given repository as a submodule at the given path to the changeset to be committed next to the current project: the current project is termed the \"superproject\".</p>  <p>This requires at least one argument: &lt;repository&gt;. The optional argument &lt;path&gt; is the relative location for the cloned submodule to exist in the superproject. If &lt;path&gt; is not given, the \"humanish\" part of the source repository is used (\"repo\" for \"/path/to/repo.git\" and \"foo\" for \"host.xz:foo/.git\"). The &lt;path&gt; is also used as the submodule’s logical name in its configuration entries unless <code>--name</code> is used to specify a logical name.</p>   <p>&lt;repository&gt; is the URL of the new submodule’s origin repository. This may be either an absolute URL, or (if it begins with ./ or ../), the location relative to the superproject’s origin repository (Please note that to specify a repository <code>foo.git</code> which is located right next to a superproject <code>bar.git</code>, you’ll have to use <code>../foo.git</code> instead of <code>./foo.git</code> - as one might expect when following the rules for relative URLs - because the evaluation of relative URLs in Git is identical to that of relative directories). If the superproject doesn’t have an origin configured the superproject is its own authoritative upstream and the current working directory is used instead.</p>   <p>&lt;path&gt; is the relative location for the cloned submodule to exist in the superproject. If &lt;path&gt; does not exist, then the submodule is created by cloning from the named URL. If &lt;path&gt; does exist and is already a valid Git repository, then this is added to the changeset without cloning. This second form is provided to ease creating a new submodule from scratch, and presumes the user will later push the submodule to the given URL.</p>   <p>In either case, the given URL is recorded into .gitmodules for use by subsequent users cloning the superproject. If the URL is given relative to the superproject’s repository, the presumption is the superproject and submodule repositories will be kept together in the same relative location, and only the superproject’s URL needs to be provided: git-submodule will correctly locate the submodule using the relative URL in .gitmodules.</p>  </dd> <dt class=\"hdlist1\">status</dt> <dd> <p>Show the status of the submodules. This will print the SHA-1 of the currently checked out commit for each submodule, along with the submodule path and the output of <code>git describe</code> for the SHA-1. Each SHA-1 will be prefixed with <code>-</code> if the submodule is not initialized, <code>+</code> if the currently checked out submodule commit does not match the SHA-1 found in the index of the containing repository and <code>U</code> if the submodule has merge conflicts.</p>  <p>If <code>--recursive</code> is specified, this command will recurse into nested submodules, and show their status as well.</p>   <p>If you are only interested in changes of the currently initialized submodules with respect to the commit recorded in the index or the HEAD, <a href=\"git-status\">git-status[1]</a> and <a href=\"git-diff\">git-diff[1]</a> will provide that information too (and can also report changes to a submodule’s work tree).</p>  </dd> <dt class=\"hdlist1\">init</dt> <dd> <p>Initialize the submodules recorded in the index (which were added and committed elsewhere) by copying submodule names and urls from .gitmodules to .git/config. Optional &lt;path&gt; arguments limit which submodules will be initialized. It will also copy the value of <code>submodule.$name.update</code> into .git/config. The key used in .git/config is <code>submodule.$name.url</code>. This command does not alter existing information in .git/config. You can then customize the submodule clone URLs in .git/config for your local setup and proceed to <code>git submodule update</code>; you can also just use <code>git submodule update --init</code> without the explicit <code>init</code> step if you do not intend to customize any submodule locations.</p> </dd> <dt class=\"hdlist1\">deinit</dt> <dd> <p>Unregister the given submodules, i.e. remove the whole <code>submodule.$name</code> section from .git/config together with their work tree. Further calls to <code>git submodule update</code>, <code>git submodule foreach</code> and <code>git submodule sync</code> will skip any unregistered submodules until they are initialized again, so use this command if you don’t want to have a local checkout of the submodule in your working tree anymore. If you really want to remove a submodule from the repository and commit that use <a href=\"git-rm\">git-rm[1]</a> instead.</p>  <p>When the command is run without pathspec, it errors out, instead of deinit-ing everything, to prevent mistakes.</p>   <p>If <code>--force</code> is specified, the submodule’s working tree will be removed even if it contains local modifications.</p>  </dd> <dt class=\"hdlist1\">update</dt> <dd> <div class=\"openblock\"> <div class=\"content\">  <p>Update the registered submodules to match what the superproject expects by cloning missing submodules and updating the working tree of the submodules. The \"updating\" can be done in several ways depending on command line options and the value of <code>submodule.&lt;name&gt;.update</code> configuration variable. Supported update procedures are:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">checkout</dt> <dd> <p>the commit recorded in the superproject will be checked out in the submodule on a detached HEAD. This is done when <code>--checkout</code> option is given, or no option is given, and <code>submodule.&lt;name&gt;.update</code> is unset, or if it is set to <code>checkout</code>.</p>  <p>If <code>--force</code> is specified, the submodule will be checked out (using <code>git checkout --force</code> if appropriate), even if the commit specified in the index of the containing repository already matches the commit checked out in the submodule.</p>  </dd> <dt class=\"hdlist1\">rebase</dt> <dd> <p>the current branch of the submodule will be rebased onto the commit recorded in the superproject. This is done when <code>--rebase</code> option is given, or no option is given, and <code>submodule.&lt;name&gt;.update</code> is set to <code>rebase</code>.</p> </dd> <dt class=\"hdlist1\">merge</dt> <dd> <p>the commit recorded in the superproject will be merged into the current branch in the submodule. This is done when <code>--merge</code> option is given, or no option is given, and <code>submodule.&lt;name&gt;.update</code> is set to <code>merge</code>.</p> </dd> <dt class=\"hdlist1\">custom command</dt> <dd> <p>arbitrary shell command that takes a single argument (the sha1 of the commit recorded in the superproject) is executed. This is done when no option is given, and <code>submodule.&lt;name&gt;.update</code> has the form of <code>!command</code>.</p> </dd> </dl> </div>  <p>When no option is given and <code>submodule.&lt;name&gt;.update</code> is set to <code>none</code>, the submodule is not updated.</p>   <p>If the submodule is not yet initialized, and you just want to use the setting as stored in .gitmodules, you can automatically initialize the submodule with the <code>--init</code> option.</p>   <p>If <code>--recursive</code> is specified, this command will recurse into the registered submodules, and update any nested submodules within.</p>  </div> </div> </dd> <dt class=\"hdlist1\">summary</dt> <dd> <p>Show commit summary between the given commit (defaults to HEAD) and working tree/index. For a submodule in question, a series of commits in the submodule between the given super project commit and the index or working tree (switched by <code>--cached</code>) are shown. If the option <code>--files</code> is given, show the series of commits in the submodule between the index of the super project and the working tree of the submodule (this option doesn’t allow to use the <code>--cached</code> option or to provide an explicit commit).</p>  <p>Using the <code>--submodule=log</code> option with <a href=\"git-diff\">git-diff[1]</a> will provide that information too.</p>  </dd> <dt class=\"hdlist1\">foreach</dt> <dd> <p>Evaluates an arbitrary shell command in each checked out submodule. The command has access to the variables $name, $path, $sha1 and $toplevel: $name is the name of the relevant submodule section in .gitmodules, $path is the name of the submodule directory relative to the superproject, $sha1 is the commit as recorded in the superproject, and $toplevel is the absolute path to the top-level of the superproject. Any submodules defined in the superproject but not checked out are ignored by this command. Unless given <code>--quiet</code>, foreach prints the name of each submodule before evaluating the command. If <code>--recursive</code> is given, submodules are traversed recursively (i.e. the given shell command is evaluated in nested submodules as well). A non-zero return from the command in any submodule causes the processing to terminate. This can be overridden by adding <code>|| :</code> to the end of the command.</p>  <p>As an example, <code>git submodule foreach 'echo $path `git\nrev-parse HEAD’</code> will show the path and currently checked out commit for each submodule.</p>  </dd> <dt class=\"hdlist1\">sync</dt> <dd> <p>Synchronizes submodules' remote URL configuration setting to the value specified in .gitmodules. It will only affect those submodules which already have a URL entry in .git/config (that is the case when they are initialized or freshly added). This is useful when submodule URLs change upstream and you need to update your local repositories accordingly.</p>  <p>\"git submodule sync\" synchronizes all submodules while \"git submodule sync -- A\" synchronizes submodule \"A\" only.</p>   <p>If <code>--recursive</code> is specified, this command will recurse into the registered submodules, and sync any nested submodules within.</p>  </dd> </dl> </div></div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-q</dt> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>Only print error messages.</p> </dd> <dt class=\"hdlist1\">--all</dt> <dd> <p>This option is only valid for the deinit command. Unregister all submodules in the working tree.</p> </dd> <dt class=\"hdlist1\">-b</dt> <dt class=\"hdlist1\">--branch</dt> <dd> <p>Branch of repository to add as submodule. The name of the branch is recorded as <code>submodule.&lt;name&gt;.branch</code> in <code>.gitmodules</code> for <code>update --remote</code>.</p> </dd> <dt class=\"hdlist1\">-f</dt> <dt class=\"hdlist1\">--force</dt> <dd> <p>This option is only valid for add, deinit and update commands. When running add, allow adding an otherwise ignored submodule path. When running deinit the submodule working trees will be removed even if they contain local changes. When running update (only effective with the checkout procedure), throw away local changes in submodules when switching to a different commit; and always run a checkout operation in the submodule, even if the commit listed in the index of the containing repository matches the commit checked out in the submodule.</p> </dd> <dt class=\"hdlist1\">--cached</dt> <dd> <p>This option is only valid for status and summary commands. These commands typically use the commit found in the submodule HEAD, but with this option, the commit stored in the index is used instead.</p> </dd> <dt class=\"hdlist1\">--files</dt> <dd> <p>This option is only valid for the summary command. This command compares the commit in the index with that in the submodule HEAD when this option is used.</p> </dd> <dt class=\"hdlist1\">-n</dt> <dt class=\"hdlist1\">--summary-limit</dt> <dd> <p>This option is only valid for the summary command. Limit the summary size (number of commits shown in total). Giving 0 will disable the summary; a negative number means unlimited (the default). This limit only applies to modified submodules. The size is always limited to 1 for added/deleted/typechanged submodules.</p> </dd> <dt class=\"hdlist1\">--remote</dt> <dd> <p>This option is only valid for the update command. Instead of using the superproject’s recorded SHA-1 to update the submodule, use the status of the submodule’s remote-tracking branch. The remote used is branch’s remote (<code>branch.&lt;name&gt;.remote</code>), defaulting to <code>origin</code>. The remote branch used defaults to <code>master</code>, but the branch name may be overridden by setting the <code>submodule.&lt;name&gt;.branch</code> option in either <code>.gitmodules</code> or <code>.git/config</code> (with <code>.git/config</code> taking precedence).</p>  <p>This works for any of the supported update procedures (<code>--checkout</code>, <code>--rebase</code>, etc.). The only change is the source of the target SHA-1. For example, <code>submodule update --remote --merge</code> will merge upstream submodule changes into the submodules, while <code>submodule update\n--merge</code> will merge superproject gitlink changes into the submodules.</p>   <p>In order to ensure a current tracking branch state, <code>update --remote</code> fetches the submodule’s remote repository before calculating the SHA-1. If you don’t want to fetch, you should use <code>submodule update\n--remote --no-fetch</code>.</p>   <p>Use this option to integrate changes from the upstream subproject with your submodule’s current HEAD. Alternatively, you can run <code>git pull</code> from the submodule, which is equivalent except for the remote branch name: <code>update --remote</code> uses the default upstream repository and <code>submodule.&lt;name&gt;.branch</code>, while <code>git pull</code> uses the submodule’s <code>branch.&lt;name&gt;.merge</code>. Prefer <code>submodule.&lt;name&gt;.branch</code> if you want to distribute the default upstream branch with the superproject and <code>branch.&lt;name&gt;.merge</code> if you want a more native feel while working in the submodule itself.</p>  </dd> <dt class=\"hdlist1\">-N</dt> <dt class=\"hdlist1\">--no-fetch</dt> <dd> <p>This option is only valid for the update command. Don’t fetch new objects from the remote site.</p> </dd> <dt class=\"hdlist1\">--checkout</dt> <dd> <p>This option is only valid for the update command. Checkout the commit recorded in the superproject on a detached HEAD in the submodule. This is the default behavior, the main use of this option is to override <code>submodule.$name.update</code> when set to a value other than <code>checkout</code>. If the key <code>submodule.$name.update</code> is either not explicitly set or set to <code>checkout</code>, this option is implicit.</p> </dd> <dt class=\"hdlist1\">--merge</dt> <dd> <p>This option is only valid for the update command. Merge the commit recorded in the superproject into the current branch of the submodule. If this option is given, the submodule’s HEAD will not be detached. If a merge failure prevents this process, you will have to resolve the resulting conflicts within the submodule with the usual conflict resolution tools. If the key <code>submodule.$name.update</code> is set to <code>merge</code>, this option is implicit.</p> </dd> <dt class=\"hdlist1\">--rebase</dt> <dd> <p>This option is only valid for the update command. Rebase the current branch onto the commit recorded in the superproject. If this option is given, the submodule’s HEAD will not be detached. If a merge failure prevents this process, you will have to resolve these failures with <a href=\"git-rebase\">git-rebase[1]</a>. If the key <code>submodule.$name.update</code> is set to <code>rebase</code>, this option is implicit.</p> </dd> <dt class=\"hdlist1\">--init</dt> <dd> <p>This option is only valid for the update command. Initialize all submodules for which \"git submodule init\" has not been called so far before updating.</p> </dd> <dt class=\"hdlist1\">--name</dt> <dd> <p>This option is only valid for the add command. It sets the submodule’s name to the given string instead of defaulting to its path. The name must be valid as a directory name and may not end with a <code>/</code>.</p> </dd> <dt class=\"hdlist1\">--reference &lt;repository&gt;</dt> <dd> <p>This option is only valid for add and update commands. These commands sometimes need to clone a remote repository. In this case, this option will be passed to the <a href=\"git-clone\">git-clone[1]</a> command.</p>  <p><strong>NOTE</strong>: Do <strong>not</strong> use this option unless you have read the note for <a href=\"git-clone\">git-clone[1]</a>'s <code>--reference</code> and <code>--shared</code> options carefully.</p>  </dd> <dt class=\"hdlist1\">--recursive</dt> <dd> <p>This option is only valid for foreach, update, status and sync commands. Traverse submodules recursively. The operation is performed not only in the submodules of the current repo, but also in any nested submodules inside those submodules (and so on).</p> </dd> <dt class=\"hdlist1\">--depth</dt> <dd> <p>This option is valid for add and update commands. Create a <code>shallow</code> clone with a history truncated to the specified number of revisions. See <a href=\"git-clone\">git-clone[1]</a></p> </dd> <dt class=\"hdlist1\">-j &lt;n&gt;</dt> <dt class=\"hdlist1\">--jobs &lt;n&gt;</dt> <dd> <p>This option is only valid for the update command. Clone new submodules in parallel with as many jobs. Defaults to the <code>submodule.fetchJobs</code> option.</p> </dd> <dt class=\"hdlist1\">&lt;path&gt;…​</dt> <dd> <p>Paths to submodule(s). When specified this will restrict the command to only operate on the submodules found at the specified paths. (This argument is required with add).</p> </dd> </dl> </div></div>   <h2 id=\"_files\">Files</h2> <div class=\"sectionbody\"> <p>When initializing submodules, a .gitmodules file in the top-level directory of the containing repository is used to find the url of each submodule. This file should be formatted in the same way as <code>$GIT_DIR/config</code>. The key to each submodule url is \"submodule.$name.url\". See <a href=\"gitmodules\">gitmodules[5]</a> for details.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-submodule\" class=\"_attribution-link\">https://git-scm.com/docs/git-submodule</a>\n  </p>\n</div>\n","git-grep":"<h1>git-grep</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-grep - Print lines matching a pattern</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git grep [-a | --text] [-I] [--textconv] [-i | --ignore-case] [-w | --word-regexp]\n           [-v | --invert-match] [-h|-H] [--full-name]\n           [-E | --extended-regexp] [-G | --basic-regexp]\n           [-P | --perl-regexp]\n           [-F | --fixed-strings] [-n | --line-number]\n           [-l | --files-with-matches] [-L | --files-without-match]\n           [(-O | --open-files-in-pager) [&lt;pager&gt;]]\n           [-z | --null]\n           [-c | --count] [--all-match] [-q | --quiet]\n           [--max-depth &lt;depth&gt;]\n           [--color[=&lt;when&gt;] | --no-color]\n           [--break] [--heading] [-p | --show-function]\n           [-A &lt;post-context&gt;] [-B &lt;pre-context&gt;] [-C &lt;context&gt;]\n           [-W | --function-context]\n           [--threads &lt;num&gt;]\n           [-f &lt;file&gt;] [-e] &lt;pattern&gt;\n           [--and|--or|--not|(|)|-e &lt;pattern&gt;…​]\n           [ [--[no-]exclude-standard] [--cached | --no-index | --untracked] | &lt;tree&gt;…​]\n           [--] [&lt;pathspec&gt;…​]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Look for specified patterns in the tracked files in the work tree, blobs registered in the index file, or blobs in given tree objects. Patterns are lists of one or more search expressions separated by newline characters. An empty string as search expression matches all lines.</p> </div>   <h2 id=\"_configuration\">Configuration</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">grep.lineNumber</dt> <dd> <p>If set to true, enable <code>-n</code> option by default.</p> </dd> <dt class=\"hdlist1\">grep.patternType</dt> <dd> <p>Set the default matching behavior. Using a value of <code>basic</code>, <code>extended</code>, <code>fixed</code>, or <code>perl</code> will enable the <code>--basic-regexp</code>, <code>--extended-regexp</code>, <code>--fixed-strings</code>, or <code>--perl-regexp</code> option accordingly, while the value <code>default</code> will return to the default matching behavior.</p> </dd> <dt class=\"hdlist1\">grep.extendedRegexp</dt> <dd> <p>If set to true, enable <code>--extended-regexp</code> option by default. This option is ignored when the <code>grep.patternType</code> option is set to a value other than <code>default</code>.</p> </dd> <dt class=\"hdlist1\">grep.threads</dt> <dd> <p>Number of grep worker threads to use. If unset (or set to 0), 8 threads are used by default (for now).</p> </dd> <dt class=\"hdlist1\">grep.fullName</dt> <dd> <p>If set to true, enable <code>--full-name</code> option by default.</p> </dd> <dt class=\"hdlist1\">grep.fallbackToNoIndex</dt> <dd> <p>If set to true, fall back to git grep --no-index if git grep is executed outside of a git repository. Defaults to false.</p> </dd> </dl> </div></div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--cached</dt> <dd> <p>Instead of searching tracked files in the working tree, search blobs registered in the index file.</p> </dd> <dt class=\"hdlist1\">--no-index</dt> <dd> <p>Search files in the current directory that is not managed by Git.</p> </dd> <dt class=\"hdlist1\">--untracked</dt> <dd> <p>In addition to searching in the tracked files in the working tree, search also in untracked files.</p> </dd> <dt class=\"hdlist1\">--no-exclude-standard</dt> <dd> <p>Also search in ignored files by not honoring the <code>.gitignore</code> mechanism. Only useful with <code>--untracked</code>.</p> </dd> <dt class=\"hdlist1\">--exclude-standard</dt> <dd> <p>Do not pay attention to ignored files specified via the <code>.gitignore</code> mechanism. Only useful when searching files in the current directory with <code>--no-index</code>.</p> </dd> <dt class=\"hdlist1\">-a</dt> <dt class=\"hdlist1\">--text</dt> <dd> <p>Process binary files as if they were text.</p> </dd> <dt class=\"hdlist1\">--textconv</dt> <dd> <p>Honor textconv filter settings.</p> </dd> <dt class=\"hdlist1\">--no-textconv</dt> <dd> <p>Do not honor textconv filter settings. This is the default.</p> </dd> <dt class=\"hdlist1\">-i</dt> <dt class=\"hdlist1\">--ignore-case</dt> <dd> <p>Ignore case differences between the patterns and the files.</p> </dd> <dt class=\"hdlist1\">-I</dt> <dd> <p>Don’t match the pattern in binary files.</p> </dd> <dt class=\"hdlist1\">--max-depth &lt;depth&gt;</dt> <dd> <p>For each &lt;pathspec&gt; given on command line, descend at most &lt;depth&gt; levels of directories. A negative value means no limit. This option is ignored if &lt;pathspec&gt; contains active wildcards. In other words if \"a*\" matches a directory named \"a*\", \"*\" is matched literally so --max-depth is still effective.</p> </dd> <dt class=\"hdlist1\">-w</dt> <dt class=\"hdlist1\">--word-regexp</dt> <dd> <p>Match the pattern only at word boundary (either begin at the beginning of a line, or preceded by a non-word character; end at the end of a line or followed by a non-word character).</p> </dd> <dt class=\"hdlist1\">-v</dt> <dt class=\"hdlist1\">--invert-match</dt> <dd> <p>Select non-matching lines.</p> </dd> <dt class=\"hdlist1\">-h</dt> <dt class=\"hdlist1\">-H</dt> <dd> <p>By default, the command shows the filename for each match. <code>-h</code> option is used to suppress this output. <code>-H</code> is there for completeness and does not do anything except it overrides <code>-h</code> given earlier on the command line.</p> </dd> <dt class=\"hdlist1\">--full-name</dt> <dd> <p>When run from a subdirectory, the command usually outputs paths relative to the current directory. This option forces paths to be output relative to the project top directory.</p> </dd> <dt class=\"hdlist1\">-E</dt> <dt class=\"hdlist1\">--extended-regexp</dt> <dt class=\"hdlist1\">-G</dt> <dt class=\"hdlist1\">--basic-regexp</dt> <dd> <p>Use POSIX extended/basic regexp for patterns. Default is to use basic regexp.</p> </dd> <dt class=\"hdlist1\">-P</dt> <dt class=\"hdlist1\">--perl-regexp</dt> <dd> <p>Use Perl-compatible regexp for patterns. Requires libpcre to be compiled in.</p> </dd> <dt class=\"hdlist1\">-F</dt> <dt class=\"hdlist1\">--fixed-strings</dt> <dd> <p>Use fixed strings for patterns (don’t interpret pattern as a regex).</p> </dd> <dt class=\"hdlist1\">-n</dt> <dt class=\"hdlist1\">--line-number</dt> <dd> <p>Prefix the line number to matching lines.</p> </dd> <dt class=\"hdlist1\">-l</dt> <dt class=\"hdlist1\">--files-with-matches</dt> <dt class=\"hdlist1\">--name-only</dt> <dt class=\"hdlist1\">-L</dt> <dt class=\"hdlist1\">--files-without-match</dt> <dd> <p>Instead of showing every matched line, show only the names of files that contain (or do not contain) matches. For better compatibility with <code>git diff</code>, <code>--name-only</code> is a synonym for <code>--files-with-matches</code>.</p> </dd> <dt class=\"hdlist1\">-O[&lt;pager&gt;]</dt> <dt class=\"hdlist1\">--open-files-in-pager[=&lt;pager&gt;]</dt> <dd> <p>Open the matching files in the pager (not the output of <code>grep</code>). If the pager happens to be \"less\" or \"vi\", and the user specified only one pattern, the first file is positioned at the first match automatically. The <code>pager</code> argument is optional; if specified, it must be stuck to the option without a space. If <code>pager</code> is unspecified, the default pager will be used (see <code>core.pager</code> in <a href=\"git-config\">git-config[1]</a>).</p> </dd> <dt class=\"hdlist1\">-z</dt> <dt class=\"hdlist1\">--null</dt> <dd> <p>Output \\0 instead of the character that normally follows a file name.</p> </dd> <dt class=\"hdlist1\">-c</dt> <dt class=\"hdlist1\">--count</dt> <dd> <p>Instead of showing every matched line, show the number of lines that match.</p> </dd> <dt class=\"hdlist1\">--color[=&lt;when&gt;]</dt> <dd> <p>Show colored matches. The value must be always (the default), never, or auto.</p> </dd> <dt class=\"hdlist1\">--no-color</dt> <dd> <p>Turn off match highlighting, even when the configuration file gives the default to color output. Same as <code>--color=never</code>.</p> </dd> <dt class=\"hdlist1\">--break</dt> <dd> <p>Print an empty line between matches from different files.</p> </dd> <dt class=\"hdlist1\">--heading</dt> <dd> <p>Show the filename above the matches in that file instead of at the start of each shown line.</p> </dd> <dt class=\"hdlist1\">-p</dt> <dt class=\"hdlist1\">--show-function</dt> <dd> <p>Show the preceding line that contains the function name of the match, unless the matching line is a function name itself. The name is determined in the same way as <code>git diff</code> works out patch hunk headers (see <code>Defining a custom hunk-header</code> in <a href=\"gitattributes\">gitattributes[5]</a>).</p> </dd> <dt class=\"hdlist1\">-&lt;num&gt;</dt> <dt class=\"hdlist1\">-C &lt;num&gt;</dt> <dt class=\"hdlist1\">--context &lt;num&gt;</dt> <dd> <p>Show &lt;num&gt; leading and trailing lines, and place a line containing <code>--</code> between contiguous groups of matches.</p> </dd> <dt class=\"hdlist1\">-A &lt;num&gt;</dt> <dt class=\"hdlist1\">--after-context &lt;num&gt;</dt> <dd> <p>Show &lt;num&gt; trailing lines, and place a line containing <code>--</code> between contiguous groups of matches.</p> </dd> <dt class=\"hdlist1\">-B &lt;num&gt;</dt> <dt class=\"hdlist1\">--before-context &lt;num&gt;</dt> <dd> <p>Show &lt;num&gt; leading lines, and place a line containing <code>--</code> between contiguous groups of matches.</p> </dd> <dt class=\"hdlist1\">-W</dt> <dt class=\"hdlist1\">--function-context</dt> <dd> <p>Show the surrounding text from the previous line containing a function name up to the one before the next function name, effectively showing the whole function in which the match was found.</p> </dd> <dt class=\"hdlist1\">--threads &lt;num&gt;</dt> <dd> <p>Number of grep worker threads to use. See <code>grep.threads</code> in <code>CONFIGURATION</code> for more information.</p> </dd> <dt class=\"hdlist1\">-f &lt;file&gt;</dt> <dd> <p>Read patterns from &lt;file&gt;, one per line.</p> </dd> <dt class=\"hdlist1\">-e</dt> <dd> <p>The next parameter is the pattern. This option has to be used for patterns starting with <code>-</code> and should be used in scripts passing user input to grep. Multiple patterns are combined by <code>or</code>.</p> </dd> <dt class=\"hdlist1\">--and</dt> <dt class=\"hdlist1\">--or</dt> <dt class=\"hdlist1\">--not</dt> <dt class=\"hdlist1\">( …​ )</dt> <dd> <p>Specify how multiple patterns are combined using Boolean expressions. <code>--or</code> is the default operator. <code>--and</code> has higher precedence than <code>--or</code>. <code>-e</code> has to be used for all patterns.</p> </dd> <dt class=\"hdlist1\">--all-match</dt> <dd> <p>When giving multiple pattern expressions combined with <code>--or</code>, this flag is specified to limit the match to files that have lines to match all of them.</p> </dd> <dt class=\"hdlist1\">-q</dt> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>Do not output matched lines; instead, exit with status 0 when there is a match and with non-zero status when there isn’t.</p> </dd> <dt class=\"hdlist1\">&lt;tree&gt;…​</dt> <dd> <p>Instead of searching tracked files in the working tree, search blobs in the given trees.</p> </dd> <dt class=\"hdlist1\">--</dt> <dd> <p>Signals the end of options; the rest of the parameters are &lt;pathspec&gt; limiters.</p> </dd> <dt class=\"hdlist1\">&lt;pathspec&gt;…​</dt> <dd> <p>If given, limit the search to paths matching at least one pattern. Both leading paths match and glob(7) patterns are supported.</p> </dd> </dl> </div></div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>git grep 'time_t' -- '*.[ch]'</code></dt> <dd> <p>Looks for <code>time_t</code> in all tracked .c and .h files in the working directory and its subdirectories.</p> </dd> <dt class=\"hdlist1\"><code>git grep -e '#define' --and \\( -e MAX_PATH -e PATH_MAX \\)</code></dt> <dd> <p>Looks for a line that has <code>#define</code> and either <code>MAX_PATH</code> or <code>PATH_MAX</code>.</p> </dd> <dt class=\"hdlist1\"><code>git grep --all-match -e NODE -e Unexpected</code></dt> <dd> <p>Looks for a line that has <code>NODE</code> or <code>Unexpected</code> in files that have lines that match both.</p> </dd> </dl> </div></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-grep\" class=\"_attribution-link\">https://git-scm.com/docs/git-grep</a>\n  </p>\n</div>\n","git-request-pull":"<h1>git-request-pull</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-request-pull - Generates a summary of pending changes</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git request-pull [-p] &lt;start&gt; &lt;url&gt; [&lt;end&gt;]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Generate a request asking your upstream project to pull changes into their tree. The request, printed to the standard output, begins with the branch description, summarizes the changes and indicates from where they can be pulled.</p>   <p>The upstream project is expected to have the commit named by <code>&lt;start&gt;</code> and the output asks it to integrate the changes you made since that commit, up to the commit named by <code>&lt;end&gt;</code>, by visiting the repository named by <code>&lt;url&gt;</code>.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-p</dt> <dd> <p>Include patch text in the output.</p> </dd> <dt class=\"hdlist1\">&lt;start&gt;</dt> <dd> <p>Commit to start at. This names a commit that is already in the upstream history.</p> </dd> <dt class=\"hdlist1\">&lt;url&gt;</dt> <dd> <p>The repository URL to be pulled from.</p> </dd> <dt class=\"hdlist1\">&lt;end&gt;</dt> <dd> <p>Commit to end at (defaults to HEAD). This names the commit at the tip of the history you are asking to be pulled.</p>  <p>When the repository named by <code>&lt;url&gt;</code> has the commit at a tip of a ref that is different from the ref you have locally, you can use the <code>&lt;local&gt;:&lt;remote&gt;</code> syntax, to have its local name, a colon <code>:</code>, and its remote name.</p>  </dd> </dl> </div></div>   <h2 id=\"_example\">Example</h2> <div class=\"sectionbody\"> <p>Imagine that you built your work on your <code>master</code> branch on top of the <code>v1.0</code> release, and want it to be integrated to the project. First you push that change to your public repository for others to see:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>git push https://git.ko.xz/project master</pre> </div> </div>  <p>Then, you run this command:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>git request-pull v1.0 https://git.ko.xz/project master</pre> </div> </div>  <p>which will produce a request to the upstream, summarizing the changes between the <code>v1.0</code> release and your <code>master</code>, to pull it from your public repository.</p>   <p>If you pushed your change to a branch whose name is different from the one you have locally, e.g.</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>git push https://git.ko.xz/project master:for-linus</pre> </div> </div>  <p>then you can ask that to be pulled with</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>git request-pull v1.0 https://git.ko.xz/project master:for-linus</pre> </div> </div>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-request-pull\" class=\"_attribution-link\">https://git-scm.com/docs/git-request-pull</a>\n  </p>\n</div>\n","git-blame":"<h1>git-blame</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-blame - Show what revision and author last modified each line of a file</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git blame [-c] [-b] [-l] [--root] [-t] [-f] [-n] [-s] [-e] [-p] [-w] [--incremental]\n            [-L &lt;range&gt;] [-S &lt;revs-file&gt;] [-M] [-C] [-C] [-C] [--since=&lt;date&gt;]\n            [--progress] [--abbrev=&lt;n&gt;] [&lt;rev&gt; | --contents &lt;file&gt; | --reverse &lt;rev&gt;]\n            [--] &lt;file&gt;</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Annotates each line in the given file with information from the revision which last modified the line. Optionally, start annotating from the given revision.</p>   <p>When specified one or more times, <code>-L</code> restricts annotation to the requested lines.</p>   <p>The origin of lines is automatically followed across whole-file renames (currently there is no option to turn the rename-following off). To follow lines moved from one file to another, or to follow lines that were copied and pasted from another file, etc., see the <code>-C</code> and <code>-M</code> options.</p>   <p>The report does not tell you anything about lines which have been deleted or replaced; you need to use a tool such as <code>git diff</code> or the \"pickaxe\" interface briefly mentioned in the following paragraph.</p>   <p>Apart from supporting file annotation, Git also supports searching the development history for when a code snippet occurred in a change. This makes it possible to track when a code snippet was added to a file, moved or copied between files, and eventually deleted or replaced. It works by searching for a text string in the diff. A small example of the pickaxe interface that searches for <code>blame_usage</code>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log --pretty=oneline -S'blame_usage'\n5040f17eba15504bad66b14a645bddd9b015ebb7 blame -S &lt;ancestry-file&gt;\nea4c7f9bf69e781dd0cd88d2bccb2bf5cc15c9a7 git-blame: Make the output</pre> </div> </div>\n</div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\">\n<div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-b</dt> <dd> <p>Show blank SHA-1 for boundary commits. This can also be controlled via the <code>blame.blankboundary</code> config option.</p> </dd> <dt class=\"hdlist1\">--root</dt> <dd> <p>Do not treat root commits as boundaries. This can also be controlled via the <code>blame.showRoot</code> config option.</p> </dd> <dt class=\"hdlist1\">--show-stats</dt> <dd> <p>Include additional statistics at the end of blame output.</p> </dd> <dt class=\"hdlist1\">-L &lt;start&gt;,&lt;end&gt;</dt> <dt class=\"hdlist1\">-L :&lt;funcname&gt;</dt> <dd> <p>Annotate only the given line range. May be specified multiple times. Overlapping ranges are allowed.</p>  <p>&lt;start&gt; and &lt;end&gt; are optional. “-L &lt;start&gt;” or “-L &lt;start&gt;,” spans from &lt;start&gt; to end of file. “-L ,&lt;end&gt;” spans from start of file to &lt;end&gt;.</p>   <p>&lt;start&gt; and &lt;end&gt; can take one of these forms:</p>  <div class=\"ulist\"> <ul> <li> <p>number</p>  <p>If &lt;start&gt; or &lt;end&gt; is a number, it specifies an absolute line number (lines count from 1).</p>  </li> <li> <p>/regex/</p>  <p>This form will use the first line matching the given POSIX regex. If &lt;start&gt; is a regex, it will search from the end of the previous <code>-L</code> range, if any, otherwise from the start of file. If &lt;start&gt; is “^/regex/”, it will search from the start of file. If &lt;end&gt; is a regex, it will search starting at the line given by &lt;start&gt;.</p>  </li> <li> <p>+offset or -offset</p>  <p>This is only valid for &lt;end&gt; and will specify a number of lines before or after the line given by &lt;start&gt;.</p>  </li> </ul> </div>  <p>If “:&lt;funcname&gt;” is given in place of &lt;start&gt; and &lt;end&gt;, it is a regular expression that denotes the range from the first funcname line that matches &lt;funcname&gt;, up to the next funcname line. “:&lt;funcname&gt;” searches from the end of the previous <code>-L</code> range, if any, otherwise from the start of file. “^:&lt;funcname&gt;” searches from the start of file.</p>  </dd> </dl> </div> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-l</dt> <dd> <p>Show long rev (Default: off).</p> </dd> <dt class=\"hdlist1\">-t</dt> <dd> <p>Show raw timestamp (Default: off).</p> </dd> <dt class=\"hdlist1\">-S &lt;revs-file&gt;</dt> <dd> <p>Use revisions from revs-file instead of calling <a href=\"git-rev-list\">git-rev-list[1]</a>.</p> </dd> <dt class=\"hdlist1\">--reverse</dt> <dd> <p>Walk history forward instead of backward. Instead of showing the revision in which a line appeared, this shows the last revision in which a line has existed. This requires a range of revision like START..END where the path to blame exists in START.</p> </dd> <dt class=\"hdlist1\">-p</dt> <dt class=\"hdlist1\">--porcelain</dt> <dd> <p>Show in a format designed for machine consumption.</p> </dd> <dt class=\"hdlist1\">--line-porcelain</dt> <dd> <p>Show the porcelain format, but output commit information for each line, not just the first time a commit is referenced. Implies --porcelain.</p> </dd> <dt class=\"hdlist1\">--incremental</dt> <dd> <p>Show the result incrementally in a format designed for machine consumption.</p> </dd> <dt class=\"hdlist1\">--encoding=&lt;encoding&gt;</dt> <dd> <p>Specifies the encoding used to output author names and commit summaries. Setting it to <code>none</code> makes blame output unconverted data. For more information see the discussion about encoding in the <a href=\"git-log\">git-log[1]</a> manual page.</p> </dd> <dt class=\"hdlist1\">--contents &lt;file&gt;</dt> <dd> <p>When &lt;rev&gt; is not specified, the command annotates the changes starting backwards from the working tree copy. This flag makes the command pretend as if the working tree copy has the contents of the named file (specify <code>-</code> to make the command read from the standard input).</p> </dd> <dt class=\"hdlist1\">--date &lt;format&gt;</dt> <dd> <p>Specifies the format used to output dates. If --date is not provided, the value of the blame.date config variable is used. If the blame.date config variable is also not set, the iso format is used. For supported values, see the discussion of the --date option at <a href=\"git-log\">git-log[1]</a>.</p> </dd> <dt class=\"hdlist1\">--[no-]progress</dt> <dd> <p>Progress status is reported on the standard error stream by default when it is attached to a terminal. This flag enables progress reporting even if not attached to a terminal. Can’t use <code>--progress</code> together with <code>--porcelain</code> or <code>--incremental</code>.</p> </dd> <dt class=\"hdlist1\">-M|&lt;num&gt;|</dt> <dd> <p>Detect moved or copied lines within a file. When a commit moves or copies a block of lines (e.g. the original file has A and then B, and the commit changes it to B and then A), the traditional <code>blame</code> algorithm notices only half of the movement and typically blames the lines that were moved up (i.e. B) to the parent and assigns blame to the lines that were moved down (i.e. A) to the child commit. With this option, both groups of lines are blamed on the parent by running extra passes of inspection.</p>  <p>&lt;num&gt; is optional but it is the lower bound on the number of alphanumeric characters that Git must detect as moving/copying within a file for it to associate those lines with the parent commit. The default value is 20.</p>  </dd> <dt class=\"hdlist1\">-C|&lt;num&gt;|</dt> <dd> <p>In addition to <code>-M</code>, detect lines moved or copied from other files that were modified in the same commit. This is useful when you reorganize your program and move code around across files. When this option is given twice, the command additionally looks for copies from other files in the commit that creates the file. When this option is given three times, the command additionally looks for copies from other files in any commit.</p>  <p>&lt;num&gt; is optional but it is the lower bound on the number of alphanumeric characters that Git must detect as moving/copying between files for it to associate those lines with the parent commit. And the default value is 40. If there are more than one <code>-C</code> options given, the &lt;num&gt; argument of the last <code>-C</code> will take effect.</p>  </dd> <dt class=\"hdlist1\">-h</dt> <dd> <p>Show help message.</p> </dd> </dl> </div> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-c</dt> <dd> <p>Use the same output mode as <a href=\"git-annotate\">git-annotate[1]</a> (Default: off).</p> </dd> <dt class=\"hdlist1\">--score-debug</dt> <dd> <p>Include debugging information related to the movement of lines between files (see <code>-C</code>) and lines moved within a file (see <code>-M</code>). The first number listed is the score. This is the number of alphanumeric characters detected as having been moved between or within files. This must be above a certain threshold for <code>git blame</code> to consider those lines of code to have been moved.</p> </dd> <dt class=\"hdlist1\">-f</dt> <dt class=\"hdlist1\">--show-name</dt> <dd> <p>Show the filename in the original commit. By default the filename is shown if there is any line that came from a file with a different name, due to rename detection.</p> </dd> <dt class=\"hdlist1\">-n</dt> <dt class=\"hdlist1\">--show-number</dt> <dd> <p>Show the line number in the original commit (Default: off).</p> </dd> <dt class=\"hdlist1\">-s</dt> <dd> <p>Suppress the author name and timestamp from the output.</p> </dd> <dt class=\"hdlist1\">-e</dt> <dt class=\"hdlist1\">--show-email</dt> <dd> <p>Show the author email instead of author name (Default: off). This can also be controlled via the <code>blame.showEmail</code> config option.</p> </dd> <dt class=\"hdlist1\">-w</dt> <dd> <p>Ignore whitespace when comparing the parent’s version and the child’s to find where the lines came from.</p> </dd> <dt class=\"hdlist1\">--abbrev=&lt;n&gt;</dt> <dd> <p>Instead of using the default 7+1 hexadecimal digits as the abbreviated object name, use &lt;n&gt;+1 digits. Note that 1 column is used for a caret to mark the boundary commit.</p> </dd> </dl> </div>\n</div>   <h2 id=\"_the_porcelain_format\">The porcelain format</h2> <div class=\"sectionbody\"> <p>In this format, each line is output after a header; the header at the minimum has the first line which has:</p>  <div class=\"ulist\"> <ul> <li> <p>40-byte SHA-1 of the commit the line is attributed to;</p> </li> <li> <p>the line number of the line in the original file;</p> </li> <li> <p>the line number of the line in the final file;</p> </li> <li> <p>on a line that starts a group of lines from a different commit than the previous one, the number of lines in this group. On subsequent lines this field is absent.</p> </li> </ul> </div>  <p>This header line is followed by the following information at least once for each commit:</p>  <div class=\"ulist\"> <ul> <li> <p>the author name (\"author\"), email (\"author-mail\"), time (\"author-time\"), and time zone (\"author-tz\"); similarly for committer.</p> </li> <li> <p>the filename in the commit that the line is attributed to.</p> </li> <li> <p>the first line of the commit log message (\"summary\").</p> </li> </ul> </div>  <p>The contents of the actual line is output after the above header, prefixed by a TAB. This is to allow adding more header elements later.</p>   <p>The porcelain format generally suppresses commit information that has already been seen. For example, two lines that are blamed to the same commit will both be shown, but the details for that commit will be shown only once. This is more efficient, but may require more state be kept by the reader. The <code>--line-porcelain</code> option can be used to output full commit information for each line, allowing simpler (but less efficient) usage like:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre># count the number of lines attributed to each author\ngit blame --line-porcelain file |\nsed -n 's/^author //p' |\nsort | uniq -c | sort -rn</pre> </div> </div>\n</div>   <h2 id=\"_specifying_ranges\">Specifying ranges</h2> <div class=\"sectionbody\"> <p>Unlike <code>git blame</code> and <code>git annotate</code> in older versions of git, the extent of the annotation can be limited to both line ranges and revision ranges. The <code>-L</code> option, which limits annotation to a range of lines, may be specified multiple times.</p>   <p>When you are interested in finding the origin for lines 40-60 for file <code>foo</code>, you can use the <code>-L</code> option like so (they mean the same thing — both ask for 21 lines starting at line 40):</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>git blame -L 40,60 foo\ngit blame -L 40,+21 foo</pre> </div> </div>  <p>Also you can use a regular expression to specify the line range:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>git blame -L '/^sub hello {/,/^}$/' foo</pre> </div> </div>  <p>which limits the annotation to the body of the <code>hello</code> subroutine.</p>   <p>When you are not interested in changes older than version v2.6.18, or changes older than 3 weeks, you can use revision range specifiers similar to <code>git rev-list</code>:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>git blame v2.6.18.. -- foo\ngit blame --since=3.weeks -- foo</pre> </div> </div>  <p>When revision range specifiers are used to limit the annotation, lines that have not changed since the range boundary (either the commit v2.6.18 or the most recent commit that is more than 3 weeks old in the above example) are blamed for that range boundary commit.</p>   <p>A particularly useful way is to see if an added file has lines created by copy-and-paste from existing files. Sometimes this indicates that the developer was being sloppy and did not refactor the code properly. You can first find the commit that introduced the file with:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>git log --diff-filter=A --pretty=short -- foo</pre> </div> </div>  <p>and then annotate the change between the commit and its parents, using <code>commit^!</code> notation:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>git blame -C -C -f $commit^! -- foo</pre> </div> </div>\n</div>   <h2 id=\"_incremental_output\">Incremental output</h2> <div class=\"sectionbody\"> <p>When called with <code>--incremental</code> option, the command outputs the result as it is built. The output generally will talk about lines touched by more recent commits first (i.e. the lines will be annotated out of order) and is meant to be used by interactive viewers.</p>   <p>The output format is similar to the Porcelain format, but it does not contain the actual lines from the file that is being annotated.</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>Each blame entry always starts with a line of:</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;40-byte hex sha1&gt; &lt;sourceline&gt; &lt;resultline&gt; &lt;num_lines&gt;</pre> </div> </div>  <p>Line numbers count from 1.</p>  </li> <li> <p>The first time that a commit shows up in the stream, it has various other information about it printed out with a one-word tag at the beginning of each line describing the extra commit information (author, email, committer, dates, summary, etc.).</p> </li> <li> <p>Unlike the Porcelain format, the filename information is always given and terminates the entry:</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>\"filename\" &lt;whitespace-quoted-filename-goes-here&gt;</pre> </div> </div>  <p>and thus it is really quite easy to parse for some line- and word-oriented parser (which should be quite natural for most scripting languages).</p>  <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> For people who do parsing: to make it more robust, just ignore any lines between the first and last one (\"&lt;sha1&gt;\" and \"filename\" lines) where you do not recognize the tag words (or care about that particular one) at the beginning of the \"extended information\" lines. That way, if there is ever added information (like the commit encoding or extended commit commentary), a blame viewer will not care. </td> </tr> </table> </div> </li> </ol> </div>\n</div>   <h2 id=\"_mapping_authors\">Mapping authors</h2> <div class=\"sectionbody\"> <p>If the file <code>.mailmap</code> exists at the toplevel of the repository, or at the location pointed to by the mailmap.file or mailmap.blob configuration options, it is used to map author and committer names and email addresses to canonical real names and email addresses.</p>   <p>In the simple form, each line in the file consists of the canonical real name of an author, whitespace, and an email address used in the commit (enclosed by <code>&lt;</code> and <code>&gt;</code>) to map to the name. For example:</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"literalblock\"> <div class=\"content\"> <pre>Proper Name &lt;commit@email.xx&gt;</pre> </div> </div> </div> </div>  <p>The more complex forms are:</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;proper@email.xx&gt; &lt;commit@email.xx&gt;</pre> </div> </div> </div> </div>  <p>which allows mailmap to replace only the email part of a commit, and:</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"literalblock\"> <div class=\"content\"> <pre>Proper Name &lt;proper@email.xx&gt; &lt;commit@email.xx&gt;</pre> </div> </div> </div> </div>  <p>which allows mailmap to replace both the name and the email of a commit matching the specified commit email address, and:</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"literalblock\"> <div class=\"content\"> <pre>Proper Name &lt;proper@email.xx&gt; Commit Name &lt;commit@email.xx&gt;</pre> </div> </div> </div> </div>  <p>which allows mailmap to replace both the name and the email of a commit matching both the specified commit name and email address.</p>   <p>Example 1: Your history contains commits by two authors, Jane and Joe, whose names appear in the repository under several forms:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>Joe Developer &lt;joe@example.com&gt;\nJoe R. Developer &lt;joe@example.com&gt;\nJane Doe &lt;jane@example.com&gt;\nJane Doe &lt;jane@laptop.(none)&gt;\nJane D. &lt;jane@desktop.(none)&gt;</pre> </div> </div>  <p>Now suppose that Joe wants his middle name initial used, and Jane prefers her family name fully spelled out. A proper <code>.mailmap</code> file would look like:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>Jane Doe         &lt;jane@desktop.(none)&gt;\nJoe R. Developer &lt;joe@example.com&gt;</pre> </div> </div>  <p>Note how there is no need for an entry for <code>&lt;jane@laptop.(none)&gt;</code>, because the real name of that author is already correct.</p>   <p>Example 2: Your repository contains commits from the following authors:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>nick1 &lt;bugs@company.xx&gt;\nnick2 &lt;bugs@company.xx&gt;\nnick2 &lt;nick2@company.xx&gt;\nsanta &lt;me@company.xx&gt;\nclaus &lt;me@company.xx&gt;\nCTO &lt;cto@coompany.xx&gt;</pre> </div> </div>  <p>Then you might want a <code>.mailmap</code> file that looks like:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>&lt;cto@company.xx&gt;                       &lt;cto@coompany.xx&gt;\nSome Dude &lt;some@dude.xx&gt;         nick1 &lt;bugs@company.xx&gt;\nOther Author &lt;other@author.xx&gt;   nick2 &lt;bugs@company.xx&gt;\nOther Author &lt;other@author.xx&gt;         &lt;nick2@company.xx&gt;\nSanta Claus &lt;santa.claus@northpole.xx&gt; &lt;me@company.xx&gt;</pre> </div> </div>  <p>Use hash <code>#</code> for comments that are either on their own line, or after the email address.</p> </div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-annotate\">git-annotate[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-blame\" class=\"_attribution-link\">https://git-scm.com/docs/git-blame</a>\n  </p>\n</div>\n","git-bisect":"<h1>git-bisect</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-bisect - Use binary search to find the commit that introduced a bug</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git bisect &lt;subcommand&gt; &lt;options&gt;</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>The command takes various subcommands, and different options depending on the subcommand:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>git bisect start [--term-{old,good}=&lt;term&gt; --term-{new,bad}=&lt;term&gt;]\n         [--no-checkout] [&lt;bad&gt; [&lt;good&gt;...]] [--] [&lt;paths&gt;...]\ngit bisect (bad|new) [&lt;rev&gt;]\ngit bisect (good|old) [&lt;rev&gt;...]\ngit bisect terms [--term-good | --term-bad]\ngit bisect skip [(&lt;rev&gt;|&lt;range&gt;)...]\ngit bisect reset [&lt;commit&gt;]\ngit bisect visualize\ngit bisect replay &lt;logfile&gt;\ngit bisect log\ngit bisect run &lt;cmd&gt;...\ngit bisect help</pre> </div> </div>  <p>This command uses a binary search algorithm to find which commit in your project’s history introduced a bug. You use it by first telling it a \"bad\" commit that is known to contain the bug, and a \"good\" commit that is known to be before the bug was introduced. Then <code>git\nbisect</code> picks a commit between those two endpoints and asks you whether the selected commit is \"good\" or \"bad\". It continues narrowing down the range until it finds the exact commit that introduced the change.</p>   <p>In fact, <code>git bisect</code> can be used to find the commit that changed <strong>any</strong> property of your project; e.g., the commit that fixed a bug, or the commit that caused a benchmark’s performance to improve. To support this more general usage, the terms \"old\" and \"new\" can be used in place of \"good\" and \"bad\", or you can choose your own terms. See section \"Alternate terms\" below for more information.</p>  <div class=\"sect2\"> <h3 id=\"_basic_bisect_commands_start_bad_good\">Basic bisect commands: start, bad, good</h3>  <p>As an example, suppose you are trying to find the commit that broke a feature that was known to work in version <code>v2.6.13-rc2</code> of your project. You start a bisect session as follows:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect start\n$ git bisect bad                 # Current version is bad\n$ git bisect good v2.6.13-rc2    # v2.6.13-rc2 is known to be good</pre> </div> </div>  <p>Once you have specified at least one bad and one good commit, <code>git\nbisect</code> selects a commit in the middle of that range of history, checks it out, and outputs something similar to the following:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>Bisecting: 675 revisions left to test after this (roughly 10 steps)</pre> </div> </div>  <p>You should now compile the checked-out version and test it. If that version works correctly, type</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect good</pre> </div> </div>  <p>If that version is broken, type</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect bad</pre> </div> </div>  <p>Then <code>git bisect</code> will respond with something like</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>Bisecting: 337 revisions left to test after this (roughly 9 steps)</pre> </div> </div>  <p>Keep repeating the process: compile the tree, test it, and depending on whether it is good or bad run <code>git bisect good</code> or <code>git bisect bad</code> to ask for the next commit that needs testing.</p>   <p>Eventually there will be no more revisions left to inspect, and the command will print out a description of the first bad commit. The reference <code>refs/bisect/bad</code> will be left pointing at that commit.</p>  </div> <div class=\"sect2\"> <h3 id=\"_bisect_reset\">Bisect reset</h3>  <p>After a bisect session, to clean up the bisection state and return to the original HEAD, issue the following command:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect reset</pre> </div> </div>  <p>By default, this will return your tree to the commit that was checked out before <code>git bisect start</code>. (A new <code>git bisect start</code> will also do that, as it cleans up the old bisection state.)</p>   <p>With an optional argument, you can return to a different commit instead:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect reset &lt;commit&gt;</pre> </div> </div>  <p>For example, <code>git bisect reset bisect/bad</code> will check out the first bad revision, while <code>git bisect reset HEAD</code> will leave you on the current bisection commit and avoid switching commits at all.</p>  </div> <div class=\"sect2\"> <h3 id=\"_alternate_terms\">Alternate terms</h3>  <p>Sometimes you are not looking for the commit that introduced a breakage, but rather for a commit that caused a change between some other \"old\" state and \"new\" state. For example, you might be looking for the commit that introduced a particular fix. Or you might be looking for the first commit in which the source-code filenames were finally all converted to your company’s naming standard. Or whatever.</p>   <p>In such cases it can be very confusing to use the terms \"good\" and \"bad\" to refer to \"the state before the change\" and \"the state after the change\". So instead, you can use the terms \"old\" and \"new\", respectively, in place of \"good\" and \"bad\". (But note that you cannot mix \"good\" and \"bad\" with \"old\" and \"new\" in a single session.)</p>   <p>In this more general usage, you provide <code>git bisect</code> with a \"new\" commit has some property and an \"old\" commit that doesn’t have that property. Each time <code>git bisect</code> checks out a commit, you test if that commit has the property. If it does, mark the commit as \"new\"; otherwise, mark it as \"old\". When the bisection is done, <code>git bisect</code> will report which commit introduced the property.</p>   <p>To use \"old\" and \"new\" instead of \"good\" and bad, you must run <code>git\nbisect start</code> without commits as argument and then run the following commands to add the commits:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>git bisect old [&lt;rev&gt;]</pre> </div> </div>  <p>to indicate that a commit was before the sought change, or</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>git bisect new [&lt;rev&gt;...]</pre> </div> </div>  <p>to indicate that it was after.</p>   <p>To get a reminder of the currently used terms, use</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>git bisect terms</pre> </div> </div>  <p>You can get just the old (respectively new) term with <code>git bisect term\n--term-old</code> or <code>git bisect term --term-good</code>.</p>   <p>If you would like to use your own terms instead of \"bad\"/\"good\" or \"new\"/\"old\", you can choose any names you like (except existing bisect subcommands like <code>reset</code>, <code>start</code>, …​) by starting the bisection using</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>git bisect start --term-old &lt;term-old&gt; --term-new &lt;term-new&gt;</pre> </div> </div>  <p>For example, if you are looking for a commit that introduced a performance regression, you might use</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>git bisect start --term-old fast --term-new slow</pre> </div> </div>  <p>Or if you are looking for the commit that fixed a bug, you might use</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>git bisect start --term-new fixed --term-old broken</pre> </div> </div>  <p>Then, use <code>git bisect &lt;term-old&gt;</code> and <code>git bisect &lt;term-new&gt;</code> instead of <code>git bisect good</code> and <code>git bisect bad</code> to mark commits.</p>  </div> <div class=\"sect2\"> <h3 id=\"_bisect_visualize\">Bisect visualize</h3>  <p>To see the currently remaining suspects in <code>gitk</code>, issue the following command during the bisection process:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect visualize</pre> </div> </div>  <p><code>view</code> may also be used as a synonym for <code>visualize</code>.</p>   <p>If the <code>DISPLAY</code> environment variable is not set, <code>git log</code> is used instead. You can also give command-line options such as <code>-p</code> and <code>--stat</code>.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect view --stat</pre> </div> </div> </div> <div class=\"sect2\"> <h3 id=\"_bisect_log_and_bisect_replay\">Bisect log and bisect replay</h3>  <p>After having marked revisions as good or bad, issue the following command to show what has been done so far:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect log</pre> </div> </div>  <p>If you discover that you made a mistake in specifying the status of a revision, you can save the output of this command to a file, edit it to remove the incorrect entries, and then issue the following commands to return to a corrected state:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect reset\n$ git bisect replay that-file</pre> </div> </div> </div> <div class=\"sect2\"> <h3 id=\"_avoiding_testing_a_commit\">Avoiding testing a commit</h3>  <p>If, in the middle of a bisect session, you know that the suggested revision is not a good one to test (e.g. it fails to build and you know that the failure does not have anything to do with the bug you are chasing), you can manually select a nearby commit and test that one instead.</p>   <p>For example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect good/bad                        # previous round was good or bad.\nBisecting: 337 revisions left to test after this (roughly 9 steps)\n$ git bisect visualize                        # oops, that is uninteresting.\n$ git reset --hard HEAD~3                # try 3 revisions before what\n                                        # was suggested</pre> </div> </div>  <p>Then compile and test the chosen revision, and afterwards mark the revision as good or bad in the usual manner.</p>  </div> <div class=\"sect2\"> <h3 id=\"_bisect_skip\">Bisect skip</h3>  <p>Instead of choosing a nearby commit by yourself, you can ask Git to do it for you by issuing the command:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect skip                 # Current version cannot be tested</pre> </div> </div>  <p>However, if you skip a commit adjacent to the one you are looking for, Git will be unable to tell exactly which of those commits was the first bad one.</p>   <p>You can also skip a range of commits, instead of just one commit, using range notation. For example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect skip v2.5..v2.6</pre> </div> </div>  <p>This tells the bisect process that no commit after <code>v2.5</code>, up to and including <code>v2.6</code>, should be tested.</p>   <p>Note that if you also want to skip the first commit of the range you would issue the command:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect skip v2.5 v2.5..v2.6</pre> </div> </div>  <p>This tells the bisect process that the commits between <code>v2.5</code> and <code>v2.6</code> (inclusive) should be skipped.</p>  </div> <div class=\"sect2\"> <h3 id=\"_cutting_down_bisection_by_giving_more_parameters_to_bisect_start\">Cutting down bisection by giving more parameters to bisect start</h3>  <p>You can further cut down the number of trials, if you know what part of the tree is involved in the problem you are tracking down, by specifying path parameters when issuing the <code>bisect start</code> command:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect start -- arch/i386 include/asm-i386</pre> </div> </div>  <p>If you know beforehand more than one good commit, you can narrow the bisect space down by specifying all of the good commits immediately after the bad commit when issuing the <code>bisect start</code> command:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect start v2.6.20-rc6 v2.6.20-rc4 v2.6.20-rc1 --\n                   # v2.6.20-rc6 is bad\n                   # v2.6.20-rc4 and v2.6.20-rc1 are good</pre> </div> </div> </div> <div class=\"sect2\"> <h3 id=\"_bisect_run\">Bisect run</h3>  <p>If you have a script that can tell if the current source code is good or bad, you can bisect by issuing the command:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect run my_script arguments</pre> </div> </div>  <p>Note that the script (<code>my_script</code> in the above example) should exit with code 0 if the current source code is good/old, and exit with a code between 1 and 127 (inclusive), except 125, if the current source code is bad/new.</p>   <p>Any other exit code will abort the bisect process. It should be noted that a program that terminates via <code>exit(-1)</code> leaves $? = 255, (see the exit(3) manual page), as the value is chopped with <code>&amp; 0377</code>.</p>   <p>The special exit code 125 should be used when the current source code cannot be tested. If the script exits with this code, the current revision will be skipped (see <code>git bisect skip</code> above). 125 was chosen as the highest sensible value to use for this purpose, because 126 and 127 are used by POSIX shells to signal specific error status (127 is for command not found, 126 is for command found but not executable—​these details do not matter, as they are normal errors in the script, as far as <code>bisect run</code> is concerned).</p>   <p>You may often find that during a bisect session you want to have temporary modifications (e.g. s/#define DEBUG 0/#define DEBUG 1/ in a header file, or \"revision that does not have this commit needs this patch applied to work around another problem this bisection is not interested in\") applied to the revision being tested.</p>   <p>To cope with such a situation, after the inner <code>git bisect</code> finds the next revision to test, the script can apply the patch before compiling, run the real test, and afterwards decide if the revision (possibly with the needed patch) passed the test and then rewind the tree to the pristine state. Finally the script should exit with the status of the real test to let the <code>git bisect run</code> command loop determine the eventual outcome of the bisect session.</p>  </div>\n</div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--no-checkout</dt> <dd>  <p>Do not checkout the new working tree at each iteration of the bisection process. Instead just update a special reference named <code>BISECT_HEAD</code> to make it point to the commit that should be tested.</p>   <p>This option may be useful when the test you would perform in each step does not require a checked out tree.</p>   <p>If the repository is bare, <code>--no-checkout</code> is assumed.</p>  </dd> </dl> </div></div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\">\n<div class=\"ulist\"> <ul> <li> <p>Automatically bisect a broken build between v1.2 and HEAD:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect start HEAD v1.2 --      # HEAD is bad, v1.2 is good\n$ git bisect run make                # \"make\" builds the app\n$ git bisect reset                   # quit the bisect session</pre> </div> </div> </li> <li> <p>Automatically bisect a test failure between origin and HEAD:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect start HEAD origin --    # HEAD is bad, origin is good\n$ git bisect run make test           # \"make test\" builds and tests\n$ git bisect reset                   # quit the bisect session</pre> </div> </div> </li> <li> <p>Automatically bisect a broken test case:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ cat ~/test.sh\n#!/bin/sh\nmake || exit 125                     # this skips broken builds\n~/check_test_case.sh                 # does the test case pass?\n$ git bisect start HEAD HEAD~10 --   # culprit is among the last 10\n$ git bisect run ~/test.sh\n$ git bisect reset                   # quit the bisect session</pre> </div> </div>  <p>Here we use a <code>test.sh</code> custom script. In this script, if <code>make</code> fails, we skip the current commit. <code>check_test_case.sh</code> should <code>exit 0</code> if the test case passes, and <code>exit 1</code> otherwise.</p>   <p>It is safer if both <code>test.sh</code> and <code>check_test_case.sh</code> are outside the repository to prevent interactions between the bisect, make and test processes and the scripts.</p>  </li> <li> <p>Automatically bisect with temporary modifications (hot-fix):</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ cat ~/test.sh\n#!/bin/sh\n\n# tweak the working tree by merging the hot-fix branch\n# and then attempt a build\nif        git merge --no-commit hot-fix &amp;&amp;\n        make\nthen\n        # run project specific test and report its status\n        ~/check_test_case.sh\n        status=$?\nelse\n        # tell the caller this is untestable\n        status=125\nfi\n\n# undo the tweak to allow clean flipping to the next commit\ngit reset --hard\n\n# return control\nexit $status</pre> </div> </div>  <p>This applies modifications from a hot-fix branch before each test run, e.g. in case your build or test environment changed so that older revisions may need a fix which newer ones have already. (Make sure the hot-fix branch is based off a commit which is contained in all revisions which you are bisecting, so that the merge does not pull in too much, or use <code>git cherry-pick</code> instead of <code>git merge</code>.)</p>  </li> <li> <p>Automatically bisect a broken test case:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect start HEAD HEAD~10 --   # culprit is among the last 10\n$ git bisect run sh -c \"make || exit 125; ~/check_test_case.sh\"\n$ git bisect reset                   # quit the bisect session</pre> </div> </div>  <p>This shows that you can do without a run script if you write the test on a single line.</p>  </li> <li> <p>Locate a good region of the object graph in a damaged repository</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect start HEAD &lt;known-good-commit&gt; [ &lt;boundary-commit&gt; ... ] --no-checkout\n$ git bisect run sh -c '\n        GOOD=$(git for-each-ref \"--format=%(objectname)\" refs/bisect/good-*) &amp;&amp;\n        git rev-list --objects BISECT_HEAD --not $GOOD &gt;tmp.$$ &amp;&amp;\n        git pack-objects --stdout &gt;/dev/null &lt;tmp.$$\n        rc=$?\n        rm -f tmp.$$\n        test $rc = 0'\n\n$ git bisect reset                   # quit the bisect session</pre> </div> </div>  <p>In this case, when <code>git bisect run</code> finishes, bisect/bad will refer to a commit that has at least one parent whose reachable graph is fully traversable in the sense required by <code>git pack objects</code>.</p>  </li> <li> <p>Look for a fix instead of a regression in the code</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect start\n$ git bisect new HEAD    # current commit is marked as new\n$ git bisect old HEAD~10 # the tenth commit from now is marked as old</pre> </div> </div>  <p>or:</p>  </li> </ul> </div> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect start --term-old broken --term-new fixed\n$ git bisect fixed\n$ git bisect broken HEAD~10</pre> </div> </div> <div class=\"sect2\"> <h3 id=\"_getting_help\">Getting help</h3>  <p>Use <code>git bisect</code> to get a short usage description, and <code>git bisect\nhelp</code> or <code>git bisect -h</code> to get a long usage description.</p>  </div>\n</div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-bisect-lk2009\">Fighting regressions with git bisect</a>, <a href=\"git-blame\">git-blame[1]</a>.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-bisect\" class=\"_attribution-link\">https://git-scm.com/docs/git-bisect</a>\n  </p>\n</div>\n","git-show":"<h1>git-show</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-show - Show various types of objects</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git show [options] &lt;object&gt;…​</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Shows one or more objects (blobs, trees, tags and commits).</p>   <p>For commits it shows the log message and textual diff. It also presents the merge commit in a special format as produced by <code>git diff-tree --cc</code>.</p>   <p>For tags, it shows the tag message and the referenced objects.</p>   <p>For trees, it shows the names (equivalent to <code>git ls-tree</code> with --name-only).</p>   <p>For plain blobs, it shows the plain contents.</p>   <p>The command takes options applicable to the <code>git diff-tree</code> command to control how the changes the commit introduces are shown.</p>   <p>This manual page describes only the most frequently used options.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">&lt;object&gt;…​</dt> <dd> <p>The names of objects to show. For a more complete list of ways to spell object names, see \"SPECIFYING REVISIONS\" section in <a href=\"gitrevisions\">gitrevisions[7]</a>.</p> </dd> <dt class=\"hdlist1\">--pretty[=&lt;format&gt;]</dt> <dt class=\"hdlist1\">--format=&lt;format&gt;</dt> <dd> <p>Pretty-print the contents of the commit logs in a given format, where <code>&lt;format&gt;</code> can be one of <code>oneline</code>, <code>short</code>, <code>medium</code>, <code>full</code>, <code>fuller</code>, <code>email</code>, <code>raw</code>, <code>format:&lt;string&gt;</code> and <code>tformat:&lt;string&gt;</code>. When <code>&lt;format&gt;</code> is none of the above, and has <code>%placeholder</code> in it, it acts as if <code>--pretty=tformat:&lt;format&gt;</code> were given.</p>  <p>See the \"PRETTY FORMATS\" section for some additional details for each format. When <code>=&lt;format&gt;</code> part is omitted, it defaults to <code>medium</code>.</p>   <p>Note: you can specify the default pretty format in the repository configuration (see <a href=\"git-config\">git-config[1]</a>).</p>  </dd> <dt class=\"hdlist1\">--abbrev-commit</dt> <dd> <p>Instead of showing the full 40-byte hexadecimal commit object name, show only a partial prefix. Non default number of digits can be specified with \"--abbrev=&lt;n&gt;\" (which also modifies diff output, if it is displayed).</p>  <p>This should make \"--pretty=oneline\" a whole lot more readable for people using 80-column terminals.</p>  </dd> <dt class=\"hdlist1\">--no-abbrev-commit</dt> <dd> <p>Show the full 40-byte hexadecimal commit object name. This negates <code>--abbrev-commit</code> and those options which imply it such as \"--oneline\". It also overrides the <code>log.abbrevCommit</code> variable.</p> </dd> <dt class=\"hdlist1\">--oneline</dt> <dd> <p>This is a shorthand for \"--pretty=oneline --abbrev-commit\" used together.</p> </dd> <dt class=\"hdlist1\">--encoding=&lt;encoding&gt;</dt> <dd> <p>The commit objects record the encoding used for the log message in their encoding header; this option can be used to tell the command to re-code the commit log message in the encoding preferred by the user. For non plumbing commands this defaults to UTF-8. Note that if an object claims to be encoded in <code>X</code> and we are outputting in <code>X</code>, we will output the object verbatim; this means that invalid sequences in the original commit may be copied to the output.</p> </dd> <dt class=\"hdlist1\">--expand-tabs=&lt;n&gt;</dt> <dt class=\"hdlist1\">--expand-tabs</dt> <dt class=\"hdlist1\">--no-expand-tabs</dt> <dd> <p>Perform a tab expansion (replace each tab with enough spaces to fill to the next display column that is multiple of <code>&lt;n&gt;</code>) in the log message before showing it in the output. <code>--expand-tabs</code> is a short-hand for <code>--expand-tabs=8</code>, and <code>--no-expand-tabs</code> is a short-hand for <code>--expand-tabs=0</code>, which disables tab expansion.</p>  <p>By default, tabs are expanded in pretty formats that indent the log message by 4 spaces (i.e. <code>medium</code>, which is the default, <code>full</code>, and <code>fuller</code>).</p>  </dd> <dt class=\"hdlist1\">--notes[=&lt;treeish&gt;]</dt> <dd> <p>Show the notes (see <a href=\"git-notes\">git-notes[1]</a>) that annotate the commit, when showing the commit log message. This is the default for <code>git log</code>, <code>git show</code> and <code>git whatchanged</code> commands when there is no <code>--pretty</code>, <code>--format</code>, or <code>--oneline</code> option given on the command line.</p>  <p>By default, the notes shown are from the notes refs listed in the <code>core.notesRef</code> and <code>notes.displayRef</code> variables (or corresponding environment overrides). See <a href=\"git-config\">git-config[1]</a> for more details.</p>   <p>With an optional <code>&lt;treeish&gt;</code> argument, use the treeish to find the notes to display. The treeish can specify the full refname when it begins with <code>refs/notes/</code>; when it begins with <code>notes/</code>, <code>refs/</code> and otherwise <code>refs/notes/</code> is prefixed to form a full name of the ref.</p>   <p>Multiple --notes options can be combined to control which notes are being displayed. Examples: \"--notes=foo\" will show only notes from \"refs/notes/foo\"; \"--notes=foo --notes\" will show both notes from \"refs/notes/foo\" and from the default notes ref(s).</p>  </dd> <dt class=\"hdlist1\">--no-notes</dt> <dd> <p>Do not show notes. This negates the above <code>--notes</code> option, by resetting the list of notes refs from which notes are shown. Options are parsed in the order given on the command line, so e.g. \"--notes --notes=foo --no-notes --notes=bar\" will only show notes from \"refs/notes/bar\".</p> </dd> <dt class=\"hdlist1\">--show-notes[=&lt;treeish&gt;]</dt> <dt class=\"hdlist1\">--[no-]standard-notes</dt> <dd> <p>These options are deprecated. Use the above --notes/--no-notes options instead.</p> </dd> <dt class=\"hdlist1\">--show-signature</dt> <dd> <p>Check the validity of a signed commit object by passing the signature to <code>gpg --verify</code> and show the output.</p> </dd> </dl> </div></div>   <h2 id=\"_pretty_formats\">Pretty formats</h2> <div class=\"sectionbody\"> <p>If the commit is a merge, and if the pretty-format is not <code>oneline</code>, <code>email</code> or <code>raw</code>, an additional line is inserted before the <code>Author:</code> line. This line begins with \"Merge: \" and the sha1s of ancestral commits are printed, separated by spaces. Note that the listed commits may not necessarily be the list of the <strong>direct</strong> parent commits if you have limited your view of history: for example, if you are only interested in changes related to a certain directory or file.</p>   <p>There are several built-in formats, and you can define additional formats by setting a pretty.&lt;name&gt; config option to either another format name, or a <code>format:</code> string, as described below (see <a href=\"git-config\">git-config[1]</a>). Here are the details of the built-in formats:</p>  <div class=\"ulist\"> <ul> <li> <p><code>oneline</code></p> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;sha1&gt; &lt;title line&gt;</pre> </div> </div>  <p>This is designed to be as compact as possible.</p>  </li> <li> <p><code>short</code></p> <div class=\"literalblock\"> <div class=\"content\"> <pre>commit &lt;sha1&gt;\nAuthor: &lt;author&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;title line&gt;</pre> </div> </div> </li> <li> <p><code>medium</code></p> <div class=\"literalblock\"> <div class=\"content\"> <pre>commit &lt;sha1&gt;\nAuthor: &lt;author&gt;\nDate:   &lt;author date&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;title line&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;full commit message&gt;</pre> </div> </div> </li> <li> <p><code>full</code></p> <div class=\"literalblock\"> <div class=\"content\"> <pre>commit &lt;sha1&gt;\nAuthor: &lt;author&gt;\nCommit: &lt;committer&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;title line&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;full commit message&gt;</pre> </div> </div> </li> <li> <p><code>fuller</code></p> <div class=\"literalblock\"> <div class=\"content\"> <pre>commit &lt;sha1&gt;\nAuthor:     &lt;author&gt;\nAuthorDate: &lt;author date&gt;\nCommit:     &lt;committer&gt;\nCommitDate: &lt;committer date&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;title line&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;full commit message&gt;</pre> </div> </div> </li> <li> <p><code>email</code></p> <div class=\"literalblock\"> <div class=\"content\"> <pre>From &lt;sha1&gt; &lt;date&gt;\nFrom: &lt;author&gt;\nDate: &lt;author date&gt;\nSubject: [PATCH] &lt;title line&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;full commit message&gt;</pre> </div> </div> </li> <li> <p><code>raw</code></p>  <p>The <code>raw</code> format shows the entire commit exactly as stored in the commit object. Notably, the SHA-1s are displayed in full, regardless of whether --abbrev or --no-abbrev are used, and <code>parents</code> information show the true parent commits, without taking grafts or history simplification into account. Note that this format affects the way commits are displayed, but not the way the diff is shown e.g. with <code>git log --raw</code>. To get full object names in a raw diff format, use <code>--no-abbrev</code>.</p>  </li> <li> <p><code>format:&lt;string&gt;</code></p>  <p>The <code>format:&lt;string&gt;</code> format allows you to specify which information you want to show. It works a little bit like printf format, with the notable exception that you get a newline with <code>%n</code> instead of <code>\\n</code>.</p>   <p>E.g, <code>format:\"The author of %h was %an, %ar%nThe title was &gt;&gt;%s&lt;&lt;%n\"</code> would show something like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>The author of fe6e0ee was Junio C Hamano, 23 hours ago\nThe title was &gt;&gt;t4119: test autocomputing -p&lt;n&gt; for traditional diff input.&lt;&lt;</pre> </div> </div>  <p>The placeholders are:</p>  <div class=\"ulist\"> <ul> <li> <p><code>%H</code>: commit hash</p> </li> <li> <p><code>%h</code>: abbreviated commit hash</p> </li> <li> <p><code>%T</code>: tree hash</p> </li> <li> <p><code>%t</code>: abbreviated tree hash</p> </li> <li> <p><code>%P</code>: parent hashes</p> </li> <li> <p><code>%p</code>: abbreviated parent hashes</p> </li> <li> <p><code>%an</code>: author name</p> </li> <li> <p><code>%aN</code>: author name (respecting .mailmap, see <a href=\"git-shortlog\">git-shortlog[1]</a> or <a href=\"git-blame\">git-blame[1]</a>)</p> </li> <li> <p><code>%ae</code>: author email</p> </li> <li> <p><code>%aE</code>: author email (respecting .mailmap, see <a href=\"git-shortlog\">git-shortlog[1]</a> or <a href=\"git-blame\">git-blame[1]</a>)</p> </li> <li> <p><code>%ad</code>: author date (format respects --date= option)</p> </li> <li> <p><code>%aD</code>: author date, RFC2822 style</p> </li> <li> <p><code>%ar</code>: author date, relative</p> </li> <li> <p><code>%at</code>: author date, UNIX timestamp</p> </li> <li> <p><code>%ai</code>: author date, ISO 8601-like format</p> </li> <li> <p><code>%aI</code>: author date, strict ISO 8601 format</p> </li> <li> <p><code>%cn</code>: committer name</p> </li> <li> <p><code>%cN</code>: committer name (respecting .mailmap, see <a href=\"git-shortlog\">git-shortlog[1]</a> or <a href=\"git-blame\">git-blame[1]</a>)</p> </li> <li> <p><code>%ce</code>: committer email</p> </li> <li> <p><code>%cE</code>: committer email (respecting .mailmap, see <a href=\"git-shortlog\">git-shortlog[1]</a> or <a href=\"git-blame\">git-blame[1]</a>)</p> </li> <li> <p><code>%cd</code>: committer date (format respects --date= option)</p> </li> <li> <p><code>%cD</code>: committer date, RFC2822 style</p> </li> <li> <p><code>%cr</code>: committer date, relative</p> </li> <li> <p><code>%ct</code>: committer date, UNIX timestamp</p> </li> <li> <p><code>%ci</code>: committer date, ISO 8601-like format</p> </li> <li> <p><code>%cI</code>: committer date, strict ISO 8601 format</p> </li> <li> <p><code>%d</code>: ref names, like the --decorate option of <a href=\"git-log\">git-log[1]</a></p> </li> <li> <p><code>%D</code>: ref names without the \" (\", \")\" wrapping.</p> </li> <li> <p><code>%e</code>: encoding</p> </li> <li> <p><code>%s</code>: subject</p> </li> <li> <p><code>%f</code>: sanitized subject line, suitable for a filename</p> </li> <li> <p><code>%b</code>: body</p> </li> <li> <p><code>%B</code>: raw body (unwrapped subject and body)</p> </li> <li> <p><code>%N</code>: commit notes</p> </li> <li> <p><code>%GG</code>: raw verification message from GPG for a signed commit</p> </li> <li> <p><code>%G?</code>: show \"G\" for a good (valid) signature, \"B\" for a bad signature, \"U\" for a good signature with unknown validity and \"N\" for no signature</p> </li> <li> <p><code>%GS</code>: show the name of the signer for a signed commit</p> </li> <li> <p><code>%GK</code>: show the key used to sign a signed commit</p> </li> <li> <p><code>%gD</code>: reflog selector, e.g., <code>refs/stash@{1}</code></p> </li> <li> <p><code>%gd</code>: shortened reflog selector, e.g., <code>stash@{1}</code></p> </li> <li> <p><code>%gn</code>: reflog identity name</p> </li> <li> <p><code>%gN</code>: reflog identity name (respecting .mailmap, see <a href=\"git-shortlog\">git-shortlog[1]</a> or <a href=\"git-blame\">git-blame[1]</a>)</p> </li> <li> <p><code>%ge</code>: reflog identity email</p> </li> <li> <p><code>%gE</code>: reflog identity email (respecting .mailmap, see <a href=\"git-shortlog\">git-shortlog[1]</a> or <a href=\"git-blame\">git-blame[1]</a>)</p> </li> <li> <p><code>%gs</code>: reflog subject</p> </li> <li> <p><code>%Cred</code>: switch color to red</p> </li> <li> <p><code>%Cgreen</code>: switch color to green</p> </li> <li> <p><code>%Cblue</code>: switch color to blue</p> </li> <li> <p><code>%Creset</code>: reset color</p> </li> <li> <p><code>%C(…​)</code>: color specification, as described in color.branch.* config option; adding <code>auto,</code> at the beginning will emit color only when colors are enabled for log output (by <code>color.diff</code>, <code>color.ui</code>, or <code>--color</code>, and respecting the <code>auto</code> settings of the former if we are going to a terminal). <code>auto</code> alone (i.e. <code>%C(auto)</code>) will turn on auto coloring on the next placeholders until the color is switched again.</p> </li> <li> <p><code>%m</code>: left, right or boundary mark</p> </li> <li> <p><code>%n</code>: newline</p> </li> <li> <p><code>%%</code>: a raw <code>%</code></p> </li> <li> <p><code>%x00</code>: print a byte from a hex code</p> </li> <li> <p><code>%w([&lt;w&gt;[,&lt;i1&gt;[,&lt;i2&gt;]]])</code>: switch line wrapping, like the -w option of <a href=\"git-shortlog\">git-shortlog[1]</a>.</p> </li> <li> <p><code>%&lt;(&lt;N&gt;[,trunc|ltrunc|mtrunc])</code>: make the next placeholder take at least N columns, padding spaces on the right if necessary. Optionally truncate at the beginning (ltrunc), the middle (mtrunc) or the end (trunc) if the output is longer than N columns. Note that truncating only works correctly with N &gt;= 2.</p> </li> <li> <p><code>%&lt;|(&lt;N&gt;)</code>: make the next placeholder take at least until Nth columns, padding spaces on the right if necessary</p> </li> <li> <p><code>%&gt;(&lt;N&gt;)</code>, <code>%&gt;|(&lt;N&gt;)</code>: similar to <code>%&lt;(&lt;N&gt;)</code>, <code>%&lt;|(&lt;N&gt;)</code> respectively, but padding spaces on the left</p> </li> <li> <p><code>%&gt;&gt;(&lt;N&gt;)</code>, <code>%&gt;&gt;|(&lt;N&gt;)</code>: similar to <code>%&gt;(&lt;N&gt;)</code>, <code>%&gt;|(&lt;N&gt;)</code> respectively, except that if the next placeholder takes more spaces than given and there are spaces on its left, use those spaces</p> </li> <li> <p><code>%&gt;&lt;(&lt;N&gt;)</code>, <code>%&gt;&lt;|(&lt;N&gt;)</code>: similar to <code>% &lt;(&lt;N&gt;)</code>, <code>%&lt;|(&lt;N&gt;)</code> respectively, but padding both sides (i.e. the text is centered)</p> </li> </ul> </div> </li> </ul> </div> <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> Some placeholders may depend on other options given to the revision traversal engine. For example, the <code>%g*</code> reflog options will insert an empty string unless we are traversing reflog entries (e.g., by <code>git log -g</code>). The <code>%d</code> and <code>%D</code> placeholders will use the \"short\" decoration format if <code>--decorate</code> was not already provided on the command line. </td> </tr> </table> </div>  <p>If you add a <code>+</code> (plus sign) after <code>%</code> of a placeholder, a line-feed is inserted immediately before the expansion if and only if the placeholder expands to a non-empty string.</p>   <p>If you add a <code>-</code> (minus sign) after <code>%</code> of a placeholder, line-feeds that immediately precede the expansion are deleted if and only if the placeholder expands to an empty string.</p>   <p>If you add a ` ` (space) after <code>%</code> of a placeholder, a space is inserted immediately before the expansion if and only if the placeholder expands to a non-empty string.</p>  <div class=\"ulist\"> <ul> <li> <p><code>tformat:</code></p>  <p>The <code>tformat:</code> format works exactly like <code>format:</code>, except that it provides \"terminator\" semantics instead of \"separator\" semantics. In other words, each commit has the message terminator character (usually a newline) appended, rather than a separator placed between entries. This means that the final entry of a single-line format will be properly terminated with a new line, just as the \"oneline\" format does. For example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log -2 --pretty=format:%h 4da45bef \\\n  | perl -pe '$_ .= \" -- NO NEWLINE\\n\" unless /\\n/'\n4da45be\n7134973 -- NO NEWLINE\n\n$ git log -2 --pretty=tformat:%h 4da45bef \\\n  | perl -pe '$_ .= \" -- NO NEWLINE\\n\" unless /\\n/'\n4da45be\n7134973</pre> </div> </div>  <p>In addition, any unrecognized string that has a <code>%</code> in it is interpreted as if it has <code>tformat:</code> in front of it. For example, these two are equivalent:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log -2 --pretty=tformat:%h 4da45bef\n$ git log -2 --pretty=%h 4da45bef</pre> </div> </div> </li> </ul> </div>\n</div>   <h2 id=\"_common_diff_options\">Common diff options</h2> <div class=\"sectionbody\">\n<div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-p</dt> <dt class=\"hdlist1\">-u</dt> <dt class=\"hdlist1\">--patch</dt> <dd> <p>Generate patch (see section on generating patches).</p> </dd> <dt class=\"hdlist1\">-s</dt> <dt class=\"hdlist1\">--no-patch</dt> <dd> <p>Suppress diff output. Useful for commands like <code>git show</code> that show the patch by default, or to cancel the effect of <code>--patch</code>.</p> </dd> <dt class=\"hdlist1\">-U&lt;n&gt;</dt> <dt class=\"hdlist1\">--unified=&lt;n&gt;</dt> <dd> <p>Generate diffs with &lt;n&gt; lines of context instead of the usual three. Implies <code>-p</code>.</p> </dd> <dt class=\"hdlist1\">--raw</dt> <dd> <p>For each commit, show a summary of changes using the raw diff format. See the \"RAW OUTPUT FORMAT\" section of <a href=\"git-diff\">git-diff[1]</a>. This is different from showing the log itself in raw format, which you can achieve with <code>--format=raw</code>.</p> </dd> <dt class=\"hdlist1\">--patch-with-raw</dt> <dd> <p>Synonym for <code>-p --raw</code>.</p> </dd> <dt class=\"hdlist1\">--compaction-heuristic</dt> <dt class=\"hdlist1\">--no-compaction-heuristic</dt> <dd> <p>These are to help debugging and tuning an experimental heuristic (which is off by default) that shifts the hunk boundary in an attempt to make the resulting patch easier to read.</p> </dd> <dt class=\"hdlist1\">--minimal</dt> <dd> <p>Spend extra time to make sure the smallest possible diff is produced.</p> </dd> <dt class=\"hdlist1\">--patience</dt> <dd> <p>Generate a diff using the \"patience diff\" algorithm.</p> </dd> <dt class=\"hdlist1\">--histogram</dt> <dd> <p>Generate a diff using the \"histogram diff\" algorithm.</p> </dd> <dt class=\"hdlist1\">--diff-algorithm={patience|minimal|histogram|myers}</dt> <dd> <p>Choose a diff algorithm. The variants are as follows:</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">\n<code>default</code>, <code>myers</code>\n</dt> <dd> <p>The basic greedy diff algorithm. Currently, this is the default.</p> </dd> <dt class=\"hdlist1\"><code>minimal</code></dt> <dd> <p>Spend extra time to make sure the smallest possible diff is produced.</p> </dd> <dt class=\"hdlist1\"><code>patience</code></dt> <dd> <p>Use \"patience diff\" algorithm when generating patches.</p> </dd> <dt class=\"hdlist1\"><code>histogram</code></dt> <dd> <p>This algorithm extends the patience algorithm to \"support low-occurrence common elements\".</p> </dd> </dl> </div> </div> </div>  <p>For instance, if you configured diff.algorithm variable to a non-default value and want to use the default one, then you have to use <code>--diff-algorithm=default</code> option.</p>  </dd> <dt class=\"hdlist1\">--stat[=&lt;width&gt;[,&lt;name-width&gt;[,&lt;count&gt;]]]</dt> <dd> <p>Generate a diffstat. By default, as much space as necessary will be used for the filename part, and the rest for the graph part. Maximum width defaults to terminal width, or 80 columns if not connected to a terminal, and can be overridden by <code>&lt;width&gt;</code>. The width of the filename part can be limited by giving another width <code>&lt;name-width&gt;</code> after a comma. The width of the graph part can be limited by using <code>--stat-graph-width=&lt;width&gt;</code> (affects all commands generating a stat graph) or by setting <code>diff.statGraphWidth=&lt;width&gt;</code> (does not affect <code>git format-patch</code>). By giving a third parameter <code>&lt;count&gt;</code>, you can limit the output to the first <code>&lt;count&gt;</code> lines, followed by <code>...</code> if there are more.</p>  <p>These parameters can also be set individually with <code>--stat-width=&lt;width&gt;</code>, <code>--stat-name-width=&lt;name-width&gt;</code> and <code>--stat-count=&lt;count&gt;</code>.</p>  </dd> <dt class=\"hdlist1\">--numstat</dt> <dd> <p>Similar to <code>--stat</code>, but shows number of added and deleted lines in decimal notation and pathname without abbreviation, to make it more machine friendly. For binary files, outputs two <code>-</code> instead of saying <code>0 0</code>.</p> </dd> <dt class=\"hdlist1\">--shortstat</dt> <dd> <p>Output only the last line of the <code>--stat</code> format containing total number of modified files, as well as number of added and deleted lines.</p> </dd> <dt class=\"hdlist1\">--dirstat[=&lt;param1,param2,…​&gt;]</dt> <dd> <p>Output the distribution of relative amount of changes for each sub-directory. The behavior of <code>--dirstat</code> can be customized by passing it a comma separated list of parameters. The defaults are controlled by the <code>diff.dirstat</code> configuration variable (see <a href=\"git-config\">git-config[1]</a>). The following parameters are available:</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>changes</code></dt> <dd> <p>Compute the dirstat numbers by counting the lines that have been removed from the source, or added to the destination. This ignores the amount of pure code movements within a file. In other words, rearranging lines in a file is not counted as much as other changes. This is the default behavior when no parameter is given.</p> </dd> <dt class=\"hdlist1\"><code>lines</code></dt> <dd> <p>Compute the dirstat numbers by doing the regular line-based diff analysis, and summing the removed/added line counts. (For binary files, count 64-byte chunks instead, since binary files have no natural concept of lines). This is a more expensive <code>--dirstat</code> behavior than the <code>changes</code> behavior, but it does count rearranged lines within a file as much as other changes. The resulting output is consistent with what you get from the other <code>--*stat</code> options.</p> </dd> <dt class=\"hdlist1\"><code>files</code></dt> <dd> <p>Compute the dirstat numbers by counting the number of files changed. Each changed file counts equally in the dirstat analysis. This is the computationally cheapest <code>--dirstat</code> behavior, since it does not have to look at the file contents at all.</p> </dd> <dt class=\"hdlist1\"><code>cumulative</code></dt> <dd> <p>Count changes in a child directory for the parent directory as well. Note that when using <code>cumulative</code>, the sum of the percentages reported may exceed 100%. The default (non-cumulative) behavior can be specified with the <code>noncumulative</code> parameter.</p> </dd> <dt class=\"hdlist1\">&lt;limit&gt;</dt> <dd> <p>An integer parameter specifies a cut-off percent (3% by default). Directories contributing less than this percentage of the changes are not shown in the output.</p> </dd> </dl> </div> </div> </div>  <p>Example: The following will count changed files, while ignoring directories with less than 10% of the total amount of changed files, and accumulating child directory counts in the parent directories: <code>--dirstat=files,10,cumulative</code>.</p>  </dd> <dt class=\"hdlist1\">--summary</dt> <dd> <p>Output a condensed summary of extended header information such as creations, renames and mode changes.</p> </dd> <dt class=\"hdlist1\">--patch-with-stat</dt> <dd> <p>Synonym for <code>-p --stat</code>.</p> </dd> <dt class=\"hdlist1\">-z</dt> <dd> <p>Separate the commits with NULs instead of with new newlines.</p>  <p>Also, when <code>--raw</code> or <code>--numstat</code> has been given, do not munge pathnames and use NULs as output field terminators.</p>   <p>Without this option, each pathname output will have TAB, LF, double quotes, and backslash characters replaced with <code>\\t</code>, <code>\\n</code>, <code>\\\"</code>, and <code>\\\\</code>, respectively, and the pathname will be enclosed in double quotes if any of those replacements occurred.</p>  </dd> <dt class=\"hdlist1\">--name-only</dt> <dd> <p>Show only names of changed files.</p> </dd> <dt class=\"hdlist1\">--name-status</dt> <dd> <p>Show only names and status of changed files. See the description of the <code>--diff-filter</code> option on what the status letters mean.</p> </dd> <dt class=\"hdlist1\">--submodule[=&lt;format&gt;]</dt> <dd> <p>Specify how differences in submodules are shown. When <code>--submodule</code> or <code>--submodule=log</code> is given, the <code>log</code> format is used. This format lists the commits in the range like <a href=\"git-submodule\">git-submodule[1]</a> <code>summary</code> does. Omitting the <code>--submodule</code> option or specifying <code>--submodule=short</code>, uses the <code>short</code> format. This format just shows the names of the commits at the beginning and end of the range. Can be tweaked via the <code>diff.submodule</code> configuration variable.</p> </dd> <dt class=\"hdlist1\">--color[=&lt;when&gt;]</dt> <dd> <p>Show colored diff. <code>--color</code> (i.e. without <code>=&lt;when&gt;</code>) is the same as <code>--color=always</code>. <code>&lt;when&gt;</code> can be one of <code>always</code>, <code>never</code>, or <code>auto</code>.</p> </dd> <dt class=\"hdlist1\">--no-color</dt> <dd> <p>Turn off colored diff. It is the same as <code>--color=never</code>.</p> </dd> <dt class=\"hdlist1\">--word-diff[=&lt;mode&gt;]</dt> <dd> <p>Show a word diff, using the &lt;mode&gt; to delimit changed words. By default, words are delimited by whitespace; see <code>--word-diff-regex</code> below. The &lt;mode&gt; defaults to <code>plain</code>, and must be one of:</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">color</dt> <dd> <p>Highlight changed words using only colors. Implies <code>--color</code>.</p> </dd> <dt class=\"hdlist1\">plain</dt> <dd> <p>Show words as <code>[-removed-]</code> and <code>{+added+}</code>. Makes no attempts to escape the delimiters if they appear in the input, so the output may be ambiguous.</p> </dd> <dt class=\"hdlist1\">porcelain</dt> <dd> <p>Use a special line-based format intended for script consumption. Added/removed/unchanged runs are printed in the usual unified diff format, starting with a <code>+</code>/<code>-</code>/` ` character at the beginning of the line and extending to the end of the line. Newlines in the input are represented by a tilde <code>~</code> on a line of its own.</p> </dd> <dt class=\"hdlist1\">none</dt> <dd> <p>Disable word diff again.</p> </dd> </dl> </div> </div> </div>  <p>Note that despite the name of the first mode, color is used to highlight the changed parts in all modes if enabled.</p>  </dd> <dt class=\"hdlist1\">--word-diff-regex=&lt;regex&gt;</dt> <dd> <p>Use &lt;regex&gt; to decide what a word is, instead of considering runs of non-whitespace to be a word. Also implies <code>--word-diff</code> unless it was already enabled.</p>  <p>Every non-overlapping match of the &lt;regex&gt; is considered a word. Anything between these matches is considered whitespace and ignored(!) for the purposes of finding differences. You may want to append <code>|[^[:space:]]</code> to your regular expression to make sure that it matches all non-whitespace characters. A match that contains a newline is silently truncated(!) at the newline.</p>   <p>For example, <code>--word-diff-regex=.</code> will treat each character as a word and, correspondingly, show differences character by character.</p>   <p>The regex can also be set via a diff driver or configuration option, see <a href=\"gitattributes\">gitattributes[5]</a> or <a href=\"git-config\">git-config[1]</a>. Giving it explicitly overrides any diff driver or configuration setting. Diff drivers override configuration settings.</p>  </dd> <dt class=\"hdlist1\">--color-words[=&lt;regex&gt;]</dt> <dd> <p>Equivalent to <code>--word-diff=color</code> plus (if a regex was specified) <code>--word-diff-regex=&lt;regex&gt;</code>.</p> </dd> <dt class=\"hdlist1\">--no-renames</dt> <dd> <p>Turn off rename detection, even when the configuration file gives the default to do so.</p> </dd> <dt class=\"hdlist1\">--check</dt> <dd> <p>Warn if changes introduce conflict markers or whitespace errors. What are considered whitespace errors is controlled by <code>core.whitespace</code> configuration. By default, trailing whitespaces (including lines that solely consist of whitespaces) and a space character that is immediately followed by a tab character inside the initial indent of the line are considered whitespace errors. Exits with non-zero status if problems are found. Not compatible with --exit-code.</p> </dd> <dt class=\"hdlist1\">--ws-error-highlight=&lt;kind&gt;</dt> <dd> <p>Highlight whitespace errors on lines specified by &lt;kind&gt; in the color specified by <code>color.diff.whitespace</code>. &lt;kind&gt; is a comma separated list of <code>old</code>, <code>new</code>, <code>context</code>. When this option is not given, only whitespace errors in <code>new</code> lines are highlighted. E.g. <code>--ws-error-highlight=new,old</code> highlights whitespace errors on both deleted and added lines. <code>all</code> can be used as a short-hand for <code>old,new,context</code>.</p> </dd> <dt class=\"hdlist1\">--full-index</dt> <dd> <p>Instead of the first handful of characters, show the full pre- and post-image blob object names on the \"index\" line when generating patch format output.</p> </dd> <dt class=\"hdlist1\">--binary</dt> <dd> <p>In addition to <code>--full-index</code>, output a binary diff that can be applied with <code>git-apply</code>.</p> </dd> <dt class=\"hdlist1\">--abbrev[=&lt;n&gt;]</dt> <dd> <p>Instead of showing the full 40-byte hexadecimal object name in diff-raw format output and diff-tree header lines, show only a partial prefix. This is independent of the <code>--full-index</code> option above, which controls the diff-patch output format. Non default number of digits can be specified with <code>--abbrev=&lt;n&gt;</code>.</p> </dd> <dt class=\"hdlist1\">-B[&lt;n&gt;][/&lt;m&gt;]</dt> <dt class=\"hdlist1\">--break-rewrites[=[&lt;n&gt;][/&lt;m&gt;]]</dt> <dd> <p>Break complete rewrite changes into pairs of delete and create. This serves two purposes:</p>  <p>It affects the way a change that amounts to a total rewrite of a file not as a series of deletion and insertion mixed together with a very few lines that happen to match textually as the context, but as a single deletion of everything old followed by a single insertion of everything new, and the number <code>m</code> controls this aspect of the -B option (defaults to 60%). <code>-B/70%</code> specifies that less than 30% of the original should remain in the result for Git to consider it a total rewrite (i.e. otherwise the resulting patch will be a series of deletion and insertion mixed together with context lines).</p>   <p>When used with -M, a totally-rewritten file is also considered as the source of a rename (usually -M only considers a file that disappeared as the source of a rename), and the number <code>n</code> controls this aspect of the -B option (defaults to 50%). <code>-B20%</code> specifies that a change with addition and deletion compared to 20% or more of the file’s size are eligible for being picked up as a possible source of a rename to another file.</p>  </dd> <dt class=\"hdlist1\">-M[&lt;n&gt;]</dt> <dt class=\"hdlist1\">--find-renames[=&lt;n&gt;]</dt> <dd> <p>If generating diffs, detect and report renames for each commit. For following files across renames while traversing history, see <code>--follow</code>. If <code>n</code> is specified, it is a threshold on the similarity index (i.e. amount of addition/deletions compared to the file’s size). For example, <code>-M90%</code> means Git should consider a delete/add pair to be a rename if more than 90% of the file hasn’t changed. Without a <code>%</code> sign, the number is to be read as a fraction, with a decimal point before it. I.e., <code>-M5</code> becomes 0.5, and is thus the same as <code>-M50%</code>. Similarly, <code>-M05</code> is the same as <code>-M5%</code>. To limit detection to exact renames, use <code>-M100%</code>. The default similarity index is 50%.</p> </dd> <dt class=\"hdlist1\">-C[&lt;n&gt;]</dt> <dt class=\"hdlist1\">--find-copies[=&lt;n&gt;]</dt> <dd> <p>Detect copies as well as renames. See also <code>--find-copies-harder</code>. If <code>n</code> is specified, it has the same meaning as for <code>-M&lt;n&gt;</code>.</p> </dd> <dt class=\"hdlist1\">--find-copies-harder</dt> <dd> <p>For performance reasons, by default, <code>-C</code> option finds copies only if the original file of the copy was modified in the same changeset. This flag makes the command inspect unmodified files as candidates for the source of copy. This is a very expensive operation for large projects, so use it with caution. Giving more than one <code>-C</code> option has the same effect.</p> </dd> <dt class=\"hdlist1\">-D</dt> <dt class=\"hdlist1\">--irreversible-delete</dt> <dd> <p>Omit the preimage for deletes, i.e. print only the header but not the diff between the preimage and <code>/dev/null</code>. The resulting patch is not meant to be applied with <code>patch</code> or <code>git apply</code>; this is solely for people who want to just concentrate on reviewing the text after the change. In addition, the output obviously lack enough information to apply such a patch in reverse, even manually, hence the name of the option.</p>  <p>When used together with <code>-B</code>, omit also the preimage in the deletion part of a delete/create pair.</p>  </dd> <dt class=\"hdlist1\">-l&lt;num&gt;</dt> <dd> <p>The <code>-M</code> and <code>-C</code> options require O(n^2) processing time where n is the number of potential rename/copy targets. This option prevents rename/copy detection from running if the number of rename/copy targets exceeds the specified number.</p> </dd> <dt class=\"hdlist1\">--diff-filter=[(A|C|D|M|R|T|U|X|B)…​[*]]</dt> <dd> <p>Select only files that are Added (<code>A</code>), Copied (<code>C</code>), Deleted (<code>D</code>), Modified (<code>M</code>), Renamed (<code>R</code>), have their type (i.e. regular file, symlink, submodule, …​) changed (<code>T</code>), are Unmerged (<code>U</code>), are Unknown (<code>X</code>), or have had their pairing Broken (<code>B</code>). Any combination of the filter characters (including none) can be used. When <code>*</code> (All-or-none) is added to the combination, all paths are selected if there is any file that matches other criteria in the comparison; if there is no file that matches other criteria, nothing is selected.</p> </dd> <dt class=\"hdlist1\">-S&lt;string&gt;</dt> <dd> <p>Look for differences that change the number of occurrences of the specified string (i.e. addition/deletion) in a file. Intended for the scripter’s use.</p>  <p>It is useful when you’re looking for an exact block of code (like a struct), and want to know the history of that block since it first came into being: use the feature iteratively to feed the interesting block in the preimage back into <code>-S</code>, and keep going until you get the very first version of the block.</p>  </dd> <dt class=\"hdlist1\">-G&lt;regex&gt;</dt> <dd> <p>Look for differences whose patch text contains added/removed lines that match &lt;regex&gt;.</p>  <p>To illustrate the difference between <code>-S&lt;regex&gt; --pickaxe-regex</code> and <code>-G&lt;regex&gt;</code>, consider a commit with the following diff in the same file:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>+    return !regexec(regexp, two-&gt;ptr, 1, &amp;regmatch, 0);\n...\n-    hit = !regexec(regexp, mf2.ptr, 1, &amp;regmatch, 0);</pre> </div> </div>  <p>While <code>git log -G\"regexec\\(regexp\"</code> will show this commit, <code>git log\n-S\"regexec\\(regexp\" --pickaxe-regex</code> will not (because the number of occurrences of that string did not change).</p>   <p>See the <code>pickaxe</code> entry in <a href=\"gitdiffcore\">gitdiffcore[7]</a> for more information.</p>  </dd> <dt class=\"hdlist1\">--pickaxe-all</dt> <dd> <p>When <code>-S</code> or <code>-G</code> finds a change, show all the changes in that changeset, not just the files that contain the change in &lt;string&gt;.</p> </dd> <dt class=\"hdlist1\">--pickaxe-regex</dt> <dd> <p>Treat the &lt;string&gt; given to <code>-S</code> as an extended POSIX regular expression to match.</p> </dd> <dt class=\"hdlist1\">-O&lt;orderfile&gt;</dt> <dd> <p>Output the patch in the order specified in the &lt;orderfile&gt;, which has one shell glob pattern per line. This overrides the <code>diff.orderFile</code> configuration variable (see <a href=\"git-config\">git-config[1]</a>). To cancel <code>diff.orderFile</code>, use <code>-O/dev/null</code>.</p> </dd> <dt class=\"hdlist1\">-R</dt> <dd> <p>Swap two inputs; that is, show differences from index or on-disk file to tree contents.</p> </dd> <dt class=\"hdlist1\">--relative[=&lt;path&gt;]</dt> <dd> <p>When run from a subdirectory of the project, it can be told to exclude changes outside the directory and show pathnames relative to it with this option. When you are not in a subdirectory (e.g. in a bare repository), you can name which subdirectory to make the output relative to by giving a &lt;path&gt; as an argument.</p> </dd> <dt class=\"hdlist1\">-a</dt> <dt class=\"hdlist1\">--text</dt> <dd> <p>Treat all files as text.</p> </dd> <dt class=\"hdlist1\">--ignore-space-at-eol</dt> <dd> <p>Ignore changes in whitespace at EOL.</p> </dd> <dt class=\"hdlist1\">-b</dt> <dt class=\"hdlist1\">--ignore-space-change</dt> <dd> <p>Ignore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent.</p> </dd> <dt class=\"hdlist1\">-w</dt> <dt class=\"hdlist1\">--ignore-all-space</dt> <dd> <p>Ignore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none.</p> </dd> <dt class=\"hdlist1\">--ignore-blank-lines</dt> <dd> <p>Ignore changes whose lines are all blank.</p> </dd> <dt class=\"hdlist1\">--inter-hunk-context=&lt;lines&gt;</dt> <dd> <p>Show the context between diff hunks, up to the specified number of lines, thereby fusing hunks that are close to each other.</p> </dd> <dt class=\"hdlist1\">-W</dt> <dt class=\"hdlist1\">--function-context</dt> <dd> <p>Show whole surrounding functions of changes.</p> </dd> <dt class=\"hdlist1\">--ext-diff</dt> <dd> <p>Allow an external diff helper to be executed. If you set an external diff driver with <a href=\"gitattributes\">gitattributes[5]</a>, you need to use this option with <a href=\"git-log\">git-log[1]</a> and friends.</p> </dd> <dt class=\"hdlist1\">--no-ext-diff</dt> <dd> <p>Disallow external diff drivers.</p> </dd> <dt class=\"hdlist1\">--textconv</dt> <dt class=\"hdlist1\">--no-textconv</dt> <dd> <p>Allow (or disallow) external text conversion filters to be run when comparing binary files. See <a href=\"gitattributes\">gitattributes[5]</a> for details. Because textconv filters are typically a one-way conversion, the resulting diff is suitable for human consumption, but cannot be applied. For this reason, textconv filters are enabled by default only for <a href=\"git-diff\">git-diff[1]</a> and <a href=\"git-log\">git-log[1]</a>, but not for <a href=\"git-format-patch\">git-format-patch[1]</a> or diff plumbing commands.</p> </dd> <dt class=\"hdlist1\">--ignore-submodules[=&lt;when&gt;]</dt> <dd> <p>Ignore changes to submodules in the diff generation. &lt;when&gt; can be either \"none\", \"untracked\", \"dirty\" or \"all\", which is the default. Using \"none\" will consider the submodule modified when it either contains untracked or modified files or its HEAD differs from the commit recorded in the superproject and can be used to override any settings of the <code>ignore</code> option in <a href=\"git-config\">git-config[1]</a> or <a href=\"gitmodules\">gitmodules[5]</a>. When \"untracked\" is used submodules are not considered dirty when they only contain untracked content (but they are still scanned for modified content). Using \"dirty\" ignores all changes to the work tree of submodules, only changes to the commits stored in the superproject are shown (this was the behavior until 1.7.0). Using \"all\" hides all changes to submodules.</p> </dd> <dt class=\"hdlist1\">--src-prefix=&lt;prefix&gt;</dt> <dd> <p>Show the given source prefix instead of \"a/\".</p> </dd> <dt class=\"hdlist1\">--dst-prefix=&lt;prefix&gt;</dt> <dd> <p>Show the given destination prefix instead of \"b/\".</p> </dd> <dt class=\"hdlist1\">--no-prefix</dt> <dd> <p>Do not show any source or destination prefix.</p> </dd> </dl> </div>  <p>For more detailed explanation on these common options, see also <a href=\"gitdiffcore\">gitdiffcore[7]</a>.</p> </div>   <h2 id=\"_generating_patches_with_p\">Generating patches with -p</h2> <div class=\"sectionbody\"> <p>When \"git-diff-index\", \"git-diff-tree\", or \"git-diff-files\" are run with a <code>-p</code> option, \"git diff\" without the <code>--raw</code> option, or \"git log\" with the \"-p\" option, they do not produce the output described above; instead they produce a patch file. You can customize the creation of such patches via the <code>GIT_EXTERNAL_DIFF</code> and the <code>GIT_DIFF_OPTS</code> environment variables.</p>   <p>What the -p option produces is slightly different from the traditional diff format:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>It is preceded with a \"git diff\" header that looks like this:</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>diff --git a/file1 b/file2</pre> </div> </div>  <p>The <code>a/</code> and <code>b/</code> filenames are the same unless rename/copy is involved. Especially, even for a creation or a deletion, <code>/dev/null</code> is <code>not</code> used in place of the <code>a/</code> or <code>b/</code> filenames.</p>   <p>When rename/copy is involved, <code>file1</code> and <code>file2</code> show the name of the source file of the rename/copy and the name of the file that rename/copy produces, respectively.</p>  </li> <li> <p>It is followed by one or more extended header lines:</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>old mode &lt;mode&gt;\nnew mode &lt;mode&gt;\ndeleted file mode &lt;mode&gt;\nnew file mode &lt;mode&gt;\ncopy from &lt;path&gt;\ncopy to &lt;path&gt;\nrename from &lt;path&gt;\nrename to &lt;path&gt;\nsimilarity index &lt;number&gt;\ndissimilarity index &lt;number&gt;\nindex &lt;hash&gt;..&lt;hash&gt; &lt;mode&gt;</pre> </div> </div>  <p>File modes are printed as 6-digit octal numbers including the file type and file permission bits.</p>   <p>Path names in extended headers do not include the <code>a/</code> and <code>b/</code> prefixes.</p>   <p>The similarity index is the percentage of unchanged lines, and the dissimilarity index is the percentage of changed lines. It is a rounded down integer, followed by a percent sign. The similarity index value of 100% is thus reserved for two equal files, while 100% dissimilarity means that no line from the old file made it into the new one.</p>   <p>The index line includes the SHA-1 checksum before and after the change. The &lt;mode&gt; is included if the file mode does not change; otherwise, separate lines indicate the old and the new mode.</p>  </li> <li> <p>TAB, LF, double quote and backslash characters in pathnames are represented as <code>\\t</code>, <code>\\n</code>, <code>\\\"</code> and <code>\\\\</code>, respectively. If there is need for such substitution then the whole pathname is put in double quotes.</p> </li> <li> <p>All the <code>file1</code> files in the output refer to files before the commit, and all the <code>file2</code> files refer to files after the commit. It is incorrect to apply each change to each file sequentially. For example, this patch will swap a and b:</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>diff --git a/a b/b\nrename from a\nrename to b\ndiff --git a/b b/a\nrename from b\nrename to a</pre> </div> </div> </li> </ol> </div>\n</div>   <h2 id=\"_combined_diff_format\">Combined diff format</h2> <div class=\"sectionbody\"> <p>Any diff-generating command can take the <code>-c</code> or <code>--cc</code> option to produce a <code>combined diff</code> when showing a merge. This is the default format when showing merges with <a href=\"git-diff\">git-diff[1]</a> or <a href=\"git-show\">git-show[1]</a>. Note also that you can give the <code>-m</code> option to any of these commands to force generation of diffs with individual parents of a merge.</p>   <p>A <code>combined diff</code> format looks like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>diff --combined describe.c\nindex fabadb8,cc95eb0..4866510\n--- a/describe.c\n+++ b/describe.c\n@@@ -98,20 -98,12 +98,20 @@@\n        return (a_date &gt; b_date) ? -1 : (a_date == b_date) ? 0 : 1;\n  }\n\n- static void describe(char *arg)\n -static void describe(struct commit *cmit, int last_one)\n++static void describe(char *arg, int last_one)\n  {\n +        unsigned char sha1[20];\n +        struct commit *cmit;\n        struct commit_list *list;\n        static int initialized = 0;\n        struct commit_name *n;\n\n +        if (get_sha1(arg, sha1) &lt; 0)\n +                usage(describe_usage);\n +        cmit = lookup_commit_reference(sha1);\n +        if (!cmit)\n +                usage(describe_usage);\n +\n        if (!initialized) {\n                initialized = 1;\n                for_each_ref(get_name);</pre> </div> </div> <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>It is preceded with a \"git diff\" header, that looks like this (when <code>-c</code> option is used):</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>diff --combined file</pre> </div> </div>  <p>or like this (when <code>--cc</code> option is used):</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>diff --cc file</pre> </div> </div> </li> <li> <p>It is followed by one or more extended header lines (this example shows a merge with two parents):</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>index &lt;hash&gt;,&lt;hash&gt;..&lt;hash&gt;\nmode &lt;mode&gt;,&lt;mode&gt;..&lt;mode&gt;\nnew file mode &lt;mode&gt;\ndeleted file mode &lt;mode&gt;,&lt;mode&gt;</pre> </div> </div>  <p>The <code>mode &lt;mode&gt;,&lt;mode&gt;..&lt;mode&gt;</code> line appears only if at least one of the &lt;mode&gt; is different from the rest. Extended headers with information about detected contents movement (renames and copying detection) are designed to work with diff of two &lt;tree-ish&gt; and are not used by combined diff format.</p>  </li> <li> <p>It is followed by two-line from-file/to-file header</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>--- a/file\n+++ b/file</pre> </div> </div>  <p>Similar to two-line header for traditional <code>unified</code> diff format, <code>/dev/null</code> is used to signal created or deleted files.</p>  </li> <li> <p>Chunk header format is modified to prevent people from accidentally feeding it to <code>patch -p1</code>. Combined diff format was created for review of merge commit changes, and was not meant for apply. The change is similar to the change in the extended <code>index</code> header:</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>@@@ &lt;from-file-range&gt; &lt;from-file-range&gt; &lt;to-file-range&gt; @@@</pre> </div> </div>  <p>There are (number of parents + 1) <code>@</code> characters in the chunk header for combined diff format.</p>  </li> </ol> </div>  <p>Unlike the traditional <code>unified</code> diff format, which shows two files A and B with a single column that has <code>-</code> (minus — appears in A but removed in B), <code>+</code> (plus — missing in A but added to B), or <code>\" \"</code> (space — unchanged) prefix, this format compares two or more files file1, file2,…​ with one file X, and shows how X differs from each of fileN. One column for each of fileN is prepended to the output line to note how X’s line is different from it.</p>   <p>A <code>-</code> character in the column N means that the line appears in fileN but it does not appear in the result. A <code>+</code> character in the column N means that the line appears in the result, and fileN does not have that line (in other words, the line was added, from the point of view of that parent).</p>   <p>In the above example output, the function signature was changed from both files (hence two <code>-</code> removals from both file1 and file2, plus <code>++</code> to mean one line that was added does not appear in either file1 or file2). Also eight other lines are the same from file1 but do not appear in file2 (hence prefixed with <code>+</code>).</p>   <p>When shown by <code>git diff-tree -c</code>, it compares the parents of a merge commit with the merge result (i.e. file1..fileN are the parents). When shown by <code>git diff-files -c</code>, it compares the two unresolved merge parents with the working tree file (i.e. file1 is stage 2 aka \"our version\", file2 is stage 3 aka \"their version\").</p> </div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>git show v1.0.0</code></dt> <dd> <p>Shows the tag <code>v1.0.0</code>, along with the object the tags points at.</p> </dd> <dt class=\"hdlist1\"><code>git show v1.0.0^{tree}</code></dt> <dd> <p>Shows the tree pointed to by the tag <code>v1.0.0</code>.</p> </dd> <dt class=\"hdlist1\"><code>git show -s --format=%s v1.0.0^{commit}</code></dt> <dd> <p>Shows the subject of the commit pointed to by the tag <code>v1.0.0</code>.</p> </dd> <dt class=\"hdlist1\"><code>git show next~10:Documentation/README</code></dt> <dd> <p>Shows the contents of the file <code>Documentation/README</code> as they were current in the 10th last commit of the branch <code>next</code>.</p> </dd> <dt class=\"hdlist1\"><code>git show master:Makefile master:t/Makefile</code></dt> <dd> <p>Concatenates the contents of said Makefiles in the head of the branch <code>master</code>.</p> </dd> </dl> </div></div>   <h2 id=\"_discussion\">Discussion</h2> <div class=\"sectionbody\"> <p>Git is to some extent character encoding agnostic.</p>  <div class=\"ulist\"> <ul> <li> <p>The contents of the blob objects are uninterpreted sequences of bytes. There is no encoding translation at the core level.</p> </li> <li> <p>Path names are encoded in UTF-8 normalization form C. This applies to tree objects, the index file, ref names, as well as path names in command line arguments, environment variables and config files (<code>.git/config</code> (see <a href=\"git-config\">git-config[1]</a>), <a href=\"gitignore\">gitignore[5]</a>, <a href=\"gitattributes\">gitattributes[5]</a> and <a href=\"gitmodules\">gitmodules[5]</a>).</p>  <p>Note that Git at the core level treats path names simply as sequences of non-NUL bytes, there are no path name encoding conversions (except on Mac and Windows). Therefore, using non-ASCII path names will mostly work even on platforms and file systems that use legacy extended ASCII encodings. However, repositories created on such systems will not work properly on UTF-8-based systems (e.g. Linux, Mac, Windows) and vice versa. Additionally, many Git-based tools simply assume path names to be UTF-8 and will fail to display other encodings correctly.</p>  </li> <li> <p>Commit log messages are typically encoded in UTF-8, but other extended ASCII encodings are also supported. This includes ISO-8859-x, CP125x and many others, but <code>not</code> UTF-16/32, EBCDIC and CJK multi-byte encodings (GBK, Shift-JIS, Big5, EUC-x, CP9xx etc.).</p> </li> </ul> </div>  <p>Although we encourage that the commit log messages are encoded in UTF-8, both the core and Git Porcelain are designed not to force UTF-8 on projects. If all participants of a particular project find it more convenient to use legacy encodings, Git does not forbid it. However, there are a few things to keep in mind.</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p><code>git commit</code> and <code>git commit-tree</code> issues a warning if the commit log message given to it does not look like a valid UTF-8 string, unless you explicitly say your project uses a legacy encoding. The way to say this is to have i18n.commitencoding in <code>.git/config</code> file, like this:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>[i18n]\n        commitencoding = ISO-8859-1</pre> </div> </div>  <p>Commit objects created with the above setting record the value of <code>i18n.commitencoding</code> in its <code>encoding</code> header. This is to help other people who look at them later. Lack of this header implies that the commit log message is encoded in UTF-8.</p>  </li> <li> <p><code>git log</code>, <code>git show</code>, <code>git blame</code> and friends look at the <code>encoding</code> header of a commit object, and try to re-code the log message into UTF-8 unless otherwise specified. You can specify the desired output encoding with <code>i18n.logoutputencoding</code> in <code>.git/config</code> file, like this:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>[i18n]\n        logoutputencoding = ISO-8859-1</pre> </div> </div>  <p>If you do not have this configuration variable, the value of <code>i18n.commitencoding</code> is used instead.</p>  </li> </ol> </div>  <p>Note that we deliberately chose not to re-code the commit log message when a commit is made to force UTF-8 at the commit object level, because re-coding to UTF-8 is not necessarily a reversible operation.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-show\" class=\"_attribution-link\">https://git-scm.com/docs/git-show</a>\n  </p>\n</div>\n","git-send-email":"<h1>git-send-email</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-send-email - Send a collection of patches as emails</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git send-email [options] &lt;file|directory|rev-list options&gt;…​\ngit send-email --dump-aliases</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Takes the patches given on the command line and emails them out. Patches can be specified as files, directories (which will send all files in the directory), or directly as a revision list. In the last case, any format accepted by <a href=\"git-format-patch\">git-format-patch[1]</a> can be passed to git send-email.</p>   <p>The header of the email is configurable via command-line options. If not specified on the command line, the user will be prompted with a ReadLine enabled interface to provide the necessary information.</p>   <p>There are two formats accepted for patch files:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>mbox format files</p>  <p>This is what <a href=\"git-format-patch\">git-format-patch[1]</a> generates. Most headers and MIME formatting are ignored.</p>  </li> <li> <p>The original format used by Greg Kroah-Hartman’s <code>send_lots_of_email.pl</code> script</p>  <p>This format expects the first line of the file to contain the \"Cc:\" value and the \"Subject:\" of the message as the second line.</p>  </li> </ol> </div>\n</div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\">\n<div class=\"sect2\"> <h3 id=\"_composing\">Composing</h3> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--annotate</dt> <dd> <p>Review and edit each patch you’re about to send. Default is the value of <code>sendemail.annotate</code>. See the CONFIGURATION section for <code>sendemail.multiEdit</code>.</p> </dd> <dt class=\"hdlist1\">--bcc=&lt;address&gt;,…​</dt> <dd> <p>Specify a \"Bcc:\" value for each email. Default is the value of <code>sendemail.bcc</code>.</p>  <p>This option may be specified multiple times.</p>  </dd> <dt class=\"hdlist1\">--cc=&lt;address&gt;,…​</dt> <dd> <p>Specify a starting \"Cc:\" value for each email. Default is the value of <code>sendemail.cc</code>.</p>  <p>This option may be specified multiple times.</p>  </dd> <dt class=\"hdlist1\">--compose</dt> <dd> <p>Invoke a text editor (see GIT_EDITOR in <a href=\"git-var\">git-var[1]</a>) to edit an introductory message for the patch series.</p>  <p>When <code>--compose</code> is used, git send-email will use the From, Subject, and In-Reply-To headers specified in the message. If the body of the message (what you type after the headers and a blank line) only contains blank (or Git: prefixed) lines, the summary won’t be sent, but From, Subject, and In-Reply-To headers will be used unless they are removed.</p>   <p>Missing From or In-Reply-To headers will be prompted for.</p>   <p>See the CONFIGURATION section for <code>sendemail.multiEdit</code>.</p>  </dd> <dt class=\"hdlist1\">--from=&lt;address&gt;</dt> <dd> <p>Specify the sender of the emails. If not specified on the command line, the value of the <code>sendemail.from</code> configuration option is used. If neither the command-line option nor <code>sendemail.from</code> are set, then the user will be prompted for the value. The default for the prompt will be the value of GIT_AUTHOR_IDENT, or GIT_COMMITTER_IDENT if that is not set, as returned by \"git var -l\".</p> </dd> <dt class=\"hdlist1\">--in-reply-to=&lt;identifier&gt;</dt> <dd> <p>Make the first mail (or all the mails with <code>--no-thread</code>) appear as a reply to the given Message-Id, which avoids breaking threads to provide a new patch series. The second and subsequent emails will be sent as replies according to the <code>--[no]-chain-reply-to</code> setting.</p>  <p>So for example when <code>--thread</code> and <code>--no-chain-reply-to</code> are specified, the second and subsequent patches will be replies to the first one like in the illustration below where <code>[PATCH v2 0/3]</code> is in reply to <code>[PATCH 0/2]</code>:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>[PATCH 0/2] Here is what I did...\n  [PATCH 1/2] Clean up and tests\n  [PATCH 2/2] Implementation\n  [PATCH v2 0/3] Here is a reroll\n    [PATCH v2 1/3] Clean up\n    [PATCH v2 2/3] New tests\n    [PATCH v2 3/3] Implementation</pre> </div> </div>  <p>Only necessary if --compose is also set. If --compose is not set, this will be prompted for.</p>  </dd> <dt class=\"hdlist1\">--subject=&lt;string&gt;</dt> <dd> <p>Specify the initial subject of the email thread. Only necessary if --compose is also set. If --compose is not set, this will be prompted for.</p> </dd> <dt class=\"hdlist1\">--to=&lt;address&gt;,…​</dt> <dd> <p>Specify the primary recipient of the emails generated. Generally, this will be the upstream maintainer of the project involved. Default is the value of the <code>sendemail.to</code> configuration value; if that is unspecified, and --to-cmd is not specified, this will be prompted for.</p>  <p>This option may be specified multiple times.</p>  </dd> <dt class=\"hdlist1\">--8bit-encoding=&lt;encoding&gt;</dt> <dd> <p>When encountering a non-ASCII message or subject that does not declare its encoding, add headers/quoting to indicate it is encoded in &lt;encoding&gt;. Default is the value of the <code>sendemail.assume8bitEncoding</code>; if that is unspecified, this will be prompted for if any non-ASCII files are encountered.</p>  <p>Note that no attempts whatsoever are made to validate the encoding.</p>  </dd> <dt class=\"hdlist1\">--compose-encoding=&lt;encoding&gt;</dt> <dd> <p>Specify encoding of compose message. Default is the value of the <code>sendemail.composeencoding</code>; if that is unspecified, UTF-8 is assumed.</p> </dd> <dt class=\"hdlist1\">--transfer-encoding=(7bit|8bit|quoted-printable|base64)</dt> <dd> <p>Specify the transfer encoding to be used to send the message over SMTP. 7bit will fail upon encountering a non-ASCII message. quoted-printable can be useful when the repository contains files that contain carriage returns, but makes the raw patch email file (as saved from a MUA) much harder to inspect manually. base64 is even more fool proof, but also even more opaque. Default is the value of the <code>sendemail.transferEncoding</code> configuration value; if that is unspecified, git will use 8bit and not add a Content-Transfer-Encoding header.</p> </dd> <dt class=\"hdlist1\">--xmailer</dt> <dt class=\"hdlist1\">--no-xmailer</dt> <dd> <p>Add (or prevent adding) the \"X-Mailer:\" header. By default, the header is added, but it can be turned off by setting the <code>sendemail.xmailer</code> configuration variable to <code>false</code>.</p> </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_sending\">Sending</h3> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--envelope-sender=&lt;address&gt;</dt> <dd> <p>Specify the envelope sender used to send the emails. This is useful if your default address is not the address that is subscribed to a list. In order to use the <code>From</code> address, set the value to \"auto\". If you use the sendmail binary, you must have suitable privileges for the -f parameter. Default is the value of the <code>sendemail.envelopeSender</code> configuration variable; if that is unspecified, choosing the envelope sender is left to your MTA.</p> </dd> <dt class=\"hdlist1\">--smtp-encryption=&lt;encryption&gt;</dt> <dd> <p>Specify the encryption to use, either <code>ssl</code> or <code>tls</code>. Any other value reverts to plain SMTP. Default is the value of <code>sendemail.smtpEncryption</code>.</p> </dd> <dt class=\"hdlist1\">--smtp-domain=&lt;FQDN&gt;</dt> <dd> <p>Specifies the Fully Qualified Domain Name (FQDN) used in the HELO/EHLO command to the SMTP server. Some servers require the FQDN to match your IP address. If not set, git send-email attempts to determine your FQDN automatically. Default is the value of <code>sendemail.smtpDomain</code>.</p> </dd> <dt class=\"hdlist1\">--smtp-auth=&lt;mechanisms&gt;</dt> <dd> <p>Whitespace-separated list of allowed SMTP-AUTH mechanisms. This setting forces using only the listed mechanisms. Example:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git send-email --smtp-auth=\"PLAIN LOGIN GSSAPI\" ...</pre> </div> </div>  <p>If at least one of the specified mechanisms matches the ones advertised by the SMTP server and if it is supported by the utilized SASL library, the mechanism is used for authentication. If neither <code>sendemail.smtpAuth</code> nor <code>--smtp-auth</code> is specified, all mechanisms supported by the SASL library can be used.</p>  </dd> <dt class=\"hdlist1\">--smtp-pass[=&lt;password&gt;]</dt> <dd> <p>Password for SMTP-AUTH. The argument is optional: If no argument is specified, then the empty string is used as the password. Default is the value of <code>sendemail.smtpPass</code>, however <code>--smtp-pass</code> always overrides this value.</p>  <p>Furthermore, passwords need not be specified in configuration files or on the command line. If a username has been specified (with <code>--smtp-user</code> or a <code>sendemail.smtpUser</code>), but no password has been specified (with <code>--smtp-pass</code> or <code>sendemail.smtpPass</code>), then a password is obtained using <code>git-credential</code>.</p>  </dd> <dt class=\"hdlist1\">--smtp-server=&lt;host&gt;</dt> <dd> <p>If set, specifies the outgoing SMTP server to use (e.g. <code>smtp.example.com</code> or a raw IP address). Alternatively it can specify a full pathname of a sendmail-like program instead; the program must support the <code>-i</code> option. Default value can be specified by the <code>sendemail.smtpServer</code> configuration option; the built-in default is <code>/usr/sbin/sendmail</code> or <code>/usr/lib/sendmail</code> if such program is available, or <code>localhost</code> otherwise.</p> </dd> <dt class=\"hdlist1\">--smtp-server-port=&lt;port&gt;</dt> <dd> <p>Specifies a port different from the default port (SMTP servers typically listen to smtp port 25, but may also listen to submission port 587, or the common SSL smtp port 465); symbolic port names (e.g. \"submission\" instead of 587) are also accepted. The port can also be set with the <code>sendemail.smtpServerPort</code> configuration variable.</p> </dd> <dt class=\"hdlist1\">--smtp-server-option=&lt;option&gt;</dt> <dd> <p>If set, specifies the outgoing SMTP server option to use. Default value can be specified by the <code>sendemail.smtpServerOption</code> configuration option.</p>  <p>The --smtp-server-option option must be repeated for each option you want to pass to the server. Likewise, different lines in the configuration files must be used for each option.</p>  </dd> <dt class=\"hdlist1\">--smtp-ssl</dt> <dd> <p>Legacy alias for <code>--smtp-encryption ssl</code>.</p> </dd> <dt class=\"hdlist1\">--smtp-ssl-cert-path</dt> <dd> <p>Path to a store of trusted CA certificates for SMTP SSL/TLS certificate validation (either a directory that has been processed by <code>c_rehash</code>, or a single file containing one or more PEM format certificates concatenated together: see verify(1) -CAfile and -CApath for more information on these). Set it to an empty string to disable certificate verification. Defaults to the value of the <code>sendemail.smtpsslcertpath</code> configuration variable, if set, or the backing SSL library’s compiled-in default otherwise (which should be the best choice on most platforms).</p> </dd> <dt class=\"hdlist1\">--smtp-user=&lt;user&gt;</dt> <dd> <p>Username for SMTP-AUTH. Default is the value of <code>sendemail.smtpUser</code>; if a username is not specified (with <code>--smtp-user</code> or <code>sendemail.smtpUser</code>), then authentication is not attempted.</p> </dd> <dt class=\"hdlist1\">--smtp-debug=0|1</dt> <dd> <p>Enable (1) or disable (0) debug output. If enabled, SMTP commands and replies will be printed. Useful to debug TLS connection and authentication problems.</p> </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_automating\">Automating</h3> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--to-cmd=&lt;command&gt;</dt> <dd> <p>Specify a command to execute once per patch file which should generate patch file specific \"To:\" entries. Output of this command must be single email address per line. Default is the value of <code>sendemail.tocmd</code> configuration value.</p> </dd> <dt class=\"hdlist1\">--cc-cmd=&lt;command&gt;</dt> <dd> <p>Specify a command to execute once per patch file which should generate patch file specific \"Cc:\" entries. Output of this command must be single email address per line. Default is the value of <code>sendemail.ccCmd</code> configuration value.</p> </dd> <dt class=\"hdlist1\">--[no-]chain-reply-to</dt> <dd> <p>If this is set, each email will be sent as a reply to the previous email sent. If disabled with \"--no-chain-reply-to\", all emails after the first will be sent as replies to the first email sent. When using this, it is recommended that the first file given be an overview of the entire patch series. Disabled by default, but the <code>sendemail.chainReplyTo</code> configuration variable can be used to enable it.</p> </dd> <dt class=\"hdlist1\">--identity=&lt;identity&gt;</dt> <dd> <p>A configuration identity. When given, causes values in the <code>sendemail.&lt;identity&gt;</code> subsection to take precedence over values in the <code>sendemail</code> section. The default identity is the value of <code>sendemail.identity</code>.</p> </dd> <dt class=\"hdlist1\">--[no-]signed-off-by-cc</dt> <dd> <p>If this is set, add emails found in Signed-off-by: or Cc: lines to the cc list. Default is the value of <code>sendemail.signedoffbycc</code> configuration value; if that is unspecified, default to --signed-off-by-cc.</p> </dd> <dt class=\"hdlist1\">--[no-]cc-cover</dt> <dd> <p>If this is set, emails found in Cc: headers in the first patch of the series (typically the cover letter) are added to the cc list for each email set. Default is the value of <code>sendemail.cccover</code> configuration value; if that is unspecified, default to --no-cc-cover.</p> </dd> <dt class=\"hdlist1\">--[no-]to-cover</dt> <dd> <p>If this is set, emails found in To: headers in the first patch of the series (typically the cover letter) are added to the to list for each email set. Default is the value of <code>sendemail.tocover</code> configuration value; if that is unspecified, default to --no-to-cover.</p> </dd> <dt class=\"hdlist1\">--suppress-cc=&lt;category&gt;</dt> <dd> <p>Specify an additional category of recipients to suppress the auto-cc of:</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"ulist\"> <ul> <li> <p><code>author</code> will avoid including the patch author</p> </li> <li> <p><code>self</code> will avoid including the sender</p> </li> <li> <p><code>cc</code> will avoid including anyone mentioned in Cc lines in the patch header except for self (use <code>self</code> for that).</p> </li> <li> <p><code>bodycc</code> will avoid including anyone mentioned in Cc lines in the patch body (commit message) except for self (use <code>self</code> for that).</p> </li> <li> <p><code>sob</code> will avoid including anyone mentioned in Signed-off-by lines except for self (use <code>self</code> for that).</p> </li> <li> <p><code>cccmd</code> will avoid running the --cc-cmd.</p> </li> <li> <p><code>body</code> is equivalent to <code>sob</code> + <code>bodycc</code></p> </li> <li> <p><code>all</code> will suppress all auto cc values.</p> </li> </ul> </div> </div> </div>  <p>Default is the value of <code>sendemail.suppresscc</code> configuration value; if that is unspecified, default to <code>self</code> if --suppress-from is specified, as well as <code>body</code> if --no-signed-off-cc is specified.</p>  </dd> <dt class=\"hdlist1\">--[no-]suppress-from</dt> <dd> <p>If this is set, do not add the From: address to the cc: list. Default is the value of <code>sendemail.suppressFrom</code> configuration value; if that is unspecified, default to --no-suppress-from.</p> </dd> <dt class=\"hdlist1\">--[no-]thread</dt> <dd> <p>If this is set, the In-Reply-To and References headers will be added to each email sent. Whether each mail refers to the previous email (<code>deep</code> threading per <code>git format-patch</code> wording) or to the first email (<code>shallow</code> threading) is governed by \"--[no-]chain-reply-to\".</p>  <p>If disabled with \"--no-thread\", those headers will not be added (unless specified with --in-reply-to). Default is the value of the <code>sendemail.thread</code> configuration value; if that is unspecified, default to --thread.</p>   <p>It is up to the user to ensure that no In-Reply-To header already exists when <code>git send-email</code> is asked to add it (especially note that <code>git format-patch</code> can be configured to do the threading itself). Failure to do so may not produce the expected result in the recipient’s MUA.</p>  </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_administering\">Administering</h3> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--confirm=&lt;mode&gt;</dt> <dd> <p>Confirm just before sending:</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"ulist\"> <ul> <li> <p><code>always</code> will always confirm before sending</p> </li> <li> <p><code>never</code> will never confirm before sending</p> </li> <li> <p><code>cc</code> will confirm before sending when send-email has automatically added addresses from the patch to the Cc list</p> </li> <li> <p><code>compose</code> will confirm before sending the first message when using --compose.</p> </li> <li> <p><code>auto</code> is equivalent to <code>cc</code> + <code>compose</code></p> </li> </ul> </div> </div> </div>  <p>Default is the value of <code>sendemail.confirm</code> configuration value; if that is unspecified, default to <code>auto</code> unless any of the suppress options have been specified, in which case default to <code>compose</code>.</p>  </dd> <dt class=\"hdlist1\">--dry-run</dt> <dd> <p>Do everything except actually send the emails.</p> </dd> <dt class=\"hdlist1\">--[no-]format-patch</dt> <dd> <p>When an argument may be understood either as a reference or as a file name, choose to understand it as a format-patch argument (<code>--format-patch</code>) or as a file name (<code>--no-format-patch</code>). By default, when such a conflict occurs, git send-email will fail.</p> </dd> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>Make git-send-email less verbose. One line per email should be all that is output.</p> </dd> <dt class=\"hdlist1\">--[no-]validate</dt> <dd> <p>Perform sanity checks on patches. Currently, validation means the following:</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"ulist\"> <ul> <li> <p>Warn of patches that contain lines longer than 998 characters; this is due to SMTP limits as described by <a href=\"http://www.ietf.org/rfc/rfc2821.txt\" class=\"bare\">http://www.ietf.org/rfc/rfc2821.txt</a>.</p> </li> </ul> </div> </div> </div>  <p>Default is the value of <code>sendemail.validate</code>; if this is not set, default to <code>--validate</code>.</p>  </dd> <dt class=\"hdlist1\">--force</dt> <dd> <p>Send emails even if safety checks would prevent it.</p> </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_information\">Information</h3> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--dump-aliases</dt> <dd> <p>Instead of the normal operation, dump the shorthand alias names from the configured alias file(s), one per line in alphabetical order. Note, this only includes the alias name and not its expanded email addresses. See <code>sendemail.aliasesfile</code> for more information about aliases.</p> </dd> </dl> </div> </div>\n</div>   <h2 id=\"_configuration\">Configuration</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">sendemail.aliasesFile</dt> <dd> <p>To avoid typing long email addresses, point this to one or more email aliases files. You must also supply <code>sendemail.aliasFileType</code>.</p> </dd> <dt class=\"hdlist1\">sendemail.aliasFileType</dt> <dd> <p>Format of the file(s) specified in sendemail.aliasesFile. Must be one of <code>mutt</code>, <code>mailrc</code>, <code>pine</code>, <code>elm</code>, or <code>gnus</code>, or <code>sendmail</code>.</p>  <p>What an alias file in each format looks like can be found in the documentation of the email program of the same name. The differences and limitations from the standard formats are described below:</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">sendmail</dt> <dd> <div class=\"ulist\"> <ul> <li> <p>Quoted aliases and quoted addresses are not supported: lines that contain a <code>\"</code> symbol are ignored.</p> </li> <li> <p>Redirection to a file (<code>/path/name</code>) or pipe (<code>|command</code>) is not supported.</p> </li> <li> <p>File inclusion (<code>:include: /path/name</code>) is not supported.</p> </li> <li> <p>Warnings are printed on the standard error output for any explicitly unsupported constructs, and any other lines that are not recognized by the parser.</p> </li> </ul> </div> </dd> </dl> </div> </div> </div> </dd> <dt class=\"hdlist1\">sendemail.multiEdit</dt> <dd> <p>If true (default), a single editor instance will be spawned to edit files you have to edit (patches when <code>--annotate</code> is used, and the summary when <code>--compose</code> is used). If false, files will be edited one after the other, spawning a new editor each time.</p> </dd> <dt class=\"hdlist1\">sendemail.confirm</dt> <dd> <p>Sets the default for whether to confirm before sending. Must be one of <code>always</code>, <code>never</code>, <code>cc</code>, <code>compose</code>, or <code>auto</code>. See <code>--confirm</code> in the previous section for the meaning of these values.</p> </dd> </dl> </div></div>   <h2 id=\"_example\">Example</h2> <div class=\"sectionbody\"><div class=\"sect2\"> <h3 id=\"_use_gmail_as_the_smtp_server\">Use gmail as the smtp server</h3>  <p>To use <code>git send-email</code> to send your patches through the GMail SMTP server, edit ~/.gitconfig to specify your account settings:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>[sendemail]\n    smtpEncryption = tls\n    smtpServer = smtp.gmail.com\n    smtpUser = yourname@gmail.com\n    smtpServerPort = 587</pre> </div> </div>  <p>If you have multifactor authentication setup on your gmail account, you will need to generate an app-specific password for use with <code>git send-email</code>. Visit <a href=\"https://security.google.com/settings/security/apppasswords\" class=\"bare\">https://security.google.com/settings/security/apppasswords</a> to setup an app-specific password. Once setup, you can store it with the credentials helper:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>$ git credential fill\nprotocol=smtp\nhost=smtp.gmail.com\nusername=youname@gmail.com\npassword=app-password</pre> </div> </div>  <p>Once your commits are ready to be sent to the mailing list, run the following commands:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>$ git format-patch --cover-letter -M origin/master -o outgoing/\n$ edit outgoing/0000-*\n$ git send-email outgoing/*</pre> </div> </div>  <p>Note: the following perl modules are required Net::SMTP::SSL, MIME::Base64 and Authen::SASL</p>  </div></div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-format-patch\">git-format-patch[1]</a>, <a href=\"git-imap-send\">git-imap-send[1]</a>, mbox(5)</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-send-email\" class=\"_attribution-link\">https://git-scm.com/docs/git-send-email</a>\n  </p>\n</div>\n","git-clean":"<h1>git-clean</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-clean - Remove untracked files from the working tree</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git clean [-d] [-f] [-i] [-n] [-q] [-e &lt;pattern&gt;] [-x | -X] [--] &lt;path&gt;…​</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Cleans the working tree by recursively removing files that are not under version control, starting from the current directory.</p>   <p>Normally, only files unknown to Git are removed, but if the <code>-x</code> option is specified, ignored files are also removed. This can, for example, be useful to remove all build products.</p>   <p>If any optional <code>&lt;path&gt;...</code> arguments are given, only those paths are affected.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-d</dt> <dd> <p>Remove untracked directories in addition to untracked files. If an untracked directory is managed by a different Git repository, it is not removed by default. Use -f option twice if you really want to remove such a directory.</p> </dd> <dt class=\"hdlist1\">-f</dt> <dt class=\"hdlist1\">--force</dt> <dd> <p>If the Git configuration variable clean.requireForce is not set to false, <code>git clean</code> will refuse to delete files or directories unless given -f, -n or -i. Git will refuse to delete directories with .git sub directory or file unless a second -f is given.</p> </dd> <dt class=\"hdlist1\">-i</dt> <dt class=\"hdlist1\">--interactive</dt> <dd> <p>Show what would be done and clean files interactively. See “Interactive mode” for details.</p> </dd> <dt class=\"hdlist1\">-n</dt> <dt class=\"hdlist1\">--dry-run</dt> <dd> <p>Don’t actually remove anything, just show what would be done.</p> </dd> <dt class=\"hdlist1\">-q</dt> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>Be quiet, only report errors, but not the files that are successfully removed.</p> </dd> <dt class=\"hdlist1\">-e &lt;pattern&gt;</dt> <dt class=\"hdlist1\">--exclude=&lt;pattern&gt;</dt> <dd> <p>In addition to those found in .gitignore (per directory) and $GIT_DIR/info/exclude, also consider these patterns to be in the set of the ignore rules in effect.</p> </dd> <dt class=\"hdlist1\">-x</dt> <dd> <p>Don’t use the standard ignore rules read from .gitignore (per directory) and $GIT_DIR/info/exclude, but do still use the ignore rules given with <code>-e</code> options. This allows removing all untracked files, including build products. This can be used (possibly in conjunction with <code>git reset</code>) to create a pristine working directory to test a clean build.</p> </dd> <dt class=\"hdlist1\">-X</dt> <dd> <p>Remove only files ignored by Git. This may be useful to rebuild everything from scratch, but keep manually created files.</p> </dd> </dl> </div></div>   <h2 id=\"_interactive_mode\">Interactive mode</h2> <div class=\"sectionbody\"> <p>When the command enters the interactive mode, it shows the files and directories to be cleaned, and goes into its interactive command loop.</p>   <p>The command loop shows the list of subcommands available, and gives a prompt \"What now&gt; \". In general, when the prompt ends with a single <code>&gt;</code>, you can pick only one of the choices given and type return, like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>    *** Commands ***\n        1: clean                2: filter by pattern    3: select by numbers\n        4: ask each             5: quit                 6: help\n    What now&gt; 1</pre> </div> </div>  <p>You also could say <code>c</code> or <code>clean</code> above as long as the choice is unique.</p>   <p>The main command loop has 6 subcommands.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">clean</dt> <dd> <p>Start cleaning files and directories, and then quit.</p> </dd> <dt class=\"hdlist1\">filter by pattern</dt> <dd> <p>This shows the files and directories to be deleted and issues an \"Input ignore patterns&gt;&gt;\" prompt. You can input space-separated patterns to exclude files and directories from deletion. E.g. \"*.c *.h\" will excludes files end with \".c\" and \".h\" from deletion. When you are satisfied with the filtered result, press ENTER (empty) back to the main menu.</p> </dd> <dt class=\"hdlist1\">select by numbers</dt> <dd> <p>This shows the files and directories to be deleted and issues an \"Select items to delete&gt;&gt;\" prompt. When the prompt ends with double <code>&gt;&gt;</code> like this, you can make more than one selection, concatenated with whitespace or comma. Also you can say ranges. E.g. \"2-5 7,9\" to choose 2,3,4,5,7,9 from the list. If the second number in a range is omitted, all remaining items are selected. E.g. \"7-\" to choose 7,8,9 from the list. You can say <code>*</code> to choose everything. Also when you are satisfied with the filtered result, press ENTER (empty) back to the main menu.</p> </dd> <dt class=\"hdlist1\">ask each</dt> <dd> <p>This will start to clean, and you must confirm one by one in order to delete items. Please note that this action is not as efficient as the above two actions.</p> </dd> <dt class=\"hdlist1\">quit</dt> <dd> <p>This lets you quit without do cleaning.</p> </dd> <dt class=\"hdlist1\">help</dt> <dd> <p>Show brief usage of interactive git-clean.</p> </dd> </dl> </div>\n</div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"gitignore\">gitignore[5]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-clean\" class=\"_attribution-link\">https://git-scm.com/docs/git-clean</a>\n  </p>\n</div>\n","git-fsck":"<h1>git-fsck</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-fsck - Verifies the connectivity and validity of the objects in the database</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git fsck [--tags] [--root] [--unreachable] [--cache] [--no-reflogs]\n         [--[no-]full] [--strict] [--verbose] [--lost-found]\n         [--[no-]dangling] [--[no-]progress] [--connectivity-only] [&lt;object&gt;*]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Verifies the connectivity and validity of the objects in the database.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">&lt;object&gt;</dt> <dd> <p>An object to treat as the head of an unreachability trace.</p>  <p>If no objects are given, <code>git fsck</code> defaults to using the index file, all SHA-1 references in <code>refs</code> namespace, and all reflogs (unless --no-reflogs is given) as heads.</p>  </dd> <dt class=\"hdlist1\">--unreachable</dt> <dd> <p>Print out objects that exist but that aren’t reachable from any of the reference nodes.</p> </dd> <dt class=\"hdlist1\">--[no-]dangling</dt> <dd> <p>Print objects that exist but that are never <code>directly</code> used (default). <code>--no-dangling</code> can be used to omit this information from the output.</p> </dd> <dt class=\"hdlist1\">--root</dt> <dd> <p>Report root nodes.</p> </dd> <dt class=\"hdlist1\">--tags</dt> <dd> <p>Report tags.</p> </dd> <dt class=\"hdlist1\">--cache</dt> <dd> <p>Consider any object recorded in the index also as a head node for an unreachability trace.</p> </dd> <dt class=\"hdlist1\">--no-reflogs</dt> <dd> <p>Do not consider commits that are referenced only by an entry in a reflog to be reachable. This option is meant only to search for commits that used to be in a ref, but now aren’t, but are still in that corresponding reflog.</p> </dd> <dt class=\"hdlist1\">--full</dt> <dd> <p>Check not just objects in GIT_OBJECT_DIRECTORY ($GIT_DIR/objects), but also the ones found in alternate object pools listed in GIT_ALTERNATE_OBJECT_DIRECTORIES or $GIT_DIR/objects/info/alternates, and in packed Git archives found in $GIT_DIR/objects/pack and corresponding pack subdirectories in alternate object pools. This is now default; you can turn it off with --no-full.</p> </dd> <dt class=\"hdlist1\">--connectivity-only</dt> <dd> <p>Check only the connectivity of tags, commits and tree objects. By avoiding to unpack blobs, this speeds up the operation, at the expense of missing corrupt objects or other problematic issues.</p> </dd> <dt class=\"hdlist1\">--strict</dt> <dd> <p>Enable more strict checking, namely to catch a file mode recorded with g+w bit set, which was created by older versions of Git. Existing repositories, including the Linux kernel, Git itself, and sparse repository have old objects that triggers this check, but it is recommended to check new projects with this flag.</p> </dd> <dt class=\"hdlist1\">--verbose</dt> <dd> <p>Be chatty.</p> </dd> <dt class=\"hdlist1\">--lost-found</dt> <dd> <p>Write dangling objects into .git/lost-found/commit/ or .git/lost-found/other/, depending on type. If the object is a blob, the contents are written into the file, rather than its object name.</p> </dd> <dt class=\"hdlist1\">--[no-]progress</dt> <dd> <p>Progress status is reported on the standard error stream by default when it is attached to a terminal, unless --no-progress or --verbose is specified. --progress forces progress status even if the standard error stream is not directed to a terminal.</p> </dd> </dl> </div></div>   <h2 id=\"_discussion\">Discussion</h2> <div class=\"sectionbody\"> <p>git-fsck tests SHA-1 and general object sanity, and it does full tracking of the resulting reachability and everything else. It prints out any corruption it finds (missing or bad objects), and if you use the <code>--unreachable</code> flag it will also print out objects that exist but that aren’t reachable from any of the specified head nodes (or the default set, as mentioned above).</p>   <p>Any corrupt objects you will have to find in backups or other archives (i.e., you can just remove them and do an <code>rsync</code> with some other site in the hopes that somebody else has the object you have corrupted).</p> </div>   <h2 id=\"_extracted_diagnostics\">Extracted diagnostics</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">expect dangling commits - potential heads - due to lack of head information</dt> <dd> <p>You haven’t specified any nodes as heads so it won’t be possible to differentiate between un-parented commits and root nodes.</p> </dd> <dt class=\"hdlist1\">missing sha1 directory <em>&lt;dir&gt;</em>\n</dt> <dd> <p>The directory holding the sha1 objects is missing.</p> </dd> <dt class=\"hdlist1\">unreachable &lt;type&gt; &lt;object&gt;</dt> <dd> <p>The &lt;type&gt; object &lt;object&gt;, isn’t actually referred to directly or indirectly in any of the trees or commits seen. This can mean that there’s another root node that you’re not specifying or that the tree is corrupt. If you haven’t missed a root node then you might as well delete unreachable nodes since they can’t be used.</p> </dd> <dt class=\"hdlist1\">missing &lt;type&gt; &lt;object&gt;</dt> <dd> <p>The &lt;type&gt; object &lt;object&gt;, is referred to but isn’t present in the database.</p> </dd> <dt class=\"hdlist1\">dangling &lt;type&gt; &lt;object&gt;</dt> <dd> <p>The &lt;type&gt; object &lt;object&gt;, is present in the database but never <code>directly</code> used. A dangling commit could be a root node.</p> </dd> <dt class=\"hdlist1\">sha1 mismatch &lt;object&gt;</dt> <dd> <p>The database has an object who’s sha1 doesn’t match the database value. This indicates a serious data integrity problem.</p> </dd> </dl> </div></div>   <h2 id=\"_environment_variables\">Environment variables</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">GIT_OBJECT_DIRECTORY</dt> <dd> <p>used to specify the object database root (usually $GIT_DIR/objects)</p> </dd> <dt class=\"hdlist1\">GIT_INDEX_FILE</dt> <dd> <p>used to specify the index file of the index</p> </dd> <dt class=\"hdlist1\">GIT_ALTERNATE_OBJECT_DIRECTORIES</dt> <dd> <p>used to specify additional object database roots (usually unset)</p> </dd> </dl> </div></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-fsck\" class=\"_attribution-link\">https://git-scm.com/docs/git-fsck</a>\n  </p>\n</div>\n","git-log":"<h1>git-log</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-log - Show commit logs</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git log [&lt;options&gt;] [&lt;revision range&gt;] [[\\--] &lt;path&gt;…​]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Shows the commit logs.</p>   <p>The command takes options applicable to the <code>git rev-list</code> command to control what is shown and how, and options applicable to the <code>git diff-*</code> commands to control how the changes each commit introduces are shown.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\">\n<div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--follow</dt> <dd> <p>Continue listing the history of a file beyond renames (works only for a single file).</p> </dd> <dt class=\"hdlist1\">--no-decorate</dt> <dt class=\"hdlist1\">--decorate[=short|full|auto|no]</dt> <dd> <p>Print out the ref names of any commits that are shown. If <code>short</code> is specified, the ref name prefixes <code>refs/heads/</code>, <code>refs/tags/</code> and <code>refs/remotes/</code> will not be printed. If <code>full</code> is specified, the full ref name (including prefix) will be printed. If <code>auto</code> is specified, then if the output is going to a terminal, the ref names are shown as if <code>short</code> were given, otherwise no ref names are shown. The default option is <code>short</code>.</p> </dd> <dt class=\"hdlist1\">--source</dt> <dd> <p>Print out the ref name given on the command line by which each commit was reached.</p> </dd> <dt class=\"hdlist1\">--use-mailmap</dt> <dd> <p>Use mailmap file to map author and committer names and email addresses to canonical real names and email addresses. See <a href=\"git-shortlog\">git-shortlog[1]</a>.</p> </dd> <dt class=\"hdlist1\">--full-diff</dt> <dd> <p>Without this flag, <code>git log -p &lt;path&gt;...</code> shows commits that touch the specified paths, and diffs about the same specified paths. With this, the full diff is shown for commits that touch the specified paths; this means that \"&lt;path&gt;…​\" limits only commits, and doesn’t limit diff for those commits.</p>  <p>Note that this affects all diff-based output types, e.g. those produced by <code>--stat</code>, etc.</p>  </dd> <dt class=\"hdlist1\">--log-size</dt> <dd> <p>Include a line “log size &lt;number&gt;” in the output for each commit, where &lt;number&gt; is the length of that commit’s message in bytes. Intended to speed up tools that read log messages from <code>git log</code> output by allowing them to allocate space in advance.</p> </dd> <dt class=\"hdlist1\">-L &lt;start&gt;,&lt;end&gt;:&lt;file&gt;</dt> <dt class=\"hdlist1\">-L :&lt;funcname&gt;:&lt;file&gt;</dt> <dd> <p>Trace the evolution of the line range given by \"&lt;start&gt;,&lt;end&gt;\" (or the function name regex &lt;funcname&gt;) within the &lt;file&gt;. You may not give any pathspec limiters. This is currently limited to a walk starting from a single revision, i.e., you may only give zero or one positive revision arguments. You can specify this option more than once.</p>  <p>&lt;start&gt; and &lt;end&gt; can take one of these forms:</p>  <div class=\"ulist\"> <ul> <li> <p>number</p>  <p>If &lt;start&gt; or &lt;end&gt; is a number, it specifies an absolute line number (lines count from 1).</p>  </li> <li> <p>/regex/</p>  <p>This form will use the first line matching the given POSIX regex. If &lt;start&gt; is a regex, it will search from the end of the previous <code>-L</code> range, if any, otherwise from the start of file. If &lt;start&gt; is “^/regex/”, it will search from the start of file. If &lt;end&gt; is a regex, it will search starting at the line given by &lt;start&gt;.</p>  </li> <li> <p>+offset or -offset</p>  <p>This is only valid for &lt;end&gt; and will specify a number of lines before or after the line given by &lt;start&gt;.</p>  </li> </ul> </div>  <p>If “:&lt;funcname&gt;” is given in place of &lt;start&gt; and &lt;end&gt;, it is a regular expression that denotes the range from the first funcname line that matches &lt;funcname&gt;, up to the next funcname line. “:&lt;funcname&gt;” searches from the end of the previous <code>-L</code> range, if any, otherwise from the start of file. “^:&lt;funcname&gt;” searches from the start of file.</p>  </dd> </dl> </div> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">&lt;revision range&gt;</dt> <dd> <p>Show only commits in the specified revision range. When no &lt;revision range&gt; is specified, it defaults to <code>HEAD</code> (i.e. the whole history leading to the current commit). <code>origin..HEAD</code> specifies all the commits reachable from the current commit (i.e. <code>HEAD</code>), but not from <code>origin</code>. For a complete list of ways to spell &lt;revision range&gt;, see the <code>Specifying Ranges</code> section of <a href=\"gitrevisions\">gitrevisions[7]</a>.</p> </dd> <dt class=\"hdlist1\">[\\--] &lt;path&gt;…​</dt> <dd> <p>Show only commits that are enough to explain how the files that match the specified paths came to be. See <code>History Simplification</code> below for details and other simplification modes.</p>  <p>Paths may need to be prefixed with ‘`-- '’ to separate them from options or the revision range, when confusion arises.</p>  </dd> </dl> </div> <div class=\"sect2\"> <h3 id=\"_commit_limiting\">Commit Limiting</h3>  <p>Besides specifying a range of commits that should be listed using the special notations explained in the description, additional commit limiting may be applied.</p>   <p>Using more options generally further limits the output (e.g. <code>--since=&lt;date1&gt;</code> limits to commits newer than <code>&lt;date1&gt;</code>, and using it with <code>--grep=&lt;pattern&gt;</code> further limits to commits whose log message has a line that matches <code>&lt;pattern&gt;</code>), unless otherwise noted.</p>   <p>Note that these are applied before commit ordering and formatting options, such as <code>--reverse</code>.</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-&lt;number&gt;</dt> <dt class=\"hdlist1\">-n &lt;number&gt;</dt> <dt class=\"hdlist1\">--max-count=&lt;number&gt;</dt> <dd> <p>Limit the number of commits to output.</p> </dd> <dt class=\"hdlist1\">--skip=&lt;number&gt;</dt> <dd> <p>Skip <code>number</code> commits before starting to show the commit output.</p> </dd> <dt class=\"hdlist1\">--since=&lt;date&gt;</dt> <dt class=\"hdlist1\">--after=&lt;date&gt;</dt> <dd> <p>Show commits more recent than a specific date.</p> </dd> <dt class=\"hdlist1\">--until=&lt;date&gt;</dt> <dt class=\"hdlist1\">--before=&lt;date&gt;</dt> <dd> <p>Show commits older than a specific date.</p> </dd> <dt class=\"hdlist1\">--author=&lt;pattern&gt;</dt> <dt class=\"hdlist1\">--committer=&lt;pattern&gt;</dt> <dd> <p>Limit the commits output to ones with author/committer header lines that match the specified pattern (regular expression). With more than one <code>--author=&lt;pattern&gt;</code>, commits whose author matches any of the given patterns are chosen (similarly for multiple <code>--committer=&lt;pattern&gt;</code>).</p> </dd> <dt class=\"hdlist1\">--grep-reflog=&lt;pattern&gt;</dt> <dd> <p>Limit the commits output to ones with reflog entries that match the specified pattern (regular expression). With more than one <code>--grep-reflog</code>, commits whose reflog message matches any of the given patterns are chosen. It is an error to use this option unless <code>--walk-reflogs</code> is in use.</p> </dd> <dt class=\"hdlist1\">--grep=&lt;pattern&gt;</dt> <dd> <p>Limit the commits output to ones with log message that matches the specified pattern (regular expression). With more than one <code>--grep=&lt;pattern&gt;</code>, commits whose message matches any of the given patterns are chosen (but see <code>--all-match</code>).</p>  <p>When <code>--show-notes</code> is in effect, the message from the notes is matched as if it were part of the log message.</p>  </dd> <dt class=\"hdlist1\">--all-match</dt> <dd> <p>Limit the commits output to ones that match all given <code>--grep</code>, instead of ones that match at least one.</p> </dd> <dt class=\"hdlist1\">--invert-grep</dt> <dd> <p>Limit the commits output to ones with log message that do not match the pattern specified with <code>--grep=&lt;pattern&gt;</code>.</p> </dd> <dt class=\"hdlist1\">-i</dt> <dt class=\"hdlist1\">--regexp-ignore-case</dt> <dd> <p>Match the regular expression limiting patterns without regard to letter case.</p> </dd> <dt class=\"hdlist1\">--basic-regexp</dt> <dd> <p>Consider the limiting patterns to be basic regular expressions; this is the default.</p> </dd> <dt class=\"hdlist1\">-E</dt> <dt class=\"hdlist1\">--extended-regexp</dt> <dd> <p>Consider the limiting patterns to be extended regular expressions instead of the default basic regular expressions.</p> </dd> <dt class=\"hdlist1\">-F</dt> <dt class=\"hdlist1\">--fixed-strings</dt> <dd> <p>Consider the limiting patterns to be fixed strings (don’t interpret pattern as a regular expression).</p> </dd> <dt class=\"hdlist1\">--perl-regexp</dt> <dd> <p>Consider the limiting patterns to be Perl-compatible regular expressions. Requires libpcre to be compiled in.</p> </dd> <dt class=\"hdlist1\">--remove-empty</dt> <dd> <p>Stop when a given path disappears from the tree.</p> </dd> <dt class=\"hdlist1\">--merges</dt> <dd> <p>Print only merge commits. This is exactly the same as <code>--min-parents=2</code>.</p> </dd> <dt class=\"hdlist1\">--no-merges</dt> <dd> <p>Do not print commits with more than one parent. This is exactly the same as <code>--max-parents=1</code>.</p> </dd> <dt class=\"hdlist1\">--min-parents=&lt;number&gt;</dt> <dt class=\"hdlist1\">--max-parents=&lt;number&gt;</dt> <dt class=\"hdlist1\">--no-min-parents</dt> <dt class=\"hdlist1\">--no-max-parents</dt> <dd> <p>Show only commits which have at least (or at most) that many parent commits. In particular, <code>--max-parents=1</code> is the same as <code>--no-merges</code>, <code>--min-parents=2</code> is the same as <code>--merges</code>. <code>--max-parents=0</code> gives all root commits and <code>--min-parents=3</code> all octopus merges.</p>  <p><code>--no-min-parents</code> and <code>--no-max-parents</code> reset these limits (to no limit) again. Equivalent forms are <code>--min-parents=0</code> (any commit has 0 or more parents) and <code>--max-parents=-1</code> (negative numbers denote no upper limit).</p>  </dd> <dt class=\"hdlist1\">--first-parent</dt> <dd> <p>Follow only the first parent commit upon seeing a merge commit. This option can give a better overview when viewing the evolution of a particular topic branch, because merges into a topic branch tend to be only about adjusting to updated upstream from time to time, and this option allows you to ignore the individual commits brought in to your history by such a merge. Cannot be combined with --bisect.</p> </dd> <dt class=\"hdlist1\">--not</dt> <dd> <p>Reverses the meaning of the <code>^</code> prefix (or lack thereof) for all following revision specifiers, up to the next <code>--not</code>.</p> </dd> <dt class=\"hdlist1\">--all</dt> <dd> <p>Pretend as if all the refs in <code>refs/</code> are listed on the command line as <code>&lt;commit&gt;</code>.</p> </dd> <dt class=\"hdlist1\">--branches[=&lt;pattern&gt;]</dt> <dd> <p>Pretend as if all the refs in <code>refs/heads</code> are listed on the command line as <code>&lt;commit&gt;</code>. If <code>&lt;pattern&gt;</code> is given, limit branches to ones matching given shell glob. If pattern lacks <code>?</code>, <code>*</code>, or <code>[</code>, <code>/*</code> at the end is implied.</p> </dd> <dt class=\"hdlist1\">--tags[=&lt;pattern&gt;]</dt> <dd> <p>Pretend as if all the refs in <code>refs/tags</code> are listed on the command line as <code>&lt;commit&gt;</code>. If <code>&lt;pattern&gt;</code> is given, limit tags to ones matching given shell glob. If pattern lacks <code>?</code>, <code>*</code>, or <code>[</code>, <code>/*</code> at the end is implied.</p> </dd> <dt class=\"hdlist1\">--remotes[=&lt;pattern&gt;]</dt> <dd> <p>Pretend as if all the refs in <code>refs/remotes</code> are listed on the command line as <code>&lt;commit&gt;</code>. If <code>&lt;pattern&gt;</code> is given, limit remote-tracking branches to ones matching given shell glob. If pattern lacks <code>?</code>, <code>*</code>, or <code>[</code>, <code>/*</code> at the end is implied.</p> </dd> <dt class=\"hdlist1\">--glob=&lt;glob-pattern&gt;</dt> <dd> <p>Pretend as if all the refs matching shell glob <code>&lt;glob-pattern&gt;</code> are listed on the command line as <code>&lt;commit&gt;</code>. Leading <code>refs/</code>, is automatically prepended if missing. If pattern lacks <code>?</code>, <code>*</code>, or <code>[</code>, <code>/*</code> at the end is implied.</p> </dd> <dt class=\"hdlist1\">--exclude=&lt;glob-pattern&gt;</dt> <dd> <p>Do not include refs matching <code>&lt;glob-pattern&gt;</code> that the next <code>--all</code>, <code>--branches</code>, <code>--tags</code>, <code>--remotes</code>, or <code>--glob</code> would otherwise consider. Repetitions of this option accumulate exclusion patterns up to the next <code>--all</code>, <code>--branches</code>, <code>--tags</code>, <code>--remotes</code>, or <code>--glob</code> option (other options or arguments do not clear accumulated patterns).</p>  <p>The patterns given should not begin with <code>refs/heads</code>, <code>refs/tags</code>, or <code>refs/remotes</code> when applied to <code>--branches</code>, <code>--tags</code>, or <code>--remotes</code>, respectively, and they must begin with <code>refs/</code> when applied to <code>--glob</code> or <code>--all</code>. If a trailing <code>/*</code> is intended, it must be given explicitly.</p>  </dd> <dt class=\"hdlist1\">--reflog</dt> <dd> <p>Pretend as if all objects mentioned by reflogs are listed on the command line as <code>&lt;commit&gt;</code>.</p> </dd> <dt class=\"hdlist1\">--ignore-missing</dt> <dd> <p>Upon seeing an invalid object name in the input, pretend as if the bad input was not given.</p> </dd> <dt class=\"hdlist1\">--bisect</dt> <dd> <p>Pretend as if the bad bisection ref <code>refs/bisect/bad</code> was listed and as if it was followed by <code>--not</code> and the good bisection refs <code>refs/bisect/good-*</code> on the command line. Cannot be combined with --first-parent.</p> </dd> <dt class=\"hdlist1\">--stdin</dt> <dd> <p>In addition to the <code>&lt;commit&gt;</code> listed on the command line, read them from the standard input. If a <code>--</code> separator is seen, stop reading commits and start reading paths to limit the result.</p> </dd> <dt class=\"hdlist1\">--cherry-mark</dt> <dd> <p>Like <code>--cherry-pick</code> (see below) but mark equivalent commits with <code>=</code> rather than omitting them, and inequivalent ones with <code>+</code>.</p> </dd> <dt class=\"hdlist1\">--cherry-pick</dt> <dd> <p>Omit any commit that introduces the same change as another commit on the “other side” when the set of commits are limited with symmetric difference.</p>  <p>For example, if you have two branches, <code>A</code> and <code>B</code>, a usual way to list all commits on only one side of them is with <code>--left-right</code> (see the example below in the description of the <code>--left-right</code> option). However, it shows the commits that were cherry-picked from the other branch (for example, “3rd on b” may be cherry-picked from branch A). With this option, such pairs of commits are excluded from the output.</p>  </dd> <dt class=\"hdlist1\">--left-only</dt> <dt class=\"hdlist1\">--right-only</dt> <dd> <p>List only commits on the respective side of a symmetric range, i.e. only those which would be marked <code>&lt;</code> resp. <code>&gt;</code> by <code>--left-right</code>.</p>  <p>For example, <code>--cherry-pick --right-only A...B</code> omits those commits from <code>B</code> which are in <code>A</code> or are patch-equivalent to a commit in <code>A</code>. In other words, this lists the <code>+</code> commits from <code>git cherry A B</code>. More precisely, <code>--cherry-pick --right-only --no-merges</code> gives the exact list.</p>  </dd> <dt class=\"hdlist1\">--cherry</dt> <dd> <p>A synonym for <code>--right-only --cherry-mark --no-merges</code>; useful to limit the output to the commits on our side and mark those that have been applied to the other side of a forked history with <code>git log --cherry upstream...mybranch</code>, similar to <code>git cherry upstream mybranch</code>.</p> </dd> <dt class=\"hdlist1\">-g</dt> <dt class=\"hdlist1\">--walk-reflogs</dt> <dd> <p>Instead of walking the commit ancestry chain, walk reflog entries from the most recent one to older ones. When this option is used you cannot specify commits to exclude (that is, <code>^commit</code>, <code>commit1..commit2</code>, and <code>commit1...commit2</code> notations cannot be used).</p>  <p>With <code>--pretty</code> format other than <code>oneline</code> (for obvious reasons), this causes the output to have two extra lines of information taken from the reflog. By default, <code>commit@{Nth}</code> notation is used in the output. When the starting commit is specified as <code>commit@{now}</code>, output also uses <code>commit@{timestamp}</code> notation instead. Under <code>--pretty=oneline</code>, the commit message is prefixed with this information on the same line. This option cannot be combined with <code>--reverse</code>. See also <a href=\"git-reflog\">git-reflog[1]</a>.</p>  </dd> <dt class=\"hdlist1\">--merge</dt> <dd> <p>After a failed merge, show refs that touch files having a conflict and don’t exist on all heads to merge.</p> </dd> <dt class=\"hdlist1\">--boundary</dt> <dd> <p>Output excluded boundary commits. Boundary commits are prefixed with <code>-</code>.</p> </dd> </dl> </div> </div> </div> </div> <div class=\"sect2\"> <h3 id=\"_history_simplification\">History Simplification</h3>  <p>Sometimes you are only interested in parts of the history, for example the commits modifying a particular &lt;path&gt;. But there are two parts of <code>History Simplification</code>, one part is selecting the commits and the other is how to do it, as there are various strategies to simplify the history.</p>   <p>The following options select the commits to be shown:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">&lt;paths&gt;</dt> <dd> <p>Commits modifying the given &lt;paths&gt; are selected.</p> </dd> <dt class=\"hdlist1\">--simplify-by-decoration</dt> <dd> <p>Commits that are referred by some branch or tag are selected.</p> </dd> </dl> </div>  <p>Note that extra commits can be shown to give a meaningful history.</p>   <p>The following options affect the way the simplification is performed:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">Default mode</dt> <dd> <p>Simplifies the history to the simplest history explaining the final state of the tree. Simplest because it prunes some side branches if the end result is the same (i.e. merging branches with the same content)</p> </dd> <dt class=\"hdlist1\">--full-history</dt> <dd> <p>Same as the default mode, but does not prune some history.</p> </dd> <dt class=\"hdlist1\">--dense</dt> <dd> <p>Only the selected commits are shown, plus some to have a meaningful history.</p> </dd> <dt class=\"hdlist1\">--sparse</dt> <dd> <p>All commits in the simplified history are shown.</p> </dd> <dt class=\"hdlist1\">--simplify-merges</dt> <dd> <p>Additional option to <code>--full-history</code> to remove some needless merges from the resulting history, as there are no selected commits contributing to this merge.</p> </dd> <dt class=\"hdlist1\">--ancestry-path</dt> <dd> <p>When given a range of commits to display (e.g. <code>commit1..commit2</code> or <code>commit2 ^commit1</code>), only display commits that exist directly on the ancestry chain between the <code>commit1</code> and <code>commit2</code>, i.e. commits that are both descendants of <code>commit1</code>, and ancestors of <code>commit2</code>.</p> </dd> </dl> </div>  <p>A more detailed explanation follows.</p>   <p>Suppose you specified <code>foo</code> as the &lt;paths&gt;. We shall call commits that modify <code>foo</code> !TREESAME, and the rest TREESAME. (In a diff filtered for <code>foo</code>, they look different and equal, respectively.)</p>   <p>In the following, we will always refer to the same example history to illustrate the differences between simplification settings. We assume that you are filtering for a file <code>foo</code> in this commit graph:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>          .-A---M---N---O---P---Q\n         /     /   /   /   /   /\n        I     B   C   D   E   Y\n         \\   /   /   /   /   /\n          `-------------'   X</pre> </div> </div>  <p>The horizontal line of history A---Q is taken to be the first parent of each merge. The commits are:</p>  <div class=\"ulist\"> <ul> <li> <p><code>I</code> is the initial commit, in which <code>foo</code> exists with contents “asdf”, and a file <code>quux</code> exists with contents “quux”. Initial commits are compared to an empty tree, so <code>I</code> is !TREESAME.</p> </li> <li> <p>In <code>A</code>, <code>foo</code> contains just “foo”.</p> </li> <li> <p><code>B</code> contains the same change as <code>A</code>. Its merge <code>M</code> is trivial and hence TREESAME to all parents.</p> </li> <li> <p><code>C</code> does not change <code>foo</code>, but its merge <code>N</code> changes it to “foobar”, so it is not TREESAME to any parent.</p> </li> <li> <p><code>D</code> sets <code>foo</code> to “baz”. Its merge <code>O</code> combines the strings from <code>N</code> and <code>D</code> to “foobarbaz”; i.e., it is not TREESAME to any parent.</p> </li> <li> <p><code>E</code> changes <code>quux</code> to “xyzzy”, and its merge <code>P</code> combines the strings to “quux xyzzy”. <code>P</code> is TREESAME to <code>O</code>, but not to <code>E</code>.</p> </li> <li> <p><code>X</code> is an independent root commit that added a new file <code>side</code>, and <code>Y</code> modified it. <code>Y</code> is TREESAME to <code>X</code>. Its merge <code>Q</code> added <code>side</code> to <code>P</code>, and <code>Q</code> is TREESAME to <code>P</code>, but not to <code>Y</code>.</p> </li> </ul> </div>  <p><code>rev-list</code> walks backwards through history, including or excluding commits based on whether <code>--full-history</code> and/or parent rewriting (via <code>--parents</code> or <code>--children</code>) are used. The following settings are available.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">Default mode</dt> <dd> <p>Commits are included if they are not TREESAME to any parent (though this can be changed, see <code>--sparse</code> below). If the commit was a merge, and it was TREESAME to one parent, follow only that parent. (Even if there are several TREESAME parents, follow only one of them.) Otherwise, follow all parents.</p>  <p>This results in:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>          .-A---N---O\n         /     /   /\n        I---------D</pre> </div> </div>  <p>Note how the rule to only follow the TREESAME parent, if one is available, removed <code>B</code> from consideration entirely. <code>C</code> was considered via <code>N</code>, but is TREESAME. Root commits are compared to an empty tree, so <code>I</code> is !TREESAME.</p>   <p>Parent/child relations are only visible with <code>--parents</code>, but that does not affect the commits selected in default mode, so we have shown the parent lines.</p>  </dd> <dt class=\"hdlist1\">--full-history without parent rewriting</dt> <dd> <p>This mode differs from the default in one point: always follow all parents of a merge, even if it is TREESAME to one of them. Even if more than one side of the merge has commits that are included, this does not imply that the merge itself is! In the example, we get</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>        I  A  B  N  D  O  P  Q</pre> </div> </div>  <p><code>M</code> was excluded because it is TREESAME to both parents. <code>E</code>, <code>C</code> and <code>B</code> were all walked, but only <code>B</code> was !TREESAME, so the others do not appear.</p>   <p>Note that without parent rewriting, it is not really possible to talk about the parent/child relationships between the commits, so we show them disconnected.</p>  </dd> <dt class=\"hdlist1\">--full-history with parent rewriting</dt> <dd> <p>Ordinary commits are only included if they are !TREESAME (though this can be changed, see <code>--sparse</code> below).</p>  <p>Merges are always included. However, their parent list is rewritten: Along each parent, prune away commits that are not included themselves. This results in</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>          .-A---M---N---O---P---Q\n         /     /   /   /   /\n        I     B   /   D   /\n         \\   /   /   /   /\n          `-------------'</pre> </div> </div>  <p>Compare to <code>--full-history</code> without rewriting above. Note that <code>E</code> was pruned away because it is TREESAME, but the parent list of P was rewritten to contain <code>E</code>'s parent <code>I</code>. The same happened for <code>C</code> and <code>N</code>, and <code>X</code>, <code>Y</code> and <code>Q</code>.</p>  </dd> </dl> </div>  <p>In addition to the above settings, you can change whether TREESAME affects inclusion:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--dense</dt> <dd> <p>Commits that are walked are included if they are not TREESAME to any parent.</p> </dd> <dt class=\"hdlist1\">--sparse</dt> <dd> <p>All commits that are walked are included.</p>  <p>Note that without <code>--full-history</code>, this still simplifies merges: if one of the parents is TREESAME, we follow only that one, so the other sides of the merge are never walked.</p>  </dd> <dt class=\"hdlist1\">--simplify-merges</dt> <dd> <p>First, build a history graph in the same way that <code>--full-history</code> with parent rewriting does (see above).</p>  <p>Then simplify each commit <code>C</code> to its replacement <code>C'</code> in the final history according to the following rules:</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"ulist\"> <ul> <li> <p>Set <code>C'</code> to <code>C</code>.</p> </li> <li> <p>Replace each parent <code>P</code> of <code>C'</code> with its simplification <code>P'</code>. In the process, drop parents that are ancestors of other parents or that are root commits TREESAME to an empty tree, and remove duplicates, but take care to never drop all parents that we are TREESAME to.</p> </li> <li> <p>If after this parent rewriting, <code>C'</code> is a root or merge commit (has zero or &gt;1 parents), a boundary commit, or !TREESAME, it remains. Otherwise, it is replaced with its only parent.</p> </li> </ul> </div> </div> </div>  <p>The effect of this is best shown by way of comparing to <code>--full-history</code> with parent rewriting. The example turns into:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>          .-A---M---N---O\n         /     /       /\n        I     B       D\n         \\   /       /\n          `---------'</pre> </div> </div>  <p>Note the major differences in <code>N</code>, <code>P</code>, and <code>Q</code> over <code>--full-history</code>:</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"ulist\"> <ul> <li> <p><code>N</code>'s parent list had <code>I</code> removed, because it is an ancestor of the other parent <code>M</code>. Still, <code>N</code> remained because it is !TREESAME.</p> </li> <li> <p><code>P</code>'s parent list similarly had <code>I</code> removed. <code>P</code> was then removed completely, because it had one parent and is TREESAME.</p> </li> <li> <p><code>Q</code>'s parent list had <code>Y</code> simplified to <code>X</code>. <code>X</code> was then removed, because it was a TREESAME root. <code>Q</code> was then removed completely, because it had one parent and is TREESAME.</p> </li> </ul> </div> </div> </div> </dd> </dl> </div>  <p>Finally, there is a fifth simplification mode available:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--ancestry-path</dt> <dd> <p>Limit the displayed commits to those directly on the ancestry chain between the “from” and “to” commits in the given commit range. I.e. only display commits that are ancestor of the “to” commit and descendants of the “from” commit.</p>  <p>As an example use case, consider the following commit history:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>            D---E-------F\n           /     \\       \\\n          B---C---G---H---I---J\n         /                     \\\n        A-------K---------------L--M</pre> </div> </div>  <p>A regular <code>D..M</code> computes the set of commits that are ancestors of <code>M</code>, but excludes the ones that are ancestors of <code>D</code>. This is useful to see what happened to the history leading to <code>M</code> since <code>D</code>, in the sense that “what does <code>M</code> have that did not exist in <code>D</code>”. The result in this example would be all the commits, except <code>A</code> and <code>B</code> (and <code>D</code> itself, of course).</p>   <p>When we want to find out what commits in <code>M</code> are contaminated with the bug introduced by <code>D</code> and need fixing, however, we might want to view only the subset of <code>D..M</code> that are actually descendants of <code>D</code>, i.e. excluding <code>C</code> and <code>K</code>. This is exactly what the <code>--ancestry-path</code> option does. Applied to the <code>D..M</code> range, it results in:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>                E-------F\n                 \\       \\\n                  G---H---I---J\n                               \\\n                                L--M</pre> </div> </div> </dd> </dl> </div>  <p>The <code>--simplify-by-decoration</code> option allows you to view only the big picture of the topology of the history, by omitting commits that are not referenced by tags. Commits are marked as !TREESAME (in other words, kept after history simplification rules described above) if (1) they are referenced by tags, or (2) they change the contents of the paths given on the command line. All other commits are marked as TREESAME (subject to be simplified away).</p>  </div> <div class=\"sect2\"> <h3 id=\"_commit_ordering\">Commit Ordering</h3>  <p>By default, the commits are shown in reverse chronological order.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--date-order</dt> <dd> <p>Show no parents before all of its children are shown, but otherwise show commits in the commit timestamp order.</p> </dd> <dt class=\"hdlist1\">--author-date-order</dt> <dd> <p>Show no parents before all of its children are shown, but otherwise show commits in the author timestamp order.</p> </dd> <dt class=\"hdlist1\">--topo-order</dt> <dd> <p>Show no parents before all of its children are shown, and avoid showing commits on multiple lines of history intermixed.</p>  <p>For example, in a commit history like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>    ---1----2----4----7\n        \\               \\\n         3----5----6----8---</pre> </div> </div>  <p>where the numbers denote the order of commit timestamps, <code>git\nrev-list</code> and friends with <code>--date-order</code> show the commits in the timestamp order: 8 7 6 5 4 3 2 1.</p>   <p>With <code>--topo-order</code>, they would show 8 6 5 3 7 4 2 1 (or 8 7 4 2 6 5 3 1); some older commits are shown before newer ones in order to avoid showing the commits from two parallel development track mixed together.</p>  </dd> <dt class=\"hdlist1\">--reverse</dt> <dd> <p>Output the commits in reverse order. Cannot be combined with <code>--walk-reflogs</code>.</p> </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_object_traversal\">Object Traversal</h3>  <p>These options are mostly targeted for packing of Git repositories.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--no-walk[=(sorted|unsorted)]</dt> <dd> <p>Only show the given commits, but do not traverse their ancestors. This has no effect if a range is specified. If the argument <code>unsorted</code> is given, the commits are shown in the order they were given on the command line. Otherwise (if <code>sorted</code> or no argument was given), the commits are shown in reverse chronological order by commit time. Cannot be combined with <code>--graph</code>.</p> </dd> <dt class=\"hdlist1\">--do-walk</dt> <dd> <p>Overrides a previous <code>--no-walk</code>.</p> </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_commit_formatting\">Commit Formatting</h3> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--pretty[=&lt;format&gt;]</dt> <dt class=\"hdlist1\">--format=&lt;format&gt;</dt> <dd> <p>Pretty-print the contents of the commit logs in a given format, where <code>&lt;format&gt;</code> can be one of <code>oneline</code>, <code>short</code>, <code>medium</code>, <code>full</code>, <code>fuller</code>, <code>email</code>, <code>raw</code>, <code>format:&lt;string&gt;</code> and <code>tformat:&lt;string&gt;</code>. When <code>&lt;format&gt;</code> is none of the above, and has <code>%placeholder</code> in it, it acts as if <code>--pretty=tformat:&lt;format&gt;</code> were given.</p>  <p>See the \"PRETTY FORMATS\" section for some additional details for each format. When <code>=&lt;format&gt;</code> part is omitted, it defaults to <code>medium</code>.</p>   <p>Note: you can specify the default pretty format in the repository configuration (see <a href=\"git-config\">git-config[1]</a>).</p>  </dd> <dt class=\"hdlist1\">--abbrev-commit</dt> <dd> <p>Instead of showing the full 40-byte hexadecimal commit object name, show only a partial prefix. Non default number of digits can be specified with \"--abbrev=&lt;n&gt;\" (which also modifies diff output, if it is displayed).</p>  <p>This should make \"--pretty=oneline\" a whole lot more readable for people using 80-column terminals.</p>  </dd> <dt class=\"hdlist1\">--no-abbrev-commit</dt> <dd> <p>Show the full 40-byte hexadecimal commit object name. This negates <code>--abbrev-commit</code> and those options which imply it such as \"--oneline\". It also overrides the <code>log.abbrevCommit</code> variable.</p> </dd> <dt class=\"hdlist1\">--oneline</dt> <dd> <p>This is a shorthand for \"--pretty=oneline --abbrev-commit\" used together.</p> </dd> <dt class=\"hdlist1\">--encoding=&lt;encoding&gt;</dt> <dd> <p>The commit objects record the encoding used for the log message in their encoding header; this option can be used to tell the command to re-code the commit log message in the encoding preferred by the user. For non plumbing commands this defaults to UTF-8. Note that if an object claims to be encoded in <code>X</code> and we are outputting in <code>X</code>, we will output the object verbatim; this means that invalid sequences in the original commit may be copied to the output.</p> </dd> <dt class=\"hdlist1\">--expand-tabs=&lt;n&gt;</dt> <dt class=\"hdlist1\">--expand-tabs</dt> <dt class=\"hdlist1\">--no-expand-tabs</dt> <dd> <p>Perform a tab expansion (replace each tab with enough spaces to fill to the next display column that is multiple of <code>&lt;n&gt;</code>) in the log message before showing it in the output. <code>--expand-tabs</code> is a short-hand for <code>--expand-tabs=8</code>, and <code>--no-expand-tabs</code> is a short-hand for <code>--expand-tabs=0</code>, which disables tab expansion.</p>  <p>By default, tabs are expanded in pretty formats that indent the log message by 4 spaces (i.e. <code>medium</code>, which is the default, <code>full</code>, and <code>fuller</code>).</p>  </dd> <dt class=\"hdlist1\">--notes[=&lt;treeish&gt;]</dt> <dd> <p>Show the notes (see <a href=\"git-notes\">git-notes[1]</a>) that annotate the commit, when showing the commit log message. This is the default for <code>git log</code>, <code>git show</code> and <code>git whatchanged</code> commands when there is no <code>--pretty</code>, <code>--format</code>, or <code>--oneline</code> option given on the command line.</p>  <p>By default, the notes shown are from the notes refs listed in the <code>core.notesRef</code> and <code>notes.displayRef</code> variables (or corresponding environment overrides). See <a href=\"git-config\">git-config[1]</a> for more details.</p>   <p>With an optional <code>&lt;treeish&gt;</code> argument, use the treeish to find the notes to display. The treeish can specify the full refname when it begins with <code>refs/notes/</code>; when it begins with <code>notes/</code>, <code>refs/</code> and otherwise <code>refs/notes/</code> is prefixed to form a full name of the ref.</p>   <p>Multiple --notes options can be combined to control which notes are being displayed. Examples: \"--notes=foo\" will show only notes from \"refs/notes/foo\"; \"--notes=foo --notes\" will show both notes from \"refs/notes/foo\" and from the default notes ref(s).</p>  </dd> <dt class=\"hdlist1\">--no-notes</dt> <dd> <p>Do not show notes. This negates the above <code>--notes</code> option, by resetting the list of notes refs from which notes are shown. Options are parsed in the order given on the command line, so e.g. \"--notes --notes=foo --no-notes --notes=bar\" will only show notes from \"refs/notes/bar\".</p> </dd> <dt class=\"hdlist1\">--show-notes[=&lt;treeish&gt;]</dt> <dt class=\"hdlist1\">--[no-]standard-notes</dt> <dd> <p>These options are deprecated. Use the above --notes/--no-notes options instead.</p> </dd> <dt class=\"hdlist1\">--show-signature</dt> <dd> <p>Check the validity of a signed commit object by passing the signature to <code>gpg --verify</code> and show the output.</p> </dd> </dl> </div> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--relative-date</dt> <dd> <p>Synonym for <code>--date=relative</code>.</p> </dd> <dt class=\"hdlist1\">--date=&lt;format&gt;</dt> <dd> <p>Only takes effect for dates shown in human-readable format, such as when using <code>--pretty</code>. <code>log.date</code> config variable sets a default value for the log command’s <code>--date</code> option. By default, dates are shown in the original time zone (either committer’s or author’s). If <code>-local</code> is appended to the format (e.g., <code>iso-local</code>), the user’s local time zone is used instead.</p>  <p><code>--date=relative</code> shows dates relative to the current time, e.g. “2 hours ago”. The <code>-local</code> option cannot be used with <code>--raw</code> or <code>--relative</code>.</p>   <p><code>--date=local</code> is an alias for <code>--date=default-local</code>.</p>   <p><code>--date=iso</code> (or <code>--date=iso8601</code>) shows timestamps in a ISO 8601-like format. The differences to the strict ISO 8601 format are:</p>  <div class=\"ulist\"> <ul> <li> <p>a space instead of the <code>T</code> date/time delimiter</p> </li> <li> <p>a space between time and time zone</p> </li> <li> <p>no colon between hours and minutes of the time zone</p> </li> </ul> </div>  <p><code>--date=iso-strict</code> (or <code>--date=iso8601-strict</code>) shows timestamps in strict ISO 8601 format.</p>   <p>+ <code>--date=rfc</code> (or <code>--date=rfc2822</code>) shows timestamps in RFC 2822 format, often found in email messages.</p>   <p>+ <code>--date=short</code> shows only the date, but not the time, in <code>YYYY-MM-DD</code> format.</p>   <p>+ <code>--date=raw</code> shows the date in the internal raw Git format <code>%s %z</code> format.</p>   <p>+ <code>--date=format:...</code> feeds the format <code>...</code> to your system <code>strftime</code>. Use <code>--date=format:%c</code> to show the date in your system locale’s preferred format. See the <code>strftime</code> manual for a complete list of format placeholders. When using <code>-local</code>, the correct syntax is <code>--date=format-local:...</code>.</p>   <p>+ <code>--date=default</code> is the default format, and is similar to <code>--date=rfc2822</code>, with a few exceptions:</p>  <div class=\"ulist\"> <ul> <li> <p>there is no comma after the day-of-week</p> </li> <li> <p>the time zone is omitted when the local time zone is used</p> </li> </ul> </div> </dd> <dt class=\"hdlist1\">--parents</dt> <dd> <p>Print also the parents of the commit (in the form \"commit parent…​\"). Also enables parent rewriting, see <code>History Simplification</code> below.</p> </dd> <dt class=\"hdlist1\">--children</dt> <dd> <p>Print also the children of the commit (in the form \"commit child…​\"). Also enables parent rewriting, see <code>History Simplification</code> below.</p> </dd> <dt class=\"hdlist1\">--left-right</dt> <dd> <p>Mark which side of a symmetric diff a commit is reachable from. Commits from the left side are prefixed with <code>&lt;</code> and those from the right with <code>&gt;</code>. If combined with <code>--boundary</code>, those commits are prefixed with <code>-</code>.</p>  <p>For example, if you have this topology:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>             y---b---b  branch B\n            / \\ /\n           /   .\n          /   / \\\n         o---x---a---a  branch A</pre> </div> </div>  <p>you would get an output like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        $ git rev-list --left-right --boundary --pretty=oneline A...B\n\n        &gt;bbbbbbb... 3rd on b\n        &gt;bbbbbbb... 2nd on b\n        &lt;aaaaaaa... 3rd on a\n        &lt;aaaaaaa... 2nd on a\n        -yyyyyyy... 1st on b\n        -xxxxxxx... 1st on a</pre> </div> </div> </dd> <dt class=\"hdlist1\">--graph</dt> <dd> <p>Draw a text-based graphical representation of the commit history on the left hand side of the output. This may cause extra lines to be printed in between commits, in order for the graph history to be drawn properly. Cannot be combined with <code>--no-walk</code>.</p>  <p>This enables parent rewriting, see <code>History Simplification</code> below.</p>   <p>This implies the <code>--topo-order</code> option by default, but the <code>--date-order</code> option may also be specified.</p>  </dd> <dt class=\"hdlist1\">--show-linear-break[=&lt;barrier&gt;]</dt> <dd> <p>When --graph is not used, all history branches are flattened which can make it hard to see that the two consecutive commits do not belong to a linear branch. This option puts a barrier in between them in that case. If <code>&lt;barrier&gt;</code> is specified, it is the string that will be shown instead of the default one.</p> </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_diff_formatting\">Diff Formatting</h3>  <p>Listed below are options that control the formatting of diff output. Some of them are specific to <a href=\"git-rev-list\">git-rev-list[1]</a>, however other diff options may be given. See <a href=\"git-diff-files\">git-diff-files[1]</a> for more options.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-c</dt> <dd> <p>With this option, diff output for a merge commit shows the differences from each of the parents to the merge result simultaneously instead of showing pairwise diff between a parent and the result one at a time. Furthermore, it lists only files which were modified from all parents.</p> </dd> <dt class=\"hdlist1\">--cc</dt> <dd> <p>This flag implies the <code>-c</code> option and further compresses the patch output by omitting uninteresting hunks whose contents in the parents have only two variants and the merge result picks one of them without modification.</p> </dd> <dt class=\"hdlist1\">-m</dt> <dd> <p>This flag makes the merge commits show the full diff like regular commits; for each merge parent, a separate log entry and diff is generated. An exception is that only diff against the first parent is shown when <code>--first-parent</code> option is given; in that case, the output represents the changes the merge brought <code>into</code> the then-current branch.</p> </dd> <dt class=\"hdlist1\">-r</dt> <dd> <p>Show recursive diffs.</p> </dd> <dt class=\"hdlist1\">-t</dt> <dd> <p>Show the tree objects in the diff output. This implies <code>-r</code>.</p> </dd> </dl> </div> </div>\n</div>   <h2 id=\"_pretty_formats\">Pretty formats</h2> <div class=\"sectionbody\"> <p>If the commit is a merge, and if the pretty-format is not <code>oneline</code>, <code>email</code> or <code>raw</code>, an additional line is inserted before the <code>Author:</code> line. This line begins with \"Merge: \" and the sha1s of ancestral commits are printed, separated by spaces. Note that the listed commits may not necessarily be the list of the <strong>direct</strong> parent commits if you have limited your view of history: for example, if you are only interested in changes related to a certain directory or file.</p>   <p>There are several built-in formats, and you can define additional formats by setting a pretty.&lt;name&gt; config option to either another format name, or a <code>format:</code> string, as described below (see <a href=\"git-config\">git-config[1]</a>). Here are the details of the built-in formats:</p>  <div class=\"ulist\"> <ul> <li> <p><code>oneline</code></p> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;sha1&gt; &lt;title line&gt;</pre> </div> </div>  <p>This is designed to be as compact as possible.</p>  </li> <li> <p><code>short</code></p> <div class=\"literalblock\"> <div class=\"content\"> <pre>commit &lt;sha1&gt;\nAuthor: &lt;author&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;title line&gt;</pre> </div> </div> </li> <li> <p><code>medium</code></p> <div class=\"literalblock\"> <div class=\"content\"> <pre>commit &lt;sha1&gt;\nAuthor: &lt;author&gt;\nDate:   &lt;author date&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;title line&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;full commit message&gt;</pre> </div> </div> </li> <li> <p><code>full</code></p> <div class=\"literalblock\"> <div class=\"content\"> <pre>commit &lt;sha1&gt;\nAuthor: &lt;author&gt;\nCommit: &lt;committer&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;title line&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;full commit message&gt;</pre> </div> </div> </li> <li> <p><code>fuller</code></p> <div class=\"literalblock\"> <div class=\"content\"> <pre>commit &lt;sha1&gt;\nAuthor:     &lt;author&gt;\nAuthorDate: &lt;author date&gt;\nCommit:     &lt;committer&gt;\nCommitDate: &lt;committer date&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;title line&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;full commit message&gt;</pre> </div> </div> </li> <li> <p><code>email</code></p> <div class=\"literalblock\"> <div class=\"content\"> <pre>From &lt;sha1&gt; &lt;date&gt;\nFrom: &lt;author&gt;\nDate: &lt;author date&gt;\nSubject: [PATCH] &lt;title line&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;full commit message&gt;</pre> </div> </div> </li> <li> <p><code>raw</code></p>  <p>The <code>raw</code> format shows the entire commit exactly as stored in the commit object. Notably, the SHA-1s are displayed in full, regardless of whether --abbrev or --no-abbrev are used, and <code>parents</code> information show the true parent commits, without taking grafts or history simplification into account. Note that this format affects the way commits are displayed, but not the way the diff is shown e.g. with <code>git log --raw</code>. To get full object names in a raw diff format, use <code>--no-abbrev</code>.</p>  </li> <li> <p><code>format:&lt;string&gt;</code></p>  <p>The <code>format:&lt;string&gt;</code> format allows you to specify which information you want to show. It works a little bit like printf format, with the notable exception that you get a newline with <code>%n</code> instead of <code>\\n</code>.</p>   <p>E.g, <code>format:\"The author of %h was %an, %ar%nThe title was &gt;&gt;%s&lt;&lt;%n\"</code> would show something like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>The author of fe6e0ee was Junio C Hamano, 23 hours ago\nThe title was &gt;&gt;t4119: test autocomputing -p&lt;n&gt; for traditional diff input.&lt;&lt;</pre> </div> </div>  <p>The placeholders are:</p>  <div class=\"ulist\"> <ul> <li> <p><code>%H</code>: commit hash</p> </li> <li> <p><code>%h</code>: abbreviated commit hash</p> </li> <li> <p><code>%T</code>: tree hash</p> </li> <li> <p><code>%t</code>: abbreviated tree hash</p> </li> <li> <p><code>%P</code>: parent hashes</p> </li> <li> <p><code>%p</code>: abbreviated parent hashes</p> </li> <li> <p><code>%an</code>: author name</p> </li> <li> <p><code>%aN</code>: author name (respecting .mailmap, see <a href=\"git-shortlog\">git-shortlog[1]</a> or <a href=\"git-blame\">git-blame[1]</a>)</p> </li> <li> <p><code>%ae</code>: author email</p> </li> <li> <p><code>%aE</code>: author email (respecting .mailmap, see <a href=\"git-shortlog\">git-shortlog[1]</a> or <a href=\"git-blame\">git-blame[1]</a>)</p> </li> <li> <p><code>%ad</code>: author date (format respects --date= option)</p> </li> <li> <p><code>%aD</code>: author date, RFC2822 style</p> </li> <li> <p><code>%ar</code>: author date, relative</p> </li> <li> <p><code>%at</code>: author date, UNIX timestamp</p> </li> <li> <p><code>%ai</code>: author date, ISO 8601-like format</p> </li> <li> <p><code>%aI</code>: author date, strict ISO 8601 format</p> </li> <li> <p><code>%cn</code>: committer name</p> </li> <li> <p><code>%cN</code>: committer name (respecting .mailmap, see <a href=\"git-shortlog\">git-shortlog[1]</a> or <a href=\"git-blame\">git-blame[1]</a>)</p> </li> <li> <p><code>%ce</code>: committer email</p> </li> <li> <p><code>%cE</code>: committer email (respecting .mailmap, see <a href=\"git-shortlog\">git-shortlog[1]</a> or <a href=\"git-blame\">git-blame[1]</a>)</p> </li> <li> <p><code>%cd</code>: committer date (format respects --date= option)</p> </li> <li> <p><code>%cD</code>: committer date, RFC2822 style</p> </li> <li> <p><code>%cr</code>: committer date, relative</p> </li> <li> <p><code>%ct</code>: committer date, UNIX timestamp</p> </li> <li> <p><code>%ci</code>: committer date, ISO 8601-like format</p> </li> <li> <p><code>%cI</code>: committer date, strict ISO 8601 format</p> </li> <li> <p><code>%d</code>: ref names, like the --decorate option of <a href=\"git-log\">git-log[1]</a></p> </li> <li> <p><code>%D</code>: ref names without the \" (\", \")\" wrapping.</p> </li> <li> <p><code>%e</code>: encoding</p> </li> <li> <p><code>%s</code>: subject</p> </li> <li> <p><code>%f</code>: sanitized subject line, suitable for a filename</p> </li> <li> <p><code>%b</code>: body</p> </li> <li> <p><code>%B</code>: raw body (unwrapped subject and body)</p> </li> <li> <p><code>%N</code>: commit notes</p> </li> <li> <p><code>%GG</code>: raw verification message from GPG for a signed commit</p> </li> <li> <p><code>%G?</code>: show \"G\" for a good (valid) signature, \"B\" for a bad signature, \"U\" for a good signature with unknown validity and \"N\" for no signature</p> </li> <li> <p><code>%GS</code>: show the name of the signer for a signed commit</p> </li> <li> <p><code>%GK</code>: show the key used to sign a signed commit</p> </li> <li> <p><code>%gD</code>: reflog selector, e.g., <code>refs/stash@{1}</code></p> </li> <li> <p><code>%gd</code>: shortened reflog selector, e.g., <code>stash@{1}</code></p> </li> <li> <p><code>%gn</code>: reflog identity name</p> </li> <li> <p><code>%gN</code>: reflog identity name (respecting .mailmap, see <a href=\"git-shortlog\">git-shortlog[1]</a> or <a href=\"git-blame\">git-blame[1]</a>)</p> </li> <li> <p><code>%ge</code>: reflog identity email</p> </li> <li> <p><code>%gE</code>: reflog identity email (respecting .mailmap, see <a href=\"git-shortlog\">git-shortlog[1]</a> or <a href=\"git-blame\">git-blame[1]</a>)</p> </li> <li> <p><code>%gs</code>: reflog subject</p> </li> <li> <p><code>%Cred</code>: switch color to red</p> </li> <li> <p><code>%Cgreen</code>: switch color to green</p> </li> <li> <p><code>%Cblue</code>: switch color to blue</p> </li> <li> <p><code>%Creset</code>: reset color</p> </li> <li> <p><code>%C(…​)</code>: color specification, as described in color.branch.* config option; adding <code>auto,</code> at the beginning will emit color only when colors are enabled for log output (by <code>color.diff</code>, <code>color.ui</code>, or <code>--color</code>, and respecting the <code>auto</code> settings of the former if we are going to a terminal). <code>auto</code> alone (i.e. <code>%C(auto)</code>) will turn on auto coloring on the next placeholders until the color is switched again.</p> </li> <li> <p><code>%m</code>: left, right or boundary mark</p> </li> <li> <p><code>%n</code>: newline</p> </li> <li> <p><code>%%</code>: a raw <code>%</code></p> </li> <li> <p><code>%x00</code>: print a byte from a hex code</p> </li> <li> <p><code>%w([&lt;w&gt;[,&lt;i1&gt;[,&lt;i2&gt;]]])</code>: switch line wrapping, like the -w option of <a href=\"git-shortlog\">git-shortlog[1]</a>.</p> </li> <li> <p><code>%&lt;(&lt;N&gt;[,trunc|ltrunc|mtrunc])</code>: make the next placeholder take at least N columns, padding spaces on the right if necessary. Optionally truncate at the beginning (ltrunc), the middle (mtrunc) or the end (trunc) if the output is longer than N columns. Note that truncating only works correctly with N &gt;= 2.</p> </li> <li> <p><code>%&lt;|(&lt;N&gt;)</code>: make the next placeholder take at least until Nth columns, padding spaces on the right if necessary</p> </li> <li> <p><code>%&gt;(&lt;N&gt;)</code>, <code>%&gt;|(&lt;N&gt;)</code>: similar to <code>%&lt;(&lt;N&gt;)</code>, <code>%&lt;|(&lt;N&gt;)</code> respectively, but padding spaces on the left</p> </li> <li> <p><code>%&gt;&gt;(&lt;N&gt;)</code>, <code>%&gt;&gt;|(&lt;N&gt;)</code>: similar to <code>%&gt;(&lt;N&gt;)</code>, <code>%&gt;|(&lt;N&gt;)</code> respectively, except that if the next placeholder takes more spaces than given and there are spaces on its left, use those spaces</p> </li> <li> <p><code>%&gt;&lt;(&lt;N&gt;)</code>, <code>%&gt;&lt;|(&lt;N&gt;)</code>: similar to <code>% &lt;(&lt;N&gt;)</code>, <code>%&lt;|(&lt;N&gt;)</code> respectively, but padding both sides (i.e. the text is centered)</p> </li> </ul> </div> </li> </ul> </div> <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> Some placeholders may depend on other options given to the revision traversal engine. For example, the <code>%g*</code> reflog options will insert an empty string unless we are traversing reflog entries (e.g., by <code>git log -g</code>). The <code>%d</code> and <code>%D</code> placeholders will use the \"short\" decoration format if <code>--decorate</code> was not already provided on the command line. </td> </tr> </table> </div>  <p>If you add a <code>+</code> (plus sign) after <code>%</code> of a placeholder, a line-feed is inserted immediately before the expansion if and only if the placeholder expands to a non-empty string.</p>   <p>If you add a <code>-</code> (minus sign) after <code>%</code> of a placeholder, line-feeds that immediately precede the expansion are deleted if and only if the placeholder expands to an empty string.</p>   <p>If you add a ` ` (space) after <code>%</code> of a placeholder, a space is inserted immediately before the expansion if and only if the placeholder expands to a non-empty string.</p>  <div class=\"ulist\"> <ul> <li> <p><code>tformat:</code></p>  <p>The <code>tformat:</code> format works exactly like <code>format:</code>, except that it provides \"terminator\" semantics instead of \"separator\" semantics. In other words, each commit has the message terminator character (usually a newline) appended, rather than a separator placed between entries. This means that the final entry of a single-line format will be properly terminated with a new line, just as the \"oneline\" format does. For example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log -2 --pretty=format:%h 4da45bef \\\n  | perl -pe '$_ .= \" -- NO NEWLINE\\n\" unless /\\n/'\n4da45be\n7134973 -- NO NEWLINE\n\n$ git log -2 --pretty=tformat:%h 4da45bef \\\n  | perl -pe '$_ .= \" -- NO NEWLINE\\n\" unless /\\n/'\n4da45be\n7134973</pre> </div> </div>  <p>In addition, any unrecognized string that has a <code>%</code> in it is interpreted as if it has <code>tformat:</code> in front of it. For example, these two are equivalent:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log -2 --pretty=tformat:%h 4da45bef\n$ git log -2 --pretty=%h 4da45bef</pre> </div> </div> </li> </ul> </div>\n</div>   <h2 id=\"_common_diff_options\">Common diff options</h2> <div class=\"sectionbody\">\n<div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-p</dt> <dt class=\"hdlist1\">-u</dt> <dt class=\"hdlist1\">--patch</dt> <dd> <p>Generate patch (see section on generating patches).</p> </dd> <dt class=\"hdlist1\">-s</dt> <dt class=\"hdlist1\">--no-patch</dt> <dd> <p>Suppress diff output. Useful for commands like <code>git show</code> that show the patch by default, or to cancel the effect of <code>--patch</code>.</p> </dd> <dt class=\"hdlist1\">-U&lt;n&gt;</dt> <dt class=\"hdlist1\">--unified=&lt;n&gt;</dt> <dd> <p>Generate diffs with &lt;n&gt; lines of context instead of the usual three. Implies <code>-p</code>.</p> </dd> <dt class=\"hdlist1\">--raw</dt> <dd> <p>For each commit, show a summary of changes using the raw diff format. See the \"RAW OUTPUT FORMAT\" section of <a href=\"git-diff\">git-diff[1]</a>. This is different from showing the log itself in raw format, which you can achieve with <code>--format=raw</code>.</p> </dd> <dt class=\"hdlist1\">--patch-with-raw</dt> <dd> <p>Synonym for <code>-p --raw</code>.</p> </dd> <dt class=\"hdlist1\">--compaction-heuristic</dt> <dt class=\"hdlist1\">--no-compaction-heuristic</dt> <dd> <p>These are to help debugging and tuning an experimental heuristic (which is off by default) that shifts the hunk boundary in an attempt to make the resulting patch easier to read.</p> </dd> <dt class=\"hdlist1\">--minimal</dt> <dd> <p>Spend extra time to make sure the smallest possible diff is produced.</p> </dd> <dt class=\"hdlist1\">--patience</dt> <dd> <p>Generate a diff using the \"patience diff\" algorithm.</p> </dd> <dt class=\"hdlist1\">--histogram</dt> <dd> <p>Generate a diff using the \"histogram diff\" algorithm.</p> </dd> <dt class=\"hdlist1\">--diff-algorithm={patience|minimal|histogram|myers}</dt> <dd> <p>Choose a diff algorithm. The variants are as follows:</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">\n<code>default</code>, <code>myers</code>\n</dt> <dd> <p>The basic greedy diff algorithm. Currently, this is the default.</p> </dd> <dt class=\"hdlist1\"><code>minimal</code></dt> <dd> <p>Spend extra time to make sure the smallest possible diff is produced.</p> </dd> <dt class=\"hdlist1\"><code>patience</code></dt> <dd> <p>Use \"patience diff\" algorithm when generating patches.</p> </dd> <dt class=\"hdlist1\"><code>histogram</code></dt> <dd> <p>This algorithm extends the patience algorithm to \"support low-occurrence common elements\".</p> </dd> </dl> </div> </div> </div>  <p>For instance, if you configured diff.algorithm variable to a non-default value and want to use the default one, then you have to use <code>--diff-algorithm=default</code> option.</p>  </dd> <dt class=\"hdlist1\">--stat[=&lt;width&gt;[,&lt;name-width&gt;[,&lt;count&gt;]]]</dt> <dd> <p>Generate a diffstat. By default, as much space as necessary will be used for the filename part, and the rest for the graph part. Maximum width defaults to terminal width, or 80 columns if not connected to a terminal, and can be overridden by <code>&lt;width&gt;</code>. The width of the filename part can be limited by giving another width <code>&lt;name-width&gt;</code> after a comma. The width of the graph part can be limited by using <code>--stat-graph-width=&lt;width&gt;</code> (affects all commands generating a stat graph) or by setting <code>diff.statGraphWidth=&lt;width&gt;</code> (does not affect <code>git format-patch</code>). By giving a third parameter <code>&lt;count&gt;</code>, you can limit the output to the first <code>&lt;count&gt;</code> lines, followed by <code>...</code> if there are more.</p>  <p>These parameters can also be set individually with <code>--stat-width=&lt;width&gt;</code>, <code>--stat-name-width=&lt;name-width&gt;</code> and <code>--stat-count=&lt;count&gt;</code>.</p>  </dd> <dt class=\"hdlist1\">--numstat</dt> <dd> <p>Similar to <code>--stat</code>, but shows number of added and deleted lines in decimal notation and pathname without abbreviation, to make it more machine friendly. For binary files, outputs two <code>-</code> instead of saying <code>0 0</code>.</p> </dd> <dt class=\"hdlist1\">--shortstat</dt> <dd> <p>Output only the last line of the <code>--stat</code> format containing total number of modified files, as well as number of added and deleted lines.</p> </dd> <dt class=\"hdlist1\">--dirstat[=&lt;param1,param2,…​&gt;]</dt> <dd> <p>Output the distribution of relative amount of changes for each sub-directory. The behavior of <code>--dirstat</code> can be customized by passing it a comma separated list of parameters. The defaults are controlled by the <code>diff.dirstat</code> configuration variable (see <a href=\"git-config\">git-config[1]</a>). The following parameters are available:</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>changes</code></dt> <dd> <p>Compute the dirstat numbers by counting the lines that have been removed from the source, or added to the destination. This ignores the amount of pure code movements within a file. In other words, rearranging lines in a file is not counted as much as other changes. This is the default behavior when no parameter is given.</p> </dd> <dt class=\"hdlist1\"><code>lines</code></dt> <dd> <p>Compute the dirstat numbers by doing the regular line-based diff analysis, and summing the removed/added line counts. (For binary files, count 64-byte chunks instead, since binary files have no natural concept of lines). This is a more expensive <code>--dirstat</code> behavior than the <code>changes</code> behavior, but it does count rearranged lines within a file as much as other changes. The resulting output is consistent with what you get from the other <code>--*stat</code> options.</p> </dd> <dt class=\"hdlist1\"><code>files</code></dt> <dd> <p>Compute the dirstat numbers by counting the number of files changed. Each changed file counts equally in the dirstat analysis. This is the computationally cheapest <code>--dirstat</code> behavior, since it does not have to look at the file contents at all.</p> </dd> <dt class=\"hdlist1\"><code>cumulative</code></dt> <dd> <p>Count changes in a child directory for the parent directory as well. Note that when using <code>cumulative</code>, the sum of the percentages reported may exceed 100%. The default (non-cumulative) behavior can be specified with the <code>noncumulative</code> parameter.</p> </dd> <dt class=\"hdlist1\">&lt;limit&gt;</dt> <dd> <p>An integer parameter specifies a cut-off percent (3% by default). Directories contributing less than this percentage of the changes are not shown in the output.</p> </dd> </dl> </div> </div> </div>  <p>Example: The following will count changed files, while ignoring directories with less than 10% of the total amount of changed files, and accumulating child directory counts in the parent directories: <code>--dirstat=files,10,cumulative</code>.</p>  </dd> <dt class=\"hdlist1\">--summary</dt> <dd> <p>Output a condensed summary of extended header information such as creations, renames and mode changes.</p> </dd> <dt class=\"hdlist1\">--patch-with-stat</dt> <dd> <p>Synonym for <code>-p --stat</code>.</p> </dd> <dt class=\"hdlist1\">-z</dt> <dd> <p>Separate the commits with NULs instead of with new newlines.</p>  <p>Also, when <code>--raw</code> or <code>--numstat</code> has been given, do not munge pathnames and use NULs as output field terminators.</p>   <p>Without this option, each pathname output will have TAB, LF, double quotes, and backslash characters replaced with <code>\\t</code>, <code>\\n</code>, <code>\\\"</code>, and <code>\\\\</code>, respectively, and the pathname will be enclosed in double quotes if any of those replacements occurred.</p>  </dd> <dt class=\"hdlist1\">--name-only</dt> <dd> <p>Show only names of changed files.</p> </dd> <dt class=\"hdlist1\">--name-status</dt> <dd> <p>Show only names and status of changed files. See the description of the <code>--diff-filter</code> option on what the status letters mean.</p> </dd> <dt class=\"hdlist1\">--submodule[=&lt;format&gt;]</dt> <dd> <p>Specify how differences in submodules are shown. When <code>--submodule</code> or <code>--submodule=log</code> is given, the <code>log</code> format is used. This format lists the commits in the range like <a href=\"git-submodule\">git-submodule[1]</a> <code>summary</code> does. Omitting the <code>--submodule</code> option or specifying <code>--submodule=short</code>, uses the <code>short</code> format. This format just shows the names of the commits at the beginning and end of the range. Can be tweaked via the <code>diff.submodule</code> configuration variable.</p> </dd> <dt class=\"hdlist1\">--color[=&lt;when&gt;]</dt> <dd> <p>Show colored diff. <code>--color</code> (i.e. without <code>=&lt;when&gt;</code>) is the same as <code>--color=always</code>. <code>&lt;when&gt;</code> can be one of <code>always</code>, <code>never</code>, or <code>auto</code>.</p> </dd> <dt class=\"hdlist1\">--no-color</dt> <dd> <p>Turn off colored diff. It is the same as <code>--color=never</code>.</p> </dd> <dt class=\"hdlist1\">--word-diff[=&lt;mode&gt;]</dt> <dd> <p>Show a word diff, using the &lt;mode&gt; to delimit changed words. By default, words are delimited by whitespace; see <code>--word-diff-regex</code> below. The &lt;mode&gt; defaults to <code>plain</code>, and must be one of:</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">color</dt> <dd> <p>Highlight changed words using only colors. Implies <code>--color</code>.</p> </dd> <dt class=\"hdlist1\">plain</dt> <dd> <p>Show words as <code>[-removed-]</code> and <code>{+added+}</code>. Makes no attempts to escape the delimiters if they appear in the input, so the output may be ambiguous.</p> </dd> <dt class=\"hdlist1\">porcelain</dt> <dd> <p>Use a special line-based format intended for script consumption. Added/removed/unchanged runs are printed in the usual unified diff format, starting with a <code>+</code>/<code>-</code>/` ` character at the beginning of the line and extending to the end of the line. Newlines in the input are represented by a tilde <code>~</code> on a line of its own.</p> </dd> <dt class=\"hdlist1\">none</dt> <dd> <p>Disable word diff again.</p> </dd> </dl> </div> </div> </div>  <p>Note that despite the name of the first mode, color is used to highlight the changed parts in all modes if enabled.</p>  </dd> <dt class=\"hdlist1\">--word-diff-regex=&lt;regex&gt;</dt> <dd> <p>Use &lt;regex&gt; to decide what a word is, instead of considering runs of non-whitespace to be a word. Also implies <code>--word-diff</code> unless it was already enabled.</p>  <p>Every non-overlapping match of the &lt;regex&gt; is considered a word. Anything between these matches is considered whitespace and ignored(!) for the purposes of finding differences. You may want to append <code>|[^[:space:]]</code> to your regular expression to make sure that it matches all non-whitespace characters. A match that contains a newline is silently truncated(!) at the newline.</p>   <p>For example, <code>--word-diff-regex=.</code> will treat each character as a word and, correspondingly, show differences character by character.</p>   <p>The regex can also be set via a diff driver or configuration option, see <a href=\"gitattributes\">gitattributes[5]</a> or <a href=\"git-config\">git-config[1]</a>. Giving it explicitly overrides any diff driver or configuration setting. Diff drivers override configuration settings.</p>  </dd> <dt class=\"hdlist1\">--color-words[=&lt;regex&gt;]</dt> <dd> <p>Equivalent to <code>--word-diff=color</code> plus (if a regex was specified) <code>--word-diff-regex=&lt;regex&gt;</code>.</p> </dd> <dt class=\"hdlist1\">--no-renames</dt> <dd> <p>Turn off rename detection, even when the configuration file gives the default to do so.</p> </dd> <dt class=\"hdlist1\">--check</dt> <dd> <p>Warn if changes introduce conflict markers or whitespace errors. What are considered whitespace errors is controlled by <code>core.whitespace</code> configuration. By default, trailing whitespaces (including lines that solely consist of whitespaces) and a space character that is immediately followed by a tab character inside the initial indent of the line are considered whitespace errors. Exits with non-zero status if problems are found. Not compatible with --exit-code.</p> </dd> <dt class=\"hdlist1\">--ws-error-highlight=&lt;kind&gt;</dt> <dd> <p>Highlight whitespace errors on lines specified by &lt;kind&gt; in the color specified by <code>color.diff.whitespace</code>. &lt;kind&gt; is a comma separated list of <code>old</code>, <code>new</code>, <code>context</code>. When this option is not given, only whitespace errors in <code>new</code> lines are highlighted. E.g. <code>--ws-error-highlight=new,old</code> highlights whitespace errors on both deleted and added lines. <code>all</code> can be used as a short-hand for <code>old,new,context</code>.</p> </dd> <dt class=\"hdlist1\">--full-index</dt> <dd> <p>Instead of the first handful of characters, show the full pre- and post-image blob object names on the \"index\" line when generating patch format output.</p> </dd> <dt class=\"hdlist1\">--binary</dt> <dd> <p>In addition to <code>--full-index</code>, output a binary diff that can be applied with <code>git-apply</code>.</p> </dd> <dt class=\"hdlist1\">--abbrev[=&lt;n&gt;]</dt> <dd> <p>Instead of showing the full 40-byte hexadecimal object name in diff-raw format output and diff-tree header lines, show only a partial prefix. This is independent of the <code>--full-index</code> option above, which controls the diff-patch output format. Non default number of digits can be specified with <code>--abbrev=&lt;n&gt;</code>.</p> </dd> <dt class=\"hdlist1\">-B[&lt;n&gt;][/&lt;m&gt;]</dt> <dt class=\"hdlist1\">--break-rewrites[=[&lt;n&gt;][/&lt;m&gt;]]</dt> <dd> <p>Break complete rewrite changes into pairs of delete and create. This serves two purposes:</p>  <p>It affects the way a change that amounts to a total rewrite of a file not as a series of deletion and insertion mixed together with a very few lines that happen to match textually as the context, but as a single deletion of everything old followed by a single insertion of everything new, and the number <code>m</code> controls this aspect of the -B option (defaults to 60%). <code>-B/70%</code> specifies that less than 30% of the original should remain in the result for Git to consider it a total rewrite (i.e. otherwise the resulting patch will be a series of deletion and insertion mixed together with context lines).</p>   <p>When used with -M, a totally-rewritten file is also considered as the source of a rename (usually -M only considers a file that disappeared as the source of a rename), and the number <code>n</code> controls this aspect of the -B option (defaults to 50%). <code>-B20%</code> specifies that a change with addition and deletion compared to 20% or more of the file’s size are eligible for being picked up as a possible source of a rename to another file.</p>  </dd> <dt class=\"hdlist1\">-M[&lt;n&gt;]</dt> <dt class=\"hdlist1\">--find-renames[=&lt;n&gt;]</dt> <dd> <p>If generating diffs, detect and report renames for each commit. For following files across renames while traversing history, see <code>--follow</code>. If <code>n</code> is specified, it is a threshold on the similarity index (i.e. amount of addition/deletions compared to the file’s size). For example, <code>-M90%</code> means Git should consider a delete/add pair to be a rename if more than 90% of the file hasn’t changed. Without a <code>%</code> sign, the number is to be read as a fraction, with a decimal point before it. I.e., <code>-M5</code> becomes 0.5, and is thus the same as <code>-M50%</code>. Similarly, <code>-M05</code> is the same as <code>-M5%</code>. To limit detection to exact renames, use <code>-M100%</code>. The default similarity index is 50%.</p> </dd> <dt class=\"hdlist1\">-C[&lt;n&gt;]</dt> <dt class=\"hdlist1\">--find-copies[=&lt;n&gt;]</dt> <dd> <p>Detect copies as well as renames. See also <code>--find-copies-harder</code>. If <code>n</code> is specified, it has the same meaning as for <code>-M&lt;n&gt;</code>.</p> </dd> <dt class=\"hdlist1\">--find-copies-harder</dt> <dd> <p>For performance reasons, by default, <code>-C</code> option finds copies only if the original file of the copy was modified in the same changeset. This flag makes the command inspect unmodified files as candidates for the source of copy. This is a very expensive operation for large projects, so use it with caution. Giving more than one <code>-C</code> option has the same effect.</p> </dd> <dt class=\"hdlist1\">-D</dt> <dt class=\"hdlist1\">--irreversible-delete</dt> <dd> <p>Omit the preimage for deletes, i.e. print only the header but not the diff between the preimage and <code>/dev/null</code>. The resulting patch is not meant to be applied with <code>patch</code> or <code>git apply</code>; this is solely for people who want to just concentrate on reviewing the text after the change. In addition, the output obviously lack enough information to apply such a patch in reverse, even manually, hence the name of the option.</p>  <p>When used together with <code>-B</code>, omit also the preimage in the deletion part of a delete/create pair.</p>  </dd> <dt class=\"hdlist1\">-l&lt;num&gt;</dt> <dd> <p>The <code>-M</code> and <code>-C</code> options require O(n^2) processing time where n is the number of potential rename/copy targets. This option prevents rename/copy detection from running if the number of rename/copy targets exceeds the specified number.</p> </dd> <dt class=\"hdlist1\">--diff-filter=[(A|C|D|M|R|T|U|X|B)…​[*]]</dt> <dd> <p>Select only files that are Added (<code>A</code>), Copied (<code>C</code>), Deleted (<code>D</code>), Modified (<code>M</code>), Renamed (<code>R</code>), have their type (i.e. regular file, symlink, submodule, …​) changed (<code>T</code>), are Unmerged (<code>U</code>), are Unknown (<code>X</code>), or have had their pairing Broken (<code>B</code>). Any combination of the filter characters (including none) can be used. When <code>*</code> (All-or-none) is added to the combination, all paths are selected if there is any file that matches other criteria in the comparison; if there is no file that matches other criteria, nothing is selected.</p> </dd> <dt class=\"hdlist1\">-S&lt;string&gt;</dt> <dd> <p>Look for differences that change the number of occurrences of the specified string (i.e. addition/deletion) in a file. Intended for the scripter’s use.</p>  <p>It is useful when you’re looking for an exact block of code (like a struct), and want to know the history of that block since it first came into being: use the feature iteratively to feed the interesting block in the preimage back into <code>-S</code>, and keep going until you get the very first version of the block.</p>  </dd> <dt class=\"hdlist1\">-G&lt;regex&gt;</dt> <dd> <p>Look for differences whose patch text contains added/removed lines that match &lt;regex&gt;.</p>  <p>To illustrate the difference between <code>-S&lt;regex&gt; --pickaxe-regex</code> and <code>-G&lt;regex&gt;</code>, consider a commit with the following diff in the same file:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>+    return !regexec(regexp, two-&gt;ptr, 1, &amp;regmatch, 0);\n...\n-    hit = !regexec(regexp, mf2.ptr, 1, &amp;regmatch, 0);</pre> </div> </div>  <p>While <code>git log -G\"regexec\\(regexp\"</code> will show this commit, <code>git log\n-S\"regexec\\(regexp\" --pickaxe-regex</code> will not (because the number of occurrences of that string did not change).</p>   <p>See the <code>pickaxe</code> entry in <a href=\"gitdiffcore\">gitdiffcore[7]</a> for more information.</p>  </dd> <dt class=\"hdlist1\">--pickaxe-all</dt> <dd> <p>When <code>-S</code> or <code>-G</code> finds a change, show all the changes in that changeset, not just the files that contain the change in &lt;string&gt;.</p> </dd> <dt class=\"hdlist1\">--pickaxe-regex</dt> <dd> <p>Treat the &lt;string&gt; given to <code>-S</code> as an extended POSIX regular expression to match.</p> </dd> <dt class=\"hdlist1\">-O&lt;orderfile&gt;</dt> <dd> <p>Output the patch in the order specified in the &lt;orderfile&gt;, which has one shell glob pattern per line. This overrides the <code>diff.orderFile</code> configuration variable (see <a href=\"git-config\">git-config[1]</a>). To cancel <code>diff.orderFile</code>, use <code>-O/dev/null</code>.</p> </dd> <dt class=\"hdlist1\">-R</dt> <dd> <p>Swap two inputs; that is, show differences from index or on-disk file to tree contents.</p> </dd> <dt class=\"hdlist1\">--relative[=&lt;path&gt;]</dt> <dd> <p>When run from a subdirectory of the project, it can be told to exclude changes outside the directory and show pathnames relative to it with this option. When you are not in a subdirectory (e.g. in a bare repository), you can name which subdirectory to make the output relative to by giving a &lt;path&gt; as an argument.</p> </dd> <dt class=\"hdlist1\">-a</dt> <dt class=\"hdlist1\">--text</dt> <dd> <p>Treat all files as text.</p> </dd> <dt class=\"hdlist1\">--ignore-space-at-eol</dt> <dd> <p>Ignore changes in whitespace at EOL.</p> </dd> <dt class=\"hdlist1\">-b</dt> <dt class=\"hdlist1\">--ignore-space-change</dt> <dd> <p>Ignore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent.</p> </dd> <dt class=\"hdlist1\">-w</dt> <dt class=\"hdlist1\">--ignore-all-space</dt> <dd> <p>Ignore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none.</p> </dd> <dt class=\"hdlist1\">--ignore-blank-lines</dt> <dd> <p>Ignore changes whose lines are all blank.</p> </dd> <dt class=\"hdlist1\">--inter-hunk-context=&lt;lines&gt;</dt> <dd> <p>Show the context between diff hunks, up to the specified number of lines, thereby fusing hunks that are close to each other.</p> </dd> <dt class=\"hdlist1\">-W</dt> <dt class=\"hdlist1\">--function-context</dt> <dd> <p>Show whole surrounding functions of changes.</p> </dd> <dt class=\"hdlist1\">--ext-diff</dt> <dd> <p>Allow an external diff helper to be executed. If you set an external diff driver with <a href=\"gitattributes\">gitattributes[5]</a>, you need to use this option with <a href=\"git-log\">git-log[1]</a> and friends.</p> </dd> <dt class=\"hdlist1\">--no-ext-diff</dt> <dd> <p>Disallow external diff drivers.</p> </dd> <dt class=\"hdlist1\">--textconv</dt> <dt class=\"hdlist1\">--no-textconv</dt> <dd> <p>Allow (or disallow) external text conversion filters to be run when comparing binary files. See <a href=\"gitattributes\">gitattributes[5]</a> for details. Because textconv filters are typically a one-way conversion, the resulting diff is suitable for human consumption, but cannot be applied. For this reason, textconv filters are enabled by default only for <a href=\"git-diff\">git-diff[1]</a> and <a href=\"git-log\">git-log[1]</a>, but not for <a href=\"git-format-patch\">git-format-patch[1]</a> or diff plumbing commands.</p> </dd> <dt class=\"hdlist1\">--ignore-submodules[=&lt;when&gt;]</dt> <dd> <p>Ignore changes to submodules in the diff generation. &lt;when&gt; can be either \"none\", \"untracked\", \"dirty\" or \"all\", which is the default. Using \"none\" will consider the submodule modified when it either contains untracked or modified files or its HEAD differs from the commit recorded in the superproject and can be used to override any settings of the <code>ignore</code> option in <a href=\"git-config\">git-config[1]</a> or <a href=\"gitmodules\">gitmodules[5]</a>. When \"untracked\" is used submodules are not considered dirty when they only contain untracked content (but they are still scanned for modified content). Using \"dirty\" ignores all changes to the work tree of submodules, only changes to the commits stored in the superproject are shown (this was the behavior until 1.7.0). Using \"all\" hides all changes to submodules.</p> </dd> <dt class=\"hdlist1\">--src-prefix=&lt;prefix&gt;</dt> <dd> <p>Show the given source prefix instead of \"a/\".</p> </dd> <dt class=\"hdlist1\">--dst-prefix=&lt;prefix&gt;</dt> <dd> <p>Show the given destination prefix instead of \"b/\".</p> </dd> <dt class=\"hdlist1\">--no-prefix</dt> <dd> <p>Do not show any source or destination prefix.</p> </dd> </dl> </div>  <p>For more detailed explanation on these common options, see also <a href=\"gitdiffcore\">gitdiffcore[7]</a>.</p> </div>   <h2 id=\"_generating_patches_with_p\">Generating patches with -p</h2> <div class=\"sectionbody\"> <p>When \"git-diff-index\", \"git-diff-tree\", or \"git-diff-files\" are run with a <code>-p</code> option, \"git diff\" without the <code>--raw</code> option, or \"git log\" with the \"-p\" option, they do not produce the output described above; instead they produce a patch file. You can customize the creation of such patches via the <code>GIT_EXTERNAL_DIFF</code> and the <code>GIT_DIFF_OPTS</code> environment variables.</p>   <p>What the -p option produces is slightly different from the traditional diff format:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>It is preceded with a \"git diff\" header that looks like this:</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>diff --git a/file1 b/file2</pre> </div> </div>  <p>The <code>a/</code> and <code>b/</code> filenames are the same unless rename/copy is involved. Especially, even for a creation or a deletion, <code>/dev/null</code> is <code>not</code> used in place of the <code>a/</code> or <code>b/</code> filenames.</p>   <p>When rename/copy is involved, <code>file1</code> and <code>file2</code> show the name of the source file of the rename/copy and the name of the file that rename/copy produces, respectively.</p>  </li> <li> <p>It is followed by one or more extended header lines:</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>old mode &lt;mode&gt;\nnew mode &lt;mode&gt;\ndeleted file mode &lt;mode&gt;\nnew file mode &lt;mode&gt;\ncopy from &lt;path&gt;\ncopy to &lt;path&gt;\nrename from &lt;path&gt;\nrename to &lt;path&gt;\nsimilarity index &lt;number&gt;\ndissimilarity index &lt;number&gt;\nindex &lt;hash&gt;..&lt;hash&gt; &lt;mode&gt;</pre> </div> </div>  <p>File modes are printed as 6-digit octal numbers including the file type and file permission bits.</p>   <p>Path names in extended headers do not include the <code>a/</code> and <code>b/</code> prefixes.</p>   <p>The similarity index is the percentage of unchanged lines, and the dissimilarity index is the percentage of changed lines. It is a rounded down integer, followed by a percent sign. The similarity index value of 100% is thus reserved for two equal files, while 100% dissimilarity means that no line from the old file made it into the new one.</p>   <p>The index line includes the SHA-1 checksum before and after the change. The &lt;mode&gt; is included if the file mode does not change; otherwise, separate lines indicate the old and the new mode.</p>  </li> <li> <p>TAB, LF, double quote and backslash characters in pathnames are represented as <code>\\t</code>, <code>\\n</code>, <code>\\\"</code> and <code>\\\\</code>, respectively. If there is need for such substitution then the whole pathname is put in double quotes.</p> </li> <li> <p>All the <code>file1</code> files in the output refer to files before the commit, and all the <code>file2</code> files refer to files after the commit. It is incorrect to apply each change to each file sequentially. For example, this patch will swap a and b:</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>diff --git a/a b/b\nrename from a\nrename to b\ndiff --git a/b b/a\nrename from b\nrename to a</pre> </div> </div> </li> </ol> </div>\n</div>   <h2 id=\"_combined_diff_format\">Combined diff format</h2> <div class=\"sectionbody\"> <p>Any diff-generating command can take the <code>-c</code> or <code>--cc</code> option to produce a <code>combined diff</code> when showing a merge. This is the default format when showing merges with <a href=\"git-diff\">git-diff[1]</a> or <a href=\"git-show\">git-show[1]</a>. Note also that you can give the <code>-m</code> option to any of these commands to force generation of diffs with individual parents of a merge.</p>   <p>A <code>combined diff</code> format looks like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>diff --combined describe.c\nindex fabadb8,cc95eb0..4866510\n--- a/describe.c\n+++ b/describe.c\n@@@ -98,20 -98,12 +98,20 @@@\n        return (a_date &gt; b_date) ? -1 : (a_date == b_date) ? 0 : 1;\n  }\n\n- static void describe(char *arg)\n -static void describe(struct commit *cmit, int last_one)\n++static void describe(char *arg, int last_one)\n  {\n +        unsigned char sha1[20];\n +        struct commit *cmit;\n        struct commit_list *list;\n        static int initialized = 0;\n        struct commit_name *n;\n\n +        if (get_sha1(arg, sha1) &lt; 0)\n +                usage(describe_usage);\n +        cmit = lookup_commit_reference(sha1);\n +        if (!cmit)\n +                usage(describe_usage);\n +\n        if (!initialized) {\n                initialized = 1;\n                for_each_ref(get_name);</pre> </div> </div> <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>It is preceded with a \"git diff\" header, that looks like this (when <code>-c</code> option is used):</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>diff --combined file</pre> </div> </div>  <p>or like this (when <code>--cc</code> option is used):</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>diff --cc file</pre> </div> </div> </li> <li> <p>It is followed by one or more extended header lines (this example shows a merge with two parents):</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>index &lt;hash&gt;,&lt;hash&gt;..&lt;hash&gt;\nmode &lt;mode&gt;,&lt;mode&gt;..&lt;mode&gt;\nnew file mode &lt;mode&gt;\ndeleted file mode &lt;mode&gt;,&lt;mode&gt;</pre> </div> </div>  <p>The <code>mode &lt;mode&gt;,&lt;mode&gt;..&lt;mode&gt;</code> line appears only if at least one of the &lt;mode&gt; is different from the rest. Extended headers with information about detected contents movement (renames and copying detection) are designed to work with diff of two &lt;tree-ish&gt; and are not used by combined diff format.</p>  </li> <li> <p>It is followed by two-line from-file/to-file header</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>--- a/file\n+++ b/file</pre> </div> </div>  <p>Similar to two-line header for traditional <code>unified</code> diff format, <code>/dev/null</code> is used to signal created or deleted files.</p>  </li> <li> <p>Chunk header format is modified to prevent people from accidentally feeding it to <code>patch -p1</code>. Combined diff format was created for review of merge commit changes, and was not meant for apply. The change is similar to the change in the extended <code>index</code> header:</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>@@@ &lt;from-file-range&gt; &lt;from-file-range&gt; &lt;to-file-range&gt; @@@</pre> </div> </div>  <p>There are (number of parents + 1) <code>@</code> characters in the chunk header for combined diff format.</p>  </li> </ol> </div>  <p>Unlike the traditional <code>unified</code> diff format, which shows two files A and B with a single column that has <code>-</code> (minus — appears in A but removed in B), <code>+</code> (plus — missing in A but added to B), or <code>\" \"</code> (space — unchanged) prefix, this format compares two or more files file1, file2,…​ with one file X, and shows how X differs from each of fileN. One column for each of fileN is prepended to the output line to note how X’s line is different from it.</p>   <p>A <code>-</code> character in the column N means that the line appears in fileN but it does not appear in the result. A <code>+</code> character in the column N means that the line appears in the result, and fileN does not have that line (in other words, the line was added, from the point of view of that parent).</p>   <p>In the above example output, the function signature was changed from both files (hence two <code>-</code> removals from both file1 and file2, plus <code>++</code> to mean one line that was added does not appear in either file1 or file2). Also eight other lines are the same from file1 but do not appear in file2 (hence prefixed with <code>+</code>).</p>   <p>When shown by <code>git diff-tree -c</code>, it compares the parents of a merge commit with the merge result (i.e. file1..fileN are the parents). When shown by <code>git diff-files -c</code>, it compares the two unresolved merge parents with the working tree file (i.e. file1 is stage 2 aka \"our version\", file2 is stage 3 aka \"their version\").</p> </div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>git log --no-merges</code></dt> <dd> <p>Show the whole commit history, but skip any merges</p> </dd> <dt class=\"hdlist1\"><code>git log v2.6.12.. include/scsi drivers/scsi</code></dt> <dd> <p>Show all commits since version <code>v2.6.12</code> that changed any file in the <code>include/scsi</code> or <code>drivers/scsi</code> subdirectories</p> </dd> <dt class=\"hdlist1\"><code>git log --since=\"2 weeks ago\" -- gitk</code></dt> <dd> <p>Show the changes during the last two weeks to the file <code>gitk</code>. The “--” is necessary to avoid confusion with the <strong>branch</strong> named <code>gitk</code></p> </dd> <dt class=\"hdlist1\"><code>git log --name-status release..test</code></dt> <dd> <p>Show the commits that are in the \"test\" branch but not yet in the \"release\" branch, along with the list of paths each commit modifies.</p> </dd> <dt class=\"hdlist1\"><code>git log --follow builtin/rev-list.c</code></dt> <dd> <p>Shows the commits that changed <code>builtin/rev-list.c</code>, including those commits that occurred before the file was given its present name.</p> </dd> <dt class=\"hdlist1\"><code>git log --branches --not --remotes=origin</code></dt> <dd> <p>Shows all commits that are in any of local branches but not in any of remote-tracking branches for <code>origin</code> (what you have that origin doesn’t).</p> </dd> <dt class=\"hdlist1\"><code>git log master --not --remotes=*/master</code></dt> <dd> <p>Shows all commits that are in local master but not in any remote repository master branches.</p> </dd> <dt class=\"hdlist1\"><code>git log -p -m --first-parent</code></dt> <dd> <p>Shows the history including change diffs, but only from the “main branch” perspective, skipping commits that come from merged branches, and showing full diffs of changes introduced by the merges. This makes sense only when following a strict policy of merging all topic branches when staying on a single integration branch.</p> </dd> <dt class=\"hdlist1\"><code>git log -L '/int main/',/^}/:main.c</code></dt> <dd> <p>Shows how the function <code>main()</code> in the file <code>main.c</code> evolved over time.</p> </dd> <dt class=\"hdlist1\"><code>git log -3</code></dt> <dd> <p>Limits the number of commits to show to 3.</p> </dd> </dl> </div></div>   <h2 id=\"_discussion\">Discussion</h2> <div class=\"sectionbody\"> <p>Git is to some extent character encoding agnostic.</p>  <div class=\"ulist\"> <ul> <li> <p>The contents of the blob objects are uninterpreted sequences of bytes. There is no encoding translation at the core level.</p> </li> <li> <p>Path names are encoded in UTF-8 normalization form C. This applies to tree objects, the index file, ref names, as well as path names in command line arguments, environment variables and config files (<code>.git/config</code> (see <a href=\"git-config\">git-config[1]</a>), <a href=\"gitignore\">gitignore[5]</a>, <a href=\"gitattributes\">gitattributes[5]</a> and <a href=\"gitmodules\">gitmodules[5]</a>).</p>  <p>Note that Git at the core level treats path names simply as sequences of non-NUL bytes, there are no path name encoding conversions (except on Mac and Windows). Therefore, using non-ASCII path names will mostly work even on platforms and file systems that use legacy extended ASCII encodings. However, repositories created on such systems will not work properly on UTF-8-based systems (e.g. Linux, Mac, Windows) and vice versa. Additionally, many Git-based tools simply assume path names to be UTF-8 and will fail to display other encodings correctly.</p>  </li> <li> <p>Commit log messages are typically encoded in UTF-8, but other extended ASCII encodings are also supported. This includes ISO-8859-x, CP125x and many others, but <code>not</code> UTF-16/32, EBCDIC and CJK multi-byte encodings (GBK, Shift-JIS, Big5, EUC-x, CP9xx etc.).</p> </li> </ul> </div>  <p>Although we encourage that the commit log messages are encoded in UTF-8, both the core and Git Porcelain are designed not to force UTF-8 on projects. If all participants of a particular project find it more convenient to use legacy encodings, Git does not forbid it. However, there are a few things to keep in mind.</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p><code>git commit</code> and <code>git commit-tree</code> issues a warning if the commit log message given to it does not look like a valid UTF-8 string, unless you explicitly say your project uses a legacy encoding. The way to say this is to have i18n.commitencoding in <code>.git/config</code> file, like this:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>[i18n]\n        commitencoding = ISO-8859-1</pre> </div> </div>  <p>Commit objects created with the above setting record the value of <code>i18n.commitencoding</code> in its <code>encoding</code> header. This is to help other people who look at them later. Lack of this header implies that the commit log message is encoded in UTF-8.</p>  </li> <li> <p><code>git log</code>, <code>git show</code>, <code>git blame</code> and friends look at the <code>encoding</code> header of a commit object, and try to re-code the log message into UTF-8 unless otherwise specified. You can specify the desired output encoding with <code>i18n.logoutputencoding</code> in <code>.git/config</code> file, like this:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>[i18n]\n        logoutputencoding = ISO-8859-1</pre> </div> </div>  <p>If you do not have this configuration variable, the value of <code>i18n.commitencoding</code> is used instead.</p>  </li> </ol> </div>  <p>Note that we deliberately chose not to re-code the commit log message when a commit is made to force UTF-8 at the commit object level, because re-coding to UTF-8 is not necessarily a reversible operation.</p> </div>   <h2 id=\"_configuration\">Configuration</h2> <div class=\"sectionbody\"> <p>See <a href=\"git-config\">git-config[1]</a> for core variables and <a href=\"git-diff\">git-diff[1]</a> for settings related to diff generation.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">format.pretty</dt> <dd> <p>Default for the <code>--format</code> option. (See <code>Pretty Formats</code> above.) Defaults to <code>medium</code>.</p> </dd> <dt class=\"hdlist1\">i18n.logOutputEncoding</dt> <dd> <p>Encoding to use when displaying logs. (See <code>Discussion</code> above.) Defaults to the value of <code>i18n.commitEncoding</code> if set, and UTF-8 otherwise.</p> </dd> <dt class=\"hdlist1\">log.date</dt> <dd> <p>Default format for human-readable dates. (Compare the <code>--date</code> option.) Defaults to \"default\", which means to write dates like <code>Sat May 8 19:35:34 2010 -0500</code>.</p> </dd> <dt class=\"hdlist1\">log.follow</dt> <dd> <p>If <code>true</code>, <code>git log</code> will act as if the <code>--follow</code> option was used when a single &lt;path&gt; is given. This has the same limitations as <code>--follow</code>, i.e. it cannot be used to follow multiple files and does not work well on non-linear history.</p> </dd> <dt class=\"hdlist1\">log.showRoot</dt> <dd> <p>If <code>false</code>, <code>git log</code> and related commands will not treat the initial commit as a big creation event. Any root commits in <code>git log -p</code> output would be shown without a diff attached. The default is <code>true</code>.</p> </dd> <dt class=\"hdlist1\">mailmap.*</dt> <dd> <p>See <a href=\"git-shortlog\">git-shortlog[1]</a>.</p> </dd> <dt class=\"hdlist1\">notes.displayRef</dt> <dd> <p>Which refs, in addition to the default set by <code>core.notesRef</code> or <code>GIT_NOTES_REF</code>, to read notes from when showing commit messages with the <code>log</code> family of commands. See <a href=\"git-notes\">git-notes[1]</a>.</p>  <p>May be an unabbreviated ref name or a glob and may be specified multiple times. A warning will be issued for refs that do not exist, but a glob that does not match any refs is silently ignored.</p>   <p>This setting can be disabled by the <code>--no-notes</code> option, overridden by the <code>GIT_NOTES_DISPLAY_REF</code> environment variable, and overridden by the <code>--notes=&lt;ref&gt;</code> option.</p>  </dd> </dl> </div>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-log\" class=\"_attribution-link\">https://git-scm.com/docs/git-log</a>\n  </p>\n</div>\n","git-rebase":"<h1>git-rebase</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-rebase - Reapply commits on top of another base tip</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git rebase [-i | --interactive] [options] [--exec &lt;cmd&gt;] [--onto &lt;newbase&gt;]\n        [&lt;upstream&gt; [&lt;branch&gt;]]\ngit rebase [-i | --interactive] [options] [--exec &lt;cmd&gt;] [--onto &lt;newbase&gt;]\n        --root [&lt;branch&gt;]\ngit rebase --continue | --skip | --abort | --edit-todo</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>If &lt;branch&gt; is specified, <code>git rebase</code> will perform an automatic <code>git checkout &lt;branch&gt;</code> before doing anything else. Otherwise it remains on the current branch.</p>   <p>If &lt;upstream&gt; is not specified, the upstream configured in branch.&lt;name&gt;.remote and branch.&lt;name&gt;.merge options will be used (see <a href=\"git-config\">git-config[1]</a> for details) and the <code>--fork-point</code> option is assumed. If you are currently not on any branch or if the current branch does not have a configured upstream, the rebase will abort.</p>   <p>All changes made by commits in the current branch but that are not in &lt;upstream&gt; are saved to a temporary area. This is the same set of commits that would be shown by <code>git log &lt;upstream&gt;..HEAD</code>; or by <code>git log 'fork_point'..HEAD</code>, if <code>--fork-point</code> is active (see the description on <code>--fork-point</code> below); or by <code>git log HEAD</code>, if the <code>--root</code> option is specified.</p>   <p>The current branch is reset to &lt;upstream&gt;, or &lt;newbase&gt; if the --onto option was supplied. This has the exact same effect as <code>git reset --hard &lt;upstream&gt;</code> (or &lt;newbase&gt;). ORIG_HEAD is set to point at the tip of the branch before the reset.</p>   <p>The commits that were previously saved into the temporary area are then reapplied to the current branch, one by one, in order. Note that any commits in HEAD which introduce the same textual changes as a commit in HEAD..&lt;upstream&gt; are omitted (i.e., a patch already accepted upstream with a different commit message or timestamp will be skipped).</p>   <p>It is possible that a merge failure will prevent this process from being completely automatic. You will have to resolve any such merge failure and run <code>git rebase --continue</code>. Another option is to bypass the commit that caused the merge failure with <code>git rebase --skip</code>. To check out the original &lt;branch&gt; and remove the .git/rebase-apply working files, use the command <code>git rebase --abort</code> instead.</p>   <p>Assume the following history exists and the current branch is \"topic\":</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>          A---B---C topic\n         /\n    D---E---F---G master</pre> </div> </div>  <p>From this point, the result of either of the following commands:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>git rebase master\ngit rebase master topic</pre> </div> </div>  <p>would be:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>                  A'--B'--C' topic\n                 /\n    D---E---F---G master</pre> </div> </div>  <p><strong>NOTE:</strong> The latter form is just a short-hand of <code>git checkout topic</code> followed by <code>git rebase master</code>. When rebase exits <code>topic</code> will remain the checked-out branch.</p>   <p>If the upstream branch already contains a change you have made (e.g., because you mailed a patch which was applied upstream), then that commit will be skipped. For example, running <code>git rebase master</code> on the following history (in which <code>A'</code> and <code>A</code> introduce the same set of changes, but have different committer information):</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>          A---B---C topic\n         /\n    D---E---A'---F master</pre> </div> </div>  <p>will result in:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>                   B'---C' topic\n                  /\n    D---E---A'---F master</pre> </div> </div>  <p>Here is how you would transplant a topic branch based on one branch to another, to pretend that you forked the topic branch from the latter branch, using <code>rebase --onto</code>.</p>   <p>First let’s assume your <code>topic</code> is based on branch <code>next</code>. For example, a feature developed in <code>topic</code> depends on some functionality which is found in <code>next</code>.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>    o---o---o---o---o  master\n         \\\n          o---o---o---o---o  next\n                           \\\n                            o---o---o  topic</pre> </div> </div>  <p>We want to make <code>topic</code> forked from branch <code>master</code>; for example, because the functionality on which <code>topic</code> depends was merged into the more stable <code>master</code> branch. We want our tree to look like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>    o---o---o---o---o  master\n        |            \\\n        |             o'--o'--o'  topic\n         \\\n          o---o---o---o---o  next</pre> </div> </div>  <p>We can get this using the following command:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>git rebase --onto master next topic</pre> </div> </div>  <p>Another example of --onto option is to rebase part of a branch. If we have the following situation:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>                            H---I---J topicB\n                           /\n                  E---F---G  topicA\n                 /\n    A---B---C---D  master</pre> </div> </div>  <p>then the command</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>git rebase --onto master topicA topicB</pre> </div> </div>  <p>would result in:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>                 H'--I'--J'  topicB\n                /\n                | E---F---G  topicA\n                |/\n    A---B---C---D  master</pre> </div> </div>  <p>This is useful when topicB does not depend on topicA.</p>   <p>A range of commits could also be removed with rebase. If we have the following situation:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>    E---F---G---H---I---J  topicA</pre> </div> </div>  <p>then the command</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>git rebase --onto topicA~5 topicA~3 topicA</pre> </div> </div>  <p>would result in the removal of commits F and G:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>    E---H'---I'---J'  topicA</pre> </div> </div>  <p>This is useful if F and G were flawed in some way, or should not be part of topicA. Note that the argument to --onto and the &lt;upstream&gt; parameter can be any valid commit-ish.</p>   <p>In case of conflict, <code>git rebase</code> will stop at the first problematic commit and leave conflict markers in the tree. You can use <code>git diff</code> to locate the markers (&lt;&lt;&lt;&lt;&lt;&lt;) and make edits to resolve the conflict. For each file you edit, you need to tell Git that the conflict has been resolved, typically this would be done with</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>git add &lt;filename&gt;</pre> </div> </div>  <p>After resolving the conflict manually and updating the index with the desired resolution, you can continue the rebasing process with</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>git rebase --continue</pre> </div> </div>  <p>Alternatively, you can undo the <code>git rebase</code> with</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>git rebase --abort</pre> </div> </div>\n</div>   <h2 id=\"_configuration\">Configuration</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">rebase.stat</dt> <dd> <p>Whether to show a diffstat of what changed upstream since the last rebase. False by default.</p> </dd> <dt class=\"hdlist1\">rebase.autoSquash</dt> <dd> <p>If set to true enable <code>--autosquash</code> option by default.</p> </dd> <dt class=\"hdlist1\">rebase.autoStash</dt> <dd> <p>If set to true enable <code>--autostash</code> option by default.</p> </dd> <dt class=\"hdlist1\">rebase.missingCommitsCheck</dt> <dd> <p>If set to \"warn\", print warnings about removed commits in interactive mode. If set to \"error\", print the warnings and stop the rebase. If set to \"ignore\", no checking is done. \"ignore\" by default.</p> </dd> <dt class=\"hdlist1\">rebase.instructionFormat</dt> <dd> <p>Custom commit list format to use during an <code>--interactive</code> rebase.</p> </dd> </dl> </div></div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--onto &lt;newbase&gt;</dt> <dd> <p>Starting point at which to create the new commits. If the --onto option is not specified, the starting point is &lt;upstream&gt;. May be any valid commit, and not just an existing branch name.</p>  <p>As a special case, you may use \"A...B\" as a shortcut for the merge base of A and B if there is exactly one merge base. You can leave out at most one of A and B, in which case it defaults to HEAD.</p>  </dd> <dt class=\"hdlist1\">&lt;upstream&gt;</dt> <dd> <p>Upstream branch to compare against. May be any valid commit, not just an existing branch name. Defaults to the configured upstream for the current branch.</p> </dd> <dt class=\"hdlist1\">&lt;branch&gt;</dt> <dd> <p>Working branch; defaults to HEAD.</p> </dd> <dt class=\"hdlist1\">--continue</dt> <dd> <p>Restart the rebasing process after having resolved a merge conflict.</p> </dd> <dt class=\"hdlist1\">--abort</dt> <dd> <p>Abort the rebase operation and reset HEAD to the original branch. If &lt;branch&gt; was provided when the rebase operation was started, then HEAD will be reset to &lt;branch&gt;. Otherwise HEAD will be reset to where it was when the rebase operation was started.</p> </dd> <dt class=\"hdlist1\">--keep-empty</dt> <dd> <p>Keep the commits that do not change anything from its parents in the result.</p> </dd> <dt class=\"hdlist1\">--skip</dt> <dd> <p>Restart the rebasing process by skipping the current patch.</p> </dd> <dt class=\"hdlist1\">--edit-todo</dt> <dd> <p>Edit the todo list during an interactive rebase.</p> </dd> <dt class=\"hdlist1\">-m</dt> <dt class=\"hdlist1\">--merge</dt> <dd> <p>Use merging strategies to rebase. When the recursive (default) merge strategy is used, this allows rebase to be aware of renames on the upstream side.</p>  <p>Note that a rebase merge works by replaying each commit from the working branch on top of the &lt;upstream&gt; branch. Because of this, when a merge conflict happens, the side reported as <code>ours</code> is the so-far rebased series, starting with &lt;upstream&gt;, and <code>theirs</code> is the working branch. In other words, the sides are swapped.</p>  </dd> <dt class=\"hdlist1\">-s &lt;strategy&gt;</dt> <dt class=\"hdlist1\">--strategy=&lt;strategy&gt;</dt> <dd> <p>Use the given merge strategy. If there is no <code>-s</code> option <code>git merge-recursive</code> is used instead. This implies --merge.</p>  <p>Because <code>git rebase</code> replays each commit from the working branch on top of the &lt;upstream&gt; branch using the given strategy, using the <code>ours</code> strategy simply discards all patches from the &lt;branch&gt;, which makes little sense.</p>  </dd> <dt class=\"hdlist1\">-X &lt;strategy-option&gt;</dt> <dt class=\"hdlist1\">--strategy-option=&lt;strategy-option&gt;</dt> <dd> <p>Pass the &lt;strategy-option&gt; through to the merge strategy. This implies <code>--merge</code> and, if no strategy has been specified, <code>-s recursive</code>. Note the reversal of <code>ours</code> and <code>theirs</code> as noted above for the <code>-m</code> option.</p> </dd> <dt class=\"hdlist1\">-S[&lt;keyid&gt;]</dt> <dt class=\"hdlist1\">--gpg-sign[=&lt;keyid&gt;]</dt> <dd> <p>GPG-sign commits. The <code>keyid</code> argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space.</p> </dd> <dt class=\"hdlist1\">-q</dt> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>Be quiet. Implies --no-stat.</p> </dd> <dt class=\"hdlist1\">-v</dt> <dt class=\"hdlist1\">--verbose</dt> <dd> <p>Be verbose. Implies --stat.</p> </dd> <dt class=\"hdlist1\">--stat</dt> <dd> <p>Show a diffstat of what changed upstream since the last rebase. The diffstat is also controlled by the configuration option rebase.stat.</p> </dd> <dt class=\"hdlist1\">-n</dt> <dt class=\"hdlist1\">--no-stat</dt> <dd> <p>Do not show a diffstat as part of the rebase process.</p> </dd> <dt class=\"hdlist1\">--no-verify</dt> <dd> <p>This option bypasses the pre-rebase hook. See also <a href=\"githooks\">githooks[5]</a>.</p> </dd> <dt class=\"hdlist1\">--verify</dt> <dd> <p>Allows the pre-rebase hook to run, which is the default. This option can be used to override --no-verify. See also <a href=\"githooks\">githooks[5]</a>.</p> </dd> <dt class=\"hdlist1\">-C&lt;n&gt;</dt> <dd> <p>Ensure at least &lt;n&gt; lines of surrounding context match before and after each change. When fewer lines of surrounding context exist they all must match. By default no context is ever ignored.</p> </dd> <dt class=\"hdlist1\">-f</dt> <dt class=\"hdlist1\">--force-rebase</dt> <dd> <p>Force a rebase even if the current branch is up-to-date and the command without <code>--force</code> would return without doing anything.</p>  <p>You may find this (or --no-ff with an interactive rebase) helpful after reverting a topic branch merge, as this option recreates the topic branch with fresh commits so it can be remerged successfully without needing to \"revert the reversion\" (see the <a href=\"https://git-scm.com/docs/howto/revert-a-faulty-merge.html\">revert-a-faulty-merge How-To</a> for details).</p>  </dd> <dt class=\"hdlist1\">--fork-point</dt> <dt class=\"hdlist1\">--no-fork-point</dt> <dd> <p>Use reflog to find a better common ancestor between &lt;upstream&gt; and &lt;branch&gt; when calculating which commits have been introduced by &lt;branch&gt;.</p>  <p>When --fork-point is active, <code>fork_point</code> will be used instead of &lt;upstream&gt; to calculate the set of commits to rebase, where <code>fork_point</code> is the result of <code>git merge-base --fork-point &lt;upstream&gt;\n&lt;branch&gt;</code> command (see <a href=\"git-merge-base\">git-merge-base[1]</a>). If <code>fork_point</code> ends up being empty, the &lt;upstream&gt; will be used as a fallback.</p>   <p>If either &lt;upstream&gt; or --root is given on the command line, then the default is <code>--no-fork-point</code>, otherwise the default is <code>--fork-point</code>.</p>  </dd> <dt class=\"hdlist1\">--ignore-whitespace</dt> <dt class=\"hdlist1\">--whitespace=&lt;option&gt;</dt> <dd> <p>These flag are passed to the <code>git apply</code> program (see <a href=\"git-apply\">git-apply[1]</a>) that applies the patch. Incompatible with the --interactive option.</p> </dd> <dt class=\"hdlist1\">--committer-date-is-author-date</dt> <dt class=\"hdlist1\">--ignore-date</dt> <dd> <p>These flags are passed to <code>git am</code> to easily change the dates of the rebased commits (see <a href=\"git-am\">git-am[1]</a>). Incompatible with the --interactive option.</p> </dd> <dt class=\"hdlist1\">-i</dt> <dt class=\"hdlist1\">--interactive</dt> <dd> <p>Make a list of the commits which are about to be rebased. Let the user edit that list before rebasing. This mode can also be used to split commits (see SPLITTING COMMITS below).</p>  <p>The commit list format can be changed by setting the configuration option rebase.instructionFormat. A customized instruction format will automatically have the long commit hash prepended to the format.</p>  </dd> <dt class=\"hdlist1\">-p</dt> <dt class=\"hdlist1\">--preserve-merges</dt> <dd> <p>Recreate merge commits instead of flattening the history by replaying commits a merge commit introduces. Merge conflict resolutions or manual amendments to merge commits are not preserved.</p>  <p>This uses the <code>--interactive</code> machinery internally, but combining it with the <code>--interactive</code> option explicitly is generally not a good idea unless you know what you are doing (see BUGS below).</p>  </dd> <dt class=\"hdlist1\">-x &lt;cmd&gt;</dt> <dt class=\"hdlist1\">--exec &lt;cmd&gt;</dt> <dd> <p>Append \"exec &lt;cmd&gt;\" after each line creating a commit in the final history. &lt;cmd&gt; will be interpreted as one or more shell commands.</p>  <p>You may execute several commands by either using one instance of <code>--exec</code> with several commands:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>git rebase -i --exec \"cmd1 &amp;&amp; cmd2 &amp;&amp; ...\"</pre> </div> </div>  <p>or by giving more than one <code>--exec</code>:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>git rebase -i --exec \"cmd1\" --exec \"cmd2\" --exec ...</pre> </div> </div>  <p>If <code>--autosquash</code> is used, \"exec\" lines will not be appended for the intermediate commits, and will only appear at the end of each squash/fixup series.</p>   <p>This uses the <code>--interactive</code> machinery internally, but it can be run without an explicit <code>--interactive</code>.</p>  </dd> <dt class=\"hdlist1\">--root</dt> <dd> <p>Rebase all commits reachable from &lt;branch&gt;, instead of limiting them with an &lt;upstream&gt;. This allows you to rebase the root commit(s) on a branch. When used with --onto, it will skip changes already contained in &lt;newbase&gt; (instead of &lt;upstream&gt;) whereas without --onto it will operate on every change. When used together with both --onto and --preserve-merges, <code>all</code> root commits will be rewritten to have &lt;newbase&gt; as parent instead.</p> </dd> <dt class=\"hdlist1\">--autosquash</dt> <dt class=\"hdlist1\">--no-autosquash</dt> <dd> <p>When the commit log message begins with \"squash! …​\" (or \"fixup! …​\"), and there is a commit whose title begins with the same …​, automatically modify the todo list of rebase -i so that the commit marked for squashing comes right after the commit to be modified, and change the action of the moved commit from <code>pick</code> to <code>squash</code> (or <code>fixup</code>). Ignores subsequent \"fixup! \" or \"squash! \" after the first, in case you referred to an earlier fixup/squash with <code>git commit --fixup/--squash</code>.</p>  <p>This option is only valid when the <code>--interactive</code> option is used.</p>   <p>If the <code>--autosquash</code> option is enabled by default using the configuration variable <code>rebase.autoSquash</code>, this option can be used to override and disable this setting.</p>  </dd> <dt class=\"hdlist1\">--autostash</dt> <dt class=\"hdlist1\">--no-autostash</dt> <dd> <p>Automatically create a temporary stash before the operation begins, and apply it after the operation ends. This means that you can run rebase on a dirty worktree. However, use with care: the final stash application after a successful rebase might result in non-trivial conflicts.</p> </dd> <dt class=\"hdlist1\">--no-ff</dt> <dd> <p>With --interactive, cherry-pick all rebased commits instead of fast-forwarding over the unchanged ones. This ensures that the entire history of the rebased branch is composed of new commits.</p>  <p>Without --interactive, this is a synonym for --force-rebase.</p>   <p>You may find this helpful after reverting a topic branch merge, as this option recreates the topic branch with fresh commits so it can be remerged successfully without needing to \"revert the reversion\" (see the <a href=\"https://git-scm.com/docs/howto/revert-a-faulty-merge.html\">revert-a-faulty-merge How-To</a> for details).</p>  </dd> </dl> </div></div>   <h2 id=\"_merge_strategies\">Merge strategies</h2> <div class=\"sectionbody\"> <p>The merge mechanism (<code>git merge</code> and <code>git pull</code> commands) allows the backend <code>merge strategies</code> to be chosen with <code>-s</code> option. Some strategies can also take their own options, which can be passed by giving <code>-X&lt;option&gt;</code> arguments to <code>git merge</code> and/or <code>git pull</code>.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">resolve</dt> <dd> <p>This can only resolve two heads (i.e. the current branch and another branch you pulled from) using a 3-way merge algorithm. It tries to carefully detect criss-cross merge ambiguities and is considered generally safe and fast.</p> </dd> <dt class=\"hdlist1\">recursive</dt> <dd> <p>This can only resolve two heads using a 3-way merge algorithm. When there is more than one common ancestor that can be used for 3-way merge, it creates a merged tree of the common ancestors and uses that as the reference tree for the 3-way merge. This has been reported to result in fewer merge conflicts without causing mismerges by tests done on actual merge commits taken from Linux 2.6 kernel development history. Additionally this can detect and handle merges involving renames. This is the default merge strategy when pulling or merging one branch.</p>  <p>The <code>recursive</code> strategy can take the following options:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">ours</dt> <dd> <p>This option forces conflicting hunks to be auto-resolved cleanly by favoring <code>our</code> version. Changes from the other tree that do not conflict with our side are reflected to the merge result. For a binary file, the entire contents are taken from our side.</p>  <p>This should not be confused with the <code>ours</code> merge strategy, which does not even look at what the other tree contains at all. It discards everything the other tree did, declaring <code>our</code> history contains all that happened in it.</p>  </dd> <dt class=\"hdlist1\">theirs</dt> <dd> <p>This is the opposite of <code>ours</code>.</p> </dd> <dt class=\"hdlist1\">patience</dt> <dd> <p>With this option, <code>merge-recursive</code> spends a little extra time to avoid mismerges that sometimes occur due to unimportant matching lines (e.g., braces from distinct functions). Use this when the branches to be merged have diverged wildly. See also <a href=\"git-diff\">git-diff[1]</a> <code>--patience</code>.</p> </dd> <dt class=\"hdlist1\">diff-algorithm=[patience|minimal|histogram|myers]</dt> <dd> <p>Tells <code>merge-recursive</code> to use a different diff algorithm, which can help avoid mismerges that occur due to unimportant matching lines (such as braces from distinct functions). See also <a href=\"git-diff\">git-diff[1]</a> <code>--diff-algorithm</code>.</p> </dd> <dt class=\"hdlist1\">ignore-space-change</dt> <dt class=\"hdlist1\">ignore-all-space</dt> <dt class=\"hdlist1\">ignore-space-at-eol</dt> <dd> <p>Treats lines with the indicated type of whitespace change as unchanged for the sake of a three-way merge. Whitespace changes mixed with other changes to a line are not ignored. See also <a href=\"git-diff\">git-diff[1]</a> <code>-b</code>, <code>-w</code>, and <code>--ignore-space-at-eol</code>.</p> <div class=\"ulist\"> <ul> <li> <p>If <code>their</code> version only introduces whitespace changes to a line, <code>our</code> version is used;</p> </li> <li> <p>If <code>our</code> version introduces whitespace changes but <code>their</code> version includes a substantial change, <code>their</code> version is used;</p> </li> <li> <p>Otherwise, the merge proceeds in the usual way.</p> </li> </ul> </div> </dd> <dt class=\"hdlist1\">renormalize</dt> <dd> <p>This runs a virtual check-out and check-in of all three stages of a file when resolving a three-way merge. This option is meant to be used when merging branches with different clean filters or end-of-line normalization rules. See \"Merging branches with differing checkin/checkout attributes\" in <a href=\"gitattributes\">gitattributes[5]</a> for details.</p> </dd> <dt class=\"hdlist1\">no-renormalize</dt> <dd> <p>Disables the <code>renormalize</code> option. This overrides the <code>merge.renormalize</code> configuration variable.</p> </dd> <dt class=\"hdlist1\">no-renames</dt> <dd> <p>Turn off rename detection. See also <a href=\"git-diff\">git-diff[1]</a> <code>--no-renames</code>.</p> </dd> <dt class=\"hdlist1\">find-renames[=&lt;n&gt;]</dt> <dd> <p>Turn on rename detection, optionally setting the similarity threshold. This is the default. See also <a href=\"git-diff\">git-diff[1]</a> <code>--find-renames</code>.</p> </dd> <dt class=\"hdlist1\">rename-threshold=&lt;n&gt;</dt> <dd> <p>Deprecated synonym for <code>find-renames=&lt;n&gt;</code>.</p> </dd> <dt class=\"hdlist1\">subtree[=&lt;path&gt;]</dt> <dd> <p>This option is a more advanced form of <code>subtree</code> strategy, where the strategy makes a guess on how two trees must be shifted to match with each other when merging. Instead, the specified path is prefixed (or stripped from the beginning) to make the shape of two trees to match.</p> </dd> </dl> </div> </dd> <dt class=\"hdlist1\">octopus</dt> <dd> <p>This resolves cases with more than two heads, but refuses to do a complex merge that needs manual resolution. It is primarily meant to be used for bundling topic branch heads together. This is the default merge strategy when pulling or merging more than one branch.</p> </dd> <dt class=\"hdlist1\">ours</dt> <dd> <p>This resolves any number of heads, but the resulting tree of the merge is always that of the current branch head, effectively ignoring all changes from all other branches. It is meant to be used to supersede old development history of side branches. Note that this is different from the -Xours option to the <code>recursive</code> merge strategy.</p> </dd> <dt class=\"hdlist1\">subtree</dt> <dd> <p>This is a modified recursive strategy. When merging trees A and B, if B corresponds to a subtree of A, B is first adjusted to match the tree structure of A, instead of reading the trees at the same level. This adjustment is also done to the common ancestor tree.</p> </dd> </dl> </div>  <p>With the strategies that use 3-way merge (including the default, <code>recursive</code>), if a change is made on both branches, but later reverted on one of the branches, that change will be present in the merged result; some people find this behavior confusing. It occurs because only the heads and the merge base are considered when performing a merge, not the individual commits. The merge algorithm therefore considers the reverted change as no change at all, and substitutes the changed version instead.</p> </div>   <h2 id=\"_notes\">Notes</h2> <div class=\"sectionbody\"> <p>You should understand the implications of using <code>git rebase</code> on a repository that you share. See also RECOVERING FROM UPSTREAM REBASE below.</p>   <p>When the git-rebase command is run, it will first execute a \"pre-rebase\" hook if one exists. You can use this hook to do sanity checks and reject the rebase if it isn’t appropriate. Please see the template pre-rebase hook script for an example.</p>   <p>Upon completion, &lt;branch&gt; will be the current branch.</p> </div>   <h2 id=\"_interactive_mode\">Interactive mode</h2> <div class=\"sectionbody\"> <p>Rebasing interactively means that you have a chance to edit the commits which are rebased. You can reorder the commits, and you can remove them (weeding out bad or otherwise unwanted patches).</p>   <p>The interactive mode is meant for this type of workflow:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>have a wonderful idea</p> </li> <li> <p>hack on the code</p> </li> <li> <p>prepare a series for submission</p> </li> <li> <p>submit</p> </li> </ol> </div>  <p>where point 2. consists of several instances of</p>   <p>a) regular use</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>finish something worthy of a commit</p> </li> <li> <p>commit</p> </li> </ol> </div>  <p>b) independent fixup</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>realize that something does not work</p> </li> <li> <p>fix that</p> </li> <li> <p>commit it</p> </li> </ol> </div>  <p>Sometimes the thing fixed in b.2. cannot be amended to the not-quite perfect commit it fixes, because that commit is buried deeply in a patch series. That is exactly what interactive rebase is for: use it after plenty of \"a\"s and \"b\"s, by rearranging and editing commits, and squashing multiple commits into one.</p>   <p>Start it with the last commit you want to retain as-is:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>git rebase -i &lt;after-this-commit&gt;</pre> </div> </div>  <p>An editor will be fired up with all the commits in your current branch (ignoring merge commits), which come after the given commit. You can reorder the commits in this list to your heart’s content, and you can remove them. The list looks more or less like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>pick deadbee The oneline of this commit\npick fa1afe1 The oneline of the next commit\n...</pre> </div> </div>  <p>The oneline descriptions are purely for your pleasure; <code>git rebase</code> will not look at them but at the commit names (\"deadbee\" and \"fa1afe1\" in this example), so do not delete or edit the names.</p>   <p>By replacing the command \"pick\" with the command \"edit\", you can tell <code>git rebase</code> to stop after applying that commit, so that you can edit the files and/or the commit message, amend the commit, and continue rebasing.</p>   <p>If you just want to edit the commit message for a commit, replace the command \"pick\" with the command \"reword\".</p>   <p>To drop a commit, replace the command \"pick\" with \"drop\", or just delete the matching line.</p>   <p>If you want to fold two or more commits into one, replace the command \"pick\" for the second and subsequent commits with \"squash\" or \"fixup\". If the commits had different authors, the folded commit will be attributed to the author of the first commit. The suggested commit message for the folded commit is the concatenation of the commit messages of the first commit and of those with the \"squash\" command, but omits the commit messages of commits with the \"fixup\" command.</p>   <p><code>git rebase</code> will stop when \"pick\" has been replaced with \"edit\" or when a command fails due to merge errors. When you are done editing and/or resolving conflicts you can continue with <code>git rebase --continue</code>.</p>   <p>For example, if you want to reorder the last 5 commits, such that what was HEAD~4 becomes the new HEAD. To achieve that, you would call <code>git rebase</code> like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git rebase -i HEAD~5</pre> </div> </div>  <p>And move the first patch to the end of the list.</p>   <p>You might want to preserve merges, if you have a history like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>           X\n            \\\n         A---M---B\n        /\n---o---O---P---Q</pre> </div> </div>  <p>Suppose you want to rebase the side branch starting at \"A\" to \"Q\". Make sure that the current HEAD is \"B\", and call</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git rebase -i -p --onto Q O</pre> </div> </div>  <p>Reordering and editing commits usually creates untested intermediate steps. You may want to check that your history editing did not break anything by running a test, or at least recompiling at intermediate points in history by using the \"exec\" command (shortcut \"x\"). You may do so by creating a todo list like this one:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>pick deadbee Implement feature XXX\nfixup f1a5c00 Fix to feature XXX\nexec make\npick c0ffeee The oneline of the next commit\nedit deadbab The oneline of the commit after\nexec cd subdir; make test\n...</pre> </div> </div>  <p>The interactive rebase will stop when a command fails (i.e. exits with non-0 status) to give you an opportunity to fix the problem. You can continue with <code>git rebase --continue</code>.</p>   <p>The \"exec\" command launches the command in a shell (the one specified in <code>$SHELL</code>, or the default shell if <code>$SHELL</code> is not set), so you can use shell features (like \"cd\", \"&gt;\", \";\" …​). The command is run from the root of the working tree.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git rebase -i --exec \"make test\"</pre> </div> </div>  <p>This command lets you check that intermediate commits are compilable. The todo list becomes like that:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>pick 5928aea one\nexec make test\npick 04d0fda two\nexec make test\npick ba46169 three\nexec make test\npick f4593f9 four\nexec make test</pre> </div> </div>\n</div>   <h2 id=\"_splitting_commits\">Splitting commits</h2> <div class=\"sectionbody\"> <p>In interactive mode, you can mark commits with the action \"edit\". However, this does not necessarily mean that <code>git rebase</code> expects the result of this edit to be exactly one commit. Indeed, you can undo the commit, or you can add other commits. This can be used to split a commit into two:</p>  <div class=\"ulist\"> <ul> <li> <p>Start an interactive rebase with <code>git rebase -i &lt;commit&gt;^</code>, where &lt;commit&gt; is the commit you want to split. In fact, any commit range will do, as long as it contains that commit.</p> </li> <li> <p>Mark the commit you want to split with the action \"edit\".</p> </li> <li> <p>When it comes to editing that commit, execute <code>git reset HEAD^</code>. The effect is that the HEAD is rewound by one, and the index follows suit. However, the working tree stays the same.</p> </li> <li> <p>Now add the changes to the index that you want to have in the first commit. You can use <code>git add</code> (possibly interactively) or <code>git gui</code> (or both) to do that.</p> </li> <li> <p>Commit the now-current index with whatever commit message is appropriate now.</p> </li> <li> <p>Repeat the last two steps until your working tree is clean.</p> </li> <li> <p>Continue the rebase with <code>git rebase --continue</code>.</p> </li> </ul> </div>  <p>If you are not absolutely sure that the intermediate revisions are consistent (they compile, pass the testsuite, etc.) you should use <code>git stash</code> to stash away the not-yet-committed changes after each commit, test, and amend the commit if fixes are necessary.</p> </div>   <h2 id=\"_recovering_from_upstream_rebase\">Recovering from upstream rebase</h2> <div class=\"sectionbody\"> <p>Rebasing (or any other form of rewriting) a branch that others have based work on is a bad idea: anyone downstream of it is forced to manually fix their history. This section explains how to do the fix from the downstream’s point of view. The real fix, however, would be to avoid rebasing the upstream in the first place.</p>   <p>To illustrate, suppose you are in a situation where someone develops a <code>subsystem</code> branch, and you are working on a <code>topic</code> that is dependent on this <code>subsystem</code>. You might end up with a history like the following:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>    o---o---o---o---o---o---o---o---o  master\n         \\\n          o---o---o---o---o  subsystem\n                           \\\n                            *---*---*  topic</pre> </div> </div>  <p>If <code>subsystem</code> is rebased against <code>master</code>, the following happens:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>    o---o---o---o---o---o---o---o  master\n         \\                         \\\n          o---o---o---o---o          o'--o'--o'--o'--o'  subsystem\n                           \\\n                            *---*---*  topic</pre> </div> </div>  <p>If you now continue development as usual, and eventually merge <code>topic</code> to <code>subsystem</code>, the commits from <code>subsystem</code> will remain duplicated forever:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>    o---o---o---o---o---o---o---o  master\n         \\                         \\\n          o---o---o---o---o          o'--o'--o'--o'--o'--M         subsystem\n                           \\                             /\n                            *---*---*-..........-*--*  topic</pre> </div> </div>  <p>Such duplicates are generally frowned upon because they clutter up history, making it harder to follow. To clean things up, you need to transplant the commits on <code>topic</code> to the new <code>subsystem</code> tip, i.e., rebase <code>topic</code>. This becomes a ripple effect: anyone downstream from <code>topic</code> is forced to rebase too, and so on!</p>   <p>There are two kinds of fixes, discussed in the following subsections:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">Easy case: The changes are literally the same.</dt> <dd> <p>This happens if the <code>subsystem</code> rebase was a simple rebase and had no conflicts.</p> </dd> <dt class=\"hdlist1\">Hard case: The changes are not the same.</dt> <dd> <p>This happens if the <code>subsystem</code> rebase had conflicts, or used <code>--interactive</code> to omit, edit, squash, or fixup commits; or if the upstream used one of <code>commit --amend</code>, <code>reset</code>, or <code>filter-branch</code>.</p> </dd> </dl> </div> <div class=\"sect2\"> <h3 id=\"_the_easy_case\">The easy case</h3>  <p>Only works if the changes (patch IDs based on the diff contents) on <code>subsystem</code> are literally the same before and after the rebase <code>subsystem</code> did.</p>   <p>In that case, the fix is easy because <code>git rebase</code> knows to skip changes that are already present in the new upstream. So if you say (assuming you’re on <code>topic</code>)</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>    $ git rebase subsystem</pre> </div> </div>  <p>you will end up with the fixed history</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>    o---o---o---o---o---o---o---o  master\n                                 \\\n                                  o'--o'--o'--o'--o'  subsystem\n                                                   \\\n                                                    *---*---*  topic</pre> </div> </div> </div> <div class=\"sect2\"> <h3 id=\"_the_hard_case\">The hard case</h3>  <p>Things get more complicated if the <code>subsystem</code> changes do not exactly correspond to the ones before the rebase.</p>  <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> While an \"easy case recovery\" sometimes appears to be successful even in the hard case, it may have unintended consequences. For example, a commit that was removed via <code>git rebase\n      --interactive</code> will be <strong>resurrected</strong>! </td> </tr> </table> </div>  <p>The idea is to manually tell <code>git rebase</code> \"where the old <code>subsystem</code> ended and your <code>topic</code> began\", that is, what the old merge-base between them was. You will have to find a way to name the last commit of the old <code>subsystem</code>, for example:</p>  <div class=\"ulist\"> <ul> <li> <p>With the <code>subsystem</code> reflog: after <code>git fetch</code>, the old tip of <code>subsystem</code> is at <code>subsystem@{1}</code>. Subsequent fetches will increase the number. (See <a href=\"git-reflog\">git-reflog[1]</a>.)</p> </li> <li> <p>Relative to the tip of <code>topic</code>: knowing that your <code>topic</code> has three commits, the old tip of <code>subsystem</code> must be <code>topic~3</code>.</p> </li> </ul> </div>  <p>You can then transplant the old <code>subsystem..topic</code> to the new tip by saying (for the reflog case, and assuming you are on <code>topic</code> already):</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>    $ git rebase --onto subsystem subsystem@{1}</pre> </div> </div>  <p>The ripple effect of a \"hard case\" recovery is especially bad: <code>everyone</code> downstream from <code>topic</code> will now have to perform a \"hard case\" recovery too!</p>  </div>\n</div>   <h2 id=\"_bugs\">Bugs</h2> <div class=\"sectionbody\"> <p>The todo list presented by <code>--preserve-merges --interactive</code> does not represent the topology of the revision graph. Editing commits and rewording their commit messages should work fine, but attempts to reorder commits tend to produce counterintuitive results.</p>   <p>For example, an attempt to rearrange</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>1 --- 2 --- 3 --- 4 --- 5</pre> </div> </div>  <p>to</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>1 --- 2 --- 4 --- 3 --- 5</pre> </div> </div>  <p>by moving the \"pick 4\" line will result in the following history:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        3\n       /\n1 --- 2 --- 4 --- 5</pre> </div> </div>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-rebase\" class=\"_attribution-link\">https://git-scm.com/docs/git-rebase</a>\n  </p>\n</div>\n","git-gc":"<h1>git-gc</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-gc - Cleanup unnecessary files and optimize the local repository</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git gc [--aggressive] [--auto] [--quiet] [--prune=&lt;date&gt; | --no-prune] [--force]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Runs a number of housekeeping tasks within the current repository, such as compressing file revisions (to reduce disk space and increase performance) and removing unreachable objects which may have been created from prior invocations of <code>git add</code>.</p>   <p>Users are encouraged to run this task on a regular basis within each repository to maintain good disk space utilization and good operating performance.</p>   <p>Some git commands may automatically run <code>git gc</code>; see the <code>--auto</code> flag below for details. If you know what you’re doing and all you want is to disable this behavior permanently without further considerations, just do:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git config --global gc.auto 0</pre> </div> </div>\n</div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--aggressive</dt> <dd> <p>Usually <code>git gc</code> runs very quickly while providing good disk space utilization and performance. This option will cause <code>git gc</code> to more aggressively optimize the repository at the expense of taking much more time. The effects of this optimization are persistent, so this option only needs to be used occasionally; every few hundred changesets or so.</p> </dd> <dt class=\"hdlist1\">--auto</dt> <dd> <p>With this option, <code>git gc</code> checks whether any housekeeping is required; if not, it exits without performing any work. Some git commands run <code>git gc --auto</code> after performing operations that could create many loose objects.</p>  <p>Housekeeping is required if there are too many loose objects or too many packs in the repository. If the number of loose objects exceeds the value of the <code>gc.auto</code> configuration variable, then all loose objects are combined into a single pack using <code>git repack -d -l</code>. Setting the value of <code>gc.auto</code> to 0 disables automatic packing of loose objects.</p>   <p>If the number of packs exceeds the value of <code>gc.autoPackLimit</code>, then existing packs (except those marked with a <code>.keep</code> file) are consolidated into a single pack by using the <code>-A</code> option of <code>git repack</code>. Setting <code>gc.autoPackLimit</code> to 0 disables automatic consolidation of packs.</p>  </dd> <dt class=\"hdlist1\">--prune=&lt;date&gt;</dt> <dd> <p>Prune loose objects older than date (default is 2 weeks ago, overridable by the config variable <code>gc.pruneExpire</code>). --prune=all prunes loose objects regardless of their age (do not use --prune=all unless you know exactly what you are doing. Unless the repository is quiescent, you will lose newly created objects that haven’t been anchored with the refs and end up corrupting your repository). --prune is on by default.</p> </dd> <dt class=\"hdlist1\">--no-prune</dt> <dd> <p>Do not prune any loose objects.</p> </dd> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>Suppress all progress reports.</p> </dd> <dt class=\"hdlist1\">--force</dt> <dd> <p>Force <code>git gc</code> to run even if there may be another <code>git gc</code> instance running on this repository.</p> </dd> </dl> </div></div>   <h2 id=\"_configuration\">Configuration</h2> <div class=\"sectionbody\"> <p>The optional configuration variable <code>gc.reflogExpire</code> can be set to indicate how long historical entries within each branch’s reflog should remain available in this repository. The setting is expressed as a length of time, for example <code>90 days</code> or <code>3 months</code>. It defaults to <code>90 days</code>.</p>   <p>The optional configuration variable <code>gc.reflogExpireUnreachable</code> can be set to indicate how long historical reflog entries which are not part of the current branch should remain available in this repository. These types of entries are generally created as a result of using <code>git commit --amend</code> or <code>git rebase</code> and are the commits prior to the amend or rebase occurring. Since these changes are not part of the current project most users will want to expire them sooner. This option defaults to <code>30 days</code>.</p>   <p>The above two configuration variables can be given to a pattern. For example, this sets non-default expiry values only to remote-tracking branches:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>[gc \"refs/remotes/*\"]\n        reflogExpire = never\n        reflogExpireUnreachable = 3 days</pre> </div> </div>  <p>The optional configuration variable <code>gc.rerereResolved</code> indicates how long records of conflicted merge you resolved earlier are kept. This defaults to 60 days.</p>   <p>The optional configuration variable <code>gc.rerereUnresolved</code> indicates how long records of conflicted merge you have not resolved are kept. This defaults to 15 days.</p>   <p>The optional configuration variable <code>gc.packRefs</code> determines if <code>git gc</code> runs <code>git pack-refs</code>. This can be set to \"notbare\" to enable it within all non-bare repos or it can be set to a boolean value. This defaults to true.</p>   <p>The optional configuration variable <code>gc.aggressiveWindow</code> controls how much time is spent optimizing the delta compression of the objects in the repository when the --aggressive option is specified. The larger the value, the more time is spent optimizing the delta compression. See the documentation for the --window' option in <a href=\"git-repack\">git-repack[1]</a> for more details. This defaults to 250.</p>   <p>Similarly, the optional configuration variable <code>gc.aggressiveDepth</code> controls --depth option in <a href=\"git-repack\">git-repack[1]</a>. This defaults to 250.</p>   <p>The optional configuration variable <code>gc.pruneExpire</code> controls how old the unreferenced loose objects have to be before they are pruned. The default is \"2 weeks ago\".</p> </div>   <h2 id=\"_notes\">Notes</h2> <div class=\"sectionbody\"> <p><code>git gc</code> tries very hard to be safe about the garbage it collects. In particular, it will keep not only objects referenced by your current set of branches and tags, but also objects referenced by the index, remote-tracking branches, refs saved by <code>git filter-branch</code> in refs/original/, or reflogs (which may reference commits in branches that were later amended or rewound).</p>   <p>If you are expecting some objects to be collected and they aren’t, check all of those locations and decide whether it makes sense in your case to remove those references.</p> </div>   <h2 id=\"_hooks\">Hooks</h2> <div class=\"sectionbody\"> <p>The <code>git gc --auto</code> command will run the <code>pre-auto-gc</code> hook. See <a href=\"githooks\">githooks[5]</a> for more information.</p> </div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-prune\">git-prune[1]</a> <a href=\"git-reflog\">git-reflog[1]</a> <a href=\"git-repack\">git-repack[1]</a> <a href=\"git-rerere\">git-rerere[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-gc\" class=\"_attribution-link\">https://git-scm.com/docs/git-gc</a>\n  </p>\n</div>\n","git-reflog":"<h1>git-reflog</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-reflog - Manage reflog information</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git reflog &lt;subcommand&gt; &lt;options&gt;</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>The command takes various subcommands, and different options depending on the subcommand:</p>  <div class=\"verseblock\"> <pre class=\"content\">git reflog [show] [log-options] [&lt;ref&gt;]\ngit reflog expire [--expire=&lt;time&gt;] [--expire-unreachable=&lt;time&gt;]\n        [--rewrite] [--updateref] [--stale-fix]\n        [--dry-run] [--verbose] [--all | &lt;refs&gt;…​]\ngit reflog delete [--rewrite] [--updateref]\n        [--dry-run] [--verbose] ref@{specifier}…​\ngit reflog exists &lt;ref&gt;</pre> </div>  <p>Reference logs, or \"reflogs\", record when the tips of branches and other references were updated in the local repository. Reflogs are useful in various Git commands, to specify the old value of a reference. For example, <code>HEAD@{2}</code> means \"where HEAD used to be two moves ago\", <code>master@{one.week.ago}</code> means \"where master used to point to one week ago in this local repository\", and so on. See <a href=\"gitrevisions\">gitrevisions[7]</a> for more details.</p>   <p>This command manages the information recorded in the reflogs.</p>   <p>The \"show\" subcommand (which is also the default, in the absence of any subcommands) shows the log of the reference provided in the command-line (or <code>HEAD</code>, by default). The reflog covers all recent actions, and in addition the <code>HEAD</code> reflog records branch switching. <code>git reflog show</code> is an alias for <code>git log -g --abbrev-commit\n--pretty=oneline</code>; see <a href=\"git-log\">git-log[1]</a> for more information.</p>   <p>The \"expire\" subcommand prunes older reflog entries. Entries older than <code>expire</code> time, or entries older than <code>expire-unreachable</code> time and not reachable from the current tip, are removed from the reflog. This is typically not used directly by end users — instead, see <a href=\"git-gc\">git-gc[1]</a>.</p>   <p>The \"delete\" subcommand deletes single entries from the reflog. Its argument must be an <code>exact</code> entry (e.g. \"<code>git reflog delete\nmaster@{2}</code>\"). This subcommand is also typically not used directly by end users.</p>   <p>The \"exists\" subcommand checks whether a ref has a reflog. It exits with zero status if the reflog exists, and non-zero status if it does not.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\">\n<div class=\"sect2\"> <h3 id=\"_options_for_code_show_code\">Options for <code>show</code>\n</h3>  <p><code>git reflog show</code> accepts any of the options accepted by <code>git log</code>.</p>  </div> <div class=\"sect2\"> <h3 id=\"_options_for_code_expire_code\">Options for <code>expire</code>\n</h3> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--all</dt> <dd> <p>Process the reflogs of all references.</p> </dd> <dt class=\"hdlist1\">--expire=&lt;time&gt;</dt> <dd> <p>Prune entries older than the specified time. If this option is not specified, the expiration time is taken from the configuration setting <code>gc.reflogExpire</code>, which in turn defaults to 90 days. <code>--expire=all</code> prunes entries regardless of their age; <code>--expire=never</code> turns off pruning of reachable entries (but see <code>--expire-unreachable</code>).</p> </dd> <dt class=\"hdlist1\">--expire-unreachable=&lt;time&gt;</dt> <dd> <p>Prune entries older than <code>&lt;time&gt;</code> that are not reachable from the current tip of the branch. If this option is not specified, the expiration time is taken from the configuration setting <code>gc.reflogExpireUnreachable</code>, which in turn defaults to 30 days. <code>--expire-unreachable=all</code> prunes unreachable entries regardless of their age; <code>--expire-unreachable=never</code> turns off early pruning of unreachable entries (but see <code>--expire</code>).</p> </dd> <dt class=\"hdlist1\">--updateref</dt> <dd> <p>Update the reference to the value of the top reflog entry (i.e. &lt;ref&gt;@{0}) if the previous top entry was pruned. (This option is ignored for symbolic references.)</p> </dd> <dt class=\"hdlist1\">--rewrite</dt> <dd> <p>If a reflog entry’s predecessor is pruned, adjust its \"old\" SHA-1 to be equal to the \"new\" SHA-1 field of the entry that now precedes it.</p> </dd> <dt class=\"hdlist1\">--stale-fix</dt> <dd> <p>Prune any reflog entries that point to \"broken commits\". A broken commit is a commit that is not reachable from any of the reference tips and that refers, directly or indirectly, to a missing commit, tree, or blob object.</p>  <p>This computation involves traversing all the reachable objects, i.e. it has the same cost as <code>git prune</code>. It is primarily intended to fix corruption caused by garbage collecting using older versions of Git, which didn’t protect objects referred to by reflogs.</p>  </dd> <dt class=\"hdlist1\">-n</dt> <dt class=\"hdlist1\">--dry-run</dt> <dd> <p>Do not actually prune any entries; just show what would have been pruned.</p> </dd> <dt class=\"hdlist1\">--verbose</dt> <dd> <p>Print extra information on screen.</p> </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_options_for_code_delete_code\">Options for <code>delete</code>\n</h3>  <p><code>git reflog delete</code> accepts options <code>--updateref</code>, <code>--rewrite</code>, <code>-n</code>, <code>--dry-run</code>, and <code>--verbose</code>, with the same meanings as when they are used with <code>expire</code>.</p>  </div>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-reflog\" class=\"_attribution-link\">https://git-scm.com/docs/git-reflog</a>\n  </p>\n</div>\n","git-instaweb":"<h1>git-instaweb</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-instaweb - Instantly browse your working repository in gitweb</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git instaweb [--local] [--httpd=&lt;httpd&gt;] [--port=&lt;port&gt;]\n               [--browser=&lt;browser&gt;]\ngit instaweb [--start] [--stop] [--restart]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>A simple script to set up <code>gitweb</code> and a web server for browsing the local repository.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-l</dt> <dt class=\"hdlist1\">--local</dt> <dd> <p>Only bind the web server to the local IP (127.0.0.1).</p> </dd> <dt class=\"hdlist1\">-d</dt> <dt class=\"hdlist1\">--httpd</dt> <dd> <p>The HTTP daemon command-line that will be executed. Command-line options may be specified here, and the configuration file will be added at the end of the command-line. Currently apache2, lighttpd, mongoose, plackup and webrick are supported. (Default: lighttpd)</p> </dd> <dt class=\"hdlist1\">-m</dt> <dt class=\"hdlist1\">--module-path</dt> <dd> <p>The module path (only needed if httpd is Apache). (Default: /usr/lib/apache2/modules)</p> </dd> <dt class=\"hdlist1\">-p</dt> <dt class=\"hdlist1\">--port</dt> <dd> <p>The port number to bind the httpd to. (Default: 1234)</p> </dd> <dt class=\"hdlist1\">-b</dt> <dt class=\"hdlist1\">--browser</dt> <dd> <p>The web browser that should be used to view the gitweb page. This will be passed to the <code>git web{litdd}browse</code> helper script along with the URL of the gitweb instance. See <a href=\"#\">git-web{litdd}browse[1]</a> for more information about this. If the script fails, the URL will be printed to stdout.</p> </dd> <dt class=\"hdlist1\">start</dt> <dt class=\"hdlist1\">--start</dt> <dd> <p>Start the httpd instance and exit. Regenerate configuration files as necessary for spawning a new instance.</p> </dd> <dt class=\"hdlist1\">stop</dt> <dt class=\"hdlist1\">--stop</dt> <dd> <p>Stop the httpd instance and exit. This does not generate any of the configuration files for spawning a new instance, nor does it close the browser.</p> </dd> <dt class=\"hdlist1\">restart</dt> <dt class=\"hdlist1\">--restart</dt> <dd> <p>Restart the httpd instance and exit. Regenerate configuration files as necessary for spawning a new instance.</p> </dd> </dl> </div></div>   <h2 id=\"_configuration\">Configuration</h2> <div class=\"sectionbody\"> <p>You may specify configuration in your .git/config</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>[instaweb]\n        local = true\n        httpd = apache2 -f\n        port = 4321\n        browser = konqueror\n        modulePath = /usr/lib/apache2/modules</pre> </div> </div>  <p>If the configuration variable <code>instaweb.browser</code> is not set, <code>web.browser</code> will be used instead if it is defined. See <a href=\"#\">git-web{litdd}browse[1]</a> for more information about this.</p> </div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"gitweb\">gitweb[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-instaweb\" class=\"_attribution-link\">https://git-scm.com/docs/git-instaweb</a>\n  </p>\n</div>\n","git-archive":"<h1>git-archive</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-archive - Create an archive of files from a named tree</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git archive [--format=&lt;fmt&gt;] [--list] [--prefix=&lt;prefix&gt;/] [&lt;extra&gt;]\n              [-o &lt;file&gt; | --output=&lt;file&gt;] [--worktree-attributes]\n              [--remote=&lt;repo&gt; [--exec=&lt;git-upload-archive&gt;]] &lt;tree-ish&gt;\n              [&lt;path&gt;…​]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Creates an archive of the specified format containing the tree structure for the named tree, and writes it out to the standard output. If &lt;prefix&gt; is specified it is prepended to the filenames in the archive.</p>   <p><code>git archive</code> behaves differently when given a tree ID versus when given a commit ID or tag ID. In the first case the current time is used as the modification time of each file in the archive. In the latter case the commit time as recorded in the referenced commit object is used instead. Additionally the commit ID is stored in a global extended pax header if the tar format is used; it can be extracted using <code>git get-tar-commit-id</code>. In ZIP files it is stored as a file comment.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--format=&lt;fmt&gt;</dt> <dd> <p>Format of the resulting archive: <code>tar</code> or <code>zip</code>. If this option is not given, and the output file is specified, the format is inferred from the filename if possible (e.g. writing to \"foo.zip\" makes the output to be in the zip format). Otherwise the output format is <code>tar</code>.</p> </dd> <dt class=\"hdlist1\">-l</dt> <dt class=\"hdlist1\">--list</dt> <dd> <p>Show all available formats.</p> </dd> <dt class=\"hdlist1\">-v</dt> <dt class=\"hdlist1\">--verbose</dt> <dd> <p>Report progress to stderr.</p> </dd> <dt class=\"hdlist1\">--prefix=&lt;prefix&gt;/</dt> <dd> <p>Prepend &lt;prefix&gt;/ to each filename in the archive.</p> </dd> <dt class=\"hdlist1\">-o &lt;file&gt;</dt> <dt class=\"hdlist1\">--output=&lt;file&gt;</dt> <dd> <p>Write the archive to &lt;file&gt; instead of stdout.</p> </dd> <dt class=\"hdlist1\">--worktree-attributes</dt> <dd> <p>Look for attributes in .gitattributes files in the working tree as well (see <a href=\"#ATTRIBUTES\">ATTRIBUTES</a>).</p> </dd> <dt class=\"hdlist1\">&lt;extra&gt;</dt> <dd> <p>This can be any options that the archiver backend understands. See next section.</p> </dd> <dt class=\"hdlist1\">--remote=&lt;repo&gt;</dt> <dd> <p>Instead of making a tar archive from the local repository, retrieve a tar archive from a remote repository. Note that the remote repository may place restrictions on which sha1 expressions may be allowed in <code>&lt;tree-ish&gt;</code>. See <a href=\"git-upload-archive\">git-upload-archive[1]</a> for details.</p> </dd> <dt class=\"hdlist1\">--exec=&lt;git-upload-archive&gt;</dt> <dd> <p>Used with --remote to specify the path to the <code>git-upload-archive</code> on the remote side.</p> </dd> <dt class=\"hdlist1\">&lt;tree-ish&gt;</dt> <dd> <p>The tree or commit to produce an archive for.</p> </dd> <dt class=\"hdlist1\">&lt;path&gt;</dt> <dd> <p>Without an optional path parameter, all files and subdirectories of the current working directory are included in the archive. If one or more paths are specified, only these are included.</p> </dd> </dl> </div></div>   <h2 id=\"_backend_extra_options\">Backend extra options</h2> <div class=\"sectionbody\"><div class=\"sect2\"> <h3 id=\"_zip\">zip</h3> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-0</dt> <dd> <p>Store the files instead of deflating them.</p> </dd> <dt class=\"hdlist1\">-9</dt> <dd> <p>Highest and slowest compression level. You can specify any number from 1 to 9 to adjust compression speed and ratio.</p> </dd> </dl> </div> </div></div>   <h2 id=\"_configuration\">Configuration</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">tar.umask</dt> <dd> <p>This variable can be used to restrict the permission bits of tar archive entries. The default is 0002, which turns off the world write bit. The special value \"user\" indicates that the archiving user’s umask will be used instead. See umask(2) for details. If <code>--remote</code> is used then only the configuration of the remote repository takes effect.</p> </dd> <dt class=\"hdlist1\">tar.&lt;format&gt;.command</dt> <dd> <p>This variable specifies a shell command through which the tar output generated by <code>git archive</code> should be piped. The command is executed using the shell with the generated tar file on its standard input, and should produce the final output on its standard output. Any compression-level options will be passed to the command (e.g., \"-9\"). An output file with the same extension as <code>&lt;format&gt;</code> will be use this format if no other format is given.</p>  <p>The \"tar.gz\" and \"tgz\" formats are defined automatically and default to <code>gzip -cn</code>. You may override them with custom commands.</p>  </dd> <dt class=\"hdlist1\">tar.&lt;format&gt;.remote</dt> <dd> <p>If true, enable <code>&lt;format&gt;</code> for use by remote clients via <a href=\"git-upload-archive\">git-upload-archive[1]</a>. Defaults to false for user-defined formats, but true for the \"tar.gz\" and \"tgz\" formats.</p> </dd> </dl> </div></div>   <h2 id=\"ATTRIBUTES\">Attributes</h2> <div class=\"sectionbody\">\n<div class=\"dlist\"> <dl> <dt class=\"hdlist1\">export-ignore</dt> <dd> <p>Files and directories with the attribute export-ignore won’t be added to archive files. See <a href=\"gitattributes\">gitattributes[5]</a> for details.</p> </dd> <dt class=\"hdlist1\">export-subst</dt> <dd> <p>If the attribute export-subst is set for a file then Git will expand several placeholders when adding this file to an archive. See <a href=\"gitattributes\">gitattributes[5]</a> for details.</p> </dd> </dl> </div>  <p>Note that attributes are by default taken from the <code>.gitattributes</code> files in the tree that is being archived. If you want to tweak the way the output is generated after the fact (e.g. you committed without adding an appropriate export-ignore in its <code>.gitattributes</code>), adjust the checked out <code>.gitattributes</code> file as necessary and use <code>--worktree-attributes</code> option. Alternatively you can keep necessary attributes that should apply while archiving any tree in your <code>$GIT_DIR/info/attributes</code> file.</p> </div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>git archive --format=tar --prefix=junk/ HEAD | (cd /var/tmp/ &amp;&amp; tar xf -)</code></dt> <dd> <p>Create a tar archive that contains the contents of the latest commit on the current branch, and extract it in the <code>/var/tmp/junk</code> directory.</p> </dd> <dt class=\"hdlist1\"><code>git archive --format=tar --prefix=git-1.4.0/ v1.4.0 | gzip &gt;git-1.4.0.tar.gz</code></dt> <dd> <p>Create a compressed tarball for v1.4.0 release.</p> </dd> <dt class=\"hdlist1\"><code>git archive --format=tar.gz --prefix=git-1.4.0/ v1.4.0 &gt;git-1.4.0.tar.gz</code></dt> <dd> <p>Same as above, but using the builtin tar.gz handling.</p> </dd> <dt class=\"hdlist1\"><code>git archive --prefix=git-1.4.0/ -o git-1.4.0.tar.gz v1.4.0</code></dt> <dd> <p>Same as above, but the format is inferred from the output file.</p> </dd> <dt class=\"hdlist1\"><code>git archive --format=tar --prefix=git-1.4.0/ v1.4.0^{tree} | gzip &gt;git-1.4.0.tar.gz</code></dt> <dd> <p>Create a compressed tarball for v1.4.0 release, but without a global extended pax header.</p> </dd> <dt class=\"hdlist1\"><code>git archive --format=zip --prefix=git-docs/ HEAD:Documentation/ &gt; git-1.4.0-docs.zip</code></dt> <dd> <p>Put everything in the current head’s Documentation/ directory into <code>git-1.4.0-docs.zip</code>, with the prefix <code>git-docs/</code>.</p> </dd> <dt class=\"hdlist1\"><code>git archive -o latest.zip HEAD</code></dt> <dd> <p>Create a Zip archive that contains the contents of the latest commit on the current branch. Note that the output format is inferred by the extension of the output file.</p> </dd> <dt class=\"hdlist1\"><code>git config tar.tar.xz.command \"xz -c\"</code></dt> <dd> <p>Configure a \"tar.xz\" format for making LZMA-compressed tarfiles. You can use it specifying <code>--format=tar.xz</code>, or by creating an output file like <code>-o foo.tar.xz</code>.</p> </dd> </dl> </div></div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"gitattributes\">gitattributes[5]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-archive\" class=\"_attribution-link\">https://git-scm.com/docs/git-archive</a>\n  </p>\n</div>\n","git-push":"<h1>git-push</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-push - Update remote refs along with associated objects</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git push [--all | --mirror | --tags] [--follow-tags] [--atomic] [-n | --dry-run] [--receive-pack=&lt;git-receive-pack&gt;]\n           [--repo=&lt;repository&gt;] [-f | --force] [-d | --delete] [--prune] [-v | --verbose]\n           [-u | --set-upstream]\n           [--[no-]signed|--sign=(true|false|if-asked)]\n           [--force-with-lease[=&lt;refname&gt;[:&lt;expect&gt;]]]\n           [--no-verify] [&lt;repository&gt; [&lt;refspec&gt;…​]]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Updates remote refs using local refs, while sending objects necessary to complete the given refs.</p>   <p>You can make interesting things happen to a repository every time you push into it, by setting up <code>hooks</code> there. See documentation for <a href=\"git-receive-pack\">git-receive-pack[1]</a>.</p>   <p>When the command line does not specify where to push with the <code>&lt;repository&gt;</code> argument, <code>branch.*.remote</code> configuration for the current branch is consulted to determine where to push. If the configuration is missing, it defaults to <code>origin</code>.</p>   <p>When the command line does not specify what to push with <code>&lt;refspec&gt;...</code> arguments or <code>--all</code>, <code>--mirror</code>, <code>--tags</code> options, the command finds the default <code>&lt;refspec&gt;</code> by consulting <code>remote.*.push</code> configuration, and if it is not found, honors <code>push.default</code> configuration to decide what to push (See <a href=\"git-config\">git-config[1]</a> for the meaning of <code>push.default</code>).</p>   <p>When neither the command-line nor the configuration specify what to push, the default behavior is used, which corresponds to the <code>simple</code> value for <code>push.default</code>: the current branch is pushed to the corresponding upstream branch, but as a safety measure, the push is aborted if the upstream branch does not have the same name as the local one.</p> </div>   <h2 id=\"_options_a_id_options_a\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">&lt;repository&gt;</dt> <dd> <p>The \"remote\" repository that is destination of a push operation. This parameter can be either a URL (see the section <a href=\"#URLS\">GIT URLS</a> below) or the name of a remote (see the section <a href=\"#REMOTES\">REMOTES</a> below).</p> </dd> <dt class=\"hdlist1\">&lt;refspec&gt;…​</dt> <dd> <p>Specify what destination ref to update with what source object. The format of a &lt;refspec&gt; parameter is an optional plus <code>+</code>, followed by the source object &lt;src&gt;, followed by a colon <code>:</code>, followed by the destination ref &lt;dst&gt;.</p>  <p>The &lt;src&gt; is often the name of the branch you would want to push, but it can be any arbitrary \"SHA-1 expression\", such as <code>master~4</code> or <code>HEAD</code> (see <a href=\"gitrevisions\">gitrevisions[7]</a>).</p>   <p>The &lt;dst&gt; tells which ref on the remote side is updated with this push. Arbitrary expressions cannot be used here, an actual ref must be named. If <code>git push [&lt;repository&gt;]</code> without any <code>&lt;refspec&gt;</code> argument is set to update some ref at the destination with <code>&lt;src&gt;</code> with <code>remote.&lt;repository&gt;.push</code> configuration variable, <code>:&lt;dst&gt;</code> part can be omitted—​such a push will update a ref that <code>&lt;src&gt;</code> normally updates without any <code>&lt;refspec&gt;</code> on the command line. Otherwise, missing <code>:&lt;dst&gt;</code> means to update the same ref as the <code>&lt;src&gt;</code>.</p>   <p>The object referenced by &lt;src&gt; is used to update the &lt;dst&gt; reference on the remote side. By default this is only allowed if &lt;dst&gt; is not a tag (annotated or lightweight), and then only if it can fast-forward &lt;dst&gt;. By having the optional leading <code>+</code>, you can tell Git to update the &lt;dst&gt; ref even if it is not allowed by default (e.g., it is not a fast-forward.) This does <strong>not</strong> attempt to merge &lt;src&gt; into &lt;dst&gt;. See EXAMPLES below for details.</p>   <p><code>tag &lt;tag&gt;</code> means the same as <code>refs/tags/&lt;tag&gt;:refs/tags/&lt;tag&gt;</code>.</p>   <p>Pushing an empty &lt;src&gt; allows you to delete the &lt;dst&gt; ref from the remote repository.</p>   <p>The special refspec <code>:</code> (or <code>+:</code> to allow non-fast-forward updates) directs Git to push \"matching\" branches: for every branch that exists on the local side, the remote side is updated if a branch of the same name already exists on the remote side.</p>  </dd> <dt class=\"hdlist1\">--all</dt> <dd> <p>Push all branches (i.e. refs under <code>refs/heads/</code>); cannot be used with other &lt;refspec&gt;.</p> </dd> <dt class=\"hdlist1\">--prune</dt> <dd> <p>Remove remote branches that don’t have a local counterpart. For example a remote branch <code>tmp</code> will be removed if a local branch with the same name doesn’t exist any more. This also respects refspecs, e.g. <code>git push --prune remote refs/heads/*:refs/tmp/*</code> would make sure that remote <code>refs/tmp/foo</code> will be removed if <code>refs/heads/foo</code> doesn’t exist.</p> </dd> <dt class=\"hdlist1\">--mirror</dt> <dd> <p>Instead of naming each ref to push, specifies that all refs under <code>refs/</code> (which includes but is not limited to <code>refs/heads/</code>, <code>refs/remotes/</code>, and <code>refs/tags/</code>) be mirrored to the remote repository. Newly created local refs will be pushed to the remote end, locally updated refs will be force updated on the remote end, and deleted refs will be removed from the remote end. This is the default if the configuration option <code>remote.&lt;remote&gt;.mirror</code> is set.</p> </dd> <dt class=\"hdlist1\">-n</dt> <dt class=\"hdlist1\">--dry-run</dt> <dd> <p>Do everything except actually send the updates.</p> </dd> <dt class=\"hdlist1\">--porcelain</dt> <dd> <p>Produce machine-readable output. The output status line for each ref will be tab-separated and sent to stdout instead of stderr. The full symbolic names of the refs will be given.</p> </dd> <dt class=\"hdlist1\">--delete</dt> <dd> <p>All listed refs are deleted from the remote repository. This is the same as prefixing all refs with a colon.</p> </dd> <dt class=\"hdlist1\">--tags</dt> <dd> <p>All refs under <code>refs/tags</code> are pushed, in addition to refspecs explicitly listed on the command line.</p> </dd> <dt class=\"hdlist1\">--follow-tags</dt> <dd> <p>Push all the refs that would be pushed without this option, and also push annotated tags in <code>refs/tags</code> that are missing from the remote but are pointing at commit-ish that are reachable from the refs being pushed. This can also be specified with configuration variable <code>push.followTags</code>. For more information, see <code>push.followTags</code> in <a href=\"git-config\">git-config[1]</a>.</p> </dd> <dt class=\"hdlist1\">--[no-]signed</dt> <dt class=\"hdlist1\">--sign=(true|false|if-asked)</dt> <dd> <p>GPG-sign the push request to update refs on the receiving side, to allow it to be checked by the hooks and/or be logged. If <code>false</code> or <code>--no-signed</code>, no signing will be attempted. If <code>true</code> or <code>--signed</code>, the push will fail if the server does not support signed pushes. If set to <code>if-asked</code>, sign if and only if the server supports signed pushes. The push will also fail if the actual call to <code>gpg --sign</code> fails. See <a href=\"git-receive-pack\">git-receive-pack[1]</a> for the details on the receiving end.</p> </dd> <dt class=\"hdlist1\">--[no-]atomic</dt> <dd> <p>Use an atomic transaction on the remote side if available. Either all refs are updated, or on error, no refs are updated. If the server does not support atomic pushes the push will fail.</p> </dd> <dt class=\"hdlist1\">--receive-pack=&lt;git-receive-pack&gt;</dt> <dt class=\"hdlist1\">--exec=&lt;git-receive-pack&gt;</dt> <dd> <p>Path to the <code>git-receive-pack</code> program on the remote end. Sometimes useful when pushing to a remote repository over ssh, and you do not have the program in a directory on the default $PATH.</p> </dd> <dt class=\"hdlist1\">--[no-]force-with-lease</dt> <dt class=\"hdlist1\">--force-with-lease=&lt;refname&gt;</dt> <dt class=\"hdlist1\">--force-with-lease=&lt;refname&gt;:&lt;expect&gt;</dt> <dd> <p>Usually, \"git push\" refuses to update a remote ref that is not an ancestor of the local ref used to overwrite it.</p>  <p>This option overrides this restriction if the current value of the remote ref is the expected value. \"git push\" fails otherwise.</p>   <p>Imagine that you have to rebase what you have already published. You will have to bypass the \"must fast-forward\" rule in order to replace the history you originally published with the rebased history. If somebody else built on top of your original history while you are rebasing, the tip of the branch at the remote may advance with her commit, and blindly pushing with <code>--force</code> will lose her work.</p>   <p>This option allows you to say that you expect the history you are updating is what you rebased and want to replace. If the remote ref still points at the commit you specified, you can be sure that no other people did anything to the ref. It is like taking a \"lease\" on the ref without explicitly locking it, and the remote ref is updated only if the \"lease\" is still valid.</p>   <p><code>--force-with-lease</code> alone, without specifying the details, will protect all remote refs that are going to be updated by requiring their current value to be the same as the remote-tracking branch we have for them.</p>   <p><code>--force-with-lease=&lt;refname&gt;</code>, without specifying the expected value, will protect the named ref (alone), if it is going to be updated, by requiring its current value to be the same as the remote-tracking branch we have for it.</p>   <p><code>--force-with-lease=&lt;refname&gt;:&lt;expect&gt;</code> will protect the named ref (alone), if it is going to be updated, by requiring its current value to be the same as the specified value &lt;expect&gt; (which is allowed to be different from the remote-tracking branch we have for the refname, or we do not even have to have such a remote-tracking branch when this form is used).</p>   <p>Note that all forms other than <code>--force-with-lease=&lt;refname&gt;:&lt;expect&gt;</code> that specifies the expected current value of the ref explicitly are still experimental and their semantics may change as we gain experience with this feature.</p>   <p>\"--no-force-with-lease\" will cancel all the previous --force-with-lease on the command line.</p>  </dd> <dt class=\"hdlist1\">-f</dt> <dt class=\"hdlist1\">--force</dt> <dd> <p>Usually, the command refuses to update a remote ref that is not an ancestor of the local ref used to overwrite it. Also, when <code>--force-with-lease</code> option is used, the command refuses to update a remote ref whose current value does not match what is expected.</p>  <p>This flag disables these checks, and can cause the remote repository to lose commits; use it with care.</p>   <p>Note that <code>--force</code> applies to all the refs that are pushed, hence using it with <code>push.default</code> set to <code>matching</code> or with multiple push destinations configured with <code>remote.*.push</code> may overwrite refs other than the current branch (including local refs that are strictly behind their remote counterpart). To force a push to only one branch, use a <code>+</code> in front of the refspec to push (e.g <code>git push\norigin +master</code> to force a push to the <code>master</code> branch). See the <code>&lt;refspec&gt;...</code> section above for details.</p>  </dd> <dt class=\"hdlist1\">--repo=&lt;repository&gt;</dt> <dd> <p>This option is equivalent to the &lt;repository&gt; argument. If both are specified, the command-line argument takes precedence.</p> </dd> <dt class=\"hdlist1\">-u</dt> <dt class=\"hdlist1\">--set-upstream</dt> <dd> <p>For every branch that is up to date or successfully pushed, add upstream (tracking) reference, used by argument-less <a href=\"git-pull\">git-pull[1]</a> and other commands. For more information, see <code>branch.&lt;name&gt;.merge</code> in <a href=\"git-config\">git-config[1]</a>.</p> </dd> <dt class=\"hdlist1\">--[no-]thin</dt> <dd> <p>These options are passed to <a href=\"git-send-pack\">git-send-pack[1]</a>. A thin transfer significantly reduces the amount of sent data when the sender and receiver share many of the same objects in common. The default is \\--thin.</p> </dd> <dt class=\"hdlist1\">-q</dt> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>Suppress all output, including the listing of updated refs, unless an error occurs. Progress is not reported to the standard error stream.</p> </dd> <dt class=\"hdlist1\">-v</dt> <dt class=\"hdlist1\">--verbose</dt> <dd> <p>Run verbosely.</p> </dd> <dt class=\"hdlist1\">--progress</dt> <dd> <p>Progress status is reported on the standard error stream by default when it is attached to a terminal, unless -q is specified. This flag forces progress status even if the standard error stream is not directed to a terminal.</p> </dd> <dt class=\"hdlist1\">--no-recurse-submodules</dt> <dt class=\"hdlist1\">--recurse-submodules=check|on-demand|no</dt> <dd> <p>May be used to make sure all submodule commits used by the revisions to be pushed are available on a remote-tracking branch. If <code>check</code> is used Git will verify that all submodule commits that changed in the revisions to be pushed are available on at least one remote of the submodule. If any commits are missing the push will be aborted and exit with non-zero status. If <code>on-demand</code> is used all submodules that changed in the revisions to be pushed will be pushed. If on-demand was not able to push all necessary revisions it will also be aborted and exit with non-zero status. A value of <code>no</code> or using <code>--no-recurse-submodules</code> can be used to override the push.recurseSubmodules configuration variable when no submodule recursion is required.</p> </dd> <dt class=\"hdlist1\">--[no-]verify</dt> <dd> <p>Toggle the pre-push hook (see <a href=\"githooks\">githooks[5]</a>). The default is --verify, giving the hook a chance to prevent the push. With --no-verify, the hook is bypassed completely.</p> </dd> <dt class=\"hdlist1\">-4</dt> <dt class=\"hdlist1\">--ipv4</dt> <dd> <p>Use IPv4 addresses only, ignoring IPv6 addresses.</p> </dd> <dt class=\"hdlist1\">-6</dt> <dt class=\"hdlist1\">--ipv6</dt> <dd> <p>Use IPv6 addresses only, ignoring IPv4 addresses.</p> </dd> </dl> </div></div>   <h2 id=\"_git_urls_a_id_urls_a\">Git urls</h2> <div class=\"sectionbody\"> <p>In general, URLs contain information about the transport protocol, the address of the remote server, and the path to the repository. Depending on the transport protocol, some of this information may be absent.</p>   <p>Git supports ssh, git, http, and https protocols (in addition, ftp, and ftps can be used for fetching, but this is inefficient and deprecated; do not use it).</p>   <p>The native transport (i.e. git:// URL) does no authentication and should be used with caution on unsecured networks.</p>   <p>The following syntaxes may be used with them:</p>  <div class=\"ulist\"> <ul> <li> <p>ssh://[user@]host.xz[:port]/path/to/repo.git/</p> </li> <li> <p>git://host.xz[:port]/path/to/repo.git/</p> </li> <li> <p>http[s]://host.xz[:port]/path/to/repo.git/</p> </li> <li> <p>ftp[s]://host.xz[:port]/path/to/repo.git/</p> </li> </ul> </div>  <p>An alternative scp-like syntax may also be used with the ssh protocol:</p>  <div class=\"ulist\"> <ul> <li> <p>[user@]host.xz:path/to/repo.git/</p> </li> </ul> </div>  <p>This syntax is only recognized if there are no slashes before the first colon. This helps differentiate a local path that contains a colon. For example the local path <code>foo:bar</code> could be specified as an absolute path or <code>./foo:bar</code> to avoid being misinterpreted as an ssh url.</p>   <p>The ssh and git protocols additionally support ~username expansion:</p>  <div class=\"ulist\"> <ul> <li> <p>ssh://[user@]host.xz[:port]/~[user]/path/to/repo.git/</p> </li> <li> <p>git://host.xz[:port]/~[user]/path/to/repo.git/</p> </li> <li> <p>[user@]host.xz:/~[user]/path/to/repo.git/</p> </li> </ul> </div>  <p>For local repositories, also supported by Git natively, the following syntaxes may be used:</p>  <div class=\"ulist\"> <ul> <li> <p>/path/to/repo.git/</p> </li> <li> <p>file:///path/to/repo.git/</p> </li> </ul> </div>  <p>These two syntaxes are mostly equivalent, except when cloning, when the former implies --local option. See <a href=\"git-clone\">git-clone[1]</a> for details.</p>   <p>When Git doesn’t know how to handle a certain transport protocol, it attempts to use the <code>remote-&lt;transport&gt;</code> remote helper, if one exists. To explicitly request a remote helper, the following syntax may be used:</p>  <div class=\"ulist\"> <ul> <li> <p>&lt;transport&gt;::&lt;address&gt;</p> </li> </ul> </div>  <p>where &lt;address&gt; may be a path, a server and path, or an arbitrary URL-like string recognized by the specific remote helper being invoked. See <a href=\"gitremote-helpers\">gitremote-helpers[1]</a> for details.</p>   <p>If there are a large number of similarly-named remote repositories and you want to use a different format for them (such that the URLs you use will be rewritten into URLs that work), you can create a configuration section of the form:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        [url \"&lt;actual url base&gt;\"]\n                insteadOf = &lt;other url base&gt;</pre> </div> </div>  <p>For example, with this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        [url \"git://git.host.xz/\"]\n                insteadOf = host.xz:/path/to/\n                insteadOf = work:</pre> </div> </div>  <p>a URL like \"work:repo.git\" or like \"host.xz:/path/to/repo.git\" will be rewritten in any context that takes a URL to be \"git://git.host.xz/repo.git\".</p>   <p>If you want to rewrite URLs for push only, you can create a configuration section of the form:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        [url \"&lt;actual url base&gt;\"]\n                pushInsteadOf = &lt;other url base&gt;</pre> </div> </div>  <p>For example, with this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        [url \"ssh://example.org/\"]\n                pushInsteadOf = git://example.org/</pre> </div> </div>  <p>a URL like \"git://example.org/path/to/repo.git\" will be rewritten to \"ssh://example.org/path/to/repo.git\" for pushes, but pulls will still use the original URL.</p> </div>   <h2 id=\"_remotes_a_id_remotes_a\">Remotes</h2> <div class=\"sectionbody\"> <p>The name of one of the following can be used instead of a URL as <code>&lt;repository&gt;</code> argument:</p>  <div class=\"ulist\"> <ul> <li> <p>a remote in the Git configuration file: <code>$GIT_DIR/config</code>,</p> </li> <li> <p>a file in the <code>$GIT_DIR/remotes</code> directory, or</p> </li> <li> <p>a file in the <code>$GIT_DIR/branches</code> directory.</p> </li> </ul> </div>  <p>All of these also allow you to omit the refspec from the command line because they each contain a refspec which git will use by default.</p>  <div class=\"sect2\"> <h3 id=\"_named_remote_in_configuration_file\">Named remote in configuration file</h3>  <p>You can choose to provide the name of a remote which you had previously configured using <a href=\"git-remote\">git-remote[1]</a>, <a href=\"git-config\">git-config[1]</a> or even by a manual edit to the <code>$GIT_DIR/config</code> file. The URL of this remote will be used to access the repository. The refspec of this remote will be used by default when you do not provide a refspec on the command line. The entry in the config file would appear like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        [remote \"&lt;name&gt;\"]\n                url = &lt;url&gt;\n                pushurl = &lt;pushurl&gt;\n                push = &lt;refspec&gt;\n                fetch = &lt;refspec&gt;</pre> </div> </div>  <p>The <code>&lt;pushurl&gt;</code> is used for pushes only. It is optional and defaults to <code>&lt;url&gt;</code>.</p>  </div> <div class=\"sect2\"> <h3 id=\"_named_file_in_code_git_dir_remotes_code\">Named file in <code>$GIT_DIR/remotes</code>\n</h3>  <p>You can choose to provide the name of a file in <code>$GIT_DIR/remotes</code>. The URL in this file will be used to access the repository. The refspec in this file will be used as default when you do not provide a refspec on the command line. This file should have the following format:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        URL: one of the above URL format\n        Push: &lt;refspec&gt;\n        Pull: &lt;refspec&gt;</pre> </div> </div>  <p><code>Push:</code> lines are used by <code>git push</code> and <code>Pull:</code> lines are used by <code>git pull</code> and <code>git fetch</code>. Multiple <code>Push:</code> and <code>Pull:</code> lines may be specified for additional branch mappings.</p>  </div> <div class=\"sect2\"> <h3 id=\"_named_file_in_code_git_dir_branches_code\">Named file in <code>$GIT_DIR/branches</code>\n</h3>  <p>You can choose to provide the name of a file in <code>$GIT_DIR/branches</code>. The URL in this file will be used to access the repository. This file should have the following format:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        &lt;url&gt;#&lt;head&gt;</pre> </div> </div>  <p><code>&lt;url&gt;</code> is required; <code>#&lt;head&gt;</code> is optional.</p>   <p>Depending on the operation, git will use one of the following refspecs, if you don’t provide one on the command line. <code>&lt;branch&gt;</code> is the name of this file in <code>$GIT_DIR/branches</code> and <code>&lt;head&gt;</code> defaults to <code>master</code>.</p>   <p>git fetch uses:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        refs/heads/&lt;head&gt;:refs/heads/&lt;branch&gt;</pre> </div> </div>  <p>git push uses:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        HEAD:refs/heads/&lt;head&gt;</pre> </div> </div> </div>\n</div>   <h2 id=\"_output\">Output</h2> <div class=\"sectionbody\"> <p>The output of \"git push\" depends on the transport method used; this section describes the output when pushing over the Git protocol (either locally or via ssh).</p>   <p>The status of the push is output in tabular form, with each line representing the status of a single ref. Each line is of the form:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre> &lt;flag&gt; &lt;summary&gt; &lt;from&gt; -&gt; &lt;to&gt; (&lt;reason&gt;)</pre> </div> </div>  <p>If --porcelain is used, then each line of the output is of the form:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre> &lt;flag&gt; \\t &lt;from&gt;:&lt;to&gt; \\t &lt;summary&gt; (&lt;reason&gt;)</pre> </div> </div>  <p>The status of up-to-date refs is shown only if --porcelain or --verbose option is used.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">flag</dt> <dd> <p>A single character indicating the status of the ref:</p> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">(space)</dt> <dd> <p>for a successfully pushed fast-forward;</p> </dd> <dt class=\"hdlist1\"><code>+</code></dt> <dd> <p>for a successful forced update;</p> </dd> <dt class=\"hdlist1\"><code>-</code></dt> <dd> <p>for a successfully deleted ref;</p> </dd> <dt class=\"hdlist1\"><code>*</code></dt> <dd> <p>for a successfully pushed new ref;</p> </dd> <dt class=\"hdlist1\"><code>!</code></dt> <dd> <p>for a ref that was rejected or failed to push; and</p> </dd> <dt class=\"hdlist1\"><code>=</code></dt> <dd> <p>for a ref that was up to date and did not need pushing.</p> </dd> </dl> </div> </dd> <dt class=\"hdlist1\">summary</dt> <dd> <p>For a successfully pushed ref, the summary shows the old and new values of the ref in a form suitable for using as an argument to <code>git log</code> (this is <code>&lt;old&gt;..&lt;new&gt;</code> in most cases, and <code>&lt;old&gt;...&lt;new&gt;</code> for forced non-fast-forward updates).</p>  <p>For a failed update, more details are given:</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">rejected</dt> <dd> <p>Git did not try to send the ref at all, typically because it is not a fast-forward and you did not force the update.</p> </dd> <dt class=\"hdlist1\">remote rejected</dt> <dd> <p>The remote end refused the update. Usually caused by a hook on the remote side, or because the remote repository has one of the following safety options in effect: <code>receive.denyCurrentBranch</code> (for pushes to the checked out branch), <code>receive.denyNonFastForwards</code> (for forced non-fast-forward updates), <code>receive.denyDeletes</code> or <code>receive.denyDeleteCurrent</code>. See <a href=\"git-config\">git-config[1]</a>.</p> </dd> <dt class=\"hdlist1\">remote failure</dt> <dd> <p>The remote end did not report the successful update of the ref, perhaps because of a temporary error on the remote side, a break in the network connection, or other transient error.</p> </dd> </dl> </div> </div> </div> </dd> <dt class=\"hdlist1\">from</dt> <dd> <p>The name of the local ref being pushed, minus its <code>refs/&lt;type&gt;/</code> prefix. In the case of deletion, the name of the local ref is omitted.</p> </dd> <dt class=\"hdlist1\">to</dt> <dd> <p>The name of the remote ref being updated, minus its <code>refs/&lt;type&gt;/</code> prefix.</p> </dd> <dt class=\"hdlist1\">reason</dt> <dd> <p>A human-readable explanation. In the case of successfully pushed refs, no explanation is needed. For a failed ref, the reason for failure is described.</p> </dd> </dl> </div>\n</div>   <h2 id=\"_note_about_fast_forwards\">Note about fast-forwards</h2> <div class=\"sectionbody\"> <p>When an update changes a branch (or more in general, a ref) that used to point at commit A to point at another commit B, it is called a fast-forward update if and only if B is a descendant of A.</p>   <p>In a fast-forward update from A to B, the set of commits that the original commit A built on top of is a subset of the commits the new commit B builds on top of. Hence, it does not lose any history.</p>   <p>In contrast, a non-fast-forward update will lose history. For example, suppose you and somebody else started at the same commit X, and you built a history leading to commit B while the other person built a history leading to commit A. The history looks like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>      B\n     /\n ---X---A</pre> </div> </div>  <p>Further suppose that the other person already pushed changes leading to A back to the original repository from which you two obtained the original commit X.</p>   <p>The push done by the other person updated the branch that used to point at commit X to point at commit A. It is a fast-forward.</p>   <p>But if you try to push, you will attempt to update the branch (that now points at A) with commit B. This does <code>not</code> fast-forward. If you did so, the changes introduced by commit A will be lost, because everybody will now start building on top of B.</p>   <p>The command by default does not allow an update that is not a fast-forward to prevent such loss of history.</p>   <p>If you do not want to lose your work (history from X to B) or the work by the other person (history from X to A), you would need to first fetch the history from the repository, create a history that contains changes done by both parties, and push the result back.</p>   <p>You can perform \"git pull\", resolve potential conflicts, and \"git push\" the result. A \"git pull\" will create a merge commit C between commits A and B.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>      B---C\n     /   /\n ---X---A</pre> </div> </div>  <p>Updating A with the resulting merge commit will fast-forward and your push will be accepted.</p>   <p>Alternatively, you can rebase your change between X and B on top of A, with \"git pull --rebase\", and push the result back. The rebase will create a new commit D that builds the change between X and B on top of A.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>      B   D\n     /   /\n ---X---A</pre> </div> </div>  <p>Again, updating A with this commit will fast-forward and your push will be accepted.</p>   <p>There is another common situation where you may encounter non-fast-forward rejection when you try to push, and it is possible even when you are pushing into a repository nobody else pushes into. After you push commit A yourself (in the first picture in this section), replace it with \"git commit --amend\" to produce commit B, and you try to push it out, because forgot that you have pushed A out already. In such a case, and only if you are certain that nobody in the meantime fetched your earlier commit A (and started building on top of it), you can run \"git push --force\" to overwrite it. In other words, \"git push --force\" is a method reserved for a case where you do mean to lose history.</p> </div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>git push</code></dt> <dd> <p>Works like <code>git push &lt;remote&gt;</code>, where &lt;remote&gt; is the current branch’s remote (or <code>origin</code>, if no remote is configured for the current branch).</p> </dd> <dt class=\"hdlist1\"><code>git push origin</code></dt> <dd> <p>Without additional configuration, pushes the current branch to the configured upstream (<code>remote.origin.merge</code> configuration variable) if it has the same name as the current branch, and errors out without pushing otherwise.</p>  <p>The default behavior of this command when no &lt;refspec&gt; is given can be configured by setting the <code>push</code> option of the remote, or the <code>push.default</code> configuration variable.</p>   <p>For example, to default to pushing only the current branch to <code>origin</code> use <code>git config remote.origin.push HEAD</code>. Any valid &lt;refspec&gt; (like the ones in the examples below) can be configured as the default for <code>git push origin</code>.</p>  </dd> <dt class=\"hdlist1\"><code>git push origin :</code></dt> <dd> <p>Push \"matching\" branches to <code>origin</code>. See &lt;refspec&gt; in the <a href=\"#OPTIONS\">OPTIONS</a> section above for a description of \"matching\" branches.</p> </dd> <dt class=\"hdlist1\"><code>git push origin master</code></dt> <dd> <p>Find a ref that matches <code>master</code> in the source repository (most likely, it would find <code>refs/heads/master</code>), and update the same ref (e.g. <code>refs/heads/master</code>) in <code>origin</code> repository with it. If <code>master</code> did not exist remotely, it would be created.</p> </dd> <dt class=\"hdlist1\"><code>git push origin HEAD</code></dt> <dd> <p>A handy way to push the current branch to the same name on the remote.</p> </dd> <dt class=\"hdlist1\"><code>git push mothership master:satellite/master dev:satellite/dev</code></dt> <dd> <p>Use the source ref that matches <code>master</code> (e.g. <code>refs/heads/master</code>) to update the ref that matches <code>satellite/master</code> (most probably <code>refs/remotes/satellite/master</code>) in the <code>mothership</code> repository; do the same for <code>dev</code> and <code>satellite/dev</code>.</p>  <p>This is to emulate <code>git fetch</code> run on the <code>mothership</code> using <code>git\npush</code> that is run in the opposite direction in order to integrate the work done on <code>satellite</code>, and is often necessary when you can only make connection in one way (i.e. satellite can ssh into mothership but mothership cannot initiate connection to satellite because the latter is behind a firewall or does not run sshd).</p>   <p>After running this <code>git push</code> on the <code>satellite</code> machine, you would ssh into the <code>mothership</code> and run <code>git merge</code> there to complete the emulation of <code>git pull</code> that were run on <code>mothership</code> to pull changes made on <code>satellite</code>.</p>  </dd> <dt class=\"hdlist1\"><code>git push origin HEAD:master</code></dt> <dd> <p>Push the current branch to the remote ref matching <code>master</code> in the <code>origin</code> repository. This form is convenient to push the current branch without thinking about its local name.</p> </dd> <dt class=\"hdlist1\"><code>git push origin master:refs/heads/experimental</code></dt> <dd> <p>Create the branch <code>experimental</code> in the <code>origin</code> repository by copying the current <code>master</code> branch. This form is only needed to create a new branch or tag in the remote repository when the local name and the remote name are different; otherwise, the ref name on its own will work.</p> </dd> <dt class=\"hdlist1\"><code>git push origin :experimental</code></dt> <dd> <p>Find a ref that matches <code>experimental</code> in the <code>origin</code> repository (e.g. <code>refs/heads/experimental</code>), and delete it.</p> </dd> <dt class=\"hdlist1\"><code>git push origin +dev:master</code></dt> <dd> <p>Update the origin repository’s master branch with the dev branch, allowing non-fast-forward updates. <strong>This can leave unreferenced commits dangling in the origin repository.</strong> Consider the following situation, where a fast-forward is not possible:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>            o---o---o---A---B  origin/master\n                     \\\n                      X---Y---Z  dev</pre> </div> </div>  <p>The above command would change the origin repository to</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>                      A---B  (unnamed branch)\n                     /\n            o---o---o---X---Y---Z  master</pre> </div> </div>  <p>Commits A and B would no longer belong to a branch with a symbolic name, and so would be unreachable. As such, these commits would be removed by a <code>git gc</code> command on the origin repository.</p>  </dd> </dl> </div></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-push\" class=\"_attribution-link\">https://git-scm.com/docs/git-push</a>\n  </p>\n</div>\n","git-format-patch":"<h1>git-format-patch</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-format-patch - Prepare patches for e-mail submission</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git format-patch [-k] [(-o|--output-directory) &lt;dir&gt; | --stdout]\n                   [--no-thread | --thread[=&lt;style&gt;]]\n                   [(--attach|--inline)[=&lt;boundary&gt;] | --no-attach]\n                   [-s | --signoff]\n                   [--signature=&lt;signature&gt; | --no-signature]\n                   [--signature-file=&lt;file&gt;]\n                   [-n | --numbered | -N | --no-numbered]\n                   [--start-number &lt;n&gt;] [--numbered-files]\n                   [--in-reply-to=Message-Id] [--suffix=.&lt;sfx&gt;]\n                   [--ignore-if-in-upstream]\n                   [--subject-prefix=Subject-Prefix] [(--reroll-count|-v) &lt;n&gt;]\n                   [--to=&lt;email&gt;] [--cc=&lt;email&gt;]\n                   [--[no-]cover-letter] [--quiet] [--notes[=&lt;ref&gt;]]\n                   [&lt;common diff options&gt;]\n                   [ &lt;since&gt; | &lt;revision range&gt; ]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Prepare each commit with its patch in one file per commit, formatted to resemble UNIX mailbox format. The output of this command is convenient for e-mail submission or for use with <code>git am</code>.</p>   <p>There are two ways to specify which commits to operate on.</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>A single commit, &lt;since&gt;, specifies that the commits leading to the tip of the current branch that are not in the history that leads to the &lt;since&gt; to be output.</p> </li> <li> <p>Generic &lt;revision range&gt; expression (see \"SPECIFYING REVISIONS\" section in <a href=\"gitrevisions\">gitrevisions[7]</a>) means the commits in the specified range.</p> </li> </ol> </div>  <p>The first rule takes precedence in the case of a single &lt;commit&gt;. To apply the second rule, i.e., format everything since the beginning of history up until &lt;commit&gt;, use the <code>\\--root</code> option: <code>git format-patch\n--root &lt;commit&gt;</code>. If you want to format only &lt;commit&gt; itself, you can do this with <code>git format-patch -1 &lt;commit&gt;</code>.</p>   <p>By default, each output file is numbered sequentially from 1, and uses the first line of the commit message (massaged for pathname safety) as the filename. With the <code>--numbered-files</code> option, the output file names will only be numbers, without the first line of the commit appended. The names of the output files are printed to standard output, unless the <code>--stdout</code> option is specified.</p>   <p>If <code>-o</code> is specified, output files are created in &lt;dir&gt;. Otherwise they are created in the current working directory. The default path can be set with the <code>format.outputDirectory</code> configuration option. The <code>-o</code> option takes precedence over <code>format.outputDirectory</code>. To store patches in the current working directory even when <code>format.outputDirectory</code> points elsewhere, use <code>-o .</code>.</p>   <p>By default, the subject of a single patch is \"[PATCH] \" followed by the concatenation of lines from the commit message up to the first blank line (see the DISCUSSION section of <a href=\"git-commit\">git-commit[1]</a>).</p>   <p>When multiple patches are output, the subject prefix will instead be \"[PATCH n/m] \". To force 1/1 to be added for a single patch, use <code>-n</code>. To omit patch numbers from the subject, use <code>-N</code>.</p>   <p>If given <code>--thread</code>, <code>git-format-patch</code> will generate <code>In-Reply-To</code> and <code>References</code> headers to make the second and subsequent patch mails appear as replies to the first mail; this also generates a <code>Message-Id</code> header to reference.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\">\n<div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-p</dt> <dt class=\"hdlist1\">--no-stat</dt> <dd> <p>Generate plain patches without any diffstats.</p> </dd> <dt class=\"hdlist1\">-U&lt;n&gt;</dt> <dt class=\"hdlist1\">--unified=&lt;n&gt;</dt> <dd> <p>Generate diffs with &lt;n&gt; lines of context instead of the usual three.</p> </dd> <dt class=\"hdlist1\">--compaction-heuristic</dt> <dt class=\"hdlist1\">--no-compaction-heuristic</dt> <dd> <p>These are to help debugging and tuning an experimental heuristic (which is off by default) that shifts the hunk boundary in an attempt to make the resulting patch easier to read.</p> </dd> <dt class=\"hdlist1\">--minimal</dt> <dd> <p>Spend extra time to make sure the smallest possible diff is produced.</p> </dd> <dt class=\"hdlist1\">--patience</dt> <dd> <p>Generate a diff using the \"patience diff\" algorithm.</p> </dd> <dt class=\"hdlist1\">--histogram</dt> <dd> <p>Generate a diff using the \"histogram diff\" algorithm.</p> </dd> <dt class=\"hdlist1\">--diff-algorithm={patience|minimal|histogram|myers}</dt> <dd> <p>Choose a diff algorithm. The variants are as follows:</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">\n<code>default</code>, <code>myers</code>\n</dt> <dd> <p>The basic greedy diff algorithm. Currently, this is the default.</p> </dd> <dt class=\"hdlist1\"><code>minimal</code></dt> <dd> <p>Spend extra time to make sure the smallest possible diff is produced.</p> </dd> <dt class=\"hdlist1\"><code>patience</code></dt> <dd> <p>Use \"patience diff\" algorithm when generating patches.</p> </dd> <dt class=\"hdlist1\"><code>histogram</code></dt> <dd> <p>This algorithm extends the patience algorithm to \"support low-occurrence common elements\".</p> </dd> </dl> </div> </div> </div>  <p>For instance, if you configured diff.algorithm variable to a non-default value and want to use the default one, then you have to use <code>--diff-algorithm=default</code> option.</p>  </dd> <dt class=\"hdlist1\">--stat[=&lt;width&gt;[,&lt;name-width&gt;[,&lt;count&gt;]]]</dt> <dd> <p>Generate a diffstat. By default, as much space as necessary will be used for the filename part, and the rest for the graph part. Maximum width defaults to terminal width, or 80 columns if not connected to a terminal, and can be overridden by <code>&lt;width&gt;</code>. The width of the filename part can be limited by giving another width <code>&lt;name-width&gt;</code> after a comma. The width of the graph part can be limited by using <code>--stat-graph-width=&lt;width&gt;</code> (affects all commands generating a stat graph) or by setting <code>diff.statGraphWidth=&lt;width&gt;</code> (does not affect <code>git format-patch</code>). By giving a third parameter <code>&lt;count&gt;</code>, you can limit the output to the first <code>&lt;count&gt;</code> lines, followed by <code>...</code> if there are more.</p>  <p>These parameters can also be set individually with <code>--stat-width=&lt;width&gt;</code>, <code>--stat-name-width=&lt;name-width&gt;</code> and <code>--stat-count=&lt;count&gt;</code>.</p>  </dd> <dt class=\"hdlist1\">--numstat</dt> <dd> <p>Similar to <code>--stat</code>, but shows number of added and deleted lines in decimal notation and pathname without abbreviation, to make it more machine friendly. For binary files, outputs two <code>-</code> instead of saying <code>0 0</code>.</p> </dd> <dt class=\"hdlist1\">--shortstat</dt> <dd> <p>Output only the last line of the <code>--stat</code> format containing total number of modified files, as well as number of added and deleted lines.</p> </dd> <dt class=\"hdlist1\">--dirstat[=&lt;param1,param2,…​&gt;]</dt> <dd> <p>Output the distribution of relative amount of changes for each sub-directory. The behavior of <code>--dirstat</code> can be customized by passing it a comma separated list of parameters. The defaults are controlled by the <code>diff.dirstat</code> configuration variable (see <a href=\"git-config\">git-config[1]</a>). The following parameters are available:</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>changes</code></dt> <dd> <p>Compute the dirstat numbers by counting the lines that have been removed from the source, or added to the destination. This ignores the amount of pure code movements within a file. In other words, rearranging lines in a file is not counted as much as other changes. This is the default behavior when no parameter is given.</p> </dd> <dt class=\"hdlist1\"><code>lines</code></dt> <dd> <p>Compute the dirstat numbers by doing the regular line-based diff analysis, and summing the removed/added line counts. (For binary files, count 64-byte chunks instead, since binary files have no natural concept of lines). This is a more expensive <code>--dirstat</code> behavior than the <code>changes</code> behavior, but it does count rearranged lines within a file as much as other changes. The resulting output is consistent with what you get from the other <code>--*stat</code> options.</p> </dd> <dt class=\"hdlist1\"><code>files</code></dt> <dd> <p>Compute the dirstat numbers by counting the number of files changed. Each changed file counts equally in the dirstat analysis. This is the computationally cheapest <code>--dirstat</code> behavior, since it does not have to look at the file contents at all.</p> </dd> <dt class=\"hdlist1\"><code>cumulative</code></dt> <dd> <p>Count changes in a child directory for the parent directory as well. Note that when using <code>cumulative</code>, the sum of the percentages reported may exceed 100%. The default (non-cumulative) behavior can be specified with the <code>noncumulative</code> parameter.</p> </dd> <dt class=\"hdlist1\">&lt;limit&gt;</dt> <dd> <p>An integer parameter specifies a cut-off percent (3% by default). Directories contributing less than this percentage of the changes are not shown in the output.</p> </dd> </dl> </div> </div> </div>  <p>Example: The following will count changed files, while ignoring directories with less than 10% of the total amount of changed files, and accumulating child directory counts in the parent directories: <code>--dirstat=files,10,cumulative</code>.</p>  </dd> <dt class=\"hdlist1\">--summary</dt> <dd> <p>Output a condensed summary of extended header information such as creations, renames and mode changes.</p> </dd> <dt class=\"hdlist1\">--no-renames</dt> <dd> <p>Turn off rename detection, even when the configuration file gives the default to do so.</p> </dd> <dt class=\"hdlist1\">--full-index</dt> <dd> <p>Instead of the first handful of characters, show the full pre- and post-image blob object names on the \"index\" line when generating patch format output.</p> </dd> <dt class=\"hdlist1\">--binary</dt> <dd> <p>In addition to <code>--full-index</code>, output a binary diff that can be applied with <code>git-apply</code>.</p> </dd> <dt class=\"hdlist1\">--abbrev[=&lt;n&gt;]</dt> <dd> <p>Instead of showing the full 40-byte hexadecimal object name in diff-raw format output and diff-tree header lines, show only a partial prefix. This is independent of the <code>--full-index</code> option above, which controls the diff-patch output format. Non default number of digits can be specified with <code>--abbrev=&lt;n&gt;</code>.</p> </dd> <dt class=\"hdlist1\">-B[&lt;n&gt;][/&lt;m&gt;]</dt> <dt class=\"hdlist1\">--break-rewrites[=[&lt;n&gt;][/&lt;m&gt;]]</dt> <dd> <p>Break complete rewrite changes into pairs of delete and create. This serves two purposes:</p>  <p>It affects the way a change that amounts to a total rewrite of a file not as a series of deletion and insertion mixed together with a very few lines that happen to match textually as the context, but as a single deletion of everything old followed by a single insertion of everything new, and the number <code>m</code> controls this aspect of the -B option (defaults to 60%). <code>-B/70%</code> specifies that less than 30% of the original should remain in the result for Git to consider it a total rewrite (i.e. otherwise the resulting patch will be a series of deletion and insertion mixed together with context lines).</p>   <p>When used with -M, a totally-rewritten file is also considered as the source of a rename (usually -M only considers a file that disappeared as the source of a rename), and the number <code>n</code> controls this aspect of the -B option (defaults to 50%). <code>-B20%</code> specifies that a change with addition and deletion compared to 20% or more of the file’s size are eligible for being picked up as a possible source of a rename to another file.</p>  </dd> <dt class=\"hdlist1\">-M[&lt;n&gt;]</dt> <dt class=\"hdlist1\">--find-renames[=&lt;n&gt;]</dt> <dd> <p>Detect renames. If <code>n</code> is specified, it is a threshold on the similarity index (i.e. amount of addition/deletions compared to the file’s size). For example, <code>-M90%</code> means Git should consider a delete/add pair to be a rename if more than 90% of the file hasn’t changed. Without a <code>%</code> sign, the number is to be read as a fraction, with a decimal point before it. I.e., <code>-M5</code> becomes 0.5, and is thus the same as <code>-M50%</code>. Similarly, <code>-M05</code> is the same as <code>-M5%</code>. To limit detection to exact renames, use <code>-M100%</code>. The default similarity index is 50%.</p> </dd> <dt class=\"hdlist1\">-C[&lt;n&gt;]</dt> <dt class=\"hdlist1\">--find-copies[=&lt;n&gt;]</dt> <dd> <p>Detect copies as well as renames. See also <code>--find-copies-harder</code>. If <code>n</code> is specified, it has the same meaning as for <code>-M&lt;n&gt;</code>.</p> </dd> <dt class=\"hdlist1\">--find-copies-harder</dt> <dd> <p>For performance reasons, by default, <code>-C</code> option finds copies only if the original file of the copy was modified in the same changeset. This flag makes the command inspect unmodified files as candidates for the source of copy. This is a very expensive operation for large projects, so use it with caution. Giving more than one <code>-C</code> option has the same effect.</p> </dd> <dt class=\"hdlist1\">-D</dt> <dt class=\"hdlist1\">--irreversible-delete</dt> <dd> <p>Omit the preimage for deletes, i.e. print only the header but not the diff between the preimage and <code>/dev/null</code>. The resulting patch is not meant to be applied with <code>patch</code> or <code>git apply</code>; this is solely for people who want to just concentrate on reviewing the text after the change. In addition, the output obviously lack enough information to apply such a patch in reverse, even manually, hence the name of the option.</p>  <p>When used together with <code>-B</code>, omit also the preimage in the deletion part of a delete/create pair.</p>  </dd> <dt class=\"hdlist1\">-l&lt;num&gt;</dt> <dd> <p>The <code>-M</code> and <code>-C</code> options require O(n^2) processing time where n is the number of potential rename/copy targets. This option prevents rename/copy detection from running if the number of rename/copy targets exceeds the specified number.</p> </dd> <dt class=\"hdlist1\">-O&lt;orderfile&gt;</dt> <dd> <p>Output the patch in the order specified in the &lt;orderfile&gt;, which has one shell glob pattern per line. This overrides the <code>diff.orderFile</code> configuration variable (see <a href=\"git-config\">git-config[1]</a>). To cancel <code>diff.orderFile</code>, use <code>-O/dev/null</code>.</p> </dd> <dt class=\"hdlist1\">-a</dt> <dt class=\"hdlist1\">--text</dt> <dd> <p>Treat all files as text.</p> </dd> <dt class=\"hdlist1\">--ignore-space-at-eol</dt> <dd> <p>Ignore changes in whitespace at EOL.</p> </dd> <dt class=\"hdlist1\">-b</dt> <dt class=\"hdlist1\">--ignore-space-change</dt> <dd> <p>Ignore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent.</p> </dd> <dt class=\"hdlist1\">-w</dt> <dt class=\"hdlist1\">--ignore-all-space</dt> <dd> <p>Ignore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none.</p> </dd> <dt class=\"hdlist1\">--ignore-blank-lines</dt> <dd> <p>Ignore changes whose lines are all blank.</p> </dd> <dt class=\"hdlist1\">--inter-hunk-context=&lt;lines&gt;</dt> <dd> <p>Show the context between diff hunks, up to the specified number of lines, thereby fusing hunks that are close to each other.</p> </dd> <dt class=\"hdlist1\">-W</dt> <dt class=\"hdlist1\">--function-context</dt> <dd> <p>Show whole surrounding functions of changes.</p> </dd> <dt class=\"hdlist1\">--ext-diff</dt> <dd> <p>Allow an external diff helper to be executed. If you set an external diff driver with <a href=\"gitattributes\">gitattributes[5]</a>, you need to use this option with <a href=\"git-log\">git-log[1]</a> and friends.</p> </dd> <dt class=\"hdlist1\">--no-ext-diff</dt> <dd> <p>Disallow external diff drivers.</p> </dd> <dt class=\"hdlist1\">--textconv</dt> <dt class=\"hdlist1\">--no-textconv</dt> <dd> <p>Allow (or disallow) external text conversion filters to be run when comparing binary files. See <a href=\"gitattributes\">gitattributes[5]</a> for details. Because textconv filters are typically a one-way conversion, the resulting diff is suitable for human consumption, but cannot be applied. For this reason, textconv filters are enabled by default only for <a href=\"git-diff\">git-diff[1]</a> and <a href=\"git-log\">git-log[1]</a>, but not for <a href=\"git-format-patch\">git-format-patch[1]</a> or diff plumbing commands.</p> </dd> <dt class=\"hdlist1\">--ignore-submodules[=&lt;when&gt;]</dt> <dd> <p>Ignore changes to submodules in the diff generation. &lt;when&gt; can be either \"none\", \"untracked\", \"dirty\" or \"all\", which is the default. Using \"none\" will consider the submodule modified when it either contains untracked or modified files or its HEAD differs from the commit recorded in the superproject and can be used to override any settings of the <code>ignore</code> option in <a href=\"git-config\">git-config[1]</a> or <a href=\"gitmodules\">gitmodules[5]</a>. When \"untracked\" is used submodules are not considered dirty when they only contain untracked content (but they are still scanned for modified content). Using \"dirty\" ignores all changes to the work tree of submodules, only changes to the commits stored in the superproject are shown (this was the behavior until 1.7.0). Using \"all\" hides all changes to submodules.</p> </dd> <dt class=\"hdlist1\">--src-prefix=&lt;prefix&gt;</dt> <dd> <p>Show the given source prefix instead of \"a/\".</p> </dd> <dt class=\"hdlist1\">--dst-prefix=&lt;prefix&gt;</dt> <dd> <p>Show the given destination prefix instead of \"b/\".</p> </dd> <dt class=\"hdlist1\">--no-prefix</dt> <dd> <p>Do not show any source or destination prefix.</p> </dd> </dl> </div>  <p>For more detailed explanation on these common options, see also <a href=\"gitdiffcore\">gitdiffcore[7]</a>.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-&lt;n&gt;</dt> <dd> <p>Prepare patches from the topmost &lt;n&gt; commits.</p> </dd> <dt class=\"hdlist1\">-o &lt;dir&gt;</dt> <dt class=\"hdlist1\">--output-directory &lt;dir&gt;</dt> <dd> <p>Use &lt;dir&gt; to store the resulting files, instead of the current working directory.</p> </dd> <dt class=\"hdlist1\">-n</dt> <dt class=\"hdlist1\">--numbered</dt> <dd> <p>Name output in <code>[PATCH n/m]</code> format, even with a single patch.</p> </dd> <dt class=\"hdlist1\">-N</dt> <dt class=\"hdlist1\">--no-numbered</dt> <dd> <p>Name output in <code>[PATCH]</code> format.</p> </dd> <dt class=\"hdlist1\">--start-number &lt;n&gt;</dt> <dd> <p>Start numbering the patches at &lt;n&gt; instead of 1.</p> </dd> <dt class=\"hdlist1\">--numbered-files</dt> <dd> <p>Output file names will be a simple number sequence without the default first line of the commit appended.</p> </dd> <dt class=\"hdlist1\">-k</dt> <dt class=\"hdlist1\">--keep-subject</dt> <dd> <p>Do not strip/add <code>[PATCH]</code> from the first line of the commit log message.</p> </dd> <dt class=\"hdlist1\">-s</dt> <dt class=\"hdlist1\">--signoff</dt> <dd> <p>Add <code>Signed-off-by:</code> line to the commit message, using the committer identity of yourself. See the signoff option in <a href=\"git-commit\">git-commit[1]</a> for more information.</p> </dd> <dt class=\"hdlist1\">--stdout</dt> <dd> <p>Print all commits to the standard output in mbox format, instead of creating a file for each one.</p> </dd> <dt class=\"hdlist1\">--attach[=&lt;boundary&gt;]</dt> <dd> <p>Create multipart/mixed attachment, the first part of which is the commit message and the patch itself in the second part, with <code>Content-Disposition: attachment</code>.</p> </dd> <dt class=\"hdlist1\">--no-attach</dt> <dd> <p>Disable the creation of an attachment, overriding the configuration setting.</p> </dd> <dt class=\"hdlist1\">--inline[=&lt;boundary&gt;]</dt> <dd> <p>Create multipart/mixed attachment, the first part of which is the commit message and the patch itself in the second part, with <code>Content-Disposition: inline</code>.</p> </dd> <dt class=\"hdlist1\">--thread[=&lt;style&gt;]</dt> <dt class=\"hdlist1\">--no-thread</dt> <dd> <p>Controls addition of <code>In-Reply-To</code> and <code>References</code> headers to make the second and subsequent mails appear as replies to the first. Also controls generation of the <code>Message-Id</code> header to reference.</p>  <p>The optional &lt;style&gt; argument can be either <code>shallow</code> or <code>deep</code>. <code>shallow</code> threading makes every mail a reply to the head of the series, where the head is chosen from the cover letter, the <code>--in-reply-to</code>, and the first patch mail, in this order. <code>deep</code> threading makes every mail a reply to the previous one.</p>   <p>The default is <code>--no-thread</code>, unless the <code>format.thread</code> configuration is set. If <code>--thread</code> is specified without a style, it defaults to the style specified by <code>format.thread</code> if any, or else <code>shallow</code>.</p>   <p>Beware that the default for <code>git send-email</code> is to thread emails itself. If you want <code>git format-patch</code> to take care of threading, you will want to ensure that threading is disabled for <code>git send-email</code>.</p>  </dd> <dt class=\"hdlist1\">--in-reply-to=Message-Id</dt> <dd> <p>Make the first mail (or all the mails with <code>--no-thread</code>) appear as a reply to the given Message-Id, which avoids breaking threads to provide a new patch series.</p> </dd> <dt class=\"hdlist1\">--ignore-if-in-upstream</dt> <dd> <p>Do not include a patch that matches a commit in &lt;until&gt;..&lt;since&gt;. This will examine all patches reachable from &lt;since&gt; but not from &lt;until&gt; and compare them with the patches being generated, and any patch that matches is ignored.</p> </dd> <dt class=\"hdlist1\">--subject-prefix=&lt;Subject-Prefix&gt;</dt> <dd> <p>Instead of the standard <code>[PATCH]</code> prefix in the subject line, instead use <code>[&lt;Subject-Prefix&gt;]</code>. This allows for useful naming of a patch series, and can be combined with the <code>--numbered</code> option.</p> </dd> <dt class=\"hdlist1\">-v &lt;n&gt;</dt> <dt class=\"hdlist1\">--reroll-count=&lt;n&gt;</dt> <dd> <p>Mark the series as the &lt;n&gt;-th iteration of the topic. The output filenames have <code>v&lt;n&gt;</code> prepended to them, and the subject prefix (\"PATCH\" by default, but configurable via the <code>--subject-prefix</code> option) has ` v&lt;n&gt;` appended to it. E.g. <code>--reroll-count=4</code> may produce <code>v4-0001-add-makefile.patch</code> file that has \"Subject: [PATCH v4 1/20] Add makefile\" in it.</p> </dd> <dt class=\"hdlist1\">--to=&lt;email&gt;</dt> <dd> <p>Add a <code>To:</code> header to the email headers. This is in addition to any configured headers, and may be used multiple times. The negated form <code>--no-to</code> discards all <code>To:</code> headers added so far (from config or command line).</p> </dd> <dt class=\"hdlist1\">--cc=&lt;email&gt;</dt> <dd> <p>Add a <code>Cc:</code> header to the email headers. This is in addition to any configured headers, and may be used multiple times. The negated form <code>--no-cc</code> discards all <code>Cc:</code> headers added so far (from config or command line).</p> </dd> <dt class=\"hdlist1\">--from</dt> <dt class=\"hdlist1\">--from=&lt;ident&gt;</dt> <dd> <p>Use <code>ident</code> in the <code>From:</code> header of each commit email. If the author ident of the commit is not textually identical to the provided <code>ident</code>, place a <code>From:</code> header in the body of the message with the original author. If no <code>ident</code> is given, use the committer ident.</p>  <p>Note that this option is only useful if you are actually sending the emails and want to identify yourself as the sender, but retain the original author (and <code>git am</code> will correctly pick up the in-body header). Note also that <code>git send-email</code> already handles this transformation for you, and this option should not be used if you are feeding the result to <code>git send-email</code>.</p>  </dd> <dt class=\"hdlist1\">--add-header=&lt;header&gt;</dt> <dd> <p>Add an arbitrary header to the email headers. This is in addition to any configured headers, and may be used multiple times. For example, <code>--add-header=\"Organization: git-foo\"</code>. The negated form <code>--no-add-header</code> discards <strong>all</strong> (<code>To:</code>, <code>Cc:</code>, and custom) headers added so far from config or command line.</p> </dd> <dt class=\"hdlist1\">--[no-]cover-letter</dt> <dd> <p>In addition to the patches, generate a cover letter file containing the branch description, shortlog and the overall diffstat. You can fill in a description in the file before sending it out.</p> </dd> <dt class=\"hdlist1\">--notes[=&lt;ref&gt;]</dt> <dd> <p>Append the notes (see <a href=\"git-notes\">git-notes[1]</a>) for the commit after the three-dash line.</p>  <p>The expected use case of this is to write supporting explanation for the commit that does not belong to the commit log message proper, and include it with the patch submission. While one can simply write these explanations after <code>format-patch</code> has run but before sending, keeping them as Git notes allows them to be maintained between versions of the patch series (but see the discussion of the <code>notes.rewrite</code> configuration options in <a href=\"git-notes\">git-notes[1]</a> to use this workflow).</p>  </dd> <dt class=\"hdlist1\">--[no]-signature=&lt;signature&gt;</dt> <dd> <p>Add a signature to each message produced. Per RFC 3676 the signature is separated from the body by a line with '-- ' on it. If the signature option is omitted the signature defaults to the Git version number.</p> </dd> <dt class=\"hdlist1\">--signature-file=&lt;file&gt;</dt> <dd> <p>Works just like --signature except the signature is read from a file.</p> </dd> <dt class=\"hdlist1\">--suffix=.&lt;sfx&gt;</dt> <dd> <p>Instead of using <code>.patch</code> as the suffix for generated filenames, use specified suffix. A common alternative is <code>--suffix=.txt</code>. Leaving this empty will remove the <code>.patch</code> suffix.</p>  <p>Note that the leading character does not have to be a dot; for example, you can use <code>--suffix=-patch</code> to get <code>0001-description-of-my-change-patch</code>.</p>  </dd> <dt class=\"hdlist1\">-q</dt> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>Do not print the names of the generated files to standard output.</p> </dd> <dt class=\"hdlist1\">--no-binary</dt> <dd> <p>Do not output contents of changes in binary files, instead display a notice that those files changed. Patches generated using this option cannot be applied properly, but they are still useful for code review.</p> </dd> <dt class=\"hdlist1\">--zero-commit</dt> <dd> <p>Output an all-zero hash in each patch’s From header instead of the hash of the commit.</p> </dd> <dt class=\"hdlist1\">--base=&lt;commit&gt;</dt> <dd> <p>Record the base tree information to identify the state the patch series applies to. See the BASE TREE INFORMATION section below for details.</p> </dd> <dt class=\"hdlist1\">--root</dt> <dd> <p>Treat the revision argument as a &lt;revision range&gt;, even if it is just a single commit (that would normally be treated as a &lt;since&gt;). Note that root commits included in the specified range are always formatted as creation patches, independently of this flag.</p> </dd> </dl> </div>\n</div>   <h2 id=\"_configuration\">Configuration</h2> <div class=\"sectionbody\"> <p>You can specify extra mail header lines to be added to each message, defaults for the subject prefix and file suffix, number patches when outputting more than one patch, add \"To\" or \"Cc:\" headers, configure attachments, and sign off patches with configuration variables.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>[format]\n        headers = \"Organization: git-foo\\n\"\n        subjectPrefix = CHANGE\n        suffix = .txt\n        numbered = auto\n        to = &lt;email&gt;\n        cc = &lt;email&gt;\n        attach [ = mime-boundary-string ]\n        signOff = true\n        coverletter = auto</pre> </div> </div>\n</div>   <h2 id=\"_discussion\">Discussion</h2> <div class=\"sectionbody\"> <p>The patch produced by <code>git format-patch</code> is in UNIX mailbox format, with a fixed \"magic\" time stamp to indicate that the file is output from format-patch rather than a real mailbox, like so:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>From 8f72bad1baf19a53459661343e21d6491c3908d3 Mon Sep 17 00:00:00 2001\nFrom: Tony Luck &lt;tony.luck@intel.com&gt;\nDate: Tue, 13 Jul 2010 11:42:54 -0700\nSubject: [PATCH] =?UTF-8?q?[IA64]=20Put=20ia64=20config=20files=20on=20the=20?=\n =?UTF-8?q?Uwe=20Kleine-K=C3=B6nig=20diet?=\nMIME-Version: 1.0\nContent-Type: text/plain; charset=UTF-8\nContent-Transfer-Encoding: 8bit\n\narch/arm config files were slimmed down using a python script\n(See commit c2330e286f68f1c408b4aa6515ba49d57f05beae comment)\n\nDo the same for ia64 so we can have sleek &amp; trim looking\n...</pre> </div> </div>  <p>Typically it will be placed in a MUA’s drafts folder, edited to add timely commentary that should not go in the changelog after the three dashes, and then sent as a message whose body, in our example, starts with \"arch/arm config files were…​\". On the receiving end, readers can save interesting patches in a UNIX mailbox and apply them with <a href=\"git-am\">git-am[1]</a>.</p>   <p>When a patch is part of an ongoing discussion, the patch generated by <code>git format-patch</code> can be tweaked to take advantage of the <code>git am --scissors</code> feature. After your response to the discussion comes a line that consists solely of \"<code>-- &gt;8 --</code>\" (scissors and perforation), followed by the patch with unnecessary header fields removed:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>...\n&gt; So we should do such-and-such.\n\nMakes sense to me.  How about this patch?\n\n-- &gt;8 --\nSubject: [IA64] Put ia64 config files on the Uwe Kleine-K��nig diet\n\narch/arm config files were slimmed down using a python script\n...</pre> </div> </div>  <p>When sending a patch this way, most often you are sending your own patch, so in addition to the \"<code>From $SHA1 $magic_timestamp</code>\" marker you should omit <code>From:</code> and <code>Date:</code> lines from the patch file. The patch title is likely to be different from the subject of the discussion the patch is in response to, so it is likely that you would want to keep the Subject: line, like the example above.</p>  <div class=\"sect2\"> <h3 id=\"_checking_for_patch_corruption\">Checking for patch corruption</h3>  <p>Many mailers if not set up properly will corrupt whitespace. Here are two common types of corruption:</p>  <div class=\"ulist\"> <ul> <li> <p>Empty context lines that do not have <code>any</code> whitespace.</p> </li> <li> <p>Non-empty context lines that have one extra whitespace at the beginning.</p> </li> </ul> </div>  <p>One way to test if your MUA is set up correctly is:</p>  <div class=\"ulist\"> <ul> <li> <p>Send the patch to yourself, exactly the way you would, except with To: and Cc: lines that do not contain the list and maintainer address.</p> </li> <li> <p>Save that patch to a file in UNIX mailbox format. Call it a.patch, say.</p> </li> <li> <p>Apply it:</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>$ git fetch &lt;project&gt; master:test-apply\n$ git checkout test-apply\n$ git reset --hard\n$ git am a.patch</pre> </div> </div> </li> </ul> </div>  <p>If it does not apply correctly, there can be various reasons.</p>  <div class=\"ulist\"> <ul> <li> <p>The patch itself does not apply cleanly. That is <code>bad</code> but does not have much to do with your MUA. You might want to rebase the patch with <a href=\"git-rebase\">git-rebase[1]</a> before regenerating it in this case.</p> </li> <li> <p>The MUA corrupted your patch; \"am\" would complain that the patch does not apply. Look in the .git/rebase-apply/ subdirectory and see what <code>patch</code> file contains and check for the common corruption patterns mentioned above.</p> </li> <li> <p>While at it, check the <code>info</code> and <code>final-commit</code> files as well. If what is in <code>final-commit</code> is not exactly what you would want to see in the commit log message, it is very likely that the receiver would end up hand editing the log message when applying your patch. Things like \"Hi, this is my first patch.\\n\" in the patch e-mail should come after the three-dash line that signals the end of the commit message.</p> </li> </ul> </div> </div>\n</div>   <h2 id=\"_mua_specific_hints\">Mua-specific hints</h2> <div class=\"sectionbody\"> <p>Here are some hints on how to successfully submit patches inline using various mailers.</p>  <div class=\"sect2\"> <h3 id=\"_gmail\">GMail</h3>  <p>GMail does not have any way to turn off line wrapping in the web interface, so it will mangle any emails that you send. You can however use \"git send-email\" and send your patches through the GMail SMTP server, or use any IMAP email client to connect to the google IMAP server and forward the emails through that.</p>   <p>For hints on using <code>git send-email</code> to send your patches through the GMail SMTP server, see the EXAMPLE section of <a href=\"git-send-email\">git-send-email[1]</a>.</p>   <p>For hints on submission using the IMAP interface, see the EXAMPLE section of <a href=\"git-imap-send\">git-imap-send[1]</a>.</p>  </div> <div class=\"sect2\"> <h3 id=\"_thunderbird\">Thunderbird</h3>  <p>By default, Thunderbird will both wrap emails as well as flag them as being <code>format=flowed</code>, both of which will make the resulting email unusable by Git.</p>   <p>There are three different approaches: use an add-on to turn off line wraps, configure Thunderbird to not mangle patches, or use an external editor to keep Thunderbird from mangling the patches.</p>  <div class=\"sect3\"> <h4 id=\"_approach_1_add_on\">Approach #1 (add-on)</h4>  <p>Install the Toggle Word Wrap add-on that is available from <a href=\"https://addons.mozilla.org/thunderbird/addon/toggle-word-wrap/\" class=\"bare\">https://addons.mozilla.org/thunderbird/addon/toggle-word-wrap/</a> It adds a menu entry \"Enable Word Wrap\" in the composer’s \"Options\" menu that you can tick off. Now you can compose the message as you otherwise do (cut + paste, <code>git format-patch</code> | <code>git imap-send</code>, etc), but you have to insert line breaks manually in any text that you type.</p>  </div> <div class=\"sect3\"> <h4 id=\"_approach_2_configuration\">Approach #2 (configuration)</h4>  <p>Three steps:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>Configure your mail server composition as plain text: Edit…​Account Settings…​Composition &amp; Addressing, uncheck \"Compose Messages in HTML\".</p> </li> <li> <p>Configure your general composition window to not wrap.</p>  <p>In Thunderbird 2: Edit..Preferences..Composition, wrap plain text messages at 0</p>   <p>In Thunderbird 3: Edit..Preferences..Advanced..Config Editor. Search for \"mail.wrap_long_lines\". Toggle it to make sure it is set to <code>false</code>. Also, search for \"mailnews.wraplength\" and set the value to 0.</p>  </li> <li> <p>Disable the use of format=flowed: Edit..Preferences..Advanced..Config Editor. Search for \"mailnews.send_plaintext_flowed\". Toggle it to make sure it is set to <code>false</code>.</p> </li> </ol> </div>  <p>After that is done, you should be able to compose email as you otherwise would (cut + paste, <code>git format-patch</code> | <code>git imap-send</code>, etc), and the patches will not be mangled.</p>  </div> <div class=\"sect3\"> <h4 id=\"_approach_3_external_editor\">Approach #3 (external editor)</h4>  <p>The following Thunderbird extensions are needed: AboutConfig from <a href=\"http://aboutconfig.mozdev.org/\" class=\"bare\">http://aboutconfig.mozdev.org/</a> and External Editor from <a href=\"http://globs.org/articles.php?lng=en&amp;pg=8\" class=\"bare\">http://globs.org/articles.php?lng=en&amp;pg=8</a></p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>Prepare the patch as a text file using your method of choice.</p> </li> <li> <p>Before opening a compose window, use Edit→Account Settings to uncheck the \"Compose messages in HTML format\" setting in the \"Composition &amp; Addressing\" panel of the account to be used to send the patch.</p> </li> <li> <p>In the main Thunderbird window, <code>before</code> you open the compose window for the patch, use Tools→about:config to set the following to the indicated values:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>        mailnews.send_plaintext_flowed  =&gt; false\n        mailnews.wraplength             =&gt; 0</pre> </div> </div> </li> <li> <p>Open a compose window and click the external editor icon.</p> </li> <li> <p>In the external editor window, read in the patch file and exit the editor normally.</p> </li> </ol> </div>  <p>Side note: it may be possible to do step 2 with about:config and the following settings but no one’s tried yet.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        mail.html_compose                       =&gt; false\n        mail.identity.default.compose_html      =&gt; false\n        mail.identity.id?.compose_html          =&gt; false</pre> </div> </div>  <p>There is a script in contrib/thunderbird-patch-inline which can help you include patches with Thunderbird in an easy way. To use it, do the steps above and then use the script as the external editor.</p>  </div> </div> <div class=\"sect2\"> <h3 id=\"_kmail\">KMail</h3>  <p>This should help you to submit patches inline using KMail.</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>Prepare the patch as a text file.</p> </li> <li> <p>Click on New Mail.</p> </li> <li> <p>Go under \"Options\" in the Composer window and be sure that \"Word wrap\" is not set.</p> </li> <li> <p>Use Message → Insert file…​ and insert the patch.</p> </li> <li> <p>Back in the compose window: add whatever other text you wish to the message, complete the addressing and subject fields, and press send.</p> </li> </ol> </div> </div>\n</div>   <h2 id=\"_base_tree_information\">Base tree information</h2> <div class=\"sectionbody\"> <p>The base tree information block is used for maintainers or third party testers to know the exact state the patch series applies to. It consists of the <code>base commit</code>, which is a well-known commit that is part of the stable part of the project history everybody else works off of, and zero or more <code>prerequisite patches</code>, which are well-known patches in flight that is not yet part of the <code>base commit</code> that need to be applied on top of <code>base commit</code> in topological order before the patches can be applied.</p>   <p>The <code>base commit</code> is shown as \"base-commit: \" followed by the 40-hex of the commit object name. A <code>prerequisite patch</code> is shown as \"prerequisite-patch-id: \" followed by the 40-hex <code>patch id</code>, which can be obtained by passing the patch through the <code>git patch-id --stable</code> command.</p>   <p>Imagine that on top of the public commit P, you applied well-known patches X, Y and Z from somebody else, and then built your three-patch series A, B, C, the history would be like:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>---P---X---Y---Z---A---B---C</pre> </div> </div>  <p>With <code>git format-patch --base=P -3 C</code> (or variants thereof, e.g. with <code>--cover-letter</code> of using <code>Z..C</code> instead of <code>-3 C</code> to specify the range), the base tree information block is shown at the end of the first message the command outputs (either the first patch, or the cover letter), like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>base-commit: P\nprerequisite-patch-id: X\nprerequisite-patch-id: Y\nprerequisite-patch-id: Z</pre> </div> </div>  <p>For non-linear topology, such as</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>---P---X---A---M---C\n    \\         /\n     Y---Z---B</pre> </div> </div>  <p>You can also use <code>git format-patch --base=P -3 C</code> to generate patches for A, B and C, and the identifiers for P, X, Y, Z are appended at the end of the first message.</p>   <p>If set <code>--base=auto</code> in cmdline, it will track base commit automatically, the base commit will be the merge base of tip commit of the remote-tracking branch and revision-range specified in cmdline. For a local branch, you need to track a remote branch by <code>git branch\n--set-upstream-to</code> before using this option.</p> </div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"><div class=\"ulist\"> <ul> <li> <p>Extract commits between revisions R1 and R2, and apply them on top of the current branch using <code>git am</code> to cherry-pick them:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git format-patch -k --stdout R1..R2 | git am -3 -k</pre> </div> </div> </li> <li> <p>Extract all commits which are in the current branch but not in the origin branch:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git format-patch origin</pre> </div> </div>  <p>For each commit a separate file is created in the current directory.</p>  </li> <li> <p>Extract all commits that lead to <code>origin</code> since the inception of the project:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git format-patch --root origin</pre> </div> </div> </li> <li> <p>The same as the previous one:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git format-patch -M -B origin</pre> </div> </div>  <p>Additionally, it detects and handles renames and complete rewrites intelligently to produce a renaming patch. A renaming patch reduces the amount of text output, and generally makes it easier to review. Note that non-Git \"patch\" programs won’t understand renaming patches, so use it only when you know the recipient uses Git to apply your patch.</p>  </li> <li> <p>Extract three topmost commits from the current branch and format them as e-mailable patches:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git format-patch -3</pre> </div> </div> </li> </ul> </div></div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-am\">git-am[1]</a>, <a href=\"git-send-email\">git-send-email[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-format-patch\" class=\"_attribution-link\">https://git-scm.com/docs/git-format-patch</a>\n  </p>\n</div>\n","git-filter-branch":"<h1>git-filter-branch</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-filter-branch - Rewrite branches</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git filter-branch [--env-filter &lt;command&gt;] [--tree-filter &lt;command&gt;]\n        [--index-filter &lt;command&gt;] [--parent-filter &lt;command&gt;]\n        [--msg-filter &lt;command&gt;] [--commit-filter &lt;command&gt;]\n        [--tag-name-filter &lt;command&gt;] [--subdirectory-filter &lt;directory&gt;]\n        [--prune-empty]\n        [--original &lt;namespace&gt;] [-d &lt;directory&gt;] [-f | --force]\n        [--] [&lt;rev-list options&gt;…​]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Lets you rewrite Git revision history by rewriting the branches mentioned in the &lt;rev-list options&gt;, applying custom filters on each revision. Those filters can modify each tree (e.g. removing a file or running a perl rewrite on all files) or information about each commit. Otherwise, all information (including original commit times or merge information) will be preserved.</p>   <p>The command will only rewrite the <code>positive</code> refs mentioned in the command line (e.g. if you pass <code>a..b</code>, only <code>b</code> will be rewritten). If you specify no filters, the commits will be recommitted without any changes, which would normally have no effect. Nevertheless, this may be useful in the future for compensating for some Git bugs or such, therefore such a usage is permitted.</p>   <p><strong>NOTE</strong>: This command honors <code>.git/info/grafts</code> file and refs in the <code>refs/replace/</code> namespace. If you have any grafts or replacement refs defined, running this command will make them permanent.</p>   <p><strong>WARNING</strong>! The rewritten history will have different object names for all the objects and will not converge with the original branch. You will not be able to easily push and distribute the rewritten branch on top of the original branch. Please do not use this command if you do not know the full implications, and avoid using it anyway, if a simple single commit would suffice to fix your problem. (See the \"RECOVERING FROM UPSTREAM REBASE\" section in <a href=\"git-rebase\">git-rebase[1]</a> for further information about rewriting published history.)</p>   <p>Always verify that the rewritten version is correct: The original refs, if different from the rewritten ones, will be stored in the namespace <code>refs/original/</code>.</p>   <p>Note that since this operation is very I/O expensive, it might be a good idea to redirect the temporary directory off-disk with the <code>-d</code> option, e.g. on tmpfs. Reportedly the speedup is very noticeable.</p>  <div class=\"sect2\"> <h3 id=\"_filters\">Filters</h3>  <p>The filters are applied in the order as listed below. The &lt;command&gt; argument is always evaluated in the shell context using the <code>eval</code> command (with the notable exception of the commit filter, for technical reasons). Prior to that, the <code>$GIT_COMMIT</code> environment variable will be set to contain the id of the commit being rewritten. Also, GIT_AUTHOR_NAME, GIT_AUTHOR_EMAIL, GIT_AUTHOR_DATE, GIT_COMMITTER_NAME, GIT_COMMITTER_EMAIL, and GIT_COMMITTER_DATE are taken from the current commit and exported to the environment, in order to affect the author and committer identities of the replacement commit created by <a href=\"git-commit-tree\">git-commit-tree[1]</a> after the filters have run.</p>   <p>If any evaluation of &lt;command&gt; returns a non-zero exit status, the whole operation will be aborted.</p>   <p>A <code>map</code> function is available that takes an \"original sha1 id\" argument and outputs a \"rewritten sha1 id\" if the commit has been already rewritten, and \"original sha1 id\" otherwise; the <code>map</code> function can return several ids on separate lines if your commit filter emitted multiple commits.</p>  </div>\n</div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\">\n<div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--env-filter &lt;command&gt;</dt> <dd> <p>This filter may be used if you only need to modify the environment in which the commit will be performed. Specifically, you might want to rewrite the author/committer name/email/time environment variables (see <a href=\"git-commit-tree\">git-commit-tree[1]</a> for details). Do not forget to re-export the variables.</p> </dd> <dt class=\"hdlist1\">--tree-filter &lt;command&gt;</dt> <dd> <p>This is the filter for rewriting the tree and its contents. The argument is evaluated in shell with the working directory set to the root of the checked out tree. The new tree is then used as-is (new files are auto-added, disappeared files are auto-removed - neither .gitignore files nor any other ignore rules <strong>HAVE ANY EFFECT</strong>!).</p> </dd> <dt class=\"hdlist1\">--index-filter &lt;command&gt;</dt> <dd> <p>This is the filter for rewriting the index. It is similar to the tree filter but does not check out the tree, which makes it much faster. Frequently used with <code>git rm --cached\n--ignore-unmatch ...</code>, see EXAMPLES below. For hairy cases, see <a href=\"git-update-index\">git-update-index[1]</a>.</p> </dd> <dt class=\"hdlist1\">--parent-filter &lt;command&gt;</dt> <dd> <p>This is the filter for rewriting the commit’s parent list. It will receive the parent string on stdin and shall output the new parent string on stdout. The parent string is in the format described in <a href=\"git-commit-tree\">git-commit-tree[1]</a>: empty for the initial commit, \"-p parent\" for a normal commit and \"-p parent1 -p parent2 -p parent3 …​\" for a merge commit.</p> </dd> <dt class=\"hdlist1\">--msg-filter &lt;command&gt;</dt> <dd> <p>This is the filter for rewriting the commit messages. The argument is evaluated in the shell with the original commit message on standard input; its standard output is used as the new commit message.</p> </dd> <dt class=\"hdlist1\">--commit-filter &lt;command&gt;</dt> <dd> <p>This is the filter for performing the commit. If this filter is specified, it will be called instead of the <code>git commit-tree</code> command, with arguments of the form \"&lt;TREE_ID&gt; [(-p &lt;PARENT_COMMIT_ID&gt;)…​]\" and the log message on stdin. The commit id is expected on stdout.</p>  <p>As a special extension, the commit filter may emit multiple commit ids; in that case, the rewritten children of the original commit will have all of them as parents.</p>   <p>You can use the <code>map</code> convenience function in this filter, and other convenience functions, too. For example, calling <code>skip_commit \"$@\"</code> will leave out the current commit (but not its changes! If you want that, use <code>git rebase</code> instead).</p>   <p>You can also use the <code>git_commit_non_empty_tree \"$@\"</code> instead of <code>git commit-tree \"$@\"</code> if you don’t wish to keep commits with a single parent and that makes no change to the tree.</p>  </dd> <dt class=\"hdlist1\">--tag-name-filter &lt;command&gt;</dt> <dd> <p>This is the filter for rewriting tag names. When passed, it will be called for every tag ref that points to a rewritten object (or to a tag object which points to a rewritten object). The original tag name is passed via standard input, and the new tag name is expected on standard output.</p>  <p>The original tags are not deleted, but can be overwritten; use \"--tag-name-filter cat\" to simply update the tags. In this case, be very careful and make sure you have the old tags backed up in case the conversion has run afoul.</p>   <p>Nearly proper rewriting of tag objects is supported. If the tag has a message attached, a new tag object will be created with the same message, author, and timestamp. If the tag has a signature attached, the signature will be stripped. It is by definition impossible to preserve signatures. The reason this is \"nearly\" proper, is because ideally if the tag did not change (points to the same object, has the same name, etc.) it should retain any signature. That is not the case, signatures will always be removed, buyer beware. There is also no support for changing the author or timestamp (or the tag message for that matter). Tags which point to other tags will be rewritten to point to the underlying commit.</p>  </dd> <dt class=\"hdlist1\">--subdirectory-filter &lt;directory&gt;</dt> <dd> <p>Only look at the history which touches the given subdirectory. The result will contain that directory (and only that) as its project root. Implies <a href=\"#Remap_to_ancestor\">Remap to ancestor</a>.</p> </dd> <dt class=\"hdlist1\">--prune-empty</dt> <dd> <p>Some kind of filters will generate empty commits, that left the tree untouched. This switch allow git-filter-branch to ignore such commits. Though, this switch only applies for commits that have one and only one parent, it will hence keep merges points. Also, this option is not compatible with the use of <code>--commit-filter</code>. Though you just need to use the function <code>git_commit_non_empty_tree \"$@\"</code> instead of the <code>git commit-tree \"$@\"</code> idiom in your commit filter to make that happen.</p> </dd> <dt class=\"hdlist1\">--original &lt;namespace&gt;</dt> <dd> <p>Use this option to set the namespace where the original commits will be stored. The default value is <code>refs/original</code>.</p> </dd> <dt class=\"hdlist1\">-d &lt;directory&gt;</dt> <dd> <p>Use this option to set the path to the temporary directory used for rewriting. When applying a tree filter, the command needs to temporarily check out the tree to some directory, which may consume considerable space in case of large projects. By default it does this in the <code>.git-rewrite/</code> directory but you can override that choice by this parameter.</p> </dd> <dt class=\"hdlist1\">-f</dt> <dt class=\"hdlist1\">--force</dt> <dd> <p><code>git filter-branch</code> refuses to start with an existing temporary directory or when there are already refs starting with <code>refs/original/</code>, unless forced.</p> </dd> <dt class=\"hdlist1\">&lt;rev-list options&gt;…​</dt> <dd> <p>Arguments for <code>git rev-list</code>. All positive refs included by these options are rewritten. You may also specify options such as <code>--all</code>, but you must use <code>--</code> to separate them from the <code>git filter-branch</code> options. Implies <a href=\"#Remap_to_ancestor\">Remap to ancestor</a>.</p> </dd> </dl> </div> <div class=\"sect2\"> <h3 id=\"Remap_to_ancestor\">Remap to ancestor</h3>  <p>By using <a href=\"git-rev-list\">git-rev-list[1]</a> arguments, e.g., path limiters, you can limit the set of revisions which get rewritten. However, positive refs on the command line are distinguished: we don’t let them be excluded by such limiters. For this purpose, they are instead rewritten to point at the nearest ancestor that was not excluded.</p>  </div>\n</div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"> <p>Suppose you want to remove a file (containing confidential information or copyright violation) from all commits:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>git filter-branch --tree-filter 'rm filename' HEAD</pre> </div> </div>  <p>However, if the file is absent from the tree of some commit, a simple <code>rm filename</code> will fail for that tree and commit. Thus you may instead want to use <code>rm -f filename</code> as the script.</p>   <p>Using <code>--index-filter</code> with <code>git rm</code> yields a significantly faster version. Like with using <code>rm filename</code>, <code>git rm --cached filename</code> will fail if the file is absent from the tree of a commit. If you want to \"completely forget\" a file, it does not matter when it entered history, so we also add <code>--ignore-unmatch</code>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>git filter-branch --index-filter 'git rm --cached --ignore-unmatch filename' HEAD</pre> </div> </div>  <p>Now, you will get the rewritten history saved in HEAD.</p>   <p>To rewrite the repository to look as if <code>foodir/</code> had been its project root, and discard all other history:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>git filter-branch --subdirectory-filter foodir -- --all</pre> </div> </div>  <p>Thus you can, e.g., turn a library subdirectory into a repository of its own. Note the <code>--</code> that separates <code>filter-branch</code> options from revision options, and the <code>--all</code> to rewrite all branches and tags.</p>   <p>To set a commit (which typically is at the tip of another history) to be the parent of the current initial commit, in order to paste the other history behind the current history:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>git filter-branch --parent-filter 'sed \"s/^\\$/-p &lt;graft-id&gt;/\"' HEAD</pre> </div> </div>  <p>(if the parent string is empty - which happens when we are dealing with the initial commit - add graftcommit as a parent). Note that this assumes history with a single root (that is, no merge without common ancestors happened). If this is not the case, use:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>git filter-branch --parent-filter \\\n        'test $GIT_COMMIT = &lt;commit-id&gt; &amp;&amp; echo \"-p &lt;graft-id&gt;\" || cat' HEAD</pre> </div> </div>  <p>or even simpler:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>echo \"$commit-id $graft-id\" &gt;&gt; .git/info/grafts\ngit filter-branch $graft-id..HEAD</pre> </div> </div>  <p>To remove commits authored by \"Darl McBribe\" from the history:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>git filter-branch --commit-filter '\n        if [ \"$GIT_AUTHOR_NAME\" = \"Darl McBribe\" ];\n        then\n                skip_commit \"$@\";\n        else\n                git commit-tree \"$@\";\n        fi' HEAD</pre> </div> </div>  <p>The function <code>skip_commit</code> is defined as follows:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>skip_commit()\n{\n        shift;\n        while [ -n \"$1\" ];\n        do\n                shift;\n                map \"$1\";\n                shift;\n        done;\n}</pre> </div> </div>  <p>The shift magic first throws away the tree id and then the -p parameters. Note that this handles merges properly! In case Darl committed a merge between P1 and P2, it will be propagated properly and all children of the merge will become merge commits with P1,P2 as their parents instead of the merge commit.</p>   <p><strong>NOTE</strong> the changes introduced by the commits, and which are not reverted by subsequent commits, will still be in the rewritten branch. If you want to throw out <code>changes</code> together with the commits, you should use the interactive mode of <code>git rebase</code>.</p>   <p>You can rewrite the commit log messages using <code>--msg-filter</code>. For example, <code>git svn-id</code> strings in a repository created by <code>git svn</code> can be removed this way:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>git filter-branch --msg-filter '\n        sed -e \"/^git-svn-id:/d\"\n'</pre> </div> </div>  <p>If you need to add <code>Acked-by</code> lines to, say, the last 10 commits (none of which is a merge), use this command:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>git filter-branch --msg-filter '\n        cat &amp;&amp;\n        echo \"Acked-by: Bugs Bunny &lt;bunny@bugzilla.org&gt;\"\n' HEAD~10..HEAD</pre> </div> </div>  <p>The <code>--env-filter</code> option can be used to modify committer and/or author identity. For example, if you found out that your commits have the wrong identity due to a misconfigured user.email, you can make a correction, before publishing the project, like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>git filter-branch --env-filter '\n        if test \"$GIT_AUTHOR_EMAIL\" = \"root@localhost\"\n        then\n                GIT_AUTHOR_EMAIL=john@example.com\n                export GIT_AUTHOR_EMAIL\n        fi\n        if test \"$GIT_COMMITTER_EMAIL\" = \"root@localhost\"\n        then\n                GIT_COMMITTER_EMAIL=john@example.com\n                export GIT_COMMITTER_EMAIL\n        fi\n' -- --all</pre> </div> </div>  <p>To restrict rewriting to only part of the history, specify a revision range in addition to the new branch name. The new branch name will point to the top-most revision that a <code>git rev-list</code> of this range will print.</p>   <p>Consider this history:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>     D--E--F--G--H\n    /     /\nA--B-----C</pre> </div> </div>  <p>To rewrite only commits D,E,F,G,H, but leave A, B and C alone, use:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>git filter-branch ... C..H</pre> </div> </div>  <p>To rewrite commits E,F,G,H, use one of these:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>git filter-branch ... C..H --not D\ngit filter-branch ... D..H --not C</pre> </div> </div>  <p>To move the whole tree into a subdirectory, or remove it from there:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>git filter-branch --index-filter \\\n        'git ls-files -s | sed \"s-\\t\\\"*-&amp;newsubdir/-\" |\n                GIT_INDEX_FILE=$GIT_INDEX_FILE.new \\\n                        git update-index --index-info &amp;&amp;\n         mv \"$GIT_INDEX_FILE.new\" \"$GIT_INDEX_FILE\"' HEAD</pre> </div> </div>\n</div>   <h2 id=\"_checklist_for_shrinking_a_repository\">Checklist for shrinking a repository</h2> <div class=\"sectionbody\"> <p>git-filter-branch can be used to get rid of a subset of files, usually with some combination of <code>--index-filter</code> and <code>--subdirectory-filter</code>. People expect the resulting repository to be smaller than the original, but you need a few more steps to actually make it smaller, because Git tries hard not to lose your objects until you tell it to. First make sure that:</p>  <div class=\"ulist\"> <ul> <li> <p>You really removed all variants of a filename, if a blob was moved over its lifetime. <code>git log --name-only --follow --all -- filename</code> can help you find renames.</p> </li> <li> <p>You really filtered all refs: use <code>--tag-name-filter cat -- --all</code> when calling git-filter-branch.</p> </li> </ul> </div>  <p>Then there are two ways to get a smaller repository. A safer way is to clone, that keeps your original intact.</p>  <div class=\"ulist\"> <ul> <li> <p>Clone it with <code>git clone file:///path/to/repo</code>. The clone will not have the removed objects. See <a href=\"git-clone\">git-clone[1]</a>. (Note that cloning with a plain path just hardlinks everything!)</p> </li> </ul> </div>  <p>If you really don’t want to clone it, for whatever reasons, check the following points instead (in this order). This is a very destructive approach, so <strong>make a backup</strong> or go back to cloning it. You have been warned.</p>  <div class=\"ulist\"> <ul> <li> <p>Remove the original refs backed up by git-filter-branch: say <code>git\nfor-each-ref --format=\"%(refname)\" refs/original/ | xargs -n 1 git\nupdate-ref -d</code>.</p> </li> <li> <p>Expire all reflogs with <code>git reflog expire --expire=now --all</code>.</p> </li> <li> <p>Garbage collect all unreferenced objects with <code>git gc --prune=now</code> (or if your git-gc is not new enough to support arguments to <code>--prune</code>, use <code>git repack -ad; git prune</code> instead).</p> </li> </ul> </div>\n</div>   <h2 id=\"_notes\">Notes</h2> <div class=\"sectionbody\"> <p>git-filter-branch allows you to make complex shell-scripted rewrites of your Git history, but you probably don’t need this flexibility if you’re simply <code>removing unwanted data</code> like large files or passwords. For those operations you may want to consider <a href=\"http://rtyley.github.io/bfg-repo-cleaner/\">The BFG Repo-Cleaner</a>, a JVM-based alternative to git-filter-branch, typically at least 10-50x faster for those use-cases, and with quite different characteristics:</p>  <div class=\"ulist\"> <ul> <li> <p>Any particular version of a file is cleaned exactly <code>once</code>. The BFG, unlike git-filter-branch, does not give you the opportunity to handle a file differently based on where or when it was committed within your history. This constraint gives the core performance benefit of The BFG, and is well-suited to the task of cleansing bad data - you don’t care <code>where</code> the bad data is, you just want it <code>gone</code>.</p> </li> <li> <p>By default The BFG takes full advantage of multi-core machines, cleansing commit file-trees in parallel. git-filter-branch cleans commits sequentially (i.e. in a single-threaded manner), though it <code>is</code> possible to write filters that include their own parallelism, in the scripts executed against each commit.</p> </li> <li> <p>The <a href=\"http://rtyley.github.io/bfg-repo-cleaner/#examples\">command options</a> are much more restrictive than git-filter branch, and dedicated just to the tasks of removing unwanted data- e.g: <code>--strip-blobs-bigger-than 1M</code>.</p> </li> </ul> </div>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-filter-branch\" class=\"_attribution-link\">https://git-scm.com/docs/git-filter-branch</a>\n  </p>\n</div>\n","git-update-server-info":"<h1>git-update-server-info</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-update-server-info - Update auxiliary info file to help dumb servers</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git update-server-info [--force]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>A dumb server that does not do on-the-fly pack generations must have some auxiliary information files in $GIT_DIR/info and $GIT_OBJECT_DIRECTORY/info directories to help clients discover what references and packs the server has. This command generates such auxiliary files.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-f</dt> <dt class=\"hdlist1\">--force</dt> <dd> <p>Update the info files from scratch.</p> </dd> </dl> </div></div>   <h2 id=\"_output\">Output</h2> <div class=\"sectionbody\"> <p>Currently the command updates the following files. Please see <a href=\"gitrepository-layout\">gitrepository-layout[5]</a> for description of what they are for:</p>  <div class=\"ulist\"> <ul> <li> <p>objects/info/packs</p> </li> <li> <p>info/refs</p> </li> </ul> </div>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-update-server-info\" class=\"_attribution-link\">https://git-scm.com/docs/git-update-server-info</a>\n  </p>\n</div>\n","git-count-objects":"<h1>git-count-objects</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-count-objects - Count unpacked number of objects and their disk consumption</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git count-objects [-v] [-H | --human-readable]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>This counts the number of unpacked object files and disk space consumed by them, to help you decide when it is a good time to repack.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-v</dt> <dt class=\"hdlist1\">--verbose</dt> <dd> <p>Report in more detail:</p>  <p>count: the number of loose objects</p>   <p>size: disk space consumed by loose objects, in KiB (unless -H is specified)</p>   <p>in-pack: the number of in-pack objects</p>   <p>size-pack: disk space consumed by the packs, in KiB (unless -H is specified)</p>   <p>prune-packable: the number of loose objects that are also present in the packs. These objects could be pruned using <code>git prune-packed</code>.</p>   <p>garbage: the number of files in object database that are neither valid loose objects nor valid packs</p>   <p>size-garbage: disk space consumed by garbage files, in KiB (unless -H is specified)</p>  </dd> <dt class=\"hdlist1\">-H</dt> <dt class=\"hdlist1\">--human-readable</dt> <dd> <p>Print sizes in human readable format</p> </dd> </dl> </div></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-count-objects\" class=\"_attribution-link\">https://git-scm.com/docs/git-count-objects</a>\n  </p>\n</div>\n","git-bundle":"<h1>git-bundle</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-bundle - Move objects and refs by archive</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git bundle create &lt;file&gt; &lt;git-rev-list-args&gt;\ngit bundle verify &lt;file&gt;\ngit bundle list-heads &lt;file&gt; [&lt;refname&gt;…​]\ngit bundle unbundle &lt;file&gt; [&lt;refname&gt;…​]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Some workflows require that one or more branches of development on one machine be replicated on another machine, but the two machines cannot be directly connected, and therefore the interactive Git protocols (git, ssh, http) cannot be used. This command provides support for <code>git fetch</code> and <code>git pull</code> to operate by packaging objects and references in an archive at the originating machine, then importing those into another repository using <code>git fetch</code> and <code>git pull</code> after moving the archive by some means (e.g., by sneakernet). As no direct connection between the repositories exists, the user must specify a basis for the bundle that is held by the destination repository: the bundle assumes that all objects in the basis are already in the destination repository.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">create &lt;file&gt;</dt> <dd> <p>Used to create a bundle named <code>file</code>. This requires the <code>git-rev-list-args</code> arguments to define the bundle contents.</p> </dd> <dt class=\"hdlist1\">verify &lt;file&gt;</dt> <dd> <p>Used to check that a bundle file is valid and will apply cleanly to the current repository. This includes checks on the bundle format itself as well as checking that the prerequisite commits exist and are fully linked in the current repository. <code>git bundle</code> prints a list of missing commits, if any, and exits with a non-zero status.</p> </dd> <dt class=\"hdlist1\">list-heads &lt;file&gt;</dt> <dd> <p>Lists the references defined in the bundle. If followed by a list of references, only references matching those given are printed out.</p> </dd> <dt class=\"hdlist1\">unbundle &lt;file&gt;</dt> <dd> <p>Passes the objects in the bundle to <code>git index-pack</code> for storage in the repository, then prints the names of all defined references. If a list of references is given, only references matching those in the list are printed. This command is really plumbing, intended to be called only by <code>git fetch</code>.</p> </dd> <dt class=\"hdlist1\">&lt;git-rev-list-args&gt;</dt> <dd> <p>A list of arguments, acceptable to <code>git rev-parse</code> and <code>git rev-list</code> (and containing a named ref, see SPECIFYING REFERENCES below), that specifies the specific objects and references to transport. For example, <code>master~10..master</code> causes the current master reference to be packaged along with all objects added since its 10th ancestor commit. There is no explicit limit to the number of references and objects that may be packaged.</p> </dd> <dt class=\"hdlist1\">[&lt;refname&gt;…​]</dt> <dd> <p>A list of references used to limit the references reported as available. This is principally of use to <code>git fetch</code>, which expects to receive only those references asked for and not necessarily everything in the pack (in this case, <code>git bundle</code> acts like <code>git fetch-pack</code>).</p> </dd> </dl> </div></div>   <h2 id=\"_specifying_references\">Specifying references</h2> <div class=\"sectionbody\"> <p><code>git bundle</code> will only package references that are shown by <code>git show-ref</code>: this includes heads, tags, and remote heads. References such as <code>master~1</code> cannot be packaged, but are perfectly suitable for defining the basis. More than one reference may be packaged, and more than one basis can be specified. The objects packaged are those not contained in the union of the given bases. Each basis can be specified explicitly (e.g. <code>^master~10</code>), or implicitly (e.g. <code>master~10..master</code>, <code>--since=10.days.ago master</code>).</p>   <p>It is very important that the basis used be held by the destination. It is okay to err on the side of caution, causing the bundle file to contain objects already in the destination, as these are ignored when unpacking at the destination.</p> </div>   <h2 id=\"_example\">Example</h2> <div class=\"sectionbody\"> <p>Assume you want to transfer the history from a repository R1 on machine A to another repository R2 on machine B. For whatever reason, direct connection between A and B is not allowed, but we can move data from A to B via some mechanism (CD, email, etc.). We want to update R2 with development made on the branch master in R1.</p>   <p>To bootstrap the process, you can first create a bundle that does not have any basis. You can use a tag to remember up to what commit you last processed, in order to make it easy to later update the other repository with an incremental bundle:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>machineA$ cd R1\nmachineA$ git bundle create file.bundle master\nmachineA$ git tag -f lastR2bundle master</pre> </div> </div>  <p>Then you transfer file.bundle to the target machine B. Because this bundle does not require any existing object to be extracted, you can create a new repository on machine B by cloning from it:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>machineB$ git clone -b master /home/me/tmp/file.bundle R2</pre> </div> </div>  <p>This will define a remote called \"origin\" in the resulting repository that lets you fetch and pull from the bundle. The $GIT_DIR/config file in R2 will have an entry like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>[remote \"origin\"]\n    url = /home/me/tmp/file.bundle\n    fetch = refs/heads/*:refs/remotes/origin/*</pre> </div> </div>  <p>To update the resulting mine.git repository, you can fetch or pull after replacing the bundle stored at /home/me/tmp/file.bundle with incremental updates.</p>   <p>After working some more in the original repository, you can create an incremental bundle to update the other repository:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>machineA$ cd R1\nmachineA$ git bundle create file.bundle lastR2bundle..master\nmachineA$ git tag -f lastR2bundle master</pre> </div> </div>  <p>You then transfer the bundle to the other machine to replace /home/me/tmp/file.bundle, and pull from it.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>machineB$ cd R2\nmachineB$ git pull</pre> </div> </div>  <p>If you know up to what commit the intended recipient repository should have the necessary objects, you can use that knowledge to specify the basis, giving a cut-off point to limit the revisions and objects that go in the resulting bundle. The previous example used the lastR2bundle tag for this purpose, but you can use any other options that you would give to the <a href=\"git-log\">git-log[1]</a> command. Here are more examples:</p>   <p>You can use a tag that is present in both:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bundle create mybundle v1.0.0..master</pre> </div> </div>  <p>You can use a basis based on time:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bundle create mybundle --since=10.days master</pre> </div> </div>  <p>You can use the number of commits:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bundle create mybundle -10 master</pre> </div> </div>  <p>You can run <code>git-bundle verify</code> to see if you can extract from a bundle that was created with a basis:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bundle verify mybundle</pre> </div> </div>  <p>This will list what commits you must have in order to extract from the bundle and will error out if you do not have them.</p>   <p>A bundle from a recipient repository’s point of view is just like a regular repository which it fetches or pulls from. You can, for example, map references when fetching:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git fetch mybundle master:localRef</pre> </div> </div>  <p>You can also see what references it offers:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git ls-remote mybundle</pre> </div> </div>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-bundle\" class=\"_attribution-link\">https://git-scm.com/docs/git-bundle</a>\n  </p>\n</div>\n","git-daemon":"<h1>git-daemon</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-daemon - A really simple server for Git repositories</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git daemon [--verbose] [--syslog] [--export-all]\n             [--timeout=&lt;n&gt;] [--init-timeout=&lt;n&gt;] [--max-connections=&lt;n&gt;]\n             [--strict-paths] [--base-path=&lt;path&gt;] [--base-path-relaxed]\n             [--user-path | --user-path=&lt;path&gt;]\n             [--interpolated-path=&lt;pathtemplate&gt;]\n             [--reuseaddr] [--detach] [--pid-file=&lt;file&gt;]\n             [--enable=&lt;service&gt;] [--disable=&lt;service&gt;]\n             [--allow-override=&lt;service&gt;] [--forbid-override=&lt;service&gt;]\n             [--access-hook=&lt;path&gt;] [--[no-]informative-errors]\n             [--inetd |\n              [--listen=&lt;host_or_ipaddr&gt;] [--port=&lt;n&gt;]\n              [--user=&lt;user&gt; [--group=&lt;group&gt;]]]\n             [&lt;directory&gt;…​]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>A really simple TCP Git daemon that normally listens on port \"DEFAULT_GIT_PORT\" aka 9418. It waits for a connection asking for a service, and will serve that service if it is enabled.</p>   <p>It verifies that the directory has the magic file \"git-daemon-export-ok\", and it will refuse to export any Git directory that hasn’t explicitly been marked for export this way (unless the <code>--export-all</code> parameter is specified). If you pass some directory paths as <code>git daemon</code> arguments, you can further restrict the offers to a whitelist comprising of those.</p>   <p>By default, only <code>upload-pack</code> service is enabled, which serves <code>git fetch-pack</code> and <code>git ls-remote</code> clients, which are invoked from <code>git fetch</code>, <code>git pull</code>, and <code>git clone</code>.</p>   <p>This is ideally suited for read-only updates, i.e., pulling from Git repositories.</p>   <p>An <code>upload-archive</code> also exists to serve <code>git archive</code>.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--strict-paths</dt> <dd> <p>Match paths exactly (i.e. don’t allow \"/foo/repo\" when the real path is \"/foo/repo.git\" or \"/foo/repo/.git\") and don’t do user-relative paths. <code>git daemon</code> will refuse to start when this option is enabled and no whitelist is specified.</p> </dd> <dt class=\"hdlist1\">--base-path=&lt;path&gt;</dt> <dd> <p>Remap all the path requests as relative to the given path. This is sort of \"Git root\" - if you run <code>git daemon</code> with <code>--base-path=/srv/git</code> on example.com, then if you later try to pull <code>git://example.com/hello.git</code>, <code>git daemon</code> will interpret the path as <code>/srv/git/hello.git</code>.</p> </dd> <dt class=\"hdlist1\">--base-path-relaxed</dt> <dd> <p>If --base-path is enabled and repo lookup fails, with this option <code>git daemon</code> will attempt to lookup without prefixing the base path. This is useful for switching to --base-path usage, while still allowing the old paths.</p> </dd> <dt class=\"hdlist1\">--interpolated-path=&lt;pathtemplate&gt;</dt> <dd> <p>To support virtual hosting, an interpolated path template can be used to dynamically construct alternate paths. The template supports %H for the target hostname as supplied by the client but converted to all lowercase, %CH for the canonical hostname, %IP for the server’s IP address, %P for the port number, and %D for the absolute path of the named repository. After interpolation, the path is validated against the directory whitelist.</p> </dd> <dt class=\"hdlist1\">--export-all</dt> <dd> <p>Allow pulling from all directories that look like Git repositories (have the <code>objects</code> and <code>refs</code> subdirectories), even if they do not have the <code>git-daemon-export-ok</code> file.</p> </dd> <dt class=\"hdlist1\">--inetd</dt> <dd> <p>Have the server run as an inetd service. Implies --syslog. Incompatible with --detach, --port, --listen, --user and --group options.</p> </dd> <dt class=\"hdlist1\">--listen=&lt;host_or_ipaddr&gt;</dt> <dd> <p>Listen on a specific IP address or hostname. IP addresses can be either an IPv4 address or an IPv6 address if supported. If IPv6 is not supported, then --listen=hostname is also not supported and --listen must be given an IPv4 address. Can be given more than once. Incompatible with <code>--inetd</code> option.</p> </dd> <dt class=\"hdlist1\">--port=&lt;n&gt;</dt> <dd> <p>Listen on an alternative port. Incompatible with <code>--inetd</code> option.</p> </dd> <dt class=\"hdlist1\">--init-timeout=&lt;n&gt;</dt> <dd> <p>Timeout (in seconds) between the moment the connection is established and the client request is received (typically a rather low value, since that should be basically immediate).</p> </dd> <dt class=\"hdlist1\">--timeout=&lt;n&gt;</dt> <dd> <p>Timeout (in seconds) for specific client sub-requests. This includes the time it takes for the server to process the sub-request and the time spent waiting for the next client’s request.</p> </dd> <dt class=\"hdlist1\">--max-connections=&lt;n&gt;</dt> <dd> <p>Maximum number of concurrent clients, defaults to 32. Set it to zero for no limit.</p> </dd> <dt class=\"hdlist1\">--syslog</dt> <dd> <p>Log to syslog instead of stderr. Note that this option does not imply --verbose, thus by default only error conditions will be logged.</p> </dd> <dt class=\"hdlist1\">--user-path</dt> <dt class=\"hdlist1\">--user-path=&lt;path&gt;</dt> <dd> <p>Allow ~user notation to be used in requests. When specified with no parameter, requests to git://host/~alice/foo is taken as a request to access <code>foo</code> repository in the home directory of user <code>alice</code>. If <code>--user-path=path</code> is specified, the same request is taken as a request to access <code>path/foo</code> repository in the home directory of user <code>alice</code>.</p> </dd> <dt class=\"hdlist1\">--verbose</dt> <dd> <p>Log details about the incoming connections and requested files.</p> </dd> <dt class=\"hdlist1\">--reuseaddr</dt> <dd> <p>Use SO_REUSEADDR when binding the listening socket. This allows the server to restart without waiting for old connections to time out.</p> </dd> <dt class=\"hdlist1\">--detach</dt> <dd> <p>Detach from the shell. Implies --syslog.</p> </dd> <dt class=\"hdlist1\">--pid-file=&lt;file&gt;</dt> <dd> <p>Save the process id in <code>file</code>. Ignored when the daemon is run under <code>--inetd</code>.</p> </dd> <dt class=\"hdlist1\">--user=&lt;user&gt;</dt> <dt class=\"hdlist1\">--group=&lt;group&gt;</dt> <dd> <p>Change daemon’s uid and gid before entering the service loop. When only <code>--user</code> is given without <code>--group</code>, the primary group ID for the user is used. The values of the option are given to <code>getpwnam(3)</code> and <code>getgrnam(3)</code> and numeric IDs are not supported.</p>  <p>Giving these options is an error when used with <code>--inetd</code>; use the facility of inet daemon to achieve the same before spawning <code>git daemon</code> if needed.</p>   <p>Like many programs that switch user id, the daemon does not reset environment variables such as <code>$HOME</code> when it runs git programs, e.g. <code>upload-pack</code> and <code>receive-pack</code>. When using this option, you may also want to set and export <code>HOME</code> to point at the home directory of <code>&lt;user&gt;</code> before starting the daemon, and make sure any Git configuration files in that directory are readable by <code>&lt;user&gt;</code>.</p>  </dd> <dt class=\"hdlist1\">--enable=&lt;service&gt;</dt> <dt class=\"hdlist1\">--disable=&lt;service&gt;</dt> <dd> <p>Enable/disable the service site-wide per default. Note that a service disabled site-wide can still be enabled per repository if it is marked overridable and the repository enables the service with a configuration item.</p> </dd> <dt class=\"hdlist1\">--allow-override=&lt;service&gt;</dt> <dt class=\"hdlist1\">--forbid-override=&lt;service&gt;</dt> <dd> <p>Allow/forbid overriding the site-wide default with per repository configuration. By default, all the services may be overridden.</p> </dd> <dt class=\"hdlist1\">--[no-]informative-errors</dt> <dd> <p>When informative errors are turned on, git-daemon will report more verbose errors to the client, differentiating conditions like \"no such repository\" from \"repository not exported\". This is more convenient for clients, but may leak information about the existence of unexported repositories. When informative errors are not enabled, all errors report \"access denied\" to the client. The default is --no-informative-errors.</p> </dd> <dt class=\"hdlist1\">--access-hook=&lt;path&gt;</dt> <dd> <p>Every time a client connects, first run an external command specified by the &lt;path&gt; with service name (e.g. \"upload-pack\"), path to the repository, hostname (%H), canonical hostname (%CH), IP address (%IP), and TCP port (%P) as its command-line arguments. The external command can decide to decline the service by exiting with a non-zero status (or to allow it by exiting with a zero status). It can also look at the $REMOTE_ADDR and <code>$REMOTE_PORT</code> environment variables to learn about the requestor when making this decision.</p>  <p>The external command can optionally write a single line to its standard output to be sent to the requestor as an error message when it declines the service.</p>  </dd> <dt class=\"hdlist1\">&lt;directory&gt;</dt> <dd> <p>A directory to add to the whitelist of allowed directories. Unless --strict-paths is specified this will also include subdirectories of each named directory.</p> </dd> </dl> </div></div>   <h2 id=\"_services\">Services</h2> <div class=\"sectionbody\"> <p>These services can be globally enabled/disabled using the command-line options of this command. If finer-grained control is desired (e.g. to allow <code>git archive</code> to be run against only in a few selected repositories the daemon serves), the per-repository configuration file can be used to enable or disable them.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">upload-pack</dt> <dd> <p>This serves <code>git fetch-pack</code> and <code>git ls-remote</code> clients. It is enabled by default, but a repository can disable it by setting <code>daemon.uploadpack</code> configuration item to <code>false</code>.</p> </dd> <dt class=\"hdlist1\">upload-archive</dt> <dd> <p>This serves <code>git archive --remote</code>. It is disabled by default, but a repository can enable it by setting <code>daemon.uploadarch</code> configuration item to <code>true</code>.</p> </dd> <dt class=\"hdlist1\">receive-pack</dt> <dd> <p>This serves <code>git send-pack</code> clients, allowing anonymous push. It is disabled by default, as there is <code>no</code> authentication in the protocol (in other words, anybody can push anything into the repository, including removal of refs). This is solely meant for a closed LAN setting where everybody is friendly. This service can be enabled by setting <code>daemon.receivepack</code> configuration item to <code>true</code>.</p> </dd> </dl> </div>\n</div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">We assume the following in /etc/services</dt> <dd> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ grep 9418 /etc/services\ngit                9418/tcp                # Git Version Control System</pre> </div> </div> </dd> <dt class=\"hdlist1\">\n<em>git daemon</em> as inetd server</dt> <dd> <p>To set up <code>git daemon</code> as an inetd service that handles any repository under the whitelisted set of directories, /pub/foo and /pub/bar, place an entry like the following into /etc/inetd all on one line:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>        git stream tcp nowait nobody  /usr/bin/git\n                git daemon --inetd --verbose --export-all\n                /pub/foo /pub/bar</pre> </div> </div> </dd> <dt class=\"hdlist1\">\n<em>git daemon</em> as inetd server for virtual hosts</dt> <dd> <p>To set up <code>git daemon</code> as an inetd service that handles repositories for different virtual hosts, <code>www.example.com</code> and <code>www.example.org</code>, place an entry like the following into <code>/etc/inetd</code> all on one line:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>        git stream tcp nowait nobody /usr/bin/git\n                git daemon --inetd --verbose --export-all\n                --interpolated-path=/pub/%H%D\n                /pub/www.example.org/software\n                /pub/www.example.com/software\n                /software</pre> </div> </div>  <p>In this example, the root-level directory <code>/pub</code> will contain a subdirectory for each virtual host name supported. Further, both hosts advertise repositories simply as <code>git://www.example.com/software/repo.git</code>. For pre-1.4.0 clients, a symlink from <code>/software</code> into the appropriate default repository could be made as well.</p>  </dd> <dt class=\"hdlist1\">\n<em>git daemon</em> as regular daemon for virtual hosts</dt> <dd> <p>To set up <code>git daemon</code> as a regular, non-inetd service that handles repositories for multiple virtual hosts based on their IP addresses, start the daemon like this:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>        git daemon --verbose --export-all\n                --interpolated-path=/pub/%IP/%D\n                /pub/192.168.1.200/software\n                /pub/10.10.220.23/software</pre> </div> </div>  <p>In this example, the root-level directory <code>/pub</code> will contain a subdirectory for each virtual host IP address supported. Repositories can still be accessed by hostname though, assuming they correspond to these IP addresses.</p>  </dd> <dt class=\"hdlist1\">selectively enable/disable services per repository</dt> <dd> <p>To enable <code>git archive --remote</code> and disable <code>git fetch</code> against a repository, have the following in the configuration file in the repository (that is the file <code>config</code> next to <code>HEAD</code>, <code>refs</code> and <code>objects</code>).</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>        [daemon]\n                uploadpack = false\n                uploadarch = true</pre> </div> </div> </dd> </dl> </div></div>   <h2 id=\"_environment\">Environment</h2> <div class=\"sectionbody\"> <p><code>git daemon</code> will set REMOTE_ADDR to the IP address of the client that connected to it, if the IP address is available. REMOTE_ADDR will be available in the environment of hooks called when services are performed.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-daemon\" class=\"_attribution-link\">https://git-scm.com/docs/git-daemon</a>\n  </p>\n</div>\n","git-commit-tree":"<h1>git-commit-tree</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-commit-tree - Create a new commit object</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git commit-tree &lt;tree&gt; [(-p &lt;parent&gt;)…​]\ngit commit-tree [(-p &lt;parent&gt;)…​] [-S[&lt;keyid&gt;]] [(-m &lt;message&gt;)…​]\n                  [(-F &lt;file&gt;)…​] &lt;tree&gt;</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>This is usually not what an end user wants to run directly. See <a href=\"git-commit\">git-commit[1]</a> instead.</p>   <p>Creates a new commit object based on the provided tree object and emits the new commit object id on stdout. The log message is read from the standard input, unless <code>-m</code> or <code>-F</code> options are given.</p>   <p>A commit object may have any number of parents. With exactly one parent, it is an ordinary commit. Having more than one parent makes the commit a merge between several lines of history. Initial (root) commits have no parents.</p>   <p>While a tree represents a particular directory state of a working directory, a commit represents that state in \"time\", and explains how to get there.</p>   <p>Normally a commit would identify a new \"HEAD\" state, and while Git doesn’t care where you save the note about that state, in practice we tend to just write the result to the file that is pointed at by <code>.git/HEAD</code>, so that we can always see what the last committed state was.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">&lt;tree&gt;</dt> <dd> <p>An existing tree object</p> </dd> <dt class=\"hdlist1\">-p &lt;parent&gt;</dt> <dd> <p>Each <code>-p</code> indicates the id of a parent commit object.</p> </dd> <dt class=\"hdlist1\">-m &lt;message&gt;</dt> <dd> <p>A paragraph in the commit log message. This can be given more than once and each &lt;message&gt; becomes its own paragraph.</p> </dd> <dt class=\"hdlist1\">-F &lt;file&gt;</dt> <dd> <p>Read the commit log message from the given file. Use <code>-</code> to read from the standard input.</p> </dd> <dt class=\"hdlist1\">-S[&lt;keyid&gt;]</dt> <dt class=\"hdlist1\">--gpg-sign[=&lt;keyid&gt;]</dt> <dd> <p>GPG-sign commits. The <code>keyid</code> argument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space.</p> </dd> <dt class=\"hdlist1\">--no-gpg-sign</dt> <dd> <p>Do not GPG-sign commit, to countermand a <code>--gpg-sign</code> option given earlier on the command line.</p> </dd> </dl> </div></div>   <h2 id=\"_commit_information\">Commit information</h2> <div class=\"sectionbody\"> <p>A commit encapsulates:</p>  <div class=\"ulist\"> <ul> <li> <p>all parent object ids</p> </li> <li> <p>author name, email and date</p> </li> <li> <p>committer name and email and the commit time.</p> </li> </ul> </div>  <p>While parent object ids are provided on the command line, author and committer information is taken from the following environment variables, if set:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>GIT_AUTHOR_NAME\nGIT_AUTHOR_EMAIL\nGIT_AUTHOR_DATE\nGIT_COMMITTER_NAME\nGIT_COMMITTER_EMAIL\nGIT_COMMITTER_DATE</pre> </div> </div>  <p>(nb \"&lt;\", \"&gt;\" and \"\\n\"s are stripped)</p>   <p>In case (some of) these environment variables are not set, the information is taken from the configuration items user.name and user.email, or, if not present, the environment variable EMAIL, or, if that is not set, system user name and the hostname used for outgoing mail (taken from <code>/etc/mailname</code> and falling back to the fully qualified hostname when that file does not exist).</p>   <p>A commit comment is read from stdin. If a changelog entry is not provided via \"&lt;\" redirection, <code>git commit-tree</code> will just wait for one to be entered and terminated with ^D.</p> </div>   <h2 id=\"_date_formats\">Date formats</h2> <div class=\"sectionbody\"> <p>The <code>GIT_AUTHOR_DATE</code>, <code>GIT_COMMITTER_DATE</code> environment variables support the following date formats:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">Git internal format</dt> <dd> <p>It is <code>&lt;unix timestamp&gt; &lt;time zone offset&gt;</code>, where <code>&lt;unix\ntimestamp&gt;</code> is the number of seconds since the UNIX epoch. <code>&lt;time zone offset&gt;</code> is a positive or negative offset from UTC. For example CET (which is 2 hours ahead UTC) is <code>+0200</code>.</p> </dd> <dt class=\"hdlist1\">RFC 2822</dt> <dd> <p>The standard email format as described by RFC 2822, for example <code>Thu, 07 Apr 2005 22:13:13 +0200</code>.</p> </dd> <dt class=\"hdlist1\">ISO 8601</dt> <dd> <p>Time and date specified by the ISO 8601 standard, for example <code>2005-04-07T22:13:13</code>. The parser accepts a space instead of the <code>T</code> character as well.</p> <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> In addition, the date part is accepted in the following formats: <code>YYYY.MM.DD</code>, <code>MM/DD/YYYY</code> and <code>DD.MM.YYYY</code>. </td> </tr> </table> </div> </dd> </dl> </div>\n</div>   <h2 id=\"_discussion\">Discussion</h2> <div class=\"sectionbody\"> <p>Git is to some extent character encoding agnostic.</p>  <div class=\"ulist\"> <ul> <li> <p>The contents of the blob objects are uninterpreted sequences of bytes. There is no encoding translation at the core level.</p> </li> <li> <p>Path names are encoded in UTF-8 normalization form C. This applies to tree objects, the index file, ref names, as well as path names in command line arguments, environment variables and config files (<code>.git/config</code> (see <a href=\"git-config\">git-config[1]</a>), <a href=\"gitignore\">gitignore[5]</a>, <a href=\"gitattributes\">gitattributes[5]</a> and <a href=\"gitmodules\">gitmodules[5]</a>).</p>  <p>Note that Git at the core level treats path names simply as sequences of non-NUL bytes, there are no path name encoding conversions (except on Mac and Windows). Therefore, using non-ASCII path names will mostly work even on platforms and file systems that use legacy extended ASCII encodings. However, repositories created on such systems will not work properly on UTF-8-based systems (e.g. Linux, Mac, Windows) and vice versa. Additionally, many Git-based tools simply assume path names to be UTF-8 and will fail to display other encodings correctly.</p>  </li> <li> <p>Commit log messages are typically encoded in UTF-8, but other extended ASCII encodings are also supported. This includes ISO-8859-x, CP125x and many others, but <code>not</code> UTF-16/32, EBCDIC and CJK multi-byte encodings (GBK, Shift-JIS, Big5, EUC-x, CP9xx etc.).</p> </li> </ul> </div>  <p>Although we encourage that the commit log messages are encoded in UTF-8, both the core and Git Porcelain are designed not to force UTF-8 on projects. If all participants of a particular project find it more convenient to use legacy encodings, Git does not forbid it. However, there are a few things to keep in mind.</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p><code>git commit</code> and <code>git commit-tree</code> issues a warning if the commit log message given to it does not look like a valid UTF-8 string, unless you explicitly say your project uses a legacy encoding. The way to say this is to have i18n.commitencoding in <code>.git/config</code> file, like this:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>[i18n]\n        commitencoding = ISO-8859-1</pre> </div> </div>  <p>Commit objects created with the above setting record the value of <code>i18n.commitencoding</code> in its <code>encoding</code> header. This is to help other people who look at them later. Lack of this header implies that the commit log message is encoded in UTF-8.</p>  </li> <li> <p><code>git log</code>, <code>git show</code>, <code>git blame</code> and friends look at the <code>encoding</code> header of a commit object, and try to re-code the log message into UTF-8 unless otherwise specified. You can specify the desired output encoding with <code>i18n.logoutputencoding</code> in <code>.git/config</code> file, like this:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>[i18n]\n        logoutputencoding = ISO-8859-1</pre> </div> </div>  <p>If you do not have this configuration variable, the value of <code>i18n.commitencoding</code> is used instead.</p>  </li> </ol> </div>  <p>Note that we deliberately chose not to re-code the commit log message when a commit is made to force UTF-8 at the commit object level, because re-coding to UTF-8 is not necessarily a reversible operation.</p> </div>   <h2 id=\"_files\">Files</h2> <div class=\"sectionbody\"> <p>/etc/mailname</p> </div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-write-tree\">git-write-tree[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-commit-tree\" class=\"_attribution-link\">https://git-scm.com/docs/git-commit-tree</a>\n  </p>\n</div>\n","git-for-each-ref":"<h1>git-for-each-ref</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-for-each-ref - Output information on each ref</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git for-each-ref [--count=&lt;count&gt;] [--shell|--perl|--python|--tcl]\n                   [(--sort=&lt;key&gt;)…​] [--format=&lt;format&gt;] [&lt;pattern&gt;…​]\n                   [--points-at &lt;object&gt;] [(--merged | --no-merged) [&lt;object&gt;]]\n                   [--contains [&lt;object&gt;]]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Iterate over all refs that match <code>&lt;pattern&gt;</code> and show them according to the given <code>&lt;format&gt;</code>, after sorting them according to the given set of <code>&lt;key&gt;</code>. If <code>&lt;count&gt;</code> is given, stop after showing that many refs. The interpolated values in <code>&lt;format&gt;</code> can optionally be quoted as string literals in the specified host language allowing their direct evaluation in that language.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">&lt;count&gt;</dt> <dd> <p>By default the command shows all refs that match <code>&lt;pattern&gt;</code>. This option makes it stop after showing that many refs.</p> </dd> <dt class=\"hdlist1\">&lt;key&gt;</dt> <dd> <p>A field name to sort on. Prefix <code>-</code> to sort in descending order of the value. When unspecified, <code>refname</code> is used. You may use the --sort=&lt;key&gt; option multiple times, in which case the last key becomes the primary key.</p> </dd> <dt class=\"hdlist1\">&lt;format&gt;</dt> <dd> <p>A string that interpolates <code>%(fieldname)</code> from the object pointed at by a ref being shown. If <code>fieldname</code> is prefixed with an asterisk (<code>*</code>) and the ref points at a tag object, the value for the field in the object tag refers is used. When unspecified, defaults to <code>%(objectname) SPC %(objecttype) TAB %(refname)</code>. It also interpolates <code>%%</code> to <code>%</code>, and <code>%xx</code> where <code>xx</code> are hex digits interpolates to character with hex code <code>xx</code>; for example <code>%00</code> interpolates to <code>\\0</code> (NUL), <code>%09</code> to <code>\\t</code> (TAB) and <code>%0a</code> to <code>\\n</code> (LF).</p> </dd> <dt class=\"hdlist1\">&lt;pattern&gt;…​</dt> <dd> <p>If one or more patterns are given, only refs are shown that match against at least one pattern, either using fnmatch(3) or literally, in the latter case matching completely or from the beginning up to a slash.</p> </dd> <dt class=\"hdlist1\">--shell</dt> <dt class=\"hdlist1\">--perl</dt> <dt class=\"hdlist1\">--python</dt> <dt class=\"hdlist1\">--tcl</dt> <dd> <p>If given, strings that substitute <code>%(fieldname)</code> placeholders are quoted as string literals suitable for the specified host language. This is meant to produce a scriptlet that can directly be `eval`ed.</p> </dd> <dt class=\"hdlist1\">--points-at &lt;object&gt;</dt> <dd> <p>Only list refs which points at the given object.</p> </dd> <dt class=\"hdlist1\">--merged [&lt;object&gt;]</dt> <dd> <p>Only list refs whose tips are reachable from the specified commit (HEAD if not specified).</p> </dd> <dt class=\"hdlist1\">--no-merged [&lt;object&gt;]</dt> <dd> <p>Only list refs whose tips are not reachable from the specified commit (HEAD if not specified).</p> </dd> <dt class=\"hdlist1\">--contains [&lt;object&gt;]</dt> <dd> <p>Only list refs which contain the specified commit (HEAD if not specified).</p> </dd> </dl> </div></div>   <h2 id=\"_field_names\">Field names</h2> <div class=\"sectionbody\"> <p>Various values from structured fields in referenced objects can be used to interpolate into the resulting output, or as sort keys.</p>   <p>For all objects, the following names can be used:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">refname</dt> <dd> <p>The name of the ref (the part after $GIT_DIR/). For a non-ambiguous short name of the ref append <code>:short</code>. The option core.warnAmbiguousRefs is used to select the strict abbreviation mode. If <code>strip=&lt;N&gt;</code> is appended, strips <code>&lt;N&gt;</code> slash-separated path components from the front of the refname (e.g., <code>%(refname:strip=2)</code> turns <code>refs/tags/foo</code> into <code>foo</code>. <code>&lt;N&gt;</code> must be a positive integer. If a displayed ref has fewer components than <code>&lt;N&gt;</code>, the command aborts with an error.</p> </dd> <dt class=\"hdlist1\">objecttype</dt> <dd> <p>The type of the object (<code>blob</code>, <code>tree</code>, <code>commit</code>, <code>tag</code>).</p> </dd> <dt class=\"hdlist1\">objectsize</dt> <dd> <p>The size of the object (the same as <code>git cat-file -s</code> reports).</p> </dd> <dt class=\"hdlist1\">objectname</dt> <dd> <p>The object name (aka SHA-1). For a non-ambiguous abbreviation of the object name append <code>:short</code>.</p> </dd> <dt class=\"hdlist1\">upstream</dt> <dd> <p>The name of a local ref which can be considered “upstream” from the displayed ref. Respects <code>:short</code> in the same way as <code>refname</code> above. Additionally respects <code>:track</code> to show \"[ahead N, behind M]\" and <code>:trackshort</code> to show the terse version: \"&gt;\" (ahead), \"&lt;\" (behind), \"&lt;&gt;\" (ahead and behind), or \"=\" (in sync). Has no effect if the ref does not have tracking information associated with it.</p> </dd> <dt class=\"hdlist1\">push</dt> <dd> <p>The name of a local ref which represents the <code>@{push}</code> location for the displayed ref. Respects <code>:short</code>, <code>:track</code>, and <code>:trackshort</code> options as <code>upstream</code> does. Produces an empty string if no <code>@{push}</code> ref is configured.</p> </dd> <dt class=\"hdlist1\">HEAD</dt> <dd> <p><code>*</code> if HEAD matches current ref (the checked out branch), ' ' otherwise.</p> </dd> <dt class=\"hdlist1\">color</dt> <dd> <p>Change output color. Followed by <code>:&lt;colorname&gt;</code>, where names are described in <code>color.branch.*</code>.</p> </dd> <dt class=\"hdlist1\">align</dt> <dd> <p>Left-, middle-, or right-align the content between %(align:…​) and %(end). The \"align:\" is followed by <code>width=&lt;width&gt;</code> and <code>position=&lt;position&gt;</code> in any order separated by a comma, where the <code>&lt;position&gt;</code> is either left, right or middle, default being left and <code>&lt;width&gt;</code> is the total length of the content with alignment. For brevity, the \"width=\" and/or \"position=\" prefixes may be omitted, and bare &lt;width&gt; and &lt;position&gt; used instead. For instance, <code>%(align:&lt;width&gt;,&lt;position&gt;)</code>. If the contents length is more than the width then no alignment is performed. If used with <code>--quote</code> everything in between %(align:…​) and %(end) is quoted, but if nested then only the topmost level performs quoting.</p> </dd> </dl> </div>  <p>In addition to the above, for commit and tag objects, the header field names (<code>tree</code>, <code>parent</code>, <code>object</code>, <code>type</code>, and <code>tag</code>) can be used to specify the value in the header field.</p>   <p>For commit and tag objects, the special <code>creatordate</code> and <code>creator</code> fields will correspond to the appropriate date or name-email-date tuple from the <code>committer</code> or <code>tagger</code> fields depending on the object type. These are intended for working on a mix of annotated and lightweight tags.</p>   <p>Fields that have name-email-date tuple as its value (<code>author</code>, <code>committer</code>, and <code>tagger</code>) can be suffixed with <code>name</code>, <code>email</code>, and <code>date</code> to extract the named component.</p>   <p>The complete message in a commit and tag object is <code>contents</code>. Its first line is <code>contents:subject</code>, where subject is the concatenation of all lines of the commit message up to the first blank line. The next line is <code>contents:body</code>, where body is all of the lines after the first blank line. The optional GPG signature is <code>contents:signature</code>. The first <code>N</code> lines of the message is obtained using <code>contents:lines=N</code>.</p>   <p>For sorting purposes, fields with numeric values sort in numeric order (<code>objectsize</code>, <code>authordate</code>, <code>committerdate</code>, <code>creatordate</code>, <code>taggerdate</code>). All other fields are used to sort in their byte-value order.</p>   <p>There is also an option to sort by versions, this can be done by using the fieldname <code>version:refname</code> or its alias <code>v:refname</code>.</p>   <p>In any case, a field name that refers to a field inapplicable to the object referred by the ref does not cause an error. It returns an empty string instead.</p>   <p>As a special case for the date-type fields, you may specify a format for the date by adding <code>:</code> followed by date format name (see the values the <code>--date</code> option to <a href=\"git-rev-list\">git-rev-list[1]</a> takes).</p> </div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"> <p>An example directly producing formatted text. Show the most recent 3 tagged commits:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>#!/bin/sh\n\ngit for-each-ref --count=3 --sort='-*authordate' \\\n--format='From: %(*authorname) %(*authoremail)\nSubject: %(*subject)\nDate: %(*authordate)\nRef: %(*refname)\n\n%(*body)\n' 'refs/tags'</pre> </div> </div>  <p>A simple example showing the use of shell eval on the output, demonstrating the use of --shell. List the prefixes of all heads:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>#!/bin/sh\n\ngit for-each-ref --shell --format=\"ref=%(refname)\" refs/heads | \\\nwhile read entry\ndo\n        eval \"$entry\"\n        echo `dirname $ref`\ndone</pre> </div> </div>  <p>A bit more elaborate report on tags, demonstrating that the format may be an entire script:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>#!/bin/sh\n\nfmt='\n        r=%(refname)\n        t=%(*objecttype)\n        T=${r#refs/tags/}\n\n        o=%(*objectname)\n        n=%(*authorname)\n        e=%(*authoremail)\n        s=%(*subject)\n        d=%(*authordate)\n        b=%(*body)\n\n        kind=Tag\n        if test \"z$t\" = z\n        then\n                # could be a lightweight tag\n                t=%(objecttype)\n                kind=\"Lightweight tag\"\n                o=%(objectname)\n                n=%(authorname)\n                e=%(authoremail)\n                s=%(subject)\n                d=%(authordate)\n                b=%(body)\n        fi\n        echo \"$kind $T points at a $t object $o\"\n        if test \"z$t\" = zcommit\n        then\n                echo \"The commit was authored by $n $e\nat $d, and titled\n\n    $s\n\nIts message reads as:\n\"\n                echo \"$b\" | sed -e \"s/^/    /\"\n                echo\n        fi\n'\n\neval=`git for-each-ref --shell --format=\"$fmt\" \\\n        --sort='*objecttype' \\\n        --sort=-taggerdate \\\n        refs/tags`\neval \"$eval\"</pre> </div> </div>\n</div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-show-ref\">git-show-ref[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-for-each-ref\" class=\"_attribution-link\">https://git-scm.com/docs/git-for-each-ref</a>\n  </p>\n</div>\n","git-hash-object":"<h1>git-hash-object</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-hash-object - Compute object ID and optionally creates a blob from a file</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git hash-object [-t &lt;type&gt;] [-w] [--path=&lt;file&gt;|--no-filters] [--stdin [--literally]] [--] &lt;file&gt;…​\ngit hash-object [-t &lt;type&gt;] [-w] --stdin-paths [--no-filters]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Computes the object ID value for an object with specified type with the contents of the named file (which can be outside of the work tree), and optionally writes the resulting object into the object database. Reports its object ID to its standard output. This is used by <code>git cvsimport</code> to update the index without modifying files in the work tree. When &lt;type&gt; is not specified, it defaults to \"blob\".</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-t &lt;type&gt;</dt> <dd> <p>Specify the type (default: \"blob\").</p> </dd> <dt class=\"hdlist1\">-w</dt> <dd> <p>Actually write the object into the object database.</p> </dd> <dt class=\"hdlist1\">--stdin</dt> <dd> <p>Read the object from standard input instead of from a file.</p> </dd> <dt class=\"hdlist1\">--stdin-paths</dt> <dd> <p>Read file names from the standard input, one per line, instead of from the command-line.</p> </dd> <dt class=\"hdlist1\">--path</dt> <dd> <p>Hash object as it were located at the given path. The location of file does not directly influence on the hash value, but path is used to determine what Git filters should be applied to the object before it can be placed to the object database, and, as result of applying filters, the actual blob put into the object database may differ from the given file. This option is mainly useful for hashing temporary files located outside of the working directory or files read from stdin.</p> </dd> <dt class=\"hdlist1\">--no-filters</dt> <dd> <p>Hash the contents as is, ignoring any input filter that would have been chosen by the attributes mechanism, including the end-of-line conversion. If the file is read from standard input then this is always implied, unless the <code>--path</code> option is given.</p> </dd> <dt class=\"hdlist1\">--literally</dt> <dd> <p>Allow <code>--stdin</code> to hash any garbage into a loose object which might not otherwise pass standard object parsing or git-fsck checks. Useful for stress-testing Git itself or reproducing characteristics of corrupt or bogus objects encountered in the wild.</p> </dd> </dl> </div></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-hash-object\" class=\"_attribution-link\">https://git-scm.com/docs/git-hash-object</a>\n  </p>\n</div>\n","git-svn":"<h1>git-svn</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-svn - Bidirectional operation between a Subversion repository and Git</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git svn &lt;command&gt; [options] [arguments]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p><code>git svn</code> is a simple conduit for changesets between Subversion and Git. It provides a bidirectional flow of changes between a Subversion and a Git repository.</p>   <p><code>git svn</code> can track a standard Subversion repository, following the common \"trunk/branches/tags\" layout, with the --stdlayout option. It can also follow branches and tags in any layout with the -T/-t/-b options (see options to <code>init</code> below, and also the <code>clone</code> command).</p>   <p>Once tracking a Subversion repository (with any of the above methods), the Git repository can be updated from Subversion by the <code>fetch</code> command and Subversion updated from Git by the <code>dcommit</code> command.</p> </div>   <h2 id=\"_commands\">Commands</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><em>init</em></dt> <dd> <p>Initializes an empty Git repository with additional metadata directories for <code>git svn</code>. The Subversion URL may be specified as a command-line argument, or as full URL arguments to -T/-t/-b. Optionally, the target directory to operate on can be specified as a second argument. Normally this command initializes the current directory.</p> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-T&lt;trunk_subdir&gt;</dt> <dt class=\"hdlist1\">--trunk=&lt;trunk_subdir&gt;</dt> <dt class=\"hdlist1\">-t&lt;tags_subdir&gt;</dt> <dt class=\"hdlist1\">--tags=&lt;tags_subdir&gt;</dt> <dt class=\"hdlist1\">-b&lt;branches_subdir&gt;</dt> <dt class=\"hdlist1\">--branches=&lt;branches_subdir&gt;</dt> <dt class=\"hdlist1\">-s</dt> <dt class=\"hdlist1\">--stdlayout</dt> <dd> <p>These are optional command-line options for init. Each of these flags can point to a relative repository path (--tags=project/tags) or a full url (--tags=https://foo.org/project/tags). You can specify more than one --tags and/or --branches options, in case your Subversion repository places tags or branches under multiple paths. The option --stdlayout is a shorthand way of setting trunk,tags,branches as the relative paths, which is the Subversion default. If any of the other options are given as well, they take precedence.</p> </dd> <dt class=\"hdlist1\">--no-metadata</dt> <dd> <p>Set the <code>noMetadata</code> option in the [svn-remote] config. This option is not recommended, please read the <code>svn.noMetadata</code> section of this manpage before using this option.</p> </dd> <dt class=\"hdlist1\">--use-svm-props</dt> <dd> <p>Set the <code>useSvmProps</code> option in the [svn-remote] config.</p> </dd> <dt class=\"hdlist1\">--use-svnsync-props</dt> <dd> <p>Set the <code>useSvnsyncProps</code> option in the [svn-remote] config.</p> </dd> <dt class=\"hdlist1\">--rewrite-root=&lt;URL&gt;</dt> <dd> <p>Set the <code>rewriteRoot</code> option in the [svn-remote] config.</p> </dd> <dt class=\"hdlist1\">--rewrite-uuid=&lt;UUID&gt;</dt> <dd> <p>Set the <code>rewriteUUID</code> option in the [svn-remote] config.</p> </dd> <dt class=\"hdlist1\">--username=&lt;user&gt;</dt> <dd> <p>For transports that SVN handles authentication for (http, https, and plain svn), specify the username. For other transports (e.g. <code>svn+ssh://</code>), you must include the username in the URL, e.g. <code>svn+ssh://foo@svn.bar.com/project</code></p> </dd> <dt class=\"hdlist1\">--prefix=&lt;prefix&gt;</dt> <dd> <p>This allows one to specify a prefix which is prepended to the names of remotes if trunk/branches/tags are specified. The prefix does not automatically include a trailing slash, so be sure you include one in the argument if that is what you want. If --branches/-b is specified, the prefix must include a trailing slash. Setting a prefix (with a trailing slash) is strongly encouraged in any case, as your SVN-tracking refs will then be located at \"refs/remotes/$prefix/<strong>\", which is compatible with Git’s own remote-tracking ref layout (refs/remotes/$remote/</strong>). Setting a prefix is also useful if you wish to track multiple projects that share a common repository. By default, the prefix is set to <code>origin/</code>.</p> <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> Before Git v2.0, the default prefix was \"\" (no prefix). This meant that SVN-tracking refs were put at \"refs/remotes/*\", which is incompatible with how Git’s own remote-tracking refs are organized. If you still want the old default, you can get it by passing <code>--prefix \"\"</code> on the command line (<code>--prefix=\"\"</code> may not work if your Perl’s Getopt::Long is &lt; v2.37). </td> </tr> </table> </div> </dd> <dt class=\"hdlist1\">--ignore-paths=&lt;regex&gt;</dt> <dd> <p>When passed to <code>init</code> or <code>clone</code> this regular expression will be preserved as a config key. See <code>fetch</code> for a description of <code>--ignore-paths</code>.</p> </dd> <dt class=\"hdlist1\">--include-paths=&lt;regex&gt;</dt> <dd> <p>When passed to <code>init</code> or <code>clone</code> this regular expression will be preserved as a config key. See <code>fetch</code> for a description of <code>--include-paths</code>.</p> </dd> <dt class=\"hdlist1\">--no-minimize-url</dt> <dd> <p>When tracking multiple directories (using --stdlayout, --branches, or --tags options), git svn will attempt to connect to the root (or highest allowed level) of the Subversion repository. This default allows better tracking of history if entire projects are moved within a repository, but may cause issues on repositories where read access restrictions are in place. Passing <code>--no-minimize-url</code> will allow git svn to accept URLs as-is without attempting to connect to a higher level directory. This option is off by default when only one URL/branch is tracked (it would do little good).</p> </dd> </dl> </div> </dd> <dt class=\"hdlist1\"><em>fetch</em></dt> <dd> <p>Fetch unfetched revisions from the Subversion remote we are tracking. The name of the [svn-remote \"…​\"] section in the $GIT_DIR/config file may be specified as an optional command-line argument.</p>  <p>This automatically updates the rev_map if needed (see <code>$GIT_DIR/svn/*\\*/.rev_map.*</code> in the FILES section below for details).</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--localtime</dt> <dd> <p>Store Git commit times in the local time zone instead of UTC. This makes <code>git log</code> (even without --date=local) show the same times that <code>svn log</code> would in the local time zone.</p>  <p>This doesn’t interfere with interoperating with the Subversion repository you cloned from, but if you wish for your local Git repository to be able to interoperate with someone else’s local Git repository, either don’t use this option or you should both use it in the same local time zone.</p>  </dd> <dt class=\"hdlist1\">--parent</dt> <dd> <p>Fetch only from the SVN parent of the current HEAD.</p> </dd> <dt class=\"hdlist1\">--ignore-paths=&lt;regex&gt;</dt> <dd> <p>This allows one to specify a Perl regular expression that will cause skipping of all matching paths from checkout from SVN. The <code>--ignore-paths</code> option should match for every <code>fetch</code> (including automatic fetches due to <code>clone</code>, <code>dcommit</code>, <code>rebase</code>, etc) on a given repository.</p> <div class=\"verseblock\"> <pre class=\"content\">config key: svn-remote.&lt;name&gt;.ignore-paths</pre> </div>  <p>If the ignore-paths configuration key is set, and the command-line option is also given, both regular expressions will be used.</p>   <p>Examples:</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">Skip \"doc*\" directory for every fetch</dt> <dd> <div class=\"listingblock\"> <div class=\"content\"> <pre>--ignore-paths=\"^doc\"</pre> </div> </div> </dd> <dt class=\"hdlist1\">Skip \"branches\" and \"tags\" of first level directories</dt> <dd> <div class=\"listingblock\"> <div class=\"content\"> <pre>--ignore-paths=\"^[^/]+/(?:branches|tags)\"</pre> </div> </div> </dd> </dl> </div> </div> </div> </dd> <dt class=\"hdlist1\">--include-paths=&lt;regex&gt;</dt> <dd> <p>This allows one to specify a Perl regular expression that will cause the inclusion of only matching paths from checkout from SVN. The <code>--include-paths</code> option should match for every <code>fetch</code> (including automatic fetches due to <code>clone</code>, <code>dcommit</code>, <code>rebase</code>, etc) on a given repository. <code>--ignore-paths</code> takes precedence over <code>--include-paths</code>.</p> <div class=\"verseblock\"> <pre class=\"content\">config key: svn-remote.&lt;name&gt;.include-paths</pre> </div> </dd> <dt class=\"hdlist1\">--log-window-size=&lt;n&gt;</dt> <dd> <p>Fetch &lt;n&gt; log entries per request when scanning Subversion history. The default is 100. For very large Subversion repositories, larger values may be needed for <code>clone</code>/<code>fetch</code> to complete in reasonable time. But overly large values may lead to higher memory usage and request timeouts.</p> </dd> </dl> </div> </dd> <dt class=\"hdlist1\"><em>clone</em></dt> <dd> <p>Runs <code>init</code> and <code>fetch</code>. It will automatically create a directory based on the basename of the URL passed to it; or if a second argument is passed; it will create a directory and work within that. It accepts all arguments that the <code>init</code> and <code>fetch</code> commands accept; with the exception of <code>--fetch-all</code> and <code>--parent</code>. After a repository is cloned, the <code>fetch</code> command will be able to update revisions without affecting the working tree; and the <code>rebase</code> command will be able to update the working tree with the latest changes.</p> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--preserve-empty-dirs</dt> <dd> <p>Create a placeholder file in the local Git repository for each empty directory fetched from Subversion. This includes directories that become empty by removing all entries in the Subversion repository (but not the directory itself). The placeholder files are also tracked and removed when no longer necessary.</p> </dd> <dt class=\"hdlist1\">--placeholder-filename=&lt;filename&gt;</dt> <dd> <p>Set the name of placeholder files created by --preserve-empty-dirs. Default: \".gitignore\"</p> </dd> </dl> </div> </dd> <dt class=\"hdlist1\"><em>rebase</em></dt> <dd> <p>This fetches revisions from the SVN parent of the current HEAD and rebases the current (uncommitted to SVN) work against it.</p>  <p>This works similarly to <code>svn update</code> or <code>git pull</code> except that it preserves linear history with <code>git rebase</code> instead of <code>git merge</code> for ease of dcommitting with <code>git svn</code>.</p>   <p>This accepts all options that <code>git svn fetch</code> and <code>git rebase</code> accept. However, <code>--fetch-all</code> only fetches from the current [svn-remote], and not all [svn-remote] definitions.</p>   <p>Like <code>git rebase</code>; this requires that the working tree be clean and have no uncommitted changes.</p>   <p>This automatically updates the rev_map if needed (see <code>$GIT_DIR/svn/*\\*/.rev_map.*</code> in the FILES section below for details).</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-l</dt> <dt class=\"hdlist1\">--local</dt> <dd> <p>Do not fetch remotely; only run <code>git rebase</code> against the last fetched commit from the upstream SVN.</p> </dd> </dl> </div> </dd> <dt class=\"hdlist1\"><em>dcommit</em></dt> <dd> <p>Commit each diff from the current branch directly to the SVN repository, and then rebase or reset (depending on whether or not there is a diff between SVN and head). This will create a revision in SVN for each commit in Git.</p>  <p>When an optional Git branch name (or a Git commit object name) is specified as an argument, the subcommand works on the specified branch, not on the current branch.</p>   <p>Use of <code>dcommit</code> is preferred to <code>set-tree</code> (below).</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--no-rebase</dt> <dd> <p>After committing, do not rebase or reset.</p> </dd> <dt class=\"hdlist1\">--commit-url &lt;URL&gt;</dt> <dd> <p>Commit to this SVN URL (the full path). This is intended to allow existing <code>git svn</code> repositories created with one transport method (e.g. <code>svn://</code> or <code>http://</code> for anonymous read) to be reused if a user is later given access to an alternate transport method (e.g. <code>svn+ssh://</code> or <code>https://</code>) for commit.</p> <div class=\"verseblock\"> <pre class=\"content\">config key: svn-remote.&lt;name&gt;.commiturl\nconfig key: svn.commiturl (overwrites all svn-remote.&lt;name&gt;.commiturl options)</pre> </div>  <p>Note that the SVN URL of the commiturl config key includes the SVN branch. If you rather want to set the commit URL for an entire SVN repository use svn-remote.&lt;name&gt;.pushurl instead.</p>   <p>Using this option for any other purpose (don’t ask) is very strongly discouraged.</p>  </dd> <dt class=\"hdlist1\">--mergeinfo=&lt;mergeinfo&gt;</dt> <dd> <p>Add the given merge information during the dcommit (e.g. <code>--mergeinfo=\"/branches/foo:1-10\"</code>). All svn server versions can store this information (as a property), and svn clients starting from version 1.5 can make use of it. To specify merge information from multiple branches, use a single space character between the branches (<code>--mergeinfo=\"/branches/foo:1-10 /branches/bar:3,5-6,8\"</code>)</p> <div class=\"verseblock\"> <pre class=\"content\">config key: svn.pushmergeinfo</pre> </div>  <p>This option will cause git-svn to attempt to automatically populate the svn:mergeinfo property in the SVN repository when possible. Currently, this can only be done when dcommitting non-fast-forward merges where all parents but the first have already been pushed into SVN.</p>  </dd> <dt class=\"hdlist1\">--interactive</dt> <dd> <p>Ask the user to confirm that a patch set should actually be sent to SVN. For each patch, one may answer \"yes\" (accept this patch), \"no\" (discard this patch), \"all\" (accept all patches), or \"quit\".</p>  <p><code>git svn dcommit</code> returns immediately if answer is \"no\" or \"quit\", without committing anything to SVN.</p>  </dd> </dl> </div> </dd> <dt class=\"hdlist1\"><em>branch</em></dt> <dd> <p>Create a branch in the SVN repository.</p> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-m</dt> <dt class=\"hdlist1\">--message</dt> <dd> <p>Allows to specify the commit message.</p> </dd> <dt class=\"hdlist1\">-t</dt> <dt class=\"hdlist1\">--tag</dt> <dd> <p>Create a tag by using the tags_subdir instead of the branches_subdir specified during git svn init.</p> </dd> <dt class=\"hdlist1\">-d&lt;path&gt;</dt> <dt class=\"hdlist1\">--destination=&lt;path&gt;</dt> <dd> <p>If more than one --branches (or --tags) option was given to the <code>init</code> or <code>clone</code> command, you must provide the location of the branch (or tag) you wish to create in the SVN repository. &lt;path&gt; specifies which path to use to create the branch or tag and should match the pattern on the left-hand side of one of the configured branches or tags refspecs. You can see these refspecs with the commands</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>git config --get-all svn-remote.&lt;name&gt;.branches\ngit config --get-all svn-remote.&lt;name&gt;.tags</pre> </div> </div>  <p>where &lt;name&gt; is the name of the SVN repository as specified by the -R option to <code>init</code> (or \"svn\" by default).</p>  </dd> <dt class=\"hdlist1\">--username</dt> <dd> <p>Specify the SVN username to perform the commit as. This option overrides the <code>username</code> configuration property.</p> </dd> <dt class=\"hdlist1\">--commit-url</dt> <dd> <p>Use the specified URL to connect to the destination Subversion repository. This is useful in cases where the source SVN repository is read-only. This option overrides configuration property <code>commiturl</code>.</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>git config --get-all svn-remote.&lt;name&gt;.commiturl</pre> </div> </div> </dd> <dt class=\"hdlist1\">--parents</dt> <dd> <p>Create parent folders. This parameter is equivalent to the parameter --parents on svn cp commands and is useful for non-standard repository layouts.</p> </dd> </dl> </div> </dd> <dt class=\"hdlist1\"><em>tag</em></dt> <dd> <p>Create a tag in the SVN repository. This is a shorthand for <code>branch -t</code>.</p> </dd> <dt class=\"hdlist1\"><em>log</em></dt> <dd> <p>This should make it easy to look up svn log messages when svn users refer to -r/--revision numbers.</p>  <p>The following features from ‘svn log’ are supported:</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-r &lt;n&gt;[:&lt;n&gt;]</dt> <dt class=\"hdlist1\">--revision=&lt;n&gt;[:&lt;n&gt;]</dt> <dd> <p>is supported, non-numeric args are not: HEAD, NEXT, BASE, PREV, etc …​</p> </dd> <dt class=\"hdlist1\">-v</dt> <dt class=\"hdlist1\">--verbose</dt> <dd> <p>it’s not completely compatible with the --verbose output in svn log, but reasonably close.</p> </dd> <dt class=\"hdlist1\">--limit=&lt;n&gt;</dt> <dd> <p>is NOT the same as --max-count, doesn’t count merged/excluded commits</p> </dd> <dt class=\"hdlist1\">--incremental</dt> <dd> <p>supported</p> </dd> </dl> </div> </div> </div>  <p>New features:</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--show-commit</dt> <dd> <p>shows the Git commit sha1, as well</p> </dd> <dt class=\"hdlist1\">--oneline</dt> <dd> <p>our version of --pretty=oneline</p> </dd> </dl> </div> </div> </div> <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> SVN itself only stores times in UTC and nothing else. The regular svn client converts the UTC time to the local time (or based on the TZ= environment). This command has the same behaviour. </td> </tr> </table> </div>  <p>Any other arguments are passed directly to <code>git log</code></p>  </dd> <dt class=\"hdlist1\"><em>blame</em></dt> <dd> <p>Show what revision and author last modified each line of a file. The output of this mode is format-compatible with the output of ‘svn blame’ by default. Like the SVN blame command, local uncommitted changes in the working tree are ignored; the version of the file in the HEAD revision is annotated. Unknown arguments are passed directly to <code>git blame</code>.</p> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--git-format</dt> <dd> <p>Produce output in the same format as <code>git blame</code>, but with SVN revision numbers instead of Git commit hashes. In this mode, changes that haven’t been committed to SVN (including local working-copy edits) are shown as revision 0.</p> </dd> </dl> </div> </dd> <dt class=\"hdlist1\"><em>find-rev</em></dt> <dd> <p>When given an SVN revision number of the form <code>rN</code>, returns the corresponding Git commit hash (this can optionally be followed by a tree-ish to specify which branch should be searched). When given a tree-ish, returns the corresponding SVN revision number.</p> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-B</dt> <dt class=\"hdlist1\">--before</dt> <dd> <p>Don’t require an exact match if given an SVN revision, instead find the commit corresponding to the state of the SVN repository (on the current branch) at the specified revision.</p> </dd> <dt class=\"hdlist1\">-A</dt> <dt class=\"hdlist1\">--after</dt> <dd> <p>Don’t require an exact match if given an SVN revision; if there is not an exact match return the closest match searching forward in the history.</p> </dd> </dl> </div> </dd> <dt class=\"hdlist1\"><em>set-tree</em></dt> <dd> <p>You should consider using <code>dcommit</code> instead of this command. Commit specified commit or tree objects to SVN. This relies on your imported fetch data being up-to-date. This makes absolutely no attempts to do patching when committing to SVN, it simply overwrites files with those specified in the tree or commit. All merging is assumed to have taken place independently of <code>git svn</code> functions.</p> </dd> <dt class=\"hdlist1\"><em>create-ignore</em></dt> <dd> <p>Recursively finds the svn:ignore property on directories and creates matching .gitignore files. The resulting files are staged to be committed, but are not committed. Use -r/--revision to refer to a specific revision.</p> </dd> <dt class=\"hdlist1\"><em>show-ignore</em></dt> <dd> <p>Recursively finds and lists the svn:ignore property on directories. The output is suitable for appending to the $GIT_DIR/info/exclude file.</p> </dd> <dt class=\"hdlist1\"><em>mkdirs</em></dt> <dd> <p>Attempts to recreate empty directories that core Git cannot track based on information in $GIT_DIR/svn/&lt;refname&gt;/unhandled.log files. Empty directories are automatically recreated when using \"git svn clone\" and \"git svn rebase\", so \"mkdirs\" is intended for use after commands like \"git checkout\" or \"git reset\". (See the svn-remote.&lt;name&gt;.automkdirs config file option for more information.)</p> </dd> <dt class=\"hdlist1\"><em>commit-diff</em></dt> <dd> <p>Commits the diff of two tree-ish arguments from the command-line. This command does not rely on being inside an <code>git svn\ninit</code>-ed repository. This command takes three arguments, (a) the original tree to diff against, (b) the new tree result, (c) the URL of the target Subversion repository. The final argument (URL) may be omitted if you are working from a <code>git svn</code>-aware repository (that has been <code>init</code>-ed with <code>git svn</code>). The -r&lt;revision&gt; option is required for this.</p> </dd> <dt class=\"hdlist1\"><em>info</em></dt> <dd> <p>Shows information about a file or directory similar to what ‘svn info’ provides. Does not currently support a -r/--revision argument. Use the --url option to output only the value of the <code>URL:</code> field.</p> </dd> <dt class=\"hdlist1\"><em>proplist</em></dt> <dd> <p>Lists the properties stored in the Subversion repository about a given file or directory. Use -r/--revision to refer to a specific Subversion revision.</p> </dd> <dt class=\"hdlist1\"><em>propget</em></dt> <dd> <p>Gets the Subversion property given as the first argument, for a file. A specific revision can be specified with -r/--revision.</p> </dd> <dt class=\"hdlist1\"><em>propset</em></dt> <dd> <p>Sets the Subversion property given as the first argument, to the value given as the second argument for the file given as the third argument.</p>  <p>Example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>git svn propset svn:keywords \"FreeBSD=%H\" devel/py-tipper/Makefile</pre> </div> </div>  <p>This will set the property <code>svn:keywords</code> to <code>FreeBSD=%H</code> for the file <code>devel/py-tipper/Makefile</code>.</p>  </dd> <dt class=\"hdlist1\"><em>show-externals</em></dt> <dd> <p>Shows the Subversion externals. Use -r/--revision to specify a specific revision.</p> </dd> <dt class=\"hdlist1\"><em>gc</em></dt> <dd> <p>Compress $GIT_DIR/svn/&lt;refname&gt;/unhandled.log files and remove $GIT_DIR/svn/&lt;refname&gt;/index files.</p> </dd> <dt class=\"hdlist1\"><em>reset</em></dt> <dd> <p>Undoes the effects of <code>fetch</code> back to the specified revision. This allows you to re-<code>fetch</code> an SVN revision. Normally the contents of an SVN revision should never change and <code>reset</code> should not be necessary. However, if SVN permissions change, or if you alter your --ignore-paths option, a <code>fetch</code> may fail with \"not found in commit\" (file not previously visible) or \"checksum mismatch\" (missed a modification). If the problem file cannot be ignored forever (with --ignore-paths) the only way to repair the repo is to use <code>reset</code>.</p>  <p>Only the rev_map and refs/remotes/git-svn are changed (see <code>$GIT_DIR/svn/*\\*/.rev_map.*</code> in the FILES section below for details). Follow <code>reset</code> with a <code>fetch</code> and then <code>git reset</code> or <code>git rebase</code> to move local branches onto the new tree.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-r &lt;n&gt;</dt> <dt class=\"hdlist1\">--revision=&lt;n&gt;</dt> <dd> <p>Specify the most recent revision to keep. All later revisions are discarded.</p> </dd> <dt class=\"hdlist1\">-p</dt> <dt class=\"hdlist1\">--parent</dt> <dd> <p>Discard the specified revision as well, keeping the nearest parent instead.</p> </dd> <dt class=\"hdlist1\">Example:</dt> <dd> <p>Assume you have local changes in \"master\", but you need to refetch \"r2\".</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>    r1---r2---r3 remotes/git-svn\n                \\\n                 A---B master</pre> </div> </div>  <p>Fix the ignore-paths or SVN permissions problem that caused \"r2\" to be incomplete in the first place. Then:</p>  <div class=\"verseblock\"> <pre class=\"content\">git svn reset -r2 -p\ngit svn fetch</pre> </div> <div class=\"listingblock\"> <div class=\"content\"> <pre>    r1---r2'--r3' remotes/git-svn\n      \\\n       r2---r3---A---B master</pre> </div> </div>  <p>Then fixup \"master\" with <code>git rebase</code>. Do NOT use <code>git merge</code> or your history will not be compatible with a future <code>dcommit</code>!</p>  <div class=\"verseblock\"> <pre class=\"content\">git rebase --onto remotes/git-svn A^ master</pre> </div> <div class=\"listingblock\"> <div class=\"content\"> <pre>    r1---r2'--r3' remotes/git-svn\n                \\\n                 A'--B' master</pre> </div> </div> </dd> </dl> </div> </dd> </dl> </div></div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--shared[=(false|true|umask|group|all|world|everybody)]</dt> <dt class=\"hdlist1\">--template=&lt;template_directory&gt;</dt> <dd> <p>Only used with the <code>init</code> command. These are passed directly to <code>git init</code>.</p> </dd> <dt class=\"hdlist1\">-r &lt;arg&gt;</dt> <dt class=\"hdlist1\">--revision &lt;arg&gt;</dt> <dd> <p>Used with the <code>fetch</code> command.</p>  <p>This allows revision ranges for partial/cauterized history to be supported. $NUMBER, $NUMBER1:$NUMBER2 (numeric ranges), $NUMBER:HEAD, and BASE:$NUMBER are all supported.</p>   <p>This can allow you to make partial mirrors when running fetch; but is generally not recommended because history will be skipped and lost.</p>  </dd> <dt class=\"hdlist1\">-</dt> <dt class=\"hdlist1\">--stdin</dt> <dd> <p>Only used with the <code>set-tree</code> command.</p>  <p>Read a list of commits from stdin and commit them in reverse order. Only the leading sha1 is read from each line, so <code>git rev-list --pretty=oneline</code> output can be used.</p>  </dd> <dt class=\"hdlist1\">--rmdir</dt> <dd> <p>Only used with the <code>dcommit</code>, <code>set-tree</code> and <code>commit-diff</code> commands.</p>  <p>Remove directories from the SVN tree if there are no files left behind. SVN can version empty directories, and they are not removed by default if there are no files left in them. Git cannot version empty directories. Enabling this flag will make the commit to SVN act like Git.</p>  <div class=\"verseblock\"> <pre class=\"content\">config key: svn.rmdir</pre> </div> </dd> <dt class=\"hdlist1\">-e</dt> <dt class=\"hdlist1\">--edit</dt> <dd> <p>Only used with the <code>dcommit</code>, <code>set-tree</code> and <code>commit-diff</code> commands.</p>  <p>Edit the commit message before committing to SVN. This is off by default for objects that are commits, and forced on when committing tree objects.</p>  <div class=\"verseblock\"> <pre class=\"content\">config key: svn.edit</pre> </div> </dd> <dt class=\"hdlist1\">-l&lt;num&gt;</dt> <dt class=\"hdlist1\">--find-copies-harder</dt> <dd> <p>Only used with the <code>dcommit</code>, <code>set-tree</code> and <code>commit-diff</code> commands.</p>  <p>They are both passed directly to <code>git diff-tree</code>; see <a href=\"git-diff-tree\">git-diff-tree[1]</a> for more information.</p>  <div class=\"verseblock\"> <pre class=\"content\">config key: svn.l\nconfig key: svn.findcopiesharder</pre> </div> </dd> <dt class=\"hdlist1\">-A&lt;filename&gt;</dt> <dt class=\"hdlist1\">--authors-file=&lt;filename&gt;</dt> <dd> <p>Syntax is compatible with the file used by <code>git cvsimport</code>:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>        loginname = Joe User &lt;user@example.com&gt;</pre> </div> </div>  <p>If this option is specified and <code>git svn</code> encounters an SVN committer name that does not exist in the authors-file, <code>git svn</code> will abort operation. The user will then have to add the appropriate entry. Re-running the previous <code>git svn</code> command after the authors-file is modified should continue operation.</p>  <div class=\"verseblock\"> <pre class=\"content\">config key: svn.authorsfile</pre> </div> </dd> <dt class=\"hdlist1\">--authors-prog=&lt;filename&gt;</dt> <dd> <p>If this option is specified, for each SVN committer name that does not exist in the authors file, the given file is executed with the committer name as the first argument. The program is expected to return a single line of the form \"Name &lt;email&gt;\", which will be treated as if included in the authors file.</p> </dd> <dt class=\"hdlist1\">-q</dt> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>Make <code>git svn</code> less verbose. Specify a second time to make it even less verbose.</p> </dd> <dt class=\"hdlist1\">-m</dt> <dt class=\"hdlist1\">--merge</dt> <dt class=\"hdlist1\">-s&lt;strategy&gt;</dt> <dt class=\"hdlist1\">--strategy=&lt;strategy&gt;</dt> <dt class=\"hdlist1\">-p</dt> <dt class=\"hdlist1\">--preserve-merges</dt> <dd> <p>These are only used with the <code>dcommit</code> and <code>rebase</code> commands.</p>  <p>Passed directly to <code>git rebase</code> when using <code>dcommit</code> if a <code>git reset</code> cannot be used (see <code>dcommit</code>).</p>  </dd> <dt class=\"hdlist1\">-n</dt> <dt class=\"hdlist1\">--dry-run</dt> <dd> <p>This can be used with the <code>dcommit</code>, <code>rebase</code>, <code>branch</code> and <code>tag</code> commands.</p>  <p>For <code>dcommit</code>, print out the series of Git arguments that would show which diffs would be committed to SVN.</p>   <p>For <code>rebase</code>, display the local branch associated with the upstream svn repository associated with the current branch and the URL of svn repository that will be fetched from.</p>   <p>For <code>branch</code> and <code>tag</code>, display the urls that will be used for copying when creating the branch or tag.</p>  </dd> <dt class=\"hdlist1\">--use-log-author</dt> <dd> <p>When retrieving svn commits into Git (as part of <code>fetch</code>, <code>rebase</code>, or <code>dcommit</code> operations), look for the first <code>From:</code> or <code>Signed-off-by:</code> line in the log message and use that as the author string.</p> </dd> <dt class=\"hdlist1\">--add-author-from</dt> <dd> <p>When committing to svn from Git (as part of <code>commit-diff</code>, <code>set-tree</code> or <code>dcommit</code> operations), if the existing log message doesn’t already have a <code>From:</code> or <code>Signed-off-by:</code> line, append a <code>From:</code> line based on the Git commit’s author string. If you use this, then <code>--use-log-author</code> will retrieve a valid author string for all commits.</p> </dd> </dl> </div></div>   <h2 id=\"_advanced_options\">Advanced options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-i&lt;GIT_SVN_ID&gt;</dt> <dt class=\"hdlist1\">--id &lt;GIT_SVN_ID&gt;</dt> <dd> <p>This sets GIT_SVN_ID (instead of using the environment). This allows the user to override the default refname to fetch from when tracking a single URL. The <code>log</code> and <code>dcommit</code> commands no longer require this switch as an argument.</p> </dd> <dt class=\"hdlist1\">-R&lt;remote name&gt;</dt> <dt class=\"hdlist1\">--svn-remote &lt;remote name&gt;</dt> <dd> <p>Specify the [svn-remote \"&lt;remote name&gt;\"] section to use, this allows SVN multiple repositories to be tracked. Default: \"svn\"</p> </dd> <dt class=\"hdlist1\">--follow-parent</dt> <dd> <p>This option is only relevant if we are tracking branches (using one of the repository layout options --trunk, --tags, --branches, --stdlayout). For each tracked branch, try to find out where its revision was copied from, and set a suitable parent in the first Git commit for the branch. This is especially helpful when we’re tracking a directory that has been moved around within the repository. If this feature is disabled, the branches created by <code>git svn</code> will all be linear and not share any history, meaning that there will be no information on where branches were branched off or merged. However, following long/convoluted histories can take a long time, so disabling this feature may speed up the cloning process. This feature is enabled by default, use --no-follow-parent to disable it.</p> <div class=\"verseblock\"> <pre class=\"content\">config key: svn.followparent</pre> </div> </dd> </dl> </div></div>   <h2 id=\"_config_file_only_options\">Config file-only options</h2> <div class=\"sectionbody\">\n<div class=\"dlist\"> <dl> <dt class=\"hdlist1\">svn.noMetadata</dt> <dt class=\"hdlist1\">svn-remote.&lt;name&gt;.noMetadata</dt> <dd> <p>This gets rid of the <code>git-svn-id:</code> lines at the end of every commit.</p>  <p>This option can only be used for one-shot imports as <code>git svn</code> will not be able to fetch again without metadata. Additionally, if you lose your <code>$GIT_DIR/svn/*\\*/.rev_map.*</code> files, <code>git svn</code> will not be able to rebuild them.</p>   <p>The <code>git svn log</code> command will not work on repositories using this, either. Using this conflicts with the <code>useSvmProps</code> option for (hopefully) obvious reasons.</p>   <p>This option is NOT recommended as it makes it difficult to track down old references to SVN revision numbers in existing documentation, bug reports and archives. If you plan to eventually migrate from SVN to Git and are certain about dropping SVN history, consider <a href=\"git-filter-branch\">git-filter-branch[1]</a> instead. filter-branch also allows reformatting of metadata for ease-of-reading and rewriting authorship info for non-\"svn.authorsFile\" users.</p>  </dd> <dt class=\"hdlist1\">svn.useSvmProps</dt> <dt class=\"hdlist1\">svn-remote.&lt;name&gt;.useSvmProps</dt> <dd> <p>This allows <code>git svn</code> to re-map repository URLs and UUIDs from mirrors created using SVN::Mirror (or svk) for metadata.</p>  <p>If an SVN revision has a property, \"svm:headrev\", it is likely that the revision was created by SVN::Mirror (also used by SVK). The property contains a repository UUID and a revision. We want to make it look like we are mirroring the original URL, so introduce a helper function that returns the original identity URL and UUID, and use it when generating metadata in commit messages.</p>  </dd> <dt class=\"hdlist1\">svn.useSvnsyncProps</dt> <dt class=\"hdlist1\">svn-remote.&lt;name&gt;.useSvnsyncprops</dt> <dd> <p>Similar to the useSvmProps option; this is for users of the svnsync(1) command distributed with SVN 1.4.x and later.</p> </dd> <dt class=\"hdlist1\">svn-remote.&lt;name&gt;.rewriteRoot</dt> <dd> <p>This allows users to create repositories from alternate URLs. For example, an administrator could run <code>git svn</code> on the server locally (accessing via <a href=\"#\" class=\"bare\">file://</a>) but wish to distribute the repository with a public http:// or svn:// URL in the metadata so users of it will see the public URL.</p> </dd> <dt class=\"hdlist1\">svn-remote.&lt;name&gt;.rewriteUUID</dt> <dd> <p>Similar to the useSvmProps option; this is for users who need to remap the UUID manually. This may be useful in situations where the original UUID is not available via either useSvmProps or useSvnsyncProps.</p> </dd> <dt class=\"hdlist1\">svn-remote.&lt;name&gt;.pushurl</dt> <dd> <p>Similar to Git’s <code>remote.&lt;name&gt;.pushurl</code>, this key is designed to be used in cases where <code>url</code> points to an SVN repository via a read-only transport, to provide an alternate read/write transport. It is assumed that both keys point to the same repository. Unlike <code>commiturl</code>, <code>pushurl</code> is a base path. If either <code>commiturl</code> or <code>pushurl</code> could be used, <code>commiturl</code> takes precedence.</p> </dd> <dt class=\"hdlist1\">svn.brokenSymlinkWorkaround</dt> <dd> <p>This disables potentially expensive checks to workaround broken symlinks checked into SVN by broken clients. Set this option to \"false\" if you track a SVN repository with many empty blobs that are not symlinks. This option may be changed while <code>git svn</code> is running and take effect on the next revision fetched. If unset, <code>git svn</code> assumes this option to be \"true\".</p> </dd> <dt class=\"hdlist1\">svn.pathnameencoding</dt> <dd> <p>This instructs git svn to recode pathnames to a given encoding. It can be used by windows users and by those who work in non-utf8 locales to avoid corrupted file names with non-ASCII characters. Valid encodings are the ones supported by Perl’s Encode module.</p> </dd> <dt class=\"hdlist1\">svn-remote.&lt;name&gt;.automkdirs</dt> <dd> <p>Normally, the \"git svn clone\" and \"git svn rebase\" commands attempt to recreate empty directories that are in the Subversion repository. If this option is set to \"false\", then empty directories will only be created if the \"git svn mkdirs\" command is run explicitly. If unset, <code>git svn</code> assumes this option to be \"true\".</p> </dd> </dl> </div>  <p>Since the noMetadata, rewriteRoot, rewriteUUID, useSvnsyncProps and useSvmProps options all affect the metadata generated and used by <code>git svn</code>; they <strong>must</strong> be set in the configuration file before any history is imported and these settings should never be changed once they are set.</p>   <p>Additionally, only one of these options can be used per svn-remote section because they affect the <code>git-svn-id:</code> metadata line, except for rewriteRoot and rewriteUUID which can be used together.</p> </div>   <h2 id=\"_basic_examples\">Basic examples</h2> <div class=\"sectionbody\"> <p>Tracking and contributing to the trunk of a Subversion-managed project (ignoring tags and branches):</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre># Clone a repo (like git clone):\n        git svn clone http://svn.example.com/project/trunk\n# Enter the newly cloned directory:\n        cd trunk\n# You should be on master branch, double-check with 'git branch'\n        git branch\n# Do some work and commit locally to Git:\n        git commit ...\n# Something is committed to SVN, rebase your local changes against the\n# latest changes in SVN:\n        git svn rebase\n# Now commit your changes (that were committed previously using Git) to SVN,\n# as well as automatically updating your working HEAD:\n        git svn dcommit\n# Append svn:ignore settings to the default Git exclude file:\n        git svn show-ignore &gt;&gt; .git/info/exclude</pre> </div> </div>  <p>Tracking and contributing to an entire Subversion-managed project (complete with a trunk, tags and branches):</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre># Clone a repo with standard SVN directory layout (like git clone):\n        git svn clone http://svn.example.com/project --stdlayout --prefix svn/\n# Or, if the repo uses a non-standard directory layout:\n        git svn clone http://svn.example.com/project -T tr -b branch -t tag --prefix svn/\n# View all branches and tags you have cloned:\n        git branch -r\n# Create a new branch in SVN\n        git svn branch waldo\n# Reset your master to trunk (or any other branch, replacing 'trunk'\n# with the appropriate name):\n        git reset --hard svn/trunk\n# You may only dcommit to one branch/tag/trunk at a time.  The usage\n# of dcommit/rebase/show-ignore should be the same as above.</pre> </div> </div>  <p>The initial <code>git svn clone</code> can be quite time-consuming (especially for large Subversion repositories). If multiple people (or one person with multiple machines) want to use <code>git svn</code> to interact with the same Subversion repository, you can do the initial <code>git svn clone</code> to a repository on a server and have each person clone that repository with <code>git clone</code>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre># Do the initial import on a server\n        ssh server \"cd /pub &amp;&amp; git svn clone http://svn.example.com/project [options...]\"\n# Clone locally - make sure the refs/remotes/ space matches the server\n        mkdir project\n        cd project\n        git init\n        git remote add origin server:/pub/project\n        git config --replace-all remote.origin.fetch '+refs/remotes/*:refs/remotes/*'\n        git fetch\n# Prevent fetch/pull from remote Git server in the future,\n# we only want to use git svn for future updates\n        git config --remove-section remote.origin\n# Create a local branch from one of the branches just fetched\n        git checkout -b master FETCH_HEAD\n# Initialize 'git svn' locally (be sure to use the same URL and\n# --stdlayout/-T/-b/-t/--prefix options as were used on server)\n        git svn init http://svn.example.com/project [options...]\n# Pull the latest changes from Subversion\n        git svn rebase</pre> </div> </div>\n</div>   <h2 id=\"_rebase_vs_pull_merge\">Rebase vs. pull/merge</h2> <div class=\"sectionbody\"> <p>Prefer to use <code>git svn rebase</code> or <code>git rebase</code>, rather than <code>git pull</code> or <code>git merge</code> to synchronize unintegrated commits with a <code>git svn</code> branch. Doing so will keep the history of unintegrated commits linear with respect to the upstream SVN repository and allow the use of the preferred <code>git svn dcommit</code> subcommand to push unintegrated commits back into SVN.</p>   <p>Originally, <code>git svn</code> recommended that developers pulled or merged from the <code>git svn</code> branch. This was because the author favored <code>git svn set-tree B</code> to commit a single head rather than the <code>git svn set-tree A..B</code> notation to commit multiple commits. Use of <code>git pull</code> or <code>git merge</code> with <code>git svn set-tree A..B</code> will cause non-linear history to be flattened when committing into SVN and this can lead to merge commits unexpectedly reversing previous commits in SVN.</p> </div>   <h2 id=\"_merge_tracking\">Merge tracking</h2> <div class=\"sectionbody\"> <p>While <code>git svn</code> can track copy history (including branches and tags) for repositories adopting a standard layout, it cannot yet represent merge history that happened inside git back upstream to SVN users. Therefore it is advised that users keep history as linear as possible inside Git to ease compatibility with SVN (see the CAVEATS section below).</p> </div>   <h2 id=\"_handling_of_svn_branches\">Handling of svn branches</h2> <div class=\"sectionbody\"> <p>If <code>git svn</code> is configured to fetch branches (and --follow-branches is in effect), it sometimes creates multiple Git branches for one SVN branch, where the additional branches have names of the form <code>branchname@nnn</code> (with nnn an SVN revision number). These additional branches are created if <code>git svn</code> cannot find a parent commit for the first commit in an SVN branch, to connect the branch to the history of the other branches.</p>   <p>Normally, the first commit in an SVN branch consists of a copy operation. <code>git svn</code> will read this commit to get the SVN revision the branch was created from. It will then try to find the Git commit that corresponds to this SVN revision, and use that as the parent of the branch. However, it is possible that there is no suitable Git commit to serve as parent. This will happen, among other reasons, if the SVN branch is a copy of a revision that was not fetched by <code>git svn</code> (e.g. because it is an old revision that was skipped with <code>--revision</code>), or if in SVN a directory was copied that is not tracked by <code>git svn</code> (such as a branch that is not tracked at all, or a subdirectory of a tracked branch). In these cases, <code>git svn</code> will still create a Git branch, but instead of using an existing Git commit as the parent of the branch, it will read the SVN history of the directory the branch was copied from and create appropriate Git commits. This is indicated by the message \"Initializing parent: &lt;branchname&gt;\".</p>   <p>Additionally, it will create a special branch named <code>&lt;branchname&gt;@&lt;SVN-Revision&gt;</code>, where &lt;SVN-Revision&gt; is the SVN revision number the branch was copied from. This branch will point to the newly created parent commit of the branch. If in SVN the branch was deleted and later recreated from a different version, there will be multiple such branches with an <code>@</code>.</p>   <p>Note that this may mean that multiple Git commits are created for a single SVN revision.</p>   <p>An example: in an SVN repository with a standard trunk/tags/branches layout, a directory trunk/sub is created in r.100. In r.200, trunk/sub is branched by copying it to branches/. <code>git svn clone -s</code> will then create a branch <code>sub</code>. It will also create new Git commits for r.100 through r.199 and use these as the history of branch <code>sub</code>. Thus there will be two Git commits for each revision from r.100 to r.199 (one containing trunk/, one containing trunk/sub/). Finally, it will create a branch <code>sub@200</code> pointing to the new parent commit of branch <code>sub</code> (i.e. the commit for r.200 and trunk/sub/).</p> </div>   <h2 id=\"_caveats\">Caveats</h2> <div class=\"sectionbody\"> <p>For the sake of simplicity and interoperating with Subversion, it is recommended that all <code>git svn</code> users clone, fetch and dcommit directly from the SVN server, and avoid all <code>git clone</code>/<code>pull</code>/<code>merge</code>/<code>push</code> operations between Git repositories and branches. The recommended method of exchanging code between Git branches and users is <code>git format-patch</code> and <code>git am</code>, or just 'dcommit’ing to the SVN repository.</p>   <p>Running <code>git merge</code> or <code>git pull</code> is NOT recommended on a branch you plan to <code>dcommit</code> from because Subversion users cannot see any merges you’ve made. Furthermore, if you merge or pull from a Git branch that is a mirror of an SVN branch, <code>dcommit</code> may commit to the wrong branch.</p>   <p>If you do merge, note the following rule: <code>git svn dcommit</code> will attempt to commit on top of the SVN commit named in</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>git log --grep=^git-svn-id: --first-parent -1</pre> </div> </div>  <p>You <code>must</code> therefore ensure that the most recent commit of the branch you want to dcommit to is the <code>first</code> parent of the merge. Chaos will ensue otherwise, especially if the first parent is an older commit on the same SVN branch.</p>   <p><code>git clone</code> does not clone branches under the refs/remotes/ hierarchy or any <code>git svn</code> metadata, or config. So repositories created and managed with using <code>git svn</code> should use <code>rsync</code> for cloning, if cloning is to be done at all.</p>   <p>Since <code>dcommit</code> uses rebase internally, any Git branches you <code>git push</code> to before <code>dcommit</code> on will require forcing an overwrite of the existing ref on the remote repository. This is generally considered bad practice, see the <a href=\"git-push\">git-push[1]</a> documentation for details.</p>   <p>Do not use the --amend option of <a href=\"git-commit\">git-commit[1]</a> on a change you’ve already dcommitted. It is considered bad practice to --amend commits you’ve already pushed to a remote repository for other users, and dcommit with SVN is analogous to that.</p>   <p>When cloning an SVN repository, if none of the options for describing the repository layout is used (--trunk, --tags, --branches, --stdlayout), <code>git svn clone</code> will create a Git repository with completely linear history, where branches and tags appear as separate directories in the working copy. While this is the easiest way to get a copy of a complete repository, for projects with many branches it will lead to a working copy many times larger than just the trunk. Thus for projects using the standard directory structure (trunk/branches/tags), it is recommended to clone with option <code>--stdlayout</code>. If the project uses a non-standard structure, and/or if branches and tags are not required, it is easiest to only clone one directory (typically trunk), without giving any repository layout options. If the full history with branches and tags is required, the options <code>--trunk</code> / <code>--branches</code> / <code>--tags</code> must be used.</p>   <p>When using multiple --branches or --tags, <code>git svn</code> does not automatically handle name collisions (for example, if two branches from different paths have the same name, or if a branch and a tag have the same name). In these cases, use <code>init</code> to set up your Git repository then, before your first <code>fetch</code>, edit the $GIT_DIR/config file so that the branches and tags are associated with different name spaces. For example:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>branches = stable/*:refs/remotes/svn/stable/*\nbranches = debug/*:refs/remotes/svn/debug/*</pre> </div> </div>\n</div>   <h2 id=\"_bugs\">Bugs</h2> <div class=\"sectionbody\"> <p>We ignore all SVN properties except svn:executable. Any unhandled properties are logged to $GIT_DIR/svn/&lt;refname&gt;/unhandled.log</p>   <p>Renamed and copied directories are not detected by Git and hence not tracked when committing to SVN. I do not plan on adding support for this as it’s quite difficult and time-consuming to get working for all the possible corner cases (Git doesn’t do it, either). Committing renamed and copied files is fully supported if they’re similar enough for Git to detect them.</p>   <p>In SVN, it is possible (though discouraged) to commit changes to a tag (because a tag is just a directory copy, thus technically the same as a branch). When cloning an SVN repository, <code>git svn</code> cannot know if such a commit to a tag will happen in the future. Thus it acts conservatively and imports all SVN tags as branches, prefixing the tag name with <code>tags/</code>.</p> </div>   <h2 id=\"_configuration\">Configuration</h2> <div class=\"sectionbody\"> <p><code>git svn</code> stores [svn-remote] configuration information in the repository $GIT_DIR/config file. It is similar the core Git [remote] sections except <code>fetch</code> keys do not accept glob arguments; but they are instead handled by the <code>branches</code> and <code>tags</code> keys. Since some SVN repositories are oddly configured with multiple projects glob expansions such those listed below are allowed:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>[svn-remote \"project-a\"]\n        url = http://server.org/svn\n        fetch = trunk/project-a:refs/remotes/project-a/trunk\n        branches = branches/*/project-a:refs/remotes/project-a/branches/*\n        branches = branches/release_*:refs/remotes/project-a/branches/release_*\n        branches = branches/re*se:refs/remotes/project-a/branches/*\n        tags = tags/*/project-a:refs/remotes/project-a/tags/*</pre> </div> </div>  <p>Keep in mind that the <code>*</code> (asterisk) wildcard of the local ref (right of the <code>:</code>) *must* be the farthest right path component; however the remote wildcard may be anywhere as long as it’s an independent path component (surrounded by <code>/</code> or EOL). This type of configuration is not automatically created by <code>init</code> and should be manually entered with a text-editor or using <code>git config</code>.</p>   <p>Also note that only one asterisk is allowed per word. For example:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>branches = branches/re*se:refs/remotes/project-a/branches/*</pre> </div> </div>  <p>will match branches <code>release</code>, <code>rese</code>, <code>re123se</code>, however</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>branches = branches/re*s*e:refs/remotes/project-a/branches/*</pre> </div> </div>  <p>will produce an error.</p>   <p>It is also possible to fetch a subset of branches or tags by using a comma-separated list of names within braces. For example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>[svn-remote \"huge-project\"]\n        url = http://server.org/svn\n        fetch = trunk/src:refs/remotes/trunk\n        branches = branches/{red,green}/src:refs/remotes/project-a/branches/*\n        tags = tags/{1.0,2.0}/src:refs/remotes/project-a/tags/*</pre> </div> </div>  <p>Multiple fetch, branches, and tags keys are supported:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>[svn-remote \"messy-repo\"]\n        url = http://server.org/svn\n        fetch = trunk/project-a:refs/remotes/project-a/trunk\n        fetch = branches/demos/june-project-a-demo:refs/remotes/project-a/demos/june-demo\n        branches = branches/server/*:refs/remotes/project-a/branches/*\n        branches = branches/demos/2011/*:refs/remotes/project-a/2011-demos/*\n        tags = tags/server/*:refs/remotes/project-a/tags/*</pre> </div> </div>  <p>Creating a branch in such a configuration requires disambiguating which location to use using the -d or --destination flag:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git svn branch -d branches/server release-2-3-0</pre> </div> </div>  <p>Note that git-svn keeps track of the highest revision in which a branch or tag has appeared. If the subset of branches or tags is changed after fetching, then $GIT_DIR/svn/.metadata must be manually edited to remove (or reset) branches-maxRev and/or tags-maxRev as appropriate.</p> </div>   <h2 id=\"_files\">Files</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">$GIT_DIR/svn/*\\*/.rev_map.*</dt> <dd> <p>Mapping between Subversion revision numbers and Git commit names. In a repository where the noMetadata option is not set, this can be rebuilt from the git-svn-id: lines that are at the end of every commit (see the <code>svn.noMetadata</code> section above for details).</p>  <p><code>git svn fetch</code> and <code>git svn rebase</code> automatically update the rev_map if it is missing or not up to date. <code>git svn reset</code> automatically rewinds it.</p>  </dd> </dl> </div></div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-rebase\">git-rebase[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-svn\" class=\"_attribution-link\">https://git-scm.com/docs/git-svn</a>\n  </p>\n</div>\n","git-cat-file":"<h1>git-cat-file</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-cat-file - Provide content or type and size information for repository objects</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git cat-file (-t [--allow-unknown-type]| -s [--allow-unknown-type]| -e | -p | &lt;type&gt; | --textconv ) &lt;object&gt;\ngit cat-file (--batch | --batch-check) [--follow-symlinks]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>In its first form, the command provides the content or the type of an object in the repository. The type is required unless <code>-t</code> or <code>-p</code> is used to find the object type, or <code>-s</code> is used to find the object size, or <code>--textconv</code> is used (which implies type \"blob\").</p>   <p>In the second form, a list of objects (separated by linefeeds) is provided on stdin, and the SHA-1, type, and size of each object is printed on stdout.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">&lt;object&gt;</dt> <dd> <p>The name of the object to show. For a more complete list of ways to spell object names, see the \"SPECIFYING REVISIONS\" section in <a href=\"gitrevisions\">gitrevisions[7]</a>.</p> </dd> <dt class=\"hdlist1\">-t</dt> <dd> <p>Instead of the content, show the object type identified by &lt;object&gt;.</p> </dd> <dt class=\"hdlist1\">-s</dt> <dd> <p>Instead of the content, show the object size identified by &lt;object&gt;.</p> </dd> <dt class=\"hdlist1\">-e</dt> <dd> <p>Suppress all output; instead exit with zero status if &lt;object&gt; exists and is a valid object.</p> </dd> <dt class=\"hdlist1\">-p</dt> <dd> <p>Pretty-print the contents of &lt;object&gt; based on its type.</p> </dd> <dt class=\"hdlist1\">&lt;type&gt;</dt> <dd> <p>Typically this matches the real type of &lt;object&gt; but asking for a type that can trivially be dereferenced from the given &lt;object&gt; is also permitted. An example is to ask for a \"tree\" with &lt;object&gt; being a commit object that contains it, or to ask for a \"blob\" with &lt;object&gt; being a tag object that points at it.</p> </dd> <dt class=\"hdlist1\">--textconv</dt> <dd> <p>Show the content as transformed by a textconv filter. In this case, &lt;object&gt; has be of the form &lt;tree-ish&gt;:&lt;path&gt;, or :&lt;path&gt; in order to apply the filter to the content recorded in the index at &lt;path&gt;.</p> </dd> <dt class=\"hdlist1\">--batch</dt> <dt class=\"hdlist1\">--batch=&lt;format&gt;</dt> <dd> <p>Print object information and contents for each object provided on stdin. May not be combined with any other options or arguments. See the section <code>BATCH OUTPUT</code> below for details.</p> </dd> <dt class=\"hdlist1\">--batch-check</dt> <dt class=\"hdlist1\">--batch-check=&lt;format&gt;</dt> <dd> <p>Print object information for each object provided on stdin. May not be combined with any other options or arguments. See the section <code>BATCH OUTPUT</code> below for details.</p> </dd> <dt class=\"hdlist1\">--batch-all-objects</dt> <dd> <p>Instead of reading a list of objects on stdin, perform the requested batch operation on all objects in the repository and any alternate object stores (not just reachable objects). Requires <code>--batch</code> or <code>--batch-check</code> be specified. Note that the objects are visited in order sorted by their hashes.</p> </dd> <dt class=\"hdlist1\">--buffer</dt> <dd> <p>Normally batch output is flushed after each object is output, so that a process can interactively read and write from <code>cat-file</code>. With this option, the output uses normal stdio buffering; this is much more efficient when invoking <code>--batch-check</code> on a large number of objects.</p> </dd> <dt class=\"hdlist1\">--allow-unknown-type</dt> <dd> <p>Allow -s or -t to query broken/corrupt objects of unknown type.</p> </dd> <dt class=\"hdlist1\">--follow-symlinks</dt> <dd> <p>With --batch or --batch-check, follow symlinks inside the repository when requesting objects with extended SHA-1 expressions of the form tree-ish:path-in-tree. Instead of providing output about the link itself, provide output about the linked-to object. If a symlink points outside the tree-ish (e.g. a link to /foo or a root-level link to ../foo), the portion of the link which is outside the tree will be printed.</p>  <p>This option does not (currently) work correctly when an object in the index is specified (e.g. <code>:link</code> instead of <code>HEAD:link</code>) rather than one in the tree.</p>   <p>This option cannot (currently) be used unless <code>--batch</code> or <code>--batch-check</code> is used.</p>   <p>For example, consider a git repository containing:</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"literalblock\"> <div class=\"content\"> <pre>f: a file containing \"hello\\n\"\nlink: a symlink to f\ndir/link: a symlink to ../f\nplink: a symlink to ../f\nalink: a symlink to /etc/passwd</pre> </div> </div> </div> </div>  <p>For a regular file <code>f</code>, <code>echo HEAD:f | git cat-file --batch</code> would print</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"literalblock\"> <div class=\"content\"> <pre>ce013625030ba8dba906f756967f9e9ca394464a blob 6</pre> </div> </div> </div> </div>  <p>And <code>echo HEAD:link | git cat-file --batch --follow-symlinks</code> would print the same thing, as would <code>HEAD:dir/link</code>, as they both point at <code>HEAD:f</code>.</p>   <p>Without <code>--follow-symlinks</code>, these would print data about the symlink itself. In the case of <code>HEAD:link</code>, you would see</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"literalblock\"> <div class=\"content\"> <pre>4d1ae35ba2c8ec712fa2a379db44ad639ca277bd blob 1</pre> </div> </div> </div> </div>  <p>Both <code>plink</code> and <code>alink</code> point outside the tree, so they would respectively print:</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"literalblock\"> <div class=\"content\"> <pre>symlink 4\n../f</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>symlink 11\n/etc/passwd</pre> </div> </div> </div> </div> </dd> </dl> </div></div>   <h2 id=\"_output\">Output</h2> <div class=\"sectionbody\"> <p>If <code>-t</code> is specified, one of the &lt;type&gt;.</p>   <p>If <code>-s</code> is specified, the size of the &lt;object&gt; in bytes.</p>   <p>If <code>-e</code> is specified, no output.</p>   <p>If <code>-p</code> is specified, the contents of &lt;object&gt; are pretty-printed.</p>   <p>If &lt;type&gt; is specified, the raw (though uncompressed) contents of the &lt;object&gt; will be returned.</p> </div>   <h2 id=\"_batch_output\">Batch output</h2> <div class=\"sectionbody\"> <p>If <code>--batch</code> or <code>--batch-check</code> is given, <code>cat-file</code> will read objects from stdin, one per line, and print information about them. By default, the whole line is considered as an object, as if it were fed to <a href=\"git-rev-parse\">git-rev-parse[1]</a>.</p>   <p>You can specify the information shown for each object by using a custom <code>&lt;format&gt;</code>. The <code>&lt;format&gt;</code> is copied literally to stdout for each object, with placeholders of the form <code>%(atom)</code> expanded, followed by a newline. The available atoms are:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>objectname</code></dt> <dd> <p>The 40-hex object name of the object.</p> </dd> <dt class=\"hdlist1\"><code>objecttype</code></dt> <dd> <p>The type of of the object (the same as <code>cat-file -t</code> reports).</p> </dd> <dt class=\"hdlist1\"><code>objectsize</code></dt> <dd> <p>The size, in bytes, of the object (the same as <code>cat-file -s</code> reports).</p> </dd> <dt class=\"hdlist1\"><code>objectsize:disk</code></dt> <dd> <p>The size, in bytes, that the object takes up on disk. See the note about on-disk sizes in the <code>CAVEATS</code> section below.</p> </dd> <dt class=\"hdlist1\"><code>deltabase</code></dt> <dd> <p>If the object is stored as a delta on-disk, this expands to the 40-hex sha1 of the delta base object. Otherwise, expands to the null sha1 (40 zeroes). See <code>CAVEATS</code> below.</p> </dd> <dt class=\"hdlist1\"><code>rest</code></dt> <dd> <p>If this atom is used in the output string, input lines are split at the first whitespace boundary. All characters before that whitespace are considered to be the object name; characters after that first run of whitespace (i.e., the \"rest\" of the line) are output in place of the <code>%(rest)</code> atom.</p> </dd> </dl> </div>  <p>If no format is specified, the default format is <code>%(objectname)\n%(objecttype) %(objectsize)</code>.</p>   <p>If <code>--batch</code> is specified, the object information is followed by the object contents (consisting of <code>%(objectsize)</code> bytes), followed by a newline.</p>   <p>For example, <code>--batch</code> without a custom format would produce:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>&lt;sha1&gt; SP &lt;type&gt; SP &lt;size&gt; LF\n&lt;contents&gt; LF</pre> </div> </div>  <p>Whereas <code>--batch-check='%(objectname) %(objecttype)'</code> would produce:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>&lt;sha1&gt; SP &lt;type&gt; LF</pre> </div> </div>  <p>If a name is specified on stdin that cannot be resolved to an object in the repository, then <code>cat-file</code> will ignore any custom format and print:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>&lt;object&gt; SP missing LF</pre> </div> </div>  <p>If --follow-symlinks is used, and a symlink in the repository points outside the repository, then <code>cat-file</code> will ignore any custom format and print:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>symlink SP &lt;size&gt; LF\n&lt;symlink&gt; LF</pre> </div> </div>  <p>The symlink will either be absolute (beginning with a /), or relative to the tree root. For instance, if dir/link points to ../../foo, then &lt;symlink&gt; will be ../foo. &lt;size&gt; is the size of the symlink in bytes.</p>   <p>If --follow-symlinks is used, the following error messages will be displayed:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>&lt;object&gt; SP missing LF</pre> </div> </div>  <p>is printed when the initial symlink requested does not exist.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>dangling SP &lt;size&gt; LF\n&lt;object&gt; LF</pre> </div> </div>  <p>is printed when the initial symlink exists, but something that it (transitive-of) points to does not.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>loop SP &lt;size&gt; LF\n&lt;object&gt; LF</pre> </div> </div>  <p>is printed for symlink loops (or any symlinks that require more than 40 link resolutions to resolve).</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>notdir SP &lt;size&gt; LF\n&lt;object&gt; LF</pre> </div> </div>  <p>is printed when, during symlink resolution, a file is used as a directory name.</p> </div>   <h2 id=\"_caveats\">Caveats</h2> <div class=\"sectionbody\"> <p>Note that the sizes of objects on disk are reported accurately, but care should be taken in drawing conclusions about which refs or objects are responsible for disk usage. The size of a packed non-delta object may be much larger than the size of objects which delta against it, but the choice of which object is the base and which is the delta is arbitrary and is subject to change during a repack.</p>   <p>Note also that multiple copies of an object may be present in the object database; in this case, it is undefined which copy’s size or delta base will be reported.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-cat-file\" class=\"_attribution-link\">https://git-scm.com/docs/git-cat-file</a>\n  </p>\n</div>\n","git-merge-base":"<h1>git-merge-base</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-merge-base - Find as good common ancestors as possible for a merge</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git merge-base [-a|--all] &lt;commit&gt; &lt;commit&gt;…​\ngit merge-base [-a|--all] --octopus &lt;commit&gt;…​\ngit merge-base --is-ancestor &lt;commit&gt; &lt;commit&gt;\ngit merge-base --independent &lt;commit&gt;…​\ngit merge-base --fork-point &lt;ref&gt; [&lt;commit&gt;]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p><code>git merge-base</code> finds best common ancestor(s) between two commits to use in a three-way merge. One common ancestor is <code>better</code> than another common ancestor if the latter is an ancestor of the former. A common ancestor that does not have any better common ancestor is a <code>best common ancestor</code>, i.e. a <code>merge base</code>. Note that there can be more than one merge base for a pair of commits.</p> </div>   <h2 id=\"_operation_modes\">Operation modes</h2> <div class=\"sectionbody\"> <p>As the most common special case, specifying only two commits on the command line means computing the merge base between the given two commits.</p>   <p>More generally, among the two commits to compute the merge base from, one is specified by the first commit argument on the command line; the other commit is a (possibly hypothetical) commit that is a merge across all the remaining commits on the command line.</p>   <p>As a consequence, the <code>merge base</code> is not necessarily contained in each of the commit arguments if more than two commits are specified. This is different from <a href=\"git-show-branch\">git-show-branch[1]</a> when used with the <code>--merge-base</code> option.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--octopus</dt> <dd> <p>Compute the best common ancestors of all supplied commits, in preparation for an n-way merge. This mimics the behavior of <code>git show-branch --merge-base</code>.</p> </dd> <dt class=\"hdlist1\">--independent</dt> <dd> <p>Instead of printing merge bases, print a minimal subset of the supplied commits with the same ancestors. In other words, among the commits given, list those which cannot be reached from any other. This mimics the behavior of <code>git show-branch --independent</code>.</p> </dd> <dt class=\"hdlist1\">--is-ancestor</dt> <dd> <p>Check if the first &lt;commit&gt; is an ancestor of the second &lt;commit&gt;, and exit with status 0 if true, or with status 1 if not. Errors are signaled by a non-zero status that is not 1.</p> </dd> <dt class=\"hdlist1\">--fork-point</dt> <dd> <p>Find the point at which a branch (or any history that leads to &lt;commit&gt;) forked from another branch (or any reference) &lt;ref&gt;. This does not just look for the common ancestor of the two commits, but also takes into account the reflog of &lt;ref&gt; to see if the history leading to &lt;commit&gt; forked from an earlier incarnation of the branch &lt;ref&gt; (see discussion on this mode below).</p> </dd> </dl> </div>\n</div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-a</dt> <dt class=\"hdlist1\">--all</dt> <dd> <p>Output all merge bases for the commits, instead of just one.</p> </dd> </dl> </div></div>   <h2 id=\"_discussion\">Discussion</h2> <div class=\"sectionbody\"> <p>Given two commits <code>A</code> and <code>B</code>, <code>git merge-base A B</code> will output a commit which is reachable from both <code>A</code> and <code>B</code> through the parent relationship.</p>   <p>For example, with this topology:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>     o---o---o---B\n    /\n---o---1---o---o---o---A</pre> </div> </div>  <p>the merge base between <code>A</code> and <code>B</code> is <code>1</code>.</p>   <p>Given three commits <code>A</code>, <code>B</code> and <code>C</code>, <code>git merge-base A B C</code> will compute the merge base between <code>A</code> and a hypothetical commit <code>M</code>, which is a merge between <code>B</code> and <code>C</code>. For example, with this topology:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>       o---o---o---o---C\n      /\n     /   o---o---o---B\n    /   /\n---2---1---o---o---o---A</pre> </div> </div>  <p>the result of <code>git merge-base A B C</code> is <code>1</code>. This is because the equivalent topology with a merge commit <code>M</code> between <code>B</code> and <code>C</code> is:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>       o---o---o---o---o\n      /                 \\\n     /   o---o---o---o---M\n    /   /\n---2---1---o---o---o---A</pre> </div> </div>  <p>and the result of <code>git merge-base A M</code> is <code>1</code>. Commit <code>2</code> is also a common ancestor between <code>A</code> and <code>M</code>, but <code>1</code> is a better common ancestor, because <code>2</code> is an ancestor of <code>1</code>. Hence, <code>2</code> is not a merge base.</p>   <p>The result of <code>git merge-base --octopus A B C</code> is <code>2</code>, because <code>2</code> is the best common ancestor of all commits.</p>   <p>When the history involves criss-cross merges, there can be more than one <code>best</code> common ancestor for two commits. For example, with this topology:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>---1---o---A\n\\ /\n X\n/ \\\n---2---o---o---B</pre> </div> </div>  <p>both <code>1</code> and <code>2</code> are merge-bases of A and B. Neither one is better than the other (both are <code>best</code> merge bases). When the <code>--all</code> option is not given, it is unspecified which best one is output.</p>   <p>A common idiom to check \"fast-forward-ness\" between two commits A and B is (or at least used to be) to compute the merge base between A and B, and check if it is the same as A, in which case, A is an ancestor of B. You will see this idiom used often in older scripts.</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>A=$(git rev-parse --verify A)\nif test \"$A\" = \"$(git merge-base A B)\"\nthen\n    ... A is an ancestor of B ...\nfi</pre> </div> </div>  <p>In modern git, you can say this in a more direct way:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>if git merge-base --is-ancestor A B\nthen\n    ... A is an ancestor of B ...\nfi</pre> </div> </div>  <p>instead.</p> </div>   <h2 id=\"_discussion_on_fork_point_mode\">Discussion on fork-point mode</h2> <div class=\"sectionbody\"> <p>After working on the <code>topic</code> branch created with <code>git checkout -b\ntopic origin/master</code>, the history of remote-tracking branch <code>origin/master</code> may have been rewound and rebuilt, leading to a history of this shape:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>         o---B1\n        /\n---o---o---B2--o---o---o---B (origin/master)\n    \\\n     B3\n      \\\n       Derived (topic)</pre> </div> </div>  <p>where <code>origin/master</code> used to point at commits B3, B2, B1 and now it points at B, and your <code>topic</code> branch was started on top of it back when <code>origin/master</code> was at B3. This mode uses the reflog of <code>origin/master</code> to find B3 as the fork point, so that the <code>topic</code> can be rebased on top of the updated <code>origin/master</code> by:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>$ fork_point=$(git merge-base --fork-point origin/master topic)\n$ git rebase --onto origin/master $fork_point topic</pre> </div> </div>\n</div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-rev-list\">git-rev-list[1]</a>, <a href=\"git-show-branch\">git-show-branch[1]</a>, <a href=\"git-merge\">git-merge[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-merge-base\" class=\"_attribution-link\">https://git-scm.com/docs/git-merge-base</a>\n  </p>\n</div>\n","git-read-tree":"<h1>git-read-tree</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-read-tree - Reads tree information into the index</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git read-tree [[-m [--trivial] [--aggressive] | --reset | --prefix=&lt;prefix&gt;]\n                [-u [--exclude-per-directory=&lt;gitignore&gt;] | -i]]\n                [--index-output=&lt;file&gt;] [--no-sparse-checkout]\n                (--empty | &lt;tree-ish1&gt; [&lt;tree-ish2&gt; [&lt;tree-ish3&gt;]])</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Reads the tree information given by &lt;tree-ish&gt; into the index, but does not actually <strong>update</strong> any of the files it \"caches\". (see: <a href=\"git-checkout-index\">git-checkout-index[1]</a>)</p>   <p>Optionally, it can merge a tree into the index, perform a fast-forward (i.e. 2-way) merge, or a 3-way merge, with the <code>-m</code> flag. When used with <code>-m</code>, the <code>-u</code> flag causes it to also update the files in the work tree with the result of the merge.</p>   <p>Trivial merges are done by <code>git read-tree</code> itself. Only conflicting paths will be in unmerged state when <code>git read-tree</code> returns.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-m</dt> <dd> <p>Perform a merge, not just a read. The command will refuse to run if your index file has unmerged entries, indicating that you have not finished previous merge you started.</p> </dd> <dt class=\"hdlist1\">--reset</dt> <dd> <p>Same as -m, except that unmerged entries are discarded instead of failing.</p> </dd> <dt class=\"hdlist1\">-u</dt> <dd> <p>After a successful merge, update the files in the work tree with the result of the merge.</p> </dd> <dt class=\"hdlist1\">-i</dt> <dd> <p>Usually a merge requires the index file as well as the files in the working tree to be up to date with the current head commit, in order not to lose local changes. This flag disables the check with the working tree and is meant to be used when creating a merge of trees that are not directly related to the current working tree status into a temporary index file.</p> </dd> <dt class=\"hdlist1\">-n</dt> <dt class=\"hdlist1\">--dry-run</dt> <dd> <p>Check if the command would error out, without updating the index or the files in the working tree for real.</p> </dd> <dt class=\"hdlist1\">-v</dt> <dd> <p>Show the progress of checking files out.</p> </dd> <dt class=\"hdlist1\">--trivial</dt> <dd> <p>Restrict three-way merge by <code>git read-tree</code> to happen only if there is no file-level merging required, instead of resolving merge for trivial cases and leaving conflicting files unresolved in the index.</p> </dd> <dt class=\"hdlist1\">--aggressive</dt> <dd> <p>Usually a three-way merge by <code>git read-tree</code> resolves the merge for really trivial cases and leaves other cases unresolved in the index, so that porcelains can implement different merge policies. This flag makes the command resolve a few more cases internally:</p> <div class=\"ulist\"> <ul> <li> <p>when one side removes a path and the other side leaves the path unmodified. The resolution is to remove that path.</p> </li> <li> <p>when both sides remove a path. The resolution is to remove that path.</p> </li> <li> <p>when both sides add a path identically. The resolution is to add that path.</p> </li> </ul> </div> </dd> <dt class=\"hdlist1\">--prefix=&lt;prefix&gt;/</dt> <dd> <p>Keep the current index contents, and read the contents of the named tree-ish under the directory at <code>&lt;prefix&gt;</code>. The command will refuse to overwrite entries that already existed in the original index file. Note that the <code>&lt;prefix&gt;/</code> value must end with a slash.</p> </dd> <dt class=\"hdlist1\">--exclude-per-directory=&lt;gitignore&gt;</dt> <dd> <p>When running the command with <code>-u</code> and <code>-m</code> options, the merge result may need to overwrite paths that are not tracked in the current branch. The command usually refuses to proceed with the merge to avoid losing such a path. However this safety valve sometimes gets in the way. For example, it often happens that the other branch added a file that used to be a generated file in your branch, and the safety valve triggers when you try to switch to that branch after you ran <code>make</code> but before running <code>make clean</code> to remove the generated file. This option tells the command to read per-directory exclude file (usually <code>.gitignore</code>) and allows such an untracked but explicitly ignored file to be overwritten.</p> </dd> <dt class=\"hdlist1\">--index-output=&lt;file&gt;</dt> <dd> <p>Instead of writing the results out to <code>$GIT_INDEX_FILE</code>, write the resulting index in the named file. While the command is operating, the original index file is locked with the same mechanism as usual. The file must allow to be rename(2)ed into from a temporary file that is created next to the usual index file; typically this means it needs to be on the same filesystem as the index file itself, and you need write permission to the directories the index file and index output file are located in.</p> </dd> <dt class=\"hdlist1\">--no-sparse-checkout</dt> <dd> <p>Disable sparse checkout support even if <code>core.sparseCheckout</code> is true.</p> </dd> <dt class=\"hdlist1\">--empty</dt> <dd> <p>Instead of reading tree object(s) into the index, just empty it.</p> </dd> <dt class=\"hdlist1\">&lt;tree-ish#&gt;</dt> <dd> <p>The id of the tree object(s) to be read/merged.</p> </dd> </dl> </div></div>   <h2 id=\"_merging\">Merging</h2> <div class=\"sectionbody\"> <p>If <code>-m</code> is specified, <code>git read-tree</code> can perform 3 kinds of merge, a single tree merge if only 1 tree is given, a fast-forward merge with 2 trees, or a 3-way merge if 3 trees are provided.</p>  <div class=\"sect2\"> <h3 id=\"_single_tree_merge\">Single Tree Merge</h3>  <p>If only 1 tree is specified, <code>git read-tree</code> operates as if the user did not specify <code>-m</code>, except that if the original index has an entry for a given pathname, and the contents of the path match with the tree being read, the stat info from the index is used. (In other words, the index’s stat()s take precedence over the merged tree’s).</p>   <p>That means that if you do a <code>git read-tree -m &lt;newtree&gt;</code> followed by a <code>git checkout-index -f -u -a</code>, the <code>git checkout-index</code> only checks out the stuff that really changed.</p>   <p>This is used to avoid unnecessary false hits when <code>git diff-files</code> is run after <code>git read-tree</code>.</p>  </div> <div class=\"sect2\"> <h3 id=\"_two_tree_merge\">Two Tree Merge</h3>  <p>Typically, this is invoked as <code>git read-tree -m $H $M</code>, where $H is the head commit of the current repository, and $M is the head of a foreign tree, which is simply ahead of $H (i.e. we are in a fast-forward situation).</p>   <p>When two trees are specified, the user is telling <code>git read-tree</code> the following:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>The current index and work tree is derived from $H, but the user may have local changes in them since $H.</p> </li> <li> <p>The user wants to fast-forward to $M.</p> </li> </ol> </div>  <p>In this case, the <code>git read-tree -m $H $M</code> command makes sure that no local change is lost as the result of this \"merge\". Here are the \"carry forward\" rules, where \"I\" denotes the index, \"clean\" means that index and work tree coincide, and \"exists\"/\"nothing\" refer to the presence of a path in the specified commit:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>I                   H        M        Result\n   -------------------------------------------------------\n 0  nothing             nothing  nothing  (does not happen)\n 1  nothing             nothing  exists   use M\n 2  nothing             exists   nothing  remove path from index\n 3  nothing             exists   exists,  use M if \"initial checkout\",\n                 H == M   keep index otherwise\n                 exists,  fail\n                 H != M</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>   clean I==H  I==M\n  ------------------\n4  yes   N/A   N/A     nothing  nothing  keep index\n5  no    N/A   N/A     nothing  nothing  keep index</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>6  yes   N/A   yes     nothing  exists   keep index\n7  no    N/A   yes     nothing  exists   keep index\n8  yes   N/A   no      nothing  exists   fail\n9  no    N/A   no      nothing  exists   fail</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>10 yes   yes   N/A     exists   nothing  remove path from index\n11 no    yes   N/A     exists   nothing  fail\n12 yes   no    N/A     exists   nothing  fail\n13 no    no    N/A     exists   nothing  fail</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>clean (H==M)\n   ------\n 14 yes                 exists   exists   keep index\n 15 no                  exists   exists   keep index</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>   clean I==H  I==M (H!=M)\n  ------------------\n16 yes   no    no      exists   exists   fail\n17 no    no    no      exists   exists   fail\n18 yes   no    yes     exists   exists   keep index\n19 no    no    yes     exists   exists   keep index\n20 yes   yes   no      exists   exists   use M\n21 no    yes   no      exists   exists   fail</pre> </div> </div>  <p>In all \"keep index\" cases, the index entry stays as in the original index file. If the entry is not up to date, <code>git read-tree</code> keeps the copy in the work tree intact when operating under the -u flag.</p>   <p>When this form of <code>git read-tree</code> returns successfully, you can see which of the \"local changes\" that you made were carried forward by running <code>git diff-index --cached $M</code>. Note that this does not necessarily match what <code>git diff-index --cached $H</code> would have produced before such a two tree merge. This is because of cases 18 and 19 --- if you already had the changes in $M (e.g. maybe you picked it up via e-mail in a patch form), <code>git diff-index\n--cached $H</code> would have told you about the change before this merge, but it would not show in <code>git diff-index --cached $M</code> output after the two-tree merge.</p>   <p>Case 3 is slightly tricky and needs explanation. The result from this rule logically should be to remove the path if the user staged the removal of the path and then switching to a new branch. That however will prevent the initial checkout from happening, so the rule is modified to use M (new tree) only when the content of the index is empty. Otherwise the removal of the path is kept as long as $H and $M are the same.</p>  </div> <div class=\"sect2\"> <h3 id=\"_3_way_merge\">3-Way Merge</h3>  <p>Each \"index\" entry has two bits worth of \"stage\" state. stage 0 is the normal one, and is the only one you’d see in any kind of normal use.</p>   <p>However, when you do <code>git read-tree</code> with three trees, the \"stage\" starts out at 1.</p>   <p>This means that you can do</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git read-tree -m &lt;tree1&gt; &lt;tree2&gt; &lt;tree3&gt;</pre> </div> </div>  <p>and you will end up with an index with all of the &lt;tree1&gt; entries in \"stage1\", all of the &lt;tree2&gt; entries in \"stage2\" and all of the &lt;tree3&gt; entries in \"stage3\". When performing a merge of another branch into the current branch, we use the common ancestor tree as &lt;tree1&gt;, the current branch head as &lt;tree2&gt;, and the other branch head as &lt;tree3&gt;.</p>   <p>Furthermore, <code>git read-tree</code> has special-case logic that says: if you see a file that matches in all respects in the following states, it \"collapses\" back to \"stage0\":</p>  <div class=\"ulist\"> <ul> <li> <p>stage 2 and 3 are the same; take one or the other (it makes no difference - the same work has been done on our branch in stage 2 and their branch in stage 3)</p> </li> <li> <p>stage 1 and stage 2 are the same and stage 3 is different; take stage 3 (our branch in stage 2 did not do anything since the ancestor in stage 1 while their branch in stage 3 worked on it)</p> </li> <li> <p>stage 1 and stage 3 are the same and stage 2 is different take stage 2 (we did something while they did nothing)</p> </li> </ul> </div>  <p>The <code>git write-tree</code> command refuses to write a nonsensical tree, and it will complain about unmerged entries if it sees a single entry that is not stage 0.</p>   <p>OK, this all sounds like a collection of totally nonsensical rules, but it’s actually exactly what you want in order to do a fast merge. The different stages represent the \"result tree\" (stage 0, aka \"merged\"), the original tree (stage 1, aka \"orig\"), and the two trees you are trying to merge (stage 2 and 3 respectively).</p>   <p>The order of stages 1, 2 and 3 (hence the order of three &lt;tree-ish&gt; command-line arguments) are significant when you start a 3-way merge with an index file that is already populated. Here is an outline of how the algorithm works:</p>  <div class=\"ulist\"> <ul> <li> <p>if a file exists in identical format in all three trees, it will automatically collapse to \"merged\" state by <code>git read-tree</code>.</p> </li> <li> <p>a file that has <code>any</code> difference what-so-ever in the three trees will stay as separate entries in the index. It’s up to \"porcelain policy\" to determine how to remove the non-0 stages, and insert a merged version.</p> </li> <li> <p>the index file saves and restores with all this information, so you can merge things incrementally, but as long as it has entries in stages 1/2/3 (i.e., \"unmerged entries\") you can’t write the result. So now the merge algorithm ends up being really simple:</p> <div class=\"ulist\"> <ul> <li> <p>you walk the index in order, and ignore all entries of stage 0, since they’ve already been done.</p> </li> <li> <p>if you find a \"stage1\", but no matching \"stage2\" or \"stage3\", you know it’s been removed from both trees (it only existed in the original tree), and you remove that entry.</p> </li> <li> <p>if you find a matching \"stage2\" and \"stage3\" tree, you remove one of them, and turn the other into a \"stage0\" entry. Remove any matching \"stage1\" entry if it exists too. .. all the normal trivial rules ..</p> </li> </ul> </div> </li> </ul> </div>  <p>You would normally use <code>git merge-index</code> with supplied <code>git merge-one-file</code> to do this last step. The script updates the files in the working tree as it merges each path and at the end of a successful merge.</p>   <p>When you start a 3-way merge with an index file that is already populated, it is assumed that it represents the state of the files in your work tree, and you can even have files with changes unrecorded in the index file. It is further assumed that this state is \"derived\" from the stage 2 tree. The 3-way merge refuses to run if it finds an entry in the original index file that does not match stage 2.</p>   <p>This is done to prevent you from losing your work-in-progress changes, and mixing your random changes in an unrelated merge commit. To illustrate, suppose you start from what has been committed last to your repository:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ JC=`git rev-parse --verify \"HEAD^0\"`\n$ git checkout-index -f -u -a $JC</pre> </div> </div>  <p>You do random edits, without running <code>git update-index</code>. And then you notice that the tip of your \"upstream\" tree has advanced since you pulled from him:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git fetch git://.... linus\n$ LT=`git rev-parse FETCH_HEAD`</pre> </div> </div>  <p>Your work tree is still based on your HEAD ($JC), but you have some edits since. Three-way merge makes sure that you have not added or modified index entries since $JC, and if you haven’t, then does the right thing. So with the following sequence:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git read-tree -m -u `git merge-base $JC $LT` $JC $LT\n$ git merge-index git-merge-one-file -a\n$ echo \"Merge with Linus\" | \\\n  git commit-tree `git write-tree` -p $JC -p $LT</pre> </div> </div>  <p>what you would commit is a pure merge between $JC and $LT without your work-in-progress changes, and your work tree would be updated to the result of the merge.</p>   <p>However, if you have local changes in the working tree that would be overwritten by this merge, <code>git read-tree</code> will refuse to run to prevent your changes from being lost.</p>   <p>In other words, there is no need to worry about what exists only in the working tree. When you have local changes in a part of the project that is not involved in the merge, your changes do not interfere with the merge, and are kept intact. When they <strong>do</strong> interfere, the merge does not even start (<code>git read-tree</code> complains loudly and fails without modifying anything). In such a case, you can simply continue doing what you were in the middle of doing, and when your working tree is ready (i.e. you have finished your work-in-progress), attempt the merge again.</p>  </div>\n</div>   <h2 id=\"_sparse_checkout\">Sparse checkout</h2> <div class=\"sectionbody\"> <p>\"Sparse checkout\" allows populating the working directory sparsely. It uses the skip-worktree bit (see <a href=\"git-update-index\">git-update-index[1]</a>) to tell Git whether a file in the working directory is worth looking at.</p>   <p><code>git read-tree</code> and other merge-based commands (<code>git merge</code>, <code>git checkout</code>…​) can help maintaining the skip-worktree bitmap and working directory update. <code>$GIT_DIR/info/sparse-checkout</code> is used to define the skip-worktree reference bitmap. When <code>git read-tree</code> needs to update the working directory, it resets the skip-worktree bit in the index based on this file, which uses the same syntax as .gitignore files. If an entry matches a pattern in this file, skip-worktree will not be set on that entry. Otherwise, skip-worktree will be set.</p>   <p>Then it compares the new skip-worktree value with the previous one. If skip-worktree turns from set to unset, it will add the corresponding file back. If it turns from unset to set, that file will be removed.</p>   <p>While <code>$GIT_DIR/info/sparse-checkout</code> is usually used to specify what files are in, you can also specify what files are <code>not</code> in, using negate patterns. For example, to remove the file <code>unwanted</code>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>/*\n!unwanted</pre> </div> </div>  <p>Another tricky thing is fully repopulating the working directory when you no longer want sparse checkout. You cannot just disable \"sparse checkout\" because skip-worktree bits are still in the index and your working directory is still sparsely populated. You should re-populate the working directory with the <code>$GIT_DIR/info/sparse-checkout</code> file content as follows:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>/*</pre> </div> </div>  <p>Then you can disable sparse checkout. Sparse checkout support in <code>git read-tree</code> and similar commands is disabled by default. You need to turn <code>core.sparseCheckout</code> on in order to have sparse checkout support.</p> </div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-write-tree\">git-write-tree[1]</a>; <a href=\"git-ls-files\">git-ls-files[1]</a>; <a href=\"gitignore\">gitignore[5]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-read-tree\" class=\"_attribution-link\">https://git-scm.com/docs/git-read-tree</a>\n  </p>\n</div>\n","git-show-ref":"<h1>git-show-ref</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-show-ref - List references in a local repository</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git show-ref [-q|--quiet] [--verify] [--head] [-d|--dereference]\n             [-s|--hash[=&lt;n&gt;]] [--abbrev[=&lt;n&gt;]] [--tags]\n             [--heads] [--] [&lt;pattern&gt;…​]\ngit show-ref --exclude-existing[=&lt;pattern&gt;]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Displays references available in a local repository along with the associated commit IDs. Results can be filtered using a pattern and tags can be dereferenced into object IDs. Additionally, it can be used to test whether a particular ref exists.</p>   <p>By default, shows the tags, heads, and remote refs.</p>   <p>The --exclude-existing form is a filter that does the inverse. It reads refs from stdin, one ref per line, and shows those that don’t exist in the local repository.</p>   <p>Use of this utility is encouraged in favor of directly accessing files under the <code>.git</code> directory.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--head</dt> <dd> <p>Show the HEAD reference, even if it would normally be filtered out.</p> </dd> <dt class=\"hdlist1\">--tags</dt> <dt class=\"hdlist1\">--heads</dt> <dd> <p>Limit to \"refs/heads\" and \"refs/tags\", respectively. These options are not mutually exclusive; when given both, references stored in \"refs/heads\" and \"refs/tags\" are displayed.</p> </dd> <dt class=\"hdlist1\">-d</dt> <dt class=\"hdlist1\">--dereference</dt> <dd> <p>Dereference tags into object IDs as well. They will be shown with \"^{}\" appended.</p> </dd> <dt class=\"hdlist1\">-s</dt> <dt class=\"hdlist1\">--hash[=&lt;n&gt;]</dt> <dd> <p>Only show the SHA-1 hash, not the reference name. When combined with --dereference the dereferenced tag will still be shown after the SHA-1.</p> </dd> <dt class=\"hdlist1\">--verify</dt> <dd> <p>Enable stricter reference checking by requiring an exact ref path. Aside from returning an error code of 1, it will also print an error message if <code>--quiet</code> was not specified.</p> </dd> <dt class=\"hdlist1\">--abbrev[=&lt;n&gt;]</dt> <dd> <p>Abbreviate the object name. When using <code>--hash</code>, you do not have to say <code>--hash --abbrev</code>; <code>--hash=n</code> would do.</p> </dd> <dt class=\"hdlist1\">-q</dt> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>Do not print any results to stdout. When combined with <code>--verify</code> this can be used to silently check if a reference exists.</p> </dd> <dt class=\"hdlist1\">--exclude-existing[=&lt;pattern&gt;]</dt> <dd> <p>Make <code>git show-ref</code> act as a filter that reads refs from stdin of the form \"<code>^(?:&lt;anything&gt;\\s)?&lt;refname&gt;(?:\\^{})?$</code>\" and performs the following actions on each: (1) strip \"^{}\" at the end of line if any; (2) ignore if pattern is provided and does not head-match refname; (3) warn if refname is not a well-formed refname and skip; (4) ignore if refname is a ref that exists in the local repository; (5) otherwise output the line.</p> </dd> <dt class=\"hdlist1\">&lt;pattern&gt;…​</dt> <dd> <p>Show references matching one or more patterns. Patterns are matched from the end of the full name, and only complete parts are matched, e.g. <code>master</code> matches <code>refs/heads/master</code>, <code>refs/remotes/origin/master</code>, <code>refs/tags/jedi/master</code> but not <code>refs/heads/mymaster</code> or <code>refs/remotes/master/jedi</code>.</p> </dd> </dl> </div></div>   <h2 id=\"_output\">Output</h2> <div class=\"sectionbody\"> <p>The output is in the format: <code>&lt;SHA-1 ID&gt;</code> <code>&lt;space&gt;</code> <code>&lt;reference name&gt;</code>.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show-ref --head --dereference\n832e76a9899f560a90ffd62ae2ce83bbeff58f54 HEAD\n832e76a9899f560a90ffd62ae2ce83bbeff58f54 refs/heads/master\n832e76a9899f560a90ffd62ae2ce83bbeff58f54 refs/heads/origin\n3521017556c5de4159da4615a39fa4d5d2c279b5 refs/tags/v0.99.9c\n6ddc0964034342519a87fe013781abf31c6db6ad refs/tags/v0.99.9c^{}\n055e4ae3ae6eb344cbabf2a5256a49ea66040131 refs/tags/v1.0rc4\n423325a2d24638ddcc82ce47be5e40be550f4507 refs/tags/v1.0rc4^{}\n...</pre> </div> </div>  <p>When using --hash (and not --dereference) the output format is: <code>&lt;SHA-1 ID&gt;</code></p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show-ref --heads --hash\n2e3ba0114a1f52b47df29743d6915d056be13278\n185008ae97960c8d551adcd9e23565194651b5d1\n03adf42c988195b50e1a1935ba5fcbc39b2b029b\n...</pre> </div> </div>\n</div>   <h2 id=\"_example\">Example</h2> <div class=\"sectionbody\"> <p>To show all references called \"master\", whether tags or heads or anything else, and regardless of how deep in the reference naming hierarchy they are, use:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        git show-ref master</pre> </div> </div>  <p>This will show \"refs/heads/master\" but also \"refs/remote/other-repo/master\", if such references exists.</p>   <p>When using the <code>--verify</code> flag, the command requires an exact path:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        git show-ref --verify refs/heads/master</pre> </div> </div>  <p>will only match the exact branch called \"master\".</p>   <p>If nothing matches, <code>git show-ref</code> will return an error code of 1, and in the case of verification, it will show an error message.</p>   <p>For scripting, you can ask it to be quiet with the \"--quiet\" flag, which allows you to do things like</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        git show-ref --quiet --verify -- \"refs/heads/$headname\" ||\n                echo \"$headname is not a valid branch\"</pre> </div> </div>  <p>to check whether a particular branch exists or not (notice how we don’t actually want to show any results, and we want to use the full refname for it in order to not trigger the problem with ambiguous partial matches).</p>   <p>To show only tags, or only proper branch heads, use \"--tags\" and/or \"--heads\" respectively (using both means that it shows tags and heads, but not other random references under the refs/ subdirectory).</p>   <p>To do automatic tag object dereferencing, use the \"-d\" or \"--dereference\" flag, so you can do</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        git show-ref --tags --dereference</pre> </div> </div>  <p>to get a listing of all tags together with what they dereference.</p> </div>   <h2 id=\"_files\">Files</h2> <div class=\"sectionbody\"> <p><code>.git/refs/*</code>, <code>.git/packed-refs</code></p> </div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-for-each-ref\">git-for-each-ref[1]</a>, <a href=\"git-ls-remote\">git-ls-remote[1]</a>, <a href=\"git-update-ref\">git-update-ref[1]</a>, <a href=\"gitrepository-layout\">gitrepository-layout[5]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-show-ref\" class=\"_attribution-link\">https://git-scm.com/docs/git-show-ref</a>\n  </p>\n</div>\n","git-fast-import":"<h1>git-fast-import</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-fast-import - Backend for fast Git data importers</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">frontend | git fast-import [options]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>This program is usually not what the end user wants to run directly. Most end users want to use one of the existing frontend programs, which parses a specific type of foreign source and feeds the contents stored there to <code>git fast-import</code>.</p>   <p>fast-import reads a mixed command/data stream from standard input and writes one or more packfiles directly into the current repository. When EOF is received on standard input, fast import writes out updated branch and tag refs, fully updating the current repository with the newly imported data.</p>   <p>The fast-import backend itself can import into an empty repository (one that has already been initialized by <code>git init</code>) or incrementally update an existing populated repository. Whether or not incremental imports are supported from a particular foreign source depends on the frontend program in use.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\">\n<div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--force</dt> <dd> <p>Force updating modified existing branches, even if doing so would cause commits to be lost (as the new commit does not contain the old commit).</p> </dd> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>Disable all non-fatal output, making fast-import silent when it is successful. This option disables the output shown by --stats.</p> </dd> <dt class=\"hdlist1\">--stats</dt> <dd> <p>Display some basic statistics about the objects fast-import has created, the packfiles they were stored into, and the memory used by fast-import during this run. Showing this output is currently the default, but can be disabled with --quiet.</p> </dd> </dl> </div> <div class=\"sect2\"> <h3 id=\"_options_for_frontends\">Options for Frontends</h3> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--cat-blob-fd=&lt;fd&gt;</dt> <dd> <p>Write responses to <code>get-mark</code>, <code>cat-blob</code>, and <code>ls</code> queries to the file descriptor &lt;fd&gt; instead of <code>stdout</code>. Allows <code>progress</code> output intended for the end-user to be separated from other output.</p> </dd> <dt class=\"hdlist1\">--date-format=&lt;fmt&gt;</dt> <dd> <p>Specify the type of dates the frontend will supply to fast-import within <code>author</code>, <code>committer</code> and <code>tagger</code> commands. See “Date Formats” below for details about which formats are supported, and their syntax.</p> </dd> <dt class=\"hdlist1\">--done</dt> <dd> <p>Terminate with error if there is no <code>done</code> command at the end of the stream. This option might be useful for detecting errors that cause the frontend to terminate before it has started to write a stream.</p> </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_locations_of_marks_files\">Locations of Marks Files</h3> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--export-marks=&lt;file&gt;</dt> <dd> <p>Dumps the internal marks table to &lt;file&gt; when complete. Marks are written one per line as <code>:markid SHA-1</code>. Frontends can use this file to validate imports after they have been completed, or to save the marks table across incremental runs. As &lt;file&gt; is only opened and truncated at checkpoint (or completion) the same path can also be safely given to --import-marks.</p> </dd> <dt class=\"hdlist1\">--import-marks=&lt;file&gt;</dt> <dd> <p>Before processing any input, load the marks specified in &lt;file&gt;. The input file must exist, must be readable, and must use the same format as produced by --export-marks. Multiple options may be supplied to import more than one set of marks. If a mark is defined to different values, the last file wins.</p> </dd> <dt class=\"hdlist1\">--import-marks-if-exists=&lt;file&gt;</dt> <dd> <p>Like --import-marks but instead of erroring out, silently skips the file if it does not exist.</p> </dd> <dt class=\"hdlist1\">--[no-]relative-marks</dt> <dd> <p>After specifying --relative-marks the paths specified with --import-marks= and --export-marks= are relative to an internal directory in the current repository. In git-fast-import this means that the paths are relative to the .git/info/fast-import directory. However, other importers may use a different location.</p>  <p>Relative and non-relative marks may be combined by interweaving --(no-)-relative-marks with the --(import|export)-marks= options.</p>  </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_performance_and_compression_tuning\">Performance and Compression Tuning</h3> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--active-branches=&lt;n&gt;</dt> <dd> <p>Maximum number of branches to maintain active at once. See “Memory Utilization” below for details. Default is 5.</p> </dd> <dt class=\"hdlist1\">--big-file-threshold=&lt;n&gt;</dt> <dd> <p>Maximum size of a blob that fast-import will attempt to create a delta for, expressed in bytes. The default is 512m (512 MiB). Some importers may wish to lower this on systems with constrained memory.</p> </dd> <dt class=\"hdlist1\">--depth=&lt;n&gt;</dt> <dd> <p>Maximum delta depth, for blob and tree deltification. Default is 10.</p> </dd> <dt class=\"hdlist1\">--export-pack-edges=&lt;file&gt;</dt> <dd> <p>After creating a packfile, print a line of data to &lt;file&gt; listing the filename of the packfile and the last commit on each branch that was written to that packfile. This information may be useful after importing projects whose total object set exceeds the 4 GiB packfile limit, as these commits can be used as edge points during calls to <code>git pack-objects</code>.</p> </dd> <dt class=\"hdlist1\">--max-pack-size=&lt;n&gt;</dt> <dd> <p>Maximum size of each output packfile. The default is unlimited.</p> </dd> </dl> </div> </div>\n</div>   <h2 id=\"_performance\">Performance</h2> <div class=\"sectionbody\"> <p>The design of fast-import allows it to import large projects in a minimum amount of memory usage and processing time. Assuming the frontend is able to keep up with fast-import and feed it a constant stream of data, import times for projects holding 10+ years of history and containing 100,000+ individual commits are generally completed in just 1-2 hours on quite modest (~$2,000 USD) hardware.</p>   <p>Most bottlenecks appear to be in foreign source data access (the source just cannot extract revisions fast enough) or disk IO (fast-import writes as fast as the disk will take the data). Imports will run faster if the source data is stored on a different drive than the destination Git repository (due to less IO contention).</p> </div>   <h2 id=\"_development_cost\">Development cost</h2> <div class=\"sectionbody\"> <p>A typical frontend for fast-import tends to weigh in at approximately 200 lines of Perl/Python/Ruby code. Most developers have been able to create working importers in just a couple of hours, even though it is their first exposure to fast-import, and sometimes even to Git. This is an ideal situation, given that most conversion tools are throw-away (use once, and never look back).</p> </div>   <h2 id=\"_parallel_operation\">Parallel operation</h2> <div class=\"sectionbody\"> <p>Like <code>git push</code> or <code>git fetch</code>, imports handled by fast-import are safe to run alongside parallel <code>git repack -a -d</code> or <code>git gc</code> invocations, or any other Git operation (including <code>git prune</code>, as loose objects are never used by fast-import).</p>   <p>fast-import does not lock the branch or tag refs it is actively importing. After the import, during its ref update phase, fast-import tests each existing branch ref to verify the update will be a fast-forward update (the commit stored in the ref is contained in the new history of the commit to be written). If the update is not a fast-forward update, fast-import will skip updating that ref and instead prints a warning message. fast-import will always attempt to update all branch refs, and does not stop on the first failure.</p>   <p>Branch updates can be forced with --force, but it’s recommended that this only be used on an otherwise quiet repository. Using --force is not necessary for an initial import into an empty repository.</p> </div>   <h2 id=\"_technical_discussion\">Technical discussion</h2> <div class=\"sectionbody\"> <p>fast-import tracks a set of branches in memory. Any branch can be created or modified at any point during the import process by sending a <code>commit</code> command on the input stream. This design allows a frontend program to process an unlimited number of branches simultaneously, generating commits in the order they are available from the source data. It also simplifies the frontend programs considerably.</p>   <p>fast-import does not use or alter the current working directory, or any file within it. (It does however update the current Git repository, as referenced by <code>GIT_DIR</code>.) Therefore an import frontend may use the working directory for its own purposes, such as extracting file revisions from the foreign source. This ignorance of the working directory also allows fast-import to run very quickly, as it does not need to perform any costly file update operations when switching between branches.</p> </div>   <h2 id=\"_input_format\">Input format</h2> <div class=\"sectionbody\"> <p>With the exception of raw file data (which Git does not interpret) the fast-import input format is text (ASCII) based. This text based format simplifies development and debugging of frontend programs, especially when a higher level language such as Perl, Python or Ruby is being used.</p>   <p>fast-import is very strict about its input. Where we say SP below we mean <strong>exactly</strong> one space. Likewise LF means one (and only one) linefeed and HT one (and only one) horizontal tab. Supplying additional whitespace characters will cause unexpected results, such as branch names or file names with leading or trailing spaces in their name, or early termination of fast-import when it encounters unexpected input.</p>  <div class=\"sect2\"> <h3 id=\"_stream_comments\">Stream Comments</h3>  <p>To aid in debugging frontends fast-import ignores any line that begins with <code>#</code> (ASCII pound/hash) up to and including the line ending <code>LF</code>. A comment line may contain any sequence of bytes that does not contain an LF and therefore may be used to include any detailed debugging information that might be specific to the frontend and useful when inspecting a fast-import data stream.</p>  </div> <div class=\"sect2\"> <h3 id=\"_date_formats\">Date Formats</h3>  <p>The following date formats are supported. A frontend should select the format it will use for this import by passing the format name in the --date-format=&lt;fmt&gt; command-line option.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>raw</code></dt> <dd> <p>This is the Git native format and is <code>&lt;time&gt; SP &lt;offutc&gt;</code>. It is also fast-import’s default format, if --date-format was not specified.</p>  <p>The time of the event is specified by <code>&lt;time&gt;</code> as the number of seconds since the UNIX epoch (midnight, Jan 1, 1970, UTC) and is written as an ASCII decimal integer.</p>   <p>The local offset is specified by <code>&lt;offutc&gt;</code> as a positive or negative offset from UTC. For example EST (which is 5 hours behind UTC) would be expressed in <code>&lt;tz&gt;</code> by “-0500” while UTC is “+0000”. The local offset does not affect <code>&lt;time&gt;</code>; it is used only as an advisement to help formatting routines display the timestamp.</p>   <p>If the local offset is not available in the source material, use “+0000”, or the most common local offset. For example many organizations have a CVS repository which has only ever been accessed by users who are located in the same location and time zone. In this case a reasonable offset from UTC could be assumed.</p>   <p>Unlike the <code>rfc2822</code> format, this format is very strict. Any variation in formatting will cause fast-import to reject the value.</p>  </dd> <dt class=\"hdlist1\"><code>rfc2822</code></dt> <dd> <p>This is the standard email format as described by RFC 2822.</p>  <p>An example value is “Tue Feb 6 11:22:18 2007 -0500”. The Git parser is accurate, but a little on the lenient side. It is the same parser used by <code>git am</code> when applying patches received from email.</p>   <p>Some malformed strings may be accepted as valid dates. In some of these cases Git will still be able to obtain the correct date from the malformed string. There are also some types of malformed strings which Git will parse wrong, and yet consider valid. Seriously malformed strings will be rejected.</p>   <p>Unlike the <code>raw</code> format above, the time zone/UTC offset information contained in an RFC 2822 date string is used to adjust the date value to UTC prior to storage. Therefore it is important that this information be as accurate as possible.</p>   <p>If the source material uses RFC 2822 style dates, the frontend should let fast-import handle the parsing and conversion (rather than attempting to do it itself) as the Git parser has been well tested in the wild.</p>   <p>Frontends should prefer the <code>raw</code> format if the source material already uses UNIX-epoch format, can be coaxed to give dates in that format, or its format is easily convertible to it, as there is no ambiguity in parsing.</p>  </dd> <dt class=\"hdlist1\"><code>now</code></dt> <dd> <p>Always use the current time and time zone. The literal <code>now</code> must always be supplied for <code>&lt;when&gt;</code>.</p>  <p>This is a toy format. The current time and time zone of this system is always copied into the identity string at the time it is being created by fast-import. There is no way to specify a different time or time zone.</p>   <p>This particular format is supplied as it’s short to implement and may be useful to a process that wants to create a new commit right now, without needing to use a working directory or <code>git update-index</code>.</p>   <p>If separate <code>author</code> and <code>committer</code> commands are used in a <code>commit</code> the timestamps may not match, as the system clock will be polled twice (once for each command). The only way to ensure that both author and committer identity information has the same timestamp is to omit <code>author</code> (thus copying from <code>committer</code>) or to use a date format other than <code>now</code>.</p>  </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_commands\">Commands</h3>  <p>fast-import accepts several commands to update the current repository and control the current import process. More detailed discussion (with examples) of each command follows later.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>commit</code></dt> <dd> <p>Creates a new branch or updates an existing branch by creating a new commit and updating the branch to point at the newly created commit.</p> </dd> <dt class=\"hdlist1\"><code>tag</code></dt> <dd> <p>Creates an annotated tag object from an existing commit or branch. Lightweight tags are not supported by this command, as they are not recommended for recording meaningful points in time.</p> </dd> <dt class=\"hdlist1\"><code>reset</code></dt> <dd> <p>Reset an existing branch (or a new branch) to a specific revision. This command must be used to change a branch to a specific revision without making a commit on it.</p> </dd> <dt class=\"hdlist1\"><code>blob</code></dt> <dd> <p>Convert raw file data into a blob, for future use in a <code>commit</code> command. This command is optional and is not needed to perform an import.</p> </dd> <dt class=\"hdlist1\"><code>checkpoint</code></dt> <dd> <p>Forces fast-import to close the current packfile, generate its unique SHA-1 checksum and index, and start a new packfile. This command is optional and is not needed to perform an import.</p> </dd> <dt class=\"hdlist1\"><code>progress</code></dt> <dd> <p>Causes fast-import to echo the entire line to its own standard output. This command is optional and is not needed to perform an import.</p> </dd> <dt class=\"hdlist1\"><code>done</code></dt> <dd> <p>Marks the end of the stream. This command is optional unless the <code>done</code> feature was requested using the <code>--done</code> command-line option or <code>feature done</code> command.</p> </dd> <dt class=\"hdlist1\"><code>get-mark</code></dt> <dd> <p>Causes fast-import to print the SHA-1 corresponding to a mark to the file descriptor set with <code>--cat-blob-fd</code>, or <code>stdout</code> if unspecified.</p> </dd> <dt class=\"hdlist1\"><code>cat-blob</code></dt> <dd> <p>Causes fast-import to print a blob in <code>cat-file --batch</code> format to the file descriptor set with <code>--cat-blob-fd</code> or <code>stdout</code> if unspecified.</p> </dd> <dt class=\"hdlist1\"><code>ls</code></dt> <dd> <p>Causes fast-import to print a line describing a directory entry in <code>ls-tree</code> format to the file descriptor set with <code>--cat-blob-fd</code> or <code>stdout</code> if unspecified.</p> </dd> <dt class=\"hdlist1\"><code>feature</code></dt> <dd> <p>Enable the specified feature. This requires that fast-import supports the specified feature, and aborts if it does not.</p> </dd> <dt class=\"hdlist1\"><code>option</code></dt> <dd> <p>Specify any of the options listed under OPTIONS that do not change stream semantic to suit the frontend’s needs. This command is optional and is not needed to perform an import.</p> </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"__code_commit_code\"><code>commit</code></h3>  <p>Create or update a branch with a new commit, recording one logical change to the project.</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>        'commit' SP &lt;ref&gt; LF\n        mark?\n        ('author' (SP &lt;name&gt;)? SP LT &lt;email&gt; GT SP &lt;when&gt; LF)?\n        'committer' (SP &lt;name&gt;)? SP LT &lt;email&gt; GT SP &lt;when&gt; LF\n        data\n        ('from' SP &lt;commit-ish&gt; LF)?\n        ('merge' SP &lt;commit-ish&gt; LF)?\n        (filemodify | filedelete | filecopy | filerename | filedeleteall | notemodify)*\n        LF?</pre> </div> </div>  <p>where <code>&lt;ref&gt;</code> is the name of the branch to make the commit on. Typically branch names are prefixed with <code>refs/heads/</code> in Git, so importing the CVS branch symbol <code>RELENG-1_0</code> would use <code>refs/heads/RELENG-1_0</code> for the value of <code>&lt;ref&gt;</code>. The value of <code>&lt;ref&gt;</code> must be a valid refname in Git. As <code>LF</code> is not valid in a Git refname, no quoting or escaping syntax is supported here.</p>   <p>A <code>mark</code> command may optionally appear, requesting fast-import to save a reference to the newly created commit for future use by the frontend (see below for format). It is very common for frontends to mark every commit they create, thereby allowing future branch creation from any imported commit.</p>   <p>The <code>data</code> command following <code>committer</code> must supply the commit message (see below for <code>data</code> command syntax). To import an empty commit message use a 0 length data. Commit messages are free-form and are not interpreted by Git. Currently they must be encoded in UTF-8, as fast-import does not permit other encodings to be specified.</p>   <p>Zero or more <code>filemodify</code>, <code>filedelete</code>, <code>filecopy</code>, <code>filerename</code>, <code>filedeleteall</code> and <code>notemodify</code> commands may be included to update the contents of the branch prior to creating the commit. These commands may be supplied in any order. However it is recommended that a <code>filedeleteall</code> command precede all <code>filemodify</code>, <code>filecopy</code>, <code>filerename</code> and <code>notemodify</code> commands in the same commit, as <code>filedeleteall</code> wipes the branch clean (see below).</p>   <p>The <code>LF</code> after the command is optional (it used to be required).</p>  <div class=\"sect3\"> <h4 id=\"__code_author_code\"><code>author</code></h4>  <p>An <code>author</code> command may optionally appear, if the author information might differ from the committer information. If <code>author</code> is omitted then fast-import will automatically use the committer’s information for the author portion of the commit. See below for a description of the fields in <code>author</code>, as they are identical to <code>committer</code>.</p>  </div> <div class=\"sect3\"> <h4 id=\"__code_committer_code\"><code>committer</code></h4>  <p>The <code>committer</code> command indicates who made this commit, and when they made it.</p>   <p>Here <code>&lt;name&gt;</code> is the person’s display name (for example “Com M Itter”) and <code>&lt;email&gt;</code> is the person’s email address (“cm@example.com”). <code>LT</code> and <code>GT</code> are the literal less-than (\\x3c) and greater-than (\\x3e) symbols. These are required to delimit the email address from the other fields in the line. Note that <code>&lt;name&gt;</code> and <code>&lt;email&gt;</code> are free-form and may contain any sequence of bytes, except <code>LT</code>, <code>GT</code> and <code>LF</code>. <code>&lt;name&gt;</code> is typically UTF-8 encoded.</p>   <p>The time of the change is specified by <code>&lt;when&gt;</code> using the date format that was selected by the --date-format=&lt;fmt&gt; command-line option. See “Date Formats” above for the set of supported formats, and their syntax.</p>  </div> <div class=\"sect3\"> <h4 id=\"__code_from_code\"><code>from</code></h4>  <p>The <code>from</code> command is used to specify the commit to initialize this branch from. This revision will be the first ancestor of the new commit. The state of the tree built at this commit will begin with the state at the <code>from</code> commit, and be altered by the content modifications in this commit.</p>   <p>Omitting the <code>from</code> command in the first commit of a new branch will cause fast-import to create that commit with no ancestor. This tends to be desired only for the initial commit of a project. If the frontend creates all files from scratch when making a new branch, a <code>merge</code> command may be used instead of <code>from</code> to start the commit with an empty tree. Omitting the <code>from</code> command on existing branches is usually desired, as the current commit on that branch is automatically assumed to be the first ancestor of the new commit.</p>   <p>As <code>LF</code> is not valid in a Git refname or SHA-1 expression, no quoting or escaping syntax is supported within <code>&lt;commit-ish&gt;</code>.</p>   <p>Here <code>&lt;commit-ish&gt;</code> is any of the following:</p>  <div class=\"ulist\"> <ul> <li> <p>The name of an existing branch already in fast-import’s internal branch table. If fast-import doesn’t know the name, it’s treated as a SHA-1 expression.</p> </li> <li> <p>A mark reference, <code>:&lt;idnum&gt;</code>, where <code>&lt;idnum&gt;</code> is the mark number.</p>  <p>The reason fast-import uses <code>:</code> to denote a mark reference is this character is not legal in a Git branch name. The leading <code>:</code> makes it easy to distinguish between the mark 42 (<code>:42</code>) and the branch 42 (<code>42</code> or <code>refs/heads/42</code>), or an abbreviated SHA-1 which happened to consist only of base-10 digits.</p>   <p>Marks must be declared (via <code>mark</code>) before they can be used.</p>  </li> <li> <p>A complete 40 byte or abbreviated commit SHA-1 in hex.</p> </li> <li> <p>Any valid Git SHA-1 expression that resolves to a commit. See “SPECIFYING REVISIONS” in <a href=\"gitrevisions\">gitrevisions[7]</a> for details.</p> </li> <li> <p>The special null SHA-1 (40 zeros) specifies that the branch is to be removed.</p> </li> </ul> </div>  <p>The special case of restarting an incremental import from the current branch value should be written as:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        from refs/heads/branch^0</pre> </div> </div>  <p>The <code>^0</code> suffix is necessary as fast-import does not permit a branch to start from itself, and the branch is created in memory before the <code>from</code> command is even read from the input. Adding <code>^0</code> will force fast-import to resolve the commit through Git’s revision parsing library, rather than its internal branch table, thereby loading in the existing value of the branch.</p>  </div> <div class=\"sect3\"> <h4 id=\"__code_merge_code\"><code>merge</code></h4>  <p>Includes one additional ancestor commit. The additional ancestry link does not change the way the tree state is built at this commit. If the <code>from</code> command is omitted when creating a new branch, the first <code>merge</code> commit will be the first ancestor of the current commit, and the branch will start out with no files. An unlimited number of <code>merge</code> commands per commit are permitted by fast-import, thereby establishing an n-way merge.</p>   <p>Here <code>&lt;commit-ish&gt;</code> is any of the commit specification expressions also accepted by <code>from</code> (see above).</p>  </div> <div class=\"sect3\"> <h4 id=\"__code_filemodify_code\"><code>filemodify</code></h4>  <p>Included in a <code>commit</code> command to add a new file or change the content of an existing file. This command has two different means of specifying the content of the file.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">External data format</dt> <dd> <p>The data content for the file was already supplied by a prior <code>blob</code> command. The frontend just needs to connect it.</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>        'M' SP &lt;mode&gt; SP &lt;dataref&gt; SP &lt;path&gt; LF</pre> </div> </div>  <p>Here usually <code>&lt;dataref&gt;</code> must be either a mark reference (<code>:&lt;idnum&gt;</code>) set by a prior <code>blob</code> command, or a full 40-byte SHA-1 of an existing Git blob object. If <code>&lt;mode&gt;</code> is <code>040000`</code> then <code>&lt;dataref&gt;</code> must be the full 40-byte SHA-1 of an existing Git tree object or a mark reference set with <code>--import-marks</code>.</p>  </dd> <dt class=\"hdlist1\">Inline data format</dt> <dd> <p>The data content for the file has not been supplied yet. The frontend wants to supply it as part of this modify command.</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>        'M' SP &lt;mode&gt; SP 'inline' SP &lt;path&gt; LF\n        data</pre> </div> </div>  <p>See below for a detailed description of the <code>data</code> command.</p>  </dd> </dl> </div>  <p>In both formats <code>&lt;mode&gt;</code> is the type of file entry, specified in octal. Git only supports the following modes:</p>  <div class=\"ulist\"> <ul> <li> <p><code>100644</code> or <code>644</code>: A normal (not-executable) file. The majority of files in most projects use this mode. If in doubt, this is what you want.</p> </li> <li> <p><code>100755</code> or <code>755</code>: A normal, but executable, file.</p> </li> <li> <p><code>120000</code>: A symlink, the content of the file will be the link target.</p> </li> <li> <p><code>160000</code>: A gitlink, SHA-1 of the object refers to a commit in another repository. Git links can only be specified by SHA or through a commit mark. They are used to implement submodules.</p> </li> <li> <p><code>040000</code>: A subdirectory. Subdirectories can only be specified by SHA or through a tree mark set with <code>--import-marks</code>.</p> </li> </ul> </div>  <p>In both formats <code>&lt;path&gt;</code> is the complete path of the file to be added (if not already existing) or modified (if already existing).</p>   <p>A <code>&lt;path&gt;</code> string must use UNIX-style directory separators (forward slash <code>/</code>), may contain any byte other than <code>LF</code>, and must not start with double quote (<code>\"</code>).</p>   <p>A path can use C-style string quoting; this is accepted in all cases and mandatory if the filename starts with double quote or contains <code>LF</code>. In C-style quoting, the complete name should be surrounded with double quotes, and any <code>LF</code>, backslash, or double quote characters must be escaped by preceding them with a backslash (e.g., <code>\"path/with\\n, \\\\ and \\\" in it\"</code>).</p>   <p>The value of <code>&lt;path&gt;</code> must be in canonical form. That is it must not:</p>  <div class=\"ulist\"> <ul> <li> <p>contain an empty directory component (e.g. <code>foo//bar</code> is invalid),</p> </li> <li> <p>end with a directory separator (e.g. <code>foo/</code> is invalid),</p> </li> <li> <p>start with a directory separator (e.g. <code>/foo</code> is invalid),</p> </li> <li> <p>contain the special component <code>.</code> or <code>..</code> (e.g. <code>foo/./bar</code> and <code>foo/../bar</code> are invalid).</p> </li> </ul> </div>  <p>The root of the tree can be represented by an empty string as <code>&lt;path&gt;</code>.</p>   <p>It is recommended that <code>&lt;path&gt;</code> always be encoded using UTF-8.</p>  </div> <div class=\"sect3\"> <h4 id=\"__code_filedelete_code\"><code>filedelete</code></h4>  <p>Included in a <code>commit</code> command to remove a file or recursively delete an entire directory from the branch. If the file or directory removal makes its parent directory empty, the parent directory will be automatically removed too. This cascades up the tree until the first non-empty directory or the root is reached.</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>        'D' SP &lt;path&gt; LF</pre> </div> </div>  <p>here <code>&lt;path&gt;</code> is the complete path of the file or subdirectory to be removed from the branch. See <code>filemodify</code> above for a detailed description of <code>&lt;path&gt;</code>.</p>  </div> <div class=\"sect3\"> <h4 id=\"__code_filecopy_code\"><code>filecopy</code></h4>  <p>Recursively copies an existing file or subdirectory to a different location within the branch. The existing file or directory must exist. If the destination exists it will be completely replaced by the content copied from the source.</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>        'C' SP &lt;path&gt; SP &lt;path&gt; LF</pre> </div> </div>  <p>here the first <code>&lt;path&gt;</code> is the source location and the second <code>&lt;path&gt;</code> is the destination. See <code>filemodify</code> above for a detailed description of what <code>&lt;path&gt;</code> may look like. To use a source path that contains SP the path must be quoted.</p>   <p>A <code>filecopy</code> command takes effect immediately. Once the source location has been copied to the destination any future commands applied to the source location will not impact the destination of the copy.</p>  </div> <div class=\"sect3\"> <h4 id=\"__code_filerename_code\"><code>filerename</code></h4>  <p>Renames an existing file or subdirectory to a different location within the branch. The existing file or directory must exist. If the destination exists it will be replaced by the source directory.</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>        'R' SP &lt;path&gt; SP &lt;path&gt; LF</pre> </div> </div>  <p>here the first <code>&lt;path&gt;</code> is the source location and the second <code>&lt;path&gt;</code> is the destination. See <code>filemodify</code> above for a detailed description of what <code>&lt;path&gt;</code> may look like. To use a source path that contains SP the path must be quoted.</p>   <p>A <code>filerename</code> command takes effect immediately. Once the source location has been renamed to the destination any future commands applied to the source location will create new files there and not impact the destination of the rename.</p>   <p>Note that a <code>filerename</code> is the same as a <code>filecopy</code> followed by a <code>filedelete</code> of the source location. There is a slight performance advantage to using <code>filerename</code>, but the advantage is so small that it is never worth trying to convert a delete/add pair in source material into a rename for fast-import. This <code>filerename</code> command is provided just to simplify frontends that already have rename information and don’t want bother with decomposing it into a <code>filecopy</code> followed by a <code>filedelete</code>.</p>  </div> <div class=\"sect3\"> <h4 id=\"__code_filedeleteall_code\"><code>filedeleteall</code></h4>  <p>Included in a <code>commit</code> command to remove all files (and also all directories) from the branch. This command resets the internal branch structure to have no files in it, allowing the frontend to subsequently add all interesting files from scratch.</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>        'deleteall' LF</pre> </div> </div>  <p>This command is extremely useful if the frontend does not know (or does not care to know) what files are currently on the branch, and therefore cannot generate the proper <code>filedelete</code> commands to update the content.</p>   <p>Issuing a <code>filedeleteall</code> followed by the needed <code>filemodify</code> commands to set the correct content will produce the same results as sending only the needed <code>filemodify</code> and <code>filedelete</code> commands. The <code>filedeleteall</code> approach may however require fast-import to use slightly more memory per active branch (less than 1 MiB for even most large projects); so frontends that can easily obtain only the affected paths for a commit are encouraged to do so.</p>  </div> <div class=\"sect3\"> <h4 id=\"__code_notemodify_code\"><code>notemodify</code></h4>  <p>Included in a <code>commit</code> <code>&lt;notes_ref&gt;</code> command to add a new note annotating a <code>&lt;commit-ish&gt;</code> or change this annotation contents. Internally it is similar to filemodify 100644 on <code>&lt;commit-ish&gt;</code> path (maybe split into subdirectories). It’s not advised to use any other commands to write to the <code>&lt;notes_ref&gt;</code> tree except <code>filedeleteall</code> to delete all existing notes in this tree. This command has two different means of specifying the content of the note.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">External data format</dt> <dd> <p>The data content for the note was already supplied by a prior <code>blob</code> command. The frontend just needs to connect it to the commit that is to be annotated.</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>        'N' SP &lt;dataref&gt; SP &lt;commit-ish&gt; LF</pre> </div> </div>  <p>Here <code>&lt;dataref&gt;</code> can be either a mark reference (<code>:&lt;idnum&gt;</code>) set by a prior <code>blob</code> command, or a full 40-byte SHA-1 of an existing Git blob object.</p>  </dd> <dt class=\"hdlist1\">Inline data format</dt> <dd> <p>The data content for the note has not been supplied yet. The frontend wants to supply it as part of this modify command.</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>        'N' SP 'inline' SP &lt;commit-ish&gt; LF\n        data</pre> </div> </div>  <p>See below for a detailed description of the <code>data</code> command.</p>  </dd> </dl> </div>  <p>In both formats <code>&lt;commit-ish&gt;</code> is any of the commit specification expressions also accepted by <code>from</code> (see above).</p>  </div> </div> <div class=\"sect2\"> <h3 id=\"__code_mark_code\"><code>mark</code></h3>  <p>Arranges for fast-import to save a reference to the current object, allowing the frontend to recall this object at a future point in time, without knowing its SHA-1. Here the current object is the object creation command the <code>mark</code> command appears within. This can be <code>commit</code>, <code>tag</code>, and <code>blob</code>, but <code>commit</code> is the most common usage.</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>        'mark' SP ':' &lt;idnum&gt; LF</pre> </div> </div>  <p>where <code>&lt;idnum&gt;</code> is the number assigned by the frontend to this mark. The value of <code>&lt;idnum&gt;</code> is expressed as an ASCII decimal integer. The value 0 is reserved and cannot be used as a mark. Only values greater than or equal to 1 may be used as marks.</p>   <p>New marks are created automatically. Existing marks can be moved to another object simply by reusing the same <code>&lt;idnum&gt;</code> in another <code>mark</code> command.</p>  </div> <div class=\"sect2\"> <h3 id=\"__code_tag_code\"><code>tag</code></h3>  <p>Creates an annotated tag referring to a specific commit. To create lightweight (non-annotated) tags see the <code>reset</code> command below.</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>        'tag' SP &lt;name&gt; LF\n        'from' SP &lt;commit-ish&gt; LF\n        'tagger' (SP &lt;name&gt;)? SP LT &lt;email&gt; GT SP &lt;when&gt; LF\n        data</pre> </div> </div>  <p>where <code>&lt;name&gt;</code> is the name of the tag to create.</p>   <p>Tag names are automatically prefixed with <code>refs/tags/</code> when stored in Git, so importing the CVS branch symbol <code>RELENG-1_0-FINAL</code> would use just <code>RELENG-1_0-FINAL</code> for <code>&lt;name&gt;</code>, and fast-import will write the corresponding ref as <code>refs/tags/RELENG-1_0-FINAL</code>.</p>   <p>The value of <code>&lt;name&gt;</code> must be a valid refname in Git and therefore may contain forward slashes. As <code>LF</code> is not valid in a Git refname, no quoting or escaping syntax is supported here.</p>   <p>The <code>from</code> command is the same as in the <code>commit</code> command; see above for details.</p>   <p>The <code>tagger</code> command uses the same format as <code>committer</code> within <code>commit</code>; again see above for details.</p>   <p>The <code>data</code> command following <code>tagger</code> must supply the annotated tag message (see below for <code>data</code> command syntax). To import an empty tag message use a 0 length data. Tag messages are free-form and are not interpreted by Git. Currently they must be encoded in UTF-8, as fast-import does not permit other encodings to be specified.</p>   <p>Signing annotated tags during import from within fast-import is not supported. Trying to include your own PGP/GPG signature is not recommended, as the frontend does not (easily) have access to the complete set of bytes which normally goes into such a signature. If signing is required, create lightweight tags from within fast-import with <code>reset</code>, then create the annotated versions of those tags offline with the standard <code>git tag</code> process.</p>  </div> <div class=\"sect2\"> <h3 id=\"__code_reset_code\"><code>reset</code></h3>  <p>Creates (or recreates) the named branch, optionally starting from a specific revision. The reset command allows a frontend to issue a new <code>from</code> command for an existing branch, or to create a new branch from an existing commit without creating a new commit.</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>        'reset' SP &lt;ref&gt; LF\n        ('from' SP &lt;commit-ish&gt; LF)?\n        LF?</pre> </div> </div>  <p>For a detailed description of <code>&lt;ref&gt;</code> and <code>&lt;commit-ish&gt;</code> see above under <code>commit</code> and <code>from</code>.</p>   <p>The <code>LF</code> after the command is optional (it used to be required).</p>   <p>The <code>reset</code> command can also be used to create lightweight (non-annotated) tags. For example:</p>  <div class=\"exampleblock\"> <div class=\"content\"> <div class=\"literalblock\"> <div class=\"content\"> <pre>reset refs/tags/938\nfrom :938</pre> </div> </div> </div> </div>  <p>would create the lightweight tag <code>refs/tags/938</code> referring to whatever commit mark <code>:938</code> references.</p>  </div> <div class=\"sect2\"> <h3 id=\"__code_blob_code\"><code>blob</code></h3>  <p>Requests writing one file revision to the packfile. The revision is not connected to any commit; this connection must be formed in a subsequent <code>commit</code> command by referencing the blob through an assigned mark.</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>        'blob' LF\n        mark?\n        data</pre> </div> </div>  <p>The mark command is optional here as some frontends have chosen to generate the Git SHA-1 for the blob on their own, and feed that directly to <code>commit</code>. This is typically more work than it’s worth however, as marks are inexpensive to store and easy to use.</p>  </div> <div class=\"sect2\"> <h3 id=\"__code_data_code\"><code>data</code></h3>  <p>Supplies raw data (for use as blob/file content, commit messages, or annotated tag messages) to fast-import. Data can be supplied using an exact byte count or delimited with a terminating line. Real frontends intended for production-quality conversions should always use the exact byte count format, as it is more robust and performs better. The delimited format is intended primarily for testing fast-import.</p>   <p>Comment lines appearing within the <code>&lt;raw&gt;</code> part of <code>data</code> commands are always taken to be part of the body of the data and are therefore never ignored by fast-import. This makes it safe to import any file/message content whose lines might start with <code>#</code>.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">Exact byte count format</dt> <dd> <p>The frontend must specify the number of bytes of data.</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>        'data' SP &lt;count&gt; LF\n        &lt;raw&gt; LF?</pre> </div> </div>  <p>where <code>&lt;count&gt;</code> is the exact number of bytes appearing within <code>&lt;raw&gt;</code>. The value of <code>&lt;count&gt;</code> is expressed as an ASCII decimal integer. The <code>LF</code> on either side of <code>&lt;raw&gt;</code> is not included in <code>&lt;count&gt;</code> and will not be included in the imported data.</p>   <p>The <code>LF</code> after <code>&lt;raw&gt;</code> is optional (it used to be required) but recommended. Always including it makes debugging a fast-import stream easier as the next command always starts in column 0 of the next line, even if <code>&lt;raw&gt;</code> did not end with an <code>LF</code>.</p>  </dd> <dt class=\"hdlist1\">Delimited format</dt> <dd> <p>A delimiter string is used to mark the end of the data. fast-import will compute the length by searching for the delimiter. This format is primarily useful for testing and is not recommended for real data.</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>        'data' SP '&lt;&lt;' &lt;delim&gt; LF\n        &lt;raw&gt; LF\n        &lt;delim&gt; LF\n        LF?</pre> </div> </div>  <p>where <code>&lt;delim&gt;</code> is the chosen delimiter string. The string <code>&lt;delim&gt;</code> must not appear on a line by itself within <code>&lt;raw&gt;</code>, as otherwise fast-import will think the data ends earlier than it really does. The <code>LF</code> immediately trailing <code>&lt;raw&gt;</code> is part of <code>&lt;raw&gt;</code>. This is one of the limitations of the delimited format, it is impossible to supply a data chunk which does not have an LF as its last byte.</p>   <p>The <code>LF</code> after <code>&lt;delim&gt; LF</code> is optional (it used to be required).</p>  </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"__code_checkpoint_code\"><code>checkpoint</code></h3>  <p>Forces fast-import to close the current packfile, start a new one, and to save out all current branch refs, tags and marks.</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>        'checkpoint' LF\n        LF?</pre> </div> </div>  <p>Note that fast-import automatically switches packfiles when the current packfile reaches --max-pack-size, or 4 GiB, whichever limit is smaller. During an automatic packfile switch fast-import does not update the branch refs, tags or marks.</p>   <p>As a <code>checkpoint</code> can require a significant amount of CPU time and disk IO (to compute the overall pack SHA-1 checksum, generate the corresponding index file, and update the refs) it can easily take several minutes for a single <code>checkpoint</code> command to complete.</p>   <p>Frontends may choose to issue checkpoints during extremely large and long running imports, or when they need to allow another Git process access to a branch. However given that a 30 GiB Subversion repository can be loaded into Git through fast-import in about 3 hours, explicit checkpointing may not be necessary.</p>   <p>The <code>LF</code> after the command is optional (it used to be required).</p>  </div> <div class=\"sect2\"> <h3 id=\"__code_progress_code\"><code>progress</code></h3>  <p>Causes fast-import to print the entire <code>progress</code> line unmodified to its standard output channel (file descriptor 1) when the command is processed from the input stream. The command otherwise has no impact on the current import, or on any of fast-import’s internal state.</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>        'progress' SP &lt;any&gt; LF\n        LF?</pre> </div> </div>  <p>The <code>&lt;any&gt;</code> part of the command may contain any sequence of bytes that does not contain <code>LF</code>. The <code>LF</code> after the command is optional. Callers may wish to process the output through a tool such as sed to remove the leading part of the line, for example:</p>  <div class=\"exampleblock\"> <div class=\"content\"> <div class=\"literalblock\"> <div class=\"content\"> <pre>frontend | git fast-import | sed 's/^progress //'</pre> </div> </div> </div> </div>  <p>Placing a <code>progress</code> command immediately after a <code>checkpoint</code> will inform the reader when the <code>checkpoint</code> has been completed and it can safely access the refs that fast-import updated.</p>  </div> <div class=\"sect2\"> <h3 id=\"__code_get_mark_code\"><code>get-mark</code></h3>  <p>Causes fast-import to print the SHA-1 corresponding to a mark to stdout or to the file descriptor previously arranged with the <code>--cat-blob-fd</code> argument. The command otherwise has no impact on the current import; its purpose is to retrieve SHA-1s that later commits might want to refer to in their commit messages.</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>        'get-mark' SP ':' &lt;idnum&gt; LF</pre> </div> </div>  <p>This command can be used anywhere in the stream that comments are accepted. In particular, the <code>get-mark</code> command can be used in the middle of a commit but not in the middle of a <code>data</code> command.</p>   <p>See “Responses To Commands” below for details about how to read this output safely.</p>  </div> <div class=\"sect2\"> <h3 id=\"__code_cat_blob_code\"><code>cat-blob</code></h3>  <p>Causes fast-import to print a blob to a file descriptor previously arranged with the <code>--cat-blob-fd</code> argument. The command otherwise has no impact on the current import; its main purpose is to retrieve blobs that may be in fast-import’s memory but not accessible from the target repository.</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>        'cat-blob' SP &lt;dataref&gt; LF</pre> </div> </div>  <p>The <code>&lt;dataref&gt;</code> can be either a mark reference (<code>:&lt;idnum&gt;</code>) set previously or a full 40-byte SHA-1 of a Git blob, preexisting or ready to be written.</p>   <p>Output uses the same format as <code>git cat-file --batch</code>:</p>  <div class=\"exampleblock\"> <div class=\"content\"> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;sha1&gt; SP 'blob' SP &lt;size&gt; LF\n&lt;contents&gt; LF</pre> </div> </div> </div> </div>  <p>This command can be used anywhere in the stream that comments are accepted. In particular, the <code>cat-blob</code> command can be used in the middle of a commit but not in the middle of a <code>data</code> command.</p>   <p>See “Responses To Commands” below for details about how to read this output safely.</p>  </div> <div class=\"sect2\"> <h3 id=\"__code_ls_code\"><code>ls</code></h3>  <p>Prints information about the object at a path to a file descriptor previously arranged with the <code>--cat-blob-fd</code> argument. This allows printing a blob from the active commit (with <code>cat-blob</code>) or copying a blob or tree from a previous commit for use in the current one (with <code>filemodify</code>).</p>   <p>The <code>ls</code> command can be used anywhere in the stream that comments are accepted, including the middle of a commit.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">Reading from the active commit</dt> <dd> <p>This form can only be used in the middle of a <code>commit</code>. The path names a directory entry within fast-import’s active commit. The path must be quoted in this case.</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>        'ls' SP &lt;path&gt; LF</pre> </div> </div> </dd> <dt class=\"hdlist1\">Reading from a named tree</dt> <dd> <p>The <code>&lt;dataref&gt;</code> can be a mark reference (<code>:&lt;idnum&gt;</code>) or the full 40-byte SHA-1 of a Git tag, commit, or tree object, preexisting or waiting to be written. The path is relative to the top level of the tree named by <code>&lt;dataref&gt;</code>.</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>        'ls' SP &lt;dataref&gt; SP &lt;path&gt; LF</pre> </div> </div> </dd> </dl> </div>  <p>See <code>filemodify</code> above for a detailed description of <code>&lt;path&gt;</code>.</p>   <p>Output uses the same format as <code>git ls-tree &lt;tree&gt; -- &lt;path&gt;</code>:</p>  <div class=\"exampleblock\"> <div class=\"content\"> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;mode&gt; SP ('blob' | 'tree' | 'commit') SP &lt;dataref&gt; HT &lt;path&gt; LF</pre> </div> </div> </div> </div>  <p>The &lt;dataref&gt; represents the blob, tree, or commit object at &lt;path&gt; and can be used in later <code>get-mark</code>, <code>cat-blob</code>, <code>filemodify</code>, or <code>ls</code> commands.</p>   <p>If there is no file or subtree at that path, <code>git fast-import</code> will instead report</p>  <div class=\"exampleblock\"> <div class=\"content\"> <div class=\"literalblock\"> <div class=\"content\"> <pre>missing SP &lt;path&gt; LF</pre> </div> </div> </div> </div>  <p>See “Responses To Commands” below for details about how to read this output safely.</p>  </div> <div class=\"sect2\"> <h3 id=\"__code_feature_code\"><code>feature</code></h3>  <p>Require that fast-import supports the specified feature, or abort if it does not.</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>        'feature' SP &lt;feature&gt; ('=' &lt;argument&gt;)? LF</pre> </div> </div>  <p>The &lt;feature&gt; part of the command may be any one of the following:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">date-format</dt> <dt class=\"hdlist1\">export-marks</dt> <dt class=\"hdlist1\">relative-marks</dt> <dt class=\"hdlist1\">no-relative-marks</dt> <dt class=\"hdlist1\">force</dt> <dd> <p>Act as though the corresponding command-line option with a leading <code>--</code> was passed on the command line (see OPTIONS, above).</p> </dd> <dt class=\"hdlist1\">import-marks</dt> <dt class=\"hdlist1\">import-marks-if-exists</dt> <dd> <p>Like --import-marks except in two respects: first, only one \"feature import-marks\" or \"feature import-marks-if-exists\" command is allowed per stream; second, an --import-marks= or --import-marks-if-exists command-line option overrides any of these \"feature\" commands in the stream; third, \"feature import-marks-if-exists\" like a corresponding command-line option silently skips a nonexistent file.</p> </dd> <dt class=\"hdlist1\">get-mark</dt> <dt class=\"hdlist1\">cat-blob</dt> <dt class=\"hdlist1\">ls</dt> <dd> <p>Require that the backend support the <code>get-mark</code>, <code>cat-blob</code>, or <code>ls</code> command respectively. Versions of fast-import not supporting the specified command will exit with a message indicating so. This lets the import error out early with a clear message, rather than wasting time on the early part of an import before the unsupported command is detected.</p> </dd> <dt class=\"hdlist1\">notes</dt> <dd> <p>Require that the backend support the <code>notemodify</code> (N) subcommand to the <code>commit</code> command. Versions of fast-import not supporting notes will exit with a message indicating so.</p> </dd> <dt class=\"hdlist1\">done</dt> <dd> <p>Error out if the stream ends without a <code>done</code> command. Without this feature, errors causing the frontend to end abruptly at a convenient point in the stream can go undetected. This may occur, for example, if an import front end dies in mid-operation without emitting SIGTERM or SIGKILL at its subordinate git fast-import instance.</p> </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"__code_option_code\"><code>option</code></h3>  <p>Processes the specified option so that git fast-import behaves in a way that suits the frontend’s needs. Note that options specified by the frontend are overridden by any options the user may specify to git fast-import itself.</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>    'option' SP &lt;option&gt; LF</pre> </div> </div>  <p>The <code>&lt;option&gt;</code> part of the command may contain any of the options listed in the OPTIONS section that do not change import semantics, without the leading <code>--</code> and is treated in the same way.</p>   <p>Option commands must be the first commands on the input (not counting feature commands), to give an option command after any non-option command is an error.</p>   <p>The following command-line options change import semantics and may therefore not be passed as option:</p>  <div class=\"ulist\"> <ul> <li> <p>date-format</p> </li> <li> <p>import-marks</p> </li> <li> <p>export-marks</p> </li> <li> <p>cat-blob-fd</p> </li> <li> <p>force</p> </li> </ul> </div> </div> <div class=\"sect2\"> <h3 id=\"__code_done_code\"><code>done</code></h3>  <p>If the <code>done</code> feature is not in use, treated as if EOF was read. This can be used to tell fast-import to finish early.</p>   <p>If the <code>--done</code> command-line option or <code>feature done</code> command is in use, the <code>done</code> command is mandatory and marks the end of the stream.</p>  </div>\n</div>   <h2 id=\"_responses_to_commands\">Responses to commands</h2> <div class=\"sectionbody\"> <p>New objects written by fast-import are not available immediately. Most fast-import commands have no visible effect until the next checkpoint (or completion). The frontend can send commands to fill fast-import’s input pipe without worrying about how quickly they will take effect, which improves performance by simplifying scheduling.</p>   <p>For some frontends, though, it is useful to be able to read back data from the current repository as it is being updated (for example when the source material describes objects in terms of patches to be applied to previously imported objects). This can be accomplished by connecting the frontend and fast-import via bidirectional pipes:</p>  <div class=\"exampleblock\"> <div class=\"content\"> <div class=\"literalblock\"> <div class=\"content\"> <pre>mkfifo fast-import-output\nfrontend &lt;fast-import-output |\ngit fast-import &gt;fast-import-output</pre> </div> </div> </div> </div>  <p>A frontend set up this way can use <code>progress</code>, <code>get-mark</code>, <code>ls</code>, and <code>cat-blob</code> commands to read information from the import in progress.</p>   <p>To avoid deadlock, such frontends must completely consume any pending output from <code>progress</code>, <code>ls</code>, <code>get-mark</code>, and <code>cat-blob</code> before performing writes to fast-import that might block.</p> </div>   <h2 id=\"_crash_reports\">Crash reports</h2> <div class=\"sectionbody\"> <p>If fast-import is supplied invalid input it will terminate with a non-zero exit status and create a crash report in the top level of the Git repository it was importing into. Crash reports contain a snapshot of the internal fast-import state as well as the most recent commands that lead up to the crash.</p>   <p>All recent commands (including stream comments, file changes and progress commands) are shown in the command history within the crash report, but raw file data and commit messages are excluded from the crash report. This exclusion saves space within the report file and reduces the amount of buffering that fast-import must perform during execution.</p>   <p>After writing a crash report fast-import will close the current packfile and export the marks table. This allows the frontend developer to inspect the repository state and resume the import from the point where it crashed. The modified branches and tags are not updated during a crash, as the import did not complete successfully. Branch and tag information can be found in the crash report and must be applied manually if the update is needed.</p>   <p>An example crash:</p>  <div class=\"exampleblock\"> <div class=\"content\"> <div class=\"literalblock\"> <div class=\"content\"> <pre>$ cat &gt;in &lt;&lt;END_OF_INPUT\n# my very first test commit\ncommit refs/heads/master\ncommitter Shawn O. Pearce &lt;spearce&gt; 19283 -0400\n# who is that guy anyway?\ndata &lt;&lt;EOF\nthis is my commit\nEOF\nM 644 inline .gitignore\ndata &lt;&lt;EOF\n.gitignore\nEOF\nM 777 inline bob\nEND_OF_INPUT</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>$ git fast-import &lt;in\nfatal: Corrupt mode: M 777 inline bob\nfast-import: dumping crash report to .git/fast_import_crash_8434</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>$ cat .git/fast_import_crash_8434\nfast-import crash report:\n    fast-import process: 8434\n    parent process     : 1391\n    at Sat Sep 1 00:58:12 2007</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>fatal: Corrupt mode: M 777 inline bob</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>Most Recent Commands Before Crash\n---------------------------------\n  # my very first test commit\n  commit refs/heads/master\n  committer Shawn O. Pearce &lt;spearce&gt; 19283 -0400\n  # who is that guy anyway?\n  data &lt;&lt;EOF\n  M 644 inline .gitignore\n  data &lt;&lt;EOF\n* M 777 inline bob</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>Active Branch LRU\n-----------------\n    active_branches = 1 cur, 5 max</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>pos  clock name\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n 1)      0 refs/heads/master</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>Inactive Branches\n-----------------\nrefs/heads/master:\n  status      : active loaded dirty\n  tip commit  : 0000000000000000000000000000000000000000\n  old tree    : 0000000000000000000000000000000000000000\n  cur tree    : 0000000000000000000000000000000000000000\n  commit clock: 0\n  last pack   :</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>-------------------\nEND OF CRASH REPORT</pre> </div> </div> </div> </div>\n</div>   <h2 id=\"_tips_and_tricks\">Tips and tricks</h2> <div class=\"sectionbody\"> <p>The following tips and tricks have been collected from various users of fast-import, and are offered here as suggestions.</p>  <div class=\"sect2\"> <h3 id=\"_use_one_mark_per_commit\">Use One Mark Per Commit</h3>  <p>When doing a repository conversion, use a unique mark per commit (<code>mark :&lt;n&gt;</code>) and supply the --export-marks option on the command line. fast-import will dump a file which lists every mark and the Git object SHA-1 that corresponds to it. If the frontend can tie the marks back to the source repository, it is easy to verify the accuracy and completeness of the import by comparing each Git commit to the corresponding source revision.</p>   <p>Coming from a system such as Perforce or Subversion this should be quite simple, as the fast-import mark can also be the Perforce changeset number or the Subversion revision number.</p>  </div> <div class=\"sect2\"> <h3 id=\"_freely_skip_around_branches\">Freely Skip Around Branches</h3>  <p>Don’t bother trying to optimize the frontend to stick to one branch at a time during an import. Although doing so might be slightly faster for fast-import, it tends to increase the complexity of the frontend code considerably.</p>   <p>The branch LRU builtin to fast-import tends to behave very well, and the cost of activating an inactive branch is so low that bouncing around between branches has virtually no impact on import performance.</p>  </div> <div class=\"sect2\"> <h3 id=\"_handling_renames\">Handling Renames</h3>  <p>When importing a renamed file or directory, simply delete the old name(s) and modify the new name(s) during the corresponding commit. Git performs rename detection after-the-fact, rather than explicitly during a commit.</p>  </div> <div class=\"sect2\"> <h3 id=\"_use_tag_fixup_branches\">Use Tag Fixup Branches</h3>  <p>Some other SCM systems let the user create a tag from multiple files which are not from the same commit/changeset. Or to create tags which are a subset of the files available in the repository.</p>   <p>Importing these tags as-is in Git is impossible without making at least one commit which “fixes up” the files to match the content of the tag. Use fast-import’s <code>reset</code> command to reset a dummy branch outside of your normal branch space to the base commit for the tag, then commit one or more file fixup commits, and finally tag the dummy branch.</p>   <p>For example since all normal branches are stored under <code>refs/heads/</code> name the tag fixup branch <code>TAG_FIXUP</code>. This way it is impossible for the fixup branch used by the importer to have namespace conflicts with real branches imported from the source (the name <code>TAG_FIXUP</code> is not <code>refs/heads/TAG_FIXUP</code>).</p>   <p>When committing fixups, consider using <code>merge</code> to connect the commit(s) which are supplying file revisions to the fixup branch. Doing so will allow tools such as <code>git blame</code> to track through the real commit history and properly annotate the source files.</p>   <p>After fast-import terminates the frontend will need to do <code>rm .git/TAG_FIXUP</code> to remove the dummy branch.</p>  </div> <div class=\"sect2\"> <h3 id=\"_import_now_repack_later\">Import Now, Repack Later</h3>  <p>As soon as fast-import completes the Git repository is completely valid and ready for use. Typically this takes only a very short time, even for considerably large projects (100,000+ commits).</p>   <p>However repacking the repository is necessary to improve data locality and access performance. It can also take hours on extremely large projects (especially if -f and a large --window parameter is used). Since repacking is safe to run alongside readers and writers, run the repack in the background and let it finish when it finishes. There is no reason to wait to explore your new Git project!</p>   <p>If you choose to wait for the repack, don’t try to run benchmarks or performance tests until repacking is completed. fast-import outputs suboptimal packfiles that are simply never seen in real use situations.</p>  </div> <div class=\"sect2\"> <h3 id=\"_repacking_historical_data\">Repacking Historical Data</h3>  <p>If you are repacking very old imported data (e.g. older than the last year), consider expending some extra CPU time and supplying --window=50 (or higher) when you run <code>git repack</code>. This will take longer, but will also produce a smaller packfile. You only need to expend the effort once, and everyone using your project will benefit from the smaller repository.</p>  </div> <div class=\"sect2\"> <h3 id=\"_include_some_progress_messages\">Include Some Progress Messages</h3>  <p>Every once in a while have your frontend emit a <code>progress</code> message to fast-import. The contents of the messages are entirely free-form, so one suggestion would be to output the current month and year each time the current commit date moves into the next month. Your users will feel better knowing how much of the data stream has been processed.</p>  </div>\n</div>   <h2 id=\"_packfile_optimization\">Packfile optimization</h2> <div class=\"sectionbody\"> <p>When packing a blob fast-import always attempts to deltify against the last blob written. Unless specifically arranged for by the frontend, this will probably not be a prior version of the same file, so the generated delta will not be the smallest possible. The resulting packfile will be compressed, but will not be optimal.</p>   <p>Frontends which have efficient access to all revisions of a single file (for example reading an RCS/CVS ,v file) can choose to supply all revisions of that file as a sequence of consecutive <code>blob</code> commands. This allows fast-import to deltify the different file revisions against each other, saving space in the final packfile. Marks can be used to later identify individual file revisions during a sequence of <code>commit</code> commands.</p>   <p>The packfile(s) created by fast-import do not encourage good disk access patterns. This is caused by fast-import writing the data in the order it is received on standard input, while Git typically organizes data within packfiles to make the most recent (current tip) data appear before historical data. Git also clusters commits together, speeding up revision traversal through better cache locality.</p>   <p>For this reason it is strongly recommended that users repack the repository with <code>git repack -a -d</code> after fast-import completes, allowing Git to reorganize the packfiles for faster data access. If blob deltas are suboptimal (see above) then also adding the <code>-f</code> option to force recomputation of all deltas can significantly reduce the final packfile size (30-50% smaller can be quite typical).</p> </div>   <h2 id=\"_memory_utilization\">Memory utilization</h2> <div class=\"sectionbody\"> <p>There are a number of factors which affect how much memory fast-import requires to perform an import. Like critical sections of core Git, fast-import uses its own memory allocators to amortize any overheads associated with malloc. In practice fast-import tends to amortize any malloc overheads to 0, due to its use of large block allocations.</p>  <div class=\"sect2\"> <h3 id=\"_per_object\">per object</h3>  <p>fast-import maintains an in-memory structure for every object written in this execution. On a 32 bit system the structure is 32 bytes, on a 64 bit system the structure is 40 bytes (due to the larger pointer sizes). Objects in the table are not deallocated until fast-import terminates. Importing 2 million objects on a 32 bit system will require approximately 64 MiB of memory.</p>   <p>The object table is actually a hashtable keyed on the object name (the unique SHA-1). This storage configuration allows fast-import to reuse an existing or already written object and avoid writing duplicates to the output packfile. Duplicate blobs are surprisingly common in an import, typically due to branch merges in the source.</p>  </div> <div class=\"sect2\"> <h3 id=\"_per_mark\">per mark</h3>  <p>Marks are stored in a sparse array, using 1 pointer (4 bytes or 8 bytes, depending on pointer size) per mark. Although the array is sparse, frontends are still strongly encouraged to use marks between 1 and n, where n is the total number of marks required for this import.</p>  </div> <div class=\"sect2\"> <h3 id=\"_per_branch\">per branch</h3>  <p>Branches are classified as active and inactive. The memory usage of the two classes is significantly different.</p>   <p>Inactive branches are stored in a structure which uses 96 or 120 bytes (32 bit or 64 bit systems, respectively), plus the length of the branch name (typically under 200 bytes), per branch. fast-import will easily handle as many as 10,000 inactive branches in under 2 MiB of memory.</p>   <p>Active branches have the same overhead as inactive branches, but also contain copies of every tree that has been recently modified on that branch. If subtree <code>include</code> has not been modified since the branch became active, its contents will not be loaded into memory, but if subtree <code>src</code> has been modified by a commit since the branch became active, then its contents will be loaded in memory.</p>   <p>As active branches store metadata about the files contained on that branch, their in-memory storage size can grow to a considerable size (see below).</p>   <p>fast-import automatically moves active branches to inactive status based on a simple least-recently-used algorithm. The LRU chain is updated on each <code>commit</code> command. The maximum number of active branches can be increased or decreased on the command line with --active-branches=.</p>  </div> <div class=\"sect2\"> <h3 id=\"_per_active_tree\">per active tree</h3>  <p>Trees (aka directories) use just 12 bytes of memory on top of the memory required for their entries (see “per active file” below). The cost of a tree is virtually 0, as its overhead amortizes out over the individual file entries.</p>  </div> <div class=\"sect2\"> <h3 id=\"_per_active_file_entry\">per active file entry</h3>  <p>Files (and pointers to subtrees) within active trees require 52 or 64 bytes (32/64 bit platforms) per entry. To conserve space, file and tree names are pooled in a common string table, allowing the filename “Makefile” to use just 16 bytes (after including the string header overhead) no matter how many times it occurs within the project.</p>   <p>The active branch LRU, when coupled with the filename string pool and lazy loading of subtrees, allows fast-import to efficiently import projects with 2,000+ branches and 45,114+ files in a very limited memory footprint (less than 2.7 MiB per active branch).</p>  </div>\n</div>   <h2 id=\"_signals\">Signals</h2> <div class=\"sectionbody\"> <p>Sending <strong>SIGUSR1</strong> to the <code>git fast-import</code> process ends the current packfile early, simulating a <code>checkpoint</code> command. The impatient operator can use this facility to peek at the objects and refs from an import in progress, at the cost of some added running time and worse compression.</p> </div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-fast-export\">git-fast-export[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-fast-import\" class=\"_attribution-link\">https://git-scm.com/docs/git-fast-import</a>\n  </p>\n</div>\n","git-ls-files":"<h1>git-ls-files</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-ls-files - Show information about files in the index and the working tree</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git ls-files [-z] [-t] [-v]\n                (--[cached|deleted|others|ignored|stage|unmerged|killed|modified])*\n                (-[c|d|o|i|s|u|k|m])*\n                [--eol]\n                [-x &lt;pattern&gt;|--exclude=&lt;pattern&gt;]\n                [-X &lt;file&gt;|--exclude-from=&lt;file&gt;]\n                [--exclude-per-directory=&lt;file&gt;]\n                [--exclude-standard]\n                [--error-unmatch] [--with-tree=&lt;tree-ish&gt;]\n                [--full-name] [--abbrev] [--] [&lt;file&gt;…​]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>This merges the file listing in the directory cache index with the actual working directory list, and shows different combinations of the two.</p>   <p>One or more of the options below may be used to determine the files shown:</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-c</dt> <dt class=\"hdlist1\">--cached</dt> <dd> <p>Show cached files in the output (default)</p> </dd> <dt class=\"hdlist1\">-d</dt> <dt class=\"hdlist1\">--deleted</dt> <dd> <p>Show deleted files in the output</p> </dd> <dt class=\"hdlist1\">-m</dt> <dt class=\"hdlist1\">--modified</dt> <dd> <p>Show modified files in the output</p> </dd> <dt class=\"hdlist1\">-o</dt> <dt class=\"hdlist1\">--others</dt> <dd> <p>Show other (i.e. untracked) files in the output</p> </dd> <dt class=\"hdlist1\">-i</dt> <dt class=\"hdlist1\">--ignored</dt> <dd> <p>Show only ignored files in the output. When showing files in the index, print only those matched by an exclude pattern. When showing \"other\" files, show only those matched by an exclude pattern.</p> </dd> <dt class=\"hdlist1\">-s</dt> <dt class=\"hdlist1\">--stage</dt> <dd> <p>Show staged contents' object name, mode bits and stage number in the output.</p> </dd> <dt class=\"hdlist1\">--directory</dt> <dd> <p>If a whole directory is classified as \"other\", show just its name (with a trailing slash) and not its whole contents.</p> </dd> <dt class=\"hdlist1\">--no-empty-directory</dt> <dd> <p>Do not list empty directories. Has no effect without --directory.</p> </dd> <dt class=\"hdlist1\">-u</dt> <dt class=\"hdlist1\">--unmerged</dt> <dd> <p>Show unmerged files in the output (forces --stage)</p> </dd> <dt class=\"hdlist1\">-k</dt> <dt class=\"hdlist1\">--killed</dt> <dd> <p>Show files on the filesystem that need to be removed due to file/directory conflicts for checkout-index to succeed.</p> </dd> <dt class=\"hdlist1\">-z</dt> <dd> <p>\\0 line termination on output.</p> </dd> <dt class=\"hdlist1\">-x &lt;pattern&gt;</dt> <dt class=\"hdlist1\">--exclude=&lt;pattern&gt;</dt> <dd> <p>Skip untracked files matching pattern. Note that pattern is a shell wildcard pattern. See EXCLUDE PATTERNS below for more information.</p> </dd> <dt class=\"hdlist1\">-X &lt;file&gt;</dt> <dt class=\"hdlist1\">--exclude-from=&lt;file&gt;</dt> <dd> <p>Read exclude patterns from &lt;file&gt;; 1 per line.</p> </dd> <dt class=\"hdlist1\">--exclude-per-directory=&lt;file&gt;</dt> <dd> <p>Read additional exclude patterns that apply only to the directory and its subdirectories in &lt;file&gt;.</p> </dd> <dt class=\"hdlist1\">--exclude-standard</dt> <dd> <p>Add the standard Git exclusions: .git/info/exclude, .gitignore in each directory, and the user’s global exclusion file.</p> </dd> <dt class=\"hdlist1\">--error-unmatch</dt> <dd> <p>If any &lt;file&gt; does not appear in the index, treat this as an error (return 1).</p> </dd> <dt class=\"hdlist1\">--with-tree=&lt;tree-ish&gt;</dt> <dd> <p>When using --error-unmatch to expand the user supplied &lt;file&gt; (i.e. path pattern) arguments to paths, pretend that paths which were removed in the index since the named &lt;tree-ish&gt; are still present. Using this option with <code>-s</code> or <code>-u</code> options does not make any sense.</p> </dd> <dt class=\"hdlist1\">-t</dt> <dd> <p>This feature is semi-deprecated. For scripting purpose, <a href=\"git-status\">git-status[1]</a> <code>--porcelain</code> and <a href=\"git-diff-files\">git-diff-files[1]</a> <code>--name-status</code> are almost always superior alternatives, and users should look at <a href=\"git-status\">git-status[1]</a> <code>--short</code> or <a href=\"git-diff\">git-diff[1]</a> <code>--name-status</code> for more user-friendly alternatives.</p>  <p>This option identifies the file status with the following tags (followed by a space) at the start of each line:</p>  </dd> <dt class=\"hdlist1\">H</dt> <dd> <p>cached</p> </dd> <dt class=\"hdlist1\">S</dt> <dd> <p>skip-worktree</p> </dd> <dt class=\"hdlist1\">M</dt> <dd> <p>unmerged</p> </dd> <dt class=\"hdlist1\">R</dt> <dd> <p>removed/deleted</p> </dd> <dt class=\"hdlist1\">C</dt> <dd> <p>modified/changed</p> </dd> <dt class=\"hdlist1\">K</dt> <dd> <p>to be killed</p> </dd> <dt class=\"hdlist1\">?</dt> <dd> <p>other</p> </dd> <dt class=\"hdlist1\">-v</dt> <dd> <p>Similar to <code>-t</code>, but use lowercase letters for files that are marked as <code>assume unchanged</code> (see <a href=\"git-update-index\">git-update-index[1]</a>).</p> </dd> <dt class=\"hdlist1\">--full-name</dt> <dd> <p>When run from a subdirectory, the command usually outputs paths relative to the current directory. This option forces paths to be output relative to the project top directory.</p> </dd> <dt class=\"hdlist1\">--abbrev[=&lt;n&gt;]</dt> <dd> <p>Instead of showing the full 40-byte hexadecimal object lines, show only a partial prefix. Non default number of digits can be specified with --abbrev=&lt;n&gt;.</p> </dd> <dt class=\"hdlist1\">--debug</dt> <dd> <p>After each line that describes a file, add more data about its cache entry. This is intended to show as much information as possible for manual inspection; the exact format may change at any time.</p> </dd> <dt class=\"hdlist1\">--eol</dt> <dd> <p>Show &lt;eolinfo&gt; and &lt;eolattr&gt; of files. &lt;eolinfo&gt; is the file content identification used by Git when the \"text\" attribute is \"auto\" (or not set and core.autocrlf is not false). &lt;eolinfo&gt; is either \"-text\", \"none\", \"lf\", \"crlf\", \"mixed\" or \"\".</p>  <p>\"\" means the file is not a regular file, it is not in the index or not accessible in the working tree.</p>   <p>&lt;eolattr&gt; is the attribute that is used when checking out or committing, it is either \"\", \"-text\", \"text\", \"text=auto\", \"text eol=lf\", \"text eol=crlf\". Note: Currently Git does not support \"text=auto eol=lf\" or \"text=auto eol=crlf\", that may change in the future.</p>   <p>Both the &lt;eolinfo&gt; in the index (\"i/&lt;eolinfo&gt;\") and in the working tree (\"w/&lt;eolinfo&gt;\") are shown for regular files, followed by the (\"attr/&lt;eolattr&gt;\").</p>  </dd> <dt class=\"hdlist1\">--</dt> <dd> <p>Do not interpret any more arguments as options.</p> </dd> <dt class=\"hdlist1\">&lt;file&gt;</dt> <dd> <p>Files to show. If no files are given all files which match the other specified criteria are shown.</p> </dd> </dl> </div></div>   <h2 id=\"_output\">Output</h2> <div class=\"sectionbody\"> <p><code>git ls-files</code> just outputs the filenames unless <code>--stage</code> is specified in which case it outputs:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>[&lt;tag&gt; ]&lt;mode&gt; &lt;object&gt; &lt;stage&gt; &lt;file&gt;</pre> </div> </div>  <p><code>git ls-files --eol</code> will show i/&lt;eolinfo&gt;&lt;SPACES&gt;w/&lt;eolinfo&gt;&lt;SPACES&gt;attr/&lt;eolattr&gt;&lt;SPACE*&gt;&lt;TAB&gt;&lt;file&gt;</p>   <p><code>git ls-files --unmerged</code> and <code>git ls-files --stage</code> can be used to examine detailed information on unmerged paths.</p>   <p>For an unmerged path, instead of recording a single mode/SHA-1 pair, the index records up to three such pairs; one from tree O in stage 1, A in stage 2, and B in stage 3. This information can be used by the user (or the porcelain) to see what should eventually be recorded at the path. (see <a href=\"git-read-tree\">git-read-tree[1]</a> for more information on state)</p>   <p>When <code>-z</code> option is not used, TAB, LF, and backslash characters in pathnames are represented as <code>\\t</code>, <code>\\n</code>, and <code>\\\\</code>, respectively.</p> </div>   <h2 id=\"_exclude_patterns\">Exclude patterns</h2> <div class=\"sectionbody\"> <p><code>git ls-files</code> can use a list of \"exclude patterns\" when traversing the directory tree and finding files to show when the flags --others or --ignored are specified. <a href=\"gitignore\">gitignore[5]</a> specifies the format of exclude patterns.</p>   <p>These exclude patterns come from these places, in order:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>The command-line flag --exclude=&lt;pattern&gt; specifies a single pattern. Patterns are ordered in the same order they appear in the command line.</p> </li> <li> <p>The command-line flag --exclude-from=&lt;file&gt; specifies a file containing a list of patterns. Patterns are ordered in the same order they appear in the file.</p> </li> <li> <p>The command-line flag --exclude-per-directory=&lt;name&gt; specifies a name of the file in each directory <code>git ls-files</code> examines, normally <code>.gitignore</code>. Files in deeper directories take precedence. Patterns are ordered in the same order they appear in the files.</p> </li> </ol> </div>  <p>A pattern specified on the command line with --exclude or read from the file specified with --exclude-from is relative to the top of the directory tree. A pattern read from a file specified by --exclude-per-directory is relative to the directory that the pattern file appears in.</p> </div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-read-tree\">git-read-tree[1]</a>, <a href=\"gitignore\">gitignore[5]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-ls-files\" class=\"_attribution-link\">https://git-scm.com/docs/git-ls-files</a>\n  </p>\n</div>\n","git-rev-parse":"<h1>git-rev-parse</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-rev-parse - Pick out and massage parameters</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git rev-parse [ --option ] &lt;args&gt;…​</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Many Git porcelainish commands take mixture of flags (i.e. parameters that begin with a dash <code>-</code>) and parameters meant for the underlying <code>git rev-list</code> command they use internally and flags and parameters for the other commands they use downstream of <code>git rev-list</code>. This command is used to distinguish between them.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\">\n<div class=\"sect2\"> <h3 id=\"_operation_modes\">Operation Modes</h3>  <p>Each of these options must appear first on the command line.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--parseopt</dt> <dd> <p>Use <code>git rev-parse</code> in option parsing mode (see PARSEOPT section below).</p> </dd> <dt class=\"hdlist1\">--sq-quote</dt> <dd> <p>Use <code>git rev-parse</code> in shell quoting mode (see SQ-QUOTE section below). In contrast to the <code>--sq</code> option below, this mode does only quoting. Nothing else is done to command input.</p> </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_options_for_parseopt\">Options for --parseopt</h3> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--keep-dashdash</dt> <dd> <p>Only meaningful in <code>--parseopt</code> mode. Tells the option parser to echo out the first <code>--</code> met instead of skipping it.</p> </dd> <dt class=\"hdlist1\">--stop-at-non-option</dt> <dd> <p>Only meaningful in <code>--parseopt</code> mode. Lets the option parser stop at the first non-option argument. This can be used to parse sub-commands that take options themselves.</p> </dd> <dt class=\"hdlist1\">--stuck-long</dt> <dd> <p>Only meaningful in <code>--parseopt</code> mode. Output the options in their long form if available, and with their arguments stuck.</p> </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_options_for_filtering\">Options for Filtering</h3> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--revs-only</dt> <dd> <p>Do not output flags and parameters not meant for <code>git rev-list</code> command.</p> </dd> <dt class=\"hdlist1\">--no-revs</dt> <dd> <p>Do not output flags and parameters meant for <code>git rev-list</code> command.</p> </dd> <dt class=\"hdlist1\">--flags</dt> <dd> <p>Do not output non-flag parameters.</p> </dd> <dt class=\"hdlist1\">--no-flags</dt> <dd> <p>Do not output flag parameters.</p> </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_options_for_output\">Options for Output</h3> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--default &lt;arg&gt;</dt> <dd> <p>If there is no parameter given by the user, use <code>&lt;arg&gt;</code> instead.</p> </dd> <dt class=\"hdlist1\">--prefix &lt;arg&gt;</dt> <dd> <p>Behave as if <code>git rev-parse</code> was invoked from the <code>&lt;arg&gt;</code> subdirectory of the working tree. Any relative filenames are resolved as if they are prefixed by <code>&lt;arg&gt;</code> and will be printed in that form.</p>  <p>This can be used to convert arguments to a command run in a subdirectory so that they can still be used after moving to the top-level of the repository. For example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>prefix=$(git rev-parse --show-prefix)\ncd \"$(git rev-parse --show-toplevel)\"\neval \"set -- $(git rev-parse --sq --prefix \"$prefix\" \"$@\")\"</pre> </div> </div> </dd> <dt class=\"hdlist1\">--verify</dt> <dd> <p>Verify that exactly one parameter is provided, and that it can be turned into a raw 20-byte SHA-1 that can be used to access the object database. If so, emit it to the standard output; otherwise, error out.</p>  <p>If you want to make sure that the output actually names an object in your object database and/or can be used as a specific type of object you require, you can add the <code>^{type}</code> peeling operator to the parameter. For example, <code>git rev-parse \"$VAR^{commit}\"</code> will make sure <code>$VAR</code> names an existing object that is a commit-ish (i.e. a commit, or an annotated tag that points at a commit). To make sure that <code>$VAR</code> names an existing object of any type, <code>git rev-parse \"$VAR^{object}\"</code> can be used.</p>  </dd> <dt class=\"hdlist1\">-q</dt> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>Only meaningful in <code>--verify</code> mode. Do not output an error message if the first argument is not a valid object name; instead exit with non-zero status silently. SHA-1s for valid object names are printed to stdout on success.</p> </dd> <dt class=\"hdlist1\">--sq</dt> <dd> <p>Usually the output is made one line per flag and parameter. This option makes output a single line, properly quoted for consumption by shell. Useful when you expect your parameter to contain whitespaces and newlines (e.g. when using pickaxe <code>-S</code> with <code>git diff-*</code>). In contrast to the <code>--sq-quote</code> option, the command input is still interpreted as usual.</p> </dd> <dt class=\"hdlist1\">--not</dt> <dd> <p>When showing object names, prefix them with <code>^</code> and strip <code>^</code> prefix from the object names that already have one.</p> </dd> <dt class=\"hdlist1\">--abbrev-ref[=(strict|loose)]</dt> <dd> <p>A non-ambiguous short name of the objects name. The option core.warnAmbiguousRefs is used to select the strict abbreviation mode.</p> </dd> <dt class=\"hdlist1\">--short</dt> <dt class=\"hdlist1\">--short=number</dt> <dd> <p>Instead of outputting the full SHA-1 values of object names try to abbreviate them to a shorter unique name. When no length is specified 7 is used. The minimum length is 4.</p> </dd> <dt class=\"hdlist1\">--symbolic</dt> <dd> <p>Usually the object names are output in SHA-1 form (with possible <code>^</code> prefix); this option makes them output in a form as close to the original input as possible.</p> </dd> <dt class=\"hdlist1\">--symbolic-full-name</dt> <dd> <p>This is similar to --symbolic, but it omits input that are not refs (i.e. branch or tag names; or more explicitly disambiguating \"heads/master\" form, when you want to name the \"master\" branch when there is an unfortunately named tag \"master\"), and show them as full refnames (e.g. \"refs/heads/master\").</p> </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_options_for_objects\">Options for Objects</h3> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--all</dt> <dd> <p>Show all refs found in <code>refs/</code>.</p> </dd> <dt class=\"hdlist1\">--branches[=pattern]</dt> <dt class=\"hdlist1\">--tags[=pattern]</dt> <dt class=\"hdlist1\">--remotes[=pattern]</dt> <dd> <p>Show all branches, tags, or remote-tracking branches, respectively (i.e., refs found in <code>refs/heads</code>, <code>refs/tags</code>, or <code>refs/remotes</code>, respectively).</p>  <p>If a <code>pattern</code> is given, only refs matching the given shell glob are shown. If the pattern does not contain a globbing character (<code>?</code>, <code>*</code>, or <code>[</code>), it is turned into a prefix match by appending <code>/*</code>.</p>  </dd> <dt class=\"hdlist1\">--glob=pattern</dt> <dd> <p>Show all refs matching the shell glob pattern <code>pattern</code>. If the pattern does not start with <code>refs/</code>, this is automatically prepended. If the pattern does not contain a globbing character (<code>?</code>, <code>*</code>, or <code>[</code>), it is turned into a prefix match by appending <code>/*</code>.</p> </dd> <dt class=\"hdlist1\">--exclude=&lt;glob-pattern&gt;</dt> <dd> <p>Do not include refs matching <code>&lt;glob-pattern&gt;</code> that the next <code>--all</code>, <code>--branches</code>, <code>--tags</code>, <code>--remotes</code>, or <code>--glob</code> would otherwise consider. Repetitions of this option accumulate exclusion patterns up to the next <code>--all</code>, <code>--branches</code>, <code>--tags</code>, <code>--remotes</code>, or <code>--glob</code> option (other options or arguments do not clear accumulated patterns).</p>  <p>The patterns given should not begin with <code>refs/heads</code>, <code>refs/tags</code>, or <code>refs/remotes</code> when applied to <code>--branches</code>, <code>--tags</code>, or <code>--remotes</code>, respectively, and they must begin with <code>refs/</code> when applied to <code>--glob</code> or <code>--all</code>. If a trailing <code>/*</code> is intended, it must be given explicitly.</p>  </dd> <dt class=\"hdlist1\">--disambiguate=&lt;prefix&gt;</dt> <dd> <p>Show every object whose name begins with the given prefix. The &lt;prefix&gt; must be at least 4 hexadecimal digits long to avoid listing each and every object in the repository by mistake.</p> </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_options_for_files\">Options for Files</h3> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--local-env-vars</dt> <dd> <p>List the GIT_* environment variables that are local to the repository (e.g. GIT_DIR or GIT_WORK_TREE, but not GIT_EDITOR). Only the names of the variables are listed, not their value, even if they are set.</p> </dd> <dt class=\"hdlist1\">--git-dir</dt> <dd> <p>Show <code>$GIT_DIR</code> if defined. Otherwise show the path to the .git directory. The path shown, when relative, is relative to the current working directory.</p>  <p>If <code>$GIT_DIR</code> is not defined and the current directory is not detected to lie in a Git repository or work tree print a message to stderr and exit with nonzero status.</p>  </dd> <dt class=\"hdlist1\">--git-common-dir</dt> <dd> <p>Show <code>$GIT_COMMON_DIR</code> if defined, else <code>$GIT_DIR</code>.</p> </dd> <dt class=\"hdlist1\">--is-inside-git-dir</dt> <dd> <p>When the current working directory is below the repository directory print \"true\", otherwise \"false\".</p> </dd> <dt class=\"hdlist1\">--is-inside-work-tree</dt> <dd> <p>When the current working directory is inside the work tree of the repository print \"true\", otherwise \"false\".</p> </dd> <dt class=\"hdlist1\">--is-bare-repository</dt> <dd> <p>When the repository is bare print \"true\", otherwise \"false\".</p> </dd> <dt class=\"hdlist1\">--resolve-git-dir &lt;path&gt;</dt> <dd> <p>Check if &lt;path&gt; is a valid repository or a gitfile that points at a valid repository, and print the location of the repository. If &lt;path&gt; is a gitfile then the resolved path to the real repository is printed.</p> </dd> <dt class=\"hdlist1\">--git-path &lt;path&gt;</dt> <dd> <p>Resolve \"$GIT_DIR/&lt;path&gt;\" and takes other path relocation variables such as $GIT_OBJECT_DIRECTORY, $GIT_INDEX_FILE…​ into account. For example, if $GIT_OBJECT_DIRECTORY is set to /foo/bar then \"git rev-parse --git-path objects/abc\" returns /foo/bar/abc.</p> </dd> <dt class=\"hdlist1\">--show-cdup</dt> <dd> <p>When the command is invoked from a subdirectory, show the path of the top-level directory relative to the current directory (typically a sequence of \"../\", or an empty string).</p> </dd> <dt class=\"hdlist1\">--show-prefix</dt> <dd> <p>When the command is invoked from a subdirectory, show the path of the current directory relative to the top-level directory.</p> </dd> <dt class=\"hdlist1\">--show-toplevel</dt> <dd> <p>Show the absolute path of the top-level directory.</p> </dd> <dt class=\"hdlist1\">--shared-index-path</dt> <dd> <p>Show the path to the shared index file in split index mode, or empty if not in split-index mode.</p> </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_other_options\">Other Options</h3> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--since=datestring</dt> <dt class=\"hdlist1\">--after=datestring</dt> <dd> <p>Parse the date string, and output the corresponding --max-age= parameter for <code>git rev-list</code>.</p> </dd> <dt class=\"hdlist1\">--until=datestring</dt> <dt class=\"hdlist1\">--before=datestring</dt> <dd> <p>Parse the date string, and output the corresponding --min-age= parameter for <code>git rev-list</code>.</p> </dd> <dt class=\"hdlist1\">&lt;args&gt;…​</dt> <dd> <p>Flags and parameters to be parsed.</p> </dd> </dl> </div> </div>\n</div>   <h2 id=\"_specifying_revisions\">Specifying revisions</h2> <div class=\"sectionbody\"> <p>A revision parameter <code>&lt;rev&gt;</code> typically, but not necessarily, names a commit object. It uses what is called an <code>extended SHA-1</code> syntax. Here are various ways to spell object names. The ones listed near the end of this list name trees and blobs contained in a commit.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">\n<em>&lt;sha1&gt;</em>, e.g. <em>dae86e1950b1277e545cee180551750029cfe735</em>, <em>dae86e</em>\n</dt> <dd> <p>The full SHA-1 object name (40-byte hexadecimal string), or a leading substring that is unique within the repository. E.g. dae86e1950b1277e545cee180551750029cfe735 and dae86e both name the same commit object if there is no other object in your repository whose object name starts with dae86e.</p> </dd> <dt class=\"hdlist1\">\n<em>&lt;describeOutput&gt;</em>, e.g. <em>v1.7.4.2-679-g3bee7fb</em>\n</dt> <dd> <p>Output from <code>git describe</code>; i.e. a closest tag, optionally followed by a dash and a number of commits, followed by a dash, a <code>g</code>, and an abbreviated object name.</p> </dd> <dt class=\"hdlist1\">\n<em>&lt;refname&gt;</em>, e.g. <em>master</em>, <em>heads/master</em>, <em>refs/heads/master</em>\n</dt> <dd> <p>A symbolic ref name. E.g. <code>master</code> typically means the commit object referenced by <code>refs/heads/master</code>. If you happen to have both <code>heads/master</code> and <code>tags/master</code>, you can explicitly say <code>heads/master</code> to tell Git which one you mean. When ambiguous, a <code>&lt;refname&gt;</code> is disambiguated by taking the first match in the following rules:</p> <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>If <code>$GIT_DIR/&lt;refname&gt;</code> exists, that is what you mean (this is usually useful only for <code>HEAD</code>, <code>FETCH_HEAD</code>, <code>ORIG_HEAD</code>, <code>MERGE_HEAD</code> and <code>CHERRY_PICK_HEAD</code>);</p> </li> <li> <p>otherwise, <code>refs/&lt;refname&gt;</code> if it exists;</p> </li> <li> <p>otherwise, <code>refs/tags/&lt;refname&gt;</code> if it exists;</p> </li> <li> <p>otherwise, <code>refs/heads/&lt;refname&gt;</code> if it exists;</p> </li> <li> <p>otherwise, <code>refs/remotes/&lt;refname&gt;</code> if it exists;</p> </li> <li> <p>otherwise, <code>refs/remotes/&lt;refname&gt;/HEAD</code> if it exists.</p>  <p><code>HEAD</code> names the commit on which you based the changes in the working tree. <code>FETCH_HEAD</code> records the branch which you fetched from a remote repository with your last <code>git fetch</code> invocation. <code>ORIG_HEAD</code> is created by commands that move your <code>HEAD</code> in a drastic way, to record the position of the <code>HEAD</code> before their operation, so that you can easily change the tip of the branch back to the state before you ran them. <code>MERGE_HEAD</code> records the commit(s) which you are merging into your branch when you run <code>git merge</code>. <code>CHERRY_PICK_HEAD</code> records the commit which you are cherry-picking when you run <code>git cherry-pick</code>.</p>   <p>Note that any of the <code>refs/*</code> cases above may come either from the <code>$GIT_DIR/refs</code> directory or from the <code>$GIT_DIR/packed-refs</code> file. While the ref name encoding is unspecified, UTF-8 is preferred as some output processing may assume ref names in UTF-8.</p>  </li> </ol> </div> </dd> <dt class=\"hdlist1\"><em>@</em></dt> <dd> <p><code>@</code> alone is a shortcut for <code>HEAD</code>.</p> </dd> <dt class=\"hdlist1\">\n<em>&lt;refname&gt;@{&lt;date&gt;}</em>, e.g. <em>master@{yesterday}</em>, <em>HEAD@{5 minutes ago}</em>\n</dt> <dd> <p>A ref followed by the suffix <code>@</code> with a date specification enclosed in a brace pair (e.g. <code>{yesterday}</code>, <code>{1 month 2 weeks 3 days 1 hour 1 second ago}</code> or <code>{1979-02-26 18:30:00}</code>) specifies the value of the ref at a prior point in time. This suffix may only be used immediately following a ref name and the ref must have an existing log (<code>$GIT_DIR/logs/&lt;ref&gt;</code>). Note that this looks up the state of your <strong>local</strong> ref at a given time; e.g., what was in your local <code>master</code> branch last week. If you want to look at commits made during certain times, see <code>--since</code> and <code>--until</code>.</p> </dd> <dt class=\"hdlist1\">\n<em>&lt;refname&gt;@{&lt;n&gt;}</em>, e.g. <em>master@{1}</em>\n</dt> <dd> <p>A ref followed by the suffix <code>@</code> with an ordinal specification enclosed in a brace pair (e.g. <code>{1}</code>, <code>{15}</code>) specifies the n-th prior value of that ref. For example <code>master@{1}</code> is the immediate prior value of <code>master</code> while <code>master@{5}</code> is the 5th prior value of <code>master</code>. This suffix may only be used immediately following a ref name and the ref must have an existing log (<code>$GIT_DIR/logs/&lt;refname&gt;</code>).</p> </dd> <dt class=\"hdlist1\">\n<em>@{&lt;n&gt;}</em>, e.g. <em>@{1}</em>\n</dt> <dd> <p>You can use the <code>@</code> construct with an empty ref part to get at a reflog entry of the current branch. For example, if you are on branch <code>blabla</code> then <code>@{1}</code> means the same as <code>blabla@{1}</code>.</p> </dd> <dt class=\"hdlist1\">\n<em>@{-&lt;n&gt;}</em>, e.g. <em>@{-1}</em>\n</dt> <dd> <p>The construct <code>@{-&lt;n&gt;}</code> means the &lt;n&gt;th branch/commit checked out before the current one.</p> </dd> <dt class=\"hdlist1\">\n<em>&lt;branchname&gt;@{upstream}</em>, e.g. <em>master@{upstream}</em>, <em>@{u}</em>\n</dt> <dd> <p>The suffix <code>@{upstream}</code> to a branchname (short form <code>&lt;branchname&gt;@{u}</code>) refers to the branch that the branch specified by branchname is set to build on top of (configured with <code>branch.&lt;name&gt;.remote</code> and <code>branch.&lt;name&gt;.merge</code>). A missing branchname defaults to the current one.</p> </dd> <dt class=\"hdlist1\">\n<em>&lt;branchname&gt;@{push}</em>, e.g. <em>master@{push}</em>, <em>@{push}</em>\n</dt> <dd> <p>The suffix <code>@{push}</code> reports the branch \"where we would push to\" if <code>git push</code> were run while <code>branchname</code> was checked out (or the current <code>HEAD</code> if no branchname is specified). Since our push destination is in a remote repository, of course, we report the local tracking branch that corresponds to that branch (i.e., something in <code>refs/remotes/</code>).</p>  <p>Here’s an example to make it more clear:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git config push.default current\n$ git config remote.pushdefault myfork\n$ git checkout -b mybranch origin/master\n\n$ git rev-parse --symbolic-full-name @{upstream}\nrefs/remotes/origin/master\n\n$ git rev-parse --symbolic-full-name @{push}\nrefs/remotes/myfork/mybranch</pre> </div> </div>  <p>Note in the example that we set up a triangular workflow, where we pull from one location and push to another. In a non-triangular workflow, <code>@{push}</code> is the same as <code>@{upstream}</code>, and there is no need for it.</p>  </dd> <dt class=\"hdlist1\">\n<em>&lt;rev&gt;^</em>, e.g. <em>HEAD^, v1.5.1^0</em>\n</dt> <dd> <p>A suffix <code>^</code> to a revision parameter means the first parent of that commit object. <code>^&lt;n&gt;</code> means the &lt;n&gt;th parent (i.e. <code>&lt;rev&gt;^</code> is equivalent to <code>&lt;rev&gt;^1</code>). As a special rule, <code>&lt;rev&gt;^0</code> means the commit itself and is used when <code>&lt;rev&gt;</code> is the object name of a tag object that refers to a commit object.</p> </dd> <dt class=\"hdlist1\">\n<em>&lt;rev&gt;~&lt;n&gt;</em>, e.g. <em>master~3</em>\n</dt> <dd> <p>A suffix <code>~&lt;n&gt;</code> to a revision parameter means the commit object that is the &lt;n&gt;th generation ancestor of the named commit object, following only the first parents. I.e. <code>&lt;rev&gt;~3</code> is equivalent to <code>&lt;rev&gt;^^^</code> which is equivalent to <code>&lt;rev&gt;^1^1^1</code>. See below for an illustration of the usage of this form.</p> </dd> <dt class=\"hdlist1\">\n<em>&lt;rev&gt;^{&lt;type&gt;}</em>, e.g. <em>v0.99.8^{commit}</em>\n</dt> <dd> <p>A suffix <code>^</code> followed by an object type name enclosed in brace pair means dereference the object at <code>&lt;rev&gt;</code> recursively until an object of type <code>&lt;type&gt;</code> is found or the object cannot be dereferenced anymore (in which case, barf). For example, if <code>&lt;rev&gt;</code> is a commit-ish, <code>&lt;rev&gt;^{commit}</code> describes the corresponding commit object. Similarly, if <code>&lt;rev&gt;</code> is a tree-ish, <code>&lt;rev&gt;^{tree}</code> describes the corresponding tree object. <code>&lt;rev&gt;^0</code> is a short-hand for <code>&lt;rev&gt;^{commit}</code>.</p>  <p><code>rev^{object}</code> can be used to make sure <code>rev</code> names an object that exists, without requiring <code>rev</code> to be a tag, and without dereferencing <code>rev</code>; because a tag is already an object, it does not have to be dereferenced even once to get to an object.</p>   <p><code>rev^{tag}</code> can be used to ensure that <code>rev</code> identifies an existing tag object.</p>  </dd> <dt class=\"hdlist1\">\n<em>&lt;rev&gt;^{}</em>, e.g. <em>v0.99.8^{}</em>\n</dt> <dd> <p>A suffix <code>^</code> followed by an empty brace pair means the object could be a tag, and dereference the tag recursively until a non-tag object is found.</p> </dd> <dt class=\"hdlist1\">\n<em>&lt;rev&gt;^{/&lt;text&gt;}</em>, e.g. <em>HEAD^{/fix nasty bug}</em>\n</dt> <dd> <p>A suffix <code>^</code> to a revision parameter, followed by a brace pair that contains a text led by a slash, is the same as the <code>:/fix nasty bug</code> syntax below except that it returns the youngest matching commit which is reachable from the <code>&lt;rev&gt;</code> before <code>^</code>.</p> </dd> <dt class=\"hdlist1\">\n<em>:/&lt;text&gt;</em>, e.g. <em>:/fix nasty bug</em>\n</dt> <dd> <p>A colon, followed by a slash, followed by a text, names a commit whose commit message matches the specified regular expression. This name returns the youngest matching commit which is reachable from any ref. The regular expression can match any part of the commit message. To match messages starting with a string, one can use e.g. <code>:/^foo</code>. The special sequence <code>:/!</code> is reserved for modifiers to what is matched. <code>:/!-foo</code> performs a negative match, while <code>:/!!foo</code> matches a literal <code>!</code> character, followed by <code>foo</code>. Any other sequence beginning with <code>:/!</code> is reserved for now.</p> </dd> <dt class=\"hdlist1\">\n<em>&lt;rev&gt;:&lt;path&gt;</em>, e.g. <em>HEAD:README</em>, <em>:README</em>, <em>master:./README</em>\n</dt> <dd> <p>A suffix <code>:</code> followed by a path names the blob or tree at the given path in the tree-ish object named by the part before the colon. <code>:path</code> (with an empty part before the colon) is a special case of the syntax described next: content recorded in the index at the given path. A path starting with <code>./</code> or <code>../</code> is relative to the current working directory. The given path will be converted to be relative to the working tree’s root directory. This is most useful to address a blob or tree from a commit or tree that has the same tree structure as the working tree.</p> </dd> <dt class=\"hdlist1\">\n<em>:&lt;n&gt;:&lt;path&gt;</em>, e.g. <em>:0:README</em>, <em>:README</em>\n</dt> <dd> <p>A colon, optionally followed by a stage number (0 to 3) and a colon, followed by a path, names a blob object in the index at the given path. A missing stage number (and the colon that follows it) names a stage 0 entry. During a merge, stage 1 is the common ancestor, stage 2 is the target branch’s version (typically the current branch), and stage 3 is the version from the branch which is being merged.</p> </dd> </dl> </div>  <p>Here is an illustration, by Jon Loeliger. Both commit nodes B and C are parents of commit node A. Parent commits are ordered left-to-right.</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>G   H   I   J\n \\ /     \\ /\n  D   E   F\n   \\  |  / \\\n    \\ | /   |\n     \\|/    |\n      B     C\n       \\   /\n        \\ /\n         A</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>A =      = A^0\nB = A^   = A^1     = A~1\nC = A^2  = A^2\nD = A^^  = A^1^1   = A~2\nE = B^2  = A^^2\nF = B^3  = A^^3\nG = A^^^ = A^1^1^1 = A~3\nH = D^2  = B^^2    = A^^^2  = A~2^2\nI = F^   = B^3^    = A^^3^\nJ = F^2  = B^3^2   = A^^3^2</pre> </div> </div>\n</div>   <h2 id=\"_specifying_ranges\">Specifying ranges</h2> <div class=\"sectionbody\"> <p>History traversing commands such as <code>git log</code> operate on a set of commits, not just a single commit. To these commands, specifying a single revision with the notation described in the previous section means the set of commits reachable from that commit, following the commit ancestry chain.</p>   <p>To exclude commits reachable from a commit, a prefix <code>^</code> notation is used. E.g. <code>^r1 r2</code> means commits reachable from <code>r2</code> but exclude the ones reachable from <code>r1</code>.</p>   <p>This set operation appears so often that there is a shorthand for it. When you have two commits <code>r1</code> and <code>r2</code> (named according to the syntax explained in SPECIFYING REVISIONS above), you can ask for commits that are reachable from r2 excluding those that are reachable from r1 by <code>^r1 r2</code> and it can be written as <code>r1..r2</code>.</p>   <p>A similar notation <code>r1...r2</code> is called symmetric difference of <code>r1</code> and <code>r2</code> and is defined as <code>r1 r2 --not $(git merge-base --all r1 r2)</code>. It is the set of commits that are reachable from either one of <code>r1</code> or <code>r2</code> but not from both.</p>   <p>In these two shorthands, you can omit one end and let it default to HEAD. For example, <code>origin..</code> is a shorthand for <code>origin..HEAD</code> and asks \"What did I do since I forked from the origin branch?\" Similarly, <code>..origin</code> is a shorthand for <code>HEAD..origin</code> and asks \"What did the origin do since I forked from them?\" Note that <code>..</code> would mean <code>HEAD..HEAD</code> which is an empty range that is both reachable and unreachable from HEAD.</p>   <p>Two other shorthands for naming a set that is formed by a commit and its parent commits exist. The <code>r1^@</code> notation means all parents of <code>r1</code>. <code>r1^!</code> includes commit <code>r1</code> but excludes all of its parents.</p>   <p>To summarize:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><em>&lt;rev&gt;</em></dt> <dd> <p>Include commits that are reachable from (i.e. ancestors of) &lt;rev&gt;.</p> </dd> <dt class=\"hdlist1\"><em>^&lt;rev&gt;</em></dt> <dd> <p>Exclude commits that are reachable from (i.e. ancestors of) &lt;rev&gt;.</p> </dd> <dt class=\"hdlist1\"><em>&lt;rev1&gt;..&lt;rev2&gt;</em></dt> <dd> <p>Include commits that are reachable from &lt;rev2&gt; but exclude those that are reachable from &lt;rev1&gt;. When either &lt;rev1&gt; or &lt;rev2&gt; is omitted, it defaults to <code>HEAD</code>.</p> </dd> <dt class=\"hdlist1\"><em>&lt;rev1&gt;...&lt;rev2&gt;</em></dt> <dd> <p>Include commits that are reachable from either &lt;rev1&gt; or &lt;rev2&gt; but exclude those that are reachable from both. When either &lt;rev1&gt; or &lt;rev2&gt; is omitted, it defaults to <code>HEAD</code>.</p> </dd> <dt class=\"hdlist1\">\n<em>&lt;rev&gt;^@</em>, e.g. <em>HEAD^@</em>\n</dt> <dd> <p>A suffix <code>^</code> followed by an at sign is the same as listing all parents of <code>&lt;rev&gt;</code> (meaning, include anything reachable from its parents, but not the commit itself).</p> </dd> <dt class=\"hdlist1\">\n<em>&lt;rev&gt;^!</em>, e.g. <em>HEAD^!</em>\n</dt> <dd> <p>A suffix <code>^</code> followed by an exclamation mark is the same as giving commit <code>&lt;rev&gt;</code> and then all its parents prefixed with <code>^</code> to exclude them (and their ancestors).</p> </dd> </dl> </div>  <p>Here are a handful of examples:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>D                G H D\nD F              G H I J D F\n^G D             H D\n^D B             E I J F B\nB..C             C\nB...C            G H D E B C\n^D B C           E I J F B C\nC                I J F C\nC^@              I J F\nC^!              C\nF^! D            G H D F</pre> </div> </div>\n</div>   <h2 id=\"_parseopt\">Parseopt</h2> <div class=\"sectionbody\"> <p>In <code>--parseopt</code> mode, <code>git rev-parse</code> helps massaging options to bring to shell scripts the same facilities C builtins have. It works as an option normalizer (e.g. splits single switches aggregate values), a bit like <code>getopt(1)</code> does.</p>   <p>It takes on the standard input the specification of the options to parse and understand, and echoes on the standard output a string suitable for <code>sh(1)</code> <code>eval</code> to replace the arguments with normalized ones. In case of error, it outputs usage on the standard error stream, and exits with code 129.</p>   <p>Note: Make sure you quote the result when passing it to <code>eval</code>. See below for an example.</p>  <div class=\"sect2\"> <h3 id=\"_input_format\">Input Format</h3>  <p><code>git rev-parse --parseopt</code> input format is fully text based. It has two parts, separated by a line that contains only <code>--</code>. The lines before the separator (should be one or more) are used for the usage. The lines after the separator describe the options.</p>   <p>Each line of options has this format:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>&lt;opt-spec&gt;&lt;flags&gt;*&lt;arg-hint&gt;? SP+ help LF</pre> </div> </div> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>&lt;opt-spec&gt;</code></dt> <dd> <p>its format is the short option character, then the long option name separated by a comma. Both parts are not required, though at least one is necessary. May not contain any of the <code>&lt;flags&gt;</code> characters. <code>h,help</code>, <code>dry-run</code> and <code>f</code> are examples of correct <code>&lt;opt-spec&gt;</code>.</p> </dd> <dt class=\"hdlist1\"><code>&lt;flags&gt;</code></dt> <dd> <p><code>&lt;flags&gt;</code> are of <code>*</code>, <code>=</code>, <code>?</code> or <code>!</code>.</p> <div class=\"ulist\"> <ul> <li> <p>Use <code>=</code> if the option takes an argument.</p> </li> <li> <p>Use <code>?</code> to mean that the option takes an optional argument. You probably want to use the <code>--stuck-long</code> mode to be able to unambiguously parse the optional argument.</p> </li> <li> <p>Use <code>*</code> to mean that this option should not be listed in the usage generated for the <code>-h</code> argument. It’s shown for <code>--help-all</code> as documented in <a href=\"gitcli\">gitcli[7]</a>.</p> </li> <li> <p>Use <code>!</code> to not make the corresponding negated long option available.</p> </li> </ul> </div> </dd> <dt class=\"hdlist1\"><code>&lt;arg-hint&gt;</code></dt> <dd> <p><code>&lt;arg-hint&gt;</code>, if specified, is used as a name of the argument in the help output, for options that take arguments. <code>&lt;arg-hint&gt;</code> is terminated by the first whitespace. It is customary to use a dash to separate words in a multi-word argument hint.</p> </dd> </dl> </div>  <p>The remainder of the line, after stripping the spaces, is used as the help associated to the option.</p>   <p>Blank lines are ignored, and lines that don’t match this specification are used as option group headers (start the line with a space to create such lines on purpose).</p>  </div> <div class=\"sect2\"> <h3 id=\"_example\">Example</h3> <div class=\"listingblock\"> <div class=\"content\"> <pre>OPTS_SPEC=\"\\\nsome-command [options] &lt;args&gt;...\n\nsome-command does foo and bar!\n--\nh,help    show the help\n\nfoo       some nifty option --foo\nbar=      some cool option --bar with an argument\nbaz=arg   another cool option --baz with a named argument\nqux?path  qux may take a path argument but has meaning by itself\n\n  An option group Header\nC?        option C with an optional argument\"\n\neval \"$(echo \"$OPTS_SPEC\" | git rev-parse --parseopt -- \"$@\" || echo exit $?)\"</pre> </div> </div> </div> <div class=\"sect2\"> <h3 id=\"_usage_text\">Usage text</h3>  <p>When <code>\"$@\"</code> is <code>-h</code> or <code>--help</code> in the above example, the following usage text would be shown:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>usage: some-command [options] &lt;args&gt;...\n\n    some-command does foo and bar!\n\n    -h, --help            show the help\n    --foo                 some nifty option --foo\n    --bar ...             some cool option --bar with an argument\n    --baz &lt;arg&gt;           another cool option --baz with a named argument\n    --qux[=&lt;path&gt;]        qux may take a path argument but has meaning by itself\n\nAn option group Header\n    -C[...]               option C with an optional argument</pre> </div> </div> </div>\n</div>   <h2 id=\"_sq_quote\">Sq-quote</h2> <div class=\"sectionbody\"> <p>In <code>--sq-quote</code> mode, <code>git rev-parse</code> echoes on the standard output a single line suitable for <code>sh(1)</code> <code>eval</code>. This line is made by normalizing the arguments following <code>--sq-quote</code>. Nothing other than quoting the arguments is done.</p>   <p>If you want command input to still be interpreted as usual by <code>git rev-parse</code> before the output is shell quoted, see the <code>--sq</code> option.</p>  <div class=\"sect2\"> <h3 id=\"_example_2\">Example</h3> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ cat &gt;your-git-script.sh &lt;&lt;\\EOF\n#!/bin/sh\nargs=$(git rev-parse --sq-quote \"$@\")   # quote user-supplied arguments\ncommand=\"git frotz -n24 $args\"          # and use it inside a handcrafted\n                                        # command line\neval \"$command\"\nEOF\n\n$ sh your-git-script.sh \"a b'c\"</pre> </div> </div> </div>\n</div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"><div class=\"ulist\"> <ul> <li> <p>Print the object name of the current commit:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git rev-parse --verify HEAD</pre> </div> </div> </li> <li> <p>Print the commit object name from the revision in the $REV shell variable:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git rev-parse --verify $REV^{commit}</pre> </div> </div>  <p>This will error out if $REV is empty or not a valid revision.</p>  </li> <li> <p>Similar to above:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git rev-parse --default master --verify $REV</pre> </div> </div>  <p>but if $REV is empty, the commit object name from master will be printed.</p>  </li> </ul> </div></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-rev-parse\" class=\"_attribution-link\">https://git-scm.com/docs/git-rev-parse</a>\n  </p>\n</div>\n","git-update-ref":"<h1>git-update-ref</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-update-ref - Update the object name stored in a ref safely</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git update-ref [-m &lt;reason&gt;] (-d &lt;ref&gt; [&lt;oldvalue&gt;] | [--no-deref] [--create-reflog] &lt;ref&gt; &lt;newvalue&gt; [&lt;oldvalue&gt;] | --stdin [-z])</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Given two arguments, stores the &lt;newvalue&gt; in the &lt;ref&gt;, possibly dereferencing the symbolic refs. E.g. <code>git update-ref HEAD\n&lt;newvalue&gt;</code> updates the current branch head to the new object.</p>   <p>Given three arguments, stores the &lt;newvalue&gt; in the &lt;ref&gt;, possibly dereferencing the symbolic refs, after verifying that the current value of the &lt;ref&gt; matches &lt;oldvalue&gt;. E.g. <code>git update-ref refs/heads/master &lt;newvalue&gt; &lt;oldvalue&gt;</code> updates the master branch head to &lt;newvalue&gt; only if its current value is &lt;oldvalue&gt;. You can specify 40 \"0\" or an empty string as &lt;oldvalue&gt; to make sure that the ref you are creating does not exist.</p>   <p>It also allows a \"ref\" file to be a symbolic pointer to another ref file by starting with the four-byte header sequence of \"ref:\".</p>   <p>More importantly, it allows the update of a ref file to follow these symbolic pointers, whether they are symlinks or these \"regular file symbolic refs\". It follows <strong>real</strong> symlinks only if they start with \"refs/\": otherwise it will just try to read them and update them as a regular file (i.e. it will allow the filesystem to follow them, but will overwrite such a symlink to somewhere else with a regular filename).</p>   <p>If --no-deref is given, &lt;ref&gt; itself is overwritten, rather than the result of following the symbolic pointers.</p>   <p>In general, using</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>git update-ref HEAD \"$head\"</pre> </div> </div>  <p>should be a <code>lot</code> safer than doing</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>echo \"$head\" &gt; \"$GIT_DIR/HEAD\"</pre> </div> </div>  <p>both from a symlink following standpoint <strong>and</strong> an error checking standpoint. The \"refs/\" rule for symlinks means that symlinks that point to \"outside\" the tree are safe: they’ll be followed for reading but not for writing (so we’ll never write through a ref symlink to some other tree, if you have copied a whole archive by creating a symlink tree).</p>   <p>With <code>-d</code> flag, it deletes the named &lt;ref&gt; after verifying it still contains &lt;oldvalue&gt;.</p>   <p>With <code>--stdin</code>, update-ref reads instructions from standard input and performs all modifications together. Specify commands of the form:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>update SP &lt;ref&gt; SP &lt;newvalue&gt; [SP &lt;oldvalue&gt;] LF\ncreate SP &lt;ref&gt; SP &lt;newvalue&gt; LF\ndelete SP &lt;ref&gt; [SP &lt;oldvalue&gt;] LF\nverify SP &lt;ref&gt; [SP &lt;oldvalue&gt;] LF\noption SP &lt;opt&gt; LF</pre> </div> </div>  <p>With <code>--create-reflog</code>, update-ref will create a reflog for each ref even if one would not ordinarily be created.</p>   <p>Quote fields containing whitespace as if they were strings in C source code; i.e., surrounded by double-quotes and with backslash escapes. Use 40 \"0\" characters or the empty string to specify a zero value. To specify a missing value, omit the value and its preceding SP entirely.</p>   <p>Alternatively, use <code>-z</code> to specify in NUL-terminated format, without quoting:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>update SP &lt;ref&gt; NUL &lt;newvalue&gt; NUL [&lt;oldvalue&gt;] NUL\ncreate SP &lt;ref&gt; NUL &lt;newvalue&gt; NUL\ndelete SP &lt;ref&gt; NUL [&lt;oldvalue&gt;] NUL\nverify SP &lt;ref&gt; NUL [&lt;oldvalue&gt;] NUL\noption SP &lt;opt&gt; NUL</pre> </div> </div>  <p>In this format, use 40 \"0\" to specify a zero value, and use the empty string to specify a missing value.</p>   <p>In either format, values can be specified in any form that Git recognizes as an object name. Commands in any other format or a repeated &lt;ref&gt; produce an error. Command meanings are:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">update</dt> <dd> <p>Set &lt;ref&gt; to &lt;newvalue&gt; after verifying &lt;oldvalue&gt;, if given. Specify a zero &lt;newvalue&gt; to ensure the ref does not exist after the update and/or a zero &lt;oldvalue&gt; to make sure the ref does not exist before the update.</p> </dd> <dt class=\"hdlist1\">create</dt> <dd> <p>Create &lt;ref&gt; with &lt;newvalue&gt; after verifying it does not exist. The given &lt;newvalue&gt; may not be zero.</p> </dd> <dt class=\"hdlist1\">delete</dt> <dd> <p>Delete &lt;ref&gt; after verifying it exists with &lt;oldvalue&gt;, if given. If given, &lt;oldvalue&gt; may not be zero.</p> </dd> <dt class=\"hdlist1\">verify</dt> <dd> <p>Verify &lt;ref&gt; against &lt;oldvalue&gt; but do not change it. If &lt;oldvalue&gt; zero or missing, the ref must not exist.</p> </dd> <dt class=\"hdlist1\">option</dt> <dd> <p>Modify behavior of the next command naming a &lt;ref&gt;. The only valid option is <code>no-deref</code> to avoid dereferencing a symbolic ref.</p> </dd> </dl> </div>  <p>If all &lt;ref&gt;s can be locked with matching &lt;oldvalue&gt;s simultaneously, all modifications are performed. Otherwise, no modifications are performed. Note that while each individual &lt;ref&gt; is updated or deleted atomically, a concurrent reader may still see a subset of the modifications.</p> </div>   <h2 id=\"_logging_updates\">Logging updates</h2> <div class=\"sectionbody\"> <p>If config parameter \"core.logAllRefUpdates\" is true and the ref is one under \"refs/heads/\", \"refs/remotes/\", \"refs/notes/\", or the symbolic ref HEAD; or the file \"$GIT_DIR/logs/&lt;ref&gt;\" exists then <code>git update-ref</code> will append a line to the log file \"$GIT_DIR/logs/&lt;ref&gt;\" (dereferencing all symbolic refs before creating the log name) describing the change in ref value. Log lines are formatted as:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>oldsha1 SP newsha1 SP committer LF</p>  <p>Where \"oldsha1\" is the 40 character hexadecimal value previously stored in &lt;ref&gt;, \"newsha1\" is the 40 character hexadecimal value of &lt;newvalue&gt; and \"committer\" is the committer’s name, email address and date in the standard Git committer ident format.</p>  </li> </ol> </div>  <p>Optionally with -m:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>oldsha1 SP newsha1 SP committer TAB message LF</p>  <p>Where all fields are as described above and \"message\" is the value supplied to the -m option.</p>  </li> </ol> </div>  <p>An update will fail (without changing &lt;ref&gt;) if the current user is unable to create a new log file, append to the existing log file or does not have committer information available.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-update-ref\" class=\"_attribution-link\">https://git-scm.com/docs/git-update-ref</a>\n  </p>\n</div>\n","git-symbolic-ref":"<h1>git-symbolic-ref</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-symbolic-ref - Read, modify and delete symbolic refs</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git symbolic-ref [-m &lt;reason&gt;] &lt;name&gt; &lt;ref&gt;\ngit symbolic-ref [-q] [--short] &lt;name&gt;\ngit symbolic-ref --delete [-q] &lt;name&gt;</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Given one argument, reads which branch head the given symbolic ref refers to and outputs its path, relative to the <code>.git/</code> directory. Typically you would give <code>HEAD</code> as the &lt;name&gt; argument to see which branch your working tree is on.</p>   <p>Given two arguments, creates or updates a symbolic ref &lt;name&gt; to point at the given branch &lt;ref&gt;.</p>   <p>Given <code>--delete</code> and an additional argument, deletes the given symbolic ref.</p>   <p>A symbolic ref is a regular file that stores a string that begins with <code>ref: refs/</code>. For example, your <code>.git/HEAD</code> is a regular file whose contents is <code>ref: refs/heads/master</code>.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-d</dt> <dt class=\"hdlist1\">--delete</dt> <dd> <p>Delete the symbolic ref &lt;name&gt;.</p> </dd> <dt class=\"hdlist1\">-q</dt> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>Do not issue an error message if the &lt;name&gt; is not a symbolic ref but a detached HEAD; instead exit with non-zero status silently.</p> </dd> <dt class=\"hdlist1\">--short</dt> <dd> <p>When showing the value of &lt;name&gt; as a symbolic ref, try to shorten the value, e.g. from <code>refs/heads/master</code> to <code>master</code>.</p> </dd> <dt class=\"hdlist1\">-m</dt> <dd> <p>Update the reflog for &lt;name&gt; with &lt;reason&gt;. This is valid only when creating or updating a symbolic ref.</p> </dd> </dl> </div></div>   <h2 id=\"_notes\">Notes</h2> <div class=\"sectionbody\"> <p>In the past, <code>.git/HEAD</code> was a symbolic link pointing at <code>refs/heads/master</code>. When we wanted to switch to another branch, we did <code>ln -sf refs/heads/newbranch .git/HEAD</code>, and when we wanted to find out which branch we are on, we did <code>readlink .git/HEAD</code>. But symbolic links are not entirely portable, so they are now deprecated and symbolic refs (as described above) are used by default.</p>   <p><code>git symbolic-ref</code> will exit with status 0 if the contents of the symbolic ref were printed correctly, with status 1 if the requested name is not a symbolic ref, or 128 if another error occurs.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-symbolic-ref\" class=\"_attribution-link\">https://git-scm.com/docs/git-symbolic-ref</a>\n  </p>\n</div>\n","git-verify-pack":"<h1>git-verify-pack</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-verify-pack - Validate packed Git archive files</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git verify-pack [-v|--verbose] [-s|--stat-only] [--] &lt;pack&gt;.idx …​</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Reads given idx file for packed Git archive created with the <code>git pack-objects</code> command and verifies idx file and the corresponding pack file.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">&lt;pack&gt;.idx …​</dt> <dd> <p>The idx files to verify.</p> </dd> <dt class=\"hdlist1\">-v</dt> <dt class=\"hdlist1\">--verbose</dt> <dd> <p>After verifying the pack, show list of objects contained in the pack and a histogram of delta chain length.</p> </dd> <dt class=\"hdlist1\">-s</dt> <dt class=\"hdlist1\">--stat-only</dt> <dd> <p>Do not verify the pack contents; only show the histogram of delta chain length. With <code>--verbose</code>, list of objects is also shown.</p> </dd> <dt class=\"hdlist1\">--</dt> <dd> <p>Do not interpret any more arguments as options.</p> </dd> </dl> </div></div>   <h2 id=\"_output_format\">Output format</h2> <div class=\"sectionbody\"> <p>When specifying the -v option the format used is:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>SHA-1 type size size-in-packfile offset-in-packfile</pre> </div> </div>  <p>for objects that are not deltified in the pack, and</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>SHA-1 type size size-in-packfile offset-in-packfile depth base-SHA-1</pre> </div> </div>  <p>for objects that are deltified.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-verify-pack\" class=\"_attribution-link\">https://git-scm.com/docs/git-verify-pack</a>\n  </p>\n</div>\n","git-write-tree":"<h1>git-write-tree</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-write-tree - Create a tree object from the current index</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git write-tree [--missing-ok] [--prefix=&lt;prefix&gt;/]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Creates a tree object using the current index. The name of the new tree object is printed to standard output.</p>   <p>The index must be in a fully merged state.</p>   <p>Conceptually, <code>git write-tree</code> sync()s the current index contents into a set of tree files. In order to have that match what is actually in your directory right now, you need to have done a <code>git update-index</code> phase before you did the <code>git write-tree</code>.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--missing-ok</dt> <dd> <p>Normally <code>git write-tree</code> ensures that the objects referenced by the directory exist in the object database. This option disables this check.</p> </dd> <dt class=\"hdlist1\">--prefix=&lt;prefix&gt;/</dt> <dd> <p>Writes a tree object that represents a subdirectory <code>&lt;prefix&gt;</code>. This can be used to write the tree object for a subproject that is in the named subdirectory.</p> </dd> </dl> </div></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-write-tree\" class=\"_attribution-link\">https://git-scm.com/docs/git-write-tree</a>\n  </p>\n</div>\n","git-update-index":"<h1>git-update-index</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-update-index - Register file contents in the working tree to the index</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git update-index\n             [--add] [--remove | --force-remove] [--replace]\n             [--refresh] [-q] [--unmerged] [--ignore-missing]\n             [(--cacheinfo &lt;mode&gt;,&lt;object&gt;,&lt;file&gt;)…​]\n             [--chmod=(+|-)x]\n             [--[no-]assume-unchanged]\n             [--[no-]skip-worktree]\n             [--ignore-submodules]\n             [--[no-]split-index]\n             [--[no-|test-|force-]untracked-cache]\n             [--really-refresh] [--unresolve] [--again | -g]\n             [--info-only] [--index-info]\n             [-z] [--stdin] [--index-version &lt;n&gt;]\n             [--verbose]\n             [--] [&lt;file&gt;…​]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Modifies the index or directory cache. Each file mentioned is updated into the index and any <code>unmerged</code> or <code>needs updating</code> state is cleared.</p>   <p>See also <a href=\"git-add\">git-add[1]</a> for a more user-friendly way to do some of the most common operations on the index.</p>   <p>The way <code>git update-index</code> handles files it is told about can be modified using the various options:</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--add</dt> <dd> <p>If a specified file isn’t in the index already then it’s added. Default behaviour is to ignore new files.</p> </dd> <dt class=\"hdlist1\">--remove</dt> <dd> <p>If a specified file is in the index but is missing then it’s removed. Default behavior is to ignore removed file.</p> </dd> <dt class=\"hdlist1\">--refresh</dt> <dd> <p>Looks at the current index and checks to see if merges or updates are needed by checking stat() information.</p> </dd> <dt class=\"hdlist1\">-q</dt> <dd> <p> Quiet. If --refresh finds that the index needs an update, the default behavior is to error out. This option makes <code>git update-index</code> continue anyway.</p> </dd> <dt class=\"hdlist1\">--ignore-submodules</dt> <dd> <p>Do not try to update submodules. This option is only respected when passed before --refresh.</p> </dd> <dt class=\"hdlist1\">--unmerged</dt> <dd> <p> If --refresh finds unmerged changes in the index, the default behavior is to error out. This option makes <code>git update-index</code> continue anyway.</p> </dd> <dt class=\"hdlist1\">--ignore-missing</dt> <dd> <p>Ignores missing files during a --refresh</p> </dd> <dt class=\"hdlist1\">--cacheinfo &lt;mode&gt;,&lt;object&gt;,&lt;path&gt;</dt> <dt class=\"hdlist1\">--cacheinfo &lt;mode&gt; &lt;object&gt; &lt;path&gt;</dt> <dd> <p>Directly insert the specified info into the index. For backward compatibility, you can also give these three arguments as three separate parameters, but new users are encouraged to use a single-parameter form.</p> </dd> <dt class=\"hdlist1\">--index-info</dt> <dd> <p>Read index information from stdin.</p> </dd> <dt class=\"hdlist1\">--chmod=(+|-)x</dt> <dd> <p>Set the execute permissions on the updated files.</p> </dd> <dt class=\"hdlist1\">--[no-]assume-unchanged</dt> <dd> <p>When this flag is specified, the object names recorded for the paths are not updated. Instead, this option sets/unsets the \"assume unchanged\" bit for the paths. When the \"assume unchanged\" bit is on, the user promises not to change the file and allows Git to assume that the working tree file matches what is recorded in the index. If you want to change the working tree file, you need to unset the bit to tell Git. This is sometimes helpful when working with a big project on a filesystem that has very slow lstat(2) system call (e.g. cifs).</p>  <p>Git will fail (gracefully) in case it needs to modify this file in the index e.g. when merging in a commit; thus, in case the assumed-untracked file is changed upstream, you will need to handle the situation manually.</p>  </dd> <dt class=\"hdlist1\">--really-refresh</dt> <dd> <p>Like <code>--refresh</code>, but checks stat information unconditionally, without regard to the \"assume unchanged\" setting.</p> </dd> <dt class=\"hdlist1\">--[no-]skip-worktree</dt> <dd> <p>When one of these flags is specified, the object name recorded for the paths are not updated. Instead, these options set and unset the \"skip-worktree\" bit for the paths. See section \"Skip-worktree bit\" below for more information.</p> </dd> <dt class=\"hdlist1\">-g</dt> <dt class=\"hdlist1\">--again</dt> <dd> <p>Runs <code>git update-index</code> itself on the paths whose index entries are different from those from the <code>HEAD</code> commit.</p> </dd> <dt class=\"hdlist1\">--unresolve</dt> <dd> <p>Restores the <code>unmerged</code> or <code>needs updating</code> state of a file during a merge if it was cleared by accident.</p> </dd> <dt class=\"hdlist1\">--info-only</dt> <dd> <p>Do not create objects in the object database for all &lt;file&gt; arguments that follow this flag; just insert their object IDs into the index.</p> </dd> <dt class=\"hdlist1\">--force-remove</dt> <dd> <p>Remove the file from the index even when the working directory still has such a file. (Implies --remove.)</p> </dd> <dt class=\"hdlist1\">--replace</dt> <dd> <p>By default, when a file <code>path</code> exists in the index, <code>git update-index</code> refuses an attempt to add <code>path/file</code>. Similarly if a file <code>path/file</code> exists, a file <code>path</code> cannot be added. With --replace flag, existing entries that conflict with the entry being added are automatically removed with warning messages.</p> </dd> <dt class=\"hdlist1\">--stdin</dt> <dd> <p>Instead of taking list of paths from the command line, read list of paths from the standard input. Paths are separated by LF (i.e. one path per line) by default.</p> </dd> <dt class=\"hdlist1\">--verbose</dt> <dd> <p>Report what is being added and removed from index.</p> </dd> <dt class=\"hdlist1\">--index-version &lt;n&gt;</dt> <dd> <p>Write the resulting index out in the named on-disk format version. Supported versions are 2, 3 and 4. The current default version is 2 or 3, depending on whether extra features are used, such as <code>git add -N</code>.</p>  <p>Version 4 performs a simple pathname compression that reduces index size by 30%-50% on large repositories, which results in faster load time. Version 4 is relatively young (first released in in 1.8.0 in October 2012). Other Git implementations such as JGit and libgit2 may not support it yet.</p>  </dd> <dt class=\"hdlist1\">-z</dt> <dd> <p>Only meaningful with <code>--stdin</code> or <code>--index-info</code>; paths are separated with NUL character instead of LF.</p> </dd> <dt class=\"hdlist1\">--split-index</dt> <dt class=\"hdlist1\">--no-split-index</dt> <dd> <p>Enable or disable split index mode. If enabled, the index is split into two files, $GIT_DIR/index and $GIT_DIR/sharedindex.&lt;SHA-1&gt;. Changes are accumulated in $GIT_DIR/index while the shared index file contains all index entries stays unchanged. If split-index mode is already enabled and <code>--split-index</code> is given again, all changes in $GIT_DIR/index are pushed back to the shared index file. This mode is designed for very large indexes that take a significant amount of time to read or write.</p> </dd> <dt class=\"hdlist1\">--untracked-cache</dt> <dt class=\"hdlist1\">--no-untracked-cache</dt> <dd> <p>Enable or disable untracked cache feature. Please use <code>--test-untracked-cache</code> before enabling it.</p>  <p>These options take effect whatever the value of the <code>core.untrackedCache</code> configuration variable (see <a href=\"git-config\">git-config[1]</a>). But a warning is emitted when the change goes against the configured value, as the configured value will take effect next time the index is read and this will remove the intended effect of the option.</p>  </dd> <dt class=\"hdlist1\">--test-untracked-cache</dt> <dd> <p>Only perform tests on the working directory to make sure untracked cache can be used. You have to manually enable untracked cache using <code>--untracked-cache</code> or <code>--force-untracked-cache</code> or the <code>core.untrackedCache</code> configuration variable afterwards if you really want to use it. If a test fails the exit code is 1 and a message explains what is not working as needed, otherwise the exit code is 0 and OK is printed.</p> </dd> <dt class=\"hdlist1\">--force-untracked-cache</dt> <dd> <p>Same as <code>--untracked-cache</code>. Provided for backwards compatibility with older versions of Git where <code>--untracked-cache</code> used to imply <code>--test-untracked-cache</code> but this option would enable the extension unconditionally.</p> </dd> <dt class=\"hdlist1\">--</dt> <dd> <p>Do not interpret any more arguments as options.</p> </dd> <dt class=\"hdlist1\">&lt;file&gt;</dt> <dd> <p>Files to act on. Note that files beginning with <code>.</code> are discarded. This includes <code>./file</code> and <code>dir/./file</code>. If you don’t want this, then use cleaner names. The same applies to directories ending <code>/</code> and paths with <code>//</code></p> </dd> </dl> </div></div>   <h2 id=\"_using_refresh\">Using --refresh</h2> <div class=\"sectionbody\"> <p><code>--refresh</code> does not calculate a new sha1 file or bring the index up-to-date for mode/content changes. But what it <strong>does</strong> do is to \"re-match\" the stat information of a file with the index, so that you can refresh the index for a file that hasn’t been changed but where the stat entry is out of date.</p>   <p>For example, you’d want to do this after doing a <code>git read-tree</code>, to link up the stat index details with the proper files.</p> </div>   <h2 id=\"_using_cacheinfo_or_info_only\">Using --cacheinfo or --info-only</h2> <div class=\"sectionbody\"> <p><code>--cacheinfo</code> is used to register a file that is not in the current working directory. This is useful for minimum-checkout merging.</p>   <p>To pretend you have a file with mode and sha1 at path, say:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git update-index --cacheinfo &lt;mode&gt;,&lt;sha1&gt;,&lt;path&gt;</pre> </div> </div>  <p><code>--info-only</code> is used to register files without placing them in the object database. This is useful for status-only repositories.</p>   <p>Both <code>--cacheinfo</code> and <code>--info-only</code> behave similarly: the index is updated but the object database isn’t. <code>--cacheinfo</code> is useful when the object is in the database but the file isn’t available locally. <code>--info-only</code> is useful when the file is available, but you do not wish to update the object database.</p> </div>   <h2 id=\"_using_index_info\">Using --index-info</h2> <div class=\"sectionbody\"> <p><code>--index-info</code> is a more powerful mechanism that lets you feed multiple entry definitions from the standard input, and designed specifically for scripts. It can take inputs of three formats:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>mode SP sha1 TAB path</p>  <p>The first format is what \"git-apply --index-info\" reports, and used to reconstruct a partial tree that is used for phony merge base tree when falling back on 3-way merge.</p>  </li> <li> <p>mode SP type SP sha1 TAB path</p>  <p>The second format is to stuff <code>git ls-tree</code> output into the index file.</p>  </li> <li> <p>mode SP sha1 SP stage TAB path</p>  <p>This format is to put higher order stages into the index file and matches <code>git ls-files --stage</code> output.</p>  </li> </ol> </div>  <p>To place a higher stage entry to the index, the path should first be removed by feeding a mode=0 entry for the path, and then feeding necessary input lines in the third format.</p>   <p>For example, starting with this index:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git ls-files -s\n100644 8a1218a1024a212bb3db30becd860315f9f3ac52 0       frotz</pre> </div> </div>  <p>you can feed the following input to <code>--index-info</code>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git update-index --index-info\n0 0000000000000000000000000000000000000000        frotz\n100644 8a1218a1024a212bb3db30becd860315f9f3ac52 1        frotz\n100755 8a1218a1024a212bb3db30becd860315f9f3ac52 2        frotz</pre> </div> </div>  <p>The first line of the input feeds 0 as the mode to remove the path; the SHA-1 does not matter as long as it is well formatted. Then the second and third line feeds stage 1 and stage 2 entries for that path. After the above, we would end up with this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git ls-files -s\n100644 8a1218a1024a212bb3db30becd860315f9f3ac52 1        frotz\n100755 8a1218a1024a212bb3db30becd860315f9f3ac52 2        frotz</pre> </div> </div>\n</div>   <h2 id=\"_using_assume_unchanged_bit\">Using “assume unchanged” bit</h2> <div class=\"sectionbody\"> <p>Many operations in Git depend on your filesystem to have an efficient <code>lstat(2)</code> implementation, so that <code>st_mtime</code> information for working tree files can be cheaply checked to see if the file contents have changed from the version recorded in the index file. Unfortunately, some filesystems have inefficient <code>lstat(2)</code>. If your filesystem is one of them, you can set \"assume unchanged\" bit to paths you have not changed to cause Git not to do this check. Note that setting this bit on a path does not mean Git will check the contents of the file to see if it has changed — it makes Git to omit any checking and assume it has <strong>not</strong> changed. When you make changes to working tree files, you have to explicitly tell Git about it by dropping \"assume unchanged\" bit, either before or after you modify them.</p>   <p>In order to set \"assume unchanged\" bit, use <code>--assume-unchanged</code> option. To unset, use <code>--no-assume-unchanged</code>. To see which files have the \"assume unchanged\" bit set, use <code>git ls-files -v</code> (see <a href=\"git-ls-files\">git-ls-files[1]</a>).</p>   <p>The command looks at <code>core.ignorestat</code> configuration variable. When this is true, paths updated with <code>git update-index paths...</code> and paths updated with other Git commands that update both index and working tree (e.g. <code>git apply --index</code>, <code>git checkout-index -u</code>, and <code>git read-tree -u</code>) are automatically marked as \"assume unchanged\". Note that \"assume unchanged\" bit is <strong>not</strong> set if <code>git update-index --refresh</code> finds the working tree file matches the index (use <code>git update-index --really-refresh</code> if you want to mark them as \"assume unchanged\").</p> </div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"> <p>To update and refresh only the files already checked out:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout-index -n -f -a &amp;&amp; git update-index --ignore-missing --refresh</pre> </div> </div> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">On an inefficient filesystem with <code>core.ignorestat</code> set</dt> <dd> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git update-index --really-refresh              (1)\n$ git update-index --no-assume-unchanged foo.c   (2)\n$ git diff --name-only                           (3)\n$ edit foo.c\n$ git diff --name-only                           (4)\nM foo.c\n$ git update-index foo.c                         (5)\n$ git diff --name-only                           (6)\n$ edit foo.c\n$ git diff --name-only                           (7)\n$ git update-index --no-assume-unchanged foo.c   (8)\n$ git diff --name-only                           (9)\nM foo.c</pre> </div> </div> <div class=\"colist arabic\"> <ol> <li> <p>forces lstat(2) to set \"assume unchanged\" bits for paths that match index.</p> </li> <li> <p>mark the path to be edited.</p> </li> <li> <p>this does lstat(2) and finds index matches the path.</p> </li> <li> <p>this does lstat(2) and finds index does <strong>not</strong> match the path.</p> </li> <li> <p>registering the new version to index sets \"assume unchanged\" bit.</p> </li> <li> <p>and it is assumed unchanged.</p> </li> <li> <p>even after you edit it.</p> </li> <li> <p>you can tell about the change after the fact.</p> </li> <li> <p>now it checks with lstat(2) and finds it has been changed.</p> </li> </ol> </div> </dd> </dl> </div>\n</div>   <h2 id=\"_skip_worktree_bit\">Skip-worktree bit</h2> <div class=\"sectionbody\"> <p>Skip-worktree bit can be defined in one (long) sentence: When reading an entry, if it is marked as skip-worktree, then Git pretends its working directory version is up to date and read the index version instead.</p>   <p>To elaborate, \"reading\" means checking for file existence, reading file attributes or file content. The working directory version may be present or absent. If present, its content may match against the index version or not. Writing is not affected by this bit, content safety is still first priority. Note that Git <code>can</code> update working directory file, that is marked skip-worktree, if it is safe to do so (i.e. working directory version matches index version)</p>   <p>Although this bit looks similar to assume-unchanged bit, its goal is different from assume-unchanged bit’s. Skip-worktree also takes precedence over assume-unchanged bit when both are set.</p> </div>   <h2 id=\"_untracked_cache\">Untracked cache</h2> <div class=\"sectionbody\"> <p>This cache is meant to speed up commands that involve determining untracked files such as <code>git status</code>.</p>   <p>This feature works by recording the mtime of the working tree directories and then omitting reading directories and stat calls against files in those directories whose mtime hasn’t changed. For this to work the underlying operating system and file system must change the <code>st_mtime</code> field of directories if files in the directory are added, modified or deleted.</p>   <p>You can test whether the filesystem supports that with the <code>--test-untracked-cache</code> option. The <code>--untracked-cache</code> option used to implicitly perform that test in older versions of Git, but that’s no longer the case.</p>   <p>If you want to enable (or disable) this feature, it is easier to use the <code>core.untrackedCache</code> configuration variable (see <a href=\"git-config\">git-config[1]</a>) than using the <code>--untracked-cache</code> option to <code>git update-index</code> in each repository, especially if you want to do so across all repositories you use, because you can set the configuration variable to <code>true</code> (or <code>false</code>) in your <code>$HOME/.gitconfig</code> just once and have it affect all repositories you touch.</p>   <p>When the <code>core.untrackedCache</code> configuration variable is changed, the untracked cache is added to or removed from the index the next time a command reads the index; while when <code>--[no-|force-]untracked-cache</code> are used, the untracked cache is immediately added to or removed from the index.</p> </div>   <h2 id=\"_configuration\">Configuration</h2> <div class=\"sectionbody\"> <p>The command honors <code>core.filemode</code> configuration variable. If your repository is on a filesystem whose executable bits are unreliable, this should be set to <code>false</code> (see <a href=\"git-config\">git-config[1]</a>). This causes the command to ignore differences in file modes recorded in the index and the file mode on the filesystem if they differ only on executable bit. On such an unfortunate filesystem, you may need to use <code>git update-index --chmod=</code>.</p>   <p>Quite similarly, if <code>core.symlinks</code> configuration variable is set to <code>false</code> (see <a href=\"git-config\">git-config[1]</a>), symbolic links are checked out as plain files, and this command does not modify a recorded file mode from symbolic link to regular file.</p>   <p>The command looks at <code>core.ignorestat</code> configuration variable. See <code>Using \"assume unchanged\" bit</code> section above.</p>   <p>The command also looks at <code>core.trustctime</code> configuration variable. It can be useful when the inode change time is regularly modified by something outside Git (file system crawlers and backup systems use ctime for marking files processed) (see <a href=\"git-config\">git-config[1]</a>).</p>   <p>The untracked cache extension can be enabled by the <code>core.untrackedCache</code> configuration variable (see <a href=\"git-config\">git-config[1]</a>).</p> </div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-config\">git-config[1]</a>, <a href=\"git-add\">git-add[1]</a>, <a href=\"git-ls-files\">git-ls-files[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-update-index\" class=\"_attribution-link\">https://git-scm.com/docs/git-update-index</a>\n  </p>\n</div>\n","gittutorial":"<h1>gittutorial</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>gittutorial - A tutorial introduction to Git</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git *</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>This tutorial explains how to import a new project into Git, make changes to it, and share changes with other developers.</p>   <p>If you are instead primarily interested in using Git to fetch a project, for example, to test the latest version, you may prefer to start with the first two chapters of <a href=\"user-manual\">The Git User’s Manual</a>.</p>   <p>First, note that you can get documentation for a command such as <code>git log --graph</code> with:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ man git-log</pre> </div> </div>  <p>or:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git help log</pre> </div> </div>  <p>With the latter, you can use the manual viewer of your choice; see <a href=\"git-help\">git-help[1]</a> for more information.</p>   <p>It is a good idea to introduce yourself to Git with your name and public email address before doing any operation. The easiest way to do so is:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git config --global user.name \"Your Name Comes Here\"\n$ git config --global user.email you@yourdomain.example.com</pre> </div> </div>\n</div>   <h2 id=\"_importing_a_new_project\">Importing a new project</h2> <div class=\"sectionbody\"> <p>Assume you have a tarball project.tar.gz with your initial work. You can place it under Git revision control as follows.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ tar xzf project.tar.gz\n$ cd project\n$ git init</pre> </div> </div>  <p>Git will reply</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>Initialized empty Git repository in .git/</pre> </div> </div>  <p>You’ve now initialized the working directory—​you may notice a new directory created, named \".git\".</p>   <p>Next, tell Git to take a snapshot of the contents of all files under the current directory (note the <code>.</code>), with <code>git add</code>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git add .</pre> </div> </div>  <p>This snapshot is now stored in a temporary staging area which Git calls the \"index\". You can permanently store the contents of the index in the repository with <code>git commit</code>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git commit</pre> </div> </div>  <p>This will prompt you for a commit message. You’ve now stored the first version of your project in Git.</p> </div>   <h2 id=\"_making_changes\">Making changes</h2> <div class=\"sectionbody\"> <p>Modify some files, then add their updated contents to the index:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git add file1 file2 file3</pre> </div> </div>  <p>You are now ready to commit. You can see what is about to be committed using <code>git diff</code> with the --cached option:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git diff --cached</pre> </div> </div>  <p>(Without --cached, <code>git diff</code> will show you any changes that you’ve made but not yet added to the index.) You can also get a brief summary of the situation with <code>git status</code>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git status\nOn branch master\nChanges to be committed:\nYour branch is up-to-date with 'origin/master'.\n  (use \"git reset HEAD &lt;file&gt;...\" to unstage)\n\n        modified:   file1\n        modified:   file2\n        modified:   file3</pre> </div> </div>  <p>If you need to make any further adjustments, do so now, and then add any newly modified content to the index. Finally, commit your changes with:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git commit</pre> </div> </div>  <p>This will again prompt you for a message describing the change, and then record a new version of the project.</p>   <p>Alternatively, instead of running <code>git add</code> beforehand, you can use</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git commit -a</pre> </div> </div>  <p>which will automatically notice any modified (but not new) files, add them to the index, and commit, all in one step.</p>   <p>A note on commit messages: Though not required, it’s a good idea to begin the commit message with a single short (less than 50 character) line summarizing the change, followed by a blank line and then a more thorough description. The text up to the first blank line in a commit message is treated as the commit title, and that title is used throughout Git. For example, <a href=\"git-format-patch\">git-format-patch[1]</a> turns a commit into email, and it uses the title on the Subject line and the rest of the commit in the body.</p> </div>   <h2 id=\"_git_tracks_content_not_files\">Git tracks content not files</h2> <div class=\"sectionbody\"> <p>Many revision control systems provide an <code>add</code> command that tells the system to start tracking changes to a new file. Git’s <code>add</code> command does something simpler and more powerful: <code>git add</code> is used both for new and newly modified files, and in both cases it takes a snapshot of the given files and stages that content in the index, ready for inclusion in the next commit.</p> </div>   <h2 id=\"_viewing_project_history\">Viewing project history</h2> <div class=\"sectionbody\"> <p>At any point you can view the history of your changes using</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log</pre> </div> </div>  <p>If you also want to see complete diffs at each step, use</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log -p</pre> </div> </div>  <p>Often the overview of the change is useful to get a feel of each step</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log --stat --summary</pre> </div> </div>\n</div>   <h2 id=\"_managing_branches\">Managing branches</h2> <div class=\"sectionbody\"> <p>A single Git repository can maintain multiple branches of development. To create a new branch named \"experimental\", use</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git branch experimental</pre> </div> </div>  <p>If you now run</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git branch</pre> </div> </div>  <p>you’ll get a list of all existing branches:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>  experimental\n* master</pre> </div> </div>  <p>The \"experimental\" branch is the one you just created, and the \"master\" branch is a default branch that was created for you automatically. The asterisk marks the branch you are currently on; type</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout experimental</pre> </div> </div>  <p>to switch to the experimental branch. Now edit a file, commit the change, and switch back to the master branch:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>(edit file)\n$ git commit -a\n$ git checkout master</pre> </div> </div>  <p>Check that the change you made is no longer visible, since it was made on the experimental branch and you’re back on the master branch.</p>   <p>You can make a different change on the master branch:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>(edit file)\n$ git commit -a</pre> </div> </div>  <p>at this point the two branches have diverged, with different changes made in each. To merge the changes made in experimental into master, run</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git merge experimental</pre> </div> </div>  <p>If the changes don’t conflict, you’re done. If there are conflicts, markers will be left in the problematic files showing the conflict;</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git diff</pre> </div> </div>  <p>will show this. Once you’ve edited the files to resolve the conflicts,</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git commit -a</pre> </div> </div>  <p>will commit the result of the merge. Finally,</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ gitk</pre> </div> </div>  <p>will show a nice graphical representation of the resulting history.</p>   <p>At this point you could delete the experimental branch with</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git branch -d experimental</pre> </div> </div>  <p>This command ensures that the changes in the experimental branch are already in the current branch.</p>   <p>If you develop on a branch crazy-idea, then regret it, you can always delete the branch with</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git branch -D crazy-idea</pre> </div> </div>  <p>Branches are cheap and easy, so this is a good way to try something out.</p> </div>   <h2 id=\"_using_git_for_collaboration\">Using git for collaboration</h2> <div class=\"sectionbody\"> <p>Suppose that Alice has started a new project with a Git repository in /home/alice/project, and that Bob, who has a home directory on the same machine, wants to contribute.</p>   <p>Bob begins with:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>bob$ git clone /home/alice/project myrepo</pre> </div> </div>  <p>This creates a new directory \"myrepo\" containing a clone of Alice’s repository. The clone is on an equal footing with the original project, possessing its own copy of the original project’s history.</p>   <p>Bob then makes some changes and commits them:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>(edit files)\nbob$ git commit -a\n(repeat as necessary)</pre> </div> </div>  <p>When he’s ready, he tells Alice to pull changes from the repository at /home/bob/myrepo. She does this with:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>alice$ cd /home/alice/project\nalice$ git pull /home/bob/myrepo master</pre> </div> </div>  <p>This merges the changes from Bob’s \"master\" branch into Alice’s current branch. If Alice has made her own changes in the meantime, then she may need to manually fix any conflicts.</p>   <p>The \"pull\" command thus performs two operations: it fetches changes from a remote branch, then merges them into the current branch.</p>   <p>Note that in general, Alice would want her local changes committed before initiating this \"pull\". If Bob’s work conflicts with what Alice did since their histories forked, Alice will use her working tree and the index to resolve conflicts, and existing local changes will interfere with the conflict resolution process (Git will still perform the fetch but will refuse to merge --- Alice will have to get rid of her local changes in some way and pull again when this happens).</p>   <p>Alice can peek at what Bob did without merging first, using the \"fetch\" command; this allows Alice to inspect what Bob did, using a special symbol \"FETCH_HEAD\", in order to determine if he has anything worth pulling, like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>alice$ git fetch /home/bob/myrepo master\nalice$ git log -p HEAD..FETCH_HEAD</pre> </div> </div>  <p>This operation is safe even if Alice has uncommitted local changes. The range notation \"HEAD..FETCH_HEAD\" means \"show everything that is reachable from the FETCH_HEAD but exclude anything that is reachable from HEAD\". Alice already knows everything that leads to her current state (HEAD), and reviews what Bob has in his state (FETCH_HEAD) that she has not seen with this command.</p>   <p>If Alice wants to visualize what Bob did since their histories forked she can issue the following command:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ gitk HEAD..FETCH_HEAD</pre> </div> </div>  <p>This uses the same two-dot range notation we saw earlier with <code>git log</code>.</p>   <p>Alice may want to view what both of them did since they forked. She can use three-dot form instead of the two-dot form:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ gitk HEAD...FETCH_HEAD</pre> </div> </div>  <p>This means \"show everything that is reachable from either one, but exclude anything that is reachable from both of them\".</p>   <p>Please note that these range notation can be used with both gitk and \"git log\".</p>   <p>After inspecting what Bob did, if there is nothing urgent, Alice may decide to continue working without pulling from Bob. If Bob’s history does have something Alice would immediately need, Alice may choose to stash her work-in-progress first, do a \"pull\", and then finally unstash her work-in-progress on top of the resulting history.</p>   <p>When you are working in a small closely knit group, it is not unusual to interact with the same repository over and over again. By defining <code>remote</code> repository shorthand, you can make it easier:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>alice$ git remote add bob /home/bob/myrepo</pre> </div> </div>  <p>With this, Alice can perform the first part of the \"pull\" operation alone using the <code>git fetch</code> command without merging them with her own branch, using:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>alice$ git fetch bob</pre> </div> </div>  <p>Unlike the longhand form, when Alice fetches from Bob using a remote repository shorthand set up with <code>git remote</code>, what was fetched is stored in a remote-tracking branch, in this case <code>bob/master</code>. So after this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>alice$ git log -p master..bob/master</pre> </div> </div>  <p>shows a list of all the changes that Bob made since he branched from Alice’s master branch.</p>   <p>After examining those changes, Alice could merge the changes into her master branch:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>alice$ git merge bob/master</pre> </div> </div>  <p>This <code>merge</code> can also be done by <code>pulling from her own remote-tracking branch</code>, like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>alice$ git pull . remotes/bob/master</pre> </div> </div>  <p>Note that git pull always merges into the current branch, regardless of what else is given on the command line.</p>   <p>Later, Bob can update his repo with Alice’s latest changes using</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>bob$ git pull</pre> </div> </div>  <p>Note that he doesn’t need to give the path to Alice’s repository; when Bob cloned Alice’s repository, Git stored the location of her repository in the repository configuration, and that location is used for pulls:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>bob$ git config --get remote.origin.url\n/home/alice/project</pre> </div> </div>  <p>(The complete configuration created by <code>git clone</code> is visible using <code>git config -l</code>, and the <a href=\"git-config\">git-config[1]</a> man page explains the meaning of each option.)</p>   <p>Git also keeps a pristine copy of Alice’s master branch under the name \"origin/master\":</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>bob$ git branch -r\n  origin/master</pre> </div> </div>  <p>If Bob later decides to work from a different host, he can still perform clones and pulls using the ssh protocol:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>bob$ git clone alice.org:/home/alice/project myrepo</pre> </div> </div>  <p>Alternatively, Git has a native protocol, or can use http; see <a href=\"git-pull\">git-pull[1]</a> for details.</p>   <p>Git can also be used in a CVS-like mode, with a central repository that various users push changes to; see <a href=\"git-push\">git-push[1]</a> and <a href=\"gitcvs-migration\">gitcvs-migration[7]</a>.</p> </div>   <h2 id=\"_exploring_history\">Exploring history</h2> <div class=\"sectionbody\"> <p>Git history is represented as a series of interrelated commits. We have already seen that the <code>git log</code> command can list those commits. Note that first line of each git log entry also gives a name for the commit:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log\ncommit c82a22c39cbc32576f64f5c6b3f24b99ea8149c7\nAuthor: Junio C Hamano &lt;junkio@cox.net&gt;\nDate:   Tue May 16 17:18:22 2006 -0700\n\n    merge-base: Clarify the comments on post processing.</pre> </div> </div>  <p>We can give this name to <code>git show</code> to see the details about this commit.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show c82a22c39cbc32576f64f5c6b3f24b99ea8149c7</pre> </div> </div>  <p>But there are other ways to refer to commits. You can use any initial part of the name that is long enough to uniquely identify the commit:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show c82a22c39c        # the first few characters of the name are\n                        # usually enough\n$ git show HEAD                # the tip of the current branch\n$ git show experimental        # the tip of the \"experimental\" branch</pre> </div> </div>  <p>Every commit usually has one \"parent\" commit which points to the previous state of the project:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show HEAD^  # to see the parent of HEAD\n$ git show HEAD^^ # to see the grandparent of HEAD\n$ git show HEAD~4 # to see the great-great grandparent of HEAD</pre> </div> </div>  <p>Note that merge commits may have more than one parent:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show HEAD^1 # show the first parent of HEAD (same as HEAD^)\n$ git show HEAD^2 # show the second parent of HEAD</pre> </div> </div>  <p>You can also give commits names of your own; after running</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git tag v2.5 1b2e1d63ff</pre> </div> </div>  <p>you can refer to 1b2e1d63ff by the name \"v2.5\". If you intend to share this name with other people (for example, to identify a release version), you should create a \"tag\" object, and perhaps sign it; see <a href=\"git-tag\">git-tag[1]</a> for details.</p>   <p>Any Git command that needs to know a commit can take any of these names. For example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git diff v2.5 HEAD         # compare the current HEAD to v2.5\n$ git branch stable v2.5 # start a new branch named \"stable\" based\n                         # at v2.5\n$ git reset --hard HEAD^ # reset your current branch and working\n                         # directory to its state at HEAD^</pre> </div> </div>  <p>Be careful with that last command: in addition to losing any changes in the working directory, it will also remove all later commits from this branch. If this branch is the only branch containing those commits, they will be lost. Also, don’t use <code>git reset</code> on a publicly-visible branch that other developers pull from, as it will force needless merges on other developers to clean up the history. If you need to undo changes that you have pushed, use <code>git revert</code> instead.</p>   <p>The <code>git grep</code> command can search for strings in any version of your project, so</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git grep \"hello\" v2.5</pre> </div> </div>  <p>searches for all occurrences of \"hello\" in v2.5.</p>   <p>If you leave out the commit name, <code>git grep</code> will search any of the files it manages in your current directory. So</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git grep \"hello\"</pre> </div> </div>  <p>is a quick way to search just the files that are tracked by Git.</p>   <p>Many Git commands also take sets of commits, which can be specified in a number of ways. Here are some examples with <code>git log</code>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log v2.5..v2.6            # commits between v2.5 and v2.6\n$ git log v2.5..                # commits since v2.5\n$ git log --since=\"2 weeks ago\" # commits from the last 2 weeks\n$ git log v2.5.. Makefile       # commits since v2.5 which modify\n                                # Makefile</pre> </div> </div>  <p>You can also give <code>git log</code> a \"range\" of commits where the first is not necessarily an ancestor of the second; for example, if the tips of the branches \"stable\" and \"master\" diverged from a common commit some time ago, then</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log stable..master</pre> </div> </div>  <p>will list commits made in the master branch but not in the stable branch, while</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log master..stable</pre> </div> </div>  <p>will show the list of commits made on the stable branch but not the master branch.</p>   <p>The <code>git log</code> command has a weakness: it must present commits in a list. When the history has lines of development that diverged and then merged back together, the order in which <code>git log</code> presents those commits is meaningless.</p>   <p>Most projects with multiple contributors (such as the Linux kernel, or Git itself) have frequent merges, and <code>gitk</code> does a better job of visualizing their history. For example,</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ gitk --since=\"2 weeks ago\" drivers/</pre> </div> </div>  <p>allows you to browse any commits from the last 2 weeks of commits that modified files under the \"drivers\" directory. (Note: you can adjust gitk’s fonts by holding down the control key while pressing \"-\" or \"+\".)</p>   <p>Finally, most commands that take filenames will optionally allow you to precede any filename by a commit, to specify a particular version of the file:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git diff v2.5:Makefile HEAD:Makefile.in</pre> </div> </div>  <p>You can also use <code>git show</code> to see any such file:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show v2.5:Makefile</pre> </div> </div>\n</div>   <h2 id=\"_next_steps\">Next steps</h2> <div class=\"sectionbody\"> <p>This tutorial should be enough to perform basic distributed revision control for your projects. However, to fully understand the depth and power of Git you need to understand two simple ideas on which it is based:</p>  <div class=\"ulist\"> <ul> <li> <p>The object database is the rather elegant system used to store the history of your project—​files, directories, and commits.</p> </li> <li> <p>The index file is a cache of the state of a directory tree, used to create commits, check out working directories, and hold the various trees involved in a merge.</p> </li> </ul> </div>  <p>Part two of this tutorial explains the object database, the index file, and a few other odds and ends that you’ll need to make the most of Git. You can find it at <a href=\"gittutorial-2\">gittutorial-2[7]</a>.</p>   <p>If you don’t want to continue with that right away, a few other digressions that may be interesting at this point are:</p>  <div class=\"ulist\"> <ul> <li> <p><a href=\"git-format-patch\">git-format-patch[1]</a>, <a href=\"git-am\">git-am[1]</a>: These convert series of git commits into emailed patches, and vice versa, useful for projects such as the Linux kernel which rely heavily on emailed patches.</p> </li> <li> <p><a href=\"git-bisect\">git-bisect[1]</a>: When there is a regression in your project, one way to track down the bug is by searching through the history to find the exact commit that’s to blame. Git bisect can help you perform a binary search for that commit. It is smart enough to perform a close-to-optimal search even in the case of complex non-linear history with lots of merged branches.</p> </li> <li> <p><a href=\"gitworkflows\">gitworkflows[7]</a>: Gives an overview of recommended workflows.</p> </li> <li> <p><a href=\"giteveryday\">giteveryday[7]</a>: Everyday Git with 20 Commands Or So.</p> </li> <li> <p><a href=\"gitcvs-migration\">gitcvs-migration[7]</a>: Git for CVS users.</p> </li> </ul> </div>\n</div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"gittutorial-2\">gittutorial-2[7]</a>, <a href=\"gitcvs-migration\">gitcvs-migration[7]</a>, <a href=\"gitcore-tutorial\">gitcore-tutorial[7]</a>, <a href=\"gitglossary\">gitglossary[7]</a>, <a href=\"git-help\">git-help[1]</a>, <a href=\"gitworkflows\">gitworkflows[7]</a>, <a href=\"giteveryday\">giteveryday[7]</a>, <a href=\"user-manual\">The Git User’s Manual</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/gittutorial\" class=\"_attribution-link\">https://git-scm.com/docs/gittutorial</a>\n  </p>\n</div>\n","giteveryday":"<h1>giteveryday</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>giteveryday - A useful minimum set of commands for Everyday Git</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"> <p>Everyday Git With 20 Commands Or So</p> </div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Git users can broadly be grouped into four categories for the purposes of describing here a small set of useful command for everyday Git.</p>  <div class=\"ulist\"> <ul> <li> <p><a href=\"#STANDALONE\">Individual Developer (Standalone)</a> commands are essential for anybody who makes a commit, even for somebody who works alone.</p> </li> <li> <p>If you work with other people, you will need commands listed in the <a href=\"#PARTICIPANT\">Individual Developer (Participant)</a> section as well.</p> </li> <li> <p>People who play the <a href=\"#INTEGRATOR\">Integrator</a> role need to learn some more commands in addition to the above.</p> </li> <li> <p><a href=\"#ADMINISTRATION\">Repository Administration</a> commands are for system administrators who are responsible for the care and feeding of Git repositories.</p> </li> </ul> </div>\n</div>   <h2 id=\"_individual_developer_standalone_a_id_standalone_a\">Individual developer (standalone)</h2> <div class=\"sectionbody\"> <p>A standalone individual developer does not exchange patches with other people, and works alone in a single repository, using the following commands.</p>  <div class=\"ulist\"> <ul> <li> <p><a href=\"git-init\">git-init[1]</a> to create a new repository.</p> </li> <li> <p><a href=\"git-log\">git-log[1]</a> to see what happened.</p> </li> <li> <p><a href=\"git-checkout\">git-checkout[1]</a> and <a href=\"git-branch\">git-branch[1]</a> to switch branches.</p> </li> <li> <p><a href=\"git-add\">git-add[1]</a> to manage the index file.</p> </li> <li> <p><a href=\"git-diff\">git-diff[1]</a> and <a href=\"git-status\">git-status[1]</a> to see what you are in the middle of doing.</p> </li> <li> <p><a href=\"git-commit\">git-commit[1]</a> to advance the current branch.</p> </li> <li> <p><a href=\"git-reset\">git-reset[1]</a> and <a href=\"git-checkout\">git-checkout[1]</a> (with pathname parameters) to undo changes.</p> </li> <li> <p><a href=\"git-merge\">git-merge[1]</a> to merge between local branches.</p> </li> <li> <p><a href=\"git-rebase\">git-rebase[1]</a> to maintain topic branches.</p> </li> <li> <p><a href=\"git-tag\">git-tag[1]</a> to mark a known point.</p> </li> </ul> </div> <div class=\"sect2\"> <h3 id=\"_examples\">Examples</h3> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">Use a tarball as a starting point for a new repository.</dt> <dd> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ tar zxf frotz.tar.gz\n$ cd frotz\n$ git init\n$ git add . (1)\n$ git commit -m \"import of frotz source tree.\"\n$ git tag v2.43 (2)</pre> </div> </div> <div class=\"colist arabic\"> <ol> <li> <p>add everything under the current directory.</p> </li> <li> <p>make a lightweight, unannotated tag.</p> </li> </ol> </div> </dd> <dt class=\"hdlist1\">Create a topic branch and develop.</dt> <dd> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout -b alsa-audio (1)\n$ edit/compile/test\n$ git checkout -- curses/ux_audio_oss.c (2)\n$ git add curses/ux_audio_alsa.c (3)\n$ edit/compile/test\n$ git diff HEAD (4)\n$ git commit -a -s (5)\n$ edit/compile/test\n$ git diff HEAD^ (6)\n$ git commit -a --amend (7)\n$ git checkout master (8)\n$ git merge alsa-audio (9)\n$ git log --since='3 days ago' (10)\n$ git log v2.43.. curses/ (11)</pre> </div> </div> <div class=\"colist arabic\"> <ol> <li> <p>create a new topic branch.</p> </li> <li> <p>revert your botched changes in <code>curses/ux_audio_oss.c</code>.</p> </li> <li> <p>you need to tell Git if you added a new file; removal and modification will be caught if you do <code>git commit -a</code> later.</p> </li> <li> <p>to see what changes you are committing.</p> </li> <li> <p>commit everything, as you have tested, with your sign-off.</p> </li> <li> <p>look at all your changes including the previous commit.</p> </li> <li> <p>amend the previous commit, adding all your new changes, using your original message.</p> </li> <li> <p>switch to the master branch.</p> </li> <li> <p>merge a topic branch into your master branch.</p> </li> <li> <p>review commit logs; other forms to limit output can be combined and include <code>-10</code> (to show up to 10 commits), <code>--until=2005-12-10</code>, etc.</p> </li> <li> <p>view only the changes that touch what’s in <code>curses/</code> directory, since <code>v2.43</code> tag.</p> </li> </ol> </div> </dd> </dl> </div> </div>\n</div>   <h2 id=\"_individual_developer_participant_a_id_participant_a\">Individual developer (participant)</h2> <div class=\"sectionbody\"> <p>A developer working as a participant in a group project needs to learn how to communicate with others, and uses these commands in addition to the ones needed by a standalone developer.</p>  <div class=\"ulist\"> <ul> <li> <p><a href=\"git-clone\">git-clone[1]</a> from the upstream to prime your local repository.</p> </li> <li> <p><a href=\"git-pull\">git-pull[1]</a> and <a href=\"git-fetch\">git-fetch[1]</a> from \"origin\" to keep up-to-date with the upstream.</p> </li> <li> <p><a href=\"git-push\">git-push[1]</a> to shared repository, if you adopt CVS style shared repository workflow.</p> </li> <li> <p><a href=\"git-format-patch\">git-format-patch[1]</a> to prepare e-mail submission, if you adopt Linux kernel-style public forum workflow.</p> </li> <li> <p><a href=\"git-send-email\">git-send-email[1]</a> to send your e-mail submission without corruption by your MUA.</p> </li> <li> <p><a href=\"git-request-pull\">git-request-pull[1]</a> to create a summary of changes for your upstream to pull.</p> </li> </ul> </div> <div class=\"sect2\"> <h3 id=\"_examples_2\">Examples</h3> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">Clone the upstream and work on it. Feed changes to upstream.</dt> <dd> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git clone git://git.kernel.org/pub/scm/.../torvalds/linux-2.6 my2.6\n$ cd my2.6\n$ git checkout -b mine master (1)\n$ edit/compile/test; git commit -a -s (2)\n$ git format-patch master (3)\n$ git send-email --to=\"person &lt;email@example.com&gt;\" 00*.patch (4)\n$ git checkout master (5)\n$ git pull (6)\n$ git log -p ORIG_HEAD.. arch/i386 include/asm-i386 (7)\n$ git ls-remote --heads http://git.kernel.org/.../jgarzik/libata-dev.git (8)\n$ git pull git://git.kernel.org/pub/.../jgarzik/libata-dev.git ALL (9)\n$ git reset --hard ORIG_HEAD (10)\n$ git gc (11)</pre> </div> </div> <div class=\"colist arabic\"> <ol> <li> <p>checkout a new branch <code>mine</code> from master.</p> </li> <li> <p>repeat as needed.</p> </li> <li> <p>extract patches from your branch, relative to master,</p> </li> <li> <p>and email them.</p> </li> <li> <p>return to <code>master</code>, ready to see what’s new</p> </li> <li> <p><code>git pull</code> fetches from <code>origin</code> by default and merges into the current branch.</p> </li> <li> <p>immediately after pulling, look at the changes done upstream since last time we checked, only in the area we are interested in.</p> </li> <li> <p>check the branch names in an external repository (if not known).</p> </li> <li> <p>fetch from a specific branch <code>ALL</code> from a specific repository and merge it.</p> </li> <li> <p>revert the pull.</p> </li> <li> <p>garbage collect leftover objects from reverted pull.</p> </li> </ol> </div> </dd> <dt class=\"hdlist1\">Push into another repository.</dt> <dd> <div class=\"listingblock\"> <div class=\"content\"> <pre>satellite$ git clone mothership:frotz frotz (1)\nsatellite$ cd frotz\nsatellite$ git config --get-regexp '^(remote|branch)\\.' (2)\nremote.origin.url mothership:frotz\nremote.origin.fetch refs/heads/*:refs/remotes/origin/*\nbranch.master.remote origin\nbranch.master.merge refs/heads/master\nsatellite$ git config remote.origin.push \\\n           +refs/heads/*:refs/remotes/satellite/* (3)\nsatellite$ edit/compile/test/commit\nsatellite$ git push origin (4)\n\nmothership$ cd frotz\nmothership$ git checkout master\nmothership$ git merge satellite/master (5)</pre> </div> </div> <div class=\"colist arabic\"> <ol> <li> <p>mothership machine has a frotz repository under your home directory; clone from it to start a repository on the satellite machine.</p> </li> <li> <p>clone sets these configuration variables by default. It arranges <code>git pull</code> to fetch and store the branches of mothership machine to local <code>remotes/origin/*</code> remote-tracking branches.</p> </li> <li> <p>arrange <code>git push</code> to push all local branches to their corresponding branch of the mothership machine.</p> </li> <li> <p>push will stash all our work away on <code>remotes/satellite/*</code> remote-tracking branches on the mothership machine. You could use this as a back-up method. Likewise, you can pretend that mothership \"fetched\" from you (useful when access is one sided).</p> </li> <li> <p>on mothership machine, merge the work done on the satellite machine into the master branch.</p> </li> </ol> </div> </dd> <dt class=\"hdlist1\">Branch off of a specific tag.</dt> <dd> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout -b private2.6.14 v2.6.14 (1)\n$ edit/compile/test; git commit -a\n$ git checkout master\n$ git cherry-pick v2.6.14..private2.6.14 (2)</pre> </div> </div> <div class=\"colist arabic\"> <ol> <li> <p>create a private branch based on a well known (but somewhat behind) tag.</p> </li> <li> <p>forward port all changes in <code>private2.6.14</code> branch to <code>master</code> branch without a formal \"merging\". Or longhand<br> <code>git format-patch -k -m --stdout v2.6.14..private2.6.14 |\n  git am -3 -k</code></p> </li> </ol> </div> </dd> </dl> </div>  <p>An alternate participant submission mechanism is using the <code>git request-pull</code> or pull-request mechanisms (e.g as used on GitHub (www.github.com) to notify your upstream of your contribution.</p>  </div>\n</div>   <h2 id=\"_integrator_a_id_integrator_a\">Integrator</h2> <div class=\"sectionbody\"> <p>A fairly central person acting as the integrator in a group project receives changes made by others, reviews and integrates them and publishes the result for others to use, using these commands in addition to the ones needed by participants.</p>   <p>This section can also be used by those who respond to <code>git\nrequest-pull</code> or pull-request on GitHub (www.github.com) to integrate the work of others into their history. An sub-area lieutenant for a repository will act both as a participant and as an integrator.</p>  <div class=\"ulist\"> <ul> <li> <p><a href=\"git-am\">git-am[1]</a> to apply patches e-mailed in from your contributors.</p> </li> <li> <p><a href=\"git-pull\">git-pull[1]</a> to merge from your trusted lieutenants.</p> </li> <li> <p><a href=\"git-format-patch\">git-format-patch[1]</a> to prepare and send suggested alternative to contributors.</p> </li> <li> <p><a href=\"git-revert\">git-revert[1]</a> to undo botched commits.</p> </li> <li> <p><a href=\"git-push\">git-push[1]</a> to publish the bleeding edge.</p> </li> </ul> </div> <div class=\"sect2\"> <h3 id=\"_examples_3\">Examples</h3> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">A typical integrator’s Git day.</dt> <dd> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git status (1)\n$ git branch --no-merged master (2)\n$ mailx (3)\n&amp; s 2 3 4 5 ./+to-apply\n&amp; s 7 8 ./+hold-linus\n&amp; q\n$ git checkout -b topic/one master\n$ git am -3 -i -s ./+to-apply (4)\n$ compile/test\n$ git checkout -b hold/linus &amp;&amp; git am -3 -i -s ./+hold-linus (5)\n$ git checkout topic/one &amp;&amp; git rebase master (6)\n$ git checkout pu &amp;&amp; git reset --hard next (7)\n$ git merge topic/one topic/two &amp;&amp; git merge hold/linus (8)\n$ git checkout maint\n$ git cherry-pick master~4 (9)\n$ compile/test\n$ git tag -s -m \"GIT 0.99.9x\" v0.99.9x (10)\n$ git fetch ko &amp;&amp; for branch in master maint next pu (11)\n    do\n        git show-branch ko/$branch $branch (12)\n    done\n$ git push --follow-tags ko (13)</pre> </div> </div> <div class=\"colist arabic\"> <ol> <li> <p>see what you were in the middle of doing, if anything.</p> </li> <li> <p>see which branches haven’t been merged into <code>master</code> yet. Likewise for any other integration branches e.g. <code>maint</code>, <code>next</code> and <code>pu</code> (potential updates).</p> </li> <li> <p>read mails, save ones that are applicable, and save others that are not quite ready (other mail readers are available).</p> </li> <li> <p>apply them, interactively, with your sign-offs.</p> </li> <li> <p>create topic branch as needed and apply, again with sign-offs.</p> </li> <li> <p>rebase internal topic branch that has not been merged to the master or exposed as a part of a stable branch.</p> </li> <li> <p>restart <code>pu</code> every time from the next.</p> </li> <li> <p>and bundle topic branches still cooking.</p> </li> <li> <p>backport a critical fix.</p> </li> <li> <p>create a signed tag.</p> </li> <li> <p>make sure master was not accidentally rewound beyond that already pushed out. <code>ko</code> shorthand points at the Git maintainer’s repository at kernel.org, and looks like this:</p> </li> </ol> </div> <div class=\"listingblock\"> <div class=\"content\"> <pre>(in .git/config)\n[remote \"ko\"]\n        url = kernel.org:/pub/scm/git/git.git\n        fetch = refs/heads/*:refs/remotes/ko/*\n        push = refs/heads/master\n        push = refs/heads/next\n        push = +refs/heads/pu\n        push = refs/heads/maint</pre> </div> </div> <div class=\"colist arabic\"> <ol> <li> <p>In the output from <code>git show-branch</code>, <code>master</code> should have everything <code>ko/master</code> has, and <code>next</code> should have everything <code>ko/next</code> has, etc.</p> </li> <li> <p>push out the bleeding edge, together with new tags that point into the pushed history.</p> </li> </ol> </div> </dd> </dl> </div> </div>\n</div>   <h2 id=\"_repository_administration_a_id_administration_a\">Repository administration</h2> <div class=\"sectionbody\"> <p>A repository administrator uses the following tools to set up and maintain access to the repository by developers.</p>  <div class=\"ulist\"> <ul> <li> <p><a href=\"git-daemon\">git-daemon[1]</a> to allow anonymous download from repository.</p> </li> <li> <p><a href=\"git-shell\">git-shell[1]</a> can be used as a <code>restricted login shell</code> for shared central repository users.</p> </li> <li> <p><a href=\"git-http-backend\">git-http-backend[1]</a> provides a server side implementation of Git-over-HTTP (\"Smart http\") allowing both fetch and push services.</p> </li> <li> <p><a href=\"gitweb\">gitweb[1]</a> provides a web front-end to Git repositories, which can be set-up using the <a href=\"git-instaweb\">git-instaweb[1]</a> script.</p> </li> </ul> </div>  <p><a href=\"https://git-scm.com/docs/howto/update-hook-example.html\">update hook howto</a> has a good example of managing a shared central repository.</p>   <p>In addition there are a number of other widely deployed hosting, browsing and reviewing solutions such as:</p>  <div class=\"ulist\"> <ul> <li> <p>gitolite, gerrit code review, cgit and others.</p> </li> </ul> </div> <div class=\"sect2\"> <h3 id=\"_examples_4\">Examples</h3> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">We assume the following in /etc/services</dt> <dd> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ grep 9418 /etc/services\ngit                9418/tcp                # Git Version Control System</pre> </div> </div> </dd> <dt class=\"hdlist1\">Run git-daemon to serve /pub/scm from inetd.</dt> <dd> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ grep git /etc/inetd.conf\ngit        stream        tcp        nowait        nobody \\\n  /usr/bin/git-daemon git-daemon --inetd --export-all /pub/scm</pre> </div> </div>  <p>The actual configuration line should be on one line.</p>  </dd> <dt class=\"hdlist1\">Run git-daemon to serve /pub/scm from xinetd.</dt> <dd> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ cat /etc/xinetd.d/git-daemon\n# default: off\n# description: The Git server offers access to Git repositories\nservice git\n{\n        disable = no\n        type            = UNLISTED\n        port            = 9418\n        socket_type     = stream\n        wait            = no\n        user            = nobody\n        server          = /usr/bin/git-daemon\n        server_args     = --inetd --export-all --base-path=/pub/scm\n        log_on_failure  += USERID\n}</pre> </div> </div>  <p>Check your xinetd(8) documentation and setup, this is from a Fedora system. Others might be different.</p>  </dd> <dt class=\"hdlist1\">Give push/pull only access to developers using git-over-ssh.</dt> <dd> <p>e.g. those using: <code>$ git push/pull ssh://host.xz/pub/scm/project</code></p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ grep git /etc/passwd (1)\nalice:x:1000:1000::/home/alice:/usr/bin/git-shell\nbob:x:1001:1001::/home/bob:/usr/bin/git-shell\ncindy:x:1002:1002::/home/cindy:/usr/bin/git-shell\ndavid:x:1003:1003::/home/david:/usr/bin/git-shell\n$ grep git /etc/shells (2)\n/usr/bin/git-shell</pre> </div> </div> <div class=\"colist arabic\"> <ol> <li> <p>log-in shell is set to /usr/bin/git-shell, which does not allow anything but <code>git push</code> and <code>git pull</code>. The users require ssh access to the machine.</p> </li> <li> <p>in many distributions /etc/shells needs to list what is used as the login shell.</p> </li> </ol> </div> </dd> <dt class=\"hdlist1\">CVS-style shared repository.</dt> <dd> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ grep git /etc/group (1)\ngit:x:9418:alice,bob,cindy,david\n$ cd /home/devo.git\n$ ls -l (2)\n  lrwxrwxrwx   1 david git    17 Dec  4 22:40 HEAD -&gt; refs/heads/master\n  drwxrwsr-x   2 david git  4096 Dec  4 22:40 branches\n  -rw-rw-r--   1 david git    84 Dec  4 22:40 config\n  -rw-rw-r--   1 david git    58 Dec  4 22:40 description\n  drwxrwsr-x   2 david git  4096 Dec  4 22:40 hooks\n  -rw-rw-r--   1 david git 37504 Dec  4 22:40 index\n  drwxrwsr-x   2 david git  4096 Dec  4 22:40 info\n  drwxrwsr-x   4 david git  4096 Dec  4 22:40 objects\n  drwxrwsr-x   4 david git  4096 Nov  7 14:58 refs\n  drwxrwsr-x   2 david git  4096 Dec  4 22:40 remotes\n$ ls -l hooks/update (3)\n  -r-xr-xr-x   1 david git  3536 Dec  4 22:40 update\n$ cat info/allowed-users (4)\nrefs/heads/master        alice\\|cindy\nrefs/heads/doc-update        bob\nrefs/tags/v[0-9]*        david</pre> </div> </div> <div class=\"colist arabic\"> <ol> <li> <p>place the developers into the same git group.</p> </li> <li> <p>and make the shared repository writable by the group.</p> </li> <li> <p>use update-hook example by Carl from Documentation/howto/ for branch policy control.</p> </li> <li> <p>alice and cindy can push into master, only bob can push into doc-update. david is the release manager and is the only person who can create and push version tags.</p> </li> </ol> </div> </dd> </dl> </div> </div>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/giteveryday\" class=\"_attribution-link\">https://git-scm.com/docs/giteveryday</a>\n  </p>\n</div>\n","gitcli":"<h1>gitcli</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>gitcli - Git command-line interface and conventions</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"> <p>gitcli</p> </div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>This manual describes the convention used throughout Git CLI.</p>   <p>Many commands take revisions (most often \"commits\", but sometimes \"tree-ish\", depending on the context and command) and paths as their arguments. Here are the rules:</p>  <div class=\"ulist\"> <ul> <li> <p>Revisions come first and then paths. E.g. in <code>git diff v1.0 v2.0 arch/x86 include/asm-x86</code>, <code>v1.0</code> and <code>v2.0</code> are revisions and <code>arch/x86</code> and <code>include/asm-x86</code> are paths.</p> </li> <li> <p>When an argument can be misunderstood as either a revision or a path, they can be disambiguated by placing <code>--</code> between them. E.g. <code>git diff -- HEAD</code> is, \"I have a file called HEAD in my work tree. Please show changes between the version I staged in the index and what I have in the work tree for that file\", not \"show difference between the HEAD commit and the work tree as a whole\". You can say <code>git diff HEAD --</code> to ask for the latter.</p> </li> <li> <p>Without disambiguating <code>--</code>, Git makes a reasonable guess, but errors out and asking you to disambiguate when ambiguous. E.g. if you have a file called HEAD in your work tree, <code>git diff HEAD</code> is ambiguous, and you have to say either <code>git diff HEAD --</code> or <code>git diff -- HEAD</code> to disambiguate.</p>  <p>When writing a script that is expected to handle random user-input, it is a good practice to make it explicit which arguments are which by placing disambiguating <code>--</code> at appropriate places.</p>  </li> <li> <p>Many commands allow wildcards in paths, but you need to protect them from getting globbed by the shell. These two mean different things:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout -- *.c\n$ git checkout -- \\*.c</pre> </div> </div>  <p>The former lets your shell expand the fileglob, and you are asking the dot-C files in your working tree to be overwritten with the version in the index. The latter passes the <code>*.c</code> to Git, and you are asking the paths in the index that match the pattern to be checked out to your working tree. After running <code>git add hello.c; rm hello.c</code>, you will <code>not</code> see <code>hello.c</code> in your working tree with the former, but with the latter you will.</p>  </li> <li> <p>Just as the filesystem <code>.</code> (period) refers to the current directory, using a <code>.</code> as a repository name in Git (a dot-repository) is a relative path and means your current repository.</p> </li> </ul> </div>  <p>Here are the rules regarding the \"flags\" that you should follow when you are scripting Git:</p>  <div class=\"ulist\"> <ul> <li> <p>it’s preferred to use the non-dashed form of Git commands, which means that you should prefer <code>git foo</code> to <code>git-foo</code>.</p> </li> <li> <p>splitting short options to separate words (prefer <code>git foo -a -b</code> to <code>git foo -ab</code>, the latter may not even work).</p> </li> <li> <p>when a command-line option takes an argument, use the <code>stuck</code> form. In other words, write <code>git foo -oArg</code> instead of <code>git foo -o Arg</code> for short options, and <code>git foo --long-opt=Arg</code> instead of <code>git foo --long-opt Arg</code> for long options. An option that takes optional option-argument must be written in the <code>stuck</code> form.</p> </li> <li> <p>when you give a revision parameter to a command, make sure the parameter is not ambiguous with a name of a file in the work tree. E.g. do not write <code>git log -1 HEAD</code> but write <code>git log -1 HEAD --</code>; the former will not work if you happen to have a file called <code>HEAD</code> in the work tree.</p> </li> <li> <p>many commands allow a long option <code>--option</code> to be abbreviated only to their unique prefix (e.g. if there is no other option whose name begins with <code>opt</code>, you may be able to spell <code>--opt</code> to invoke the <code>--option</code> flag), but you should fully spell them out when writing your scripts; later versions of Git may introduce a new option whose name shares the same prefix, e.g. <code>--optimize</code>, to make a short prefix that used to be unique no longer unique.</p> </li> </ul> </div>\n</div>   <h2 id=\"_enhanced_option_parser\">Enhanced option parser</h2> <div class=\"sectionbody\"> <p>From the Git 1.5.4 series and further, many Git commands (not all of them at the time of the writing though) come with an enhanced option parser.</p>   <p>Here is a list of the facilities provided by this option parser.</p>  <div class=\"sect2\"> <h3 id=\"_magic_options\">Magic Options</h3>  <p>Commands which have the enhanced option parser activated all understand a couple of magic command-line options:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-h</dt> <dd> <p>gives a pretty printed usage of the command.</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git describe -h\nusage: git describe [options] &lt;commit-ish&gt;*\n   or: git describe [options] --dirty\n\n    --contains            find the tag that comes after the commit\n    --debug               debug search strategy on stderr\n    --all                 use any ref\n    --tags                use any tag, even unannotated\n    --long                always use long format\n    --abbrev[=&lt;n&gt;]        use &lt;n&gt; digits to display SHA-1s</pre> </div> </div> </dd> <dt class=\"hdlist1\">--help-all</dt> <dd> <p>Some Git commands take options that are only used for plumbing or that are deprecated, and such options are hidden from the default usage. This option gives the full list of options.</p> </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_negating_options\">Negating options</h3>  <p>Options with long option names can be negated by prefixing <code>--no-</code>. For example, <code>git branch</code> has the option <code>--track</code> which is <code>on</code> by default. You can use <code>--no-track</code> to override that behaviour. The same goes for <code>--color</code> and <code>--no-color</code>.</p>  </div> <div class=\"sect2\"> <h3 id=\"_aggregating_short_options\">Aggregating short options</h3>  <p>Commands that support the enhanced option parser allow you to aggregate short options. This means that you can for example use <code>git rm -rf</code> or <code>git clean -fdx</code>.</p>  </div> <div class=\"sect2\"> <h3 id=\"_abbreviating_long_options\">Abbreviating long options</h3>  <p>Commands that support the enhanced option parser accepts unique prefix of a long option as if it is fully spelled out, but use this with a caution. For example, <code>git commit --amen</code> behaves as if you typed <code>git commit --amend</code>, but that is true only until a later version of Git introduces another option that shares the same prefix, e.g. <code>git commit --amenity</code> option.</p>  </div> <div class=\"sect2\"> <h3 id=\"_separating_argument_from_the_option\">Separating argument from the option</h3>  <p>You can write the mandatory option parameter to an option as a separate word on the command line. That means that all the following uses work:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git foo --long-opt=Arg\n$ git foo --long-opt Arg\n$ git foo -oArg\n$ git foo -o Arg</pre> </div> </div>  <p>However, this is <strong>NOT</strong> allowed for switches with an optional value, where the <code>stuck</code> form must be used:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git describe --abbrev HEAD     # correct\n$ git describe --abbrev=10 HEAD  # correct\n$ git describe --abbrev 10 HEAD  # NOT WHAT YOU MEANT</pre> </div> </div> </div>\n</div>   <h2 id=\"_notes_on_frequently_confused_options\">Notes on frequently confused options</h2> <div class=\"sectionbody\"> <p>Many commands that can work on files in the working tree and/or in the index can take <code>--cached</code> and/or <code>--index</code> options. Sometimes people incorrectly think that, because the index was originally called cache, these two are synonyms. They are <strong>not</strong> — these two options mean very different things.</p>  <div class=\"ulist\"> <ul> <li> <p>The <code>--cached</code> option is used to ask a command that usually works on files in the working tree to <strong>only</strong> work with the index. For example, <code>git grep</code>, when used without a commit to specify from which commit to look for strings in, usually works on files in the working tree, but with the <code>--cached</code> option, it looks for strings in the index.</p> </li> <li> <p>The <code>--index</code> option is used to ask a command that usually works on files in the working tree to <strong>also</strong> affect the index. For example, <code>git stash apply</code> usually merges changes recorded in a stash to the working tree, but with the <code>--index</code> option, it also merges changes to the index as well.</p> </li> </ul> </div>  <p><code>git apply</code> command can be used with <code>--cached</code> and <code>--index</code> (but not at the same time). Usually the command only affects the files in the working tree, but with <code>--index</code>, it patches both the files and their index entries, and with <code>--cached</code>, it modifies only the index entries.</p>   <p>See also <a href=\"http://marc.info/?l=git&amp;m=116563135620359\" class=\"bare\">http://marc.info/?l=git&amp;m=116563135620359</a> and <a href=\"http://marc.info/?l=git&amp;m=119150393620273\" class=\"bare\">http://marc.info/?l=git&amp;m=119150393620273</a> for further information.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/gitcli\" class=\"_attribution-link\">https://git-scm.com/docs/gitcli</a>\n  </p>\n</div>\n","gitnamespaces":"<h1>gitnamespaces</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>gitnamespaces - Git namespaces</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">GIT_NAMESPACE=&lt;namespace&gt; git upload-pack\nGIT_NAMESPACE=&lt;namespace&gt; git receive-pack</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Git supports dividing the refs of a single repository into multiple namespaces, each of which has its own branches, tags, and HEAD. Git can expose each namespace as an independent repository to pull from and push to, while sharing the object store, and exposing all the refs to operations such as <a href=\"git-gc\">git-gc[1]</a>.</p>   <p>Storing multiple repositories as namespaces of a single repository avoids storing duplicate copies of the same objects, such as when storing multiple branches of the same source. The alternates mechanism provides similar support for avoiding duplicates, but alternates do not prevent duplication between new objects added to the repositories without ongoing maintenance, while namespaces do.</p>   <p>To specify a namespace, set the <code>GIT_NAMESPACE</code> environment variable to the namespace. For each ref namespace, Git stores the corresponding refs in a directory under <code>refs/namespaces/</code>. For example, <code>GIT_NAMESPACE=foo</code> will store refs under <code>refs/namespaces/foo/</code>. You can also specify namespaces via the <code>--namespace</code> option to <a href=\"git\">git[1]</a>.</p>   <p>Note that namespaces which include a <code>/</code> will expand to a hierarchy of namespaces; for example, <code>GIT_NAMESPACE=foo/bar</code> will store refs under <code>refs/namespaces/foo/refs/namespaces/bar/</code>. This makes paths in <code>GIT_NAMESPACE</code> behave hierarchically, so that cloning with <code>GIT_NAMESPACE=foo/bar</code> produces the same result as cloning with <code>GIT_NAMESPACE=foo</code> and cloning from that repo with <code>GIT_NAMESPACE=bar</code>. It also avoids ambiguity with strange namespace paths such as <code>foo/refs/heads/</code>, which could otherwise generate directory/file conflicts within the <code>refs</code> directory.</p>   <p><a href=\"git-upload-pack\">git-upload-pack[1]</a> and <a href=\"git-receive-pack\">git-receive-pack[1]</a> rewrite the names of refs as specified by <code>GIT_NAMESPACE</code>. git-upload-pack and git-receive-pack will ignore all references outside the specified namespace.</p>   <p>The smart HTTP server, <a href=\"git-http-backend\">git-http-backend[1]</a>, will pass GIT_NAMESPACE through to the backend programs; see <a href=\"git-http-backend\">git-http-backend[1]</a> for sample configuration to expose repository namespaces as repositories.</p>   <p>For a simple local test, you can use <a href=\"git-remote-ext\">git-remote-ext[1]</a>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>git clone ext::'git --namespace=foo %s /tmp/prefixed.git'</pre> </div> </div>\n</div>   <h2 id=\"_security\">Security</h2> <div class=\"sectionbody\"> <p>Anyone with access to any namespace within a repository can potentially access objects from any other namespace stored in the same repository. You can’t directly say \"give me object ABCD\" if you don’t have a ref to it, but you can do some other sneaky things like:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>Claiming to push ABCD, at which point the server will optimize out the need for you to actually send it. Now you have a ref to ABCD and can fetch it (claiming not to have it, of course).</p> </li> <li> <p>Requesting other refs, claiming that you have ABCD, at which point the server may generate deltas against ABCD.</p> </li> </ol> </div>  <p>None of this causes a problem if you only host public repositories, or if everyone who may read one namespace may also read everything in every other namespace (for instance, if everyone in an organization has read permission to every repository).</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/gitnamespaces\" class=\"_attribution-link\">https://git-scm.com/docs/gitnamespaces</a>\n  </p>\n</div>\n","git-replace":"<h1>git-replace</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-replace - Create, list, delete refs to replace objects</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git replace [-f] &lt;object&gt; &lt;replacement&gt;\ngit replace [-f] --edit &lt;object&gt;\ngit replace [-f] --graft &lt;commit&gt; [&lt;parent&gt;…​]\ngit replace -d &lt;object&gt;…​\ngit replace [--format=&lt;format&gt;] [-l [&lt;pattern&gt;]]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Adds a <code>replace</code> reference in <code>refs/replace/</code> namespace.</p>   <p>The name of the <code>replace</code> reference is the SHA-1 of the object that is replaced. The content of the <code>replace</code> reference is the SHA-1 of the replacement object.</p>   <p>The replaced object and the replacement object must be of the same type. This restriction can be bypassed using <code>-f</code>.</p>   <p>Unless <code>-f</code> is given, the <code>replace</code> reference must not yet exist.</p>   <p>There is no other restriction on the replaced and replacement objects. Merge commits can be replaced by non-merge commits and vice versa.</p>   <p>Replacement references will be used by default by all Git commands except those doing reachability traversal (prune, pack transfer and fsck).</p>   <p>It is possible to disable use of replacement references for any command using the <code>--no-replace-objects</code> option just after <code>git</code>.</p>   <p>For example if commit <code>foo</code> has been replaced by commit <code>bar</code>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git --no-replace-objects cat-file commit foo</pre> </div> </div>  <p>shows information about commit <code>foo</code>, while:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git cat-file commit foo</pre> </div> </div>  <p>shows information about commit <code>bar</code>.</p>   <p>The <code>GIT_NO_REPLACE_OBJECTS</code> environment variable can be set to achieve the same effect as the <code>--no-replace-objects</code> option.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-f</dt> <dt class=\"hdlist1\">--force</dt> <dd> <p>If an existing replace ref for the same object exists, it will be overwritten (instead of failing).</p> </dd> <dt class=\"hdlist1\">-d</dt> <dt class=\"hdlist1\">--delete</dt> <dd> <p>Delete existing replace refs for the given objects.</p> </dd> <dt class=\"hdlist1\">--edit &lt;object&gt;</dt> <dd> <p>Edit an object’s content interactively. The existing content for &lt;object&gt; is pretty-printed into a temporary file, an editor is launched on the file, and the result is parsed to create a new object of the same type as &lt;object&gt;. A replacement ref is then created to replace &lt;object&gt; with the newly created object. See <a href=\"git-var\">git-var[1]</a> for details about how the editor will be chosen.</p> </dd> <dt class=\"hdlist1\">--raw</dt> <dd> <p>When editing, provide the raw object contents rather than pretty-printed ones. Currently this only affects trees, which will be shown in their binary form. This is harder to work with, but can help when repairing a tree that is so corrupted it cannot be pretty-printed. Note that you may need to configure your editor to cleanly read and write binary data.</p> </dd> <dt class=\"hdlist1\">--graft &lt;commit&gt; [&lt;parent&gt;…​]</dt> <dd> <p>Create a graft commit. A new commit is created with the same content as &lt;commit&gt; except that its parents will be [&lt;parent&gt;…​] instead of &lt;commit&gt;'s parents. A replacement ref is then created to replace &lt;commit&gt; with the newly created commit. See contrib/convert-grafts-to-replace-refs.sh for an example script based on this option that can convert grafts to replace refs.</p> </dd> <dt class=\"hdlist1\">-l &lt;pattern&gt;</dt> <dt class=\"hdlist1\">--list &lt;pattern&gt;</dt> <dd> <p>List replace refs for objects that match the given pattern (or all if no pattern is given). Typing \"git replace\" without arguments, also lists all replace refs.</p> </dd> <dt class=\"hdlist1\">--format=&lt;format&gt;</dt> <dd> <p>When listing, use the specified &lt;format&gt;, which can be one of <code>short</code>, <code>medium</code> and <code>long</code>. When omitted, the format defaults to <code>short</code>.</p> </dd> </dl> </div></div>   <h2 id=\"_formats\">Formats</h2> <div class=\"sectionbody\"> <p>The following format are available:</p>  <div class=\"ulist\"> <ul> <li> <p><code>short</code>: &lt;replaced sha1&gt;</p> </li> <li> <p><code>medium</code>: &lt;replaced sha1&gt; → &lt;replacement sha1&gt;</p> </li> <li> <p><code>long</code>: &lt;replaced sha1&gt; (&lt;replaced type&gt;) → &lt;replacement sha1&gt; (&lt;replacement type&gt;)</p> </li> </ul> </div>\n</div>   <h2 id=\"_creating_replacement_objects\">Creating replacement objects</h2> <div class=\"sectionbody\"> <p><a href=\"git-filter-branch\">git-filter-branch[1]</a>, <a href=\"git-hash-object\">git-hash-object[1]</a> and <a href=\"git-rebase\">git-rebase[1]</a>, among other git commands, can be used to create replacement objects from existing objects. The <code>--edit</code> option can also be used with <code>git replace</code> to create a replacement object by editing an existing object.</p>   <p>If you want to replace many blobs, trees or commits that are part of a string of commits, you may just want to create a replacement string of commits and then only replace the commit at the tip of the target string of commits with the commit at the tip of the replacement string of commits.</p> </div>   <h2 id=\"_bugs\">Bugs</h2> <div class=\"sectionbody\"> <p>Comparing blobs or trees that have been replaced with those that replace them will not work properly. And using <code>git reset --hard</code> to go back to a replaced commit will move the branch to the replacement commit instead of the replaced commit.</p>   <p>There may be other problems when using <code>git rev-list</code> related to pending objects.</p> </div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-hash-object\">git-hash-object[1]</a> <a href=\"git-filter-branch\">git-filter-branch[1]</a> <a href=\"git-rebase\">git-rebase[1]</a> <a href=\"git-tag\">git-tag[1]</a> <a href=\"git-branch\">git-branch[1]</a> <a href=\"git-commit\">git-commit[1]</a> <a href=\"git-var\">git-var[1]</a> <a href=\"git\">git[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-replace\" class=\"_attribution-link\">https://git-scm.com/docs/git-replace</a>\n  </p>\n</div>\n","git-diff-index":"<h1>git-diff-index</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-diff-index - Compare a tree to the working tree or index</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git diff-index [-m] [--cached] [&lt;common diff options&gt;] &lt;tree-ish&gt; [&lt;path&gt;…​]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Compares the content and mode of the blobs found in a tree object with the corresponding tracked files in the working tree, or with the corresponding paths in the index. When &lt;path&gt; arguments are present, compares only paths matching those patterns. Otherwise all tracked files are compared.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\">\n<div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-p</dt> <dt class=\"hdlist1\">-u</dt> <dt class=\"hdlist1\">--patch</dt> <dd> <p>Generate patch (see section on generating patches).</p> </dd> <dt class=\"hdlist1\">-s</dt> <dt class=\"hdlist1\">--no-patch</dt> <dd> <p>Suppress diff output. Useful for commands like <code>git show</code> that show the patch by default, or to cancel the effect of <code>--patch</code>.</p> </dd> <dt class=\"hdlist1\">-U&lt;n&gt;</dt> <dt class=\"hdlist1\">--unified=&lt;n&gt;</dt> <dd> <p>Generate diffs with &lt;n&gt; lines of context instead of the usual three. Implies <code>-p</code>.</p> </dd> <dt class=\"hdlist1\">--raw</dt> <dd> <p>Generate the diff in raw format. This is the default.</p> </dd> <dt class=\"hdlist1\">--patch-with-raw</dt> <dd> <p>Synonym for <code>-p --raw</code>.</p> </dd> <dt class=\"hdlist1\">--compaction-heuristic</dt> <dt class=\"hdlist1\">--no-compaction-heuristic</dt> <dd> <p>These are to help debugging and tuning an experimental heuristic (which is off by default) that shifts the hunk boundary in an attempt to make the resulting patch easier to read.</p> </dd> <dt class=\"hdlist1\">--minimal</dt> <dd> <p>Spend extra time to make sure the smallest possible diff is produced.</p> </dd> <dt class=\"hdlist1\">--patience</dt> <dd> <p>Generate a diff using the \"patience diff\" algorithm.</p> </dd> <dt class=\"hdlist1\">--histogram</dt> <dd> <p>Generate a diff using the \"histogram diff\" algorithm.</p> </dd> <dt class=\"hdlist1\">--diff-algorithm={patience|minimal|histogram|myers}</dt> <dd> <p>Choose a diff algorithm. The variants are as follows:</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">\n<code>default</code>, <code>myers</code>\n</dt> <dd> <p>The basic greedy diff algorithm. Currently, this is the default.</p> </dd> <dt class=\"hdlist1\"><code>minimal</code></dt> <dd> <p>Spend extra time to make sure the smallest possible diff is produced.</p> </dd> <dt class=\"hdlist1\"><code>patience</code></dt> <dd> <p>Use \"patience diff\" algorithm when generating patches.</p> </dd> <dt class=\"hdlist1\"><code>histogram</code></dt> <dd> <p>This algorithm extends the patience algorithm to \"support low-occurrence common elements\".</p> </dd> </dl> </div> </div> </div>  <p>For instance, if you configured diff.algorithm variable to a non-default value and want to use the default one, then you have to use <code>--diff-algorithm=default</code> option.</p>  </dd> <dt class=\"hdlist1\">--stat[=&lt;width&gt;[,&lt;name-width&gt;[,&lt;count&gt;]]]</dt> <dd> <p>Generate a diffstat. By default, as much space as necessary will be used for the filename part, and the rest for the graph part. Maximum width defaults to terminal width, or 80 columns if not connected to a terminal, and can be overridden by <code>&lt;width&gt;</code>. The width of the filename part can be limited by giving another width <code>&lt;name-width&gt;</code> after a comma. The width of the graph part can be limited by using <code>--stat-graph-width=&lt;width&gt;</code> (affects all commands generating a stat graph) or by setting <code>diff.statGraphWidth=&lt;width&gt;</code> (does not affect <code>git format-patch</code>). By giving a third parameter <code>&lt;count&gt;</code>, you can limit the output to the first <code>&lt;count&gt;</code> lines, followed by <code>...</code> if there are more.</p>  <p>These parameters can also be set individually with <code>--stat-width=&lt;width&gt;</code>, <code>--stat-name-width=&lt;name-width&gt;</code> and <code>--stat-count=&lt;count&gt;</code>.</p>  </dd> <dt class=\"hdlist1\">--numstat</dt> <dd> <p>Similar to <code>--stat</code>, but shows number of added and deleted lines in decimal notation and pathname without abbreviation, to make it more machine friendly. For binary files, outputs two <code>-</code> instead of saying <code>0 0</code>.</p> </dd> <dt class=\"hdlist1\">--shortstat</dt> <dd> <p>Output only the last line of the <code>--stat</code> format containing total number of modified files, as well as number of added and deleted lines.</p> </dd> <dt class=\"hdlist1\">--dirstat[=&lt;param1,param2,…​&gt;]</dt> <dd> <p>Output the distribution of relative amount of changes for each sub-directory. The behavior of <code>--dirstat</code> can be customized by passing it a comma separated list of parameters. The defaults are controlled by the <code>diff.dirstat</code> configuration variable (see <a href=\"git-config\">git-config[1]</a>). The following parameters are available:</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>changes</code></dt> <dd> <p>Compute the dirstat numbers by counting the lines that have been removed from the source, or added to the destination. This ignores the amount of pure code movements within a file. In other words, rearranging lines in a file is not counted as much as other changes. This is the default behavior when no parameter is given.</p> </dd> <dt class=\"hdlist1\"><code>lines</code></dt> <dd> <p>Compute the dirstat numbers by doing the regular line-based diff analysis, and summing the removed/added line counts. (For binary files, count 64-byte chunks instead, since binary files have no natural concept of lines). This is a more expensive <code>--dirstat</code> behavior than the <code>changes</code> behavior, but it does count rearranged lines within a file as much as other changes. The resulting output is consistent with what you get from the other <code>--*stat</code> options.</p> </dd> <dt class=\"hdlist1\"><code>files</code></dt> <dd> <p>Compute the dirstat numbers by counting the number of files changed. Each changed file counts equally in the dirstat analysis. This is the computationally cheapest <code>--dirstat</code> behavior, since it does not have to look at the file contents at all.</p> </dd> <dt class=\"hdlist1\"><code>cumulative</code></dt> <dd> <p>Count changes in a child directory for the parent directory as well. Note that when using <code>cumulative</code>, the sum of the percentages reported may exceed 100%. The default (non-cumulative) behavior can be specified with the <code>noncumulative</code> parameter.</p> </dd> <dt class=\"hdlist1\">&lt;limit&gt;</dt> <dd> <p>An integer parameter specifies a cut-off percent (3% by default). Directories contributing less than this percentage of the changes are not shown in the output.</p> </dd> </dl> </div> </div> </div>  <p>Example: The following will count changed files, while ignoring directories with less than 10% of the total amount of changed files, and accumulating child directory counts in the parent directories: <code>--dirstat=files,10,cumulative</code>.</p>  </dd> <dt class=\"hdlist1\">--summary</dt> <dd> <p>Output a condensed summary of extended header information such as creations, renames and mode changes.</p> </dd> <dt class=\"hdlist1\">--patch-with-stat</dt> <dd> <p>Synonym for <code>-p --stat</code>.</p> </dd> <dt class=\"hdlist1\">-z</dt> <dd> <p>When <code>--raw</code>, <code>--numstat</code>, <code>--name-only</code> or <code>--name-status</code> has been given, do not munge pathnames and use NULs as output field terminators.</p>  <p>Without this option, each pathname output will have TAB, LF, double quotes, and backslash characters replaced with <code>\\t</code>, <code>\\n</code>, <code>\\\"</code>, and <code>\\\\</code>, respectively, and the pathname will be enclosed in double quotes if any of those replacements occurred.</p>  </dd> <dt class=\"hdlist1\">--name-only</dt> <dd> <p>Show only names of changed files.</p> </dd> <dt class=\"hdlist1\">--name-status</dt> <dd> <p>Show only names and status of changed files. See the description of the <code>--diff-filter</code> option on what the status letters mean.</p> </dd> <dt class=\"hdlist1\">--submodule[=&lt;format&gt;]</dt> <dd> <p>Specify how differences in submodules are shown. When <code>--submodule</code> or <code>--submodule=log</code> is given, the <code>log</code> format is used. This format lists the commits in the range like <a href=\"git-submodule\">git-submodule[1]</a> <code>summary</code> does. Omitting the <code>--submodule</code> option or specifying <code>--submodule=short</code>, uses the <code>short</code> format. This format just shows the names of the commits at the beginning and end of the range. Can be tweaked via the <code>diff.submodule</code> configuration variable.</p> </dd> <dt class=\"hdlist1\">--color[=&lt;when&gt;]</dt> <dd> <p>Show colored diff. <code>--color</code> (i.e. without <code>=&lt;when&gt;</code>) is the same as <code>--color=always</code>. <code>&lt;when&gt;</code> can be one of <code>always</code>, <code>never</code>, or <code>auto</code>.</p> </dd> <dt class=\"hdlist1\">--no-color</dt> <dd> <p>Turn off colored diff. It is the same as <code>--color=never</code>.</p> </dd> <dt class=\"hdlist1\">--word-diff[=&lt;mode&gt;]</dt> <dd> <p>Show a word diff, using the &lt;mode&gt; to delimit changed words. By default, words are delimited by whitespace; see <code>--word-diff-regex</code> below. The &lt;mode&gt; defaults to <code>plain</code>, and must be one of:</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">color</dt> <dd> <p>Highlight changed words using only colors. Implies <code>--color</code>.</p> </dd> <dt class=\"hdlist1\">plain</dt> <dd> <p>Show words as <code>[-removed-]</code> and <code>{+added+}</code>. Makes no attempts to escape the delimiters if they appear in the input, so the output may be ambiguous.</p> </dd> <dt class=\"hdlist1\">porcelain</dt> <dd> <p>Use a special line-based format intended for script consumption. Added/removed/unchanged runs are printed in the usual unified diff format, starting with a <code>+</code>/<code>-</code>/` ` character at the beginning of the line and extending to the end of the line. Newlines in the input are represented by a tilde <code>~</code> on a line of its own.</p> </dd> <dt class=\"hdlist1\">none</dt> <dd> <p>Disable word diff again.</p> </dd> </dl> </div> </div> </div>  <p>Note that despite the name of the first mode, color is used to highlight the changed parts in all modes if enabled.</p>  </dd> <dt class=\"hdlist1\">--word-diff-regex=&lt;regex&gt;</dt> <dd> <p>Use &lt;regex&gt; to decide what a word is, instead of considering runs of non-whitespace to be a word. Also implies <code>--word-diff</code> unless it was already enabled.</p>  <p>Every non-overlapping match of the &lt;regex&gt; is considered a word. Anything between these matches is considered whitespace and ignored(!) for the purposes of finding differences. You may want to append <code>|[^[:space:]]</code> to your regular expression to make sure that it matches all non-whitespace characters. A match that contains a newline is silently truncated(!) at the newline.</p>   <p>For example, <code>--word-diff-regex=.</code> will treat each character as a word and, correspondingly, show differences character by character.</p>   <p>The regex can also be set via a diff driver or configuration option, see <a href=\"gitattributes\">gitattributes[5]</a> or <a href=\"git-config\">git-config[1]</a>. Giving it explicitly overrides any diff driver or configuration setting. Diff drivers override configuration settings.</p>  </dd> <dt class=\"hdlist1\">--color-words[=&lt;regex&gt;]</dt> <dd> <p>Equivalent to <code>--word-diff=color</code> plus (if a regex was specified) <code>--word-diff-regex=&lt;regex&gt;</code>.</p> </dd> <dt class=\"hdlist1\">--no-renames</dt> <dd> <p>Turn off rename detection, even when the configuration file gives the default to do so.</p> </dd> <dt class=\"hdlist1\">--check</dt> <dd> <p>Warn if changes introduce conflict markers or whitespace errors. What are considered whitespace errors is controlled by <code>core.whitespace</code> configuration. By default, trailing whitespaces (including lines that solely consist of whitespaces) and a space character that is immediately followed by a tab character inside the initial indent of the line are considered whitespace errors. Exits with non-zero status if problems are found. Not compatible with --exit-code.</p> </dd> <dt class=\"hdlist1\">--ws-error-highlight=&lt;kind&gt;</dt> <dd> <p>Highlight whitespace errors on lines specified by &lt;kind&gt; in the color specified by <code>color.diff.whitespace</code>. &lt;kind&gt; is a comma separated list of <code>old</code>, <code>new</code>, <code>context</code>. When this option is not given, only whitespace errors in <code>new</code> lines are highlighted. E.g. <code>--ws-error-highlight=new,old</code> highlights whitespace errors on both deleted and added lines. <code>all</code> can be used as a short-hand for <code>old,new,context</code>.</p> </dd> <dt class=\"hdlist1\">--full-index</dt> <dd> <p>Instead of the first handful of characters, show the full pre- and post-image blob object names on the \"index\" line when generating patch format output.</p> </dd> <dt class=\"hdlist1\">--binary</dt> <dd> <p>In addition to <code>--full-index</code>, output a binary diff that can be applied with <code>git-apply</code>.</p> </dd> <dt class=\"hdlist1\">--abbrev[=&lt;n&gt;]</dt> <dd> <p>Instead of showing the full 40-byte hexadecimal object name in diff-raw format output and diff-tree header lines, show only a partial prefix. This is independent of the <code>--full-index</code> option above, which controls the diff-patch output format. Non default number of digits can be specified with <code>--abbrev=&lt;n&gt;</code>.</p> </dd> <dt class=\"hdlist1\">-B[&lt;n&gt;][/&lt;m&gt;]</dt> <dt class=\"hdlist1\">--break-rewrites[=[&lt;n&gt;][/&lt;m&gt;]]</dt> <dd> <p>Break complete rewrite changes into pairs of delete and create. This serves two purposes:</p>  <p>It affects the way a change that amounts to a total rewrite of a file not as a series of deletion and insertion mixed together with a very few lines that happen to match textually as the context, but as a single deletion of everything old followed by a single insertion of everything new, and the number <code>m</code> controls this aspect of the -B option (defaults to 60%). <code>-B/70%</code> specifies that less than 30% of the original should remain in the result for Git to consider it a total rewrite (i.e. otherwise the resulting patch will be a series of deletion and insertion mixed together with context lines).</p>   <p>When used with -M, a totally-rewritten file is also considered as the source of a rename (usually -M only considers a file that disappeared as the source of a rename), and the number <code>n</code> controls this aspect of the -B option (defaults to 50%). <code>-B20%</code> specifies that a change with addition and deletion compared to 20% or more of the file’s size are eligible for being picked up as a possible source of a rename to another file.</p>  </dd> <dt class=\"hdlist1\">-M[&lt;n&gt;]</dt> <dt class=\"hdlist1\">--find-renames[=&lt;n&gt;]</dt> <dd> <p>Detect renames. If <code>n</code> is specified, it is a threshold on the similarity index (i.e. amount of addition/deletions compared to the file’s size). For example, <code>-M90%</code> means Git should consider a delete/add pair to be a rename if more than 90% of the file hasn’t changed. Without a <code>%</code> sign, the number is to be read as a fraction, with a decimal point before it. I.e., <code>-M5</code> becomes 0.5, and is thus the same as <code>-M50%</code>. Similarly, <code>-M05</code> is the same as <code>-M5%</code>. To limit detection to exact renames, use <code>-M100%</code>. The default similarity index is 50%.</p> </dd> <dt class=\"hdlist1\">-C[&lt;n&gt;]</dt> <dt class=\"hdlist1\">--find-copies[=&lt;n&gt;]</dt> <dd> <p>Detect copies as well as renames. See also <code>--find-copies-harder</code>. If <code>n</code> is specified, it has the same meaning as for <code>-M&lt;n&gt;</code>.</p> </dd> <dt class=\"hdlist1\">--find-copies-harder</dt> <dd> <p>For performance reasons, by default, <code>-C</code> option finds copies only if the original file of the copy was modified in the same changeset. This flag makes the command inspect unmodified files as candidates for the source of copy. This is a very expensive operation for large projects, so use it with caution. Giving more than one <code>-C</code> option has the same effect.</p> </dd> <dt class=\"hdlist1\">-D</dt> <dt class=\"hdlist1\">--irreversible-delete</dt> <dd> <p>Omit the preimage for deletes, i.e. print only the header but not the diff between the preimage and <code>/dev/null</code>. The resulting patch is not meant to be applied with <code>patch</code> or <code>git apply</code>; this is solely for people who want to just concentrate on reviewing the text after the change. In addition, the output obviously lack enough information to apply such a patch in reverse, even manually, hence the name of the option.</p>  <p>When used together with <code>-B</code>, omit also the preimage in the deletion part of a delete/create pair.</p>  </dd> <dt class=\"hdlist1\">-l&lt;num&gt;</dt> <dd> <p>The <code>-M</code> and <code>-C</code> options require O(n^2) processing time where n is the number of potential rename/copy targets. This option prevents rename/copy detection from running if the number of rename/copy targets exceeds the specified number.</p> </dd> <dt class=\"hdlist1\">--diff-filter=[(A|C|D|M|R|T|U|X|B)…​[*]]</dt> <dd> <p>Select only files that are Added (<code>A</code>), Copied (<code>C</code>), Deleted (<code>D</code>), Modified (<code>M</code>), Renamed (<code>R</code>), have their type (i.e. regular file, symlink, submodule, …​) changed (<code>T</code>), are Unmerged (<code>U</code>), are Unknown (<code>X</code>), or have had their pairing Broken (<code>B</code>). Any combination of the filter characters (including none) can be used. When <code>*</code> (All-or-none) is added to the combination, all paths are selected if there is any file that matches other criteria in the comparison; if there is no file that matches other criteria, nothing is selected.</p> </dd> <dt class=\"hdlist1\">-S&lt;string&gt;</dt> <dd> <p>Look for differences that change the number of occurrences of the specified string (i.e. addition/deletion) in a file. Intended for the scripter’s use.</p>  <p>It is useful when you’re looking for an exact block of code (like a struct), and want to know the history of that block since it first came into being: use the feature iteratively to feed the interesting block in the preimage back into <code>-S</code>, and keep going until you get the very first version of the block.</p>  </dd> <dt class=\"hdlist1\">-G&lt;regex&gt;</dt> <dd> <p>Look for differences whose patch text contains added/removed lines that match &lt;regex&gt;.</p>  <p>To illustrate the difference between <code>-S&lt;regex&gt; --pickaxe-regex</code> and <code>-G&lt;regex&gt;</code>, consider a commit with the following diff in the same file:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>+    return !regexec(regexp, two-&gt;ptr, 1, &amp;regmatch, 0);\n...\n-    hit = !regexec(regexp, mf2.ptr, 1, &amp;regmatch, 0);</pre> </div> </div>  <p>While <code>git log -G\"regexec\\(regexp\"</code> will show this commit, <code>git log\n-S\"regexec\\(regexp\" --pickaxe-regex</code> will not (because the number of occurrences of that string did not change).</p>   <p>See the <code>pickaxe</code> entry in <a href=\"gitdiffcore\">gitdiffcore[7]</a> for more information.</p>  </dd> <dt class=\"hdlist1\">--pickaxe-all</dt> <dd> <p>When <code>-S</code> or <code>-G</code> finds a change, show all the changes in that changeset, not just the files that contain the change in &lt;string&gt;.</p> </dd> <dt class=\"hdlist1\">--pickaxe-regex</dt> <dd> <p>Treat the &lt;string&gt; given to <code>-S</code> as an extended POSIX regular expression to match.</p> </dd> <dt class=\"hdlist1\">-O&lt;orderfile&gt;</dt> <dd> <p>Output the patch in the order specified in the &lt;orderfile&gt;, which has one shell glob pattern per line. This overrides the <code>diff.orderFile</code> configuration variable (see <a href=\"git-config\">git-config[1]</a>). To cancel <code>diff.orderFile</code>, use <code>-O/dev/null</code>.</p> </dd> <dt class=\"hdlist1\">-R</dt> <dd> <p>Swap two inputs; that is, show differences from index or on-disk file to tree contents.</p> </dd> <dt class=\"hdlist1\">--relative[=&lt;path&gt;]</dt> <dd> <p>When run from a subdirectory of the project, it can be told to exclude changes outside the directory and show pathnames relative to it with this option. When you are not in a subdirectory (e.g. in a bare repository), you can name which subdirectory to make the output relative to by giving a &lt;path&gt; as an argument.</p> </dd> <dt class=\"hdlist1\">-a</dt> <dt class=\"hdlist1\">--text</dt> <dd> <p>Treat all files as text.</p> </dd> <dt class=\"hdlist1\">--ignore-space-at-eol</dt> <dd> <p>Ignore changes in whitespace at EOL.</p> </dd> <dt class=\"hdlist1\">-b</dt> <dt class=\"hdlist1\">--ignore-space-change</dt> <dd> <p>Ignore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent.</p> </dd> <dt class=\"hdlist1\">-w</dt> <dt class=\"hdlist1\">--ignore-all-space</dt> <dd> <p>Ignore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none.</p> </dd> <dt class=\"hdlist1\">--ignore-blank-lines</dt> <dd> <p>Ignore changes whose lines are all blank.</p> </dd> <dt class=\"hdlist1\">--inter-hunk-context=&lt;lines&gt;</dt> <dd> <p>Show the context between diff hunks, up to the specified number of lines, thereby fusing hunks that are close to each other.</p> </dd> <dt class=\"hdlist1\">-W</dt> <dt class=\"hdlist1\">--function-context</dt> <dd> <p>Show whole surrounding functions of changes.</p> </dd> <dt class=\"hdlist1\">--exit-code</dt> <dd> <p>Make the program exit with codes similar to diff(1). That is, it exits with 1 if there were differences and 0 means no differences.</p> </dd> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>Disable all output of the program. Implies <code>--exit-code</code>.</p> </dd> <dt class=\"hdlist1\">--ext-diff</dt> <dd> <p>Allow an external diff helper to be executed. If you set an external diff driver with <a href=\"gitattributes\">gitattributes[5]</a>, you need to use this option with <a href=\"git-log\">git-log[1]</a> and friends.</p> </dd> <dt class=\"hdlist1\">--no-ext-diff</dt> <dd> <p>Disallow external diff drivers.</p> </dd> <dt class=\"hdlist1\">--textconv</dt> <dt class=\"hdlist1\">--no-textconv</dt> <dd> <p>Allow (or disallow) external text conversion filters to be run when comparing binary files. See <a href=\"gitattributes\">gitattributes[5]</a> for details. Because textconv filters are typically a one-way conversion, the resulting diff is suitable for human consumption, but cannot be applied. For this reason, textconv filters are enabled by default only for <a href=\"git-diff\">git-diff[1]</a> and <a href=\"git-log\">git-log[1]</a>, but not for <a href=\"git-format-patch\">git-format-patch[1]</a> or diff plumbing commands.</p> </dd> <dt class=\"hdlist1\">--ignore-submodules[=&lt;when&gt;]</dt> <dd> <p>Ignore changes to submodules in the diff generation. &lt;when&gt; can be either \"none\", \"untracked\", \"dirty\" or \"all\", which is the default. Using \"none\" will consider the submodule modified when it either contains untracked or modified files or its HEAD differs from the commit recorded in the superproject and can be used to override any settings of the <code>ignore</code> option in <a href=\"git-config\">git-config[1]</a> or <a href=\"gitmodules\">gitmodules[5]</a>. When \"untracked\" is used submodules are not considered dirty when they only contain untracked content (but they are still scanned for modified content). Using \"dirty\" ignores all changes to the work tree of submodules, only changes to the commits stored in the superproject are shown (this was the behavior until 1.7.0). Using \"all\" hides all changes to submodules.</p> </dd> <dt class=\"hdlist1\">--src-prefix=&lt;prefix&gt;</dt> <dd> <p>Show the given source prefix instead of \"a/\".</p> </dd> <dt class=\"hdlist1\">--dst-prefix=&lt;prefix&gt;</dt> <dd> <p>Show the given destination prefix instead of \"b/\".</p> </dd> <dt class=\"hdlist1\">--no-prefix</dt> <dd> <p>Do not show any source or destination prefix.</p> </dd> </dl> </div>  <p>For more detailed explanation on these common options, see also <a href=\"gitdiffcore\">gitdiffcore[7]</a>.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">&lt;tree-ish&gt;</dt> <dd> <p>The id of a tree object to diff against.</p> </dd> <dt class=\"hdlist1\">--cached</dt> <dd> <p>do not consider the on-disk file at all</p> </dd> <dt class=\"hdlist1\">-m</dt> <dd> <p>By default, files recorded in the index but not checked out are reported as deleted. This flag makes <code>git diff-index</code> say that all non-checked-out files are up to date.</p> </dd> </dl> </div>\n</div>   <h2 id=\"_raw_output_format\">Raw output format</h2> <div class=\"sectionbody\"> <p>The raw output format from \"git-diff-index\", \"git-diff-tree\", \"git-diff-files\" and \"git diff --raw\" are very similar.</p>   <p>These commands all compare two sets of things; what is compared differs:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">git-diff-index &lt;tree-ish&gt;</dt> <dd> <p>compares the &lt;tree-ish&gt; and the files on the filesystem.</p> </dd> <dt class=\"hdlist1\">git-diff-index --cached &lt;tree-ish&gt;</dt> <dd> <p>compares the &lt;tree-ish&gt; and the index.</p> </dd> <dt class=\"hdlist1\">git-diff-tree [-r] &lt;tree-ish-1&gt; &lt;tree-ish-2&gt; [&lt;pattern&gt;…​]</dt> <dd> <p>compares the trees named by the two arguments.</p> </dd> <dt class=\"hdlist1\">git-diff-files [&lt;pattern&gt;…​]</dt> <dd> <p>compares the index and the files on the filesystem.</p> </dd> </dl> </div>  <p>The \"git-diff-tree\" command begins its output by printing the hash of what is being compared. After that, all the commands print one output line per changed file.</p>   <p>An output line is formatted this way:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>in-place edit  :100644 100644 bcd1234... 0123456... M file0\ncopy-edit      :100644 100644 abcd123... 1234567... C68 file1 file2\nrename-edit    :100644 100644 abcd123... 1234567... R86 file1 file3\ncreate         :000000 100644 0000000... 1234567... A file4\ndelete         :100644 000000 1234567... 0000000... D file5\nunmerged       :000000 000000 0000000... 0000000... U file6</pre> </div> </div>  <p>That is, from the left to the right:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>a colon.</p> </li> <li> <p>mode for \"src\"; 000000 if creation or unmerged.</p> </li> <li> <p>a space.</p> </li> <li> <p>mode for \"dst\"; 000000 if deletion or unmerged.</p> </li> <li> <p>a space.</p> </li> <li> <p>sha1 for \"src\"; 0{40} if creation or unmerged.</p> </li> <li> <p>a space.</p> </li> <li> <p>sha1 for \"dst\"; 0{40} if creation, unmerged or \"look at work tree\".</p> </li> <li> <p>a space.</p> </li> <li> <p>status, followed by optional \"score\" number.</p> </li> <li> <p>a tab or a NUL when <code>-z</code> option is used.</p> </li> <li> <p>path for \"src\"</p> </li> <li> <p>a tab or a NUL when <code>-z</code> option is used; only exists for C or R.</p> </li> <li> <p>path for \"dst\"; only exists for C or R.</p> </li> <li> <p>an LF or a NUL when <code>-z</code> option is used, to terminate the record.</p> </li> </ol> </div>  <p>Possible status letters are:</p>  <div class=\"ulist\"> <ul> <li> <p>A: addition of a file</p> </li> <li> <p>C: copy of a file into a new one</p> </li> <li> <p>D: deletion of a file</p> </li> <li> <p>M: modification of the contents or mode of a file</p> </li> <li> <p>R: renaming of a file</p> </li> <li> <p>T: change in the type of the file</p> </li> <li> <p>U: file is unmerged (you must complete the merge before it can be committed)</p> </li> <li> <p>X: \"unknown\" change type (most probably a bug, please report it)</p> </li> </ul> </div>  <p>Status letters C and R are always followed by a score (denoting the percentage of similarity between the source and target of the move or copy). Status letter M may be followed by a score (denoting the percentage of dissimilarity) for file rewrites.</p>   <p>&lt;sha1&gt; is shown as all 0’s if a file is new on the filesystem and it is out of sync with the index.</p>   <p>Example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>:100644 100644 5be4a4...... 000000...... M file.c</pre> </div> </div>  <p>When <code>-z</code> option is not used, TAB, LF, and backslash characters in pathnames are represented as <code>\\t</code>, <code>\\n</code>, and <code>\\\\</code>, respectively.</p> </div>   <h2 id=\"_diff_format_for_merges\">Diff format for merges</h2> <div class=\"sectionbody\"> <p>\"git-diff-tree\", \"git-diff-files\" and \"git-diff --raw\" can take <code>-c</code> or <code>--cc</code> option to generate diff output also for merge commits. The output differs from the format described above in the following way:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>there is a colon for each parent</p> </li> <li> <p>there are more \"src\" modes and \"src\" sha1</p> </li> <li> <p>status is concatenated status characters for each parent</p> </li> <li> <p>no optional \"score\" number</p> </li> <li> <p>single path, only for \"dst\"</p> </li> </ol> </div>  <p>Example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>::100644 100644 100644 fabadb8... cc95eb0... 4866510... MM        describe.c</pre> </div> </div>  <p>Note that <code>combined diff</code> lists only files which were modified from all parents.</p> </div>   <h2 id=\"_generating_patches_with_p\">Generating patches with -p</h2> <div class=\"sectionbody\"> <p>When \"git-diff-index\", \"git-diff-tree\", or \"git-diff-files\" are run with a <code>-p</code> option, \"git diff\" without the <code>--raw</code> option, or \"git log\" with the \"-p\" option, they do not produce the output described above; instead they produce a patch file. You can customize the creation of such patches via the <code>GIT_EXTERNAL_DIFF</code> and the <code>GIT_DIFF_OPTS</code> environment variables.</p>   <p>What the -p option produces is slightly different from the traditional diff format:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>It is preceded with a \"git diff\" header that looks like this:</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>diff --git a/file1 b/file2</pre> </div> </div>  <p>The <code>a/</code> and <code>b/</code> filenames are the same unless rename/copy is involved. Especially, even for a creation or a deletion, <code>/dev/null</code> is <code>not</code> used in place of the <code>a/</code> or <code>b/</code> filenames.</p>   <p>When rename/copy is involved, <code>file1</code> and <code>file2</code> show the name of the source file of the rename/copy and the name of the file that rename/copy produces, respectively.</p>  </li> <li> <p>It is followed by one or more extended header lines:</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>old mode &lt;mode&gt;\nnew mode &lt;mode&gt;\ndeleted file mode &lt;mode&gt;\nnew file mode &lt;mode&gt;\ncopy from &lt;path&gt;\ncopy to &lt;path&gt;\nrename from &lt;path&gt;\nrename to &lt;path&gt;\nsimilarity index &lt;number&gt;\ndissimilarity index &lt;number&gt;\nindex &lt;hash&gt;..&lt;hash&gt; &lt;mode&gt;</pre> </div> </div>  <p>File modes are printed as 6-digit octal numbers including the file type and file permission bits.</p>   <p>Path names in extended headers do not include the <code>a/</code> and <code>b/</code> prefixes.</p>   <p>The similarity index is the percentage of unchanged lines, and the dissimilarity index is the percentage of changed lines. It is a rounded down integer, followed by a percent sign. The similarity index value of 100% is thus reserved for two equal files, while 100% dissimilarity means that no line from the old file made it into the new one.</p>   <p>The index line includes the SHA-1 checksum before and after the change. The &lt;mode&gt; is included if the file mode does not change; otherwise, separate lines indicate the old and the new mode.</p>  </li> <li> <p>TAB, LF, double quote and backslash characters in pathnames are represented as <code>\\t</code>, <code>\\n</code>, <code>\\\"</code> and <code>\\\\</code>, respectively. If there is need for such substitution then the whole pathname is put in double quotes.</p> </li> <li> <p>All the <code>file1</code> files in the output refer to files before the commit, and all the <code>file2</code> files refer to files after the commit. It is incorrect to apply each change to each file sequentially. For example, this patch will swap a and b:</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>diff --git a/a b/b\nrename from a\nrename to b\ndiff --git a/b b/a\nrename from b\nrename to a</pre> </div> </div> </li> </ol> </div>\n</div>   <h2 id=\"_combined_diff_format\">Combined diff format</h2> <div class=\"sectionbody\"> <p>Any diff-generating command can take the <code>-c</code> or <code>--cc</code> option to produce a <code>combined diff</code> when showing a merge. This is the default format when showing merges with <a href=\"git-diff\">git-diff[1]</a> or <a href=\"git-show\">git-show[1]</a>. Note also that you can give the <code>-m</code> option to any of these commands to force generation of diffs with individual parents of a merge.</p>   <p>A <code>combined diff</code> format looks like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>diff --combined describe.c\nindex fabadb8,cc95eb0..4866510\n--- a/describe.c\n+++ b/describe.c\n@@@ -98,20 -98,12 +98,20 @@@\n        return (a_date &gt; b_date) ? -1 : (a_date == b_date) ? 0 : 1;\n  }\n\n- static void describe(char *arg)\n -static void describe(struct commit *cmit, int last_one)\n++static void describe(char *arg, int last_one)\n  {\n +        unsigned char sha1[20];\n +        struct commit *cmit;\n        struct commit_list *list;\n        static int initialized = 0;\n        struct commit_name *n;\n\n +        if (get_sha1(arg, sha1) &lt; 0)\n +                usage(describe_usage);\n +        cmit = lookup_commit_reference(sha1);\n +        if (!cmit)\n +                usage(describe_usage);\n +\n        if (!initialized) {\n                initialized = 1;\n                for_each_ref(get_name);</pre> </div> </div> <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>It is preceded with a \"git diff\" header, that looks like this (when <code>-c</code> option is used):</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>diff --combined file</pre> </div> </div>  <p>or like this (when <code>--cc</code> option is used):</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>diff --cc file</pre> </div> </div> </li> <li> <p>It is followed by one or more extended header lines (this example shows a merge with two parents):</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>index &lt;hash&gt;,&lt;hash&gt;..&lt;hash&gt;\nmode &lt;mode&gt;,&lt;mode&gt;..&lt;mode&gt;\nnew file mode &lt;mode&gt;\ndeleted file mode &lt;mode&gt;,&lt;mode&gt;</pre> </div> </div>  <p>The <code>mode &lt;mode&gt;,&lt;mode&gt;..&lt;mode&gt;</code> line appears only if at least one of the &lt;mode&gt; is different from the rest. Extended headers with information about detected contents movement (renames and copying detection) are designed to work with diff of two &lt;tree-ish&gt; and are not used by combined diff format.</p>  </li> <li> <p>It is followed by two-line from-file/to-file header</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>--- a/file\n+++ b/file</pre> </div> </div>  <p>Similar to two-line header for traditional <code>unified</code> diff format, <code>/dev/null</code> is used to signal created or deleted files.</p>  </li> <li> <p>Chunk header format is modified to prevent people from accidentally feeding it to <code>patch -p1</code>. Combined diff format was created for review of merge commit changes, and was not meant for apply. The change is similar to the change in the extended <code>index</code> header:</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>@@@ &lt;from-file-range&gt; &lt;from-file-range&gt; &lt;to-file-range&gt; @@@</pre> </div> </div>  <p>There are (number of parents + 1) <code>@</code> characters in the chunk header for combined diff format.</p>  </li> </ol> </div>  <p>Unlike the traditional <code>unified</code> diff format, which shows two files A and B with a single column that has <code>-</code> (minus — appears in A but removed in B), <code>+</code> (plus — missing in A but added to B), or <code>\" \"</code> (space — unchanged) prefix, this format compares two or more files file1, file2,…​ with one file X, and shows how X differs from each of fileN. One column for each of fileN is prepended to the output line to note how X’s line is different from it.</p>   <p>A <code>-</code> character in the column N means that the line appears in fileN but it does not appear in the result. A <code>+</code> character in the column N means that the line appears in the result, and fileN does not have that line (in other words, the line was added, from the point of view of that parent).</p>   <p>In the above example output, the function signature was changed from both files (hence two <code>-</code> removals from both file1 and file2, plus <code>++</code> to mean one line that was added does not appear in either file1 or file2). Also eight other lines are the same from file1 but do not appear in file2 (hence prefixed with <code>+</code>).</p>   <p>When shown by <code>git diff-tree -c</code>, it compares the parents of a merge commit with the merge result (i.e. file1..fileN are the parents). When shown by <code>git diff-files -c</code>, it compares the two unresolved merge parents with the working tree file (i.e. file1 is stage 2 aka \"our version\", file2 is stage 3 aka \"their version\").</p> </div>   <h2 id=\"_other_diff_formats\">Other diff formats</h2> <div class=\"sectionbody\"> <p>The <code>--summary</code> option describes newly added, deleted, renamed and copied files. The <code>--stat</code> option adds diffstat(1) graph to the output. These options can be combined with other options, such as <code>-p</code>, and are meant for human consumption.</p>   <p>When showing a change that involves a rename or a copy, <code>--stat</code> output formats the pathnames compactly by combining common prefix and suffix of the pathnames. For example, a change that moves <code>arch/i386/Makefile</code> to <code>arch/x86/Makefile</code> while modifying 4 lines will be shown like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>arch/{i386 =&gt; x86}/Makefile    |   4 +--</pre> </div> </div>  <p>The <code>--numstat</code> option gives the diffstat(1) information but is designed for easier machine consumption. An entry in <code>--numstat</code> output looks like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>1        2        README\n3        1        arch/{i386 =&gt; x86}/Makefile</pre> </div> </div>  <p>That is, from left to right:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>the number of added lines;</p> </li> <li> <p>a tab;</p> </li> <li> <p>the number of deleted lines;</p> </li> <li> <p>a tab;</p> </li> <li> <p>pathname (possibly with rename/copy information);</p> </li> <li> <p>a newline.</p> </li> </ol> </div>  <p>When <code>-z</code> output option is in effect, the output is formatted this way:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>1        2        README NUL\n3        1        NUL arch/i386/Makefile NUL arch/x86/Makefile NUL</pre> </div> </div>  <p>That is:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>the number of added lines;</p> </li> <li> <p>a tab;</p> </li> <li> <p>the number of deleted lines;</p> </li> <li> <p>a tab;</p> </li> <li> <p>a NUL (only exists if renamed/copied);</p> </li> <li> <p>pathname in preimage;</p> </li> <li> <p>a NUL (only exists if renamed/copied);</p> </li> <li> <p>pathname in postimage (only exists if renamed/copied);</p> </li> <li> <p>a NUL.</p> </li> </ol> </div>  <p>The extra <code>NUL</code> before the preimage path in renamed case is to allow scripts that read the output to tell if the current record being read is a single-path record or a rename/copy record without reading ahead. After reading added and deleted lines, reading up to <code>NUL</code> would yield the pathname, but if that is <code>NUL</code>, the record will show two paths.</p> </div>   <h2 id=\"_operating_modes\">Operating modes</h2> <div class=\"sectionbody\"> <p>You can choose whether you want to trust the index file entirely (using the <code>--cached</code> flag) or ask the diff logic to show any files that don’t match the stat state as being \"tentatively changed\". Both of these operations are very useful indeed.</p> </div>   <h2 id=\"_cached_mode\">Cached mode</h2> <div class=\"sectionbody\"> <p>If <code>--cached</code> is specified, it allows you to ask:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>show me the differences between HEAD and the current index\ncontents (the ones I'd write using 'git write-tree')</pre> </div> </div>  <p>For example, let’s say that you have worked on your working directory, updated some files in the index and are ready to commit. You want to see exactly <strong>what</strong> you are going to commit, without having to write a new tree object and compare it that way, and to do that, you just do</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>git diff-index --cached HEAD</pre> </div> </div>  <p>Example: let’s say I had renamed <code>commit.c</code> to <code>git-commit.c</code>, and I had done an <code>update-index</code> to make that effective in the index file. <code>git diff-files</code> wouldn’t show anything at all, since the index file matches my working directory. But doing a <code>git diff-index</code> does:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>torvalds@ppc970:~/git&gt; git diff-index --cached HEAD\n-100644 blob    4161aecc6700a2eb579e842af0b7f22b98443f74        commit.c\n+100644 blob    4161aecc6700a2eb579e842af0b7f22b98443f74        git-commit.c</pre> </div> </div>  <p>You can see easily that the above is a rename.</p>   <p>In fact, <code>git diff-index --cached</code> <strong>should</strong> always be entirely equivalent to actually doing a <code>git write-tree</code> and comparing that. Except this one is much nicer for the case where you just want to check where you are.</p>   <p>So doing a <code>git diff-index --cached</code> is basically very useful when you are asking yourself \"what have I already marked for being committed, and what’s the difference to a previous tree\".</p> </div>   <h2 id=\"_non_cached_mode\">Non-cached mode</h2> <div class=\"sectionbody\"> <p>The \"non-cached\" mode takes a different approach, and is potentially the more useful of the two in that what it does can’t be emulated with a <code>git write-tree</code> + <code>git diff-tree</code>. Thus that’s the default mode. The non-cached version asks the question:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>show me the differences between HEAD and the currently checked out\ntree - index contents _and_ files that aren't up-to-date</pre> </div> </div>  <p>which is obviously a very useful question too, since that tells you what you <strong>could</strong> commit. Again, the output matches the <code>git diff-tree -r</code> output to a tee, but with a twist.</p>   <p>The twist is that if some file doesn’t match the index, we don’t have a backing store thing for it, and we use the magic \"all-zero\" sha1 to show that. So let’s say that you have edited <code>kernel/sched.c</code>, but have not actually done a <code>git update-index</code> on it yet - there is no \"object\" associated with the new state, and you get:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>torvalds@ppc970:~/v2.6/linux&gt; git diff-index --abbrev HEAD\n:100644 100664 7476bb... 000000...      kernel/sched.c</pre> </div> </div>  <p>i.e., it shows that the tree has changed, and that <code>kernel/sched.c</code> has is not up-to-date and may contain new stuff. The all-zero sha1 means that to get the real diff, you need to look at the object in the working directory directly rather than do an object-to-object diff.</p>  <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> As with other commands of this type, <em>git diff-index</em> does not actually look at the contents of the file at all. So maybe <code>kernel/sched.c</code> hasn’t actually changed, and it’s just that you touched it. In either case, it’s a note that you need to <em>git update-index</em> it to make the index be in sync. </td> </tr> </table> </div> <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> You can have a mixture of files show up as \"has been updated\" and \"is still dirty in the working directory\" together. You can always tell which file is in which state, since the \"has been updated\" ones show a valid sha1, and the \"not in sync with the index\" ones will always have the special all-zero sha1. </td> </tr> </table> </div>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-diff-index\" class=\"_attribution-link\">https://git-scm.com/docs/git-diff-index</a>\n  </p>\n</div>\n","git-prune":"<h1>git-prune</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-prune - Prune all unreachable objects from the object database</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git prune [-n] [-v] [--expire &lt;expire&gt;] [--] [&lt;head&gt;…​]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\">\n<div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> In most cases, users should run <em>git gc</em>, which calls <em>git prune</em>. See the section \"NOTES\", below. </td> </tr> </table> </div>  <p>This runs <code>git fsck --unreachable</code> using all the refs available in <code>refs/</code>, optionally with additional set of objects specified on the command line, and prunes all unpacked objects unreachable from any of these head objects from the object database. In addition, it prunes the unpacked objects that are also found in packs by running <code>git prune-packed</code>. It also removes entries from .git/shallow that are not reachable by any ref.</p>   <p>Note that unreachable, packed objects will remain. If this is not desired, see <a href=\"git-repack\">git-repack[1]</a>.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-n</dt> <dt class=\"hdlist1\">--dry-run</dt> <dd> <p>Do not remove anything; just report what it would remove.</p> </dd> <dt class=\"hdlist1\">-v</dt> <dt class=\"hdlist1\">--verbose</dt> <dd> <p>Report all removed objects.</p> </dd> <dt class=\"hdlist1\">--</dt> <dd> <p>Do not interpret any more arguments as options.</p> </dd> <dt class=\"hdlist1\">--expire &lt;time&gt;</dt> <dd> <p>Only expire loose objects older than &lt;time&gt;.</p> </dd> <dt class=\"hdlist1\">&lt;head&gt;…​</dt> <dd> <p>In addition to objects reachable from any of our references, keep objects reachable from listed &lt;head&gt;s.</p> </dd> </dl> </div></div>   <h2 id=\"_example\">Example</h2> <div class=\"sectionbody\"> <p>To prune objects not used by your repository or another that borrows from your repository via its <code>.git/objects/info/alternates</code>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git prune $(cd ../another &amp;&amp; git rev-parse --all)</pre> </div> </div>\n</div>   <h2 id=\"_notes\">Notes</h2> <div class=\"sectionbody\"> <p>In most cases, users will not need to call <code>git prune</code> directly, but should instead call <code>git gc</code>, which handles pruning along with many other housekeeping tasks.</p>   <p>For a description of which objects are considered for pruning, see <code>git fsck</code>'s --unreachable option.</p> </div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-fsck\">git-fsck[1]</a>, <a href=\"git-gc\">git-gc[1]</a>, <a href=\"git-reflog\">git-reflog[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-prune\" class=\"_attribution-link\">https://git-scm.com/docs/git-prune</a>\n  </p>\n</div>\n","gitrevisions":"<h1>gitrevisions</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>gitrevisions - specifying revisions and ranges for Git</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"> <p>gitrevisions</p> </div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Many Git commands take revision parameters as arguments. Depending on the command, they denote a specific commit or, for commands which walk the revision graph (such as <a href=\"git-log\">git-log[1]</a>), all commits which can be reached from that commit. In the latter case one can also specify a range of revisions explicitly.</p>   <p>In addition, some Git commands (such as <a href=\"git-show\">git-show[1]</a>) also take revision parameters which denote other objects than commits, e.g. blobs (\"files\") or trees (\"directories of files\").</p> </div>   <h2 id=\"_specifying_revisions\">Specifying revisions</h2> <div class=\"sectionbody\"> <p>A revision parameter <code>&lt;rev&gt;</code> typically, but not necessarily, names a commit object. It uses what is called an <code>extended SHA-1</code> syntax. Here are various ways to spell object names. The ones listed near the end of this list name trees and blobs contained in a commit.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">\n<em>&lt;sha1&gt;</em>, e.g. <em>dae86e1950b1277e545cee180551750029cfe735</em>, <em>dae86e</em>\n</dt> <dd> <p>The full SHA-1 object name (40-byte hexadecimal string), or a leading substring that is unique within the repository. E.g. dae86e1950b1277e545cee180551750029cfe735 and dae86e both name the same commit object if there is no other object in your repository whose object name starts with dae86e.</p> </dd> <dt class=\"hdlist1\">\n<em>&lt;describeOutput&gt;</em>, e.g. <em>v1.7.4.2-679-g3bee7fb</em>\n</dt> <dd> <p>Output from <code>git describe</code>; i.e. a closest tag, optionally followed by a dash and a number of commits, followed by a dash, a <code>g</code>, and an abbreviated object name.</p> </dd> <dt class=\"hdlist1\">\n<em>&lt;refname&gt;</em>, e.g. <em>master</em>, <em>heads/master</em>, <em>refs/heads/master</em>\n</dt> <dd> <p>A symbolic ref name. E.g. <code>master</code> typically means the commit object referenced by <code>refs/heads/master</code>. If you happen to have both <code>heads/master</code> and <code>tags/master</code>, you can explicitly say <code>heads/master</code> to tell Git which one you mean. When ambiguous, a <code>&lt;refname&gt;</code> is disambiguated by taking the first match in the following rules:</p> <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>If <code>$GIT_DIR/&lt;refname&gt;</code> exists, that is what you mean (this is usually useful only for <code>HEAD</code>, <code>FETCH_HEAD</code>, <code>ORIG_HEAD</code>, <code>MERGE_HEAD</code> and <code>CHERRY_PICK_HEAD</code>);</p> </li> <li> <p>otherwise, <code>refs/&lt;refname&gt;</code> if it exists;</p> </li> <li> <p>otherwise, <code>refs/tags/&lt;refname&gt;</code> if it exists;</p> </li> <li> <p>otherwise, <code>refs/heads/&lt;refname&gt;</code> if it exists;</p> </li> <li> <p>otherwise, <code>refs/remotes/&lt;refname&gt;</code> if it exists;</p> </li> <li> <p>otherwise, <code>refs/remotes/&lt;refname&gt;/HEAD</code> if it exists.</p>  <p><code>HEAD</code> names the commit on which you based the changes in the working tree. <code>FETCH_HEAD</code> records the branch which you fetched from a remote repository with your last <code>git fetch</code> invocation. <code>ORIG_HEAD</code> is created by commands that move your <code>HEAD</code> in a drastic way, to record the position of the <code>HEAD</code> before their operation, so that you can easily change the tip of the branch back to the state before you ran them. <code>MERGE_HEAD</code> records the commit(s) which you are merging into your branch when you run <code>git merge</code>. <code>CHERRY_PICK_HEAD</code> records the commit which you are cherry-picking when you run <code>git cherry-pick</code>.</p>   <p>Note that any of the <code>refs/*</code> cases above may come either from the <code>$GIT_DIR/refs</code> directory or from the <code>$GIT_DIR/packed-refs</code> file. While the ref name encoding is unspecified, UTF-8 is preferred as some output processing may assume ref names in UTF-8.</p>  </li> </ol> </div> </dd> <dt class=\"hdlist1\"><em>@</em></dt> <dd> <p><code>@</code> alone is a shortcut for <code>HEAD</code>.</p> </dd> <dt class=\"hdlist1\">\n<em>&lt;refname&gt;@{&lt;date&gt;}</em>, e.g. <em>master@{yesterday}</em>, <em>HEAD@{5 minutes ago}</em>\n</dt> <dd> <p>A ref followed by the suffix <code>@</code> with a date specification enclosed in a brace pair (e.g. <code>{yesterday}</code>, <code>{1 month 2 weeks 3 days 1 hour 1 second ago}</code> or <code>{1979-02-26 18:30:00}</code>) specifies the value of the ref at a prior point in time. This suffix may only be used immediately following a ref name and the ref must have an existing log (<code>$GIT_DIR/logs/&lt;ref&gt;</code>). Note that this looks up the state of your <strong>local</strong> ref at a given time; e.g., what was in your local <code>master</code> branch last week. If you want to look at commits made during certain times, see <code>--since</code> and <code>--until</code>.</p> </dd> <dt class=\"hdlist1\">\n<em>&lt;refname&gt;@{&lt;n&gt;}</em>, e.g. <em>master@{1}</em>\n</dt> <dd> <p>A ref followed by the suffix <code>@</code> with an ordinal specification enclosed in a brace pair (e.g. <code>{1}</code>, <code>{15}</code>) specifies the n-th prior value of that ref. For example <code>master@{1}</code> is the immediate prior value of <code>master</code> while <code>master@{5}</code> is the 5th prior value of <code>master</code>. This suffix may only be used immediately following a ref name and the ref must have an existing log (<code>$GIT_DIR/logs/&lt;refname&gt;</code>).</p> </dd> <dt class=\"hdlist1\">\n<em>@{&lt;n&gt;}</em>, e.g. <em>@{1}</em>\n</dt> <dd> <p>You can use the <code>@</code> construct with an empty ref part to get at a reflog entry of the current branch. For example, if you are on branch <code>blabla</code> then <code>@{1}</code> means the same as <code>blabla@{1}</code>.</p> </dd> <dt class=\"hdlist1\">\n<em>@{-&lt;n&gt;}</em>, e.g. <em>@{-1}</em>\n</dt> <dd> <p>The construct <code>@{-&lt;n&gt;}</code> means the &lt;n&gt;th branch/commit checked out before the current one.</p> </dd> <dt class=\"hdlist1\">\n<em>&lt;branchname&gt;@{upstream}</em>, e.g. <em>master@{upstream}</em>, <em>@{u}</em>\n</dt> <dd> <p>The suffix <code>@{upstream}</code> to a branchname (short form <code>&lt;branchname&gt;@{u}</code>) refers to the branch that the branch specified by branchname is set to build on top of (configured with <code>branch.&lt;name&gt;.remote</code> and <code>branch.&lt;name&gt;.merge</code>). A missing branchname defaults to the current one.</p> </dd> <dt class=\"hdlist1\">\n<em>&lt;branchname&gt;@{push}</em>, e.g. <em>master@{push}</em>, <em>@{push}</em>\n</dt> <dd> <p>The suffix <code>@{push}</code> reports the branch \"where we would push to\" if <code>git push</code> were run while <code>branchname</code> was checked out (or the current <code>HEAD</code> if no branchname is specified). Since our push destination is in a remote repository, of course, we report the local tracking branch that corresponds to that branch (i.e., something in <code>refs/remotes/</code>).</p>  <p>Here’s an example to make it more clear:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git config push.default current\n$ git config remote.pushdefault myfork\n$ git checkout -b mybranch origin/master\n\n$ git rev-parse --symbolic-full-name @{upstream}\nrefs/remotes/origin/master\n\n$ git rev-parse --symbolic-full-name @{push}\nrefs/remotes/myfork/mybranch</pre> </div> </div>  <p>Note in the example that we set up a triangular workflow, where we pull from one location and push to another. In a non-triangular workflow, <code>@{push}</code> is the same as <code>@{upstream}</code>, and there is no need for it.</p>  </dd> <dt class=\"hdlist1\">\n<em>&lt;rev&gt;^</em>, e.g. <em>HEAD^, v1.5.1^0</em>\n</dt> <dd> <p>A suffix <code>^</code> to a revision parameter means the first parent of that commit object. <code>^&lt;n&gt;</code> means the &lt;n&gt;th parent (i.e. <code>&lt;rev&gt;^</code> is equivalent to <code>&lt;rev&gt;^1</code>). As a special rule, <code>&lt;rev&gt;^0</code> means the commit itself and is used when <code>&lt;rev&gt;</code> is the object name of a tag object that refers to a commit object.</p> </dd> <dt class=\"hdlist1\">\n<em>&lt;rev&gt;~&lt;n&gt;</em>, e.g. <em>master~3</em>\n</dt> <dd> <p>A suffix <code>~&lt;n&gt;</code> to a revision parameter means the commit object that is the &lt;n&gt;th generation ancestor of the named commit object, following only the first parents. I.e. <code>&lt;rev&gt;~3</code> is equivalent to <code>&lt;rev&gt;^^^</code> which is equivalent to <code>&lt;rev&gt;^1^1^1</code>. See below for an illustration of the usage of this form.</p> </dd> <dt class=\"hdlist1\">\n<em>&lt;rev&gt;^{&lt;type&gt;}</em>, e.g. <em>v0.99.8^{commit}</em>\n</dt> <dd> <p>A suffix <code>^</code> followed by an object type name enclosed in brace pair means dereference the object at <code>&lt;rev&gt;</code> recursively until an object of type <code>&lt;type&gt;</code> is found or the object cannot be dereferenced anymore (in which case, barf). For example, if <code>&lt;rev&gt;</code> is a commit-ish, <code>&lt;rev&gt;^{commit}</code> describes the corresponding commit object. Similarly, if <code>&lt;rev&gt;</code> is a tree-ish, <code>&lt;rev&gt;^{tree}</code> describes the corresponding tree object. <code>&lt;rev&gt;^0</code> is a short-hand for <code>&lt;rev&gt;^{commit}</code>.</p>  <p><code>rev^{object}</code> can be used to make sure <code>rev</code> names an object that exists, without requiring <code>rev</code> to be a tag, and without dereferencing <code>rev</code>; because a tag is already an object, it does not have to be dereferenced even once to get to an object.</p>   <p><code>rev^{tag}</code> can be used to ensure that <code>rev</code> identifies an existing tag object.</p>  </dd> <dt class=\"hdlist1\">\n<em>&lt;rev&gt;^{}</em>, e.g. <em>v0.99.8^{}</em>\n</dt> <dd> <p>A suffix <code>^</code> followed by an empty brace pair means the object could be a tag, and dereference the tag recursively until a non-tag object is found.</p> </dd> <dt class=\"hdlist1\">\n<em>&lt;rev&gt;^{/&lt;text&gt;}</em>, e.g. <em>HEAD^{/fix nasty bug}</em>\n</dt> <dd> <p>A suffix <code>^</code> to a revision parameter, followed by a brace pair that contains a text led by a slash, is the same as the <code>:/fix nasty bug</code> syntax below except that it returns the youngest matching commit which is reachable from the <code>&lt;rev&gt;</code> before <code>^</code>.</p> </dd> <dt class=\"hdlist1\">\n<em>:/&lt;text&gt;</em>, e.g. <em>:/fix nasty bug</em>\n</dt> <dd> <p>A colon, followed by a slash, followed by a text, names a commit whose commit message matches the specified regular expression. This name returns the youngest matching commit which is reachable from any ref. The regular expression can match any part of the commit message. To match messages starting with a string, one can use e.g. <code>:/^foo</code>. The special sequence <code>:/!</code> is reserved for modifiers to what is matched. <code>:/!-foo</code> performs a negative match, while <code>:/!!foo</code> matches a literal <code>!</code> character, followed by <code>foo</code>. Any other sequence beginning with <code>:/!</code> is reserved for now.</p> </dd> <dt class=\"hdlist1\">\n<em>&lt;rev&gt;:&lt;path&gt;</em>, e.g. <em>HEAD:README</em>, <em>:README</em>, <em>master:./README</em>\n</dt> <dd> <p>A suffix <code>:</code> followed by a path names the blob or tree at the given path in the tree-ish object named by the part before the colon. <code>:path</code> (with an empty part before the colon) is a special case of the syntax described next: content recorded in the index at the given path. A path starting with <code>./</code> or <code>../</code> is relative to the current working directory. The given path will be converted to be relative to the working tree’s root directory. This is most useful to address a blob or tree from a commit or tree that has the same tree structure as the working tree.</p> </dd> <dt class=\"hdlist1\">\n<em>:&lt;n&gt;:&lt;path&gt;</em>, e.g. <em>:0:README</em>, <em>:README</em>\n</dt> <dd> <p>A colon, optionally followed by a stage number (0 to 3) and a colon, followed by a path, names a blob object in the index at the given path. A missing stage number (and the colon that follows it) names a stage 0 entry. During a merge, stage 1 is the common ancestor, stage 2 is the target branch’s version (typically the current branch), and stage 3 is the version from the branch which is being merged.</p> </dd> </dl> </div>  <p>Here is an illustration, by Jon Loeliger. Both commit nodes B and C are parents of commit node A. Parent commits are ordered left-to-right.</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>G   H   I   J\n \\ /     \\ /\n  D   E   F\n   \\  |  / \\\n    \\ | /   |\n     \\|/    |\n      B     C\n       \\   /\n        \\ /\n         A</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>A =      = A^0\nB = A^   = A^1     = A~1\nC = A^2  = A^2\nD = A^^  = A^1^1   = A~2\nE = B^2  = A^^2\nF = B^3  = A^^3\nG = A^^^ = A^1^1^1 = A~3\nH = D^2  = B^^2    = A^^^2  = A~2^2\nI = F^   = B^3^    = A^^3^\nJ = F^2  = B^3^2   = A^^3^2</pre> </div> </div>\n</div>   <h2 id=\"_specifying_ranges\">Specifying ranges</h2> <div class=\"sectionbody\"> <p>History traversing commands such as <code>git log</code> operate on a set of commits, not just a single commit. To these commands, specifying a single revision with the notation described in the previous section means the set of commits reachable from that commit, following the commit ancestry chain.</p>   <p>To exclude commits reachable from a commit, a prefix <code>^</code> notation is used. E.g. <code>^r1 r2</code> means commits reachable from <code>r2</code> but exclude the ones reachable from <code>r1</code>.</p>   <p>This set operation appears so often that there is a shorthand for it. When you have two commits <code>r1</code> and <code>r2</code> (named according to the syntax explained in SPECIFYING REVISIONS above), you can ask for commits that are reachable from r2 excluding those that are reachable from r1 by <code>^r1 r2</code> and it can be written as <code>r1..r2</code>.</p>   <p>A similar notation <code>r1...r2</code> is called symmetric difference of <code>r1</code> and <code>r2</code> and is defined as <code>r1 r2 --not $(git merge-base --all r1 r2)</code>. It is the set of commits that are reachable from either one of <code>r1</code> or <code>r2</code> but not from both.</p>   <p>In these two shorthands, you can omit one end and let it default to HEAD. For example, <code>origin..</code> is a shorthand for <code>origin..HEAD</code> and asks \"What did I do since I forked from the origin branch?\" Similarly, <code>..origin</code> is a shorthand for <code>HEAD..origin</code> and asks \"What did the origin do since I forked from them?\" Note that <code>..</code> would mean <code>HEAD..HEAD</code> which is an empty range that is both reachable and unreachable from HEAD.</p>   <p>Two other shorthands for naming a set that is formed by a commit and its parent commits exist. The <code>r1^@</code> notation means all parents of <code>r1</code>. <code>r1^!</code> includes commit <code>r1</code> but excludes all of its parents.</p>   <p>To summarize:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><em>&lt;rev&gt;</em></dt> <dd> <p>Include commits that are reachable from (i.e. ancestors of) &lt;rev&gt;.</p> </dd> <dt class=\"hdlist1\"><em>^&lt;rev&gt;</em></dt> <dd> <p>Exclude commits that are reachable from (i.e. ancestors of) &lt;rev&gt;.</p> </dd> <dt class=\"hdlist1\"><em>&lt;rev1&gt;..&lt;rev2&gt;</em></dt> <dd> <p>Include commits that are reachable from &lt;rev2&gt; but exclude those that are reachable from &lt;rev1&gt;. When either &lt;rev1&gt; or &lt;rev2&gt; is omitted, it defaults to <code>HEAD</code>.</p> </dd> <dt class=\"hdlist1\"><em>&lt;rev1&gt;...&lt;rev2&gt;</em></dt> <dd> <p>Include commits that are reachable from either &lt;rev1&gt; or &lt;rev2&gt; but exclude those that are reachable from both. When either &lt;rev1&gt; or &lt;rev2&gt; is omitted, it defaults to <code>HEAD</code>.</p> </dd> <dt class=\"hdlist1\">\n<em>&lt;rev&gt;^@</em>, e.g. <em>HEAD^@</em>\n</dt> <dd> <p>A suffix <code>^</code> followed by an at sign is the same as listing all parents of <code>&lt;rev&gt;</code> (meaning, include anything reachable from its parents, but not the commit itself).</p> </dd> <dt class=\"hdlist1\">\n<em>&lt;rev&gt;^!</em>, e.g. <em>HEAD^!</em>\n</dt> <dd> <p>A suffix <code>^</code> followed by an exclamation mark is the same as giving commit <code>&lt;rev&gt;</code> and then all its parents prefixed with <code>^</code> to exclude them (and their ancestors).</p> </dd> </dl> </div>  <p>Here are a handful of examples:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>D                G H D\nD F              G H I J D F\n^G D             H D\n^D B             E I J F B\nB..C             C\nB...C            G H D E B C\n^D B C           E I J F B C\nC                I J F C\nC^@              I J F\nC^!              C\nF^! D            G H D F</pre> </div> </div>\n</div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-rev-parse\">git-rev-parse[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/gitrevisions\" class=\"_attribution-link\">https://git-scm.com/docs/gitrevisions</a>\n  </p>\n</div>\n","git-rev-list":"<h1>git-rev-list</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-rev-list - Lists commit objects in reverse chronological order</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git rev-list [ --max-count=&lt;number&gt; ]\n             [ --skip=&lt;number&gt; ]\n             [ --max-age=&lt;timestamp&gt; ]\n             [ --min-age=&lt;timestamp&gt; ]\n             [ --sparse ]\n             [ --merges ]\n             [ --no-merges ]\n             [ --min-parents=&lt;number&gt; ]\n             [ --no-min-parents ]\n             [ --max-parents=&lt;number&gt; ]\n             [ --no-max-parents ]\n             [ --first-parent ]\n             [ --remove-empty ]\n             [ --full-history ]\n             [ --not ]\n             [ --all ]\n             [ --branches[=&lt;pattern&gt;] ]\n             [ --tags[=&lt;pattern&gt;] ]\n             [ --remotes[=&lt;pattern&gt;] ]\n             [ --glob=&lt;glob-pattern&gt; ]\n             [ --ignore-missing ]\n             [ --stdin ]\n             [ --quiet ]\n             [ --topo-order ]\n             [ --parents ]\n             [ --timestamp ]\n             [ --left-right ]\n             [ --left-only ]\n             [ --right-only ]\n             [ --cherry-mark ]\n             [ --cherry-pick ]\n             [ --encoding=&lt;encoding&gt; ]\n             [ --(author|committer|grep)=&lt;pattern&gt; ]\n             [ --regexp-ignore-case | -i ]\n             [ --extended-regexp | -E ]\n             [ --fixed-strings | -F ]\n             [ --date=&lt;format&gt;]\n             [ [ --objects | --objects-edge | --objects-edge-aggressive ]\n               [ --unpacked ] ]\n             [ --pretty | --header ]\n             [ --bisect ]\n             [ --bisect-vars ]\n             [ --bisect-all ]\n             [ --merge ]\n             [ --reverse ]\n             [ --walk-reflogs ]\n             [ --no-walk ] [ --do-walk ]\n             [ --count ]\n             [ --use-bitmap-index ]\n             &lt;commit&gt;…​ [ -- &lt;paths&gt;…​ ]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>List commits that are reachable by following the <code>parent</code> links from the given commit(s), but exclude commits that are reachable from the one(s) given with a <code>^</code> in front of them. The output is given in reverse chronological order by default.</p>   <p>You can think of this as a set operation. Commits given on the command line form a set of commits that are reachable from any of them, and then commits reachable from any of the ones given with <code>^</code> in front are subtracted from that set. The remaining commits are what comes out in the command’s output. Various other options and paths parameters can be used to further limit the result.</p>   <p>Thus, the following command:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        $ git rev-list foo bar ^baz</pre> </div> </div>  <p>means \"list all the commits which are reachable from <code>foo</code> or <code>bar</code>, but not from <code>baz</code>\".</p>   <p>A special notation \"<code>&lt;commit1&gt;</code>..<code>&lt;commit2&gt;</code>\" can be used as a short-hand for \"^'&lt;commit1&gt;' <code>&lt;commit2&gt;</code>\". For example, either of the following may be used interchangeably:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        $ git rev-list origin..HEAD\n        $ git rev-list HEAD ^origin</pre> </div> </div>  <p>Another special notation is \"<code>&lt;commit1&gt;</code>…​<code>&lt;commit2&gt;</code>\" which is useful for merges. The resulting set of commits is the symmetric difference between the two operands. The following two commands are equivalent:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        $ git rev-list A B --not $(git merge-base --all A B)\n        $ git rev-list A...B</pre> </div> </div>  <p><code>rev-list</code> is a very essential Git command, since it provides the ability to build and traverse commit ancestry graphs. For this reason, it has a lot of different options that enables it to be used by commands as different as <code>git bisect</code> and <code>git repack</code>.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\">\n<div class=\"sect2\"> <h3 id=\"_commit_limiting\">Commit Limiting</h3>  <p>Besides specifying a range of commits that should be listed using the special notations explained in the description, additional commit limiting may be applied.</p>   <p>Using more options generally further limits the output (e.g. <code>--since=&lt;date1&gt;</code> limits to commits newer than <code>&lt;date1&gt;</code>, and using it with <code>--grep=&lt;pattern&gt;</code> further limits to commits whose log message has a line that matches <code>&lt;pattern&gt;</code>), unless otherwise noted.</p>   <p>Note that these are applied before commit ordering and formatting options, such as <code>--reverse</code>.</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-&lt;number&gt;</dt> <dt class=\"hdlist1\">-n &lt;number&gt;</dt> <dt class=\"hdlist1\">--max-count=&lt;number&gt;</dt> <dd> <p>Limit the number of commits to output.</p> </dd> <dt class=\"hdlist1\">--skip=&lt;number&gt;</dt> <dd> <p>Skip <code>number</code> commits before starting to show the commit output.</p> </dd> <dt class=\"hdlist1\">--since=&lt;date&gt;</dt> <dt class=\"hdlist1\">--after=&lt;date&gt;</dt> <dd> <p>Show commits more recent than a specific date.</p> </dd> <dt class=\"hdlist1\">--until=&lt;date&gt;</dt> <dt class=\"hdlist1\">--before=&lt;date&gt;</dt> <dd> <p>Show commits older than a specific date.</p> </dd> <dt class=\"hdlist1\">--max-age=&lt;timestamp&gt;</dt> <dt class=\"hdlist1\">--min-age=&lt;timestamp&gt;</dt> <dd> <p>Limit the commits output to specified time range.</p> </dd> <dt class=\"hdlist1\">--author=&lt;pattern&gt;</dt> <dt class=\"hdlist1\">--committer=&lt;pattern&gt;</dt> <dd> <p>Limit the commits output to ones with author/committer header lines that match the specified pattern (regular expression). With more than one <code>--author=&lt;pattern&gt;</code>, commits whose author matches any of the given patterns are chosen (similarly for multiple <code>--committer=&lt;pattern&gt;</code>).</p> </dd> <dt class=\"hdlist1\">--grep-reflog=&lt;pattern&gt;</dt> <dd> <p>Limit the commits output to ones with reflog entries that match the specified pattern (regular expression). With more than one <code>--grep-reflog</code>, commits whose reflog message matches any of the given patterns are chosen. It is an error to use this option unless <code>--walk-reflogs</code> is in use.</p> </dd> <dt class=\"hdlist1\">--grep=&lt;pattern&gt;</dt> <dd> <p>Limit the commits output to ones with log message that matches the specified pattern (regular expression). With more than one <code>--grep=&lt;pattern&gt;</code>, commits whose message matches any of the given patterns are chosen (but see <code>--all-match</code>).</p> </dd> <dt class=\"hdlist1\">--all-match</dt> <dd> <p>Limit the commits output to ones that match all given <code>--grep</code>, instead of ones that match at least one.</p> </dd> <dt class=\"hdlist1\">--invert-grep</dt> <dd> <p>Limit the commits output to ones with log message that do not match the pattern specified with <code>--grep=&lt;pattern&gt;</code>.</p> </dd> <dt class=\"hdlist1\">-i</dt> <dt class=\"hdlist1\">--regexp-ignore-case</dt> <dd> <p>Match the regular expression limiting patterns without regard to letter case.</p> </dd> <dt class=\"hdlist1\">--basic-regexp</dt> <dd> <p>Consider the limiting patterns to be basic regular expressions; this is the default.</p> </dd> <dt class=\"hdlist1\">-E</dt> <dt class=\"hdlist1\">--extended-regexp</dt> <dd> <p>Consider the limiting patterns to be extended regular expressions instead of the default basic regular expressions.</p> </dd> <dt class=\"hdlist1\">-F</dt> <dt class=\"hdlist1\">--fixed-strings</dt> <dd> <p>Consider the limiting patterns to be fixed strings (don’t interpret pattern as a regular expression).</p> </dd> <dt class=\"hdlist1\">--perl-regexp</dt> <dd> <p>Consider the limiting patterns to be Perl-compatible regular expressions. Requires libpcre to be compiled in.</p> </dd> <dt class=\"hdlist1\">--remove-empty</dt> <dd> <p>Stop when a given path disappears from the tree.</p> </dd> <dt class=\"hdlist1\">--merges</dt> <dd> <p>Print only merge commits. This is exactly the same as <code>--min-parents=2</code>.</p> </dd> <dt class=\"hdlist1\">--no-merges</dt> <dd> <p>Do not print commits with more than one parent. This is exactly the same as <code>--max-parents=1</code>.</p> </dd> <dt class=\"hdlist1\">--min-parents=&lt;number&gt;</dt> <dt class=\"hdlist1\">--max-parents=&lt;number&gt;</dt> <dt class=\"hdlist1\">--no-min-parents</dt> <dt class=\"hdlist1\">--no-max-parents</dt> <dd> <p>Show only commits which have at least (or at most) that many parent commits. In particular, <code>--max-parents=1</code> is the same as <code>--no-merges</code>, <code>--min-parents=2</code> is the same as <code>--merges</code>. <code>--max-parents=0</code> gives all root commits and <code>--min-parents=3</code> all octopus merges.</p>  <p><code>--no-min-parents</code> and <code>--no-max-parents</code> reset these limits (to no limit) again. Equivalent forms are <code>--min-parents=0</code> (any commit has 0 or more parents) and <code>--max-parents=-1</code> (negative numbers denote no upper limit).</p>  </dd> <dt class=\"hdlist1\">--first-parent</dt> <dd> <p>Follow only the first parent commit upon seeing a merge commit. This option can give a better overview when viewing the evolution of a particular topic branch, because merges into a topic branch tend to be only about adjusting to updated upstream from time to time, and this option allows you to ignore the individual commits brought in to your history by such a merge. Cannot be combined with --bisect.</p> </dd> <dt class=\"hdlist1\">--not</dt> <dd> <p>Reverses the meaning of the <code>^</code> prefix (or lack thereof) for all following revision specifiers, up to the next <code>--not</code>.</p> </dd> <dt class=\"hdlist1\">--all</dt> <dd> <p>Pretend as if all the refs in <code>refs/</code> are listed on the command line as <code>&lt;commit&gt;</code>.</p> </dd> <dt class=\"hdlist1\">--branches[=&lt;pattern&gt;]</dt> <dd> <p>Pretend as if all the refs in <code>refs/heads</code> are listed on the command line as <code>&lt;commit&gt;</code>. If <code>&lt;pattern&gt;</code> is given, limit branches to ones matching given shell glob. If pattern lacks <code>?</code>, <code>*</code>, or <code>[</code>, <code>/*</code> at the end is implied.</p> </dd> <dt class=\"hdlist1\">--tags[=&lt;pattern&gt;]</dt> <dd> <p>Pretend as if all the refs in <code>refs/tags</code> are listed on the command line as <code>&lt;commit&gt;</code>. If <code>&lt;pattern&gt;</code> is given, limit tags to ones matching given shell glob. If pattern lacks <code>?</code>, <code>*</code>, or <code>[</code>, <code>/*</code> at the end is implied.</p> </dd> <dt class=\"hdlist1\">--remotes[=&lt;pattern&gt;]</dt> <dd> <p>Pretend as if all the refs in <code>refs/remotes</code> are listed on the command line as <code>&lt;commit&gt;</code>. If <code>&lt;pattern&gt;</code> is given, limit remote-tracking branches to ones matching given shell glob. If pattern lacks <code>?</code>, <code>*</code>, or <code>[</code>, <code>/*</code> at the end is implied.</p> </dd> <dt class=\"hdlist1\">--glob=&lt;glob-pattern&gt;</dt> <dd> <p>Pretend as if all the refs matching shell glob <code>&lt;glob-pattern&gt;</code> are listed on the command line as <code>&lt;commit&gt;</code>. Leading <code>refs/</code>, is automatically prepended if missing. If pattern lacks <code>?</code>, <code>*</code>, or <code>[</code>, <code>/*</code> at the end is implied.</p> </dd> <dt class=\"hdlist1\">--exclude=&lt;glob-pattern&gt;</dt> <dd> <p>Do not include refs matching <code>&lt;glob-pattern&gt;</code> that the next <code>--all</code>, <code>--branches</code>, <code>--tags</code>, <code>--remotes</code>, or <code>--glob</code> would otherwise consider. Repetitions of this option accumulate exclusion patterns up to the next <code>--all</code>, <code>--branches</code>, <code>--tags</code>, <code>--remotes</code>, or <code>--glob</code> option (other options or arguments do not clear accumulated patterns).</p>  <p>The patterns given should not begin with <code>refs/heads</code>, <code>refs/tags</code>, or <code>refs/remotes</code> when applied to <code>--branches</code>, <code>--tags</code>, or <code>--remotes</code>, respectively, and they must begin with <code>refs/</code> when applied to <code>--glob</code> or <code>--all</code>. If a trailing <code>/*</code> is intended, it must be given explicitly.</p>  </dd> <dt class=\"hdlist1\">--reflog</dt> <dd> <p>Pretend as if all objects mentioned by reflogs are listed on the command line as <code>&lt;commit&gt;</code>.</p> </dd> <dt class=\"hdlist1\">--ignore-missing</dt> <dd> <p>Upon seeing an invalid object name in the input, pretend as if the bad input was not given.</p> </dd> <dt class=\"hdlist1\">--stdin</dt> <dd> <p>In addition to the <code>&lt;commit&gt;</code> listed on the command line, read them from the standard input. If a <code>--</code> separator is seen, stop reading commits and start reading paths to limit the result.</p> </dd> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>Don’t print anything to standard output. This form is primarily meant to allow the caller to test the exit status to see if a range of objects is fully connected (or not). It is faster than redirecting stdout to <code>/dev/null</code> as the output does not have to be formatted.</p> </dd> <dt class=\"hdlist1\">--cherry-mark</dt> <dd> <p>Like <code>--cherry-pick</code> (see below) but mark equivalent commits with <code>=</code> rather than omitting them, and inequivalent ones with <code>+</code>.</p> </dd> <dt class=\"hdlist1\">--cherry-pick</dt> <dd> <p>Omit any commit that introduces the same change as another commit on the “other side” when the set of commits are limited with symmetric difference.</p>  <p>For example, if you have two branches, <code>A</code> and <code>B</code>, a usual way to list all commits on only one side of them is with <code>--left-right</code> (see the example below in the description of the <code>--left-right</code> option). However, it shows the commits that were cherry-picked from the other branch (for example, “3rd on b” may be cherry-picked from branch A). With this option, such pairs of commits are excluded from the output.</p>  </dd> <dt class=\"hdlist1\">--left-only</dt> <dt class=\"hdlist1\">--right-only</dt> <dd> <p>List only commits on the respective side of a symmetric range, i.e. only those which would be marked <code>&lt;</code> resp. <code>&gt;</code> by <code>--left-right</code>.</p>  <p>For example, <code>--cherry-pick --right-only A...B</code> omits those commits from <code>B</code> which are in <code>A</code> or are patch-equivalent to a commit in <code>A</code>. In other words, this lists the <code>+</code> commits from <code>git cherry A B</code>. More precisely, <code>--cherry-pick --right-only --no-merges</code> gives the exact list.</p>  </dd> <dt class=\"hdlist1\">--cherry</dt> <dd> <p>A synonym for <code>--right-only --cherry-mark --no-merges</code>; useful to limit the output to the commits on our side and mark those that have been applied to the other side of a forked history with <code>git log --cherry upstream...mybranch</code>, similar to <code>git cherry upstream mybranch</code>.</p> </dd> <dt class=\"hdlist1\">-g</dt> <dt class=\"hdlist1\">--walk-reflogs</dt> <dd> <p>Instead of walking the commit ancestry chain, walk reflog entries from the most recent one to older ones. When this option is used you cannot specify commits to exclude (that is, <code>^commit</code>, <code>commit1..commit2</code>, and <code>commit1...commit2</code> notations cannot be used).</p>  <p>With <code>--pretty</code> format other than <code>oneline</code> (for obvious reasons), this causes the output to have two extra lines of information taken from the reflog. By default, <code>commit@{Nth}</code> notation is used in the output. When the starting commit is specified as <code>commit@{now}</code>, output also uses <code>commit@{timestamp}</code> notation instead. Under <code>--pretty=oneline</code>, the commit message is prefixed with this information on the same line. This option cannot be combined with <code>--reverse</code>. See also <a href=\"git-reflog\">git-reflog[1]</a>.</p>  </dd> <dt class=\"hdlist1\">--merge</dt> <dd> <p>After a failed merge, show refs that touch files having a conflict and don’t exist on all heads to merge.</p> </dd> <dt class=\"hdlist1\">--boundary</dt> <dd> <p>Output excluded boundary commits. Boundary commits are prefixed with <code>-</code>.</p> </dd> <dt class=\"hdlist1\">--use-bitmap-index</dt> <dd> <p>Try to speed up the traversal using the pack bitmap index (if one is available). Note that when traversing with <code>--objects</code>, trees and blobs will not have their associated path printed.</p> </dd> </dl> </div> </div> </div> </div> <div class=\"sect2\"> <h3 id=\"_history_simplification\">History Simplification</h3>  <p>Sometimes you are only interested in parts of the history, for example the commits modifying a particular &lt;path&gt;. But there are two parts of <code>History Simplification</code>, one part is selecting the commits and the other is how to do it, as there are various strategies to simplify the history.</p>   <p>The following options select the commits to be shown:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">&lt;paths&gt;</dt> <dd> <p>Commits modifying the given &lt;paths&gt; are selected.</p> </dd> <dt class=\"hdlist1\">--simplify-by-decoration</dt> <dd> <p>Commits that are referred by some branch or tag are selected.</p> </dd> </dl> </div>  <p>Note that extra commits can be shown to give a meaningful history.</p>   <p>The following options affect the way the simplification is performed:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">Default mode</dt> <dd> <p>Simplifies the history to the simplest history explaining the final state of the tree. Simplest because it prunes some side branches if the end result is the same (i.e. merging branches with the same content)</p> </dd> <dt class=\"hdlist1\">--full-history</dt> <dd> <p>Same as the default mode, but does not prune some history.</p> </dd> <dt class=\"hdlist1\">--dense</dt> <dd> <p>Only the selected commits are shown, plus some to have a meaningful history.</p> </dd> <dt class=\"hdlist1\">--sparse</dt> <dd> <p>All commits in the simplified history are shown.</p> </dd> <dt class=\"hdlist1\">--simplify-merges</dt> <dd> <p>Additional option to <code>--full-history</code> to remove some needless merges from the resulting history, as there are no selected commits contributing to this merge.</p> </dd> <dt class=\"hdlist1\">--ancestry-path</dt> <dd> <p>When given a range of commits to display (e.g. <code>commit1..commit2</code> or <code>commit2 ^commit1</code>), only display commits that exist directly on the ancestry chain between the <code>commit1</code> and <code>commit2</code>, i.e. commits that are both descendants of <code>commit1</code>, and ancestors of <code>commit2</code>.</p> </dd> </dl> </div>  <p>A more detailed explanation follows.</p>   <p>Suppose you specified <code>foo</code> as the &lt;paths&gt;. We shall call commits that modify <code>foo</code> !TREESAME, and the rest TREESAME. (In a diff filtered for <code>foo</code>, they look different and equal, respectively.)</p>   <p>In the following, we will always refer to the same example history to illustrate the differences between simplification settings. We assume that you are filtering for a file <code>foo</code> in this commit graph:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>          .-A---M---N---O---P---Q\n         /     /   /   /   /   /\n        I     B   C   D   E   Y\n         \\   /   /   /   /   /\n          `-------------'   X</pre> </div> </div>  <p>The horizontal line of history A---Q is taken to be the first parent of each merge. The commits are:</p>  <div class=\"ulist\"> <ul> <li> <p><code>I</code> is the initial commit, in which <code>foo</code> exists with contents “asdf”, and a file <code>quux</code> exists with contents “quux”. Initial commits are compared to an empty tree, so <code>I</code> is !TREESAME.</p> </li> <li> <p>In <code>A</code>, <code>foo</code> contains just “foo”.</p> </li> <li> <p><code>B</code> contains the same change as <code>A</code>. Its merge <code>M</code> is trivial and hence TREESAME to all parents.</p> </li> <li> <p><code>C</code> does not change <code>foo</code>, but its merge <code>N</code> changes it to “foobar”, so it is not TREESAME to any parent.</p> </li> <li> <p><code>D</code> sets <code>foo</code> to “baz”. Its merge <code>O</code> combines the strings from <code>N</code> and <code>D</code> to “foobarbaz”; i.e., it is not TREESAME to any parent.</p> </li> <li> <p><code>E</code> changes <code>quux</code> to “xyzzy”, and its merge <code>P</code> combines the strings to “quux xyzzy”. <code>P</code> is TREESAME to <code>O</code>, but not to <code>E</code>.</p> </li> <li> <p><code>X</code> is an independent root commit that added a new file <code>side</code>, and <code>Y</code> modified it. <code>Y</code> is TREESAME to <code>X</code>. Its merge <code>Q</code> added <code>side</code> to <code>P</code>, and <code>Q</code> is TREESAME to <code>P</code>, but not to <code>Y</code>.</p> </li> </ul> </div>  <p><code>rev-list</code> walks backwards through history, including or excluding commits based on whether <code>--full-history</code> and/or parent rewriting (via <code>--parents</code> or <code>--children</code>) are used. The following settings are available.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">Default mode</dt> <dd> <p>Commits are included if they are not TREESAME to any parent (though this can be changed, see <code>--sparse</code> below). If the commit was a merge, and it was TREESAME to one parent, follow only that parent. (Even if there are several TREESAME parents, follow only one of them.) Otherwise, follow all parents.</p>  <p>This results in:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>          .-A---N---O\n         /     /   /\n        I---------D</pre> </div> </div>  <p>Note how the rule to only follow the TREESAME parent, if one is available, removed <code>B</code> from consideration entirely. <code>C</code> was considered via <code>N</code>, but is TREESAME. Root commits are compared to an empty tree, so <code>I</code> is !TREESAME.</p>   <p>Parent/child relations are only visible with <code>--parents</code>, but that does not affect the commits selected in default mode, so we have shown the parent lines.</p>  </dd> <dt class=\"hdlist1\">--full-history without parent rewriting</dt> <dd> <p>This mode differs from the default in one point: always follow all parents of a merge, even if it is TREESAME to one of them. Even if more than one side of the merge has commits that are included, this does not imply that the merge itself is! In the example, we get</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>        I  A  B  N  D  O  P  Q</pre> </div> </div>  <p><code>M</code> was excluded because it is TREESAME to both parents. <code>E</code>, <code>C</code> and <code>B</code> were all walked, but only <code>B</code> was !TREESAME, so the others do not appear.</p>   <p>Note that without parent rewriting, it is not really possible to talk about the parent/child relationships between the commits, so we show them disconnected.</p>  </dd> <dt class=\"hdlist1\">--full-history with parent rewriting</dt> <dd> <p>Ordinary commits are only included if they are !TREESAME (though this can be changed, see <code>--sparse</code> below).</p>  <p>Merges are always included. However, their parent list is rewritten: Along each parent, prune away commits that are not included themselves. This results in</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>          .-A---M---N---O---P---Q\n         /     /   /   /   /\n        I     B   /   D   /\n         \\   /   /   /   /\n          `-------------'</pre> </div> </div>  <p>Compare to <code>--full-history</code> without rewriting above. Note that <code>E</code> was pruned away because it is TREESAME, but the parent list of P was rewritten to contain <code>E</code>'s parent <code>I</code>. The same happened for <code>C</code> and <code>N</code>, and <code>X</code>, <code>Y</code> and <code>Q</code>.</p>  </dd> </dl> </div>  <p>In addition to the above settings, you can change whether TREESAME affects inclusion:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--dense</dt> <dd> <p>Commits that are walked are included if they are not TREESAME to any parent.</p> </dd> <dt class=\"hdlist1\">--sparse</dt> <dd> <p>All commits that are walked are included.</p>  <p>Note that without <code>--full-history</code>, this still simplifies merges: if one of the parents is TREESAME, we follow only that one, so the other sides of the merge are never walked.</p>  </dd> <dt class=\"hdlist1\">--simplify-merges</dt> <dd> <p>First, build a history graph in the same way that <code>--full-history</code> with parent rewriting does (see above).</p>  <p>Then simplify each commit <code>C</code> to its replacement <code>C'</code> in the final history according to the following rules:</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"ulist\"> <ul> <li> <p>Set <code>C'</code> to <code>C</code>.</p> </li> <li> <p>Replace each parent <code>P</code> of <code>C'</code> with its simplification <code>P'</code>. In the process, drop parents that are ancestors of other parents or that are root commits TREESAME to an empty tree, and remove duplicates, but take care to never drop all parents that we are TREESAME to.</p> </li> <li> <p>If after this parent rewriting, <code>C'</code> is a root or merge commit (has zero or &gt;1 parents), a boundary commit, or !TREESAME, it remains. Otherwise, it is replaced with its only parent.</p> </li> </ul> </div> </div> </div>  <p>The effect of this is best shown by way of comparing to <code>--full-history</code> with parent rewriting. The example turns into:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>          .-A---M---N---O\n         /     /       /\n        I     B       D\n         \\   /       /\n          `---------'</pre> </div> </div>  <p>Note the major differences in <code>N</code>, <code>P</code>, and <code>Q</code> over <code>--full-history</code>:</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"ulist\"> <ul> <li> <p><code>N</code>'s parent list had <code>I</code> removed, because it is an ancestor of the other parent <code>M</code>. Still, <code>N</code> remained because it is !TREESAME.</p> </li> <li> <p><code>P</code>'s parent list similarly had <code>I</code> removed. <code>P</code> was then removed completely, because it had one parent and is TREESAME.</p> </li> <li> <p><code>Q</code>'s parent list had <code>Y</code> simplified to <code>X</code>. <code>X</code> was then removed, because it was a TREESAME root. <code>Q</code> was then removed completely, because it had one parent and is TREESAME.</p> </li> </ul> </div> </div> </div> </dd> </dl> </div>  <p>Finally, there is a fifth simplification mode available:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--ancestry-path</dt> <dd> <p>Limit the displayed commits to those directly on the ancestry chain between the “from” and “to” commits in the given commit range. I.e. only display commits that are ancestor of the “to” commit and descendants of the “from” commit.</p>  <p>As an example use case, consider the following commit history:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>            D---E-------F\n           /     \\       \\\n          B---C---G---H---I---J\n         /                     \\\n        A-------K---------------L--M</pre> </div> </div>  <p>A regular <code>D..M</code> computes the set of commits that are ancestors of <code>M</code>, but excludes the ones that are ancestors of <code>D</code>. This is useful to see what happened to the history leading to <code>M</code> since <code>D</code>, in the sense that “what does <code>M</code> have that did not exist in <code>D</code>”. The result in this example would be all the commits, except <code>A</code> and <code>B</code> (and <code>D</code> itself, of course).</p>   <p>When we want to find out what commits in <code>M</code> are contaminated with the bug introduced by <code>D</code> and need fixing, however, we might want to view only the subset of <code>D..M</code> that are actually descendants of <code>D</code>, i.e. excluding <code>C</code> and <code>K</code>. This is exactly what the <code>--ancestry-path</code> option does. Applied to the <code>D..M</code> range, it results in:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>                E-------F\n                 \\       \\\n                  G---H---I---J\n                               \\\n                                L--M</pre> </div> </div> </dd> </dl> </div>  <p>The <code>--simplify-by-decoration</code> option allows you to view only the big picture of the topology of the history, by omitting commits that are not referenced by tags. Commits are marked as !TREESAME (in other words, kept after history simplification rules described above) if (1) they are referenced by tags, or (2) they change the contents of the paths given on the command line. All other commits are marked as TREESAME (subject to be simplified away).</p>  </div> <div class=\"sect2\"> <h3 id=\"_bisection_helpers\">Bisection Helpers</h3> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--bisect</dt> <dd> <p>Limit output to the one commit object which is roughly halfway between included and excluded commits. Note that the bad bisection ref <code>refs/bisect/bad</code> is added to the included commits (if it exists) and the good bisection refs <code>refs/bisect/good-*</code> are added to the excluded commits (if they exist). Thus, supposing there are no refs in <code>refs/bisect/</code>, if</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>        $ git rev-list --bisect foo ^bar ^baz</pre> </div> </div>  <p>outputs <code>midpoint</code>, the output of the two commands</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        $ git rev-list foo ^midpoint\n        $ git rev-list midpoint ^bar ^baz</pre> </div> </div>  <p>would be of roughly the same length. Finding the change which introduces a regression is thus reduced to a binary search: repeatedly generate and test new 'midpoint’s until the commit chain is of length one. Cannot be combined with --first-parent.</p>  </dd> <dt class=\"hdlist1\">--bisect-vars</dt> <dd> <p>This calculates the same as <code>--bisect</code>, except that refs in <code>refs/bisect/</code> are not used, and except that this outputs text ready to be eval’ed by the shell. These lines will assign the name of the midpoint revision to the variable <code>bisect_rev</code>, and the expected number of commits to be tested after <code>bisect_rev</code> is tested to <code>bisect_nr</code>, the expected number of commits to be tested if <code>bisect_rev</code> turns out to be good to <code>bisect_good</code>, the expected number of commits to be tested if <code>bisect_rev</code> turns out to be bad to <code>bisect_bad</code>, and the number of commits we are bisecting right now to <code>bisect_all</code>.</p> </dd> <dt class=\"hdlist1\">--bisect-all</dt> <dd> <p>This outputs all the commit objects between the included and excluded commits, ordered by their distance to the included and excluded commits. Refs in <code>refs/bisect/</code> are not used. The farthest from them is displayed first. (This is the only one displayed by <code>--bisect</code>.)</p>  <p>This is useful because it makes it easy to choose a good commit to test when you want to avoid to test some of them for some reason (they may not compile for example).</p>   <p>This option can be used along with <code>--bisect-vars</code>, in this case, after all the sorted commit objects, there will be the same text as if <code>--bisect-vars</code> had been used alone.</p>  </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_commit_ordering\">Commit Ordering</h3>  <p>By default, the commits are shown in reverse chronological order.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--date-order</dt> <dd> <p>Show no parents before all of its children are shown, but otherwise show commits in the commit timestamp order.</p> </dd> <dt class=\"hdlist1\">--author-date-order</dt> <dd> <p>Show no parents before all of its children are shown, but otherwise show commits in the author timestamp order.</p> </dd> <dt class=\"hdlist1\">--topo-order</dt> <dd> <p>Show no parents before all of its children are shown, and avoid showing commits on multiple lines of history intermixed.</p>  <p>For example, in a commit history like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>    ---1----2----4----7\n        \\               \\\n         3----5----6----8---</pre> </div> </div>  <p>where the numbers denote the order of commit timestamps, <code>git\nrev-list</code> and friends with <code>--date-order</code> show the commits in the timestamp order: 8 7 6 5 4 3 2 1.</p>   <p>With <code>--topo-order</code>, they would show 8 6 5 3 7 4 2 1 (or 8 7 4 2 6 5 3 1); some older commits are shown before newer ones in order to avoid showing the commits from two parallel development track mixed together.</p>  </dd> <dt class=\"hdlist1\">--reverse</dt> <dd> <p>Output the commits in reverse order. Cannot be combined with <code>--walk-reflogs</code>.</p> </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_object_traversal\">Object Traversal</h3>  <p>These options are mostly targeted for packing of Git repositories.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--objects</dt> <dd> <p>Print the object IDs of any object referenced by the listed commits. <code>--objects foo ^bar</code> thus means “send me all object IDs which I need to download if I have the commit object <code>bar</code> but not <code>foo</code>”.</p> </dd> <dt class=\"hdlist1\">--objects-edge</dt> <dd> <p>Similar to <code>--objects</code>, but also print the IDs of excluded commits prefixed with a “-” character. This is used by <a href=\"git-pack-objects\">git-pack-objects[1]</a> to build a “thin” pack, which records objects in deltified form based on objects contained in these excluded commits to reduce network traffic.</p> </dd> <dt class=\"hdlist1\">--objects-edge-aggressive</dt> <dd> <p>Similar to <code>--objects-edge</code>, but it tries harder to find excluded commits at the cost of increased time. This is used instead of <code>--objects-edge</code> to build “thin” packs for shallow repositories.</p> </dd> <dt class=\"hdlist1\">--indexed-objects</dt> <dd> <p>Pretend as if all trees and blobs used by the index are listed on the command line. Note that you probably want to use <code>--objects</code>, too.</p> </dd> <dt class=\"hdlist1\">--unpacked</dt> <dd> <p>Only useful with <code>--objects</code>; print the object IDs that are not in packs.</p> </dd> <dt class=\"hdlist1\">--no-walk[=(sorted|unsorted)]</dt> <dd> <p>Only show the given commits, but do not traverse their ancestors. This has no effect if a range is specified. If the argument <code>unsorted</code> is given, the commits are shown in the order they were given on the command line. Otherwise (if <code>sorted</code> or no argument was given), the commits are shown in reverse chronological order by commit time. Cannot be combined with <code>--graph</code>.</p> </dd> <dt class=\"hdlist1\">--do-walk</dt> <dd> <p>Overrides a previous <code>--no-walk</code>.</p> </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_commit_formatting\">Commit Formatting</h3>  <p>Using these options, <a href=\"git-rev-list\">git-rev-list[1]</a> will act similar to the more specialized family of commit log tools: <a href=\"git-log\">git-log[1]</a>, <a href=\"git-show\">git-show[1]</a>, and <a href=\"git-whatchanged\">git-whatchanged[1]</a></p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--pretty[=&lt;format&gt;]</dt> <dt class=\"hdlist1\">--format=&lt;format&gt;</dt> <dd> <p>Pretty-print the contents of the commit logs in a given format, where <code>&lt;format&gt;</code> can be one of <code>oneline</code>, <code>short</code>, <code>medium</code>, <code>full</code>, <code>fuller</code>, <code>email</code>, <code>raw</code>, <code>format:&lt;string&gt;</code> and <code>tformat:&lt;string&gt;</code>. When <code>&lt;format&gt;</code> is none of the above, and has <code>%placeholder</code> in it, it acts as if <code>--pretty=tformat:&lt;format&gt;</code> were given.</p>  <p>See the \"PRETTY FORMATS\" section for some additional details for each format. When <code>=&lt;format&gt;</code> part is omitted, it defaults to <code>medium</code>.</p>   <p>Note: you can specify the default pretty format in the repository configuration (see <a href=\"git-config\">git-config[1]</a>).</p>  </dd> <dt class=\"hdlist1\">--abbrev-commit</dt> <dd> <p>Instead of showing the full 40-byte hexadecimal commit object name, show only a partial prefix. Non default number of digits can be specified with \"--abbrev=&lt;n&gt;\" (which also modifies diff output, if it is displayed).</p>  <p>This should make \"--pretty=oneline\" a whole lot more readable for people using 80-column terminals.</p>  </dd> <dt class=\"hdlist1\">--no-abbrev-commit</dt> <dd> <p>Show the full 40-byte hexadecimal commit object name. This negates <code>--abbrev-commit</code> and those options which imply it such as \"--oneline\". It also overrides the <code>log.abbrevCommit</code> variable.</p> </dd> <dt class=\"hdlist1\">--oneline</dt> <dd> <p>This is a shorthand for \"--pretty=oneline --abbrev-commit\" used together.</p> </dd> <dt class=\"hdlist1\">--encoding=&lt;encoding&gt;</dt> <dd> <p>The commit objects record the encoding used for the log message in their encoding header; this option can be used to tell the command to re-code the commit log message in the encoding preferred by the user. For non plumbing commands this defaults to UTF-8. Note that if an object claims to be encoded in <code>X</code> and we are outputting in <code>X</code>, we will output the object verbatim; this means that invalid sequences in the original commit may be copied to the output.</p> </dd> <dt class=\"hdlist1\">--expand-tabs=&lt;n&gt;</dt> <dt class=\"hdlist1\">--expand-tabs</dt> <dt class=\"hdlist1\">--no-expand-tabs</dt> <dd> <p>Perform a tab expansion (replace each tab with enough spaces to fill to the next display column that is multiple of <code>&lt;n&gt;</code>) in the log message before showing it in the output. <code>--expand-tabs</code> is a short-hand for <code>--expand-tabs=8</code>, and <code>--no-expand-tabs</code> is a short-hand for <code>--expand-tabs=0</code>, which disables tab expansion.</p>  <p>By default, tabs are expanded in pretty formats that indent the log message by 4 spaces (i.e. <code>medium</code>, which is the default, <code>full</code>, and <code>fuller</code>).</p>  </dd> <dt class=\"hdlist1\">--show-signature</dt> <dd> <p>Check the validity of a signed commit object by passing the signature to <code>gpg --verify</code> and show the output.</p> </dd> </dl> </div> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--relative-date</dt> <dd> <p>Synonym for <code>--date=relative</code>.</p> </dd> <dt class=\"hdlist1\">--date=&lt;format&gt;</dt> <dd> <p>Only takes effect for dates shown in human-readable format, such as when using <code>--pretty</code>. <code>log.date</code> config variable sets a default value for the log command’s <code>--date</code> option. By default, dates are shown in the original time zone (either committer’s or author’s). If <code>-local</code> is appended to the format (e.g., <code>iso-local</code>), the user’s local time zone is used instead.</p>  <p><code>--date=relative</code> shows dates relative to the current time, e.g. “2 hours ago”. The <code>-local</code> option cannot be used with <code>--raw</code> or <code>--relative</code>.</p>   <p><code>--date=local</code> is an alias for <code>--date=default-local</code>.</p>   <p><code>--date=iso</code> (or <code>--date=iso8601</code>) shows timestamps in a ISO 8601-like format. The differences to the strict ISO 8601 format are:</p>  <div class=\"ulist\"> <ul> <li> <p>a space instead of the <code>T</code> date/time delimiter</p> </li> <li> <p>a space between time and time zone</p> </li> <li> <p>no colon between hours and minutes of the time zone</p> </li> </ul> </div>  <p><code>--date=iso-strict</code> (or <code>--date=iso8601-strict</code>) shows timestamps in strict ISO 8601 format.</p>   <p>+ <code>--date=rfc</code> (or <code>--date=rfc2822</code>) shows timestamps in RFC 2822 format, often found in email messages.</p>   <p>+ <code>--date=short</code> shows only the date, but not the time, in <code>YYYY-MM-DD</code> format.</p>   <p>+ <code>--date=raw</code> shows the date in the internal raw Git format <code>%s %z</code> format.</p>   <p>+ <code>--date=format:...</code> feeds the format <code>...</code> to your system <code>strftime</code>. Use <code>--date=format:%c</code> to show the date in your system locale’s preferred format. See the <code>strftime</code> manual for a complete list of format placeholders. When using <code>-local</code>, the correct syntax is <code>--date=format-local:...</code>.</p>   <p>+ <code>--date=default</code> is the default format, and is similar to <code>--date=rfc2822</code>, with a few exceptions:</p>  <div class=\"ulist\"> <ul> <li> <p>there is no comma after the day-of-week</p> </li> <li> <p>the time zone is omitted when the local time zone is used</p> </li> </ul> </div> </dd> <dt class=\"hdlist1\">--header</dt> <dd> <p>Print the contents of the commit in raw-format; each record is separated with a NUL character.</p> </dd> <dt class=\"hdlist1\">--parents</dt> <dd> <p>Print also the parents of the commit (in the form \"commit parent…​\"). Also enables parent rewriting, see <code>History Simplification</code> below.</p> </dd> <dt class=\"hdlist1\">--children</dt> <dd> <p>Print also the children of the commit (in the form \"commit child…​\"). Also enables parent rewriting, see <code>History Simplification</code> below.</p> </dd> <dt class=\"hdlist1\">--timestamp</dt> <dd> <p>Print the raw commit timestamp.</p> </dd> <dt class=\"hdlist1\">--left-right</dt> <dd> <p>Mark which side of a symmetric diff a commit is reachable from. Commits from the left side are prefixed with <code>&lt;</code> and those from the right with <code>&gt;</code>. If combined with <code>--boundary</code>, those commits are prefixed with <code>-</code>.</p>  <p>For example, if you have this topology:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>             y---b---b  branch B\n            / \\ /\n           /   .\n          /   / \\\n         o---x---a---a  branch A</pre> </div> </div>  <p>you would get an output like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        $ git rev-list --left-right --boundary --pretty=oneline A...B\n\n        &gt;bbbbbbb... 3rd on b\n        &gt;bbbbbbb... 2nd on b\n        &lt;aaaaaaa... 3rd on a\n        &lt;aaaaaaa... 2nd on a\n        -yyyyyyy... 1st on b\n        -xxxxxxx... 1st on a</pre> </div> </div> </dd> <dt class=\"hdlist1\">--graph</dt> <dd> <p>Draw a text-based graphical representation of the commit history on the left hand side of the output. This may cause extra lines to be printed in between commits, in order for the graph history to be drawn properly. Cannot be combined with <code>--no-walk</code>.</p>  <p>This enables parent rewriting, see <code>History Simplification</code> below.</p>   <p>This implies the <code>--topo-order</code> option by default, but the <code>--date-order</code> option may also be specified.</p>  </dd> <dt class=\"hdlist1\">--show-linear-break[=&lt;barrier&gt;]</dt> <dd> <p>When --graph is not used, all history branches are flattened which can make it hard to see that the two consecutive commits do not belong to a linear branch. This option puts a barrier in between them in that case. If <code>&lt;barrier&gt;</code> is specified, it is the string that will be shown instead of the default one.</p> </dd> <dt class=\"hdlist1\">--count</dt> <dd> <p>Print a number stating how many commits would have been listed, and suppress all other output. When used together with <code>--left-right</code>, instead print the counts for left and right commits, separated by a tab. When used together with <code>--cherry-mark</code>, omit patch equivalent commits from these counts and print the count for equivalent commits separated by a tab.</p> </dd> </dl> </div> </div>\n</div>   <h2 id=\"_pretty_formats\">Pretty formats</h2> <div class=\"sectionbody\"> <p>If the commit is a merge, and if the pretty-format is not <code>oneline</code>, <code>email</code> or <code>raw</code>, an additional line is inserted before the <code>Author:</code> line. This line begins with \"Merge: \" and the sha1s of ancestral commits are printed, separated by spaces. Note that the listed commits may not necessarily be the list of the <strong>direct</strong> parent commits if you have limited your view of history: for example, if you are only interested in changes related to a certain directory or file.</p>   <p>There are several built-in formats, and you can define additional formats by setting a pretty.&lt;name&gt; config option to either another format name, or a <code>format:</code> string, as described below (see <a href=\"git-config\">git-config[1]</a>). Here are the details of the built-in formats:</p>  <div class=\"ulist\"> <ul> <li> <p><code>oneline</code></p> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;sha1&gt; &lt;title line&gt;</pre> </div> </div>  <p>This is designed to be as compact as possible.</p>  </li> <li> <p><code>short</code></p> <div class=\"literalblock\"> <div class=\"content\"> <pre>commit &lt;sha1&gt;\nAuthor: &lt;author&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;title line&gt;</pre> </div> </div> </li> <li> <p><code>medium</code></p> <div class=\"literalblock\"> <div class=\"content\"> <pre>commit &lt;sha1&gt;\nAuthor: &lt;author&gt;\nDate:   &lt;author date&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;title line&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;full commit message&gt;</pre> </div> </div> </li> <li> <p><code>full</code></p> <div class=\"literalblock\"> <div class=\"content\"> <pre>commit &lt;sha1&gt;\nAuthor: &lt;author&gt;\nCommit: &lt;committer&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;title line&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;full commit message&gt;</pre> </div> </div> </li> <li> <p><code>fuller</code></p> <div class=\"literalblock\"> <div class=\"content\"> <pre>commit &lt;sha1&gt;\nAuthor:     &lt;author&gt;\nAuthorDate: &lt;author date&gt;\nCommit:     &lt;committer&gt;\nCommitDate: &lt;committer date&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;title line&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;full commit message&gt;</pre> </div> </div> </li> <li> <p><code>email</code></p> <div class=\"literalblock\"> <div class=\"content\"> <pre>From &lt;sha1&gt; &lt;date&gt;\nFrom: &lt;author&gt;\nDate: &lt;author date&gt;\nSubject: [PATCH] &lt;title line&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;full commit message&gt;</pre> </div> </div> </li> <li> <p><code>raw</code></p>  <p>The <code>raw</code> format shows the entire commit exactly as stored in the commit object. Notably, the SHA-1s are displayed in full, regardless of whether --abbrev or --no-abbrev are used, and <code>parents</code> information show the true parent commits, without taking grafts or history simplification into account. Note that this format affects the way commits are displayed, but not the way the diff is shown e.g. with <code>git log --raw</code>. To get full object names in a raw diff format, use <code>--no-abbrev</code>.</p>  </li> <li> <p><code>format:&lt;string&gt;</code></p>  <p>The <code>format:&lt;string&gt;</code> format allows you to specify which information you want to show. It works a little bit like printf format, with the notable exception that you get a newline with <code>%n</code> instead of <code>\\n</code>.</p>   <p>E.g, <code>format:\"The author of %h was %an, %ar%nThe title was &gt;&gt;%s&lt;&lt;%n\"</code> would show something like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>The author of fe6e0ee was Junio C Hamano, 23 hours ago\nThe title was &gt;&gt;t4119: test autocomputing -p&lt;n&gt; for traditional diff input.&lt;&lt;</pre> </div> </div>  <p>The placeholders are:</p>  <div class=\"ulist\"> <ul> <li> <p><code>%H</code>: commit hash</p> </li> <li> <p><code>%h</code>: abbreviated commit hash</p> </li> <li> <p><code>%T</code>: tree hash</p> </li> <li> <p><code>%t</code>: abbreviated tree hash</p> </li> <li> <p><code>%P</code>: parent hashes</p> </li> <li> <p><code>%p</code>: abbreviated parent hashes</p> </li> <li> <p><code>%an</code>: author name</p> </li> <li> <p><code>%aN</code>: author name (respecting .mailmap, see <a href=\"git-shortlog\">git-shortlog[1]</a> or <a href=\"git-blame\">git-blame[1]</a>)</p> </li> <li> <p><code>%ae</code>: author email</p> </li> <li> <p><code>%aE</code>: author email (respecting .mailmap, see <a href=\"git-shortlog\">git-shortlog[1]</a> or <a href=\"git-blame\">git-blame[1]</a>)</p> </li> <li> <p><code>%ad</code>: author date (format respects --date= option)</p> </li> <li> <p><code>%aD</code>: author date, RFC2822 style</p> </li> <li> <p><code>%ar</code>: author date, relative</p> </li> <li> <p><code>%at</code>: author date, UNIX timestamp</p> </li> <li> <p><code>%ai</code>: author date, ISO 8601-like format</p> </li> <li> <p><code>%aI</code>: author date, strict ISO 8601 format</p> </li> <li> <p><code>%cn</code>: committer name</p> </li> <li> <p><code>%cN</code>: committer name (respecting .mailmap, see <a href=\"git-shortlog\">git-shortlog[1]</a> or <a href=\"git-blame\">git-blame[1]</a>)</p> </li> <li> <p><code>%ce</code>: committer email</p> </li> <li> <p><code>%cE</code>: committer email (respecting .mailmap, see <a href=\"git-shortlog\">git-shortlog[1]</a> or <a href=\"git-blame\">git-blame[1]</a>)</p> </li> <li> <p><code>%cd</code>: committer date (format respects --date= option)</p> </li> <li> <p><code>%cD</code>: committer date, RFC2822 style</p> </li> <li> <p><code>%cr</code>: committer date, relative</p> </li> <li> <p><code>%ct</code>: committer date, UNIX timestamp</p> </li> <li> <p><code>%ci</code>: committer date, ISO 8601-like format</p> </li> <li> <p><code>%cI</code>: committer date, strict ISO 8601 format</p> </li> <li> <p><code>%d</code>: ref names, like the --decorate option of <a href=\"git-log\">git-log[1]</a></p> </li> <li> <p><code>%D</code>: ref names without the \" (\", \")\" wrapping.</p> </li> <li> <p><code>%e</code>: encoding</p> </li> <li> <p><code>%s</code>: subject</p> </li> <li> <p><code>%f</code>: sanitized subject line, suitable for a filename</p> </li> <li> <p><code>%b</code>: body</p> </li> <li> <p><code>%B</code>: raw body (unwrapped subject and body)</p> </li> <li> <p><code>%GG</code>: raw verification message from GPG for a signed commit</p> </li> <li> <p><code>%G?</code>: show \"G\" for a good (valid) signature, \"B\" for a bad signature, \"U\" for a good signature with unknown validity and \"N\" for no signature</p> </li> <li> <p><code>%GS</code>: show the name of the signer for a signed commit</p> </li> <li> <p><code>%GK</code>: show the key used to sign a signed commit</p> </li> <li> <p><code>%gD</code>: reflog selector, e.g., <code>refs/stash@{1}</code></p> </li> <li> <p><code>%gd</code>: shortened reflog selector, e.g., <code>stash@{1}</code></p> </li> <li> <p><code>%gn</code>: reflog identity name</p> </li> <li> <p><code>%gN</code>: reflog identity name (respecting .mailmap, see <a href=\"git-shortlog\">git-shortlog[1]</a> or <a href=\"git-blame\">git-blame[1]</a>)</p> </li> <li> <p><code>%ge</code>: reflog identity email</p> </li> <li> <p><code>%gE</code>: reflog identity email (respecting .mailmap, see <a href=\"git-shortlog\">git-shortlog[1]</a> or <a href=\"git-blame\">git-blame[1]</a>)</p> </li> <li> <p><code>%gs</code>: reflog subject</p> </li> <li> <p><code>%Cred</code>: switch color to red</p> </li> <li> <p><code>%Cgreen</code>: switch color to green</p> </li> <li> <p><code>%Cblue</code>: switch color to blue</p> </li> <li> <p><code>%Creset</code>: reset color</p> </li> <li> <p><code>%C(…​)</code>: color specification, as described in color.branch.* config option; adding <code>auto,</code> at the beginning will emit color only when colors are enabled for log output (by <code>color.diff</code>, <code>color.ui</code>, or <code>--color</code>, and respecting the <code>auto</code> settings of the former if we are going to a terminal). <code>auto</code> alone (i.e. <code>%C(auto)</code>) will turn on auto coloring on the next placeholders until the color is switched again.</p> </li> <li> <p><code>%m</code>: left, right or boundary mark</p> </li> <li> <p><code>%n</code>: newline</p> </li> <li> <p><code>%%</code>: a raw <code>%</code></p> </li> <li> <p><code>%x00</code>: print a byte from a hex code</p> </li> <li> <p><code>%w([&lt;w&gt;[,&lt;i1&gt;[,&lt;i2&gt;]]])</code>: switch line wrapping, like the -w option of <a href=\"git-shortlog\">git-shortlog[1]</a>.</p> </li> <li> <p><code>%&lt;(&lt;N&gt;[,trunc|ltrunc|mtrunc])</code>: make the next placeholder take at least N columns, padding spaces on the right if necessary. Optionally truncate at the beginning (ltrunc), the middle (mtrunc) or the end (trunc) if the output is longer than N columns. Note that truncating only works correctly with N &gt;= 2.</p> </li> <li> <p><code>%&lt;|(&lt;N&gt;)</code>: make the next placeholder take at least until Nth columns, padding spaces on the right if necessary</p> </li> <li> <p><code>%&gt;(&lt;N&gt;)</code>, <code>%&gt;|(&lt;N&gt;)</code>: similar to <code>%&lt;(&lt;N&gt;)</code>, <code>%&lt;|(&lt;N&gt;)</code> respectively, but padding spaces on the left</p> </li> <li> <p><code>%&gt;&gt;(&lt;N&gt;)</code>, <code>%&gt;&gt;|(&lt;N&gt;)</code>: similar to <code>%&gt;(&lt;N&gt;)</code>, <code>%&gt;|(&lt;N&gt;)</code> respectively, except that if the next placeholder takes more spaces than given and there are spaces on its left, use those spaces</p> </li> <li> <p><code>%&gt;&lt;(&lt;N&gt;)</code>, <code>%&gt;&lt;|(&lt;N&gt;)</code>: similar to <code>% &lt;(&lt;N&gt;)</code>, <code>%&lt;|(&lt;N&gt;)</code> respectively, but padding both sides (i.e. the text is centered)</p> </li> </ul> </div> </li> </ul> </div> <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> Some placeholders may depend on other options given to the revision traversal engine. For example, the <code>%g*</code> reflog options will insert an empty string unless we are traversing reflog entries (e.g., by <code>git log -g</code>). The <code>%d</code> and <code>%D</code> placeholders will use the \"short\" decoration format if <code>--decorate</code> was not already provided on the command line. </td> </tr> </table> </div>  <p>If you add a <code>+</code> (plus sign) after <code>%</code> of a placeholder, a line-feed is inserted immediately before the expansion if and only if the placeholder expands to a non-empty string.</p>   <p>If you add a <code>-</code> (minus sign) after <code>%</code> of a placeholder, line-feeds that immediately precede the expansion are deleted if and only if the placeholder expands to an empty string.</p>   <p>If you add a ` ` (space) after <code>%</code> of a placeholder, a space is inserted immediately before the expansion if and only if the placeholder expands to a non-empty string.</p>  <div class=\"ulist\"> <ul> <li> <p><code>tformat:</code></p>  <p>The <code>tformat:</code> format works exactly like <code>format:</code>, except that it provides \"terminator\" semantics instead of \"separator\" semantics. In other words, each commit has the message terminator character (usually a newline) appended, rather than a separator placed between entries. This means that the final entry of a single-line format will be properly terminated with a new line, just as the \"oneline\" format does. For example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log -2 --pretty=format:%h 4da45bef \\\n  | perl -pe '$_ .= \" -- NO NEWLINE\\n\" unless /\\n/'\n4da45be\n7134973 -- NO NEWLINE\n\n$ git log -2 --pretty=tformat:%h 4da45bef \\\n  | perl -pe '$_ .= \" -- NO NEWLINE\\n\" unless /\\n/'\n4da45be\n7134973</pre> </div> </div>  <p>In addition, any unrecognized string that has a <code>%</code> in it is interpreted as if it has <code>tformat:</code> in front of it. For example, these two are equivalent:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log -2 --pretty=tformat:%h 4da45bef\n$ git log -2 --pretty=%h 4da45bef</pre> </div> </div> </li> </ul> </div>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-rev-list\" class=\"_attribution-link\">https://git-scm.com/docs/git-rev-list</a>\n  </p>\n</div>\n","gitrepository-layout":"<h1>gitrepository-layout</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>gitrepository-layout - Git Repository Layout</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"> <p>$GIT_DIR/*</p> </div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>A Git repository comes in two different flavours:</p>  <div class=\"ulist\"> <ul> <li> <p>a <code>.git</code> directory at the root of the working tree;</p> </li> <li> <p>a <code>&lt;project&gt;.git</code> directory that is a <code>bare</code> repository (i.e. without its own working tree), that is typically used for exchanging histories with others by pushing into it and fetching from it.</p> </li> </ul> </div>  <p><strong>Note</strong>: Also you can have a plain text file <code>.git</code> at the root of your working tree, containing <code>gitdir: &lt;path&gt;</code> to point at the real directory that has the repository. This mechanism is often used for a working tree of a submodule checkout, to allow you in the containing superproject to <code>git checkout</code> a branch that does not have the submodule. The <code>checkout</code> has to remove the entire submodule working tree, without losing the submodule repository.</p>   <p>These things may exist in a Git repository.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">objects</dt> <dd> <p>Object store associated with this repository. Usually an object store is self sufficient (i.e. all the objects that are referred to by an object found in it are also found in it), but there are a few ways to violate it.</p> <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>You could have an incomplete but locally usable repository by creating a shallow clone. See <a href=\"git-clone\">git-clone[1]</a>.</p> </li> <li> <p>You could be using the <code>objects/info/alternates</code> or <code>$GIT_ALTERNATE_OBJECT_DIRECTORIES</code> mechanisms to <code>borrow</code> objects from other object stores. A repository with this kind of incomplete object store is not suitable to be published for use with dumb transports but otherwise is OK as long as <code>objects/info/alternates</code> points at the object stores it borrows from.</p>  <p>This directory is ignored if $GIT_COMMON_DIR is set and \"$GIT_COMMON_DIR/objects\" will be used instead.</p>  </li> </ol> </div> </dd> <dt class=\"hdlist1\">objects/[0-9a-f][0-9a-f]</dt> <dd> <p>A newly created object is stored in its own file. The objects are splayed over 256 subdirectories using the first two characters of the sha1 object name to keep the number of directory entries in <code>objects</code> itself to a manageable number. Objects found here are often called <code>unpacked</code> (or <code>loose</code>) objects.</p> </dd> <dt class=\"hdlist1\">objects/pack</dt> <dd> <p>Packs (files that store many object in compressed form, along with index files to allow them to be randomly accessed) are found in this directory.</p> </dd> <dt class=\"hdlist1\">objects/info</dt> <dd> <p>Additional information about the object store is recorded in this directory.</p> </dd> <dt class=\"hdlist1\">objects/info/packs</dt> <dd> <p>This file is to help dumb transports discover what packs are available in this object store. Whenever a pack is added or removed, <code>git update-server-info</code> should be run to keep this file up-to-date if the repository is published for dumb transports. <code>git repack</code> does this by default.</p> </dd> <dt class=\"hdlist1\">objects/info/alternates</dt> <dd> <p>This file records paths to alternate object stores that this object store borrows objects from, one pathname per line. Note that not only native Git tools use it locally, but the HTTP fetcher also tries to use it remotely; this will usually work if you have relative paths (relative to the object database, not to the repository!) in your alternates file, but it will not work if you use absolute paths unless the absolute path in filesystem and web URL is the same. See also <code>objects/info/http-alternates</code>.</p> </dd> <dt class=\"hdlist1\">objects/info/http-alternates</dt> <dd> <p>This file records URLs to alternate object stores that this object store borrows objects from, to be used when the repository is fetched over HTTP.</p> </dd> <dt class=\"hdlist1\">refs</dt> <dd> <p>References are stored in subdirectories of this directory. The <code>git prune</code> command knows to preserve objects reachable from refs found in this directory and its subdirectories. This directory is ignored if $GIT_COMMON_DIR is set and \"$GIT_COMMON_DIR/refs\" will be used instead.</p> </dd> <dt class=\"hdlist1\">refs/heads/<code>name</code>\n</dt> <dd> <p>records tip-of-the-tree commit objects of branch <code>name</code></p> </dd> <dt class=\"hdlist1\">refs/tags/<code>name</code>\n</dt> <dd> <p>records any object name (not necessarily a commit object, or a tag object that points at a commit object).</p> </dd> <dt class=\"hdlist1\">refs/remotes/<code>name</code>\n</dt> <dd> <p>records tip-of-the-tree commit objects of branches copied from a remote repository.</p> </dd> <dt class=\"hdlist1\">refs/replace/<code>&lt;obj-sha1&gt;</code>\n</dt> <dd> <p>records the SHA-1 of the object that replaces <code>&lt;obj-sha1&gt;</code>. This is similar to info/grafts and is internally used and maintained by <a href=\"git-replace\">git-replace[1]</a>. Such refs can be exchanged between repositories while grafts are not.</p> </dd> <dt class=\"hdlist1\">packed-refs</dt> <dd> <p>records the same information as refs/heads/, refs/tags/, and friends record in a more efficient way. See <a href=\"git-pack-refs\">git-pack-refs[1]</a>. This file is ignored if $GIT_COMMON_DIR is set and \"$GIT_COMMON_DIR/packed-refs\" will be used instead.</p> </dd> <dt class=\"hdlist1\">HEAD</dt> <dd> <p>A symref (see glossary) to the <code>refs/heads/</code> namespace describing the currently active branch. It does not mean much if the repository is not associated with any working tree (i.e. a <code>bare</code> repository), but a valid Git repository <strong>must</strong> have the HEAD file; some porcelains may use it to guess the designated \"default\" branch of the repository (usually <code>master</code>). It is legal if the named branch <code>name</code> does not (yet) exist. In some legacy setups, it is a symbolic link instead of a symref that points at the current branch.</p>  <p>HEAD can also record a specific commit directly, instead of being a symref to point at the current branch. Such a state is often called <code>detached HEAD.</code> See <a href=\"git-checkout\">git-checkout[1]</a> for details.</p>  </dd> <dt class=\"hdlist1\">config</dt> <dd> <p>Repository specific configuration file. This file is ignored if $GIT_COMMON_DIR is set and \"$GIT_COMMON_DIR/config\" will be used instead.</p> </dd> <dt class=\"hdlist1\">branches</dt> <dd> <p>A slightly deprecated way to store shorthands to be used to specify a URL to <code>git fetch</code>, <code>git pull</code> and <code>git push</code>. A file can be stored as <code>branches/&lt;name&gt;</code> and then <code>name</code> can be given to these commands in place of <code>repository</code> argument. See the REMOTES section in <a href=\"git-fetch\">git-fetch[1]</a> for details. This mechanism is legacy and not likely to be found in modern repositories. This directory is ignored if $GIT_COMMON_DIR is set and \"$GIT_COMMON_DIR/branches\" will be used instead.</p> </dd> <dt class=\"hdlist1\">hooks</dt> <dd> <p>Hooks are customization scripts used by various Git commands. A handful of sample hooks are installed when <code>git init</code> is run, but all of them are disabled by default. To enable, the <code>.sample</code> suffix has to be removed from the filename by renaming. Read <a href=\"githooks\">githooks[5]</a> for more details about each hook. This directory is ignored if $GIT_COMMON_DIR is set and \"$GIT_COMMON_DIR/hooks\" will be used instead.</p> </dd> <dt class=\"hdlist1\">index</dt> <dd> <p>The current index file for the repository. It is usually not found in a bare repository.</p> </dd> <dt class=\"hdlist1\">sharedindex.&lt;SHA-1&gt;</dt> <dd> <p>The shared index part, to be referenced by $GIT_DIR/index and other temporary index files. Only valid in split index mode.</p> </dd> <dt class=\"hdlist1\">info</dt> <dd> <p>Additional information about the repository is recorded in this directory. This directory is ignored if $GIT_COMMON_DIR is set and \"$GIT_COMMON_DIR/index\" will be used instead.</p> </dd> <dt class=\"hdlist1\">info/refs</dt> <dd> <p>This file helps dumb transports discover what refs are available in this repository. If the repository is published for dumb transports, this file should be regenerated by <code>git update-server-info</code> every time a tag or branch is created or modified. This is normally done from the <code>hooks/update</code> hook, which is run by the <code>git-receive-pack</code> command when you <code>git push</code> into the repository.</p> </dd> <dt class=\"hdlist1\">info/grafts</dt> <dd> <p>This file records fake commit ancestry information, to pretend the set of parents a commit has is different from how the commit was actually created. One record per line describes a commit and its fake parents by listing their 40-byte hexadecimal object names separated by a space and terminated by a newline.</p>  <p>Note that the grafts mechanism is outdated and can lead to problems transferring objects between repositories; see <a href=\"git-replace\">git-replace[1]</a> for a more flexible and robust system to do the same thing.</p>  </dd> <dt class=\"hdlist1\">info/exclude</dt> <dd> <p>This file, by convention among Porcelains, stores the exclude pattern list. <code>.gitignore</code> is the per-directory ignore file. <code>git status</code>, <code>git add</code>, <code>git rm</code> and <code>git clean</code> look at it but the core Git commands do not look at it. See also: <a href=\"gitignore\">gitignore[5]</a>.</p> </dd> <dt class=\"hdlist1\">info/sparse-checkout</dt> <dd> <p>This file stores sparse checkout patterns. See also: <a href=\"git-read-tree\">git-read-tree[1]</a>.</p> </dd> <dt class=\"hdlist1\">remotes</dt> <dd> <p>Stores shorthands for URL and default refnames for use when interacting with remote repositories via <code>git fetch</code>, <code>git pull</code> and <code>git push</code> commands. See the REMOTES section in <a href=\"git-fetch\">git-fetch[1]</a> for details. This mechanism is legacy and not likely to be found in modern repositories. This directory is ignored if $GIT_COMMON_DIR is set and \"$GIT_COMMON_DIR/remotes\" will be used instead.</p> </dd> <dt class=\"hdlist1\">logs</dt> <dd> <p>Records of changes made to refs are stored in this directory. See <a href=\"git-update-ref\">git-update-ref[1]</a> for more information. This directory is ignored if $GIT_COMMON_DIR is set and \"$GIT_COMMON_DIR/logs\" will be used instead.</p> </dd> <dt class=\"hdlist1\">logs/refs/heads/<code>name</code>\n</dt> <dd> <p>Records all changes made to the branch tip named <code>name</code>.</p> </dd> <dt class=\"hdlist1\">logs/refs/tags/<code>name</code>\n</dt> <dd> <p>Records all changes made to the tag named <code>name</code>.</p> </dd> <dt class=\"hdlist1\">shallow</dt> <dd> <p>This is similar to <code>info/grafts</code> but is internally used and maintained by shallow clone mechanism. See <code>--depth</code> option to <a href=\"git-clone\">git-clone[1]</a> and <a href=\"git-fetch\">git-fetch[1]</a>. This file is ignored if $GIT_COMMON_DIR is set and \"$GIT_COMMON_DIR/shallow\" will be used instead.</p> </dd> <dt class=\"hdlist1\">commondir</dt> <dd> <p>If this file exists, $GIT_COMMON_DIR (see <a href=\"git\">git[1]</a>) will be set to the path specified in this file if it is not explicitly set. If the specified path is relative, it is relative to $GIT_DIR. The repository with commondir is incomplete without the repository pointed by \"commondir\".</p> </dd> <dt class=\"hdlist1\">modules</dt> <dd> <p>Contains the git-repositories of the submodules.</p> </dd> <dt class=\"hdlist1\">worktrees</dt> <dd> <p>Contains administrative data for linked working trees. Each subdirectory contains the working tree-related part of a linked working tree. This directory is ignored if $GIT_COMMON_DIR is set, in which case \"$GIT_COMMON_DIR/worktrees\" will be used instead.</p> </dd> <dt class=\"hdlist1\">worktrees/&lt;id&gt;/gitdir</dt> <dd> <p>A text file containing the absolute path back to the .git file that points to here. This is used to check if the linked repository has been manually removed and there is no need to keep this directory any more. The mtime of this file should be updated every time the linked repository is accessed.</p> </dd> <dt class=\"hdlist1\">worktrees/&lt;id&gt;/locked</dt> <dd> <p>If this file exists, the linked working tree may be on a portable device and not available. The presence of this file prevents <code>worktrees/&lt;id&gt;</code> from being pruned either automatically or manually by <code>git worktree prune</code>. The file may contain a string explaining why the repository is locked.</p> </dd> <dt class=\"hdlist1\">worktrees/&lt;id&gt;/link</dt> <dd> <p>If this file exists, it is a hard link to the linked .git file. It is used to detect if the linked repository is manually removed.</p> </dd> </dl> </div>\n</div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-init\">git-init[1]</a>, <a href=\"git-clone\">git-clone[1]</a>, <a href=\"git-fetch\">git-fetch[1]</a>, <a href=\"git-pack-refs\">git-pack-refs[1]</a>, <a href=\"git-gc\">git-gc[1]</a>, <a href=\"git-checkout\">git-checkout[1]</a>, <a href=\"gitglossary\">gitglossary[7]</a>, <a href=\"user-manual\">The Git User’s Manual</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/gitrepository-layout\" class=\"_attribution-link\">https://git-scm.com/docs/gitrepository-layout</a>\n  </p>\n</div>\n","githooks":"<h1>githooks</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>githooks - Hooks used by Git</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"> <p>$GIT_DIR/hooks/* (or `git config core.hooksPath`/*)</p> </div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Hooks are programs you can place in a hooks directory to trigger actions at certain points in git’s execution. Hooks that don’t have the executable bit set are ignored.</p>   <p>By default the hooks directory is <code>$GIT_DIR/hooks</code>, but that can be changed via the <code>core.hooksPath</code> configuration variable (see <a href=\"git-config\">git-config[1]</a>).</p>   <p>Before Git invokes a hook, it changes its working directory to either the root of the working tree in a non-bare repository, or to the $GIT_DIR in a bare repository.</p>   <p>Hooks can get their arguments via the environment, command-line arguments, and stdin. See the documentation for each hook below for details.</p>   <p><code>git init</code> may copy hooks to the new repository, depending on its configuration. See the \"TEMPLATE DIRECTORY\" section in <a href=\"git-init\">git-init[1]</a> for details. When the rest of this document refers to \"default hooks\" it’s talking about the default template shipped with Git.</p>   <p>The currently supported hooks are described below.</p> </div>   <h2 id=\"_hooks\">Hooks</h2> <div class=\"sectionbody\">\n<div class=\"sect2\"> <h3 id=\"_applypatch_msg\">applypatch-msg</h3>  <p>This hook is invoked by <code>git am</code>. It takes a single parameter, the name of the file that holds the proposed commit log message. Exiting with a non-zero status causes <code>git am</code> to abort before applying the patch.</p>   <p>The hook is allowed to edit the message file in place, and can be used to normalize the message into some project standard format. It can also be used to refuse the commit after inspecting the message file.</p>   <p>The default <code>applypatch-msg</code> hook, when enabled, runs the <code>commit-msg</code> hook, if the latter is enabled.</p>  </div> <div class=\"sect2\"> <h3 id=\"_pre_applypatch\">pre-applypatch</h3>  <p>This hook is invoked by <code>git am</code>. It takes no parameter, and is invoked after the patch is applied, but before a commit is made.</p>   <p>If it exits with non-zero status, then the working tree will not be committed after applying the patch.</p>   <p>It can be used to inspect the current working tree and refuse to make a commit if it does not pass certain test.</p>   <p>The default <code>pre-applypatch</code> hook, when enabled, runs the <code>pre-commit</code> hook, if the latter is enabled.</p>  </div> <div class=\"sect2\"> <h3 id=\"_post_applypatch\">post-applypatch</h3>  <p>This hook is invoked by <code>git am</code>. It takes no parameter, and is invoked after the patch is applied and a commit is made.</p>   <p>This hook is meant primarily for notification, and cannot affect the outcome of <code>git am</code>.</p>  </div> <div class=\"sect2\"> <h3 id=\"_pre_commit\">pre-commit</h3>  <p>This hook is invoked by <code>git commit</code>, and can be bypassed with the <code>--no-verify</code> option. It takes no parameters, and is invoked before obtaining the proposed commit log message and making a commit. Exiting with a non-zero status from this script causes the <code>git commit</code> command to abort before creating a commit.</p>   <p>The default <code>pre-commit</code> hook, when enabled, catches introduction of lines with trailing whitespaces and aborts the commit when such a line is found.</p>   <p>All the <code>git commit</code> hooks are invoked with the environment variable <code>GIT_EDITOR=:</code> if the command will not bring up an editor to modify the commit message.</p>  </div> <div class=\"sect2\"> <h3 id=\"_prepare_commit_msg\">prepare-commit-msg</h3>  <p>This hook is invoked by <code>git commit</code> right after preparing the default log message, and before the editor is started.</p>   <p>It takes one to three parameters. The first is the name of the file that contains the commit log message. The second is the source of the commit message, and can be: <code>message</code> (if a <code>-m</code> or <code>-F</code> option was given); <code>template</code> (if a <code>-t</code> option was given or the configuration option <code>commit.template</code> is set); <code>merge</code> (if the commit is a merge or a <code>.git/MERGE_MSG</code> file exists); <code>squash</code> (if a <code>.git/SQUASH_MSG</code> file exists); or <code>commit</code>, followed by a commit SHA-1 (if a <code>-c</code>, <code>-C</code> or <code>--amend</code> option was given).</p>   <p>If the exit status is non-zero, <code>git commit</code> will abort.</p>   <p>The purpose of the hook is to edit the message file in place, and it is not suppressed by the <code>--no-verify</code> option. A non-zero exit means a failure of the hook and aborts the commit. It should not be used as replacement for pre-commit hook.</p>   <p>The sample <code>prepare-commit-msg</code> hook that comes with Git comments out the <code>Conflicts:</code> part of a merge’s commit message.</p>  </div> <div class=\"sect2\"> <h3 id=\"_commit_msg\">commit-msg</h3>  <p>This hook is invoked by <code>git commit</code>, and can be bypassed with the <code>--no-verify</code> option. It takes a single parameter, the name of the file that holds the proposed commit log message. Exiting with a non-zero status causes the <code>git commit</code> to abort.</p>   <p>The hook is allowed to edit the message file in place, and can be used to normalize the message into some project standard format. It can also be used to refuse the commit after inspecting the message file.</p>   <p>The default <code>commit-msg</code> hook, when enabled, detects duplicate \"Signed-off-by\" lines, and aborts the commit if one is found.</p>  </div> <div class=\"sect2\"> <h3 id=\"_post_commit\">post-commit</h3>  <p>This hook is invoked by <code>git commit</code>. It takes no parameters, and is invoked after a commit is made.</p>   <p>This hook is meant primarily for notification, and cannot affect the outcome of <code>git commit</code>.</p>  </div> <div class=\"sect2\"> <h3 id=\"_pre_rebase\">pre-rebase</h3>  <p>This hook is called by <code>git rebase</code> and can be used to prevent a branch from getting rebased. The hook may be called with one or two parameters. The first parameter is the upstream from which the series was forked. The second parameter is the branch being rebased, and is not set when rebasing the current branch.</p>  </div> <div class=\"sect2\"> <h3 id=\"_post_checkout\">post-checkout</h3>  <p>This hook is invoked when a <code>git checkout</code> is run after having updated the worktree. The hook is given three parameters: the ref of the previous HEAD, the ref of the new HEAD (which may or may not have changed), and a flag indicating whether the checkout was a branch checkout (changing branches, flag=1) or a file checkout (retrieving a file from the index, flag=0). This hook cannot affect the outcome of <code>git checkout</code>.</p>   <p>It is also run after <code>git clone</code>, unless the --no-checkout (-n) option is used. The first parameter given to the hook is the null-ref, the second the ref of the new HEAD and the flag is always 1.</p>   <p>This hook can be used to perform repository validity checks, auto-display differences from the previous HEAD if different, or set working dir metadata properties.</p>  </div> <div class=\"sect2\"> <h3 id=\"_post_merge\">post-merge</h3>  <p>This hook is invoked by <code>git merge</code>, which happens when a <code>git pull</code> is done on a local repository. The hook takes a single parameter, a status flag specifying whether or not the merge being done was a squash merge. This hook cannot affect the outcome of <code>git merge</code> and is not executed, if the merge failed due to conflicts.</p>   <p>This hook can be used in conjunction with a corresponding pre-commit hook to save and restore any form of metadata associated with the working tree (e.g.: permissions/ownership, ACLS, etc). See contrib/hooks/setgitperms.perl for an example of how to do this.</p>  </div> <div class=\"sect2\"> <h3 id=\"_pre_push\">pre-push</h3>  <p>This hook is called by <code>git push</code> and can be used to prevent a push from taking place. The hook is called with two parameters which provide the name and location of the destination remote, if a named remote is not being used both values will be the same.</p>   <p>Information about what is to be pushed is provided on the hook’s standard input with lines of the form:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;local ref&gt; SP &lt;local sha1&gt; SP &lt;remote ref&gt; SP &lt;remote sha1&gt; LF</pre> </div> </div>  <p>For instance, if the command <code>git push origin master:foreign</code> were run the hook would receive a line like the following:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>refs/heads/master 67890 refs/heads/foreign 12345</pre> </div> </div>  <p>although the full, 40-character SHA-1s would be supplied. If the foreign ref does not yet exist the <code>&lt;remote SHA-1&gt;</code> will be 40 <code>0</code>. If a ref is to be deleted, the <code>&lt;local ref&gt;</code> will be supplied as <code>(delete)</code> and the <code>&lt;local\nSHA-1&gt;</code> will be 40 <code>0</code>. If the local commit was specified by something other than a name which could be expanded (such as <code>HEAD~</code>, or a SHA-1) it will be supplied as it was originally given.</p>   <p>If this hook exits with a non-zero status, <code>git push</code> will abort without pushing anything. Information about why the push is rejected may be sent to the user by writing to standard error.</p>  </div> <div class=\"sect2\"> <h3 id=\"pre-receive\">pre-receive</h3>  <p>This hook is invoked by <code>git-receive-pack</code> on the remote repository, which happens when a <code>git push</code> is done on a local repository. Just before starting to update refs on the remote repository, the pre-receive hook is invoked. Its exit status determines the success or failure of the update.</p>   <p>This hook executes once for the receive operation. It takes no arguments, but for each ref to be updated it receives on standard input a line of the format:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;old-value&gt; SP &lt;new-value&gt; SP &lt;ref-name&gt; LF</pre> </div> </div>  <p>where <code>&lt;old-value&gt;</code> is the old object name stored in the ref, <code>&lt;new-value&gt;</code> is the new object name to be stored in the ref and <code>&lt;ref-name&gt;</code> is the full name of the ref. When creating a new ref, <code>&lt;old-value&gt;</code> is 40 <code>0</code>.</p>   <p>If the hook exits with non-zero status, none of the refs will be updated. If the hook exits with zero, updating of individual refs can still be prevented by the <a href=\"#update\"><em>update</em></a> hook.</p>   <p>Both standard output and standard error output are forwarded to <code>git send-pack</code> on the other end, so you can simply <code>echo</code> messages for the user.</p>  </div> <div class=\"sect2\"> <h3 id=\"update\">update</h3>  <p>This hook is invoked by <code>git-receive-pack</code> on the remote repository, which happens when a <code>git push</code> is done on a local repository. Just before updating the ref on the remote repository, the update hook is invoked. Its exit status determines the success or failure of the ref update.</p>   <p>The hook executes once for each ref to be updated, and takes three parameters:</p>  <div class=\"ulist\"> <ul> <li> <p>the name of the ref being updated,</p> </li> <li> <p>the old object name stored in the ref,</p> </li> <li> <p>and the new object name to be stored in the ref.</p> </li> </ul> </div>  <p>A zero exit from the update hook allows the ref to be updated. Exiting with a non-zero status prevents <code>git-receive-pack</code> from updating that ref.</p>   <p>This hook can be used to prevent <code>forced</code> update on certain refs by making sure that the object name is a commit object that is a descendant of the commit object named by the old object name. That is, to enforce a \"fast-forward only\" policy.</p>   <p>It could also be used to log the old..new status. However, it does not know the entire set of branches, so it would end up firing one e-mail per ref when used naively, though. The <a href=\"#post-receive\"><em>post-receive</em></a> hook is more suited to that.</p>   <p>In an environment that restricts the users' access only to git commands over the wire, this hook can be used to implement access control without relying on filesystem ownership and group membership. See <a href=\"git-shell\">git-shell[1]</a> for how you might use the login shell to restrict the user’s access to only git commands.</p>   <p>Both standard output and standard error output are forwarded to <code>git send-pack</code> on the other end, so you can simply <code>echo</code> messages for the user.</p>   <p>The default <code>update</code> hook, when enabled—​and with <code>hooks.allowunannotated</code> config option unset or set to false—​prevents unannotated tags to be pushed.</p>  </div> <div class=\"sect2\"> <h3 id=\"post-receive\">post-receive</h3>  <p>This hook is invoked by <code>git-receive-pack</code> on the remote repository, which happens when a <code>git push</code> is done on a local repository. It executes on the remote repository once after all the refs have been updated.</p>   <p>This hook executes once for the receive operation. It takes no arguments, but gets the same information as the <a href=\"#pre-receive\"><em>pre-receive</em></a> hook does on its standard input.</p>   <p>This hook does not affect the outcome of <code>git-receive-pack</code>, as it is called after the real work is done.</p>   <p>This supersedes the <a href=\"#post-update\"><em>post-update</em></a> hook in that it gets both old and new values of all the refs in addition to their names.</p>   <p>Both standard output and standard error output are forwarded to <code>git send-pack</code> on the other end, so you can simply <code>echo</code> messages for the user.</p>   <p>The default <code>post-receive</code> hook is empty, but there is a sample script <code>post-receive-email</code> provided in the <code>contrib/hooks</code> directory in Git distribution, which implements sending commit emails.</p>  </div> <div class=\"sect2\"> <h3 id=\"post-update\">post-update</h3>  <p>This hook is invoked by <code>git-receive-pack</code> on the remote repository, which happens when a <code>git push</code> is done on a local repository. It executes on the remote repository once after all the refs have been updated.</p>   <p>It takes a variable number of parameters, each of which is the name of ref that was actually updated.</p>   <p>This hook is meant primarily for notification, and cannot affect the outcome of <code>git-receive-pack</code>.</p>   <p>The <code>post-update</code> hook can tell what are the heads that were pushed, but it does not know what their original and updated values are, so it is a poor place to do log old..new. The <a href=\"#post-receive\"><em>post-receive</em></a> hook does get both original and updated values of the refs. You might consider it instead if you need them.</p>   <p>When enabled, the default <code>post-update</code> hook runs <code>git update-server-info</code> to keep the information used by dumb transports (e.g., HTTP) up-to-date. If you are publishing a Git repository that is accessible via HTTP, you should probably enable this hook.</p>   <p>Both standard output and standard error output are forwarded to <code>git send-pack</code> on the other end, so you can simply <code>echo</code> messages for the user.</p>  </div> <div class=\"sect2\"> <h3 id=\"_push_to_checkout\">push-to-checkout</h3>  <p>This hook is invoked by <code>git-receive-pack</code> on the remote repository, which happens when a <code>git push</code> is done on a local repository, when the push tries to update the branch that is currently checked out and the <code>receive.denyCurrentBranch</code> configuration variable is set to <code>updateInstead</code>. Such a push by default is refused if the working tree and the index of the remote repository has any difference from the currently checked out commit; when both the working tree and the index match the current commit, they are updated to match the newly pushed tip of the branch. This hook is to be used to override the default behaviour.</p>   <p>The hook receives the commit with which the tip of the current branch is going to be updated. It can exit with a non-zero status to refuse the push (when it does so, it must not modify the index or the working tree). Or it can make any necessary changes to the working tree and to the index to bring them to the desired state when the tip of the current branch is updated to the new commit, and exit with a zero status.</p>   <p>For example, the hook can simply run <code>git read-tree -u -m HEAD \"$1\"</code> in order to emulate <code>git fetch</code> that is run in the reverse direction with <code>git push</code>, as the two-tree form of <code>read-tree -u -m</code> is essentially the same as <code>git checkout</code> that switches branches while keeping the local changes in the working tree that do not interfere with the difference between the branches.</p>  </div> <div class=\"sect2\"> <h3 id=\"_pre_auto_gc\">pre-auto-gc</h3>  <p>This hook is invoked by <code>git gc --auto</code>. It takes no parameter, and exiting with non-zero status from this script causes the <code>git gc --auto</code> to abort.</p>  </div> <div class=\"sect2\"> <h3 id=\"_post_rewrite\">post-rewrite</h3>  <p>This hook is invoked by commands that rewrite commits (<code>git commit\n--amend</code>, <code>git-rebase</code>; currently <code>git-filter-branch</code> does <code>not</code> call it!). Its first argument denotes the command it was invoked by: currently one of <code>amend</code> or <code>rebase</code>. Further command-dependent arguments may be passed in the future.</p>   <p>The hook receives a list of the rewritten commits on stdin, in the format</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;old-sha1&gt; SP &lt;new-sha1&gt; [ SP &lt;extra-info&gt; ] LF</pre> </div> </div>  <p>The <code>extra-info</code> is again command-dependent. If it is empty, the preceding SP is also omitted. Currently, no commands pass any <code>extra-info</code>.</p>   <p>The hook always runs after the automatic note copying (see \"notes.rewrite.&lt;command&gt;\" in <a href=\"git-config\">git-config[1]</a>) has happened, and thus has access to these notes.</p>   <p>The following command-specific comments apply:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">rebase</dt> <dd> <p>For the <code>squash</code> and <code>fixup</code> operation, all commits that were squashed are listed as being rewritten to the squashed commit. This means that there will be several lines sharing the same <code>new-sha1</code>.</p>  <p>The commits are guaranteed to be listed in the order that they were processed by rebase.</p>  </dd> </dl> </div> </div>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/githooks\" class=\"_attribution-link\">https://git-scm.com/docs/githooks</a>\n  </p>\n</div>\n","git-var":"<h1>git-var</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-var - Show a Git logical variable</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git var ( -l | &lt;variable&gt; )</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Prints a Git logical variable.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-l</dt> <dd> <p>Cause the logical variables to be listed. In addition, all the variables of the Git configuration file .git/config are listed as well. (However, the configuration variables listing functionality is deprecated in favor of <code>git config -l</code>.)</p> </dd> </dl> </div></div>   <h2 id=\"_example\">Example</h2> <div class=\"sectionbody\"><div class=\"literalblock\"> <div class=\"content\"> <pre>$ git var GIT_AUTHOR_IDENT\nEric W. Biederman &lt;ebiederm@lnxi.com&gt; 1121223278 -0600</pre> </div> </div></div>   <h2 id=\"_variables\">Variables</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">GIT_AUTHOR_IDENT</dt> <dd> <p>The author of a piece of code.</p> </dd> <dt class=\"hdlist1\">GIT_COMMITTER_IDENT</dt> <dd> <p>The person who put a piece of code into Git.</p> </dd> <dt class=\"hdlist1\">GIT_EDITOR</dt> <dd> <p>Text editor for use by Git commands. The value is meant to be interpreted by the shell when it is used. Examples: <code>~/bin/vi</code>, <code>$SOME_ENVIRONMENT_VARIABLE</code>, <code>\"C:\\Program Files\\Vim\\gvim.exe\"\n--nofork</code>. The order of preference is the <code>$GIT_EDITOR</code> environment variable, then <code>core.editor</code> configuration, then <code>$VISUAL</code>, then <code>$EDITOR</code>, and then the default chosen at compile time, which is usually <code>vi</code>.</p> </dd> <dt class=\"hdlist1\">GIT_PAGER</dt> <dd> <p>Text viewer for use by Git commands (e.g., <code>less</code>). The value is meant to be interpreted by the shell. The order of preference is the <code>$GIT_PAGER</code> environment variable, then <code>core.pager</code> configuration, then <code>$PAGER</code>, and then the default chosen at compile time (usually <code>less</code>).</p> </dd> </dl> </div></div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-commit-tree\">git-commit-tree[1]</a> <a href=\"git-tag\">git-tag[1]</a> <a href=\"git-config\">git-config[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-var\" class=\"_attribution-link\">https://git-scm.com/docs/git-var</a>\n  </p>\n</div>\n","git-worktree":"<h1>git-worktree</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-worktree - Manage multiple working trees</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git worktree add [-f] [--detach] [--checkout] [-b &lt;new-branch&gt;] &lt;path&gt; [&lt;branch&gt;]\ngit worktree prune [-n] [-v] [--expire &lt;expire&gt;]\ngit worktree list [--porcelain]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Manage multiple working trees attached to the same repository.</p>   <p>A git repository can support multiple working trees, allowing you to check out more than one branch at a time. With <code>git worktree add</code> a new working tree is associated with the repository. This new working tree is called a \"linked working tree\" as opposed to the \"main working tree\" prepared by \"git init\" or \"git clone\". A repository has one main working tree (if it’s not a bare repository) and zero or more linked working trees.</p>   <p>When you are done with a linked working tree you can simply delete it. The working tree’s administrative files in the repository (see \"DETAILS\" below) will eventually be removed automatically (see <code>gc.worktreePruneExpire</code> in <a href=\"git-config\">git-config[1]</a>), or you can run <code>git worktree prune</code> in the main or any linked working tree to clean up any stale administrative files.</p>   <p>If you move a linked working tree, you need to manually update the administrative files so that they do not get pruned automatically. See section \"DETAILS\" for more information.</p>   <p>If a linked working tree is stored on a portable device or network share which is not always mounted, you can prevent its administrative files from being pruned by creating a file named <code>locked</code> alongside the other administrative files, optionally containing a plain text reason that pruning should be suppressed. See section \"DETAILS\" for more information.</p> </div>   <h2 id=\"_commands\">Commands</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">add &lt;path&gt; [&lt;branch&gt;]</dt> <dd> <p>Create <code>&lt;path&gt;</code> and checkout <code>&lt;branch&gt;</code> into it. The new working directory is linked to the current repository, sharing everything except working directory specific files such as HEAD, index, etc.</p>  <p>If <code>&lt;branch&gt;</code> is omitted and neither <code>-b</code> nor <code>-B</code> nor <code>--detached</code> used, then, as a convenience, a new branch based at HEAD is created automatically, as if <code>-b $(basename &lt;path&gt;)</code> was specified.</p>  </dd> <dt class=\"hdlist1\">prune</dt> <dd> <p>Prune working tree information in $GIT_DIR/worktrees.</p> </dd> <dt class=\"hdlist1\">list</dt> <dd> <p>List details of each worktree. The main worktree is listed first, followed by each of the linked worktrees. The output details include if the worktree is bare, the revision currently checked out, and the branch currently checked out (or <code>detached HEAD</code> if none).</p> </dd> </dl> </div></div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-f</dt> <dt class=\"hdlist1\">--force</dt> <dd> <p>By default, <code>add</code> refuses to create a new working tree when <code>&lt;branch&gt;</code> is already checked out by another working tree. This option overrides that safeguard.</p> </dd> <dt class=\"hdlist1\">-b &lt;new-branch&gt;</dt> <dt class=\"hdlist1\">-B &lt;new-branch&gt;</dt> <dd> <p>With <code>add</code>, create a new branch named <code>&lt;new-branch&gt;</code> starting at <code>&lt;branch&gt;</code>, and check out <code>&lt;new-branch&gt;</code> into the new working tree. If <code>&lt;branch&gt;</code> is omitted, it defaults to HEAD. By default, <code>-b</code> refuses to create a new branch if it already exists. <code>-B</code> overrides this safeguard, resetting <code>&lt;new-branch&gt;</code> to <code>&lt;branch&gt;</code>.</p> </dd> <dt class=\"hdlist1\">--detach</dt> <dd> <p>With <code>add</code>, detach HEAD in the new working tree. See \"DETACHED HEAD\" in <a href=\"git-checkout\">git-checkout[1]</a>.</p> </dd> <dt class=\"hdlist1\">--[no-]checkout</dt> <dd> <p>By default, <code>add</code> checks out <code>&lt;branch&gt;</code>, however, <code>--no-checkout</code> can be used to suppress checkout in order to make customizations, such as configuring sparse-checkout. See \"Sparse checkout\" in <a href=\"git-read-tree\">git-read-tree[1]</a>.</p> </dd> <dt class=\"hdlist1\">-n</dt> <dt class=\"hdlist1\">--dry-run</dt> <dd> <p>With <code>prune</code>, do not remove anything; just report what it would remove.</p> </dd> <dt class=\"hdlist1\">--porcelain</dt> <dd> <p>With <code>list</code>, output in an easy-to-parse format for scripts. This format will remain stable across Git versions and regardless of user configuration. See below for details.</p> </dd> <dt class=\"hdlist1\">-v</dt> <dt class=\"hdlist1\">--verbose</dt> <dd> <p>With <code>prune</code>, report all removals.</p> </dd> <dt class=\"hdlist1\">--expire &lt;time&gt;</dt> <dd> <p>With <code>prune</code>, only expire unused working trees older than &lt;time&gt;.</p> </dd> </dl> </div></div>   <h2 id=\"_details\">Details</h2> <div class=\"sectionbody\"> <p>Each linked working tree has a private sub-directory in the repository’s $GIT_DIR/worktrees directory. The private sub-directory’s name is usually the base name of the linked working tree’s path, possibly appended with a number to make it unique. For example, when <code>$GIT_DIR=/path/main/.git</code> the command <code>git worktree add /path/other/test-next next</code> creates the linked working tree in <code>/path/other/test-next</code> and also creates a <code>$GIT_DIR/worktrees/test-next</code> directory (or <code>$GIT_DIR/worktrees/test-next1</code> if <code>test-next</code> is already taken).</p>   <p>Within a linked working tree, $GIT_DIR is set to point to this private directory (e.g. <code>/path/main/.git/worktrees/test-next</code> in the example) and $GIT_COMMON_DIR is set to point back to the main working tree’s $GIT_DIR (e.g. <code>/path/main/.git</code>). These settings are made in a <code>.git</code> file located at the top directory of the linked working tree.</p>   <p>Path resolution via <code>git rev-parse --git-path</code> uses either $GIT_DIR or $GIT_COMMON_DIR depending on the path. For example, in the linked working tree <code>git rev-parse --git-path HEAD</code> returns <code>/path/main/.git/worktrees/test-next/HEAD</code> (not <code>/path/other/test-next/.git/HEAD</code> or <code>/path/main/.git/HEAD</code>) while <code>git\nrev-parse --git-path refs/heads/master</code> uses $GIT_COMMON_DIR and returns <code>/path/main/.git/refs/heads/master</code>, since refs are shared across all working trees.</p>   <p>See <a href=\"gitrepository-layout\">gitrepository-layout[5]</a> for more information. The rule of thumb is do not make any assumption about whether a path belongs to $GIT_DIR or $GIT_COMMON_DIR when you need to directly access something inside $GIT_DIR. Use <code>git rev-parse --git-path</code> to get the final path.</p>   <p>If you move a linked working tree, you need to update the <code>gitdir</code> file in the entry’s directory. For example, if a linked working tree is moved to <code>/newpath/test-next</code> and its <code>.git</code> file points to <code>/path/main/.git/worktrees/test-next</code>, then update <code>/path/main/.git/worktrees/test-next/gitdir</code> to reference <code>/newpath/test-next</code> instead.</p>   <p>To prevent a $GIT_DIR/worktrees entry from being pruned (which can be useful in some situations, such as when the entry’s working tree is stored on a portable device), add a file named <code>locked</code> to the entry’s directory. The file contains the reason in plain text. For example, if a linked working tree’s <code>.git</code> file points to <code>/path/main/.git/worktrees/test-next</code> then a file named <code>/path/main/.git/worktrees/test-next/locked</code> will prevent the <code>test-next</code> entry from being pruned. See <a href=\"gitrepository-layout\">gitrepository-layout[5]</a> for details.</p> </div>   <h2 id=\"_list_output_format\">List output format</h2> <div class=\"sectionbody\"> <p>The worktree list command has two output formats. The default format shows the details on a single line with columns. For example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>S git worktree list\n/path/to/bare-source            (bare)\n/path/to/linked-worktree        abcd1234 [master]\n/path/to/other-linked-worktree  1234abc  (detached HEAD)</pre> </div> </div> <div class=\"sect2\"> <h3 id=\"_porcelain_format\">Porcelain Format</h3>  <p>The porcelain format has a line per attribute. Attributes are listed with a label and value separated by a single space. Boolean attributes (like <code>bare</code> and <code>detached</code>) are listed as a label only, and are only present if and only if the value is true. An empty line indicates the end of a worktree. For example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>S git worktree list --porcelain\nworktree /path/to/bare-source\nbare\n\nworktree /path/to/linked-worktree\nHEAD abcd1234abcd1234abcd1234abcd1234abcd1234\nbranch refs/heads/master\n\nworktree /path/to/other-linked-worktree\nHEAD 1234abc1234abc1234abc1234abc1234abc1234a\ndetached</pre> </div> </div> </div>\n</div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"> <p>You are in the middle of a refactoring session and your boss comes in and demands that you fix something immediately. You might typically use <a href=\"git-stash\">git-stash[1]</a> to store your changes away temporarily, however, your working tree is in such a state of disarray (with new, moved, and removed files, and other bits and pieces strewn around) that you don’t want to risk disturbing any of it. Instead, you create a temporary linked working tree to make the emergency fix, remove it when done, and then resume your earlier refactoring session.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git worktree add -b emergency-fix ../temp master\n$ pushd ../temp\n# ... hack hack hack ...\n$ git commit -a -m 'emergency fix for boss'\n$ popd\n$ rm -rf ../temp\n$ git worktree prune</pre> </div> </div>\n</div>   <h2 id=\"_bugs\">Bugs</h2> <div class=\"sectionbody\"> <p>Multiple checkout in general is still experimental, and the support for submodules is incomplete. It is NOT recommended to make multiple checkouts of a superproject.</p>   <p>git-worktree could provide more automation for tasks currently performed manually, such as:</p>  <div class=\"ulist\"> <ul> <li> <p><code>remove</code> to remove a linked working tree and its administrative files (and warn if the working tree is dirty)</p> </li> <li> <p><code>mv</code> to move or rename a working tree and update its administrative files</p> </li> <li> <p><code>lock</code> to prevent automatic pruning of administrative files (for instance, for a working tree on a portable device)</p> </li> </ul> </div>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-worktree\" class=\"_attribution-link\">https://git-scm.com/docs/git-worktree</a>\n  </p>\n</div>\n","gitworkflows":"<h1>gitworkflows</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>gitworkflows - An overview of recommended workflows with Git</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git *</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>This document attempts to write down and motivate some of the workflow elements used for <code>git.git</code> itself. Many ideas apply in general, though the full workflow is rarely required for smaller projects with fewer people involved.</p>   <p>We formulate a set of <code>rules</code> for quick reference, while the prose tries to motivate each of them. Do not always take them literally; you should value good reasons for your actions higher than manpages such as this one.</p> </div>   <h2 id=\"_separate_changes\">Separate changes</h2> <div class=\"sectionbody\"> <p>As a general rule, you should try to split your changes into small logical steps, and commit each of them. They should be consistent, working independently of any later commits, pass the test suite, etc. This makes the review process much easier, and the history much more useful for later inspection and analysis, for example with <a href=\"git-blame\">git-blame[1]</a> and <a href=\"git-bisect\">git-bisect[1]</a>.</p>   <p>To achieve this, try to split your work into small steps from the very beginning. It is always easier to squash a few commits together than to split one big commit into several. Don’t be afraid of making too small or imperfect steps along the way. You can always go back later and edit the commits with <code>git rebase --interactive</code> before you publish them. You can use <code>git stash save --keep-index</code> to run the test suite independent of other uncommitted changes; see the EXAMPLES section of <a href=\"git-stash\">git-stash[1]</a>.</p> </div>   <h2 id=\"_managing_branches\">Managing branches</h2> <div class=\"sectionbody\"> <p>There are two main tools that can be used to include changes from one branch on another: <a href=\"git-merge\">git-merge[1]</a> and <a href=\"git-cherry-pick\">git-cherry-pick[1]</a>.</p>   <p>Merges have many advantages, so we try to solve as many problems as possible with merges alone. Cherry-picking is still occasionally useful; see \"Merging upwards\" below for an example.</p>   <p>Most importantly, merging works at the branch level, while cherry-picking works at the commit level. This means that a merge can carry over the changes from 1, 10, or 1000 commits with equal ease, which in turn means the workflow scales much better to a large number of contributors (and contributions). Merges are also easier to understand because a merge commit is a \"promise\" that all changes from all its parents are now included.</p>   <p>There is a tradeoff of course: merges require a more careful branch management. The following subsections discuss the important points.</p>  <div class=\"sect2\"> <h3 id=\"_graduation\">Graduation</h3>  <p>As a given feature goes from experimental to stable, it also \"graduates\" between the corresponding branches of the software. <code>git.git</code> uses the following <code>integration branches</code>:</p>  <div class=\"ulist\"> <ul> <li> <p><code>maint</code> tracks the commits that should go into the next \"maintenance release\", i.e., update of the last released stable version;</p> </li> <li> <p><code>master</code> tracks the commits that should go into the next release;</p> </li> <li> <p><code>next</code> is intended as a testing branch for topics being tested for stability for master.</p> </li> </ul> </div>  <p>There is a fourth official branch that is used slightly differently:</p>  <div class=\"ulist\"> <ul> <li> <p><code>pu</code> (proposed updates) is an integration branch for things that are not quite ready for inclusion yet (see \"Integration Branches\" below).</p> </li> </ul> </div>  <p>Each of the four branches is usually a direct descendant of the one above it.</p>   <p>Conceptually, the feature enters at an unstable branch (usually <code>next</code> or <code>pu</code>), and \"graduates\" to <code>master</code> for the next release once it is considered stable enough.</p>  </div> <div class=\"sect2\"> <h3 id=\"_merging_upwards\">Merging upwards</h3>  <p>The \"downwards graduation\" discussed above cannot be done by actually merging downwards, however, since that would merge <code>all</code> changes on the unstable branch into the stable one. Hence the following:</p>  <div class=\"exampleblock\"> <div class=\"title\">Rule: Merge upwards</div> <div class=\"content\">  <p>Always commit your fixes to the oldest supported branch that require them. Then (periodically) merge the integration branches upwards into each other.</p>  </div> </div>  <p>This gives a very controlled flow of fixes. If you notice that you have applied a fix to e.g. <code>master</code> that is also required in <code>maint</code>, you will need to cherry-pick it (using <a href=\"git-cherry-pick\">git-cherry-pick[1]</a>) downwards. This will happen a few times and is nothing to worry about unless you do it very frequently.</p>  </div> <div class=\"sect2\"> <h3 id=\"_topic_branches\">Topic branches</h3>  <p>Any nontrivial feature will require several patches to implement, and may get extra bugfixes or improvements during its lifetime.</p>   <p>Committing everything directly on the integration branches leads to many problems: Bad commits cannot be undone, so they must be reverted one by one, which creates confusing histories and further error potential when you forget to revert part of a group of changes. Working in parallel mixes up the changes, creating further confusion.</p>   <p>Use of \"topic branches\" solves these problems. The name is pretty self explanatory, with a caveat that comes from the \"merge upwards\" rule above:</p>  <div class=\"exampleblock\"> <div class=\"title\">Rule: Topic branches</div> <div class=\"content\">  <p>Make a side branch for every topic (feature, bugfix, …​). Fork it off at the oldest integration branch that you will eventually want to merge it into.</p>  </div> </div>  <p>Many things can then be done very naturally:</p>  <div class=\"ulist\"> <ul> <li> <p>To get the feature/bugfix into an integration branch, simply merge it. If the topic has evolved further in the meantime, merge again. (Note that you do not necessarily have to merge it to the oldest integration branch first. For example, you can first merge a bugfix to <code>next</code>, give it some testing time, and merge to <code>maint</code> when you know it is stable.)</p> </li> <li> <p>If you find you need new features from the branch <code>other</code> to continue working on your topic, merge <code>other</code> to <code>topic</code>. (However, do not do this \"just habitually\", see below.)</p> </li> <li> <p>If you find you forked off the wrong branch and want to move it \"back in time\", use <a href=\"git-rebase\">git-rebase[1]</a>.</p> </li> </ul> </div>  <p>Note that the last point clashes with the other two: a topic that has been merged elsewhere should not be rebased. See the section on RECOVERING FROM UPSTREAM REBASE in <a href=\"git-rebase\">git-rebase[1]</a>.</p>   <p>We should point out that \"habitually\" (regularly for no real reason) merging an integration branch into your topics — and by extension, merging anything upstream into anything downstream on a regular basis — is frowned upon:</p>  <div class=\"exampleblock\"> <div class=\"title\">Rule: Merge to downstream only at well-defined points</div> <div class=\"content\">  <p>Do not merge to downstream except with a good reason: upstream API changes affect your branch; your branch no longer merges to upstream cleanly; etc.</p>  </div> </div>  <p>Otherwise, the topic that was merged to suddenly contains more than a single (well-separated) change. The many resulting small merges will greatly clutter up history. Anyone who later investigates the history of a file will have to find out whether that merge affected the topic in development. An upstream might even inadvertently be merged into a \"more stable\" branch. And so on.</p>  </div> <div class=\"sect2\"> <h3 id=\"_throw_away_integration\">Throw-away integration</h3>  <p>If you followed the last paragraph, you will now have many small topic branches, and occasionally wonder how they interact. Perhaps the result of merging them does not even work? But on the other hand, we want to avoid merging them anywhere \"stable\" because such merges cannot easily be undone.</p>   <p>The solution, of course, is to make a merge that we can undo: merge into a throw-away branch.</p>  <div class=\"exampleblock\"> <div class=\"title\">Rule: Throw-away integration branches</div> <div class=\"content\">  <p>To test the interaction of several topics, merge them into a throw-away branch. You must never base any work on such a branch!</p>  </div> </div>  <p>If you make it (very) clear that this branch is going to be deleted right after the testing, you can even publish this branch, for example to give the testers a chance to work with it, or other developers a chance to see if their in-progress work will be compatible. <code>git.git</code> has such an official throw-away integration branch called <code>pu</code>.</p>  </div> <div class=\"sect2\"> <h3 id=\"_branch_management_for_a_release\">Branch management for a release</h3>  <p>Assuming you are using the merge approach discussed above, when you are releasing your project you will need to do some additional branch management work.</p>   <p>A feature release is created from the <code>master</code> branch, since <code>master</code> tracks the commits that should go into the next feature release.</p>   <p>The <code>master</code> branch is supposed to be a superset of <code>maint</code>. If this condition does not hold, then <code>maint</code> contains some commits that are not included on <code>master</code>. The fixes represented by those commits will therefore not be included in your feature release.</p>   <p>To verify that <code>master</code> is indeed a superset of <code>maint</code>, use git log:</p>  <div class=\"exampleblock\"> <div class=\"title\">Recipe: Verify <em>master</em> is a superset of <em>maint</em>\n</div> <div class=\"content\">  <p><code>git log master..maint</code></p>  </div> </div>  <p>This command should not list any commits. Otherwise, check out <code>master</code> and merge <code>maint</code> into it.</p>   <p>Now you can proceed with the creation of the feature release. Apply a tag to the tip of <code>master</code> indicating the release version:</p>  <div class=\"exampleblock\"> <div class=\"title\">Recipe: Release tagging</div> <div class=\"content\">  <p><code>git tag -s -m \"Git X.Y.Z\" vX.Y.Z master</code></p>  </div> </div>  <p>You need to push the new tag to a public Git server (see \"DISTRIBUTED WORKFLOWS\" below). This makes the tag available to others tracking your project. The push could also trigger a post-update hook to perform release-related items such as building release tarballs and preformatted documentation pages.</p>   <p>Similarly, for a maintenance release, <code>maint</code> is tracking the commits to be released. Therefore, in the steps above simply tag and push <code>maint</code> rather than <code>master</code>.</p>  </div> <div class=\"sect2\"> <h3 id=\"_maintenance_branch_management_after_a_feature_release\">Maintenance branch management after a feature release</h3>  <p>After a feature release, you need to manage your maintenance branches.</p>   <p>First, if you wish to continue to release maintenance fixes for the feature release made before the recent one, then you must create another branch to track commits for that previous release.</p>   <p>To do this, the current maintenance branch is copied to another branch named with the previous release version number (e.g. maint-X.Y.(Z-1) where X.Y.Z is the current release).</p>  <div class=\"exampleblock\"> <div class=\"title\">Recipe: Copy maint</div> <div class=\"content\">  <p><code>git branch maint-X.Y.(Z-1) maint</code></p>  </div> </div>  <p>The <code>maint</code> branch should now be fast-forwarded to the newly released code so that maintenance fixes can be tracked for the current release:</p>  <div class=\"exampleblock\"> <div class=\"title\">Recipe: Update maint to new release</div> <div class=\"content\"> <div class=\"ulist\"> <ul> <li> <p><code>git checkout maint</code></p> </li> <li> <p><code>git merge --ff-only master</code></p> </li> </ul> </div> </div> </div>  <p>If the merge fails because it is not a fast-forward, then it is possible some fixes on <code>maint</code> were missed in the feature release. This will not happen if the content of the branches was verified as described in the previous section.</p>  </div> <div class=\"sect2\"> <h3 id=\"_branch_management_for_next_and_pu_after_a_feature_release\">Branch management for next and pu after a feature release</h3>  <p>After a feature release, the integration branch <code>next</code> may optionally be rewound and rebuilt from the tip of <code>master</code> using the surviving topics on <code>next</code>:</p>  <div class=\"exampleblock\"> <div class=\"title\">Recipe: Rewind and rebuild next</div> <div class=\"content\"> <div class=\"ulist\"> <ul> <li> <p><code>git checkout next</code></p> </li> <li> <p><code>git reset --hard master</code></p> </li> <li> <p><code>git merge ai/topic_in_next1</code></p> </li> <li> <p><code>git merge ai/topic_in_next2</code></p> </li> <li> <p>…​</p> </li> </ul> </div> </div> </div>  <p>The advantage of doing this is that the history of <code>next</code> will be clean. For example, some topics merged into <code>next</code> may have initially looked promising, but were later found to be undesirable or premature. In such a case, the topic is reverted out of <code>next</code> but the fact remains in the history that it was once merged and reverted. By recreating <code>next</code>, you give another incarnation of such topics a clean slate to retry, and a feature release is a good point in history to do so.</p>   <p>If you do this, then you should make a public announcement indicating that <code>next</code> was rewound and rebuilt.</p>   <p>The same rewind and rebuild process may be followed for <code>pu</code>. A public announcement is not necessary since <code>pu</code> is a throw-away branch, as described above.</p>  </div>\n</div>   <h2 id=\"_distributed_workflows\">Distributed workflows</h2> <div class=\"sectionbody\"> <p>After the last section, you should know how to manage topics. In general, you will not be the only person working on the project, so you will have to share your work.</p>   <p>Roughly speaking, there are two important workflows: merge and patch. The important difference is that the merge workflow can propagate full history, including merges, while patches cannot. Both workflows can be used in parallel: in <code>git.git</code>, only subsystem maintainers use the merge workflow, while everyone else sends patches.</p>   <p>Note that the maintainer(s) may impose restrictions, such as \"Signed-off-by\" requirements, that all commits/patches submitted for inclusion must adhere to. Consult your project’s documentation for more information.</p>  <div class=\"sect2\"> <h3 id=\"_merge_workflow\">Merge workflow</h3>  <p>The merge workflow works by copying branches between upstream and downstream. Upstream can merge contributions into the official history; downstream base their work on the official history.</p>   <p>There are three main tools that can be used for this:</p>  <div class=\"ulist\"> <ul> <li> <p><a href=\"git-push\">git-push[1]</a> copies your branches to a remote repository, usually to one that can be read by all involved parties;</p> </li> <li> <p><a href=\"git-fetch\">git-fetch[1]</a> that copies remote branches to your repository; and</p> </li> <li> <p><a href=\"git-pull\">git-pull[1]</a> that does fetch and merge in one go.</p> </li> </ul> </div>  <p>Note the last point. Do <code>not</code> use <code>git pull</code> unless you actually want to merge the remote branch.</p>   <p>Getting changes out is easy:</p>  <div class=\"exampleblock\"> <div class=\"title\">Recipe: Push/pull: Publishing branches/topics</div> <div class=\"content\">  <p><code>git push &lt;remote&gt; &lt;branch&gt;</code> and tell everyone where they can fetch from.</p>  </div> </div>  <p>You will still have to tell people by other means, such as mail. (Git provides the <a href=\"git-request-pull\">git-request-pull[1]</a> to send preformatted pull requests to upstream maintainers to simplify this task.)</p>   <p>If you just want to get the newest copies of the integration branches, staying up to date is easy too:</p>  <div class=\"exampleblock\"> <div class=\"title\">Recipe: Push/pull: Staying up to date</div> <div class=\"content\">  <p>Use <code>git fetch &lt;remote&gt;</code> or <code>git remote update</code> to stay up to date.</p>  </div> </div>  <p>Then simply fork your topic branches from the stable remotes as explained earlier.</p>   <p>If you are a maintainer and would like to merge other people’s topic branches to the integration branches, they will typically send a request to do so by mail. Such a request looks like</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>Please pull from\n    &lt;url&gt; &lt;branch&gt;</pre> </div> </div>  <p>In that case, <code>git pull</code> can do the fetch and merge in one go, as follows.</p>  <div class=\"exampleblock\"> <div class=\"title\">Recipe: Push/pull: Merging remote topics</div> <div class=\"content\">  <p><code>git pull &lt;url&gt; &lt;branch&gt;</code></p>  </div> </div>  <p>Occasionally, the maintainer may get merge conflicts when he tries to pull changes from downstream. In this case, he can ask downstream to do the merge and resolve the conflicts themselves (perhaps they will know better how to resolve them). It is one of the rare cases where downstream <code>should</code> merge from upstream.</p>  </div> <div class=\"sect2\"> <h3 id=\"_patch_workflow\">Patch workflow</h3>  <p>If you are a contributor that sends changes upstream in the form of emails, you should use topic branches as usual (see above). Then use <a href=\"git-format-patch\">git-format-patch[1]</a> to generate the corresponding emails (highly recommended over manually formatting them because it makes the maintainer’s life easier).</p>  <div class=\"exampleblock\"> <div class=\"title\">Recipe: format-patch/am: Publishing branches/topics</div> <div class=\"content\"> <div class=\"ulist\"> <ul> <li> <p><code>git format-patch -M upstream..topic</code> to turn them into preformatted patch files</p> </li> <li> <p><code>git send-email --to=&lt;recipient&gt; &lt;patches&gt;</code></p> </li> </ul> </div> </div> </div>  <p>See the <a href=\"git-format-patch\">git-format-patch[1]</a> and <a href=\"git-send-email\">git-send-email[1]</a> manpages for further usage notes.</p>   <p>If the maintainer tells you that your patch no longer applies to the current upstream, you will have to rebase your topic (you cannot use a merge because you cannot format-patch merges):</p>  <div class=\"exampleblock\"> <div class=\"title\">Recipe: format-patch/am: Keeping topics up to date</div> <div class=\"content\">  <p><code>git pull --rebase &lt;url&gt; &lt;branch&gt;</code></p>  </div> </div>  <p>You can then fix the conflicts during the rebase. Presumably you have not published your topic other than by mail, so rebasing it is not a problem.</p>   <p>If you receive such a patch series (as maintainer, or perhaps as a reader of the mailing list it was sent to), save the mails to files, create a new topic branch and use <code>git am</code> to import the commits:</p>  <div class=\"exampleblock\"> <div class=\"title\">Recipe: format-patch/am: Importing patches</div> <div class=\"content\">  <p><code>git am &lt; patch</code></p>  </div> </div>  <p>One feature worth pointing out is the three-way merge, which can help if you get conflicts: <code>git am -3</code> will use index information contained in patches to figure out the merge base. See <a href=\"git-am\">git-am[1]</a> for other options.</p>  </div>\n</div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"gittutorial\">gittutorial[7]</a>, <a href=\"git-push\">git-push[1]</a>, <a href=\"git-pull\">git-pull[1]</a>, <a href=\"git-merge\">git-merge[1]</a>, <a href=\"git-rebase\">git-rebase[1]</a>, <a href=\"git-format-patch\">git-format-patch[1]</a>, <a href=\"git-send-email\">git-send-email[1]</a>, <a href=\"git-am\">git-am[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/gitworkflows\" class=\"_attribution-link\">https://git-scm.com/docs/gitworkflows</a>\n  </p>\n</div>\n","gitcvs-migration":"<h1>gitcvs-migration</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>gitcvs-migration - Git for CVS users</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git cvsimport *</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Git differs from CVS in that every working tree contains a repository with a full copy of the project history, and no repository is inherently more important than any other. However, you can emulate the CVS model by designating a single shared repository which people can synchronize with; this document explains how to do that.</p>   <p>Some basic familiarity with Git is required. Having gone through <a href=\"gittutorial\">gittutorial[7]</a> and <a href=\"gitglossary\">gitglossary[7]</a> should be sufficient.</p> </div>   <h2 id=\"_developing_against_a_shared_repository\">Developing against a shared repository</h2> <div class=\"sectionbody\"> <p>Suppose a shared repository is set up in /pub/repo.git on the host foo.com. Then as an individual committer you can clone the shared repository over ssh with:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git clone foo.com:/pub/repo.git/ my-project\n$ cd my-project</pre> </div> </div>  <p>and hack away. The equivalent of <code>cvs update</code> is</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git pull origin</pre> </div> </div>  <p>which merges in any work that others might have done since the clone operation. If there are uncommitted changes in your working tree, commit them first before running git pull.</p>  <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\">  <p>The <code>pull</code> command knows where to get updates from because of certain configuration variables that were set by the first <code>git clone</code> command; see <code>git config -l</code> and the <a href=\"git-config\">git-config[1]</a> man page for details.</p>  </td> </tr> </table> </div>  <p>You can update the shared repository with your changes by first committing your changes, and then using the <code>git push</code> command:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git push origin master</pre> </div> </div>  <p>to \"push\" those commits to the shared repository. If someone else has updated the repository more recently, <code>git push</code>, like <code>cvs commit</code>, will complain, in which case you must pull any changes before attempting the push again.</p>   <p>In the <code>git push</code> command above we specify the name of the remote branch to update (<code>master</code>). If we leave that out, <code>git push</code> tries to update any branches in the remote repository that have the same name as a branch in the local repository. So the last <code>push</code> can be done with either of:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git push origin\n$ git push foo.com:/pub/project.git/</pre> </div> </div>  <p>as long as the shared repository does not have any branches other than <code>master</code>.</p> </div>   <h2 id=\"_setting_up_a_shared_repository\">Setting up a shared repository</h2> <div class=\"sectionbody\"> <p>We assume you have already created a Git repository for your project, possibly created from scratch or from a tarball (see <a href=\"gittutorial\">gittutorial[7]</a>), or imported from an already existing CVS repository (see the next section).</p>   <p>Assume your existing repo is at /home/alice/myproject. Create a new \"bare\" repository (a repository without a working tree) and fetch your project into it:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ mkdir /pub/my-repo.git\n$ cd /pub/my-repo.git\n$ git --bare init --shared\n$ git --bare fetch /home/alice/myproject master:master</pre> </div> </div>  <p>Next, give every team member read/write access to this repository. One easy way to do this is to give all the team members ssh access to the machine where the repository is hosted. If you don’t want to give them a full shell on the machine, there is a restricted shell which only allows users to do Git pushes and pulls; see <a href=\"git-shell\">git-shell[1]</a>.</p>   <p>Put all the committers in the same group, and make the repository writable by that group:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ chgrp -R $group /pub/my-repo.git</pre> </div> </div>  <p>Make sure committers have a umask of at most 027, so that the directories they create are writable and searchable by other group members.</p> </div>   <h2 id=\"_importing_a_cvs_archive\">Importing a cvs archive</h2> <div class=\"sectionbody\"> <p>First, install version 2.1 or higher of cvsps from <a href=\"http://www.cobite.com/cvsps/\">http://www.cobite.com/cvsps/</a> and make sure it is in your path. Then cd to a checked out CVS working directory of the project you are interested in and run <a href=\"git-cvsimport\">git-cvsimport[1]</a>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git cvsimport -C &lt;destination&gt; &lt;module&gt;</pre> </div> </div>  <p>This puts a Git archive of the named CVS module in the directory &lt;destination&gt;, which will be created if necessary.</p>   <p>The import checks out from CVS every revision of every file. Reportedly cvsimport can average some twenty revisions per second, so for a medium-sized project this should not take more than a couple of minutes. Larger projects or remote repositories may take longer.</p>   <p>The main trunk is stored in the Git branch named <code>origin</code>, and additional CVS branches are stored in Git branches with the same names. The most recent version of the main trunk is also left checked out on the <code>master</code> branch, so you can start adding your own changes right away.</p>   <p>The import is incremental, so if you call it again next month it will fetch any CVS updates that have been made in the meantime. For this to work, you must not modify the imported branches; instead, create new branches for your own changes, and merge in the imported branches as necessary.</p>   <p>If you want a shared repository, you will need to make a bare clone of the imported directory, as described above. Then treat the imported directory as another development clone for purposes of merging incremental imports.</p> </div>   <h2 id=\"_advanced_shared_repository_management\">Advanced shared repository management</h2> <div class=\"sectionbody\"> <p>Git allows you to specify scripts called \"hooks\" to be run at certain points. You can use these, for example, to send all commits to the shared repository to a mailing list. See <a href=\"githooks\">githooks[5]</a>.</p>   <p>You can enforce finer grained permissions using update hooks. See <a href=\"https://git-scm.com/docs/howto/update-hook-example.html\">Controlling access to branches using update hooks</a>.</p> </div>   <h2 id=\"_providing_cvs_access_to_a_git_repository\">Providing cvs access to a git repository</h2> <div class=\"sectionbody\"> <p>It is also possible to provide true CVS access to a Git repository, so that developers can still use CVS; see <a href=\"git-cvsserver\">git-cvsserver[1]</a> for details.</p> </div>   <h2 id=\"_alternative_development_models\">Alternative development models</h2> <div class=\"sectionbody\"> <p>CVS users are accustomed to giving a group of developers commit access to a common repository. As we’ve seen, this is also possible with Git. However, the distributed nature of Git allows other development models, and you may want to first consider whether one of them might be a better fit for your project.</p>   <p>For example, you can choose a single person to maintain the project’s primary public repository. Other developers then clone this repository and each work in their own clone. When they have a series of changes that they’re happy with, they ask the maintainer to pull from the branch containing the changes. The maintainer reviews their changes and pulls them into the primary repository, which other developers pull from as necessary to stay coordinated. The Linux kernel and other projects use variants of this model.</p>   <p>With a small group, developers may just pull changes from each other’s repositories without the need for a central maintainer.</p> </div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"gittutorial\">gittutorial[7]</a>, <a href=\"gittutorial-2\">gittutorial-2[7]</a>, <a href=\"gitcore-tutorial\">gitcore-tutorial[7]</a>, <a href=\"gitglossary\">gitglossary[7]</a>, <a href=\"giteveryday\">giteveryday[7]</a>, <a href=\"user-manual\">The Git User’s Manual</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/gitcvs-migration\" class=\"_attribution-link\">https://git-scm.com/docs/gitcvs-migration</a>\n  </p>\n</div>\n","gittutorial-2":"<h1>gittutorial-2</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>gittutorial-2 - A tutorial introduction to Git: part two</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git *</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>You should work through <a href=\"gittutorial\">gittutorial[7]</a> before reading this tutorial.</p>   <p>The goal of this tutorial is to introduce two fundamental pieces of Git’s architecture—​the object database and the index file—​and to provide the reader with everything necessary to understand the rest of the Git documentation.</p> </div>   <h2 id=\"_the_git_object_database\">The git object database</h2> <div class=\"sectionbody\"> <p>Let’s start a new project and create a small amount of history:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ mkdir test-project\n$ cd test-project\n$ git init\nInitialized empty Git repository in .git/\n$ echo 'hello world' &gt; file.txt\n$ git add .\n$ git commit -a -m \"initial commit\"\n[master (root-commit) 54196cc] initial commit\n 1 file changed, 1 insertion(+)\n create mode 100644 file.txt\n$ echo 'hello world!' &gt;file.txt\n$ git commit -a -m \"add emphasis\"\n[master c4d59f3] add emphasis\n 1 file changed, 1 insertion(+), 1 deletion(-)</pre> </div> </div>  <p>What are the 7 digits of hex that Git responded to the commit with?</p>   <p>We saw in part one of the tutorial that commits have names like this. It turns out that every object in the Git history is stored under a 40-digit hex name. That name is the SHA-1 hash of the object’s contents; among other things, this ensures that Git will never store the same data twice (since identical data is given an identical SHA-1 name), and that the contents of a Git object will never change (since that would change the object’s name as well). The 7 char hex strings here are simply the abbreviation of such 40 character long strings. Abbreviations can be used everywhere where the 40 character strings can be used, so long as they are unambiguous.</p>   <p>It is expected that the content of the commit object you created while following the example above generates a different SHA-1 hash than the one shown above because the commit object records the time when it was created and the name of the person performing the commit.</p>   <p>We can ask Git about this particular object with the <code>cat-file</code> command. Don’t copy the 40 hex digits from this example but use those from your own version. Note that you can shorten it to only a few characters to save yourself typing all 40 hex digits:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git cat-file -t 54196cc2\ncommit\n$ git cat-file commit 54196cc2\ntree 92b8b694ffb1675e5975148e1121810081dbdffe\nauthor J. Bruce Fields &lt;bfields@puzzle.fieldses.org&gt; 1143414668 -0500\ncommitter J. Bruce Fields &lt;bfields@puzzle.fieldses.org&gt; 1143414668 -0500\n\ninitial commit</pre> </div> </div>  <p>A tree can refer to one or more \"blob\" objects, each corresponding to a file. In addition, a tree can also refer to other tree objects, thus creating a directory hierarchy. You can examine the contents of any tree using ls-tree (remember that a long enough initial portion of the SHA-1 will also work):</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git ls-tree 92b8b694\n100644 blob 3b18e512dba79e4c8300dd08aeb37f8e728b8dad    file.txt</pre> </div> </div>  <p>Thus we see that this tree has one file in it. The SHA-1 hash is a reference to that file’s data:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git cat-file -t 3b18e512\nblob</pre> </div> </div>  <p>A \"blob\" is just file data, which we can also examine with cat-file:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git cat-file blob 3b18e512\nhello world</pre> </div> </div>  <p>Note that this is the old file data; so the object that Git named in its response to the initial tree was a tree with a snapshot of the directory state that was recorded by the first commit.</p>   <p>All of these objects are stored under their SHA-1 names inside the Git directory:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ find .git/objects/\n.git/objects/\n.git/objects/pack\n.git/objects/info\n.git/objects/3b\n.git/objects/3b/18e512dba79e4c8300dd08aeb37f8e728b8dad\n.git/objects/92\n.git/objects/92/b8b694ffb1675e5975148e1121810081dbdffe\n.git/objects/54\n.git/objects/54/196cc2703dc165cbd373a65a4dcf22d50ae7f7\n.git/objects/a0\n.git/objects/a0/423896973644771497bdc03eb99d5281615b51\n.git/objects/d0\n.git/objects/d0/492b368b66bdabf2ac1fd8c92b39d3db916e59\n.git/objects/c4\n.git/objects/c4/d59f390b9cfd4318117afde11d601c1085f241</pre> </div> </div>  <p>and the contents of these files is just the compressed data plus a header identifying their length and their type. The type is either a blob, a tree, a commit, or a tag.</p>   <p>The simplest commit to find is the HEAD commit, which we can find from .git/HEAD:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ cat .git/HEAD\nref: refs/heads/master</pre> </div> </div>  <p>As you can see, this tells us which branch we’re currently on, and it tells us this by naming a file under the .git directory, which itself contains a SHA-1 name referring to a commit object, which we can examine with cat-file:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ cat .git/refs/heads/master\nc4d59f390b9cfd4318117afde11d601c1085f241\n$ git cat-file -t c4d59f39\ncommit\n$ git cat-file commit c4d59f39\ntree d0492b368b66bdabf2ac1fd8c92b39d3db916e59\nparent 54196cc2703dc165cbd373a65a4dcf22d50ae7f7\nauthor J. Bruce Fields &lt;bfields@puzzle.fieldses.org&gt; 1143418702 -0500\ncommitter J. Bruce Fields &lt;bfields@puzzle.fieldses.org&gt; 1143418702 -0500\n\nadd emphasis</pre> </div> </div>  <p>The \"tree\" object here refers to the new state of the tree:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git ls-tree d0492b36\n100644 blob a0423896973644771497bdc03eb99d5281615b51    file.txt\n$ git cat-file blob a0423896\nhello world!</pre> </div> </div>  <p>and the \"parent\" object refers to the previous commit:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git cat-file commit 54196cc2\ntree 92b8b694ffb1675e5975148e1121810081dbdffe\nauthor J. Bruce Fields &lt;bfields@puzzle.fieldses.org&gt; 1143414668 -0500\ncommitter J. Bruce Fields &lt;bfields@puzzle.fieldses.org&gt; 1143414668 -0500\n\ninitial commit</pre> </div> </div>  <p>The tree object is the tree we examined first, and this commit is unusual in that it lacks any parent.</p>   <p>Most commits have only one parent, but it is also common for a commit to have multiple parents. In that case the commit represents a merge, with the parent references pointing to the heads of the merged branches.</p>   <p>Besides blobs, trees, and commits, the only remaining type of object is a \"tag\", which we won’t discuss here; refer to <a href=\"git-tag\">git-tag[1]</a> for details.</p>   <p>So now we know how Git uses the object database to represent a project’s history:</p>  <div class=\"ulist\"> <ul> <li> <p>\"commit\" objects refer to \"tree\" objects representing the snapshot of a directory tree at a particular point in the history, and refer to \"parent\" commits to show how they’re connected into the project history.</p> </li> <li> <p>\"tree\" objects represent the state of a single directory, associating directory names to \"blob\" objects containing file data and \"tree\" objects containing subdirectory information.</p> </li> <li> <p>\"blob\" objects contain file data without any other structure.</p> </li> <li> <p>References to commit objects at the head of each branch are stored in files under .git/refs/heads/.</p> </li> <li> <p>The name of the current branch is stored in .git/HEAD.</p> </li> </ul> </div>  <p>Note, by the way, that lots of commands take a tree as an argument. But as we can see above, a tree can be referred to in many different ways—​by the SHA-1 name for that tree, by the name of a commit that refers to the tree, by the name of a branch whose head refers to that tree, etc.--and most such commands can accept any of these names.</p>   <p>In command synopses, the word \"tree-ish\" is sometimes used to designate such an argument.</p> </div>   <h2 id=\"_the_index_file\">The index file</h2> <div class=\"sectionbody\"> <p>The primary tool we’ve been using to create commits is <code>git-commit\n-a</code>, which creates a commit including every change you’ve made to your working tree. But what if you want to commit changes only to certain files? Or only certain changes to certain files?</p>   <p>If we look at the way commits are created under the cover, we’ll see that there are more flexible ways creating commits.</p>   <p>Continuing with our test-project, let’s modify file.txt again:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ echo \"hello world, again\" &gt;&gt;file.txt</pre> </div> </div>  <p>but this time instead of immediately making the commit, let’s take an intermediate step, and ask for diffs along the way to keep track of what’s happening:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git diff\n--- a/file.txt\n+++ b/file.txt\n@@ -1 +1,2 @@\n hello world!\n+hello world, again\n$ git add file.txt\n$ git diff</pre> </div> </div>  <p>The last diff is empty, but no new commits have been made, and the head still doesn’t contain the new line:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git diff HEAD\ndiff --git a/file.txt b/file.txt\nindex a042389..513feba 100644\n--- a/file.txt\n+++ b/file.txt\n@@ -1 +1,2 @@\n hello world!\n+hello world, again</pre> </div> </div>  <p>So <code>git diff</code> is comparing against something other than the head. The thing that it’s comparing against is actually the index file, which is stored in .git/index in a binary format, but whose contents we can examine with ls-files:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git ls-files --stage\n100644 513feba2e53ebbd2532419ded848ba19de88ba00 0       file.txt\n$ git cat-file -t 513feba2\nblob\n$ git cat-file blob 513feba2\nhello world!\nhello world, again</pre> </div> </div>  <p>So what our <code>git add</code> did was store a new blob and then put a reference to it in the index file. If we modify the file again, we’ll see that the new modifications are reflected in the <code>git diff</code> output:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ echo 'again?' &gt;&gt;file.txt\n$ git diff\nindex 513feba..ba3da7b 100644\n--- a/file.txt\n+++ b/file.txt\n@@ -1,2 +1,3 @@\n hello world!\n hello world, again\n+again?</pre> </div> </div>  <p>With the right arguments, <code>git diff</code> can also show us the difference between the working directory and the last commit, or between the index and the last commit:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git diff HEAD\ndiff --git a/file.txt b/file.txt\nindex a042389..ba3da7b 100644\n--- a/file.txt\n+++ b/file.txt\n@@ -1 +1,3 @@\n hello world!\n+hello world, again\n+again?\n$ git diff --cached\ndiff --git a/file.txt b/file.txt\nindex a042389..513feba 100644\n--- a/file.txt\n+++ b/file.txt\n@@ -1 +1,2 @@\n hello world!\n+hello world, again</pre> </div> </div>  <p>At any time, we can create a new commit using <code>git commit</code> (without the \"-a\" option), and verify that the state committed only includes the changes stored in the index file, not the additional change that is still only in our working tree:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git commit -m \"repeat\"\n$ git diff HEAD\ndiff --git a/file.txt b/file.txt\nindex 513feba..ba3da7b 100644\n--- a/file.txt\n+++ b/file.txt\n@@ -1,2 +1,3 @@\n hello world!\n hello world, again\n+again?</pre> </div> </div>  <p>So by default <code>git commit</code> uses the index to create the commit, not the working tree; the \"-a\" option to commit tells it to first update the index with all changes in the working tree.</p>   <p>Finally, it’s worth looking at the effect of <code>git add</code> on the index file:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ echo \"goodbye, world\" &gt;closing.txt\n$ git add closing.txt</pre> </div> </div>  <p>The effect of the <code>git add</code> was to add one entry to the index file:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git ls-files --stage\n100644 8b9743b20d4b15be3955fc8d5cd2b09cd2336138 0       closing.txt\n100644 513feba2e53ebbd2532419ded848ba19de88ba00 0       file.txt</pre> </div> </div>  <p>And, as you can see with cat-file, this new entry refers to the current contents of the file:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git cat-file blob 8b9743b2\ngoodbye, world</pre> </div> </div>  <p>The \"status\" command is a useful way to get a quick summary of the situation:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD &lt;file&gt;...\" to unstage)\n\n        new file:   closing.txt\n\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)\n\n        modified:   file.txt</pre> </div> </div>  <p>Since the current state of closing.txt is cached in the index file, it is listed as \"Changes to be committed\". Since file.txt has changes in the working directory that aren’t reflected in the index, it is marked \"changed but not updated\". At this point, running \"git commit\" would create a commit that added closing.txt (with its new contents), but that didn’t modify file.txt.</p>   <p>Also, note that a bare <code>git diff</code> shows the changes to file.txt, but not the addition of closing.txt, because the version of closing.txt in the index file is identical to the one in the working directory.</p>   <p>In addition to being the staging area for new commits, the index file is also populated from the object database when checking out a branch, and is used to hold the trees involved in a merge operation. See <a href=\"gitcore-tutorial\">gitcore-tutorial[7]</a> and the relevant man pages for details.</p> </div>   <h2 id=\"_what_next\">What next?</h2> <div class=\"sectionbody\"> <p>At this point you should know everything necessary to read the man pages for any of the git commands; one good place to start would be with the commands mentioned in <a href=\"giteveryday\">giteveryday[7]</a>. You should be able to find any unknown jargon in <a href=\"gitglossary\">gitglossary[7]</a>.</p>   <p>The <a href=\"user-manual\">Git User’s Manual</a> provides a more comprehensive introduction to Git.</p>   <p><a href=\"gitcvs-migration\">gitcvs-migration[7]</a> explains how to import a CVS repository into Git, and shows how to use Git in a CVS-like way.</p>   <p>For some interesting examples of Git use, see the <a href=\"https://git-scm.com/docs/howto-index.html\">howtos</a>.</p>   <p>For Git developers, <a href=\"gitcore-tutorial\">gitcore-tutorial[7]</a> goes into detail on the lower-level Git mechanisms involved in, for example, creating a new commit.</p> </div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"gittutorial\">gittutorial[7]</a>, <a href=\"gitcvs-migration\">gitcvs-migration[7]</a>, <a href=\"gitcore-tutorial\">gitcore-tutorial[7]</a>, <a href=\"gitglossary\">gitglossary[7]</a>, <a href=\"git-help\">git-help[1]</a>, <a href=\"giteveryday\">giteveryday[7]</a>, <a href=\"user-manual\">The Git User’s Manual</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/gittutorial-2\" class=\"_attribution-link\">https://git-scm.com/docs/gittutorial-2</a>\n  </p>\n</div>\n","git-mailsplit":"<h1>git-mailsplit</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-mailsplit - Simple UNIX mbox splitter program</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git mailsplit [-b] [-f&lt;nn&gt;] [-d&lt;prec&gt;] [--keep-cr] -o&lt;directory&gt; [--] [(&lt;mbox&gt;|&lt;Maildir&gt;)…​]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Splits a mbox file or a Maildir into a list of files: \"0001\" \"0002\" .. in the specified directory so you can process them further from there.</p>  <div class=\"admonitionblock important\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Important</div> </td> <td class=\"content\"> Maildir splitting relies upon filenames being sorted to output patches in the correct order. </td> </tr> </table> </div>\n</div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">&lt;mbox&gt;</dt> <dd> <p>Mbox file to split. If not given, the mbox is read from the standard input.</p> </dd> <dt class=\"hdlist1\">&lt;Maildir&gt;</dt> <dd> <p>Root of the Maildir to split. This directory should contain the cur, tmp and new subdirectories.</p> </dd> <dt class=\"hdlist1\">-o&lt;directory&gt;</dt> <dd> <p>Directory in which to place the individual messages.</p> </dd> <dt class=\"hdlist1\">-b</dt> <dd> <p>If any file doesn’t begin with a From line, assume it is a single mail message instead of signaling error.</p> </dd> <dt class=\"hdlist1\">-d&lt;prec&gt;</dt> <dd> <p>Instead of the default 4 digits with leading zeros, different precision can be specified for the generated filenames.</p> </dd> <dt class=\"hdlist1\">-f&lt;nn&gt;</dt> <dd> <p>Skip the first &lt;nn&gt; numbers, for example if -f3 is specified, start the numbering with 0004.</p> </dd> <dt class=\"hdlist1\">--keep-cr</dt> <dd> <p>Do not remove <code>\\r</code> from lines ending with <code>\\r\\n</code>.</p> </dd> </dl> </div></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-mailsplit\" class=\"_attribution-link\">https://git-scm.com/docs/git-mailsplit</a>\n  </p>\n</div>\n","git-show-branch":"<h1>git-show-branch</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-show-branch - Show branches and their commits</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git show-branch [-a|--all] [-r|--remotes] [--topo-order | --date-order]\n                [--current] [--color[=&lt;when&gt;] | --no-color] [--sparse]\n                [--more=&lt;n&gt; | --list | --independent | --merge-base]\n                [--no-name | --sha1-name] [--topics]\n                [(&lt;rev&gt; | &lt;glob&gt;)…​]\ngit show-branch (-g|--reflog)[=&lt;n&gt;[,&lt;base&gt;]] [--list] [&lt;ref&gt;]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Shows the commit ancestry graph starting from the commits named with &lt;rev&gt;s or &lt;globs&gt;s (or all refs under refs/heads and/or refs/tags) semi-visually.</p>   <p>It cannot show more than 29 branches and commits at a time.</p>   <p>It uses <code>showbranch.default</code> multi-valued configuration items if no &lt;rev&gt; or &lt;glob&gt; is given on the command line.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\">\n<div class=\"dlist\"> <dl> <dt class=\"hdlist1\">&lt;rev&gt;</dt> <dd> <p>Arbitrary extended SHA-1 expression (see <a href=\"gitrevisions\">gitrevisions[7]</a>) that typically names a branch head or a tag.</p> </dd> <dt class=\"hdlist1\">&lt;glob&gt;</dt> <dd> <p>A glob pattern that matches branch or tag names under refs/. For example, if you have many topic branches under refs/heads/topic, giving <code>topic/*</code> would show all of them.</p> </dd> <dt class=\"hdlist1\">-r</dt> <dt class=\"hdlist1\">--remotes</dt> <dd> <p>Show the remote-tracking branches.</p> </dd> <dt class=\"hdlist1\">-a</dt> <dt class=\"hdlist1\">--all</dt> <dd> <p>Show both remote-tracking branches and local branches.</p> </dd> <dt class=\"hdlist1\">--current</dt> <dd> <p>With this option, the command includes the current branch to the list of revs to be shown when it is not given on the command line.</p> </dd> <dt class=\"hdlist1\">--topo-order</dt> <dd> <p>By default, the branches and their commits are shown in reverse chronological order. This option makes them appear in topological order (i.e., descendant commits are shown before their parents).</p> </dd> <dt class=\"hdlist1\">--date-order</dt> <dd> <p>This option is similar to <code>--topo-order</code> in the sense that no parent comes before all of its children, but otherwise commits are ordered according to their commit date.</p> </dd> <dt class=\"hdlist1\">--sparse</dt> <dd> <p>By default, the output omits merges that are reachable from only one tip being shown. This option makes them visible.</p> </dd> <dt class=\"hdlist1\">--more=&lt;n&gt;</dt> <dd> <p>Usually the command stops output upon showing the commit that is the common ancestor of all the branches. This flag tells the command to go &lt;n&gt; more common commits beyond that. When &lt;n&gt; is negative, display only the &lt;reference&gt;s given, without showing the commit ancestry tree.</p> </dd> <dt class=\"hdlist1\">--list</dt> <dd> <p>Synonym to <code>--more=-1</code></p> </dd> <dt class=\"hdlist1\">--merge-base</dt> <dd> <p>Instead of showing the commit list, determine possible merge bases for the specified commits. All merge bases will be contained in all specified commits. This is different from how <a href=\"git-merge-base\">git-merge-base[1]</a> handles the case of three or more commits.</p> </dd> <dt class=\"hdlist1\">--independent</dt> <dd> <p>Among the &lt;reference&gt;s given, display only the ones that cannot be reached from any other &lt;reference&gt;.</p> </dd> <dt class=\"hdlist1\">--no-name</dt> <dd> <p>Do not show naming strings for each commit.</p> </dd> <dt class=\"hdlist1\">--sha1-name</dt> <dd> <p>Instead of naming the commits using the path to reach them from heads (e.g. \"master~2\" to mean the grandparent of \"master\"), name them with the unique prefix of their object names.</p> </dd> <dt class=\"hdlist1\">--topics</dt> <dd> <p>Shows only commits that are NOT on the first branch given. This helps track topic branches by hiding any commit that is already in the main line of development. When given \"git show-branch --topics master topic1 topic2\", this will show the revisions given by \"git rev-list ^master topic1 topic2\"</p> </dd> <dt class=\"hdlist1\">-g</dt> <dt class=\"hdlist1\">--reflog[=&lt;n&gt;[,&lt;base&gt;]] [&lt;ref&gt;]</dt> <dd> <p>Shows &lt;n&gt; most recent ref-log entries for the given ref. If &lt;base&gt; is given, &lt;n&gt; entries going back from that entry. &lt;base&gt; can be specified as count or date. When no explicit &lt;ref&gt; parameter is given, it defaults to the current branch (or <code>HEAD</code> if it is detached).</p> </dd> <dt class=\"hdlist1\">--color[=&lt;when&gt;]</dt> <dd> <p>Color the status sign (one of these: <code>*</code> <code>!</code> <code>+</code> <code>-</code>) of each commit corresponding to the branch it’s in. The value must be always (the default), never, or auto.</p> </dd> <dt class=\"hdlist1\">--no-color</dt> <dd> <p>Turn off colored output, even when the configuration file gives the default to color output. Same as <code>--color=never</code>.</p> </dd> </dl> </div>  <p>Note that --more, --list, --independent and --merge-base options are mutually exclusive.</p> </div>   <h2 id=\"_output\">Output</h2> <div class=\"sectionbody\"> <p>Given N &lt;references&gt;, the first N lines are the one-line description from their commit message. The branch head that is pointed at by $GIT_DIR/HEAD is prefixed with an asterisk <code>*</code> character while other heads are prefixed with a <code>!</code> character.</p>   <p>Following these N lines, one-line log for each commit is displayed, indented N places. If a commit is on the I-th branch, the I-th indentation character shows a <code>+</code> sign; otherwise it shows a space. Merge commits are denoted by a <code>-</code> sign. Each commit shows a short name that can be used as an extended SHA-1 to name that commit.</p>   <p>The following example shows three branches, \"master\", \"fixes\" and \"mhf\":</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show-branch master fixes mhf\n* [master] Add 'git show-branch'.\n ! [fixes] Introduce \"reset type\" flag to \"git reset\"\n  ! [mhf] Allow \"+remote:local\" refspec to cause --force when fetching.\n---\n  + [mhf] Allow \"+remote:local\" refspec to cause --force when fetching.\n  + [mhf~1] Use git-octopus when pulling more than one heads.\n +  [fixes] Introduce \"reset type\" flag to \"git reset\"\n  + [mhf~2] \"git fetch --force\".\n  + [mhf~3] Use .git/remote/origin, not .git/branches/origin.\n  + [mhf~4] Make \"git pull\" and \"git fetch\" default to origin\n  + [mhf~5] Infamous 'octopus merge'\n  + [mhf~6] Retire git-parse-remote.\n  + [mhf~7] Multi-head fetch.\n  + [mhf~8] Start adding the $GIT_DIR/remotes/ support.\n*++ [master] Add 'git show-branch'.</pre> </div> </div>  <p>These three branches all forked from a common commit, [master], whose commit message is \"Add {apostrophe}git show-branch{apostrophe}\". The \"fixes\" branch adds one commit \"Introduce \"reset type\" flag to \"git reset\"\". The \"mhf\" branch adds many other commits. The current branch is \"master\".</p> </div>   <h2 id=\"_example\">Example</h2> <div class=\"sectionbody\"> <p>If you keep your primary branches immediately under <code>refs/heads</code>, and topic branches in subdirectories of it, having the following in the configuration file may help:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>[showbranch]\n        default = --topo-order\n        default = heads/*</pre> </div> </div>  <p>With this, <code>git show-branch</code> without extra parameters would show only the primary branches. In addition, if you happen to be on your topic branch, it is shown as well.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show-branch --reflog=\"10,1 hour ago\" --list master</pre> </div> </div>  <p>shows 10 reflog entries going back from the tip as of 1 hour ago. Without <code>--list</code>, the output also shows how these tips are topologically related with each other.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-show-branch\" class=\"_attribution-link\">https://git-scm.com/docs/git-show-branch</a>\n  </p>\n</div>\n","gitglossary":"<h1>gitglossary</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>gitglossary - A Git Glossary</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"> <p>*</p> </div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">\nalternate object database</dt> <dd> <p>Via the alternates mechanism, a <a href=\"#def_repository\">repository</a> can inherit part of its <a href=\"#def_object_database\">object database</a> from another object database, which is called an \"alternate\".</p> </dd> <dt class=\"hdlist1\">\nbare repository</dt> <dd> <p>A bare repository is normally an appropriately named <a href=\"#def_directory\">directory</a> with a <code>.git</code> suffix that does not have a locally checked-out copy of any of the files under revision control. That is, all of the Git administrative and control files that would normally be present in the hidden <code>.git</code> sub-directory are directly present in the <code>repository.git</code> directory instead, and no other files are present and checked out. Usually publishers of public repositories make bare repositories available.</p> </dd> <dt class=\"hdlist1\">\nblob object</dt> <dd> <p>Untyped <a href=\"#def_object\">object</a>, e.g. the contents of a file.</p> </dd> <dt class=\"hdlist1\">\nbranch</dt> <dd> <p>A \"branch\" is an active line of development. The most recent <a href=\"#def_commit\">commit</a> on a branch is referred to as the tip of that branch. The tip of the branch is referenced by a branch <a href=\"#def_head\">head</a>, which moves forward as additional development is done on the branch. A single Git <a href=\"#def_repository\">repository</a> can track an arbitrary number of branches, but your <a href=\"#def_working_tree\">working tree</a> is associated with just one of them (the \"current\" or \"checked out\" branch), and <a href=\"#def_HEAD\">HEAD</a> points to that branch.</p> </dd> <dt class=\"hdlist1\">\ncache</dt> <dd> <p>Obsolete for: <a href=\"#def_index\">index</a>.</p> </dd> <dt class=\"hdlist1\">\nchain</dt> <dd> <p>A list of objects, where each <a href=\"#def_object\">object</a> in the list contains a reference to its successor (for example, the successor of a <a href=\"#def_commit\">commit</a> could be one of its <a href=\"#def_parent\">parents</a>).</p> </dd> <dt class=\"hdlist1\">\nchangeset</dt> <dd> <p>BitKeeper/cvsps speak for \"<a href=\"#def_commit\">commit</a>\". Since Git does not store changes, but states, it really does not make sense to use the term \"changesets\" with Git.</p> </dd> <dt class=\"hdlist1\">\ncheckout</dt> <dd> <p>The action of updating all or part of the <a href=\"#def_working_tree\">working tree</a> with a <a href=\"#def_tree_object\">tree object</a> or <a href=\"#def_blob_object\">blob</a> from the <a href=\"#def_object_database\">object database</a>, and updating the <a href=\"#def_index\">index</a> and <a href=\"#def_HEAD\">HEAD</a> if the whole working tree has been pointed at a new <a href=\"#def_branch\">branch</a>.</p> </dd> <dt class=\"hdlist1\">\ncherry-picking</dt> <dd> <p>In <a href=\"#def_SCM\">SCM</a> jargon, \"cherry pick\" means to choose a subset of changes out of a series of changes (typically commits) and record them as a new series of changes on top of a different codebase. In Git, this is performed by the \"git cherry-pick\" command to extract the change introduced by an existing <a href=\"#def_commit\">commit</a> and to record it based on the tip of the current <a href=\"#def_branch\">branch</a> as a new commit.</p> </dd> <dt class=\"hdlist1\">\nclean</dt> <dd> <p>A <a href=\"#def_working_tree\">working tree</a> is clean, if it corresponds to the <a href=\"#def_revision\">revision</a> referenced by the current <a href=\"#def_head\">head</a>. Also see \"<a href=\"#def_dirty\">dirty</a>\".</p> </dd> <dt class=\"hdlist1\">\ncommit</dt> <dd> <p>As a noun: A single point in the Git history; the entire history of a project is represented as a set of interrelated commits. The word \"commit\" is often used by Git in the same places other revision control systems use the words \"revision\" or \"version\". Also used as a short hand for <a href=\"#def_commit_object\">commit object</a>.</p>  <p>As a verb: The action of storing a new snapshot of the project’s state in the Git history, by creating a new commit representing the current state of the <a href=\"#def_index\">index</a> and advancing <a href=\"#def_HEAD\">HEAD</a> to point at the new commit.</p>  </dd> <dt class=\"hdlist1\">\ncommit object</dt> <dd> <p>An <a href=\"#def_object\">object</a> which contains the information about a particular <a href=\"#def_revision\">revision</a>, such as <a href=\"#def_parent\">parents</a>, committer, author, date and the <a href=\"#def_tree_object\">tree object</a> which corresponds to the top <a href=\"#def_directory\">directory</a> of the stored revision.</p> </dd> <dt class=\"hdlist1\">\ncommit-ish (also committish)</dt> <dd> <p>A <a href=\"#def_commit_object\">commit object</a> or an <a href=\"#def_object\">object</a> that can be recursively dereferenced to a commit object. The following are all commit-ishes: a commit object, a <a href=\"#def_tag_object\">tag object</a> that points to a commit object, a tag object that points to a tag object that points to a commit object, etc.</p> </dd> <dt class=\"hdlist1\">\ncore Git</dt> <dd> <p>Fundamental data structures and utilities of Git. Exposes only limited source code management tools.</p> </dd> <dt class=\"hdlist1\">\nDAG</dt> <dd> <p>Directed acyclic graph. The <a href=\"#def_commit_object\">commit objects</a> form a directed acyclic graph, because they have parents (directed), and the graph of commit objects is acyclic (there is no <a href=\"#def_chain\">chain</a> which begins and ends with the same <a href=\"#def_object\">object</a>).</p> </dd> <dt class=\"hdlist1\">\ndangling object</dt> <dd> <p>An <a href=\"#def_unreachable_object\">unreachable object</a> which is not <a href=\"#def_reachable\">reachable</a> even from other unreachable objects; a dangling object has no references to it from any reference or <a href=\"#def_object\">object</a> in the <a href=\"#def_repository\">repository</a>.</p> </dd> <dt class=\"hdlist1\">\ndetached HEAD</dt> <dd> <p>Normally the <a href=\"#def_HEAD\">HEAD</a> stores the name of a <a href=\"#def_branch\">branch</a>, and commands that operate on the history HEAD represents operate on the history leading to the tip of the branch the HEAD points at. However, Git also allows you to <a href=\"#def_checkout\">check out</a> an arbitrary <a href=\"#def_commit\">commit</a> that isn’t necessarily the tip of any particular branch. The HEAD in such a state is called \"detached\".</p>  <p>Note that commands that operate on the history of the current branch (e.g. <code>git commit</code> to build a new history on top of it) still work while the HEAD is detached. They update the HEAD to point at the tip of the updated history without affecting any branch. Commands that update or inquire information <code>about</code> the current branch (e.g. <code>git\nbranch --set-upstream-to</code> that sets what remote-tracking branch the current branch integrates with) obviously do not work, as there is no (real) current branch to ask about in this state.</p>  </dd> <dt class=\"hdlist1\">\ndirectory</dt> <dd> <p>The list you get with \"ls\" :-)</p> </dd> <dt class=\"hdlist1\">\ndirty</dt> <dd> <p>A <a href=\"#def_working_tree\">working tree</a> is said to be \"dirty\" if it contains modifications which have not been <a href=\"#def_commit\">committed</a> to the current <a href=\"#def_branch\">branch</a>.</p> </dd> <dt class=\"hdlist1\">\nevil merge</dt> <dd> <p>An evil merge is a <a href=\"#def_merge\">merge</a> that introduces changes that do not appear in any <a href=\"#def_parent\">parent</a>.</p> </dd> <dt class=\"hdlist1\">\nfast-forward</dt> <dd> <p>A fast-forward is a special type of <a href=\"#def_merge\">merge</a> where you have a <a href=\"#def_revision\">revision</a> and you are \"merging\" another <a href=\"#def_branch\">branch</a>'s changes that happen to be a descendant of what you have. In such a case, you do not make a new <a href=\"#def_merge\">merge</a> <a href=\"#def_commit\">commit</a> but instead just update to his revision. This will happen frequently on a <a href=\"#def_remote_tracking_branch\">remote-tracking branch</a> of a remote <a href=\"#def_repository\">repository</a>.</p> </dd> <dt class=\"hdlist1\">\nfetch</dt> <dd> <p>Fetching a <a href=\"#def_branch\">branch</a> means to get the branch’s <a href=\"#def_head_ref\">head ref</a> from a remote <a href=\"#def_repository\">repository</a>, to find out which objects are missing from the local <a href=\"#def_object_database\">object database</a>, and to get them, too. See also <a href=\"git-fetch\">git-fetch[1]</a>.</p> </dd> <dt class=\"hdlist1\">\nfile system</dt> <dd> <p>Linus Torvalds originally designed Git to be a user space file system, i.e. the infrastructure to hold files and directories. That ensured the efficiency and speed of Git.</p> </dd> <dt class=\"hdlist1\">\nGit archive</dt> <dd> <p>Synonym for <a href=\"#def_repository\">repository</a> (for arch people).</p> </dd> <dt class=\"hdlist1\">\ngitfile</dt> <dd> <p>A plain file <code>.git</code> at the root of a working tree that points at the directory that is the real repository.</p> </dd> <dt class=\"hdlist1\">\ngrafts</dt> <dd> <p>Grafts enables two otherwise different lines of development to be joined together by recording fake ancestry information for commits. This way you can make Git pretend the set of <a href=\"#def_parent\">parents</a> a <a href=\"#def_commit\">commit</a> has is different from what was recorded when the commit was created. Configured via the <code>.git/info/grafts</code> file.</p>  <p>Note that the grafts mechanism is outdated and can lead to problems transferring objects between repositories; see <a href=\"git-replace\">git-replace[1]</a> for a more flexible and robust system to do the same thing.</p>  </dd> <dt class=\"hdlist1\">\nhash</dt> <dd> <p>In Git’s context, synonym for <a href=\"#def_object_name\">object name</a>.</p> </dd> <dt class=\"hdlist1\">\nhead</dt> <dd> <p>A <a href=\"#def_ref\">named reference</a> to the <a href=\"#def_commit\">commit</a> at the tip of a <a href=\"#def_branch\">branch</a>. Heads are stored in a file in <code>$GIT_DIR/refs/heads/</code> directory, except when using packed refs. (See <a href=\"git-pack-refs\">git-pack-refs[1]</a>.)</p> </dd> <dt class=\"hdlist1\">\nHEAD</dt> <dd> <p>The current <a href=\"#def_branch\">branch</a>. In more detail: Your <a href=\"#def_working_tree\">working tree</a> is normally derived from the state of the tree referred to by HEAD. HEAD is a reference to one of the <a href=\"#def_head\">heads</a> in your repository, except when using a <a href=\"#def_detached_HEAD\">detached HEAD</a>, in which case it directly references an arbitrary commit.</p> </dd> <dt class=\"hdlist1\">\nhead ref</dt> <dd> <p>A synonym for <a href=\"#def_head\">head</a>.</p> </dd> <dt class=\"hdlist1\">\nhook</dt> <dd> <p>During the normal execution of several Git commands, call-outs are made to optional scripts that allow a developer to add functionality or checking. Typically, the hooks allow for a command to be pre-verified and potentially aborted, and allow for a post-notification after the operation is done. The hook scripts are found in the <code>$GIT_DIR/hooks/</code> directory, and are enabled by simply removing the <code>.sample</code> suffix from the filename. In earlier versions of Git you had to make them executable.</p> </dd> <dt class=\"hdlist1\">\nindex</dt> <dd> <p>A collection of files with stat information, whose contents are stored as objects. The index is a stored version of your <a href=\"#def_working_tree\">working tree</a>. Truth be told, it can also contain a second, and even a third version of a working tree, which are used when <a href=\"#def_merge\">merging</a>.</p> </dd> <dt class=\"hdlist1\">\nindex entry</dt> <dd> <p>The information regarding a particular file, stored in the <a href=\"#def_index\">index</a>. An index entry can be unmerged, if a <a href=\"#def_merge\">merge</a> was started, but not yet finished (i.e. if the index contains multiple versions of that file).</p> </dd> <dt class=\"hdlist1\">\nmaster</dt> <dd> <p>The default development <a href=\"#def_branch\">branch</a>. Whenever you create a Git <a href=\"#def_repository\">repository</a>, a branch named \"master\" is created, and becomes the active branch. In most cases, this contains the local development, though that is purely by convention and is not required.</p> </dd> <dt class=\"hdlist1\">\nmerge</dt> <dd> <p>As a verb: To bring the contents of another <a href=\"#def_branch\">branch</a> (possibly from an external <a href=\"#def_repository\">repository</a>) into the current branch. In the case where the merged-in branch is from a different repository, this is done by first <a href=\"#def_fetch\">fetching</a> the remote branch and then merging the result into the current branch. This combination of fetch and merge operations is called a <a href=\"#def_pull\">pull</a>. Merging is performed by an automatic process that identifies changes made since the branches diverged, and then applies all those changes together. In cases where changes conflict, manual intervention may be required to complete the merge.</p>  <p>As a noun: unless it is a <a href=\"#def_fast_forward\">fast-forward</a>, a successful merge results in the creation of a new <a href=\"#def_commit\">commit</a> representing the result of the merge, and having as <a href=\"#def_parent\">parents</a> the tips of the merged <a href=\"#def_branch\">branches</a>. This commit is referred to as a \"merge commit\", or sometimes just a \"merge\".</p>  </dd> <dt class=\"hdlist1\">\nobject</dt> <dd> <p>The unit of storage in Git. It is uniquely identified by the <a href=\"#def_SHA1\">SHA-1</a> of its contents. Consequently, an object can not be changed.</p> </dd> <dt class=\"hdlist1\">\nobject database</dt> <dd> <p>Stores a set of \"objects\", and an individual <a href=\"#def_object\">object</a> is identified by its <a href=\"#def_object_name\">object name</a>. The objects usually live in <code>$GIT_DIR/objects/</code>.</p> </dd> <dt class=\"hdlist1\">\nobject identifier</dt> <dd> <p>Synonym for <a href=\"#def_object_name\">object name</a>.</p> </dd> <dt class=\"hdlist1\">\nobject name</dt> <dd> <p>The unique identifier of an <a href=\"#def_object\">object</a>. The object name is usually represented by a 40 character hexadecimal string. Also colloquially called <a href=\"#def_SHA1\">SHA-1</a>.</p> </dd> <dt class=\"hdlist1\">\nobject type</dt> <dd> <p>One of the identifiers \"<a href=\"#def_commit_object\">commit</a>\", \"<a href=\"#def_tree_object\">tree</a>\", \"<a href=\"#def_tag_object\">tag</a>\" or \"<a href=\"#def_blob_object\">blob</a>\" describing the type of an <a href=\"#def_object\">object</a>.</p> </dd> <dt class=\"hdlist1\">\noctopus</dt> <dd> <p>To <a href=\"#def_merge\">merge</a> more than two <a href=\"#def_branch\">branches</a>.</p> </dd> <dt class=\"hdlist1\">\norigin</dt> <dd> <p>The default upstream <a href=\"#def_repository\">repository</a>. Most projects have at least one upstream project which they track. By default <code>origin</code> is used for that purpose. New upstream updates will be fetched into <a href=\"#def_remote_tracking_branch\">remote-tracking branches</a> named origin/name-of-upstream-branch, which you can see using <code>git branch -r</code>.</p> </dd> <dt class=\"hdlist1\">\npack</dt> <dd> <p>A set of objects which have been compressed into one file (to save space or to transmit them efficiently).</p> </dd> <dt class=\"hdlist1\">\npack index</dt> <dd> <p>The list of identifiers, and other information, of the objects in a <a href=\"#def_pack\">pack</a>, to assist in efficiently accessing the contents of a pack.</p> </dd> <dt class=\"hdlist1\">\npathspec</dt> <dd> <p>Pattern used to limit paths in Git commands.</p>  <p>Pathspecs are used on the command line of \"git ls-files\", \"git ls-tree\", \"git add\", \"git grep\", \"git diff\", \"git checkout\", and many other commands to limit the scope of operations to some subset of the tree or worktree. See the documentation of each command for whether paths are relative to the current directory or toplevel. The pathspec syntax is as follows:</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"ulist\"> <ul> <li> <p>any path matches itself</p> </li> <li> <p>the pathspec up to the last slash represents a directory prefix. The scope of that pathspec is limited to that subtree.</p> </li> <li> <p>the rest of the pathspec is a pattern for the remainder of the pathname. Paths relative to the directory prefix will be matched against that pattern using fnmatch(3); in particular, <code>*</code> and <code>?</code> <code>can</code> match directory separators.</p> </li> </ul> </div> </div> </div>  <p>For example, Documentation/*.jpg will match all .jpg files in the Documentation subtree, including Documentation/chapter_1/figure_1.jpg.</p>   <p>A pathspec that begins with a colon <code>:</code> has special meaning. In the short form, the leading colon <code>:</code> is followed by zero or more \"magic signature\" letters (which optionally is terminated by another colon <code>:</code>), and the remainder is the pattern to match against the path. The \"magic signature\" consists of ASCII symbols that are neither alphanumeric, glob, regex special characters nor colon. The optional colon that terminates the \"magic signature\" can be omitted if the pattern begins with a character that does not belong to \"magic signature\" symbol set and is not a colon.</p>   <p>In the long form, the leading colon <code>:</code> is followed by a open parenthesis <code>(</code>, a comma-separated list of zero or more \"magic words\", and a close parentheses <code>)</code>, and the remainder is the pattern to match against the path.</p>   <p>A pathspec with only a colon means \"there is no pathspec\". This form should not be combined with other pathspec.</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">top</dt> <dd> <p>The magic word <code>top</code> (magic signature: <code>/</code>) makes the pattern match from the root of the working tree, even when you are running the command from inside a subdirectory.</p> </dd> <dt class=\"hdlist1\">literal</dt> <dd> <p>Wildcards in the pattern such as <code>*</code> or <code>?</code> are treated as literal characters.</p> </dd> <dt class=\"hdlist1\">icase</dt> <dd> <p>Case insensitive match.</p> </dd> <dt class=\"hdlist1\">glob</dt> <dd> <p>Git treats the pattern as a shell glob suitable for consumption by fnmatch(3) with the FNM_PATHNAME flag: wildcards in the pattern will not match a / in the pathname. For example, \"Documentation/*.html\" matches \"Documentation/git.html\" but not \"Documentation/ppc/ppc.html\" or \"tools/perf/Documentation/perf.html\".</p>  <p>Two consecutive asterisks (\"<code>**</code>\") in patterns matched against full pathname may have special meaning:</p>  <div class=\"ulist\"> <ul> <li> <p>A leading \"<code>**</code>\" followed by a slash means match in all directories. For example, \"<code>**/foo</code>\" matches file or directory \"<code>foo</code>\" anywhere, the same as pattern \"<code>foo</code>\". \"<code>**/foo/bar</code>\" matches file or directory \"<code>bar</code>\" anywhere that is directly under directory \"<code>foo</code>\".</p> </li> <li> <p>A trailing \"<code>/**</code>\" matches everything inside. For example, \"<code>abc/**</code>\" matches all files inside directory \"abc\", relative to the location of the <code>.gitignore</code> file, with infinite depth.</p> </li> <li> <p>A slash followed by two consecutive asterisks then a slash matches zero or more directories. For example, \"<code>a/**/b</code>\" matches \"<code>a/b</code>\", \"<code>a/x/b</code>\", \"<code>a/x/y/b</code>\" and so on.</p> </li> <li> <p>Other consecutive asterisks are considered invalid.</p>  <p>Glob magic is incompatible with literal magic.</p>  </li> </ul> </div> </dd> <dt class=\"hdlist1\">exclude</dt> <dd> <p>After a path matches any non-exclude pathspec, it will be run through all exclude pathspec (magic signature: <code>!</code>). If it matches, the path is ignored.</p> </dd> </dl> </div> </div> </div> </dd> <dt class=\"hdlist1\">\nparent</dt> <dd> <p>A <a href=\"#def_commit_object\">commit object</a> contains a (possibly empty) list of the logical predecessor(s) in the line of development, i.e. its parents.</p> </dd> <dt class=\"hdlist1\">\npickaxe</dt> <dd> <p>The term <a href=\"#def_pickaxe\">pickaxe</a> refers to an option to the diffcore routines that help select changes that add or delete a given text string. With the <code>--pickaxe-all</code> option, it can be used to view the full <a href=\"#def_changeset\">changeset</a> that introduced or removed, say, a particular line of text. See <a href=\"git-diff\">git-diff[1]</a>.</p> </dd> <dt class=\"hdlist1\">\nplumbing</dt> <dd> <p>Cute name for <a href=\"#def_core_git\">core Git</a>.</p> </dd> <dt class=\"hdlist1\">\nporcelain</dt> <dd> <p>Cute name for programs and program suites depending on <a href=\"#def_core_git\">core Git</a>, presenting a high level access to core Git. Porcelains expose more of a <a href=\"#def_SCM\">SCM</a> interface than the <a href=\"#def_plumbing\">plumbing</a>.</p> </dd> <dt class=\"hdlist1\">\nper-worktree ref</dt> <dd> <p>Refs that are per-<a href=\"#def_working_tree\">worktree</a>, rather than global. This is presently only <a href=\"#def_HEAD\">HEAD</a> and any refs that start with <code>refs/bisect/</code>, but might later include other unusual refs.</p> </dd> <dt class=\"hdlist1\">\npseudoref</dt> <dd> <p>Pseudorefs are a class of files under <code>$GIT_DIR</code> which behave like refs for the purposes of rev-parse, but which are treated specially by git. Pseudorefs both have names that are all-caps, and always start with a line consisting of a <a href=\"#def_SHA1\">SHA-1</a> followed by whitespace. So, HEAD is not a pseudoref, because it is sometimes a symbolic ref. They might optionally contain some additional data. <code>MERGE_HEAD</code> and <code>CHERRY_PICK_HEAD</code> are examples. Unlike <a href=\"#def_per_worktree_ref\">per-worktree refs</a>, these files cannot be symbolic refs, and never have reflogs. They also cannot be updated through the normal ref update machinery. Instead, they are updated by directly writing to the files. However, they can be read as if they were refs, so <code>git rev-parse\nMERGE_HEAD</code> will work.</p> </dd> <dt class=\"hdlist1\">\npull</dt> <dd> <p>Pulling a <a href=\"#def_branch\">branch</a> means to <a href=\"#def_fetch\">fetch</a> it and <a href=\"#def_merge\">merge</a> it. See also <a href=\"git-pull\">git-pull[1]</a>.</p> </dd> <dt class=\"hdlist1\">\npush</dt> <dd> <p>Pushing a <a href=\"#def_branch\">branch</a> means to get the branch’s <a href=\"#def_head_ref\">head ref</a> from a remote <a href=\"#def_repository\">repository</a>, find out if it is a direct ancestor to the branch’s local head ref, and in that case, putting all objects, which are <a href=\"#def_reachable\">reachable</a> from the local head ref, and which are missing from the remote repository, into the remote <a href=\"#def_object_database\">object database</a>, and updating the remote head ref. If the remote <a href=\"#def_head\">head</a> is not an ancestor to the local head, the push fails.</p> </dd> <dt class=\"hdlist1\">\nreachable</dt> <dd> <p>All of the ancestors of a given <a href=\"#def_commit\">commit</a> are said to be \"reachable\" from that commit. More generally, one <a href=\"#def_object\">object</a> is reachable from another if we can reach the one from the other by a <a href=\"#def_chain\">chain</a> that follows <a href=\"#def_tag\">tags</a> to whatever they tag, <a href=\"#def_commit_object\">commits</a> to their parents or trees, and <a href=\"#def_tree_object\">trees</a> to the trees or <a href=\"#def_blob_object\">blobs</a> that they contain.</p> </dd> <dt class=\"hdlist1\">\nrebase</dt> <dd> <p>To reapply a series of changes from a <a href=\"#def_branch\">branch</a> to a different base, and reset the <a href=\"#def_head\">head</a> of that branch to the result.</p> </dd> <dt class=\"hdlist1\">\nref</dt> <dd> <p>A name that begins with <code>refs/</code> (e.g. <code>refs/heads/master</code>) that points to an <a href=\"#def_object_name\">object name</a> or another ref (the latter is called a <a href=\"#def_symref\">symbolic ref</a>). For convenience, a ref can sometimes be abbreviated when used as an argument to a Git command; see <a href=\"gitrevisions\">gitrevisions[7]</a> for details. Refs are stored in the <a href=\"#def_repository\">repository</a>.</p>  <p>The ref namespace is hierarchical. Different subhierarchies are used for different purposes (e.g. the <code>refs/heads/</code> hierarchy is used to represent local branches).</p>   <p>There are a few special-purpose refs that do not begin with <code>refs/</code>. The most notable example is <code>HEAD</code>.</p>  </dd> <dt class=\"hdlist1\">\nreflog</dt> <dd> <p>A reflog shows the local \"history\" of a ref. In other words, it can tell you what the 3rd last revision in <code>this</code> repository was, and what was the current state in <code>this</code> repository, yesterday 9:14pm. See <a href=\"git-reflog\">git-reflog[1]</a> for details.</p> </dd> <dt class=\"hdlist1\">\nrefspec</dt> <dd> <p>A \"refspec\" is used by <a href=\"#def_fetch\">fetch</a> and <a href=\"#def_push\">push</a> to describe the mapping between remote <a href=\"#def_ref\">ref</a> and local ref.</p> </dd> <dt class=\"hdlist1\">\nremote repository</dt> <dd> <p>A <a href=\"#def_repository\">repository</a> which is used to track the same project but resides somewhere else. To communicate with remotes, see <a href=\"#def_fetch\">fetch</a> or <a href=\"#def_push\">push</a>.</p> </dd> <dt class=\"hdlist1\">\nremote-tracking branch</dt> <dd> <p>A <a href=\"#def_ref\">ref</a> that is used to follow changes from another <a href=\"#def_repository\">repository</a>. It typically looks like <code>refs/remotes/foo/bar</code> (indicating that it tracks a branch named <code>bar</code> in a remote named <code>foo</code>), and matches the right-hand-side of a configured fetch <a href=\"#def_refspec\">refspec</a>. A remote-tracking branch should not contain direct modifications or have local commits made to it.</p> </dd> <dt class=\"hdlist1\">\nrepository</dt> <dd> <p>A collection of <a href=\"#def_ref\">refs</a> together with an <a href=\"#def_object_database\">object database</a> containing all objects which are <a href=\"#def_reachable\">reachable</a> from the refs, possibly accompanied by meta data from one or more <a href=\"#def_porcelain\">porcelains</a>. A repository can share an object database with other repositories via <a href=\"#def_alternate_object_database\">alternates mechanism</a>.</p> </dd> <dt class=\"hdlist1\">\nresolve</dt> <dd> <p>The action of fixing up manually what a failed automatic <a href=\"#def_merge\">merge</a> left behind.</p> </dd> <dt class=\"hdlist1\">\nrevision</dt> <dd> <p>Synonym for <a href=\"#def_commit\">commit</a> (the noun).</p> </dd> <dt class=\"hdlist1\">\nrewind</dt> <dd> <p>To throw away part of the development, i.e. to assign the <a href=\"#def_head\">head</a> to an earlier <a href=\"#def_revision\">revision</a>.</p> </dd> <dt class=\"hdlist1\">\nSCM</dt> <dd> <p>Source code management (tool).</p> </dd> <dt class=\"hdlist1\">\nSHA-1</dt> <dd> <p>\"Secure Hash Algorithm 1\"; a cryptographic hash function. In the context of Git used as a synonym for <a href=\"#def_object_name\">object name</a>.</p> </dd> <dt class=\"hdlist1\">\nshallow clone</dt> <dd> <p>Mostly a synonym to <a href=\"#def_shallow_repository\">shallow repository</a> but the phrase makes it more explicit that it was created by running <code>git clone --depth=...</code> command.</p> </dd> <dt class=\"hdlist1\">\nshallow repository</dt> <dd> <p>A shallow <a href=\"#def_repository\">repository</a> has an incomplete history some of whose <a href=\"#def_commit\">commits</a> have <a href=\"#def_parent\">parents</a> cauterized away (in other words, Git is told to pretend that these commits do not have the parents, even though they are recorded in the <a href=\"#def_commit_object\">commit object</a>). This is sometimes useful when you are interested only in the recent history of a project even though the real history recorded in the upstream is much larger. A shallow repository is created by giving the <code>--depth</code> option to <a href=\"git-clone\">git-clone[1]</a>, and its history can be later deepened with <a href=\"git-fetch\">git-fetch[1]</a>.</p> </dd> <dt class=\"hdlist1\">\nsubmodule</dt> <dd> <p>A <a href=\"#def_repository\">repository</a> that holds the history of a separate project inside another repository (the latter of which is called <a href=\"#def_superproject\">superproject</a>).</p> </dd> <dt class=\"hdlist1\">\nsuperproject</dt> <dd> <p>A <a href=\"#def_repository\">repository</a> that references repositories of other projects in its working tree as <a href=\"#def_submodule\">submodules</a>. The superproject knows about the names of (but does not hold copies of) commit objects of the contained submodules.</p> </dd> <dt class=\"hdlist1\">\nsymref</dt> <dd> <p>Symbolic reference: instead of containing the <a href=\"#def_SHA1\">SHA-1</a> id itself, it is of the format <code>ref: refs/some/thing</code> and when referenced, it recursively dereferences to this reference. <code><a href=\"#def_HEAD\">HEAD</a></code> is a prime example of a symref. Symbolic references are manipulated with the <a href=\"git-symbolic-ref\">git-symbolic-ref[1]</a> command.</p> </dd> <dt class=\"hdlist1\">\ntag</dt> <dd> <p>A <a href=\"#def_ref\">ref</a> under <code>refs/tags/</code> namespace that points to an object of an arbitrary type (typically a tag points to either a <a href=\"#def_tag_object\">tag</a> or a <a href=\"#def_commit_object\">commit object</a>). In contrast to a <a href=\"#def_head\">head</a>, a tag is not updated by the <code>commit</code> command. A Git tag has nothing to do with a Lisp tag (which would be called an <a href=\"#def_object_type\">object type</a> in Git’s context). A tag is most typically used to mark a particular point in the commit ancestry <a href=\"#def_chain\">chain</a>.</p> </dd> <dt class=\"hdlist1\">\ntag object</dt> <dd> <p>An <a href=\"#def_object\">object</a> containing a <a href=\"#def_ref\">ref</a> pointing to another object, which can contain a message just like a <a href=\"#def_commit_object\">commit object</a>. It can also contain a (PGP) signature, in which case it is called a \"signed tag object\".</p> </dd> <dt class=\"hdlist1\">\ntopic branch</dt> <dd> <p>A regular Git <a href=\"#def_branch\">branch</a> that is used by a developer to identify a conceptual line of development. Since branches are very easy and inexpensive, it is often desirable to have several small branches that each contain very well defined concepts or small incremental yet related changes.</p> </dd> <dt class=\"hdlist1\">\ntree</dt> <dd> <p>Either a <a href=\"#def_working_tree\">working tree</a>, or a <a href=\"#def_tree_object\">tree object</a> together with the dependent <a href=\"#def_blob_object\">blob</a> and tree objects (i.e. a stored representation of a working tree).</p> </dd> <dt class=\"hdlist1\">\ntree object</dt> <dd> <p>An <a href=\"#def_object\">object</a> containing a list of file names and modes along with refs to the associated blob and/or tree objects. A <a href=\"#def_tree\">tree</a> is equivalent to a <a href=\"#def_directory\">directory</a>.</p> </dd> <dt class=\"hdlist1\">\ntree-ish (also treeish)</dt> <dd> <p>A <a href=\"#def_tree_object\">tree object</a> or an <a href=\"#def_object\">object</a> that can be recursively dereferenced to a tree object. Dereferencing a <a href=\"#def_commit_object\">commit object</a> yields the tree object corresponding to the <a href=\"#def_revision\">revision</a>'s top <a href=\"#def_directory\">directory</a>. The following are all tree-ishes: a <a href=\"#def_commit-ish\">commit-ish</a>, a tree object, a <a href=\"#def_tag_object\">tag object</a> that points to a tree object, a tag object that points to a tag object that points to a tree object, etc.</p> </dd> <dt class=\"hdlist1\">\nunmerged index</dt> <dd> <p>An <a href=\"#def_index\">index</a> which contains unmerged <a href=\"#def_index_entry\">index entries</a>.</p> </dd> <dt class=\"hdlist1\">\nunreachable object</dt> <dd> <p>An <a href=\"#def_object\">object</a> which is not <a href=\"#def_reachable\">reachable</a> from a <a href=\"#def_branch\">branch</a>, <a href=\"#def_tag\">tag</a>, or any other reference.</p> </dd> <dt class=\"hdlist1\">\nupstream branch</dt> <dd> <p>The default <a href=\"#def_branch\">branch</a> that is merged into the branch in question (or the branch in question is rebased onto). It is configured via branch.&lt;name&gt;.remote and branch.&lt;name&gt;.merge. If the upstream branch of <code>A</code> is <code>origin/B</code> sometimes we say \"<code>A</code> is tracking <code>origin/B</code>\".</p> </dd> <dt class=\"hdlist1\">\nworking tree</dt> <dd> <p>The tree of actual checked out files. The working tree normally contains the contents of the <a href=\"#def_HEAD\">HEAD</a> commit’s tree, plus any local changes that you have made but not yet committed.</p> </dd> </dl> </div></div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"gittutorial\">gittutorial[7]</a>, <a href=\"gittutorial-2\">gittutorial-2[7]</a>, <a href=\"gitcvs-migration\">gitcvs-migration[7]</a>, <a href=\"giteveryday\">giteveryday[7]</a>, <a href=\"user-manual\">The Git User’s Manual</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/gitglossary\" class=\"_attribution-link\">https://git-scm.com/docs/gitglossary</a>\n  </p>\n</div>\n","gitignore":"<h1>gitignore</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>gitignore - Specifies intentionally untracked files to ignore</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"> <p>$HOME/.config/git/ignore, $GIT_DIR/info/exclude, .gitignore</p> </div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>A <code>gitignore</code> file specifies intentionally untracked files that Git should ignore. Files already tracked by Git are not affected; see the NOTES below for details.</p>   <p>Each line in a <code>gitignore</code> file specifies a pattern. When deciding whether to ignore a path, Git normally checks <code>gitignore</code> patterns from multiple sources, with the following order of precedence, from highest to lowest (within one level of precedence, the last matching pattern decides the outcome):</p>  <div class=\"ulist\"> <ul> <li> <p>Patterns read from the command line for those commands that support them.</p> </li> <li> <p>Patterns read from a <code>.gitignore</code> file in the same directory as the path, or in any parent directory, with patterns in the higher level files (up to the toplevel of the work tree) being overridden by those in lower level files down to the directory containing the file. These patterns match relative to the location of the <code>.gitignore</code> file. A project normally includes such <code>.gitignore</code> files in its repository, containing patterns for files generated as part of the project build.</p> </li> <li> <p>Patterns read from <code>$GIT_DIR/info/exclude</code>.</p> </li> <li> <p>Patterns read from the file specified by the configuration variable <code>core.excludesFile</code>.</p> </li> </ul> </div>  <p>Which file to place a pattern in depends on how the pattern is meant to be used.</p>  <div class=\"ulist\"> <ul> <li> <p>Patterns which should be version-controlled and distributed to other repositories via clone (i.e., files that all developers will want to ignore) should go into a <code>.gitignore</code> file.</p> </li> <li> <p>Patterns which are specific to a particular repository but which do not need to be shared with other related repositories (e.g., auxiliary files that live inside the repository but are specific to one user’s workflow) should go into the <code>$GIT_DIR/info/exclude</code> file.</p> </li> <li> <p>Patterns which a user wants Git to ignore in all situations (e.g., backup or temporary files generated by the user’s editor of choice) generally go into a file specified by <code>core.excludesFile</code> in the user’s <code>~/.gitconfig</code>. Its default value is $XDG_CONFIG_HOME/git/ignore. If $XDG_CONFIG_HOME is either not set or empty, $HOME/.config/git/ignore is used instead.</p> </li> </ul> </div>  <p>The underlying Git plumbing tools, such as <code>git ls-files</code> and <code>git read-tree</code>, read <code>gitignore</code> patterns specified by command-line options, or from files specified by command-line options. Higher-level Git tools, such as <code>git status</code> and <code>git add</code>, use patterns from the sources specified above.</p> </div>   <h2 id=\"_pattern_format\">Pattern format</h2> <div class=\"sectionbody\">\n<div class=\"ulist\"> <ul> <li> <p>A blank line matches no files, so it can serve as a separator for readability.</p> </li> <li> <p>A line starting with # serves as a comment. Put a backslash (\"<code>\\</code>\") in front of the first hash for patterns that begin with a hash.</p> </li> <li> <p>Trailing spaces are ignored unless they are quoted with backslash (\"<code>\\</code>\").</p> </li> <li> <p>An optional prefix \"<code>!</code>\" which negates the pattern; any matching file excluded by a previous pattern will become included again. It is not possible to re-include a file if a parent directory of that file is excluded. Git doesn’t list excluded directories for performance reasons, so any patterns on contained files have no effect, no matter where they are defined. Put a backslash (\"<code>\\</code>\") in front of the first \"<code>!</code>\" for patterns that begin with a literal \"<code>!</code>\", for example, \"<code>\\!important!.txt</code>\".</p> </li> <li> <p>If the pattern ends with a slash, it is removed for the purpose of the following description, but it would only find a match with a directory. In other words, <code>foo/</code> will match a directory <code>foo</code> and paths underneath it, but will not match a regular file or a symbolic link <code>foo</code> (this is consistent with the way how pathspec works in general in Git).</p> </li> <li> <p>If the pattern does not contain a slash <code>/</code>, Git treats it as a shell glob pattern and checks for a match against the pathname relative to the location of the <code>.gitignore</code> file (relative to the toplevel of the work tree if not from a <code>.gitignore</code> file).</p> </li> <li> <p>Otherwise, Git treats the pattern as a shell glob suitable for consumption by fnmatch(3) with the FNM_PATHNAME flag: wildcards in the pattern will not match a / in the pathname. For example, \"Documentation/*.html\" matches \"Documentation/git.html\" but not \"Documentation/ppc/ppc.html\" or \"tools/perf/Documentation/perf.html\".</p> </li> <li> <p>A leading slash matches the beginning of the pathname. For example, \"/*.c\" matches \"cat-file.c\" but not \"mozilla-sha1/sha1.c\".</p> </li> </ul> </div>  <p>Two consecutive asterisks (\"<code>**</code>\") in patterns matched against full pathname may have special meaning:</p>  <div class=\"ulist\"> <ul> <li> <p>A leading \"<code>**</code>\" followed by a slash means match in all directories. For example, \"<code>**/foo</code>\" matches file or directory \"<code>foo</code>\" anywhere, the same as pattern \"<code>foo</code>\". \"<code>**/foo/bar</code>\" matches file or directory \"<code>bar</code>\" anywhere that is directly under directory \"<code>foo</code>\".</p> </li> <li> <p>A trailing \"<code>/**</code>\" matches everything inside. For example, \"<code>abc/**</code>\" matches all files inside directory \"<code>abc</code>\", relative to the location of the <code>.gitignore</code> file, with infinite depth.</p> </li> <li> <p>A slash followed by two consecutive asterisks then a slash matches zero or more directories. For example, \"<code>a/**/b</code>\" matches \"<code>a/b</code>\", \"<code>a/x/b</code>\", \"<code>a/x/y/b</code>\" and so on.</p> </li> <li> <p>Other consecutive asterisks are considered invalid.</p> </li> </ul> </div>\n</div>   <h2 id=\"_notes\">Notes</h2> <div class=\"sectionbody\"> <p>The purpose of gitignore files is to ensure that certain files not tracked by Git remain untracked.</p>   <p>To stop tracking a file that is currently tracked, use <code>git rm --cached</code>.</p> </div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\">\n<div class=\"listingblock\"> <div class=\"content\"> <pre>    $ git status\n    [...]\n    # Untracked files:\n    [...]\n    #       Documentation/foo.html\n    #       Documentation/gitignore.html\n    #       file.o\n    #       lib.a\n    #       src/internal.o\n    [...]\n    $ cat .git/info/exclude\n    # ignore objects and archives, anywhere in the tree.\n    *.[oa]\n    $ cat Documentation/.gitignore\n    # ignore generated html files,\n    *.html\n    # except foo.html which is maintained by hand\n    !foo.html\n    $ git status\n    [...]\n    # Untracked files:\n    [...]\n    #       Documentation/foo.html\n    [...]</pre> </div> </div>  <p>Another example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>    $ cat .gitignore\n    vmlinux*\n    $ ls arch/foo/kernel/vm*\n    arch/foo/kernel/vmlinux.lds.S\n    $ echo '!/vmlinux*' &gt;arch/foo/kernel/.gitignore</pre> </div> </div>  <p>The second .gitignore prevents Git from ignoring <code>arch/foo/kernel/vmlinux.lds.S</code>.</p>   <p>Example to exclude everything except a specific directory <code>foo/bar</code> (note the <code>/*</code> - without the slash, the wildcard would also exclude everything within <code>foo/bar</code>):</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>    $ cat .gitignore\n    # exclude everything except directory foo/bar\n    /*\n    !/foo\n    /foo/*\n    !/foo/bar</pre> </div> </div>\n</div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-rm\">git-rm[1]</a>, <a href=\"gitrepository-layout\">gitrepository-layout[5]</a>, <a href=\"git-check-ignore\">git-check-ignore[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/gitignore\" class=\"_attribution-link\">https://git-scm.com/docs/gitignore</a>\n  </p>\n</div>\n","git-notes":"<h1>git-notes</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-notes - Add or inspect object notes</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git notes [list [&lt;object&gt;]]\ngit notes add [-f] [--allow-empty] [-F &lt;file&gt; | -m &lt;msg&gt; | (-c | -C) &lt;object&gt;] [&lt;object&gt;]\ngit notes copy [-f] ( --stdin | &lt;from-object&gt; &lt;to-object&gt; )\ngit notes append [--allow-empty] [-F &lt;file&gt; | -m &lt;msg&gt; | (-c | -C) &lt;object&gt;] [&lt;object&gt;]\ngit notes edit [--allow-empty] [&lt;object&gt;]\ngit notes show [&lt;object&gt;]\ngit notes merge [-v | -q] [-s &lt;strategy&gt; ] &lt;notes-ref&gt;\ngit notes merge --commit [-v | -q]\ngit notes merge --abort [-v | -q]\ngit notes remove [--ignore-missing] [--stdin] [&lt;object&gt;…​]\ngit notes prune [-n | -v]\ngit notes get-ref</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Adds, removes, or reads notes attached to objects, without touching the objects themselves.</p>   <p>By default, notes are saved to and read from <code>refs/notes/commits</code>, but this default can be overridden. See the OPTIONS, CONFIGURATION, and ENVIRONMENT sections below. If this ref does not exist, it will be quietly created when it is first needed to store a note.</p>   <p>A typical use of notes is to supplement a commit message without changing the commit itself. Notes can be shown by <code>git log</code> along with the original commit message. To distinguish these notes from the message stored in the commit object, the notes are indented like the message, after an unindented line saying \"Notes (&lt;refname&gt;):\" (or \"Notes:\" for <code>refs/notes/commits</code>).</p>   <p>Notes can also be added to patches prepared with <code>git format-patch</code> by using the <code>--notes</code> option. Such notes are added as a patch commentary after a three dash separator line.</p>   <p>To change which notes are shown by <code>git log</code>, see the \"notes.displayRef\" configuration in <a href=\"git-log\">git-log[1]</a>.</p>   <p>See the \"notes.rewrite.&lt;command&gt;\" configuration for a way to carry notes across commands that rewrite commits.</p> </div>   <h2 id=\"_subcommands\">Subcommands</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">list</dt> <dd> <p>List the notes object for a given object. If no object is given, show a list of all note objects and the objects they annotate (in the format \"&lt;note object&gt; &lt;annotated object&gt;\"). This is the default subcommand if no subcommand is given.</p> </dd> <dt class=\"hdlist1\">add</dt> <dd> <p>Add notes for a given object (defaults to HEAD). Abort if the object already has notes (use <code>-f</code> to overwrite existing notes). However, if you’re using <code>add</code> interactively (using an editor to supply the notes contents), then - instead of aborting - the existing notes will be opened in the editor (like the <code>edit</code> subcommand).</p> </dd> <dt class=\"hdlist1\">copy</dt> <dd> <p>Copy the notes for the first object onto the second object. Abort if the second object already has notes, or if the first object has none (use -f to overwrite existing notes to the second object). This subcommand is equivalent to: <code>git notes add [-f] -C $(git notes list &lt;from-object&gt;) &lt;to-object&gt;</code></p>  <p>In <code>--stdin</code> mode, take lines in the format</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>&lt;from-object&gt; SP &lt;to-object&gt; [ SP &lt;rest&gt; ] LF</pre> </div> </div>  <p>on standard input, and copy the notes from each &lt;from-object&gt; to its corresponding &lt;to-object&gt;. (The optional <code>&lt;rest&gt;</code> is ignored so that the command can read the input given to the <code>post-rewrite</code> hook.)</p>  </dd> <dt class=\"hdlist1\">append</dt> <dd> <p>Append to the notes of an existing object (defaults to HEAD). Creates a new notes object if needed.</p> </dd> <dt class=\"hdlist1\">edit</dt> <dd> <p>Edit the notes for a given object (defaults to HEAD).</p> </dd> <dt class=\"hdlist1\">show</dt> <dd> <p>Show the notes for a given object (defaults to HEAD).</p> </dd> <dt class=\"hdlist1\">merge</dt> <dd> <p>Merge the given notes ref into the current notes ref. This will try to merge the changes made by the given notes ref (called \"remote\") since the merge-base (if any) into the current notes ref (called \"local\").</p>  <p>If conflicts arise and a strategy for automatically resolving conflicting notes (see the \"NOTES MERGE STRATEGIES\" section) is not given, the \"manual\" resolver is used. This resolver checks out the conflicting notes in a special worktree (<code>.git/NOTES_MERGE_WORKTREE</code>), and instructs the user to manually resolve the conflicts there. When done, the user can either finalize the merge with <code>git notes merge --commit</code>, or abort the merge with <code>git notes merge --abort</code>.</p>  </dd> <dt class=\"hdlist1\">remove</dt> <dd> <p>Remove the notes for given objects (defaults to HEAD). When giving zero or one object from the command line, this is equivalent to specifying an empty note message to the <code>edit</code> subcommand.</p> </dd> <dt class=\"hdlist1\">prune</dt> <dd> <p>Remove all notes for non-existing/unreachable objects.</p> </dd> <dt class=\"hdlist1\">get-ref</dt> <dd> <p>Print the current notes ref. This provides an easy way to retrieve the current notes ref (e.g. from scripts).</p> </dd> </dl> </div></div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-f</dt> <dt class=\"hdlist1\">--force</dt> <dd> <p>When adding notes to an object that already has notes, overwrite the existing notes (instead of aborting).</p> </dd> <dt class=\"hdlist1\">-m &lt;msg&gt;</dt> <dt class=\"hdlist1\">--message=&lt;msg&gt;</dt> <dd> <p>Use the given note message (instead of prompting). If multiple <code>-m</code> options are given, their values are concatenated as separate paragraphs. Lines starting with <code>#</code> and empty lines other than a single line between paragraphs will be stripped out.</p> </dd> <dt class=\"hdlist1\">-F &lt;file&gt;</dt> <dt class=\"hdlist1\">--file=&lt;file&gt;</dt> <dd> <p>Take the note message from the given file. Use <code>-</code> to read the note message from the standard input. Lines starting with <code>#</code> and empty lines other than a single line between paragraphs will be stripped out.</p> </dd> <dt class=\"hdlist1\">-C &lt;object&gt;</dt> <dt class=\"hdlist1\">--reuse-message=&lt;object&gt;</dt> <dd> <p>Take the given blob object (for example, another note) as the note message. (Use <code>git notes copy &lt;object&gt;</code> instead to copy notes between objects.)</p> </dd> <dt class=\"hdlist1\">-c &lt;object&gt;</dt> <dt class=\"hdlist1\">--reedit-message=&lt;object&gt;</dt> <dd> <p>Like <code>-C</code>, but with <code>-c</code> the editor is invoked, so that the user can further edit the note message.</p> </dd> <dt class=\"hdlist1\">--allow-empty</dt> <dd> <p>Allow an empty note object to be stored. The default behavior is to automatically remove empty notes.</p> </dd> <dt class=\"hdlist1\">--ref &lt;ref&gt;</dt> <dd> <p>Manipulate the notes tree in &lt;ref&gt;. This overrides <code>GIT_NOTES_REF</code> and the \"core.notesRef\" configuration. The ref specifies the full refname when it begins with <code>refs/notes/</code>; when it begins with <code>notes/</code>, <code>refs/</code> and otherwise <code>refs/notes/</code> is prefixed to form a full name of the ref.</p> </dd> <dt class=\"hdlist1\">--ignore-missing</dt> <dd> <p>Do not consider it an error to request removing notes from an object that does not have notes attached to it.</p> </dd> <dt class=\"hdlist1\">--stdin</dt> <dd> <p>Also read the object names to remove notes from from the standard input (there is no reason you cannot combine this with object names from the command line).</p> </dd> <dt class=\"hdlist1\">-n</dt> <dt class=\"hdlist1\">--dry-run</dt> <dd> <p>Do not remove anything; just report the object names whose notes would be removed.</p> </dd> <dt class=\"hdlist1\">-s &lt;strategy&gt;</dt> <dt class=\"hdlist1\">--strategy=&lt;strategy&gt;</dt> <dd> <p>When merging notes, resolve notes conflicts using the given strategy. The following strategies are recognized: \"manual\" (default), \"ours\", \"theirs\", \"union\" and \"cat_sort_uniq\". This option overrides the \"notes.mergeStrategy\" configuration setting. See the \"NOTES MERGE STRATEGIES\" section below for more information on each notes merge strategy.</p> </dd> <dt class=\"hdlist1\">--commit</dt> <dd> <p>Finalize an in-progress <code>git notes merge</code>. Use this option when you have resolved the conflicts that <code>git notes merge</code> stored in .git/NOTES_MERGE_WORKTREE. This amends the partial merge commit created by <code>git notes merge</code> (stored in .git/NOTES_MERGE_PARTIAL) by adding the notes in .git/NOTES_MERGE_WORKTREE. The notes ref stored in the .git/NOTES_MERGE_REF symref is updated to the resulting commit.</p> </dd> <dt class=\"hdlist1\">--abort</dt> <dd> <p>Abort/reset a in-progress <code>git notes merge</code>, i.e. a notes merge with conflicts. This simply removes all files related to the notes merge.</p> </dd> <dt class=\"hdlist1\">-q</dt> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>When merging notes, operate quietly.</p> </dd> <dt class=\"hdlist1\">-v</dt> <dt class=\"hdlist1\">--verbose</dt> <dd> <p>When merging notes, be more verbose. When pruning notes, report all object names whose notes are removed.</p> </dd> </dl> </div></div>   <h2 id=\"_discussion\">Discussion</h2> <div class=\"sectionbody\"> <p>Commit notes are blobs containing extra information about an object (usually information to supplement a commit’s message). These blobs are taken from notes refs. A notes ref is usually a branch which contains \"files\" whose paths are the object names for the objects they describe, with some directory separators included for performance reasons <span class=\"footnote\">[<a id=\"_footnoteref_1\" class=\"footnote\" href=\"#_footnote_1\" title=\"View footnote.\">1</a>]</span>.</p>   <p>Every notes change creates a new commit at the specified notes ref. You can therefore inspect the history of the notes by invoking, e.g., <code>git log -p notes/commits</code>. Currently the commit message only records which operation triggered the update, and the commit authorship is determined according to the usual rules (see <a href=\"git-commit\">git-commit[1]</a>). These details may change in the future.</p>   <p>It is also permitted for a notes ref to point directly to a tree object, in which case the history of the notes can be read with <code>git log -p -g &lt;refname&gt;</code>.</p> </div>   <h2 id=\"_notes_merge_strategies\">Notes merge strategies</h2> <div class=\"sectionbody\"> <p>The default notes merge strategy is \"manual\", which checks out conflicting notes in a special work tree for resolving notes conflicts (<code>.git/NOTES_MERGE_WORKTREE</code>), and instructs the user to resolve the conflicts in that work tree. When done, the user can either finalize the merge with <code>git notes merge --commit</code>, or abort the merge with <code>git notes merge --abort</code>.</p>   <p>Users may select an automated merge strategy from among the following using either -s/--strategy option or configuring notes.mergeStrategy accordingly:</p>   <p>\"ours\" automatically resolves conflicting notes in favor of the local version (i.e. the current notes ref).</p>   <p>\"theirs\" automatically resolves notes conflicts in favor of the remote version (i.e. the given notes ref being merged into the current notes ref).</p>   <p>\"union\" automatically resolves notes conflicts by concatenating the local and remote versions.</p>   <p>\"cat_sort_uniq\" is similar to \"union\", but in addition to concatenating the local and remote versions, this strategy also sorts the resulting lines, and removes duplicate lines from the result. This is equivalent to applying the \"cat | sort | uniq\" shell pipeline to the local and remote versions. This strategy is useful if the notes follow a line-based format where one wants to avoid duplicated lines in the merge result. Note that if either the local or remote version contain duplicate lines prior to the merge, these will also be removed by this notes merge strategy.</p> </div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"> <p>You can use notes to add annotations with information that was not available at the time a commit was written.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git notes add -m 'Tested-by: Johannes Sixt &lt;j6t@kdbg.org&gt;' 72a144e2\n$ git show -s 72a144e\n[...]\n    Signed-off-by: Junio C Hamano &lt;gitster@pobox.com&gt;\n\nNotes:\n    Tested-by: Johannes Sixt &lt;j6t@kdbg.org&gt;</pre> </div> </div>  <p>In principle, a note is a regular Git blob, and any kind of (non-)format is accepted. You can binary-safely create notes from arbitrary files using <code>git hash-object</code>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ cc *.c\n$ blob=$(git hash-object -w a.out)\n$ git notes --ref=built add --allow-empty -C \"$blob\" HEAD</pre> </div> </div>  <p>(You cannot simply use <code>git notes --ref=built add -F a.out HEAD</code> because that is not binary-safe.) Of course, it doesn’t make much sense to display non-text-format notes with <code>git log</code>, so if you use such notes, you’ll probably need to write some special-purpose tools to do something useful with them.</p> </div>   <h2 id=\"_configuration\">Configuration</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">core.notesRef</dt> <dd> <p>Notes ref to read and manipulate instead of <code>refs/notes/commits</code>. Must be an unabbreviated ref name. This setting can be overridden through the environment and command line.</p> </dd> <dt class=\"hdlist1\">notes.mergeStrategy</dt> <dd> <p>Which merge strategy to choose by default when resolving notes conflicts. Must be one of <code>manual</code>, <code>ours</code>, <code>theirs</code>, <code>union</code>, or <code>cat_sort_uniq</code>. Defaults to <code>manual</code>. See \"NOTES MERGE STRATEGIES\" section above for more information on each strategy.</p>  <p>This setting can be overridden by passing the <code>--strategy</code> option.</p>  </dd> <dt class=\"hdlist1\">notes.&lt;name&gt;.mergeStrategy</dt> <dd> <p>Which merge strategy to choose when doing a notes merge into refs/notes/&lt;name&gt;. This overrides the more general \"notes.mergeStrategy\". See the \"NOTES MERGE STRATEGIES\" section above for more information on each available strategy.</p> </dd> <dt class=\"hdlist1\">notes.displayRef</dt> <dd> <p>Which ref (or refs, if a glob or specified more than once), in addition to the default set by <code>core.notesRef</code> or <code>GIT_NOTES_REF</code>, to read notes from when showing commit messages with the <code>git log</code> family of commands. This setting can be overridden on the command line or by the <code>GIT_NOTES_DISPLAY_REF</code> environment variable. See <a href=\"git-log\">git-log[1]</a>.</p> </dd> <dt class=\"hdlist1\">notes.rewrite.&lt;command&gt;</dt> <dd> <p>When rewriting commits with &lt;command&gt; (currently <code>amend</code> or <code>rebase</code>), if this variable is <code>false</code>, git will not copy notes from the original to the rewritten commit. Defaults to <code>true</code>. See also \"<code>notes.rewriteRef</code>\" below.</p>  <p>This setting can be overridden by the <code>GIT_NOTES_REWRITE_REF</code> environment variable.</p>  </dd> <dt class=\"hdlist1\">notes.rewriteMode</dt> <dd> <p>When copying notes during a rewrite, what to do if the target commit already has a note. Must be one of <code>overwrite</code>, <code>concatenate</code>, <code>cat_sort_uniq</code>, or <code>ignore</code>. Defaults to <code>concatenate</code>.</p>  <p>This setting can be overridden with the <code>GIT_NOTES_REWRITE_MODE</code> environment variable.</p>  </dd> <dt class=\"hdlist1\">notes.rewriteRef</dt> <dd> <p>When copying notes during a rewrite, specifies the (fully qualified) ref whose notes should be copied. May be a glob, in which case notes in all matching refs will be copied. You may also specify this configuration several times.</p>  <p>Does not have a default value; you must configure this variable to enable note rewriting.</p>   <p>Can be overridden with the <code>GIT_NOTES_REWRITE_REF</code> environment variable.</p>  </dd> </dl> </div></div>   <h2 id=\"_environment\">Environment</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>GIT_NOTES_REF</code></dt> <dd> <p>Which ref to manipulate notes from, instead of <code>refs/notes/commits</code>. This overrides the <code>core.notesRef</code> setting.</p> </dd> <dt class=\"hdlist1\"><code>GIT_NOTES_DISPLAY_REF</code></dt> <dd> <p>Colon-delimited list of refs or globs indicating which refs, in addition to the default from <code>core.notesRef</code> or <code>GIT_NOTES_REF</code>, to read notes from when showing commit messages. This overrides the <code>notes.displayRef</code> setting.</p>  <p>A warning will be issued for refs that do not exist, but a glob that does not match any refs is silently ignored.</p>  </dd> <dt class=\"hdlist1\"><code>GIT_NOTES_REWRITE_MODE</code></dt> <dd> <p>When copying notes during a rewrite, what to do if the target commit already has a note. Must be one of <code>overwrite</code>, <code>concatenate</code>, <code>cat_sort_uniq</code>, or <code>ignore</code>. This overrides the <code>core.rewriteMode</code> setting.</p> </dd> <dt class=\"hdlist1\"><code>GIT_NOTES_REWRITE_REF</code></dt> <dd> <p>When rewriting commits, which notes to copy from the original to the rewritten commit. Must be a colon-delimited list of refs or globs.</p>  <p>If not set in the environment, the list of notes to copy depends on the <code>notes.rewrite.&lt;command&gt;</code> and <code>notes.rewriteRef</code> settings.</p>  </dd> </dl> </div></div>       <hr> <div class=\"footnote\" id=\"_footnote_1\"> <a href=\"#_footnoteref_1\">1</a> Permitted pathnames have the form <em>ab</em><code>/</code><em>cd</em><code>/</code><em>ef</em><code>/</code><em>…​</em><code>/</code><em>abcdef…​</em>: a sequence of directory names of two hexadecimal digits each followed by a filename with the rest of the object ID. </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-notes\" class=\"_attribution-link\">https://git-scm.com/docs/git-notes</a>\n  </p>\n</div>\n","gitcredentials":"<h1>gitcredentials</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>gitcredentials - providing usernames and passwords to Git</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"listingblock\"> <div class=\"content\"> <pre>git config credential.https://example.com.username myusername\ngit config credential.helper \"$helper $options\"</pre> </div> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Git will sometimes need credentials from the user in order to perform operations; for example, it may need to ask for a username and password in order to access a remote repository over HTTP. This manual describes the mechanisms Git uses to request these credentials, as well as some features to avoid inputting these credentials repeatedly.</p> </div>   <h2 id=\"_requesting_credentials\">Requesting credentials</h2> <div class=\"sectionbody\"> <p>Without any credential helpers defined, Git will try the following strategies to ask the user for usernames and passwords:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>If the <code>GIT_ASKPASS</code> environment variable is set, the program specified by the variable is invoked. A suitable prompt is provided to the program on the command line, and the user’s input is read from its standard output.</p> </li> <li> <p>Otherwise, if the <code>core.askPass</code> configuration variable is set, its value is used as above.</p> </li> <li> <p>Otherwise, if the <code>SSH_ASKPASS</code> environment variable is set, its value is used as above.</p> </li> <li> <p>Otherwise, the user is prompted on the terminal.</p> </li> </ol> </div>\n</div>   <h2 id=\"_avoiding_repetition\">Avoiding repetition</h2> <div class=\"sectionbody\"> <p>It can be cumbersome to input the same credentials over and over. Git provides two methods to reduce this annoyance:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>Static configuration of usernames for a given authentication context.</p> </li> <li> <p>Credential helpers to cache or store passwords, or to interact with a system password wallet or keychain.</p> </li> </ol> </div>  <p>The first is simple and appropriate if you do not have secure storage available for a password. It is generally configured by adding this to your config:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>[credential \"https://example.com\"]\n        username = me</pre> </div> </div>  <p>Credential helpers, on the other hand, are external programs from which Git can request both usernames and passwords; they typically interface with secure storage provided by the OS or other programs.</p>   <p>To use a helper, you must first select one to use. Git currently includes the following helpers:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">cache</dt> <dd> <p>Cache credentials in memory for a short period of time. See <a href=\"git-credential-cache\">git-credential-cache[1]</a> for details.</p> </dd> <dt class=\"hdlist1\">store</dt> <dd> <p>Store credentials indefinitely on disk. See <a href=\"git-credential-store\">git-credential-store[1]</a> for details.</p> </dd> </dl> </div>  <p>You may also have third-party helpers installed; search for <code>credential-*</code> in the output of <code>git help -a</code>, and consult the documentation of individual helpers. Once you have selected a helper, you can tell Git to use it by putting its name into the credential.helper variable.</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>Find a helper.</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git help -a | grep credential-\ncredential-foo</pre> </div> </div> </li> <li> <p>Read its description.</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git help credential-foo</pre> </div> </div> </li> <li> <p>Tell Git to use it.</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git config --global credential.helper foo</pre> </div> </div> </li> </ol> </div>  <p>If there are multiple instances of the <code>credential.helper</code> configuration variable, each helper will be tried in turn, and may provide a username, password, or nothing. Once Git has acquired both a username and a password, no more helpers will be tried.</p>   <p>If <code>credential.helper</code> is configured to the empty string, this resets the helper list to empty (so you may override a helper set by a lower-priority config file by configuring the empty-string helper, followed by whatever set of helpers you would like).</p> </div>   <h2 id=\"_credential_contexts\">Credential contexts</h2> <div class=\"sectionbody\"> <p>Git considers each credential to have a context defined by a URL. This context is used to look up context-specific configuration, and is passed to any helpers, which may use it as an index into secure storage.</p>   <p>For instance, imagine we are accessing <code>https://example.com/foo.git</code>. When Git looks into a config file to see if a section matches this context, it will consider the two a match if the context is a more-specific subset of the pattern in the config file. For example, if you have this in your config file:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>[credential \"https://example.com\"]\n        username = foo</pre> </div> </div>  <p>then we will match: both protocols are the same, both hosts are the same, and the \"pattern\" URL does not care about the path component at all. However, this context would not match:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>[credential \"https://kernel.org\"]\n        username = foo</pre> </div> </div>  <p>because the hostnames differ. Nor would it match <code>foo.example.com</code>; Git compares hostnames exactly, without considering whether two hosts are part of the same domain. Likewise, a config entry for <code>http://example.com</code> would not match: Git compares the protocols exactly.</p> </div>   <h2 id=\"_configuration_options\">Configuration options</h2> <div class=\"sectionbody\"> <p>Options for a credential context can be configured either in <code>credential.*</code> (which applies to all credentials), or <code>credential.&lt;url&gt;.*</code>, where &lt;url&gt; matches the context as described above.</p>   <p>The following options are available in either location:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">helper</dt> <dd> <p>The name of an external credential helper, and any associated options. If the helper name is not an absolute path, then the string <code>git\ncredential-</code> is prepended. The resulting string is executed by the shell (so, for example, setting this to <code>foo --option=bar</code> will execute <code>git credential-foo --option=bar</code> via the shell. See the manual of specific helpers for examples of their use.</p> </dd> <dt class=\"hdlist1\">username</dt> <dd> <p>A default username, if one is not provided in the URL.</p> </dd> <dt class=\"hdlist1\">useHttpPath</dt> <dd> <p>By default, Git does not consider the \"path\" component of an http URL to be worth matching via external helpers. This means that a credential stored for <code>https://example.com/foo.git</code> will also be used for <code>https://example.com/bar.git</code>. If you do want to distinguish these cases, set this option to <code>true</code>.</p> </dd> </dl> </div>\n</div>   <h2 id=\"_custom_helpers\">Custom helpers</h2> <div class=\"sectionbody\"> <p>You can write your own custom helpers to interface with any system in which you keep credentials. See the documentation for Git’s <a href=\"https://git-scm.com/docs/technical/api-credentials.html\">credentials API</a> for details.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/gitcredentials\" class=\"_attribution-link\">https://git-scm.com/docs/gitcredentials</a>\n  </p>\n</div>\n","git-difftool":"<h1>git-difftool</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-difftool - Show changes using common diff tools</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git difftool [&lt;options&gt;] [&lt;commit&gt; [&lt;commit&gt;]] [--] [&lt;path&gt;…​]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p><code>git difftool</code> is a Git command that allows you to compare and edit files between revisions using common diff tools. <code>git difftool</code> is a frontend to <code>git diff</code> and accepts the same options and arguments. See <a href=\"git-diff\">git-diff[1]</a>.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\">\n<div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-d</dt> <dt class=\"hdlist1\">--dir-diff</dt> <dd> <p>Copy the modified files to a temporary location and perform a directory diff on them. This mode never prompts before launching the diff tool.</p> </dd> <dt class=\"hdlist1\">-y</dt> <dt class=\"hdlist1\">--no-prompt</dt> <dd> <p>Do not prompt before launching a diff tool.</p> </dd> <dt class=\"hdlist1\">--prompt</dt> <dd> <p>Prompt before each invocation of the diff tool. This is the default behaviour; the option is provided to override any configuration settings.</p> </dd> <dt class=\"hdlist1\">-t &lt;tool&gt;</dt> <dt class=\"hdlist1\">--tool=&lt;tool&gt;</dt> <dd> <p>Use the diff tool specified by &lt;tool&gt;. Valid values include emerge, kompare, meld, and vimdiff. Run <code>git difftool --tool-help</code> for the list of valid &lt;tool&gt; settings.</p>  <p>If a diff tool is not specified, <code>git difftool</code> will use the configuration variable <code>diff.tool</code>. If the configuration variable <code>diff.tool</code> is not set, <code>git difftool</code> will pick a suitable default.</p>   <p>You can explicitly provide a full path to the tool by setting the configuration variable <code>difftool.&lt;tool&gt;.path</code>. For example, you can configure the absolute path to kdiff3 by setting <code>difftool.kdiff3.path</code>. Otherwise, <code>git difftool</code> assumes the tool is available in PATH.</p>   <p>Instead of running one of the known diff tools, <code>git difftool</code> can be customized to run an alternative program by specifying the command line to invoke in a configuration variable <code>difftool.&lt;tool&gt;.cmd</code>.</p>   <p>When <code>git difftool</code> is invoked with this tool (either through the <code>-t</code> or <code>--tool</code> option or the <code>diff.tool</code> configuration variable) the configured command line will be invoked with the following variables available: <code>$LOCAL</code> is set to the name of the temporary file containing the contents of the diff pre-image and <code>$REMOTE</code> is set to the name of the temporary file containing the contents of the diff post-image. <code>$MERGED</code> is the name of the file which is being compared. <code>$BASE</code> is provided for compatibility with custom merge tool commands and has the same value as <code>$MERGED</code>.</p>  </dd> <dt class=\"hdlist1\">--tool-help</dt> <dd> <p>Print a list of diff tools that may be used with <code>--tool</code>.</p> </dd> <dt class=\"hdlist1\">--[no-]symlinks</dt> <dd> <p><code>git difftool</code>'s default behavior is create symlinks to the working tree when run in <code>--dir-diff</code> mode and the right-hand side of the comparison yields the same content as the file in the working tree.</p>  <p>Specifying <code>--no-symlinks</code> instructs <code>git difftool</code> to create copies instead. <code>--no-symlinks</code> is the default on Windows.</p>  </dd> <dt class=\"hdlist1\">-x &lt;command&gt;</dt> <dt class=\"hdlist1\">--extcmd=&lt;command&gt;</dt> <dd> <p>Specify a custom command for viewing diffs. <code>git-difftool</code> ignores the configured defaults and runs <code>$command $LOCAL $REMOTE</code> when this option is specified. Additionally, <code>$BASE</code> is set in the environment.</p> </dd> <dt class=\"hdlist1\">-g</dt> <dt class=\"hdlist1\">--gui</dt> <dd> <p>When <code>git-difftool</code> is invoked with the <code>-g</code> or <code>--gui</code> option the default diff tool will be read from the configured <code>diff.guitool</code> variable instead of <code>diff.tool</code>.</p> </dd> <dt class=\"hdlist1\">--[no-]trust-exit-code</dt> <dd> <p><code>git-difftool</code> invokes a diff tool individually on each file. Errors reported by the diff tool are ignored by default. Use <code>--trust-exit-code</code> to make <code>git-difftool</code> exit when an invoked diff tool returns a non-zero exit code.</p>  <p><code>git-difftool</code> will forward the exit code of the invoked tool when <code>--trust-exit-code</code> is used.</p>  </dd> </dl> </div>  <p>See <a href=\"git-diff\">git-diff[1]</a> for the full list of supported options.</p> </div>   <h2 id=\"_config_variables\">Config variables</h2> <div class=\"sectionbody\"> <p><code>git difftool</code> falls back to <code>git mergetool</code> config variables when the difftool equivalents have not been defined.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">diff.tool</dt> <dd> <p>The default diff tool to use.</p> </dd> <dt class=\"hdlist1\">diff.guitool</dt> <dd> <p>The default diff tool to use when <code>--gui</code> is specified.</p> </dd> <dt class=\"hdlist1\">difftool.&lt;tool&gt;.path</dt> <dd> <p>Override the path for the given tool. This is useful in case your tool is not in the PATH.</p> </dd> <dt class=\"hdlist1\">difftool.&lt;tool&gt;.cmd</dt> <dd> <p>Specify the command to invoke the specified diff tool.</p>  <p>See the <code>--tool=&lt;tool&gt;</code> option above for more details.</p>  </dd> <dt class=\"hdlist1\">difftool.prompt</dt> <dd> <p>Prompt before each invocation of the diff tool.</p> </dd> <dt class=\"hdlist1\">difftool.trustExitCode</dt> <dd> <p>Exit difftool if the invoked diff tool returns a non-zero exit status.</p>  <p>See the <code>--trust-exit-code</code> option above for more details.</p>  </dd> </dl> </div>\n</div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><a href=\"git-diff\">git-diff[1]</a></dt> <dd> <p>Show changes between commits, commit and working tree, etc</p> </dd> <dt class=\"hdlist1\"><a href=\"git-mergetool\">git-mergetool[1]</a></dt> <dd> <p>Run merge conflict resolution tools to resolve merge conflicts</p> </dd> <dt class=\"hdlist1\"><a href=\"git-config\">git-config[1]</a></dt> <dd> <p>Get and set repository or global options</p> </dd> </dl> </div></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-difftool\" class=\"_attribution-link\">https://git-scm.com/docs/git-difftool</a>\n  </p>\n</div>\n","git-rerere":"<h1>git-rerere</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-rerere - Reuse recorded resolution of conflicted merges</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git rerere [clear|forget &lt;pathspec&gt;|diff|remaining|status|gc]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>In a workflow employing relatively long lived topic branches, the developer sometimes needs to resolve the same conflicts over and over again until the topic branches are done (either merged to the \"release\" branch, or sent out and accepted upstream).</p>   <p>This command assists the developer in this process by recording conflicted automerge results and corresponding hand resolve results on the initial manual merge, and applying previously recorded hand resolutions to their corresponding automerge results.</p>  <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> You need to set the configuration variable rerere.enabled in order to enable this command. </td> </tr> </table> </div>\n</div>   <h2 id=\"_commands\">Commands</h2> <div class=\"sectionbody\"> <p>Normally, <code>git rerere</code> is run without arguments or user-intervention. However, it has several commands that allow it to interact with its working state.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><em>clear</em></dt> <dd> <p>Reset the metadata used by rerere if a merge resolution is to be aborted. Calling <code>git am [--skip|--abort]</code> or <code>git rebase [--skip|--abort]</code> will automatically invoke this command.</p> </dd> <dt class=\"hdlist1\">\n<em>forget</em> &lt;pathspec&gt;</dt> <dd> <p>Reset the conflict resolutions which rerere has recorded for the current conflict in &lt;pathspec&gt;.</p> </dd> <dt class=\"hdlist1\"><em>diff</em></dt> <dd> <p>Display diffs for the current state of the resolution. It is useful for tracking what has changed while the user is resolving conflicts. Additional arguments are passed directly to the system <code>diff</code> command installed in PATH.</p> </dd> <dt class=\"hdlist1\"><em>status</em></dt> <dd> <p>Print paths with conflicts whose merge resolution rerere will record.</p> </dd> <dt class=\"hdlist1\"><em>remaining</em></dt> <dd> <p>Print paths with conflicts that have not been autoresolved by rerere. This includes paths whose resolutions cannot be tracked by rerere, such as conflicting submodules.</p> </dd> <dt class=\"hdlist1\"><em>gc</em></dt> <dd> <p>Prune records of conflicted merges that occurred a long time ago. By default, unresolved conflicts older than 15 days and resolved conflicts older than 60 days are pruned. These defaults are controlled via the <code>gc.rerereUnresolved</code> and <code>gc.rerereResolved</code> configuration variables respectively.</p> </dd> </dl> </div>\n</div>   <h2 id=\"_discussion\">Discussion</h2> <div class=\"sectionbody\"> <p>When your topic branch modifies an overlapping area that your master branch (or upstream) touched since your topic branch forked from it, you may want to test it with the latest master, even before your topic branch is ready to be pushed upstream:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>              o---*---o topic\n             /\n    o---o---o---*---o---o master</pre> </div> </div>  <p>For such a test, you need to merge master and topic somehow. One way to do it is to pull master into the topic branch:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        $ git checkout topic\n        $ git merge master\n\n              o---*---o---+ topic\n             /           /\n    o---o---o---*---o---o master</pre> </div> </div>  <p>The commits marked with <code>*</code> touch the same area in the same file; you need to resolve the conflicts when creating the commit marked with <code>+</code>. Then you can test the result to make sure your work-in-progress still works with what is in the latest master.</p>   <p>After this test merge, there are two ways to continue your work on the topic. The easiest is to build on top of the test merge commit <code>+</code>, and when your work in the topic branch is finally ready, pull the topic branch into master, and/or ask the upstream to pull from you. By that time, however, the master or the upstream might have been advanced since the test merge <code>+</code>, in which case the final commit graph would look like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        $ git checkout topic\n        $ git merge master\n        $ ... work on both topic and master branches\n        $ git checkout master\n        $ git merge topic\n\n              o---*---o---+---o---o topic\n             /           /         \\\n    o---o---o---*---o---o---o---o---+ master</pre> </div> </div>  <p>When your topic branch is long-lived, however, your topic branch would end up having many such \"Merge from master\" commits on it, which would unnecessarily clutter the development history. Readers of the Linux kernel mailing list may remember that Linus complained about such too frequent test merges when a subsystem maintainer asked to pull from a branch full of \"useless merges\".</p>   <p>As an alternative, to keep the topic branch clean of test merges, you could blow away the test merge, and keep building on top of the tip before the test merge:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        $ git checkout topic\n        $ git merge master\n        $ git reset --hard HEAD^ ;# rewind the test merge\n        $ ... work on both topic and master branches\n        $ git checkout master\n        $ git merge topic\n\n              o---*---o-------o---o topic\n             /                     \\\n    o---o---o---*---o---o---o---o---+ master</pre> </div> </div>  <p>This would leave only one merge commit when your topic branch is finally ready and merged into the master branch. This merge would require you to resolve the conflict, introduced by the commits marked with <code>*</code>. However, this conflict is often the same conflict you resolved when you created the test merge you blew away. <code>git rerere</code> helps you resolve this final conflicted merge using the information from your earlier hand resolve.</p>   <p>Running the <code>git rerere</code> command immediately after a conflicted automerge records the conflicted working tree files, with the usual conflict markers <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code>=======</code>, and <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> in them. Later, after you are done resolving the conflicts, running <code>git rerere</code> again will record the resolved state of these files. Suppose you did this when you created the test merge of master into the topic branch.</p>   <p>Next time, after seeing the same conflicted automerge, running <code>git rerere</code> will perform a three-way merge between the earlier conflicted automerge, the earlier manual resolution, and the current conflicted automerge. If this three-way merge resolves cleanly, the result is written out to your working tree file, so you do not have to manually resolve it. Note that <code>git rerere</code> leaves the index file alone, so you still need to do the final sanity checks with <code>git diff</code> (or <code>git diff -c</code>) and <code>git add</code> when you are satisfied.</p>   <p>As a convenience measure, <code>git merge</code> automatically invokes <code>git rerere</code> upon exiting with a failed automerge and <code>git rerere</code> records the hand resolve when it is a new conflict, or reuses the earlier hand resolve when it is not. <code>git commit</code> also invokes <code>git rerere</code> when committing a merge result. What this means is that you do not have to do anything special yourself (besides enabling the rerere.enabled config variable).</p>   <p>In our example, when you do the test merge, the manual resolution is recorded, and it will be reused when you do the actual merge later with the updated master and topic branch, as long as the recorded resolution is still applicable.</p>   <p>The information <code>git rerere</code> records is also used when running <code>git rebase</code>. After blowing away the test merge and continuing development on the topic branch:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>              o---*---o-------o---o topic\n             /\n    o---o---o---*---o---o---o---o   master\n\n        $ git rebase master topic\n\n                                  o---*---o-------o---o topic\n                                 /\n    o---o---o---*---o---o---o---o   master</pre> </div> </div>  <p>you could run <code>git rebase master topic</code>, to bring yourself up-to-date before your topic is ready to be sent upstream. This would result in falling back to a three-way merge, and it would conflict the same way as the test merge you resolved earlier. <code>git rerere</code> will be run by <code>git rebase</code> to help you resolve this conflict.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-rerere\" class=\"_attribution-link\">https://git-scm.com/docs/git-rerere</a>\n  </p>\n</div>\n","git-whatchanged":"<h1>git-whatchanged</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-whatchanged - Show logs with difference each commit introduces</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git whatchanged &lt;option&gt;…​</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Shows commit logs and diff output each commit introduces.</p>   <p>New users are encouraged to use <a href=\"git-log\">git-log[1]</a> instead. The <code>whatchanged</code> command is essentially the same as <a href=\"git-log\">git-log[1]</a> but defaults to show the raw format diff output and to skip merges.</p>   <p>The command is kept primarily for historical reasons; fingers of many people who learned Git long before <code>git log</code> was invented by reading Linux kernel mailing list are trained to type it.</p> </div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>git whatchanged -p v2.6.12.. include/scsi drivers/scsi</code></dt> <dd> <p>Show as patches the commits since version <code>v2.6.12</code> that changed any file in the include/scsi or drivers/scsi subdirectories</p> </dd> <dt class=\"hdlist1\"><code>git whatchanged --since=\"2 weeks ago\" -- gitk</code></dt> <dd> <p>Show the changes during the last two weeks to the file <code>gitk</code>. The \"--\" is necessary to avoid confusion with the <strong>branch</strong> named <code>gitk</code></p> </dd> </dl> </div></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-whatchanged\" class=\"_attribution-link\">https://git-scm.com/docs/git-whatchanged</a>\n  </p>\n</div>\n","git-cvsserver":"<h1>git-cvsserver</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-cvsserver - A CVS server emulator for Git</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"> <p>SSH:</p>  <div class=\"verseblock\"> <pre class=\"content\">export CVS_SERVER=\"git cvsserver\"\ncvs -d :ext:user@server/path/repo.git co &lt;HEAD_name&gt;</pre> </div>  <p>pserver (/etc/inetd.conf):</p>  <div class=\"verseblock\"> <pre class=\"content\">cvspserver stream tcp nowait nobody /usr/bin/git-cvsserver git-cvsserver pserver</pre> </div>  <p>Usage:</p>  <div class=\"verseblock\"> <pre class=\"content\">git-cvsserver [options] [pserver|server] [&lt;directory&gt; …​]</pre> </div>\n</div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"> <p>All these options obviously only make sense if enforced by the server side. They have been implemented to resemble the <a href=\"git-daemon\">git-daemon[1]</a> options as closely as possible.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--base-path &lt;path&gt;</dt> <dd> <p>Prepend <code>path</code> to requested CVSROOT</p> </dd> <dt class=\"hdlist1\">--strict-paths</dt> <dd> <p>Don’t allow recursing into subdirectories</p> </dd> <dt class=\"hdlist1\">--export-all</dt> <dd> <p>Don’t check for <code>gitcvs.enabled</code> in config. You also have to specify a list of allowed directories (see below) if you want to use this option.</p> </dd> <dt class=\"hdlist1\">-V</dt> <dt class=\"hdlist1\">--version</dt> <dd> <p>Print version information and exit</p> </dd> <dt class=\"hdlist1\">-h</dt> <dt class=\"hdlist1\">-H</dt> <dt class=\"hdlist1\">--help</dt> <dd> <p>Print usage information and exit</p> </dd> <dt class=\"hdlist1\">&lt;directory&gt;</dt> <dd> <p>You can specify a list of allowed directories. If no directories are given, all are allowed. This is an additional restriction, gitcvs access still needs to be enabled by the <code>gitcvs.enabled</code> config option unless <code>--export-all</code> was given, too.</p> </dd> </dl> </div>\n</div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>This application is a CVS emulation layer for Git.</p>   <p>It is highly functional. However, not all methods are implemented, and for those methods that are implemented, not all switches are implemented.</p>   <p>Testing has been done using both the CLI CVS client, and the Eclipse CVS plugin. Most functionality works fine with both of these clients.</p> </div>   <h2 id=\"_limitations\">Limitations</h2> <div class=\"sectionbody\"> <p>CVS clients cannot tag, branch or perform Git merges.</p>   <p><code>git-cvsserver</code> maps Git branches to CVS modules. This is very different from what most CVS users would expect since in CVS modules usually represent one or more directories.</p> </div>   <h2 id=\"_installation\">Installation</h2> <div class=\"sectionbody\"><div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>If you are going to offer CVS access via pserver, add a line in /etc/inetd.conf like</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"listingblock\"> <div class=\"content\"> <pre>   cvspserver stream tcp nowait nobody git-cvsserver pserver</pre> </div> </div>  <p>Note: Some inetd servers let you specify the name of the executable independently of the value of argv[0] (i.e. the name the program assumes it was executed with). In this case the correct line in /etc/inetd.conf looks like</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>   cvspserver stream tcp nowait nobody /usr/bin/git-cvsserver git-cvsserver pserver</pre> </div> </div>  <p>Only anonymous access is provided by pserve by default. To commit you will have to create pserver accounts, simply add a gitcvs.authdb setting in the config file of the repositories you want the cvsserver to allow writes to, for example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>   [gitcvs]\n        authdb = /etc/cvsserver/passwd</pre> </div> </div>  <p>The format of these files is username followed by the encrypted password, for example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>   myuser:$1Oyx5r9mdGZ2\n   myuser:$1$BA)@$vbnMJMDym7tA32AamXrm./</pre> </div> </div>  <p>You can use the <code>htpasswd</code> facility that comes with Apache to make these files, but Apache’s MD5 crypt method differs from the one used by most C library’s crypt() function, so don’t use the -m option.</p>   <p>Alternatively you can produce the password with perl’s crypt() operator:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>   perl -e 'my ($user, $pass) = @ARGV; printf \"%s:%s\\n\", $user, crypt($user, $pass)' $USER password</pre> </div> </div>  <p>Then provide your password via the pserver method, for example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>   cvs -d:pserver:someuser:somepassword &lt;at&gt; server/path/repo.git co &lt;HEAD_name&gt;</pre> </div> </div>  <p>No special setup is needed for SSH access, other than having Git tools in the PATH. If you have clients that do not accept the CVS_SERVER environment variable, you can rename <code>git-cvsserver</code> to <code>cvs</code>.</p>   <p>Note: Newer CVS versions (&gt;= 1.12.11) also support specifying CVS_SERVER directly in CVSROOT like</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>cvs -d \":ext;CVS_SERVER=git cvsserver:user@server/path/repo.git\" co &lt;HEAD_name&gt;</pre> </div> </div>  <p>This has the advantage that it will be saved in your <code>CVS/Root</code> files and you don’t need to worry about always setting the correct environment variable. SSH users restricted to <code>git-shell</code> don’t need to override the default with CVS_SERVER (and shouldn’t) as <code>git-shell</code> understands <code>cvs</code> to mean <code>git-cvsserver</code> and pretends that the other end runs the real <code>cvs</code> better.</p>  </div> </div> </li> <li> <p>For each repo that you want accessible from CVS you need to edit config in the repo and add the following section.</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"listingblock\"> <div class=\"content\"> <pre>   [gitcvs]\n        enabled=1\n        # optional for debugging\n        logFile=/path/to/logfile</pre> </div> </div>  <p>Note: you need to ensure each user that is going to invoke <code>git-cvsserver</code> has write access to the log file and to the database (see <a href=\"#dbbackend\">Database Backend</a>. If you want to offer write access over SSH, the users of course also need write access to the Git repository itself.</p>   <p>You also need to ensure that each repository is \"bare\" (without a Git index file) for <code>cvs commit</code> to work. See <a href=\"gitcvs-migration\">gitcvs-migration[7]</a>.</p>   <p>All configuration variables can also be overridden for a specific method of access. Valid method names are \"ext\" (for SSH access) and \"pserver\". The following example configuration would disable pserver access while still allowing access over SSH.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>   [gitcvs]\n        enabled=0\n\n   [gitcvs \"ext\"]\n        enabled=1</pre> </div> </div> </div> </div> </li> <li> <p>If you didn’t specify the CVSROOT/CVS_SERVER directly in the checkout command, automatically saving it in your <code>CVS/Root</code> files, then you need to set them explicitly in your environment. CVSROOT should be set as per normal, but the directory should point at the appropriate Git repo. As above, for SSH clients <code>not</code> restricted to <code>git-shell</code>, CVS_SERVER should be set to <code>git-cvsserver</code>.</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"listingblock\"> <div class=\"content\"> <pre>     export CVSROOT=:ext:user@server:/var/git/project.git\n     export CVS_SERVER=\"git cvsserver\"</pre> </div> </div> </div> </div> </li> <li> <p>For SSH clients that will make commits, make sure their server-side .ssh/environment files (or .bashrc, etc., according to their specific shell) export appropriate values for GIT_AUTHOR_NAME, GIT_AUTHOR_EMAIL, GIT_COMMITTER_NAME, and GIT_COMMITTER_EMAIL. For SSH clients whose login shell is bash, .bashrc may be a reasonable alternative.</p> </li> <li> <p>Clients should now be able to check out the project. Use the CVS <code>module</code> name to indicate what Git <code>head</code> you want to check out. This also sets the name of your newly checked-out directory, unless you tell it otherwise with <code>-d &lt;dir_name&gt;</code>. For example, this checks out <code>master</code> branch to the <code>project-master</code> directory:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>     cvs co -d project-master master</pre> </div> </div> </li> </ol> </div></div>   <h2 id=\"dbbackend\">Database backend</h2> <div class=\"sectionbody\"> <p><code>git-cvsserver</code> uses one database per Git head (i.e. CVS module) to store information about the repository to maintain consistent CVS revision numbers. The database needs to be updated (i.e. written to) after every commit.</p>   <p>If the commit is done directly by using <code>git</code> (as opposed to using <code>git-cvsserver</code>) the update will need to happen on the next repository access by <code>git-cvsserver</code>, independent of access method and requested operation.</p>   <p>That means that even if you offer only read access (e.g. by using the pserver method), <code>git-cvsserver</code> should have write access to the database to work reliably (otherwise you need to make sure that the database is up-to-date any time <code>git-cvsserver</code> is executed).</p>   <p>By default it uses SQLite databases in the Git directory, named <code>gitcvs.&lt;module_name&gt;.sqlite</code>. Note that the SQLite backend creates temporary files in the same directory as the database file on write so it might not be enough to grant the users using <code>git-cvsserver</code> write access to the database file without granting them write access to the directory, too.</p>   <p>The database can not be reliably regenerated in a consistent form after the branch it is tracking has changed. Example: For merged branches, <code>git-cvsserver</code> only tracks one branch of development, and after a <code>git merge</code> an incrementally updated database may track a different branch than a database regenerated from scratch, causing inconsistent CVS revision numbers. <code>git-cvsserver</code> has no way of knowing which branch it would have picked if it had been run incrementally pre-merge. So if you have to fully or partially (from old backup) regenerate the database, you should be suspicious of pre-existing CVS sandboxes.</p>   <p>You can configure the database backend with the following configuration variables:</p>  <div class=\"sect2\"> <h3 id=\"_configuring_database_backend\">Configuring database backend</h3>  <p><code>git-cvsserver</code> uses the Perl DBI module. Please also read its documentation if changing these variables, especially about <code>DBI-&gt;connect()</code>.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">gitcvs.dbName</dt> <dd> <p>Database name. The exact meaning depends on the selected database driver, for SQLite this is a filename. Supports variable substitution (see below). May not contain semicolons (<code>;</code>). Default: <code>%Ggitcvs.%m.sqlite</code></p> </dd> <dt class=\"hdlist1\">gitcvs.dbDriver</dt> <dd> <p>Used DBI driver. You can specify any available driver for this here, but it might not work. cvsserver is tested with <code>DBD::SQLite</code>, reported to work with <code>DBD::Pg</code>, and reported <strong>not</strong> to work with <code>DBD::mysql</code>. Please regard this as an experimental feature. May not contain colons (<code>:</code>). Default: <code>SQLite</code></p> </dd> <dt class=\"hdlist1\">gitcvs.dbuser</dt> <dd> <p>Database user. Only useful if setting <code>dbDriver</code>, since SQLite has no concept of database users. Supports variable substitution (see below).</p> </dd> <dt class=\"hdlist1\">gitcvs.dbPass</dt> <dd> <p>Database password. Only useful if setting <code>dbDriver</code>, since SQLite has no concept of database passwords.</p> </dd> <dt class=\"hdlist1\">gitcvs.dbTableNamePrefix</dt> <dd> <p>Database table name prefix. Supports variable substitution (see below). Any non-alphabetic characters will be replaced with underscores.</p> </dd> </dl> </div>  <p>All variables can also be set per access method, see <a href=\"#configaccessmethod\">above</a>.</p>  <div class=\"sect3\"> <h4 id=\"_variable_substitution\">Variable substitution</h4>  <p>In <code>dbDriver</code> and <code>dbUser</code> you can use the following variables:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">%G</dt> <dd> <p>Git directory name</p> </dd> <dt class=\"hdlist1\">%g</dt> <dd> <p>Git directory name, where all characters except for alpha-numeric ones, <code>.</code>, and <code>-</code> are replaced with <code>_</code> (this should make it easier to use the directory name in a filename if wanted)</p> </dd> <dt class=\"hdlist1\">%m</dt> <dd> <p>CVS module/Git head name</p> </dd> <dt class=\"hdlist1\">%a</dt> <dd> <p>access method (one of \"ext\" or \"pserver\")</p> </dd> <dt class=\"hdlist1\">%u</dt> <dd> <p>Name of the user running <code>git-cvsserver</code>. If no name can be determined, the numeric uid is used.</p> </dd> </dl> </div> </div> </div>\n</div>   <h2 id=\"_environment\">Environment</h2> <div class=\"sectionbody\"> <p>These variables obviate the need for command-line options in some circumstances, allowing easier restricted usage through git-shell.</p>   <p>GIT_CVSSERVER_BASE_PATH takes the place of the argument to --base-path.</p>   <p>GIT_CVSSERVER_ROOT specifies a single-directory whitelist. The repository must still be configured to allow access through git-cvsserver, as described above.</p>   <p>When these environment variables are set, the corresponding command-line arguments may not be used.</p> </div>   <h2 id=\"_eclipse_cvs_client_notes\">Eclipse cvs client notes</h2> <div class=\"sectionbody\"> <p>To get a checkout with the Eclipse CVS client:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>Select \"Create a new project → From CVS checkout\"</p> </li> <li> <p>Create a new location. See the notes below for details on how to choose the right protocol.</p> </li> <li> <p>Browse the <code>modules</code> available. It will give you a list of the heads in the repository. You will not be able to browse the tree from there. Only the heads.</p> </li> <li> <p>Pick <code>HEAD</code> when it asks what branch/tag to check out. Untick the \"launch commit wizard\" to avoid committing the .project file.</p> </li> </ol> </div>  <p>Protocol notes: If you are using anonymous access via pserver, just select that. Those using SSH access should choose the <code>ext</code> protocol, and configure <code>ext</code> access on the Preferences→Team→CVS→ExtConnection pane. Set CVS_SERVER to \"<code>git cvsserver</code>\". Note that password support is not good when using <code>ext</code>, you will definitely want to have SSH keys setup.</p>   <p>Alternatively, you can just use the non-standard extssh protocol that Eclipse offer. In that case CVS_SERVER is ignored, and you will have to replace the cvs utility on the server with <code>git-cvsserver</code> or manipulate your <code>.bashrc</code> so that calling <code>cvs</code> effectively calls <code>git-cvsserver</code>.</p> </div>   <h2 id=\"_clients_known_to_work\">Clients known to work</h2> <div class=\"sectionbody\"><div class=\"ulist\"> <ul> <li> <p>CVS 1.12.9 on Debian</p> </li> <li> <p>CVS 1.11.17 on MacOSX (from Fink package)</p> </li> <li> <p>Eclipse 3.0, 3.1.2 on MacOSX (see Eclipse CVS Client Notes)</p> </li> <li> <p>TortoiseCVS</p> </li> </ul> </div></div>   <h2 id=\"_operations_supported\">Operations supported</h2> <div class=\"sectionbody\"> <p>All the operations required for normal use are supported, including checkout, diff, status, update, log, add, remove, commit.</p>   <p>Most CVS command arguments that read CVS tags or revision numbers (typically -r) work, and also support any git refspec (tag, branch, commit ID, etc). However, CVS revision numbers for non-default branches are not well emulated, and cvs log does not show tags or branches at all. (Non-main-branch CVS revision numbers superficially resemble CVS revision numbers, but they actually encode a git commit ID directly, rather than represent the number of revisions since the branch point.)</p>   <p>Note that there are two ways to checkout a particular branch. As described elsewhere on this page, the \"module\" parameter of cvs checkout is interpreted as a branch name, and it becomes the main branch. It remains the main branch for a given sandbox even if you temporarily make another branch sticky with cvs update -r. Alternatively, the -r argument can indicate some other branch to actually checkout, even though the module is still the \"main\" branch. Tradeoffs (as currently implemented): Each new \"module\" creates a new database on disk with a history for the given module, and after the database is created, operations against that main branch are fast. Or alternatively, -r doesn’t take any extra disk space, but may be significantly slower for many operations, like cvs update.</p>   <p>If you want to refer to a git refspec that has characters that are not allowed by CVS, you have two options. First, it may just work to supply the git refspec directly to the appropriate CVS -r argument; some CVS clients don’t seem to do much sanity checking of the argument. Second, if that fails, you can use a special character escape mechanism that only uses characters that are valid in CVS tags. A sequence of 4 or 5 characters of the form (underscore (<code>\"_\"</code>), dash (<code>\"-\"</code>), one or two characters, and dash (<code>\"-\"</code>)) can encode various characters based on the one or two letters: <code>\"s\"</code> for slash (<code>\"/\"</code>), <code>\"p\"</code> for period (<code>\".\"</code>), <code>\"u\"</code> for underscore (<code>\"_\"</code>), or two hexadecimal digits for any byte value at all (typically an ASCII number, or perhaps a part of a UTF-8 encoded character).</p>   <p>Legacy monitoring operations are not supported (edit, watch and related). Exports and tagging (tags and branches) are not supported at this stage.</p>  <div class=\"sect2\"> <h3 id=\"_crlf_line_ending_conversions\">CRLF Line Ending Conversions</h3>  <p>By default the server leaves the <code>-k</code> mode blank for all files, which causes the CVS client to treat them as a text files, subject to end-of-line conversion on some platforms.</p>   <p>You can make the server use the end-of-line conversion attributes to set the <code>-k</code> modes for files by setting the <code>gitcvs.usecrlfattr</code> config variable. See <a href=\"gitattributes\">gitattributes[5]</a> for more information about end-of-line conversion.</p>   <p>Alternatively, if <code>gitcvs.usecrlfattr</code> config is not enabled or the attributes do not allow automatic detection for a filename, then the server uses the <code>gitcvs.allBinary</code> config for the default setting. If <code>gitcvs.allBinary</code> is set, then file not otherwise specified will default to <code>-kb</code> mode. Otherwise the <code>-k</code> mode is left blank. But if <code>gitcvs.allBinary</code> is set to \"guess\", then the correct <code>-k</code> mode will be guessed based on the contents of the file.</p>   <p>For best consistency with <code>cvs</code>, it is probably best to override the defaults by setting <code>gitcvs.usecrlfattr</code> to true, and <code>gitcvs.allBinary</code> to \"guess\".</p>  </div>\n</div>   <h2 id=\"_dependencies\">Dependencies</h2> <div class=\"sectionbody\"> <p><code>git-cvsserver</code> depends on DBD::SQLite.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-cvsserver\" class=\"_attribution-link\">https://git-scm.com/docs/git-cvsserver</a>\n  </p>\n</div>\n","gitk":"<h1>gitk</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>gitk - The Git repository browser</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">gitk [&lt;options&gt;] [&lt;revision range&gt;] [\\--] [&lt;path&gt;…​]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Displays changes in a repository or a selected set of commits. This includes visualizing the commit graph, showing information related to each commit, and the files in the trees of each revision.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"> <p>To control which revisions to show, gitk supports most options applicable to the <code>git rev-list</code> command. It also supports a few options applicable to the <code>git diff-*</code> commands to control how the changes each commit introduces are shown. Finally, it supports some gitk-specific options.</p>   <p>gitk generally only understands options with arguments in the <code>sticked</code> form (see <a href=\"gitcli\">gitcli[7]</a>) due to limitations in the command-line parser.</p>  <div class=\"sect2\"> <h3 id=\"_rev_list_options_and_arguments\">rev-list options and arguments</h3>  <p>This manual page describes only the most frequently used options. See <a href=\"git-rev-list\">git-rev-list[1]</a> for a complete list.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--all</dt> <dd> <p>Show all refs (branches, tags, etc.).</p> </dd> <dt class=\"hdlist1\">--branches[=&lt;pattern&gt;]</dt> <dt class=\"hdlist1\">--tags[=&lt;pattern&gt;]</dt> <dt class=\"hdlist1\">--remotes[=&lt;pattern&gt;]</dt> <dd> <p>Pretend as if all the branches (tags, remote branches, resp.) are listed on the command line as <code>&lt;commit&gt;</code>. If <code>&lt;pattern&gt;</code> is given, limit refs to ones matching given shell glob. If pattern lacks <code>?</code>, <code>*</code>, or <code>[</code>, <code>/*</code> at the end is implied.</p> </dd> <dt class=\"hdlist1\">--since=&lt;date&gt;</dt> <dd> <p>Show commits more recent than a specific date.</p> </dd> <dt class=\"hdlist1\">--until=&lt;date&gt;</dt> <dd> <p>Show commits older than a specific date.</p> </dd> <dt class=\"hdlist1\">--date-order</dt> <dd> <p>Sort commits by date when possible.</p> </dd> <dt class=\"hdlist1\">--merge</dt> <dd> <p>After an attempt to merge stops with conflicts, show the commits on the history between two branches (i.e. the HEAD and the MERGE_HEAD) that modify the conflicted files and do not exist on all the heads being merged.</p> </dd> <dt class=\"hdlist1\">--left-right</dt> <dd> <p>Mark which side of a symmetric diff a commit is reachable from. Commits from the left side are prefixed with a <code>&lt;</code> symbol and those from the right with a <code>&gt;</code> symbol.</p> </dd> <dt class=\"hdlist1\">--full-history</dt> <dd> <p>When filtering history with <code>&lt;path&gt;…​</code>, does not prune some history. (See \"History simplification\" in <a href=\"git-log\">git-log[1]</a> for a more detailed explanation.)</p> </dd> <dt class=\"hdlist1\">--simplify-merges</dt> <dd> <p>Additional option to <code>--full-history</code> to remove some needless merges from the resulting history, as there are no selected commits contributing to this merge. (See \"History simplification\" in <a href=\"git-log\">git-log[1]</a> for a more detailed explanation.)</p> </dd> <dt class=\"hdlist1\">--ancestry-path</dt> <dd> <p>When given a range of commits to display (e.g. <code>commit1..commit2</code> or <code>commit2 ^commit1</code>), only display commits that exist directly on the ancestry chain between the <code>commit1</code> and <code>commit2</code>, i.e. commits that are both descendants of <code>commit1</code>, and ancestors of <code>commit2</code>. (See \"History simplification\" in <a href=\"git-log\">git-log[1]</a> for a more detailed explanation.)</p> </dd> <dt class=\"hdlist1\">-L&lt;start&gt;,&lt;end&gt;:&lt;file&gt;</dt> <dt class=\"hdlist1\">-L:&lt;funcname&gt;:&lt;file&gt;</dt> <dd> <p>Trace the evolution of the line range given by \"&lt;start&gt;,&lt;end&gt;\" (or the function name regex &lt;funcname&gt;) within the &lt;file&gt;. You may not give any pathspec limiters. This is currently limited to a walk starting from a single revision, i.e., you may only give zero or one positive revision arguments. You can specify this option more than once.</p>  <p><strong>Note:</strong> gitk (unlike <a href=\"git-log\">git-log[1]</a>) currently only understands this option if you specify it \"glued together\" with its argument. Do <strong>not</strong> put a space after <code>-L</code>.</p>   <p>&lt;start&gt; and &lt;end&gt; can take one of these forms:</p>  <div class=\"ulist\"> <ul> <li> <p>number</p>  <p>If &lt;start&gt; or &lt;end&gt; is a number, it specifies an absolute line number (lines count from 1).</p>  </li> <li> <p>/regex/</p>  <p>This form will use the first line matching the given POSIX regex. If &lt;start&gt; is a regex, it will search from the end of the previous <code>-L</code> range, if any, otherwise from the start of file. If &lt;start&gt; is “^/regex/”, it will search from the start of file. If &lt;end&gt; is a regex, it will search starting at the line given by &lt;start&gt;.</p>  </li> <li> <p>+offset or -offset</p>  <p>This is only valid for &lt;end&gt; and will specify a number of lines before or after the line given by &lt;start&gt;.</p>  </li> </ul> </div>  <p>If “:&lt;funcname&gt;” is given in place of &lt;start&gt; and &lt;end&gt;, it is a regular expression that denotes the range from the first funcname line that matches &lt;funcname&gt;, up to the next funcname line. “:&lt;funcname&gt;” searches from the end of the previous <code>-L</code> range, if any, otherwise from the start of file. “^:&lt;funcname&gt;” searches from the start of file.</p>  </dd> </dl> </div> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">&lt;revision range&gt;</dt> <dd> <p>Limit the revisions to show. This can be either a single revision meaning show from the given revision and back, or it can be a range in the form \"<code>&lt;from&gt;</code>..<code>&lt;to&gt;</code>\" to show all revisions between <code>&lt;from&gt;</code> and back to <code>&lt;to&gt;</code>. Note, more advanced revision selection can be applied. For a more complete list of ways to spell object names, see <a href=\"gitrevisions\">gitrevisions[7]</a>.</p> </dd> <dt class=\"hdlist1\">&lt;path&gt;…​</dt> <dd> <p>Limit commits to the ones touching files in the given paths. Note, to avoid ambiguity with respect to revision names use \"--\" to separate the paths from any preceding options.</p> </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_gitk_specific_options\">gitk-specific options</h3> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--argscmd=&lt;command&gt;</dt> <dd> <p>Command to be run each time gitk has to determine the revision range to show. The command is expected to print on its standard output a list of additional revisions to be shown, one per line. Use this instead of explicitly specifying a <code>&lt;revision range&gt;</code> if the set of commits to show may vary between refreshes.</p> </dd> <dt class=\"hdlist1\">--select-commit=&lt;ref&gt;</dt> <dd> <p>Select the specified commit after loading the graph. Default behavior is equivalent to specifying <code>--select-commit=HEAD</code>.</p> </dd> </dl> </div> </div>\n</div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">gitk v2.6.12.. include/scsi drivers/scsi</dt> <dd> <p>Show the changes since version <code>v2.6.12</code> that changed any file in the include/scsi or drivers/scsi subdirectories</p> </dd> <dt class=\"hdlist1\">gitk --since=\"2 weeks ago\" -- gitk</dt> <dd> <p>Show the changes during the last two weeks to the file <code>gitk</code>. The \"--\" is necessary to avoid confusion with the <strong>branch</strong> named <code>gitk</code></p> </dd> <dt class=\"hdlist1\">gitk --max-count=100 --all -- Makefile</dt> <dd> <p>Show at most 100 changes made to the file <code>Makefile</code>. Instead of only looking for changes in the current branch look in all branches.</p> </dd> </dl> </div></div>   <h2 id=\"_files\">Files</h2> <div class=\"sectionbody\"> <p>User configuration and preferences are stored at:</p>  <div class=\"ulist\"> <ul> <li> <p><code>$XDG_CONFIG_HOME/git/gitk</code> if it exists, otherwise</p> </li> <li> <p><code>$HOME/.gitk</code> if it exists</p> </li> </ul> </div>  <p>If neither of the above exist then <code>$XDG_CONFIG_HOME/git/gitk</code> is created and used by default. If <code>$XDG_CONFIG_HOME</code> is not set it defaults to <code>$HOME/.config</code> in all cases.</p> </div>   <h2 id=\"_history\">History</h2> <div class=\"sectionbody\"> <p>Gitk was the first graphical repository browser. It’s written in tcl/tk and started off in a separate repository but was later merged into the main Git repository.</p> </div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><em>qgit(1)</em></dt> <dd> <p>A repository browser written in C++ using Qt.</p> </dd> <dt class=\"hdlist1\"><em>gitview(1)</em></dt> <dd> <p>A repository browser written in Python using Gtk. It’s based on <code>bzrk(1)</code> and distributed in the contrib area of the Git repository.</p> </dd> <dt class=\"hdlist1\"><em>tig(1)</em></dt> <dd> <p>A minimal repository browser and Git tool output highlighter written in C using Ncurses.</p> </dd> </dl> </div></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/gitk\" class=\"_attribution-link\">https://git-scm.com/docs/gitk</a>\n  </p>\n</div>\n","git-mailinfo":"<h1>git-mailinfo</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-mailinfo - Extracts patch and authorship from a single e-mail message</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git mailinfo [-k|-b] [-u | --encoding=&lt;encoding&gt; | -n] [--[no-]scissors] &lt;msg&gt; &lt;patch&gt;</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Reads a single e-mail message from the standard input, and writes the commit log message in &lt;msg&gt; file, and the patches in &lt;patch&gt; file. The author name, e-mail and e-mail subject are written out to the standard output to be used by <code>git am</code> to create a commit. It is usually not necessary to use this command directly. See <a href=\"git-am\">git-am[1]</a> instead.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-k</dt> <dd> <p>Usually the program removes email cruft from the Subject: header line to extract the title line for the commit log message. This option prevents this munging, and is most useful when used to read back <code>git format-patch -k</code> output.</p>  <p>Specifically, the following are removed until none of them remain:</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"ulist\"> <ul> <li> <p>Leading and trailing whitespace.</p> </li> <li> <p>Leading <code>Re:</code>, <code>re:</code>, and <code>:</code>.</p> </li> <li> <p>Leading bracketed strings (between <code>[</code> and <code>]</code>, usually <code>[PATCH]</code>).</p> </li> </ul> </div> </div> </div>  <p>Finally, runs of whitespace are normalized to a single ASCII space character.</p>  </dd> <dt class=\"hdlist1\">-b</dt> <dd> <p>When -k is not in effect, all leading strings bracketed with <code>[</code> and <code>]</code> pairs are stripped. This option limits the stripping to only the pairs whose bracketed string contains the word \"PATCH\".</p> </dd> <dt class=\"hdlist1\">-u</dt> <dd> <p>The commit log message, author name and author email are taken from the e-mail, and after minimally decoding MIME transfer encoding, re-coded in the charset specified by i18n.commitencoding (defaulting to UTF-8) by transliterating them. This used to be optional but now it is the default.</p>  <p>Note that the patch is always used as-is without charset conversion, even with this flag.</p>  </dd> <dt class=\"hdlist1\">--encoding=&lt;encoding&gt;</dt> <dd> <p>Similar to -u. But when re-coding, the charset specified here is used instead of the one specified by i18n.commitencoding or UTF-8.</p> </dd> <dt class=\"hdlist1\">-n</dt> <dd> <p>Disable all charset re-coding of the metadata.</p> </dd> <dt class=\"hdlist1\">-m</dt> <dt class=\"hdlist1\">--message-id</dt> <dd> <p>Copy the Message-ID header at the end of the commit message. This is useful in order to associate commits with mailing list discussions.</p> </dd> <dt class=\"hdlist1\">--scissors</dt> <dd> <p>Remove everything in body before a scissors line. A line that mainly consists of scissors (either \"&gt;8\" or \"8&lt;\") and perforation (dash \"-\") marks is called a scissors line, and is used to request the reader to cut the message at that line. If such a line appears in the body of the message before the patch, everything before it (including the scissors line itself) is ignored when this option is used.</p>  <p>This is useful if you want to begin your message in a discussion thread with comments and suggestions on the message you are responding to, and to conclude it with a patch submission, separating the discussion and the beginning of the proposed commit log message with a scissors line.</p>   <p>This can be enabled by default with the configuration option mailinfo.scissors.</p>  </dd> <dt class=\"hdlist1\">--no-scissors</dt> <dd> <p>Ignore scissors lines. Useful for overriding mailinfo.scissors settings.</p> </dd> <dt class=\"hdlist1\">&lt;msg&gt;</dt> <dd> <p>The commit log message extracted from e-mail, usually except the title line which comes from e-mail Subject.</p> </dd> <dt class=\"hdlist1\">&lt;patch&gt;</dt> <dd> <p>The patch extracted from e-mail.</p> </dd> </dl> </div></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-mailinfo\" class=\"_attribution-link\">https://git-scm.com/docs/git-mailinfo</a>\n  </p>\n</div>\n","git-imap-send":"<h1>git-imap-send</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-imap-send - Send a collection of patches from stdin to an IMAP folder</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git imap-send [-v] [-q] [--[no-]curl]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>This command uploads a mailbox generated with <code>git format-patch</code> into an IMAP drafts folder. This allows patches to be sent as other email is when using mail clients that cannot read mailbox files directly. The command also works with any general mailbox in which emails have the fields \"From\", \"Date\", and \"Subject\" in that order.</p>   <p>Typical usage is something like:</p>   <p>git format-patch --signoff --stdout --attach origin | git imap-send</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-v</dt> <dt class=\"hdlist1\">--verbose</dt> <dd> <p>Be verbose.</p> </dd> <dt class=\"hdlist1\">-q</dt> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>Be quiet.</p> </dd> <dt class=\"hdlist1\">--curl</dt> <dd> <p>Use libcurl to communicate with the IMAP server, unless tunneling into it. Ignored if Git was built without the USE_CURL_FOR_IMAP_SEND option set.</p> </dd> <dt class=\"hdlist1\">--no-curl</dt> <dd> <p>Talk to the IMAP server using git’s own IMAP routines instead of using libcurl. Ignored if Git was built with the NO_OPENSSL option set.</p> </dd> </dl> </div></div>   <h2 id=\"_configuration\">Configuration</h2> <div class=\"sectionbody\"> <p>To use the tool, imap.folder and either imap.tunnel or imap.host must be set to appropriate values.</p>  <div class=\"sect2\"> <h3 id=\"_variables\">Variables</h3> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">imap.folder</dt> <dd> <p>The folder to drop the mails into, which is typically the Drafts folder. For example: \"INBOX.Drafts\", \"INBOX/Drafts\" or \"[Gmail]/Drafts\". Required.</p> </dd> <dt class=\"hdlist1\">imap.tunnel</dt> <dd> <p>Command used to setup a tunnel to the IMAP server through which commands will be piped instead of using a direct network connection to the server. Required when imap.host is not set.</p> </dd> <dt class=\"hdlist1\">imap.host</dt> <dd> <p>A URL identifying the server. Use a <code>imap://</code> prefix for non-secure connections and a <code>imaps://</code> prefix for secure connections. Ignored when imap.tunnel is set, but required otherwise.</p> </dd> <dt class=\"hdlist1\">imap.user</dt> <dd> <p>The username to use when logging in to the server.</p> </dd> <dt class=\"hdlist1\">imap.pass</dt> <dd> <p>The password to use when logging in to the server.</p> </dd> <dt class=\"hdlist1\">imap.port</dt> <dd> <p>An integer port number to connect to on the server. Defaults to 143 for imap:// hosts and 993 for imaps:// hosts. Ignored when imap.tunnel is set.</p> </dd> <dt class=\"hdlist1\">imap.sslverify</dt> <dd> <p>A boolean to enable/disable verification of the server certificate used by the SSL/TLS connection. Default is <code>true</code>. Ignored when imap.tunnel is set.</p> </dd> <dt class=\"hdlist1\">imap.preformattedHTML</dt> <dd> <p>A boolean to enable/disable the use of html encoding when sending a patch. An html encoded patch will be bracketed with &lt;pre&gt; and have a content type of text/html. Ironically, enabling this option causes Thunderbird to send the patch as a plain/text, format=fixed email. Default is <code>false</code>.</p> </dd> <dt class=\"hdlist1\">imap.authMethod</dt> <dd> <p>Specify authenticate method for authentication with IMAP server. If Git was built with the NO_CURL option, or if your curl version is older than 7.34.0, or if you’re running git-imap-send with the <code>--no-curl</code> option, the only supported method is <code>CRAM-MD5</code>. If this is not set then <code>git imap-send</code> uses the basic IMAP plaintext LOGIN command.</p> </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_examples\">Examples</h3>  <p>Using tunnel mode:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>[imap]\n    folder = \"INBOX.Drafts\"\n    tunnel = \"ssh -q -C user@example.com /usr/bin/imapd ./Maildir 2&gt; /dev/null\"</pre> </div> </div>  <p>Using direct mode:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>[imap]\n    folder = \"INBOX.Drafts\"\n    host = imap://imap.example.com\n    user = bob\n    pass = p4ssw0rd</pre> </div> </div>  <p>Using direct mode with SSL:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>[imap]\n    folder = \"INBOX.Drafts\"\n    host = imaps://imap.example.com\n    user = bob\n    pass = p4ssw0rd\n    port = 123\n    sslverify = false</pre> </div> </div> </div>\n</div>   <h2 id=\"_example\">Example</h2> <div class=\"sectionbody\"> <p>To submit patches using GMail’s IMAP interface, first, edit your ~/.gitconfig to specify your account settings:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>[imap]\n        folder = \"[Gmail]/Drafts\"\n        host = imaps://imap.gmail.com\n        user = user@gmail.com\n        port = 993\n        sslverify = false</pre> </div> </div>  <p>You might need to instead use: folder = \"[Google Mail]/Drafts\" if you get an error that the \"Folder doesn’t exist\".</p>   <p>Once the commits are ready to be sent, run the following command:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>$ git format-patch --cover-letter -M --stdout origin/master | git imap-send</pre> </div> </div>  <p>Just make sure to disable line wrapping in the email client (GMail’s web interface will wrap lines no matter what, so you need to use a real IMAP client).</p> </div>   <h2 id=\"_caution\">Caution</h2> <div class=\"sectionbody\"> <p>It is still your responsibility to make sure that the email message sent by your email program meets the standards of your project. Many projects do not like patches to be attached. Some mail agents will transform patches (e.g. wrap lines, send them as format=flowed) in ways that make them fail. You will get angry flames ridiculing you if you don’t check this.</p>   <p>Thunderbird in particular is known to be problematic. Thunderbird users may wish to visit this web page for more information: <a href=\"http://kb.mozillazine.org/Plain_text_e-mail_-_Thunderbird#Completely_plain_email\" class=\"bare\">http://kb.mozillazine.org/Plain_text_e-mail_-_Thunderbird#Completely_plain_email</a></p> </div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-format-patch\">git-format-patch[1]</a>, <a href=\"git-send-email\">git-send-email[1]</a>, mbox(5)</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-imap-send\" class=\"_attribution-link\">https://git-scm.com/docs/git-imap-send</a>\n  </p>\n</div>\n","git-gui":"<h1>git-gui</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-gui - A portable graphical interface to Git</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git gui [&lt;command&gt;] [arguments]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>A Tcl/Tk based graphical user interface to Git. <code>git gui</code> focuses on allowing users to make changes to their repository by making new commits, amending existing ones, creating branches, performing local merges, and fetching/pushing to remote repositories.</p>   <p>Unlike <code>gitk</code>, <code>git gui</code> focuses on commit generation and single file annotation and does not show project history. It does however supply menu actions to start a <code>gitk</code> session from within <code>git gui</code>.</p>   <p><code>git gui</code> is known to work on all popular UNIX systems, Mac OS X, and Windows (under both Cygwin and MSYS). To the extent possible OS specific user interface guidelines are followed, making <code>git gui</code> a fairly native interface for users.</p> </div>   <h2 id=\"_commands\">Commands</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">blame</dt> <dd> <p>Start a blame viewer on the specified file on the given version (or working directory if not specified).</p> </dd> <dt class=\"hdlist1\">browser</dt> <dd> <p>Start a tree browser showing all files in the specified commit (or <code>HEAD</code> by default). Files selected through the browser are opened in the blame viewer.</p> </dd> <dt class=\"hdlist1\">citool</dt> <dd> <p>Start <code>git gui</code> and arrange to make exactly one commit before exiting and returning to the shell. The interface is limited to only commit actions, slightly reducing the application’s startup time and simplifying the menubar.</p> </dd> <dt class=\"hdlist1\">version</dt> <dd> <p>Display the currently running version of <code>git gui</code>.</p> </dd> </dl> </div></div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>git gui blame Makefile</code></dt> <dd> <p>Show the contents of the file <code>Makefile</code> in the current working directory, and provide annotations for both the original author of each line, and who moved the line to its current location. The uncommitted file is annotated, and uncommitted changes (if any) are explicitly attributed to <code>Not Yet Committed</code>.</p> </dd> <dt class=\"hdlist1\"><code>git gui blame v0.99.8 Makefile</code></dt> <dd> <p>Show the contents of <code>Makefile</code> in revision <code>v0.99.8</code> and provide annotations for each line. Unlike the above example the file is read from the object database and not the working directory.</p> </dd> <dt class=\"hdlist1\"><code>git gui blame --line=100 Makefile</code></dt> <dd> <p>Loads annotations as described above and automatically scrolls the view to center on line <code>100</code>.</p> </dd> <dt class=\"hdlist1\"><code>git gui citool</code></dt> <dd> <p>Make one commit and return to the shell when it is complete. This command returns a non-zero exit code if the window was closed in any way other than by making a commit.</p> </dd> <dt class=\"hdlist1\"><code>git gui citool --amend</code></dt> <dd> <p>Automatically enter the <code>Amend Last Commit</code> mode of the interface.</p> </dd> <dt class=\"hdlist1\"><code>git gui citool --nocommit</code></dt> <dd> <p>Behave as normal citool, but instead of making a commit simply terminate with a zero exit code. It still checks that the index does not contain any unmerged entries, so you can use it as a GUI version of <a href=\"git-mergetool\">git-mergetool[1]</a></p> </dd> <dt class=\"hdlist1\"><code>git citool</code></dt> <dd> <p>Same as <code>git gui citool</code> (above).</p> </dd> <dt class=\"hdlist1\"><code>git gui browser maint</code></dt> <dd> <p>Show a browser for the tree of the <code>maint</code> branch. Files selected in the browser can be viewed with the internal blame viewer.</p> </dd> </dl> </div></div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><a href=\"gitk\">gitk[1]</a></dt> <dd> <p>The Git repository browser. Shows branches, commit history and file differences. gitk is the utility started by <code>git gui</code>'s Repository Visualize actions.</p> </dd> </dl> </div></div>   <h2 id=\"_other\">Other</h2> <div class=\"sectionbody\"> <p><code>git gui</code> is actually maintained as an independent project, but stable versions are distributed as part of the Git suite for the convenience of end users.</p>   <p>A <code>git gui</code> development repository can be obtained from:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>git clone git://repo.or.cz/git-gui.git</pre> </div> </div>  <p>or</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>git clone http://repo.or.cz/r/git-gui.git</pre> </div> </div>  <p>or browsed online at <a href=\"http://repo.or.cz/w/git-gui.git/\" class=\"bare\">http://repo.or.cz/w/git-gui.git/</a>.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-gui\" class=\"_attribution-link\">https://git-scm.com/docs/git-gui</a>\n  </p>\n</div>\n","git-pack-objects":"<h1>git-pack-objects</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-pack-objects - Create a packed archive of objects</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git pack-objects [-q | --progress | --all-progress] [--all-progress-implied]\n        [--no-reuse-delta] [--delta-base-offset] [--non-empty]\n        [--local] [--incremental] [--window=&lt;n&gt;] [--depth=&lt;n&gt;]\n        [--revs [--unpacked | --all]] [--stdout | base-name]\n        [--shallow] [--keep-true-parents] &lt; object-list</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Reads list of objects from the standard input, and writes a packed archive with specified base-name, or to the standard output.</p>   <p>A packed archive is an efficient way to transfer a set of objects between two repositories as well as an access efficient archival format. In a packed archive, an object is either stored as a compressed whole or as a difference from some other object. The latter is often called a delta.</p>   <p>The packed archive format (.pack) is designed to be self-contained so that it can be unpacked without any further information. Therefore, each object that a delta depends upon must be present within the pack.</p>   <p>A pack index file (.idx) is generated for fast, random access to the objects in the pack. Placing both the index file (.idx) and the packed archive (.pack) in the pack/ subdirectory of $GIT_OBJECT_DIRECTORY (or any of the directories on $GIT_ALTERNATE_OBJECT_DIRECTORIES) enables Git to read from the pack archive.</p>   <p>The <code>git unpack-objects</code> command can read the packed archive and expand the objects contained in the pack into \"one-file one-object\" format; this is typically done by the smart-pull commands when a pack is created on-the-fly for efficient network transport by their peers.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">base-name</dt> <dd> <p>Write into a pair of files (.pack and .idx), using &lt;base-name&gt; to determine the name of the created file. When this option is used, the two files are written in &lt;base-name&gt;-&lt;SHA-1&gt;.{pack,idx} files. &lt;SHA-1&gt; is a hash based on the pack content and is written to the standard output of the command.</p> </dd> <dt class=\"hdlist1\">--stdout</dt> <dd> <p>Write the pack contents (what would have been written to .pack file) out to the standard output.</p> </dd> <dt class=\"hdlist1\">--revs</dt> <dd> <p>Read the revision arguments from the standard input, instead of individual object names. The revision arguments are processed the same way as <code>git rev-list</code> with the <code>--objects</code> flag uses its <code>commit</code> arguments to build the list of objects it outputs. The objects on the resulting list are packed. Besides revisions, <code>--not</code> or <code>--shallow &lt;SHA-1&gt;</code> lines are also accepted.</p> </dd> <dt class=\"hdlist1\">--unpacked</dt> <dd> <p>This implies <code>--revs</code>. When processing the list of revision arguments read from the standard input, limit the objects packed to those that are not already packed.</p> </dd> <dt class=\"hdlist1\">--all</dt> <dd> <p>This implies <code>--revs</code>. In addition to the list of revision arguments read from the standard input, pretend as if all refs under <code>refs/</code> are specified to be included.</p> </dd> <dt class=\"hdlist1\">--include-tag</dt> <dd> <p>Include unasked-for annotated tags if the object they reference was included in the resulting packfile. This can be useful to send new tags to native Git clients.</p> </dd> <dt class=\"hdlist1\">--window=&lt;n&gt;</dt> <dt class=\"hdlist1\">--depth=&lt;n&gt;</dt> <dd> <p>These two options affect how the objects contained in the pack are stored using delta compression. The objects are first internally sorted by type, size and optionally names and compared against the other objects within --window to see if using delta compression saves space. --depth limits the maximum delta depth; making it too deep affects the performance on the unpacker side, because delta data needs to be applied that many times to get to the necessary object. The default value for --window is 10 and --depth is 50.</p> </dd> <dt class=\"hdlist1\">--window-memory=&lt;n&gt;</dt> <dd> <p>This option provides an additional limit on top of <code>--window</code>; the window size will dynamically scale down so as to not take up more than <code>&lt;n&gt;</code> bytes in memory. This is useful in repositories with a mix of large and small objects to not run out of memory with a large window, but still be able to take advantage of the large window for the smaller objects. The size can be suffixed with \"k\", \"m\", or \"g\". <code>--window-memory=0</code> makes memory usage unlimited, which is the default.</p> </dd> <dt class=\"hdlist1\">--max-pack-size=&lt;n&gt;</dt> <dd> <p>Maximum size of each output pack file. The size can be suffixed with \"k\", \"m\", or \"g\". The minimum size allowed is limited to 1 MiB. If specified, multiple packfiles may be created, which also prevents the creation of a bitmap index. The default is unlimited, unless the config variable <code>pack.packSizeLimit</code> is set.</p> </dd> <dt class=\"hdlist1\">--honor-pack-keep</dt> <dd> <p>This flag causes an object already in a local pack that has a .keep file to be ignored, even if it would have otherwise been packed.</p> </dd> <dt class=\"hdlist1\">--incremental</dt> <dd> <p>This flag causes an object already in a pack to be ignored even if it would have otherwise been packed.</p> </dd> <dt class=\"hdlist1\">--local</dt> <dd> <p>This flag causes an object that is borrowed from an alternate object store to be ignored even if it would have otherwise been packed.</p> </dd> <dt class=\"hdlist1\">--non-empty</dt> <dd> <p>Only create a packed archive if it would contain at least one object.</p> </dd> <dt class=\"hdlist1\">--progress</dt> <dd> <p>Progress status is reported on the standard error stream by default when it is attached to a terminal, unless -q is specified. This flag forces progress status even if the standard error stream is not directed to a terminal.</p> </dd> <dt class=\"hdlist1\">--all-progress</dt> <dd> <p>When --stdout is specified then progress report is displayed during the object count and compression phases but inhibited during the write-out phase. The reason is that in some cases the output stream is directly linked to another command which may wish to display progress status of its own as it processes incoming pack data. This flag is like --progress except that it forces progress report for the write-out phase as well even if --stdout is used.</p> </dd> <dt class=\"hdlist1\">--all-progress-implied</dt> <dd> <p>This is used to imply --all-progress whenever progress display is activated. Unlike --all-progress this flag doesn’t actually force any progress display by itself.</p> </dd> <dt class=\"hdlist1\">-q</dt> <dd> <p>This flag makes the command not to report its progress on the standard error stream.</p> </dd> <dt class=\"hdlist1\">--no-reuse-delta</dt> <dd> <p>When creating a packed archive in a repository that has existing packs, the command reuses existing deltas. This sometimes results in a slightly suboptimal pack. This flag tells the command not to reuse existing deltas but compute them from scratch.</p> </dd> <dt class=\"hdlist1\">--no-reuse-object</dt> <dd> <p>This flag tells the command not to reuse existing object data at all, including non deltified object, forcing recompression of everything. This implies --no-reuse-delta. Useful only in the obscure case where wholesale enforcement of a different compression level on the packed data is desired.</p> </dd> <dt class=\"hdlist1\">--compression=&lt;n&gt;</dt> <dd> <p>Specifies compression level for newly-compressed data in the generated pack. If not specified, pack compression level is determined first by pack.compression, then by core.compression, and defaults to -1, the zlib default, if neither is set. Add --no-reuse-object if you want to force a uniform compression level on all data no matter the source.</p> </dd> <dt class=\"hdlist1\">--thin</dt> <dd> <p>Create a \"thin\" pack by omitting the common objects between a sender and a receiver in order to reduce network transfer. This option only makes sense in conjunction with --stdout.</p>  <p>Note: A thin pack violates the packed archive format by omitting required objects and is thus unusable by Git without making it self-contained. Use <code>git index-pack --fix-thin</code> (see <a href=\"git-index-pack\">git-index-pack[1]</a>) to restore the self-contained property.</p>  </dd> <dt class=\"hdlist1\">--shallow</dt> <dd> <p>Optimize a pack that will be provided to a client with a shallow repository. This option, combined with --thin, can result in a smaller pack at the cost of speed.</p> </dd> <dt class=\"hdlist1\">--delta-base-offset</dt> <dd> <p>A packed archive can express the base object of a delta as either a 20-byte object name or as an offset in the stream, but ancient versions of Git don’t understand the latter. By default, <code>git pack-objects</code> only uses the former format for better compatibility. This option allows the command to use the latter format for compactness. Depending on the average delta chain length, this option typically shrinks the resulting packfile by 3-5 per-cent.</p>  <p>Note: Porcelain commands such as <code>git gc</code> (see <a href=\"git-gc\">git-gc[1]</a>), <code>git repack</code> (see <a href=\"git-repack\">git-repack[1]</a>) pass this option by default in modern Git when they put objects in your repository into pack files. So does <code>git bundle</code> (see <a href=\"git-bundle\">git-bundle[1]</a>) when it creates a bundle.</p>  </dd> <dt class=\"hdlist1\">--threads=&lt;n&gt;</dt> <dd> <p>Specifies the number of threads to spawn when searching for best delta matches. This requires that pack-objects be compiled with pthreads otherwise this option is ignored with a warning. This is meant to reduce packing time on multiprocessor machines. The required amount of memory for the delta search window is however multiplied by the number of threads. Specifying 0 will cause Git to auto-detect the number of CPU’s and set the number of threads accordingly.</p> </dd> <dt class=\"hdlist1\">--index-version=&lt;version&gt;[,&lt;offset&gt;]</dt> <dd> <p>This is intended to be used by the test suite only. It allows to force the version for the generated pack index, and to force 64-bit index entries on objects located above the given offset.</p> </dd> <dt class=\"hdlist1\">--keep-true-parents</dt> <dd> <p>With this option, parents that are hidden by grafts are packed nevertheless.</p> </dd> </dl> </div></div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-rev-list\">git-rev-list[1]</a> <a href=\"git-repack\">git-repack[1]</a> <a href=\"git-prune-packed\">git-prune-packed[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-pack-objects\" class=\"_attribution-link\">https://git-scm.com/docs/git-pack-objects</a>\n  </p>\n</div>\n","git-repack":"<h1>git-repack</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-repack - Pack unpacked objects in a repository</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git repack [-a] [-A] [-d] [-f] [-F] [-l] [-n] [-q] [-b] [--window=&lt;n&gt;] [--depth=&lt;n&gt;]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>This command is used to combine all objects that do not currently reside in a \"pack\", into a pack. It can also be used to re-organize existing packs into a single, more efficient pack.</p>   <p>A pack is a collection of objects, individually compressed, with delta compression applied, stored in a single file, with an associated index file.</p>   <p>Packs are used to reduce the load on mirror systems, backup engines, disk storage, etc.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-a</dt> <dd> <p>Instead of incrementally packing the unpacked objects, pack everything referenced into a single pack. Especially useful when packing a repository that is used for private development. Use with <code>-d</code>. This will clean up the objects that <code>git prune</code> leaves behind, but <code>git fsck --full --dangling</code> shows as dangling.</p>  <p>Note that users fetching over dumb protocols will have to fetch the whole new pack in order to get any contained object, no matter how many other objects in that pack they already have locally.</p>  </dd> <dt class=\"hdlist1\">-A</dt> <dd> <p>Same as <code>-a</code>, unless <code>-d</code> is used. Then any unreachable objects in a previous pack become loose, unpacked objects, instead of being left in the old pack. Unreachable objects are never intentionally added to a pack, even when repacking. This option prevents unreachable objects from being immediately deleted by way of being left in the old pack and then removed. Instead, the loose unreachable objects will be pruned according to normal expiry rules with the next <code>git gc</code> invocation. See <a href=\"git-gc\">git-gc[1]</a>.</p> </dd> <dt class=\"hdlist1\">-d</dt> <dd> <p>After packing, if the newly created packs make some existing packs redundant, remove the redundant packs. Also run <code>git prune-packed</code> to remove redundant loose object files.</p> </dd> <dt class=\"hdlist1\">-l</dt> <dd> <p>Pass the <code>--local</code> option to <code>git pack-objects</code>. See <a href=\"git-pack-objects\">git-pack-objects[1]</a>.</p> </dd> <dt class=\"hdlist1\">-f</dt> <dd> <p>Pass the <code>--no-reuse-delta</code> option to <code>git-pack-objects</code>, see <a href=\"git-pack-objects\">git-pack-objects[1]</a>.</p> </dd> <dt class=\"hdlist1\">-F</dt> <dd> <p>Pass the <code>--no-reuse-object</code> option to <code>git-pack-objects</code>, see <a href=\"git-pack-objects\">git-pack-objects[1]</a>.</p> </dd> <dt class=\"hdlist1\">-q</dt> <dd> <p>Pass the <code>-q</code> option to <code>git pack-objects</code>. See <a href=\"git-pack-objects\">git-pack-objects[1]</a>.</p> </dd> <dt class=\"hdlist1\">-n</dt> <dd> <p>Do not update the server information with <code>git update-server-info</code>. This option skips updating local catalog files needed to publish this repository (or a direct copy of it) over HTTP or FTP. See <a href=\"git-update-server-info\">git-update-server-info[1]</a>.</p> </dd> <dt class=\"hdlist1\">--window=&lt;n&gt;</dt> <dt class=\"hdlist1\">--depth=&lt;n&gt;</dt> <dd> <p>These two options affect how the objects contained in the pack are stored using delta compression. The objects are first internally sorted by type, size and optionally names and compared against the other objects within <code>--window</code> to see if using delta compression saves space. <code>--depth</code> limits the maximum delta depth; making it too deep affects the performance on the unpacker side, because delta data needs to be applied that many times to get to the necessary object. The default value for --window is 10 and --depth is 50.</p> </dd> <dt class=\"hdlist1\">--window-memory=&lt;n&gt;</dt> <dd> <p>This option provides an additional limit on top of <code>--window</code>; the window size will dynamically scale down so as to not take up more than <code>&lt;n&gt;</code> bytes in memory. This is useful in repositories with a mix of large and small objects to not run out of memory with a large window, but still be able to take advantage of the large window for the smaller objects. The size can be suffixed with \"k\", \"m\", or \"g\". <code>--window-memory=0</code> makes memory usage unlimited, which is the default.</p> </dd> <dt class=\"hdlist1\">--max-pack-size=&lt;n&gt;</dt> <dd> <p>Maximum size of each output pack file. The size can be suffixed with \"k\", \"m\", or \"g\". The minimum size allowed is limited to 1 MiB. If specified, multiple packfiles may be created, which also prevents the creation of a bitmap index. The default is unlimited, unless the config variable <code>pack.packSizeLimit</code> is set.</p> </dd> <dt class=\"hdlist1\">-b</dt> <dt class=\"hdlist1\">--write-bitmap-index</dt> <dd> <p>Write a reachability bitmap index as part of the repack. This only makes sense when used with <code>-a</code> or <code>-A</code>, as the bitmaps must be able to refer to all reachable objects. This option overrides the setting of <code>repack.writeBitmaps</code>. This option has no effect if multiple packfiles are created.</p> </dd> <dt class=\"hdlist1\">--pack-kept-objects</dt> <dd> <p>Include objects in <code>.keep</code> files when repacking. Note that we still do not delete <code>.keep</code> packs after <code>pack-objects</code> finishes. This means that we may duplicate objects, but this makes the option safe to use when there are concurrent pushes or fetches. This option is generally only useful if you are writing bitmaps with <code>-b</code> or <code>repack.writeBitmaps</code>, as it ensures that the bitmapped packfile has the necessary objects.</p> </dd> </dl> </div></div>   <h2 id=\"_configuration\">Configuration</h2> <div class=\"sectionbody\"> <p>By default, the command passes <code>--delta-base-offset</code> option to <code>git pack-objects</code>; this typically results in slightly smaller packs, but the generated packs are incompatible with versions of Git older than version 1.4.4. If you need to share your repository with such ancient Git versions, either directly or via the dumb http protocol, then you need to set the configuration variable <code>repack.UseDeltaBaseOffset</code> to \"false\" and repack. Access from old Git versions over the native protocol is unaffected by this option as the conversion is performed on the fly as needed in that case.</p> </div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-pack-objects\">git-pack-objects[1]</a> <a href=\"git-prune-packed\">git-prune-packed[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-repack\" class=\"_attribution-link\">https://git-scm.com/docs/git-repack</a>\n  </p>\n</div>\n","gitweb":"<h1>gitweb</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>gitweb - Git web interface (web frontend to Git repositories)</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"> <p>To get started with gitweb, run <a href=\"git-instaweb\">git-instaweb[1]</a> from a Git repository. This would configure and start your web server, and run web browser pointing to gitweb.</p> </div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Gitweb provides a web interface to Git repositories. Its features include:</p>  <div class=\"ulist\"> <ul> <li> <p>Viewing multiple Git repositories with common root.</p> </li> <li> <p>Browsing every revision of the repository.</p> </li> <li> <p>Viewing the contents of files in the repository at any revision.</p> </li> <li> <p>Viewing the revision log of branches, history of files and directories, see what was changed when, by who.</p> </li> <li> <p>Viewing the blame/annotation details of any file (if enabled).</p> </li> <li> <p>Generating RSS and Atom feeds of commits, for any branch. The feeds are auto-discoverable in modern web browsers.</p> </li> <li> <p>Viewing everything that was changed in a revision, and step through revisions one at a time, viewing the history of the repository.</p> </li> <li> <p>Finding commits which commit messages matches given search term.</p> </li> </ul> </div>  <p>See <a href=\"http://git.kernel.org/?p=git/git.git;a=tree;f=gitweb\" class=\"bare\">http://git.kernel.org/?p=git/git.git;a=tree;f=gitweb</a> or <a href=\"http://repo.or.cz/w/git.git/tree/HEAD:/gitweb/\" class=\"bare\">http://repo.or.cz/w/git.git/tree/HEAD:/gitweb/</a> for gitweb source code, browsed using gitweb itself.</p> </div>   <h2 id=\"_configuration\">Configuration</h2> <div class=\"sectionbody\"> <p>Various aspects of gitweb’s behavior can be controlled through the configuration file <code>gitweb_config.perl</code> or <code>/etc/gitweb.conf</code>. See the <a href=\"gitweb.conf\">gitweb.conf[5]</a> for details.</p>  <div class=\"sect2\"> <h3 id=\"_repositories\">Repositories</h3>  <p>Gitweb can show information from one or more Git repositories. These repositories have to be all on local filesystem, and have to share common repository root, i.e. be all under a single parent repository (but see also \"Advanced web server setup\" section, \"Webserver configuration with multiple projects' root\" subsection).</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>our $projectroot = '/path/to/parent/directory';</pre> </div> </div>  <p>The default value for <code>$projectroot</code> is <code>/pub/git</code>. You can change it during building gitweb via <code>GITWEB_PROJECTROOT</code> build configuration variable.</p>   <p>By default all Git repositories under <code>$projectroot</code> are visible and available to gitweb. The list of projects is generated by default by scanning the <code>$projectroot</code> directory for Git repositories (for object databases to be more exact; gitweb is not interested in a working area, and is best suited to showing \"bare\" repositories).</p>   <p>The name of the repository in gitweb is the path to its <code>$GIT_DIR</code> (its object database) relative to <code>$projectroot</code>. Therefore the repository $repo can be found at \"$projectroot/$repo\".</p>  </div> <div class=\"sect2\"> <h3 id=\"_projects_list_file_format\">Projects list file format</h3>  <p>Instead of having gitweb find repositories by scanning filesystem starting from $projectroot, you can provide a pre-generated list of visible projects by setting <code>$projects_list</code> to point to a plain text file with a list of projects (with some additional info).</p>   <p>This file uses the following format:</p>  <div class=\"ulist\"> <ul> <li> <p>One record (for project / repository) per line; does not support line continuation (newline escaping).</p> </li> <li> <p>Leading and trailing whitespace are ignored.</p> </li> <li> <p>Whitespace separated fields; any run of whitespace can be used as field separator (rules for Perl’s \"<code>split(\" \", $line)</code>\").</p> </li> <li> <p>Fields use modified URI encoding, defined in RFC 3986, section 2.1 (Percent-Encoding), or rather \"Query string encoding\" (see <a href=\"http://en.wikipedia.org/wiki/Query_string#URL_encoding\" class=\"bare\">http://en.wikipedia.org/wiki/Query_string#URL_encoding</a>), the difference being that SP (\" \") can be encoded as \"+\" (and therefore \"+\" has to be also percent-encoded).</p>  <p>Reserved characters are: \"%\" (used for encoding), \"+\" (can be used to encode SPACE), all whitespace characters as defined in Perl, including SP, TAB and LF, (used to separate fields in a record).</p>  </li> <li> <p>Currently recognized fields are:</p> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">&lt;repository path&gt;</dt> <dd> <p>path to repository GIT_DIR, relative to <code>$projectroot</code></p> </dd> <dt class=\"hdlist1\">&lt;repository owner&gt;</dt> <dd> <p>displayed as repository owner, preferably full name, or email, or both</p> </dd> </dl> </div> </li> </ul> </div>  <p>You can generate the projects list index file using the project_index action (the <code>TXT</code> link on projects list page) directly from gitweb; see also \"Generating projects list using gitweb\" section below.</p>   <p>Example contents:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>foo.git       Joe+R+Hacker+&lt;joe@example.com&gt;\nfoo/bar.git   O+W+Ner+&lt;owner@example.org&gt;</pre> </div> </div>  <p>By default this file controls only which projects are <strong>visible</strong> on projects list page (note that entries that do not point to correctly recognized Git repositories won’t be displayed by gitweb). Even if a project is not visible on projects list page, you can view it nevertheless by hand-crafting a gitweb URL. By setting <code>$strict_export</code> configuration variable (see <a href=\"gitweb.conf\">gitweb.conf[5]</a>) to true value you can allow viewing only of repositories also shown on the overview page (i.e. only projects explicitly listed in projects list file will be accessible).</p>  </div> <div class=\"sect2\"> <h3 id=\"_generating_projects_list_using_gitweb\">Generating projects list using gitweb</h3>  <p>We assume that GITWEB_CONFIG has its default Makefile value, namely <code>gitweb_config.perl</code>. Put the following in <code>gitweb_make_index.perl</code> file:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>read_config_file(\"gitweb_config.perl\");\n$projects_list = $projectroot;</pre> </div> </div>  <p>Then create the following script to get list of project in the format suitable for GITWEB_LIST build configuration variable (or <code>$projects_list</code> variable in gitweb config):</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>#!/bin/sh\n\nexport GITWEB_CONFIG=\"gitweb_make_index.perl\"\nexport GATEWAY_INTERFACE=\"CGI/1.1\"\nexport HTTP_ACCEPT=\"*/*\"\nexport REQUEST_METHOD=\"GET\"\nexport QUERY_STRING=\"a=project_index\"\n\nperl -- /var/www/cgi-bin/gitweb.cgi</pre> </div> </div>  <p>Run this script and save its output to a file. This file could then be used as projects list file, which means that you can set <code>$projects_list</code> to its filename.</p>  </div> <div class=\"sect2\"> <h3 id=\"_controlling_access_to_git_repositories\">Controlling access to Git repositories</h3>  <p>By default all Git repositories under <code>$projectroot</code> are visible and available to gitweb. You can however configure how gitweb controls access to repositories.</p>  <div class=\"ulist\"> <ul> <li> <p>As described in \"Projects list file format\" section, you can control which projects are <strong>visible</strong> by selectively including repositories in projects list file, and setting <code>$projects_list</code> gitweb configuration variable to point to it. With <code>$strict_export</code> set, projects list file can be used to control which repositories are <strong>available</strong> as well.</p> </li> <li> <p>You can configure gitweb to only list and allow viewing of the explicitly exported repositories, via <code>$export_ok</code> variable in gitweb config file; see <a href=\"gitweb.conf\">gitweb.conf[5]</a> manpage. If it evaluates to true, gitweb shows repositories only if this file named by <code>$export_ok</code> exists in its object database (if directory has the magic file named <code>$export_ok</code>).</p>  <p>For example <a href=\"git-daemon\">git-daemon[1]</a> by default (unless <code>--export-all</code> option is used) allows pulling only for those repositories that have <code>git-daemon-export-ok</code> file. Adding</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>our $export_ok = \"git-daemon-export-ok\";</pre> </div> </div>  <p>makes gitweb show and allow access only to those repositories that can be fetched from via <code>git://</code> protocol.</p>  </li> <li> <p>Finally, it is possible to specify an arbitrary perl subroutine that will be called for each repository to determine if it can be exported. The subroutine receives an absolute path to the project (repository) as its only parameter (i.e. \"$projectroot/$project\").</p>  <p>For example, if you use mod_perl to run the script, and have dumb HTTP protocol authentication configured for your repositories, you can use the following hook to allow access only if the user is authorized to read the files:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$export_auth_hook = sub {\n        use Apache2::SubRequest ();\n        use Apache2::Const -compile =&gt; qw(HTTP_OK);\n        my $path = \"$_[0]/HEAD\";\n        my $r    = Apache2::RequestUtil-&gt;request;\n        my $sub  = $r-&gt;lookup_file($path);\n        return $sub-&gt;filename eq $path\n            &amp;&amp; $sub-&gt;status == Apache2::Const::HTTP_OK;\n};</pre> </div> </div> </li> </ul> </div> </div> <div class=\"sect2\"> <h3 id=\"_per_repository_gitweb_configuration\">Per-repository gitweb configuration</h3>  <p>You can configure individual repositories shown in gitweb by creating file in the <code>GIT_DIR</code> of Git repository, or by setting some repo configuration variable (in <code>GIT_DIR/config</code>, see <a href=\"git-config\">git-config[1]</a>).</p>   <p>You can use the following files in repository:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">README.html</dt> <dd> <p>A html file (HTML fragment) which is included on the gitweb project \"summary\" page inside <code>&lt;div&gt;</code> block element. You can use it for longer description of a project, to provide links (for example to project’s homepage), etc. This is recognized only if XSS prevention is off (<code>$prevent_xss</code> is false, see <a href=\"gitweb.conf\">gitweb.conf[5]</a>); a way to include a README safely when XSS prevention is on may be worked out in the future.</p> </dd> <dt class=\"hdlist1\">description (or <code>gitweb.description</code>)</dt> <dd> <p>Short (shortened to <code>$projects_list_description_width</code> in the projects list page, which is 25 characters by default; see <a href=\"gitweb.conf\">gitweb.conf[5]</a>) single line description of a project (of a repository). Plain text file; HTML will be escaped. By default set to</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>Unnamed repository; edit this file to name it for gitweb.</pre> </div> </div>  <p>from the template during repository creation, usually installed in <code>/usr/share/git-core/templates/</code>. You can use the <code>gitweb.description</code> repo configuration variable, but the file takes precedence.</p>  </dd> <dt class=\"hdlist1\">category (or <code>gitweb.category</code>)</dt> <dd> <p>Singe line category of a project, used to group projects if <code>$projects_list_group_categories</code> is enabled. By default (file and configuration variable absent), uncategorized projects are put in the <code>$project_list_default_category</code> category. You can use the <code>gitweb.category</code> repo configuration variable, but the file takes precedence.</p>  <p>The configuration variables <code>$projects_list_group_categories</code> and <code>$project_list_default_category</code> are described in <a href=\"gitweb.conf\">gitweb.conf[5]</a></p>  </dd> <dt class=\"hdlist1\">cloneurl (or multiple-valued <code>gitweb.url</code>)</dt> <dd> <p>File with repository URL (used for clone and fetch), one per line. Displayed in the project summary page. You can use multiple-valued <code>gitweb.url</code> repository configuration variable for that, but the file takes precedence.</p>  <p>This is per-repository enhancement / version of global prefix-based <code>@git_base_url_list</code> gitweb configuration variable (see <a href=\"gitweb.conf\">gitweb.conf[5]</a>).</p>  </dd> <dt class=\"hdlist1\">gitweb.owner</dt> <dd> <p>You can use the <code>gitweb.owner</code> repository configuration variable to set repository’s owner. It is displayed in the project list and summary page.</p>  <p>If it’s not set, filesystem directory’s owner is used (via GECOS field, i.e. real name field from <strong>getpwuid</strong>(3)) if <code>$projects_list</code> is unset (gitweb scans <code>$projectroot</code> for repositories); if <code>$projects_list</code> points to file with list of repositories, then project owner defaults to value from this file for given repository.</p>  </dd> <dt class=\"hdlist1\">various <code>gitweb.*</code> config variables (in config)</dt> <dd> <p>Read description of <code>%feature</code> hash for detailed list, and descriptions. See also \"Configuring gitweb features\" section in <a href=\"gitweb.conf\">gitweb.conf[5]</a></p> </dd> </dl> </div> </div>\n</div>   <h2 id=\"_actions_and_urls\">Actions, and urls</h2> <div class=\"sectionbody\"> <p>Gitweb can use path_info (component) based URLs, or it can pass all necessary information via query parameters. The typical gitweb URLs are broken down in to five components:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>.../gitweb.cgi/&lt;repo&gt;/&lt;action&gt;/&lt;revision&gt;:/&lt;path&gt;?&lt;arguments&gt;</pre> </div> </div> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">repo</dt> <dd> <p>The repository the action will be performed on.</p>  <p>All actions except for those that list all available projects, in whatever form, require this parameter.</p>  </dd> <dt class=\"hdlist1\">action</dt> <dd> <p>The action that will be run. Defaults to <code>projects_list</code> if repo is not set, and to <code>summary</code> otherwise.</p> </dd> <dt class=\"hdlist1\">revision</dt> <dd> <p>Revision shown. Defaults to HEAD.</p> </dd> <dt class=\"hdlist1\">path</dt> <dd> <p>The path within the &lt;repository&gt; that the action is performed on, for those actions that require it.</p> </dd> <dt class=\"hdlist1\">arguments</dt> <dd> <p>Any arguments that control the behaviour of the action.</p> </dd> </dl> </div>  <p>Some actions require or allow to specify two revisions, and sometimes even two pathnames. In most general form such path_info (component) based gitweb URL looks like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>.../gitweb.cgi/&lt;repo&gt;/&lt;action&gt;/&lt;revision_from&gt;:/&lt;path_from&gt;..&lt;revision_to&gt;:/&lt;path_to&gt;?&lt;arguments&gt;</pre> </div> </div>  <p>Each action is implemented as a subroutine, and must be present in %actions hash. Some actions are disabled by default, and must be turned on via feature mechanism. For example to enable <code>blame</code> view add the following to gitweb configuration file:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$feature{'blame'}{'default'} = [1];</pre> </div> </div> <div class=\"sect2\"> <h3 id=\"_actions\">Actions:</h3>  <p>The standard actions are:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">project_list</dt> <dd> <p>Lists the available Git repositories. This is the default command if no repository is specified in the URL.</p> </dd> <dt class=\"hdlist1\">summary</dt> <dd> <p>Displays summary about given repository. This is the default command if no action is specified in URL, and only repository is specified.</p> </dd> <dt class=\"hdlist1\">heads</dt> <dt class=\"hdlist1\">remotes</dt> <dd> <p>Lists all local or all remote-tracking branches in given repository.</p>  <p>The latter is not available by default, unless configured.</p>  </dd> <dt class=\"hdlist1\">tags</dt> <dd> <p>List all tags (lightweight and annotated) in given repository.</p> </dd> <dt class=\"hdlist1\">blob</dt> <dt class=\"hdlist1\">tree</dt> <dd> <p>Shows the files and directories in a given repository path, at given revision. This is default command if no action is specified in the URL, and path is given.</p> </dd> <dt class=\"hdlist1\">blob_plain</dt> <dd> <p>Returns the raw data for the file in given repository, at given path and revision. Links to this action are marked <code>raw</code>.</p> </dd> <dt class=\"hdlist1\">blobdiff</dt> <dd> <p>Shows the difference between two revisions of the same file.</p> </dd> <dt class=\"hdlist1\">blame</dt> <dt class=\"hdlist1\">blame_incremental</dt> <dd> <p>Shows the blame (also called annotation) information for a file. On a per line basis it shows the revision in which that line was last changed and the user that committed the change. The incremental version (which if configured is used automatically when JavaScript is enabled) uses Ajax to incrementally add blame info to the contents of given file.</p>  <p>This action is disabled by default for performance reasons.</p>  </dd> <dt class=\"hdlist1\">commit</dt> <dt class=\"hdlist1\">commitdiff</dt> <dd> <p>Shows information about a specific commit in a repository. The <code>commit</code> view shows information about commit in more detail, the <code>commitdiff</code> action shows changeset for given commit.</p> </dd> <dt class=\"hdlist1\">patch</dt> <dd> <p>Returns the commit in plain text mail format, suitable for applying with <a href=\"git-am\">git-am[1]</a>.</p> </dd> <dt class=\"hdlist1\">tag</dt> <dd> <p>Display specific annotated tag (tag object).</p> </dd> <dt class=\"hdlist1\">log</dt> <dt class=\"hdlist1\">shortlog</dt> <dd> <p>Shows log information (commit message or just commit subject) for a given branch (starting from given revision).</p>  <p>The <code>shortlog</code> view is more compact; it shows one commit per line.</p>  </dd> <dt class=\"hdlist1\">history</dt> <dd> <p>Shows history of the file or directory in a given repository path, starting from given revision (defaults to HEAD, i.e. default branch).</p>  <p>This view is similar to <code>shortlog</code> view.</p>  </dd> <dt class=\"hdlist1\">rss</dt> <dt class=\"hdlist1\">atom</dt> <dd> <p>Generates an RSS (or Atom) feed of changes to repository.</p> </dd> </dl> </div> </div>\n</div>   <h2 id=\"_webserver_configuration\">Webserver configuration</h2> <div class=\"sectionbody\"> <p>This section explains how to configure some common webservers to run gitweb. In all cases, <code>/path/to/gitweb</code> in the examples is the directory you ran installed gitweb in, and contains <code>gitweb_config.perl</code>.</p>   <p>If you’ve configured a web server that isn’t listed here for gitweb, please send in the instructions so they can be included in a future release.</p>  <div class=\"sect2\"> <h3 id=\"_apache_as_cgi\">Apache as CGI</h3>  <p>Apache must be configured to support CGI scripts in the directory in which gitweb is installed. Let’s assume that it is <code>/var/www/cgi-bin</code> directory.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>ScriptAlias /cgi-bin/ \"/var/www/cgi-bin/\"\n\n&lt;Directory \"/var/www/cgi-bin\"&gt;\n    Options Indexes FollowSymlinks ExecCGI\n    AllowOverride None\n    Order allow,deny\n    Allow from all\n&lt;/Directory&gt;</pre> </div> </div>  <p>With that configuration the full path to browse repositories would be:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>http://server/cgi-bin/gitweb.cgi</pre> </div> </div> </div> <div class=\"sect2\"> <h3 id=\"_apache_with_mod_perl_via_modperl_registry\">Apache with mod_perl, via ModPerl::Registry</h3>  <p>You can use mod_perl with gitweb. You must install Apache::Registry (for mod_perl 1.x) or ModPerl::Registry (for mod_perl 2.x) to enable this support.</p>   <p>Assuming that gitweb is installed to <code>/var/www/perl</code>, the following Apache configuration (for mod_perl 2.x) is suitable.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>Alias /perl \"/var/www/perl\"\n\n&lt;Directory \"/var/www/perl\"&gt;\n    SetHandler perl-script\n    PerlResponseHandler ModPerl::Registry\n    PerlOptions +ParseHeaders\n    Options Indexes FollowSymlinks +ExecCGI\n    AllowOverride None\n    Order allow,deny\n    Allow from all\n&lt;/Directory&gt;</pre> </div> </div>  <p>With that configuration the full path to browse repositories would be:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>http://server/perl/gitweb.cgi</pre> </div> </div> </div> <div class=\"sect2\"> <h3 id=\"_apache_with_fastcgi\">Apache with FastCGI</h3>  <p>Gitweb works with Apache and FastCGI. First you need to rename, copy or symlink gitweb.cgi to gitweb.fcgi. Let’s assume that gitweb is installed in <code>/usr/share/gitweb</code> directory. The following Apache configuration is suitable (UNTESTED!)</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>FastCgiServer /usr/share/gitweb/gitweb.cgi\nScriptAlias /gitweb /usr/share/gitweb/gitweb.cgi\n\nAlias /gitweb/static /usr/share/gitweb/static\n&lt;Directory /usr/share/gitweb/static&gt;\n    SetHandler default-handler\n&lt;/Directory&gt;</pre> </div> </div>  <p>With that configuration the full path to browse repositories would be:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>http://server/gitweb</pre> </div> </div> </div>\n</div>   <h2 id=\"_advanced_web_server_setup\">Advanced web server setup</h2> <div class=\"sectionbody\"> <p>All of those examples use request rewriting, and need <code>mod_rewrite</code> (or equivalent; examples below are written for Apache).</p>  <div class=\"sect2\"> <h3 id=\"_single_url_for_gitweb_and_for_fetching\">Single URL for gitweb and for fetching</h3>  <p>If you want to have one URL for both gitweb and your <code>http://</code> repositories, you can configure Apache like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>&lt;VirtualHost *:80&gt;\n    ServerName    git.example.org\n    DocumentRoot  /pub/git\n    SetEnv        GITWEB_CONFIG   /etc/gitweb.conf\n\n    # turning on mod rewrite\n    RewriteEngine on\n\n    # make the front page an internal rewrite to the gitweb script\n    RewriteRule ^/$  /cgi-bin/gitweb.cgi\n\n    # make access for \"dumb clients\" work\n    RewriteRule ^/(.*\\.git/(?!/?(HEAD|info|objects|refs)).*)?$ \\\n                /cgi-bin/gitweb.cgi%{REQUEST_URI}  [L,PT]\n&lt;/VirtualHost&gt;</pre> </div> </div>  <p>The above configuration expects your public repositories to live under <code>/pub/git</code> and will serve them as <code>http://git.domain.org/dir-under-pub-git</code>, both as clonable Git URL and as browseable gitweb interface. If you then start your <a href=\"git-daemon\">git-daemon[1]</a> with <code>--base-path=/pub/git --export-all</code> then you can even use the <code>git://</code> URL with exactly the same path.</p>   <p>Setting the environment variable <code>GITWEB_CONFIG</code> will tell gitweb to use the named file (i.e. in this example <code>/etc/gitweb.conf</code>) as a configuration for gitweb. You don’t really need it in above example; it is required only if your configuration file is in different place than built-in (during compiling gitweb) <code>gitweb_config.perl</code> or <code>/etc/gitweb.conf</code>. See <a href=\"gitweb.conf\">gitweb.conf[5]</a> for details, especially information about precedence rules.</p>   <p>If you use the rewrite rules from the example you <strong>might</strong> also need something like the following in your gitweb configuration file (<code>/etc/gitweb.conf</code> following example):</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>@stylesheets = (\"/some/absolute/path/gitweb.css\");\n$my_uri    = \"/\";\n$home_link = \"/\";\n$per_request_config = 1;</pre> </div> </div>  <p>Nowadays though gitweb should create HTML base tag when needed (to set base URI for relative links), so it should work automatically.</p>  </div> <div class=\"sect2\"> <h3 id=\"_webserver_configuration_with_multiple_projects_root\">Webserver configuration with multiple projects' root</h3>  <p>If you want to use gitweb with several project roots you can edit your Apache virtual host and gitweb configuration files in the following way.</p>   <p>The virtual host configuration (in Apache configuration file) should look like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>&lt;VirtualHost *:80&gt;\n    ServerName    git.example.org\n    DocumentRoot  /pub/git\n    SetEnv        GITWEB_CONFIG  /etc/gitweb.conf\n\n    # turning on mod rewrite\n    RewriteEngine on\n\n    # make the front page an internal rewrite to the gitweb script\n    RewriteRule ^/$  /cgi-bin/gitweb.cgi  [QSA,L,PT]\n\n    # look for a public_git folder in unix users' home\n    # http://git.example.org/~&lt;user&gt;/\n    RewriteRule ^/\\~([^\\/]+)(/|/gitweb.cgi)?$        /cgi-bin/gitweb.cgi \\\n                [QSA,E=GITWEB_PROJECTROOT:/home/$1/public_git/,L,PT]\n\n    # http://git.example.org/+&lt;user&gt;/\n    #RewriteRule ^/\\+([^\\/]+)(/|/gitweb.cgi)?$        /cgi-bin/gitweb.cgi \\\n                 [QSA,E=GITWEB_PROJECTROOT:/home/$1/public_git/,L,PT]\n\n    # http://git.example.org/user/&lt;user&gt;/\n    #RewriteRule ^/user/([^\\/]+)/(gitweb.cgi)?$        /cgi-bin/gitweb.cgi \\\n                 [QSA,E=GITWEB_PROJECTROOT:/home/$1/public_git/,L,PT]\n\n    # defined list of project roots\n    RewriteRule ^/scm(/|/gitweb.cgi)?$ /cgi-bin/gitweb.cgi \\\n                [QSA,E=GITWEB_PROJECTROOT:/pub/scm/,L,PT]\n    RewriteRule ^/var(/|/gitweb.cgi)?$ /cgi-bin/gitweb.cgi \\\n                [QSA,E=GITWEB_PROJECTROOT:/var/git/,L,PT]\n\n    # make access for \"dumb clients\" work\n    RewriteRule ^/(.*\\.git/(?!/?(HEAD|info|objects|refs)).*)?$ \\\n                /cgi-bin/gitweb.cgi%{REQUEST_URI}  [L,PT]\n&lt;/VirtualHost&gt;</pre> </div> </div>  <p>Here actual project root is passed to gitweb via <code>GITWEB_PROJECT_ROOT</code> environment variable from a web server, so you need to put the following line in gitweb configuration file (<code>/etc/gitweb.conf</code> in above example):</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$projectroot = $ENV{'GITWEB_PROJECTROOT'} || \"/pub/git\";</pre> </div> </div>  <p><strong>Note</strong> that this requires to be set for each request, so either <code>$per_request_config</code> must be false, or the above must be put in code referenced by <code>$per_request_config</code>;</p>   <p>These configurations enable two things. First, each unix user (<code>&lt;user&gt;</code>) of the server will be able to browse through gitweb Git repositories found in <code>~/public_git/</code> with the following url:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>http://git.example.org/~&lt;user&gt;/</pre> </div> </div>  <p>If you do not want this feature on your server just remove the second rewrite rule.</p>   <p>If you already use <code>mod_userdir</code> in your virtual host or you don’t want to use the '~' as first character, just comment or remove the second rewrite rule, and uncomment one of the following according to what you want.</p>   <p>Second, repositories found in <code>/pub/scm/</code> and <code>/var/git/</code> will be accessible through <code>http://git.example.org/scm/</code> and <code>http://git.example.org/var/</code>. You can add as many project roots as you want by adding rewrite rules like the third and the fourth.</p>  </div> <div class=\"sect2\"> <h3 id=\"_path_info_usage\">PATH_INFO usage</h3>  <p>If you enable PATH_INFO usage in gitweb by putting</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$feature{'pathinfo'}{'default'} = [1];</pre> </div> </div>  <p>in your gitweb configuration file, it is possible to set up your server so that it consumes and produces URLs in the form</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>http://git.example.com/project.git/shortlog/sometag</pre> </div> </div>  <p>i.e. without <code>gitweb.cgi</code> part, by using a configuration such as the following. This configuration assumes that <code>/var/www/gitweb</code> is the DocumentRoot of your webserver, contains the gitweb.cgi script and complementary static files (stylesheet, favicon, JavaScript):</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>&lt;VirtualHost *:80&gt;\n        ServerAlias git.example.com\n\n        DocumentRoot /var/www/gitweb\n\n        &lt;Directory /var/www/gitweb&gt;\n                Options ExecCGI\n                AddHandler cgi-script cgi\n\n                DirectoryIndex gitweb.cgi\n\n                RewriteEngine On\n                RewriteCond %{REQUEST_FILENAME} !-f\n                RewriteCond %{REQUEST_FILENAME} !-d\n                RewriteRule ^.* /gitweb.cgi/$0 [L,PT]\n        &lt;/Directory&gt;\n&lt;/VirtualHost&gt;</pre> </div> </div>  <p>The rewrite rule guarantees that existing static files will be properly served, whereas any other URL will be passed to gitweb as PATH_INFO parameter.</p>   <p><strong>Notice</strong> that in this case you don’t need special settings for <code>@stylesheets</code>, <code>$my_uri</code> and <code>$home_link</code>, but you lose \"dumb client\" access to your project .git dirs (described in \"Single URL for gitweb and for fetching\" section). A possible workaround for the latter is the following: in your project root dir (e.g. <code>/pub/git</code>) have the projects named <strong>without</strong> a .git extension (e.g. <code>/pub/git/project</code> instead of <code>/pub/git/project.git</code>) and configure Apache as follows:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>&lt;VirtualHost *:80&gt;\n        ServerAlias git.example.com\n\n        DocumentRoot /var/www/gitweb\n\n        AliasMatch ^(/.*?)(\\.git)(/.*)?$ /pub/git$1$3\n        &lt;Directory /var/www/gitweb&gt;\n                Options ExecCGI\n                AddHandler cgi-script cgi\n\n                DirectoryIndex gitweb.cgi\n\n                RewriteEngine On\n                RewriteCond %{REQUEST_FILENAME} !-f\n                RewriteCond %{REQUEST_FILENAME} !-d\n                RewriteRule ^.* /gitweb.cgi/$0 [L,PT]\n        &lt;/Directory&gt;\n&lt;/VirtualHost&gt;</pre> </div> </div>  <p>The additional AliasMatch makes it so that</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>http://git.example.com/project.git</pre> </div> </div>  <p>will give raw access to the project’s Git dir (so that the project can be cloned), while</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>http://git.example.com/project</pre> </div> </div>  <p>will provide human-friendly gitweb access.</p>   <p>This solution is not 100% bulletproof, in the sense that if some project has a named ref (branch, tag) starting with <code>git/</code>, then paths such as</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>http://git.example.com/project/command/abranch..git/abranch</pre> </div> </div>  <p>will fail with a 404 error.</p>  </div>\n</div>   <h2 id=\"_bugs\">Bugs</h2> <div class=\"sectionbody\"> <p>Please report any bugs or feature requests to <a href=\"mailto:git@vger.kernel.org\">git@vger.kernel.org</a>, putting \"gitweb\" in the subject of email.</p> </div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"gitweb.conf\">gitweb.conf[5]</a>, <a href=\"git-instaweb\">git-instaweb[1]</a></p>   <p><code>gitweb/README</code>, <code>gitweb/INSTALL</code></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/gitweb\" class=\"_attribution-link\">https://git-scm.com/docs/gitweb</a>\n  </p>\n</div>\n","gitmodules":"<h1>gitmodules</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>gitmodules - defining submodule properties</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"> <p>$GIT_WORK_DIR/.gitmodules</p> </div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>The <code>.gitmodules</code> file, located in the top-level directory of a Git working tree, is a text file with a syntax matching the requirements of <a href=\"git-config\">git-config[1]</a>.</p>   <p>The file contains one subsection per submodule, and the subsection value is the name of the submodule. The name is set to the path where the submodule has been added unless it was customized with the <code>--name</code> option of <code>git submodule add</code>. Each submodule section also contains the following required keys:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">submodule.&lt;name&gt;.path</dt> <dd> <p>Defines the path, relative to the top-level directory of the Git working tree, where the submodule is expected to be checked out. The path name must not end with a <code>/</code>. All submodule paths must be unique within the .gitmodules file.</p> </dd> <dt class=\"hdlist1\">submodule.&lt;name&gt;.url</dt> <dd> <p>Defines a URL from which the submodule repository can be cloned. This may be either an absolute URL ready to be passed to <a href=\"git-clone\">git-clone[1]</a> or (if it begins with ./ or ../) a location relative to the superproject’s origin repository.</p> </dd> </dl> </div>  <p>In addition, there are a number of optional keys:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">submodule.&lt;name&gt;.update</dt> <dd> <p>Defines the default update procedure for the named submodule, i.e. how the submodule is updated by \"git submodule update\" command in the superproject. This is only used by <code>git\nsubmodule init</code> to initialize the configuration variable of the same name. Allowed values here are <code>checkout</code>, <code>rebase</code>, <code>merge</code> or <code>none</code>. See description of <code>update</code> command in <a href=\"git-submodule\">git-submodule[1]</a> for their meaning. Note that the <code>!command</code> form is intentionally ignored here for security reasons.</p> </dd> <dt class=\"hdlist1\">submodule.&lt;name&gt;.branch</dt> <dd> <p>A remote branch name for tracking updates in the upstream submodule. If the option is not specified, it defaults to <code>master</code>. See the <code>--remote</code> documentation in <a href=\"git-submodule\">git-submodule[1]</a> for details.</p> </dd> <dt class=\"hdlist1\">submodule.&lt;name&gt;.fetchRecurseSubmodules</dt> <dd> <p>This option can be used to control recursive fetching of this submodule. If this option is also present in the submodules entry in .git/config of the superproject, the setting there will override the one found in .gitmodules. Both settings can be overridden on the command line by using the \"--[no-]recurse-submodules\" option to \"git fetch\" and \"git pull\".</p> </dd> <dt class=\"hdlist1\">submodule.&lt;name&gt;.ignore</dt> <dd> <p>Defines under what circumstances \"git status\" and the diff family show a submodule as modified. When set to \"all\", it will never be considered modified (but will nonetheless show up in the output of status and commit when it has been staged), \"dirty\" will ignore all changes to the submodules work tree and takes only differences between the HEAD of the submodule and the commit recorded in the superproject into account. \"untracked\" will additionally let submodules with modified tracked files in their work tree show up. Using \"none\" (the default when this option is not set) also shows submodules that have untracked files in their work tree as changed. If this option is also present in the submodules entry in .git/config of the superproject, the setting there will override the one found in .gitmodules. Both settings can be overridden on the command line by using the \"--ignore-submodule\" option. The <code>git submodule</code> commands are not affected by this setting.</p> </dd> </dl> </div>\n</div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"> <p>Consider the following .gitmodules file:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>[submodule \"libfoo\"]\n    path = include/foo\n    url = git://foo.com/git/lib.git</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>[submodule \"libbar\"]\n    path = include/bar\n    url = git://bar.com/git/lib.git</pre> </div> </div>  <p>This defines two submodules, <code>libfoo</code> and <code>libbar</code>. These are expected to be checked out in the paths <code>include/foo</code> and <code>include/bar</code>, and for both submodules a URL is specified which can be used for cloning the submodules.</p> </div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-submodule\">git-submodule[1]</a> <a href=\"git-config\">git-config[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/gitmodules\" class=\"_attribution-link\">https://git-scm.com/docs/gitmodules</a>\n  </p>\n</div>\n","git-index-pack":"<h1>git-index-pack</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-index-pack - Build pack index file for an existing packed archive</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git index-pack [-v] [-o &lt;index-file&gt;] &lt;pack-file&gt;\ngit index-pack --stdin [--fix-thin] [--keep] [-v] [-o &lt;index-file&gt;]\n                 [&lt;pack-file&gt;]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Reads a packed archive (.pack) from the specified file, and builds a pack index file (.idx) for it. The packed archive together with the pack index can then be placed in the objects/pack/ directory of a Git repository.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-v</dt> <dd> <p>Be verbose about what is going on, including progress status.</p> </dd> <dt class=\"hdlist1\">-o &lt;index-file&gt;</dt> <dd> <p>Write the generated pack index into the specified file. Without this option the name of pack index file is constructed from the name of packed archive file by replacing .pack with .idx (and the program fails if the name of packed archive does not end with .pack).</p> </dd> <dt class=\"hdlist1\">--stdin</dt> <dd> <p>When this flag is provided, the pack is read from stdin instead and a copy is then written to &lt;pack-file&gt;. If &lt;pack-file&gt; is not specified, the pack is written to objects/pack/ directory of the current Git repository with a default name determined from the pack content. If &lt;pack-file&gt; is not specified consider using --keep to prevent a race condition between this process and <code>git repack</code>.</p> </dd> <dt class=\"hdlist1\">--fix-thin</dt> <dd> <p>Fix a \"thin\" pack produced by <code>git pack-objects --thin</code> (see <a href=\"git-pack-objects\">git-pack-objects[1]</a> for details) by adding the excluded objects the deltified objects are based on to the pack. This option only makes sense in conjunction with --stdin.</p> </dd> <dt class=\"hdlist1\">--keep</dt> <dd> <p>Before moving the index into its final destination create an empty .keep file for the associated pack file. This option is usually necessary with --stdin to prevent a simultaneous <code>git repack</code> process from deleting the newly constructed pack and index before refs can be updated to use objects contained in the pack.</p> </dd> <dt class=\"hdlist1\">--keep=&lt;msg&gt;</dt> <dd> <p>Like --keep create a .keep file before moving the index into its final destination, but rather than creating an empty file place <code>&lt;msg&gt;</code> followed by an LF into the .keep file. The <code>&lt;msg&gt;</code> message can later be searched for within all .keep files to locate any which have outlived their usefulness.</p> </dd> <dt class=\"hdlist1\">--index-version=&lt;version&gt;[,&lt;offset&gt;]</dt> <dd> <p>This is intended to be used by the test suite only. It allows to force the version for the generated pack index, and to force 64-bit index entries on objects located above the given offset.</p> </dd> <dt class=\"hdlist1\">--strict</dt> <dd> <p>Die, if the pack contains broken objects or links.</p> </dd> <dt class=\"hdlist1\">--check-self-contained-and-connected</dt> <dd> <p>Die if the pack contains broken links. For internal use only.</p> </dd> <dt class=\"hdlist1\">--threads=&lt;n&gt;</dt> <dd> <p>Specifies the number of threads to spawn when resolving deltas. This requires that index-pack be compiled with pthreads otherwise this option is ignored with a warning. This is meant to reduce packing time on multiprocessor machines. The required amount of memory for the delta search window is however multiplied by the number of threads. Specifying 0 will cause Git to auto-detect the number of CPU’s and use maximum 3 threads.</p> </dd> </dl> </div></div>   <h2 id=\"_note\">Note</h2> <div class=\"sectionbody\"> <p>Once the index has been created, the list of object names is sorted and the SHA-1 hash of that list is printed to stdout. If --stdin was also used then this is prefixed by either \"pack\\t\", or \"keep\\t\" if a new .keep file was successfully created. This is useful to remove a .keep file used as a lock to prevent the race with <code>git repack</code> mentioned above.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-index-pack\" class=\"_attribution-link\">https://git-scm.com/docs/git-index-pack</a>\n  </p>\n</div>\n","git-upload-archive":"<h1>git-upload-archive</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-upload-archive - Send archive back to git-archive</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git upload-archive &lt;directory&gt;</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Invoked by <code>git archive --remote</code> and sends a generated archive to the other end over the Git protocol.</p>   <p>This command is usually not invoked directly by the end user. The UI for the protocol is on the <code>git archive</code> side, and the program pair is meant to be used to get an archive from a remote repository.</p> </div>   <h2 id=\"_security\">Security</h2> <div class=\"sectionbody\"> <p>In order to protect the privacy of objects that have been removed from history but may not yet have been pruned, <code>git-upload-archive</code> avoids serving archives for commits and trees that are not reachable from the repository’s refs. However, because calculating object reachability is computationally expensive, <code>git-upload-archive</code> implements a stricter but easier-to-check set of rules:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>Clients may request a commit or tree that is pointed to directly by a ref. E.g., <code>git archive --remote=origin v1.0</code>.</p> </li> <li> <p>Clients may request a sub-tree within a commit or tree using the <code>ref:path</code> syntax. E.g., <code>git archive --remote=origin v1.0:Documentation</code>.</p> </li> <li> <p>Clients may <code>not</code> use other sha1 expressions, even if the end result is reachable. E.g., neither a relative commit like <code>master^</code> nor a literal sha1 like <code>abcd1234</code> is allowed, even if the result is reachable from the refs.</p> </li> </ol> </div>  <p>Note that rule 3 disallows many cases that do not have any privacy implications. These rules are subject to change in future versions of git, and the server accessed by <code>git archive --remote</code> may or may not follow these exact rules.</p>   <p>If the config option <code>uploadArchive.allowUnreachable</code> is true, these rules are ignored, and clients may use arbitrary sha1 expressions. This is useful if you do not care about the privacy of unreachable objects, or if your object database is already publicly available for access via non-smart-http.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">&lt;directory&gt;</dt> <dd> <p>The repository to get a tar archive from.</p> </dd> </dl> </div></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-upload-archive\" class=\"_attribution-link\">https://git-scm.com/docs/git-upload-archive</a>\n  </p>\n</div>\n","gitremote-helpers":"<h1>gitremote-helpers</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>gitremote-helpers - Helper programs to interact with remote repositories</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git remote-&lt;transport&gt; &lt;repository&gt; [&lt;URL&gt;]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Remote helper programs are normally not used directly by end users, but they are invoked by Git when it needs to interact with remote repositories Git does not support natively. A given helper will implement a subset of the capabilities documented here. When Git needs to interact with a repository using a remote helper, it spawns the helper as an independent process, sends commands to the helper’s standard input, and expects results from the helper’s standard output. Because a remote helper runs as an independent process from Git, there is no need to re-link Git to add a new helper, nor any need to link the helper with the implementation of Git.</p>   <p>Every helper must support the \"capabilities\" command, which Git uses to determine what other commands the helper will accept. Those other commands can be used to discover and update remote refs, transport objects between the object database and the remote repository, and update the local object store.</p>   <p>Git comes with a \"curl\" family of remote helpers, that handle various transport protocols, such as <code>git-remote-http</code>, <code>git-remote-https</code>, <code>git-remote-ftp</code> and <code>git-remote-ftps</code>. They implement the capabilities <code>fetch</code>, <code>option</code>, and <code>push</code>.</p> </div>   <h2 id=\"_invocation\">Invocation</h2> <div class=\"sectionbody\"> <p>Remote helper programs are invoked with one or (optionally) two arguments. The first argument specifies a remote repository as in Git; it is either the name of a configured remote or a URL. The second argument specifies a URL; it is usually of the form <code>&lt;transport&gt;://&lt;address&gt;</code>, but any arbitrary string is possible. The <code>GIT_DIR</code> environment variable is set up for the remote helper and can be used to determine where to store additional data or from which directory to invoke auxiliary Git commands.</p>   <p>When Git encounters a URL of the form <code>&lt;transport&gt;://&lt;address&gt;</code>, where <code>&lt;transport&gt;</code> is a protocol that it cannot handle natively, it automatically invokes <code>git remote-&lt;transport&gt;</code> with the full URL as the second argument. If such a URL is encountered directly on the command line, the first argument is the same as the second, and if it is encountered in a configured remote, the first argument is the name of that remote.</p>   <p>A URL of the form <code>&lt;transport&gt;::&lt;address&gt;</code> explicitly instructs Git to invoke <code>git remote-&lt;transport&gt;</code> with <code>&lt;address&gt;</code> as the second argument. If such a URL is encountered directly on the command line, the first argument is <code>&lt;address&gt;</code>, and if it is encountered in a configured remote, the first argument is the name of that remote.</p>   <p>Additionally, when a configured remote has <code>remote.&lt;name&gt;.vcs</code> set to <code>&lt;transport&gt;</code>, Git explicitly invokes <code>git remote-&lt;transport&gt;</code> with <code>&lt;name&gt;</code> as the first argument. If set, the second argument is <code>remote.&lt;name&gt;.url</code>; otherwise, the second argument is omitted.</p> </div>   <h2 id=\"_input_format\">Input format</h2> <div class=\"sectionbody\"> <p>Git sends the remote helper a list of commands on standard input, one per line. The first command is always the <code>capabilities</code> command, in response to which the remote helper must print a list of the capabilities it supports (see below) followed by a blank line. The response to the capabilities command determines what commands Git uses in the remainder of the command stream.</p>   <p>The command stream is terminated by a blank line. In some cases (indicated in the documentation of the relevant commands), this blank line is followed by a payload in some other protocol (e.g., the pack protocol), while in others it indicates the end of input.</p>  <div class=\"sect2\"> <h3 id=\"_capabilities\">Capabilities</h3>  <p>Each remote helper is expected to support only a subset of commands. The operations a helper supports are declared to Git in the response to the <code>capabilities</code> command (see COMMANDS, below).</p>   <p>In the following, we list all defined capabilities and for each we list which commands a helper with that capability must provide.</p>  <div class=\"sect3\"> <h4 id=\"_capabilities_for_pushing\">Capabilities for Pushing</h4> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><em>connect</em></dt> <dd> <p>Can attempt to connect to <code>git receive-pack</code> (for pushing), <code>git upload-pack</code>, etc for communication using git’s native packfile protocol. This requires a bidirectional, full-duplex connection.</p>  <p>Supported commands: <code>connect</code>.</p>  </dd> <dt class=\"hdlist1\"><em>push</em></dt> <dd> <p>Can discover remote refs and push local commits and the history leading up to them to new or existing remote refs.</p>  <p>Supported commands: <code>list for-push</code>, <code>push</code>.</p>  </dd> <dt class=\"hdlist1\"><em>export</em></dt> <dd> <p>Can discover remote refs and push specified objects from a fast-import stream to remote refs.</p>  <p>Supported commands: <code>list for-push</code>, <code>export</code>.</p>  </dd> </dl> </div>  <p>If a helper advertises <code>connect</code>, Git will use it if possible and fall back to another capability if the helper requests so when connecting (see the <code>connect</code> command under COMMANDS). When choosing between <code>push</code> and <code>export</code>, Git prefers <code>push</code>. Other frontends may have some other order of preference.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><em>no-private-update</em></dt> <dd> <p>When using the <code>refspec</code> capability, git normally updates the private ref on successful push. This update is disabled when the remote-helper declares the capability <code>no-private-update</code>.</p> </dd> </dl> </div> </div> <div class=\"sect3\"> <h4 id=\"_capabilities_for_fetching\">Capabilities for Fetching</h4> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><em>connect</em></dt> <dd> <p>Can try to connect to <code>git upload-pack</code> (for fetching), <code>git receive-pack</code>, etc for communication using the Git’s native packfile protocol. This requires a bidirectional, full-duplex connection.</p>  <p>Supported commands: <code>connect</code>.</p>  </dd> <dt class=\"hdlist1\"><em>fetch</em></dt> <dd> <p>Can discover remote refs and transfer objects reachable from them to the local object store.</p>  <p>Supported commands: <code>list</code>, <code>fetch</code>.</p>  </dd> <dt class=\"hdlist1\"><em>import</em></dt> <dd> <p>Can discover remote refs and output objects reachable from them as a stream in fast-import format.</p>  <p>Supported commands: <code>list</code>, <code>import</code>.</p>  </dd> <dt class=\"hdlist1\"><em>check-connectivity</em></dt> <dd> <p>Can guarantee that when a clone is requested, the received pack is self contained and is connected.</p> </dd> </dl> </div>  <p>If a helper advertises <code>connect</code>, Git will use it if possible and fall back to another capability if the helper requests so when connecting (see the <code>connect</code> command under COMMANDS). When choosing between <code>fetch</code> and <code>import</code>, Git prefers <code>fetch</code>. Other frontends may have some other order of preference.</p>  </div> <div class=\"sect3\"> <h4 id=\"_miscellaneous_capabilities\">Miscellaneous capabilities</h4> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><em>option</em></dt> <dd> <p>For specifying settings like <code>verbosity</code> (how much output to write to stderr) and <code>depth</code> (how much history is wanted in the case of a shallow clone) that affect how other commands are carried out.</p> </dd> <dt class=\"hdlist1\">\n<em>refspec</em> &lt;refspec&gt;</dt> <dd> <p>For remote helpers that implement <code>import</code> or <code>export</code>, this capability allows the refs to be constrained to a private namespace, instead of writing to refs/heads or refs/remotes directly. It is recommended that all importers providing the <code>import</code> capability use this. It’s mandatory for <code>export</code>.</p>  <p>A helper advertising the capability <code>refspec refs/heads/*:refs/svn/origin/branches/*</code> is saying that, when it is asked to <code>import refs/heads/topic</code>, the stream it outputs will update the <code>refs/svn/origin/branches/topic</code> ref.</p>   <p>This capability can be advertised multiple times. The first applicable refspec takes precedence. The left-hand of refspecs advertised with this capability must cover all refs reported by the list command. If no <code>refspec</code> capability is advertised, there is an implied <code>refspec *:*</code>.</p>   <p>When writing remote-helpers for decentralized version control systems, it is advised to keep a local copy of the repository to interact with, and to let the private namespace refs point to this local repository, while the refs/remotes namespace is used to track the remote repository.</p>  </dd> <dt class=\"hdlist1\"><em>bidi-import</em></dt> <dd> <p>This modifies the <code>import</code> capability. The fast-import commands <code>cat-blob</code> and <code>ls</code> can be used by remote-helpers to retrieve information about blobs and trees that already exist in fast-import’s memory. This requires a channel from fast-import to the remote-helper. If it is advertised in addition to \"import\", Git establishes a pipe from fast-import to the remote-helper’s stdin. It follows that Git and fast-import are both connected to the remote-helper’s stdin. Because Git can send multiple commands to the remote-helper it is required that helpers that use <code>bidi-import</code> buffer all <code>import</code> commands of a batch before sending data to fast-import. This is to prevent mixing commands and fast-import responses on the helper’s stdin.</p> </dd> <dt class=\"hdlist1\">\n<em>export-marks</em> &lt;file&gt;</dt> <dd> <p>This modifies the <code>export</code> capability, instructing Git to dump the internal marks table to &lt;file&gt; when complete. For details, read up on <code>--export-marks=&lt;file&gt;</code> in <a href=\"git-fast-export\">git-fast-export[1]</a>.</p> </dd> <dt class=\"hdlist1\">\n<em>import-marks</em> &lt;file&gt;</dt> <dd> <p>This modifies the <code>export</code> capability, instructing Git to load the marks specified in &lt;file&gt; before processing any input. For details, read up on <code>--import-marks=&lt;file&gt;</code> in <a href=\"git-fast-export\">git-fast-export[1]</a>.</p> </dd> <dt class=\"hdlist1\"><em>signed-tags</em></dt> <dd> <p>This modifies the <code>export</code> capability, instructing Git to pass <code>--signed-tags=verbatim</code> to <a href=\"git-fast-export\">git-fast-export[1]</a>. In the absence of this capability, Git will use <code>--signed-tags=warn-strip</code>.</p> </dd> </dl> </div> </div> </div>\n</div>   <h2 id=\"_commands\">Commands</h2> <div class=\"sectionbody\"> <p>Commands are given by the caller on the helper’s standard input, one per line.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><em>capabilities</em></dt> <dd> <p>Lists the capabilities of the helper, one per line, ending with a blank line. Each capability may be preceded with <code>*</code>, which marks them mandatory for Git versions using the remote helper to understand. Any unknown mandatory capability is a fatal error.</p>  <p>Support for this command is mandatory.</p>  </dd> <dt class=\"hdlist1\"><em>list</em></dt> <dd> <p>Lists the refs, one per line, in the format \"&lt;value&gt; &lt;name&gt; [&lt;attr&gt; …​]\". The value may be a hex sha1 hash, \"@&lt;dest&gt;\" for a symref, or \"?\" to indicate that the helper could not get the value of the ref. A space-separated list of attributes follows the name; unrecognized attributes are ignored. The list ends with a blank line.</p>  <p>See REF LIST ATTRIBUTES for a list of currently defined attributes.</p>   <p>Supported if the helper has the \"fetch\" or \"import\" capability.</p>  </dd> <dt class=\"hdlist1\"><em>list for-push</em></dt> <dd> <p>Similar to <code>list</code>, except that it is used if and only if the caller wants to the resulting ref list to prepare push commands. A helper supporting both push and fetch can use this to distinguish for which operation the output of <code>list</code> is going to be used, possibly reducing the amount of work that needs to be performed.</p>  <p>Supported if the helper has the \"push\" or \"export\" capability.</p>  </dd> <dt class=\"hdlist1\">\n<em>option</em> &lt;name&gt; &lt;value&gt;</dt> <dd> <p>Sets the transport helper option &lt;name&gt; to &lt;value&gt;. Outputs a single line containing one of <code>ok</code> (option successfully set), <code>unsupported</code> (option not recognized) or <code>error &lt;msg&gt;</code> (option &lt;name&gt; is supported but &lt;value&gt; is not valid for it). Options should be set before other commands, and may influence the behavior of those commands.</p>  <p>See OPTIONS for a list of currently defined options.</p>   <p>Supported if the helper has the \"option\" capability.</p>  </dd> <dt class=\"hdlist1\">\n<em>fetch</em> &lt;sha1&gt; &lt;name&gt;</dt> <dd> <p>Fetches the given object, writing the necessary objects to the database. Fetch commands are sent in a batch, one per line, terminated with a blank line. Outputs a single blank line when all fetch commands in the same batch are complete. Only objects which were reported in the output of <code>list</code> with a sha1 may be fetched this way.</p>  <p>Optionally may output a <code>lock &lt;file&gt;</code> line indicating a file under GIT_DIR/objects/pack which is keeping a pack until refs can be suitably updated.</p>   <p>If option <code>check-connectivity</code> is requested, the helper must output <code>connectivity-ok</code> if the clone is self-contained and connected.</p>   <p>Supported if the helper has the \"fetch\" capability.</p>  </dd> <dt class=\"hdlist1\">\n<em>push</em> +&lt;src&gt;:&lt;dst&gt;</dt> <dd> <p>Pushes the given local &lt;src&gt; commit or branch to the remote branch described by &lt;dst&gt;. A batch sequence of one or more <code>push</code> commands is terminated with a blank line (if there is only one reference to push, a single <code>push</code> command is followed by a blank line). For example, the following would be two batches of <code>push</code>, the first asking the remote-helper to push the local ref <code>master</code> to the remote ref <code>master</code> and the local <code>HEAD</code> to the remote <code>branch</code>, and the second asking to push ref <code>foo</code> to ref <code>bar</code> (forced update requested by the <code>+</code>).</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>push refs/heads/master:refs/heads/master\npush HEAD:refs/heads/branch\n\\n\npush +refs/heads/foo:refs/heads/bar\n\\n</pre> </div> </div>  <p>Zero or more protocol options may be entered after the last <code>push</code> command, before the batch’s terminating blank line.</p>   <p>When the push is complete, outputs one or more <code>ok &lt;dst&gt;</code> or <code>error &lt;dst&gt; &lt;why&gt;?</code> lines to indicate success or failure of each pushed ref. The status report output is terminated by a blank line. The option field &lt;why&gt; may be quoted in a C style string if it contains an LF.</p>   <p>Supported if the helper has the \"push\" capability.</p>  </dd> <dt class=\"hdlist1\">\n<em>import</em> &lt;name&gt;</dt> <dd> <p>Produces a fast-import stream which imports the current value of the named ref. It may additionally import other refs as needed to construct the history efficiently. The script writes to a helper-specific private namespace. The value of the named ref should be written to a location in this namespace derived by applying the refspecs from the \"refspec\" capability to the name of the ref.</p>  <p>Especially useful for interoperability with a foreign versioning system.</p>   <p>Just like <code>push</code>, a batch sequence of one or more <code>import</code> is terminated with a blank line. For each batch of <code>import</code>, the remote helper should produce a fast-import stream terminated by a <code>done</code> command.</p>   <p>Note that if the <code>bidi-import</code> capability is used the complete batch sequence has to be buffered before starting to send data to fast-import to prevent mixing of commands and fast-import responses on the helper’s stdin.</p>   <p>Supported if the helper has the \"import\" capability.</p>  </dd> <dt class=\"hdlist1\"><em>export</em></dt> <dd> <p>Instructs the remote helper that any subsequent input is part of a fast-import stream (generated by <code>git fast-export</code>) containing objects which should be pushed to the remote.</p>  <p>Especially useful for interoperability with a foreign versioning system.</p>   <p>The <code>export-marks</code> and <code>import-marks</code> capabilities, if specified, affect this command in so far as they are passed on to <code>git fast-export</code>, which then will load/store a table of marks for local objects. This can be used to implement for incremental operations.</p>   <p>Supported if the helper has the \"export\" capability.</p>  </dd> <dt class=\"hdlist1\">\n<em>connect</em> &lt;service&gt;</dt> <dd> <p>Connects to given service. Standard input and standard output of helper are connected to specified service (git prefix is included in service name so e.g. fetching uses <code>git-upload-pack</code> as service) on remote side. Valid replies to this command are empty line (connection established), <code>fallback</code> (no smart transport support, fall back to dumb transports) and just exiting with error message printed (can’t connect, don’t bother trying to fall back). After line feed terminating the positive (empty) response, the output of service starts. After the connection ends, the remote helper exits.</p>  <p>Supported if the helper has the \"connect\" capability.</p>  </dd> </dl> </div>  <p>If a fatal error occurs, the program writes the error message to stderr and exits. The caller should expect that a suitable error message has been printed if the child closes the connection without completing a valid response for the current command.</p>   <p>Additional commands may be supported, as may be determined from capabilities reported by the helper.</p> </div>   <h2 id=\"_ref_list_attributes\">Ref list attributes</h2> <div class=\"sectionbody\"> <p>The <code>list</code> command produces a list of refs in which each ref may be followed by a list of attributes. The following ref list attributes are defined.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><em>unchanged</em></dt> <dd> <p>This ref is unchanged since the last import or fetch, although the helper cannot necessarily determine what value that produced.</p> </dd> </dl> </div>\n</div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"> <p>The following options are defined and (under suitable circumstances) set by Git if the remote helper has the <code>option</code> capability.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">\n<em>option verbosity</em> &lt;n&gt;</dt> <dd> <p>Changes the verbosity of messages displayed by the helper. A value of 0 for &lt;n&gt; means that processes operate quietly, and the helper produces only error output. 1 is the default level of verbosity, and higher values of &lt;n&gt; correspond to the number of -v flags passed on the command line.</p> </dd> <dt class=\"hdlist1\">\n<em>option progress</em> {<em>true</em>|<em>false</em>}</dt> <dd> <p>Enables (or disables) progress messages displayed by the transport helper during a command.</p> </dd> <dt class=\"hdlist1\">\n<em>option depth</em> &lt;depth&gt;</dt> <dd> <p>Deepens the history of a shallow repository.</p> </dd> <dt class=\"hdlist1\">\n<em>option followtags</em> {<em>true</em>|<em>false</em>}</dt> <dd> <p>If enabled the helper should automatically fetch annotated tag objects if the object the tag points at was transferred during the fetch command. If the tag is not fetched by the helper a second fetch command will usually be sent to ask for the tag specifically. Some helpers may be able to use this option to avoid a second network connection.</p> </dd> </dl> </div>  <p><code>option dry-run</code> {<code>true</code>|<code>false</code>}: If true, pretend the operation completed successfully, but don’t actually change any repository data. For most helpers this only applies to the <code>push</code>, if supported.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><em>option servpath &lt;c-style-quoted-path&gt;</em></dt> <dd> <p>Sets service path (--upload-pack, --receive-pack etc.) for next connect. Remote helper may support this option, but must not rely on this option being set before connect request occurs.</p> </dd> <dt class=\"hdlist1\">\n<em>option check-connectivity</em> {<em>true</em>|<em>false</em>}</dt> <dd> <p>Request the helper to check connectivity of a clone.</p> </dd> <dt class=\"hdlist1\">\n<em>option force</em> {<em>true</em>|<em>false</em>}</dt> <dd> <p>Request the helper to perform a force update. Defaults to <code>false</code>.</p> </dd> <dt class=\"hdlist1\">\n<em>option cloning {'true</em>|<em>false</em>}</dt> <dd> <p>Notify the helper this is a clone request (i.e. the current repository is guaranteed empty).</p> </dd> <dt class=\"hdlist1\">\n<em>option update-shallow {'true</em>|<em>false</em>}</dt> <dd> <p>Allow to extend .git/shallow if the new refs require it.</p> </dd> <dt class=\"hdlist1\">\n<em>option pushcert {'true</em>|<em>false</em>}</dt> <dd> <p>GPG sign pushes.</p> </dd> </dl> </div>\n</div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-remote\">git-remote[1]</a></p>   <p><a href=\"git-remote-ext\">git-remote-ext[1]</a></p>   <p><a href=\"git-remote-fd\">git-remote-fd[1]</a></p>   <p><a href=\"git-remote-testgit\">git-remote-testgit[1]</a></p>   <p><a href=\"git-fast-import\">git-fast-import[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/gitremote-helpers\" class=\"_attribution-link\">https://git-scm.com/docs/gitremote-helpers</a>\n  </p>\n</div>\n","user-manual":"<div class=\"sectionbody\">  <p>Git is a fast distributed revision control system.</p>   <p>This manual is designed to be readable by someone with basic UNIX command-line skills, but no previous knowledge of Git.</p>   <p><a href=\"#repositories-and-branches\">Repositories and Branches</a> and <a href=\"#exploring-git-history\">Exploring Git history</a> explain how to fetch and study a project using git—​read these chapters to learn how to build and test a particular version of a software project, search for regressions, and so on.</p>   <p>People needing to do actual development will also want to read <a href=\"#Developing-With-git\">Developing with Git</a> and <a href=\"#sharing-development\">Sharing development with others</a>.</p>   <p>Further chapters cover more specialized topics.</p>   <p>Comprehensive reference documentation is available through the man pages, or <a href=\"git-help\">git-help[1]</a> command. For example, for the command <code>git clone &lt;repo&gt;</code>, you can either use:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ man git-clone</pre> </div> </div>  <p>or:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git help clone</pre> </div> </div>  <p>With the latter, you can use the manual viewer of your choice; see <a href=\"git-help\">git-help[1]</a> for more information.</p>   <p>See also <a href=\"#git-quick-start\">Appendix A: Git Quick Reference</a> for a brief overview of Git commands, without any explanation.</p>   <p>Finally, see <a href=\"#todo\">Appendix B: Notes and todo list for this manual</a> for ways that you can help make this manual more complete.</p>  </div>   <h1 id=\"repositories-and-branches\">Repositories and Branches</h1> <div class=\"sect1\"> <h2 id=\"how-to-get-a-git-repository\">How to get a git repository</h2> <div class=\"sectionbody\"> <p>It will be useful to have a Git repository to experiment with as you read this manual.</p>   <p>The best way to get one is by using the <a href=\"git-clone\">git-clone[1]</a> command to download a copy of an existing repository. If you don’t already have a project in mind, here are some interesting examples:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        # Git itself (approx. 40MB download):\n$ git clone git://git.kernel.org/pub/scm/git/git.git\n        # the Linux kernel (approx. 640MB download):\n$ git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git</pre> </div> </div>  <p>The initial clone may be time-consuming for a large project, but you will only need to clone once.</p>   <p>The clone command creates a new directory named after the project (<code>git</code> or <code>linux</code> in the examples above). After you cd into this directory, you will see that it contains a copy of the project files, called the <a href=\"#def_working_tree\">working tree</a>, together with a special top-level directory named <code>.git</code>, which contains all the information about the history of the project.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"how-to-check-out\">How to check out a different version of a project</h2> <div class=\"sectionbody\"> <p>Git is best thought of as a tool for storing the history of a collection of files. It stores the history as a compressed collection of interrelated snapshots of the project’s contents. In Git each such version is called a <a href=\"#def_commit\">commit</a>.</p>   <p>Those snapshots aren’t necessarily all arranged in a single line from oldest to newest; instead, work may simultaneously proceed along parallel lines of development, called <a href=\"#def_branch\">branches</a>, which may merge and diverge.</p>   <p>A single Git repository can track development on multiple branches. It does this by keeping a list of <a href=\"#def_head\">heads</a> which reference the latest commit on each branch; the <a href=\"git-branch\">git-branch[1]</a> command shows you the list of branch heads:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git branch\n* master</pre> </div> </div>  <p>A freshly cloned repository contains a single branch head, by default named \"master\", with the working directory initialized to the state of the project referred to by that branch head.</p>   <p>Most projects also use <a href=\"#def_tag\">tags</a>. Tags, like heads, are references into the project’s history, and can be listed using the <a href=\"git-tag\">git-tag[1]</a> command:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git tag -l\nv2.6.11\nv2.6.11-tree\nv2.6.12\nv2.6.12-rc2\nv2.6.12-rc3\nv2.6.12-rc4\nv2.6.12-rc5\nv2.6.12-rc6\nv2.6.13\n...</pre> </div> </div>  <p>Tags are expected to always point at the same version of a project, while heads are expected to advance as development progresses.</p>   <p>Create a new branch head pointing to one of these versions and check it out using <a href=\"git-checkout\">git-checkout[1]</a>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout -b new v2.6.13</pre> </div> </div>  <p>The working directory then reflects the contents that the project had when it was tagged v2.6.13, and <a href=\"git-branch\">git-branch[1]</a> shows two branches, with an asterisk marking the currently checked-out branch:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git branch\n  master\n* new</pre> </div> </div>  <p>If you decide that you’d rather see version 2.6.17, you can modify the current branch to point at v2.6.17 instead, with</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git reset --hard v2.6.17</pre> </div> </div>  <p>Note that if the current branch head was your only reference to a particular point in history, then resetting that branch may leave you with no way to find the history it used to point to; so use this command carefully.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"understanding-commits\">Understanding history: commits</h2> <div class=\"sectionbody\"> <p>Every change in the history of a project is represented by a commit. The <a href=\"git-show\">git-show[1]</a> command shows the most recent commit on the current branch:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show\ncommit 17cf781661e6d38f737f15f53ab552f1e95960d7\nAuthor: Linus Torvalds &lt;torvalds@ppc970.osdl.org.(none)&gt;\nDate:   Tue Apr 19 14:11:06 2005 -0700\n\n    Remove duplicate getenv(DB_ENVIRONMENT) call\n\n    Noted by Tony Luck.\n\ndiff --git a/init-db.c b/init-db.c\nindex 65898fa..b002dc6 100644\n--- a/init-db.c\n+++ b/init-db.c\n@@ -7,7 +7,7 @@\n\n int main(int argc, char **argv)\n {\n-        char *sha1_dir = getenv(DB_ENVIRONMENT), *path;\n+        char *sha1_dir, *path;\n         int len, i;\n\n         if (mkdir(\".git\", 0755) &lt; 0) {</pre> </div> </div>  <p>As you can see, a commit shows who made the latest change, what they did, and why.</p>   <p>Every commit has a 40-hexdigit id, sometimes called the \"object name\" or the \"SHA-1 id\", shown on the first line of the <code>git show</code> output. You can usually refer to a commit by a shorter name, such as a tag or a branch name, but this longer name can also be useful. Most importantly, it is a globally unique name for this commit: so if you tell somebody else the object name (for example in email), then you are guaranteed that name will refer to the same commit in their repository that it does in yours (assuming their repository has that commit at all). Since the object name is computed as a hash over the contents of the commit, you are guaranteed that the commit can never change without its name also changing.</p>   <p>In fact, in <a href=\"#git-concepts\">Git concepts</a> we shall see that everything stored in Git history, including file data and directory contents, is stored in an object with a name that is a hash of its contents.</p>  <div class=\"sect2\"> <h3 id=\"understanding-reachability\">Understanding history: commits, parents, and reachability</h3>  <p>Every commit (except the very first commit in a project) also has a parent commit which shows what happened before this commit. Following the chain of parents will eventually take you back to the beginning of the project.</p>   <p>However, the commits do not form a simple list; Git allows lines of development to diverge and then reconverge, and the point where two lines of development reconverge is called a \"merge\". The commit representing a merge can therefore have more than one parent, with each parent representing the most recent commit on one of the lines of development leading to that point.</p>   <p>The best way to see how this works is using the <a href=\"gitk\">gitk[1]</a> command; running gitk now on a Git repository and looking for merge commits will help understand how Git organizes history.</p>   <p>In the following, we say that commit X is \"reachable\" from commit Y if commit X is an ancestor of commit Y. Equivalently, you could say that Y is a descendant of X, or that there is a chain of parents leading from commit Y to commit X.</p>  </div> <div class=\"sect2\"> <h3 id=\"history-diagrams\">Understanding history: History diagrams</h3>  <p>We will sometimes represent Git history using diagrams like the one below. Commits are shown as \"o\", and the links between them with lines drawn with - / and \\. Time goes left to right:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>         o--o--o &lt;-- Branch A\n        /\n o--o--o &lt;-- master\n        \\\n         o--o--o &lt;-- Branch B</pre> </div> </div>  <p>If we need to talk about a particular commit, the character \"o\" may be replaced with another letter or number.</p>  </div> <div class=\"sect2\"> <h3 id=\"what-is-a-branch\">Understanding history: What is a branch?</h3>  <p>When we need to be precise, we will use the word \"branch\" to mean a line of development, and \"branch head\" (or just \"head\") to mean a reference to the most recent commit on a branch. In the example above, the branch head named \"A\" is a pointer to one particular commit, but we refer to the line of three commits leading up to that point as all being part of \"branch A\".</p>   <p>However, when no confusion will result, we often just use the term \"branch\" both for branches and for branch heads.</p>  </div>\n</div> </div> <div class=\"sect1\"> <h2 id=\"manipulating-branches\">Manipulating branches</h2> <div class=\"sectionbody\"> <p>Creating, deleting, and modifying branches is quick and easy; here’s a summary of the commands:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>git branch</code></dt> <dd> <p>list all branches.</p> </dd> <dt class=\"hdlist1\"><code>git branch &lt;branch&gt;</code></dt> <dd> <p>create a new branch named <code>&lt;branch&gt;</code>, referencing the same point in history as the current branch.</p> </dd> <dt class=\"hdlist1\"><code>git branch &lt;branch&gt; &lt;start-point&gt;</code></dt> <dd> <p>create a new branch named <code>&lt;branch&gt;</code>, referencing <code>&lt;start-point&gt;</code>, which may be specified any way you like, including using a branch name or a tag name.</p> </dd> <dt class=\"hdlist1\"><code>git branch -d &lt;branch&gt;</code></dt> <dd> <p>delete the branch <code>&lt;branch&gt;</code>; if the branch is not fully merged in its upstream branch or contained in the current branch, this command will fail with a warning.</p> </dd> <dt class=\"hdlist1\"><code>git branch -D &lt;branch&gt;</code></dt> <dd> <p>delete the branch <code>&lt;branch&gt;</code> irrespective of its merged status.</p> </dd> <dt class=\"hdlist1\"><code>git checkout &lt;branch&gt;</code></dt> <dd> <p>make the current branch <code>&lt;branch&gt;</code>, updating the working directory to reflect the version referenced by <code>&lt;branch&gt;</code>.</p> </dd> <dt class=\"hdlist1\"><code>git checkout -b &lt;new&gt; &lt;start-point&gt;</code></dt> <dd> <p>create a new branch <code>&lt;new&gt;</code> referencing <code>&lt;start-point&gt;</code>, and check it out.</p> </dd> </dl> </div>  <p>The special symbol \"HEAD\" can always be used to refer to the current branch. In fact, Git uses a file named <code>HEAD</code> in the <code>.git</code> directory to remember which branch is current:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ cat .git/HEAD\nref: refs/heads/master</pre> </div> </div>\n</div> </div> <div class=\"sect1\"> <h2 id=\"detached-head\">Examining an old version without creating a new branch</h2> <div class=\"sectionbody\"> <p>The <code>git checkout</code> command normally expects a branch head, but will also accept an arbitrary commit; for example, you can check out the commit referenced by a tag:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout v2.6.17\nNote: checking out 'v2.6.17'.\n\nYou are in 'detached HEAD' state. You can look around, make experimental\nchanges and commit them, and you can discard any commits you make in this\nstate without impacting any branches by performing another checkout.\n\nIf you want to create a new branch to retain commits you create, you may\ndo so (now or later) by using -b with the checkout command again. Example:\n\n  git checkout -b new_branch_name\n\nHEAD is now at 427abfa... Linux v2.6.17</pre> </div> </div>  <p>The HEAD then refers to the SHA-1 of the commit instead of to a branch, and git branch shows that you are no longer on a branch:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ cat .git/HEAD\n427abfa28afedffadfca9dd8b067eb6d36bac53f\n$ git branch\n* (detached from v2.6.17)\n  master</pre> </div> </div>  <p>In this case we say that the HEAD is \"detached\".</p>   <p>This is an easy way to check out a particular version without having to make up a name for the new branch. You can still create a new branch (or tag) for this version later if you decide to.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"examining-remote-branches\">Examining branches from a remote repository</h2> <div class=\"sectionbody\"> <p>The \"master\" branch that was created at the time you cloned is a copy of the HEAD in the repository that you cloned from. That repository may also have had other branches, though, and your local repository keeps branches which track each of those remote branches, called remote-tracking branches, which you can view using the <code>-r</code> option to <a href=\"git-branch\">git-branch[1]</a>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git branch -r\n  origin/HEAD\n  origin/html\n  origin/maint\n  origin/man\n  origin/master\n  origin/next\n  origin/pu\n  origin/todo</pre> </div> </div>  <p>In this example, \"origin\" is called a remote repository, or \"remote\" for short. The branches of this repository are called \"remote branches\" from our point of view. The remote-tracking branches listed above were created based on the remote branches at clone time and will be updated by <code>git fetch</code> (hence <code>git pull</code>) and <code>git push</code>. See <a href=\"#Updating-a-repository-With-git-fetch\">Updating a repository with git fetch</a> for details.</p>   <p>You might want to build on one of these remote-tracking branches on a branch of your own, just as you would for a tag:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout -b my-todo-copy origin/todo</pre> </div> </div>  <p>You can also check out <code>origin/todo</code> directly to examine it or write a one-off patch. See <a href=\"#detached-head\">detached head</a>.</p>   <p>Note that the name \"origin\" is just the name that Git uses by default to refer to the repository that you cloned from.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"how-git-stores-references\">Naming branches, tags, and other references</h2> <div class=\"sectionbody\"> <p>Branches, remote-tracking branches, and tags are all references to commits. All references are named with a slash-separated path name starting with <code>refs</code>; the names we’ve been using so far are actually shorthand:</p>  <div class=\"ulist\"> <ul> <li> <p>The branch <code>test</code> is short for <code>refs/heads/test</code>.</p> </li> <li> <p>The tag <code>v2.6.18</code> is short for <code>refs/tags/v2.6.18</code>.</p> </li> <li> <p><code>origin/master</code> is short for <code>refs/remotes/origin/master</code>.</p> </li> </ul> </div>  <p>The full name is occasionally useful if, for example, there ever exists a tag and a branch with the same name.</p>   <p>(Newly created refs are actually stored in the <code>.git/refs</code> directory, under the path given by their name. However, for efficiency reasons they may also be packed together in a single file; see <a href=\"git-pack-refs\">git-pack-refs[1]</a>).</p>   <p>As another useful shortcut, the \"HEAD\" of a repository can be referred to just using the name of that repository. So, for example, \"origin\" is usually a shortcut for the HEAD branch in the repository \"origin\".</p>   <p>For the complete list of paths which Git checks for references, and the order it uses to decide which to choose when there are multiple references with the same shorthand name, see the \"SPECIFYING REVISIONS\" section of <a href=\"gitrevisions\">gitrevisions[7]</a>.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"Updating-a-repository-With-git-fetch\">Updating a repository with git fetch</h2> <div class=\"sectionbody\"> <p>After you clone a repository and commit a few changes of your own, you may wish to check the original repository for updates.</p>   <p>The <code>git-fetch</code> command, with no arguments, will update all of the remote-tracking branches to the latest version found in the original repository. It will not touch any of your own branches—​not even the \"master\" branch that was created for you on clone.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"fetching-branches\">Fetching branches from other repositories</h2> <div class=\"sectionbody\"> <p>You can also track branches from repositories other than the one you cloned from, using <a href=\"git-remote\">git-remote[1]</a>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git remote add staging git://git.kernel.org/.../gregkh/staging.git\n$ git fetch staging\n...\nFrom git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging\n * [new branch]      master     -&gt; staging/master\n * [new branch]      staging-linus -&gt; staging/staging-linus\n * [new branch]      staging-next -&gt; staging/staging-next</pre> </div> </div>  <p>New remote-tracking branches will be stored under the shorthand name that you gave <code>git remote add</code>, in this case <code>staging</code>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git branch -r\n  origin/HEAD -&gt; origin/master\n  origin/master\n  staging/master\n  staging/staging-linus\n  staging/staging-next</pre> </div> </div>  <p>If you run <code>git fetch &lt;remote&gt;</code> later, the remote-tracking branches for the named <code>&lt;remote&gt;</code> will be updated.</p>   <p>If you examine the file <code>.git/config</code>, you will see that Git has added a new stanza:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ cat .git/config\n...\n[remote \"staging\"]\n        url = git://git.kernel.org/pub/scm/linux/kernel/git/gregkh/staging.git\n        fetch = +refs/heads/*:refs/remotes/staging/*\n...</pre> </div> </div>  <p>This is what causes Git to track the remote’s branches; you may modify or delete these configuration options by editing <code>.git/config</code> with a text editor. (See the \"CONFIGURATION FILE\" section of <a href=\"git-config\">git-config[1]</a> for details.)</p> </div> </div>   <h1 id=\"exploring-git-history\">Exploring Git history</h1>  <p>Git is best thought of as a tool for storing the history of a collection of files. It does this by storing compressed snapshots of the contents of a file hierarchy, together with \"commits\" which show the relationships between these snapshots.</p>   <p>Git provides extremely flexible and fast tools for exploring the history of a project.</p>   <p>We start with one specialized tool that is useful for finding the commit that introduced a bug into a project.</p>  <div class=\"sect1\"> <h2 id=\"using-bisect\">How to use bisect to find a regression</h2> <div class=\"sectionbody\"> <p>Suppose version 2.6.18 of your project worked, but the version at \"master\" crashes. Sometimes the best way to find the cause of such a regression is to perform a brute-force search through the project’s history to find the particular commit that caused the problem. The <a href=\"git-bisect\">git-bisect[1]</a> command can help you do this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect start\n$ git bisect good v2.6.18\n$ git bisect bad master\nBisecting: 3537 revisions left to test after this\n[65934a9a028b88e83e2b0f8b36618fe503349f8e] BLOCK: Make USB storage depend on SCSI rather than selecting it [try #6]</pre> </div> </div>  <p>If you run <code>git branch</code> at this point, you’ll see that Git has temporarily moved you in \"(no branch)\". HEAD is now detached from any branch and points directly to a commit (with commit id 65934…​) that is reachable from \"master\" but not from v2.6.18. Compile and test it, and see whether it crashes. Assume it does crash. Then:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect bad\nBisecting: 1769 revisions left to test after this\n[7eff82c8b1511017ae605f0c99ac275a7e21b867] i2c-core: Drop useless bitmaskings</pre> </div> </div>  <p>checks out an older version. Continue like this, telling Git at each stage whether the version it gives you is good or bad, and notice that the number of revisions left to test is cut approximately in half each time.</p>   <p>After about 13 tests (in this case), it will output the commit id of the guilty commit. You can then examine the commit with <a href=\"git-show\">git-show[1]</a>, find out who wrote it, and mail them your bug report with the commit id. Finally, run</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect reset</pre> </div> </div>  <p>to return you to the branch you were on before.</p>   <p>Note that the version which <code>git bisect</code> checks out for you at each point is just a suggestion, and you’re free to try a different version if you think it would be a good idea. For example, occasionally you may land on a commit that broke something unrelated; run</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect visualize</pre> </div> </div>  <p>which will run gitk and label the commit it chose with a marker that says \"bisect\". Choose a safe-looking commit nearby, note its commit id, and check it out with:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git reset --hard fb47ddb2db...</pre> </div> </div>  <p>then test, run <code>bisect good</code> or <code>bisect bad</code> as appropriate, and continue.</p>   <p>Instead of <code>git bisect visualize</code> and then <code>git reset --hard\nfb47ddb2db...</code>, you might just want to tell Git that you want to skip the current commit:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect skip</pre> </div> </div>  <p>In this case, though, Git may not eventually be able to tell the first bad one between some first skipped commits and a later bad commit.</p>   <p>There are also ways to automate the bisecting process if you have a test script that can tell a good from a bad commit. See <a href=\"git-bisect\">git-bisect[1]</a> for more information about this and other <code>git\nbisect</code> features.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"naming-commits\">Naming commits</h2> <div class=\"sectionbody\"> <p>We have seen several ways of naming commits already:</p>  <div class=\"ulist\"> <ul> <li> <p>40-hexdigit object name</p> </li> <li> <p>branch name: refers to the commit at the head of the given branch</p> </li> <li> <p>tag name: refers to the commit pointed to by the given tag (we’ve seen branches and tags are special cases of <a href=\"#how-git-stores-references\">references</a>).</p> </li> <li> <p>HEAD: refers to the head of the current branch</p> </li> </ul> </div>  <p>There are many more; see the \"SPECIFYING REVISIONS\" section of the <a href=\"gitrevisions\">gitrevisions[7]</a> man page for the complete list of ways to name revisions. Some examples:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show fb47ddb2 # the first few characters of the object name\n                    # are usually enough to specify it uniquely\n$ git show HEAD^    # the parent of the HEAD commit\n$ git show HEAD^^   # the grandparent\n$ git show HEAD~4   # the great-great-grandparent</pre> </div> </div>  <p>Recall that merge commits may have more than one parent; by default, <code>^</code> and <code>~</code> follow the first parent listed in the commit, but you can also choose:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show HEAD^1   # show the first parent of HEAD\n$ git show HEAD^2   # show the second parent of HEAD</pre> </div> </div>  <p>In addition to HEAD, there are several other special names for commits:</p>   <p>Merges (to be discussed later), as well as operations such as <code>git reset</code>, which change the currently checked-out commit, generally set ORIG_HEAD to the value HEAD had before the current operation.</p>   <p>The <code>git fetch</code> operation always stores the head of the last fetched branch in FETCH_HEAD. For example, if you run <code>git fetch</code> without specifying a local branch as the target of the operation</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git fetch git://example.com/proj.git theirbranch</pre> </div> </div>  <p>the fetched commits will still be available from FETCH_HEAD.</p>   <p>When we discuss merges we’ll also see the special name MERGE_HEAD, which refers to the other branch that we’re merging in to the current branch.</p>   <p>The <a href=\"git-rev-parse\">git-rev-parse[1]</a> command is a low-level command that is occasionally useful for translating some name for a commit to the object name for that commit:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git rev-parse origin\ne05db0fd4f31dde7005f075a84f96b360d05984b</pre> </div> </div>\n</div> </div> <div class=\"sect1\"> <h2 id=\"creating-tags\">Creating tags</h2> <div class=\"sectionbody\"> <p>We can also create a tag to refer to a particular commit; after running</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git tag stable-1 1b2e1d63ff</pre> </div> </div>  <p>You can use <code>stable-1</code> to refer to the commit 1b2e1d63ff.</p>   <p>This creates a \"lightweight\" tag. If you would also like to include a comment with the tag, and possibly sign it cryptographically, then you should create a tag object instead; see the <a href=\"git-tag\">git-tag[1]</a> man page for details.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"browsing-revisions\">Browsing revisions</h2> <div class=\"sectionbody\"> <p>The <a href=\"git-log\">git-log[1]</a> command can show lists of commits. On its own, it shows all commits reachable from the parent commit; but you can also make more specific requests:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log v2.5..        # commits since (not reachable from) v2.5\n$ git log test..master        # commits reachable from master but not test\n$ git log master..test        # ...reachable from test but not master\n$ git log master...test        # ...reachable from either test or master,\n                        #    but not both\n$ git log --since=\"2 weeks ago\" # commits from the last 2 weeks\n$ git log Makefile      # commits which modify Makefile\n$ git log fs/                # ... which modify any file under fs/\n$ git log -S'foo()'        # commits which add or remove any file data\n                        # matching the string 'foo()'</pre> </div> </div>  <p>And of course you can combine all of these; the following finds commits since v2.5 which touch the <code>Makefile</code> or any file under <code>fs</code>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log v2.5.. Makefile fs/</pre> </div> </div>  <p>You can also ask git log to show patches:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log -p</pre> </div> </div>  <p>See the <code>--pretty</code> option in the <a href=\"git-log\">git-log[1]</a> man page for more display options.</p>   <p>Note that git log starts with the most recent commit and works backwards through the parents; however, since Git history can contain multiple independent lines of development, the particular order that commits are listed in may be somewhat arbitrary.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"generating-diffs\">Generating diffs</h2> <div class=\"sectionbody\"> <p>You can generate diffs between any two versions using <a href=\"git-diff\">git-diff[1]</a>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git diff master..test</pre> </div> </div>  <p>That will produce the diff between the tips of the two branches. If you’d prefer to find the diff from their common ancestor to test, you can use three dots instead of two:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git diff master...test</pre> </div> </div>  <p>Sometimes what you want instead is a set of patches; for this you can use <a href=\"git-format-patch\">git-format-patch[1]</a>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git format-patch master..test</pre> </div> </div>  <p>will generate a file with a patch for each commit reachable from test but not from master.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"viewing-old-file-versions\">Viewing old file versions</h2> <div class=\"sectionbody\"> <p>You can always view an old version of a file by just checking out the correct revision first. But sometimes it is more convenient to be able to view an old version of a single file without checking anything out; this command does that:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show v2.5:fs/locks.c</pre> </div> </div>  <p>Before the colon may be anything that names a commit, and after it may be any path to a file tracked by Git.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"history-examples\">Examples</h2> <div class=\"sectionbody\">\n<div class=\"sect2\"> <h3 id=\"counting-commits-on-a-branch\">Counting the number of commits on a branch</h3>  <p>Suppose you want to know how many commits you’ve made on <code>mybranch</code> since it diverged from <code>origin</code>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log --pretty=oneline origin..mybranch | wc -l</pre> </div> </div>  <p>Alternatively, you may often see this sort of thing done with the lower-level command <a href=\"git-rev-list\">git-rev-list[1]</a>, which just lists the SHA-1’s of all the given commits:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git rev-list origin..mybranch | wc -l</pre> </div> </div> </div> <div class=\"sect2\"> <h3 id=\"checking-for-equal-branches\">Check whether two branches point at the same history</h3>  <p>Suppose you want to check whether two branches point at the same point in history.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git diff origin..master</pre> </div> </div>  <p>will tell you whether the contents of the project are the same at the two branches; in theory, however, it’s possible that the same project contents could have been arrived at by two different historical routes. You could compare the object names:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git rev-list origin\ne05db0fd4f31dde7005f075a84f96b360d05984b\n$ git rev-list master\ne05db0fd4f31dde7005f075a84f96b360d05984b</pre> </div> </div>  <p>Or you could recall that the <code>...</code> operator selects all commits reachable from either one reference or the other but not both; so</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log origin...master</pre> </div> </div>  <p>will return no commits when the two branches are equal.</p>  </div> <div class=\"sect2\"> <h3 id=\"finding-tagged-descendants\">Find first tagged version including a given fix</h3>  <p>Suppose you know that the commit e05db0fd fixed a certain problem. You’d like to find the earliest tagged release that contains that fix.</p>   <p>Of course, there may be more than one answer—​if the history branched after commit e05db0fd, then there could be multiple \"earliest\" tagged releases.</p>   <p>You could just visually inspect the commits since e05db0fd:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ gitk e05db0fd..</pre> </div> </div>  <p>or you can use <a href=\"git-name-rev\">git-name-rev[1]</a>, which will give the commit a name based on any tag it finds pointing to one of the commit’s descendants:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git name-rev --tags e05db0fd\ne05db0fd tags/v1.5.0-rc1^0~23</pre> </div> </div>  <p>The <a href=\"git-describe\">git-describe[1]</a> command does the opposite, naming the revision using a tag on which the given commit is based:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git describe e05db0fd\nv1.5.0-rc0-260-ge05db0f</pre> </div> </div>  <p>but that may sometimes help you guess which tags might come after the given commit.</p>   <p>If you just want to verify whether a given tagged version contains a given commit, you could use <a href=\"git-merge-base\">git-merge-base[1]</a>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git merge-base e05db0fd v1.5.0-rc1\ne05db0fd4f31dde7005f075a84f96b360d05984b</pre> </div> </div>  <p>The merge-base command finds a common ancestor of the given commits, and always returns one or the other in the case where one is a descendant of the other; so the above output shows that e05db0fd actually is an ancestor of v1.5.0-rc1.</p>   <p>Alternatively, note that</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log v1.5.0-rc1..e05db0fd</pre> </div> </div>  <p>will produce empty output if and only if v1.5.0-rc1 includes e05db0fd, because it outputs only commits that are not reachable from v1.5.0-rc1.</p>   <p>As yet another alternative, the <a href=\"git-show-branch\">git-show-branch[1]</a> command lists the commits reachable from its arguments with a display on the left-hand side that indicates which arguments that commit is reachable from. So, if you run something like</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show-branch e05db0fd v1.5.0-rc0 v1.5.0-rc1 v1.5.0-rc2\n! [e05db0fd] Fix warnings in sha1_file.c - use C99 printf format if\navailable\n ! [v1.5.0-rc0] GIT v1.5.0 preview\n  ! [v1.5.0-rc1] GIT v1.5.0-rc1\n   ! [v1.5.0-rc2] GIT v1.5.0-rc2\n...</pre> </div> </div>  <p>then a line like</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>+ ++ [e05db0fd] Fix warnings in sha1_file.c - use C99 printf format if\navailable</pre> </div> </div>  <p>shows that e05db0fd is reachable from itself, from v1.5.0-rc1, and from v1.5.0-rc2, and not from v1.5.0-rc0.</p>  </div> <div class=\"sect2\"> <h3 id=\"showing-commits-unique-to-a-branch\">Showing commits unique to a given branch</h3>  <p>Suppose you would like to see all the commits reachable from the branch head named <code>master</code> but not from any other head in your repository.</p>   <p>We can list all the heads in this repository with <a href=\"git-show-ref\">git-show-ref[1]</a>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show-ref --heads\nbf62196b5e363d73353a9dcf094c59595f3153b7 refs/heads/core-tutorial\ndb768d5504c1bb46f63ee9d6e1772bd047e05bf9 refs/heads/maint\na07157ac624b2524a059a3414e99f6f44bebc1e7 refs/heads/master\n24dbc180ea14dc1aebe09f14c8ecf32010690627 refs/heads/tutorial-2\n1e87486ae06626c2f31eaa63d26fc0fd646c8af2 refs/heads/tutorial-fixes</pre> </div> </div>  <p>We can get just the branch-head names, and remove <code>master</code>, with the help of the standard utilities cut and grep:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show-ref --heads | cut -d' ' -f2 | grep -v '^refs/heads/master'\nrefs/heads/core-tutorial\nrefs/heads/maint\nrefs/heads/tutorial-2\nrefs/heads/tutorial-fixes</pre> </div> </div>  <p>And then we can ask to see all the commits reachable from master but not from these other heads:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ gitk master --not $( git show-ref --heads | cut -d' ' -f2 |\n                                grep -v '^refs/heads/master' )</pre> </div> </div>  <p>Obviously, endless variations are possible; for example, to see all commits reachable from some head but not from any tag in the repository:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ gitk $( git show-ref --heads ) --not  $( git show-ref --tags )</pre> </div> </div>  <p>(See <a href=\"gitrevisions\">gitrevisions[7]</a> for explanations of commit-selecting syntax such as <code>--not</code>.)</p>  </div> <div class=\"sect2\"> <h3 id=\"making-a-release\">Creating a changelog and tarball for a software release</h3>  <p>The <a href=\"git-archive\">git-archive[1]</a> command can create a tar or zip archive from any version of a project; for example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git archive -o latest.tar.gz --prefix=project/ HEAD</pre> </div> </div>  <p>will use HEAD to produce a gzipped tar archive in which each filename is preceded by <code>project/</code>. The output file format is inferred from the output file extension if possible, see <a href=\"git-archive\">git-archive[1]</a> for details.</p>   <p>Versions of Git older than 1.7.7 don’t know about the <code>tar.gz</code> format, you’ll need to use gzip explicitly:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git archive --format=tar --prefix=project/ HEAD | gzip &gt;latest.tar.gz</pre> </div> </div>  <p>If you’re releasing a new version of a software project, you may want to simultaneously make a changelog to include in the release announcement.</p>   <p>Linus Torvalds, for example, makes new kernel releases by tagging them, then running:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ release-script 2.6.12 2.6.13-rc6 2.6.13-rc7</pre> </div> </div>  <p>where release-script is a shell script that looks like:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>#!/bin/sh\nstable=\"$1\"\nlast=\"$2\"\nnew=\"$3\"\necho \"# git tag v$new\"\necho \"git archive --prefix=linux-$new/ v$new | gzip -9 &gt; ../linux-$new.tar.gz\"\necho \"git diff v$stable v$new | gzip -9 &gt; ../patch-$new.gz\"\necho \"git log --no-merges v$new ^v$last &gt; ../ChangeLog-$new\"\necho \"git shortlog --no-merges v$new ^v$last &gt; ../ShortLog\"\necho \"git diff --stat --summary -M v$last v$new &gt; ../diffstat-$new\"</pre> </div> </div>  <p>and then he just cut-and-pastes the output commands after verifying that they look OK.</p>  </div> <div class=\"sect2\"> <h3 id=\"Finding-commits-With-given-Content\">Finding commits referencing a file with given content</h3>  <p>Somebody hands you a copy of a file, and asks which commits modified a file such that it contained the given content either before or after the commit. You can find out with this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$  git log --raw --abbrev=40 --pretty=oneline |\n        grep -B 1 `git hash-object filename`</pre> </div> </div>  <p>Figuring out why this works is left as an exercise to the (advanced) student. The <a href=\"git-log\">git-log[1]</a>, <a href=\"git-diff-tree\">git-diff-tree[1]</a>, and <a href=\"git-hash-object\">git-hash-object[1]</a> man pages may prove helpful.</p>  </div>\n</div> </div>   <h1 id=\"Developing-With-git\">Developing with Git</h1> <div class=\"sect1\"> <h2 id=\"telling-git-your-name\">Telling git your name</h2> <div class=\"sectionbody\"> <p>Before creating any commits, you should introduce yourself to Git. The easiest way to do so is to use <a href=\"git-config\">git-config[1]</a>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git config --global user.name 'Your Name Comes Here'\n$ git config --global user.email 'you@yourdomain.example.com'</pre> </div> </div>  <p>Which will add the following to a file named <code>.gitconfig</code> in your home directory:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>[user]\n        name = Your Name Comes Here\n        email = you@yourdomain.example.com</pre> </div> </div>  <p>See the \"CONFIGURATION FILE\" section of <a href=\"git-config\">git-config[1]</a> for details on the configuration file. The file is plain text, so you can also edit it with your favorite editor.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"creating-a-new-repository\">Creating a new repository</h2> <div class=\"sectionbody\"> <p>Creating a new repository from scratch is very easy:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ mkdir project\n$ cd project\n$ git init</pre> </div> </div>  <p>If you have some initial content (say, a tarball):</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ tar xzvf project.tar.gz\n$ cd project\n$ git init\n$ git add . # include everything below ./ in the first commit:\n$ git commit</pre> </div> </div>\n</div> </div> <div class=\"sect1\"> <h2 id=\"how-to-make-a-commit\">How to make a commit</h2> <div class=\"sectionbody\"> <p>Creating a new commit takes three steps:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>Making some changes to the working directory using your favorite editor.</p> </li> <li> <p>Telling Git about your changes.</p> </li> <li> <p>Creating the commit using the content you told Git about in step 2.</p> </li> </ol> </div>  <p>In practice, you can interleave and repeat steps 1 and 2 as many times as you want: in order to keep track of what you want committed at step 3, Git maintains a snapshot of the tree’s contents in a special staging area called \"the index.\"</p>   <p>At the beginning, the content of the index will be identical to that of the HEAD. The command <code>git diff --cached</code>, which shows the difference between the HEAD and the index, should therefore produce no output at that point.</p>   <p>Modifying the index is easy:</p>   <p>To update the index with the contents of a new or modified file, use</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git add path/to/file</pre> </div> </div>  <p>To remove a file from the index and from the working tree, use</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git rm path/to/file</pre> </div> </div>  <p>After each step you can verify that</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git diff --cached</pre> </div> </div>  <p>always shows the difference between the HEAD and the index file—​this is what you’d commit if you created the commit now—​and that</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git diff</pre> </div> </div>  <p>shows the difference between the working tree and the index file.</p>   <p>Note that <code>git add</code> always adds just the current contents of a file to the index; further changes to the same file will be ignored unless you run <code>git add</code> on the file again.</p>   <p>When you’re ready, just run</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git commit</pre> </div> </div>  <p>and Git will prompt you for a commit message and then create the new commit. Check to make sure it looks like what you expected with</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show</pre> </div> </div>  <p>As a special shortcut,</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git commit -a</pre> </div> </div>  <p>will update the index with any files that you’ve modified or removed and create a commit, all in one step.</p>   <p>A number of commands are useful for keeping track of what you’re about to commit:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git diff --cached # difference between HEAD and the index; what\n                    # would be committed if you ran \"commit\" now.\n$ git diff            # difference between the index file and your\n                    # working directory; changes that would not\n                    # be included if you ran \"commit\" now.\n$ git diff HEAD            # difference between HEAD and working tree; what\n                    # would be committed if you ran \"commit -a\" now.\n$ git status            # a brief per-file summary of the above.</pre> </div> </div>  <p>You can also use <a href=\"git-gui\">git-gui[1]</a> to create commits, view changes in the index and the working tree files, and individually select diff hunks for inclusion in the index (by right-clicking on the diff hunk and choosing \"Stage Hunk For Commit\").</p> </div> </div> <div class=\"sect1\"> <h2 id=\"creating-good-commit-messages\">Creating good commit messages</h2> <div class=\"sectionbody\"> <p>Though not required, it’s a good idea to begin the commit message with a single short (less than 50 character) line summarizing the change, followed by a blank line and then a more thorough description. The text up to the first blank line in a commit message is treated as the commit title, and that title is used throughout Git. For example, <a href=\"git-format-patch\">git-format-patch[1]</a> turns a commit into email, and it uses the title on the Subject line and the rest of the commit in the body.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"ignoring-files\">Ignoring files</h2> <div class=\"sectionbody\"> <p>A project will often generate files that you do <code>not</code> want to track with Git. This typically includes files generated by a build process or temporary backup files made by your editor. Of course, <code>not</code> tracking files with Git is just a matter of <code>not</code> calling <code>git add</code> on them. But it quickly becomes annoying to have these untracked files lying around; e.g. they make <code>git add .</code> practically useless, and they keep showing up in the output of <code>git status</code>.</p>   <p>You can tell Git to ignore certain files by creating a file called <code>.gitignore</code> in the top level of your working directory, with contents such as:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre># Lines starting with '#' are considered comments.\n# Ignore any file named foo.txt.\nfoo.txt\n# Ignore (generated) html files,\n*.html\n# except foo.html which is maintained by hand.\n!foo.html\n# Ignore objects and archives.\n*.[oa]</pre> </div> </div>  <p>See <a href=\"gitignore\">gitignore[5]</a> for a detailed explanation of the syntax. You can also place .gitignore files in other directories in your working tree, and they will apply to those directories and their subdirectories. The <code>.gitignore</code> files can be added to your repository like any other files (just run <code>git add\n.gitignore</code> and <code>git commit</code>, as usual), which is convenient when the exclude patterns (such as patterns matching build output files) would also make sense for other users who clone your repository.</p>   <p>If you wish the exclude patterns to affect only certain repositories (instead of every repository for a given project), you may instead put them in a file in your repository named <code>.git/info/exclude</code>, or in any file specified by the <code>core.excludesFile</code> configuration variable. Some Git commands can also take exclude patterns directly on the command line. See <a href=\"gitignore\">gitignore[5]</a> for the details.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"how-to-merge\">How to merge</h2> <div class=\"sectionbody\"> <p>You can rejoin two diverging branches of development using <a href=\"git-merge\">git-merge[1]</a>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git merge branchname</pre> </div> </div>  <p>merges the development in the branch <code>branchname</code> into the current branch.</p>   <p>A merge is made by combining the changes made in <code>branchname</code> and the changes made up to the latest commit in your current branch since their histories forked. The work tree is overwritten by the result of the merge when this combining is done cleanly, or overwritten by a half-merged results when this combining results in conflicts. Therefore, if you have uncommitted changes touching the same files as the ones impacted by the merge, Git will refuse to proceed. Most of the time, you will want to commit your changes before you can merge, and if you don’t, then <a href=\"git-stash\">git-stash[1]</a> can take these changes away while you’re doing the merge, and reapply them afterwards.</p>   <p>If the changes are independent enough, Git will automatically complete the merge and commit the result (or reuse an existing commit in case of <a href=\"#fast-forwards\">fast-forward</a>, see below). On the other hand, if there are conflicts—​for example, if the same file is modified in two different ways in the remote branch and the local branch—​then you are warned; the output may look something like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git merge next\n 100% (4/4) done\nAuto-merged file.txt\nCONFLICT (content): Merge conflict in file.txt\nAutomatic merge failed; fix conflicts and then commit the result.</pre> </div> </div>  <p>Conflict markers are left in the problematic files, and after you resolve the conflicts manually, you can update the index with the contents and run Git commit, as you normally would when creating a new file.</p>   <p>If you examine the resulting commit using gitk, you will see that it has two parents, one pointing to the top of the current branch, and one to the top of the other branch.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"resolving-a-merge\">Resolving a merge</h2> <div class=\"sectionbody\"> <p>When a merge isn’t resolved automatically, Git leaves the index and the working tree in a special state that gives you all the information you need to help resolve the merge.</p>   <p>Files with conflicts are marked specially in the index, so until you resolve the problem and update the index, <a href=\"git-commit\">git-commit[1]</a> will fail:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git commit\nfile.txt: needs merge</pre> </div> </div>  <p>Also, <a href=\"git-status\">git-status[1]</a> will list those files as \"unmerged\", and the files with conflicts will have conflict markers added, like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:file.txt\nHello world\n=======\nGoodbye\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; 77976da35a11db4580b80ae27e8d65caf5208086:file.txt</pre> </div> </div>  <p>All you need to do is edit the files to resolve the conflicts, and then</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git add file.txt\n$ git commit</pre> </div> </div>  <p>Note that the commit message will already be filled in for you with some information about the merge. Normally you can just use this default message unchanged, but you may add additional commentary of your own if desired.</p>   <p>The above is all you need to know to resolve a simple merge. But Git also provides more information to help resolve conflicts:</p>  <div class=\"sect2\"> <h3 id=\"conflict-resolution\">Getting conflict-resolution help during a merge</h3>  <p>All of the changes that Git was able to merge automatically are already added to the index file, so <a href=\"git-diff\">git-diff[1]</a> shows only the conflicts. It uses an unusual syntax:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git diff\ndiff --cc file.txt\nindex 802992c,2b60207..0000000\n--- a/file.txt\n+++ b/file.txt\n@@@ -1,1 -1,1 +1,5 @@@\n++&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:file.txt\n +Hello world\n++=======\n+ Goodbye\n++&gt;&gt;&gt;&gt;&gt;&gt;&gt; 77976da35a11db4580b80ae27e8d65caf5208086:file.txt</pre> </div> </div>  <p>Recall that the commit which will be committed after we resolve this conflict will have two parents instead of the usual one: one parent will be HEAD, the tip of the current branch; the other will be the tip of the other branch, which is stored temporarily in MERGE_HEAD.</p>   <p>During the merge, the index holds three versions of each file. Each of these three \"file stages\" represents a different version of the file:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show :1:file.txt        # the file in a common ancestor of both branches\n$ git show :2:file.txt        # the version from HEAD.\n$ git show :3:file.txt        # the version from MERGE_HEAD.</pre> </div> </div>  <p>When you ask <a href=\"git-diff\">git-diff[1]</a> to show the conflicts, it runs a three-way diff between the conflicted merge results in the work tree with stages 2 and 3 to show only hunks whose contents come from both sides, mixed (in other words, when a hunk’s merge results come only from stage 2, that part is not conflicting and is not shown. Same for stage 3).</p>   <p>The diff above shows the differences between the working-tree version of file.txt and the stage 2 and stage 3 versions. So instead of preceding each line by a single <code>+</code> or <code>-</code>, it now uses two columns: the first column is used for differences between the first parent and the working directory copy, and the second for differences between the second parent and the working directory copy. (See the \"COMBINED DIFF FORMAT\" section of <a href=\"git-diff-files\">git-diff-files[1]</a> for a details of the format.)</p>   <p>After resolving the conflict in the obvious way (but before updating the index), the diff will look like:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git diff\ndiff --cc file.txt\nindex 802992c,2b60207..0000000\n--- a/file.txt\n+++ b/file.txt\n@@@ -1,1 -1,1 +1,1 @@@\n- Hello world\n -Goodbye\n++Goodbye world</pre> </div> </div>  <p>This shows that our resolved version deleted \"Hello world\" from the first parent, deleted \"Goodbye\" from the second parent, and added \"Goodbye world\", which was previously absent from both.</p>   <p>Some special diff options allow diffing the working directory against any of these stages:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git diff -1 file.txt                # diff against stage 1\n$ git diff --base file.txt        # same as the above\n$ git diff -2 file.txt                # diff against stage 2\n$ git diff --ours file.txt        # same as the above\n$ git diff -3 file.txt                # diff against stage 3\n$ git diff --theirs file.txt        # same as the above.</pre> </div> </div>  <p>The <a href=\"git-log\">git-log[1]</a> and <a href=\"gitk\">gitk[1]</a> commands also provide special help for merges:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log --merge\n$ gitk --merge</pre> </div> </div>  <p>These will display all commits which exist only on HEAD or on MERGE_HEAD, and which touch an unmerged file.</p>   <p>You may also use <a href=\"git-mergetool\">git-mergetool[1]</a>, which lets you merge the unmerged files using external tools such as Emacs or kdiff3.</p>   <p>Each time you resolve the conflicts in a file and update the index:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git add file.txt</pre> </div> </div>  <p>the different stages of that file will be \"collapsed\", after which <code>git diff</code> will (by default) no longer show diffs for that file.</p>  </div>\n</div> </div> <div class=\"sect1\"> <h2 id=\"undoing-a-merge\">Undoing a merge</h2> <div class=\"sectionbody\"> <p>If you get stuck and decide to just give up and throw the whole mess away, you can always return to the pre-merge state with</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git reset --hard HEAD</pre> </div> </div>  <p>Or, if you’ve already committed the merge that you want to throw away,</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git reset --hard ORIG_HEAD</pre> </div> </div>  <p>However, this last command can be dangerous in some cases—​never throw away a commit you have already committed if that commit may itself have been merged into another branch, as doing so may confuse further merges.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"fast-forwards\">Fast-forward merges</h2> <div class=\"sectionbody\"> <p>There is one special case not mentioned above, which is treated differently. Normally, a merge results in a merge commit, with two parents, one pointing at each of the two lines of development that were merged.</p>   <p>However, if the current branch is an ancestor of the other—​so every commit present in the current branch is already contained in the other branch—​then Git just performs a \"fast-forward\"; the head of the current branch is moved forward to point at the head of the merged-in branch, without any new commits being created.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"fixing-mistakes\">Fixing mistakes</h2> <div class=\"sectionbody\"> <p>If you’ve messed up the working tree, but haven’t yet committed your mistake, you can return the entire working tree to the last committed state with</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git reset --hard HEAD</pre> </div> </div>  <p>If you make a commit that you later wish you hadn’t, there are two fundamentally different ways to fix the problem:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>You can create a new commit that undoes whatever was done by the old commit. This is the correct thing if your mistake has already been made public.</p> </li> <li> <p>You can go back and modify the old commit. You should never do this if you have already made the history public; Git does not normally expect the \"history\" of a project to change, and cannot correctly perform repeated merges from a branch that has had its history changed.</p> </li> </ol> </div> <div class=\"sect2\"> <h3 id=\"reverting-a-commit\">Fixing a mistake with a new commit</h3>  <p>Creating a new commit that reverts an earlier change is very easy; just pass the <a href=\"git-revert\">git-revert[1]</a> command a reference to the bad commit; for example, to revert the most recent commit:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git revert HEAD</pre> </div> </div>  <p>This will create a new commit which undoes the change in HEAD. You will be given a chance to edit the commit message for the new commit.</p>   <p>You can also revert an earlier change, for example, the next-to-last:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git revert HEAD^</pre> </div> </div>  <p>In this case Git will attempt to undo the old change while leaving intact any changes made since then. If more recent changes overlap with the changes to be reverted, then you will be asked to fix conflicts manually, just as in the case of <a href=\"#resolving-a-merge\">resolving a merge</a>.</p>  </div> <div class=\"sect2\"> <h3 id=\"fixing-a-mistake-by-rewriting-history\">Fixing a mistake by rewriting history</h3>  <p>If the problematic commit is the most recent commit, and you have not yet made that commit public, then you may just <a href=\"#undoing-a-merge\">destroy it using <code>git reset</code></a>.</p>   <p>Alternatively, you can edit the working directory and update the index to fix your mistake, just as if you were going to <a href=\"#how-to-make-a-commit\">create a new commit</a>, then run</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git commit --amend</pre> </div> </div>  <p>which will replace the old commit by a new commit incorporating your changes, giving you a chance to edit the old commit message first.</p>   <p>Again, you should never do this to a commit that may already have been merged into another branch; use <a href=\"git-revert\">git-revert[1]</a> instead in that case.</p>   <p>It is also possible to replace commits further back in the history, but this is an advanced topic to be left for <a href=\"#cleaning-up-history\">another chapter</a>.</p>  </div> <div class=\"sect2\"> <h3 id=\"checkout-of-path\">Checking out an old version of a file</h3>  <p>In the process of undoing a previous bad change, you may find it useful to check out an older version of a particular file using <a href=\"git-checkout\">git-checkout[1]</a>. We’ve used <code>git checkout</code> before to switch branches, but it has quite different behavior if it is given a path name: the command</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout HEAD^ path/to/file</pre> </div> </div>  <p>replaces path/to/file by the contents it had in the commit HEAD^, and also updates the index to match. It does not change branches.</p>   <p>If you just want to look at an old version of the file, without modifying the working directory, you can do that with <a href=\"git-show\">git-show[1]</a>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show HEAD^:path/to/file</pre> </div> </div>  <p>which will display the given version of the file.</p>  </div> <div class=\"sect2\"> <h3 id=\"interrupted-work\">Temporarily setting aside work in progress</h3>  <p>While you are in the middle of working on something complicated, you find an unrelated but obvious and trivial bug. You would like to fix it before continuing. You can use <a href=\"git-stash\">git-stash[1]</a> to save the current state of your work, and after fixing the bug (or, optionally after doing so on a different branch and then coming back), unstash the work-in-progress changes.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git stash save \"work in progress for foo feature\"</pre> </div> </div>  <p>This command will save your changes away to the <code>stash</code>, and reset your working tree and the index to match the tip of your current branch. Then you can make your fix as usual.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>... edit and test ...\n$ git commit -a -m \"blorpl: typofix\"</pre> </div> </div>  <p>After that, you can go back to what you were working on with <code>git stash pop</code>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git stash pop</pre> </div> </div> </div>\n</div> </div> <div class=\"sect1\"> <h2 id=\"ensuring-good-performance\">Ensuring good performance</h2> <div class=\"sectionbody\"> <p>On large repositories, Git depends on compression to keep the history information from taking up too much space on disk or in memory. Some Git commands may automatically run <a href=\"git-gc\">git-gc[1]</a>, so you don’t have to worry about running it manually. However, compressing a large repository may take a while, so you may want to call <code>gc</code> explicitly to avoid automatic compression kicking in when it is not convenient.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"ensuring-reliability\">Ensuring reliability</h2> <div class=\"sectionbody\">\n<div class=\"sect2\"> <h3 id=\"checking-for-corruption\">Checking the repository for corruption</h3>  <p>The <a href=\"git-fsck\">git-fsck[1]</a> command runs a number of self-consistency checks on the repository, and reports on any problems. This may take some time.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git fsck\ndangling commit 7281251ddd2a61e38657c827739c57015671a6b3\ndangling commit 2706a059f258c6b245f298dc4ff2ccd30ec21a63\ndangling commit 13472b7c4b80851a1bc551779171dcb03655e9b5\ndangling blob 218761f9d90712d37a9c5e36f406f92202db07eb\ndangling commit bf093535a34a4d35731aa2bd90fe6b176302f14f\ndangling commit 8e4bec7f2ddaa268bef999853c25755452100f8e\ndangling tree d50bb86186bf27b681d25af89d3b5b68382e4085\ndangling tree b24c2473f1fd3d91352a624795be026d64c8841f\n...</pre> </div> </div>  <p>You will see informational messages on dangling objects. They are objects that still exist in the repository but are no longer referenced by any of your branches, and can (and will) be removed after a while with <code>gc</code>. You can run <code>git fsck --no-dangling</code> to suppress these messages, and still view real errors.</p>  </div> <div class=\"sect2\"> <h3 id=\"recovering-lost-changes\">Recovering lost changes</h3> <div class=\"sect3\"> <h4 id=\"reflogs\">Reflogs</h4>  <p>Say you modify a branch with <a href=\"#fixing-mistakes\"><code>git reset --hard</code></a>, and then realize that the branch was the only reference you had to that point in history.</p>   <p>Fortunately, Git also keeps a log, called a \"reflog\", of all the previous values of each branch. So in this case you can still find the old history using, for example,</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log master@{1}</pre> </div> </div>  <p>This lists the commits reachable from the previous version of the <code>master</code> branch head. This syntax can be used with any Git command that accepts a commit, not just with <code>git log</code>. Some other examples:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show master@{2}                # See where the branch pointed 2,\n$ git show master@{3}                # 3, ... changes ago.\n$ gitk master@{yesterday}        # See where it pointed yesterday,\n$ gitk master@{\"1 week ago\"}        # ... or last week\n$ git log --walk-reflogs master        # show reflog entries for master</pre> </div> </div>  <p>A separate reflog is kept for the HEAD, so</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show HEAD@{\"1 week ago\"}</pre> </div> </div>  <p>will show what HEAD pointed to one week ago, not what the current branch pointed to one week ago. This allows you to see the history of what you’ve checked out.</p>   <p>The reflogs are kept by default for 30 days, after which they may be pruned. See <a href=\"git-reflog\">git-reflog[1]</a> and <a href=\"git-gc\">git-gc[1]</a> to learn how to control this pruning, and see the \"SPECIFYING REVISIONS\" section of <a href=\"gitrevisions\">gitrevisions[7]</a> for details.</p>   <p>Note that the reflog history is very different from normal Git history. While normal history is shared by every repository that works on the same project, the reflog history is not shared: it tells you only about how the branches in your local repository have changed over time.</p>  </div> <div class=\"sect3\"> <h4 id=\"dangling-object-recovery\">Examining dangling objects</h4>  <p>In some situations the reflog may not be able to save you. For example, suppose you delete a branch, then realize you need the history it contained. The reflog is also deleted; however, if you have not yet pruned the repository, then you may still be able to find the lost commits in the dangling objects that <code>git fsck</code> reports. See <a href=\"#dangling-objects\">Dangling objects</a> for the details.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git fsck\ndangling commit 7281251ddd2a61e38657c827739c57015671a6b3\ndangling commit 2706a059f258c6b245f298dc4ff2ccd30ec21a63\ndangling commit 13472b7c4b80851a1bc551779171dcb03655e9b5\n...</pre> </div> </div>  <p>You can examine one of those dangling commits with, for example,</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ gitk 7281251ddd --not --all</pre> </div> </div>  <p>which does what it sounds like: it says that you want to see the commit history that is described by the dangling commit(s), but not the history that is described by all your existing branches and tags. Thus you get exactly the history reachable from that commit that is lost. (And notice that it might not be just one commit: we only report the \"tip of the line\" as being dangling, but there might be a whole deep and complex commit history that was dropped.)</p>   <p>If you decide you want the history back, you can always create a new reference pointing to it, for example, a new branch:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git branch recovered-branch 7281251ddd</pre> </div> </div>  <p>Other types of dangling objects (blobs and trees) are also possible, and dangling objects can arise in other situations.</p>  </div> </div>\n</div> </div>   <h1 id=\"sharing-development\">Sharing development with others</h1> <div class=\"sect1\"> <h2 id=\"getting-updates-With-git-pull\">Getting updates with git pull</h2> <div class=\"sectionbody\"> <p>After you clone a repository and commit a few changes of your own, you may wish to check the original repository for updates and merge them into your own work.</p>   <p>We have already seen <a href=\"#Updating-a-repository-With-git-fetch\">how to keep remote-tracking branches up to date</a> with <a href=\"git-fetch\">git-fetch[1]</a>, and how to merge two branches. So you can merge in changes from the original repository’s master branch with:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git fetch\n$ git merge origin/master</pre> </div> </div>  <p>However, the <a href=\"git-pull\">git-pull[1]</a> command provides a way to do this in one step:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git pull origin master</pre> </div> </div>  <p>In fact, if you have <code>master</code> checked out, then this branch has been configured by <code>git clone</code> to get changes from the HEAD branch of the origin repository. So often you can accomplish the above with just a simple</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git pull</pre> </div> </div>  <p>This command will fetch changes from the remote branches to your remote-tracking branches <code>origin/*</code>, and merge the default branch into the current branch.</p>   <p>More generally, a branch that is created from a remote-tracking branch will pull by default from that branch. See the descriptions of the <code>branch.&lt;name&gt;.remote</code> and <code>branch.&lt;name&gt;.merge</code> options in <a href=\"git-config\">git-config[1]</a>, and the discussion of the <code>--track</code> option in <a href=\"git-checkout\">git-checkout[1]</a>, to learn how to control these defaults.</p>   <p>In addition to saving you keystrokes, <code>git pull</code> also helps you by producing a default commit message documenting the branch and repository that you pulled from.</p>   <p>(But note that no such commit will be created in the case of a <a href=\"#fast-forwards\">fast-forward</a>; instead, your branch will just be updated to point to the latest commit from the upstream branch.)</p>   <p>The <code>git pull</code> command can also be given <code>.</code> as the \"remote\" repository, in which case it just merges in a branch from the current repository; so the commands</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git pull . branch\n$ git merge branch</pre> </div> </div>  <p>are roughly equivalent.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"submitting-patches\">Submitting patches to a project</h2> <div class=\"sectionbody\"> <p>If you just have a few changes, the simplest way to submit them may just be to send them as patches in email:</p>   <p>First, use <a href=\"git-format-patch\">git-format-patch[1]</a>; for example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git format-patch origin</pre> </div> </div>  <p>will produce a numbered series of files in the current directory, one for each patch in the current branch but not in <code>origin/HEAD</code>.</p>   <p><code>git format-patch</code> can include an initial \"cover letter\". You can insert commentary on individual patches after the three dash line which <code>format-patch</code> places after the commit message but before the patch itself. If you use <code>git notes</code> to track your cover letter material, <code>git format-patch --notes</code> will include the commit’s notes in a similar manner.</p>   <p>You can then import these into your mail client and send them by hand. However, if you have a lot to send at once, you may prefer to use the <a href=\"git-send-email\">git-send-email[1]</a> script to automate the process. Consult the mailing list for your project first to determine their requirements for submitting patches.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"importing-patches\">Importing patches to a project</h2> <div class=\"sectionbody\"> <p>Git also provides a tool called <a href=\"git-am\">git-am[1]</a> (am stands for \"apply mailbox\"), for importing such an emailed series of patches. Just save all of the patch-containing messages, in order, into a single mailbox file, say <code>patches.mbox</code>, then run</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git am -3 patches.mbox</pre> </div> </div>  <p>Git will apply each patch in order; if any conflicts are found, it will stop, and you can fix the conflicts as described in \"<a href=\"#resolving-a-merge\">Resolving a merge</a>\". (The <code>-3</code> option tells Git to perform a merge; if you would prefer it just to abort and leave your tree and index untouched, you may omit that option.)</p>   <p>Once the index is updated with the results of the conflict resolution, instead of creating a new commit, just run</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git am --continue</pre> </div> </div>  <p>and Git will create the commit for you and continue applying the remaining patches from the mailbox.</p>   <p>The final result will be a series of commits, one for each patch in the original mailbox, with authorship and commit log message each taken from the message containing each patch.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"public-repositories\">Public git repositories</h2> <div class=\"sectionbody\"> <p>Another way to submit changes to a project is to tell the maintainer of that project to pull the changes from your repository using <a href=\"git-pull\">git-pull[1]</a>. In the section \"<a href=\"#getting-updates-With-git-pull\">Getting updates with <code>git pull</code></a>\" we described this as a way to get updates from the \"main\" repository, but it works just as well in the other direction.</p>   <p>If you and the maintainer both have accounts on the same machine, then you can just pull changes from each other’s repositories directly; commands that accept repository URLs as arguments will also accept a local directory name:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git clone /path/to/repository\n$ git pull /path/to/other/repository</pre> </div> </div>  <p>or an ssh URL:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git clone ssh://yourhost/~you/repository</pre> </div> </div>  <p>For projects with few developers, or for synchronizing a few private repositories, this may be all you need.</p>   <p>However, the more common way to do this is to maintain a separate public repository (usually on a different host) for others to pull changes from. This is usually more convenient, and allows you to cleanly separate private work in progress from publicly visible work.</p>   <p>You will continue to do your day-to-day work in your personal repository, but periodically \"push\" changes from your personal repository into your public repository, allowing other developers to pull from that repository. So the flow of changes, in a situation where there is one other developer with a public repository, looks like this:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>                      you push\nyour personal repo ------------------&gt; your public repo\n  ^                                     |\n  |                                     |\n  | you pull                            | they pull\n  |                                     |\n  |                                     |\n      |               they push             V\ntheir public repo &lt;------------------- their repo</pre> </div> </div>  <p>We explain how to do this in the following sections.</p>  <div class=\"sect2\"> <h3 id=\"setting-up-a-public-repository\">Setting up a public repository</h3>  <p>Assume your personal repository is in the directory <code>~/proj</code>. We first create a new clone of the repository and tell <code>git daemon</code> that it is meant to be public:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git clone --bare ~/proj proj.git\n$ touch proj.git/git-daemon-export-ok</pre> </div> </div>  <p>The resulting directory proj.git contains a \"bare\" git repository—​it is just the contents of the <code>.git</code> directory, without any files checked out around it.</p>   <p>Next, copy <code>proj.git</code> to the server where you plan to host the public repository. You can use scp, rsync, or whatever is most convenient.</p>  </div> <div class=\"sect2\"> <h3 id=\"exporting-via-git\">Exporting a Git repository via the Git protocol</h3>  <p>This is the preferred method.</p>   <p>If someone else administers the server, they should tell you what directory to put the repository in, and what <code>git://</code> URL it will appear at. You can then skip to the section \"<a href=\"#pushing-changes-to-a-public-repository\">Pushing changes to a public repository</a>\", below.</p>   <p>Otherwise, all you need to do is start <a href=\"git-daemon\">git-daemon[1]</a>; it will listen on port 9418. By default, it will allow access to any directory that looks like a Git directory and contains the magic file git-daemon-export-ok. Passing some directory paths as <code>git daemon</code> arguments will further restrict the exports to those paths.</p>   <p>You can also run <code>git daemon</code> as an inetd service; see the <a href=\"git-daemon\">git-daemon[1]</a> man page for details. (See especially the examples section.)</p>  </div> <div class=\"sect2\"> <h3 id=\"exporting-via-http\">Exporting a git repository via HTTP</h3>  <p>The Git protocol gives better performance and reliability, but on a host with a web server set up, HTTP exports may be simpler to set up.</p>   <p>All you need to do is place the newly created bare Git repository in a directory that is exported by the web server, and make some adjustments to give web clients some extra information they need:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ mv proj.git /home/you/public_html/proj.git\n$ cd proj.git\n$ git --bare update-server-info\n$ mv hooks/post-update.sample hooks/post-update</pre> </div> </div>  <p>(For an explanation of the last two lines, see <a href=\"git-update-server-info\">git-update-server-info[1]</a> and <a href=\"githooks\">githooks[5]</a>.)</p>   <p>Advertise the URL of <code>proj.git</code>. Anybody else should then be able to clone or pull from that URL, for example with a command line like:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git clone http://yourserver.com/~you/proj.git</pre> </div> </div>  <p>(See also <a href=\"https://git-scm.com/docs/howto/setup-git-server-over-http.html\">setup-git-server-over-http</a> for a slightly more sophisticated setup using WebDAV which also allows pushing over HTTP.)</p>  </div> <div class=\"sect2\"> <h3 id=\"pushing-changes-to-a-public-repository\">Pushing changes to a public repository</h3>  <p>Note that the two techniques outlined above (exporting via <a href=\"#exporting-via-http\">http</a> or <a href=\"#exporting-via-git\">git</a>) allow other maintainers to fetch your latest changes, but they do not allow write access, which you will need to update the public repository with the latest changes created in your private repository.</p>   <p>The simplest way to do this is using <a href=\"git-push\">git-push[1]</a> and ssh; to update the remote branch named <code>master</code> with the latest state of your branch named <code>master</code>, run</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git push ssh://yourserver.com/~you/proj.git master:master</pre> </div> </div>  <p>or just</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git push ssh://yourserver.com/~you/proj.git master</pre> </div> </div>  <p>As with <code>git fetch</code>, <code>git push</code> will complain if this does not result in a <a href=\"#fast-forwards\">fast-forward</a>; see the following section for details on handling this case.</p>   <p>Note that the target of a <code>push</code> is normally a <a href=\"#def_bare_repository\">bare</a> repository. You can also push to a repository that has a checked-out working tree, but a push to update the currently checked-out branch is denied by default to prevent confusion. See the description of the receive.denyCurrentBranch option in <a href=\"git-config\">git-config[1]</a> for details.</p>   <p>As with <code>git fetch</code>, you may also set up configuration options to save typing; so, for example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git remote add public-repo ssh://yourserver.com/~you/proj.git</pre> </div> </div>  <p>adds the following to <code>.git/config</code>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>[remote \"public-repo\"]\n        url = yourserver.com:proj.git\n        fetch = +refs/heads/*:refs/remotes/example/*</pre> </div> </div>  <p>which lets you do the same push with just</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git push public-repo master</pre> </div> </div>  <p>See the explanations of the <code>remote.&lt;name&gt;.url</code>, <code>branch.&lt;name&gt;.remote</code>, and <code>remote.&lt;name&gt;.push</code> options in <a href=\"git-config\">git-config[1]</a> for details.</p>  </div> <div class=\"sect2\"> <h3 id=\"forcing-push\">What to do when a push fails</h3>  <p>If a push would not result in a <a href=\"#fast-forwards\">fast-forward</a> of the remote branch, then it will fail with an error like:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>error: remote 'refs/heads/master' is not an ancestor of\n local  'refs/heads/master'.\n Maybe you are not up-to-date and need to pull first?\nerror: failed to push to 'ssh://yourserver.com/~you/proj.git'</pre> </div> </div>  <p>This can happen, for example, if you:</p>  <div class=\"ulist\"> <ul> <li> <p>use <code>git reset --hard</code> to remove already-published commits, or</p> </li> <li> <p>use <code>git commit --amend</code> to replace already-published commits (as in <a href=\"#fixing-a-mistake-by-rewriting-history\">Fixing a mistake by rewriting history</a>), or</p> </li> <li> <p>use <code>git rebase</code> to rebase any already-published commits (as in <a href=\"#using-git-rebase\">Keeping a patch series up to date using git rebase</a>).</p> </li> </ul> </div>  <p>You may force <code>git push</code> to perform the update anyway by preceding the branch name with a plus sign:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git push ssh://yourserver.com/~you/proj.git +master</pre> </div> </div>  <p>Note the addition of the <code>+</code> sign. Alternatively, you can use the <code>-f</code> flag to force the remote update, as in:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git push -f ssh://yourserver.com/~you/proj.git master</pre> </div> </div>  <p>Normally whenever a branch head in a public repository is modified, it is modified to point to a descendant of the commit that it pointed to before. By forcing a push in this situation, you break that convention. (See <a href=\"#problems-With-rewriting-history\">Problems with rewriting history</a>.)</p>   <p>Nevertheless, this is a common practice for people that need a simple way to publish a work-in-progress patch series, and it is an acceptable compromise as long as you warn other developers that this is how you intend to manage the branch.</p>   <p>It’s also possible for a push to fail in this way when other people have the right to push to the same repository. In that case, the correct solution is to retry the push after first updating your work: either by a pull, or by a fetch followed by a rebase; see the <a href=\"#setting-up-a-shared-repository\">next section</a> and <a href=\"gitcvs-migration\">gitcvs-migration[7]</a> for more.</p>  </div> <div class=\"sect2\"> <h3 id=\"setting-up-a-shared-repository\">Setting up a shared repository</h3>  <p>Another way to collaborate is by using a model similar to that commonly used in CVS, where several developers with special rights all push to and pull from a single shared repository. See <a href=\"gitcvs-migration\">gitcvs-migration[7]</a> for instructions on how to set this up.</p>   <p>However, while there is nothing wrong with Git’s support for shared repositories, this mode of operation is not generally recommended, simply because the mode of collaboration that Git supports—​by exchanging patches and pulling from public repositories—​has so many advantages over the central shared repository:</p>  <div class=\"ulist\"> <ul> <li> <p>Git’s ability to quickly import and merge patches allows a single maintainer to process incoming changes even at very high rates. And when that becomes too much, <code>git pull</code> provides an easy way for that maintainer to delegate this job to other maintainers while still allowing optional review of incoming changes.</p> </li> <li> <p>Since every developer’s repository has the same complete copy of the project history, no repository is special, and it is trivial for another developer to take over maintenance of a project, either by mutual agreement, or because a maintainer becomes unresponsive or difficult to work with.</p> </li> <li> <p>The lack of a central group of \"committers\" means there is less need for formal decisions about who is \"in\" and who is \"out\".</p> </li> </ul> </div> </div> <div class=\"sect2\"> <h3 id=\"setting-up-gitweb\">Allowing web browsing of a repository</h3>  <p>The gitweb cgi script provides users an easy way to browse your project’s revisions, file contents and logs without having to install Git. Features like RSS/Atom feeds and blame/annotation details may optionally be enabled.</p>   <p>The <a href=\"git-instaweb\">git-instaweb[1]</a> command provides a simple way to start browsing the repository using gitweb. The default server when using instaweb is lighttpd.</p>   <p>See the file gitweb/INSTALL in the Git source tree and <a href=\"gitweb\">gitweb[1]</a> for instructions on details setting up a permanent installation with a CGI or Perl capable server.</p>  </div>\n</div> </div> <div class=\"sect1\"> <h2 id=\"how-to-get-a-git-repository-with-minimal-history\">How to get a git repository with minimal history</h2> <div class=\"sectionbody\"> <p>A <a href=\"#def_shallow_clone\">shallow clone</a>, with its truncated history, is useful when one is interested only in recent history of a project and getting full history from the upstream is expensive.</p>   <p>A <a href=\"#def_shallow_clone\">shallow clone</a> is created by specifying the <a href=\"git-clone\">git-clone[1]</a> <code>--depth</code> switch. The depth can later be changed with the <a href=\"git-fetch\">git-fetch[1]</a> <code>--depth</code> switch, or full history restored with <code>--unshallow</code>.</p>   <p>Merging inside a <a href=\"#def_shallow_clone\">shallow clone</a> will work as long as a merge base is in the recent history. Otherwise, it will be like merging unrelated histories and may have to result in huge conflicts. This limitation may make such a repository unsuitable to be used in merge based workflows.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"sharing-development-examples\">Examples</h2> <div class=\"sectionbody\"><div class=\"sect2\"> <h3 id=\"maintaining-topic-branches\">Maintaining topic branches for a Linux subsystem maintainer</h3>  <p>This describes how Tony Luck uses Git in his role as maintainer of the IA64 architecture for the Linux kernel.</p>   <p>He uses two public branches:</p>  <div class=\"ulist\"> <ul> <li> <p>A \"test\" tree into which patches are initially placed so that they can get some exposure when integrated with other ongoing development. This tree is available to Andrew for pulling into -mm whenever he wants.</p> </li> <li> <p>A \"release\" tree into which tested patches are moved for final sanity checking, and as a vehicle to send them upstream to Linus (by sending him a \"please pull\" request.)</p> </li> </ul> </div>  <p>He also uses a set of temporary branches (\"topic branches\"), each containing a logical grouping of patches.</p>   <p>To set this up, first create your work tree by cloning Linus’s public tree:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git work\n$ cd work</pre> </div> </div>  <p>Linus’s tree will be stored in the remote-tracking branch named origin/master, and can be updated using <a href=\"git-fetch\">git-fetch[1]</a>; you can track other public trees using <a href=\"git-remote\">git-remote[1]</a> to set up a \"remote\" and <a href=\"git-fetch\">git-fetch[1]</a> to keep them up-to-date; see <a href=\"#repositories-and-branches\">Repositories and Branches</a>.</p>   <p>Now create the branches in which you are going to work; these start out at the current tip of origin/master branch, and should be set up (using the <code>--track</code> option to <a href=\"git-branch\">git-branch[1]</a>) to merge changes in from Linus by default.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git branch --track test origin/master\n$ git branch --track release origin/master</pre> </div> </div>  <p>These can be easily kept up to date using <a href=\"git-pull\">git-pull[1]</a>.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout test &amp;&amp; git pull\n$ git checkout release &amp;&amp; git pull</pre> </div> </div>  <p>Important note! If you have any local changes in these branches, then this merge will create a commit object in the history (with no local changes Git will simply do a \"fast-forward\" merge). Many people dislike the \"noise\" that this creates in the Linux history, so you should avoid doing this capriciously in the <code>release</code> branch, as these noisy commits will become part of the permanent history when you ask Linus to pull from the release branch.</p>   <p>A few configuration variables (see <a href=\"git-config\">git-config[1]</a>) can make it easy to push both branches to your public tree. (See <a href=\"#setting-up-a-public-repository\">Setting up a public repository</a>.)</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ cat &gt;&gt; .git/config &lt;&lt;EOF\n[remote \"mytree\"]\n        url =  master.kernel.org:/pub/scm/linux/kernel/git/aegl/linux.git\n        push = release\n        push = test\nEOF</pre> </div> </div>  <p>Then you can push both the test and release trees using <a href=\"git-push\">git-push[1]</a>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git push mytree</pre> </div> </div>  <p>or push just one of the test and release branches using:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git push mytree test</pre> </div> </div>  <p>or</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git push mytree release</pre> </div> </div>  <p>Now to apply some patches from the community. Think of a short snappy name for a branch to hold this patch (or related group of patches), and create a new branch from a recent stable tag of Linus’s branch. Picking a stable base for your branch will: 1) help you: by avoiding inclusion of unrelated and perhaps lightly tested changes 2) help future bug hunters that use <code>git bisect</code> to find problems</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout -b speed-up-spinlocks v2.6.35</pre> </div> </div>  <p>Now you apply the patch(es), run some tests, and commit the change(s). If the patch is a multi-part series, then you should apply each as a separate commit to this branch.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ ... patch ... test  ... commit [ ... patch ... test ... commit ]*</pre> </div> </div>  <p>When you are happy with the state of this change, you can merge it into the \"test\" branch in preparation to make it public:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout test &amp;&amp; git merge speed-up-spinlocks</pre> </div> </div>  <p>It is unlikely that you would have any conflicts here …​ but you might if you spent a while on this step and had also pulled new versions from upstream.</p>   <p>Sometime later when enough time has passed and testing done, you can pull the same branch into the <code>release</code> tree ready to go upstream. This is where you see the value of keeping each patch (or patch series) in its own branch. It means that the patches can be moved into the <code>release</code> tree in any order.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout release &amp;&amp; git merge speed-up-spinlocks</pre> </div> </div>  <p>After a while, you will have a number of branches, and despite the well chosen names you picked for each of them, you may forget what they are for, or what status they are in. To get a reminder of what changes are in a specific branch, use:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log linux..branchname | git shortlog</pre> </div> </div>  <p>To see whether it has already been merged into the test or release branches, use:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log test..branchname</pre> </div> </div>  <p>or</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log release..branchname</pre> </div> </div>  <p>(If this branch has not yet been merged, you will see some log entries. If it has been merged, then there will be no output.)</p>   <p>Once a patch completes the great cycle (moving from test to release, then pulled by Linus, and finally coming back into your local <code>origin/master</code> branch), the branch for this change is no longer needed. You detect this when the output from:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log origin..branchname</pre> </div> </div>  <p>is empty. At this point the branch can be deleted:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git branch -d branchname</pre> </div> </div>  <p>Some changes are so trivial that it is not necessary to create a separate branch and then merge into each of the test and release branches. For these changes, just apply directly to the <code>release</code> branch, and then merge that into the <code>test</code> branch.</p>   <p>After pushing your work to <code>mytree</code>, you can use <a href=\"git-request-pull\">git-request-pull[1]</a> to prepare a \"please pull\" request message to send to Linus:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git push mytree\n$ git request-pull origin mytree release</pre> </div> </div>  <p>Here are some of the scripts that simplify all this even further.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>==== update script ====\n# Update a branch in my Git tree.  If the branch to be updated\n# is origin, then pull from kernel.org.  Otherwise merge\n# origin/master branch into test|release branch\n\ncase \"$1\" in\ntest|release)\n        git checkout $1 &amp;&amp; git pull . origin\n        ;;\norigin)\n        before=$(git rev-parse refs/remotes/origin/master)\n        git fetch origin\n        after=$(git rev-parse refs/remotes/origin/master)\n        if [ $before != $after ]\n        then\n                git log $before..$after | git shortlog\n        fi\n        ;;\n*)\n        echo \"usage: $0 origin|test|release\" 1&gt;&amp;2\n        exit 1\n        ;;\nesac</pre> </div> </div> <div class=\"listingblock\"> <div class=\"content\"> <pre>==== merge script ====\n# Merge a branch into either the test or release branch\n\npname=$0\n\nusage()\n{\n        echo \"usage: $pname branch test|release\" 1&gt;&amp;2\n        exit 1\n}\n\ngit show-ref -q --verify -- refs/heads/\"$1\" || {\n        echo \"Can't see branch &lt;$1&gt;\" 1&gt;&amp;2\n        usage\n}\n\ncase \"$2\" in\ntest|release)\n        if [ $(git log $2..$1 | wc -c) -eq 0 ]\n        then\n                echo $1 already merged into $2 1&gt;&amp;2\n                exit 1\n        fi\n        git checkout $2 &amp;&amp; git pull . $1\n        ;;\n*)\n        usage\n        ;;\nesac</pre> </div> </div> <div class=\"listingblock\"> <div class=\"content\"> <pre>==== status script ====\n# report on status of my ia64 Git tree\n\ngb=$(tput setab 2)\nrb=$(tput setab 1)\nrestore=$(tput setab 9)\n\nif [ `git rev-list test..release | wc -c` -gt 0 ]\nthen\n        echo $rb Warning: commits in release that are not in test $restore\n        git log test..release\nfi\n\nfor branch in `git show-ref --heads | sed 's|^.*/||'`\ndo\n        if [ $branch = test -o $branch = release ]\n        then\n                continue\n        fi\n\n        echo -n $gb ======= $branch ====== $restore \" \"\n        status=\n        for ref in test release origin/master\n        do\n                if [ `git rev-list $ref..$branch | wc -c` -gt 0 ]\n                then\n                        status=$status${ref:0:1}\n                fi\n        done\n        case $status in\n        trl)\n                echo $rb Need to pull into test $restore\n                ;;\n        rl)\n                echo \"In test\"\n                ;;\n        l)\n                echo \"Waiting for linus\"\n                ;;\n        \"\")\n                echo $rb All done $restore\n                ;;\n        *)\n                echo $rb \"&lt;$status&gt;\" $restore\n                ;;\n        esac\n        git log origin/master..$branch | git shortlog\ndone</pre> </div> </div> </div></div> </div>   <h1 id=\"cleaning-up-history\">Rewriting history and maintaining patch series</h1>  <p>Normally commits are only added to a project, never taken away or replaced. Git is designed with this assumption, and violating it will cause Git’s merge machinery (for example) to do the wrong thing.</p>   <p>However, there is a situation in which it can be useful to violate this assumption.</p>  <div class=\"sect1\"> <h2 id=\"patch-series\">Creating the perfect patch series</h2> <div class=\"sectionbody\"> <p>Suppose you are a contributor to a large project, and you want to add a complicated feature, and to present it to the other developers in a way that makes it easy for them to read your changes, verify that they are correct, and understand why you made each change.</p>   <p>If you present all of your changes as a single patch (or commit), they may find that it is too much to digest all at once.</p>   <p>If you present them with the entire history of your work, complete with mistakes, corrections, and dead ends, they may be overwhelmed.</p>   <p>So the ideal is usually to produce a series of patches such that:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>Each patch can be applied in order.</p> </li> <li> <p>Each patch includes a single logical change, together with a message explaining the change.</p> </li> <li> <p>No patch introduces a regression: after applying any initial part of the series, the resulting project still compiles and works, and has no bugs that it didn’t have before.</p> </li> <li> <p>The complete series produces the same end result as your own (probably much messier!) development process did.</p> </li> </ol> </div>  <p>We will introduce some tools that can help you do this, explain how to use them, and then explain some of the problems that can arise because you are rewriting history.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"using-git-rebase\">Keeping a patch series up to date using git rebase</h2> <div class=\"sectionbody\"> <p>Suppose that you create a branch <code>mywork</code> on a remote-tracking branch <code>origin</code>, and create some commits on top of it:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout -b mywork origin\n$ vi file.txt\n$ git commit\n$ vi otherfile.txt\n$ git commit\n...</pre> </div> </div>  <p>You have performed no merges into mywork, so it is just a simple linear sequence of patches on top of <code>origin</code>:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre> o--o--O &lt;-- origin\n        \\\n         a--b--c &lt;-- mywork</pre> </div> </div>  <p>Some more interesting work has been done in the upstream project, and <code>origin</code> has advanced:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre> o--o--O--o--o--o &lt;-- origin\n        \\\n         a--b--c &lt;-- mywork</pre> </div> </div>  <p>At this point, you could use <code>pull</code> to merge your changes back in; the result would create a new merge commit, like this:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre> o--o--O--o--o--o &lt;-- origin\n        \\        \\\n         a--b--c--m &lt;-- mywork</pre> </div> </div>  <p>However, if you prefer to keep the history in mywork a simple series of commits without any merges, you may instead choose to use <a href=\"git-rebase\">git-rebase[1]</a>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout mywork\n$ git rebase origin</pre> </div> </div>  <p>This will remove each of your commits from mywork, temporarily saving them as patches (in a directory named <code>.git/rebase-apply</code>), update mywork to point at the latest version of origin, then apply each of the saved patches to the new mywork. The result will look like:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre> o--o--O--o--o--o &lt;-- origin\n                 \\\n                  a'--b'--c' &lt;-- mywork</pre> </div> </div>  <p>In the process, it may discover conflicts. In that case it will stop and allow you to fix the conflicts; after fixing conflicts, use <code>git add</code> to update the index with those contents, and then, instead of running <code>git commit</code>, just run</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git rebase --continue</pre> </div> </div>  <p>and Git will continue applying the rest of the patches.</p>   <p>At any point you may use the <code>--abort</code> option to abort this process and return mywork to the state it had before you started the rebase:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git rebase --abort</pre> </div> </div>  <p>If you need to reorder or edit a number of commits in a branch, it may be easier to use <code>git rebase -i</code>, which allows you to reorder and squash commits, as well as marking them for individual editing during the rebase. See <a href=\"#interactive-rebase\">Using interactive rebases</a> for details, and <a href=\"#reordering-patch-series\">Reordering or selecting from a patch series</a> for alternatives.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"rewriting-one-commit\">Rewriting a single commit</h2> <div class=\"sectionbody\"> <p>We saw in <a href=\"#fixing-a-mistake-by-rewriting-history\">Fixing a mistake by rewriting history</a> that you can replace the most recent commit using</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git commit --amend</pre> </div> </div>  <p>which will replace the old commit by a new commit incorporating your changes, giving you a chance to edit the old commit message first. This is useful for fixing typos in your last commit, or for adjusting the patch contents of a poorly staged commit.</p>   <p>If you need to amend commits from deeper in your history, you can use <a href=\"#interactive-rebase\">interactive rebase’s <code>edit</code> instruction</a>.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"reordering-patch-series\">Reordering or selecting from a patch series</h2> <div class=\"sectionbody\"> <p>Sometimes you want to edit a commit deeper in your history. One approach is to use <code>git format-patch</code> to create a series of patches and then reset the state to before the patches:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git format-patch origin\n$ git reset --hard origin</pre> </div> </div>  <p>Then modify, reorder, or eliminate patches as needed before applying them again with <a href=\"git-am\">git-am[1]</a>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git am *.patch</pre> </div> </div>\n</div> </div> <div class=\"sect1\"> <h2 id=\"interactive-rebase\">Using interactive rebases</h2> <div class=\"sectionbody\"> <p>You can also edit a patch series with an interactive rebase. This is the same as <a href=\"#reordering-patch-series\">reordering a patch series using <code>format-patch</code></a>, so use whichever interface you like best.</p>   <p>Rebase your current HEAD on the last commit you want to retain as-is. For example, if you want to reorder the last 5 commits, use:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git rebase -i HEAD~5</pre> </div> </div>  <p>This will open your editor with a list of steps to be taken to perform your rebase.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>pick deadbee The oneline of this commit\npick fa1afe1 The oneline of the next commit\n...\n\n# Rebase c0ffeee..deadbee onto c0ffeee\n#\n# Commands:\n#  p, pick = use commit\n#  r, reword = use commit, but edit the commit message\n#  e, edit = use commit, but stop for amending\n#  s, squash = use commit, but meld into previous commit\n#  f, fixup = like \"squash\", but discard this commit's log message\n#  x, exec = run command (the rest of the line) using shell\n#\n# These lines can be re-ordered; they are executed from top to bottom.\n#\n# If you remove a line here THAT COMMIT WILL BE LOST.\n#\n# However, if you remove everything, the rebase will be aborted.\n#\n# Note that empty commits are commented out</pre> </div> </div>  <p>As explained in the comments, you can reorder commits, squash them together, edit commit messages, etc. by editing the list. Once you are satisfied, save the list and close your editor, and the rebase will begin.</p>   <p>The rebase will stop where <code>pick</code> has been replaced with <code>edit</code> or when a step in the list fails to mechanically resolve conflicts and needs your help. When you are done editing and/or resolving conflicts you can continue with <code>git rebase --continue</code>. If you decide that things are getting too hairy, you can always bail out with <code>git rebase\n--abort</code>. Even after the rebase is complete, you can still recover the original branch by using the <a href=\"#reflogs\">reflog</a>.</p>   <p>For a more detailed discussion of the procedure and additional tips, see the \"INTERACTIVE MODE\" section of <a href=\"git-rebase\">git-rebase[1]</a>.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"patch-series-tools\">Other tools</h2> <div class=\"sectionbody\"> <p>There are numerous other tools, such as StGit, which exist for the purpose of maintaining a patch series. These are outside of the scope of this manual.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"problems-With-rewriting-history\">Problems with rewriting history</h2> <div class=\"sectionbody\"> <p>The primary problem with rewriting the history of a branch has to do with merging. Suppose somebody fetches your branch and merges it into their branch, with a result something like this:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre> o--o--O--o--o--o &lt;-- origin\n        \\        \\\n         t--t--t--m &lt;-- their branch:</pre> </div> </div>  <p>Then suppose you modify the last three commits:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>         o--o--o &lt;-- new head of origin\n        /\n o--o--O--o--o--o &lt;-- old head of origin</pre> </div> </div>  <p>If we examined all this history together in one repository, it will look like:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>         o--o--o &lt;-- new head of origin\n        /\n o--o--O--o--o--o &lt;-- old head of origin\n        \\        \\\n         t--t--t--m &lt;-- their branch:</pre> </div> </div>  <p>Git has no way of knowing that the new head is an updated version of the old head; it treats this situation exactly the same as it would if two developers had independently done the work on the old and new heads in parallel. At this point, if someone attempts to merge the new head in to their branch, Git will attempt to merge together the two (old and new) lines of development, instead of trying to replace the old by the new. The results are likely to be unexpected.</p>   <p>You may still choose to publish branches whose history is rewritten, and it may be useful for others to be able to fetch those branches in order to examine or test them, but they should not attempt to pull such branches into their own work.</p>   <p>For true distributed development that supports proper merging, published branches should never be rewritten.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"bisect-merges\">Why bisecting merge commits can be harder than bisecting linear history</h2> <div class=\"sectionbody\"> <p>The <a href=\"git-bisect\">git-bisect[1]</a> command correctly handles history that includes merge commits. However, when the commit that it finds is a merge commit, the user may need to work harder than usual to figure out why that commit introduced a problem.</p>   <p>Imagine this history:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>      ---Z---o---X---...---o---A---C---D\n          \\                       /\n           o---o---Y---...---o---B</pre> </div> </div>  <p>Suppose that on the upper line of development, the meaning of one of the functions that exists at Z is changed at commit X. The commits from Z leading to A change both the function’s implementation and all calling sites that exist at Z, as well as new calling sites they add, to be consistent. There is no bug at A.</p>   <p>Suppose that in the meantime on the lower line of development somebody adds a new calling site for that function at commit Y. The commits from Z leading to B all assume the old semantics of that function and the callers and the callee are consistent with each other. There is no bug at B, either.</p>   <p>Suppose further that the two development lines merge cleanly at C, so no conflict resolution is required.</p>   <p>Nevertheless, the code at C is broken, because the callers added on the lower line of development have not been converted to the new semantics introduced on the upper line of development. So if all you know is that D is bad, that Z is good, and that <a href=\"git-bisect\">git-bisect[1]</a> identifies C as the culprit, how will you figure out that the problem is due to this change in semantics?</p>   <p>When the result of a <code>git bisect</code> is a non-merge commit, you should normally be able to discover the problem by examining just that commit. Developers can make this easy by breaking their changes into small self-contained commits. That won’t help in the case above, however, because the problem isn’t obvious from examination of any single commit; instead, a global view of the development is required. To make matters worse, the change in semantics in the problematic function may be just one small part of the changes in the upper line of development.</p>   <p>On the other hand, if instead of merging at C you had rebased the history between Z to B on top of A, you would have gotten this linear history:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>    ---Z---o---X--...---o---A---o---o---Y*--...---o---B*--D*</pre> </div> </div>  <p>Bisecting between Z and D* would hit a single culprit commit Y*, and understanding why Y* was broken would probably be easier.</p>   <p>Partly for this reason, many experienced Git users, even when working on an otherwise merge-heavy project, keep the history linear by rebasing against the latest upstream version before publishing.</p> </div> </div>   <h1 id=\"advanced-branch-management\">Advanced branch management</h1> <div class=\"sect1\"> <h2 id=\"fetching-individual-branches\">Fetching individual branches</h2> <div class=\"sectionbody\"> <p>Instead of using <a href=\"git-remote\">git-remote[1]</a>, you can also choose just to update one branch at a time, and to store it locally under an arbitrary name:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git fetch origin todo:my-todo-work</pre> </div> </div>  <p>The first argument, <code>origin</code>, just tells Git to fetch from the repository you originally cloned from. The second argument tells Git to fetch the branch named <code>todo</code> from the remote repository, and to store it locally under the name <code>refs/heads/my-todo-work</code>.</p>   <p>You can also fetch branches from other repositories; so</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git fetch git://example.com/proj.git master:example-master</pre> </div> </div>  <p>will create a new branch named <code>example-master</code> and store in it the branch named <code>master</code> from the repository at the given URL. If you already have a branch named example-master, it will attempt to <a href=\"#fast-forwards\">fast-forward</a> to the commit given by example.com’s master branch. In more detail:</p> </div> </div> <div class=\"sect1\"> <h2 id=\"fetch-fast-forwards\">Git fetch and fast-forwards</h2> <div class=\"sectionbody\"> <p>In the previous example, when updating an existing branch, <code>git fetch</code> checks to make sure that the most recent commit on the remote branch is a descendant of the most recent commit on your copy of the branch before updating your copy of the branch to point at the new commit. Git calls this process a <a href=\"#fast-forwards\">fast-forward</a>.</p>   <p>A fast-forward looks something like this:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre> o--o--o--o &lt;-- old head of the branch\n           \\\n            o--o--o &lt;-- new head of the branch</pre> </div> </div>  <p>In some cases it is possible that the new head will <strong>not</strong> actually be a descendant of the old head. For example, the developer may have realized she made a serious mistake, and decided to backtrack, resulting in a situation like:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre> o--o--o--o--a--b &lt;-- old head of the branch\n           \\\n            o--o--o &lt;-- new head of the branch</pre> </div> </div>  <p>In this case, <code>git fetch</code> will fail, and print out a warning.</p>   <p>In that case, you can still force Git to update to the new head, as described in the following section. However, note that in the situation above this may mean losing the commits labeled <code>a</code> and <code>b</code>, unless you’ve already created a reference of your own pointing to them.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"forcing-fetch\">Forcing git fetch to do non-fast-forward updates</h2> <div class=\"sectionbody\"> <p>If git fetch fails because the new head of a branch is not a descendant of the old head, you may force the update with:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git fetch git://example.com/proj.git +master:refs/remotes/example/master</pre> </div> </div>  <p>Note the addition of the <code>+</code> sign. Alternatively, you can use the <code>-f</code> flag to force updates of all the fetched branches, as in:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git fetch -f origin</pre> </div> </div>  <p>Be aware that commits that the old version of example/master pointed at may be lost, as we saw in the previous section.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"remote-branch-configuration\">Configuring remote-tracking branches</h2> <div class=\"sectionbody\"> <p>We saw above that <code>origin</code> is just a shortcut to refer to the repository that you originally cloned from. This information is stored in Git configuration variables, which you can see using <a href=\"git-config\">git-config[1]</a>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git config -l\ncore.repositoryformatversion=0\ncore.filemode=true\ncore.logallrefupdates=true\nremote.origin.url=git://git.kernel.org/pub/scm/git/git.git\nremote.origin.fetch=+refs/heads/*:refs/remotes/origin/*\nbranch.master.remote=origin\nbranch.master.merge=refs/heads/master</pre> </div> </div>  <p>If there are other repositories that you also use frequently, you can create similar configuration options to save typing; for example,</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git remote add example git://example.com/proj.git</pre> </div> </div>  <p>adds the following to <code>.git/config</code>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>[remote \"example\"]\n        url = git://example.com/proj.git\n        fetch = +refs/heads/*:refs/remotes/example/*</pre> </div> </div>  <p>Also note that the above configuration can be performed by directly editing the file <code>.git/config</code> instead of using <a href=\"git-remote\">git-remote[1]</a>.</p>   <p>After configuring the remote, the following three commands will do the same thing:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git fetch git://example.com/proj.git +refs/heads/*:refs/remotes/example/*\n$ git fetch example +refs/heads/*:refs/remotes/example/*\n$ git fetch example</pre> </div> </div>  <p>See <a href=\"git-config\">git-config[1]</a> for more details on the configuration options mentioned above and <a href=\"git-fetch\">git-fetch[1]</a> for more details on the refspec syntax.</p> </div> </div>   <h1 id=\"git-concepts\">Git concepts</h1>  <p>Git is built on a small number of simple but powerful ideas. While it is possible to get things done without understanding them, you will find Git much more intuitive if you do.</p>   <p>We start with the most important, the <a href=\"#def_object_database\">object database</a> and the <a href=\"#def_index\">index</a>.</p>  <div class=\"sect1\"> <h2 id=\"the-object-database\">The object database</h2> <div class=\"sectionbody\"> <p>We already saw in <a href=\"#understanding-commits\">Understanding History: Commits</a> that all commits are stored under a 40-digit \"object name\". In fact, all the information needed to represent the history of a project is stored in objects with such names. In each case the name is calculated by taking the SHA-1 hash of the contents of the object. The SHA-1 hash is a cryptographic hash function. What that means to us is that it is impossible to find two different objects with the same name. This has a number of advantages; among others:</p>  <div class=\"ulist\"> <ul> <li> <p>Git can quickly determine whether two objects are identical or not, just by comparing names.</p> </li> <li> <p>Since object names are computed the same way in every repository, the same content stored in two repositories will always be stored under the same name.</p> </li> <li> <p>Git can detect errors when it reads an object, by checking that the object’s name is still the SHA-1 hash of its contents.</p> </li> </ul> </div>  <p>(See <a href=\"#object-details\">Object storage format</a> for the details of the object formatting and SHA-1 calculation.)</p>   <p>There are four different types of objects: \"blob\", \"tree\", \"commit\", and \"tag\".</p>  <div class=\"ulist\"> <ul> <li> <p>A <a href=\"#def_blob_object\">\"blob\" object</a> is used to store file data.</p> </li> <li> <p>A <a href=\"#def_tree_object\">\"tree\" object</a> ties one or more \"blob\" objects into a directory structure. In addition, a tree object can refer to other tree objects, thus creating a directory hierarchy.</p> </li> <li> <p>A <a href=\"#def_commit_object\">\"commit\" object</a> ties such directory hierarchies together into a <a href=\"#def_DAG\">directed acyclic graph</a> of revisions—​each commit contains the object name of exactly one tree designating the directory hierarchy at the time of the commit. In addition, a commit refers to \"parent\" commit objects that describe the history of how we arrived at that directory hierarchy.</p> </li> <li> <p>A <a href=\"#def_tag_object\">\"tag\" object</a> symbolically identifies and can be used to sign other objects. It contains the object name and type of another object, a symbolic name (of course!) and, optionally, a signature.</p> </li> </ul> </div>  <p>The object types in some more detail:</p>  <div class=\"sect2\"> <h3 id=\"commit-object\">Commit Object</h3>  <p>The \"commit\" object links a physical state of a tree with a description of how we got there and why. Use the <code>--pretty=raw</code> option to <a href=\"git-show\">git-show[1]</a> or <a href=\"git-log\">git-log[1]</a> to examine your favorite commit:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show -s --pretty=raw 2be7fcb476\ncommit 2be7fcb4764f2dbcee52635b91fedb1b3dcf7ab4\ntree fb3a8bdd0ceddd019615af4d57a53f43d8cee2bf\nparent 257a84d9d02e90447b149af58b271c19405edb6a\nauthor Dave Watson &lt;dwatson@mimvista.com&gt; 1187576872 -0400\ncommitter Junio C Hamano &lt;gitster@pobox.com&gt; 1187591163 -0700\n\n    Fix misspelling of 'suppress' in docs\n\n    Signed-off-by: Junio C Hamano &lt;gitster@pobox.com&gt;</pre> </div> </div>  <p>As you can see, a commit is defined by:</p>  <div class=\"ulist\"> <ul> <li> <p>a tree: The SHA-1 name of a tree object (as defined below), representing the contents of a directory at a certain point in time.</p> </li> <li> <p>parent(s): The SHA-1 name(s) of some number of commits which represent the immediately previous step(s) in the history of the project. The example above has one parent; merge commits may have more than one. A commit with no parents is called a \"root\" commit, and represents the initial revision of a project. Each project must have at least one root. A project can also have multiple roots, though that isn’t common (or necessarily a good idea).</p> </li> <li> <p>an author: The name of the person responsible for this change, together with its date.</p> </li> <li> <p>a committer: The name of the person who actually created the commit, with the date it was done. This may be different from the author, for example, if the author was someone who wrote a patch and emailed it to the person who used it to create the commit.</p> </li> <li> <p>a comment describing this commit.</p> </li> </ul> </div>  <p>Note that a commit does not itself contain any information about what actually changed; all changes are calculated by comparing the contents of the tree referred to by this commit with the trees associated with its parents. In particular, Git does not attempt to record file renames explicitly, though it can identify cases where the existence of the same file data at changing paths suggests a rename. (See, for example, the <code>-M</code> option to <a href=\"git-diff\">git-diff[1]</a>).</p>   <p>A commit is usually created by <a href=\"git-commit\">git-commit[1]</a>, which creates a commit whose parent is normally the current HEAD, and whose tree is taken from the content currently stored in the index.</p>  </div> <div class=\"sect2\"> <h3 id=\"tree-object\">Tree Object</h3>  <p>The ever-versatile <a href=\"git-show\">git-show[1]</a> command can also be used to examine tree objects, but <a href=\"git-ls-tree\">git-ls-tree[1]</a> will give you more details:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git ls-tree fb3a8bdd0ce\n100644 blob 63c918c667fa005ff12ad89437f2fdc80926e21c    .gitignore\n100644 blob 5529b198e8d14decbe4ad99db3f7fb632de0439d    .mailmap\n100644 blob 6ff87c4664981e4397625791c8ea3bbb5f2279a3    COPYING\n040000 tree 2fb783e477100ce076f6bf57e4a6f026013dc745    Documentation\n100755 blob 3c0032cec592a765692234f1cba47dfdcc3a9200    GIT-VERSION-GEN\n100644 blob 289b046a443c0647624607d471289b2c7dcd470b    INSTALL\n100644 blob 4eb463797adc693dc168b926b6932ff53f17d0b1    Makefile\n100644 blob 548142c327a6790ff8821d67c2ee1eff7a656b52    README\n...</pre> </div> </div>  <p>As you can see, a tree object contains a list of entries, each with a mode, object type, SHA-1 name, and name, sorted by name. It represents the contents of a single directory tree.</p>   <p>The object type may be a blob, representing the contents of a file, or another tree, representing the contents of a subdirectory. Since trees and blobs, like all other objects, are named by the SHA-1 hash of their contents, two trees have the same SHA-1 name if and only if their contents (including, recursively, the contents of all subdirectories) are identical. This allows Git to quickly determine the differences between two related tree objects, since it can ignore any entries with identical object names.</p>   <p>(Note: in the presence of submodules, trees may also have commits as entries. See <a href=\"#submodules\">Submodules</a> for documentation.)</p>   <p>Note that the files all have mode 644 or 755: Git actually only pays attention to the executable bit.</p>  </div> <div class=\"sect2\"> <h3 id=\"blob-object\">Blob Object</h3>  <p>You can use <a href=\"git-show\">git-show[1]</a> to examine the contents of a blob; take, for example, the blob in the entry for <code>COPYING</code> from the tree above:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show 6ff87c4664\n\n Note that the only valid version of the GPL as far as this project\n is concerned is _this_ particular version of the license (ie v2, not\n v2.2 or v3.x or whatever), unless explicitly otherwise stated.\n...</pre> </div> </div>  <p>A \"blob\" object is nothing but a binary blob of data. It doesn’t refer to anything else or have attributes of any kind.</p>   <p>Since the blob is entirely defined by its data, if two files in a directory tree (or in multiple different versions of the repository) have the same contents, they will share the same blob object. The object is totally independent of its location in the directory tree, and renaming a file does not change the object that file is associated with.</p>   <p>Note that any tree or blob object can be examined using <a href=\"git-show\">git-show[1]</a> with the &lt;revision&gt;:&lt;path&gt; syntax. This can sometimes be useful for browsing the contents of a tree that is not currently checked out.</p>  </div> <div class=\"sect2\"> <h3 id=\"trust\">Trust</h3>  <p>If you receive the SHA-1 name of a blob from one source, and its contents from another (possibly untrusted) source, you can still trust that those contents are correct as long as the SHA-1 name agrees. This is because the SHA-1 is designed so that it is infeasible to find different contents that produce the same hash.</p>   <p>Similarly, you need only trust the SHA-1 name of a top-level tree object to trust the contents of the entire directory that it refers to, and if you receive the SHA-1 name of a commit from a trusted source, then you can easily verify the entire history of commits reachable through parents of that commit, and all of those contents of the trees referred to by those commits.</p>   <p>So to introduce some real trust in the system, the only thing you need to do is to digitally sign just <code>one</code> special note, which includes the name of a top-level commit. Your digital signature shows others that you trust that commit, and the immutability of the history of commits tells others that they can trust the whole history.</p>   <p>In other words, you can easily validate a whole archive by just sending out a single email that tells the people the name (SHA-1 hash) of the top commit, and digitally sign that email using something like GPG/PGP.</p>   <p>To assist in this, Git also provides the tag object…​</p>  </div> <div class=\"sect2\"> <h3 id=\"tag-object\">Tag Object</h3>  <p>A tag object contains an object, object type, tag name, the name of the person (\"tagger\") who created the tag, and a message, which may contain a signature, as can be seen using <a href=\"git-cat-file\">git-cat-file[1]</a>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git cat-file tag v1.5.0\nobject 437b1b20df4b356c9342dac8d38849f24ef44f27\ntype commit\ntag v1.5.0\ntagger Junio C Hamano &lt;junkio@cox.net&gt; 1171411200 +0000\n\nGIT 1.5.0\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.6 (GNU/Linux)\n\niD8DBQBF0lGqwMbZpPMRm5oRAuRiAJ9ohBLd7s2kqjkKlq1qqC57SbnmzQCdG4ui\nnLE/L9aUXdWeTFPron96DLA=\n=2E+0\n-----END PGP SIGNATURE-----</pre> </div> </div>  <p>See the <a href=\"git-tag\">git-tag[1]</a> command to learn how to create and verify tag objects. (Note that <a href=\"git-tag\">git-tag[1]</a> can also be used to create \"lightweight tags\", which are not tag objects at all, but just simple references whose names begin with <code>refs/tags/</code>).</p>  </div> <div class=\"sect2\"> <h3 id=\"pack-files\">How Git stores objects efficiently: pack files</h3>  <p>Newly created objects are initially created in a file named after the object’s SHA-1 hash (stored in <code>.git/objects</code>).</p>   <p>Unfortunately this system becomes inefficient once a project has a lot of objects. Try this on an old project:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git count-objects\n6930 objects, 47620 kilobytes</pre> </div> </div>  <p>The first number is the number of objects which are kept in individual files. The second is the amount of space taken up by those \"loose\" objects.</p>   <p>You can save space and make Git faster by moving these loose objects in to a \"pack file\", which stores a group of objects in an efficient compressed format; the details of how pack files are formatted can be found in <a href=\"https://git-scm.com/docs/technical/pack-format.html\">pack format</a>.</p>   <p>To put the loose objects into a pack, just run git repack:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git repack\nCounting objects: 6020, done.\nDelta compression using up to 4 threads.\nCompressing objects: 100% (6020/6020), done.\nWriting objects: 100% (6020/6020), done.\nTotal 6020 (delta 4070), reused 0 (delta 0)</pre> </div> </div>  <p>This creates a single \"pack file\" in .git/objects/pack/ containing all currently unpacked objects. You can then run</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git prune</pre> </div> </div>  <p>to remove any of the \"loose\" objects that are now contained in the pack. This will also remove any unreferenced objects (which may be created when, for example, you use <code>git reset</code> to remove a commit). You can verify that the loose objects are gone by looking at the <code>.git/objects</code> directory or by running</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git count-objects\n0 objects, 0 kilobytes</pre> </div> </div>  <p>Although the object files are gone, any commands that refer to those objects will work exactly as they did before.</p>   <p>The <a href=\"git-gc\">git-gc[1]</a> command performs packing, pruning, and more for you, so is normally the only high-level command you need.</p>  </div> <div class=\"sect2\"> <h3 id=\"dangling-objects\">Dangling objects</h3>  <p>The <a href=\"git-fsck\">git-fsck[1]</a> command will sometimes complain about dangling objects. They are not a problem.</p>   <p>The most common cause of dangling objects is that you’ve rebased a branch, or you have pulled from somebody else who rebased a branch—​see <a href=\"#cleaning-up-history\">Rewriting history and maintaining patch series</a>. In that case, the old head of the original branch still exists, as does everything it pointed to. The branch pointer itself just doesn’t, since you replaced it with another one.</p>   <p>There are also other situations that cause dangling objects. For example, a \"dangling blob\" may arise because you did a <code>git add</code> of a file, but then, before you actually committed it and made it part of the bigger picture, you changed something else in that file and committed that <strong>updated</strong> thing—​the old state that you added originally ends up not being pointed to by any commit or tree, so it’s now a dangling blob object.</p>   <p>Similarly, when the \"recursive\" merge strategy runs, and finds that there are criss-cross merges and thus more than one merge base (which is fairly unusual, but it does happen), it will generate one temporary midway tree (or possibly even more, if you had lots of criss-crossing merges and more than two merge bases) as a temporary internal merge base, and again, those are real objects, but the end result will not end up pointing to them, so they end up \"dangling\" in your repository.</p>   <p>Generally, dangling objects aren’t anything to worry about. They can even be very useful: if you screw something up, the dangling objects can be how you recover your old tree (say, you did a rebase, and realized that you really didn’t want to—​you can look at what dangling objects you have, and decide to reset your head to some old dangling state).</p>   <p>For commits, you can just use:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ gitk &lt;dangling-commit-sha-goes-here&gt; --not --all</pre> </div> </div>  <p>This asks for all the history reachable from the given commit but not from any branch, tag, or other reference. If you decide it’s something you want, you can always create a new reference to it, e.g.,</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git branch recovered-branch &lt;dangling-commit-sha-goes-here&gt;</pre> </div> </div>  <p>For blobs and trees, you can’t do the same, but you can still examine them. You can just do</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show &lt;dangling-blob/tree-sha-goes-here&gt;</pre> </div> </div>  <p>to show what the contents of the blob were (or, for a tree, basically what the <code>ls</code> for that directory was), and that may give you some idea of what the operation was that left that dangling object.</p>   <p>Usually, dangling blobs and trees aren’t very interesting. They’re almost always the result of either being a half-way mergebase (the blob will often even have the conflict markers from a merge in it, if you have had conflicting merges that you fixed up by hand), or simply because you interrupted a <code>git fetch</code> with ^C or something like that, leaving <code>some</code> of the new objects in the object database, but just dangling and useless.</p>   <p>Anyway, once you are sure that you’re not interested in any dangling state, you can just prune all unreachable objects:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git prune</pre> </div> </div>  <p>and they’ll be gone. (You should only run <code>git prune</code> on a quiescent repository—​it’s kind of like doing a filesystem fsck recovery: you don’t want to do that while the filesystem is mounted. <code>git prune</code> is designed not to cause any harm in such cases of concurrent accesses to a repository but you might receive confusing or scary messages.)</p>  </div> <div class=\"sect2\"> <h3 id=\"recovering-from-repository-corruption\">Recovering from repository corruption</h3>  <p>By design, Git treats data trusted to it with caution. However, even in the absence of bugs in Git itself, it is still possible that hardware or operating system errors could corrupt data.</p>   <p>The first defense against such problems is backups. You can back up a Git directory using clone, or just using cp, tar, or any other backup mechanism.</p>   <p>As a last resort, you can search for the corrupted objects and attempt to replace them by hand. Back up your repository before attempting this in case you corrupt things even more in the process.</p>   <p>We’ll assume that the problem is a single missing or corrupted blob, which is sometimes a solvable problem. (Recovering missing trees and especially commits is <strong>much</strong> harder).</p>   <p>Before starting, verify that there is corruption, and figure out where it is with <a href=\"git-fsck\">git-fsck[1]</a>; this may be time-consuming.</p>   <p>Assume the output looks like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git fsck --full --no-dangling\nbroken link from    tree 2d9263c6d23595e7cb2a21e5ebbb53655278dff8\n              to    blob 4b9458b3786228369c63936db65827de3cc06200\nmissing blob 4b9458b3786228369c63936db65827de3cc06200</pre> </div> </div>  <p>Now you know that blob 4b9458b3 is missing, and that the tree 2d9263c6 points to it. If you could find just one copy of that missing blob object, possibly in some other repository, you could move it into <code>.git/objects/4b/9458b3...</code> and be done. Suppose you can’t. You can still examine the tree that pointed to it with <a href=\"git-ls-tree\">git-ls-tree[1]</a>, which might output something like:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git ls-tree 2d9263c6d23595e7cb2a21e5ebbb53655278dff8\n100644 blob 8d14531846b95bfa3564b58ccfb7913a034323b8        .gitignore\n100644 blob ebf9bf84da0aab5ed944264a5db2a65fe3a3e883        .mailmap\n100644 blob ca442d313d86dc67e0a2e5d584b465bd382cbf5c        COPYING\n...\n100644 blob 4b9458b3786228369c63936db65827de3cc06200        myfile\n...</pre> </div> </div>  <p>So now you know that the missing blob was the data for a file named <code>myfile</code>. And chances are you can also identify the directory—​let’s say it’s in <code>somedirectory</code>. If you’re lucky the missing copy might be the same as the copy you have checked out in your working tree at <code>somedirectory/myfile</code>; you can test whether that’s right with <a href=\"git-hash-object\">git-hash-object[1]</a>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git hash-object -w somedirectory/myfile</pre> </div> </div>  <p>which will create and store a blob object with the contents of somedirectory/myfile, and output the SHA-1 of that object. if you’re extremely lucky it might be 4b9458b3786228369c63936db65827de3cc06200, in which case you’ve guessed right, and the corruption is fixed!</p>   <p>Otherwise, you need more information. How do you tell which version of the file has been lost?</p>   <p>The easiest way to do this is with:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log --raw --all --full-history -- somedirectory/myfile</pre> </div> </div>  <p>Because you’re asking for raw output, you’ll now get something like</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>commit abc\nAuthor:\nDate:\n...\n:100644 100644 4b9458b... newsha... M somedirectory/myfile\n\n\ncommit xyz\nAuthor:\nDate:\n\n...\n:100644 100644 oldsha... 4b9458b... M somedirectory/myfile</pre> </div> </div>  <p>This tells you that the immediately following version of the file was \"newsha\", and that the immediately preceding version was \"oldsha\". You also know the commit messages that went with the change from oldsha to 4b9458b and with the change from 4b9458b to newsha.</p>   <p>If you’ve been committing small enough changes, you may now have a good shot at reconstructing the contents of the in-between state 4b9458b.</p>   <p>If you can do that, you can now recreate the missing object with</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git hash-object -w &lt;recreated-file&gt;</pre> </div> </div>  <p>and your repository is good again!</p>   <p>(Btw, you could have ignored the <code>fsck</code>, and started with doing a</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log --raw --all</pre> </div> </div>  <p>and just looked for the sha of the missing object (4b9458b..) in that whole thing. It’s up to you—​Git does <strong>have</strong> a lot of information, it is just missing one particular blob version.</p>  </div>\n</div> </div> <div class=\"sect1\"> <h2 id=\"the-index\">The index</h2> <div class=\"sectionbody\"> <p>The index is a binary file (generally kept in <code>.git/index</code>) containing a sorted list of path names, each with permissions and the SHA-1 of a blob object; <a href=\"git-ls-files\">git-ls-files[1]</a> can show you the contents of the index:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git ls-files --stage\n100644 63c918c667fa005ff12ad89437f2fdc80926e21c 0        .gitignore\n100644 5529b198e8d14decbe4ad99db3f7fb632de0439d 0        .mailmap\n100644 6ff87c4664981e4397625791c8ea3bbb5f2279a3 0        COPYING\n100644 a37b2152bd26be2c2289e1f57a292534a51a93c7 0        Documentation/.gitignore\n100644 fbefe9a45b00a54b58d94d06eca48b03d40a50e0 0        Documentation/Makefile\n...\n100644 2511aef8d89ab52be5ec6a5e46236b4b6bcd07ea 0        xdiff/xtypes.h\n100644 2ade97b2574a9f77e7ae4002a4e07a6a38e46d07 0        xdiff/xutils.c\n100644 d5de8292e05e7c36c4b68857c1cf9855e3d2f70a 0        xdiff/xutils.h</pre> </div> </div>  <p>Note that in older documentation you may see the index called the \"current directory cache\" or just the \"cache\". It has three important properties:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>The index contains all the information necessary to generate a single (uniquely determined) tree object.</p>  <p>For example, running <a href=\"git-commit\">git-commit[1]</a> generates this tree object from the index, stores it in the object database, and uses it as the tree object associated with the new commit.</p>  </li> <li> <p>The index enables fast comparisons between the tree object it defines and the working tree.</p>  <p>It does this by storing some additional data for each entry (such as the last modified time). This data is not displayed above, and is not stored in the created tree object, but it can be used to determine quickly which files in the working directory differ from what was stored in the index, and thus save Git from having to read all of the data from such files to look for changes.</p>  </li> <li> <p>It can efficiently represent information about merge conflicts between different tree objects, allowing each pathname to be associated with sufficient information about the trees involved that you can create a three-way merge between them.</p>  <p>We saw in <a href=\"#conflict-resolution\">Getting conflict-resolution help during a merge</a> that during a merge the index can store multiple versions of a single file (called \"stages\"). The third column in the <a href=\"git-ls-files\">git-ls-files[1]</a> output above is the stage number, and will take on values other than 0 for files with merge conflicts.</p>  </li> </ol> </div>  <p>The index is thus a sort of temporary staging area, which is filled with a tree which you are in the process of working on.</p>   <p>If you blow the index away entirely, you generally haven’t lost any information as long as you have the name of the tree that it described.</p> </div> </div>   <h1 id=\"submodules\">Submodules</h1>  <p>Large projects are often composed of smaller, self-contained modules. For example, an embedded Linux distribution’s source tree would include every piece of software in the distribution with some local modifications; a movie player might need to build against a specific, known-working version of a decompression library; several independent programs might all share the same build scripts.</p>   <p>With centralized revision control systems this is often accomplished by including every module in one single repository. Developers can check out all modules or only the modules they need to work with. They can even modify files across several modules in a single commit while moving things around or updating APIs and translations.</p>   <p>Git does not allow partial checkouts, so duplicating this approach in Git would force developers to keep a local copy of modules they are not interested in touching. Commits in an enormous checkout would be slower than you’d expect as Git would have to scan every directory for changes. If modules have a lot of local history, clones would take forever.</p>   <p>On the plus side, distributed revision control systems can much better integrate with external sources. In a centralized model, a single arbitrary snapshot of the external project is exported from its own revision control and then imported into the local revision control on a vendor branch. All the history is hidden. With distributed revision control you can clone the entire external history and much more easily follow development and re-merge local changes.</p>   <p>Git’s submodule support allows a repository to contain, as a subdirectory, a checkout of an external project. Submodules maintain their own identity; the submodule support just stores the submodule repository location and commit ID, so other developers who clone the containing project (\"superproject\") can easily clone all the submodules at the same revision. Partial checkouts of the superproject are possible: you can tell Git to clone none, some or all of the submodules.</p>   <p>The <a href=\"git-submodule\">git-submodule[1]</a> command is available since Git 1.5.3. Users with Git 1.5.2 can look up the submodule commits in the repository and manually check them out; earlier versions won’t recognize the submodules at all.</p>   <p>To see how submodule support works, create four example repositories that can be used later as a submodule:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ mkdir ~/git\n$ cd ~/git\n$ for i in a b c d\ndo\n        mkdir $i\n        cd $i\n        git init\n        echo \"module $i\" &gt; $i.txt\n        git add $i.txt\n        git commit -m \"Initial commit, submodule $i\"\n        cd ..\ndone</pre> </div> </div>  <p>Now create the superproject and add all the submodules:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ mkdir super\n$ cd super\n$ git init\n$ for i in a b c d\ndo\n        git submodule add ~/git/$i $i\ndone</pre> </div> </div> <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> Do not use local URLs here if you plan to publish your superproject! </td> </tr> </table> </div>  <p>See what files <code>git submodule</code> created:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ ls -a\n.  ..  .git  .gitmodules  a  b  c  d</pre> </div> </div>  <p>The <code>git submodule add &lt;repo&gt; &lt;path&gt;</code> command does a couple of things:</p>  <div class=\"ulist\"> <ul> <li> <p>It clones the submodule from <code>&lt;repo&gt;</code> to the given <code>&lt;path&gt;</code> under the current directory and by default checks out the master branch.</p> </li> <li> <p>It adds the submodule’s clone path to the <a href=\"gitmodules\">gitmodules[5]</a> file and adds this file to the index, ready to be committed.</p> </li> <li> <p>It adds the submodule’s current commit ID to the index, ready to be committed.</p> </li> </ul> </div>  <p>Commit the superproject:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git commit -m \"Add submodules a, b, c and d.\"</pre> </div> </div>  <p>Now clone the superproject:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ cd ..\n$ git clone super cloned\n$ cd cloned</pre> </div> </div>  <p>The submodule directories are there, but they’re empty:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ ls -a a\n.  ..\n$ git submodule status\n-d266b9873ad50488163457f025db7cdd9683d88b a\n-e81d457da15309b4fef4249aba9b50187999670d b\n-c1536a972b9affea0f16e0680ba87332dc059146 c\n-d96249ff5d57de5de093e6baff9e0aafa5276a74 d</pre> </div> </div> <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> The commit object names shown above would be different for you, but they should match the HEAD commit object names of your repositories. You can check it by running <code>git ls-remote ../a</code>. </td> </tr> </table> </div>  <p>Pulling down the submodules is a two-step process. First run <code>git submodule\ninit</code> to add the submodule repository URLs to <code>.git/config</code>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git submodule init</pre> </div> </div>  <p>Now use <code>git submodule update</code> to clone the repositories and check out the commits specified in the superproject:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git submodule update\n$ cd a\n$ ls -a\n.  ..  .git  a.txt</pre> </div> </div>  <p>One major difference between <code>git submodule update</code> and <code>git submodule add</code> is that <code>git submodule update</code> checks out a specific commit, rather than the tip of a branch. It’s like checking out a tag: the head is detached, so you’re not working on a branch.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git branch\n* (detached from d266b98)\n  master</pre> </div> </div>  <p>If you want to make a change within a submodule and you have a detached head, then you should create or checkout a branch, make your changes, publish the change within the submodule, and then update the superproject to reference the new commit:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout master</pre> </div> </div>  <p>or</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout -b fix-up</pre> </div> </div>  <p>then</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ echo \"adding a line again\" &gt;&gt; a.txt\n$ git commit -a -m \"Updated the submodule from within the superproject.\"\n$ git push\n$ cd ..\n$ git diff\ndiff --git a/a b/a\nindex d266b98..261dfac 160000\n--- a/a\n+++ b/a\n@@ -1 +1 @@\n-Subproject commit d266b9873ad50488163457f025db7cdd9683d88b\n+Subproject commit 261dfac35cb99d380eb966e102c1197139f7fa24\n$ git add a\n$ git commit -m \"Updated submodule a.\"\n$ git push</pre> </div> </div>  <p>You have to run <code>git submodule update</code> after <code>git pull</code> if you want to update submodules, too.</p>  <div class=\"sect1\"> <h2 id=\"_pitfalls_with_submodules\">Pitfalls with submodules</h2> <div class=\"sectionbody\"> <p>Always publish the submodule change before publishing the change to the superproject that references it. If you forget to publish the submodule change, others won’t be able to clone the repository:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ cd ~/git/super/a\n$ echo i added another line to this file &gt;&gt; a.txt\n$ git commit -a -m \"doing it wrong this time\"\n$ cd ..\n$ git add a\n$ git commit -m \"Updated submodule a again.\"\n$ git push\n$ cd ~/git/cloned\n$ git pull\n$ git submodule update\nerror: pathspec '261dfac35cb99d380eb966e102c1197139f7fa24' did not match any file(s) known to git.\nDid you forget to 'git add'?\nUnable to checkout '261dfac35cb99d380eb966e102c1197139f7fa24' in submodule path 'a'</pre> </div> </div>  <p>In older Git versions it could be easily forgotten to commit new or modified files in a submodule, which silently leads to similar problems as not pushing the submodule changes. Starting with Git 1.7.0 both <code>git status</code> and <code>git diff</code> in the superproject show submodules as modified when they contain new or modified files to protect against accidentally committing such a state. <code>git\ndiff</code> will also add a <code>-dirty</code> to the work tree side when generating patch output or used with the <code>--submodule</code> option:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git diff\ndiff --git a/sub b/sub\n--- a/sub\n+++ b/sub\n@@ -1 +1 @@\n-Subproject commit 3f356705649b5d566d97ff843cf193359229a453\n+Subproject commit 3f356705649b5d566d97ff843cf193359229a453-dirty\n$ git diff --submodule\nSubmodule sub 3f35670..3f35670-dirty:</pre> </div> </div>  <p>You also should not rewind branches in a submodule beyond commits that were ever recorded in any superproject.</p>   <p>It’s not safe to run <code>git submodule update</code> if you’ve made and committed changes within a submodule without checking out a branch first. They will be silently overwritten:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ cat a.txt\nmodule a\n$ echo line added from private2 &gt;&gt; a.txt\n$ git commit -a -m \"line added inside private2\"\n$ cd ..\n$ git submodule update\nSubmodule path 'a': checked out 'd266b9873ad50488163457f025db7cdd9683d88b'\n$ cd a\n$ cat a.txt\nmodule a</pre> </div> </div> <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> The changes are still visible in the submodule’s reflog. </td> </tr> </table> </div>  <p>If you have uncommitted changes in your submodule working tree, <code>git\nsubmodule update</code> will not overwrite them. Instead, you get the usual warning about not being able switch from a dirty branch.</p> </div> </div>   <h1 id=\"low-level-operations\">Low-level Git operations</h1>  <p>Many of the higher-level commands were originally implemented as shell scripts using a smaller core of low-level Git commands. These can still be useful when doing unusual things with Git, or just as a way to understand its inner workings.</p>  <div class=\"sect1\"> <h2 id=\"object-manipulation\">Object access and manipulation</h2> <div class=\"sectionbody\"> <p>The <a href=\"git-cat-file\">git-cat-file[1]</a> command can show the contents of any object, though the higher-level <a href=\"git-show\">git-show[1]</a> is usually more useful.</p>   <p>The <a href=\"git-commit-tree\">git-commit-tree[1]</a> command allows constructing commits with arbitrary parents and trees.</p>   <p>A tree can be created with <a href=\"git-write-tree\">git-write-tree[1]</a> and its data can be accessed by <a href=\"git-ls-tree\">git-ls-tree[1]</a>. Two trees can be compared with <a href=\"git-diff-tree\">git-diff-tree[1]</a>.</p>   <p>A tag is created with <a href=\"git-mktag\">git-mktag[1]</a>, and the signature can be verified by <a href=\"git-verify-tag\">git-verify-tag[1]</a>, though it is normally simpler to use <a href=\"git-tag\">git-tag[1]</a> for both.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"the-workflow\">The workflow</h2> <div class=\"sectionbody\"> <p>High-level operations such as <a href=\"git-commit\">git-commit[1]</a>, <a href=\"git-checkout\">git-checkout[1]</a> and <a href=\"git-reset\">git-reset[1]</a> work by moving data between the working tree, the index, and the object database. Git provides low-level operations which perform each of these steps individually.</p>   <p>Generally, all Git operations work on the index file. Some operations work <strong>purely</strong> on the index file (showing the current state of the index), but most operations move data between the index file and either the database or the working directory. Thus there are four main combinations:</p>  <div class=\"sect2\"> <h3 id=\"working-directory-to-index\">working directory → index</h3>  <p>The <a href=\"git-update-index\">git-update-index[1]</a> command updates the index with information from the working directory. You generally update the index information by just specifying the filename you want to update, like so:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git update-index filename</pre> </div> </div>  <p>but to avoid common mistakes with filename globbing etc., the command will not normally add totally new entries or remove old entries, i.e. it will normally just update existing cache entries.</p>   <p>To tell Git that yes, you really do realize that certain files no longer exist, or that new files should be added, you should use the <code>--remove</code> and <code>--add</code> flags respectively.</p>   <p>NOTE! A <code>--remove</code> flag does <code>not</code> mean that subsequent filenames will necessarily be removed: if the files still exist in your directory structure, the index will be updated with their new status, not removed. The only thing <code>--remove</code> means is that update-index will be considering a removed file to be a valid thing, and if the file really does not exist any more, it will update the index accordingly.</p>   <p>As a special case, you can also do <code>git update-index --refresh</code>, which will refresh the \"stat\" information of each index to match the current stat information. It will <code>not</code> update the object status itself, and it will only update the fields that are used to quickly test whether an object still matches its old backing store object.</p>   <p>The previously introduced <a href=\"git-add\">git-add[1]</a> is just a wrapper for <a href=\"git-update-index\">git-update-index[1]</a>.</p>  </div> <div class=\"sect2\"> <h3 id=\"index-to-object-database\">index → object database</h3>  <p>You write your current index file to a \"tree\" object with the program</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git write-tree</pre> </div> </div>  <p>that doesn’t come with any options—​it will just write out the current index into the set of tree objects that describe that state, and it will return the name of the resulting top-level tree. You can use that tree to re-generate the index at any time by going in the other direction:</p>  </div> <div class=\"sect2\"> <h3 id=\"object-database-to-index\">object database → index</h3>  <p>You read a \"tree\" file from the object database, and use that to populate (and overwrite—​don’t do this if your index contains any unsaved state that you might want to restore later!) your current index. Normal operation is just</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git read-tree &lt;SHA-1 of tree&gt;</pre> </div> </div>  <p>and your index file will now be equivalent to the tree that you saved earlier. However, that is only your <code>index</code> file: your working directory contents have not been modified.</p>  </div> <div class=\"sect2\"> <h3 id=\"index-to-working-directory\">index → working directory</h3>  <p>You update your working directory from the index by \"checking out\" files. This is not a very common operation, since normally you’d just keep your files updated, and rather than write to your working directory, you’d tell the index files about the changes in your working directory (i.e. <code>git update-index</code>).</p>   <p>However, if you decide to jump to a new version, or check out somebody else’s version, or just restore a previous tree, you’d populate your index file with read-tree, and then you need to check out the result with</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout-index filename</pre> </div> </div>  <p>or, if you want to check out all of the index, use <code>-a</code>.</p>   <p>NOTE! <code>git checkout-index</code> normally refuses to overwrite old files, so if you have an old version of the tree already checked out, you will need to use the <code>-f</code> flag (<code>before</code> the <code>-a</code> flag or the filename) to <code>force</code> the checkout.</p>   <p>Finally, there are a few odds and ends which are not purely moving from one representation to the other:</p>  </div> <div class=\"sect2\"> <h3 id=\"tying-it-all-together\">Tying it all together</h3>  <p>To commit a tree you have instantiated with <code>git write-tree</code>, you’d create a \"commit\" object that refers to that tree and the history behind it—​most notably the \"parent\" commits that preceded it in history.</p>   <p>Normally a \"commit\" has one parent: the previous state of the tree before a certain change was made. However, sometimes it can have two or more parent commits, in which case we call it a \"merge\", due to the fact that such a commit brings together (\"merges\") two or more previous states represented by other commits.</p>   <p>In other words, while a \"tree\" represents a particular directory state of a working directory, a \"commit\" represents that state in time, and explains how we got there.</p>   <p>You create a commit object by giving it the tree that describes the state at the time of the commit, and a list of parents:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git commit-tree &lt;tree&gt; -p &lt;parent&gt; [(-p &lt;parent2&gt;)...]</pre> </div> </div>  <p>and then giving the reason for the commit on stdin (either through redirection from a pipe or file, or by just typing it at the tty).</p>   <p><code>git commit-tree</code> will return the name of the object that represents that commit, and you should save it away for later use. Normally, you’d commit a new <code>HEAD</code> state, and while Git doesn’t care where you save the note about that state, in practice we tend to just write the result to the file pointed at by <code>.git/HEAD</code>, so that we can always see what the last committed state was.</p>   <p>Here is a picture that illustrates how various pieces fit together:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>                     commit-tree\n                      commit obj\n                       +----+\n                       |    |\n                       |    |\n                       V    V\n                    +-----------+\n                    | Object DB |\n                    |  Backing  |\n                    |   Store   |\n                    +-----------+\n                       ^\n           write-tree  |     |\n             tree obj  |     |\n                       |     |  read-tree\n                       |     |  tree obj\n                             V\n                    +-----------+\n                    |   Index   |\n                    |  \"cache\"  |\n                    +-----------+\n         update-index  ^\n             blob obj  |     |\n                       |     |\n    checkout-index -u  |     |  checkout-index\n             stat      |     |  blob obj\n                             V\n                    +-----------+\n                    |  Working  |\n                    | Directory |\n                    +-----------+</pre> </div> </div> </div>\n</div> </div> <div class=\"sect1\"> <h2 id=\"examining-the-data\">Examining the data</h2> <div class=\"sectionbody\"> <p>You can examine the data represented in the object database and the index with various helper tools. For every object, you can use <a href=\"git-cat-file\">git-cat-file[1]</a> to examine details about the object:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git cat-file -t &lt;objectname&gt;</pre> </div> </div>  <p>shows the type of the object, and once you have the type (which is usually implicit in where you find the object), you can use</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git cat-file blob|tree|commit|tag &lt;objectname&gt;</pre> </div> </div>  <p>to show its contents. NOTE! Trees have binary content, and as a result there is a special helper for showing that content, called <code>git ls-tree</code>, which turns the binary content into a more easily readable form.</p>   <p>It’s especially instructive to look at \"commit\" objects, since those tend to be small and fairly self-explanatory. In particular, if you follow the convention of having the top commit name in <code>.git/HEAD</code>, you can do</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git cat-file commit HEAD</pre> </div> </div>  <p>to see what the top commit was.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"merging-multiple-trees\">Merging multiple trees</h2> <div class=\"sectionbody\"> <p>Git can help you perform a three-way merge, which can in turn be used for a many-way merge by repeating the merge procedure several times. The usual situation is that you only do one three-way merge (reconciling two lines of history) and commit the result, but if you like to, you can merge several branches in one go.</p>   <p>To perform a three-way merge, you start with the two commits you want to merge, find their closest common parent (a third commit), and compare the trees corresponding to these three commits.</p>   <p>To get the \"base\" for the merge, look up the common parent of two commits:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git merge-base &lt;commit1&gt; &lt;commit2&gt;</pre> </div> </div>  <p>This prints the name of a commit they are both based on. You should now look up the tree objects of those commits, which you can easily do with</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git cat-file commit &lt;commitname&gt; | head -1</pre> </div> </div>  <p>since the tree object information is always the first line in a commit object.</p>   <p>Once you know the three trees you are going to merge (the one \"original\" tree, aka the common tree, and the two \"result\" trees, aka the branches you want to merge), you do a \"merge\" read into the index. This will complain if it has to throw away your old index contents, so you should make sure that you’ve committed those—​in fact you would normally always do a merge against your last commit (which should thus match what you have in your current index anyway).</p>   <p>To do the merge, do</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git read-tree -m -u &lt;origtree&gt; &lt;yourtree&gt; &lt;targettree&gt;</pre> </div> </div>  <p>which will do all trivial merge operations for you directly in the index file, and you can just write the result out with <code>git write-tree</code>.</p> </div> </div> <div class=\"sect1\"> <h2 id=\"merging-multiple-trees-2\">Merging multiple trees, continued</h2> <div class=\"sectionbody\"> <p>Sadly, many merges aren’t trivial. If there are files that have been added, moved or removed, or if both branches have modified the same file, you will be left with an index tree that contains \"merge entries\" in it. Such an index tree can <code>NOT</code> be written out to a tree object, and you will have to resolve any such merge clashes using other tools before you can write out the result.</p>   <p>You can examine such index state with <code>git ls-files --unmerged</code> command. An example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git read-tree -m $orig HEAD $target\n$ git ls-files --unmerged\n100644 263414f423d0e4d70dae8fe53fa34614ff3e2860 1        hello.c\n100644 06fa6a24256dc7e560efa5687fa84b51f0263c3a 2        hello.c\n100644 cc44c73eb783565da5831b4d820c962954019b69 3        hello.c</pre> </div> </div>  <p>Each line of the <code>git ls-files --unmerged</code> output begins with the blob mode bits, blob SHA-1, <code>stage number</code>, and the filename. The <code>stage number</code> is Git’s way to say which tree it came from: stage 1 corresponds to the <code>$orig</code> tree, stage 2 to the <code>HEAD</code> tree, and stage 3 to the <code>$target</code> tree.</p>   <p>Earlier we said that trivial merges are done inside <code>git read-tree -m</code>. For example, if the file did not change from <code>$orig</code> to <code>HEAD</code> or <code>$target</code>, or if the file changed from <code>$orig</code> to <code>HEAD</code> and <code>$orig</code> to <code>$target</code> the same way, obviously the final outcome is what is in <code>HEAD</code>. What the above example shows is that file <code>hello.c</code> was changed from <code>$orig</code> to <code>HEAD</code> and <code>$orig</code> to <code>$target</code> in a different way. You could resolve this by running your favorite 3-way merge program, e.g. <code>diff3</code>, <code>merge</code>, or Git’s own merge-file, on the blob objects from these three stages yourself, like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git cat-file blob 263414f... &gt;hello.c~1\n$ git cat-file blob 06fa6a2... &gt;hello.c~2\n$ git cat-file blob cc44c73... &gt;hello.c~3\n$ git merge-file hello.c~2 hello.c~1 hello.c~3</pre> </div> </div>  <p>This would leave the merge result in <code>hello.c~2</code> file, along with conflict markers if there are conflicts. After verifying the merge result makes sense, you can tell Git what the final merge result for this file is by:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ mv -f hello.c~2 hello.c\n$ git update-index hello.c</pre> </div> </div>  <p>When a path is in the \"unmerged\" state, running <code>git update-index</code> for that path tells Git to mark the path resolved.</p>   <p>The above is the description of a Git merge at the lowest level, to help you understand what conceptually happens under the hood. In practice, nobody, not even Git itself, runs <code>git cat-file</code> three times for this. There is a <code>git merge-index</code> program that extracts the stages to temporary files and calls a \"merge\" script on it:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git merge-index git-merge-one-file hello.c</pre> </div> </div>  <p>and that is what higher level <code>git merge -s resolve</code> is implemented with.</p> </div> </div>   <h1 id=\"hacking-git\">Hacking Git</h1>  <p>This chapter covers internal details of the Git implementation which probably only Git developers need to understand.</p>  <div class=\"sect1\"> <h2 id=\"object-details\">Object storage format</h2> <div class=\"sectionbody\"> <p>All objects have a statically determined \"type\" which identifies the format of the object (i.e. how it is used, and how it can refer to other objects). There are currently four different object types: \"blob\", \"tree\", \"commit\", and \"tag\".</p>   <p>Regardless of object type, all objects share the following characteristics: they are all deflated with zlib, and have a header that not only specifies their type, but also provides size information about the data in the object. It’s worth noting that the SHA-1 hash that is used to name the object is the hash of the original data plus this header, so <code>sha1sum</code> <code>file</code> does not match the object name for <code>file</code>.</p>   <p>As a result, the general consistency of an object can always be tested independently of the contents or the type of the object: all objects can be validated by verifying that (a) their hashes match the content of the file and (b) the object successfully inflates to a stream of bytes that forms a sequence of <code>&lt;ascii type without space&gt; + &lt;space&gt; + &lt;ascii decimal size&gt; +\n&lt;byte\\0&gt; + &lt;binary object data&gt;</code>.</p>   <p>The structured objects can further have their structure and connectivity to other objects verified. This is generally done with the <code>git fsck</code> program, which generates a full dependency graph of all objects, and verifies their internal consistency (in addition to just verifying their superficial consistency through the hash).</p> </div> </div> <div class=\"sect1\"> <h2 id=\"birdview-on-the-source-code\">A birds-eye view of git’s source code</h2> <div class=\"sectionbody\"> <p>It is not always easy for new developers to find their way through Git’s source code. This section gives you a little guidance to show where to start.</p>   <p>A good place to start is with the contents of the initial commit, with:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout e83c5163</pre> </div> </div>  <p>The initial revision lays the foundation for almost everything Git has today, but is small enough to read in one sitting.</p>   <p>Note that terminology has changed since that revision. For example, the README in that revision uses the word \"changeset\" to describe what we now call a <a href=\"#def_commit_object\">commit</a>.</p>   <p>Also, we do not call it \"cache\" any more, but rather \"index\"; however, the file is still called <code>cache.h</code>. Remark: Not much reason to change it now, especially since there is no good single name for it anyway, because it is basically <code>the</code> header file which is included by <code>all</code> of Git’s C sources.</p>   <p>If you grasp the ideas in that initial commit, you should check out a more recent version and skim <code>cache.h</code>, <code>object.h</code> and <code>commit.h</code>.</p>   <p>In the early days, Git (in the tradition of UNIX) was a bunch of programs which were extremely simple, and which you used in scripts, piping the output of one into another. This turned out to be good for initial development, since it was easier to test new things. However, recently many of these parts have become builtins, and some of the core has been \"libified\", i.e. put into libgit.a for performance, portability reasons, and to avoid code duplication.</p>   <p>By now, you know what the index is (and find the corresponding data structures in <code>cache.h</code>), and that there are just a couple of object types (blobs, trees, commits and tags) which inherit their common structure from <code>struct object</code>, which is their first member (and thus, you can cast e.g. <code>(struct object *)commit</code> to achieve the <code>same</code> as <code>&amp;commit-&gt;object</code>, i.e. get at the object name and flags).</p>   <p>Now is a good point to take a break to let this information sink in.</p>   <p>Next step: get familiar with the object naming. Read <a href=\"#naming-commits\">Naming commits</a>. There are quite a few ways to name an object (and not only revisions!). All of these are handled in <code>sha1_name.c</code>. Just have a quick look at the function <code>get_sha1()</code>. A lot of the special handling is done by functions like <code>get_sha1_basic()</code> or the likes.</p>   <p>This is just to get you into the groove for the most libified part of Git: the revision walker.</p>   <p>Basically, the initial version of <code>git log</code> was a shell script:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git-rev-list --pretty $(git-rev-parse --default HEAD \"$@\") | \\\n        LESS=-S ${PAGER:-less}</pre> </div> </div>  <p>What does this mean?</p>   <p><code>git rev-list</code> is the original version of the revision walker, which <code>always</code> printed a list of revisions to stdout. It is still functional, and needs to, since most new Git commands start out as scripts using <code>git rev-list</code>.</p>   <p><code>git rev-parse</code> is not as important any more; it was only used to filter out options that were relevant for the different plumbing commands that were called by the script.</p>   <p>Most of what <code>git rev-list</code> did is contained in <code>revision.c</code> and <code>revision.h</code>. It wraps the options in a struct named <code>rev_info</code>, which controls how and what revisions are walked, and more.</p>   <p>The original job of <code>git rev-parse</code> is now taken by the function <code>setup_revisions()</code>, which parses the revisions and the common command-line options for the revision walker. This information is stored in the struct <code>rev_info</code> for later consumption. You can do your own command-line option parsing after calling <code>setup_revisions()</code>. After that, you have to call <code>prepare_revision_walk()</code> for initialization, and then you can get the commits one by one with the function <code>get_revision()</code>.</p>   <p>If you are interested in more details of the revision walking process, just have a look at the first implementation of <code>cmd_log()</code>; call <code>git show v1.3.0~155^2~4</code> and scroll down to that function (note that you no longer need to call <code>setup_pager()</code> directly).</p>   <p>Nowadays, <code>git log</code> is a builtin, which means that it is <code>contained</code> in the command <code>git</code>. The source side of a builtin is</p>  <div class=\"ulist\"> <ul> <li> <p>a function called <code>cmd_&lt;bla&gt;</code>, typically defined in <code>builtin/&lt;bla.c&gt;</code> (note that older versions of Git used to have it in <code>builtin-&lt;bla&gt;.c</code> instead), and declared in <code>builtin.h</code>.</p> </li> <li> <p>an entry in the <code>commands[]</code> array in <code>git.c</code>, and</p> </li> <li> <p>an entry in <code>BUILTIN_OBJECTS</code> in the <code>Makefile</code>.</p> </li> </ul> </div>  <p>Sometimes, more than one builtin is contained in one source file. For example, <code>cmd_whatchanged()</code> and <code>cmd_log()</code> both reside in <code>builtin/log.c</code>, since they share quite a bit of code. In that case, the commands which are <code>not</code> named like the <code>.c</code> file in which they live have to be listed in <code>BUILT_INS</code> in the <code>Makefile</code>.</p>   <p><code>git log</code> looks more complicated in C than it does in the original script, but that allows for a much greater flexibility and performance.</p>   <p>Here again it is a good point to take a pause.</p>   <p>Lesson three is: study the code. Really, it is the best way to learn about the organization of Git (after you know the basic concepts).</p>   <p>So, think about something which you are interested in, say, \"how can I access a blob just knowing the object name of it?\". The first step is to find a Git command with which you can do it. In this example, it is either <code>git show</code> or <code>git cat-file</code>.</p>   <p>For the sake of clarity, let’s stay with <code>git cat-file</code>, because it</p>  <div class=\"ulist\"> <ul> <li> <p>is plumbing, and</p> </li> <li> <p>was around even in the initial commit (it literally went only through some 20 revisions as <code>cat-file.c</code>, was renamed to <code>builtin/cat-file.c</code> when made a builtin, and then saw less than 10 versions).</p> </li> </ul> </div>  <p>So, look into <code>builtin/cat-file.c</code>, search for <code>cmd_cat_file()</code> and look what it does.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        git_config(git_default_config);\n        if (argc != 3)\n                usage(\"git cat-file [-t|-s|-e|-p|&lt;type&gt;] &lt;sha1&gt;\");\n        if (get_sha1(argv[2], sha1))\n                die(\"Not a valid object name %s\", argv[2]);</pre> </div> </div>  <p>Let’s skip over the obvious details; the only really interesting part here is the call to <code>get_sha1()</code>. It tries to interpret <code>argv[2]</code> as an object name, and if it refers to an object which is present in the current repository, it writes the resulting SHA-1 into the variable <code>sha1</code>.</p>   <p>Two things are interesting here:</p>  <div class=\"ulist\"> <ul> <li> <p><code>get_sha1()</code> returns 0 on <code>success</code>. This might surprise some new Git hackers, but there is a long tradition in UNIX to return different negative numbers in case of different errors—​and 0 on success.</p> </li> <li> <p>the variable <code>sha1</code> in the function signature of <code>get_sha1()</code> is <code>unsigned\nchar *</code>, but is actually expected to be a pointer to <code>unsigned\nchar[20]</code>. This variable will contain the 160-bit SHA-1 of the given commit. Note that whenever a SHA-1 is passed as <code>unsigned char *</code>, it is the binary representation, as opposed to the ASCII representation in hex characters, which is passed as <code>char *</code>.</p> </li> </ul> </div>  <p>You will see both of these things throughout the code.</p>   <p>Now, for the meat:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        case 0:\n                buf = read_object_with_reference(sha1, argv[1], &amp;size, NULL);</pre> </div> </div>  <p>This is how you read a blob (actually, not only a blob, but any type of object). To know how the function <code>read_object_with_reference()</code> actually works, find the source code for it (something like <code>git grep\nread_object_with | grep \":[a-z]\"</code> in the Git repository), and read the source.</p>   <p>To find out how the result can be used, just read on in <code>cmd_cat_file()</code>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        write_or_die(1, buf, size);</pre> </div> </div>  <p>Sometimes, you do not know where to look for a feature. In many such cases, it helps to search through the output of <code>git log</code>, and then <code>git show</code> the corresponding commit.</p>   <p>Example: If you know that there was some test case for <code>git bundle</code>, but do not remember where it was (yes, you <code>could</code> <code>git grep bundle t/</code>, but that does not illustrate the point!):</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log --no-merges t/</pre> </div> </div>  <p>In the pager (<code>less</code>), just search for \"bundle\", go a few lines back, and see that it is in commit 18449ab0…​ Now just copy this object name, and paste it into the command line</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show 18449ab0</pre> </div> </div>  <p>Voila.</p>   <p>Another example: Find out what to do in order to make some script a builtin:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log --no-merges --diff-filter=A builtin/*.c</pre> </div> </div>  <p>You see, Git is actually the best tool to find out about the source of Git itself!</p> </div> </div>   <h1 id=\"glossary\">Git Glossary</h1> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">\nalternate object database</dt> <dd> <p>Via the alternates mechanism, a <a href=\"#def_repository\">repository</a> can inherit part of its <a href=\"#def_object_database\">object database</a> from another object database, which is called an \"alternate\".</p> </dd> <dt class=\"hdlist1\">\nbare repository</dt> <dd> <p>A bare repository is normally an appropriately named <a href=\"#def_directory\">directory</a> with a <code>.git</code> suffix that does not have a locally checked-out copy of any of the files under revision control. That is, all of the Git administrative and control files that would normally be present in the hidden <code>.git</code> sub-directory are directly present in the <code>repository.git</code> directory instead, and no other files are present and checked out. Usually publishers of public repositories make bare repositories available.</p> </dd> <dt class=\"hdlist1\">\nblob object</dt> <dd> <p>Untyped <a href=\"#def_object\">object</a>, e.g. the contents of a file.</p> </dd> <dt class=\"hdlist1\">\nbranch</dt> <dd> <p>A \"branch\" is an active line of development. The most recent <a href=\"#def_commit\">commit</a> on a branch is referred to as the tip of that branch. The tip of the branch is referenced by a branch <a href=\"#def_head\">head</a>, which moves forward as additional development is done on the branch. A single Git <a href=\"#def_repository\">repository</a> can track an arbitrary number of branches, but your <a href=\"#def_working_tree\">working tree</a> is associated with just one of them (the \"current\" or \"checked out\" branch), and <a href=\"#def_HEAD\">HEAD</a> points to that branch.</p> </dd> <dt class=\"hdlist1\">\ncache</dt> <dd> <p>Obsolete for: <a href=\"#def_index\">index</a>.</p> </dd> <dt class=\"hdlist1\">\nchain</dt> <dd> <p>A list of objects, where each <a href=\"#def_object\">object</a> in the list contains a reference to its successor (for example, the successor of a <a href=\"#def_commit\">commit</a> could be one of its <a href=\"#def_parent\">parents</a>).</p> </dd> <dt class=\"hdlist1\">\nchangeset</dt> <dd> <p>BitKeeper/cvsps speak for \"<a href=\"#def_commit\">commit</a>\". Since Git does not store changes, but states, it really does not make sense to use the term \"changesets\" with Git.</p> </dd> <dt class=\"hdlist1\">\ncheckout</dt> <dd> <p>The action of updating all or part of the <a href=\"#def_working_tree\">working tree</a> with a <a href=\"#def_tree_object\">tree object</a> or <a href=\"#def_blob_object\">blob</a> from the <a href=\"#def_object_database\">object database</a>, and updating the <a href=\"#def_index\">index</a> and <a href=\"#def_HEAD\">HEAD</a> if the whole working tree has been pointed at a new <a href=\"#def_branch\">branch</a>.</p> </dd> <dt class=\"hdlist1\">\ncherry-picking</dt> <dd> <p>In <a href=\"#def_SCM\">SCM</a> jargon, \"cherry pick\" means to choose a subset of changes out of a series of changes (typically commits) and record them as a new series of changes on top of a different codebase. In Git, this is performed by the \"git cherry-pick\" command to extract the change introduced by an existing <a href=\"#def_commit\">commit</a> and to record it based on the tip of the current <a href=\"#def_branch\">branch</a> as a new commit.</p> </dd> <dt class=\"hdlist1\">\nclean</dt> <dd> <p>A <a href=\"#def_working_tree\">working tree</a> is clean, if it corresponds to the <a href=\"#def_revision\">revision</a> referenced by the current <a href=\"#def_head\">head</a>. Also see \"<a href=\"#def_dirty\">dirty</a>\".</p> </dd> <dt class=\"hdlist1\">\ncommit</dt> <dd> <p>As a noun: A single point in the Git history; the entire history of a project is represented as a set of interrelated commits. The word \"commit\" is often used by Git in the same places other revision control systems use the words \"revision\" or \"version\". Also used as a short hand for <a href=\"#def_commit_object\">commit object</a>.</p>  <p>As a verb: The action of storing a new snapshot of the project’s state in the Git history, by creating a new commit representing the current state of the <a href=\"#def_index\">index</a> and advancing <a href=\"#def_HEAD\">HEAD</a> to point at the new commit.</p>  </dd> <dt class=\"hdlist1\">\ncommit object</dt> <dd> <p>An <a href=\"#def_object\">object</a> which contains the information about a particular <a href=\"#def_revision\">revision</a>, such as <a href=\"#def_parent\">parents</a>, committer, author, date and the <a href=\"#def_tree_object\">tree object</a> which corresponds to the top <a href=\"#def_directory\">directory</a> of the stored revision.</p> </dd> <dt class=\"hdlist1\">\ncommit-ish (also committish)</dt> <dd> <p>A <a href=\"#def_commit_object\">commit object</a> or an <a href=\"#def_object\">object</a> that can be recursively dereferenced to a commit object. The following are all commit-ishes: a commit object, a <a href=\"#def_tag_object\">tag object</a> that points to a commit object, a tag object that points to a tag object that points to a commit object, etc.</p> </dd> <dt class=\"hdlist1\">\ncore Git</dt> <dd> <p>Fundamental data structures and utilities of Git. Exposes only limited source code management tools.</p> </dd> <dt class=\"hdlist1\">\nDAG</dt> <dd> <p>Directed acyclic graph. The <a href=\"#def_commit_object\">commit objects</a> form a directed acyclic graph, because they have parents (directed), and the graph of commit objects is acyclic (there is no <a href=\"#def_chain\">chain</a> which begins and ends with the same <a href=\"#def_object\">object</a>).</p> </dd> <dt class=\"hdlist1\">\ndangling object</dt> <dd> <p>An <a href=\"#def_unreachable_object\">unreachable object</a> which is not <a href=\"#def_reachable\">reachable</a> even from other unreachable objects; a dangling object has no references to it from any reference or <a href=\"#def_object\">object</a> in the <a href=\"#def_repository\">repository</a>.</p> </dd> <dt class=\"hdlist1\">\ndetached HEAD</dt> <dd> <p>Normally the <a href=\"#def_HEAD\">HEAD</a> stores the name of a <a href=\"#def_branch\">branch</a>, and commands that operate on the history HEAD represents operate on the history leading to the tip of the branch the HEAD points at. However, Git also allows you to <a href=\"#def_checkout\">check out</a> an arbitrary <a href=\"#def_commit\">commit</a> that isn’t necessarily the tip of any particular branch. The HEAD in such a state is called \"detached\".</p>  <p>Note that commands that operate on the history of the current branch (e.g. <code>git commit</code> to build a new history on top of it) still work while the HEAD is detached. They update the HEAD to point at the tip of the updated history without affecting any branch. Commands that update or inquire information <code>about</code> the current branch (e.g. <code>git\nbranch --set-upstream-to</code> that sets what remote-tracking branch the current branch integrates with) obviously do not work, as there is no (real) current branch to ask about in this state.</p>  </dd> <dt class=\"hdlist1\">\ndirectory</dt> <dd> <p>The list you get with \"ls\" :-)</p> </dd> <dt class=\"hdlist1\">\ndirty</dt> <dd> <p>A <a href=\"#def_working_tree\">working tree</a> is said to be \"dirty\" if it contains modifications which have not been <a href=\"#def_commit\">committed</a> to the current <a href=\"#def_branch\">branch</a>.</p> </dd> <dt class=\"hdlist1\">\nevil merge</dt> <dd> <p>An evil merge is a <a href=\"#def_merge\">merge</a> that introduces changes that do not appear in any <a href=\"#def_parent\">parent</a>.</p> </dd> <dt class=\"hdlist1\">\nfast-forward</dt> <dd> <p>A fast-forward is a special type of <a href=\"#def_merge\">merge</a> where you have a <a href=\"#def_revision\">revision</a> and you are \"merging\" another <a href=\"#def_branch\">branch</a>'s changes that happen to be a descendant of what you have. In such a case, you do not make a new <a href=\"#def_merge\">merge</a> <a href=\"#def_commit\">commit</a> but instead just update to his revision. This will happen frequently on a <a href=\"#def_remote_tracking_branch\">remote-tracking branch</a> of a remote <a href=\"#def_repository\">repository</a>.</p> </dd> <dt class=\"hdlist1\">\nfetch</dt> <dd> <p>Fetching a <a href=\"#def_branch\">branch</a> means to get the branch’s <a href=\"#def_head_ref\">head ref</a> from a remote <a href=\"#def_repository\">repository</a>, to find out which objects are missing from the local <a href=\"#def_object_database\">object database</a>, and to get them, too. See also <a href=\"git-fetch\">git-fetch[1]</a>.</p> </dd> <dt class=\"hdlist1\">\nfile system</dt> <dd> <p>Linus Torvalds originally designed Git to be a user space file system, i.e. the infrastructure to hold files and directories. That ensured the efficiency and speed of Git.</p> </dd> <dt class=\"hdlist1\">\nGit archive</dt> <dd> <p>Synonym for <a href=\"#def_repository\">repository</a> (for arch people).</p> </dd> <dt class=\"hdlist1\">\ngitfile</dt> <dd> <p>A plain file <code>.git</code> at the root of a working tree that points at the directory that is the real repository.</p> </dd> <dt class=\"hdlist1\">\ngrafts</dt> <dd> <p>Grafts enables two otherwise different lines of development to be joined together by recording fake ancestry information for commits. This way you can make Git pretend the set of <a href=\"#def_parent\">parents</a> a <a href=\"#def_commit\">commit</a> has is different from what was recorded when the commit was created. Configured via the <code>.git/info/grafts</code> file.</p>  <p>Note that the grafts mechanism is outdated and can lead to problems transferring objects between repositories; see <a href=\"git-replace\">git-replace[1]</a> for a more flexible and robust system to do the same thing.</p>  </dd> <dt class=\"hdlist1\">\nhash</dt> <dd> <p>In Git’s context, synonym for <a href=\"#def_object_name\">object name</a>.</p> </dd> <dt class=\"hdlist1\">\nhead</dt> <dd> <p>A <a href=\"#def_ref\">named reference</a> to the <a href=\"#def_commit\">commit</a> at the tip of a <a href=\"#def_branch\">branch</a>. Heads are stored in a file in <code>$GIT_DIR/refs/heads/</code> directory, except when using packed refs. (See <a href=\"git-pack-refs\">git-pack-refs[1]</a>.)</p> </dd> <dt class=\"hdlist1\">\nHEAD</dt> <dd> <p>The current <a href=\"#def_branch\">branch</a>. In more detail: Your <a href=\"#def_working_tree\">working tree</a> is normally derived from the state of the tree referred to by HEAD. HEAD is a reference to one of the <a href=\"#def_head\">heads</a> in your repository, except when using a <a href=\"#def_detached_HEAD\">detached HEAD</a>, in which case it directly references an arbitrary commit.</p> </dd> <dt class=\"hdlist1\">\nhead ref</dt> <dd> <p>A synonym for <a href=\"#def_head\">head</a>.</p> </dd> <dt class=\"hdlist1\">\nhook</dt> <dd> <p>During the normal execution of several Git commands, call-outs are made to optional scripts that allow a developer to add functionality or checking. Typically, the hooks allow for a command to be pre-verified and potentially aborted, and allow for a post-notification after the operation is done. The hook scripts are found in the <code>$GIT_DIR/hooks/</code> directory, and are enabled by simply removing the <code>.sample</code> suffix from the filename. In earlier versions of Git you had to make them executable.</p> </dd> <dt class=\"hdlist1\">\nindex</dt> <dd> <p>A collection of files with stat information, whose contents are stored as objects. The index is a stored version of your <a href=\"#def_working_tree\">working tree</a>. Truth be told, it can also contain a second, and even a third version of a working tree, which are used when <a href=\"#def_merge\">merging</a>.</p> </dd> <dt class=\"hdlist1\">\nindex entry</dt> <dd> <p>The information regarding a particular file, stored in the <a href=\"#def_index\">index</a>. An index entry can be unmerged, if a <a href=\"#def_merge\">merge</a> was started, but not yet finished (i.e. if the index contains multiple versions of that file).</p> </dd> <dt class=\"hdlist1\">\nmaster</dt> <dd> <p>The default development <a href=\"#def_branch\">branch</a>. Whenever you create a Git <a href=\"#def_repository\">repository</a>, a branch named \"master\" is created, and becomes the active branch. In most cases, this contains the local development, though that is purely by convention and is not required.</p> </dd> <dt class=\"hdlist1\">\nmerge</dt> <dd> <p>As a verb: To bring the contents of another <a href=\"#def_branch\">branch</a> (possibly from an external <a href=\"#def_repository\">repository</a>) into the current branch. In the case where the merged-in branch is from a different repository, this is done by first <a href=\"#def_fetch\">fetching</a> the remote branch and then merging the result into the current branch. This combination of fetch and merge operations is called a <a href=\"#def_pull\">pull</a>. Merging is performed by an automatic process that identifies changes made since the branches diverged, and then applies all those changes together. In cases where changes conflict, manual intervention may be required to complete the merge.</p>  <p>As a noun: unless it is a <a href=\"#def_fast_forward\">fast-forward</a>, a successful merge results in the creation of a new <a href=\"#def_commit\">commit</a> representing the result of the merge, and having as <a href=\"#def_parent\">parents</a> the tips of the merged <a href=\"#def_branch\">branches</a>. This commit is referred to as a \"merge commit\", or sometimes just a \"merge\".</p>  </dd> <dt class=\"hdlist1\">\nobject</dt> <dd> <p>The unit of storage in Git. It is uniquely identified by the <a href=\"#def_SHA1\">SHA-1</a> of its contents. Consequently, an object can not be changed.</p> </dd> <dt class=\"hdlist1\">\nobject database</dt> <dd> <p>Stores a set of \"objects\", and an individual <a href=\"#def_object\">object</a> is identified by its <a href=\"#def_object_name\">object name</a>. The objects usually live in <code>$GIT_DIR/objects/</code>.</p> </dd> <dt class=\"hdlist1\">\nobject identifier</dt> <dd> <p>Synonym for <a href=\"#def_object_name\">object name</a>.</p> </dd> <dt class=\"hdlist1\">\nobject name</dt> <dd> <p>The unique identifier of an <a href=\"#def_object\">object</a>. The object name is usually represented by a 40 character hexadecimal string. Also colloquially called <a href=\"#def_SHA1\">SHA-1</a>.</p> </dd> <dt class=\"hdlist1\">\nobject type</dt> <dd> <p>One of the identifiers \"<a href=\"#def_commit_object\">commit</a>\", \"<a href=\"#def_tree_object\">tree</a>\", \"<a href=\"#def_tag_object\">tag</a>\" or \"<a href=\"#def_blob_object\">blob</a>\" describing the type of an <a href=\"#def_object\">object</a>.</p> </dd> <dt class=\"hdlist1\">\noctopus</dt> <dd> <p>To <a href=\"#def_merge\">merge</a> more than two <a href=\"#def_branch\">branches</a>.</p> </dd> <dt class=\"hdlist1\">\norigin</dt> <dd> <p>The default upstream <a href=\"#def_repository\">repository</a>. Most projects have at least one upstream project which they track. By default <code>origin</code> is used for that purpose. New upstream updates will be fetched into <a href=\"#def_remote_tracking_branch\">remote-tracking branches</a> named origin/name-of-upstream-branch, which you can see using <code>git branch -r</code>.</p> </dd> <dt class=\"hdlist1\">\npack</dt> <dd> <p>A set of objects which have been compressed into one file (to save space or to transmit them efficiently).</p> </dd> <dt class=\"hdlist1\">\npack index</dt> <dd> <p>The list of identifiers, and other information, of the objects in a <a href=\"#def_pack\">pack</a>, to assist in efficiently accessing the contents of a pack.</p> </dd> <dt class=\"hdlist1\">\npathspec</dt> <dd> <p>Pattern used to limit paths in Git commands.</p>  <p>Pathspecs are used on the command line of \"git ls-files\", \"git ls-tree\", \"git add\", \"git grep\", \"git diff\", \"git checkout\", and many other commands to limit the scope of operations to some subset of the tree or worktree. See the documentation of each command for whether paths are relative to the current directory or toplevel. The pathspec syntax is as follows:</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"ulist\"> <ul> <li> <p>any path matches itself</p> </li> <li> <p>the pathspec up to the last slash represents a directory prefix. The scope of that pathspec is limited to that subtree.</p> </li> <li> <p>the rest of the pathspec is a pattern for the remainder of the pathname. Paths relative to the directory prefix will be matched against that pattern using fnmatch(3); in particular, <code>*</code> and <code>?</code> <code>can</code> match directory separators.</p> </li> </ul> </div> </div> </div>  <p>For example, Documentation/*.jpg will match all .jpg files in the Documentation subtree, including Documentation/chapter_1/figure_1.jpg.</p>   <p>A pathspec that begins with a colon <code>:</code> has special meaning. In the short form, the leading colon <code>:</code> is followed by zero or more \"magic signature\" letters (which optionally is terminated by another colon <code>:</code>), and the remainder is the pattern to match against the path. The \"magic signature\" consists of ASCII symbols that are neither alphanumeric, glob, regex special characters nor colon. The optional colon that terminates the \"magic signature\" can be omitted if the pattern begins with a character that does not belong to \"magic signature\" symbol set and is not a colon.</p>   <p>In the long form, the leading colon <code>:</code> is followed by a open parenthesis <code>(</code>, a comma-separated list of zero or more \"magic words\", and a close parentheses <code>)</code>, and the remainder is the pattern to match against the path.</p>   <p>A pathspec with only a colon means \"there is no pathspec\". This form should not be combined with other pathspec.</p>  <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">top</dt> <dd> <p>The magic word <code>top</code> (magic signature: <code>/</code>) makes the pattern match from the root of the working tree, even when you are running the command from inside a subdirectory.</p> </dd> <dt class=\"hdlist1\">literal</dt> <dd> <p>Wildcards in the pattern such as <code>*</code> or <code>?</code> are treated as literal characters.</p> </dd> <dt class=\"hdlist1\">icase</dt> <dd> <p>Case insensitive match.</p> </dd> <dt class=\"hdlist1\">glob</dt> <dd> <p>Git treats the pattern as a shell glob suitable for consumption by fnmatch(3) with the FNM_PATHNAME flag: wildcards in the pattern will not match a / in the pathname. For example, \"Documentation/*.html\" matches \"Documentation/git.html\" but not \"Documentation/ppc/ppc.html\" or \"tools/perf/Documentation/perf.html\".</p>  <p>Two consecutive asterisks (\"<code>**</code>\") in patterns matched against full pathname may have special meaning:</p>  <div class=\"ulist\"> <ul> <li> <p>A leading \"<code>**</code>\" followed by a slash means match in all directories. For example, \"<code>**/foo</code>\" matches file or directory \"<code>foo</code>\" anywhere, the same as pattern \"<code>foo</code>\". \"<code>**/foo/bar</code>\" matches file or directory \"<code>bar</code>\" anywhere that is directly under directory \"<code>foo</code>\".</p> </li> <li> <p>A trailing \"<code>/**</code>\" matches everything inside. For example, \"<code>abc/**</code>\" matches all files inside directory \"abc\", relative to the location of the <code>.gitignore</code> file, with infinite depth.</p> </li> <li> <p>A slash followed by two consecutive asterisks then a slash matches zero or more directories. For example, \"<code>a/**/b</code>\" matches \"<code>a/b</code>\", \"<code>a/x/b</code>\", \"<code>a/x/y/b</code>\" and so on.</p> </li> <li> <p>Other consecutive asterisks are considered invalid.</p>  <p>Glob magic is incompatible with literal magic.</p>  </li> </ul> </div> </dd> <dt class=\"hdlist1\">exclude</dt> <dd> <p>After a path matches any non-exclude pathspec, it will be run through all exclude pathspec (magic signature: <code>!</code>). If it matches, the path is ignored.</p> </dd> </dl> </div> </div> </div> </dd> <dt class=\"hdlist1\">\nparent</dt> <dd> <p>A <a href=\"#def_commit_object\">commit object</a> contains a (possibly empty) list of the logical predecessor(s) in the line of development, i.e. its parents.</p> </dd> <dt class=\"hdlist1\">\npickaxe</dt> <dd> <p>The term <a href=\"#def_pickaxe\">pickaxe</a> refers to an option to the diffcore routines that help select changes that add or delete a given text string. With the <code>--pickaxe-all</code> option, it can be used to view the full <a href=\"#def_changeset\">changeset</a> that introduced or removed, say, a particular line of text. See <a href=\"git-diff\">git-diff[1]</a>.</p> </dd> <dt class=\"hdlist1\">\nplumbing</dt> <dd> <p>Cute name for <a href=\"#def_core_git\">core Git</a>.</p> </dd> <dt class=\"hdlist1\">\nporcelain</dt> <dd> <p>Cute name for programs and program suites depending on <a href=\"#def_core_git\">core Git</a>, presenting a high level access to core Git. Porcelains expose more of a <a href=\"#def_SCM\">SCM</a> interface than the <a href=\"#def_plumbing\">plumbing</a>.</p> </dd> <dt class=\"hdlist1\">\nper-worktree ref</dt> <dd> <p>Refs that are per-<a href=\"#def_working_tree\">worktree</a>, rather than global. This is presently only <a href=\"#def_HEAD\">HEAD</a> and any refs that start with <code>refs/bisect/</code>, but might later include other unusual refs.</p> </dd> <dt class=\"hdlist1\">\npseudoref</dt> <dd> <p>Pseudorefs are a class of files under <code>$GIT_DIR</code> which behave like refs for the purposes of rev-parse, but which are treated specially by git. Pseudorefs both have names that are all-caps, and always start with a line consisting of a <a href=\"#def_SHA1\">SHA-1</a> followed by whitespace. So, HEAD is not a pseudoref, because it is sometimes a symbolic ref. They might optionally contain some additional data. <code>MERGE_HEAD</code> and <code>CHERRY_PICK_HEAD</code> are examples. Unlike <a href=\"#def_per_worktree_ref\">per-worktree refs</a>, these files cannot be symbolic refs, and never have reflogs. They also cannot be updated through the normal ref update machinery. Instead, they are updated by directly writing to the files. However, they can be read as if they were refs, so <code>git rev-parse\nMERGE_HEAD</code> will work.</p> </dd> <dt class=\"hdlist1\">\npull</dt> <dd> <p>Pulling a <a href=\"#def_branch\">branch</a> means to <a href=\"#def_fetch\">fetch</a> it and <a href=\"#def_merge\">merge</a> it. See also <a href=\"git-pull\">git-pull[1]</a>.</p> </dd> <dt class=\"hdlist1\">\npush</dt> <dd> <p>Pushing a <a href=\"#def_branch\">branch</a> means to get the branch’s <a href=\"#def_head_ref\">head ref</a> from a remote <a href=\"#def_repository\">repository</a>, find out if it is a direct ancestor to the branch’s local head ref, and in that case, putting all objects, which are <a href=\"#def_reachable\">reachable</a> from the local head ref, and which are missing from the remote repository, into the remote <a href=\"#def_object_database\">object database</a>, and updating the remote head ref. If the remote <a href=\"#def_head\">head</a> is not an ancestor to the local head, the push fails.</p> </dd> <dt class=\"hdlist1\">\nreachable</dt> <dd> <p>All of the ancestors of a given <a href=\"#def_commit\">commit</a> are said to be \"reachable\" from that commit. More generally, one <a href=\"#def_object\">object</a> is reachable from another if we can reach the one from the other by a <a href=\"#def_chain\">chain</a> that follows <a href=\"#def_tag\">tags</a> to whatever they tag, <a href=\"#def_commit_object\">commits</a> to their parents or trees, and <a href=\"#def_tree_object\">trees</a> to the trees or <a href=\"#def_blob_object\">blobs</a> that they contain.</p> </dd> <dt class=\"hdlist1\">\nrebase</dt> <dd> <p>To reapply a series of changes from a <a href=\"#def_branch\">branch</a> to a different base, and reset the <a href=\"#def_head\">head</a> of that branch to the result.</p> </dd> <dt class=\"hdlist1\">\nref</dt> <dd> <p>A name that begins with <code>refs/</code> (e.g. <code>refs/heads/master</code>) that points to an <a href=\"#def_object_name\">object name</a> or another ref (the latter is called a <a href=\"#def_symref\">symbolic ref</a>). For convenience, a ref can sometimes be abbreviated when used as an argument to a Git command; see <a href=\"gitrevisions\">gitrevisions[7]</a> for details. Refs are stored in the <a href=\"#def_repository\">repository</a>.</p>  <p>The ref namespace is hierarchical. Different subhierarchies are used for different purposes (e.g. the <code>refs/heads/</code> hierarchy is used to represent local branches).</p>   <p>There are a few special-purpose refs that do not begin with <code>refs/</code>. The most notable example is <code>HEAD</code>.</p>  </dd> <dt class=\"hdlist1\">\nreflog</dt> <dd> <p>A reflog shows the local \"history\" of a ref. In other words, it can tell you what the 3rd last revision in <code>this</code> repository was, and what was the current state in <code>this</code> repository, yesterday 9:14pm. See <a href=\"git-reflog\">git-reflog[1]</a> for details.</p> </dd> <dt class=\"hdlist1\">\nrefspec</dt> <dd> <p>A \"refspec\" is used by <a href=\"#def_fetch\">fetch</a> and <a href=\"#def_push\">push</a> to describe the mapping between remote <a href=\"#def_ref\">ref</a> and local ref.</p> </dd> <dt class=\"hdlist1\">\nremote repository</dt> <dd> <p>A <a href=\"#def_repository\">repository</a> which is used to track the same project but resides somewhere else. To communicate with remotes, see <a href=\"#def_fetch\">fetch</a> or <a href=\"#def_push\">push</a>.</p> </dd> <dt class=\"hdlist1\">\nremote-tracking branch</dt> <dd> <p>A <a href=\"#def_ref\">ref</a> that is used to follow changes from another <a href=\"#def_repository\">repository</a>. It typically looks like <code>refs/remotes/foo/bar</code> (indicating that it tracks a branch named <code>bar</code> in a remote named <code>foo</code>), and matches the right-hand-side of a configured fetch <a href=\"#def_refspec\">refspec</a>. A remote-tracking branch should not contain direct modifications or have local commits made to it.</p> </dd> <dt class=\"hdlist1\">\nrepository</dt> <dd> <p>A collection of <a href=\"#def_ref\">refs</a> together with an <a href=\"#def_object_database\">object database</a> containing all objects which are <a href=\"#def_reachable\">reachable</a> from the refs, possibly accompanied by meta data from one or more <a href=\"#def_porcelain\">porcelains</a>. A repository can share an object database with other repositories via <a href=\"#def_alternate_object_database\">alternates mechanism</a>.</p> </dd> <dt class=\"hdlist1\">\nresolve</dt> <dd> <p>The action of fixing up manually what a failed automatic <a href=\"#def_merge\">merge</a> left behind.</p> </dd> <dt class=\"hdlist1\">\nrevision</dt> <dd> <p>Synonym for <a href=\"#def_commit\">commit</a> (the noun).</p> </dd> <dt class=\"hdlist1\">\nrewind</dt> <dd> <p>To throw away part of the development, i.e. to assign the <a href=\"#def_head\">head</a> to an earlier <a href=\"#def_revision\">revision</a>.</p> </dd> <dt class=\"hdlist1\">\nSCM</dt> <dd> <p>Source code management (tool).</p> </dd> <dt class=\"hdlist1\">\nSHA-1</dt> <dd> <p>\"Secure Hash Algorithm 1\"; a cryptographic hash function. In the context of Git used as a synonym for <a href=\"#def_object_name\">object name</a>.</p> </dd> <dt class=\"hdlist1\">\nshallow clone</dt> <dd> <p>Mostly a synonym to <a href=\"#def_shallow_repository\">shallow repository</a> but the phrase makes it more explicit that it was created by running <code>git clone --depth=...</code> command.</p> </dd> <dt class=\"hdlist1\">\nshallow repository</dt> <dd> <p>A shallow <a href=\"#def_repository\">repository</a> has an incomplete history some of whose <a href=\"#def_commit\">commits</a> have <a href=\"#def_parent\">parents</a> cauterized away (in other words, Git is told to pretend that these commits do not have the parents, even though they are recorded in the <a href=\"#def_commit_object\">commit object</a>). This is sometimes useful when you are interested only in the recent history of a project even though the real history recorded in the upstream is much larger. A shallow repository is created by giving the <code>--depth</code> option to <a href=\"git-clone\">git-clone[1]</a>, and its history can be later deepened with <a href=\"git-fetch\">git-fetch[1]</a>.</p> </dd> <dt class=\"hdlist1\">\nsubmodule</dt> <dd> <p>A <a href=\"#def_repository\">repository</a> that holds the history of a separate project inside another repository (the latter of which is called <a href=\"#def_superproject\">superproject</a>).</p> </dd> <dt class=\"hdlist1\">\nsuperproject</dt> <dd> <p>A <a href=\"#def_repository\">repository</a> that references repositories of other projects in its working tree as <a href=\"#def_submodule\">submodules</a>. The superproject knows about the names of (but does not hold copies of) commit objects of the contained submodules.</p> </dd> <dt class=\"hdlist1\">\nsymref</dt> <dd> <p>Symbolic reference: instead of containing the <a href=\"#def_SHA1\">SHA-1</a> id itself, it is of the format <code>ref: refs/some/thing</code> and when referenced, it recursively dereferences to this reference. <code><a href=\"#def_HEAD\">HEAD</a></code> is a prime example of a symref. Symbolic references are manipulated with the <a href=\"git-symbolic-ref\">git-symbolic-ref[1]</a> command.</p> </dd> <dt class=\"hdlist1\">\ntag</dt> <dd> <p>A <a href=\"#def_ref\">ref</a> under <code>refs/tags/</code> namespace that points to an object of an arbitrary type (typically a tag points to either a <a href=\"#def_tag_object\">tag</a> or a <a href=\"#def_commit_object\">commit object</a>). In contrast to a <a href=\"#def_head\">head</a>, a tag is not updated by the <code>commit</code> command. A Git tag has nothing to do with a Lisp tag (which would be called an <a href=\"#def_object_type\">object type</a> in Git’s context). A tag is most typically used to mark a particular point in the commit ancestry <a href=\"#def_chain\">chain</a>.</p> </dd> <dt class=\"hdlist1\">\ntag object</dt> <dd> <p>An <a href=\"#def_object\">object</a> containing a <a href=\"#def_ref\">ref</a> pointing to another object, which can contain a message just like a <a href=\"#def_commit_object\">commit object</a>. It can also contain a (PGP) signature, in which case it is called a \"signed tag object\".</p> </dd> <dt class=\"hdlist1\">\ntopic branch</dt> <dd> <p>A regular Git <a href=\"#def_branch\">branch</a> that is used by a developer to identify a conceptual line of development. Since branches are very easy and inexpensive, it is often desirable to have several small branches that each contain very well defined concepts or small incremental yet related changes.</p> </dd> <dt class=\"hdlist1\">\ntree</dt> <dd> <p>Either a <a href=\"#def_working_tree\">working tree</a>, or a <a href=\"#def_tree_object\">tree object</a> together with the dependent <a href=\"#def_blob_object\">blob</a> and tree objects (i.e. a stored representation of a working tree).</p> </dd> <dt class=\"hdlist1\">\ntree object</dt> <dd> <p>An <a href=\"#def_object\">object</a> containing a list of file names and modes along with refs to the associated blob and/or tree objects. A <a href=\"#def_tree\">tree</a> is equivalent to a <a href=\"#def_directory\">directory</a>.</p> </dd> <dt class=\"hdlist1\">\ntree-ish (also treeish)</dt> <dd> <p>A <a href=\"#def_tree_object\">tree object</a> or an <a href=\"#def_object\">object</a> that can be recursively dereferenced to a tree object. Dereferencing a <a href=\"#def_commit_object\">commit object</a> yields the tree object corresponding to the <a href=\"#def_revision\">revision</a>'s top <a href=\"#def_directory\">directory</a>. The following are all tree-ishes: a <a href=\"#def_commit-ish\">commit-ish</a>, a tree object, a <a href=\"#def_tag_object\">tag object</a> that points to a tree object, a tag object that points to a tag object that points to a tree object, etc.</p> </dd> <dt class=\"hdlist1\">\nunmerged index</dt> <dd> <p>An <a href=\"#def_index\">index</a> which contains unmerged <a href=\"#def_index_entry\">index entries</a>.</p> </dd> <dt class=\"hdlist1\">\nunreachable object</dt> <dd> <p>An <a href=\"#def_object\">object</a> which is not <a href=\"#def_reachable\">reachable</a> from a <a href=\"#def_branch\">branch</a>, <a href=\"#def_tag\">tag</a>, or any other reference.</p> </dd> <dt class=\"hdlist1\">\nupstream branch</dt> <dd> <p>The default <a href=\"#def_branch\">branch</a> that is merged into the branch in question (or the branch in question is rebased onto). It is configured via branch.&lt;name&gt;.remote and branch.&lt;name&gt;.merge. If the upstream branch of <code>A</code> is <code>origin/B</code> sometimes we say \"<code>A</code> is tracking <code>origin/B</code>\".</p> </dd> <dt class=\"hdlist1\">\nworking tree</dt> <dd> <p>The tree of actual checked out files. The working tree normally contains the contents of the <a href=\"#def_HEAD\">HEAD</a> commit’s tree, plus any local changes that you have made but not yet committed.</p> </dd> </dl> </div>   <h1 id=\"git-quick-start\">Appendix A: Git Quick Reference</h1>  <p>This is a quick summary of the major commands; the previous chapters explain how these work in more detail.</p>  <div class=\"sect1\"> <h2 id=\"quick-creating-a-new-repository\">Creating a new repository</h2> <div class=\"sectionbody\"> <p>From a tarball:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ tar xzf project.tar.gz\n$ cd project\n$ git init\nInitialized empty Git repository in .git/\n$ git add .\n$ git commit</pre> </div> </div>  <p>From a remote repository:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git clone git://example.com/pub/project.git\n$ cd project</pre> </div> </div>\n</div> </div> <div class=\"sect1\"> <h2 id=\"managing-branches\">Managing branches</h2> <div class=\"sectionbody\">\n<div class=\"listingblock\"> <div class=\"content\"> <pre>$ git branch             # list all local branches in this repo\n$ git checkout test  # switch working directory to branch \"test\"\n$ git branch new     # create branch \"new\" starting at current HEAD\n$ git branch -d new  # delete branch \"new\"</pre> </div> </div>  <p>Instead of basing a new branch on current HEAD (the default), use:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git branch new test    # branch named \"test\"\n$ git branch new v2.6.15 # tag named v2.6.15\n$ git branch new HEAD^   # commit before the most recent\n$ git branch new HEAD^^  # commit before that\n$ git branch new test~10 # ten commits before tip of branch \"test\"</pre> </div> </div>  <p>Create and switch to a new branch at the same time:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout -b new v2.6.15</pre> </div> </div>  <p>Update and examine branches from the repository you cloned from:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git fetch                # update\n$ git branch -r                # list\n  origin/master\n  origin/next\n  ...\n$ git checkout -b masterwork origin/master</pre> </div> </div>  <p>Fetch a branch from a different repository, and give it a new name in your repository:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git fetch git://example.com/project.git theirbranch:mybranch\n$ git fetch git://example.com/project.git v2.6.15:mybranch</pre> </div> </div>  <p>Keep a list of repositories you work with regularly:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git remote add example git://example.com/project.git\n$ git remote                        # list remote repositories\nexample\norigin\n$ git remote show example        # get details\n* remote example\n  URL: git://example.com/project.git\n  Tracked remote branches\n    master\n    next\n    ...\n$ git fetch example                # update branches from example\n$ git branch -r                        # list all remote branches</pre> </div> </div>\n</div> </div> <div class=\"sect1\"> <h2 id=\"exploring-history\">Exploring history</h2> <div class=\"sectionbody\">\n<div class=\"listingblock\"> <div class=\"content\"> <pre>$ gitk                            # visualize and browse history\n$ git log                    # list all commits\n$ git log src/                    # ...modifying src/\n$ git log v2.6.15..v2.6.16  # ...in v2.6.16, not in v2.6.15\n$ git log master..test            # ...in branch test, not in branch master\n$ git log test..master            # ...in branch master, but not in test\n$ git log test...master            # ...in one branch, not in both\n$ git log -S'foo()'            # ...where difference contain \"foo()\"\n$ git log --since=\"2 weeks ago\"\n$ git log -p                    # show patches as well\n$ git show                    # most recent commit\n$ git diff v2.6.15..v2.6.16 # diff between two tagged versions\n$ git diff v2.6.15..HEAD    # diff with current head\n$ git grep \"foo()\"            # search working directory for \"foo()\"\n$ git grep v2.6.15 \"foo()\"  # search old tree for \"foo()\"\n$ git show v2.6.15:a.txt    # look at old version of a.txt</pre> </div> </div>  <p>Search for regressions:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect start\n$ git bisect bad                # current version is bad\n$ git bisect good v2.6.13-rc2        # last known good revision\nBisecting: 675 revisions left to test after this\n                                # test here, then:\n$ git bisect good                # if this revision is good, or\n$ git bisect bad                # if this revision is bad.\n                                # repeat until done.</pre> </div> </div>\n</div> </div> <div class=\"sect1\"> <h2 id=\"making-changes\">Making changes</h2> <div class=\"sectionbody\"> <p>Make sure Git knows who to blame:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ cat &gt;&gt;~/.gitconfig &lt;&lt;\\EOF\n[user]\n        name = Your Name Comes Here\n        email = you@yourdomain.example.com\nEOF</pre> </div> </div>  <p>Select file contents to include in the next commit, then make the commit:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git add a.txt    # updated file\n$ git add b.txt    # new file\n$ git rm c.txt     # old file\n$ git commit</pre> </div> </div>  <p>Or, prepare and create the commit in one step:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git commit d.txt # use latest content only of d.txt\n$ git commit -a           # use latest content of all tracked files</pre> </div> </div>\n</div> </div> <div class=\"sect1\"> <h2 id=\"merging\">Merging</h2> <div class=\"sectionbody\"><div class=\"listingblock\"> <div class=\"content\"> <pre>$ git merge test   # merge branch \"test\" into the current branch\n$ git pull git://example.com/project.git master\n                   # fetch and merge in remote branch\n$ git pull . test  # equivalent to git merge test</pre> </div> </div></div> </div> <div class=\"sect1\"> <h2 id=\"sharing-your-changes\">Sharing your changes</h2> <div class=\"sectionbody\"> <p>Importing or exporting patches:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git format-patch origin..HEAD # format a patch for each commit\n                                # in HEAD but not in origin\n$ git am mbox # import patches from the mailbox \"mbox\"</pre> </div> </div>  <p>Fetch a branch in a different Git repository, then merge into the current branch:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git pull git://example.com/project.git theirbranch</pre> </div> </div>  <p>Store the fetched branch into a local branch before merging into the current branch:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git pull git://example.com/project.git theirbranch:mybranch</pre> </div> </div>  <p>After creating commits on a local branch, update the remote branch with your commits:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git push ssh://example.com/project.git mybranch:theirbranch</pre> </div> </div>  <p>When remote and local branch are both named \"test\":</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git push ssh://example.com/project.git test</pre> </div> </div>  <p>Shortcut version for a frequently used remote repository:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git remote add example ssh://example.com/project.git\n$ git push example test</pre> </div> </div>\n</div> </div> <div class=\"sect1\"> <h2 id=\"repository-maintenance\">Repository maintenance</h2> <div class=\"sectionbody\"> <p>Check for corruption:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git fsck</pre> </div> </div>  <p>Recompress, remove unused cruft:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git gc</pre> </div> </div>\n</div> </div>   <h1 id=\"todo\">Appendix B: Notes and todo list for this manual</h1>  <p>This is a work in progress.</p>   <p>The basic requirements:</p>  <div class=\"ulist\"> <ul> <li> <p>It must be readable in order, from beginning to end, by someone intelligent with a basic grasp of the UNIX command line, but without any special knowledge of Git. If necessary, any other prerequisites should be specifically mentioned as they arise.</p> </li> <li> <p>Whenever possible, section headings should clearly describe the task they explain how to do, in language that requires no more knowledge than necessary: for example, \"importing patches into a project\" rather than \"the <code>git am</code> command\"</p> </li> </ul> </div>  <p>Think about how to create a clear chapter dependency graph that will allow people to get to important topics without necessarily reading everything in between.</p>   <p>Scan <code>Documentation/</code> for other stuff left out; in particular:</p>  <div class=\"ulist\"> <ul> <li> <p>howto’s</p> </li> <li> <p>some of <code>technical/</code>?</p> </li> <li> <p>hooks</p> </li> <li> <p>list of commands in <a href=\"git\">git[1]</a></p> </li> </ul> </div>  <p>Scan email archives for other stuff left out</p>   <p>Scan man pages to see if any assume more background than this manual provides.</p>   <p>Add more good examples. Entire sections of just cookbook examples might be a good idea; maybe make an \"advanced examples\" section a standard end-of-chapter section?</p>   <p>Include cross-references to the glossary, where appropriate.</p>   <p>Add a section on working with other version control systems, including CVS, Subversion, and just imports of series of release tarballs.</p>   <p>Write a chapter on using plumbing and writing scripts.</p>   <p>Alternates, clone -reference, etc.</p>   <p>More on recovery from repository corruption. See: <a href=\"http://marc.info/?l=git&amp;m=117263864820799&amp;w=2\" class=\"bare\">http://marc.info/?l=git&amp;m=117263864820799&amp;w=2</a> <a href=\"http://marc.info/?l=git&amp;m=117147855503798&amp;w=2\" class=\"bare\">http://marc.info/?l=git&amp;m=117147855503798&amp;w=2</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/user-manual.html\" class=\"_attribution-link\">https://git-scm.com/docs/user-manual.html</a>\n  </p>\n</div>\n","gitcore-tutorial":"<h1>gitcore-tutorial</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>gitcore-tutorial - A Git core tutorial for developers</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"> <p>git *</p> </div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>This tutorial explains how to use the \"core\" Git commands to set up and work with a Git repository.</p>   <p>If you just need to use Git as a revision control system you may prefer to start with \"A Tutorial Introduction to Git\" (<a href=\"gittutorial\">gittutorial[7]</a>) or <a href=\"user-manual\">the Git User Manual</a>.</p>   <p>However, an understanding of these low-level tools can be helpful if you want to understand Git’s internals.</p>   <p>The core Git is often called \"plumbing\", with the prettier user interfaces on top of it called \"porcelain\". You may not want to use the plumbing directly very often, but it can be good to know what the plumbing does for when the porcelain isn’t flushing.</p>   <p>Back when this document was originally written, many porcelain commands were shell scripts. For simplicity, it still uses them as examples to illustrate how plumbing is fit together to form the porcelain commands. The source tree includes some of these scripts in contrib/examples/ for reference. Although these are not implemented as shell scripts anymore, the description of what the plumbing layer commands do is still valid.</p>  <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> Deeper technical details are often marked as Notes, which you can skip on your first reading. </td> </tr> </table> </div>\n</div>   <h2 id=\"_creating_a_git_repository\">Creating a git repository</h2> <div class=\"sectionbody\"> <p>Creating a new Git repository couldn’t be easier: all Git repositories start out empty, and the only thing you need to do is find yourself a subdirectory that you want to use as a working tree - either an empty one for a totally new project, or an existing working tree that you want to import into Git.</p>   <p>For our first example, we’re going to start a totally new repository from scratch, with no pre-existing files, and we’ll call it <code>git-tutorial</code>. To start up, create a subdirectory for it, change into that subdirectory, and initialize the Git infrastructure with <code>git init</code>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ mkdir git-tutorial\n$ cd git-tutorial\n$ git init</pre> </div> </div>  <p>to which Git will reply</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>Initialized empty Git repository in .git/</pre> </div> </div>  <p>which is just Git’s way of saying that you haven’t been doing anything strange, and that it will have created a local <code>.git</code> directory setup for your new project. You will now have a <code>.git</code> directory, and you can inspect that with <code>ls</code>. For your new empty project, it should show you three entries, among other things:</p>  <div class=\"ulist\"> <ul> <li> <p>a file called <code>HEAD</code>, that has <code>ref: refs/heads/master</code> in it. This is similar to a symbolic link and points at <code>refs/heads/master</code> relative to the <code>HEAD</code> file.</p>  <p>Don’t worry about the fact that the file that the <code>HEAD</code> link points to doesn’t even exist yet — you haven’t created the commit that will start your <code>HEAD</code> development branch yet.</p>  </li> <li> <p>a subdirectory called <code>objects</code>, which will contain all the objects of your project. You should never have any real reason to look at the objects directly, but you might want to know that these objects are what contains all the real <code>data</code> in your repository.</p> </li> <li> <p>a subdirectory called <code>refs</code>, which contains references to objects.</p> </li> </ul> </div>  <p>In particular, the <code>refs</code> subdirectory will contain two other subdirectories, named <code>heads</code> and <code>tags</code> respectively. They do exactly what their names imply: they contain references to any number of different <code>heads</code> of development (aka <code>branches</code>), and to any <code>tags</code> that you have created to name specific versions in your repository.</p>   <p>One note: the special <code>master</code> head is the default branch, which is why the <code>.git/HEAD</code> file was created points to it even if it doesn’t yet exist. Basically, the <code>HEAD</code> link is supposed to always point to the branch you are working on right now, and you always start out expecting to work on the <code>master</code> branch.</p>   <p>However, this is only a convention, and you can name your branches anything you want, and don’t have to ever even <code>have</code> a <code>master</code> branch. A number of the Git tools will assume that <code>.git/HEAD</code> is valid, though.</p>  <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> An <em>object</em> is identified by its 160-bit SHA-1 hash, aka <em>object name</em>, and a reference to an object is always the 40-byte hex representation of that SHA-1 name. The files in the <code>refs</code> subdirectory are expected to contain these hex references (usually with a final <code>\\n</code> at the end), and you should thus expect to see a number of 41-byte files containing these references in these <code>refs</code> subdirectories when you actually start populating your tree. </td> </tr> </table> </div> <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> An advanced user may want to take a look at <a href=\"gitrepository-layout\">gitrepository-layout[5]</a> after finishing this tutorial. </td> </tr> </table> </div>  <p>You have now created your first Git repository. Of course, since it’s empty, that’s not very useful, so let’s start populating it with data.</p> </div>   <h2 id=\"_populating_a_git_repository\">Populating a git repository</h2> <div class=\"sectionbody\"> <p>We’ll keep this simple and stupid, so we’ll start off with populating a few trivial files just to get a feel for it.</p>   <p>Start off with just creating any random files that you want to maintain in your Git repository. We’ll start off with a few bad examples, just to get a feel for how this works:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ echo \"Hello World\" &gt;hello\n$ echo \"Silly example\" &gt;example</pre> </div> </div>  <p>you have now created two files in your working tree (aka <code>working directory</code>), but to actually check in your hard work, you will have to go through two steps:</p>  <div class=\"ulist\"> <ul> <li> <p>fill in the <code>index</code> file (aka <code>cache</code>) with the information about your working tree state.</p> </li> <li> <p>commit that index file as an object.</p> </li> </ul> </div>  <p>The first step is trivial: when you want to tell Git about any changes to your working tree, you use the <code>git update-index</code> program. That program normally just takes a list of filenames you want to update, but to avoid trivial mistakes, it refuses to add new entries to the index (or remove existing ones) unless you explicitly tell it that you’re adding a new entry with the <code>--add</code> flag (or removing an entry with the <code>--remove</code>) flag.</p>   <p>So to populate the index with the two files you just created, you can do</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git update-index --add hello example</pre> </div> </div>  <p>and you have now told Git to track those two files.</p>   <p>In fact, as you did that, if you now look into your object directory, you’ll notice that Git will have added two new objects to the object database. If you did exactly the steps above, you should now be able to do</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ ls .git/objects/??/*</pre> </div> </div>  <p>and see two files:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>.git/objects/55/7db03de997c86a4a028e1ebd3a1ceb225be238\n.git/objects/f2/4c74a2e500f5ee1332c86b94199f52b1d1d962</pre> </div> </div>  <p>which correspond with the objects with names of <code>557db...</code> and <code>f24c7...</code> respectively.</p>   <p>If you want to, you can use <code>git cat-file</code> to look at those objects, but you’ll have to use the object name, not the filename of the object:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git cat-file -t 557db03de997c86a4a028e1ebd3a1ceb225be238</pre> </div> </div>  <p>where the <code>-t</code> tells <code>git cat-file</code> to tell you what the \"type\" of the object is. Git will tell you that you have a \"blob\" object (i.e., just a regular file), and you can see the contents with</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git cat-file blob 557db03</pre> </div> </div>  <p>which will print out \"Hello World\". The object <code>557db03</code> is nothing more than the contents of your file <code>hello</code>.</p>  <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> Don’t confuse that object with the file <code>hello</code> itself. The object is literally just those specific <strong>contents</strong> of the file, and however much you later change the contents in file <code>hello</code>, the object we just looked at will never change. Objects are immutable. </td> </tr> </table> </div> <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> The second example demonstrates that you can abbreviate the object name to only the first several hexadecimal digits in most places. </td> </tr> </table> </div>  <p>Anyway, as we mentioned previously, you normally never actually take a look at the objects themselves, and typing long 40-character hex names is not something you’d normally want to do. The above digression was just to show that <code>git update-index</code> did something magical, and actually saved away the contents of your files into the Git object database.</p>   <p>Updating the index did something else too: it created a <code>.git/index</code> file. This is the index that describes your current working tree, and something you should be very aware of. Again, you normally never worry about the index file itself, but you should be aware of the fact that you have not actually really \"checked in\" your files into Git so far, you’ve only <strong>told</strong> Git about them.</p>   <p>However, since Git knows about them, you can now start using some of the most basic Git commands to manipulate the files or look at their status.</p>   <p>In particular, let’s not even check in the two files into Git yet, we’ll start off by adding another line to <code>hello</code> first:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ echo \"It's a new day for git\" &gt;&gt;hello</pre> </div> </div>  <p>and you can now, since you told Git about the previous state of <code>hello</code>, ask Git what has changed in the tree compared to your old index, using the <code>git diff-files</code> command:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git diff-files</pre> </div> </div>  <p>Oops. That wasn’t very readable. It just spit out its own internal version of a <code>diff</code>, but that internal version really just tells you that it has noticed that \"hello\" has been modified, and that the old object contents it had have been replaced with something else.</p>   <p>To make it readable, we can tell <code>git diff-files</code> to output the differences as a patch, using the <code>-p</code> flag:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git diff-files -p\ndiff --git a/hello b/hello\nindex 557db03..263414f 100644\n--- a/hello\n+++ b/hello\n@@ -1 +1,2 @@\n Hello World\n+It's a new day for git</pre> </div> </div>  <p>i.e. the diff of the change we caused by adding another line to <code>hello</code>.</p>   <p>In other words, <code>git diff-files</code> always shows us the difference between what is recorded in the index, and what is currently in the working tree. That’s very useful.</p>   <p>A common shorthand for <code>git diff-files -p</code> is to just write <code>git\ndiff</code>, which will do the same thing.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git diff\ndiff --git a/hello b/hello\nindex 557db03..263414f 100644\n--- a/hello\n+++ b/hello\n@@ -1 +1,2 @@\n Hello World\n+It's a new day for git</pre> </div> </div>\n</div>   <h2 id=\"_committing_git_state\">Committing git state</h2> <div class=\"sectionbody\"> <p>Now, we want to go to the next stage in Git, which is to take the files that Git knows about in the index, and commit them as a real tree. We do that in two phases: creating a <code>tree</code> object, and committing that <code>tree</code> object as a <code>commit</code> object together with an explanation of what the tree was all about, along with information of how we came to that state.</p>   <p>Creating a tree object is trivial, and is done with <code>git write-tree</code>. There are no options or other input: <code>git write-tree</code> will take the current index state, and write an object that describes that whole index. In other words, we’re now tying together all the different filenames with their contents (and their permissions), and we’re creating the equivalent of a Git \"directory\" object:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git write-tree</pre> </div> </div>  <p>and this will just output the name of the resulting tree, in this case (if you have done exactly as I’ve described) it should be</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>8988da15d077d4829fc51d8544c097def6644dbb</pre> </div> </div>  <p>which is another incomprehensible object name. Again, if you want to, you can use <code>git cat-file -t 8988d...</code> to see that this time the object is not a \"blob\" object, but a \"tree\" object (you can also use <code>git cat-file</code> to actually output the raw object contents, but you’ll see mainly a binary mess, so that’s less interesting).</p>   <p>However — normally you’d never use <code>git write-tree</code> on its own, because normally you always commit a tree into a commit object using the <code>git commit-tree</code> command. In fact, it’s easier to not actually use <code>git write-tree</code> on its own at all, but to just pass its result in as an argument to <code>git commit-tree</code>.</p>   <p><code>git commit-tree</code> normally takes several arguments — it wants to know what the <code>parent</code> of a commit was, but since this is the first commit ever in this new repository, and it has no parents, we only need to pass in the object name of the tree. However, <code>git commit-tree</code> also wants to get a commit message on its standard input, and it will write out the resulting object name for the commit to its standard output.</p>   <p>And this is where we create the <code>.git/refs/heads/master</code> file which is pointed at by <code>HEAD</code>. This file is supposed to contain the reference to the top-of-tree of the master branch, and since that’s exactly what <code>git commit-tree</code> spits out, we can do this all with a sequence of simple shell commands:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ tree=$(git write-tree)\n$ commit=$(echo 'Initial commit' | git commit-tree $tree)\n$ git update-ref HEAD $commit</pre> </div> </div>  <p>In this case this creates a totally new commit that is not related to anything else. Normally you do this only <strong>once</strong> for a project ever, and all later commits will be parented on top of an earlier commit.</p>   <p>Again, normally you’d never actually do this by hand. There is a helpful script called <code>git commit</code> that will do all of this for you. So you could have just written <code>git commit</code> instead, and it would have done the above magic scripting for you.</p> </div>   <h2 id=\"_making_a_change\">Making a change</h2> <div class=\"sectionbody\"> <p>Remember how we did the <code>git update-index</code> on file <code>hello</code> and then we changed <code>hello</code> afterward, and could compare the new state of <code>hello</code> with the state we saved in the index file?</p>   <p>Further, remember how I said that <code>git write-tree</code> writes the contents of the <strong>index</strong> file to the tree, and thus what we just committed was in fact the <strong>original</strong> contents of the file <code>hello</code>, not the new ones. We did that on purpose, to show the difference between the index state, and the state in the working tree, and how they don’t have to match, even when we commit things.</p>   <p>As before, if we do <code>git diff-files -p</code> in our git-tutorial project, we’ll still see the same difference we saw last time: the index file hasn’t changed by the act of committing anything. However, now that we have committed something, we can also learn to use a new command: <code>git diff-index</code>.</p>   <p>Unlike <code>git diff-files</code>, which showed the difference between the index file and the working tree, <code>git diff-index</code> shows the differences between a committed <strong>tree</strong> and either the index file or the working tree. In other words, <code>git diff-index</code> wants a tree to be diffed against, and before we did the commit, we couldn’t do that, because we didn’t have anything to diff against.</p>   <p>But now we can do</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git diff-index -p HEAD</pre> </div> </div>  <p>(where <code>-p</code> has the same meaning as it did in <code>git diff-files</code>), and it will show us the same difference, but for a totally different reason. Now we’re comparing the working tree not against the index file, but against the tree we just wrote. It just so happens that those two are obviously the same, so we get the same result.</p>   <p>Again, because this is a common operation, you can also just shorthand it with</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git diff HEAD</pre> </div> </div>  <p>which ends up doing the above for you.</p>   <p>In other words, <code>git diff-index</code> normally compares a tree against the working tree, but when given the <code>--cached</code> flag, it is told to instead compare against just the index cache contents, and ignore the current working tree state entirely. Since we just wrote the index file to HEAD, doing <code>git diff-index --cached -p HEAD</code> should thus return an empty set of differences, and that’s exactly what it does.</p>  <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\">  <p><code>git diff-index</code> really always uses the index for its comparisons, and saying that it compares a tree against the working tree is thus not strictly accurate. In particular, the list of files to compare (the \"meta-data\") <strong>always</strong> comes from the index file, regardless of whether the <code>--cached</code> flag is used or not. The <code>--cached</code> flag really only determines whether the file <strong>contents</strong> to be compared come from the working tree or not.</p>   <p>This is not hard to understand, as soon as you realize that Git simply never knows (or cares) about files that it is not told about explicitly. Git will never go <strong>looking</strong> for files to compare, it expects you to tell it what the files are, and that’s what the index is there for.</p>  </td> </tr> </table> </div>  <p>However, our next step is to commit the <strong>change</strong> we did, and again, to understand what’s going on, keep in mind the difference between \"working tree contents\", \"index file\" and \"committed tree\". We have changes in the working tree that we want to commit, and we always have to work through the index file, so the first thing we need to do is to update the index cache:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git update-index hello</pre> </div> </div>  <p>(note how we didn’t need the <code>--add</code> flag this time, since Git knew about the file already).</p>   <p>Note what happens to the different <code>git diff-*</code> versions here. After we’ve updated <code>hello</code> in the index, <code>git diff-files -p</code> now shows no differences, but <code>git diff-index -p HEAD</code> still <strong>does</strong> show that the current state is different from the state we committed. In fact, now <code>git diff-index</code> shows the same difference whether we use the <code>--cached</code> flag or not, since now the index is coherent with the working tree.</p>   <p>Now, since we’ve updated <code>hello</code> in the index, we can commit the new version. We could do it by writing the tree by hand again, and committing the tree (this time we’d have to use the <code>-p HEAD</code> flag to tell commit that the HEAD was the <strong>parent</strong> of the new commit, and that this wasn’t an initial commit any more), but you’ve done that once already, so let’s just use the helpful script this time:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git commit</pre> </div> </div>  <p>which starts an editor for you to write the commit message and tells you a bit about what you have done.</p>   <p>Write whatever message you want, and all the lines that start with <code>#</code> will be pruned out, and the rest will be used as the commit message for the change. If you decide you don’t want to commit anything after all at this point (you can continue to edit things and update the index), you can just leave an empty message. Otherwise <code>git commit</code> will commit the change for you.</p>   <p>You’ve now made your first real Git commit. And if you’re interested in looking at what <code>git commit</code> really does, feel free to investigate: it’s a few very simple shell scripts to generate the helpful (?) commit message headers, and a few one-liners that actually do the commit itself (<code>git commit</code>).</p> </div>   <h2 id=\"_inspecting_changes\">Inspecting changes</h2> <div class=\"sectionbody\"> <p>While creating changes is useful, it’s even more useful if you can tell later what changed. The most useful command for this is another of the <code>diff</code> family, namely <code>git diff-tree</code>.</p>   <p><code>git diff-tree</code> can be given two arbitrary trees, and it will tell you the differences between them. Perhaps even more commonly, though, you can give it just a single commit object, and it will figure out the parent of that commit itself, and show the difference directly. Thus, to get the same diff that we’ve already seen several times, we can now do</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git diff-tree -p HEAD</pre> </div> </div>  <p>(again, <code>-p</code> means to show the difference as a human-readable patch), and it will show what the last commit (in <code>HEAD</code>) actually changed.</p>  <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\">  <p>Here is an ASCII art by Jon Loeliger that illustrates how various <code>diff-*</code> commands compare things.</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>            diff-tree\n             +----+\n             |    |\n             |    |\n             V    V\n          +-----------+\n          | Object DB |\n          |  Backing  |\n          |   Store   |\n          +-----------+\n            ^    ^\n            |    |\n            |    |  diff-index --cached\n            |    |\ndiff-index  |    V\n            |  +-----------+\n            |  |   Index   |\n            |  |  \"cache\"  |\n            |  +-----------+\n            |    ^\n            |    |\n            |    |  diff-files\n            |    |\n            V    V\n          +-----------+\n          |  Working  |\n          | Directory |\n          +-----------+</pre> </div> </div> </td> </tr> </table> </div>  <p>More interestingly, you can also give <code>git diff-tree</code> the <code>--pretty</code> flag, which tells it to also show the commit message and author and date of the commit, and you can tell it to show a whole series of diffs. Alternatively, you can tell it to be \"silent\", and not show the diffs at all, but just show the actual commit message.</p>   <p>In fact, together with the <code>git rev-list</code> program (which generates a list of revisions), <code>git diff-tree</code> ends up being a veritable fount of changes. You can emulate <code>git log</code>, <code>git log -p</code>, etc. with a trivial script that pipes the output of <code>git rev-list</code> to <code>git diff-tree --stdin</code>, which was exactly how early versions of <code>git log</code> were implemented.</p> </div>   <h2 id=\"_tagging_a_version\">Tagging a version</h2> <div class=\"sectionbody\"> <p>In Git, there are two kinds of tags, a \"light\" one, and an \"annotated tag\".</p>   <p>A \"light\" tag is technically nothing more than a branch, except we put it in the <code>.git/refs/tags/</code> subdirectory instead of calling it a <code>head</code>. So the simplest form of tag involves nothing more than</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git tag my-first-tag</pre> </div> </div>  <p>which just writes the current <code>HEAD</code> into the <code>.git/refs/tags/my-first-tag</code> file, after which point you can then use this symbolic name for that particular state. You can, for example, do</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git diff my-first-tag</pre> </div> </div>  <p>to diff your current state against that tag which at this point will obviously be an empty diff, but if you continue to develop and commit stuff, you can use your tag as an \"anchor-point\" to see what has changed since you tagged it.</p>   <p>An \"annotated tag\" is actually a real Git object, and contains not only a pointer to the state you want to tag, but also a small tag name and message, along with optionally a PGP signature that says that yes, you really did that tag. You create these annotated tags with either the <code>-a</code> or <code>-s</code> flag to <code>git tag</code>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git tag -s &lt;tagname&gt;</pre> </div> </div>  <p>which will sign the current <code>HEAD</code> (but you can also give it another argument that specifies the thing to tag, e.g., you could have tagged the current <code>mybranch</code> point by using <code>git tag &lt;tagname&gt; mybranch</code>).</p>   <p>You normally only do signed tags for major releases or things like that, while the light-weight tags are useful for any marking you want to do — any time you decide that you want to remember a certain point, just create a private tag for it, and you have a nice symbolic name for the state at that point.</p> </div>   <h2 id=\"_copying_repositories\">Copying repositories</h2> <div class=\"sectionbody\"> <p>Git repositories are normally totally self-sufficient and relocatable. Unlike CVS, for example, there is no separate notion of \"repository\" and \"working tree\". A Git repository normally <strong>is</strong> the working tree, with the local Git information hidden in the <code>.git</code> subdirectory. There is nothing else. What you see is what you got.</p>  <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> You can tell Git to split the Git internal information from the directory that it tracks, but we’ll ignore that for now: it’s not how normal projects work, and it’s really only meant for special uses. So the mental model of \"the Git information is always tied directly to the working tree that it describes\" may not be technically 100% accurate, but it’s a good model for all normal use. </td> </tr> </table> </div>  <p>This has two implications:</p>  <div class=\"ulist\"> <ul> <li> <p>if you grow bored with the tutorial repository you created (or you’ve made a mistake and want to start all over), you can just do simple</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ rm -rf git-tutorial</pre> </div> </div>  <p>and it will be gone. There’s no external repository, and there’s no history outside the project you created.</p>  </li> <li> <p>if you want to move or duplicate a Git repository, you can do so. There is <code>git clone</code> command, but if all you want to do is just to create a copy of your repository (with all the full history that went along with it), you can do so with a regular <code>cp -a git-tutorial new-git-tutorial</code>.</p>  <p>Note that when you’ve moved or copied a Git repository, your Git index file (which caches various information, notably some of the \"stat\" information for the files involved) will likely need to be refreshed. So after you do a <code>cp -a</code> to create a new copy, you’ll want to do</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git update-index --refresh</pre> </div> </div>  <p>in the new repository to make sure that the index file is up-to-date.</p>  </li> </ul> </div>  <p>Note that the second point is true even across machines. You can duplicate a remote Git repository with <strong>any</strong> regular copy mechanism, be it <code>scp</code>, <code>rsync</code> or <code>wget</code>.</p>   <p>When copying a remote repository, you’ll want to at a minimum update the index cache when you do this, and especially with other peoples' repositories you often want to make sure that the index cache is in some known state (you don’t know <strong>what</strong> they’ve done and not yet checked in), so usually you’ll precede the <code>git update-index</code> with a</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git read-tree --reset HEAD\n$ git update-index --refresh</pre> </div> </div>  <p>which will force a total index re-build from the tree pointed to by <code>HEAD</code>. It resets the index contents to <code>HEAD</code>, and then the <code>git update-index</code> makes sure to match up all index entries with the checked-out files. If the original repository had uncommitted changes in its working tree, <code>git update-index --refresh</code> notices them and tells you they need to be updated.</p>   <p>The above can also be written as simply</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git reset</pre> </div> </div>  <p>and in fact a lot of the common Git command combinations can be scripted with the <code>git xyz</code> interfaces. You can learn things by just looking at what the various git scripts do. For example, <code>git reset</code> used to be the above two lines implemented in <code>git reset</code>, but some things like <code>git status</code> and <code>git commit</code> are slightly more complex scripts around the basic Git commands.</p>   <p>Many (most?) public remote repositories will not contain any of the checked out files or even an index file, and will <strong>only</strong> contain the actual core Git files. Such a repository usually doesn’t even have the <code>.git</code> subdirectory, but has all the Git files directly in the repository.</p>   <p>To create your own local live copy of such a \"raw\" Git repository, you’d first create your own subdirectory for the project, and then copy the raw repository contents into the <code>.git</code> directory. For example, to create your own copy of the Git repository, you’d do the following</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ mkdir my-git\n$ cd my-git\n$ rsync -rL rsync://rsync.kernel.org/pub/scm/git/git.git/ .git</pre> </div> </div>  <p>followed by</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git read-tree HEAD</pre> </div> </div>  <p>to populate the index. However, now you have populated the index, and you have all the Git internal files, but you will notice that you don’t actually have any of the working tree files to work on. To get those, you’d check them out with</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout-index -u -a</pre> </div> </div>  <p>where the <code>-u</code> flag means that you want the checkout to keep the index up-to-date (so that you don’t have to refresh it afterward), and the <code>-a</code> flag means \"check out all files\" (if you have a stale copy or an older version of a checked out tree you may also need to add the <code>-f</code> flag first, to tell <code>git checkout-index</code> to <strong>force</strong> overwriting of any old files).</p>   <p>Again, this can all be simplified with</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git clone git://git.kernel.org/pub/scm/git/git.git/ my-git\n$ cd my-git\n$ git checkout</pre> </div> </div>  <p>which will end up doing all of the above for you.</p>   <p>You have now successfully copied somebody else’s (mine) remote repository, and checked it out.</p> </div>   <h2 id=\"_creating_a_new_branch\">Creating a new branch</h2> <div class=\"sectionbody\"> <p>Branches in Git are really nothing more than pointers into the Git object database from within the <code>.git/refs/</code> subdirectory, and as we already discussed, the <code>HEAD</code> branch is nothing but a symlink to one of these object pointers.</p>   <p>You can at any time create a new branch by just picking an arbitrary point in the project history, and just writing the SHA-1 name of that object into a file under <code>.git/refs/heads/</code>. You can use any filename you want (and indeed, subdirectories), but the convention is that the \"normal\" branch is called <code>master</code>. That’s just a convention, though, and nothing enforces it.</p>   <p>To show that as an example, let’s go back to the git-tutorial repository we used earlier, and create a branch in it. You do that by simply just saying that you want to check out a new branch:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout -b mybranch</pre> </div> </div>  <p>will create a new branch based at the current <code>HEAD</code> position, and switch to it.</p>  <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\">  <p>If you make the decision to start your new branch at some other point in the history than the current <code>HEAD</code>, you can do so by just telling <code>git checkout</code> what the base of the checkout would be. In other words, if you have an earlier tag or branch, you’d just do</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout -b mybranch earlier-commit</pre> </div> </div>  <p>and it would create the new branch <code>mybranch</code> at the earlier commit, and check out the state at that time.</p>  </td> </tr> </table> </div>  <p>You can always just jump back to your original <code>master</code> branch by doing</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout master</pre> </div> </div>  <p>(or any other branch-name, for that matter) and if you forget which branch you happen to be on, a simple</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ cat .git/HEAD</pre> </div> </div>  <p>will tell you where it’s pointing. To get the list of branches you have, you can say</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git branch</pre> </div> </div>  <p>which used to be nothing more than a simple script around <code>ls .git/refs/heads</code>. There will be an asterisk in front of the branch you are currently on.</p>   <p>Sometimes you may wish to create a new branch <code>without</code> actually checking it out and switching to it. If so, just use the command</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git branch &lt;branchname&gt; [startingpoint]</pre> </div> </div>  <p>which will simply <code>create</code> the branch, but will not do anything further. You can then later — once you decide that you want to actually develop on that branch — switch to that branch with a regular <code>git checkout</code> with the branchname as the argument.</p> </div>   <h2 id=\"_merging_two_branches\">Merging two branches</h2> <div class=\"sectionbody\"> <p>One of the ideas of having a branch is that you do some (possibly experimental) work in it, and eventually merge it back to the main branch. So assuming you created the above <code>mybranch</code> that started out being the same as the original <code>master</code> branch, let’s make sure we’re in that branch, and do some work there.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout mybranch\n$ echo \"Work, work, work\" &gt;&gt;hello\n$ git commit -m \"Some work.\" -i hello</pre> </div> </div>  <p>Here, we just added another line to <code>hello</code>, and we used a shorthand for doing both <code>git update-index hello</code> and <code>git commit</code> by just giving the filename directly to <code>git commit</code>, with an <code>-i</code> flag (it tells Git to <code>include</code> that file in addition to what you have done to the index file so far when making the commit). The <code>-m</code> flag is to give the commit log message from the command line.</p>   <p>Now, to make it a bit more interesting, let’s assume that somebody else does some work in the original branch, and simulate that by going back to the master branch, and editing the same file differently there:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout master</pre> </div> </div>  <p>Here, take a moment to look at the contents of <code>hello</code>, and notice how they don’t contain the work we just did in <code>mybranch</code> — because that work hasn’t happened in the <code>master</code> branch at all. Then do</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ echo \"Play, play, play\" &gt;&gt;hello\n$ echo \"Lots of fun\" &gt;&gt;example\n$ git commit -m \"Some fun.\" -i hello example</pre> </div> </div>  <p>since the master branch is obviously in a much better mood.</p>   <p>Now, you’ve got two branches, and you decide that you want to merge the work done. Before we do that, let’s introduce a cool graphical tool that helps you view what’s going on:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ gitk --all</pre> </div> </div>  <p>will show you graphically both of your branches (that’s what the <code>--all</code> means: normally it will just show you your current <code>HEAD</code>) and their histories. You can also see exactly how they came to be from a common source.</p>   <p>Anyway, let’s exit <code>gitk</code> (<code>^Q</code> or the File menu), and decide that we want to merge the work we did on the <code>mybranch</code> branch into the <code>master</code> branch (which is currently our <code>HEAD</code> too). To do that, there’s a nice script called <code>git merge</code>, which wants to know which branches you want to resolve and what the merge is all about:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git merge -m \"Merge work in mybranch\" mybranch</pre> </div> </div>  <p>where the first argument is going to be used as the commit message if the merge can be resolved automatically.</p>   <p>Now, in this case we’ve intentionally created a situation where the merge will need to be fixed up by hand, though, so Git will do as much of it as it can automatically (which in this case is just merge the <code>example</code> file, which had no differences in the <code>mybranch</code> branch), and say:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>        Auto-merging hello\n        CONFLICT (content): Merge conflict in hello\n        Automatic merge failed; fix conflicts and then commit the result.</pre> </div> </div>  <p>It tells you that it did an \"Automatic merge\", which failed due to conflicts in <code>hello</code>.</p>   <p>Not to worry. It left the (trivial) conflict in <code>hello</code> in the same form you should already be well used to if you’ve ever used CVS, so let’s just open <code>hello</code> in our editor (whatever that may be), and fix it up somehow. I’d suggest just making it so that <code>hello</code> contains all four lines:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>Hello World\nIt's a new day for git\nPlay, play, play\nWork, work, work</pre> </div> </div>  <p>and once you’re happy with your manual merge, just do a</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git commit -i hello</pre> </div> </div>  <p>which will very loudly warn you that you’re now committing a merge (which is correct, so never mind), and you can write a small merge message about your adventures in <code>git merge</code>-land.</p>   <p>After you’re done, start up <code>gitk --all</code> to see graphically what the history looks like. Notice that <code>mybranch</code> still exists, and you can switch to it, and continue to work with it if you want to. The <code>mybranch</code> branch will not contain the merge, but next time you merge it from the <code>master</code> branch, Git will know how you merged it, so you’ll not have to do <code>that</code> merge again.</p>   <p>Another useful tool, especially if you do not always work in X-Window environment, is <code>git show-branch</code>.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show-branch --topo-order --more=1 master mybranch\n* [master] Merge work in mybranch\n ! [mybranch] Some work.\n--\n-  [master] Merge work in mybranch\n*+ [mybranch] Some work.\n*  [master^] Some fun.</pre> </div> </div>  <p>The first two lines indicate that it is showing the two branches with the titles of their top-of-the-tree commits, you are currently on <code>master</code> branch (notice the asterisk <code>*</code> character), and the first column for the later output lines is used to show commits contained in the <code>master</code> branch, and the second column for the <code>mybranch</code> branch. Three commits are shown along with their titles. All of them have non blank characters in the first column (<code>*</code> shows an ordinary commit on the current branch, <code>-</code> is a merge commit), which means they are now part of the <code>master</code> branch. Only the \"Some work\" commit has the plus <code>+</code> character in the second column, because <code>mybranch</code> has not been merged to incorporate these commits from the master branch. The string inside brackets before the commit log message is a short name you can use to name the commit. In the above example, <code>master</code> and <code>mybranch</code> are branch heads. <code>master^</code> is the first parent of <code>master</code> branch head. Please see <a href=\"gitrevisions\">gitrevisions[7]</a> if you want to see more complex cases.</p>  <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> Without the <em>--more=1</em> option, <em>git show-branch</em> would not output the <em>[master^]</em> commit, as <em>[mybranch]</em> commit is a common ancestor of both <em>master</em> and <em>mybranch</em> tips. Please see <a href=\"git-show-branch\">git-show-branch[1]</a> for details. </td> </tr> </table> </div> <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> If there were more commits on the <em>master</em> branch after the merge, the merge commit itself would not be shown by <em>git show-branch</em> by default. You would need to provide <em>--sparse</em> option to make the merge commit visible in this case. </td> </tr> </table> </div>  <p>Now, let’s pretend you are the one who did all the work in <code>mybranch</code>, and the fruit of your hard work has finally been merged to the <code>master</code> branch. Let’s go back to <code>mybranch</code>, and run <code>git merge</code> to get the \"upstream changes\" back to your branch.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout mybranch\n$ git merge -m \"Merge upstream changes.\" master</pre> </div> </div>  <p>This outputs something like this (the actual commit object names would be different)</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>Updating from ae3a2da... to a80b4aa....\nFast-forward (no commit created; -m option ignored)\n example | 1 +\n hello   | 1 +\n 2 files changed, 2 insertions(+)</pre> </div> </div>  <p>Because your branch did not contain anything more than what had already been merged into the <code>master</code> branch, the merge operation did not actually do a merge. Instead, it just updated the top of the tree of your branch to that of the <code>master</code> branch. This is often called <code>fast-forward</code> merge.</p>   <p>You can run <code>gitk --all</code> again to see how the commit ancestry looks like, or run <code>show-branch</code>, which tells you this.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show-branch master mybranch\n! [master] Merge work in mybranch\n * [mybranch] Merge work in mybranch\n--\n-- [master] Merge work in mybranch</pre> </div> </div>\n</div>   <h2 id=\"_merging_external_work\">Merging external work</h2> <div class=\"sectionbody\"> <p>It’s usually much more common that you merge with somebody else than merging with your own branches, so it’s worth pointing out that Git makes that very easy too, and in fact, it’s not that different from doing a <code>git merge</code>. In fact, a remote merge ends up being nothing more than \"fetch the work from a remote repository into a temporary tag\" followed by a <code>git merge</code>.</p>   <p>Fetching from a remote repository is done by, unsurprisingly, <code>git fetch</code>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git fetch &lt;remote-repository&gt;</pre> </div> </div>  <p>One of the following transports can be used to name the repository to download from:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">SSH</dt> <dd> <p><code>remote.machine:/path/to/repo.git/</code> or</p>  <p><code>ssh://remote.machine/path/to/repo.git/</code></p>   <p>This transport can be used for both uploading and downloading, and requires you to have a log-in privilege over <code>ssh</code> to the remote machine. It finds out the set of objects the other side lacks by exchanging the head commits both ends have and transfers (close to) minimum set of objects. It is by far the most efficient way to exchange Git objects between repositories.</p>  </dd> <dt class=\"hdlist1\">Local directory</dt> <dd> <p><code>/path/to/repo.git/</code></p>  <p>This transport is the same as SSH transport but uses <code>sh</code> to run both ends on the local machine instead of running other end on the remote machine via <code>ssh</code>.</p>  </dd> <dt class=\"hdlist1\">Git Native</dt> <dd> <p><code>git://remote.machine/path/to/repo.git/</code></p>  <p>This transport was designed for anonymous downloading. Like SSH transport, it finds out the set of objects the downstream side lacks and transfers (close to) minimum set of objects.</p>  </dd> <dt class=\"hdlist1\">HTTP(S)</dt> <dd> <p><code>http://remote.machine/path/to/repo.git/</code></p>  <p>Downloader from http and https URL first obtains the topmost commit object name from the remote site by looking at the specified refname under <code>repo.git/refs/</code> directory, and then tries to obtain the commit object by downloading from <code>repo.git/objects/xx/xxx...</code> using the object name of that commit object. Then it reads the commit object to find out its parent commits and the associate tree object; it repeats this process until it gets all the necessary objects. Because of this behavior, they are sometimes also called <code>commit walkers</code>.</p>   <p>The <code>commit walkers</code> are sometimes also called <code>dumb transports</code>, because they do not require any Git aware smart server like Git Native transport does. Any stock HTTP server that does not even support directory index would suffice. But you must prepare your repository with <code>git update-server-info</code> to help dumb transport downloaders.</p>  </dd> </dl> </div>  <p>Once you fetch from the remote repository, you <code>merge</code> that with your current branch.</p>   <p>However — it’s such a common thing to <code>fetch</code> and then immediately <code>merge</code>, that it’s called <code>git pull</code>, and you can simply do</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git pull &lt;remote-repository&gt;</pre> </div> </div>  <p>and optionally give a branch-name for the remote end as a second argument.</p>  <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> You could do without using any branches at all, by keeping as many local repositories as you would like to have branches, and merging between them with <em>git pull</em>, just like you merge between branches. The advantage of this approach is that it lets you keep a set of files for each <code>branch</code> checked out and you may find it easier to switch back and forth if you juggle multiple lines of development simultaneously. Of course, you will pay the price of more disk usage to hold multiple working trees, but disk space is cheap these days. </td> </tr> </table> </div>  <p>It is likely that you will be pulling from the same remote repository from time to time. As a short hand, you can store the remote repository URL in the local repository’s config file like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git config remote.linus.url http://www.kernel.org/pub/scm/git/git.git/</pre> </div> </div>  <p>and use the \"linus\" keyword with <code>git pull</code> instead of the full URL.</p>   <p>Examples.</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p><code>git pull linus</code></p> </li> <li> <p><code>git pull linus tag v0.99.1</code></p> </li> </ol> </div>  <p>the above are equivalent to:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p><code>git pull http://www.kernel.org/pub/scm/git/git.git/ HEAD</code></p> </li> <li> <p><code>git pull http://www.kernel.org/pub/scm/git/git.git/ tag v0.99.1</code></p> </li> </ol> </div>\n</div>   <h2 id=\"_how_does_the_merge_work\">How does the merge work?</h2> <div class=\"sectionbody\"> <p>We said this tutorial shows what plumbing does to help you cope with the porcelain that isn’t flushing, but we so far did not talk about how the merge really works. If you are following this tutorial the first time, I’d suggest to skip to \"Publishing your work\" section and come back here later.</p>   <p>OK, still with me? To give us an example to look at, let’s go back to the earlier repository with \"hello\" and \"example\" file, and bring ourselves back to the pre-merge state:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show-branch --more=2 master mybranch\n! [master] Merge work in mybranch\n * [mybranch] Merge work in mybranch\n--\n-- [master] Merge work in mybranch\n+* [master^2] Some work.\n+* [master^] Some fun.</pre> </div> </div>  <p>Remember, before running <code>git merge</code>, our <code>master</code> head was at \"Some fun.\" commit, while our <code>mybranch</code> head was at \"Some work.\" commit.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout mybranch\n$ git reset --hard master^2\n$ git checkout master\n$ git reset --hard master^</pre> </div> </div>  <p>After rewinding, the commit structure should look like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show-branch\n* [master] Some fun.\n ! [mybranch] Some work.\n--\n*  [master] Some fun.\n + [mybranch] Some work.\n*+ [master^] Initial commit</pre> </div> </div>  <p>Now we are ready to experiment with the merge by hand.</p>   <p><code>git merge</code> command, when merging two branches, uses 3-way merge algorithm. First, it finds the common ancestor between them. The command it uses is <code>git merge-base</code>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ mb=$(git merge-base HEAD mybranch)</pre> </div> </div>  <p>The command writes the commit object name of the common ancestor to the standard output, so we captured its output to a variable, because we will be using it in the next step. By the way, the common ancestor commit is the \"Initial commit\" commit in this case. You can tell it by:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git name-rev --name-only --tags $mb\nmy-first-tag</pre> </div> </div>  <p>After finding out a common ancestor commit, the second step is this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git read-tree -m -u $mb HEAD mybranch</pre> </div> </div>  <p>This is the same <code>git read-tree</code> command we have already seen, but it takes three trees, unlike previous examples. This reads the contents of each tree into different <code>stage</code> in the index file (the first tree goes to stage 1, the second to stage 2, etc.). After reading three trees into three stages, the paths that are the same in all three stages are <code>collapsed</code> into stage 0. Also paths that are the same in two of three stages are collapsed into stage 0, taking the SHA-1 from either stage 2 or stage 3, whichever is different from stage 1 (i.e. only one side changed from the common ancestor).</p>   <p>After <code>collapsing</code> operation, paths that are different in three trees are left in non-zero stages. At this point, you can inspect the index file with this command:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git ls-files --stage\n100644 7f8b141b65fdcee47321e399a2598a235a032422 0        example\n100644 557db03de997c86a4a028e1ebd3a1ceb225be238 1        hello\n100644 ba42a2a96e3027f3333e13ede4ccf4498c3ae942 2        hello\n100644 cc44c73eb783565da5831b4d820c962954019b69 3        hello</pre> </div> </div>  <p>In our example of only two files, we did not have unchanged files so only <code>example</code> resulted in collapsing. But in real-life large projects, when only a small number of files change in one commit, this <code>collapsing</code> tends to trivially merge most of the paths fairly quickly, leaving only a handful of real changes in non-zero stages.</p>   <p>To look at only non-zero stages, use <code>--unmerged</code> flag:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git ls-files --unmerged\n100644 557db03de997c86a4a028e1ebd3a1ceb225be238 1        hello\n100644 ba42a2a96e3027f3333e13ede4ccf4498c3ae942 2        hello\n100644 cc44c73eb783565da5831b4d820c962954019b69 3        hello</pre> </div> </div>  <p>The next step of merging is to merge these three versions of the file, using 3-way merge. This is done by giving <code>git merge-one-file</code> command as one of the arguments to <code>git merge-index</code> command:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git merge-index git-merge-one-file hello\nAuto-merging hello\nERROR: Merge conflict in hello\nfatal: merge program failed</pre> </div> </div>  <p><code>git merge-one-file</code> script is called with parameters to describe those three versions, and is responsible to leave the merge results in the working tree. It is a fairly straightforward shell script, and eventually calls <code>merge</code> program from RCS suite to perform a file-level 3-way merge. In this case, <code>merge</code> detects conflicts, and the merge result with conflict marks is left in the working tree.. This can be seen if you run <code>ls-files\n--stage</code> again at this point:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git ls-files --stage\n100644 7f8b141b65fdcee47321e399a2598a235a032422 0        example\n100644 557db03de997c86a4a028e1ebd3a1ceb225be238 1        hello\n100644 ba42a2a96e3027f3333e13ede4ccf4498c3ae942 2        hello\n100644 cc44c73eb783565da5831b4d820c962954019b69 3        hello</pre> </div> </div>  <p>This is the state of the index file and the working file after <code>git merge</code> returns control back to you, leaving the conflicting merge for you to resolve. Notice that the path <code>hello</code> is still unmerged, and what you see with <code>git diff</code> at this point is differences since stage 2 (i.e. your version).</p> </div>   <h2 id=\"_publishing_your_work\">Publishing your work</h2> <div class=\"sectionbody\"> <p>So, we can use somebody else’s work from a remote repository, but how can <strong>you</strong> prepare a repository to let other people pull from it?</p>   <p>You do your real work in your working tree that has your primary repository hanging under it as its <code>.git</code> subdirectory. You <strong>could</strong> make that repository accessible remotely and ask people to pull from it, but in practice that is not the way things are usually done. A recommended way is to have a public repository, make it reachable by other people, and when the changes you made in your primary working tree are in good shape, update the public repository from it. This is often called <code>pushing</code>.</p>  <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> This public repository could further be mirrored, and that is how Git repositories at <code>kernel.org</code> are managed. </td> </tr> </table> </div>  <p>Publishing the changes from your local (private) repository to your remote (public) repository requires a write privilege on the remote machine. You need to have an SSH account there to run a single command, <code>git-receive-pack</code>.</p>   <p>First, you need to create an empty repository on the remote machine that will house your public repository. This empty repository will be populated and be kept up-to-date by pushing into it later. Obviously, this repository creation needs to be done only once.</p>  <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> <em>git push</em> uses a pair of commands, <em>git send-pack</em> on your local machine, and <em>git-receive-pack</em> on the remote machine. The communication between the two over the network internally uses an SSH connection. </td> </tr> </table> </div>  <p>Your private repository’s Git directory is usually <code>.git</code>, but your public repository is often named after the project name, i.e. <code>&lt;project&gt;.git</code>. Let’s create such a public repository for project <code>my-git</code>. After logging into the remote machine, create an empty directory:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ mkdir my-git.git</pre> </div> </div>  <p>Then, make that directory into a Git repository by running <code>git init</code>, but this time, since its name is not the usual <code>.git</code>, we do things slightly differently:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ GIT_DIR=my-git.git git init</pre> </div> </div>  <p>Make sure this directory is available for others you want your changes to be pulled via the transport of your choice. Also you need to make sure that you have the <code>git-receive-pack</code> program on the <code>$PATH</code>.</p>  <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> Many installations of sshd do not invoke your shell as the login shell when you directly run programs; what this means is that if your login shell is <em>bash</em>, only <code>.bashrc</code> is read and not <code>.bash_profile</code>. As a workaround, make sure <code>.bashrc</code> sets up <code>$PATH</code> so that you can run <em>git-receive-pack</em> program. </td> </tr> </table> </div> <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> If you plan to publish this repository to be accessed over http, you should do <code>mv my-git.git/hooks/post-update.sample\nmy-git.git/hooks/post-update</code> at this point. This makes sure that every time you push into this repository, <code>git update-server-info</code> is run. </td> </tr> </table> </div>  <p>Your \"public repository\" is now ready to accept your changes. Come back to the machine you have your private repository. From there, run this command:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git push &lt;public-host&gt;:/path/to/my-git.git master</pre> </div> </div>  <p>This synchronizes your public repository to match the named branch head (i.e. <code>master</code> in this case) and objects reachable from them in your current repository.</p>   <p>As a real example, this is how I update my public Git repository. Kernel.org mirror network takes care of the propagation to other publicly visible machines:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git push master.kernel.org:/pub/scm/git/git.git/</pre> </div> </div>\n</div>   <h2 id=\"_packing_your_repository\">Packing your repository</h2> <div class=\"sectionbody\"> <p>Earlier, we saw that one file under <code>.git/objects/??/</code> directory is stored for each Git object you create. This representation is efficient to create atomically and safely, but not so convenient to transport over the network. Since Git objects are immutable once they are created, there is a way to optimize the storage by \"packing them together\". The command</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git repack</pre> </div> </div>  <p>will do it for you. If you followed the tutorial examples, you would have accumulated about 17 objects in <code>.git/objects/??/</code> directories by now. <code>git repack</code> tells you how many objects it packed, and stores the packed file in <code>.git/objects/pack</code> directory.</p>  <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> You will see two files, <code>pack-*.pack</code> and <code>pack-*.idx</code>, in <code>.git/objects/pack</code> directory. They are closely related to each other, and if you ever copy them by hand to a different repository for whatever reason, you should make sure you copy them together. The former holds all the data from the objects in the pack, and the latter holds the index for random access. </td> </tr> </table> </div>  <p>If you are paranoid, running <code>git verify-pack</code> command would detect if you have a corrupt pack, but do not worry too much. Our programs are always perfect ;-).</p>   <p>Once you have packed objects, you do not need to leave the unpacked objects that are contained in the pack file anymore.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git prune-packed</pre> </div> </div>  <p>would remove them for you.</p>   <p>You can try running <code>find .git/objects -type f</code> before and after you run <code>git prune-packed</code> if you are curious. Also <code>git\ncount-objects</code> would tell you how many unpacked objects are in your repository and how much space they are consuming.</p>  <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> <code>git pull</code> is slightly cumbersome for HTTP transport, as a packed repository may contain relatively few objects in a relatively large pack. If you expect many HTTP pulls from your public repository you might want to repack &amp; prune often, or never. </td> </tr> </table> </div>  <p>If you run <code>git repack</code> again at this point, it will say \"Nothing new to pack.\". Once you continue your development and accumulate the changes, running <code>git repack</code> again will create a new pack, that contains objects created since you packed your repository the last time. We recommend that you pack your project soon after the initial import (unless you are starting your project from scratch), and then run <code>git repack</code> every once in a while, depending on how active your project is.</p>   <p>When a repository is synchronized via <code>git push</code> and <code>git pull</code> objects packed in the source repository are usually stored unpacked in the destination. While this allows you to use different packing strategies on both ends, it also means you may need to repack both repositories every once in a while.</p> </div>   <h2 id=\"_working_with_others\">Working with others</h2> <div class=\"sectionbody\"> <p>Although Git is a truly distributed system, it is often convenient to organize your project with an informal hierarchy of developers. Linux kernel development is run this way. There is a nice illustration (page 17, \"Merges to Mainline\") in <a href=\"http://www.xenotime.net/linux/mentor/linux-mentoring-2006.pdf\">Randy Dunlap’s presentation</a>.</p>   <p>It should be stressed that this hierarchy is purely <strong>informal</strong>. There is nothing fundamental in Git that enforces the \"chain of patch flow\" this hierarchy implies. You do not have to pull from only one remote repository.</p>   <p>A recommended workflow for a \"project lead\" goes like this:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>Prepare your primary repository on your local machine. Your work is done there.</p> </li> <li> <p>Prepare a public repository accessible to others.</p>  <p>If other people are pulling from your repository over dumb transport protocols (HTTP), you need to keep this repository <code>dumb transport friendly</code>. After <code>git init</code>, <code>$GIT_DIR/hooks/post-update.sample</code> copied from the standard templates would contain a call to <code>git update-server-info</code> but you need to manually enable the hook with <code>mv post-update.sample post-update</code>. This makes sure <code>git update-server-info</code> keeps the necessary files up-to-date.</p>  </li> <li> <p>Push into the public repository from your primary repository.</p> </li> <li> <p><code>git repack</code> the public repository. This establishes a big pack that contains the initial set of objects as the baseline, and possibly <code>git prune</code> if the transport used for pulling from your repository supports packed repositories.</p> </li> <li> <p>Keep working in your primary repository. Your changes include modifications of your own, patches you receive via e-mails, and merges resulting from pulling the \"public\" repositories of your \"subsystem maintainers\".</p>  <p>You can repack this private repository whenever you feel like.</p>  </li> <li> <p>Push your changes to the public repository, and announce it to the public.</p> </li> <li> <p>Every once in a while, <code>git repack</code> the public repository. Go back to step 5. and continue working.</p> </li> </ol> </div>  <p>A recommended work cycle for a \"subsystem maintainer\" who works on that project and has an own \"public repository\" goes like this:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>Prepare your work repository, by <code>git clone</code> the public repository of the \"project lead\". The URL used for the initial cloning is stored in the remote.origin.url configuration variable.</p> </li> <li> <p>Prepare a public repository accessible to others, just like the \"project lead\" person does.</p> </li> <li> <p>Copy over the packed files from \"project lead\" public repository to your public repository, unless the \"project lead\" repository lives on the same machine as yours. In the latter case, you can use <code>objects/info/alternates</code> file to point at the repository you are borrowing from.</p> </li> <li> <p>Push into the public repository from your primary repository. Run <code>git repack</code>, and possibly <code>git prune</code> if the transport used for pulling from your repository supports packed repositories.</p> </li> <li> <p>Keep working in your primary repository. Your changes include modifications of your own, patches you receive via e-mails, and merges resulting from pulling the \"public\" repositories of your \"project lead\" and possibly your \"sub-subsystem maintainers\".</p>  <p>You can repack this private repository whenever you feel like.</p>  </li> <li> <p>Push your changes to your public repository, and ask your \"project lead\" and possibly your \"sub-subsystem maintainers\" to pull from it.</p> </li> <li> <p>Every once in a while, <code>git repack</code> the public repository. Go back to step 5. and continue working.</p> </li> </ol> </div>  <p>A recommended work cycle for an \"individual developer\" who does not have a \"public\" repository is somewhat different. It goes like this:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>Prepare your work repository, by <code>git clone</code> the public repository of the \"project lead\" (or a \"subsystem maintainer\", if you work on a subsystem). The URL used for the initial cloning is stored in the remote.origin.url configuration variable.</p> </li> <li> <p>Do your work in your repository on <code>master</code> branch.</p> </li> <li> <p>Run <code>git fetch origin</code> from the public repository of your upstream every once in a while. This does only the first half of <code>git pull</code> but does not merge. The head of the public repository is stored in <code>.git/refs/remotes/origin/master</code>.</p> </li> <li> <p>Use <code>git cherry origin</code> to see which ones of your patches were accepted, and/or use <code>git rebase origin</code> to port your unmerged changes forward to the updated upstream.</p> </li> <li> <p>Use <code>git format-patch origin</code> to prepare patches for e-mail submission to your upstream and send it out. Go back to step 2. and continue.</p> </li> </ol> </div>\n</div>   <h2 id=\"_working_with_others_shared_repository_style\">Working with others, shared repository style</h2> <div class=\"sectionbody\"> <p>If you are coming from CVS background, the style of cooperation suggested in the previous section may be new to you. You do not have to worry. Git supports \"shared public repository\" style of cooperation you are probably more familiar with as well.</p>   <p>See <a href=\"gitcvs-migration\">gitcvs-migration[7]</a> for the details.</p> </div>   <h2 id=\"_bundling_your_work_together\">Bundling your work together</h2> <div class=\"sectionbody\"> <p>It is likely that you will be working on more than one thing at a time. It is easy to manage those more-or-less independent tasks using branches with Git.</p>   <p>We have already seen how branches work previously, with \"fun and work\" example using two branches. The idea is the same if there are more than two branches. Let’s say you started out from \"master\" head, and have some new code in the \"master\" branch, and two independent fixes in the \"commit-fix\" and \"diff-fix\" branches:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show-branch\n! [commit-fix] Fix commit message normalization.\n ! [diff-fix] Fix rename detection.\n  * [master] Release candidate #1\n---\n +  [diff-fix] Fix rename detection.\n +  [diff-fix~1] Better common substring algorithm.\n+   [commit-fix] Fix commit message normalization.\n  * [master] Release candidate #1\n++* [diff-fix~2] Pretty-print messages.</pre> </div> </div>  <p>Both fixes are tested well, and at this point, you want to merge in both of them. You could merge in <code>diff-fix</code> first and then <code>commit-fix</code> next, like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git merge -m \"Merge fix in diff-fix\" diff-fix\n$ git merge -m \"Merge fix in commit-fix\" commit-fix</pre> </div> </div>  <p>Which would result in:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show-branch\n! [commit-fix] Fix commit message normalization.\n ! [diff-fix] Fix rename detection.\n  * [master] Merge fix in commit-fix\n---\n  - [master] Merge fix in commit-fix\n+ * [commit-fix] Fix commit message normalization.\n  - [master~1] Merge fix in diff-fix\n +* [diff-fix] Fix rename detection.\n +* [diff-fix~1] Better common substring algorithm.\n  * [master~2] Release candidate #1\n++* [master~3] Pretty-print messages.</pre> </div> </div>  <p>However, there is no particular reason to merge in one branch first and the other next, when what you have are a set of truly independent changes (if the order mattered, then they are not independent by definition). You could instead merge those two branches into the current branch at once. First let’s undo what we just did and start over. We would want to get the master branch before these two merges by resetting it to <code>master~2</code>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git reset --hard master~2</pre> </div> </div>  <p>You can make sure <code>git show-branch</code> matches the state before those two <code>git merge</code> you just did. Then, instead of running two <code>git merge</code> commands in a row, you would merge these two branch heads (this is known as <code>making an Octopus</code>):</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git merge commit-fix diff-fix\n$ git show-branch\n! [commit-fix] Fix commit message normalization.\n ! [diff-fix] Fix rename detection.\n  * [master] Octopus merge of branches 'diff-fix' and 'commit-fix'\n---\n  - [master] Octopus merge of branches 'diff-fix' and 'commit-fix'\n+ * [commit-fix] Fix commit message normalization.\n +* [diff-fix] Fix rename detection.\n +* [diff-fix~1] Better common substring algorithm.\n  * [master~1] Release candidate #1\n++* [master~2] Pretty-print messages.</pre> </div> </div>  <p>Note that you should not do Octopus because you can. An octopus is a valid thing to do and often makes it easier to view the commit history if you are merging more than two independent changes at the same time. However, if you have merge conflicts with any of the branches you are merging in and need to hand resolve, that is an indication that the development happened in those branches were not independent after all, and you should merge two at a time, documenting how you resolved the conflicts, and the reason why you preferred changes made in one side over the other. Otherwise it would make the project history harder to follow, not easier.</p> </div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"gittutorial\">gittutorial[7]</a>, <a href=\"gittutorial-2\">gittutorial-2[7]</a>, <a href=\"gitcvs-migration\">gitcvs-migration[7]</a>, <a href=\"git-help\">git-help[1]</a>, <a href=\"giteveryday\">giteveryday[7]</a>, <a href=\"user-manual\">The Git User’s Manual</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/gitcore-tutorial\" class=\"_attribution-link\">https://git-scm.com/docs/gitcore-tutorial</a>\n  </p>\n</div>\n","gitattributes":"<h1>gitattributes</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>gitattributes - defining attributes per path</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"> <p>$GIT_DIR/info/attributes, .gitattributes</p> </div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>A <code>gitattributes</code> file is a simple text file that gives <code>attributes</code> to pathnames.</p>   <p>Each line in <code>gitattributes</code> file is of form:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>pattern    attr1 attr2 ...</pre> </div> </div>  <p>That is, a pattern followed by an attributes list, separated by whitespaces. When the pattern matches the path in question, the attributes listed on the line are given to the path.</p>   <p>Each attribute can be in one of these states for a given path:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">Set</dt> <dd> <p>The path has the attribute with special value \"true\"; this is specified by listing only the name of the attribute in the attribute list.</p> </dd> <dt class=\"hdlist1\">Unset</dt> <dd> <p>The path has the attribute with special value \"false\"; this is specified by listing the name of the attribute prefixed with a dash <code>-</code> in the attribute list.</p> </dd> <dt class=\"hdlist1\">Set to a value</dt> <dd> <p>The path has the attribute with specified string value; this is specified by listing the name of the attribute followed by an equal sign <code>=</code> and its value in the attribute list.</p> </dd> <dt class=\"hdlist1\">Unspecified</dt> <dd> <p>No pattern matches the path, and nothing says if the path has or does not have the attribute, the attribute for the path is said to be Unspecified.</p> </dd> </dl> </div>  <p>When more than one pattern matches the path, a later line overrides an earlier line. This overriding is done per attribute. The rules how the pattern matches paths are the same as in <code>.gitignore</code> files; see <a href=\"gitignore\">gitignore[5]</a>. Unlike <code>.gitignore</code>, negative patterns are forbidden.</p>   <p>When deciding what attributes are assigned to a path, Git consults <code>$GIT_DIR/info/attributes</code> file (which has the highest precedence), <code>.gitattributes</code> file in the same directory as the path in question, and its parent directories up to the toplevel of the work tree (the further the directory that contains <code>.gitattributes</code> is from the path in question, the lower its precedence). Finally global and system-wide files are considered (they have the lowest precedence).</p>   <p>When the <code>.gitattributes</code> file is missing from the work tree, the path in the index is used as a fall-back. During checkout process, <code>.gitattributes</code> in the index is used and then the file in the working tree is used as a fall-back.</p>   <p>If you wish to affect only a single repository (i.e., to assign attributes to files that are particular to one user’s workflow for that repository), then attributes should be placed in the <code>$GIT_DIR/info/attributes</code> file. Attributes which should be version-controlled and distributed to other repositories (i.e., attributes of interest to all users) should go into <code>.gitattributes</code> files. Attributes that should affect all repositories for a single user should be placed in a file specified by the <code>core.attributesFile</code> configuration option (see <a href=\"git-config\">git-config[1]</a>). Its default value is $XDG_CONFIG_HOME/git/attributes. If $XDG_CONFIG_HOME is either not set or empty, $HOME/.config/git/attributes is used instead. Attributes for all users on a system should be placed in the <code>$(prefix)/etc/gitattributes</code> file.</p>   <p>Sometimes you would need to override an setting of an attribute for a path to <code>Unspecified</code> state. This can be done by listing the name of the attribute prefixed with an exclamation point <code>!</code>.</p> </div>   <h2 id=\"_effects\">Effects</h2> <div class=\"sectionbody\"> <p>Certain operations by Git can be influenced by assigning particular attributes to a path. Currently, the following operations are attributes-aware.</p>  <div class=\"sect2\"> <h3 id=\"_checking_out_and_checking_in\">Checking-out and checking-in</h3>  <p>These attributes affect how the contents stored in the repository are copied to the working tree files when commands such as <code>git checkout</code> and <code>git merge</code> run. They also affect how Git stores the contents you prepare in the working tree in the repository upon <code>git add</code> and <code>git commit</code>.</p>  <div class=\"sect3\"> <h4 id=\"__code_text_code\"><code>text</code></h4>  <p>This attribute enables and controls end-of-line normalization. When a text file is normalized, its line endings are converted to LF in the repository. To control what line ending style is used in the working directory, use the <code>eol</code> attribute for a single file and the <code>core.eol</code> configuration variable for all text files.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">Set</dt> <dd> <p>Setting the <code>text</code> attribute on a path enables end-of-line normalization and marks the path as a text file. End-of-line conversion takes place without guessing the content type.</p> </dd> <dt class=\"hdlist1\">Unset</dt> <dd> <p>Unsetting the <code>text</code> attribute on a path tells Git not to attempt any end-of-line conversion upon checkin or checkout.</p> </dd> <dt class=\"hdlist1\">Set to string value \"auto\"</dt> <dd> <p>When <code>text</code> is set to \"auto\", the path is marked for automatic end-of-line normalization. If Git decides that the content is text, its line endings are normalized to LF on checkin.</p> </dd> <dt class=\"hdlist1\">Unspecified</dt> <dd> <p>If the <code>text</code> attribute is unspecified, Git uses the <code>core.autocrlf</code> configuration variable to determine if the file should be converted.</p> </dd> </dl> </div>  <p>Any other value causes Git to act as if <code>text</code> has been left unspecified.</p>  </div> <div class=\"sect3\"> <h4 id=\"__code_eol_code\"><code>eol</code></h4>  <p>This attribute sets a specific line-ending style to be used in the working directory. It enables end-of-line normalization without any content checks, effectively setting the <code>text</code> attribute.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">Set to string value \"crlf\"</dt> <dd> <p>This setting forces Git to normalize line endings for this file on checkin and convert them to CRLF when the file is checked out.</p> </dd> <dt class=\"hdlist1\">Set to string value \"lf\"</dt> <dd> <p>This setting forces Git to normalize line endings to LF on checkin and prevents conversion to CRLF when the file is checked out.</p> </dd> </dl> </div> </div> <div class=\"sect3\"> <h4 id=\"_backwards_compatibility_with_code_crlf_code_attribute\">Backwards compatibility with <code>crlf</code> attribute</h4>  <p>For backwards compatibility, the <code>crlf</code> attribute is interpreted as follows:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>crlf                text\n-crlf                -text\ncrlf=input        eol=lf</pre> </div> </div> </div> <div class=\"sect3\"> <h4 id=\"_end_of_line_conversion\">End-of-line conversion</h4>  <p>While Git normally leaves file contents alone, it can be configured to normalize line endings to LF in the repository and, optionally, to convert them to CRLF when files are checked out.</p>   <p>Here is an example that will make Git normalize .txt, .vcproj and .sh files, ensure that .vcproj files have CRLF and .sh files have LF in the working directory, and prevent .jpg files from being normalized regardless of their content.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>*.txt                text\n*.vcproj        eol=crlf\n*.sh                eol=lf\n*.jpg                -text</pre> </div> </div>  <p>Other source code management systems normalize all text files in their repositories, and there are two ways to enable similar automatic normalization in Git.</p>   <p>If you simply want to have CRLF line endings in your working directory regardless of the repository you are working with, you can set the config variable \"core.autocrlf\" without changing any attributes.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>[core]\n        autocrlf = true</pre> </div> </div>  <p>This does not force normalization of all text files, but does ensure that text files that you introduce to the repository have their line endings normalized to LF when they are added, and that files that are already normalized in the repository stay normalized.</p>   <p>If you want to interoperate with a source code management system that enforces end-of-line normalization, or you simply want all text files in your repository to be normalized, you should instead set the <code>text</code> attribute to \"auto\" for <code>all</code> files.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>*        text=auto</pre> </div> </div>  <p>This ensures that all files that Git considers to be text will have normalized (LF) line endings in the repository. The <code>core.eol</code> configuration variable controls which line endings Git will use for normalized files in your working directory; the default is to use the native line ending for your platform, or CRLF if <code>core.autocrlf</code> is set.</p>  <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> When <code>text=auto</code> normalization is enabled in an existing repository, any text files containing CRLFs should be normalized. If they are not they will be normalized the next time someone tries to change them, causing unfortunate misattribution. From a clean working directory: </td> </tr> </table> </div> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ echo \"* text=auto\" &gt;&gt;.gitattributes\n$ rm .git/index     # Remove the index to force Git to\n$ git reset         # re-scan the working directory\n$ git status        # Show files that will be normalized\n$ git add -u\n$ git add .gitattributes\n$ git commit -m \"Introduce end-of-line normalization\"</pre> </div> </div>  <p>If any files that should not be normalized show up in <code>git status</code>, unset their <code>text</code> attribute before running <code>git add -u</code>.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>manual.pdf        -text</pre> </div> </div>  <p>Conversely, text files that Git does not detect can have normalization enabled manually.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>weirdchars.txt        text</pre> </div> </div>  <p>If <code>core.safecrlf</code> is set to \"true\" or \"warn\", Git verifies if the conversion is reversible for the current setting of <code>core.autocrlf</code>. For \"true\", Git rejects irreversible conversions; for \"warn\", Git only prints a warning but accepts an irreversible conversion. The safety triggers to prevent such a conversion done to the files in the work tree, but there are a few exceptions. Even though…​</p>  <div class=\"ulist\"> <ul> <li> <p><code>git add</code> itself does not touch the files in the work tree, the next checkout would, so the safety triggers;</p> </li> <li> <p><code>git apply</code> to update a text file with a patch does touch the files in the work tree, but the operation is about text files and CRLF conversion is about fixing the line ending inconsistencies, so the safety does not trigger;</p> </li> <li> <p><code>git diff</code> itself does not touch the files in the work tree, it is often run to inspect the changes you intend to next <code>git add</code>. To catch potential problems early, safety triggers.</p> </li> </ul> </div> </div> <div class=\"sect3\"> <h4 id=\"__code_ident_code\"><code>ident</code></h4>  <p>When the attribute <code>ident</code> is set for a path, Git replaces <code>$Id$</code> in the blob object with <code>$Id:</code>, followed by the 40-character hexadecimal blob object name, followed by a dollar sign <code>$</code> upon checkout. Any byte sequence that begins with <code>$Id:</code> and ends with <code>$</code> in the worktree file is replaced with <code>$Id$</code> upon check-in.</p>  </div> <div class=\"sect3\"> <h4 id=\"__code_filter_code\"><code>filter</code></h4>  <p>A <code>filter</code> attribute can be set to a string value that names a filter driver specified in the configuration.</p>   <p>A filter driver consists of a <code>clean</code> command and a <code>smudge</code> command, either of which can be left unspecified. Upon checkout, when the <code>smudge</code> command is specified, the command is fed the blob object from its standard input, and its standard output is used to update the worktree file. Similarly, the <code>clean</code> command is used to convert the contents of worktree file upon checkin.</p>   <p>One use of the content filtering is to massage the content into a shape that is more convenient for the platform, filesystem, and the user to use. For this mode of operation, the key phrase here is \"more convenient\" and not \"turning something unusable into usable\". In other words, the intent is that if someone unsets the filter driver definition, or does not have the appropriate filter program, the project should still be usable.</p>   <p>Another use of the content filtering is to store the content that cannot be directly used in the repository (e.g. a UUID that refers to the true content stored outside Git, or an encrypted content) and turn it into a usable form upon checkout (e.g. download the external content, or decrypt the encrypted content).</p>   <p>These two filters behave differently, and by default, a filter is taken as the former, massaging the contents into more convenient shape. A missing filter driver definition in the config, or a filter driver that exits with a non-zero status, is not an error but makes the filter a no-op passthru.</p>   <p>You can declare that a filter turns a content that by itself is unusable into a usable content by setting the filter.&lt;driver&gt;.required configuration variable to <code>true</code>.</p>   <p>For example, in .gitattributes, you would assign the <code>filter</code> attribute for paths.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>*.c        filter=indent</pre> </div> </div>  <p>Then you would define a \"filter.indent.clean\" and \"filter.indent.smudge\" configuration in your .git/config to specify a pair of commands to modify the contents of C programs when the source files are checked in (\"clean\" is run) and checked out (no change is made because the command is \"cat\").</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>[filter \"indent\"]\n        clean = indent\n        smudge = cat</pre> </div> </div>  <p>For best results, <code>clean</code> should not alter its output further if it is run twice (\"clean→clean\" should be equivalent to \"clean\"), and multiple <code>smudge</code> commands should not alter <code>clean</code>'s output (\"smudge→smudge→clean\" should be equivalent to \"clean\"). See the section on merging below.</p>   <p>The \"indent\" filter is well-behaved in this regard: it will not modify input that is already correctly indented. In this case, the lack of a smudge filter means that the clean filter <code>must</code> accept its own output without modifying it.</p>   <p>If a filter <code>must</code> succeed in order to make the stored contents usable, you can declare that the filter is <code>required</code>, in the configuration:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>[filter \"crypt\"]\n        clean = openssl enc ...\n        smudge = openssl enc -d ...\n        required</pre> </div> </div>  <p>Sequence \"%f\" on the filter command line is replaced with the name of the file the filter is working on. A filter might use this in keyword substitution. For example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>[filter \"p4\"]\n        clean = git-p4-filter --clean %f\n        smudge = git-p4-filter --smudge %f</pre> </div> </div> </div> <div class=\"sect3\"> <h4 id=\"_interaction_between_checkin_checkout_attributes\">Interaction between checkin/checkout attributes</h4>  <p>In the check-in codepath, the worktree file is first converted with <code>filter</code> driver (if specified and corresponding driver defined), then the result is processed with <code>ident</code> (if specified), and then finally with <code>text</code> (again, if specified and applicable).</p>   <p>In the check-out codepath, the blob content is first converted with <code>text</code>, and then <code>ident</code> and fed to <code>filter</code>.</p>  </div> <div class=\"sect3\"> <h4 id=\"_merging_branches_with_differing_checkin_checkout_attributes\">Merging branches with differing checkin/checkout attributes</h4>  <p>If you have added attributes to a file that cause the canonical repository format for that file to change, such as adding a clean/smudge filter or text/eol/ident attributes, merging anything where the attribute is not in place would normally cause merge conflicts.</p>   <p>To prevent these unnecessary merge conflicts, Git can be told to run a virtual check-out and check-in of all three stages of a file when resolving a three-way merge by setting the <code>merge.renormalize</code> configuration variable. This prevents changes caused by check-in conversion from causing spurious merge conflicts when a converted file is merged with an unconverted file.</p>   <p>As long as a \"smudge→clean\" results in the same output as a \"clean\" even on files that are already smudged, this strategy will automatically resolve all filter-related conflicts. Filters that do not act in this way may cause additional merge conflicts that must be resolved manually.</p>  </div> </div> <div class=\"sect2\"> <h3 id=\"_generating_diff_text\">Generating diff text</h3> <div class=\"sect3\"> <h4 id=\"__code_diff_code\"><code>diff</code></h4>  <p>The attribute <code>diff</code> affects how Git generates diffs for particular files. It can tell Git whether to generate a textual patch for the path or to treat the path as a binary file. It can also affect what line is shown on the hunk header <code>@@ -k,l +n,m @@</code> line, tell Git to use an external command to generate the diff, or ask Git to convert binary files to a text format before generating the diff.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">Set</dt> <dd> <p>A path to which the <code>diff</code> attribute is set is treated as text, even when they contain byte values that normally never appear in text files, such as NUL.</p> </dd> <dt class=\"hdlist1\">Unset</dt> <dd> <p>A path to which the <code>diff</code> attribute is unset will generate <code>Binary files differ</code> (or a binary patch, if binary patches are enabled).</p> </dd> <dt class=\"hdlist1\">Unspecified</dt> <dd> <p>A path to which the <code>diff</code> attribute is unspecified first gets its contents inspected, and if it looks like text and is smaller than core.bigFileThreshold, it is treated as text. Otherwise it would generate <code>Binary files differ</code>.</p> </dd> <dt class=\"hdlist1\">String</dt> <dd> <p>Diff is shown using the specified diff driver. Each driver may specify one or more options, as described in the following section. The options for the diff driver \"foo\" are defined by the configuration variables in the \"diff.foo\" section of the Git config file.</p> </dd> </dl> </div> </div> <div class=\"sect3\"> <h4 id=\"_defining_an_external_diff_driver\">Defining an external diff driver</h4>  <p>The definition of a diff driver is done in <code>gitconfig</code>, not <code>gitattributes</code> file, so strictly speaking this manual page is a wrong place to talk about it. However…​</p>   <p>To define an external diff driver <code>jcdiff</code>, add a section to your <code>$GIT_DIR/config</code> file (or <code>$HOME/.gitconfig</code> file) like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>[diff \"jcdiff\"]\n        command = j-c-diff</pre> </div> </div>  <p>When Git needs to show you a diff for the path with <code>diff</code> attribute set to <code>jcdiff</code>, it calls the command you specified with the above configuration, i.e. <code>j-c-diff</code>, with 7 parameters, just like <code>GIT_EXTERNAL_DIFF</code> program is called. See <a href=\"git\">git[1]</a> for details.</p>  </div> <div class=\"sect3\"> <h4 id=\"_defining_a_custom_hunk_header\">Defining a custom hunk-header</h4>  <p>Each group of changes (called a \"hunk\") in the textual diff output is prefixed with a line of the form:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>@@ -k,l +n,m @@ TEXT</pre> </div> </div>  <p>This is called a <code>hunk header</code>. The \"TEXT\" portion is by default a line that begins with an alphabet, an underscore or a dollar sign; this matches what GNU <code>diff -p</code> output uses. This default selection however is not suited for some contents, and you can use a customized pattern to make a selection.</p>   <p>First, in .gitattributes, you would assign the <code>diff</code> attribute for paths.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>*.tex        diff=tex</pre> </div> </div>  <p>Then, you would define a \"diff.tex.xfuncname\" configuration to specify a regular expression that matches a line that you would want to appear as the hunk header \"TEXT\". Add a section to your <code>$GIT_DIR/config</code> file (or <code>$HOME/.gitconfig</code> file) like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>[diff \"tex\"]\n        xfuncname = \"^(\\\\\\\\(sub)*section\\\\{.*)$\"</pre> </div> </div>  <p>Note. A single level of backslashes are eaten by the configuration file parser, so you would need to double the backslashes; the pattern above picks a line that begins with a backslash, and zero or more occurrences of <code>sub</code> followed by <code>section</code> followed by open brace, to the end of line.</p>   <p>There are a few built-in patterns to make this easier, and <code>tex</code> is one of them, so you do not have to write the above in your configuration file (you still need to enable this with the attribute mechanism, via <code>.gitattributes</code>). The following built in patterns are available:</p>  <div class=\"ulist\"> <ul> <li> <p><code>ada</code> suitable for source code in the Ada language.</p> </li> <li> <p><code>bibtex</code> suitable for files with BibTeX coded references.</p> </li> <li> <p><code>cpp</code> suitable for source code in the C and C++ languages.</p> </li> <li> <p><code>csharp</code> suitable for source code in the C# language.</p> </li> <li> <p><code>fortran</code> suitable for source code in the Fortran language.</p> </li> <li> <p><code>fountain</code> suitable for Fountain documents.</p> </li> <li> <p><code>html</code> suitable for HTML/XHTML documents.</p> </li> <li> <p><code>java</code> suitable for source code in the Java language.</p> </li> <li> <p><code>matlab</code> suitable for source code in the MATLAB language.</p> </li> <li> <p><code>objc</code> suitable for source code in the Objective-C language.</p> </li> <li> <p><code>pascal</code> suitable for source code in the Pascal/Delphi language.</p> </li> <li> <p><code>perl</code> suitable for source code in the Perl language.</p> </li> <li> <p><code>php</code> suitable for source code in the PHP language.</p> </li> <li> <p><code>python</code> suitable for source code in the Python language.</p> </li> <li> <p><code>ruby</code> suitable for source code in the Ruby language.</p> </li> <li> <p><code>tex</code> suitable for source code for LaTeX documents.</p> </li> </ul> </div> </div> <div class=\"sect3\"> <h4 id=\"_customizing_word_diff\">Customizing word diff</h4>  <p>You can customize the rules that <code>git diff --word-diff</code> uses to split words in a line, by specifying an appropriate regular expression in the \"diff.*.wordRegex\" configuration variable. For example, in TeX a backslash followed by a sequence of letters forms a command, but several such commands can be run together without intervening whitespace. To separate them, use a regular expression in your <code>$GIT_DIR/config</code> file (or <code>$HOME/.gitconfig</code> file) like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>[diff \"tex\"]\n        wordRegex = \"\\\\\\\\[a-zA-Z]+|[{}]|\\\\\\\\.|[^\\\\{}[:space:]]+\"</pre> </div> </div>  <p>A built-in pattern is provided for all languages listed in the previous section.</p>  </div> <div class=\"sect3\"> <h4 id=\"_performing_text_diffs_of_binary_files\">Performing text diffs of binary files</h4>  <p>Sometimes it is desirable to see the diff of a text-converted version of some binary files. For example, a word processor document can be converted to an ASCII text representation, and the diff of the text shown. Even though this conversion loses some information, the resulting diff is useful for human viewing (but cannot be applied directly).</p>   <p>The <code>textconv</code> config option is used to define a program for performing such a conversion. The program should take a single argument, the name of a file to convert, and produce the resulting text on stdout.</p>   <p>For example, to show the diff of the exif information of a file instead of the binary information (assuming you have the exif tool installed), add the following section to your <code>$GIT_DIR/config</code> file (or <code>$HOME/.gitconfig</code> file):</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>[diff \"jpg\"]\n        textconv = exif</pre> </div> </div> <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> The text conversion is generally a one-way conversion; in this example, we lose the actual image contents and focus just on the text data. This means that diffs generated by textconv are <em>not</em> suitable for applying. For this reason, only <code>git diff</code> and the <code>git log</code> family of commands (i.e., log, whatchanged, show) will perform text conversion. <code>git\nformat-patch</code> will never generate this output. If you want to send somebody a text-converted diff of a binary file (e.g., because it quickly conveys the changes you have made), you should generate it separately and send it as a comment <em>in addition to</em> the usual binary diff that you might send. </td> </tr> </table> </div>  <p>Because text conversion can be slow, especially when doing a large number of them with <code>git log -p</code>, Git provides a mechanism to cache the output and use it in future diffs. To enable caching, set the \"cachetextconv\" variable in your diff driver’s config. For example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>[diff \"jpg\"]\n        textconv = exif\n        cachetextconv = true</pre> </div> </div>  <p>This will cache the result of running \"exif\" on each blob indefinitely. If you change the textconv config variable for a diff driver, Git will automatically invalidate the cache entries and re-run the textconv filter. If you want to invalidate the cache manually (e.g., because your version of \"exif\" was updated and now produces better output), you can remove the cache manually with <code>git update-ref -d refs/notes/textconv/jpg</code> (where \"jpg\" is the name of the diff driver, as in the example above).</p>  </div> <div class=\"sect3\"> <h4 id=\"_choosing_textconv_versus_external_diff\">Choosing textconv versus external diff</h4>  <p>If you want to show differences between binary or specially-formatted blobs in your repository, you can choose to use either an external diff command, or to use textconv to convert them to a diff-able text format. Which method you choose depends on your exact situation.</p>   <p>The advantage of using an external diff command is flexibility. You are not bound to find line-oriented changes, nor is it necessary for the output to resemble unified diff. You are free to locate and report changes in the most appropriate way for your data format.</p>   <p>A textconv, by comparison, is much more limiting. You provide a transformation of the data into a line-oriented text format, and Git uses its regular diff tools to generate the output. There are several advantages to choosing this method:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>Ease of use. It is often much simpler to write a binary to text transformation than it is to perform your own diff. In many cases, existing programs can be used as textconv filters (e.g., exif, odt2txt).</p> </li> <li> <p>Git diff features. By performing only the transformation step yourself, you can still utilize many of Git’s diff features, including colorization, word-diff, and combined diffs for merges.</p> </li> <li> <p>Caching. Textconv caching can speed up repeated diffs, such as those you might trigger by running <code>git log -p</code>.</p> </li> </ol> </div> </div> <div class=\"sect3\"> <h4 id=\"_marking_files_as_binary\">Marking files as binary</h4>  <p>Git usually guesses correctly whether a blob contains text or binary data by examining the beginning of the contents. However, sometimes you may want to override its decision, either because a blob contains binary data later in the file, or because the content, while technically composed of text characters, is opaque to a human reader. For example, many postscript files contain only ASCII characters, but produce noisy and meaningless diffs.</p>   <p>The simplest way to mark a file as binary is to unset the diff attribute in the <code>.gitattributes</code> file:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>*.ps -diff</pre> </div> </div>  <p>This will cause Git to generate <code>Binary files differ</code> (or a binary patch, if binary patches are enabled) instead of a regular diff.</p>   <p>However, one may also want to specify other diff driver attributes. For example, you might want to use <code>textconv</code> to convert postscript files to an ASCII representation for human viewing, but otherwise treat them as binary files. You cannot specify both <code>-diff</code> and <code>diff=ps</code> attributes. The solution is to use the <code>diff.*.binary</code> config option:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>[diff \"ps\"]\n  textconv = ps2ascii\n  binary = true</pre> </div> </div> </div> </div> <div class=\"sect2\"> <h3 id=\"_performing_a_three_way_merge\">Performing a three-way merge</h3> <div class=\"sect3\"> <h4 id=\"__code_merge_code\"><code>merge</code></h4>  <p>The attribute <code>merge</code> affects how three versions of a file are merged when a file-level merge is necessary during <code>git merge</code>, and other commands such as <code>git revert</code> and <code>git cherry-pick</code>.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">Set</dt> <dd> <p>Built-in 3-way merge driver is used to merge the contents in a way similar to <code>merge</code> command of <code>RCS</code> suite. This is suitable for ordinary text files.</p> </dd> <dt class=\"hdlist1\">Unset</dt> <dd> <p>Take the version from the current branch as the tentative merge result, and declare that the merge has conflicts. This is suitable for binary files that do not have a well-defined merge semantics.</p> </dd> <dt class=\"hdlist1\">Unspecified</dt> <dd> <p>By default, this uses the same built-in 3-way merge driver as is the case when the <code>merge</code> attribute is set. However, the <code>merge.default</code> configuration variable can name different merge driver to be used with paths for which the <code>merge</code> attribute is unspecified.</p> </dd> <dt class=\"hdlist1\">String</dt> <dd> <p>3-way merge is performed using the specified custom merge driver. The built-in 3-way merge driver can be explicitly specified by asking for \"text\" driver; the built-in \"take the current branch\" driver can be requested with \"binary\".</p> </dd> </dl> </div> </div> <div class=\"sect3\"> <h4 id=\"_built_in_merge_drivers\">Built-in merge drivers</h4>  <p>There are a few built-in low-level merge drivers defined that can be asked for via the <code>merge</code> attribute.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">text</dt> <dd> <p>Usual 3-way file level merge for text files. Conflicted regions are marked with conflict markers <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code>=======</code> and <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>. The version from your branch appears before the <code>=======</code> marker, and the version from the merged branch appears after the <code>=======</code> marker.</p> </dd> <dt class=\"hdlist1\">binary</dt> <dd> <p>Keep the version from your branch in the work tree, but leave the path in the conflicted state for the user to sort out.</p> </dd> <dt class=\"hdlist1\">union</dt> <dd> <p>Run 3-way file level merge for text files, but take lines from both versions, instead of leaving conflict markers. This tends to leave the added lines in the resulting file in random order and the user should verify the result. Do not use this if you do not understand the implications.</p> </dd> </dl> </div> </div> <div class=\"sect3\"> <h4 id=\"_defining_a_custom_merge_driver\">Defining a custom merge driver</h4>  <p>The definition of a merge driver is done in the <code>.git/config</code> file, not in the <code>gitattributes</code> file, so strictly speaking this manual page is a wrong place to talk about it. However…​</p>   <p>To define a custom merge driver <code>filfre</code>, add a section to your <code>$GIT_DIR/config</code> file (or <code>$HOME/.gitconfig</code> file) like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>[merge \"filfre\"]\n        name = feel-free merge driver\n        driver = filfre %O %A %B %L %P\n        recursive = binary</pre> </div> </div>  <p>The <code>merge.*.name</code> variable gives the driver a human-readable name.</p>   <p>The <code>merge.*.driver</code> variable’s value is used to construct a command to run to merge ancestor’s version (<code>%O</code>), current version (<code>%A</code>) and the other branches' version (<code>%B</code>). These three tokens are replaced with the names of temporary files that hold the contents of these versions when the command line is built. Additionally, %L will be replaced with the conflict marker size (see below).</p>   <p>The merge driver is expected to leave the result of the merge in the file named with <code>%A</code> by overwriting it, and exit with zero status if it managed to merge them cleanly, or non-zero if there were conflicts.</p>   <p>The <code>merge.*.recursive</code> variable specifies what other merge driver to use when the merge driver is called for an internal merge between common ancestors, when there are more than one. When left unspecified, the driver itself is used for both internal merge and the final merge.</p>   <p>The merge driver can learn the pathname in which the merged result will be stored via placeholder <code>%P</code>.</p>  </div> <div class=\"sect3\"> <h4 id=\"__code_conflict_marker_size_code\"><code>conflict-marker-size</code></h4>  <p>This attribute controls the length of conflict markers left in the work tree file during a conflicted merge. Only setting to the value to a positive integer has any meaningful effect.</p>   <p>For example, this line in <code>.gitattributes</code> can be used to tell the merge machinery to leave much longer (instead of the usual 7-character-long) conflict markers when merging the file <code>Documentation/git-merge.txt</code> results in a conflict.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>Documentation/git-merge.txt        conflict-marker-size=32</pre> </div> </div> </div> </div> <div class=\"sect2\"> <h3 id=\"_checking_whitespace_errors\">Checking whitespace errors</h3> <div class=\"sect3\"> <h4 id=\"__code_whitespace_code\"><code>whitespace</code></h4>  <p>The <code>core.whitespace</code> configuration variable allows you to define what <code>diff</code> and <code>apply</code> should consider whitespace errors for all paths in the project (See <a href=\"git-config\">git-config[1]</a>). This attribute gives you finer control per path.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">Set</dt> <dd> <p>Notice all types of potential whitespace errors known to Git. The tab width is taken from the value of the <code>core.whitespace</code> configuration variable.</p> </dd> <dt class=\"hdlist1\">Unset</dt> <dd> <p>Do not notice anything as error.</p> </dd> <dt class=\"hdlist1\">Unspecified</dt> <dd> <p>Use the value of the <code>core.whitespace</code> configuration variable to decide what to notice as error.</p> </dd> <dt class=\"hdlist1\">String</dt> <dd> <p>Specify a comma separate list of common whitespace problems to notice in the same format as the <code>core.whitespace</code> configuration variable.</p> </dd> </dl> </div> </div> </div> <div class=\"sect2\"> <h3 id=\"_creating_an_archive\">Creating an archive</h3> <div class=\"sect3\"> <h4 id=\"__code_export_ignore_code\"><code>export-ignore</code></h4>  <p>Files and directories with the attribute <code>export-ignore</code> won’t be added to archive files.</p>  </div> <div class=\"sect3\"> <h4 id=\"__code_export_subst_code\"><code>export-subst</code></h4>  <p>If the attribute <code>export-subst</code> is set for a file then Git will expand several placeholders when adding this file to an archive. The expansion depends on the availability of a commit ID, i.e., if <a href=\"git-archive\">git-archive[1]</a> has been given a tree instead of a commit or a tag then no replacement will be done. The placeholders are the same as those for the option <code>--pretty=format:</code> of <a href=\"git-log\">git-log[1]</a>, except that they need to be wrapped like this: <code>$Format:PLACEHOLDERS$</code> in the file. E.g. the string <code>$Format:%H$</code> will be replaced by the commit hash.</p>  </div> </div> <div class=\"sect2\"> <h3 id=\"_packing_objects\">Packing objects</h3> <div class=\"sect3\"> <h4 id=\"__code_delta_code\"><code>delta</code></h4>  <p>Delta compression will not be attempted for blobs for paths with the attribute <code>delta</code> set to false.</p>  </div> </div> <div class=\"sect2\"> <h3 id=\"_viewing_files_in_gui_tools\">Viewing files in GUI tools</h3> <div class=\"sect3\"> <h4 id=\"__code_encoding_code\"><code>encoding</code></h4>  <p>The value of this attribute specifies the character encoding that should be used by GUI tools (e.g. <a href=\"gitk\">gitk[1]</a> and <a href=\"git-gui\">git-gui[1]</a>) to display the contents of the relevant file. Note that due to performance considerations <a href=\"gitk\">gitk[1]</a> does not use this attribute unless you manually enable per-file encodings in its options.</p>   <p>If this attribute is not set or has an invalid value, the value of the <code>gui.encoding</code> configuration variable is used instead (See <a href=\"git-config\">git-config[1]</a>).</p>  </div> </div>\n</div>   <h2 id=\"_using_macro_attributes\">Using macro attributes</h2> <div class=\"sectionbody\"> <p>You do not want any end-of-line conversions applied to, nor textual diffs produced for, any binary file you track. You would need to specify e.g.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>*.jpg -text -diff</pre> </div> </div>  <p>but that may become cumbersome, when you have many attributes. Using macro attributes, you can define an attribute that, when set, also sets or unsets a number of other attributes at the same time. The system knows a built-in macro attribute, <code>binary</code>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>*.jpg binary</pre> </div> </div>  <p>Setting the \"binary\" attribute also unsets the \"text\" and \"diff\" attributes as above. Note that macro attributes can only be \"Set\", though setting one might have the effect of setting or unsetting other attributes or even returning other attributes to the \"Unspecified\" state.</p> </div>   <h2 id=\"_defining_macro_attributes\">Defining macro attributes</h2> <div class=\"sectionbody\"> <p>Custom macro attributes can be defined only in top-level gitattributes files (<code>$GIT_DIR/info/attributes</code>, the <code>.gitattributes</code> file at the top level of the working tree, or the global or system-wide gitattributes files), not in <code>.gitattributes</code> files in working tree subdirectories. The built-in macro attribute \"binary\" is equivalent to:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>[attr]binary -diff -merge -text</pre> </div> </div>\n</div>   <h2 id=\"_example\">Example</h2> <div class=\"sectionbody\"> <p>If you have these three <code>gitattributes</code> file:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>(in $GIT_DIR/info/attributes)\n\na*        foo !bar -baz\n\n(in .gitattributes)\nabc        foo bar baz\n\n(in t/.gitattributes)\nab*        merge=filfre\nabc        -foo -bar\n*.c        frotz</pre> </div> </div>  <p>the attributes given to path <code>t/abc</code> are computed as follows:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>By examining <code>t/.gitattributes</code> (which is in the same directory as the path in question), Git finds that the first line matches. <code>merge</code> attribute is set. It also finds that the second line matches, and attributes <code>foo</code> and <code>bar</code> are unset.</p> </li> <li> <p>Then it examines <code>.gitattributes</code> (which is in the parent directory), and finds that the first line matches, but <code>t/.gitattributes</code> file already decided how <code>merge</code>, <code>foo</code> and <code>bar</code> attributes should be given to this path, so it leaves <code>foo</code> and <code>bar</code> unset. Attribute <code>baz</code> is set.</p> </li> <li> <p>Finally it examines <code>$GIT_DIR/info/attributes</code>. This file is used to override the in-tree settings. The first line is a match, and <code>foo</code> is set, <code>bar</code> is reverted to unspecified state, and <code>baz</code> is unset.</p> </li> </ol> </div>  <p>As the result, the attributes assignment to <code>t/abc</code> becomes:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>foo        set to true\nbar        unspecified\nbaz        set to false\nmerge        set to string value \"filfre\"\nfrotz        unspecified</pre> </div> </div>\n</div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-check-attr\">git-check-attr[1]</a>.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/gitattributes\" class=\"_attribution-link\">https://git-scm.com/docs/gitattributes</a>\n  </p>\n</div>\n","gitweb.conf":"<h1>gitweb.conf</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>gitweb.conf - Gitweb (Git web interface) configuration file</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"> <p>/etc/gitweb.conf, /etc/gitweb-common.conf, $GITWEBDIR/gitweb_config.perl</p> </div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>The gitweb CGI script for viewing Git repositories over the web uses a perl script fragment as its configuration file. You can set variables using \"<code>our $variable = value</code>\"; text from a \"#\" character until the end of a line is ignored. See <strong>perlsyn</strong>(1) for details.</p>   <p>An example:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre># gitweb configuration file for http://git.example.org\n#\nour $projectroot = \"/srv/git\"; # FHS recommendation\nour $site_name = 'Example.org &gt;&gt; Repos';</pre> </div> </div>  <p>The configuration file is used to override the default settings that were built into gitweb at the time the <code>gitweb.cgi</code> script was generated.</p>   <p>While one could just alter the configuration settings in the gitweb CGI itself, those changes would be lost upon upgrade. Configuration settings might also be placed into a file in the same directory as the CGI script with the default name <code>gitweb_config.perl</code> — allowing one to have multiple gitweb instances with different configurations by the use of symlinks.</p>   <p>Note that some configuration can be controlled on per-repository rather than gitweb-wide basis: see \"Per-repository gitweb configuration\" subsection on <a href=\"gitweb\">gitweb[1]</a> manpage.</p> </div>   <h2 id=\"_discussion\">Discussion</h2> <div class=\"sectionbody\"> <p>Gitweb reads configuration data from the following sources in the following order:</p>  <div class=\"ulist\"> <ul> <li> <p>built-in values (some set during build stage),</p> </li> <li> <p>common system-wide configuration file (defaults to <code>/etc/gitweb-common.conf</code>),</p> </li> <li> <p>either per-instance configuration file (defaults to <code>gitweb_config.perl</code> in the same directory as the installed gitweb), or if it does not exists then fallback system-wide configuration file (defaults to <code>/etc/gitweb.conf</code>).</p> </li> </ul> </div>  <p>Values obtained in later configuration files override values obtained earlier in the above sequence.</p>   <p>Locations of the common system-wide configuration file, the fallback system-wide configuration file and the per-instance configuration file are defined at compile time using build-time Makefile configuration variables, respectively <code>GITWEB_CONFIG_COMMON</code>, <code>GITWEB_CONFIG_SYSTEM</code> and <code>GITWEB_CONFIG</code>.</p>   <p>You can also override locations of gitweb configuration files during runtime by setting the following environment variables: <code>GITWEB_CONFIG_COMMON</code>, <code>GITWEB_CONFIG_SYSTEM</code> and <code>GITWEB_CONFIG</code> to a non-empty value.</p>   <p>The syntax of the configuration files is that of Perl, since these files are handled by sourcing them as fragments of Perl code (the language that gitweb itself is written in). Variables are typically set using the <code>our</code> qualifier (as in \"<code>our $variable = &lt;value&gt;;</code>\") to avoid syntax errors if a new version of gitweb no longer uses a variable and therefore stops declaring it.</p>   <p>You can include other configuration file using read_config_file() subroutine. For example, one might want to put gitweb configuration related to access control for viewing repositories via Gitolite (one of Git repository management tools) in a separate file, e.g. in <code>/etc/gitweb-gitolite.conf</code>. To include it, put</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>read_config_file(\"/etc/gitweb-gitolite.conf\");</pre> </div> </div>  <p>somewhere in gitweb configuration file used, e.g. in per-installation gitweb configuration file. Note that read_config_file() checks itself that the file it reads exists, and does nothing if it is not found. It also handles errors in included file.</p>   <p>The default configuration with no configuration file at all may work perfectly well for some installations. Still, a configuration file is useful for customizing or tweaking the behavior of gitweb in many ways, and some optional features will not be present unless explicitly enabled using the configurable <code>%features</code> variable (see also \"Configuring gitweb features\" section below).</p> </div>   <h2 id=\"_configuration_variables\">Configuration variables</h2> <div class=\"sectionbody\"> <p>Some configuration variables have their default values (embedded in the CGI script) set during building gitweb — if that is the case, this fact is put in their description. See gitweb’s <code>INSTALL</code> file for instructions on building and installing gitweb.</p>  <div class=\"sect2\"> <h3 id=\"_location_of_repositories\">Location of repositories</h3>  <p>The configuration variables described below control how gitweb finds Git repositories, and how repositories are displayed and accessed.</p>   <p>See also \"Repositories\" and later subsections in <a href=\"gitweb\">gitweb[1]</a> manpage.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">$projectroot</dt> <dd> <p>Absolute filesystem path which will be prepended to project path; the path to repository is <code>$projectroot/$project</code>. Set to <code>$GITWEB_PROJECTROOT</code> during installation. This variable has to be set correctly for gitweb to find repositories.</p>  <p>For example, if <code>$projectroot</code> is set to \"/srv/git\" by putting the following in gitweb config file:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>our $projectroot = \"/srv/git\";</pre> </div> </div>  <p>then</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>http://git.example.com/gitweb.cgi?p=foo/bar.git</pre> </div> </div>  <p>and its path_info based equivalent</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>http://git.example.com/gitweb.cgi/foo/bar.git</pre> </div> </div>  <p>will map to the path <code>/srv/git/foo/bar.git</code> on the filesystem.</p>  </dd> <dt class=\"hdlist1\">$projects_list</dt> <dd> <p>Name of a plain text file listing projects, or a name of directory to be scanned for projects.</p>  <p>Project list files should list one project per line, with each line having the following format</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>&lt;URI-encoded filesystem path to repository&gt; SP &lt;URI-encoded repository owner&gt;</pre> </div> </div>  <p>The default value of this variable is determined by the <code>GITWEB_LIST</code> makefile variable at installation time. If this variable is empty, gitweb will fall back to scanning the <code>$projectroot</code> directory for repositories.</p>  </dd> <dt class=\"hdlist1\">$project_maxdepth</dt> <dd> <p>If <code>$projects_list</code> variable is unset, gitweb will recursively scan filesystem for Git repositories. The <code>$project_maxdepth</code> is used to limit traversing depth, relative to <code>$projectroot</code> (starting point); it means that directories which are further from <code>$projectroot</code> than <code>$project_maxdepth</code> will be skipped.</p>  <p>It is purely performance optimization, originally intended for MacOS X, where recursive directory traversal is slow. Gitweb follows symbolic links, but it detects cycles, ignoring any duplicate files and directories.</p>   <p>The default value of this variable is determined by the build-time configuration variable <code>GITWEB_PROJECT_MAXDEPTH</code>, which defaults to 2007.</p>  </dd> <dt class=\"hdlist1\">$export_ok</dt> <dd> <p>Show repository only if this file exists (in repository). Only effective if this variable evaluates to true. Can be set when building gitweb by setting <code>GITWEB_EXPORT_OK</code>. This path is relative to <code>GIT_DIR</code>. git-daemon[1] uses <code>git-daemon-export-ok</code>, unless started with <code>--export-all</code>. By default this variable is not set, which means that this feature is turned off.</p> </dd> <dt class=\"hdlist1\">$export_auth_hook</dt> <dd> <p>Function used to determine which repositories should be shown. This subroutine should take one parameter, the full path to a project, and if it returns true, that project will be included in the projects list and can be accessed through gitweb as long as it fulfills the other requirements described by $export_ok, $projects_list, and $projects_maxdepth. Example:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>our $export_auth_hook = sub { return -e \"$_[0]/git-daemon-export-ok\"; };</pre> </div> </div>  <p>though the above might be done by using <code>$export_ok</code> instead</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>our $export_ok = \"git-daemon-export-ok\";</pre> </div> </div>  <p>If not set (default), it means that this feature is disabled.</p>   <p>See also more involved example in \"Controlling access to Git repositories\" subsection on <a href=\"gitweb\">gitweb[1]</a> manpage.</p>  </dd> <dt class=\"hdlist1\">$strict_export</dt> <dd> <p>Only allow viewing of repositories also shown on the overview page. This for example makes <code>$gitweb_export_ok</code> file decide if repository is available and not only if it is shown. If <code>$gitweb_list</code> points to file with list of project, only those repositories listed would be available for gitweb. Can be set during building gitweb via <code>GITWEB_STRICT_EXPORT</code>. By default this variable is not set, which means that you can directly access those repositories that are hidden from projects list page (e.g. the are not listed in the $projects_list file).</p> </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_finding_files\">Finding files</h3>  <p>The following configuration variables tell gitweb where to find files. The values of these variables are paths on the filesystem.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">$GIT</dt> <dd> <p>Core git executable to use. By default set to <code>$GIT_BINDIR/git</code>, which in turn is by default set to <code>$(bindir)/git</code>. If you use Git installed from a binary package, you should usually set this to \"/usr/bin/git\". This can just be \"git\" if your web server has a sensible PATH; from security point of view it is better to use absolute path to git binary. If you have multiple Git versions installed it can be used to choose which one to use. Must be (correctly) set for gitweb to be able to work.</p> </dd> <dt class=\"hdlist1\">$mimetypes_file</dt> <dd> <p>File to use for (filename extension based) guessing of MIME types before trying <code>/etc/mime.types</code>. <strong>NOTE</strong> that this path, if relative, is taken as relative to the current Git repository, not to CGI script. If unset, only <code>/etc/mime.types</code> is used (if present on filesystem). If no mimetypes file is found, mimetype guessing based on extension of file is disabled. Unset by default.</p> </dd> <dt class=\"hdlist1\">$highlight_bin</dt> <dd> <p>Path to the highlight executable to use (it must be the one from <a href=\"http://www.andre-simon.de\" class=\"bare\">http://www.andre-simon.de</a> due to assumptions about parameters and output). By default set to <code>highlight</code>; set it to full path to highlight executable if it is not installed on your web server’s PATH. Note that <code>highlight</code> feature must be set for gitweb to actually use syntax highlighting.</p>  <p><strong>NOTE</strong>: if you want to add support for new file type (supported by \"highlight\" but not used by gitweb), you need to modify <code>%highlight_ext</code> or <code>%highlight_basename</code>, depending on whether you detect type of file based on extension (for example \"sh\") or on its basename (for example \"Makefile\"). The keys of these hashes are extension and basename, respectively, and value for given key is name of syntax to be passed via <code>--syntax &lt;syntax&gt;</code> to highlighter.</p>   <p>For example if repositories you are hosting use \"phtml\" extension for PHP files, and you want to have correct syntax-highlighting for those files, you can add the following to gitweb configuration:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>our %highlight_ext;\n$highlight_ext{'phtml'} = 'php';</pre> </div> </div> </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_links_and_their_targets\">Links and their targets</h3>  <p>The configuration variables described below configure some of gitweb links: their target and their look (text or image), and where to find page prerequisites (stylesheet, favicon, images, scripts). Usually they are left at their default values, with the possible exception of <code>@stylesheets</code> variable.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">@stylesheets</dt> <dd> <p>List of URIs of stylesheets (relative to the base URI of a page). You might specify more than one stylesheet, for example to use \"gitweb.css\" as base with site specific modifications in a separate stylesheet to make it easier to upgrade gitweb. For example, you can add a <code>site</code> stylesheet by putting</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>push @stylesheets, \"gitweb-site.css\";</pre> </div> </div>  <p>in the gitweb config file. Those values that are relative paths are relative to base URI of gitweb.</p>   <p>This list should contain the URI of gitweb’s standard stylesheet. The default URI of gitweb stylesheet can be set at build time using the <code>GITWEB_CSS</code> makefile variable. Its default value is <code>static/gitweb.css</code> (or <code>static/gitweb.min.css</code> if the <code>CSSMIN</code> variable is defined, i.e. if CSS minifier is used during build).</p>   <p><strong>Note</strong>: there is also a legacy <code>$stylesheet</code> configuration variable, which was used by older gitweb. If <code>$stylesheet</code> variable is defined, only CSS stylesheet given by this variable is used by gitweb.</p>  </dd> <dt class=\"hdlist1\">$logo</dt> <dd> <p>Points to the location where you put <code>git-logo.png</code> on your web server, or to be more the generic URI of logo, 72x27 size). This image is displayed in the top right corner of each gitweb page and used as a logo for the Atom feed. Relative to the base URI of gitweb (as a path). Can be adjusted when building gitweb using <code>GITWEB_LOGO</code> variable By default set to <code>static/git-logo.png</code>.</p> </dd> <dt class=\"hdlist1\">$favicon</dt> <dd> <p>Points to the location where you put <code>git-favicon.png</code> on your web server, or to be more the generic URI of favicon, which will be served as \"image/png\" type. Web browsers that support favicons (website icons) may display them in the browser’s URL bar and next to the site name in bookmarks. Relative to the base URI of gitweb. Can be adjusted at build time using <code>GITWEB_FAVICON</code> variable. By default set to <code>static/git-favicon.png</code>.</p> </dd> <dt class=\"hdlist1\">$javascript</dt> <dd> <p>Points to the location where you put <code>gitweb.js</code> on your web server, or to be more generic the URI of JavaScript code used by gitweb. Relative to the base URI of gitweb. Can be set at build time using the <code>GITWEB_JS</code> build-time configuration variable.</p>  <p>The default value is either <code>static/gitweb.js</code>, or <code>static/gitweb.min.js</code> if the <code>JSMIN</code> build variable was defined, i.e. if JavaScript minifier was used at build time. <strong>Note</strong> that this single file is generated from multiple individual JavaScript \"modules\".</p>  </dd> <dt class=\"hdlist1\">$home_link</dt> <dd> <p>Target of the home link on the top of all pages (the first part of view \"breadcrumbs\"). By default it is set to the absolute URI of a current page (to the value of <code>$my_uri</code> variable, or to \"/\" if <code>$my_uri</code> is undefined or is an empty string).</p> </dd> <dt class=\"hdlist1\">$home_link_str</dt> <dd> <p>Label for the \"home link\" at the top of all pages, leading to <code>$home_link</code> (usually the main gitweb page, which contains the projects list). It is used as the first component of gitweb’s \"breadcrumb trail\": <code>&lt;home link&gt; / &lt;project&gt; / &lt;action&gt;</code>. Can be set at build time using the <code>GITWEB_HOME_LINK_STR</code> variable. By default it is set to \"projects\", as this link leads to the list of projects. Another popular choice is to set it to the name of site. Note that it is treated as raw HTML so it should not be set from untrusted sources.</p> </dd> <dt class=\"hdlist1\">@extra_breadcrumbs</dt> <dd> <p>Additional links to be added to the start of the breadcrumb trail before the home link, to pages that are logically \"above\" the gitweb projects list, such as the organization and department which host the gitweb server. Each element of the list is a reference to an array, in which element 0 is the link text (equivalent to <code>$home_link_str</code>) and element 1 is the target URL (equivalent to <code>$home_link</code>).</p>  <p>For example, the following setting produces a breadcrumb trail like \"home / dev / projects / …​\" where \"projects\" is the home link.</p>  </dd> </dl> </div> <div class=\"listingblock\"> <div class=\"content\"> <pre>    our @extra_breadcrumbs = (\n      [ 'home' =&gt; 'https://www.example.org/' ],\n      [ 'dev'  =&gt; 'https://dev.example.org/' ],\n    );</pre> </div> </div> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">$logo_url</dt> <dt class=\"hdlist1\">$logo_label</dt> <dd> <p>URI and label (title) for the Git logo link (or your site logo, if you chose to use different logo image). By default, these both refer to Git homepage, <a href=\"http://git-scm.com\" class=\"bare\">http://git-scm.com</a>; in the past, they pointed to Git documentation at <a href=\"http://www.kernel.org\" class=\"bare\">http://www.kernel.org</a>.</p> </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_changing_gitweb_s_look\">Changing gitweb’s look</h3>  <p>You can adjust how pages generated by gitweb look using the variables described below. You can change the site name, add common headers and footers for all pages, and add a description of this gitweb installation on its main page (which is the projects list page), etc.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">$site_name</dt> <dd> <p>Name of your site or organization, to appear in page titles. Set it to something descriptive for clearer bookmarks etc. If this variable is not set or is, then gitweb uses the value of the <code>SERVER_NAME</code> <code>CGI</code> environment variable, setting site name to \"$SERVER_NAME Git\", or \"Untitled Git\" if this variable is not set (e.g. if running gitweb as standalone script).</p>  <p>Can be set using the <code>GITWEB_SITENAME</code> at build time. Unset by default.</p>  </dd> <dt class=\"hdlist1\">$site_html_head_string</dt> <dd> <p>HTML snippet to be included in the &lt;head&gt; section of each page. Can be set using <code>GITWEB_SITE_HTML_HEAD_STRING</code> at build time. No default value.</p> </dd> <dt class=\"hdlist1\">$site_header</dt> <dd> <p>Name of a file with HTML to be included at the top of each page. Relative to the directory containing the <code>gitweb.cgi</code> script. Can be set using <code>GITWEB_SITE_HEADER</code> at build time. No default value.</p> </dd> <dt class=\"hdlist1\">$site_footer</dt> <dd> <p>Name of a file with HTML to be included at the bottom of each page. Relative to the directory containing the <code>gitweb.cgi</code> script. Can be set using <code>GITWEB_SITE_FOOTER</code> at build time. No default value.</p> </dd> <dt class=\"hdlist1\">$home_text</dt> <dd> <p>Name of a HTML file which, if it exists, is included on the gitweb projects overview page (\"projects_list\" view). Relative to the directory containing the gitweb.cgi script. Default value can be adjusted during build time using <code>GITWEB_HOMETEXT</code> variable. By default set to <code>indextext.html</code>.</p> </dd> <dt class=\"hdlist1\">$projects_list_description_width</dt> <dd> <p>The width (in characters) of the \"Description\" column of the projects list. Longer descriptions will be truncated (trying to cut at word boundary); the full description is available in the <code>title</code> attribute (usually shown on mouseover). The default is 25, which might be too small if you use long project descriptions.</p> </dd> <dt class=\"hdlist1\">$default_projects_order</dt> <dd> <p>Default value of ordering of projects on projects list page, which means the ordering used if you don’t explicitly sort projects list (if there is no \"o\" CGI query parameter in the URL). Valid values are \"none\" (unsorted), \"project\" (projects are by project name, i.e. path to repository relative to <code>$projectroot</code>), \"descr\" (project description), \"owner\", and \"age\" (by date of most current commit).</p>  <p>Default value is \"project\". Unknown value means unsorted.</p>  </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_changing_gitweb_s_behavior\">Changing gitweb’s behavior</h3>  <p>These configuration variables control <code>internal</code> gitweb behavior.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">$default_blob_plain_mimetype</dt> <dd> <p>Default mimetype for the blob_plain (raw) view, if mimetype checking doesn’t result in some other type; by default \"text/plain\". Gitweb guesses mimetype of a file to display based on extension of its filename, using <code>$mimetypes_file</code> (if set and file exists) and <code>/etc/mime.types</code> files (see <strong>mime.types</strong>(5) manpage; only filename extension rules are supported by gitweb).</p> </dd> <dt class=\"hdlist1\">$default_text_plain_charset</dt> <dd> <p>Default charset for text files. If this is not set, the web server configuration will be used. Unset by default.</p> </dd> <dt class=\"hdlist1\">$fallback_encoding</dt> <dd> <p>Gitweb assumes this charset when a line contains non-UTF-8 characters. The fallback decoding is used without error checking, so it can be even \"utf-8\". The value must be a valid encoding; see the <strong>Encoding::Supported</strong>(3pm) man page for a list. The default is \"latin1\", aka. \"iso-8859-1\".</p> </dd> <dt class=\"hdlist1\">@diff_opts</dt> <dd> <p>Rename detection options for git-diff and git-diff-tree. The default is ('-M'); set it to ('-C') or ('-C', '-C') to also detect copies, or set it to () i.e. empty list if you don’t want to have renames detection.</p>  <p><strong>Note</strong> that rename and especially copy detection can be quite CPU-intensive. Note also that non Git tools can have problems with patches generated with options mentioned above, especially when they involve file copies ('-C') or criss-cross renames ('-B').</p>  </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_some_optional_features_and_policies\">Some optional features and policies</h3>  <p>Most of features are configured via <code>%feature</code> hash; however some of extra gitweb features can be turned on and configured using variables described below. This list beside configuration variables that control how gitweb looks does contain variables configuring administrative side of gitweb (e.g. cross-site scripting prevention; admittedly this as side effect affects how \"summary\" pages look like, or load limiting).</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">@git_base_url_list</dt> <dd> <p>List of Git base URLs. These URLs are used to generate URLs describing from where to fetch a project, which are shown on project summary page. The full fetch URL is \"<code>$git_base_url/$project</code>\", for each element of this list. You can set up multiple base URLs (for example one for <code>git://</code> protocol, and one for <code>http://</code> protocol).</p>  <p>Note that per repository configuration can be set in <code>$GIT_DIR/cloneurl</code> file, or as values of multi-value <code>gitweb.url</code> configuration variable in project config. Per-repository configuration takes precedence over value composed from <code>@git_base_url_list</code> elements and project name.</p>   <p>You can setup one single value (single entry/item in this list) at build time by setting the <code>GITWEB_BASE_URL</code> build-time configuration variable. By default it is set to (), i.e. an empty list. This means that gitweb would not try to create project URL (to fetch) from project name.</p>  </dd> <dt class=\"hdlist1\">$projects_list_group_categories</dt> <dd> <p>Whether to enable the grouping of projects by category on the project list page. The category of a project is determined by the <code>$GIT_DIR/category</code> file or the <code>gitweb.category</code> variable in each repository’s configuration. Disabled by default (set to 0).</p> </dd> <dt class=\"hdlist1\">$project_list_default_category</dt> <dd> <p>Default category for projects for which none is specified. If this is set to the empty string, such projects will remain uncategorized and listed at the top, above categorized projects. Used only if project categories are enabled, which means if <code>$projects_list_group_categories</code> is true. By default set to \"\" (empty string).</p> </dd> <dt class=\"hdlist1\">$prevent_xss</dt> <dd> <p>If true, some gitweb features are disabled to prevent content in repositories from launching cross-site scripting (XSS) attacks. Set this to true if you don’t trust the content of your repositories. False by default (set to 0).</p> </dd> <dt class=\"hdlist1\">$maxload</dt> <dd> <p>Used to set the maximum load that we will still respond to gitweb queries. If the server load exceeds this value then gitweb will return \"503 Service Unavailable\" error. The server load is taken to be 0 if gitweb cannot determine its value. Currently it works only on Linux, where it uses <code>/proc/loadavg</code>; the load there is the number of active tasks on the system — processes that are actually running — averaged over the last minute.</p>  <p>Set <code>$maxload</code> to undefined value (<code>undef</code>) to turn this feature off. The default value is 300.</p>  </dd> <dt class=\"hdlist1\">$omit_age_column</dt> <dd> <p>If true, omit the column with date of the most current commit on the projects list page. It can save a bit of I/O and a fork per repository.</p> </dd> <dt class=\"hdlist1\">$omit_owner</dt> <dd> <p>If true prevents displaying information about repository owner.</p> </dd> <dt class=\"hdlist1\">$per_request_config</dt> <dd> <p>If this is set to code reference, it will be run once for each request. You can set parts of configuration that change per session this way. For example, one might use the following code in a gitweb configuration file</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>our $per_request_config = sub {\n        $ENV{GL_USER} = $cgi-&gt;remote_user || \"gitweb\";\n};</pre> </div> </div>  <p>If <code>$per_request_config</code> is not a code reference, it is interpreted as boolean value. If it is true gitweb will process config files once per request, and if it is false gitweb will process config files only once, each time it is executed. True by default (set to 1).</p>   <p><strong>NOTE</strong>: <code>$my_url</code>, <code>$my_uri</code>, and <code>$base_url</code> are overwritten with their default values before every request, so if you want to change them, be sure to set this variable to true or a code reference effecting the desired changes.</p>   <p>This variable matters only when using persistent web environments that serve multiple requests using single gitweb instance, like mod_perl, FastCGI or Plackup.</p>  </dd> </dl> </div> </div> <div class=\"sect2\"> <h3 id=\"_other_variables\">Other variables</h3>  <p>Usually you should not need to change (adjust) any of configuration variables described below; they should be automatically set by gitweb to correct value.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">$version</dt> <dd> <p>Gitweb version, set automatically when creating gitweb.cgi from gitweb.perl. You might want to modify it if you are running modified gitweb, for example</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>our $version .= \" with caching\";</pre> </div> </div>  <p>if you run modified version of gitweb with caching support. This variable is purely informational, used e.g. in the \"generator\" meta header in HTML header.</p>  </dd> <dt class=\"hdlist1\">$my_url</dt> <dt class=\"hdlist1\">$my_uri</dt> <dd> <p>Full URL and absolute URL of the gitweb script; in earlier versions of gitweb you might have need to set those variables, but now there should be no need to do it. See <code>$per_request_config</code> if you need to set them still.</p> </dd> <dt class=\"hdlist1\">$base_url</dt> <dd> <p>Base URL for relative URLs in pages generated by gitweb, (e.g. <code>$logo</code>, <code>$favicon</code>, <code>@stylesheets</code> if they are relative URLs), needed and used <code>&lt;base href=\"$base_url\"&gt;</code> only for URLs with nonempty PATH_INFO. Usually gitweb sets its value correctly, and there is no need to set this variable, e.g. to $my_uri or \"/\". See <code>$per_request_config</code> if you need to override it anyway.</p> </dd> </dl> </div> </div>\n</div>   <h2 id=\"_configuring_gitweb_features\">Configuring gitweb features</h2> <div class=\"sectionbody\"> <p>Many gitweb features can be enabled (or disabled) and configured using the <code>%feature</code> hash. Names of gitweb features are keys of this hash.</p>   <p>Each <code>%feature</code> hash element is a hash reference and has the following structure:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>\"&lt;feature_name&gt;\" =&gt; {\n        \"sub\" =&gt; &lt;feature-sub (subroutine)&gt;,\n        \"override\" =&gt; &lt;allow-override (boolean)&gt;,\n        \"default\" =&gt; [ &lt;options&gt;... ]\n},</pre> </div> </div>  <p>Some features cannot be overridden per project. For those features the structure of appropriate <code>%feature</code> hash element has a simpler form:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>\"&lt;feature_name&gt;\" =&gt; {\n        \"override\" =&gt; 0,\n        \"default\" =&gt; [ &lt;options&gt;... ]\n},</pre> </div> </div>  <p>As one can see it lacks the 'sub' element.</p>   <p>The meaning of each part of feature configuration is described below:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">default</dt> <dd> <p>List (array reference) of feature parameters (if there are any), used also to toggle (enable or disable) given feature.</p>  <p>Note that it is currently <strong>always</strong> an array reference, even if feature doesn’t accept any configuration parameters, and 'default' is used only to turn it on or off. In such case you turn feature on by setting this element to <code>[1]</code>, and torn it off by setting it to <code>[0]</code>. See also the passage about the \"blame\" feature in the \"Examples\" section.</p>   <p>To disable features that accept parameters (are configurable), you need to set this element to empty list i.e. <code>[]</code>.</p>  </dd> <dt class=\"hdlist1\">override</dt> <dd> <p>If this field has a true value then the given feature is overridable, which means that it can be configured (or enabled/disabled) on a per-repository basis.</p>  <p>Usually given \"&lt;feature&gt;\" is configurable via the <code>gitweb.&lt;feature&gt;</code> config variable in the per-repository Git configuration file.</p>   <p><strong>Note</strong> that no feature is overridable by default.</p>  </dd> <dt class=\"hdlist1\">sub</dt> <dd> <p>Internal detail of implementation. What is important is that if this field is not present then per-repository override for given feature is not supported.</p>  <p>You wouldn’t need to ever change it in gitweb config file.</p>  </dd> </dl> </div> <div class=\"sect2\"> <h3 id=\"_features_in_code_feature_code\">Features in <code>%feature</code>\n</h3>  <p>The gitweb features that are configurable via <code>%feature</code> hash are listed below. This should be a complete list, but ultimately the authoritative and complete list is in gitweb.cgi source code, with features described in the comments.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">blame</dt> <dd> <p>Enable the \"blame\" and \"blame_incremental\" blob views, showing for each line the last commit that modified it; see <a href=\"git-blame\">git-blame[1]</a>. This can be very CPU-intensive and is therefore disabled by default.</p>  <p>This feature can be configured on a per-repository basis via repository’s <code>gitweb.blame</code> configuration variable (boolean).</p>  </dd> <dt class=\"hdlist1\">snapshot</dt> <dd> <p>Enable and configure the \"snapshot\" action, which allows user to download a compressed archive of any tree or commit, as produced by <a href=\"git-archive\">git-archive[1]</a> and possibly additionally compressed. This can potentially generate high traffic if you have large project.</p>  <p>The value of 'default' is a list of names of snapshot formats, defined in <code>%known_snapshot_formats</code> hash, that you wish to offer. Supported formats include \"tgz\", \"tbz2\", \"txz\" (gzip/bzip2/xz compressed tar archive) and \"zip\"; please consult gitweb sources for a definitive list. By default only \"tgz\" is offered.</p>   <p>This feature can be configured on a per-repository basis via repository’s <code>gitweb.blame</code> configuration variable, which contains a comma separated list of formats or \"none\" to disable snapshots. Unknown values are ignored.</p>  </dd> <dt class=\"hdlist1\">grep</dt> <dd> <p>Enable grep search, which lists the files in currently selected tree (directory) containing the given string; see <a href=\"git-grep\">git-grep[1]</a>. This can be potentially CPU-intensive, of course. Enabled by default.</p>  <p>This feature can be configured on a per-repository basis via repository’s <code>gitweb.grep</code> configuration variable (boolean).</p>  </dd> <dt class=\"hdlist1\">pickaxe</dt> <dd> <p>Enable the so called pickaxe search, which will list the commits that introduced or removed a given string in a file. This can be practical and quite faster alternative to \"blame\" action, but it is still potentially CPU-intensive. Enabled by default.</p>  <p>The pickaxe search is described in <a href=\"git-log\">git-log[1]</a> (the description of <code>-S&lt;string&gt;</code> option, which refers to pickaxe entry in <a href=\"gitdiffcore\">gitdiffcore[7]</a> for more details).</p>   <p>This feature can be configured on a per-repository basis by setting repository’s <code>gitweb.pickaxe</code> configuration variable (boolean).</p>  </dd> <dt class=\"hdlist1\">show-sizes</dt> <dd> <p>Enable showing size of blobs (ordinary files) in a \"tree\" view, in a separate column, similar to what <code>ls -l</code> does; see description of <code>-l</code> option in <a href=\"git-ls-tree\">git-ls-tree[1]</a> manpage. This costs a bit of I/O. Enabled by default.</p>  <p>This feature can be configured on a per-repository basis via repository’s <code>gitweb.showSizes</code> configuration variable (boolean).</p>  </dd> <dt class=\"hdlist1\">patches</dt> <dd> <p>Enable and configure \"patches\" view, which displays list of commits in email (plain text) output format; see also <a href=\"git-format-patch\">git-format-patch[1]</a>. The value is the maximum number of patches in a patchset generated in \"patches\" view. Set the <code>default</code> field to a list containing single item of or to an empty list to disable patch view, or to a list containing a single negative number to remove any limit. Default value is 16.</p>  <p>This feature can be configured on a per-repository basis via repository’s <code>gitweb.patches</code> configuration variable (integer).</p>  </dd> <dt class=\"hdlist1\">avatar</dt> <dd> <p>Avatar support. When this feature is enabled, views such as \"shortlog\" or \"commit\" will display an avatar associated with the email of each committer and author.</p>  <p>Currently available providers are <strong>\"gravatar\"</strong> and <strong>\"picon\"</strong>. Only one provider at a time can be selected (<code>default</code> is one element list). If an unknown provider is specified, the feature is disabled. <strong>Note</strong> that some providers might require extra Perl packages to be installed; see <code>gitweb/INSTALL</code> for more details.</p>   <p>This feature can be configured on a per-repository basis via repository’s <code>gitweb.avatar</code> configuration variable.</p>   <p>See also <code>%avatar_size</code> with pixel sizes for icons and avatars (\"default\" is used for one-line like \"log\" and \"shortlog\", \"double\" is used for two-line like \"commit\", \"commitdiff\" or \"tag\"). If the default font sizes or lineheights are changed (e.g. via adding extra CSS stylesheet in <code>@stylesheets</code>), it may be appropriate to change these values.</p>  </dd> <dt class=\"hdlist1\">highlight</dt> <dd> <p>Server-side syntax highlight support in \"blob\" view. It requires <code>$highlight_bin</code> program to be available (see the description of this variable in the \"Configuration variables\" section above), and therefore is disabled by default.</p>  <p>This feature can be configured on a per-repository basis via repository’s <code>gitweb.highlight</code> configuration variable (boolean).</p>  </dd> <dt class=\"hdlist1\">remote_heads</dt> <dd> <p>Enable displaying remote heads (remote-tracking branches) in the \"heads\" list. In most cases the list of remote-tracking branches is an unnecessary internal private detail, and this feature is therefore disabled by default. <a href=\"git-instaweb\">git-instaweb[1]</a>, which is usually used to browse local repositories, enables and uses this feature.</p>  <p>This feature can be configured on a per-repository basis via repository’s <code>gitweb.remote_heads</code> configuration variable (boolean).</p>  </dd> </dl> </div>  <p>The remaining features cannot be overridden on a per project basis.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">search</dt> <dd> <p>Enable text search, which will list the commits which match author, committer or commit text to a given string; see the description of <code>--author</code>, <code>--committer</code> and <code>--grep</code> options in <a href=\"git-log\">git-log[1]</a> manpage. Enabled by default.</p>  <p>Project specific override is not supported.</p>  </dd> <dt class=\"hdlist1\">forks</dt> <dd> <p>If this feature is enabled, gitweb considers projects in subdirectories of project root (basename) to be forks of existing projects. For each project <code>$projname.git</code>, projects in the <code>$projname/</code> directory and its subdirectories will not be shown in the main projects list. Instead, a '+' mark is shown next to +$projname+, which links to a \"forks\" view that lists all the forks (all projects in <code>$projname/</code> subdirectory). Additionally a \"forks\" view for a project is linked from project summary page.</p>  <p>If the project list is taken from a file (<code>$projects_list</code> points to a file), forks are only recognized if they are listed after the main project in that file.</p>   <p>Project specific override is not supported.</p>  </dd> <dt class=\"hdlist1\">actions</dt> <dd> <p>Insert custom links to the action bar of all project pages. This allows you to link to third-party scripts integrating into gitweb.</p>  <p>The \"default\" value consists of a list of triplets in the form <code>(\"&lt;label&gt;\", \"&lt;link&gt;\", \"&lt;position&gt;\")</code> where \"position\" is the label after which to insert the link, \"link\" is a format string where <code>%n</code> expands to the project name, <code>%f</code> to the project path within the filesystem (i.e. \"$projectroot/$project\"), <code>%h</code> to the current hash ('h' gitweb parameter) and <code>%b</code> to the current hash base ('hb' gitweb parameter); <code>%%</code> expands to '%'.</p>   <p>For example, at the time this page was written, the <a href=\"http://repo.or.cz\" class=\"bare\">http://repo.or.cz</a> Git hosting site set it to the following to enable graphical log (using the third party tool <strong>git-browser</strong>):</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$feature{'actions'}{'default'} =\n        [ ('graphiclog', '/git-browser/by-commit.html?r=%n', 'summary')];</pre> </div> </div>  <p>This adds a link titled \"graphiclog\" after the \"summary\" link, leading to <code>git-browser</code> script, passing <code>r=&lt;project&gt;</code> as a query parameter.</p>   <p>Project specific override is not supported.</p>  </dd> <dt class=\"hdlist1\">timed</dt> <dd> <p>Enable displaying how much time and how many Git commands it took to generate and display each page in the page footer (at the bottom of page). For example the footer might contain: \"This page took 6.53325 seconds and 13 Git commands to generate.\" Disabled by default.</p>  <p>Project specific override is not supported.</p>  </dd> <dt class=\"hdlist1\">javascript-timezone</dt> <dd> <p>Enable and configure the ability to change a common time zone for dates in gitweb output via JavaScript. Dates in gitweb output include authordate and committerdate in \"commit\", \"commitdiff\" and \"log\" views, and taggerdate in \"tag\" view. Enabled by default.</p>  <p>The value is a list of three values: a default time zone (for if the client hasn’t selected some other time zone and saved it in a cookie), a name of cookie where to store selected time zone, and a CSS class used to mark up dates for manipulation. If you want to turn this feature off, set \"default\" to empty list: <code>[]</code>.</p>   <p>Typical gitweb config files will only change starting (default) time zone, and leave other elements at their default values:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$feature{'javascript-timezone'}{'default'}[0] = \"utc\";</pre> </div> </div>  <p>The example configuration presented here is guaranteed to be backwards and forward compatible.</p>   <p>Time zone values can be \"local\" (for local time zone that browser uses), \"utc\" (what gitweb uses when JavaScript or this feature is disabled), or numerical time zones in the form of \"+/-HHMM\", such as \"+0200\".</p>   <p>Project specific override is not supported.</p>  </dd> <dt class=\"hdlist1\">extra-branch-refs</dt> <dd> <p>List of additional directories under \"refs\" which are going to be used as branch refs. For example if you have a gerrit setup where all branches under refs/heads/ are official, push-after-review ones and branches under refs/sandbox/, refs/wip and refs/other are user ones where permissions are much wider, then you might want to set this variable as follows:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$feature{'extra-branch-refs'}{'default'} =\n        ['sandbox', 'wip', 'other'];</pre> </div> </div>  <p>This feature can be configured on per-repository basis after setting $feature{<code>extra-branch-refs</code>}{<code>override</code>} to true, via repository’s <code>gitweb.extraBranchRefs</code> configuration variable, which contains a space separated list of refs. An example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>[gitweb]\n        extraBranchRefs = sandbox wip other</pre> </div> </div>  <p>The gitweb.extraBranchRefs is actually a multi-valued configuration variable, so following example is also correct and the result is the same as of the snippet above:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>[gitweb]\n        extraBranchRefs = sandbox\n        extraBranchRefs = wip other</pre> </div> </div>  <p>It is an error to specify a ref that does not pass \"git check-ref-format\" scrutiny. Duplicated values are filtered.</p>  </dd> </dl> </div> </div>\n</div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"> <p>To enable blame, pickaxe search, and snapshot support (allowing \"tar.gz\" and \"zip\" snapshots), while allowing individual projects to turn them off, put the following in your GITWEB_CONFIG file:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>$feature{'blame'}{'default'} = [1];\n$feature{'blame'}{'override'} = 1;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>$feature{'pickaxe'}{'default'} = [1];\n$feature{'pickaxe'}{'override'} = 1;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>$feature{'snapshot'}{'default'} = ['zip', 'tgz'];\n$feature{'snapshot'}{'override'} = 1;</pre> </div> </div>  <p>If you allow overriding for the snapshot feature, you can specify which snapshot formats are globally disabled. You can also add any command-line options you want (such as setting the compression level). For instance, you can disable Zip compressed snapshots and set <strong>gzip</strong>(1) to run at level 6 by adding the following lines to your gitweb configuration file:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>$known_snapshot_formats{'zip'}{'disabled'} = 1;\n$known_snapshot_formats{'tgz'}{'compressor'} = ['gzip','-6'];</pre> </div> </div>\n</div>   <h2 id=\"_bugs\">Bugs</h2> <div class=\"sectionbody\"> <p>Debugging would be easier if the fallback configuration file (<code>/etc/gitweb.conf</code>) and environment variable to override its location (<code>GITWEB_CONFIG_SYSTEM</code>) had names reflecting their \"fallback\" role. The current names are kept to avoid breaking working setups.</p> </div>   <h2 id=\"_environment\">Environment</h2> <div class=\"sectionbody\"> <p>The location of per-instance and system-wide configuration files can be overridden using the following environment variables:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">GITWEB_CONFIG</dt> <dd> <p>Sets location of per-instance configuration file.</p> </dd> <dt class=\"hdlist1\">GITWEB_CONFIG_SYSTEM</dt> <dd> <p>Sets location of fallback system-wide configuration file. This file is read only if per-instance one does not exist.</p> </dd> <dt class=\"hdlist1\">GITWEB_CONFIG_COMMON</dt> <dd> <p>Sets location of common system-wide configuration file.</p> </dd> </dl> </div>\n</div>   <h2 id=\"_files\">Files</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">gitweb_config.perl</dt> <dd> <p>This is default name of per-instance configuration file. The format of this file is described above.</p> </dd> <dt class=\"hdlist1\">/etc/gitweb.conf</dt> <dd> <p>This is default name of fallback system-wide configuration file. This file is used only if per-instance configuration variable is not found.</p> </dd> <dt class=\"hdlist1\">/etc/gitweb-common.conf</dt> <dd> <p>This is default name of common system-wide configuration file.</p> </dd> </dl> </div></div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"gitweb\">gitweb[1]</a>, <a href=\"git-instaweb\">git-instaweb[1]</a></p>   <p><code>gitweb/README</code>, <code>gitweb/INSTALL</code></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/gitweb.conf\" class=\"_attribution-link\">https://git-scm.com/docs/gitweb.conf</a>\n  </p>\n</div>\n","git-check-ref-format":"<h1>git-check-ref-format</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-check-ref-format - Ensures that a reference name is well formed</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git check-ref-format [--normalize]\n       [--[no-]allow-onelevel] [--refspec-pattern]\n       &lt;refname&gt;\ngit check-ref-format --branch &lt;branchname-shorthand&gt;</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Checks if a given <code>refname</code> is acceptable, and exits with a non-zero status if it is not.</p>   <p>A reference is used in Git to specify branches and tags. A branch head is stored in the <code>refs/heads</code> hierarchy, while a tag is stored in the <code>refs/tags</code> hierarchy of the ref namespace (typically in <code>$GIT_DIR/refs/heads</code> and <code>$GIT_DIR/refs/tags</code> directories or, as entries in file <code>$GIT_DIR/packed-refs</code> if refs are packed by <code>git gc</code>).</p>   <p>Git imposes the following rules on how references are named:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>They can include slash <code>/</code> for hierarchical (directory) grouping, but no slash-separated component can begin with a dot <code>.</code> or end with the sequence <code>.lock</code>.</p> </li> <li> <p>They must contain at least one <code>/</code>. This enforces the presence of a category like <code>heads/</code>, <code>tags/</code> etc. but the actual names are not restricted. If the <code>--allow-onelevel</code> option is used, this rule is waived.</p> </li> <li> <p>They cannot have two consecutive dots <code>..</code> anywhere.</p> </li> <li> <p>They cannot have ASCII control characters (i.e. bytes whose values are lower than \\040, or \\177 <code>DEL</code>), space, tilde <code>~</code>, caret <code>^</code>, or colon <code>:</code> anywhere.</p> </li> <li> <p>They cannot have question-mark <code>?</code>, asterisk <code>*</code>, or open bracket <code>[</code> anywhere. See the <code>--refspec-pattern</code> option below for an exception to this rule.</p> </li> <li> <p>They cannot begin or end with a slash <code>/</code> or contain multiple consecutive slashes (see the <code>--normalize</code> option below for an exception to this rule)</p> </li> <li> <p>They cannot end with a dot <code>.</code>.</p> </li> <li> <p>They cannot contain a sequence <code>@{</code>.</p> </li> <li> <p>They cannot be the single character <code>@</code>.</p> </li> <li> <p>They cannot contain a <code>\\</code>.</p> </li> </ol> </div>  <p>These rules make it easy for shell script based tools to parse reference names, pathname expansion by the shell when a reference name is used unquoted (by mistake), and also avoid ambiguities in certain reference name expressions (see <a href=\"gitrevisions\">gitrevisions[7]</a>):</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>A double-dot <code>..</code> is often used as in <code>ref1..ref2</code>, and in some contexts this notation means <code>^ref1 ref2</code> (i.e. not in <code>ref1</code> and in <code>ref2</code>).</p> </li> <li> <p>A tilde <code>~</code> and caret <code>^</code> are used to introduce the postfix <code>nth parent</code> and <code>peel onion</code> operation.</p> </li> <li> <p>A colon <code>:</code> is used as in <code>srcref:dstref</code> to mean \"use srcref’s value and store it in dstref\" in fetch and push operations. It may also be used to select a specific object such as with 'git cat-file': \"git cat-file blob v1.3.3:refs.c\".</p> </li> <li> <p>at-open-brace <code>@{</code> is used as a notation to access a reflog entry.</p> </li> </ol> </div>  <p>With the <code>--branch</code> option, it expands the “previous branch syntax” <code>@{-n}</code>. For example, <code>@{-1}</code> is a way to refer the last branch you were on. This option should be used by porcelains to accept this syntax anywhere a branch name is expected, so they can act as if you typed the branch name.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--[no-]allow-onelevel</dt> <dd> <p>Controls whether one-level refnames are accepted (i.e., refnames that do not contain multiple <code>/</code>-separated components). The default is <code>--no-allow-onelevel</code>.</p> </dd> <dt class=\"hdlist1\">--refspec-pattern</dt> <dd> <p>Interpret &lt;refname&gt; as a reference name pattern for a refspec (as used with remote repositories). If this option is enabled, &lt;refname&gt; is allowed to contain a single <code>*</code> in the refspec (e.g., <code>foo/bar*/baz</code> or <code>foo/bar*baz/</code> but not <code>foo/bar*/baz*</code>).</p> </dd> <dt class=\"hdlist1\">--normalize</dt> <dd> <p>Normalize <code>refname</code> by removing any leading slash (<code>/</code>) characters and collapsing runs of adjacent slashes between name components into a single slash. Iff the normalized refname is valid then print it to standard output and exit with a status of 0. (<code>--print</code> is a deprecated way to spell <code>--normalize</code>.)</p> </dd> </dl> </div></div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"><div class=\"ulist\"> <ul> <li> <p>Print the name of the previous branch:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git check-ref-format --branch @{-1}</pre> </div> </div> </li> <li> <p>Determine the reference name to use for a new branch:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ ref=$(git check-ref-format --normalize \"refs/heads/$newbranch\") ||\ndie \"we do not like '$newbranch' as a branch name.\"</pre> </div> </div> </li> </ul> </div></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-check-ref-format\" class=\"_attribution-link\">https://git-scm.com/docs/git-check-ref-format</a>\n  </p>\n</div>\n","git-annotate":"<h1>git-annotate</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-annotate - Annotate file lines with commit information</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git annotate [options] file [revision]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Annotates each line in the given file with information from the commit which introduced the line. Optionally annotates from a given revision.</p>   <p>The only difference between this command and <a href=\"git-blame\">git-blame[1]</a> is that they use slightly different output formats, and this command exists only for backward compatibility to support existing scripts, and provide a more familiar command name for people coming from other SCM systems.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\">\n<div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-b</dt> <dd> <p>Show blank SHA-1 for boundary commits. This can also be controlled via the <code>blame.blankboundary</code> config option.</p> </dd> <dt class=\"hdlist1\">--root</dt> <dd> <p>Do not treat root commits as boundaries. This can also be controlled via the <code>blame.showRoot</code> config option.</p> </dd> <dt class=\"hdlist1\">--show-stats</dt> <dd> <p>Include additional statistics at the end of blame output.</p> </dd> <dt class=\"hdlist1\">-L &lt;start&gt;,&lt;end&gt;</dt> <dt class=\"hdlist1\">-L :&lt;funcname&gt;</dt> <dd> <p>Annotate only the given line range. May be specified multiple times. Overlapping ranges are allowed.</p>  <p>&lt;start&gt; and &lt;end&gt; are optional. “-L &lt;start&gt;” or “-L &lt;start&gt;,” spans from &lt;start&gt; to end of file. “-L ,&lt;end&gt;” spans from start of file to &lt;end&gt;.</p>   <p>&lt;start&gt; and &lt;end&gt; can take one of these forms:</p>  <div class=\"ulist\"> <ul> <li> <p>number</p>  <p>If &lt;start&gt; or &lt;end&gt; is a number, it specifies an absolute line number (lines count from 1).</p>  </li> <li> <p>/regex/</p>  <p>This form will use the first line matching the given POSIX regex. If &lt;start&gt; is a regex, it will search from the end of the previous <code>-L</code> range, if any, otherwise from the start of file. If &lt;start&gt; is “^/regex/”, it will search from the start of file. If &lt;end&gt; is a regex, it will search starting at the line given by &lt;start&gt;.</p>  </li> <li> <p>+offset or -offset</p>  <p>This is only valid for &lt;end&gt; and will specify a number of lines before or after the line given by &lt;start&gt;.</p>  </li> </ul> </div>  <p>If “:&lt;funcname&gt;” is given in place of &lt;start&gt; and &lt;end&gt;, it is a regular expression that denotes the range from the first funcname line that matches &lt;funcname&gt;, up to the next funcname line. “:&lt;funcname&gt;” searches from the end of the previous <code>-L</code> range, if any, otherwise from the start of file. “^:&lt;funcname&gt;” searches from the start of file.</p>  </dd> </dl> </div> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-l</dt> <dd> <p>Show long rev (Default: off).</p> </dd> <dt class=\"hdlist1\">-t</dt> <dd> <p>Show raw timestamp (Default: off).</p> </dd> <dt class=\"hdlist1\">-S &lt;revs-file&gt;</dt> <dd> <p>Use revisions from revs-file instead of calling <a href=\"git-rev-list\">git-rev-list[1]</a>.</p> </dd> <dt class=\"hdlist1\">--reverse</dt> <dd> <p>Walk history forward instead of backward. Instead of showing the revision in which a line appeared, this shows the last revision in which a line has existed. This requires a range of revision like START..END where the path to blame exists in START.</p> </dd> <dt class=\"hdlist1\">-p</dt> <dt class=\"hdlist1\">--porcelain</dt> <dd> <p>Show in a format designed for machine consumption.</p> </dd> <dt class=\"hdlist1\">--line-porcelain</dt> <dd> <p>Show the porcelain format, but output commit information for each line, not just the first time a commit is referenced. Implies --porcelain.</p> </dd> <dt class=\"hdlist1\">--incremental</dt> <dd> <p>Show the result incrementally in a format designed for machine consumption.</p> </dd> <dt class=\"hdlist1\">--encoding=&lt;encoding&gt;</dt> <dd> <p>Specifies the encoding used to output author names and commit summaries. Setting it to <code>none</code> makes blame output unconverted data. For more information see the discussion about encoding in the <a href=\"git-log\">git-log[1]</a> manual page.</p> </dd> <dt class=\"hdlist1\">--contents &lt;file&gt;</dt> <dd> <p>When &lt;rev&gt; is not specified, the command annotates the changes starting backwards from the working tree copy. This flag makes the command pretend as if the working tree copy has the contents of the named file (specify <code>-</code> to make the command read from the standard input).</p> </dd> <dt class=\"hdlist1\">--date &lt;format&gt;</dt> <dd> <p>Specifies the format used to output dates. If --date is not provided, the value of the blame.date config variable is used. If the blame.date config variable is also not set, the iso format is used. For supported values, see the discussion of the --date option at <a href=\"git-log\">git-log[1]</a>.</p> </dd> <dt class=\"hdlist1\">--[no-]progress</dt> <dd> <p>Progress status is reported on the standard error stream by default when it is attached to a terminal. This flag enables progress reporting even if not attached to a terminal. Can’t use <code>--progress</code> together with <code>--porcelain</code> or <code>--incremental</code>.</p> </dd> <dt class=\"hdlist1\">-M|&lt;num&gt;|</dt> <dd> <p>Detect moved or copied lines within a file. When a commit moves or copies a block of lines (e.g. the original file has A and then B, and the commit changes it to B and then A), the traditional <code>blame</code> algorithm notices only half of the movement and typically blames the lines that were moved up (i.e. B) to the parent and assigns blame to the lines that were moved down (i.e. A) to the child commit. With this option, both groups of lines are blamed on the parent by running extra passes of inspection.</p>  <p>&lt;num&gt; is optional but it is the lower bound on the number of alphanumeric characters that Git must detect as moving/copying within a file for it to associate those lines with the parent commit. The default value is 20.</p>  </dd> <dt class=\"hdlist1\">-C|&lt;num&gt;|</dt> <dd> <p>In addition to <code>-M</code>, detect lines moved or copied from other files that were modified in the same commit. This is useful when you reorganize your program and move code around across files. When this option is given twice, the command additionally looks for copies from other files in the commit that creates the file. When this option is given three times, the command additionally looks for copies from other files in any commit.</p>  <p>&lt;num&gt; is optional but it is the lower bound on the number of alphanumeric characters that Git must detect as moving/copying between files for it to associate those lines with the parent commit. And the default value is 40. If there are more than one <code>-C</code> options given, the &lt;num&gt; argument of the last <code>-C</code> will take effect.</p>  </dd> <dt class=\"hdlist1\">-h</dt> <dd> <p>Show help message.</p> </dd> </dl> </div>\n</div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-blame\">git-blame[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-annotate\" class=\"_attribution-link\">https://git-scm.com/docs/git-annotate</a>\n  </p>\n</div>\n","git-fetch-pack":"<h1>git-fetch-pack</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-fetch-pack - Receive missing objects from another repository</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git fetch-pack [--all] [--quiet|-q] [--keep|-k] [--thin] [--include-tag]\n        [--upload-pack=&lt;git-upload-pack&gt;]\n        [--depth=&lt;n&gt;] [--no-progress]\n        [-v] &lt;repository&gt; [&lt;refs&gt;…​]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Usually you would want to use <code>git fetch</code>, which is a higher level wrapper of this command, instead.</p>   <p>Invokes <code>git-upload-pack</code> on a possibly remote repository and asks it to send objects missing from this repository, to update the named heads. The list of commits available locally is found out by scanning the local refs/ hierarchy and sent to <code>git-upload-pack</code> running on the other end.</p>   <p>This command degenerates to download everything to complete the asked refs from the remote side when the local side does not have a common ancestor commit.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--all</dt> <dd> <p>Fetch all remote refs.</p> </dd> <dt class=\"hdlist1\">--stdin</dt> <dd> <p>Take the list of refs from stdin, one per line. If there are refs specified on the command line in addition to this option, then the refs from stdin are processed after those on the command line.</p>  <p>If <code>--stateless-rpc</code> is specified together with this option then the list of refs must be in packet format (pkt-line). Each ref must be in a separate packet, and the list must end with a flush packet.</p>  </dd> <dt class=\"hdlist1\">-q</dt> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>Pass <code>-q</code> flag to <code>git unpack-objects</code>; this makes the cloning process less verbose.</p> </dd> <dt class=\"hdlist1\">-k</dt> <dt class=\"hdlist1\">--keep</dt> <dd> <p>Do not invoke <code>git unpack-objects</code> on received data, but create a single packfile out of it instead, and store it in the object database. If provided twice then the pack is locked against repacking.</p> </dd> <dt class=\"hdlist1\">--thin</dt> <dd> <p>Fetch a \"thin\" pack, which records objects in deltified form based on objects not included in the pack to reduce network traffic.</p> </dd> <dt class=\"hdlist1\">--include-tag</dt> <dd> <p>If the remote side supports it, annotated tags objects will be downloaded on the same connection as the other objects if the object the tag references is downloaded. The caller must otherwise determine the tags this option made available.</p> </dd> <dt class=\"hdlist1\">--upload-pack=&lt;git-upload-pack&gt;</dt> <dd> <p>Use this to specify the path to <code>git-upload-pack</code> on the remote side, if is not found on your $PATH. Installations of sshd ignores the user’s environment setup scripts for login shells (e.g. .bash_profile) and your privately installed git may not be found on the system default $PATH. Another workaround suggested is to set up your $PATH in \".bashrc\", but this flag is for people who do not want to pay the overhead for non-interactive shells by having a lean .bashrc file (they set most of the things up in .bash_profile).</p> </dd> <dt class=\"hdlist1\">--exec=&lt;git-upload-pack&gt;</dt> <dd> <p>Same as --upload-pack=&lt;git-upload-pack&gt;.</p> </dd> <dt class=\"hdlist1\">--depth=&lt;n&gt;</dt> <dd> <p>Limit fetching to ancestor-chains not longer than n. <code>git-upload-pack</code> treats the special depth 2147483647 as infinite even if there is an ancestor-chain that long.</p> </dd> <dt class=\"hdlist1\">--no-progress</dt> <dd> <p>Do not show the progress.</p> </dd> <dt class=\"hdlist1\">--check-self-contained-and-connected</dt> <dd> <p>Output \"connectivity-ok\" if the received pack is self-contained and connected.</p> </dd> <dt class=\"hdlist1\">-v</dt> <dd> <p>Run verbosely.</p> </dd> <dt class=\"hdlist1\">&lt;repository&gt;</dt> <dd> <p>The URL to the remote repository.</p> </dd> <dt class=\"hdlist1\">&lt;refs&gt;…​</dt> <dd> <p>The remote heads to update from. This is relative to $GIT_DIR (e.g. \"HEAD\", \"refs/heads/master\"). When unspecified, update from all heads the remote side has.</p>  <p>If the remote has enabled the options <code>uploadpack.allowTipSHA1InWant</code> or <code>uploadpack.allowReachableSHA1InWant</code>, they may alternatively be 40-hex sha1s present on the remote.</p>  </dd> </dl> </div></div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-fetch\">git-fetch[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-fetch-pack\" class=\"_attribution-link\">https://git-scm.com/docs/git-fetch-pack</a>\n  </p>\n</div>\n","git-fmt-merge-msg":"<h1>git-fmt-merge-msg</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-fmt-merge-msg - Produce a merge commit message</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git fmt-merge-msg [-m &lt;message&gt;] [--log[=&lt;n&gt;] | --no-log]\ngit fmt-merge-msg [-m &lt;message&gt;] [--log[=&lt;n&gt;] | --no-log] -F &lt;file&gt;</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Takes the list of merged objects on stdin and produces a suitable commit message to be used for the merge commit, usually to be passed as the <code>&lt;merge-message&gt;</code> argument of <code>git merge</code>.</p>   <p>This command is intended mostly for internal use by scripts automatically invoking <code>git merge</code>.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--log[=&lt;n&gt;]</dt> <dd> <p>In addition to branch names, populate the log message with one-line descriptions from the actual commits that are being merged. At most &lt;n&gt; commits from each merge parent will be used (20 if &lt;n&gt; is omitted). This overrides the <code>merge.log</code> configuration variable.</p> </dd> <dt class=\"hdlist1\">--no-log</dt> <dd> <p>Do not list one-line descriptions from the actual commits being merged.</p> </dd> <dt class=\"hdlist1\">--[no-]summary</dt> <dd> <p>Synonyms to --log and --no-log; these are deprecated and will be removed in the future.</p> </dd> <dt class=\"hdlist1\">-m &lt;message&gt;</dt> <dt class=\"hdlist1\">--message &lt;message&gt;</dt> <dd> <p>Use &lt;message&gt; instead of the branch names for the first line of the log message. For use with <code>--log</code>.</p> </dd> <dt class=\"hdlist1\">-F &lt;file&gt;</dt> <dt class=\"hdlist1\">--file &lt;file&gt;</dt> <dd> <p>Take the list of merged objects from &lt;file&gt; instead of stdin.</p> </dd> </dl> </div></div>   <h2 id=\"_configuration\">Configuration</h2> <div class=\"sectionbody\">\n<div class=\"dlist\"> <dl> <dt class=\"hdlist1\">merge.branchdesc</dt> <dd> <p>In addition to branch names, populate the log message with the branch description text associated with them. Defaults to false.</p> </dd> <dt class=\"hdlist1\">merge.log</dt> <dd> <p>In addition to branch names, populate the log message with at most the specified number of one-line descriptions from the actual commits that are being merged. Defaults to false, and true is a synonym for 20.</p> </dd> </dl> </div> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">merge.summary</dt> <dd> <p>Synonym to <code>merge.log</code>; this is deprecated and will be removed in the future.</p> </dd> </dl> </div>\n</div>   <h2 id=\"_example\">Example</h2> <div class=\"sectionbody\">\n<div class=\"openblock\"> <div class=\"content\">  <p>$ git fetch origin master $ git fmt-merge-msg --log &lt;$GIT_DIR/FETCH_HEAD</p>  </div> </div>  <p>Print a log message describing a merge of the \"master\" branch from the \"origin\" remote.</p> </div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-merge\">git-merge[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-fmt-merge-msg\" class=\"_attribution-link\">https://git-scm.com/docs/git-fmt-merge-msg</a>\n  </p>\n</div>\n","git-receive-pack":"<h1>git-receive-pack</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-receive-pack - Receive what is pushed into the repository</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git-receive-pack &lt;directory&gt;</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Invoked by <code>git send-pack</code> and updates the repository with the information fed from the remote end.</p>   <p>This command is usually not invoked directly by the end user. The UI for the protocol is on the <code>git send-pack</code> side, and the program pair is meant to be used to push updates to remote repository. For pull operations, see <a href=\"git-fetch-pack\">git-fetch-pack[1]</a>.</p>   <p>The command allows for creation and fast-forwarding of sha1 refs (heads/tags) on the remote end (strictly speaking, it is the local end <code>git-receive-pack</code> runs, but to the user who is sitting at the send-pack end, it is updating the remote. Confused?)</p>   <p>There are other real-world examples of using update and post-update hooks found in the Documentation/howto directory.</p>   <p><code>git-receive-pack</code> honours the receive.denyNonFastForwards config option, which tells it if updates to a ref should be denied if they are not fast-forwards.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">&lt;directory&gt;</dt> <dd> <p>The repository to sync into.</p> </dd> </dl> </div></div>   <h2 id=\"_pre_receive_hook\">Pre-receive hook</h2> <div class=\"sectionbody\"> <p>Before any ref is updated, if $GIT_DIR/hooks/pre-receive file exists and is executable, it will be invoked once with no parameters. The standard input of the hook will be one line per ref to be updated:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>sha1-old SP sha1-new SP refname LF</pre> </div> </div>  <p>The refname value is relative to $GIT_DIR; e.g. for the master head this is \"refs/heads/master\". The two sha1 values before each refname are the object names for the refname before and after the update. Refs to be created will have sha1-old equal to 0{40}, while refs to be deleted will have sha1-new equal to 0{40}, otherwise sha1-old and sha1-new should be valid objects in the repository.</p>   <p>When accepting a signed push (see <a href=\"git-push\">git-push[1]</a>), the signed push certificate is stored in a blob and an environment variable <code>GIT_PUSH_CERT</code> can be consulted for its object name. See the description of <code>post-receive</code> hook for an example. In addition, the certificate is verified using GPG and the result is exported with the following environment variables:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>GIT_PUSH_CERT_SIGNER</code></dt> <dd> <p>The name and the e-mail address of the owner of the key that signed the push certificate.</p> </dd> <dt class=\"hdlist1\"><code>GIT_PUSH_CERT_KEY</code></dt> <dd> <p>The GPG key ID of the key that signed the push certificate.</p> </dd> <dt class=\"hdlist1\"><code>GIT_PUSH_CERT_STATUS</code></dt> <dd> <p>The status of GPG verification of the push certificate, using the same mnemonic as used in <code>%G?</code> format of <code>git log</code> family of commands (see <a href=\"git-log\">git-log[1]</a>).</p> </dd> <dt class=\"hdlist1\"><code>GIT_PUSH_CERT_NONCE</code></dt> <dd> <p>The nonce string the process asked the signer to include in the push certificate. If this does not match the value recorded on the \"nonce\" header in the push certificate, it may indicate that the certificate is a valid one that is being replayed from a separate \"git push\" session.</p> </dd> <dt class=\"hdlist1\"><code>GIT_PUSH_CERT_NONCE_STATUS</code></dt> <dd> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>UNSOLICITED</code></dt> <dd> <p>\"git push --signed\" sent a nonce when we did not ask it to send one.</p> </dd> <dt class=\"hdlist1\"><code>MISSING</code></dt> <dd> <p>\"git push --signed\" did not send any nonce header.</p> </dd> <dt class=\"hdlist1\"><code>BAD</code></dt> <dd> <p>\"git push --signed\" sent a bogus nonce.</p> </dd> <dt class=\"hdlist1\"><code>OK</code></dt> <dd> <p>\"git push --signed\" sent the nonce we asked it to send.</p> </dd> <dt class=\"hdlist1\"><code>SLOP</code></dt> <dd> <p>\"git push --signed\" sent a nonce different from what we asked it to send now, but in a previous session. See <code>GIT_PUSH_CERT_NONCE_SLOP</code> environment variable.</p> </dd> </dl> </div> </dd> <dt class=\"hdlist1\"><code>GIT_PUSH_CERT_NONCE_SLOP</code></dt> <dd> <p>\"git push --signed\" sent a nonce different from what we asked it to send now, but in a different session whose starting time is different by this many seconds from the current session. Only meaningful when <code>GIT_PUSH_CERT_NONCE_STATUS</code> says <code>SLOP</code>. Also read about <code>receive.certNonceSlop</code> variable in <a href=\"git-config\">git-config[1]</a>.</p> </dd> </dl> </div>  <p>This hook is called before any refname is updated and before any fast-forward checks are performed.</p>   <p>If the pre-receive hook exits with a non-zero exit status no updates will be performed, and the update, post-receive and post-update hooks will not be invoked either. This can be useful to quickly bail out if the update is not to be supported.</p> </div>   <h2 id=\"_update_hook\">Update hook</h2> <div class=\"sectionbody\"> <p>Before each ref is updated, if $GIT_DIR/hooks/update file exists and is executable, it is invoked once per ref, with three parameters:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>$GIT_DIR/hooks/update refname sha1-old sha1-new</pre> </div> </div>  <p>The refname parameter is relative to $GIT_DIR; e.g. for the master head this is \"refs/heads/master\". The two sha1 arguments are the object names for the refname before and after the update. Note that the hook is called before the refname is updated, so either sha1-old is 0{40} (meaning there is no such ref yet), or it should match what is recorded in refname.</p>   <p>The hook should exit with non-zero status if it wants to disallow updating the named ref. Otherwise it should exit with zero.</p>   <p>Successful execution (a zero exit status) of this hook does not ensure the ref will actually be updated, it is only a prerequisite. As such it is not a good idea to send notices (e.g. email) from this hook. Consider using the post-receive hook instead.</p> </div>   <h2 id=\"_post_receive_hook\">Post-receive hook</h2> <div class=\"sectionbody\"> <p>After all refs were updated (or attempted to be updated), if any ref update was successful, and if $GIT_DIR/hooks/post-receive file exists and is executable, it will be invoked once with no parameters. The standard input of the hook will be one line for each successfully updated ref:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>sha1-old SP sha1-new SP refname LF</pre> </div> </div>  <p>The refname value is relative to $GIT_DIR; e.g. for the master head this is \"refs/heads/master\". The two sha1 values before each refname are the object names for the refname before and after the update. Refs that were created will have sha1-old equal to 0{40}, while refs that were deleted will have sha1-new equal to 0{40}, otherwise sha1-old and sha1-new should be valid objects in the repository.</p>   <p>The <code>GIT_PUSH_CERT*</code> environment variables can be inspected, just as in <code>pre-receive</code> hook, after accepting a signed push.</p>   <p>Using this hook, it is easy to generate mails describing the updates to the repository. This example script sends one mail message per ref listing the commits pushed to the repository, and logs the push certificates of signed pushes with good signatures to a logger service:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>#!/bin/sh\n# mail out commit update information.\nwhile read oval nval ref\ndo\n    if expr \"$oval\" : '0*$' &gt;/dev/null\n    then\n        echo \"Created a new ref, with the following commits:\"\n        git rev-list --pretty \"$nval\"\n    else\n        echo \"New commits:\"\n        git rev-list --pretty \"$nval\" \"^$oval\"\n    fi |\n    mail -s \"Changes to ref $ref\" commit-list@mydomain\ndone\n# log signed push certificate, if any\nif test -n \"${GIT_PUSH_CERT-}\" &amp;&amp; test ${GIT_PUSH_CERT_STATUS} = G\nthen\n    (\n        echo expected nonce is ${GIT_PUSH_NONCE}\n        git cat-file blob ${GIT_PUSH_CERT}\n    ) | mail -s \"push certificate from $GIT_PUSH_CERT_SIGNER\" push-log@mydomain\nfi\nexit 0</pre> </div> </div>  <p>The exit code from this hook invocation is ignored, however a non-zero exit code will generate an error message.</p>   <p>Note that it is possible for refname to not have sha1-new when this hook runs. This can easily occur if another user modifies the ref after it was updated by <code>git-receive-pack</code>, but before the hook was able to evaluate it. It is recommended that hooks rely on sha1-new rather than the current value of refname.</p> </div>   <h2 id=\"_post_update_hook\">Post-update hook</h2> <div class=\"sectionbody\"> <p>After all other processing, if at least one ref was updated, and if $GIT_DIR/hooks/post-update file exists and is executable, then post-update will be called with the list of refs that have been updated. This can be used to implement any repository wide cleanup tasks.</p>   <p>The exit code from this hook invocation is ignored; the only thing left for <code>git-receive-pack</code> to do at that point is to exit itself anyway.</p>   <p>This hook can be used, for example, to run <code>git update-server-info</code> if the repository is packed and is served via a dumb transport.</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>#!/bin/sh\nexec git update-server-info</pre> </div> </div>\n</div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-send-pack\">git-send-pack[1]</a>, <a href=\"gitnamespaces\">gitnamespaces[7]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-receive-pack\" class=\"_attribution-link\">https://git-scm.com/docs/git-receive-pack</a>\n  </p>\n</div>\n","gitdiffcore":"<h1>gitdiffcore</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>gitdiffcore - Tweaking diff output</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git diff *</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>The diff commands <code>git diff-index</code>, <code>git diff-files</code>, and <code>git diff-tree</code> can be told to manipulate differences they find in unconventional ways before showing <code>diff</code> output. The manipulation is collectively called \"diffcore transformation\". This short note describes what they are and how to use them to produce <code>diff</code> output that is easier to understand than the conventional kind.</p> </div>   <h2 id=\"_the_chain_of_operation\">The chain of operation</h2> <div class=\"sectionbody\"> <p>The <code>git diff-*</code> family works by first comparing two sets of files:</p>  <div class=\"ulist\"> <ul> <li> <p><code>git diff-index</code> compares contents of a \"tree\" object and the working directory (when <code>--cached</code> flag is not used) or a \"tree\" object and the index file (when <code>--cached</code> flag is used);</p> </li> <li> <p><code>git diff-files</code> compares contents of the index file and the working directory;</p> </li> <li> <p><code>git diff-tree</code> compares contents of two \"tree\" objects;</p> </li> </ul> </div>  <p>In all of these cases, the commands themselves first optionally limit the two sets of files by any pathspecs given on their command-lines, and compare corresponding paths in the two resulting sets of files.</p>   <p>The pathspecs are used to limit the world diff operates in. They remove the filepairs outside the specified sets of pathnames. E.g. If the input set of filepairs included:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>:100644 100644 bcd1234... 0123456... M junkfile</pre> </div> </div>  <p>but the command invocation was <code>git diff-files myfile</code>, then the junkfile entry would be removed from the list because only \"myfile\" is under consideration.</p>   <p>The result of comparison is passed from these commands to what is internally called \"diffcore\", in a format similar to what is output when the -p option is not used. E.g.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>in-place edit  :100644 100644 bcd1234... 0123456... M file0\ncreate         :000000 100644 0000000... 1234567... A file4\ndelete         :100644 000000 1234567... 0000000... D file5\nunmerged       :000000 000000 0000000... 0000000... U file6</pre> </div> </div>  <p>The diffcore mechanism is fed a list of such comparison results (each of which is called \"filepair\", although at this point each of them talks about a single file), and transforms such a list into another list. There are currently 5 such transformations:</p>  <div class=\"ulist\"> <ul> <li> <p>diffcore-break</p> </li> <li> <p>diffcore-rename</p> </li> <li> <p>diffcore-merge-broken</p> </li> <li> <p>diffcore-pickaxe</p> </li> <li> <p>diffcore-order</p> </li> </ul> </div>  <p>These are applied in sequence. The set of filepairs <code>git diff-*</code> commands find are used as the input to diffcore-break, and the output from diffcore-break is used as the input to the next transformation. The final result is then passed to the output routine and generates either diff-raw format (see Output format sections of the manual for <code>git diff-*</code> commands) or diff-patch format.</p> </div>   <h2 id=\"_diffcore_break_for_splitting_up_complete_rewrites\">Diffcore-break: for splitting up \"complete rewrites\"</h2> <div class=\"sectionbody\"> <p>The second transformation in the chain is diffcore-break, and is controlled by the -B option to the <code>git diff-*</code> commands. This is used to detect a filepair that represents \"complete rewrite\" and break such filepair into two filepairs that represent delete and create. E.g. If the input contained this filepair:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>:100644 100644 bcd1234... 0123456... M file0</pre> </div> </div>  <p>and if it detects that the file \"file0\" is completely rewritten, it changes it to:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>:100644 000000 bcd1234... 0000000... D file0\n:000000 100644 0000000... 0123456... A file0</pre> </div> </div>  <p>For the purpose of breaking a filepair, diffcore-break examines the extent of changes between the contents of the files before and after modification (i.e. the contents that have \"bcd1234…​\" and \"0123456…​\" as their SHA-1 content ID, in the above example). The amount of deletion of original contents and insertion of new material are added together, and if it exceeds the \"break score\", the filepair is broken into two. The break score defaults to 50% of the size of the smaller of the original and the result (i.e. if the edit shrinks the file, the size of the result is used; if the edit lengthens the file, the size of the original is used), and can be customized by giving a number after \"-B\" option (e.g. \"-B75\" to tell it to use 75%).</p> </div>   <h2 id=\"_diffcore_rename_for_detection_renames_and_copies\">Diffcore-rename: for detection renames and copies</h2> <div class=\"sectionbody\"> <p>This transformation is used to detect renames and copies, and is controlled by the -M option (to detect renames) and the -C option (to detect copies as well) to the <code>git diff-*</code> commands. If the input contained these filepairs:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>:100644 000000 0123456... 0000000... D fileX\n:000000 100644 0000000... 0123456... A file0</pre> </div> </div>  <p>and the contents of the deleted file fileX is similar enough to the contents of the created file file0, then rename detection merges these filepairs and creates:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>:100644 100644 0123456... 0123456... R100 fileX file0</pre> </div> </div>  <p>When the \"-C\" option is used, the original contents of modified files, and deleted files (and also unmodified files, if the \"--find-copies-harder\" option is used) are considered as candidates of the source files in rename/copy operation. If the input were like these filepairs, that talk about a modified file fileY and a newly created file file0:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>:100644 100644 0123456... 1234567... M fileY\n:000000 100644 0000000... bcd3456... A file0</pre> </div> </div>  <p>the original contents of fileY and the resulting contents of file0 are compared, and if they are similar enough, they are changed to:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>:100644 100644 0123456... 1234567... M fileY\n:100644 100644 0123456... bcd3456... C100 fileY file0</pre> </div> </div>  <p>In both rename and copy detection, the same \"extent of changes\" algorithm used in diffcore-break is used to determine if two files are \"similar enough\", and can be customized to use a similarity score different from the default of 50% by giving a number after the \"-M\" or \"-C\" option (e.g. \"-M8\" to tell it to use 8/10 = 80%).</p>   <p>Note. When the \"-C\" option is used with <code>--find-copies-harder</code> option, <code>git diff-*</code> commands feed unmodified filepairs to diffcore mechanism as well as modified ones. This lets the copy detector consider unmodified files as copy source candidates at the expense of making it slower. Without <code>--find-copies-harder</code>, <code>git diff-*</code> commands can detect copies only if the file that was copied happened to have been modified in the same changeset.</p> </div>   <h2 id=\"_diffcore_merge_broken_for_putting_complete_rewrites_back_together\">Diffcore-merge-broken: for putting \"complete rewrites\" back together</h2> <div class=\"sectionbody\"> <p>This transformation is used to merge filepairs broken by diffcore-break, and not transformed into rename/copy by diffcore-rename, back into a single modification. This always runs when diffcore-break is used.</p>   <p>For the purpose of merging broken filepairs back, it uses a different \"extent of changes\" computation from the ones used by diffcore-break and diffcore-rename. It counts only the deletion from the original, and does not count insertion. If you removed only 10 lines from a 100-line document, even if you added 910 new lines to make a new 1000-line document, you did not do a complete rewrite. diffcore-break breaks such a case in order to help diffcore-rename to consider such filepairs as candidate of rename/copy detection, but if filepairs broken that way were not matched with other filepairs to create rename/copy, then this transformation merges them back into the original \"modification\".</p>   <p>The \"extent of changes\" parameter can be tweaked from the default 80% (that is, unless more than 80% of the original material is deleted, the broken pairs are merged back into a single modification) by giving a second number to -B option, like these:</p>  <div class=\"ulist\"> <ul> <li> <p>-B50/60 (give 50% \"break score\" to diffcore-break, use 60% for diffcore-merge-broken).</p> </li> <li> <p>-B/60 (the same as above, since diffcore-break defaults to 50%).</p> </li> </ul> </div>  <p>Note that earlier implementation left a broken pair as a separate creation and deletion patches. This was an unnecessary hack and the latest implementation always merges all the broken pairs back into modifications, but the resulting patch output is formatted differently for easier review in case of such a complete rewrite by showing the entire contents of old version prefixed with <code>-</code>, followed by the entire contents of new version prefixed with <code>+</code>.</p> </div>   <h2 id=\"_diffcore_pickaxe_for_detecting_addition_deletion_of_specified_string\">Diffcore-pickaxe: for detecting addition/deletion of specified string</h2> <div class=\"sectionbody\"> <p>This transformation limits the set of filepairs to those that change specified strings between the preimage and the postimage in a certain way. -S&lt;block of text&gt; and -G&lt;regular expression&gt; options are used to specify different ways these strings are sought.</p>   <p>\"-S&lt;block of text&gt;\" detects filepairs whose preimage and postimage have different number of occurrences of the specified block of text. By definition, it will not detect in-file moves. Also, when a changeset moves a file wholesale without affecting the interesting string, diffcore-rename kicks in as usual, and <code>-S</code> omits the filepair (since the number of occurrences of that string didn’t change in that rename-detected filepair). When used with <code>--pickaxe-regex</code>, treat the &lt;block of text&gt; as an extended POSIX regular expression to match, instead of a literal string.</p>   <p>\"-G&lt;regular expression&gt;\" (mnemonic: grep) detects filepairs whose textual diff has an added or a deleted line that matches the given regular expression. This means that it will detect in-file (or what rename-detection considers the same file) moves, which is noise. The implementation runs diff twice and greps, and this can be quite expensive.</p>   <p>When <code>-S</code> or <code>-G</code> are used without <code>--pickaxe-all</code>, only filepairs that match their respective criterion are kept in the output. When <code>--pickaxe-all</code> is used, if even one filepair matches their respective criterion in a changeset, the entire changeset is kept. This behavior is designed to make reviewing changes in the context of the whole changeset easier.</p> </div>   <h2 id=\"_diffcore_order_for_sorting_the_output_based_on_filenames\">Diffcore-order: for sorting the output based on filenames</h2> <div class=\"sectionbody\"> <p>This is used to reorder the filepairs according to the user’s (or project’s) taste, and is controlled by the -O option to the <code>git diff-*</code> commands.</p>   <p>This takes a text file each of whose lines is a shell glob pattern. Filepairs that match a glob pattern on an earlier line in the file are output before ones that match a later line, and filepairs that do not match any glob pattern are output last.</p>   <p>As an example, a typical orderfile for the core Git probably would look like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>README\nMakefile\nDocumentation\n*.h\n*.c\nt</pre> </div> </div>\n</div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-diff\">git-diff[1]</a>, <a href=\"git-diff-files\">git-diff-files[1]</a>, <a href=\"git-diff-index\">git-diff-index[1]</a>, <a href=\"git-diff-tree\">git-diff-tree[1]</a>, <a href=\"git-format-patch\">git-format-patch[1]</a>, <a href=\"git-log\">git-log[1]</a>, <a href=\"gitglossary\">gitglossary[7]</a>, <a href=\"user-manual\">The Git User’s Manual</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/gitdiffcore\" class=\"_attribution-link\">https://git-scm.com/docs/gitdiffcore</a>\n  </p>\n</div>\n","git-diff-files":"<h1>git-diff-files</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-diff-files - Compares files in the working tree and the index</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git diff-files [-q] [-0|-1|-2|-3|-c|--cc] [&lt;common diff options&gt;] [&lt;path&gt;…​]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Compares the files in the working tree and the index. When paths are specified, compares only those named paths. Otherwise all entries in the index are compared. The output format is the same as for <code>git diff-index</code> and <code>git diff-tree</code>.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\">\n<div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-p</dt> <dt class=\"hdlist1\">-u</dt> <dt class=\"hdlist1\">--patch</dt> <dd> <p>Generate patch (see section on generating patches).</p> </dd> <dt class=\"hdlist1\">-s</dt> <dt class=\"hdlist1\">--no-patch</dt> <dd> <p>Suppress diff output. Useful for commands like <code>git show</code> that show the patch by default, or to cancel the effect of <code>--patch</code>.</p> </dd> <dt class=\"hdlist1\">-U&lt;n&gt;</dt> <dt class=\"hdlist1\">--unified=&lt;n&gt;</dt> <dd> <p>Generate diffs with &lt;n&gt; lines of context instead of the usual three. Implies <code>-p</code>.</p> </dd> <dt class=\"hdlist1\">--raw</dt> <dd> <p>Generate the diff in raw format. This is the default.</p> </dd> <dt class=\"hdlist1\">--patch-with-raw</dt> <dd> <p>Synonym for <code>-p --raw</code>.</p> </dd> <dt class=\"hdlist1\">--compaction-heuristic</dt> <dt class=\"hdlist1\">--no-compaction-heuristic</dt> <dd> <p>These are to help debugging and tuning an experimental heuristic (which is off by default) that shifts the hunk boundary in an attempt to make the resulting patch easier to read.</p> </dd> <dt class=\"hdlist1\">--minimal</dt> <dd> <p>Spend extra time to make sure the smallest possible diff is produced.</p> </dd> <dt class=\"hdlist1\">--patience</dt> <dd> <p>Generate a diff using the \"patience diff\" algorithm.</p> </dd> <dt class=\"hdlist1\">--histogram</dt> <dd> <p>Generate a diff using the \"histogram diff\" algorithm.</p> </dd> <dt class=\"hdlist1\">--diff-algorithm={patience|minimal|histogram|myers}</dt> <dd> <p>Choose a diff algorithm. The variants are as follows:</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">\n<code>default</code>, <code>myers</code>\n</dt> <dd> <p>The basic greedy diff algorithm. Currently, this is the default.</p> </dd> <dt class=\"hdlist1\"><code>minimal</code></dt> <dd> <p>Spend extra time to make sure the smallest possible diff is produced.</p> </dd> <dt class=\"hdlist1\"><code>patience</code></dt> <dd> <p>Use \"patience diff\" algorithm when generating patches.</p> </dd> <dt class=\"hdlist1\"><code>histogram</code></dt> <dd> <p>This algorithm extends the patience algorithm to \"support low-occurrence common elements\".</p> </dd> </dl> </div> </div> </div>  <p>For instance, if you configured diff.algorithm variable to a non-default value and want to use the default one, then you have to use <code>--diff-algorithm=default</code> option.</p>  </dd> <dt class=\"hdlist1\">--stat[=&lt;width&gt;[,&lt;name-width&gt;[,&lt;count&gt;]]]</dt> <dd> <p>Generate a diffstat. By default, as much space as necessary will be used for the filename part, and the rest for the graph part. Maximum width defaults to terminal width, or 80 columns if not connected to a terminal, and can be overridden by <code>&lt;width&gt;</code>. The width of the filename part can be limited by giving another width <code>&lt;name-width&gt;</code> after a comma. The width of the graph part can be limited by using <code>--stat-graph-width=&lt;width&gt;</code> (affects all commands generating a stat graph) or by setting <code>diff.statGraphWidth=&lt;width&gt;</code> (does not affect <code>git format-patch</code>). By giving a third parameter <code>&lt;count&gt;</code>, you can limit the output to the first <code>&lt;count&gt;</code> lines, followed by <code>...</code> if there are more.</p>  <p>These parameters can also be set individually with <code>--stat-width=&lt;width&gt;</code>, <code>--stat-name-width=&lt;name-width&gt;</code> and <code>--stat-count=&lt;count&gt;</code>.</p>  </dd> <dt class=\"hdlist1\">--numstat</dt> <dd> <p>Similar to <code>--stat</code>, but shows number of added and deleted lines in decimal notation and pathname without abbreviation, to make it more machine friendly. For binary files, outputs two <code>-</code> instead of saying <code>0 0</code>.</p> </dd> <dt class=\"hdlist1\">--shortstat</dt> <dd> <p>Output only the last line of the <code>--stat</code> format containing total number of modified files, as well as number of added and deleted lines.</p> </dd> <dt class=\"hdlist1\">--dirstat[=&lt;param1,param2,…​&gt;]</dt> <dd> <p>Output the distribution of relative amount of changes for each sub-directory. The behavior of <code>--dirstat</code> can be customized by passing it a comma separated list of parameters. The defaults are controlled by the <code>diff.dirstat</code> configuration variable (see <a href=\"git-config\">git-config[1]</a>). The following parameters are available:</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>changes</code></dt> <dd> <p>Compute the dirstat numbers by counting the lines that have been removed from the source, or added to the destination. This ignores the amount of pure code movements within a file. In other words, rearranging lines in a file is not counted as much as other changes. This is the default behavior when no parameter is given.</p> </dd> <dt class=\"hdlist1\"><code>lines</code></dt> <dd> <p>Compute the dirstat numbers by doing the regular line-based diff analysis, and summing the removed/added line counts. (For binary files, count 64-byte chunks instead, since binary files have no natural concept of lines). This is a more expensive <code>--dirstat</code> behavior than the <code>changes</code> behavior, but it does count rearranged lines within a file as much as other changes. The resulting output is consistent with what you get from the other <code>--*stat</code> options.</p> </dd> <dt class=\"hdlist1\"><code>files</code></dt> <dd> <p>Compute the dirstat numbers by counting the number of files changed. Each changed file counts equally in the dirstat analysis. This is the computationally cheapest <code>--dirstat</code> behavior, since it does not have to look at the file contents at all.</p> </dd> <dt class=\"hdlist1\"><code>cumulative</code></dt> <dd> <p>Count changes in a child directory for the parent directory as well. Note that when using <code>cumulative</code>, the sum of the percentages reported may exceed 100%. The default (non-cumulative) behavior can be specified with the <code>noncumulative</code> parameter.</p> </dd> <dt class=\"hdlist1\">&lt;limit&gt;</dt> <dd> <p>An integer parameter specifies a cut-off percent (3% by default). Directories contributing less than this percentage of the changes are not shown in the output.</p> </dd> </dl> </div> </div> </div>  <p>Example: The following will count changed files, while ignoring directories with less than 10% of the total amount of changed files, and accumulating child directory counts in the parent directories: <code>--dirstat=files,10,cumulative</code>.</p>  </dd> <dt class=\"hdlist1\">--summary</dt> <dd> <p>Output a condensed summary of extended header information such as creations, renames and mode changes.</p> </dd> <dt class=\"hdlist1\">--patch-with-stat</dt> <dd> <p>Synonym for <code>-p --stat</code>.</p> </dd> <dt class=\"hdlist1\">-z</dt> <dd> <p>When <code>--raw</code>, <code>--numstat</code>, <code>--name-only</code> or <code>--name-status</code> has been given, do not munge pathnames and use NULs as output field terminators.</p>  <p>Without this option, each pathname output will have TAB, LF, double quotes, and backslash characters replaced with <code>\\t</code>, <code>\\n</code>, <code>\\\"</code>, and <code>\\\\</code>, respectively, and the pathname will be enclosed in double quotes if any of those replacements occurred.</p>  </dd> <dt class=\"hdlist1\">--name-only</dt> <dd> <p>Show only names of changed files.</p> </dd> <dt class=\"hdlist1\">--name-status</dt> <dd> <p>Show only names and status of changed files. See the description of the <code>--diff-filter</code> option on what the status letters mean.</p> </dd> <dt class=\"hdlist1\">--submodule[=&lt;format&gt;]</dt> <dd> <p>Specify how differences in submodules are shown. When <code>--submodule</code> or <code>--submodule=log</code> is given, the <code>log</code> format is used. This format lists the commits in the range like <a href=\"git-submodule\">git-submodule[1]</a> <code>summary</code> does. Omitting the <code>--submodule</code> option or specifying <code>--submodule=short</code>, uses the <code>short</code> format. This format just shows the names of the commits at the beginning and end of the range. Can be tweaked via the <code>diff.submodule</code> configuration variable.</p> </dd> <dt class=\"hdlist1\">--color[=&lt;when&gt;]</dt> <dd> <p>Show colored diff. <code>--color</code> (i.e. without <code>=&lt;when&gt;</code>) is the same as <code>--color=always</code>. <code>&lt;when&gt;</code> can be one of <code>always</code>, <code>never</code>, or <code>auto</code>.</p> </dd> <dt class=\"hdlist1\">--no-color</dt> <dd> <p>Turn off colored diff. It is the same as <code>--color=never</code>.</p> </dd> <dt class=\"hdlist1\">--word-diff[=&lt;mode&gt;]</dt> <dd> <p>Show a word diff, using the &lt;mode&gt; to delimit changed words. By default, words are delimited by whitespace; see <code>--word-diff-regex</code> below. The &lt;mode&gt; defaults to <code>plain</code>, and must be one of:</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">color</dt> <dd> <p>Highlight changed words using only colors. Implies <code>--color</code>.</p> </dd> <dt class=\"hdlist1\">plain</dt> <dd> <p>Show words as <code>[-removed-]</code> and <code>{+added+}</code>. Makes no attempts to escape the delimiters if they appear in the input, so the output may be ambiguous.</p> </dd> <dt class=\"hdlist1\">porcelain</dt> <dd> <p>Use a special line-based format intended for script consumption. Added/removed/unchanged runs are printed in the usual unified diff format, starting with a <code>+</code>/<code>-</code>/` ` character at the beginning of the line and extending to the end of the line. Newlines in the input are represented by a tilde <code>~</code> on a line of its own.</p> </dd> <dt class=\"hdlist1\">none</dt> <dd> <p>Disable word diff again.</p> </dd> </dl> </div> </div> </div>  <p>Note that despite the name of the first mode, color is used to highlight the changed parts in all modes if enabled.</p>  </dd> <dt class=\"hdlist1\">--word-diff-regex=&lt;regex&gt;</dt> <dd> <p>Use &lt;regex&gt; to decide what a word is, instead of considering runs of non-whitespace to be a word. Also implies <code>--word-diff</code> unless it was already enabled.</p>  <p>Every non-overlapping match of the &lt;regex&gt; is considered a word. Anything between these matches is considered whitespace and ignored(!) for the purposes of finding differences. You may want to append <code>|[^[:space:]]</code> to your regular expression to make sure that it matches all non-whitespace characters. A match that contains a newline is silently truncated(!) at the newline.</p>   <p>For example, <code>--word-diff-regex=.</code> will treat each character as a word and, correspondingly, show differences character by character.</p>   <p>The regex can also be set via a diff driver or configuration option, see <a href=\"gitattributes\">gitattributes[5]</a> or <a href=\"git-config\">git-config[1]</a>. Giving it explicitly overrides any diff driver or configuration setting. Diff drivers override configuration settings.</p>  </dd> <dt class=\"hdlist1\">--color-words[=&lt;regex&gt;]</dt> <dd> <p>Equivalent to <code>--word-diff=color</code> plus (if a regex was specified) <code>--word-diff-regex=&lt;regex&gt;</code>.</p> </dd> <dt class=\"hdlist1\">--no-renames</dt> <dd> <p>Turn off rename detection, even when the configuration file gives the default to do so.</p> </dd> <dt class=\"hdlist1\">--check</dt> <dd> <p>Warn if changes introduce conflict markers or whitespace errors. What are considered whitespace errors is controlled by <code>core.whitespace</code> configuration. By default, trailing whitespaces (including lines that solely consist of whitespaces) and a space character that is immediately followed by a tab character inside the initial indent of the line are considered whitespace errors. Exits with non-zero status if problems are found. Not compatible with --exit-code.</p> </dd> <dt class=\"hdlist1\">--ws-error-highlight=&lt;kind&gt;</dt> <dd> <p>Highlight whitespace errors on lines specified by &lt;kind&gt; in the color specified by <code>color.diff.whitespace</code>. &lt;kind&gt; is a comma separated list of <code>old</code>, <code>new</code>, <code>context</code>. When this option is not given, only whitespace errors in <code>new</code> lines are highlighted. E.g. <code>--ws-error-highlight=new,old</code> highlights whitespace errors on both deleted and added lines. <code>all</code> can be used as a short-hand for <code>old,new,context</code>.</p> </dd> <dt class=\"hdlist1\">--full-index</dt> <dd> <p>Instead of the first handful of characters, show the full pre- and post-image blob object names on the \"index\" line when generating patch format output.</p> </dd> <dt class=\"hdlist1\">--binary</dt> <dd> <p>In addition to <code>--full-index</code>, output a binary diff that can be applied with <code>git-apply</code>.</p> </dd> <dt class=\"hdlist1\">--abbrev[=&lt;n&gt;]</dt> <dd> <p>Instead of showing the full 40-byte hexadecimal object name in diff-raw format output and diff-tree header lines, show only a partial prefix. This is independent of the <code>--full-index</code> option above, which controls the diff-patch output format. Non default number of digits can be specified with <code>--abbrev=&lt;n&gt;</code>.</p> </dd> <dt class=\"hdlist1\">-B[&lt;n&gt;][/&lt;m&gt;]</dt> <dt class=\"hdlist1\">--break-rewrites[=[&lt;n&gt;][/&lt;m&gt;]]</dt> <dd> <p>Break complete rewrite changes into pairs of delete and create. This serves two purposes:</p>  <p>It affects the way a change that amounts to a total rewrite of a file not as a series of deletion and insertion mixed together with a very few lines that happen to match textually as the context, but as a single deletion of everything old followed by a single insertion of everything new, and the number <code>m</code> controls this aspect of the -B option (defaults to 60%). <code>-B/70%</code> specifies that less than 30% of the original should remain in the result for Git to consider it a total rewrite (i.e. otherwise the resulting patch will be a series of deletion and insertion mixed together with context lines).</p>   <p>When used with -M, a totally-rewritten file is also considered as the source of a rename (usually -M only considers a file that disappeared as the source of a rename), and the number <code>n</code> controls this aspect of the -B option (defaults to 50%). <code>-B20%</code> specifies that a change with addition and deletion compared to 20% or more of the file’s size are eligible for being picked up as a possible source of a rename to another file.</p>  </dd> <dt class=\"hdlist1\">-M[&lt;n&gt;]</dt> <dt class=\"hdlist1\">--find-renames[=&lt;n&gt;]</dt> <dd> <p>Detect renames. If <code>n</code> is specified, it is a threshold on the similarity index (i.e. amount of addition/deletions compared to the file’s size). For example, <code>-M90%</code> means Git should consider a delete/add pair to be a rename if more than 90% of the file hasn’t changed. Without a <code>%</code> sign, the number is to be read as a fraction, with a decimal point before it. I.e., <code>-M5</code> becomes 0.5, and is thus the same as <code>-M50%</code>. Similarly, <code>-M05</code> is the same as <code>-M5%</code>. To limit detection to exact renames, use <code>-M100%</code>. The default similarity index is 50%.</p> </dd> <dt class=\"hdlist1\">-C[&lt;n&gt;]</dt> <dt class=\"hdlist1\">--find-copies[=&lt;n&gt;]</dt> <dd> <p>Detect copies as well as renames. See also <code>--find-copies-harder</code>. If <code>n</code> is specified, it has the same meaning as for <code>-M&lt;n&gt;</code>.</p> </dd> <dt class=\"hdlist1\">--find-copies-harder</dt> <dd> <p>For performance reasons, by default, <code>-C</code> option finds copies only if the original file of the copy was modified in the same changeset. This flag makes the command inspect unmodified files as candidates for the source of copy. This is a very expensive operation for large projects, so use it with caution. Giving more than one <code>-C</code> option has the same effect.</p> </dd> <dt class=\"hdlist1\">-D</dt> <dt class=\"hdlist1\">--irreversible-delete</dt> <dd> <p>Omit the preimage for deletes, i.e. print only the header but not the diff between the preimage and <code>/dev/null</code>. The resulting patch is not meant to be applied with <code>patch</code> or <code>git apply</code>; this is solely for people who want to just concentrate on reviewing the text after the change. In addition, the output obviously lack enough information to apply such a patch in reverse, even manually, hence the name of the option.</p>  <p>When used together with <code>-B</code>, omit also the preimage in the deletion part of a delete/create pair.</p>  </dd> <dt class=\"hdlist1\">-l&lt;num&gt;</dt> <dd> <p>The <code>-M</code> and <code>-C</code> options require O(n^2) processing time where n is the number of potential rename/copy targets. This option prevents rename/copy detection from running if the number of rename/copy targets exceeds the specified number.</p> </dd> <dt class=\"hdlist1\">--diff-filter=[(A|C|D|M|R|T|U|X|B)…​[*]]</dt> <dd> <p>Select only files that are Added (<code>A</code>), Copied (<code>C</code>), Deleted (<code>D</code>), Modified (<code>M</code>), Renamed (<code>R</code>), have their type (i.e. regular file, symlink, submodule, …​) changed (<code>T</code>), are Unmerged (<code>U</code>), are Unknown (<code>X</code>), or have had their pairing Broken (<code>B</code>). Any combination of the filter characters (including none) can be used. When <code>*</code> (All-or-none) is added to the combination, all paths are selected if there is any file that matches other criteria in the comparison; if there is no file that matches other criteria, nothing is selected.</p> </dd> <dt class=\"hdlist1\">-S&lt;string&gt;</dt> <dd> <p>Look for differences that change the number of occurrences of the specified string (i.e. addition/deletion) in a file. Intended for the scripter’s use.</p>  <p>It is useful when you’re looking for an exact block of code (like a struct), and want to know the history of that block since it first came into being: use the feature iteratively to feed the interesting block in the preimage back into <code>-S</code>, and keep going until you get the very first version of the block.</p>  </dd> <dt class=\"hdlist1\">-G&lt;regex&gt;</dt> <dd> <p>Look for differences whose patch text contains added/removed lines that match &lt;regex&gt;.</p>  <p>To illustrate the difference between <code>-S&lt;regex&gt; --pickaxe-regex</code> and <code>-G&lt;regex&gt;</code>, consider a commit with the following diff in the same file:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>+    return !regexec(regexp, two-&gt;ptr, 1, &amp;regmatch, 0);\n...\n-    hit = !regexec(regexp, mf2.ptr, 1, &amp;regmatch, 0);</pre> </div> </div>  <p>While <code>git log -G\"regexec\\(regexp\"</code> will show this commit, <code>git log\n-S\"regexec\\(regexp\" --pickaxe-regex</code> will not (because the number of occurrences of that string did not change).</p>   <p>See the <code>pickaxe</code> entry in <a href=\"gitdiffcore\">gitdiffcore[7]</a> for more information.</p>  </dd> <dt class=\"hdlist1\">--pickaxe-all</dt> <dd> <p>When <code>-S</code> or <code>-G</code> finds a change, show all the changes in that changeset, not just the files that contain the change in &lt;string&gt;.</p> </dd> <dt class=\"hdlist1\">--pickaxe-regex</dt> <dd> <p>Treat the &lt;string&gt; given to <code>-S</code> as an extended POSIX regular expression to match.</p> </dd> <dt class=\"hdlist1\">-O&lt;orderfile&gt;</dt> <dd> <p>Output the patch in the order specified in the &lt;orderfile&gt;, which has one shell glob pattern per line. This overrides the <code>diff.orderFile</code> configuration variable (see <a href=\"git-config\">git-config[1]</a>). To cancel <code>diff.orderFile</code>, use <code>-O/dev/null</code>.</p> </dd> <dt class=\"hdlist1\">-R</dt> <dd> <p>Swap two inputs; that is, show differences from index or on-disk file to tree contents.</p> </dd> <dt class=\"hdlist1\">--relative[=&lt;path&gt;]</dt> <dd> <p>When run from a subdirectory of the project, it can be told to exclude changes outside the directory and show pathnames relative to it with this option. When you are not in a subdirectory (e.g. in a bare repository), you can name which subdirectory to make the output relative to by giving a &lt;path&gt; as an argument.</p> </dd> <dt class=\"hdlist1\">-a</dt> <dt class=\"hdlist1\">--text</dt> <dd> <p>Treat all files as text.</p> </dd> <dt class=\"hdlist1\">--ignore-space-at-eol</dt> <dd> <p>Ignore changes in whitespace at EOL.</p> </dd> <dt class=\"hdlist1\">-b</dt> <dt class=\"hdlist1\">--ignore-space-change</dt> <dd> <p>Ignore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent.</p> </dd> <dt class=\"hdlist1\">-w</dt> <dt class=\"hdlist1\">--ignore-all-space</dt> <dd> <p>Ignore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none.</p> </dd> <dt class=\"hdlist1\">--ignore-blank-lines</dt> <dd> <p>Ignore changes whose lines are all blank.</p> </dd> <dt class=\"hdlist1\">--inter-hunk-context=&lt;lines&gt;</dt> <dd> <p>Show the context between diff hunks, up to the specified number of lines, thereby fusing hunks that are close to each other.</p> </dd> <dt class=\"hdlist1\">-W</dt> <dt class=\"hdlist1\">--function-context</dt> <dd> <p>Show whole surrounding functions of changes.</p> </dd> <dt class=\"hdlist1\">--exit-code</dt> <dd> <p>Make the program exit with codes similar to diff(1). That is, it exits with 1 if there were differences and 0 means no differences.</p> </dd> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>Disable all output of the program. Implies <code>--exit-code</code>.</p> </dd> <dt class=\"hdlist1\">--ext-diff</dt> <dd> <p>Allow an external diff helper to be executed. If you set an external diff driver with <a href=\"gitattributes\">gitattributes[5]</a>, you need to use this option with <a href=\"git-log\">git-log[1]</a> and friends.</p> </dd> <dt class=\"hdlist1\">--no-ext-diff</dt> <dd> <p>Disallow external diff drivers.</p> </dd> <dt class=\"hdlist1\">--textconv</dt> <dt class=\"hdlist1\">--no-textconv</dt> <dd> <p>Allow (or disallow) external text conversion filters to be run when comparing binary files. See <a href=\"gitattributes\">gitattributes[5]</a> for details. Because textconv filters are typically a one-way conversion, the resulting diff is suitable for human consumption, but cannot be applied. For this reason, textconv filters are enabled by default only for <a href=\"git-diff\">git-diff[1]</a> and <a href=\"git-log\">git-log[1]</a>, but not for <a href=\"git-format-patch\">git-format-patch[1]</a> or diff plumbing commands.</p> </dd> <dt class=\"hdlist1\">--ignore-submodules[=&lt;when&gt;]</dt> <dd> <p>Ignore changes to submodules in the diff generation. &lt;when&gt; can be either \"none\", \"untracked\", \"dirty\" or \"all\", which is the default. Using \"none\" will consider the submodule modified when it either contains untracked or modified files or its HEAD differs from the commit recorded in the superproject and can be used to override any settings of the <code>ignore</code> option in <a href=\"git-config\">git-config[1]</a> or <a href=\"gitmodules\">gitmodules[5]</a>. When \"untracked\" is used submodules are not considered dirty when they only contain untracked content (but they are still scanned for modified content). Using \"dirty\" ignores all changes to the work tree of submodules, only changes to the commits stored in the superproject are shown (this was the behavior until 1.7.0). Using \"all\" hides all changes to submodules.</p> </dd> <dt class=\"hdlist1\">--src-prefix=&lt;prefix&gt;</dt> <dd> <p>Show the given source prefix instead of \"a/\".</p> </dd> <dt class=\"hdlist1\">--dst-prefix=&lt;prefix&gt;</dt> <dd> <p>Show the given destination prefix instead of \"b/\".</p> </dd> <dt class=\"hdlist1\">--no-prefix</dt> <dd> <p>Do not show any source or destination prefix.</p> </dd> </dl> </div>  <p>For more detailed explanation on these common options, see also <a href=\"gitdiffcore\">gitdiffcore[7]</a>.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-1 --base</dt> <dt class=\"hdlist1\">-2 --ours</dt> <dt class=\"hdlist1\">-3 --theirs</dt> <dt class=\"hdlist1\">-0</dt> <dd> <p>Diff against the \"base\" version, \"our branch\" or \"their branch\" respectively. With these options, diffs for merged entries are not shown.</p>  <p>The default is to diff against our branch (-2) and the cleanly resolved paths. The option -0 can be given to omit diff output for unmerged entries and just show \"Unmerged\".</p>  </dd> <dt class=\"hdlist1\">-c</dt> <dt class=\"hdlist1\">--cc</dt> <dd> <p>This compares stage 2 (our branch), stage 3 (their branch) and the working tree file and outputs a combined diff, similar to the way <code>diff-tree</code> shows a merge commit with these flags.</p> </dd> <dt class=\"hdlist1\">-q</dt> <dd> <p>Remain silent even on nonexistent files</p> </dd> </dl> </div>\n</div>   <h2 id=\"_raw_output_format\">Raw output format</h2> <div class=\"sectionbody\"> <p>The raw output format from \"git-diff-index\", \"git-diff-tree\", \"git-diff-files\" and \"git diff --raw\" are very similar.</p>   <p>These commands all compare two sets of things; what is compared differs:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">git-diff-index &lt;tree-ish&gt;</dt> <dd> <p>compares the &lt;tree-ish&gt; and the files on the filesystem.</p> </dd> <dt class=\"hdlist1\">git-diff-index --cached &lt;tree-ish&gt;</dt> <dd> <p>compares the &lt;tree-ish&gt; and the index.</p> </dd> <dt class=\"hdlist1\">git-diff-tree [-r] &lt;tree-ish-1&gt; &lt;tree-ish-2&gt; [&lt;pattern&gt;…​]</dt> <dd> <p>compares the trees named by the two arguments.</p> </dd> <dt class=\"hdlist1\">git-diff-files [&lt;pattern&gt;…​]</dt> <dd> <p>compares the index and the files on the filesystem.</p> </dd> </dl> </div>  <p>The \"git-diff-tree\" command begins its output by printing the hash of what is being compared. After that, all the commands print one output line per changed file.</p>   <p>An output line is formatted this way:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>in-place edit  :100644 100644 bcd1234... 0123456... M file0\ncopy-edit      :100644 100644 abcd123... 1234567... C68 file1 file2\nrename-edit    :100644 100644 abcd123... 1234567... R86 file1 file3\ncreate         :000000 100644 0000000... 1234567... A file4\ndelete         :100644 000000 1234567... 0000000... D file5\nunmerged       :000000 000000 0000000... 0000000... U file6</pre> </div> </div>  <p>That is, from the left to the right:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>a colon.</p> </li> <li> <p>mode for \"src\"; 000000 if creation or unmerged.</p> </li> <li> <p>a space.</p> </li> <li> <p>mode for \"dst\"; 000000 if deletion or unmerged.</p> </li> <li> <p>a space.</p> </li> <li> <p>sha1 for \"src\"; 0{40} if creation or unmerged.</p> </li> <li> <p>a space.</p> </li> <li> <p>sha1 for \"dst\"; 0{40} if creation, unmerged or \"look at work tree\".</p> </li> <li> <p>a space.</p> </li> <li> <p>status, followed by optional \"score\" number.</p> </li> <li> <p>a tab or a NUL when <code>-z</code> option is used.</p> </li> <li> <p>path for \"src\"</p> </li> <li> <p>a tab or a NUL when <code>-z</code> option is used; only exists for C or R.</p> </li> <li> <p>path for \"dst\"; only exists for C or R.</p> </li> <li> <p>an LF or a NUL when <code>-z</code> option is used, to terminate the record.</p> </li> </ol> </div>  <p>Possible status letters are:</p>  <div class=\"ulist\"> <ul> <li> <p>A: addition of a file</p> </li> <li> <p>C: copy of a file into a new one</p> </li> <li> <p>D: deletion of a file</p> </li> <li> <p>M: modification of the contents or mode of a file</p> </li> <li> <p>R: renaming of a file</p> </li> <li> <p>T: change in the type of the file</p> </li> <li> <p>U: file is unmerged (you must complete the merge before it can be committed)</p> </li> <li> <p>X: \"unknown\" change type (most probably a bug, please report it)</p> </li> </ul> </div>  <p>Status letters C and R are always followed by a score (denoting the percentage of similarity between the source and target of the move or copy). Status letter M may be followed by a score (denoting the percentage of dissimilarity) for file rewrites.</p>   <p>&lt;sha1&gt; is shown as all 0’s if a file is new on the filesystem and it is out of sync with the index.</p>   <p>Example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>:100644 100644 5be4a4...... 000000...... M file.c</pre> </div> </div>  <p>When <code>-z</code> option is not used, TAB, LF, and backslash characters in pathnames are represented as <code>\\t</code>, <code>\\n</code>, and <code>\\\\</code>, respectively.</p> </div>   <h2 id=\"_diff_format_for_merges\">Diff format for merges</h2> <div class=\"sectionbody\"> <p>\"git-diff-tree\", \"git-diff-files\" and \"git-diff --raw\" can take <code>-c</code> or <code>--cc</code> option to generate diff output also for merge commits. The output differs from the format described above in the following way:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>there is a colon for each parent</p> </li> <li> <p>there are more \"src\" modes and \"src\" sha1</p> </li> <li> <p>status is concatenated status characters for each parent</p> </li> <li> <p>no optional \"score\" number</p> </li> <li> <p>single path, only for \"dst\"</p> </li> </ol> </div>  <p>Example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>::100644 100644 100644 fabadb8... cc95eb0... 4866510... MM        describe.c</pre> </div> </div>  <p>Note that <code>combined diff</code> lists only files which were modified from all parents.</p> </div>   <h2 id=\"_generating_patches_with_p\">Generating patches with -p</h2> <div class=\"sectionbody\"> <p>When \"git-diff-index\", \"git-diff-tree\", or \"git-diff-files\" are run with a <code>-p</code> option, \"git diff\" without the <code>--raw</code> option, or \"git log\" with the \"-p\" option, they do not produce the output described above; instead they produce a patch file. You can customize the creation of such patches via the <code>GIT_EXTERNAL_DIFF</code> and the <code>GIT_DIFF_OPTS</code> environment variables.</p>   <p>What the -p option produces is slightly different from the traditional diff format:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>It is preceded with a \"git diff\" header that looks like this:</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>diff --git a/file1 b/file2</pre> </div> </div>  <p>The <code>a/</code> and <code>b/</code> filenames are the same unless rename/copy is involved. Especially, even for a creation or a deletion, <code>/dev/null</code> is <code>not</code> used in place of the <code>a/</code> or <code>b/</code> filenames.</p>   <p>When rename/copy is involved, <code>file1</code> and <code>file2</code> show the name of the source file of the rename/copy and the name of the file that rename/copy produces, respectively.</p>  </li> <li> <p>It is followed by one or more extended header lines:</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>old mode &lt;mode&gt;\nnew mode &lt;mode&gt;\ndeleted file mode &lt;mode&gt;\nnew file mode &lt;mode&gt;\ncopy from &lt;path&gt;\ncopy to &lt;path&gt;\nrename from &lt;path&gt;\nrename to &lt;path&gt;\nsimilarity index &lt;number&gt;\ndissimilarity index &lt;number&gt;\nindex &lt;hash&gt;..&lt;hash&gt; &lt;mode&gt;</pre> </div> </div>  <p>File modes are printed as 6-digit octal numbers including the file type and file permission bits.</p>   <p>Path names in extended headers do not include the <code>a/</code> and <code>b/</code> prefixes.</p>   <p>The similarity index is the percentage of unchanged lines, and the dissimilarity index is the percentage of changed lines. It is a rounded down integer, followed by a percent sign. The similarity index value of 100% is thus reserved for two equal files, while 100% dissimilarity means that no line from the old file made it into the new one.</p>   <p>The index line includes the SHA-1 checksum before and after the change. The &lt;mode&gt; is included if the file mode does not change; otherwise, separate lines indicate the old and the new mode.</p>  </li> <li> <p>TAB, LF, double quote and backslash characters in pathnames are represented as <code>\\t</code>, <code>\\n</code>, <code>\\\"</code> and <code>\\\\</code>, respectively. If there is need for such substitution then the whole pathname is put in double quotes.</p> </li> <li> <p>All the <code>file1</code> files in the output refer to files before the commit, and all the <code>file2</code> files refer to files after the commit. It is incorrect to apply each change to each file sequentially. For example, this patch will swap a and b:</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>diff --git a/a b/b\nrename from a\nrename to b\ndiff --git a/b b/a\nrename from b\nrename to a</pre> </div> </div> </li> </ol> </div>\n</div>   <h2 id=\"_combined_diff_format\">Combined diff format</h2> <div class=\"sectionbody\"> <p>Any diff-generating command can take the <code>-c</code> or <code>--cc</code> option to produce a <code>combined diff</code> when showing a merge. This is the default format when showing merges with <a href=\"git-diff\">git-diff[1]</a> or <a href=\"git-show\">git-show[1]</a>. Note also that you can give the <code>-m</code> option to any of these commands to force generation of diffs with individual parents of a merge.</p>   <p>A <code>combined diff</code> format looks like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>diff --combined describe.c\nindex fabadb8,cc95eb0..4866510\n--- a/describe.c\n+++ b/describe.c\n@@@ -98,20 -98,12 +98,20 @@@\n        return (a_date &gt; b_date) ? -1 : (a_date == b_date) ? 0 : 1;\n  }\n\n- static void describe(char *arg)\n -static void describe(struct commit *cmit, int last_one)\n++static void describe(char *arg, int last_one)\n  {\n +        unsigned char sha1[20];\n +        struct commit *cmit;\n        struct commit_list *list;\n        static int initialized = 0;\n        struct commit_name *n;\n\n +        if (get_sha1(arg, sha1) &lt; 0)\n +                usage(describe_usage);\n +        cmit = lookup_commit_reference(sha1);\n +        if (!cmit)\n +                usage(describe_usage);\n +\n        if (!initialized) {\n                initialized = 1;\n                for_each_ref(get_name);</pre> </div> </div> <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>It is preceded with a \"git diff\" header, that looks like this (when <code>-c</code> option is used):</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>diff --combined file</pre> </div> </div>  <p>or like this (when <code>--cc</code> option is used):</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>diff --cc file</pre> </div> </div> </li> <li> <p>It is followed by one or more extended header lines (this example shows a merge with two parents):</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>index &lt;hash&gt;,&lt;hash&gt;..&lt;hash&gt;\nmode &lt;mode&gt;,&lt;mode&gt;..&lt;mode&gt;\nnew file mode &lt;mode&gt;\ndeleted file mode &lt;mode&gt;,&lt;mode&gt;</pre> </div> </div>  <p>The <code>mode &lt;mode&gt;,&lt;mode&gt;..&lt;mode&gt;</code> line appears only if at least one of the &lt;mode&gt; is different from the rest. Extended headers with information about detected contents movement (renames and copying detection) are designed to work with diff of two &lt;tree-ish&gt; and are not used by combined diff format.</p>  </li> <li> <p>It is followed by two-line from-file/to-file header</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>--- a/file\n+++ b/file</pre> </div> </div>  <p>Similar to two-line header for traditional <code>unified</code> diff format, <code>/dev/null</code> is used to signal created or deleted files.</p>  </li> <li> <p>Chunk header format is modified to prevent people from accidentally feeding it to <code>patch -p1</code>. Combined diff format was created for review of merge commit changes, and was not meant for apply. The change is similar to the change in the extended <code>index</code> header:</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>@@@ &lt;from-file-range&gt; &lt;from-file-range&gt; &lt;to-file-range&gt; @@@</pre> </div> </div>  <p>There are (number of parents + 1) <code>@</code> characters in the chunk header for combined diff format.</p>  </li> </ol> </div>  <p>Unlike the traditional <code>unified</code> diff format, which shows two files A and B with a single column that has <code>-</code> (minus — appears in A but removed in B), <code>+</code> (plus — missing in A but added to B), or <code>\" \"</code> (space — unchanged) prefix, this format compares two or more files file1, file2,…​ with one file X, and shows how X differs from each of fileN. One column for each of fileN is prepended to the output line to note how X’s line is different from it.</p>   <p>A <code>-</code> character in the column N means that the line appears in fileN but it does not appear in the result. A <code>+</code> character in the column N means that the line appears in the result, and fileN does not have that line (in other words, the line was added, from the point of view of that parent).</p>   <p>In the above example output, the function signature was changed from both files (hence two <code>-</code> removals from both file1 and file2, plus <code>++</code> to mean one line that was added does not appear in either file1 or file2). Also eight other lines are the same from file1 but do not appear in file2 (hence prefixed with <code>+</code>).</p>   <p>When shown by <code>git diff-tree -c</code>, it compares the parents of a merge commit with the merge result (i.e. file1..fileN are the parents). When shown by <code>git diff-files -c</code>, it compares the two unresolved merge parents with the working tree file (i.e. file1 is stage 2 aka \"our version\", file2 is stage 3 aka \"their version\").</p> </div>   <h2 id=\"_other_diff_formats\">Other diff formats</h2> <div class=\"sectionbody\"> <p>The <code>--summary</code> option describes newly added, deleted, renamed and copied files. The <code>--stat</code> option adds diffstat(1) graph to the output. These options can be combined with other options, such as <code>-p</code>, and are meant for human consumption.</p>   <p>When showing a change that involves a rename or a copy, <code>--stat</code> output formats the pathnames compactly by combining common prefix and suffix of the pathnames. For example, a change that moves <code>arch/i386/Makefile</code> to <code>arch/x86/Makefile</code> while modifying 4 lines will be shown like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>arch/{i386 =&gt; x86}/Makefile    |   4 +--</pre> </div> </div>  <p>The <code>--numstat</code> option gives the diffstat(1) information but is designed for easier machine consumption. An entry in <code>--numstat</code> output looks like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>1        2        README\n3        1        arch/{i386 =&gt; x86}/Makefile</pre> </div> </div>  <p>That is, from left to right:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>the number of added lines;</p> </li> <li> <p>a tab;</p> </li> <li> <p>the number of deleted lines;</p> </li> <li> <p>a tab;</p> </li> <li> <p>pathname (possibly with rename/copy information);</p> </li> <li> <p>a newline.</p> </li> </ol> </div>  <p>When <code>-z</code> output option is in effect, the output is formatted this way:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>1        2        README NUL\n3        1        NUL arch/i386/Makefile NUL arch/x86/Makefile NUL</pre> </div> </div>  <p>That is:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>the number of added lines;</p> </li> <li> <p>a tab;</p> </li> <li> <p>the number of deleted lines;</p> </li> <li> <p>a tab;</p> </li> <li> <p>a NUL (only exists if renamed/copied);</p> </li> <li> <p>pathname in preimage;</p> </li> <li> <p>a NUL (only exists if renamed/copied);</p> </li> <li> <p>pathname in postimage (only exists if renamed/copied);</p> </li> <li> <p>a NUL.</p> </li> </ol> </div>  <p>The extra <code>NUL</code> before the preimage path in renamed case is to allow scripts that read the output to tell if the current record being read is a single-path record or a rename/copy record without reading ahead. After reading added and deleted lines, reading up to <code>NUL</code> would yield the pathname, but if that is <code>NUL</code>, the record will show two paths.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-diff-files\" class=\"_attribution-link\">https://git-scm.com/docs/git-diff-files</a>\n  </p>\n</div>\n","git-send-pack":"<h1>git-send-pack</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-send-pack - Push objects over Git protocol to another repository</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git send-pack [--all] [--dry-run] [--force] [--receive-pack=&lt;git-receive-pack&gt;]\n                [--verbose] [--thin] [--atomic]\n                [--[no-]signed|--sign=(true|false|if-asked)]\n                [&lt;host&gt;:]&lt;directory&gt; [&lt;ref&gt;…​]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Usually you would want to use <code>git push</code>, which is a higher-level wrapper of this command, instead. See <a href=\"git-push\">git-push[1]</a>.</p>   <p>Invokes <code>git-receive-pack</code> on a possibly remote repository, and updates it from the current repository, sending named refs.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--receive-pack=&lt;git-receive-pack&gt;</dt> <dd> <p>Path to the <code>git-receive-pack</code> program on the remote end. Sometimes useful when pushing to a remote repository over ssh, and you do not have the program in a directory on the default $PATH.</p> </dd> <dt class=\"hdlist1\">--exec=&lt;git-receive-pack&gt;</dt> <dd> <p>Same as --receive-pack=&lt;git-receive-pack&gt;.</p> </dd> <dt class=\"hdlist1\">--all</dt> <dd> <p>Instead of explicitly specifying which refs to update, update all heads that locally exist.</p> </dd> <dt class=\"hdlist1\">--stdin</dt> <dd> <p>Take the list of refs from stdin, one per line. If there are refs specified on the command line in addition to this option, then the refs from stdin are processed after those on the command line.</p>  <p>If <code>--stateless-rpc</code> is specified together with this option then the list of refs must be in packet format (pkt-line). Each ref must be in a separate packet, and the list must end with a flush packet.</p>  </dd> <dt class=\"hdlist1\">--dry-run</dt> <dd> <p>Do everything except actually send the updates.</p> </dd> <dt class=\"hdlist1\">--force</dt> <dd> <p>Usually, the command refuses to update a remote ref that is not an ancestor of the local ref used to overwrite it. This flag disables the check. What this means is that the remote repository can lose commits; use it with care.</p> </dd> <dt class=\"hdlist1\">--verbose</dt> <dd> <p>Run verbosely.</p> </dd> <dt class=\"hdlist1\">--thin</dt> <dd> <p>Send a \"thin\" pack, which records objects in deltified form based on objects not included in the pack to reduce network traffic.</p> </dd> <dt class=\"hdlist1\">--atomic</dt> <dd> <p>Use an atomic transaction for updating the refs. If any of the refs fails to update then the entire push will fail without changing any refs.</p> </dd> <dt class=\"hdlist1\">--[no-]signed</dt> <dt class=\"hdlist1\">--sign=(true|false|if-asked)</dt> <dd> <p>GPG-sign the push request to update refs on the receiving side, to allow it to be checked by the hooks and/or be logged. If <code>false</code> or <code>--no-signed</code>, no signing will be attempted. If <code>true</code> or <code>--signed</code>, the push will fail if the server does not support signed pushes. If set to <code>if-asked</code>, sign if and only if the server supports signed pushes. The push will also fail if the actual call to <code>gpg --sign</code> fails. See <a href=\"git-receive-pack\">git-receive-pack[1]</a> for the details on the receiving end.</p> </dd> <dt class=\"hdlist1\">&lt;host&gt;</dt> <dd> <p>A remote host to house the repository. When this part is specified, <code>git-receive-pack</code> is invoked via ssh.</p> </dd> <dt class=\"hdlist1\">&lt;directory&gt;</dt> <dd> <p>The repository to update.</p> </dd> <dt class=\"hdlist1\">&lt;ref&gt;…​</dt> <dd> <p>The remote refs to update.</p> </dd> </dl> </div></div>   <h2 id=\"_specifying_the_refs\">Specifying the refs</h2> <div class=\"sectionbody\"> <p>There are three ways to specify which refs to update on the remote end.</p>   <p>With <code>--all</code> flag, all refs that exist locally are transferred to the remote side. You cannot specify any <code>&lt;ref&gt;</code> if you use this flag.</p>   <p>Without <code>--all</code> and without any <code>&lt;ref&gt;</code>, the heads that exist both on the local side and on the remote side are updated.</p>   <p>When one or more <code>&lt;ref&gt;</code> are specified explicitly (whether on the command line or via <code>--stdin</code>), it can be either a single pattern, or a pair of such pattern separated by a colon \":\" (this means that a ref name cannot have a colon in it). A single pattern <code>&lt;name&gt;</code> is just a shorthand for <code>&lt;name&gt;:&lt;name&gt;</code>.</p>   <p>Each pattern pair consists of the source side (before the colon) and the destination side (after the colon). The ref to be pushed is determined by finding a match that matches the source side, and where it is pushed is determined by using the destination side. The rules used to match a ref are the same rules used by <code>git rev-parse</code> to resolve a symbolic ref name. See <a href=\"git-rev-parse\">git-rev-parse[1]</a>.</p>  <div class=\"ulist\"> <ul> <li> <p>It is an error if &lt;src&gt; does not match exactly one of the local refs.</p> </li> <li> <p>It is an error if &lt;dst&gt; matches more than one remote refs.</p> </li> <li> <p>If &lt;dst&gt; does not match any remote ref, either</p> <div class=\"ulist\"> <ul> <li> <p>it has to start with \"refs/\"; &lt;dst&gt; is used as the destination literally in this case.</p> </li> <li> <p>&lt;src&gt; == &lt;dst&gt; and the ref that matched the &lt;src&gt; must not exist in the set of remote refs; the ref matched &lt;src&gt; locally is used as the name of the destination.</p> </li> </ul> </div> </li> </ul> </div>  <p>Without <code>--force</code>, the &lt;src&gt; ref is stored at the remote only if &lt;dst&gt; does not exist, or &lt;dst&gt; is a proper subset (i.e. an ancestor) of &lt;src&gt;. This check, known as \"fast-forward check\", is performed in order to avoid accidentally overwriting the remote ref and lose other peoples' commits from there.</p>   <p>With <code>--force</code>, the fast-forward check is disabled for all refs.</p>   <p>Optionally, a &lt;ref&gt; parameter can be prefixed with a plus <code>+</code> sign to disable the fast-forward check only on that ref.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-send-pack\" class=\"_attribution-link\">https://git-scm.com/docs/git-send-pack</a>\n  </p>\n</div>\n","git-checkout-index":"<h1>git-checkout-index</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-checkout-index - Copy files from the index to the working tree</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git checkout-index [-u] [-q] [-a] [-f] [-n] [--prefix=&lt;string&gt;]\n                   [--stage=&lt;number&gt;|all]\n                   [--temp]\n                   [-z] [--stdin]\n                   [--] [&lt;file&gt;…​]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Will copy all files listed from the index to the working directory (not overwriting existing files).</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\">\n<div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-u</dt> <dt class=\"hdlist1\">--index</dt> <dd> <p>update stat information for the checked out entries in the index file.</p> </dd> <dt class=\"hdlist1\">-q</dt> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>be quiet if files exist or are not in the index</p> </dd> <dt class=\"hdlist1\">-f</dt> <dt class=\"hdlist1\">--force</dt> <dd> <p>forces overwrite of existing files</p> </dd> <dt class=\"hdlist1\">-a</dt> <dt class=\"hdlist1\">--all</dt> <dd> <p>checks out all files in the index. Cannot be used together with explicit filenames.</p> </dd> <dt class=\"hdlist1\">-n</dt> <dt class=\"hdlist1\">--no-create</dt> <dd> <p>Don’t checkout new files, only refresh files already checked out.</p> </dd> <dt class=\"hdlist1\">--prefix=&lt;string&gt;</dt> <dd> <p>When creating files, prepend &lt;string&gt; (usually a directory including a trailing /)</p> </dd> <dt class=\"hdlist1\">--stage=&lt;number&gt;|all</dt> <dd> <p>Instead of checking out unmerged entries, copy out the files from named stage. &lt;number&gt; must be between 1 and 3. Note: --stage=all automatically implies --temp.</p> </dd> <dt class=\"hdlist1\">--temp</dt> <dd> <p>Instead of copying the files to the working directory write the content to temporary files. The temporary name associations will be written to stdout.</p> </dd> <dt class=\"hdlist1\">--stdin</dt> <dd> <p>Instead of taking list of paths from the command line, read list of paths from the standard input. Paths are separated by LF (i.e. one path per line) by default.</p> </dd> <dt class=\"hdlist1\">-z</dt> <dd> <p>Only meaningful with <code>--stdin</code>; paths are separated with NUL character instead of LF.</p> </dd> <dt class=\"hdlist1\">--</dt> <dd> <p>Do not interpret any more arguments as options.</p> </dd> </dl> </div>  <p>The order of the flags used to matter, but not anymore.</p>   <p>Just doing <code>git checkout-index</code> does nothing. You probably meant <code>git checkout-index -a</code>. And if you want to force it, you want <code>git checkout-index -f -a</code>.</p>   <p>Intuitiveness is not the goal here. Repeatability is. The reason for the \"no arguments means no work\" behavior is that from scripts you are supposed to be able to do:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ find . -name '*.h' -print0 | xargs -0 git checkout-index -f --</pre> </div> </div>  <p>which will force all existing <code>*.h</code> files to be replaced with their cached copies. If an empty command line implied \"all\", then this would force-refresh everything in the index, which was not the point. But since <code>git checkout-index</code> accepts --stdin it would be faster to use:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ find . -name '*.h' -print0 | git checkout-index -f -z --stdin</pre> </div> </div>  <p>The <code>--</code> is just a good idea when you know the rest will be filenames; it will prevent problems with a filename of, for example, <code>-a</code>. Using <code>--</code> is probably a good policy in scripts.</p> </div>   <h2 id=\"_using_temp_or_stage_all\">Using --temp or --stage=all</h2> <div class=\"sectionbody\"> <p>When <code>--temp</code> is used (or implied by <code>--stage=all</code>) <code>git checkout-index</code> will create a temporary file for each index entry being checked out. The index will not be updated with stat information. These options can be useful if the caller needs all stages of all unmerged entries so that the unmerged files can be processed by an external merge tool.</p>   <p>A listing will be written to stdout providing the association of temporary file names to tracked path names. The listing format has two variations:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>tempname TAB path RS</p>  <p>The first format is what gets used when <code>--stage</code> is omitted or is not <code>--stage=all</code>. The field tempname is the temporary file name holding the file content and path is the tracked path name in the index. Only the requested entries are output.</p>  </li> <li> <p>stage1temp SP stage2temp SP stage3tmp TAB path RS</p>  <p>The second format is what gets used when <code>--stage=all</code>. The three stage temporary fields (stage1temp, stage2temp, stage3temp) list the name of the temporary file if there is a stage entry in the index or <code>.</code> if there is no stage entry. Paths which only have a stage 0 entry will always be omitted from the output.</p>  </li> </ol> </div>  <p>In both formats RS (the record separator) is newline by default but will be the null byte if -z was passed on the command line. The temporary file names are always safe strings; they will never contain directory separators or whitespace characters. The path field is always relative to the current directory and the temporary file names are always relative to the top level directory.</p>   <p>If the object being copied out to a temporary file is a symbolic link the content of the link will be written to a normal file. It is up to the end-user or the Porcelain to make use of this information.</p> </div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">To update and refresh only the files already checked out</dt> <dd> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout-index -n -f -a &amp;&amp; git update-index --ignore-missing --refresh</pre> </div> </div> </dd> <dt class=\"hdlist1\">Using <em>git checkout-index</em> to \"export an entire tree\"</dt> <dd> <p>The prefix ability basically makes it trivial to use <code>git checkout-index</code> as an \"export as tree\" function. Just read the desired tree into the index, and do:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout-index --prefix=git-export-dir/ -a</pre> </div> </div>  <p><code>git checkout-index</code> will \"export\" the index into the specified directory.</p>   <p>The final \"/\" is important. The exported name is literally just prefixed with the specified string. Contrast this with the following example.</p>  </dd> <dt class=\"hdlist1\">Export files with a prefix</dt> <dd> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git checkout-index --prefix=.merged- Makefile</pre> </div> </div>  <p>This will check out the currently cached copy of <code>Makefile</code> into the file <code>.merged-Makefile</code>.</p>  </dd> </dl> </div></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-checkout-index\" class=\"_attribution-link\">https://git-scm.com/docs/git-checkout-index</a>\n  </p>\n</div>\n","git-ls-remote":"<h1>git-ls-remote</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-ls-remote - List references in a remote repository</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git ls-remote [--heads] [--tags] [--refs] [--upload-pack=&lt;exec&gt;]\n              [-q | --quiet] [--exit-code] [--get-url]\n              [--symref] [&lt;repository&gt; [&lt;refs&gt;…​]]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Displays references available in a remote repository along with the associated commit IDs.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-h</dt> <dt class=\"hdlist1\">--heads</dt> <dt class=\"hdlist1\">-t</dt> <dt class=\"hdlist1\">--tags</dt> <dd> <p>Limit to only refs/heads and refs/tags, respectively. These options are <code>not</code> mutually exclusive; when given both, references stored in refs/heads and refs/tags are displayed.</p> </dd> <dt class=\"hdlist1\">--refs</dt> <dd> <p>Do not show peeled tags or pseudorefs like HEAD in the output.</p> </dd> <dt class=\"hdlist1\">-q</dt> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>Do not print remote URL to stderr.</p> </dd> <dt class=\"hdlist1\">--upload-pack=&lt;exec&gt;</dt> <dd> <p>Specify the full path of <code>git-upload-pack</code> on the remote host. This allows listing references from repositories accessed via SSH and where the SSH daemon does not use the PATH configured by the user.</p> </dd> <dt class=\"hdlist1\">--exit-code</dt> <dd> <p>Exit with status \"2\" when no matching refs are found in the remote repository. Usually the command exits with status \"0\" to indicate it successfully talked with the remote repository, whether it found any matching refs.</p> </dd> <dt class=\"hdlist1\">--get-url</dt> <dd> <p>Expand the URL of the given remote repository taking into account any \"url.&lt;base&gt;.insteadOf\" config setting (See <a href=\"git-config\">git-config[1]</a>) and exit without talking to the remote.</p> </dd> <dt class=\"hdlist1\">--symref</dt> <dd> <p>In addition to the object pointed by it, show the underlying ref pointed by it when showing a symbolic ref. Currently, upload-pack only shows the symref HEAD, so it will be the only one shown by ls-remote.</p> </dd> <dt class=\"hdlist1\">&lt;repository&gt;</dt> <dd> <p>The \"remote\" repository to query. This parameter can be either a URL or the name of a remote (see the GIT URLS and REMOTES sections of <a href=\"git-fetch\">git-fetch[1]</a>).</p> </dd> <dt class=\"hdlist1\">&lt;refs&gt;…​</dt> <dd> <p>When unspecified, all references, after filtering done with --heads and --tags, are shown. When &lt;refs&gt;…​ are specified, only references matching the given patterns are displayed.</p> </dd> </dl> </div></div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"><div class=\"literalblock\"> <div class=\"content\"> <pre>$ git ls-remote --tags ./.\nd6602ec5194c87b0fc87103ca4d67251c76f233a    refs/tags/v0.99\nf25a265a342aed6041ab0cc484224d9ca54b6f41    refs/tags/v0.99.1\n7ceca275d047c90c0c7d5afb13ab97efdf51bd6e    refs/tags/v0.99.3\nc5db5456ae3b0873fc659c19fafdde22313cc441    refs/tags/v0.99.2\n0918385dbd9656cab0d1d81ba7453d49bbc16250    refs/tags/junio-gpg-pub\n$ git ls-remote http://www.kernel.org/pub/scm/git/git.git master pu rc\n5fe978a5381f1fbad26a80e682ddd2a401966740    refs/heads/master\nc781a84b5204fb294c9ccc79f8b3baceeb32c061    refs/heads/pu\n$ git remote add korg http://www.kernel.org/pub/scm/git/git.git\n$ git ls-remote --tags korg v\\*\nd6602ec5194c87b0fc87103ca4d67251c76f233a    refs/tags/v0.99\nf25a265a342aed6041ab0cc484224d9ca54b6f41    refs/tags/v0.99.1\nc5db5456ae3b0873fc659c19fafdde22313cc441    refs/tags/v0.99.2\n7ceca275d047c90c0c7d5afb13ab97efdf51bd6e    refs/tags/v0.99.3</pre> </div> </div></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-ls-remote\" class=\"_attribution-link\">https://git-scm.com/docs/git-ls-remote</a>\n  </p>\n</div>\n","git-fast-export":"<h1>git-fast-export</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-fast-export - Git data exporter</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git fast-export [options] | git fast-import</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>This program dumps the given revisions in a form suitable to be piped into <code>git fast-import</code>.</p>   <p>You can use it as a human-readable bundle replacement (see <a href=\"git-bundle\">git-bundle[1]</a>), or as a kind of an interactive <code>git filter-branch</code>.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--progress=&lt;n&gt;</dt> <dd> <p>Insert <code>progress</code> statements every &lt;n&gt; objects, to be shown by <code>git fast-import</code> during import.</p> </dd> <dt class=\"hdlist1\">--signed-tags=(verbatim|warn|warn-strip|strip|abort)</dt> <dd> <p>Specify how to handle signed tags. Since any transformation after the export can change the tag names (which can also happen when excluding revisions) the signatures will not match.</p>  <p>When asking to <code>abort</code> (which is the default), this program will die when encountering a signed tag. With <code>strip</code>, the tags will silently be made unsigned, with <code>warn-strip</code> they will be made unsigned but a warning will be displayed, with <code>verbatim</code>, they will be silently exported and with <code>warn</code>, they will be exported, but you will see a warning.</p>  </dd> <dt class=\"hdlist1\">--tag-of-filtered-object=(abort|drop|rewrite)</dt> <dd> <p>Specify how to handle tags whose tagged object is filtered out. Since revisions and files to export can be limited by path, tagged objects may be filtered completely.</p>  <p>When asking to <code>abort</code> (which is the default), this program will die when encountering such a tag. With <code>drop</code> it will omit such tags from the output. With <code>rewrite</code>, if the tagged object is a commit, it will rewrite the tag to tag an ancestor commit (via parent rewriting; see <a href=\"git-rev-list\">git-rev-list[1]</a>)</p>  </dd> <dt class=\"hdlist1\">-M</dt> <dt class=\"hdlist1\">-C</dt> <dd> <p>Perform move and/or copy detection, as described in the <a href=\"git-diff\">git-diff[1]</a> manual page, and use it to generate rename and copy commands in the output dump.</p>  <p>Note that earlier versions of this command did not complain and produced incorrect results if you gave these options.</p>  </dd> <dt class=\"hdlist1\">--export-marks=&lt;file&gt;</dt> <dd> <p>Dumps the internal marks table to &lt;file&gt; when complete. Marks are written one per line as <code>:markid SHA-1</code>. Only marks for revisions are dumped; marks for blobs are ignored. Backends can use this file to validate imports after they have been completed, or to save the marks table across incremental runs. As &lt;file&gt; is only opened and truncated at completion, the same path can also be safely given to --import-marks. The file will not be written if no new object has been marked/exported.</p> </dd> <dt class=\"hdlist1\">--import-marks=&lt;file&gt;</dt> <dd> <p>Before processing any input, load the marks specified in &lt;file&gt;. The input file must exist, must be readable, and must use the same format as produced by --export-marks.</p>  <p>Any commits that have already been marked will not be exported again. If the backend uses a similar --import-marks file, this allows for incremental bidirectional exporting of the repository by keeping the marks the same across runs.</p>  </dd> <dt class=\"hdlist1\">--fake-missing-tagger</dt> <dd> <p>Some old repositories have tags without a tagger. The fast-import protocol was pretty strict about that, and did not allow that. So fake a tagger to be able to fast-import the output.</p> </dd> <dt class=\"hdlist1\">--use-done-feature</dt> <dd> <p>Start the stream with a <code>feature done</code> stanza, and terminate it with a <code>done</code> command.</p> </dd> <dt class=\"hdlist1\">--no-data</dt> <dd> <p>Skip output of blob objects and instead refer to blobs via their original SHA-1 hash. This is useful when rewriting the directory structure or history of a repository without touching the contents of individual files. Note that the resulting stream can only be used by a repository which already contains the necessary objects.</p> </dd> <dt class=\"hdlist1\">--full-tree</dt> <dd> <p>This option will cause fast-export to issue a \"deleteall\" directive for each commit followed by a full list of all files in the commit (as opposed to just listing the files which are different from the commit’s first parent).</p> </dd> <dt class=\"hdlist1\">--anonymize</dt> <dd> <p>Anonymize the contents of the repository while still retaining the shape of the history and stored tree. See the section on <code>ANONYMIZING</code> below.</p> </dd> <dt class=\"hdlist1\">--refspec</dt> <dd> <p>Apply the specified refspec to each ref exported. Multiple of them can be specified.</p> </dd> <dt class=\"hdlist1\">[&lt;git-rev-list-args&gt;…​]</dt> <dd> <p>A list of arguments, acceptable to <code>git rev-parse</code> and <code>git rev-list</code>, that specifies the specific objects and references to export. For example, <code>master~10..master</code> causes the current master reference to be exported along with all objects added since its 10th ancestor commit.</p> </dd> </dl> </div></div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\">\n<div class=\"listingblock\"> <div class=\"content\"> <pre>$ git fast-export --all | (cd /empty/repository &amp;&amp; git fast-import)</pre> </div> </div>  <p>This will export the whole repository and import it into the existing empty repository. Except for reencoding commits that are not in UTF-8, it would be a one-to-one mirror.</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git fast-export master~5..master |\n        sed \"s|refs/heads/master|refs/heads/other|\" |\n        git fast-import</pre> </div> </div>  <p>This makes a new branch called <code>other</code> from <code>master~5..master</code> (i.e. if <code>master</code> has linear history, it will take the last 5 commits).</p>   <p>Note that this assumes that none of the blobs and commit messages referenced by that revision range contains the string <code>refs/heads/master</code>.</p> </div>   <h2 id=\"_anonymizing\">Anonymizing</h2> <div class=\"sectionbody\"> <p>If the <code>--anonymize</code> option is given, git will attempt to remove all identifying information from the repository while still retaining enough of the original tree and history patterns to reproduce some bugs. The goal is that a git bug which is found on a private repository will persist in the anonymized repository, and the latter can be shared with git developers to help solve the bug.</p>   <p>With this option, git will replace all refnames, paths, blob contents, commit and tag messages, names, and email addresses in the output with anonymized data. Two instances of the same string will be replaced equivalently (e.g., two commits with the same author will have the same anonymized author in the output, but bear no resemblance to the original author string). The relationship between commits, branches, and tags is retained, as well as the commit timestamps (but the commit messages and refnames bear no resemblance to the originals). The relative makeup of the tree is retained (e.g., if you have a root tree with 10 files and 3 trees, so will the output), but their names and the contents of the files will be replaced.</p>   <p>If you think you have found a git bug, you can start by exporting an anonymized stream of the whole repository:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git fast-export --anonymize --all &gt;anon-stream</pre> </div> </div>  <p>Then confirm that the bug persists in a repository created from that stream (many bugs will not, as they really do depend on the exact repository contents):</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git init anon-repo\n$ cd anon-repo\n$ git fast-import &lt;../anon-stream\n$ ... test your bug ...</pre> </div> </div>  <p>If the anonymized repository shows the bug, it may be worth sharing <code>anon-stream</code> along with a regular bug report. Note that the anonymized stream compresses very well, so gzipping it is encouraged. If you want to examine the stream to see that it does not contain any private data, you can peruse it directly before sending. You may also want to try:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ perl -pe 's/\\d+/X/g' &lt;anon-stream | sort -u | less</pre> </div> </div>  <p>which shows all of the unique lines (with numbers converted to \"X\", to collapse \"User 0\", \"User 1\", etc into \"User X\"). This produces a much smaller output, and it is usually easy to quickly confirm that there is no private data in the stream.</p> </div>   <h2 id=\"_limitations\">Limitations</h2> <div class=\"sectionbody\"> <p>Since <code>git fast-import</code> cannot tag trees, you will not be able to export the linux.git repository completely, as it contains a tag referencing a tree instead of a commit.</p> </div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-fast-import\">git-fast-import[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-fast-export\" class=\"_attribution-link\">https://git-scm.com/docs/git-fast-export</a>\n  </p>\n</div>\n","git-shell":"<h1>git-shell</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-shell - Restricted login shell for Git-only SSH access</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">chsh -s $(command -v git-shell) &lt;user&gt;\ngit clone &lt;user&gt;@localhost:/path/to/repo.git\nssh &lt;user&gt;@localhost</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>This is a login shell for SSH accounts to provide restricted Git access. It permits execution only of server-side Git commands implementing the pull/push functionality, plus custom commands present in a subdirectory named <code>git-shell-commands</code> in the user’s home directory.</p> </div>   <h2 id=\"_commands\">Commands</h2> <div class=\"sectionbody\"> <p><code>git shell</code> accepts the following commands after the <code>-c</code> option:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><em>git receive-pack &lt;argument&gt;</em></dt> <dt class=\"hdlist1\"><em>git upload-pack &lt;argument&gt;</em></dt> <dt class=\"hdlist1\"><em>git upload-archive &lt;argument&gt;</em></dt> <dd> <p>Call the corresponding server-side command to support the client’s <code>git push</code>, <code>git fetch</code>, or <code>git archive --remote</code> request.</p> </dd> <dt class=\"hdlist1\"><em>cvs server</em></dt> <dd> <p>Imitate a CVS server. See <a href=\"git-cvsserver\">git-cvsserver[1]</a>.</p> </dd> </dl> </div>  <p>If a <code>~/git-shell-commands</code> directory is present, <code>git shell</code> will also handle other, custom commands by running \"<code>git-shell-commands/&lt;command&gt; &lt;arguments&gt;</code>\" from the user’s home directory.</p> </div>   <h2 id=\"_interactive_use\">Interactive use</h2> <div class=\"sectionbody\"> <p>By default, the commands above can be executed only with the <code>-c</code> option; the shell is not interactive.</p>   <p>If a <code>~/git-shell-commands</code> directory is present, <code>git shell</code> can also be run interactively (with no arguments). If a <code>help</code> command is present in the <code>git-shell-commands</code> directory, it is run to provide the user with an overview of allowed actions. Then a \"git&gt; \" prompt is presented at which one can enter any of the commands from the <code>git-shell-commands</code> directory, or <code>exit</code> to close the connection.</p>   <p>Generally this mode is used as an administrative interface to allow users to list repositories they have access to, create, delete, or rename repositories, or change repository descriptions and permissions.</p>   <p>If a <code>no-interactive-login</code> command exists, then it is run and the interactive shell is aborted.</p> </div>   <h2 id=\"_example\">Example</h2> <div class=\"sectionbody\"> <p>To disable interactive logins, displaying a greeting instead:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ chsh -s /usr/bin/git-shell\n$ mkdir $HOME/git-shell-commands\n$ cat &gt;$HOME/git-shell-commands/no-interactive-login &lt;&lt;\\EOF\n#!/bin/sh\nprintf '%s\\n' \"Hi $USER! You've successfully authenticated, but I do not\"\nprintf '%s\\n' \"provide interactive shell access.\"\nexit 128\nEOF\n$ chmod +x $HOME/git-shell-commands/no-interactive-login</pre> </div> </div>\n</div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p>ssh(1), <a href=\"git-daemon\">git-daemon[1]</a>, contrib/git-shell-commands/README</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-shell\" class=\"_attribution-link\">https://git-scm.com/docs/git-shell</a>\n  </p>\n</div>\n","git-upload-pack":"<h1>git-upload-pack</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-upload-pack - Send objects packed back to git-fetch-pack</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git-upload-pack [--strict] [--timeout=&lt;n&gt;] &lt;directory&gt;</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Invoked by <code>git fetch-pack</code>, learns what objects the other side is missing, and sends them after packing.</p>   <p>This command is usually not invoked directly by the end user. The UI for the protocol is on the <code>git fetch-pack</code> side, and the program pair is meant to be used to pull updates from a remote repository. For push operations, see <code>git send-pack</code>.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--strict</dt> <dd> <p>Do not try &lt;directory&gt;/.git/ if &lt;directory&gt; is no Git directory.</p> </dd> <dt class=\"hdlist1\">--timeout=&lt;n&gt;</dt> <dd> <p>Interrupt transfer after &lt;n&gt; seconds of inactivity.</p> </dd> <dt class=\"hdlist1\">&lt;directory&gt;</dt> <dd> <p>The repository to sync from.</p> </dd> </dl> </div></div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"gitnamespaces\">gitnamespaces[7]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-upload-pack\" class=\"_attribution-link\">https://git-scm.com/docs/git-upload-pack</a>\n  </p>\n</div>\n","git-http-backend":"<h1>git-http-backend</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-http-backend - Server side implementation of Git over HTTP</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git http-backend</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>A simple CGI program to serve the contents of a Git repository to Git clients accessing the repository over http:// and https:// protocols. The program supports clients fetching using both the smart HTTP protocol and the backwards-compatible dumb HTTP protocol, as well as clients pushing using the smart HTTP protocol.</p>   <p>It verifies that the directory has the magic file \"git-daemon-export-ok\", and it will refuse to export any Git directory that hasn’t explicitly been marked for export this way (unless the <code>GIT_HTTP_EXPORT_ALL</code> environmental variable is set).</p>   <p>By default, only the <code>upload-pack</code> service is enabled, which serves <code>git fetch-pack</code> and <code>git ls-remote</code> clients, which are invoked from <code>git fetch</code>, <code>git pull</code>, and <code>git clone</code>. If the client is authenticated, the <code>receive-pack</code> service is enabled, which serves <code>git send-pack</code> clients, which is invoked from <code>git push</code>.</p> </div>   <h2 id=\"_services\">Services</h2> <div class=\"sectionbody\"> <p>These services can be enabled/disabled using the per-repository configuration file:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">http.getanyfile</dt> <dd> <p>This serves Git clients older than version 1.6.6 that are unable to use the upload pack service. When enabled, clients are able to read any file within the repository, including objects that are no longer reachable from a branch but are still present. It is enabled by default, but a repository can disable it by setting this configuration item to <code>false</code>.</p> </dd> <dt class=\"hdlist1\">http.uploadpack</dt> <dd> <p>This serves <code>git fetch-pack</code> and <code>git ls-remote</code> clients. It is enabled by default, but a repository can disable it by setting this configuration item to <code>false</code>.</p> </dd> <dt class=\"hdlist1\">http.receivepack</dt> <dd> <p>This serves <code>git send-pack</code> clients, allowing push. It is disabled by default for anonymous users, and enabled by default for users authenticated by the web server. It can be disabled by setting this item to <code>false</code>, or enabled for all users, including anonymous users, by setting it to <code>true</code>.</p> </dd> </dl> </div>\n</div>   <h2 id=\"_url_translation\">Url translation</h2> <div class=\"sectionbody\"> <p>To determine the location of the repository on disk, <code>git http-backend</code> concatenates the environment variables PATH_INFO, which is set automatically by the web server, and GIT_PROJECT_ROOT, which must be set manually in the web server configuration. If GIT_PROJECT_ROOT is not set, <code>git http-backend</code> reads PATH_TRANSLATED, which is also set automatically by the web server.</p> </div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"> <p>All of the following examples map <code>http://$hostname/git/foo/bar.git</code> to <code>/var/www/git/foo/bar.git</code>.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">Apache 2.x</dt> <dd> <p>Ensure mod_cgi, mod_alias, and mod_env are enabled, set GIT_PROJECT_ROOT (or DocumentRoot) appropriately, and create a ScriptAlias to the CGI:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>SetEnv GIT_PROJECT_ROOT /var/www/git\nSetEnv GIT_HTTP_EXPORT_ALL\nScriptAlias /git/ /usr/libexec/git-core/git-http-backend/</pre> </div> </div>  <p>To enable anonymous read access but authenticated write access, require authorization for both the initial ref advertisement (which we detect as a push via the service parameter in the query string), and the receive-pack invocation itself:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>RewriteCond %{QUERY_STRING} service=git-receive-pack [OR]\nRewriteCond %{REQUEST_URI} /git-receive-pack$\nRewriteRule ^/git/ - [E=AUTHREQUIRED:yes]\n\n&lt;LocationMatch \"^/git/\"&gt;\n        Order Deny,Allow\n        Deny from env=AUTHREQUIRED\n\n        AuthType Basic\n        AuthName \"Git Access\"\n        Require group committers\n        Satisfy Any\n        ...\n&lt;/LocationMatch&gt;</pre> </div> </div>  <p>If you do not have <code>mod_rewrite</code> available to match against the query string, it is sufficient to just protect <code>git-receive-pack</code> itself, like:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>&lt;LocationMatch \"^/git/.*/git-receive-pack$\"&gt;\n        AuthType Basic\n        AuthName \"Git Access\"\n        Require group committers\n        ...\n&lt;/LocationMatch&gt;</pre> </div> </div>  <p>In this mode, the server will not request authentication until the client actually starts the object negotiation phase of the push, rather than during the initial contact. For this reason, you must also enable the <code>http.receivepack</code> config option in any repositories that should accept a push. The default behavior, if <code>http.receivepack</code> is not set, is to reject any pushes by unauthenticated users; the initial request will therefore report <code>403 Forbidden</code> to the client, without even giving an opportunity for authentication.</p>   <p>To require authentication for both reads and writes, use a Location directive around the repository, or one of its parent directories:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>&lt;Location /git/private&gt;\n        AuthType Basic\n        AuthName \"Private Git Access\"\n        Require group committers\n        ...\n&lt;/Location&gt;</pre> </div> </div>  <p>To serve gitweb at the same url, use a ScriptAliasMatch to only those URLs that <code>git http-backend</code> can handle, and forward the rest to gitweb:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>ScriptAliasMatch \\\n        \"(?x)^/git/(.*/(HEAD | \\\n                        info/refs | \\\n                        objects/(info/[^/]+ | \\\n                                 [0-9a-f]{2}/[0-9a-f]{38} | \\\n                                 pack/pack-[0-9a-f]{40}\\.(pack|idx)) | \\\n                        git-(upload|receive)-pack))$\" \\\n        /usr/libexec/git-core/git-http-backend/$1\n\nScriptAlias /git/ /var/www/cgi-bin/gitweb.cgi/</pre> </div> </div>  <p>To serve multiple repositories from different <a href=\"gitnamespaces\">gitnamespaces[7]</a> in a single repository:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>SetEnvIf Request_URI \"^/git/([^/]*)\" GIT_NAMESPACE=$1\nScriptAliasMatch ^/git/[^/]*(.*) /usr/libexec/git-core/git-http-backend/storage.git$1</pre> </div> </div> </dd> <dt class=\"hdlist1\">Accelerated static Apache 2.x</dt> <dd> <p>Similar to the above, but Apache can be used to return static files that are stored on disk. On many systems this may be more efficient as Apache can ask the kernel to copy the file contents from the file system directly to the network:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>SetEnv GIT_PROJECT_ROOT /var/www/git\n\nAliasMatch ^/git/(.*/objects/[0-9a-f]{2}/[0-9a-f]{38})$          /var/www/git/$1\nAliasMatch ^/git/(.*/objects/pack/pack-[0-9a-f]{40}.(pack|idx))$ /var/www/git/$1\nScriptAlias /git/ /usr/libexec/git-core/git-http-backend/</pre> </div> </div>  <p>This can be combined with the gitweb configuration:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>SetEnv GIT_PROJECT_ROOT /var/www/git\n\nAliasMatch ^/git/(.*/objects/[0-9a-f]{2}/[0-9a-f]{38})$          /var/www/git/$1\nAliasMatch ^/git/(.*/objects/pack/pack-[0-9a-f]{40}.(pack|idx))$ /var/www/git/$1\nScriptAliasMatch \\\n        \"(?x)^/git/(.*/(HEAD | \\\n                        info/refs | \\\n                        objects/info/[^/]+ | \\\n                        git-(upload|receive)-pack))$\" \\\n        /usr/libexec/git-core/git-http-backend/$1\nScriptAlias /git/ /var/www/cgi-bin/gitweb.cgi/</pre> </div> </div> </dd> <dt class=\"hdlist1\">Lighttpd</dt> <dd> <p>Ensure that <code>mod_cgi</code>, <code>mod_alias</code>, <code>mod_auth</code>, <code>mod_setenv</code> are loaded, then set <code>GIT_PROJECT_ROOT</code> appropriately and redirect all requests to the CGI:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>alias.url += ( \"/git\" =&gt; \"/usr/lib/git-core/git-http-backend\" )\n$HTTP[\"url\"] =~ \"^/git\" {\n        cgi.assign = (\"\" =&gt; \"\")\n        setenv.add-environment = (\n                \"GIT_PROJECT_ROOT\" =&gt; \"/var/www/git\",\n                \"GIT_HTTP_EXPORT_ALL\" =&gt; \"\"\n        )\n}</pre> </div> </div>  <p>To enable anonymous read access but authenticated write access:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$HTTP[\"querystring\"] =~ \"service=git-receive-pack\" {\n        include \"git-auth.conf\"\n}\n$HTTP[\"url\"] =~ \"^/git/.*/git-receive-pack$\" {\n        include \"git-auth.conf\"\n}</pre> </div> </div>  <p>where <code>git-auth.conf</code> looks something like:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>auth.require = (\n        \"/\" =&gt; (\n                \"method\" =&gt; \"basic\",\n                \"realm\" =&gt; \"Git Access\",\n                \"require\" =&gt; \"valid-user\"\n               )\n)\n# ...and set up auth.backend here</pre> </div> </div>  <p>To require authentication for both reads and writes:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$HTTP[\"url\"] =~ \"^/git/private\" {\n        include \"git-auth.conf\"\n}</pre> </div> </div> </dd> </dl> </div>\n</div>   <h2 id=\"_environment\">Environment</h2> <div class=\"sectionbody\"> <p><code>git http-backend</code> relies upon the <code>CGI</code> environment variables set by the invoking web server, including:</p>  <div class=\"ulist\"> <ul> <li> <p>PATH_INFO (if GIT_PROJECT_ROOT is set, otherwise PATH_TRANSLATED)</p> </li> <li> <p>REMOTE_USER</p> </li> <li> <p>REMOTE_ADDR</p> </li> <li> <p>CONTENT_TYPE</p> </li> <li> <p>QUERY_STRING</p> </li> <li> <p>REQUEST_METHOD</p> </li> </ul> </div>  <p>The <code>GIT_HTTP_EXPORT_ALL</code> environmental variable may be passed to <code>git-http-backend</code> to bypass the check for the \"git-daemon-export-ok\" file in each repository before allowing export of that repository.</p>   <p>The <code>GIT_HTTP_MAX_REQUEST_BUFFER</code> environment variable (or the <code>http.maxRequestBuffer</code> config variable) may be set to change the largest ref negotiation request that git will handle during a fetch; any fetch requiring a larger buffer will not succeed. This value should not normally need to be changed, but may be helpful if you are fetching from a repository with an extremely large number of refs. The value can be specified with a unit (e.g., <code>100M</code> for 100 megabytes). The default is 10 megabytes.</p>   <p>The backend process sets GIT_COMMITTER_NAME to <code>$REMOTE_USER</code> and GIT_COMMITTER_EMAIL to <code>${REMOTE_USER}@http.${REMOTE_ADDR}</code>, ensuring that any reflogs created by <code>git-receive-pack</code> contain some identifying information of the remote user who performed the push.</p>   <p>All <code>CGI</code> environment variables are available to each of the hooks invoked by the <code>git-receive-pack</code>.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-http-backend\" class=\"_attribution-link\">https://git-scm.com/docs/git-http-backend</a>\n  </p>\n</div>\n","git-credential-store":"<h1>git-credential-store</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-credential-store - Helper to store credentials on disk</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"listingblock\"> <div class=\"content\"> <pre>git config credential.helper 'store [options]'</pre> </div> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\">\n<div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> Using this helper will store your passwords unencrypted on disk, protected only by filesystem permissions. If this is not an acceptable security tradeoff, try <a href=\"git-credential-cache\">git-credential-cache[1]</a>, or find a helper that integrates with secure storage provided by your operating system. </td> </tr> </table> </div>  <p>This command stores credentials indefinitely on disk for use by future Git programs.</p>   <p>You probably don’t want to invoke this command directly; it is meant to be used as a credential helper by other parts of git. See <a href=\"gitcredentials\">gitcredentials[7]</a> or <code>EXAMPLES</code> below.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--file=&lt;path&gt;</dt> <dd> <p>Use <code>&lt;path&gt;</code> to lookup and store credentials. The file will have its filesystem permissions set to prevent other users on the system from reading it, but will not be encrypted or otherwise protected. If not specified, credentials will be searched for from <code>~/.git-credentials</code> and <code>$XDG_CONFIG_HOME/git/credentials</code>, and credentials will be written to <code>~/.git-credentials</code> if it exists, or <code>$XDG_CONFIG_HOME/git/credentials</code> if it exists and the former does not. See also <a href=\"#FILES\">FILES</a>.</p> </dd> </dl> </div></div>   <h2 id=\"FILES\">Files</h2> <div class=\"sectionbody\"> <p>If not set explicitly with <code>--file</code>, there are two files where git-credential-store will search for credentials in order of precedence:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">~/.git-credentials</dt> <dd> <p>User-specific credentials file.</p> </dd> <dt class=\"hdlist1\">$XDG_CONFIG_HOME/git/credentials</dt> <dd> <p>Second user-specific credentials file. If <code>$XDG_CONFIG_HOME</code> is not set or empty, <code>$HOME/.config/git/credentials</code> will be used. Any credentials stored in this file will not be used if <code>~/.git-credentials</code> has a matching credential as well. It is a good idea not to create this file if you sometimes use older versions of Git that do not support it.</p> </dd> </dl> </div>  <p>For credential lookups, the files are read in the order given above, with the first matching credential found taking precedence over credentials found in files further down the list.</p>   <p>Credential storage will by default write to the first existing file in the list. If none of these files exist, <code>~/.git-credentials</code> will be created and written to.</p>   <p>When erasing credentials, matching credentials will be erased from all files.</p> </div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"> <p>The point of this helper is to reduce the number of times you must type your username or password. For example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git config credential.helper store\n$ git push http://example.com/repo.git\nUsername: &lt;type your username&gt;\nPassword: &lt;type your password&gt;\n\n[several days later]\n$ git push http://example.com/repo.git\n[your credentials are used automatically]</pre> </div> </div>\n</div>   <h2 id=\"_storage_format\">Storage format</h2> <div class=\"sectionbody\"> <p>The <code>.git-credentials</code> file is stored in plaintext. Each credential is stored on its own line as a URL like:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>https://user:pass@example.com</pre> </div> </div>  <p>When Git needs authentication for a particular URL context, credential-store will consider that context a pattern to match against each entry in the credentials file. If the protocol, hostname, and username (if we already have one) match, then the password is returned to Git. See the discussion of configuration in <a href=\"gitcredentials\">gitcredentials[7]</a> for more information.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-credential-store\" class=\"_attribution-link\">https://git-scm.com/docs/git-credential-store</a>\n  </p>\n</div>\n","git-prune-packed":"<h1>git-prune-packed</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-prune-packed - Remove extra objects that are already in pack files</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git prune-packed [-n|--dry-run] [-q|--quiet]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>This program searches the <code>$GIT_OBJECT_DIRECTORY</code> for all objects that currently exist in a pack file as well as the independent object directories.</p>   <p>All such extra objects are removed.</p>   <p>A pack is a collection of objects, individually compressed, with delta compression applied, stored in a single file, with an associated index file.</p>   <p>Packs are used to reduce the load on mirror systems, backup engines, disk storage, etc.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-n</dt> <dt class=\"hdlist1\">--dry-run</dt> <dd> <p>Don’t actually remove any objects, only show those that would have been removed.</p> </dd> <dt class=\"hdlist1\">-q</dt> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>Squelch the progress indicator.</p> </dd> </dl> </div></div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"git-pack-objects\">git-pack-objects[1]</a> <a href=\"git-repack\">git-repack[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-prune-packed\" class=\"_attribution-link\">https://git-scm.com/docs/git-prune-packed</a>\n  </p>\n</div>\n","git-bisect-lk2009":"<h1>git-bisect-lk2009</h1>  <h2 id=\"_abstract\">Abstract</h2> <div class=\"sectionbody\"> <p>\"git bisect\" enables software users and developers to easily find the commit that introduced a regression. We show why it is important to have good tools to fight regressions. We describe how \"git bisect\" works from the outside and the algorithms it uses inside. Then we explain how to take advantage of \"git bisect\" to improve current practices. And we discuss how \"git bisect\" could improve in the future.</p> </div>   <h2 id=\"_introduction_to_git_bisect\">Introduction to \"git bisect\"</h2> <div class=\"sectionbody\"> <p>Git is a Distributed Version Control system (DVCS) created by Linus Torvalds and maintained by Junio Hamano.</p>   <p>In Git like in many other Version Control Systems (VCS), the different states of the data that is managed by the system are called commits. And, as VCS are mostly used to manage software source code, sometimes \"interesting\" changes of behavior in the software are introduced in some commits.</p>   <p>In fact people are specially interested in commits that introduce a \"bad\" behavior, called a bug or a regression. They are interested in these commits because a commit (hopefully) contains a very small set of source code changes. And it’s much easier to understand and properly fix a problem when you only need to check a very small set of changes, than when you don’t know where look in the first place.</p>   <p>So to help people find commits that introduce a \"bad\" behavior, the \"git bisect\" set of commands was invented. And it follows of course that in \"git bisect\" parlance, commits where the \"interesting behavior\" is present are called \"bad\" commits, while other commits are called \"good\" commits. And a commit that introduce the behavior we are interested in is called a \"first bad commit\". Note that there could be more than one \"first bad commit\" in the commit space we are searching.</p>   <p>So \"git bisect\" is designed to help find a \"first bad commit\". And to be as efficient as possible, it tries to perform a binary search.</p> </div>   <h2 id=\"_fighting_regressions_overview\">Fighting regressions overview</h2> <div class=\"sectionbody\">\n<div class=\"sect2\"> <h3 id=\"_regressions_a_big_problem\">Regressions: a big problem</h3>  <p>Regressions are a big problem in the software industry. But it’s difficult to put some real numbers behind that claim.</p>   <p>There are some numbers about bugs in general, like a NIST study in 2002 <a href=\"#1\">[1]</a> that said:</p>  <div class=\"quoteblock\"> <blockquote>  <p>Software bugs, or errors, are so prevalent and so detrimental that they cost the U.S. economy an estimated $59.5 billion annually, or about 0.6 percent of the gross domestic product, according to a newly released study commissioned by the Department of Commerce’s National Institute of Standards and Technology (NIST). At the national level, over half of the costs are borne by software users and the remainder by software developers/vendors. The study also found that, although all errors cannot be removed, more than a third of these costs, or an estimated $22.2 billion, could be eliminated by an improved testing infrastructure that enables earlier and more effective identification and removal of software defects. These are the savings associated with finding an increased percentage (but not 100 percent) of errors closer to the development stages in which they are introduced. Currently, over half of all errors are not found until \"downstream\" in the development process or during post-sale software use.</p>  </blockquote> </div>  <p>And then:</p>  <div class=\"quoteblock\"> <blockquote>  <p>Software developers already spend approximately 80 percent of development costs on identifying and correcting defects, and yet few products of any type other than software are shipped with such high levels of errors.</p>  </blockquote> </div>  <p>Eventually the conclusion started with:</p>  <div class=\"quoteblock\"> <blockquote>  <p>The path to higher software quality is significantly improved software testing.</p>  </blockquote> </div>  <p>There are other estimates saying that 80% of the cost related to software is about maintenance <a href=\"#2\">[2]</a>.</p>   <p>Though, according to Wikipedia <a href=\"#3\">[3]</a>:</p>  <div class=\"quoteblock\"> <blockquote>  <p>A common perception of maintenance is that it is merely fixing bugs. However, studies and surveys over the years have indicated that the majority, over 80%, of the maintenance effort is used for non-corrective actions (Pigosky 1997). This perception is perpetuated by users submitting problem reports that in reality are functionality enhancements to the system.</p>  </blockquote> </div>  <p>But we can guess that improving on existing software is very costly because you have to watch out for regressions. At least this would make the above studies consistent among themselves.</p>   <p>Of course some kind of software is developed, then used during some time without being improved on much, and then finally thrown away. In this case, of course, regressions may not be a big problem. But on the other hand, there is a lot of big software that is continually developed and maintained during years or even tens of years by a lot of people. And as there are often many people who depend (sometimes critically) on such software, regressions are a really big problem.</p>   <p>One such software is the Linux kernel. And if we look at the Linux kernel, we can see that a lot of time and effort is spent to fight regressions. The release cycle start with a 2 weeks long merge window. Then the first release candidate (rc) version is tagged. And after that about 7 or 8 more rc versions will appear with around one week between each of them, before the final release.</p>   <p>The time between the first rc release and the final release is supposed to be used to test rc versions and fight bugs and especially regressions. And this time is more than 80% of the release cycle time. But this is not the end of the fight yet, as of course it continues after the release.</p>   <p>And then this is what Ingo Molnar (a well known Linux kernel developer) says about his use of git bisect:</p>  <div class=\"quoteblock\"> <blockquote>  <p>I most actively use it during the merge window (when a lot of trees get merged upstream and when the influx of bugs is the highest) - and yes, there have been cases that i used it multiple times a day. My average is roughly once a day.</p>  </blockquote> </div>  <p>So regressions are fought all the time by developers, and indeed it is well known that bugs should be fixed as soon as possible, so as soon as they are found. That’s why it is interesting to have good tools for this purpose.</p>  </div> <div class=\"sect2\"> <h3 id=\"_other_tools_to_fight_regressions\">Other tools to fight regressions</h3>  <p>So what are the tools used to fight regressions? They are nearly the same as those used to fight regular bugs. The only specific tools are test suites and tools similar as \"git bisect\".</p>   <p>Test suites are very nice. But when they are used alone, they are supposed to be used so that all the tests are checked after each commit. This means that they are not very efficient, because many tests are run for no interesting result, and they suffer from combinational explosion.</p>   <p>In fact the problem is that big software often has many different configuration options and that each test case should pass for each configuration after each commit. So if you have for each release: N configurations, M commits and T test cases, you should perform:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>N * M * T tests</pre> </div> </div>  <p>where N, M and T are all growing with the size your software.</p>   <p>So very soon it will not be possible to completely test everything.</p>   <p>And if some bugs slip through your test suite, then you can add a test to your test suite. But if you want to use your new improved test suite to find where the bug slipped in, then you will either have to emulate a bisection process or you will perhaps bluntly test each commit backward starting from the \"bad\" commit you have which may be very wasteful.</p>  </div>\n</div>   <h2 id=\"__git_bisect_overview\">\"git bisect\" overview</h2> <div class=\"sectionbody\">\n<div class=\"sect2\"> <h3 id=\"_starting_a_bisection\">Starting a bisection</h3>  <p>The first \"git bisect\" subcommand to use is \"git bisect start\" to start the search. Then bounds must be set to limit the commit space. This is done usually by giving one \"bad\" and at least one \"good\" commit. They can be passed in the initial call to \"git bisect start\" like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect start [BAD [GOOD...]]</pre> </div> </div>  <p>or they can be set using:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect bad [COMMIT]</pre> </div> </div>  <p>and:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect good [COMMIT...]</pre> </div> </div>  <p>where BAD, GOOD and COMMIT are all names that can be resolved to a commit.</p>   <p>Then \"git bisect\" will checkout a commit of its choosing and ask the user to test it, like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect start v2.6.27 v2.6.25\nBisecting: 10928 revisions left to test after this (roughly 14 steps)\n[2ec65f8b89ea003c27ff7723525a2ee335a2b393] x86: clean up using max_low_pfn on 32-bit</pre> </div> </div>  <p>Note that the example that we will use is really a toy example, we will be looking for the first commit that has a version like \"2.6.26-something\", that is the commit that has a \"SUBLEVEL = 26\" line in the top level Makefile. This is a toy example because there are better ways to find this commit with Git than using \"git bisect\" (for example \"git blame\" or \"git log -S&lt;string&gt;\").</p>  </div> <div class=\"sect2\"> <h3 id=\"_driving_a_bisection_manually\">Driving a bisection manually</h3>  <p>At this point there are basically 2 ways to drive the search. It can be driven manually by the user or it can be driven automatically by a script or a command.</p>   <p>If the user is driving it, then at each step of the search, the user will have to test the current commit and say if it is \"good\" or \"bad\" using the \"git bisect good\" or \"git bisect bad\" commands respectively that have been described above. For example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect bad\nBisecting: 5480 revisions left to test after this (roughly 13 steps)\n[66c0b394f08fd89236515c1c84485ea712a157be] KVM: kill file-&gt;f_count abuse in kvm</pre> </div> </div>  <p>And after a few more steps like that, \"git bisect\" will eventually find a first bad commit:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect bad\n2ddcca36c8bcfa251724fe342c8327451988be0d is the first bad commit\ncommit 2ddcca36c8bcfa251724fe342c8327451988be0d\nAuthor: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;\nDate:   Sat May 3 11:59:44 2008 -0700\n\n    Linux 2.6.26-rc1\n\n:100644 100644 5cf82581... 4492984e... M      Makefile</pre> </div> </div>  <p>At this point we can see what the commit does, check it out (if it’s not already checked out) or tinker with it, for example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git show HEAD\ncommit 2ddcca36c8bcfa251724fe342c8327451988be0d\nAuthor: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;\nDate:   Sat May 3 11:59:44 2008 -0700\n\n    Linux 2.6.26-rc1\n\ndiff --git a/Makefile b/Makefile\nindex 5cf8258..4492984 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -1,7 +1,7 @@\n VERSION = 2\n PATCHLEVEL = 6\n-SUBLEVEL = 25\n-EXTRAVERSION =\n+SUBLEVEL = 26\n+EXTRAVERSION = -rc1\n NAME = Funky Weasel is Jiggy wit it\n\n # *DOCUMENTATION*</pre> </div> </div>  <p>And when we are finished we can use \"git bisect reset\" to go back to the branch we were in before we started bisecting:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect reset\nChecking out files: 100% (21549/21549), done.\nPrevious HEAD position was 2ddcca3... Linux 2.6.26-rc1\nSwitched to branch 'master'</pre> </div> </div> </div> <div class=\"sect2\"> <h3 id=\"_driving_a_bisection_automatically\">Driving a bisection automatically</h3>  <p>The other way to drive the bisection process is to tell \"git bisect\" to launch a script or command at each bisection step to know if the current commit is \"good\" or \"bad\". To do that, we use the \"git bisect run\" command. For example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect start v2.6.27 v2.6.25\nBisecting: 10928 revisions left to test after this (roughly 14 steps)\n[2ec65f8b89ea003c27ff7723525a2ee335a2b393] x86: clean up using max_low_pfn on 32-bit\n$\n$ git bisect run grep '^SUBLEVEL = 25' Makefile\nrunning grep ^SUBLEVEL = 25 Makefile\nBisecting: 5480 revisions left to test after this (roughly 13 steps)\n[66c0b394f08fd89236515c1c84485ea712a157be] KVM: kill file-&gt;f_count abuse in kvm\nrunning grep ^SUBLEVEL = 25 Makefile\nSUBLEVEL = 25\nBisecting: 2740 revisions left to test after this (roughly 12 steps)\n[671294719628f1671faefd4882764886f8ad08cb] V4L/DVB(7879): Adding cx18 Support for mxl5005s\n...\n...\nrunning grep ^SUBLEVEL = 25 Makefile\nBisecting: 0 revisions left to test after this (roughly 0 steps)\n[2ddcca36c8bcfa251724fe342c8327451988be0d] Linux 2.6.26-rc1\nrunning grep ^SUBLEVEL = 25 Makefile\n2ddcca36c8bcfa251724fe342c8327451988be0d is the first bad commit\ncommit 2ddcca36c8bcfa251724fe342c8327451988be0d\nAuthor: Linus Torvalds &lt;torvalds@linux-foundation.org&gt;\nDate:   Sat May 3 11:59:44 2008 -0700\n\n    Linux 2.6.26-rc1\n\n:100644 100644 5cf82581... 4492984e... M      Makefile\nbisect run success</pre> </div> </div>  <p>In this example, we passed \"grep <code>^SUBLEVEL = 25</code> Makefile\" as parameter to \"git bisect run\". This means that at each step, the grep command we passed will be launched. And if it exits with code 0 (that means success) then git bisect will mark the current state as \"good\". If it exits with code 1 (or any code between 1 and 127 included, except the special code 125), then the current state will be marked as \"bad\".</p>   <p>Exit code between 128 and 255 are special to \"git bisect run\". They make it stop immediately the bisection process. This is useful for example if the command passed takes too long to complete, because you can kill it with a signal and it will stop the bisection process.</p>   <p>It can also be useful in scripts passed to \"git bisect run\" to \"exit 255\" if some very abnormal situation is detected.</p>  </div> <div class=\"sect2\"> <h3 id=\"_avoiding_untestable_commits\">Avoiding untestable commits</h3>  <p>Sometimes it happens that the current state cannot be tested, for example if it does not compile because there was a bug preventing it at that time. This is what the special exit code 125 is for. It tells \"git bisect run\" that the current commit should be marked as untestable and that another one should be chosen and checked out.</p>   <p>If the bisection process is driven manually, you can use \"git bisect skip\" to do the same thing. (In fact the special exit code 125 makes \"git bisect run\" use \"git bisect skip\" in the background.)</p>   <p>Or if you want more control, you can inspect the current state using for example \"git bisect visualize\". It will launch gitk (or \"git log\" if the <code>DISPLAY</code> environment variable is not set) to help you find a better bisection point.</p>   <p>Either way, if you have a string of untestable commits, it might happen that the regression you are looking for has been introduced by one of these untestable commits. In this case it’s not possible to tell for sure which commit introduced the regression.</p>   <p>So if you used \"git bisect skip\" (or the run script exited with special code 125) you could get a result like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>There are only 'skip'ped commits left to test.\nThe first bad commit could be any of:\n15722f2fa328eaba97022898a305ffc8172db6b1\n78e86cf3e850bd755bb71831f42e200626fbd1e0\ne15b73ad3db9b48d7d1ade32f8cd23a751fe0ace\n070eab2303024706f2924822bfec8b9847e4ac1b\nWe cannot bisect more!</pre> </div> </div> </div> <div class=\"sect2\"> <h3 id=\"_saving_a_log_and_replaying_it\">Saving a log and replaying it</h3>  <p>If you want to show other people your bisection process, you can get a log using for example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect log &gt; bisect_log.txt</pre> </div> </div>  <p>And it is possible to replay it using:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect replay bisect_log.txt</pre> </div> </div> </div>\n</div>   <h2 id=\"__git_bisect_details\">\"git bisect\" details</h2> <div class=\"sectionbody\">\n<div class=\"sect2\"> <h3 id=\"_bisection_algorithm\">Bisection algorithm</h3>  <p>As the Git commits form a directed acyclic graph (DAG), finding the best bisection commit to test at each step is not so simple. Anyway Linus found and implemented a \"truly stupid\" algorithm, later improved by Junio Hamano, that works quite well.</p>   <p>So the algorithm used by \"git bisect\" to find the best bisection commit when there are no skipped commits is the following:</p>   <p>1) keep only the commits that:</p>   <p>a) are ancestor of the \"bad\" commit (including the \"bad\" commit itself), b) are not ancestor of a \"good\" commit (excluding the \"good\" commits).</p>   <p>This means that we get rid of the uninteresting commits in the DAG.</p>   <p>For example if we start with a graph like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>G-Y-G-W-W-W-X-X-X-X\n           \\ /\n            W-W-B\n           /\nY---G-W---W\n \\ /   \\\nY-Y     X-X-X-X\n\n-&gt; time goes this way -&gt;</pre> </div> </div>  <p>where B is the \"bad\" commit, \"G\" are \"good\" commits and W, X, and Y are other commits, we will get the following graph after this first step:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>W-W-W\n     \\\n      W-W-B\n     /\nW---W</pre> </div> </div>  <p>So only the W and B commits will be kept. Because commits X and Y will have been removed by rules a) and b) respectively, and because commits G are removed by rule b) too.</p>   <p>Note for Git users, that it is equivalent as keeping only the commit given by:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>git rev-list BAD --not GOOD1 GOOD2...</pre> </div> </div>  <p>Also note that we don’t require the commits that are kept to be descendants of a \"good\" commit. So in the following example, commits W and Z will be kept:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>G-W-W-W-B\n   /\nZ-Z</pre> </div> </div>  <p>2) starting from the \"good\" ends of the graph, associate to each commit the number of ancestors it has plus one</p>   <p>For example with the following graph where H is the \"bad\" commit and A and D are some parents of some \"good\" commits:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>A-B-C\n     \\\n      F-G-H\n     /\nD---E</pre> </div> </div>  <p>this will give:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>1 2 3\nA-B-C\n     \\6 7 8\n      F-G-H\n1   2/\nD---E</pre> </div> </div>  <p>3) associate to each commit: min(X, N - X)</p>   <p>where X is the value associated to the commit in step 2) and N is the total number of commits in the graph.</p>   <p>In the above example we have N = 8, so this will give:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>1 2 3\nA-B-C\n     \\2 1 0\n      F-G-H\n1   2/\nD---E</pre> </div> </div>  <p>4) the best bisection point is the commit with the highest associated number</p>   <p>So in the above example the best bisection point is commit C.</p>   <p>5) note that some shortcuts are implemented to speed up the algorithm</p>   <p>As we know N from the beginning, we know that min(X, N - X) can’t be greater than N/2. So during steps 2) and 3), if we would associate N/2 to a commit, then we know this is the best bisection point. So in this case we can just stop processing any other commit and return the current commit.</p>  </div> <div class=\"sect2\"> <h3 id=\"_bisection_algorithm_debugging\">Bisection algorithm debugging</h3>  <p>For any commit graph, you can see the number associated with each commit using \"git rev-list --bisect-all\".</p>   <p>For example, for the above graph, a command like:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git rev-list --bisect-all BAD --not GOOD1 GOOD2</pre> </div> </div>  <p>would output something like:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>e15b73ad3db9b48d7d1ade32f8cd23a751fe0ace (dist=3)\n15722f2fa328eaba97022898a305ffc8172db6b1 (dist=2)\n78e86cf3e850bd755bb71831f42e200626fbd1e0 (dist=2)\na1939d9a142de972094af4dde9a544e577ddef0e (dist=2)\n070eab2303024706f2924822bfec8b9847e4ac1b (dist=1)\na3864d4f32a3bf5ed177ddef598490a08760b70d (dist=1)\na41baa717dd74f1180abf55e9341bc7a0bb9d556 (dist=1)\n9e622a6dad403b71c40979743bb9d5be17b16bd6 (dist=0)</pre> </div> </div> </div> <div class=\"sect2\"> <h3 id=\"_bisection_algorithm_discussed\">Bisection algorithm discussed</h3>  <p>First let’s define \"best bisection point\". We will say that a commit X is a best bisection point or a best bisection commit if knowing its state (\"good\" or \"bad\") gives as much information as possible whether the state of the commit happens to be \"good\" or \"bad\".</p>   <p>This means that the best bisection commits are the commits where the following function is maximum:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>f(X) = min(information_if_good(X), information_if_bad(X))</pre> </div> </div>  <p>where information_if_good(X) is the information we get if X is good and information_if_bad(X) is the information we get if X is bad.</p>   <p>Now we will suppose that there is only one \"first bad commit\". This means that all its descendants are \"bad\" and all the other commits are \"good\". And we will suppose that all commits have an equal probability of being good or bad, or of being the first bad commit, so knowing the state of c commits gives always the same amount of information wherever these c commits are on the graph and whatever c is. (So we suppose that these commits being for example on a branch or near a good or a bad commit does not give more or less information).</p>   <p>Let’s also suppose that we have a cleaned up graph like one after step 1) in the bisection algorithm above. This means that we can measure the information we get in terms of number of commit we can remove from the graph..</p>   <p>And let’s take a commit X in the graph.</p>   <p>If X is found to be \"good\", then we know that its ancestors are all \"good\", so we want to say that:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>information_if_good(X) = number_of_ancestors(X)  (TRUE)</pre> </div> </div>  <p>And this is true because at step 1) b) we remove the ancestors of the \"good\" commits.</p>   <p>If X is found to be \"bad\", then we know that its descendants are all \"bad\", so we want to say that:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>information_if_bad(X) = number_of_descendants(X)  (WRONG)</pre> </div> </div>  <p>But this is wrong because at step 1) a) we keep only the ancestors of the bad commit. So we get more information when a commit is marked as \"bad\", because we also know that the ancestors of the previous \"bad\" commit that are not ancestors of the new \"bad\" commit are not the first bad commit. We don’t know if they are good or bad, but we know that they are not the first bad commit because they are not ancestor of the new \"bad\" commit.</p>   <p>So when a commit is marked as \"bad\" we know we can remove all the commits in the graph except those that are ancestors of the new \"bad\" commit. This means that:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>information_if_bad(X) = N - number_of_ancestors(X)  (TRUE)</pre> </div> </div>  <p>where N is the number of commits in the (cleaned up) graph.</p>   <p>So in the end this means that to find the best bisection commits we should maximize the function:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>f(X) = min(number_of_ancestors(X), N - number_of_ancestors(X))</pre> </div> </div>  <p>And this is nice because at step 2) we compute number_of_ancestors(X) and so at step 3) we compute f(X).</p>   <p>Let’s take the following graph as an example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>            G-H-I-J\n           /       \\\nA-B-C-D-E-F         O\n           \\       /\n            K-L-M-N</pre> </div> </div>  <p>If we compute the following non optimal function on it:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>g(X) = min(number_of_ancestors(X), number_of_descendants(X))</pre> </div> </div>  <p>we get:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>            4 3 2 1\n            G-H-I-J\n1 2 3 4 5 6/       \\0\nA-B-C-D-E-F         O\n           \\       /\n            K-L-M-N\n            4 3 2 1</pre> </div> </div>  <p>but with the algorithm used by git bisect we get:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>            7 7 6 5\n            G-H-I-J\n1 2 3 4 5 6/       \\0\nA-B-C-D-E-F         O\n           \\       /\n            K-L-M-N\n            7 7 6 5</pre> </div> </div>  <p>So we chose G, H, K or L as the best bisection point, which is better than F. Because if for example L is bad, then we will know not only that L, M and N are bad but also that G, H, I and J are not the first bad commit (since we suppose that there is only one first bad commit and it must be an ancestor of L).</p>   <p>So the current algorithm seems to be the best possible given what we initially supposed.</p>  </div> <div class=\"sect2\"> <h3 id=\"_skip_algorithm\">Skip algorithm</h3>  <p>When some commits have been skipped (using \"git bisect skip\"), then the bisection algorithm is the same for step 1) to 3). But then we use roughly the following steps:</p>   <p>6) sort the commit by decreasing associated value</p>   <p>7) if the first commit has not been skipped, we can return it and stop here</p>   <p>8) otherwise filter out all the skipped commits in the sorted list</p>   <p>9) use a pseudo random number generator (PRNG) to generate a random number between 0 and 1</p>   <p>10) multiply this random number with its square root to bias it toward 0</p>   <p>11) multiply the result by the number of commits in the filtered list to get an index into this list</p>   <p>12) return the commit at the computed index</p>  </div> <div class=\"sect2\"> <h3 id=\"_skip_algorithm_discussed\">Skip algorithm discussed</h3>  <p>After step 7) (in the skip algorithm), we could check if the second commit has been skipped and return it if it is not the case. And in fact that was the algorithm we used from when \"git bisect skip\" was developed in Git version 1.5.4 (released on February 1st 2008) until Git version 1.6.4 (released July 29th 2009).</p>   <p>But Ingo Molnar and H. Peter Anvin (another well known linux kernel developer) both complained that sometimes the best bisection points all happened to be in an area where all the commits are untestable. And in this case the user was asked to test many untestable commits, which could be very inefficient.</p>   <p>Indeed untestable commits are often untestable because a breakage was introduced at one time, and that breakage was fixed only after many other commits were introduced.</p>   <p>This breakage is of course most of the time unrelated to the breakage we are trying to locate in the commit graph. But it prevents us to know if the interesting \"bad behavior\" is present or not.</p>   <p>So it is a fact that commits near an untestable commit have a high probability of being untestable themselves. And the best bisection commits are often found together too (due to the bisection algorithm).</p>   <p>This is why it is a bad idea to just chose the next best unskipped bisection commit when the first one has been skipped.</p>   <p>We found that most commits on the graph may give quite a lot of information when they are tested. And the commits that will not on average give a lot of information are the one near the good and bad commits.</p>   <p>So using a PRNG with a bias to favor commits away from the good and bad commits looked like a good choice.</p>   <p>One obvious improvement to this algorithm would be to look for a commit that has an associated value near the one of the best bisection commit, and that is on another branch, before using the PRNG. Because if such a commit exists, then it is not very likely to be untestable too, so it will probably give more information than a nearly randomly chosen one.</p>  </div> <div class=\"sect2\"> <h3 id=\"_checking_merge_bases\">Checking merge bases</h3>  <p>There is another tweak in the bisection algorithm that has not been described in the \"bisection algorithm\" above.</p>   <p>We supposed in the previous examples that the \"good\" commits were ancestors of the \"bad\" commit. But this is not a requirement of \"git bisect\".</p>   <p>Of course the \"bad\" commit cannot be an ancestor of a \"good\" commit, because the ancestors of the good commits are supposed to be \"good\". And all the \"good\" commits must be related to the bad commit. They cannot be on a branch that has no link with the branch of the \"bad\" commit. But it is possible for a good commit to be related to a bad commit and yet not be neither one of its ancestor nor one of its descendants.</p>   <p>For example, there can be a \"main\" branch, and a \"dev\" branch that was forked of the main branch at a commit named \"D\" like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>A-B-C-D-E-F-G  &lt;--main\n       \\\n        H-I-J  &lt;--dev</pre> </div> </div>  <p>The commit \"D\" is called a \"merge base\" for branch \"main\" and \"dev\" because it’s the best common ancestor for these branches for a merge.</p>   <p>Now let’s suppose that commit J is bad and commit G is good and that we apply the bisection algorithm like it has been previously described.</p>   <p>As described in step 1) b) of the bisection algorithm, we remove all the ancestors of the good commits because they are supposed to be good too.</p>   <p>So we would be left with only:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>H-I-J</pre> </div> </div>  <p>But what happens if the first bad commit is \"B\" and if it has been fixed in the \"main\" branch by commit \"F\"?</p>   <p>The result of such a bisection would be that we would find that H is the first bad commit, when in fact it’s B. So that would be wrong!</p>   <p>And yes it can happen in practice that people working on one branch are not aware that people working on another branch fixed a bug! It could also happen that F fixed more than one bug or that it is a revert of some big development effort that was not ready to be released.</p>   <p>In fact development teams often maintain both a development branch and a maintenance branch, and it would be quite easy for them if \"git bisect\" just worked when they want to bisect a regression on the development branch that is not on the maintenance branch. They should be able to start bisecting using:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect start dev main</pre> </div> </div>  <p>To enable that additional nice feature, when a bisection is started and when some good commits are not ancestors of the bad commit, we first compute the merge bases between the bad and the good commits and we chose these merge bases as the first commits that will be checked out and tested.</p>   <p>If it happens that one merge base is bad, then the bisection process is stopped with a message like:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>The merge base BBBBBB is bad.\nThis means the bug has been fixed between BBBBBB and [GGGGGG,...].</pre> </div> </div>  <p>where BBBBBB is the sha1 hash of the bad merge base and [GGGGGG,…​] is a comma separated list of the sha1 of the good commits.</p>   <p>If some of the merge bases are skipped, then the bisection process continues, but the following message is printed for each skipped merge base:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>Warning: the merge base between BBBBBB and [GGGGGG,...] must be skipped.\nSo we cannot be sure the first bad commit is between MMMMMM and BBBBBB.\nWe continue anyway.</pre> </div> </div>  <p>where BBBBBB is the sha1 hash of the bad commit, MMMMMM is the sha1 hash of the merge base that is skipped and [GGGGGG,…​] is a comma separated list of the sha1 of the good commits.</p>   <p>So if there is no bad merge base, the bisection process continues as usual after this step.</p>  </div>\n</div>   <h2 id=\"_best_bisecting_practices\">Best bisecting practices</h2> <div class=\"sectionbody\">\n<div class=\"sect2\"> <h3 id=\"_using_test_suites_and_git_bisect_together\">Using test suites and git bisect together</h3>  <p>If you both have a test suite and use git bisect, then it becomes less important to check that all tests pass after each commit. Though of course it is probably a good idea to have some checks to avoid breaking too many things because it could make bisecting other bugs more difficult.</p>   <p>You can focus your efforts to check at a few points (for example rc and beta releases) that all the T test cases pass for all the N configurations. And when some tests don’t pass you can use \"git bisect\" (or better \"git bisect run\"). So you should perform roughly:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>c * N * T + b * M * log2(M) tests</pre> </div> </div>  <p>where c is the number of rounds of test (so a small constant) and b is the ratio of bug per commit (hopefully a small constant too).</p>   <p>So of course it’s much better as it’s O(N * T) vs O(N * T * M) if you would test everything after each commit.</p>   <p>This means that test suites are good to prevent some bugs from being committed and they are also quite good to tell you that you have some bugs. But they are not so good to tell you where some bugs have been introduced. To tell you that efficiently, git bisect is needed.</p>   <p>The other nice thing with test suites, is that when you have one, you already know how to test for bad behavior. So you can use this knowledge to create a new test case for \"git bisect\" when it appears that there is a regression. So it will be easier to bisect the bug and fix it. And then you can add the test case you just created to your test suite.</p>   <p>So if you know how to create test cases and how to bisect, you will be subject to a virtuous circle:</p>   <p>more tests ⇒ easier to create tests ⇒ easier to bisect ⇒ more tests</p>   <p>So test suites and \"git bisect\" are complementary tools that are very powerful and efficient when used together.</p>  </div> <div class=\"sect2\"> <h3 id=\"_bisecting_build_failures\">Bisecting build failures</h3>  <p>You can very easily automatically bisect broken builds using something like:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect start BAD GOOD\n$ git bisect run make</pre> </div> </div> </div> <div class=\"sect2\"> <h3 id=\"_passing_sh_c_some_commands_to_git_bisect_run\">Passing sh -c \"some commands\" to \"git bisect run\"</h3>  <p>For example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect run sh -c \"make || exit 125; ./my_app | grep 'good output'\"</pre> </div> </div>  <p>On the other hand if you do this often, then it can be worth having scripts to avoid too much typing.</p>  </div> <div class=\"sect2\"> <h3 id=\"_finding_performance_regressions\">Finding performance regressions</h3>  <p>Here is an example script that comes slightly modified from a real world script used by Junio Hamano <a href=\"#4\">[4]</a>.</p>   <p>This script can be passed to \"git bisect run\" to find the commit that introduced a performance regression:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>#!/bin/sh\n\n# Build errors are not what I am interested in.\nmake my_app || exit 255\n\n# We are checking if it stops in a reasonable amount of time, so\n# let it run in the background...\n\n./my_app &gt;log 2&gt;&amp;1 &amp;\n\n# ... and grab its process ID.\npid=$!\n\n# ... and then wait for sufficiently long.\nsleep $NORMAL_TIME\n\n# ... and then see if the process is still there.\nif kill -0 $pid\nthen\n        # It is still running -- that is bad.\n        kill $pid; sleep 1; kill $pid;\n        exit 1\nelse\n        # It has already finished (the $pid process was no more),\n        # and we are happy.\n        exit 0\nfi</pre> </div> </div> </div> <div class=\"sect2\"> <h3 id=\"_following_general_best_practices\">Following general best practices</h3>  <p>It is obviously a good idea not to have commits with changes that knowingly break things, even if some other commits later fix the breakage.</p>   <p>It is also a good idea when using any VCS to have only one small logical change in each commit.</p>   <p>The smaller the changes in your commit, the most effective \"git bisect\" will be. And you will probably need \"git bisect\" less in the first place, as small changes are easier to review even if they are only reviewed by the committer.</p>   <p>Another good idea is to have good commit messages. They can be very helpful to understand why some changes were made.</p>   <p>These general best practices are very helpful if you bisect often.</p>  </div> <div class=\"sect2\"> <h3 id=\"_avoiding_bug_prone_merges\">Avoiding bug prone merges</h3>  <p>First merges by themselves can introduce some regressions even when the merge needs no source code conflict resolution. This is because a semantic change can happen in one branch while the other branch is not aware of it.</p>   <p>For example one branch can change the semantic of a function while the other branch add more calls to the same function.</p>   <p>This is made much worse if many files have to be fixed to resolve conflicts. That’s why such merges are called \"evil merges\". They can make regressions very difficult to track down. It can even be misleading to know the first bad commit if it happens to be such a merge, because people might think that the bug comes from bad conflict resolution when it comes from a semantic change in one branch.</p>   <p>Anyway \"git rebase\" can be used to linearize history. This can be used either to avoid merging in the first place. Or it can be used to bisect on a linear history instead of the non linear one, as this should give more information in case of a semantic change in one branch.</p>   <p>Merges can be also made simpler by using smaller branches or by using many topic branches instead of only long version related branches.</p>   <p>And testing can be done more often in special integration branches like linux-next for the linux kernel.</p>  </div> <div class=\"sect2\"> <h3 id=\"_adapting_your_work_flow\">Adapting your work-flow</h3>  <p>A special work-flow to process regressions can give great results.</p>   <p>Here is an example of a work-flow used by Andreas Ericsson:</p>  <div class=\"ulist\"> <ul> <li> <p>write, in the test suite, a test script that exposes the regression</p> </li> <li> <p>use \"git bisect run\" to find the commit that introduced it</p> </li> <li> <p>fix the bug that is often made obvious by the previous step</p> </li> <li> <p>commit both the fix and the test script (and if needed more tests)</p> </li> </ul> </div>  <p>And here is what Andreas said about this work-flow <a href=\"#5\">[5]</a>:</p>  <div class=\"quoteblock\"> <blockquote>  <p>To give some hard figures, we used to have an average report-to-fix cycle of 142.6 hours (according to our somewhat weird bug-tracker which just measures wall-clock time). Since we moved to Git, we’ve lowered that to 16.2 hours. Primarily because we can stay on top of the bug fixing now, and because everyone’s jockeying to get to fix bugs (we’re quite proud of how lazy we are to let Git find the bugs for us). Each new release results in ~40% fewer bugs (almost certainly due to how we now feel about writing tests).</p>  </blockquote> </div>  <p>Clearly this work-flow uses the virtuous circle between test suites and \"git bisect\". In fact it makes it the standard procedure to deal with regression.</p>   <p>In other messages Andreas says that they also use the \"best practices\" described above: small logical commits, topic branches, no evil merge,…​ These practices all improve the bisectability of the commit graph, by making it easier and more useful to bisect.</p>   <p>So a good work-flow should be designed around the above points. That is making bisecting easier, more useful and standard.</p>  </div> <div class=\"sect2\"> <h3 id=\"_involving_qa_people_and_if_possible_end_users\">Involving QA people and if possible end users</h3>  <p>One nice about \"git bisect\" is that it is not only a developer tool. It can effectively be used by QA people or even end users (if they have access to the source code or if they can get access to all the builds).</p>   <p>There was a discussion at one point on the linux kernel mailing list of whether it was ok to always ask end user to bisect, and very good points were made to support the point of view that it is ok.</p>   <p>For example David Miller wrote <a href=\"#6\">[6]</a>:</p>  <div class=\"quoteblock\"> <blockquote>  <p>What people don’t get is that this is a situation where the \"end node principle\" applies. When you have limited resources (here: developers) you don’t push the bulk of the burden upon them. Instead you push things out to the resource you have a lot of, the end nodes (here: users), so that the situation actually scales.</p>  </blockquote> </div>  <p>This means that it is often \"cheaper\" if QA people or end users can do it.</p>   <p>What is interesting too is that end users that are reporting bugs (or QA people that reproduced a bug) have access to the environment where the bug happens. So they can often more easily reproduce a regression. And if they can bisect, then more information will be extracted from the environment where the bug happens, which means that it will be easier to understand and then fix the bug.</p>   <p>For open source projects it can be a good way to get more useful contributions from end users, and to introduce them to QA and development activities.</p>  </div> <div class=\"sect2\"> <h3 id=\"_using_complex_scripts\">Using complex scripts</h3>  <p>In some cases like for kernel development it can be worth developing complex scripts to be able to fully automate bisecting.</p>   <p>Here is what Ingo Molnar says about that <a href=\"#7\">[7]</a>:</p>  <div class=\"quoteblock\"> <blockquote>  <p>i have a fully automated bootup-hang bisection script. It is based on \"git-bisect run\". I run the script, it builds and boots kernels fully automatically, and when the bootup fails (the script notices that via the serial log, which it continuously watches - or via a timeout, if the system does not come up within 10 minutes it’s a \"bad\" kernel), the script raises my attention via a beep and i power cycle the test box. (yeah, i should make use of a managed power outlet to 100% automate it)</p>  </blockquote> </div> </div> <div class=\"sect2\"> <h3 id=\"_combining_test_suites_git_bisect_and_other_systems_together\">Combining test suites, git bisect and other systems together</h3>  <p>We have seen that test suites an git bisect are very powerful when used together. It can be even more powerful if you can combine them with other systems.</p>   <p>For example some test suites could be run automatically at night with some unusual (or even random) configurations. And if a regression is found by a test suite, then \"git bisect\" can be automatically launched, and its result can be emailed to the author of the first bad commit found by \"git bisect\", and perhaps other people too. And a new entry in the bug tracking system could be automatically created too.</p>  </div>\n</div>   <h2 id=\"_the_future_of_bisecting\">The future of bisecting</h2> <div class=\"sectionbody\">\n<div class=\"sect2\"> <h3 id=\"__git_replace\">\"git replace\"</h3>  <p>We saw earlier that \"git bisect skip\" is now using a PRNG to try to avoid areas in the commit graph where commits are untestable. The problem is that sometimes the first bad commit will be in an untestable area.</p>   <p>To simplify the discussion we will suppose that the untestable area is a simple string of commits and that it was created by a breakage introduced by one commit (let’s call it BBC for bisect breaking commit) and later fixed by another one (let’s call it BFC for bisect fixing commit).</p>   <p>For example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>...-Y-BBC-X1-X2-X3-X4-X5-X6-BFC-Z-...</pre> </div> </div>  <p>where we know that Y is good and BFC is bad, and where BBC and X1 to X6 are untestable.</p>   <p>In this case if you are bisecting manually, what you can do is create a special branch that starts just before the BBC. The first commit in this branch should be the BBC with the BFC squashed into it. And the other commits in the branch should be the commits between BBC and BFC rebased on the first commit of the branch and then the commit after BFC also rebased on.</p>   <p>For example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>      (BBC+BFC)-X1'-X2'-X3'-X4'-X5'-X6'-Z'\n     /\n...-Y-BBC-X1-X2-X3-X4-X5-X6-BFC-Z-...</pre> </div> </div>  <p>where commits quoted with ' have been rebased.</p>   <p>You can easily create such a branch with Git using interactive rebase.</p>   <p>For example using:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git rebase -i Y Z</pre> </div> </div>  <p>and then moving BFC after BBC and squashing it.</p>   <p>After that you can start bisecting as usual in the new branch and you should eventually find the first bad commit.</p>   <p>For example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git bisect start Z' Y</pre> </div> </div>  <p>If you are using \"git bisect run\", you can use the same manual fix up as above, and then start another \"git bisect run\" in the special branch. Or as the \"git bisect\" man page says, the script passed to \"git bisect run\" can apply a patch before it compiles and test the software <a href=\"#8\">[8]</a>. The patch should turn a current untestable commits into a testable one. So the testing will result in \"good\" or \"bad\" and \"git bisect\" will be able to find the first bad commit. And the script should not forget to remove the patch once the testing is done before exiting from the script.</p>   <p>(Note that instead of a patch you can use \"git cherry-pick BFC\" to apply the fix, and in this case you should use \"git reset --hard HEAD^\" to revert the cherry-pick after testing and before returning from the script.)</p>   <p>But the above ways to work around untestable areas are a little bit clunky. Using special branches is nice because these branches can be shared by developers like usual branches, but the risk is that people will get many such branches. And it disrupts the normal \"git bisect\" work-flow. So, if you want to use \"git bisect run\" completely automatically, you have to add special code in your script to restart bisection in the special branches.</p>   <p>Anyway one can notice in the above special branch example that the Z' and Z commits should point to the same source code state (the same \"tree\" in git parlance). That’s because Z' result from applying the same changes as Z just in a slightly different order.</p>   <p>So if we could just \"replace\" Z by Z' when we bisect, then we would not need to add anything to a script. It would just work for anyone in the project sharing the special branches and the replacements.</p>   <p>With the example above that would give:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>      (BBC+BFC)-X1'-X2'-X3'-X4'-X5'-X6'-Z'-...\n     /\n...-Y-BBC-X1-X2-X3-X4-X5-X6-BFC-Z</pre> </div> </div>  <p>That’s why the \"git replace\" command was created. Technically it stores replacements \"refs\" in the \"refs/replace/\" hierarchy. These \"refs\" are like branches (that are stored in \"refs/heads/\") or tags (that are stored in \"refs/tags\"), and that means that they can automatically be shared like branches or tags among developers.</p>   <p>\"git replace\" is a very powerful mechanism. It can be used to fix commits in already released history, for example to change the commit message or the author. And it can also be used instead of git \"grafts\" to link a repository with another old repository.</p>   <p>In fact it’s this last feature that \"sold\" it to the Git community, so it is now in the \"master\" branch of Git’s Git repository and it should be released in Git 1.6.5 in October or November 2009.</p>   <p>One problem with \"git replace\" is that currently it stores all the replacements refs in \"refs/replace/\", but it would be perhaps better if the replacement refs that are useful only for bisecting would be in \"refs/replace/bisect/\". This way the replacement refs could be used only for bisecting, while other refs directly in \"refs/replace/\" would be used nearly all the time.</p>  </div> <div class=\"sect2\"> <h3 id=\"_bisecting_sporadic_bugs\">Bisecting sporadic bugs</h3>  <p>Another possible improvement to \"git bisect\" would be to optionally add some redundancy to the tests performed so that it would be more reliable when tracking sporadic bugs.</p>   <p>This has been requested by some kernel developers because some bugs called sporadic bugs do not appear in all the kernel builds because they are very dependent on the compiler output.</p>   <p>The idea is that every 3 test for example, \"git bisect\" could ask the user to test a commit that has already been found to be \"good\" or \"bad\" (because one of its descendants or one of its ancestors has been found to be \"good\" or \"bad\" respectively). If it happens that a commit has been previously incorrectly classified then the bisection can be aborted early, hopefully before too many mistakes have been made. Then the user will have to look at what happened and then restart the bisection using a fixed bisect log.</p>   <p>There is already a project called BBChop created by Ealdwulf Wuffinga on Github that does something like that using Bayesian Search Theory <a href=\"#9\">[9]</a>:</p>  <div class=\"quoteblock\"> <blockquote>  <p>BBChop is like <code>git bisect</code> (or equivalent), but works when your bug is intermittent. That is, it works in the presence of false negatives (when a version happens to work this time even though it contains the bug). It assumes that there are no false positives (in principle, the same approach would work, but adding it may be non-trivial).</p>  </blockquote> </div>  <p>But BBChop is independent of any VCS and it would be easier for Git users to have something integrated in Git.</p>  </div>\n</div>   <h2 id=\"_conclusion\">Conclusion</h2> <div class=\"sectionbody\"> <p>We have seen that regressions are an important problem, and that \"git bisect\" has nice features that complement very well practices and other tools, especially test suites, that are generally used to fight regressions. But it might be needed to change some work-flows and (bad) habits to get the most out of it.</p>   <p>Some improvements to the algorithms inside \"git bisect\" are possible and some new features could help in some cases, but overall \"git bisect\" works already very well, is used a lot, and is already very useful. To back up that last claim, let’s give the final word to Ingo Molnar when he was asked by the author how much time does he think \"git bisect\" saves him when he uses it:</p>  <div class=\"quoteblock\"> <blockquote>  <p>a <code>lot</code>.</p>   <p>About ten years ago did i do my first <code>bisection</code> of a Linux patch queue. That was prior the Git (and even prior the BitKeeper) days. I literally days spent sorting out patches, creating what in essence were standalone commits that i guessed to be related to that bug.</p>   <p>It was a tool of absolute last resort. I’d rather spend days looking at printk output than do a manual <code>patch bisection</code>.</p>   <p>With Git bisect it’s a breeze: in the best case i can get a ~15 step kernel bisection done in 20-30 minutes, in an automated way. Even with manual help or when bisecting multiple, overlapping bugs, it’s rarely more than an hour.</p>   <p>In fact it’s invaluable because there are bugs i would never even <code>try</code> to debug if it wasn’t for git bisect. In the past there were bug patterns that were immediately hopeless for me to debug - at best i could send the crash/bug signature to lkml and hope that someone else can think of something.</p>   <p>And even if a bisection fails today it tells us something valuable about the bug: that it’s non-deterministic - timing or kernel image layout dependent.</p>   <p>So git bisect is unconditional goodness - and feel free to quote that ;-)</p>  </blockquote> </div>\n</div>   <h2 id=\"_acknowledgments\">Acknowledgments</h2> <div class=\"sectionbody\"> <p>Many thanks to Junio Hamano for his help in reviewing this paper, for reviewing the patches I sent to the Git mailing list, for discussing some ideas and helping me improve them, for improving \"git bisect\" a lot and for his awesome work in maintaining and developing Git.</p>   <p>Many thanks to Ingo Molnar for giving me very useful information that appears in this paper, for commenting on this paper, for his suggestions to improve \"git bisect\" and for evangelizing \"git bisect\" on the linux kernel mailing lists.</p>   <p>Many thanks to Linus Torvalds for inventing, developing and evangelizing \"git bisect\", Git and Linux.</p>   <p>Many thanks to the many other great people who helped one way or another when I worked on Git, especially to Andreas Ericsson, Johannes Schindelin, H. Peter Anvin, Daniel Barkalow, Bill Lear, John Hawley, Shawn O. Pierce, Jeff King, Sam Vilain, Jon Seymour.</p>   <p>Many thanks to the Linux-Kongress program committee for choosing the author to given a talk and for publishing this paper.</p> </div>   <h2 id=\"_references\">References</h2> <div class=\"sectionbody\"><div class=\"ulist\"> <ul> <li> <p>[1] <a href=\"http://www.nist.gov/public_affairs/releases/n02-10.htm\"><em>Software Errors Cost U.S. Economy $59.5 Billion Annually</em>. Nist News Release.</a></p> </li> <li> <p>[2] <a href=\"http://java.sun.com/docs/codeconv/html/CodeConventions.doc.html#16712\"><em>Code Conventions for the Java Programming Language</em>. Sun Microsystems.</a></p> </li> <li> <p>[3] <a href=\"http://en.wikipedia.org/wiki/Software_maintenance\"><em>Software maintenance</em>. Wikipedia.</a></p> </li> <li> <p>[4] <a href=\"http://article.gmane.org/gmane.comp.version-control.git/45195/\">Junio C Hamano. <em>Automated bisect success story</em>. Gmane.</a></p> </li> <li> <p>[5] <a href=\"http://lwn.net/Articles/317154/\">Christian Couder. <em>Fully automated bisecting with \"git bisect run\"</em>. LWN.net.</a></p> </li> <li> <p>[6] <a href=\"http://lwn.net/Articles/277872/\">Jonathan Corbet. <em>Bisection divides users and developers</em>. LWN.net.</a></p> </li> <li> <p>[7] <a href=\"http://article.gmane.org/gmane.linux.scsi/36652/\">Ingo Molnar. <em>Re: BUG 2.6.23-rc3 can’t see sd partitions on Alpha</em>. Gmane.</a></p> </li> <li> <p>[8] <a href=\"http://www.kernel.org/pub/software/scm/git/docs/git-bisect.html\">Junio C Hamano and the git-list. <em>git-bisect(1) Manual Page</em>. Linux Kernel Archives.</a></p> </li> <li> <p>[9] <a href=\"http://github.com/Ealdwulf/bbchop\">Ealdwulf. <em>bbchop</em>. GitHub.</a></p> </li> </ul> </div></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-bisect-lk2009.html\" class=\"_attribution-link\">https://git-scm.com/docs/git-bisect-lk2009.html</a>\n  </p>\n</div>\n","git-check-ignore":"<h1>git-check-ignore</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-check-ignore - Debug gitignore / exclude files</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git check-ignore [options] pathname…​\ngit check-ignore [options] --stdin</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>For each pathname given via the command-line or from a file via <code>--stdin</code>, check whether the file is excluded by .gitignore (or other input files to the exclude mechanism) and output the path if it is excluded.</p>   <p>By default, tracked files are not shown at all since they are not subject to exclude rules; but see ‘--no-index’.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-q, --quiet</dt> <dd> <p>Don’t output anything, just set exit status. This is only valid with a single pathname.</p> </dd> <dt class=\"hdlist1\">-v, --verbose</dt> <dd> <p>Also output details about the matching pattern (if any) for each given pathname. For precedence rules within and between exclude sources, see <a href=\"gitignore\">gitignore[5]</a>.</p> </dd> <dt class=\"hdlist1\">--stdin</dt> <dd> <p>Read pathnames from the standard input, one per line, instead of from the command-line.</p> </dd> <dt class=\"hdlist1\">-z</dt> <dd> <p>The output format is modified to be machine-parseable (see below). If <code>--stdin</code> is also given, input paths are separated with a NUL character instead of a linefeed character.</p> </dd> <dt class=\"hdlist1\">-n, --non-matching</dt> <dd> <p>Show given paths which don’t match any pattern. This only makes sense when <code>--verbose</code> is enabled, otherwise it would not be possible to distinguish between paths which match a pattern and those which don’t.</p> </dd> <dt class=\"hdlist1\">--no-index</dt> <dd> <p>Don’t look in the index when undertaking the checks. This can be used to debug why a path became tracked by e.g. <code>git add .</code> and was not ignored by the rules as expected by the user or when developing patterns including negation to match a path previously added with <code>git add -f</code>.</p> </dd> </dl> </div></div>   <h2 id=\"_output\">Output</h2> <div class=\"sectionbody\"> <p>By default, any of the given pathnames which match an ignore pattern will be output, one per line. If no pattern matches a given path, nothing will be output for that path; this means that path will not be ignored.</p>   <p>If <code>--verbose</code> is specified, the output is a series of lines of the form:</p>   <p>&lt;source&gt; &lt;COLON&gt; &lt;linenum&gt; &lt;COLON&gt; &lt;pattern&gt; &lt;HT&gt; &lt;pathname&gt;</p>   <p>&lt;pathname&gt; is the path of a file being queried, &lt;pattern&gt; is the matching pattern, &lt;source&gt; is the pattern’s source file, and &lt;linenum&gt; is the line number of the pattern within that source. If the pattern contained a <code>!</code> prefix or <code>/</code> suffix, it will be preserved in the output. &lt;source&gt; will be an absolute path when referring to the file configured by <code>core.excludesFile</code>, or relative to the repository root when referring to <code>.git/info/exclude</code> or a per-directory exclude file.</p>   <p>If <code>-z</code> is specified, the pathnames in the output are delimited by the null character; if <code>--verbose</code> is also specified then null characters are also used instead of colons and hard tabs:</p>   <p>&lt;source&gt; &lt;NULL&gt; &lt;linenum&gt; &lt;NULL&gt; &lt;pattern&gt; &lt;NULL&gt; &lt;pathname&gt; &lt;NULL&gt;</p>   <p>If <code>-n</code> or <code>--non-matching</code> are specified, non-matching pathnames will also be output, in which case all fields in each output record except for &lt;pathname&gt; will be empty. This can be useful when running non-interactively, so that files can be incrementally streamed to STDIN of a long-running check-ignore process, and for each of these files, STDOUT will indicate whether that file matched a pattern or not. (Without this option, it would be impossible to tell whether the absence of output for a given file meant that it didn’t match any pattern, or that the output hadn’t been generated yet.)</p>   <p>Buffering happens as documented under the <code>GIT_FLUSH</code> option in <a href=\"git\">git[1]</a>. The caller is responsible for avoiding deadlocks caused by overfilling an input buffer or reading from an empty output buffer.</p> </div>   <h2 id=\"_exit_status\">Exit status</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">0</dt> <dd> <p>One or more of the provided paths is ignored.</p> </dd> <dt class=\"hdlist1\">1</dt> <dd> <p>None of the provided paths are ignored.</p> </dd> <dt class=\"hdlist1\">128</dt> <dd> <p>A fatal error was encountered.</p> </dd> </dl> </div></div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"gitignore\">gitignore[5]</a> <a href=\"git-config\">git-config[1]</a> <a href=\"git-ls-files\">git-ls-files[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-check-ignore\" class=\"_attribution-link\">https://git-scm.com/docs/git-check-ignore</a>\n  </p>\n</div>\n","git-credential-cache":"<h1>git-credential-cache</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-credential-cache - Helper to temporarily store passwords in memory</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"listingblock\"> <div class=\"content\"> <pre>git config credential.helper 'cache [options]'</pre> </div> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>This command caches credentials in memory for use by future Git programs. The stored credentials never touch the disk, and are forgotten after a configurable timeout. The cache is accessible over a Unix domain socket, restricted to the current user by filesystem permissions.</p>   <p>You probably don’t want to invoke this command directly; it is meant to be used as a credential helper by other parts of Git. See <a href=\"gitcredentials\">gitcredentials[7]</a> or <code>EXAMPLES</code> below.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--timeout &lt;seconds&gt;</dt> <dd> <p>Number of seconds to cache credentials (default: 900).</p> </dd> <dt class=\"hdlist1\">--socket &lt;path&gt;</dt> <dd> <p>Use <code>&lt;path&gt;</code> to contact a running cache daemon (or start a new cache daemon if one is not started). Defaults to <code>~/.git-credential-cache/socket</code>. If your home directory is on a network-mounted filesystem, you may need to change this to a local filesystem. You must specify an absolute path.</p> </dd> </dl> </div></div>   <h2 id=\"_controlling_the_daemon\">Controlling the daemon</h2> <div class=\"sectionbody\"> <p>If you would like the daemon to exit early, forgetting all cached credentials before their timeout, you can issue an <code>exit</code> action:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>git credential-cache exit</pre> </div> </div>\n</div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"> <p>The point of this helper is to reduce the number of times you must type your username or password. For example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git config credential.helper cache\n$ git push http://example.com/repo.git\nUsername: &lt;type your username&gt;\nPassword: &lt;type your password&gt;\n\n[work for 5 more minutes]\n$ git push http://example.com/repo.git\n[your credentials are used automatically]</pre> </div> </div>  <p>You can provide options via the credential.helper configuration variable (this example drops the cache time to 5 minutes):</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git config credential.helper 'cache --timeout=300'</pre> </div> </div>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-credential-cache\" class=\"_attribution-link\">https://git-scm.com/docs/git-credential-cache</a>\n  </p>\n</div>\n","git-remote-ext":"<h1>git-remote-ext</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-remote-ext - Bridge smart transport to external command.</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git remote add &lt;nick&gt; \"ext::&lt;command&gt;[ &lt;arguments&gt;…​]\"</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>This remote helper uses the specified <code>&lt;command&gt;</code> to connect to a remote Git server.</p>   <p>Data written to stdin of the specified <code>&lt;command&gt;</code> is assumed to be sent to a git:// server, git-upload-pack, git-receive-pack or git-upload-archive (depending on situation), and data read from stdout of &lt;command&gt; is assumed to be received from the same service.</p>   <p>Command and arguments are separated by an unescaped space.</p>   <p>The following sequences have a special meaning:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">'% '</dt> <dd> <p>Literal space in command or argument.</p> </dd> <dt class=\"hdlist1\"><em>%%</em></dt> <dd> <p>Literal percent sign.</p> </dd> <dt class=\"hdlist1\"><em>%s</em></dt> <dd> <p>Replaced with name (receive-pack, upload-pack, or upload-archive) of the service Git wants to invoke.</p> </dd> <dt class=\"hdlist1\"><em>%S</em></dt> <dd> <p>Replaced with long name (git-receive-pack, git-upload-pack, or git-upload-archive) of the service Git wants to invoke.</p> </dd> <dt class=\"hdlist1\">\n<em>%G</em> (must be the first characters in an argument)</dt> <dd> <p>This argument will not be passed to <code>&lt;command&gt;</code>. Instead, it will cause the helper to start by sending git:// service requests to the remote side with the service field set to an appropriate value and the repository field set to rest of the argument. Default is not to send such a request.</p>  <p>This is useful if remote side is git:// server accessed over some tunnel.</p>  </dd> <dt class=\"hdlist1\">\n<em>%V</em> (must be first characters in argument)</dt> <dd> <p>This argument will not be passed to <code>&lt;command&gt;</code>. Instead it sets the vhost field in the git:// service request (to rest of the argument). Default is not to send vhost in such request (if sent).</p> </dd> </dl> </div>\n</div>   <h2 id=\"_environment_variables\">Environment variables:</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">GIT_TRANSLOOP_DEBUG</dt> <dd> <p>If set, prints debugging information about various reads/writes.</p> </dd> </dl> </div></div>   <h2 id=\"_environment_variables_passed_to_command\">Environment variables passed to command:</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">GIT_EXT_SERVICE</dt> <dd> <p>Set to long name (git-upload-pack, etc…​) of service helper needs to invoke.</p> </dd> <dt class=\"hdlist1\">GIT_EXT_SERVICE_NOPREFIX</dt> <dd> <p>Set to long name (upload-pack, etc…​) of service helper needs to invoke.</p> </dd> </dl> </div></div>   <h2 id=\"_examples\">Examples:</h2> <div class=\"sectionbody\"> <p>This remote helper is transparently used by Git when you use commands such as \"git fetch &lt;URL&gt;\", \"git clone &lt;URL&gt;\", , \"git push &lt;URL&gt;\" or \"git remote add &lt;nick&gt; &lt;URL&gt;\", where &lt;URL&gt; begins with <code>ext::</code>. Examples:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">\"ext::ssh -i /home/foo/.ssh/somekey user@host.example %S <em>foo/repo</em>\"</dt> <dd> <p>Like host.example:foo/repo, but use /home/foo/.ssh/somekey as keypair and user as user on remote side. This avoids needing to edit .ssh/config.</p> </dd> <dt class=\"hdlist1\">\"ext::socat -t3600 - ABSTRACT-CONNECT:/git-server %G/somerepo\"</dt> <dd> <p>Represents repository with path /somerepo accessible over git protocol at abstract namespace address /git-server.</p> </dd> <dt class=\"hdlist1\">\"ext::git-server-alias foo %G/repo\"</dt> <dd> <p>Represents a repository with path /repo accessed using the helper program \"git-server-alias foo\". The path to the repository and type of request are not passed on the command line but as part of the protocol stream, as usual with git:// protocol.</p> </dd> <dt class=\"hdlist1\">\"ext::git-server-alias foo %G/repo %Vfoo\"</dt> <dd> <p>Represents a repository with path /repo accessed using the helper program \"git-server-alias foo\". The hostname for the remote server passed in the protocol stream will be \"foo\" (this allows multiple virtual Git servers to share a link-level address).</p> </dd> <dt class=\"hdlist1\">\"ext::git-server-alias foo %G/repo% with% spaces %Vfoo\"</dt> <dd> <p>Represents a repository with path <code>/repo with spaces</code> accessed using the helper program \"git-server-alias foo\". The hostname for the remote server passed in the protocol stream will be \"foo\" (this allows multiple virtual Git servers to share a link-level address).</p> </dd> <dt class=\"hdlist1\">\"ext::git-ssl foo.example /bar\"</dt> <dd> <p>Represents a repository accessed using the helper program \"git-ssl foo.example /bar\". The type of request can be determined by the helper using environment variables (see above).</p> </dd> </dl> </div>\n</div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"gitremote-helpers\">gitremote-helpers[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-remote-ext\" class=\"_attribution-link\">https://git-scm.com/docs/git-remote-ext</a>\n  </p>\n</div>\n","git-pack-refs":"<h1>git-pack-refs</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-pack-refs - Pack heads and tags for efficient repository access</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git pack-refs [--all] [--no-prune]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Traditionally, tips of branches and tags (collectively known as <code>refs</code>) were stored one file per ref in a (sub)directory under <code>$GIT_DIR/refs</code> directory. While many branch tips tend to be updated often, most tags and some branch tips are never updated. When a repository has hundreds or thousands of tags, this one-file-per-ref format both wastes storage and hurts performance.</p>   <p>This command is used to solve the storage and performance problem by storing the refs in a single file, <code>$GIT_DIR/packed-refs</code>. When a ref is missing from the traditional <code>$GIT_DIR/refs</code> directory hierarchy, it is looked up in this file and used if found.</p>   <p>Subsequent updates to branches always create new files under <code>$GIT_DIR/refs</code> directory hierarchy.</p>   <p>A recommended practice to deal with a repository with too many refs is to pack its refs with <code>--all</code> once, and occasionally run <code>git pack-refs</code>. Tags are by definition stationary and are not expected to change. Branch heads will be packed with the initial <code>pack-refs --all</code>, but only the currently active branch heads will become unpacked, and the next <code>pack-refs</code> (without <code>--all</code>) will leave them unpacked.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--all</dt> <dd> <p>The command by default packs all tags and refs that are already packed, and leaves other refs alone. This is because branches are expected to be actively developed and packing their tips does not help performance. This option causes branch tips to be packed as well. Useful for a repository with many branches of historical interests.</p> </dd> <dt class=\"hdlist1\">--no-prune</dt> <dd> <p>The command usually removes loose refs under <code>$GIT_DIR/refs</code> hierarchy after packing them. This option tells it not to.</p> </dd> </dl> </div></div>   <h2 id=\"_bugs\">Bugs</h2> <div class=\"sectionbody\"> <p>Older documentation written before the packed-refs mechanism was introduced may still say things like \".git/refs/heads/&lt;branch&gt; file exists\" when it means \"branch &lt;branch&gt; exists\".</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-pack-refs\" class=\"_attribution-link\">https://git-scm.com/docs/git-pack-refs</a>\n  </p>\n</div>\n","git-remote-fd":"<h1>git-remote-fd</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-remote-fd - Reflect smart transport stream back to caller</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"> <p>\"fd::&lt;infd&gt;[,&lt;outfd&gt;][/&lt;anything&gt;]\" (as URL)</p> </div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>This helper uses specified file descriptors to connect to a remote Git server. This is not meant for end users but for programs and scripts calling git fetch, push or archive.</p>   <p>If only &lt;infd&gt; is given, it is assumed to be a bidirectional socket connected to remote Git server (git-upload-pack, git-receive-pack or git-upload-achive). If both &lt;infd&gt; and &lt;outfd&gt; are given, they are assumed to be pipes connected to a remote Git server (&lt;infd&gt; being the inbound pipe and &lt;outfd&gt; being the outbound pipe.</p>   <p>It is assumed that any handshaking procedures have already been completed (such as sending service request for git://) before this helper is started.</p>   <p>&lt;anything&gt; can be any string. It is ignored. It is meant for providing information to user in the URL in case that URL is displayed in some context.</p> </div>   <h2 id=\"_environment_variables\">Environment variables</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">GIT_TRANSLOOP_DEBUG</dt> <dd> <p>If set, prints debugging information about various reads/writes.</p> </dd> </dl> </div></div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>git fetch fd::17 master</code></dt> <dd> <p>Fetch master, using file descriptor #17 to communicate with git-upload-pack.</p> </dd> <dt class=\"hdlist1\"><code>git fetch fd::17/foo master</code></dt> <dd> <p>Same as above.</p> </dd> <dt class=\"hdlist1\"><code>git push fd::7,8 master (as URL)</code></dt> <dd> <p>Push master, using file descriptor #7 to read data from git-receive-pack and file descriptor #8 to write data to same service.</p> </dd> <dt class=\"hdlist1\"><code>git push fd::7,8/bar master</code></dt> <dd> <p>Same as above.</p> </dd> </dl> </div></div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"gitremote-helpers\">gitremote-helpers[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-remote-fd\" class=\"_attribution-link\">https://git-scm.com/docs/git-remote-fd</a>\n  </p>\n</div>\n","git-remote-testgit":"<h1>git-remote-testgit</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-remote-testgit - Example remote-helper</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git clone testgit::&lt;source-repo&gt; [&lt;destination&gt;]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>This command is a simple remote-helper, that is used both as a testcase for the remote-helper functionality, and as an example to show remote-helper authors one possible implementation.</p>   <p>The best way to learn more is to read the comments and source code in <code>git-remote-testgit</code>.</p> </div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"gitremote-helpers\">gitremote-helpers[1]</a></p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-remote-testgit\" class=\"_attribution-link\">https://git-scm.com/docs/git-remote-testgit</a>\n  </p>\n</div>\n","git-name-rev":"<h1>git-name-rev</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-name-rev - Find symbolic names for given revs</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git name-rev [--tags] [--refs=&lt;pattern&gt;]\n               ( --all | --stdin | &lt;commit-ish&gt;…​ )</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Finds symbolic names suitable for human digestion for revisions given in any format parsable by <code>git rev-parse</code>.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--tags</dt> <dd> <p>Do not use branch names, but only tags to name the commits</p> </dd> <dt class=\"hdlist1\">--refs=&lt;pattern&gt;</dt> <dd> <p>Only use refs whose names match a given shell pattern. The pattern can be one of branch name, tag name or fully qualified ref name.</p> </dd> <dt class=\"hdlist1\">--all</dt> <dd> <p>List all commits reachable from all refs</p> </dd> <dt class=\"hdlist1\">--stdin</dt> <dd> <p>Transform stdin by substituting all the 40-character SHA-1 hexes (say $hex) with \"$hex ($rev_name)\". When used with --name-only, substitute with \"$rev_name\", omitting $hex altogether. Intended for the scripter’s use.</p> </dd> <dt class=\"hdlist1\">--name-only</dt> <dd> <p>Instead of printing both the SHA-1 and the name, print only the name. If given with --tags the usual tag prefix of \"tags/\" is also omitted from the name, matching the output of <code>git-describe</code> more closely.</p> </dd> <dt class=\"hdlist1\">--no-undefined</dt> <dd> <p>Die with error code != 0 when a reference is undefined, instead of printing <code>undefined</code>.</p> </dd> <dt class=\"hdlist1\">--always</dt> <dd> <p>Show uniquely abbreviated commit object as fallback.</p> </dd> </dl> </div></div>   <h2 id=\"_example\">Example</h2> <div class=\"sectionbody\"> <p>Given a commit, find out where it is relative to the local refs. Say somebody wrote you about that fantastic commit 33db5f4d9027a10e477ccf054b2c1ab94f74c85a. Of course, you look into the commit, but that only tells you what happened, but not the context.</p>   <p>Enter <code>git name-rev</code>:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>% git name-rev 33db5f4d9027a10e477ccf054b2c1ab94f74c85a\n33db5f4d9027a10e477ccf054b2c1ab94f74c85a tags/v0.99~940</pre> </div> </div>  <p>Now you are wiser, because you know that it happened 940 revisions before v0.99.</p>   <p>Another nice thing you can do is:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>% git log | git name-rev --stdin</pre> </div> </div>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-name-rev\" class=\"_attribution-link\">https://git-scm.com/docs/git-name-rev</a>\n  </p>\n</div>\n","git-ls-tree":"<h1>git-ls-tree</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-ls-tree - List the contents of a tree object</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git ls-tree [-d] [-r] [-t] [-l] [-z]\n            [--name-only] [--name-status] [--full-name] [--full-tree] [--abbrev[=&lt;n&gt;]]\n            &lt;tree-ish&gt; [&lt;path&gt;…​]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Lists the contents of a given tree object, like what \"/bin/ls -a\" does in the current working directory. Note that:</p>  <div class=\"ulist\"> <ul> <li> <p>the behaviour is slightly different from that of \"/bin/ls\" in that the <code>&lt;path&gt;</code> denotes just a list of patterns to match, e.g. so specifying directory name (without <code>-r</code>) will behave differently, and order of the arguments does not matter.</p> </li> <li> <p>the behaviour is similar to that of \"/bin/ls\" in that the <code>&lt;path&gt;</code> is taken as relative to the current working directory. E.g. when you are in a directory <code>sub</code> that has a directory <code>dir</code>, you can run <code>git ls-tree -r HEAD dir</code> to list the contents of the tree (that is <code>sub/dir</code> in <code>HEAD</code>). You don’t want to give a tree that is not at the root level (e.g. <code>git ls-tree -r HEAD:sub dir</code>) in this case, as that would result in asking for <code>sub/sub/dir</code> in the <code>HEAD</code> commit. However, the current working directory can be ignored by passing --full-tree option.</p> </li> </ul> </div>\n</div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">&lt;tree-ish&gt;</dt> <dd> <p>Id of a tree-ish.</p> </dd> <dt class=\"hdlist1\">-d</dt> <dd> <p>Show only the named tree entry itself, not its children.</p> </dd> <dt class=\"hdlist1\">-r</dt> <dd> <p>Recurse into sub-trees.</p> </dd> <dt class=\"hdlist1\">-t</dt> <dd> <p>Show tree entries even when going to recurse them. Has no effect if <code>-r</code> was not passed. <code>-d</code> implies <code>-t</code>.</p> </dd> <dt class=\"hdlist1\">-l</dt> <dt class=\"hdlist1\">--long</dt> <dd> <p>Show object size of blob (file) entries.</p> </dd> <dt class=\"hdlist1\">-z</dt> <dd> <p>\\0 line termination on output.</p> </dd> <dt class=\"hdlist1\">--name-only</dt> <dt class=\"hdlist1\">--name-status</dt> <dd> <p>List only filenames (instead of the \"long\" output), one per line.</p> </dd> <dt class=\"hdlist1\">--abbrev[=&lt;n&gt;]</dt> <dd> <p>Instead of showing the full 40-byte hexadecimal object lines, show only a partial prefix. Non default number of digits can be specified with --abbrev=&lt;n&gt;.</p> </dd> <dt class=\"hdlist1\">--full-name</dt> <dd> <p>Instead of showing the path names relative to the current working directory, show the full path names.</p> </dd> <dt class=\"hdlist1\">--full-tree</dt> <dd> <p>Do not limit the listing to the current working directory. Implies --full-name.</p> </dd> <dt class=\"hdlist1\">[&lt;path&gt;…​]</dt> <dd> <p>When paths are given, show them (note that this isn’t really raw pathnames, but rather a list of patterns to match). Otherwise implicitly uses the root level of the tree as the sole path argument.</p> </dd> </dl> </div></div>   <h2 id=\"_output_format\">Output format</h2> <div class=\"sectionbody\">\n<div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;mode&gt; SP &lt;type&gt; SP &lt;object&gt; TAB &lt;file&gt;</pre> </div> </div>  <p>Unless the <code>-z</code> option is used, TAB, LF, and backslash characters in pathnames are represented as <code>\\t</code>, <code>\\n</code>, and <code>\\\\</code>, respectively. This output format is compatible with what <code>--index-info --stdin</code> of <code>git update-index</code> expects.</p>   <p>When the <code>-l</code> option is used, format changes to</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;mode&gt; SP &lt;type&gt; SP &lt;object&gt; SP &lt;object size&gt; TAB &lt;file&gt;</pre> </div> </div>  <p>Object size identified by &lt;object&gt; is given in bytes, and right-justified with minimum width of 7 characters. Object size is given only for blobs (file) entries; for other entries <code>-</code> character is used in place of size.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-ls-tree\" class=\"_attribution-link\">https://git-scm.com/docs/git-ls-tree</a>\n  </p>\n</div>\n","git-mktag":"<h1>git-mktag</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-mktag - Creates a tag object</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git mktag</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Reads a tag contents on standard input and creates a tag object that can also be used to sign other objects.</p>   <p>The output is the new tag’s &lt;object&gt; identifier.</p> </div>   <h2 id=\"_tag_format\">Tag format</h2> <div class=\"sectionbody\"> <p>A tag signature file, to be fed to this command’s standard input, has a very simple fixed format: four lines of</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>object &lt;sha1&gt;\ntype &lt;typename&gt;\ntag &lt;tagname&gt;\ntagger &lt;tagger&gt;</pre> </div> </div>  <p>followed by some <code>optional</code> free-form message (some tags created by older Git may not have <code>tagger</code> line). The message, when exists, is separated by a blank line from the header. The message part may contain a signature that Git itself doesn’t care about, but that can be verified with gpg.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-mktag\" class=\"_attribution-link\">https://git-scm.com/docs/git-mktag</a>\n  </p>\n</div>\n","git-verify-tag":"<h1>git-verify-tag</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-verify-tag - Check the GPG signature of tags</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git verify-tag &lt;tag&gt;…​</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Validates the gpg signature created by <code>git tag</code>.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--raw</dt> <dd> <p>Print the raw gpg status output to standard error instead of the normal human-readable output.</p> </dd> <dt class=\"hdlist1\">-v</dt> <dt class=\"hdlist1\">--verbose</dt> <dd> <p>Print the contents of the tag object before validating it.</p> </dd> <dt class=\"hdlist1\">&lt;tag&gt;…​</dt> <dd> <p>SHA-1 identifiers of Git tag objects.</p> </dd> </dl> </div></div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-verify-tag\" class=\"_attribution-link\">https://git-scm.com/docs/git-verify-tag</a>\n  </p>\n</div>\n","git-check-attr":"<h1>git-check-attr</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-check-attr - Display gitattributes information</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git check-attr [-a | --all | attr…​] [--] pathname…​\ngit check-attr --stdin [-z] [-a | --all | attr…​]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>For every pathname, this command will list if each attribute is <code>unspecified</code>, <code>set</code>, or <code>unset</code> as a gitattribute on that pathname.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\">\n<div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-a, --all</dt> <dd> <p>List all attributes that are associated with the specified paths. If this option is used, then <code>unspecified</code> attributes will not be included in the output.</p> </dd> <dt class=\"hdlist1\">--cached</dt> <dd> <p>Consider <code>.gitattributes</code> in the index only, ignoring the working tree.</p> </dd> <dt class=\"hdlist1\">--stdin</dt> <dd> <p>Read pathnames from the standard input, one per line, instead of from the command-line.</p> </dd> <dt class=\"hdlist1\">-z</dt> <dd> <p>The output format is modified to be machine-parseable. If <code>--stdin</code> is also given, input paths are separated with a NUL character instead of a linefeed character.</p> </dd> <dt class=\"hdlist1\">--</dt> <dd> <p>Interpret all preceding arguments as attributes and all following arguments as path names.</p> </dd> </dl> </div>  <p>If none of <code>--stdin</code>, <code>--all</code>, or <code>--</code> is used, the first argument will be treated as an attribute and the rest of the arguments as pathnames.</p> </div>   <h2 id=\"_output\">Output</h2> <div class=\"sectionbody\"> <p>The output is of the form: &lt;path&gt; COLON SP &lt;attribute&gt; COLON SP &lt;info&gt; LF</p>   <p>unless <code>-z</code> is in effect, in which case NUL is used as delimiter: &lt;path&gt; NUL &lt;attribute&gt; NUL &lt;info&gt; NUL</p>   <p>&lt;path&gt; is the path of a file being queried, &lt;attribute&gt; is an attribute being queried and &lt;info&gt; can be either:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><em>unspecified</em></dt> <dd> <p>when the attribute is not defined for the path.</p> </dd> <dt class=\"hdlist1\"><em>unset</em></dt> <dd> <p>when the attribute is defined as false.</p> </dd> <dt class=\"hdlist1\"><em>set</em></dt> <dd> <p>when the attribute is defined as true.</p> </dd> <dt class=\"hdlist1\">&lt;value&gt;</dt> <dd> <p>when a value has been assigned to the attribute.</p> </dd> </dl> </div>  <p>Buffering happens as documented under the <code>GIT_FLUSH</code> option in <a href=\"git\">git[1]</a>. The caller is responsible for avoiding deadlocks caused by overfilling an input buffer or reading from an empty output buffer.</p> </div>   <h2 id=\"_examples\">Examples</h2> <div class=\"sectionbody\"> <p>In the examples, the following <code>.gitattributes</code> file is used:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>*.java diff=java -crlf myAttr\nNoMyAttr.java !myAttr\nREADME caveat=unspecified</pre> </div> </div> <div class=\"ulist\"> <ul> <li> <p>Listing a single attribute:</p> </li> </ul> </div> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git check-attr diff org/example/MyClass.java\norg/example/MyClass.java: diff: java</pre> </div> </div> <div class=\"ulist\"> <ul> <li> <p>Listing multiple attributes for a file:</p> </li> </ul> </div> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git check-attr crlf diff myAttr -- org/example/MyClass.java\norg/example/MyClass.java: crlf: unset\norg/example/MyClass.java: diff: java\norg/example/MyClass.java: myAttr: set</pre> </div> </div> <div class=\"ulist\"> <ul> <li> <p>Listing all attributes for a file:</p> </li> </ul> </div> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git check-attr --all -- org/example/MyClass.java\norg/example/MyClass.java: diff: java\norg/example/MyClass.java: myAttr: set</pre> </div> </div> <div class=\"ulist\"> <ul> <li> <p>Listing an attribute for multiple files:</p> </li> </ul> </div> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git check-attr myAttr -- org/example/MyClass.java org/example/NoMyAttr.java\norg/example/MyClass.java: myAttr: set\norg/example/NoMyAttr.java: myAttr: unspecified</pre> </div> </div> <div class=\"ulist\"> <ul> <li> <p>Not all values are equally unambiguous:</p> </li> </ul> </div> <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git check-attr caveat README\nREADME: caveat: unspecified</pre> </div> </div>\n</div>   <h2 id=\"_see_also\">See also</h2> <div class=\"sectionbody\"> <p><a href=\"gitattributes\">gitattributes[5]</a>.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-check-attr\" class=\"_attribution-link\">https://git-scm.com/docs/git-check-attr</a>\n  </p>\n</div>\n","git-cvsimport":"<h1>git-cvsimport</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-cvsimport - Salvage your data out of another SCM people love to hate</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git cvsimport [-o &lt;branch-for-HEAD&gt;] [-h] [-v] [-d &lt;CVSROOT&gt;]\n              [-A &lt;author-conv-file&gt;] [-p &lt;options-for-cvsps&gt;] [-P &lt;file&gt;]\n              [-C &lt;git_repository&gt;] [-z &lt;fuzz&gt;] [-i] [-k] [-u] [-s &lt;subst&gt;]\n              [-a] [-m] [-M &lt;regex&gt;] [-S &lt;regex&gt;] [-L &lt;commitlimit&gt;]\n              [-r &lt;remote&gt;] [-R] [&lt;CVS_module&gt;]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p><strong>WARNING:</strong> <code>git cvsimport</code> uses cvsps version 2, which is considered deprecated; it does not work with cvsps version 3 and later. If you are performing a one-shot import of a CVS repository consider using <a href=\"http://cvs2svn.tigris.org/cvs2git.html\">cvs2git</a> or <a href=\"https://github.com/BartMassey/parsecvs\">parsecvs</a>.</p>   <p>Imports a CVS repository into Git. It will either create a new repository, or incrementally import into an existing one.</p>   <p>Splitting the CVS log into patch sets is done by <code>cvsps</code>. At least version 2.1 is required.</p>   <p><strong>WARNING:</strong> for certain situations the import leads to incorrect results. Please see the section <a href=\"#issues\">ISSUES</a> for further reference.</p>   <p>You should <strong>never</strong> do any work of your own on the branches that are created by <code>git cvsimport</code>. By default initial import will create and populate a \"master\" branch from the CVS repository’s main branch which you’re free to work with; after that, you need to <code>git merge</code> incremental imports, or any CVS branches, yourself. It is advisable to specify a named remote via -r to separate and protect the incoming branches.</p>   <p>If you intend to set up a shared public repository that all developers can read/write, or if you want to use <a href=\"git-cvsserver\">git-cvsserver[1]</a>, then you probably want to make a bare clone of the imported repository, and use the clone as the shared repository. See <a href=\"gitcvs-migration\">gitcvs-migration[7]</a>.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\"><div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-v</dt> <dd> <p>Verbosity: let <code>cvsimport</code> report what it is doing.</p> </dd> <dt class=\"hdlist1\">-d &lt;CVSROOT&gt;</dt> <dd> <p>The root of the CVS archive. May be local (a simple path) or remote; currently, only the :local:, :ext: and :pserver: access methods are supported. If not given, <code>git cvsimport</code> will try to read it from <code>CVS/Root</code>. If no such file exists, it checks for the <code>CVSROOT</code> environment variable.</p> </dd> <dt class=\"hdlist1\">&lt;CVS_module&gt;</dt> <dd> <p>The CVS module you want to import. Relative to &lt;CVSROOT&gt;. If not given, <code>git cvsimport</code> tries to read it from <code>CVS/Repository</code>.</p> </dd> <dt class=\"hdlist1\">-C &lt;target-dir&gt;</dt> <dd> <p>The Git repository to import to. If the directory doesn’t exist, it will be created. Default is the current directory.</p> </dd> <dt class=\"hdlist1\">-r &lt;remote&gt;</dt> <dd> <p>The Git remote to import this CVS repository into. Moves all CVS branches into remotes/&lt;remote&gt;/&lt;branch&gt; akin to the way <code>git clone</code> uses <code>origin</code> by default.</p> </dd> <dt class=\"hdlist1\">-o &lt;branch-for-HEAD&gt;</dt> <dd> <p>When no remote is specified (via -r) the <code>HEAD</code> branch from CVS is imported to the <code>origin</code> branch within the Git repository, as <code>HEAD</code> already has a special meaning for Git. When a remote is specified the <code>HEAD</code> branch is named remotes/&lt;remote&gt;/master mirroring <code>git clone</code> behaviour. Use this option if you want to import into a different branch.</p>  <p>Use <code>-o master</code> for continuing an import that was initially done by the old cvs2git tool.</p>  </dd> <dt class=\"hdlist1\">-i</dt> <dd> <p>Import-only: don’t perform a checkout after importing. This option ensures the working directory and index remain untouched and will not create them if they do not exist.</p> </dd> <dt class=\"hdlist1\">-k</dt> <dd> <p>Kill keywords: will extract files with <code>-kk</code> from the CVS archive to avoid noisy changesets. Highly recommended, but off by default to preserve compatibility with early imported trees.</p> </dd> <dt class=\"hdlist1\">-u</dt> <dd> <p>Convert underscores in tag and branch names to dots.</p> </dd> <dt class=\"hdlist1\">-s &lt;subst&gt;</dt> <dd> <p>Substitute the character \"/\" in branch names with &lt;subst&gt;</p> </dd> <dt class=\"hdlist1\">-p &lt;options-for-cvsps&gt;</dt> <dd> <p>Additional options for cvsps. The options <code>-u</code> and <code>-A</code> are implicit and should not be used here.</p>  <p>If you need to pass multiple options, separate them with a comma.</p>  </dd> <dt class=\"hdlist1\">-z &lt;fuzz&gt;</dt> <dd> <p>Pass the timestamp fuzz factor to cvsps, in seconds. If unset, cvsps defaults to 300s.</p> </dd> <dt class=\"hdlist1\">-P &lt;cvsps-output-file&gt;</dt> <dd> <p>Instead of calling cvsps, read the provided cvsps output file. Useful for debugging or when cvsps is being handled outside cvsimport.</p> </dd> <dt class=\"hdlist1\">-m</dt> <dd> <p>Attempt to detect merges based on the commit message. This option will enable default regexes that try to capture the source branch name from the commit message.</p> </dd> <dt class=\"hdlist1\">-M &lt;regex&gt;</dt> <dd> <p>Attempt to detect merges based on the commit message with a custom regex. It can be used with <code>-m</code> to enable the default regexes as well. You must escape forward slashes.</p>  <p>The regex must capture the source branch name in $1.</p>   <p>This option can be used several times to provide several detection regexes.</p>  </dd> <dt class=\"hdlist1\">-S &lt;regex&gt;</dt> <dd> <p>Skip paths matching the regex.</p> </dd> <dt class=\"hdlist1\">-a</dt> <dd> <p>Import all commits, including recent ones. cvsimport by default skips commits that have a timestamp less than 10 minutes ago.</p> </dd> <dt class=\"hdlist1\">-L &lt;limit&gt;</dt> <dd> <p>Limit the number of commits imported. Workaround for cases where cvsimport leaks memory.</p> </dd> <dt class=\"hdlist1\">-A &lt;author-conv-file&gt;</dt> <dd> <p>CVS by default uses the Unix username when writing its commit logs. Using this option and an author-conv-file maps the name recorded in CVS to author name, e-mail and optional time zone:</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>        exon=Andreas Ericsson &lt;ae@op5.se&gt;\n        spawn=Simon Pawn &lt;spawn@frog-pond.org&gt; America/Chicago</pre> </div> </div>  <p><code>git cvsimport</code> will make it appear as those authors had their GIT_AUTHOR_NAME and GIT_AUTHOR_EMAIL set properly all along. If a time zone is specified, GIT_AUTHOR_DATE will have the corresponding offset applied.</p>   <p>For convenience, this data is saved to <code>$GIT_DIR/cvs-authors</code> each time the <code>-A</code> option is provided and read from that same file each time <code>git cvsimport</code> is run.</p>   <p>It is not recommended to use this feature if you intend to export changes back to CVS again later with <code>git cvsexportcommit</code>.</p>  </dd> <dt class=\"hdlist1\">-R</dt> <dd> <p>Generate a <code>$GIT_DIR/cvs-revisions</code> file containing a mapping from CVS revision numbers to newly-created Git commit IDs. The generated file will contain one line for each (filename, revision) pair imported; each line will look like</p> <div class=\"listingblock\"> <div class=\"content\"> <pre>src/widget.c 1.1 1d862f173cdc7325b6fa6d2ae1cfd61fd1b512b7</pre> </div> </div>  <p>The revision data is appended to the file if it already exists, for use when doing incremental imports.</p>   <p>This option may be useful if you have CVS revision numbers stored in commit messages, bug-tracking systems, email archives, and the like.</p>  </dd> <dt class=\"hdlist1\">-h</dt> <dd> <p>Print a short usage message and exit.</p> </dd> </dl> </div></div>   <h2 id=\"_output\">Output</h2> <div class=\"sectionbody\"> <p>If <code>-v</code> is specified, the script reports what it is doing.</p>   <p>Otherwise, success is indicated the Unix way, i.e. by simply exiting with a zero exit status.</p> </div>   <h2 id=\"issues\">Issues</h2> <div class=\"sectionbody\"> <p>Problems related to timestamps:</p>  <div class=\"ulist\"> <ul> <li> <p>If timestamps of commits in the CVS repository are not stable enough to be used for ordering commits changes may show up in the wrong order.</p> </li> <li> <p>If any files were ever \"cvs import\"ed more than once (e.g., import of more than one vendor release) the HEAD contains the wrong content.</p> </li> <li> <p>If the timestamp order of different files cross the revision order within the commit matching time window the order of commits may be wrong.</p> </li> </ul> </div>  <p>Problems related to branches:</p>  <div class=\"ulist\"> <ul> <li> <p>Branches on which no commits have been made are not imported.</p> </li> <li> <p>All files from the branching point are added to a branch even if never added in CVS.</p> </li> <li> <p>This applies to files added to the source branch <strong>after</strong> a daughter branch was created: if previously no commit was made on the daughter branch they will erroneously be added to the daughter branch in git.</p> </li> </ul> </div>  <p>Problems related to tags:</p>  <div class=\"ulist\"> <ul> <li> <p>Multiple tags on the same revision are not imported.</p> </li> </ul> </div>  <p>If you suspect that any of these issues may apply to the repository you want to import, consider using cvs2git:</p>  <div class=\"ulist\"> <ul> <li> <p>cvs2git (part of cvs2svn), <code>http://subversion.apache.org/</code></p> </li> </ul> </div>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-cvsimport\" class=\"_attribution-link\">https://git-scm.com/docs/git-cvsimport</a>\n  </p>\n</div>\n","git-diff-tree":"<h1>git-diff-tree</h1>  <h2 id=\"_name\">Name</h2> <div class=\"sectionbody\"> <p>git-diff-tree - Compares the content and mode of blobs found via two tree objects</p> </div>   <h2 id=\"_synopsis\">Synopsis</h2> <div class=\"sectionbody\"><div class=\"verseblock\"> <pre class=\"content\">git diff-tree [--stdin] [-m] [-s] [-v] [--no-commit-id] [--pretty]\n              [-t] [-r] [-c | --cc] [--root] [&lt;common diff options&gt;]\n              &lt;tree-ish&gt; [&lt;tree-ish&gt;] [&lt;path&gt;…​]</pre> </div></div>   <h2 id=\"_description\">Description</h2> <div class=\"sectionbody\"> <p>Compares the content and mode of the blobs found via two tree objects.</p>   <p>If there is only one &lt;tree-ish&gt; given, the commit is compared with its parents (see --stdin below).</p>   <p>Note that <code>git diff-tree</code> can use the tree encapsulated in a commit object.</p> </div>   <h2 id=\"_options\">Options</h2> <div class=\"sectionbody\">\n<div class=\"dlist\"> <dl> <dt class=\"hdlist1\">-p</dt> <dt class=\"hdlist1\">-u</dt> <dt class=\"hdlist1\">--patch</dt> <dd> <p>Generate patch (see section on generating patches).</p> </dd> <dt class=\"hdlist1\">-s</dt> <dt class=\"hdlist1\">--no-patch</dt> <dd> <p>Suppress diff output. Useful for commands like <code>git show</code> that show the patch by default, or to cancel the effect of <code>--patch</code>.</p> </dd> <dt class=\"hdlist1\">-U&lt;n&gt;</dt> <dt class=\"hdlist1\">--unified=&lt;n&gt;</dt> <dd> <p>Generate diffs with &lt;n&gt; lines of context instead of the usual three. Implies <code>-p</code>.</p> </dd> <dt class=\"hdlist1\">--raw</dt> <dd> <p>Generate the diff in raw format. This is the default.</p> </dd> <dt class=\"hdlist1\">--patch-with-raw</dt> <dd> <p>Synonym for <code>-p --raw</code>.</p> </dd> <dt class=\"hdlist1\">--compaction-heuristic</dt> <dt class=\"hdlist1\">--no-compaction-heuristic</dt> <dd> <p>These are to help debugging and tuning an experimental heuristic (which is off by default) that shifts the hunk boundary in an attempt to make the resulting patch easier to read.</p> </dd> <dt class=\"hdlist1\">--minimal</dt> <dd> <p>Spend extra time to make sure the smallest possible diff is produced.</p> </dd> <dt class=\"hdlist1\">--patience</dt> <dd> <p>Generate a diff using the \"patience diff\" algorithm.</p> </dd> <dt class=\"hdlist1\">--histogram</dt> <dd> <p>Generate a diff using the \"histogram diff\" algorithm.</p> </dd> <dt class=\"hdlist1\">--diff-algorithm={patience|minimal|histogram|myers}</dt> <dd> <p>Choose a diff algorithm. The variants are as follows:</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">\n<code>default</code>, <code>myers</code>\n</dt> <dd> <p>The basic greedy diff algorithm. Currently, this is the default.</p> </dd> <dt class=\"hdlist1\"><code>minimal</code></dt> <dd> <p>Spend extra time to make sure the smallest possible diff is produced.</p> </dd> <dt class=\"hdlist1\"><code>patience</code></dt> <dd> <p>Use \"patience diff\" algorithm when generating patches.</p> </dd> <dt class=\"hdlist1\"><code>histogram</code></dt> <dd> <p>This algorithm extends the patience algorithm to \"support low-occurrence common elements\".</p> </dd> </dl> </div> </div> </div>  <p>For instance, if you configured diff.algorithm variable to a non-default value and want to use the default one, then you have to use <code>--diff-algorithm=default</code> option.</p>  </dd> <dt class=\"hdlist1\">--stat[=&lt;width&gt;[,&lt;name-width&gt;[,&lt;count&gt;]]]</dt> <dd> <p>Generate a diffstat. By default, as much space as necessary will be used for the filename part, and the rest for the graph part. Maximum width defaults to terminal width, or 80 columns if not connected to a terminal, and can be overridden by <code>&lt;width&gt;</code>. The width of the filename part can be limited by giving another width <code>&lt;name-width&gt;</code> after a comma. The width of the graph part can be limited by using <code>--stat-graph-width=&lt;width&gt;</code> (affects all commands generating a stat graph) or by setting <code>diff.statGraphWidth=&lt;width&gt;</code> (does not affect <code>git format-patch</code>). By giving a third parameter <code>&lt;count&gt;</code>, you can limit the output to the first <code>&lt;count&gt;</code> lines, followed by <code>...</code> if there are more.</p>  <p>These parameters can also be set individually with <code>--stat-width=&lt;width&gt;</code>, <code>--stat-name-width=&lt;name-width&gt;</code> and <code>--stat-count=&lt;count&gt;</code>.</p>  </dd> <dt class=\"hdlist1\">--numstat</dt> <dd> <p>Similar to <code>--stat</code>, but shows number of added and deleted lines in decimal notation and pathname without abbreviation, to make it more machine friendly. For binary files, outputs two <code>-</code> instead of saying <code>0 0</code>.</p> </dd> <dt class=\"hdlist1\">--shortstat</dt> <dd> <p>Output only the last line of the <code>--stat</code> format containing total number of modified files, as well as number of added and deleted lines.</p> </dd> <dt class=\"hdlist1\">--dirstat[=&lt;param1,param2,…​&gt;]</dt> <dd> <p>Output the distribution of relative amount of changes for each sub-directory. The behavior of <code>--dirstat</code> can be customized by passing it a comma separated list of parameters. The defaults are controlled by the <code>diff.dirstat</code> configuration variable (see <a href=\"git-config\">git-config[1]</a>). The following parameters are available:</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\"><code>changes</code></dt> <dd> <p>Compute the dirstat numbers by counting the lines that have been removed from the source, or added to the destination. This ignores the amount of pure code movements within a file. In other words, rearranging lines in a file is not counted as much as other changes. This is the default behavior when no parameter is given.</p> </dd> <dt class=\"hdlist1\"><code>lines</code></dt> <dd> <p>Compute the dirstat numbers by doing the regular line-based diff analysis, and summing the removed/added line counts. (For binary files, count 64-byte chunks instead, since binary files have no natural concept of lines). This is a more expensive <code>--dirstat</code> behavior than the <code>changes</code> behavior, but it does count rearranged lines within a file as much as other changes. The resulting output is consistent with what you get from the other <code>--*stat</code> options.</p> </dd> <dt class=\"hdlist1\"><code>files</code></dt> <dd> <p>Compute the dirstat numbers by counting the number of files changed. Each changed file counts equally in the dirstat analysis. This is the computationally cheapest <code>--dirstat</code> behavior, since it does not have to look at the file contents at all.</p> </dd> <dt class=\"hdlist1\"><code>cumulative</code></dt> <dd> <p>Count changes in a child directory for the parent directory as well. Note that when using <code>cumulative</code>, the sum of the percentages reported may exceed 100%. The default (non-cumulative) behavior can be specified with the <code>noncumulative</code> parameter.</p> </dd> <dt class=\"hdlist1\">&lt;limit&gt;</dt> <dd> <p>An integer parameter specifies a cut-off percent (3% by default). Directories contributing less than this percentage of the changes are not shown in the output.</p> </dd> </dl> </div> </div> </div>  <p>Example: The following will count changed files, while ignoring directories with less than 10% of the total amount of changed files, and accumulating child directory counts in the parent directories: <code>--dirstat=files,10,cumulative</code>.</p>  </dd> <dt class=\"hdlist1\">--summary</dt> <dd> <p>Output a condensed summary of extended header information such as creations, renames and mode changes.</p> </dd> <dt class=\"hdlist1\">--patch-with-stat</dt> <dd> <p>Synonym for <code>-p --stat</code>.</p> </dd> <dt class=\"hdlist1\">-z</dt> <dd> <p>When <code>--raw</code>, <code>--numstat</code>, <code>--name-only</code> or <code>--name-status</code> has been given, do not munge pathnames and use NULs as output field terminators.</p>  <p>Without this option, each pathname output will have TAB, LF, double quotes, and backslash characters replaced with <code>\\t</code>, <code>\\n</code>, <code>\\\"</code>, and <code>\\\\</code>, respectively, and the pathname will be enclosed in double quotes if any of those replacements occurred.</p>  </dd> <dt class=\"hdlist1\">--name-only</dt> <dd> <p>Show only names of changed files.</p> </dd> <dt class=\"hdlist1\">--name-status</dt> <dd> <p>Show only names and status of changed files. See the description of the <code>--diff-filter</code> option on what the status letters mean.</p> </dd> <dt class=\"hdlist1\">--submodule[=&lt;format&gt;]</dt> <dd> <p>Specify how differences in submodules are shown. When <code>--submodule</code> or <code>--submodule=log</code> is given, the <code>log</code> format is used. This format lists the commits in the range like <a href=\"git-submodule\">git-submodule[1]</a> <code>summary</code> does. Omitting the <code>--submodule</code> option or specifying <code>--submodule=short</code>, uses the <code>short</code> format. This format just shows the names of the commits at the beginning and end of the range. Can be tweaked via the <code>diff.submodule</code> configuration variable.</p> </dd> <dt class=\"hdlist1\">--color[=&lt;when&gt;]</dt> <dd> <p>Show colored diff. <code>--color</code> (i.e. without <code>=&lt;when&gt;</code>) is the same as <code>--color=always</code>. <code>&lt;when&gt;</code> can be one of <code>always</code>, <code>never</code>, or <code>auto</code>.</p> </dd> <dt class=\"hdlist1\">--no-color</dt> <dd> <p>Turn off colored diff. It is the same as <code>--color=never</code>.</p> </dd> <dt class=\"hdlist1\">--word-diff[=&lt;mode&gt;]</dt> <dd> <p>Show a word diff, using the &lt;mode&gt; to delimit changed words. By default, words are delimited by whitespace; see <code>--word-diff-regex</code> below. The &lt;mode&gt; defaults to <code>plain</code>, and must be one of:</p> <div class=\"openblock\"> <div class=\"content\"> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">color</dt> <dd> <p>Highlight changed words using only colors. Implies <code>--color</code>.</p> </dd> <dt class=\"hdlist1\">plain</dt> <dd> <p>Show words as <code>[-removed-]</code> and <code>{+added+}</code>. Makes no attempts to escape the delimiters if they appear in the input, so the output may be ambiguous.</p> </dd> <dt class=\"hdlist1\">porcelain</dt> <dd> <p>Use a special line-based format intended for script consumption. Added/removed/unchanged runs are printed in the usual unified diff format, starting with a <code>+</code>/<code>-</code>/` ` character at the beginning of the line and extending to the end of the line. Newlines in the input are represented by a tilde <code>~</code> on a line of its own.</p> </dd> <dt class=\"hdlist1\">none</dt> <dd> <p>Disable word diff again.</p> </dd> </dl> </div> </div> </div>  <p>Note that despite the name of the first mode, color is used to highlight the changed parts in all modes if enabled.</p>  </dd> <dt class=\"hdlist1\">--word-diff-regex=&lt;regex&gt;</dt> <dd> <p>Use &lt;regex&gt; to decide what a word is, instead of considering runs of non-whitespace to be a word. Also implies <code>--word-diff</code> unless it was already enabled.</p>  <p>Every non-overlapping match of the &lt;regex&gt; is considered a word. Anything between these matches is considered whitespace and ignored(!) for the purposes of finding differences. You may want to append <code>|[^[:space:]]</code> to your regular expression to make sure that it matches all non-whitespace characters. A match that contains a newline is silently truncated(!) at the newline.</p>   <p>For example, <code>--word-diff-regex=.</code> will treat each character as a word and, correspondingly, show differences character by character.</p>   <p>The regex can also be set via a diff driver or configuration option, see <a href=\"gitattributes\">gitattributes[5]</a> or <a href=\"git-config\">git-config[1]</a>. Giving it explicitly overrides any diff driver or configuration setting. Diff drivers override configuration settings.</p>  </dd> <dt class=\"hdlist1\">--color-words[=&lt;regex&gt;]</dt> <dd> <p>Equivalent to <code>--word-diff=color</code> plus (if a regex was specified) <code>--word-diff-regex=&lt;regex&gt;</code>.</p> </dd> <dt class=\"hdlist1\">--no-renames</dt> <dd> <p>Turn off rename detection, even when the configuration file gives the default to do so.</p> </dd> <dt class=\"hdlist1\">--check</dt> <dd> <p>Warn if changes introduce conflict markers or whitespace errors. What are considered whitespace errors is controlled by <code>core.whitespace</code> configuration. By default, trailing whitespaces (including lines that solely consist of whitespaces) and a space character that is immediately followed by a tab character inside the initial indent of the line are considered whitespace errors. Exits with non-zero status if problems are found. Not compatible with --exit-code.</p> </dd> <dt class=\"hdlist1\">--ws-error-highlight=&lt;kind&gt;</dt> <dd> <p>Highlight whitespace errors on lines specified by &lt;kind&gt; in the color specified by <code>color.diff.whitespace</code>. &lt;kind&gt; is a comma separated list of <code>old</code>, <code>new</code>, <code>context</code>. When this option is not given, only whitespace errors in <code>new</code> lines are highlighted. E.g. <code>--ws-error-highlight=new,old</code> highlights whitespace errors on both deleted and added lines. <code>all</code> can be used as a short-hand for <code>old,new,context</code>.</p> </dd> <dt class=\"hdlist1\">--full-index</dt> <dd> <p>Instead of the first handful of characters, show the full pre- and post-image blob object names on the \"index\" line when generating patch format output.</p> </dd> <dt class=\"hdlist1\">--binary</dt> <dd> <p>In addition to <code>--full-index</code>, output a binary diff that can be applied with <code>git-apply</code>.</p> </dd> <dt class=\"hdlist1\">--abbrev[=&lt;n&gt;]</dt> <dd> <p>Instead of showing the full 40-byte hexadecimal object name in diff-raw format output and diff-tree header lines, show only a partial prefix. This is independent of the <code>--full-index</code> option above, which controls the diff-patch output format. Non default number of digits can be specified with <code>--abbrev=&lt;n&gt;</code>.</p> </dd> <dt class=\"hdlist1\">-B[&lt;n&gt;][/&lt;m&gt;]</dt> <dt class=\"hdlist1\">--break-rewrites[=[&lt;n&gt;][/&lt;m&gt;]]</dt> <dd> <p>Break complete rewrite changes into pairs of delete and create. This serves two purposes:</p>  <p>It affects the way a change that amounts to a total rewrite of a file not as a series of deletion and insertion mixed together with a very few lines that happen to match textually as the context, but as a single deletion of everything old followed by a single insertion of everything new, and the number <code>m</code> controls this aspect of the -B option (defaults to 60%). <code>-B/70%</code> specifies that less than 30% of the original should remain in the result for Git to consider it a total rewrite (i.e. otherwise the resulting patch will be a series of deletion and insertion mixed together with context lines).</p>   <p>When used with -M, a totally-rewritten file is also considered as the source of a rename (usually -M only considers a file that disappeared as the source of a rename), and the number <code>n</code> controls this aspect of the -B option (defaults to 50%). <code>-B20%</code> specifies that a change with addition and deletion compared to 20% or more of the file’s size are eligible for being picked up as a possible source of a rename to another file.</p>  </dd> <dt class=\"hdlist1\">-M[&lt;n&gt;]</dt> <dt class=\"hdlist1\">--find-renames[=&lt;n&gt;]</dt> <dd> <p>Detect renames. If <code>n</code> is specified, it is a threshold on the similarity index (i.e. amount of addition/deletions compared to the file’s size). For example, <code>-M90%</code> means Git should consider a delete/add pair to be a rename if more than 90% of the file hasn’t changed. Without a <code>%</code> sign, the number is to be read as a fraction, with a decimal point before it. I.e., <code>-M5</code> becomes 0.5, and is thus the same as <code>-M50%</code>. Similarly, <code>-M05</code> is the same as <code>-M5%</code>. To limit detection to exact renames, use <code>-M100%</code>. The default similarity index is 50%.</p> </dd> <dt class=\"hdlist1\">-C[&lt;n&gt;]</dt> <dt class=\"hdlist1\">--find-copies[=&lt;n&gt;]</dt> <dd> <p>Detect copies as well as renames. See also <code>--find-copies-harder</code>. If <code>n</code> is specified, it has the same meaning as for <code>-M&lt;n&gt;</code>.</p> </dd> <dt class=\"hdlist1\">--find-copies-harder</dt> <dd> <p>For performance reasons, by default, <code>-C</code> option finds copies only if the original file of the copy was modified in the same changeset. This flag makes the command inspect unmodified files as candidates for the source of copy. This is a very expensive operation for large projects, so use it with caution. Giving more than one <code>-C</code> option has the same effect.</p> </dd> <dt class=\"hdlist1\">-D</dt> <dt class=\"hdlist1\">--irreversible-delete</dt> <dd> <p>Omit the preimage for deletes, i.e. print only the header but not the diff between the preimage and <code>/dev/null</code>. The resulting patch is not meant to be applied with <code>patch</code> or <code>git apply</code>; this is solely for people who want to just concentrate on reviewing the text after the change. In addition, the output obviously lack enough information to apply such a patch in reverse, even manually, hence the name of the option.</p>  <p>When used together with <code>-B</code>, omit also the preimage in the deletion part of a delete/create pair.</p>  </dd> <dt class=\"hdlist1\">-l&lt;num&gt;</dt> <dd> <p>The <code>-M</code> and <code>-C</code> options require O(n^2) processing time where n is the number of potential rename/copy targets. This option prevents rename/copy detection from running if the number of rename/copy targets exceeds the specified number.</p> </dd> <dt class=\"hdlist1\">--diff-filter=[(A|C|D|M|R|T|U|X|B)…​[*]]</dt> <dd> <p>Select only files that are Added (<code>A</code>), Copied (<code>C</code>), Deleted (<code>D</code>), Modified (<code>M</code>), Renamed (<code>R</code>), have their type (i.e. regular file, symlink, submodule, …​) changed (<code>T</code>), are Unmerged (<code>U</code>), are Unknown (<code>X</code>), or have had their pairing Broken (<code>B</code>). Any combination of the filter characters (including none) can be used. When <code>*</code> (All-or-none) is added to the combination, all paths are selected if there is any file that matches other criteria in the comparison; if there is no file that matches other criteria, nothing is selected.</p> </dd> <dt class=\"hdlist1\">-S&lt;string&gt;</dt> <dd> <p>Look for differences that change the number of occurrences of the specified string (i.e. addition/deletion) in a file. Intended for the scripter’s use.</p>  <p>It is useful when you’re looking for an exact block of code (like a struct), and want to know the history of that block since it first came into being: use the feature iteratively to feed the interesting block in the preimage back into <code>-S</code>, and keep going until you get the very first version of the block.</p>  </dd> <dt class=\"hdlist1\">-G&lt;regex&gt;</dt> <dd> <p>Look for differences whose patch text contains added/removed lines that match &lt;regex&gt;.</p>  <p>To illustrate the difference between <code>-S&lt;regex&gt; --pickaxe-regex</code> and <code>-G&lt;regex&gt;</code>, consider a commit with the following diff in the same file:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>+    return !regexec(regexp, two-&gt;ptr, 1, &amp;regmatch, 0);\n...\n-    hit = !regexec(regexp, mf2.ptr, 1, &amp;regmatch, 0);</pre> </div> </div>  <p>While <code>git log -G\"regexec\\(regexp\"</code> will show this commit, <code>git log\n-S\"regexec\\(regexp\" --pickaxe-regex</code> will not (because the number of occurrences of that string did not change).</p>   <p>See the <code>pickaxe</code> entry in <a href=\"gitdiffcore\">gitdiffcore[7]</a> for more information.</p>  </dd> <dt class=\"hdlist1\">--pickaxe-all</dt> <dd> <p>When <code>-S</code> or <code>-G</code> finds a change, show all the changes in that changeset, not just the files that contain the change in &lt;string&gt;.</p> </dd> <dt class=\"hdlist1\">--pickaxe-regex</dt> <dd> <p>Treat the &lt;string&gt; given to <code>-S</code> as an extended POSIX regular expression to match.</p> </dd> <dt class=\"hdlist1\">-O&lt;orderfile&gt;</dt> <dd> <p>Output the patch in the order specified in the &lt;orderfile&gt;, which has one shell glob pattern per line. This overrides the <code>diff.orderFile</code> configuration variable (see <a href=\"git-config\">git-config[1]</a>). To cancel <code>diff.orderFile</code>, use <code>-O/dev/null</code>.</p> </dd> <dt class=\"hdlist1\">-R</dt> <dd> <p>Swap two inputs; that is, show differences from index or on-disk file to tree contents.</p> </dd> <dt class=\"hdlist1\">--relative[=&lt;path&gt;]</dt> <dd> <p>When run from a subdirectory of the project, it can be told to exclude changes outside the directory and show pathnames relative to it with this option. When you are not in a subdirectory (e.g. in a bare repository), you can name which subdirectory to make the output relative to by giving a &lt;path&gt; as an argument.</p> </dd> <dt class=\"hdlist1\">-a</dt> <dt class=\"hdlist1\">--text</dt> <dd> <p>Treat all files as text.</p> </dd> <dt class=\"hdlist1\">--ignore-space-at-eol</dt> <dd> <p>Ignore changes in whitespace at EOL.</p> </dd> <dt class=\"hdlist1\">-b</dt> <dt class=\"hdlist1\">--ignore-space-change</dt> <dd> <p>Ignore changes in amount of whitespace. This ignores whitespace at line end, and considers all other sequences of one or more whitespace characters to be equivalent.</p> </dd> <dt class=\"hdlist1\">-w</dt> <dt class=\"hdlist1\">--ignore-all-space</dt> <dd> <p>Ignore whitespace when comparing lines. This ignores differences even if one line has whitespace where the other line has none.</p> </dd> <dt class=\"hdlist1\">--ignore-blank-lines</dt> <dd> <p>Ignore changes whose lines are all blank.</p> </dd> <dt class=\"hdlist1\">--inter-hunk-context=&lt;lines&gt;</dt> <dd> <p>Show the context between diff hunks, up to the specified number of lines, thereby fusing hunks that are close to each other.</p> </dd> <dt class=\"hdlist1\">-W</dt> <dt class=\"hdlist1\">--function-context</dt> <dd> <p>Show whole surrounding functions of changes.</p> </dd> <dt class=\"hdlist1\">--exit-code</dt> <dd> <p>Make the program exit with codes similar to diff(1). That is, it exits with 1 if there were differences and 0 means no differences.</p> </dd> <dt class=\"hdlist1\">--quiet</dt> <dd> <p>Disable all output of the program. Implies <code>--exit-code</code>.</p> </dd> <dt class=\"hdlist1\">--ext-diff</dt> <dd> <p>Allow an external diff helper to be executed. If you set an external diff driver with <a href=\"gitattributes\">gitattributes[5]</a>, you need to use this option with <a href=\"git-log\">git-log[1]</a> and friends.</p> </dd> <dt class=\"hdlist1\">--no-ext-diff</dt> <dd> <p>Disallow external diff drivers.</p> </dd> <dt class=\"hdlist1\">--textconv</dt> <dt class=\"hdlist1\">--no-textconv</dt> <dd> <p>Allow (or disallow) external text conversion filters to be run when comparing binary files. See <a href=\"gitattributes\">gitattributes[5]</a> for details. Because textconv filters are typically a one-way conversion, the resulting diff is suitable for human consumption, but cannot be applied. For this reason, textconv filters are enabled by default only for <a href=\"git-diff\">git-diff[1]</a> and <a href=\"git-log\">git-log[1]</a>, but not for <a href=\"git-format-patch\">git-format-patch[1]</a> or diff plumbing commands.</p> </dd> <dt class=\"hdlist1\">--ignore-submodules[=&lt;when&gt;]</dt> <dd> <p>Ignore changes to submodules in the diff generation. &lt;when&gt; can be either \"none\", \"untracked\", \"dirty\" or \"all\", which is the default. Using \"none\" will consider the submodule modified when it either contains untracked or modified files or its HEAD differs from the commit recorded in the superproject and can be used to override any settings of the <code>ignore</code> option in <a href=\"git-config\">git-config[1]</a> or <a href=\"gitmodules\">gitmodules[5]</a>. When \"untracked\" is used submodules are not considered dirty when they only contain untracked content (but they are still scanned for modified content). Using \"dirty\" ignores all changes to the work tree of submodules, only changes to the commits stored in the superproject are shown (this was the behavior until 1.7.0). Using \"all\" hides all changes to submodules.</p> </dd> <dt class=\"hdlist1\">--src-prefix=&lt;prefix&gt;</dt> <dd> <p>Show the given source prefix instead of \"a/\".</p> </dd> <dt class=\"hdlist1\">--dst-prefix=&lt;prefix&gt;</dt> <dd> <p>Show the given destination prefix instead of \"b/\".</p> </dd> <dt class=\"hdlist1\">--no-prefix</dt> <dd> <p>Do not show any source or destination prefix.</p> </dd> </dl> </div>  <p>For more detailed explanation on these common options, see also <a href=\"gitdiffcore\">gitdiffcore[7]</a>.</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">&lt;tree-ish&gt;</dt> <dd> <p>The id of a tree object.</p> </dd> <dt class=\"hdlist1\">&lt;path&gt;…​</dt> <dd> <p>If provided, the results are limited to a subset of files matching one of these prefix strings. i.e., file matches <code>/^&lt;pattern1&gt;|&lt;pattern2&gt;|.../</code> Note that this parameter does not provide any wildcard or regexp features.</p> </dd> <dt class=\"hdlist1\">-r</dt> <dd> <p>recurse into sub-trees</p> </dd> <dt class=\"hdlist1\">-t</dt> <dd> <p>show tree entry itself as well as subtrees. Implies -r.</p> </dd> <dt class=\"hdlist1\">--root</dt> <dd> <p>When <code>--root</code> is specified the initial commit will be shown as a big creation event. This is equivalent to a diff against the NULL tree.</p> </dd> <dt class=\"hdlist1\">--stdin</dt> <dd> <p>When <code>--stdin</code> is specified, the command does not take &lt;tree-ish&gt; arguments from the command line. Instead, it reads lines containing either two &lt;tree&gt;, one &lt;commit&gt;, or a list of &lt;commit&gt; from its standard input. (Use a single space as separator.)</p>  <p>When two trees are given, it compares the first tree with the second. When a single commit is given, it compares the commit with its parents. The remaining commits, when given, are used as if they are parents of the first commit.</p>   <p>When comparing two trees, the ID of both trees (separated by a space and terminated by a newline) is printed before the difference. When comparing commits, the ID of the first (or only) commit, followed by a newline, is printed.</p>   <p>The following flags further affect the behavior when comparing commits (but not trees).</p>  </dd> <dt class=\"hdlist1\">-m</dt> <dd> <p>By default, <code>git diff-tree --stdin</code> does not show differences for merge commits. With this flag, it shows differences to that commit from all of its parents. See also <code>-c</code>.</p> </dd> <dt class=\"hdlist1\">-s</dt> <dd> <p>By default, <code>git diff-tree --stdin</code> shows differences, either in machine-readable form (without <code>-p</code>) or in patch form (with <code>-p</code>). This output can be suppressed. It is only useful with <code>-v</code> flag.</p> </dd> <dt class=\"hdlist1\">-v</dt> <dd> <p>This flag causes <code>git diff-tree --stdin</code> to also show the commit message before the differences.</p> </dd> <dt class=\"hdlist1\">--pretty[=&lt;format&gt;]</dt> <dt class=\"hdlist1\">--format=&lt;format&gt;</dt> <dd> <p>Pretty-print the contents of the commit logs in a given format, where <code>&lt;format&gt;</code> can be one of <code>oneline</code>, <code>short</code>, <code>medium</code>, <code>full</code>, <code>fuller</code>, <code>email</code>, <code>raw</code>, <code>format:&lt;string&gt;</code> and <code>tformat:&lt;string&gt;</code>. When <code>&lt;format&gt;</code> is none of the above, and has <code>%placeholder</code> in it, it acts as if <code>--pretty=tformat:&lt;format&gt;</code> were given.</p>  <p>See the \"PRETTY FORMATS\" section for some additional details for each format. When <code>=&lt;format&gt;</code> part is omitted, it defaults to <code>medium</code>.</p>   <p>Note: you can specify the default pretty format in the repository configuration (see <a href=\"git-config\">git-config[1]</a>).</p>  </dd> <dt class=\"hdlist1\">--abbrev-commit</dt> <dd> <p>Instead of showing the full 40-byte hexadecimal commit object name, show only a partial prefix. Non default number of digits can be specified with \"--abbrev=&lt;n&gt;\" (which also modifies diff output, if it is displayed).</p>  <p>This should make \"--pretty=oneline\" a whole lot more readable for people using 80-column terminals.</p>  </dd> <dt class=\"hdlist1\">--no-abbrev-commit</dt> <dd> <p>Show the full 40-byte hexadecimal commit object name. This negates <code>--abbrev-commit</code> and those options which imply it such as \"--oneline\". It also overrides the <code>log.abbrevCommit</code> variable.</p> </dd> <dt class=\"hdlist1\">--oneline</dt> <dd> <p>This is a shorthand for \"--pretty=oneline --abbrev-commit\" used together.</p> </dd> <dt class=\"hdlist1\">--encoding=&lt;encoding&gt;</dt> <dd> <p>The commit objects record the encoding used for the log message in their encoding header; this option can be used to tell the command to re-code the commit log message in the encoding preferred by the user. For non plumbing commands this defaults to UTF-8. Note that if an object claims to be encoded in <code>X</code> and we are outputting in <code>X</code>, we will output the object verbatim; this means that invalid sequences in the original commit may be copied to the output.</p> </dd> <dt class=\"hdlist1\">--expand-tabs=&lt;n&gt;</dt> <dt class=\"hdlist1\">--expand-tabs</dt> <dt class=\"hdlist1\">--no-expand-tabs</dt> <dd> <p>Perform a tab expansion (replace each tab with enough spaces to fill to the next display column that is multiple of <code>&lt;n&gt;</code>) in the log message before showing it in the output. <code>--expand-tabs</code> is a short-hand for <code>--expand-tabs=8</code>, and <code>--no-expand-tabs</code> is a short-hand for <code>--expand-tabs=0</code>, which disables tab expansion.</p>  <p>By default, tabs are expanded in pretty formats that indent the log message by 4 spaces (i.e. <code>medium</code>, which is the default, <code>full</code>, and <code>fuller</code>).</p>  </dd> <dt class=\"hdlist1\">--notes[=&lt;treeish&gt;]</dt> <dd> <p>Show the notes (see <a href=\"git-notes\">git-notes[1]</a>) that annotate the commit, when showing the commit log message. This is the default for <code>git log</code>, <code>git show</code> and <code>git whatchanged</code> commands when there is no <code>--pretty</code>, <code>--format</code>, or <code>--oneline</code> option given on the command line.</p>  <p>By default, the notes shown are from the notes refs listed in the <code>core.notesRef</code> and <code>notes.displayRef</code> variables (or corresponding environment overrides). See <a href=\"git-config\">git-config[1]</a> for more details.</p>   <p>With an optional <code>&lt;treeish&gt;</code> argument, use the treeish to find the notes to display. The treeish can specify the full refname when it begins with <code>refs/notes/</code>; when it begins with <code>notes/</code>, <code>refs/</code> and otherwise <code>refs/notes/</code> is prefixed to form a full name of the ref.</p>   <p>Multiple --notes options can be combined to control which notes are being displayed. Examples: \"--notes=foo\" will show only notes from \"refs/notes/foo\"; \"--notes=foo --notes\" will show both notes from \"refs/notes/foo\" and from the default notes ref(s).</p>  </dd> <dt class=\"hdlist1\">--no-notes</dt> <dd> <p>Do not show notes. This negates the above <code>--notes</code> option, by resetting the list of notes refs from which notes are shown. Options are parsed in the order given on the command line, so e.g. \"--notes --notes=foo --no-notes --notes=bar\" will only show notes from \"refs/notes/bar\".</p> </dd> <dt class=\"hdlist1\">--show-notes[=&lt;treeish&gt;]</dt> <dt class=\"hdlist1\">--[no-]standard-notes</dt> <dd> <p>These options are deprecated. Use the above --notes/--no-notes options instead.</p> </dd> <dt class=\"hdlist1\">--show-signature</dt> <dd> <p>Check the validity of a signed commit object by passing the signature to <code>gpg --verify</code> and show the output.</p> </dd> </dl> </div> <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">--no-commit-id</dt> <dd> <p><code>git diff-tree</code> outputs a line with the commit ID when applicable. This flag suppressed the commit ID output.</p> </dd> <dt class=\"hdlist1\">-c</dt> <dd> <p>This flag changes the way a merge commit is displayed (which means it is useful only when the command is given one &lt;tree-ish&gt;, or <code>--stdin</code>). It shows the differences from each of the parents to the merge result simultaneously instead of showing pairwise diff between a parent and the result one at a time (which is what the <code>-m</code> option does). Furthermore, it lists only files which were modified from all parents.</p> </dd> <dt class=\"hdlist1\">--cc</dt> <dd> <p>This flag changes the way a merge commit patch is displayed, in a similar way to the <code>-c</code> option. It implies the <code>-c</code> and <code>-p</code> options and further compresses the patch output by omitting uninteresting hunks whose the contents in the parents have only two variants and the merge result picks one of them without modification. When all hunks are uninteresting, the commit itself and the commit log message is not shown, just like in any other \"empty diff\" case.</p> </dd> <dt class=\"hdlist1\">--always</dt> <dd> <p>Show the commit itself and the commit log message even if the diff itself is empty.</p> </dd> </dl> </div>\n</div>   <h2 id=\"_pretty_formats\">Pretty formats</h2> <div class=\"sectionbody\"> <p>If the commit is a merge, and if the pretty-format is not <code>oneline</code>, <code>email</code> or <code>raw</code>, an additional line is inserted before the <code>Author:</code> line. This line begins with \"Merge: \" and the sha1s of ancestral commits are printed, separated by spaces. Note that the listed commits may not necessarily be the list of the <strong>direct</strong> parent commits if you have limited your view of history: for example, if you are only interested in changes related to a certain directory or file.</p>   <p>There are several built-in formats, and you can define additional formats by setting a pretty.&lt;name&gt; config option to either another format name, or a <code>format:</code> string, as described below (see <a href=\"git-config\">git-config[1]</a>). Here are the details of the built-in formats:</p>  <div class=\"ulist\"> <ul> <li> <p><code>oneline</code></p> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;sha1&gt; &lt;title line&gt;</pre> </div> </div>  <p>This is designed to be as compact as possible.</p>  </li> <li> <p><code>short</code></p> <div class=\"literalblock\"> <div class=\"content\"> <pre>commit &lt;sha1&gt;\nAuthor: &lt;author&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;title line&gt;</pre> </div> </div> </li> <li> <p><code>medium</code></p> <div class=\"literalblock\"> <div class=\"content\"> <pre>commit &lt;sha1&gt;\nAuthor: &lt;author&gt;\nDate:   &lt;author date&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;title line&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;full commit message&gt;</pre> </div> </div> </li> <li> <p><code>full</code></p> <div class=\"literalblock\"> <div class=\"content\"> <pre>commit &lt;sha1&gt;\nAuthor: &lt;author&gt;\nCommit: &lt;committer&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;title line&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;full commit message&gt;</pre> </div> </div> </li> <li> <p><code>fuller</code></p> <div class=\"literalblock\"> <div class=\"content\"> <pre>commit &lt;sha1&gt;\nAuthor:     &lt;author&gt;\nAuthorDate: &lt;author date&gt;\nCommit:     &lt;committer&gt;\nCommitDate: &lt;committer date&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;title line&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;full commit message&gt;</pre> </div> </div> </li> <li> <p><code>email</code></p> <div class=\"literalblock\"> <div class=\"content\"> <pre>From &lt;sha1&gt; &lt;date&gt;\nFrom: &lt;author&gt;\nDate: &lt;author date&gt;\nSubject: [PATCH] &lt;title line&gt;</pre> </div> </div> <div class=\"literalblock\"> <div class=\"content\"> <pre>&lt;full commit message&gt;</pre> </div> </div> </li> <li> <p><code>raw</code></p>  <p>The <code>raw</code> format shows the entire commit exactly as stored in the commit object. Notably, the SHA-1s are displayed in full, regardless of whether --abbrev or --no-abbrev are used, and <code>parents</code> information show the true parent commits, without taking grafts or history simplification into account. Note that this format affects the way commits are displayed, but not the way the diff is shown e.g. with <code>git log --raw</code>. To get full object names in a raw diff format, use <code>--no-abbrev</code>.</p>  </li> <li> <p><code>format:&lt;string&gt;</code></p>  <p>The <code>format:&lt;string&gt;</code> format allows you to specify which information you want to show. It works a little bit like printf format, with the notable exception that you get a newline with <code>%n</code> instead of <code>\\n</code>.</p>   <p>E.g, <code>format:\"The author of %h was %an, %ar%nThe title was &gt;&gt;%s&lt;&lt;%n\"</code> would show something like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>The author of fe6e0ee was Junio C Hamano, 23 hours ago\nThe title was &gt;&gt;t4119: test autocomputing -p&lt;n&gt; for traditional diff input.&lt;&lt;</pre> </div> </div>  <p>The placeholders are:</p>  <div class=\"ulist\"> <ul> <li> <p><code>%H</code>: commit hash</p> </li> <li> <p><code>%h</code>: abbreviated commit hash</p> </li> <li> <p><code>%T</code>: tree hash</p> </li> <li> <p><code>%t</code>: abbreviated tree hash</p> </li> <li> <p><code>%P</code>: parent hashes</p> </li> <li> <p><code>%p</code>: abbreviated parent hashes</p> </li> <li> <p><code>%an</code>: author name</p> </li> <li> <p><code>%aN</code>: author name (respecting .mailmap, see <a href=\"git-shortlog\">git-shortlog[1]</a> or <a href=\"git-blame\">git-blame[1]</a>)</p> </li> <li> <p><code>%ae</code>: author email</p> </li> <li> <p><code>%aE</code>: author email (respecting .mailmap, see <a href=\"git-shortlog\">git-shortlog[1]</a> or <a href=\"git-blame\">git-blame[1]</a>)</p> </li> <li> <p><code>%ad</code>: author date (format respects --date= option)</p> </li> <li> <p><code>%aD</code>: author date, RFC2822 style</p> </li> <li> <p><code>%ar</code>: author date, relative</p> </li> <li> <p><code>%at</code>: author date, UNIX timestamp</p> </li> <li> <p><code>%ai</code>: author date, ISO 8601-like format</p> </li> <li> <p><code>%aI</code>: author date, strict ISO 8601 format</p> </li> <li> <p><code>%cn</code>: committer name</p> </li> <li> <p><code>%cN</code>: committer name (respecting .mailmap, see <a href=\"git-shortlog\">git-shortlog[1]</a> or <a href=\"git-blame\">git-blame[1]</a>)</p> </li> <li> <p><code>%ce</code>: committer email</p> </li> <li> <p><code>%cE</code>: committer email (respecting .mailmap, see <a href=\"git-shortlog\">git-shortlog[1]</a> or <a href=\"git-blame\">git-blame[1]</a>)</p> </li> <li> <p><code>%cd</code>: committer date (format respects --date= option)</p> </li> <li> <p><code>%cD</code>: committer date, RFC2822 style</p> </li> <li> <p><code>%cr</code>: committer date, relative</p> </li> <li> <p><code>%ct</code>: committer date, UNIX timestamp</p> </li> <li> <p><code>%ci</code>: committer date, ISO 8601-like format</p> </li> <li> <p><code>%cI</code>: committer date, strict ISO 8601 format</p> </li> <li> <p><code>%d</code>: ref names, like the --decorate option of <a href=\"git-log\">git-log[1]</a></p> </li> <li> <p><code>%D</code>: ref names without the \" (\", \")\" wrapping.</p> </li> <li> <p><code>%e</code>: encoding</p> </li> <li> <p><code>%s</code>: subject</p> </li> <li> <p><code>%f</code>: sanitized subject line, suitable for a filename</p> </li> <li> <p><code>%b</code>: body</p> </li> <li> <p><code>%B</code>: raw body (unwrapped subject and body)</p> </li> <li> <p><code>%N</code>: commit notes</p> </li> <li> <p><code>%GG</code>: raw verification message from GPG for a signed commit</p> </li> <li> <p><code>%G?</code>: show \"G\" for a good (valid) signature, \"B\" for a bad signature, \"U\" for a good signature with unknown validity and \"N\" for no signature</p> </li> <li> <p><code>%GS</code>: show the name of the signer for a signed commit</p> </li> <li> <p><code>%GK</code>: show the key used to sign a signed commit</p> </li> <li> <p><code>%gD</code>: reflog selector, e.g., <code>refs/stash@{1}</code></p> </li> <li> <p><code>%gd</code>: shortened reflog selector, e.g., <code>stash@{1}</code></p> </li> <li> <p><code>%gn</code>: reflog identity name</p> </li> <li> <p><code>%gN</code>: reflog identity name (respecting .mailmap, see <a href=\"git-shortlog\">git-shortlog[1]</a> or <a href=\"git-blame\">git-blame[1]</a>)</p> </li> <li> <p><code>%ge</code>: reflog identity email</p> </li> <li> <p><code>%gE</code>: reflog identity email (respecting .mailmap, see <a href=\"git-shortlog\">git-shortlog[1]</a> or <a href=\"git-blame\">git-blame[1]</a>)</p> </li> <li> <p><code>%gs</code>: reflog subject</p> </li> <li> <p><code>%Cred</code>: switch color to red</p> </li> <li> <p><code>%Cgreen</code>: switch color to green</p> </li> <li> <p><code>%Cblue</code>: switch color to blue</p> </li> <li> <p><code>%Creset</code>: reset color</p> </li> <li> <p><code>%C(…​)</code>: color specification, as described in color.branch.* config option; adding <code>auto,</code> at the beginning will emit color only when colors are enabled for log output (by <code>color.diff</code>, <code>color.ui</code>, or <code>--color</code>, and respecting the <code>auto</code> settings of the former if we are going to a terminal). <code>auto</code> alone (i.e. <code>%C(auto)</code>) will turn on auto coloring on the next placeholders until the color is switched again.</p> </li> <li> <p><code>%m</code>: left, right or boundary mark</p> </li> <li> <p><code>%n</code>: newline</p> </li> <li> <p><code>%%</code>: a raw <code>%</code></p> </li> <li> <p><code>%x00</code>: print a byte from a hex code</p> </li> <li> <p><code>%w([&lt;w&gt;[,&lt;i1&gt;[,&lt;i2&gt;]]])</code>: switch line wrapping, like the -w option of <a href=\"git-shortlog\">git-shortlog[1]</a>.</p> </li> <li> <p><code>%&lt;(&lt;N&gt;[,trunc|ltrunc|mtrunc])</code>: make the next placeholder take at least N columns, padding spaces on the right if necessary. Optionally truncate at the beginning (ltrunc), the middle (mtrunc) or the end (trunc) if the output is longer than N columns. Note that truncating only works correctly with N &gt;= 2.</p> </li> <li> <p><code>%&lt;|(&lt;N&gt;)</code>: make the next placeholder take at least until Nth columns, padding spaces on the right if necessary</p> </li> <li> <p><code>%&gt;(&lt;N&gt;)</code>, <code>%&gt;|(&lt;N&gt;)</code>: similar to <code>%&lt;(&lt;N&gt;)</code>, <code>%&lt;|(&lt;N&gt;)</code> respectively, but padding spaces on the left</p> </li> <li> <p><code>%&gt;&gt;(&lt;N&gt;)</code>, <code>%&gt;&gt;|(&lt;N&gt;)</code>: similar to <code>%&gt;(&lt;N&gt;)</code>, <code>%&gt;|(&lt;N&gt;)</code> respectively, except that if the next placeholder takes more spaces than given and there are spaces on its left, use those spaces</p> </li> <li> <p><code>%&gt;&lt;(&lt;N&gt;)</code>, <code>%&gt;&lt;|(&lt;N&gt;)</code>: similar to <code>% &lt;(&lt;N&gt;)</code>, <code>%&lt;|(&lt;N&gt;)</code> respectively, but padding both sides (i.e. the text is centered)</p> </li> </ul> </div> </li> </ul> </div> <div class=\"admonitionblock note\"> <table> <tr> <td class=\"icon\"> <div class=\"title\">Note</div> </td> <td class=\"content\"> Some placeholders may depend on other options given to the revision traversal engine. For example, the <code>%g*</code> reflog options will insert an empty string unless we are traversing reflog entries (e.g., by <code>git log -g</code>). The <code>%d</code> and <code>%D</code> placeholders will use the \"short\" decoration format if <code>--decorate</code> was not already provided on the command line. </td> </tr> </table> </div>  <p>If you add a <code>+</code> (plus sign) after <code>%</code> of a placeholder, a line-feed is inserted immediately before the expansion if and only if the placeholder expands to a non-empty string.</p>   <p>If you add a <code>-</code> (minus sign) after <code>%</code> of a placeholder, line-feeds that immediately precede the expansion are deleted if and only if the placeholder expands to an empty string.</p>   <p>If you add a ` ` (space) after <code>%</code> of a placeholder, a space is inserted immediately before the expansion if and only if the placeholder expands to a non-empty string.</p>  <div class=\"ulist\"> <ul> <li> <p><code>tformat:</code></p>  <p>The <code>tformat:</code> format works exactly like <code>format:</code>, except that it provides \"terminator\" semantics instead of \"separator\" semantics. In other words, each commit has the message terminator character (usually a newline) appended, rather than a separator placed between entries. This means that the final entry of a single-line format will be properly terminated with a new line, just as the \"oneline\" format does. For example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log -2 --pretty=format:%h 4da45bef \\\n  | perl -pe '$_ .= \" -- NO NEWLINE\\n\" unless /\\n/'\n4da45be\n7134973 -- NO NEWLINE\n\n$ git log -2 --pretty=tformat:%h 4da45bef \\\n  | perl -pe '$_ .= \" -- NO NEWLINE\\n\" unless /\\n/'\n4da45be\n7134973</pre> </div> </div>  <p>In addition, any unrecognized string that has a <code>%</code> in it is interpreted as if it has <code>tformat:</code> in front of it. For example, these two are equivalent:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>$ git log -2 --pretty=tformat:%h 4da45bef\n$ git log -2 --pretty=%h 4da45bef</pre> </div> </div> </li> </ul> </div>\n</div>   <h2 id=\"_limiting_output\">Limiting output</h2> <div class=\"sectionbody\"> <p>If you’re only interested in differences in a subset of files, for example some architecture-specific files, you might do:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>git diff-tree -r &lt;tree-ish&gt; &lt;tree-ish&gt; arch/ia64 include/asm-ia64</pre> </div> </div>  <p>and it will only show you what changed in those two directories.</p>   <p>Or if you are searching for what changed in just <code>kernel/sched.c</code>, just do</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>git diff-tree -r &lt;tree-ish&gt; &lt;tree-ish&gt; kernel/sched.c</pre> </div> </div>  <p>and it will ignore all differences to other files.</p>   <p>The pattern is always the prefix, and is matched exactly. There are no wildcards. Even stricter, it has to match a complete path component. I.e. \"foo\" does not pick up <code>foobar.h</code>. \"foo\" does match <code>foo/bar.h</code> so it can be used to name subdirectories.</p>   <p>An example of normal usage is:</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>torvalds@ppc970:~/git&gt; git diff-tree --abbrev 5319e4\n:100664 100664 ac348b... a01513...    git-fsck-objects.c</pre> </div> </div>  <p>which tells you that the last commit changed just one file (it’s from this one:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>commit 3c6f7ca19ad4043e9e72fa94106f352897e651a8\ntree 5319e4d609cdd282069cc4dce33c1db559539b03\nparent b4e628ea30d5ab3606119d2ea5caeab141d38df7\nauthor Linus Torvalds &lt;torvalds@ppc970.osdl.org&gt; Sat Apr 9 12:02:30 2005\ncommitter Linus Torvalds &lt;torvalds@ppc970.osdl.org&gt; Sat Apr 9 12:02:30 2005\n\nMake \"git-fsck-objects\" print out all the root commits it finds.\n\nOnce I do the reference tracking, I'll also make it print out all the\nHEAD commits it finds, which is even more interesting.</pre> </div> </div>  <p>in case you care).</p> </div>   <h2 id=\"_raw_output_format\">Raw output format</h2> <div class=\"sectionbody\"> <p>The raw output format from \"git-diff-index\", \"git-diff-tree\", \"git-diff-files\" and \"git diff --raw\" are very similar.</p>   <p>These commands all compare two sets of things; what is compared differs:</p>  <div class=\"dlist\"> <dl> <dt class=\"hdlist1\">git-diff-index &lt;tree-ish&gt;</dt> <dd> <p>compares the &lt;tree-ish&gt; and the files on the filesystem.</p> </dd> <dt class=\"hdlist1\">git-diff-index --cached &lt;tree-ish&gt;</dt> <dd> <p>compares the &lt;tree-ish&gt; and the index.</p> </dd> <dt class=\"hdlist1\">git-diff-tree [-r] &lt;tree-ish-1&gt; &lt;tree-ish-2&gt; [&lt;pattern&gt;…​]</dt> <dd> <p>compares the trees named by the two arguments.</p> </dd> <dt class=\"hdlist1\">git-diff-files [&lt;pattern&gt;…​]</dt> <dd> <p>compares the index and the files on the filesystem.</p> </dd> </dl> </div>  <p>The \"git-diff-tree\" command begins its output by printing the hash of what is being compared. After that, all the commands print one output line per changed file.</p>   <p>An output line is formatted this way:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>in-place edit  :100644 100644 bcd1234... 0123456... M file0\ncopy-edit      :100644 100644 abcd123... 1234567... C68 file1 file2\nrename-edit    :100644 100644 abcd123... 1234567... R86 file1 file3\ncreate         :000000 100644 0000000... 1234567... A file4\ndelete         :100644 000000 1234567... 0000000... D file5\nunmerged       :000000 000000 0000000... 0000000... U file6</pre> </div> </div>  <p>That is, from the left to the right:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>a colon.</p> </li> <li> <p>mode for \"src\"; 000000 if creation or unmerged.</p> </li> <li> <p>a space.</p> </li> <li> <p>mode for \"dst\"; 000000 if deletion or unmerged.</p> </li> <li> <p>a space.</p> </li> <li> <p>sha1 for \"src\"; 0{40} if creation or unmerged.</p> </li> <li> <p>a space.</p> </li> <li> <p>sha1 for \"dst\"; 0{40} if creation, unmerged or \"look at work tree\".</p> </li> <li> <p>a space.</p> </li> <li> <p>status, followed by optional \"score\" number.</p> </li> <li> <p>a tab or a NUL when <code>-z</code> option is used.</p> </li> <li> <p>path for \"src\"</p> </li> <li> <p>a tab or a NUL when <code>-z</code> option is used; only exists for C or R.</p> </li> <li> <p>path for \"dst\"; only exists for C or R.</p> </li> <li> <p>an LF or a NUL when <code>-z</code> option is used, to terminate the record.</p> </li> </ol> </div>  <p>Possible status letters are:</p>  <div class=\"ulist\"> <ul> <li> <p>A: addition of a file</p> </li> <li> <p>C: copy of a file into a new one</p> </li> <li> <p>D: deletion of a file</p> </li> <li> <p>M: modification of the contents or mode of a file</p> </li> <li> <p>R: renaming of a file</p> </li> <li> <p>T: change in the type of the file</p> </li> <li> <p>U: file is unmerged (you must complete the merge before it can be committed)</p> </li> <li> <p>X: \"unknown\" change type (most probably a bug, please report it)</p> </li> </ul> </div>  <p>Status letters C and R are always followed by a score (denoting the percentage of similarity between the source and target of the move or copy). Status letter M may be followed by a score (denoting the percentage of dissimilarity) for file rewrites.</p>   <p>&lt;sha1&gt; is shown as all 0’s if a file is new on the filesystem and it is out of sync with the index.</p>   <p>Example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>:100644 100644 5be4a4...... 000000...... M file.c</pre> </div> </div>  <p>When <code>-z</code> option is not used, TAB, LF, and backslash characters in pathnames are represented as <code>\\t</code>, <code>\\n</code>, and <code>\\\\</code>, respectively.</p> </div>   <h2 id=\"_diff_format_for_merges\">Diff format for merges</h2> <div class=\"sectionbody\"> <p>\"git-diff-tree\", \"git-diff-files\" and \"git-diff --raw\" can take <code>-c</code> or <code>--cc</code> option to generate diff output also for merge commits. The output differs from the format described above in the following way:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>there is a colon for each parent</p> </li> <li> <p>there are more \"src\" modes and \"src\" sha1</p> </li> <li> <p>status is concatenated status characters for each parent</p> </li> <li> <p>no optional \"score\" number</p> </li> <li> <p>single path, only for \"dst\"</p> </li> </ol> </div>  <p>Example:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>::100644 100644 100644 fabadb8... cc95eb0... 4866510... MM        describe.c</pre> </div> </div>  <p>Note that <code>combined diff</code> lists only files which were modified from all parents.</p> </div>   <h2 id=\"_generating_patches_with_p\">Generating patches with -p</h2> <div class=\"sectionbody\"> <p>When \"git-diff-index\", \"git-diff-tree\", or \"git-diff-files\" are run with a <code>-p</code> option, \"git diff\" without the <code>--raw</code> option, or \"git log\" with the \"-p\" option, they do not produce the output described above; instead they produce a patch file. You can customize the creation of such patches via the <code>GIT_EXTERNAL_DIFF</code> and the <code>GIT_DIFF_OPTS</code> environment variables.</p>   <p>What the -p option produces is slightly different from the traditional diff format:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>It is preceded with a \"git diff\" header that looks like this:</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>diff --git a/file1 b/file2</pre> </div> </div>  <p>The <code>a/</code> and <code>b/</code> filenames are the same unless rename/copy is involved. Especially, even for a creation or a deletion, <code>/dev/null</code> is <code>not</code> used in place of the <code>a/</code> or <code>b/</code> filenames.</p>   <p>When rename/copy is involved, <code>file1</code> and <code>file2</code> show the name of the source file of the rename/copy and the name of the file that rename/copy produces, respectively.</p>  </li> <li> <p>It is followed by one or more extended header lines:</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>old mode &lt;mode&gt;\nnew mode &lt;mode&gt;\ndeleted file mode &lt;mode&gt;\nnew file mode &lt;mode&gt;\ncopy from &lt;path&gt;\ncopy to &lt;path&gt;\nrename from &lt;path&gt;\nrename to &lt;path&gt;\nsimilarity index &lt;number&gt;\ndissimilarity index &lt;number&gt;\nindex &lt;hash&gt;..&lt;hash&gt; &lt;mode&gt;</pre> </div> </div>  <p>File modes are printed as 6-digit octal numbers including the file type and file permission bits.</p>   <p>Path names in extended headers do not include the <code>a/</code> and <code>b/</code> prefixes.</p>   <p>The similarity index is the percentage of unchanged lines, and the dissimilarity index is the percentage of changed lines. It is a rounded down integer, followed by a percent sign. The similarity index value of 100% is thus reserved for two equal files, while 100% dissimilarity means that no line from the old file made it into the new one.</p>   <p>The index line includes the SHA-1 checksum before and after the change. The &lt;mode&gt; is included if the file mode does not change; otherwise, separate lines indicate the old and the new mode.</p>  </li> <li> <p>TAB, LF, double quote and backslash characters in pathnames are represented as <code>\\t</code>, <code>\\n</code>, <code>\\\"</code> and <code>\\\\</code>, respectively. If there is need for such substitution then the whole pathname is put in double quotes.</p> </li> <li> <p>All the <code>file1</code> files in the output refer to files before the commit, and all the <code>file2</code> files refer to files after the commit. It is incorrect to apply each change to each file sequentially. For example, this patch will swap a and b:</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>diff --git a/a b/b\nrename from a\nrename to b\ndiff --git a/b b/a\nrename from b\nrename to a</pre> </div> </div> </li> </ol> </div>\n</div>   <h2 id=\"_combined_diff_format\">Combined diff format</h2> <div class=\"sectionbody\"> <p>Any diff-generating command can take the <code>-c</code> or <code>--cc</code> option to produce a <code>combined diff</code> when showing a merge. This is the default format when showing merges with <a href=\"git-diff\">git-diff[1]</a> or <a href=\"git-show\">git-show[1]</a>. Note also that you can give the <code>-m</code> option to any of these commands to force generation of diffs with individual parents of a merge.</p>   <p>A <code>combined diff</code> format looks like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>diff --combined describe.c\nindex fabadb8,cc95eb0..4866510\n--- a/describe.c\n+++ b/describe.c\n@@@ -98,20 -98,12 +98,20 @@@\n        return (a_date &gt; b_date) ? -1 : (a_date == b_date) ? 0 : 1;\n  }\n\n- static void describe(char *arg)\n -static void describe(struct commit *cmit, int last_one)\n++static void describe(char *arg, int last_one)\n  {\n +        unsigned char sha1[20];\n +        struct commit *cmit;\n        struct commit_list *list;\n        static int initialized = 0;\n        struct commit_name *n;\n\n +        if (get_sha1(arg, sha1) &lt; 0)\n +                usage(describe_usage);\n +        cmit = lookup_commit_reference(sha1);\n +        if (!cmit)\n +                usage(describe_usage);\n +\n        if (!initialized) {\n                initialized = 1;\n                for_each_ref(get_name);</pre> </div> </div> <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>It is preceded with a \"git diff\" header, that looks like this (when <code>-c</code> option is used):</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>diff --combined file</pre> </div> </div>  <p>or like this (when <code>--cc</code> option is used):</p>  <div class=\"literalblock\"> <div class=\"content\"> <pre>diff --cc file</pre> </div> </div> </li> <li> <p>It is followed by one or more extended header lines (this example shows a merge with two parents):</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>index &lt;hash&gt;,&lt;hash&gt;..&lt;hash&gt;\nmode &lt;mode&gt;,&lt;mode&gt;..&lt;mode&gt;\nnew file mode &lt;mode&gt;\ndeleted file mode &lt;mode&gt;,&lt;mode&gt;</pre> </div> </div>  <p>The <code>mode &lt;mode&gt;,&lt;mode&gt;..&lt;mode&gt;</code> line appears only if at least one of the &lt;mode&gt; is different from the rest. Extended headers with information about detected contents movement (renames and copying detection) are designed to work with diff of two &lt;tree-ish&gt; and are not used by combined diff format.</p>  </li> <li> <p>It is followed by two-line from-file/to-file header</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>--- a/file\n+++ b/file</pre> </div> </div>  <p>Similar to two-line header for traditional <code>unified</code> diff format, <code>/dev/null</code> is used to signal created or deleted files.</p>  </li> <li> <p>Chunk header format is modified to prevent people from accidentally feeding it to <code>patch -p1</code>. Combined diff format was created for review of merge commit changes, and was not meant for apply. The change is similar to the change in the extended <code>index</code> header:</p> <div class=\"literalblock\"> <div class=\"content\"> <pre>@@@ &lt;from-file-range&gt; &lt;from-file-range&gt; &lt;to-file-range&gt; @@@</pre> </div> </div>  <p>There are (number of parents + 1) <code>@</code> characters in the chunk header for combined diff format.</p>  </li> </ol> </div>  <p>Unlike the traditional <code>unified</code> diff format, which shows two files A and B with a single column that has <code>-</code> (minus — appears in A but removed in B), <code>+</code> (plus — missing in A but added to B), or <code>\" \"</code> (space — unchanged) prefix, this format compares two or more files file1, file2,…​ with one file X, and shows how X differs from each of fileN. One column for each of fileN is prepended to the output line to note how X’s line is different from it.</p>   <p>A <code>-</code> character in the column N means that the line appears in fileN but it does not appear in the result. A <code>+</code> character in the column N means that the line appears in the result, and fileN does not have that line (in other words, the line was added, from the point of view of that parent).</p>   <p>In the above example output, the function signature was changed from both files (hence two <code>-</code> removals from both file1 and file2, plus <code>++</code> to mean one line that was added does not appear in either file1 or file2). Also eight other lines are the same from file1 but do not appear in file2 (hence prefixed with <code>+</code>).</p>   <p>When shown by <code>git diff-tree -c</code>, it compares the parents of a merge commit with the merge result (i.e. file1..fileN are the parents). When shown by <code>git diff-files -c</code>, it compares the two unresolved merge parents with the working tree file (i.e. file1 is stage 2 aka \"our version\", file2 is stage 3 aka \"their version\").</p> </div>   <h2 id=\"_other_diff_formats\">Other diff formats</h2> <div class=\"sectionbody\"> <p>The <code>--summary</code> option describes newly added, deleted, renamed and copied files. The <code>--stat</code> option adds diffstat(1) graph to the output. These options can be combined with other options, such as <code>-p</code>, and are meant for human consumption.</p>   <p>When showing a change that involves a rename or a copy, <code>--stat</code> output formats the pathnames compactly by combining common prefix and suffix of the pathnames. For example, a change that moves <code>arch/i386/Makefile</code> to <code>arch/x86/Makefile</code> while modifying 4 lines will be shown like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>arch/{i386 =&gt; x86}/Makefile    |   4 +--</pre> </div> </div>  <p>The <code>--numstat</code> option gives the diffstat(1) information but is designed for easier machine consumption. An entry in <code>--numstat</code> output looks like this:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>1        2        README\n3        1        arch/{i386 =&gt; x86}/Makefile</pre> </div> </div>  <p>That is, from left to right:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>the number of added lines;</p> </li> <li> <p>a tab;</p> </li> <li> <p>the number of deleted lines;</p> </li> <li> <p>a tab;</p> </li> <li> <p>pathname (possibly with rename/copy information);</p> </li> <li> <p>a newline.</p> </li> </ol> </div>  <p>When <code>-z</code> output option is in effect, the output is formatted this way:</p>  <div class=\"listingblock\"> <div class=\"content\"> <pre>1        2        README NUL\n3        1        NUL arch/i386/Makefile NUL arch/x86/Makefile NUL</pre> </div> </div>  <p>That is:</p>  <div class=\"olist arabic\"> <ol class=\"arabic\"> <li> <p>the number of added lines;</p> </li> <li> <p>a tab;</p> </li> <li> <p>the number of deleted lines;</p> </li> <li> <p>a tab;</p> </li> <li> <p>a NUL (only exists if renamed/copied);</p> </li> <li> <p>pathname in preimage;</p> </li> <li> <p>a NUL (only exists if renamed/copied);</p> </li> <li> <p>pathname in postimage (only exists if renamed/copied);</p> </li> <li> <p>a NUL.</p> </li> </ol> </div>  <p>The extra <code>NUL</code> before the preimage path in renamed case is to allow scripts that read the output to tell if the current record being read is a single-path record or a rename/copy record without reading ahead. After reading added and deleted lines, reading up to <code>NUL</code> would yield the pathname, but if that is <code>NUL</code>, the record will show two paths.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Linus Torvalds and others<br>Licensed under the GNU General Public License version 2.<br>\n    <a href=\"https://git-scm.com/docs/git-diff-tree\" class=\"_attribution-link\">https://git-scm.com/docs/git-diff-tree</a>\n  </p>\n</div>\n"}