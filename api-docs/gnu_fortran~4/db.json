{"index":"<h1 class=\"settitle\">The GNU Fortran Compiler</h1> <div class=\"shortcontents\"> <h2>Short Contents</h2> <ul> <li><a href=\"index#toc_Top\">Introduction</a></li> <li><a href=\"index#toc_Introduction\">1 Introduction</a></li> <li><a href=\"index#toc_Invoking-GNU-Fortran\">2 GNU Fortran Command Options</a></li> <li><a href=\"index#toc_Runtime\">3 Runtime: Influencing runtime behavior with environment variables</a></li> <li><a href=\"index#toc_Fortran-2003-and-2008-status\">4 Fortran 2003 and 2008 Status</a></li> <li><a href=\"index#toc_Compiler-Characteristics\">5 Compiler Characteristics</a></li> <li><a href=\"index#toc_Extensions\">6 Extensions</a></li> <li><a href=\"index#toc_Mixed_002dLanguage-Programming\">7 Mixed-Language Programming</a></li> <li><a href=\"index#toc_Intrinsic-Procedures\">8 Intrinsic Procedures</a></li> <li><a href=\"index#toc_Intrinsic-Modules\">9 Intrinsic Modules</a></li> <li><a href=\"index#toc_Contributing\">Contributing</a></li> <li><a href=\"index#toc_Copying\">GNU General Public License</a></li> <li><a href=\"index#toc_GNU-Free-Documentation-License\">GNU Free Documentation License</a></li> <li><a href=\"index#toc_Funding\">Funding Free Software</a></li> <li><a href=\"index#toc_Option-Index\">Option Index</a></li> <li><a href=\"index#toc_Keyword-Index\">Keyword Index</a></li> </ul> </div> <div class=\"contents\"> <h2>Table of Contents</h2> <ul> <li>\n<a name=\"toc_Top\" href=\"index#Top\" id=\"toc_Top\">Introduction</a> </li>\n<li>\n<a name=\"toc_Introduction\" href=\"introduction#Introduction\" id=\"toc_Introduction\">1 Introduction</a> <ul> <li>\n<a href=\"about-gnu-fortran#About-GNU-Fortran\">1.1 About GNU Fortran</a> </li>\n<li>\n<a href=\"gnu-fortran-and-gcc#GNU-Fortran-and-GCC\">1.2 GNU Fortran and GCC</a> </li>\n<li>\n<a href=\"preprocessing-and-conditional-compilation#Preprocessing-and-conditional-compilation\">1.3 Preprocessing and conditional compilation</a> </li>\n<li>\n<a href=\"gnu-fortran-and-g77#GNU-Fortran-and-G77\">1.4 GNU Fortran and G77</a> </li>\n<li>\n<a href=\"project-status#Project-Status\">1.5 Project Status</a> </li>\n<li>\n<a href=\"standards#Standards\">1.6 Standards</a> <ul> <li>\n<a href=\"varying-length-character-strings#Varying-Length-Character-Strings\">1.6.1 Varying Length Character Strings</a> </li>\n</ul> </li>\n</ul> </li>\n<li>\n<a name=\"toc_Invoking-GNU-Fortran\" href=\"invoking-gnu-fortran#Invoking-GNU-Fortran\" id=\"toc_Invoking-GNU-Fortran\">2 GNU Fortran Command Options</a> <ul> <li>\n<a href=\"option-summary#Option-Summary\">2.1 Option summary</a> </li>\n<li>\n<a href=\"fortran-dialect-options#Fortran-Dialect-Options\">2.2 Options controlling Fortran dialect</a> </li>\n<li>\n<a href=\"preprocessing-options#Preprocessing-Options\">2.3 Enable and customize preprocessing</a> </li>\n<li>\n<a href=\"error-and-warning-options#Error-and-Warning-Options\">2.4 Options to request or suppress errors and warnings</a> </li>\n<li>\n<a href=\"debugging-options#Debugging-Options\">2.5 Options for debugging your program or GNU Fortran</a> </li>\n<li>\n<a href=\"directory-options#Directory-Options\">2.6 Options for directory search</a> </li>\n<li>\n<a href=\"link-options#Link-Options\">2.7 Influencing the linking step</a> </li>\n<li>\n<a href=\"runtime-options#Runtime-Options\">2.8 Influencing runtime behavior</a> </li>\n<li>\n<a href=\"code-gen-options#Code-Gen-Options\">2.9 Options for code generation conventions</a> </li>\n<li>\n<a href=\"environment-variables#Environment-Variables\">2.10 Environment variables affecting <code>gfortran</code></a> </li>\n</ul> </li>\n<li>\n<a name=\"toc_Runtime\" href=\"runtime#Runtime\" id=\"toc_Runtime\">3 Runtime: Influencing runtime behavior with environment variables</a> <ul> <li>\n<a href=\"tmpdir#TMPDIR\">3.1 <code>TMPDIR</code>—Directory for scratch files</a> </li>\n<li>\n<a href=\"gfortran_005fstdin_005funit#GFORTRAN_005fSTDIN_005fUNIT\">3.2 <code>GFORTRAN_STDIN_UNIT</code>—Unit number for standard input</a> </li>\n<li>\n<a href=\"gfortran_005fstdout_005funit#GFORTRAN_005fSTDOUT_005fUNIT\">3.3 <code>GFORTRAN_STDOUT_UNIT</code>—Unit number for standard output</a> </li>\n<li>\n<a href=\"gfortran_005fstderr_005funit#GFORTRAN_005fSTDERR_005fUNIT\">3.4 <code>GFORTRAN_STDERR_UNIT</code>—Unit number for standard error</a> </li>\n<li>\n<a href=\"gfortran_005funbuffered_005fall#GFORTRAN_005fUNBUFFERED_005fALL\">3.5 <code>GFORTRAN_UNBUFFERED_ALL</code>—Do not buffer I/O on all units</a> </li>\n<li>\n<a href=\"gfortran_005funbuffered_005fpreconnected#GFORTRAN_005fUNBUFFERED_005fPRECONNECTED\">3.6 <code>GFORTRAN_UNBUFFERED_PRECONNECTED</code>—Do not buffer I/O on preconnected units</a> </li>\n<li>\n<a href=\"gfortran_005fshow_005flocus#GFORTRAN_005fSHOW_005fLOCUS\">3.7 <code>GFORTRAN_SHOW_LOCUS</code>—Show location for runtime errors</a> </li>\n<li>\n<a href=\"gfortran_005foptional_005fplus#GFORTRAN_005fOPTIONAL_005fPLUS\">3.8 <code>GFORTRAN_OPTIONAL_PLUS</code>—Print leading + where permitted</a> </li>\n<li>\n<a href=\"gfortran_005fdefault_005frecl#GFORTRAN_005fDEFAULT_005fRECL\">3.9 <code>GFORTRAN_DEFAULT_RECL</code>—Default record length for new files</a> </li>\n<li>\n<a href=\"gfortran_005flist_005fseparator#GFORTRAN_005fLIST_005fSEPARATOR\">3.10 <code>GFORTRAN_LIST_SEPARATOR</code>—Separator for list output</a> </li>\n<li>\n<a href=\"gfortran_005fconvert_005funit#GFORTRAN_005fCONVERT_005fUNIT\">3.11 <code>GFORTRAN_CONVERT_UNIT</code>—Set endianness for unformatted I/O</a> </li>\n<li>\n<a href=\"gfortran_005ferror_005fbacktrace#GFORTRAN_005fERROR_005fBACKTRACE\">3.12 <code>GFORTRAN_ERROR_BACKTRACE</code>—Show backtrace on run-time errors</a> </li>\n</ul> </li>\n<li>\n<a name=\"toc_Fortran-2003-and-2008-status\" href=\"fortran-2003-and-2008-status#Fortran-2003-and-2008-status\" id=\"toc_Fortran-2003-and-2008-status\">4 Fortran 2003 and 2008 Status</a> <ul> <li>\n<a href=\"fortran-2003-status#Fortran-2003-status\">4.1 Fortran 2003 status</a> </li>\n<li>\n<a href=\"fortran-2008-status#Fortran-2008-status\">4.2 Fortran 2008 status</a> </li>\n<li>\n<a href=\"ts-29113-status#TS-29113-status\">4.3 Technical Specification 29113 Status</a> </li>\n</ul> </li>\n<li>\n<a name=\"toc_Compiler-Characteristics\" href=\"compiler-characteristics#Compiler-Characteristics\" id=\"toc_Compiler-Characteristics\">5 Compiler Characteristics</a> <ul> <li>\n<a href=\"kind-type-parameters#KIND-Type-Parameters\">5.1 KIND Type Parameters</a> </li>\n<li>\n<a href=\"internal-representation-of-logical-variables#Internal-representation-of-LOGICAL-variables\">5.2 Internal representation of LOGICAL variables</a> </li>\n<li>\n<a href=\"thread_002dsafety-of-the-runtime-library#Thread_002dsafety-of-the-runtime-library\">5.3 Thread-safety of the runtime library</a> </li>\n<li>\n<a href=\"data-consistency-and-durability#Data-consistency-and-durability\">5.4 Data consistency and durability</a> </li>\n</ul> </li>\n<li>\n<a name=\"toc_Extensions\" href=\"extensions#Extensions\" id=\"toc_Extensions\">6 Extensions</a> <ul> <li>\n<a href=\"extensions-implemented-in-gnu-fortran#Extensions-implemented-in-GNU-Fortran\">6.1 Extensions implemented in GNU Fortran</a> <ul> <li>\n<a href=\"old_002dstyle-kind-specifications#Old_002dstyle-kind-specifications\">6.1.1 Old-style kind specifications</a> </li>\n<li>\n<a href=\"old_002dstyle-variable-initialization#Old_002dstyle-variable-initialization\">6.1.2 Old-style variable initialization</a> </li>\n<li>\n<a href=\"extensions-to-namelist#Extensions-to-namelist\">6.1.3 Extensions to namelist</a> </li>\n<li>\n<a href=\"x-format-descriptor-without-count-field#X-format-descriptor-without-count-field\">6.1.4 <code>X</code> format descriptor without count field</a> </li>\n<li>\n<a href=\"commas-in-format-specifications#Commas-in-FORMAT-specifications\">6.1.5 Commas in <code>FORMAT</code> specifications</a> </li>\n<li>\n<a href=\"missing-period-in-format-specifications#Missing-period-in-FORMAT-specifications\">6.1.6 Missing period in <code>FORMAT</code> specifications</a> </li>\n<li>\n<a href=\"i_002fo-item-lists#I_002fO-item-lists\">6.1.7 I/O item lists</a> </li>\n<li>\n<a href=\"_003ccode_003eq_003c_002fcode_003e-exponent_002dletter#_003ccode_003eQ_003c_002fcode_003e-exponent_002dletter\">6.1.8 <code>Q</code> exponent-letter</a> </li>\n<li>\n<a href=\"boz-literal-constants#BOZ-literal-constants\">6.1.9 BOZ literal constants</a> </li>\n<li>\n<a href=\"real-array-indices#Real-array-indices\">6.1.10 Real array indices</a> </li>\n<li>\n<a href=\"unary-operators#Unary-operators\">6.1.11 Unary operators</a> </li>\n<li>\n<a href=\"implicitly-convert-logical-and-integer-values#Implicitly-convert-LOGICAL-and-INTEGER-values\">6.1.12 Implicitly convert <code>LOGICAL</code> and <code>INTEGER</code> values</a> </li>\n<li>\n<a href=\"hollerith-constants-support#Hollerith-constants-support\">6.1.13 Hollerith constants support</a> </li>\n<li>\n<a href=\"cray-pointers#Cray-pointers\">6.1.14 Cray pointers</a> </li>\n<li>\n<a href=\"convert-specifier#CONVERT-specifier\">6.1.15 <code>CONVERT</code> specifier</a> </li>\n<li>\n<a href=\"openmp#OpenMP\">6.1.16 OpenMP</a> </li>\n<li>\n<a href=\"argument-list-functions#Argument-list-functions\">6.1.17 Argument list functions <code>%VAL</code>, <code>%REF</code> and <code>%LOC</code></a> </li>\n</ul> </li>\n<li>\n<a href=\"extensions-not-implemented-in-gnu-fortran#Extensions-not-implemented-in-GNU-Fortran\">6.2 Extensions not implemented in GNU Fortran</a> <ul> <li>\n<a href=\"structure-and-record#STRUCTURE-and-RECORD\">6.2.1 <code>STRUCTURE</code> and <code>RECORD</code></a> </li>\n<li>\n<a href=\"encode-and-decode-statements#ENCODE-and-DECODE-statements\">6.2.2 <code>ENCODE</code> and <code>DECODE</code> statements</a> </li>\n<li>\n<a href=\"variable-format-expressions#Variable-FORMAT-expressions\">6.2.3 Variable <code>FORMAT</code> expressions</a> </li>\n<li>\n<a href=\"alternate-complex-function-syntax#Alternate-complex-function-syntax\">6.2.4 Alternate complex function syntax</a> </li>\n<li>\n<a href=\"volatile-common-blocks#Volatile-COMMON-blocks\">6.2.5 Volatile <code>COMMON</code> blocks</a> </li>\n</ul> </li>\n</ul> </li>\n<li>\n<a name=\"toc_Mixed_002dLanguage-Programming\" href=\"mixed_002dlanguage-programming#Mixed_002dLanguage-Programming\" id=\"toc_Mixed_002dLanguage-Programming\">7 Mixed-Language Programming</a> <ul> <li>\n<a href=\"interoperability-with-c#Interoperability-with-C\">7.1 Interoperability with C</a> <ul> <li>\n<a href=\"intrinsic-types#Intrinsic-Types\">7.1.1 Intrinsic Types</a> </li>\n<li>\n<a href=\"derived-types-and-struct#Derived-Types-and-struct\">7.1.2 Derived Types and struct</a> </li>\n<li>\n<a href=\"interoperable-global-variables#Interoperable-Global-Variables\">7.1.3 Interoperable Global Variables</a> </li>\n<li>\n<a href=\"interoperable-subroutines-and-functions#Interoperable-Subroutines-and-Functions\">7.1.4 Interoperable Subroutines and Functions</a> </li>\n<li>\n<a href=\"working-with-pointers#Working-with-Pointers\">7.1.5 Working with Pointers</a> </li>\n<li>\n<a href=\"further-interoperability-of-fortran-with-c#Further-Interoperability-of-Fortran-with-C\">7.1.6 Further Interoperability of Fortran with C</a> </li>\n</ul> </li>\n<li>\n<a href=\"gnu-fortran-compiler-directives#GNU-Fortran-Compiler-Directives\">7.2 GNU Fortran Compiler Directives</a> </li>\n<li>\n<a href=\"non_002dfortran-main-program#Non_002dFortran-Main-Program\">7.3 Non-Fortran Main Program</a> <ul> <li>\n<a href=\"_005fgfortran_005fset_005fargs#_005fgfortran_005fset_005fargs\">7.3.1 <code>_gfortran_set_args</code> — Save command-line arguments</a> </li>\n<li>\n<a href=\"_005fgfortran_005fset_005foptions#_005fgfortran_005fset_005foptions\">7.3.2 <code>_gfortran_set_options</code> — Set library option flags</a> </li>\n<li>\n<a href=\"_005fgfortran_005fset_005fconvert#_005fgfortran_005fset_005fconvert\">7.3.3 <code>_gfortran_set_convert</code> — Set endian conversion</a> </li>\n<li>\n<a href=\"_005fgfortran_005fset_005frecord_005fmarker#_005fgfortran_005fset_005frecord_005fmarker\">7.3.4 <code>_gfortran_set_record_marker</code> — Set length of record markers</a> </li>\n<li>\n<a href=\"_005fgfortran_005fset_005ffpe#_005fgfortran_005fset_005ffpe\">7.3.5 <code>_gfortran_set_fpe</code> — Enable floating point exception traps</a> </li>\n<li>\n<a href=\"_005fgfortran_005fset_005fmax_005fsubrecord_005flength#_005fgfortran_005fset_005fmax_005fsubrecord_005flength\">7.3.6 <code>_gfortran_set_max_subrecord_length</code> — Set subrecord length</a> </li>\n</ul> </li>\n<li>\n<a href=\"naming-and-argument_002dpassing-conventions#Naming-and-argument_002dpassing-conventions\">7.4 Naming and argument-passing conventions</a> <ul> <li>\n<a href=\"naming-conventions#Naming-conventions\">7.4.1 Naming conventions</a> </li>\n<li>\n<a href=\"argument-passing-conventions#Argument-passing-conventions\">7.4.2 Argument passing conventions</a> </li>\n</ul> </li>\n</ul> </li>\n<li>\n<a name=\"toc_Intrinsic-Procedures\" href=\"intrinsic-procedures#Intrinsic-Procedures\" id=\"toc_Intrinsic-Procedures\">8 Intrinsic Procedures</a> <ul> <li>\n<a href=\"introduction-to-intrinsics#Introduction-to-Intrinsics\">8.1 Introduction to intrinsic procedures</a> </li>\n<li>\n<a href=\"abort#ABORT\">8.2 <code>ABORT</code> — Abort the program</a> </li>\n<li>\n<a href=\"abs#ABS\">8.3 <code>ABS</code> — Absolute value</a> </li>\n<li>\n<a href=\"access#ACCESS\">8.4 <code>ACCESS</code> — Checks file access modes</a> </li>\n<li>\n<a href=\"achar#ACHAR\">8.5 <code>ACHAR</code> — Character in ASCII collating sequence</a> </li>\n<li>\n<a href=\"acos#ACOS\">8.6 <code>ACOS</code> — Arccosine function</a> </li>\n<li>\n<a href=\"acosh#ACOSH\">8.7 <code>ACOSH</code> — Inverse hyperbolic cosine function</a> </li>\n<li>\n<a href=\"adjustl#ADJUSTL\">8.8 <code>ADJUSTL</code> — Left adjust a string</a> </li>\n<li>\n<a href=\"adjustr#ADJUSTR\">8.9 <code>ADJUSTR</code> — Right adjust a string</a> </li>\n<li>\n<a href=\"aimag#AIMAG\">8.10 <code>AIMAG</code> — Imaginary part of complex number</a> </li>\n<li>\n<a href=\"aint#AINT\">8.11 <code>AINT</code> — Truncate to a whole number</a> </li>\n<li>\n<a href=\"alarm#ALARM\">8.12 <code>ALARM</code> — Execute a routine after a given delay</a> </li>\n<li>\n<a href=\"all#ALL\">8.13 <code>ALL</code> — All values in <var>MASK</var> along <var>DIM</var> are true</a> </li>\n<li>\n<a href=\"allocated#ALLOCATED\">8.14 <code>ALLOCATED</code> — Status of an allocatable entity</a> </li>\n<li>\n<a href=\"and#AND\">8.15 <code>AND</code> — Bitwise logical AND</a> </li>\n<li>\n<a href=\"anint#ANINT\">8.16 <code>ANINT</code> — Nearest whole number</a> </li>\n<li>\n<a href=\"any#ANY\">8.17 <code>ANY</code> — Any value in <var>MASK</var> along <var>DIM</var> is true</a> </li>\n<li>\n<a href=\"asin#ASIN\">8.18 <code>ASIN</code> — Arcsine function</a> </li>\n<li>\n<a href=\"asinh#ASINH\">8.19 <code>ASINH</code> — Inverse hyperbolic sine function</a> </li>\n<li>\n<a href=\"associated#ASSOCIATED\">8.20 <code>ASSOCIATED</code> — Status of a pointer or pointer/target pair</a> </li>\n<li>\n<a href=\"atan#ATAN\">8.21 <code>ATAN</code> — Arctangent function</a> </li>\n<li>\n<a href=\"atan2#ATAN2\">8.22 <code>ATAN2</code> — Arctangent function</a> </li>\n<li>\n<a href=\"atanh#ATANH\">8.23 <code>ATANH</code> — Inverse hyperbolic tangent function</a> </li>\n<li>\n<a href=\"atomic_005fdefine#ATOMIC_005fDEFINE\">8.24 <code>ATOMIC_DEFINE</code> — Setting a variable atomically</a> </li>\n<li>\n<a href=\"atomic_005fref#ATOMIC_005fREF\">8.25 <code>ATOMIC_REF</code> — Obtaining the value of a variable atomically</a> </li>\n<li>\n<a href=\"backtrace#BACKTRACE\">8.26 <code>BACKTRACE</code> — Show a backtrace</a> </li>\n<li>\n<a href=\"bessel_005fj0#BESSEL_005fJ0\">8.27 <code>BESSEL_J0</code> — Bessel function of the first kind of order 0</a> </li>\n<li>\n<a href=\"bessel_005fj1#BESSEL_005fJ1\">8.28 <code>BESSEL_J1</code> — Bessel function of the first kind of order 1</a> </li>\n<li>\n<a href=\"bessel_005fjn#BESSEL_005fJN\">8.29 <code>BESSEL_JN</code> — Bessel function of the first kind</a> </li>\n<li>\n<a href=\"bessel_005fy0#BESSEL_005fY0\">8.30 <code>BESSEL_Y0</code> — Bessel function of the second kind of order 0</a> </li>\n<li>\n<a href=\"bessel_005fy1#BESSEL_005fY1\">8.31 <code>BESSEL_Y1</code> — Bessel function of the second kind of order 1</a> </li>\n<li>\n<a href=\"bessel_005fyn#BESSEL_005fYN\">8.32 <code>BESSEL_YN</code> — Bessel function of the second kind</a> </li>\n<li>\n<a href=\"bge#BGE\">8.33 <code>BGE</code> — Bitwise greater than or equal to</a> </li>\n<li>\n<a href=\"bgt#BGT\">8.34 <code>BGT</code> — Bitwise greater than</a> </li>\n<li>\n<a href=\"bit_005fsize#BIT_005fSIZE\">8.35 <code>BIT_SIZE</code> — Bit size inquiry function</a> </li>\n<li>\n<a href=\"ble#BLE\">8.36 <code>BLE</code> — Bitwise less than or equal to</a> </li>\n<li>\n<a href=\"blt#BLT\">8.37 <code>BLT</code> — Bitwise less than</a> </li>\n<li>\n<a href=\"btest#BTEST\">8.38 <code>BTEST</code> — Bit test function</a> </li>\n<li>\n<a href=\"c_005fassociated#C_005fASSOCIATED\">8.39 <code>C_ASSOCIATED</code> — Status of a C pointer</a> </li>\n<li>\n<a href=\"c_005ff_005fpointer#C_005fF_005fPOINTER\">8.40 <code>C_F_POINTER</code> — Convert C into Fortran pointer</a> </li>\n<li>\n<a href=\"c_005ff_005fprocpointer#C_005fF_005fPROCPOINTER\">8.41 <code>C_F_PROCPOINTER</code> — Convert C into Fortran procedure pointer</a> </li>\n<li>\n<a href=\"c_005ffunloc#C_005fFUNLOC\">8.42 <code>C_FUNLOC</code> — Obtain the C address of a procedure</a> </li>\n<li>\n<a href=\"c_005floc#C_005fLOC\">8.43 <code>C_LOC</code> — Obtain the C address of an object</a> </li>\n<li>\n<a href=\"c_005fsizeof#C_005fSIZEOF\">8.44 <code>C_SIZEOF</code> — Size in bytes of an expression</a> </li>\n<li>\n<a href=\"ceiling#CEILING\">8.45 <code>CEILING</code> — Integer ceiling function</a> </li>\n<li>\n<a href=\"char#CHAR\">8.46 <code>CHAR</code> — Character conversion function</a> </li>\n<li>\n<a href=\"chdir#CHDIR\">8.47 <code>CHDIR</code> — Change working directory</a> </li>\n<li>\n<a href=\"chmod#CHMOD\">8.48 <code>CHMOD</code> — Change access permissions of files</a> </li>\n<li>\n<a href=\"cmplx#CMPLX\">8.49 <code>CMPLX</code> — Complex conversion function</a> </li>\n<li>\n<a href=\"command_005fargument_005fcount#COMMAND_005fARGUMENT_005fCOUNT\">8.50 <code>COMMAND_ARGUMENT_COUNT</code> — Get number of command line arguments</a> </li>\n<li>\n<a href=\"compiler_005foptions#COMPILER_005fOPTIONS\">8.51 <code>COMPILER_OPTIONS</code> — Options passed to the compiler</a> </li>\n<li>\n<a href=\"compiler_005fversion#COMPILER_005fVERSION\">8.52 <code>COMPILER_VERSION</code> — Compiler version string</a> </li>\n<li>\n<a href=\"complex#COMPLEX\">8.53 <code>COMPLEX</code> — Complex conversion function</a> </li>\n<li>\n<a href=\"conjg#CONJG\">8.54 <code>CONJG</code> — Complex conjugate function</a> </li>\n<li>\n<a href=\"cos#COS\">8.55 <code>COS</code> — Cosine function</a> </li>\n<li>\n<a href=\"cosh#COSH\">8.56 <code>COSH</code> — Hyperbolic cosine function</a> </li>\n<li>\n<a href=\"count#COUNT\">8.57 <code>COUNT</code> — Count function</a> </li>\n<li>\n<a href=\"cpu_005ftime#CPU_005fTIME\">8.58 <code>CPU_TIME</code> — CPU elapsed time in seconds</a> </li>\n<li>\n<a href=\"cshift#CSHIFT\">8.59 <code>CSHIFT</code> — Circular shift elements of an array</a> </li>\n<li>\n<a href=\"ctime#CTIME\">8.60 <code>CTIME</code> — Convert a time into a string</a> </li>\n<li>\n<a href=\"date_005fand_005ftime#DATE_005fAND_005fTIME\">8.61 <code>DATE_AND_TIME</code> — Date and time subroutine</a> </li>\n<li>\n<a href=\"dble#DBLE\">8.62 <code>DBLE</code> — Double conversion function</a> </li>\n<li>\n<a href=\"dcmplx#DCMPLX\">8.63 <code>DCMPLX</code> — Double complex conversion function</a> </li>\n<li>\n<a href=\"digits#DIGITS\">8.64 <code>DIGITS</code> — Significant binary digits function</a> </li>\n<li>\n<a href=\"dim#DIM\">8.65 <code>DIM</code> — Positive difference</a> </li>\n<li>\n<a href=\"dot_005fproduct#DOT_005fPRODUCT\">8.66 <code>DOT_PRODUCT</code> — Dot product function</a> </li>\n<li>\n<a href=\"dprod#DPROD\">8.67 <code>DPROD</code> — Double product function</a> </li>\n<li>\n<a href=\"dreal#DREAL\">8.68 <code>DREAL</code> — Double real part function</a> </li>\n<li>\n<a href=\"dshiftl#DSHIFTL\">8.69 <code>DSHIFTL</code> — Combined left shift</a> </li>\n<li>\n<a href=\"dshiftr#DSHIFTR\">8.70 <code>DSHIFTR</code> — Combined right shift</a> </li>\n<li>\n<a href=\"dtime#DTIME\">8.71 <code>DTIME</code> — Execution time subroutine (or function)</a> </li>\n<li>\n<a href=\"eoshift#EOSHIFT\">8.72 <code>EOSHIFT</code> — End-off shift elements of an array</a> </li>\n<li>\n<a href=\"epsilon#EPSILON\">8.73 <code>EPSILON</code> — Epsilon function</a> </li>\n<li>\n<a href=\"erf#ERF\">8.74 <code>ERF</code> — Error function</a> </li>\n<li>\n<a href=\"erfc#ERFC\">8.75 <code>ERFC</code> — Error function</a> </li>\n<li>\n<a href=\"erfc_005fscaled#ERFC_005fSCALED\">8.76 <code>ERFC_SCALED</code> — Error function</a> </li>\n<li>\n<a href=\"etime#ETIME\">8.77 <code>ETIME</code> — Execution time subroutine (or function)</a> </li>\n<li>\n<a href=\"execute_005fcommand_005fline#EXECUTE_005fCOMMAND_005fLINE\">8.78 <code>EXECUTE_COMMAND_LINE</code> — Execute a shell command</a> </li>\n<li>\n<a href=\"exit#EXIT\">8.79 <code>EXIT</code> — Exit the program with status.</a> </li>\n<li>\n<a href=\"exp#EXP\">8.80 <code>EXP</code> — Exponential function</a> </li>\n<li>\n<a href=\"exponent#EXPONENT\">8.81 <code>EXPONENT</code> — Exponent function</a> </li>\n<li>\n<a href=\"extends_005ftype_005fof#EXTENDS_005fTYPE_005fOF\">8.82 <code>EXTENDS_TYPE_OF</code> — Query dynamic type for extension</a> </li>\n<li>\n<a href=\"fdate#FDATE\">8.83 <code>FDATE</code> — Get the current time as a string</a> </li>\n<li>\n<a href=\"fget#FGET\">8.84 <code>FGET</code> — Read a single character in stream mode from stdin</a> </li>\n<li>\n<a href=\"fgetc#FGETC\">8.85 <code>FGETC</code> — Read a single character in stream mode</a> </li>\n<li>\n<a href=\"floor#FLOOR\">8.86 <code>FLOOR</code> — Integer floor function</a> </li>\n<li>\n<a href=\"flush#FLUSH\">8.87 <code>FLUSH</code> — Flush I/O unit(s)</a> </li>\n<li>\n<a href=\"fnum#FNUM\">8.88 <code>FNUM</code> — File number function</a> </li>\n<li>\n<a href=\"fput#FPUT\">8.89 <code>FPUT</code> — Write a single character in stream mode to stdout</a> </li>\n<li>\n<a href=\"fputc#FPUTC\">8.90 <code>FPUTC</code> — Write a single character in stream mode</a> </li>\n<li>\n<a href=\"fraction#FRACTION\">8.91 <code>FRACTION</code> — Fractional part of the model representation</a> </li>\n<li>\n<a href=\"free#FREE\">8.92 <code>FREE</code> — Frees memory</a> </li>\n<li>\n<a href=\"fseek#FSEEK\">8.93 <code>FSEEK</code> — Low level file positioning subroutine</a> </li>\n<li>\n<a href=\"fstat#FSTAT\">8.94 <code>FSTAT</code> — Get file status</a> </li>\n<li>\n<a href=\"ftell#FTELL\">8.95 <code>FTELL</code> — Current stream position</a> </li>\n<li>\n<a href=\"gamma#GAMMA\">8.96 <code>GAMMA</code> — Gamma function</a> </li>\n<li>\n<a href=\"gerror#GERROR\">8.97 <code>GERROR</code> — Get last system error message</a> </li>\n<li>\n<a href=\"getarg#GETARG\">8.98 <code>GETARG</code> — Get command line arguments</a> </li>\n<li>\n<a href=\"get_005fcommand#GET_005fCOMMAND\">8.99 <code>GET_COMMAND</code> — Get the entire command line</a> </li>\n<li>\n<a href=\"get_005fcommand_005fargument#GET_005fCOMMAND_005fARGUMENT\">8.100 <code>GET_COMMAND_ARGUMENT</code> — Get command line arguments</a> </li>\n<li>\n<a href=\"getcwd#GETCWD\">8.101 <code>GETCWD</code> — Get current working directory</a> </li>\n<li>\n<a href=\"getenv#GETENV\">8.102 <code>GETENV</code> — Get an environmental variable</a> </li>\n<li>\n<a href=\"get_005fenvironment_005fvariable#GET_005fENVIRONMENT_005fVARIABLE\">8.103 <code>GET_ENVIRONMENT_VARIABLE</code> — Get an environmental variable</a> </li>\n<li>\n<a href=\"getgid#GETGID\">8.104 <code>GETGID</code> — Group ID function</a> </li>\n<li>\n<a href=\"getlog#GETLOG\">8.105 <code>GETLOG</code> — Get login name</a> </li>\n<li>\n<a href=\"getpid#GETPID\">8.106 <code>GETPID</code> — Process ID function</a> </li>\n<li>\n<a href=\"getuid#GETUID\">8.107 <code>GETUID</code> — User ID function</a> </li>\n<li>\n<a href=\"gmtime#GMTIME\">8.108 <code>GMTIME</code> — Convert time to GMT info</a> </li>\n<li>\n<a href=\"hostnm#HOSTNM\">8.109 <code>HOSTNM</code> — Get system host name</a> </li>\n<li>\n<a href=\"huge#HUGE\">8.110 <code>HUGE</code> — Largest number of a kind</a> </li>\n<li>\n<a href=\"hypot#HYPOT\">8.111 <code>HYPOT</code> — Euclidean distance function</a> </li>\n<li>\n<a href=\"iachar#IACHAR\">8.112 <code>IACHAR</code> — Code in ASCII collating sequence</a> </li>\n<li>\n<a href=\"iall#IALL\">8.113 <code>IALL</code> — Bitwise AND of array elements</a> </li>\n<li>\n<a href=\"iand#IAND\">8.114 <code>IAND</code> — Bitwise logical and</a> </li>\n<li>\n<a href=\"iany#IANY\">8.115 <code>IANY</code> — Bitwise OR of array elements</a> </li>\n<li>\n<a href=\"iargc#IARGC\">8.116 <code>IARGC</code> — Get the number of command line arguments</a> </li>\n<li>\n<a href=\"ibclr#IBCLR\">8.117 <code>IBCLR</code> — Clear bit</a> </li>\n<li>\n<a href=\"ibits#IBITS\">8.118 <code>IBITS</code> — Bit extraction</a> </li>\n<li>\n<a href=\"ibset#IBSET\">8.119 <code>IBSET</code> — Set bit</a> </li>\n<li>\n<a href=\"ichar#ICHAR\">8.120 <code>ICHAR</code> — Character-to-integer conversion function</a> </li>\n<li>\n<a href=\"idate#IDATE\">8.121 <code>IDATE</code> — Get current local time subroutine (day/month/year)</a> </li>\n<li>\n<a href=\"ieor#IEOR\">8.122 <code>IEOR</code> — Bitwise logical exclusive or</a> </li>\n<li>\n<a href=\"ierrno#IERRNO\">8.123 <code>IERRNO</code> — Get the last system error number</a> </li>\n<li>\n<a href=\"image_005findex#IMAGE_005fINDEX\">8.124 <code>IMAGE_INDEX</code> — Function that converts a cosubscript to an image index</a> </li>\n<li>\n<a href=\"index-intrinsic#INDEX-intrinsic\">8.125 <code>INDEX</code> — Position of a substring within a string</a> </li>\n<li>\n<a href=\"int#INT\">8.126 <code>INT</code> — Convert to integer type</a> </li>\n<li>\n<a href=\"int2#INT2\">8.127 <code>INT2</code> — Convert to 16-bit integer type</a> </li>\n<li>\n<a href=\"int8#INT8\">8.128 <code>INT8</code> — Convert to 64-bit integer type</a> </li>\n<li>\n<a href=\"ior#IOR\">8.129 <code>IOR</code> — Bitwise logical or</a> </li>\n<li>\n<a href=\"iparity#IPARITY\">8.130 <code>IPARITY</code> — Bitwise XOR of array elements</a> </li>\n<li>\n<a href=\"irand#IRAND\">8.131 <code>IRAND</code> — Integer pseudo-random number</a> </li>\n<li>\n<a href=\"is_005fiostat_005fend#IS_005fIOSTAT_005fEND\">8.132 <code>IS_IOSTAT_END</code> — Test for end-of-file value</a> </li>\n<li>\n<a href=\"is_005fiostat_005feor#IS_005fIOSTAT_005fEOR\">8.133 <code>IS_IOSTAT_EOR</code> — Test for end-of-record value</a> </li>\n<li>\n<a href=\"isatty#ISATTY\">8.134 <code>ISATTY</code> — Whether a unit is a terminal device.</a> </li>\n<li>\n<a href=\"ishft#ISHFT\">8.135 <code>ISHFT</code> — Shift bits</a> </li>\n<li>\n<a href=\"ishftc#ISHFTC\">8.136 <code>ISHFTC</code> — Shift bits circularly</a> </li>\n<li>\n<a href=\"isnan#ISNAN\">8.137 <code>ISNAN</code> — Test for a NaN</a> </li>\n<li>\n<a href=\"itime#ITIME\">8.138 <code>ITIME</code> — Get current local time subroutine (hour/minutes/seconds)</a> </li>\n<li>\n<a href=\"kill#KILL\">8.139 <code>KILL</code> — Send a signal to a process</a> </li>\n<li>\n<a href=\"kind#KIND\">8.140 <code>KIND</code> — Kind of an entity</a> </li>\n<li>\n<a href=\"lbound#LBOUND\">8.141 <code>LBOUND</code> — Lower dimension bounds of an array</a> </li>\n<li>\n<a href=\"lcobound#LCOBOUND\">8.142 <code>LCOBOUND</code> — Lower codimension bounds of an array</a> </li>\n<li>\n<a href=\"leadz#LEADZ\">8.143 <code>LEADZ</code> — Number of leading zero bits of an integer</a> </li>\n<li>\n<a href=\"len#LEN\">8.144 <code>LEN</code> — Length of a character entity</a> </li>\n<li>\n<a href=\"len_005ftrim#LEN_005fTRIM\">8.145 <code>LEN_TRIM</code> — Length of a character entity without trailing blank characters</a> </li>\n<li>\n<a href=\"lge#LGE\">8.146 <code>LGE</code> — Lexical greater than or equal</a> </li>\n<li>\n<a href=\"lgt#LGT\">8.147 <code>LGT</code> — Lexical greater than</a> </li>\n<li>\n<a href=\"link#LINK\">8.148 <code>LINK</code> — Create a hard link</a> </li>\n<li>\n<a href=\"lle#LLE\">8.149 <code>LLE</code> — Lexical less than or equal</a> </li>\n<li>\n<a href=\"llt#LLT\">8.150 <code>LLT</code> — Lexical less than</a> </li>\n<li>\n<a href=\"lnblnk#LNBLNK\">8.151 <code>LNBLNK</code> — Index of the last non-blank character in a string</a> </li>\n<li>\n<a href=\"loc#LOC\">8.152 <code>LOC</code> — Returns the address of a variable</a> </li>\n<li>\n<a href=\"log#LOG\">8.153 <code>LOG</code> — Natural logarithm function</a> </li>\n<li>\n<a href=\"log10#LOG10\">8.154 <code>LOG10</code> — Base 10 logarithm function</a> </li>\n<li>\n<a href=\"log_005fgamma#LOG_005fGAMMA\">8.155 <code>LOG_GAMMA</code> — Logarithm of the Gamma function</a> </li>\n<li>\n<a href=\"logical#LOGICAL\">8.156 <code>LOGICAL</code> — Convert to logical type</a> </li>\n<li>\n<a href=\"long#LONG\">8.157 <code>LONG</code> — Convert to integer type</a> </li>\n<li>\n<a href=\"lshift#LSHIFT\">8.158 <code>LSHIFT</code> — Left shift bits</a> </li>\n<li>\n<a href=\"lstat#LSTAT\">8.159 <code>LSTAT</code> — Get file status</a> </li>\n<li>\n<a href=\"ltime#LTIME\">8.160 <code>LTIME</code> — Convert time to local time info</a> </li>\n<li>\n<a href=\"malloc#MALLOC\">8.161 <code>MALLOC</code> — Allocate dynamic memory</a> </li>\n<li>\n<a href=\"maskl#MASKL\">8.162 <code>MASKL</code> — Left justified mask</a> </li>\n<li>\n<a href=\"maskr#MASKR\">8.163 <code>MASKR</code> — Right justified mask</a> </li>\n<li>\n<a href=\"matmul#MATMUL\">8.164 <code>MATMUL</code> — matrix multiplication</a> </li>\n<li>\n<a href=\"max#MAX\">8.165 <code>MAX</code> — Maximum value of an argument list</a> </li>\n<li>\n<a href=\"maxexponent#MAXEXPONENT\">8.166 <code>MAXEXPONENT</code> — Maximum exponent of a real kind</a> </li>\n<li>\n<a href=\"maxloc#MAXLOC\">8.167 <code>MAXLOC</code> — Location of the maximum value within an array</a> </li>\n<li>\n<a href=\"maxval#MAXVAL\">8.168 <code>MAXVAL</code> — Maximum value of an array</a> </li>\n<li>\n<a href=\"mclock#MCLOCK\">8.169 <code>MCLOCK</code> — Time function</a> </li>\n<li>\n<a href=\"mclock8#MCLOCK8\">8.170 <code>MCLOCK8</code> — Time function (64-bit)</a> </li>\n<li>\n<a href=\"merge#MERGE\">8.171 <code>MERGE</code> — Merge variables</a> </li>\n<li>\n<a href=\"merge_005fbits#MERGE_005fBITS\">8.172 <code>MERGE_BITS</code> — Merge of bits under mask</a> </li>\n<li>\n<a href=\"min#MIN\">8.173 <code>MIN</code> — Minimum value of an argument list</a> </li>\n<li>\n<a href=\"minexponent#MINEXPONENT\">8.174 <code>MINEXPONENT</code> — Minimum exponent of a real kind</a> </li>\n<li>\n<a href=\"minloc#MINLOC\">8.175 <code>MINLOC</code> — Location of the minimum value within an array</a> </li>\n<li>\n<a href=\"minval#MINVAL\">8.176 <code>MINVAL</code> — Minimum value of an array</a> </li>\n<li>\n<a href=\"mod#MOD\">8.177 <code>MOD</code> — Remainder function</a> </li>\n<li>\n<a href=\"modulo#MODULO\">8.178 <code>MODULO</code> — Modulo function</a> </li>\n<li>\n<a href=\"move_005falloc#MOVE_005fALLOC\">8.179 <code>MOVE_ALLOC</code> — Move allocation from one object to another</a> </li>\n<li>\n<a href=\"mvbits#MVBITS\">8.180 <code>MVBITS</code> — Move bits from one integer to another</a> </li>\n<li>\n<a href=\"nearest#NEAREST\">8.181 <code>NEAREST</code> — Nearest representable number</a> </li>\n<li>\n<a href=\"new_005fline#NEW_005fLINE\">8.182 <code>NEW_LINE</code> — New line character</a> </li>\n<li>\n<a href=\"nint#NINT\">8.183 <code>NINT</code> — Nearest whole number</a> </li>\n<li>\n<a href=\"norm2#NORM2\">8.184 <code>NORM2</code> — Euclidean vector norms</a> </li>\n<li>\n<a href=\"not#NOT\">8.185 <code>NOT</code> — Logical negation</a> </li>\n<li>\n<a href=\"null#NULL\">8.186 <code>NULL</code> — Function that returns an disassociated pointer</a> </li>\n<li>\n<a href=\"num_005fimages#NUM_005fIMAGES\">8.187 <code>NUM_IMAGES</code> — Function that returns the number of images</a> </li>\n<li>\n<a href=\"or#OR\">8.188 <code>OR</code> — Bitwise logical OR</a> </li>\n<li>\n<a href=\"pack#PACK\">8.189 <code>PACK</code> — Pack an array into an array of rank one</a> </li>\n<li>\n<a href=\"parity#PARITY\">8.190 <code>PARITY</code> — Reduction with exclusive OR</a> </li>\n<li>\n<a href=\"perror#PERROR\">8.191 <code>PERROR</code> — Print system error message</a> </li>\n<li>\n<a href=\"popcnt#POPCNT\">8.192 <code>POPCNT</code> — Number of bits set</a> </li>\n<li>\n<a href=\"poppar#POPPAR\">8.193 <code>POPPAR</code> — Parity of the number of bits set</a> </li>\n<li>\n<a href=\"precision#PRECISION\">8.194 <code>PRECISION</code> — Decimal precision of a real kind</a> </li>\n<li>\n<a href=\"present#PRESENT\">8.195 <code>PRESENT</code> — Determine whether an optional dummy argument is specified</a> </li>\n<li>\n<a href=\"product#PRODUCT\">8.196 <code>PRODUCT</code> — Product of array elements</a> </li>\n<li>\n<a href=\"radix#RADIX\">8.197 <code>RADIX</code> — Base of a model number</a> </li>\n<li>\n<a href=\"ran#RAN\">8.198 <code>RAN</code> — Real pseudo-random number</a> </li>\n<li>\n<a href=\"rand#RAND\">8.199 <code>RAND</code> — Real pseudo-random number</a> </li>\n<li>\n<a href=\"random_005fnumber#RANDOM_005fNUMBER\">8.200 <code>RANDOM_NUMBER</code> — Pseudo-random number</a> </li>\n<li>\n<a href=\"random_005fseed#RANDOM_005fSEED\">8.201 <code>RANDOM_SEED</code> — Initialize a pseudo-random number sequence</a> </li>\n<li>\n<a href=\"range#RANGE\">8.202 <code>RANGE</code> — Decimal exponent range</a> </li>\n<li>\n<a href=\"rank#RANK\">8.203 <code>RANK</code> — Rank of a data object</a> </li>\n<li>\n<a href=\"real#REAL\">8.204 <code>REAL</code> — Convert to real type</a> </li>\n<li>\n<a href=\"rename#RENAME\">8.205 <code>RENAME</code> — Rename a file</a> </li>\n<li>\n<a href=\"repeat#REPEAT\">8.206 <code>REPEAT</code> — Repeated string concatenation</a> </li>\n<li>\n<a href=\"reshape#RESHAPE\">8.207 <code>RESHAPE</code> — Function to reshape an array</a> </li>\n<li>\n<a href=\"rrspacing#RRSPACING\">8.208 <code>RRSPACING</code> — Reciprocal of the relative spacing</a> </li>\n<li>\n<a href=\"rshift#RSHIFT\">8.209 <code>RSHIFT</code> — Right shift bits</a> </li>\n<li>\n<a href=\"same_005ftype_005fas#SAME_005fTYPE_005fAS\">8.210 <code>SAME_TYPE_AS</code> — Query dynamic types for equality</a> </li>\n<li>\n<a href=\"scale#SCALE\">8.211 <code>SCALE</code> — Scale a real value</a> </li>\n<li>\n<a href=\"scan#SCAN\">8.212 <code>SCAN</code> — Scan a string for the presence of a set of characters</a> </li>\n<li>\n<a href=\"secnds#SECNDS\">8.213 <code>SECNDS</code> — Time function</a> </li>\n<li>\n<a href=\"second#SECOND\">8.214 <code>SECOND</code> — CPU time function</a> </li>\n<li>\n<a href=\"selected_005fchar_005fkind#SELECTED_005fCHAR_005fKIND\">8.215 <code>SELECTED_CHAR_KIND</code> — Choose character kind</a> </li>\n<li>\n<a href=\"selected_005fint_005fkind#SELECTED_005fINT_005fKIND\">8.216 <code>SELECTED_INT_KIND</code> — Choose integer kind</a> </li>\n<li>\n<a href=\"selected_005freal_005fkind#SELECTED_005fREAL_005fKIND\">8.217 <code>SELECTED_REAL_KIND</code> — Choose real kind</a> </li>\n<li>\n<a href=\"set_005fexponent#SET_005fEXPONENT\">8.218 <code>SET_EXPONENT</code> — Set the exponent of the model</a> </li>\n<li>\n<a href=\"shape#SHAPE\">8.219 <code>SHAPE</code> — Determine the shape of an array</a> </li>\n<li>\n<a href=\"shifta#SHIFTA\">8.220 <code>SHIFTA</code> — Right shift with fill</a> </li>\n<li>\n<a href=\"shiftl#SHIFTL\">8.221 <code>SHIFTL</code> — Left shift</a> </li>\n<li>\n<a href=\"shiftr#SHIFTR\">8.222 <code>SHIFTR</code> — Right shift</a> </li>\n<li>\n<a href=\"sign#SIGN\">8.223 <code>SIGN</code> — Sign copying function</a> </li>\n<li>\n<a href=\"signal#SIGNAL\">8.224 <code>SIGNAL</code> — Signal handling subroutine (or function)</a> </li>\n<li>\n<a href=\"sin#SIN\">8.225 <code>SIN</code> — Sine function</a> </li>\n<li>\n<a href=\"sinh#SINH\">8.226 <code>SINH</code> — Hyperbolic sine function</a> </li>\n<li>\n<a href=\"size#SIZE\">8.227 <code>SIZE</code> — Determine the size of an array</a> </li>\n<li>\n<a href=\"sizeof#SIZEOF\">8.228 <code>SIZEOF</code> — Size in bytes of an expression</a> </li>\n<li>\n<a href=\"sleep#SLEEP\">8.229 <code>SLEEP</code> — Sleep for the specified number of seconds</a> </li>\n<li>\n<a href=\"spacing#SPACING\">8.230 <code>SPACING</code> — Smallest distance between two numbers of a given type</a> </li>\n<li>\n<a href=\"spread#SPREAD\">8.231 <code>SPREAD</code> — Add a dimension to an array</a> </li>\n<li>\n<a href=\"sqrt#SQRT\">8.232 <code>SQRT</code> — Square-root function</a> </li>\n<li>\n<a href=\"srand#SRAND\">8.233 <code>SRAND</code> — Reinitialize the random number generator</a> </li>\n<li>\n<a href=\"stat#STAT\">8.234 <code>STAT</code> — Get file status</a> </li>\n<li>\n<a href=\"storage_005fsize#STORAGE_005fSIZE\">8.235 <code>STORAGE_SIZE</code> — Storage size in bits</a> </li>\n<li>\n<a href=\"sum#SUM\">8.236 <code>SUM</code> — Sum of array elements</a> </li>\n<li>\n<a href=\"symlnk#SYMLNK\">8.237 <code>SYMLNK</code> — Create a symbolic link</a> </li>\n<li>\n<a href=\"system#SYSTEM\">8.238 <code>SYSTEM</code> — Execute a shell command</a> </li>\n<li>\n<a href=\"system_005fclock#SYSTEM_005fCLOCK\">8.239 <code>SYSTEM_CLOCK</code> — Time function</a> </li>\n<li>\n<a href=\"tan#TAN\">8.240 <code>TAN</code> — Tangent function</a> </li>\n<li>\n<a href=\"tanh#TANH\">8.241 <code>TANH</code> — Hyperbolic tangent function</a> </li>\n<li>\n<a href=\"this_005fimage#THIS_005fIMAGE\">8.242 <code>THIS_IMAGE</code> — Function that returns the cosubscript index of this image</a> </li>\n<li>\n<a href=\"time#TIME\">8.243 <code>TIME</code> — Time function</a> </li>\n<li>\n<a href=\"time8#TIME8\">8.244 <code>TIME8</code> — Time function (64-bit)</a> </li>\n<li>\n<a href=\"tiny#TINY\">8.245 <code>TINY</code> — Smallest positive number of a real kind</a> </li>\n<li>\n<a href=\"trailz#TRAILZ\">8.246 <code>TRAILZ</code> — Number of trailing zero bits of an integer</a> </li>\n<li>\n<a href=\"transfer#TRANSFER\">8.247 <code>TRANSFER</code> — Transfer bit patterns</a> </li>\n<li>\n<a href=\"transpose#TRANSPOSE\">8.248 <code>TRANSPOSE</code> — Transpose an array of rank two</a> </li>\n<li>\n<a href=\"trim#TRIM\">8.249 <code>TRIM</code> — Remove trailing blank characters of a string</a> </li>\n<li>\n<a href=\"ttynam#TTYNAM\">8.250 <code>TTYNAM</code> — Get the name of a terminal device.</a> </li>\n<li>\n<a href=\"ubound#UBOUND\">8.251 <code>UBOUND</code> — Upper dimension bounds of an array</a> </li>\n<li>\n<a href=\"ucobound#UCOBOUND\">8.252 <code>UCOBOUND</code> — Upper codimension bounds of an array</a> </li>\n<li>\n<a href=\"umask#UMASK\">8.253 <code>UMASK</code> — Set the file creation mask</a> </li>\n<li>\n<a href=\"unlink#UNLINK\">8.254 <code>UNLINK</code> — Remove a file from the file system</a> </li>\n<li>\n<a href=\"unpack#UNPACK\">8.255 <code>UNPACK</code> — Unpack an array of rank one into an array</a> </li>\n<li>\n<a href=\"verify#VERIFY\">8.256 <code>VERIFY</code> — Scan a string for characters not a given set</a> </li>\n<li>\n<a href=\"xor#XOR\">8.257 <code>XOR</code> — Bitwise logical exclusive OR</a> </li>\n</ul> </li>\n<li>\n<a name=\"toc_Intrinsic-Modules\" href=\"intrinsic-modules#Intrinsic-Modules\" id=\"toc_Intrinsic-Modules\">9 Intrinsic Modules</a> <ul> <li>\n<a href=\"iso_005ffortran_005fenv#ISO_005fFORTRAN_005fENV\">9.1 <code>ISO_FORTRAN_ENV</code></a> </li>\n<li>\n<a href=\"iso_005fc_005fbinding#ISO_005fC_005fBINDING\">9.2 <code>ISO_C_BINDING</code></a> </li>\n<li>\n<a href=\"openmp-modules-omp_005flib-and-omp_005flib_005fkinds#OpenMP-Modules-OMP_005fLIB-and-OMP_005fLIB_005fKINDS\">9.3 OpenMP Modules <code>OMP_LIB</code> and <code>OMP_LIB_KINDS</code></a> </li>\n</ul> </li>\n<li>\n<a name=\"toc_Contributing\" href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Contributing.html#Contributing\" id=\"toc_Contributing\">Contributing</a> <ul> <li>\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Contributors.html#Contributors\">Contributors to GNU Fortran</a> </li>\n<li>\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Projects.html#Projects\">Projects</a> </li>\n<li>\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Proposed-Extensions.html#Proposed-Extensions\">Proposed Extensions</a> <ul> <li>\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Proposed-Extensions.html#Proposed-Extensions\">Compiler extensions:</a> </li>\n<li>\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Proposed-Extensions.html#Proposed-Extensions\">Environment Options</a> </li>\n</ul> </li>\n</ul> </li>\n<li>\n<a name=\"toc_Copying\" href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Copying.html#Copying\" id=\"toc_Copying\">GNU General Public License</a> </li>\n<li>\n<a name=\"toc_GNU-Free-Documentation-License\" href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GNU-Free-Documentation-License.html#GNU-Free-Documentation-License\" id=\"toc_GNU-Free-Documentation-License\">GNU Free Documentation License</a> <ul> <li>\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GNU-Free-Documentation-License.html#GNU-Free-Documentation-License\">ADDENDUM: How to use this License for your documents</a> </li>\n</ul> </li>\n<li>\n<a name=\"toc_Funding\" href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Funding.html#Funding\" id=\"toc_Funding\">Funding Free Software</a> </li>\n<li>\n<a name=\"toc_Option-Index\" href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Option-Index.html#Option-Index\" id=\"toc_Option-Index\">Option Index</a> </li>\n<li>\n<a name=\"toc_Keyword-Index\" href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Keyword-Index.html#Keyword-Index\" id=\"toc_Keyword-Index\">Keyword Index</a> </li>\n</ul> </div>     <h2 class=\"unnumbered\" id=\"Top\">Introduction</h2> <p> This manual documents the use of <code>gfortran</code>, the GNU Fortran compiler. You can find in this manual how to invoke <code>gfortran</code>, as well as its features and incompatibilities.    </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"introduction#Introduction\">Introduction</a> </li>\n</ul> <p>Part I: Invoking GNU Fortran </p> <ul class=\"menu\"> <li>\n<a accesskey=\"2\" href=\"invoking-gnu-fortran#Invoking-GNU-Fortran\">Invoking GNU Fortran</a>: Command options supported by <code>gfortran</code>. </li>\n<li>\n<a accesskey=\"3\" href=\"runtime#Runtime\">Runtime</a>: Influencing runtime behavior with environment variables. </li>\n</ul> <p>Part II: Language Reference </p> <ul class=\"menu\"> <li>\n<a accesskey=\"4\" href=\"fortran-2003-and-2008-status#Fortran-2003-and-2008-status\">Fortran 2003 and 2008 status</a>: Fortran 2003 and 2008 features supported by GNU Fortran. </li>\n<li>\n<a accesskey=\"5\" href=\"compiler-characteristics#Compiler-Characteristics\">Compiler Characteristics</a>: User-visible implementation details. </li>\n<li>\n<a accesskey=\"6\" href=\"extensions#Extensions\">Extensions</a>: Language extensions implemented by GNU Fortran. </li>\n<li>\n<a accesskey=\"7\" href=\"mixed_002dlanguage-programming#Mixed_002dLanguage-Programming\">Mixed-Language Programming</a>: Interoperability with C </li>\n<li>\n<a accesskey=\"8\" href=\"intrinsic-procedures#Intrinsic-Procedures\">Intrinsic Procedures</a>: Intrinsic procedures supported by GNU Fortran. </li>\n<li>\n<a accesskey=\"9\" href=\"intrinsic-modules#Intrinsic-Modules\">Intrinsic Modules</a>: Intrinsic modules supported by GNU Fortran. </li>\n<li>\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Contributing.html#Contributing\">Contributing</a>: How you can help. </li>\n<li>\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Copying.html#Copying\">Copying</a>: GNU General Public License says how you can copy and share GNU Fortran. </li>\n<li>\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GNU-Free-Documentation-License.html#GNU-Free-Documentation-License\">GNU Free Documentation License</a> How you can copy and share this manual. </li>\n<li>\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Funding.html#Funding\">Funding</a>: How to help assure continued work for free software. </li>\n<li>\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Option-Index.html#Option-Index\">Option Index</a>: Index of command line options </li>\n<li>\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Keyword-Index.html#Keyword-Index\">Keyword Index</a>: Index of concepts </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/index.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/index.html</a>\n  </p>\n</div>\n","introduction":"<h1 class=\"chapter\" id=\"Introduction\">1 Introduction</h1>  <p>The GNU Fortran compiler front end was designed initially as a free replacement for, or alternative to, the Unix <code>f95</code> command; <code>gfortran</code> is the command you will use to invoke the compiler. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"about-gnu-fortran#About-GNU-Fortran\">About GNU Fortran</a>: What you should know about the GNU Fortran compiler. </li>\n<li>\n<a accesskey=\"2\" href=\"gnu-fortran-and-gcc#GNU-Fortran-and-GCC\">GNU Fortran and GCC</a>: You can compile Fortran, C, or other programs. </li>\n<li>\n<a accesskey=\"3\" href=\"preprocessing-and-conditional-compilation#Preprocessing-and-conditional-compilation\">Preprocessing and conditional compilation</a>: The Fortran preprocessor </li>\n<li>\n<a accesskey=\"4\" href=\"gnu-fortran-and-g77#GNU-Fortran-and-G77\">GNU Fortran and G77</a>: Why we chose to start from scratch. </li>\n<li>\n<a accesskey=\"5\" href=\"project-status#Project-Status\">Project Status</a>: Status of GNU Fortran, roadmap, proposed extensions. </li>\n<li>\n<a accesskey=\"6\" href=\"standards#Standards\">Standards</a>: Standards supported by GNU Fortran. </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Introduction.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Introduction.html</a>\n  </p>\n</div>\n","about-gnu-fortran":"<h1 class=\"section\" id=\"About-GNU-Fortran\">1.1 About GNU Fortran</h1> <p>The GNU Fortran compiler supports the Fortran 77, 90 and 95 standards completely, parts of the Fortran 2003 and Fortran 2008 standards, and several vendor extensions. The development goal is to provide the following features: </p>\n<ul> <li>Read a user's program, stored in a file and containing instructions written in Fortran 77, Fortran 90, Fortran 95, Fortran 2003 or Fortran 2008. This file contains source code. </li>\n<li>Translate the user's program into instructions a computer can carry out more quickly than it takes to translate the instructions in the first place. The result after compilation of a program is machine code, code designed to be efficiently translated and processed by a machine such as your computer. Humans usually are not as good writing machine code as they are at writing Fortran (or C++, Ada, or Java), because it is easy to make tiny mistakes writing machine code. </li>\n<li>Provide the user with information about the reasons why the compiler is unable to create a binary from the source code. Usually this will be the case if the source code is flawed. The Fortran 90 standard requires that the compiler can point out mistakes to the user. An incorrect usage of the language causes an error message. <p>The compiler will also attempt to diagnose cases where the user's program contains a correct usage of the language, but instructs the computer to do something questionable. This kind of diagnostics message is called a warning message. </p>\n</li>\n<li>Provide optional information about the translation passes from the source code to machine code. This can help a user of the compiler to find the cause of certain bugs which may not be obvious in the source code, but may be more easily found at a lower level compiler output. It also helps developers to find bugs in the compiler itself. </li>\n<li>Provide information in the generated machine code that can make it easier to find bugs in the program (using a debugging tool, called a debugger, such as the GNU Debugger <code>gdb</code>). </li>\n<li>Locate and gather machine code already generated to perform actions requested by statements in the user's program. This machine code is organized into modules and is located and linked to the user program. </li>\n</ul> <p>The GNU Fortran compiler consists of several components: </p>\n<ul> <li>A version of the <code>gcc</code> command (which also might be installed as the system's <code>cc</code> command) that also understands and accepts Fortran source code. The <code>gcc</code> command is the driver program for all the languages in the GNU Compiler Collection (GCC); With <code>gcc</code>, you can compile the source code of any language for which a front end is available in GCC. </li>\n<li>The <code>gfortran</code> command itself, which also might be installed as the system's <code>f95</code> command. <code>gfortran</code> is just another driver program, but specifically for the Fortran compiler only. The difference with <code>gcc</code> is that <code>gfortran</code> will automatically link the correct libraries to your program. </li>\n<li>A collection of run-time libraries. These libraries contain the machine code needed to support capabilities of the Fortran language that are not directly provided by the machine code generated by the <code>gfortran</code> compilation phase, such as intrinsic functions and subroutines, and routines for interaction with files and the operating system.   </li>\n<li>The Fortran compiler itself, (<code>f951</code>). This is the GNU Fortran parser and code generator, linked to and interfaced with the GCC backend library. <code>f951</code> “translates” the source code to assembler code. You would typically not use this program directly; instead, the <code>gcc</code> or <code>gfortran</code> driver programs will call it for you. </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/About-GNU-Fortran.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/About-GNU-Fortran.html</a>\n  </p>\n</div>\n","gnu-fortran-and-gcc":"<h1 class=\"section\" id=\"GNU-Fortran-and-GCC\">1.2 GNU Fortran and GCC</h1> <p> GNU Fortran is a part of GCC, the GNU Compiler Collection. GCC consists of a collection of front ends for various languages, which translate the source code into a language-independent form called GENERIC. This is then processed by a common middle end which provides optimization, and then passed to one of a collection of back ends which generate code for different computer architectures and operating systems. </p>\n<p>Functionally, this is implemented with a driver program (<code>gcc</code>) which provides the command-line interface for the compiler. It calls the relevant compiler front-end program (e.g., <code>f951</code> for Fortran) for each file in the source code, and then calls the assembler and linker as appropriate to produce the compiled output. In a copy of GCC which has been compiled with Fortran language support enabled, <code>gcc</code> will recognize files with <code>.f</code>, <code>.for</code>, <code>.ftn</code>, <code>.f90</code>, <code>.f95</code>, <code>.f03</code> and <code>.f08</code> extensions as Fortran source code, and compile it accordingly. A <code>gfortran</code> driver program is also provided, which is identical to <code>gcc</code> except that it automatically links the Fortran runtime libraries into the compiled program. </p>\n<p>Source files with <code>.f</code>, <code>.for</code>, <code>.fpp</code>, <code>.ftn</code>, <code>.F</code>, <code>.FOR</code>, <code>.FPP</code>, and <code>.FTN</code> extensions are treated as fixed form. Source files with <code>.f90</code>, <code>.f95</code>, <code>.f03</code>, <code>.f08</code>, <code>.F90</code>, <code>.F95</code>, <code>.F03</code> and <code>.F08</code> extensions are treated as free form. The capitalized versions of either form are run through preprocessing. Source files with the lower case <code>.fpp</code> extension are also run through preprocessing. </p>\n<p>This manual specifically documents the Fortran front end, which handles the programming language's syntax and semantics. The aspects of GCC which relate to the optimization passes and the back-end code generation are documented in the GCC manual; see <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/index.html#Top\">Introduction</a>. The two manuals together provide a complete reference for the GNU Fortran compiler.    </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GNU-Fortran-and-GCC.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GNU-Fortran-and-GCC.html</a>\n  </p>\n</div>\n","preprocessing-and-conditional-compilation":"<h1 class=\"section\" id=\"Preprocessing-and-conditional-compilation\">1.3 Preprocessing and conditional compilation</h1> <p> Many Fortran compilers including GNU Fortran allow passing the source code through a C preprocessor (CPP; sometimes also called the Fortran preprocessor, FPP) to allow for conditional compilation. In the case of GNU Fortran, this is the GNU C Preprocessor in the traditional mode. On systems with case-preserving file names, the preprocessor is automatically invoked if the filename extension is <code>.F</code>, <code>.FOR</code>, <code>.FTN</code>, <code>.fpp</code>, <code>.FPP</code>, <code>.F90</code>, <code>.F95</code>, <code>.F03</code> or <code>.F08</code>. To manually invoke the preprocessor on any file, use <code>-cpp</code>, to disable preprocessing on files where the preprocessor is run automatically, use <code>-nocpp</code>. </p>\n<p>If a preprocessed file includes another file with the Fortran <code>INCLUDE</code> statement, the included file is not preprocessed. To preprocess included files, use the equivalent preprocessor statement <code>#include</code>. </p>\n<p>If GNU Fortran invokes the preprocessor, <code>__GFORTRAN__</code> is defined and <code>__GNUC__</code>, <code>__GNUC_MINOR__</code> and <code>__GNUC_PATCHLEVEL__</code> can be used to determine the version of the compiler. See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/index.html#Top\">Overview</a> for details. </p>\n<p>While CPP is the de-facto standard for preprocessing Fortran code, Part 3 of the Fortran 95 standard (ISO/IEC 1539-3:1998) defines Conditional Compilation, which is not widely used and not directly supported by the GNU Fortran compiler. You can use the program coco to preprocess such files (<a href=\"http://www.daniellnagle.com/coco.html\">http://www.daniellnagle.com/coco.html</a>).    </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Preprocessing-and-conditional-compilation.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Preprocessing-and-conditional-compilation.html</a>\n  </p>\n</div>\n","gnu-fortran-and-g77":"<h1 class=\"section\" id=\"GNU-Fortran-and-G77\">1.4 GNU Fortran and G77</h1> <p> The GNU Fortran compiler is the successor to <code>g77</code>, the Fortran 77 front end included in GCC prior to version 4. It is an entirely new program that has been designed to provide Fortran 95 support and extensibility for future Fortran language standards, as well as providing backwards compatibility for Fortran 77 and nearly all of the GNU language extensions supported by <code>g77</code>.    </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GNU-Fortran-and-G77.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GNU-Fortran-and-G77.html</a>\n  </p>\n</div>\n","project-status":"<h1 class=\"section\" id=\"Project-Status\">1.5 Project Status</h1> <blockquote> As soon as <code>gfortran</code> can parse all of the statements correctly, it will be in the “larva” state. When we generate code, the “puppa” state. When <code>gfortran</code> is done, we'll see if it will be a beautiful butterfly, or just a big bug.... <p>–Andy Vaught, April 2000 </p>\n</blockquote> <p>The start of the GNU Fortran 95 project was announced on the GCC homepage in March 18, 2000 (even though Andy had already been working on it for a while, of course). </p>\n<p>The GNU Fortran compiler is able to compile nearly all standard-compliant Fortran 95, Fortran 90, and Fortran 77 programs, including a number of standard and non-standard extensions, and can be used on real-world programs. In particular, the supported extensions include OpenMP, Cray-style pointers, and several Fortran 2003 and Fortran 2008 features, including TR 15581. However, it is still under development and has a few remaining rough edges. </p>\n<p>At present, the GNU Fortran compiler passes the <a href=\"http://www.fortran-2000.com/ArnaudRecipes/fcvs21_f95.html\">NIST Fortran 77 Test Suite</a>, and produces acceptable results on the <a href=\"http://www.netlib.org/lapack/faq.html#1.21\">LAPACK Test Suite</a>. It also provides respectable performance on the <a href=\"http://www.polyhedron.com/pb05.html\">Polyhedron Fortran compiler benchmarks</a> and the <a href=\"http://www.llnl.gov/asci_benchmarks/asci/limited/lfk/README.html\">Livermore Fortran Kernels test</a>. It has been used to compile a number of large real-world programs, including <a href=\"http://mysite.verizon.net/serveall/moene.pdf\">the HIRLAM weather-forecasting code</a> and <a href=\"http://www.theochem.uwa.edu.au/tonto/\">the Tonto quantum chemistry package</a>; see <a href=\"http://gcc.gnu.org/wiki/GfortranApps\">http://gcc.gnu.org/wiki/GfortranApps</a> for an extended list. </p>\n<p>Among other things, the GNU Fortran compiler is intended as a replacement for G77. At this point, nearly all programs that could be compiled with G77 can be compiled with GNU Fortran, although there are a few minor known regressions. </p>\n<p>The primary work remaining to be done on GNU Fortran falls into three categories: bug fixing (primarily regarding the treatment of invalid code and providing useful error messages), improving the compiler optimizations and the performance of compiled code, and extending the compiler to support future standards—in particular, Fortran 2003 and Fortran 2008.    </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Project-Status.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Project-Status.html</a>\n  </p>\n</div>\n","standards":"<h1 class=\"section\" id=\"Standards\">1.6 Standards</h1> \n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"varying-length-character-strings#Varying-Length-Character-Strings\">Varying Length Character Strings</a> </li>\n</ul> <p>The GNU Fortran compiler implements ISO/IEC 1539:1997 (Fortran 95). As such, it can also compile essentially all standard-compliant Fortran 90 and Fortran 77 programs. It also supports the ISO/IEC TR-15581 enhancements to allocatable arrays. </p>\n<p>GNU Fortran also have a partial support for ISO/IEC 1539-1:2004 (Fortran 2003), ISO/IEC 1539-1:2010 (Fortran 2008), the Technical Specification <code>Further Interoperability of Fortran with C</code> (ISO/IEC TS 29113:2012). Full support of those standards and future Fortran standards is planned. The current status of the support is can be found in the <a href=\"fortran-2003-status#Fortran-2003-status\">Fortran 2003 status</a>, <a href=\"fortran-2008-status#Fortran-2008-status\">Fortran 2008 status</a> and <a href=\"ts-29113-status#TS-29113-status\">TS 29113 status</a> sections of the documentation. </p>\n<p>Additionally, the GNU Fortran compilers supports the OpenMP specification (version 4.0, <a href=\"http://openmp.org/wp/openmp-specifications/\">http://openmp.org/wp/openmp-specifications/</a>). </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Standards.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Standards.html</a>\n  </p>\n</div>\n","varying-length-character-strings":"<h1 class=\"subsection\" id=\"Varying-Length-Character-Strings\">1.6.1 Varying Length Character Strings</h1> <p> The Fortran 95 standard specifies in Part 2 (ISO/IEC 1539-2:2000) varying length character strings. While GNU Fortran currently does not support such strings directly, there exist two Fortran implementations for them, which work with GNU Fortran. They can be found at <a href=\"http://www.fortran.com/iso_varying_string.f95\">http://www.fortran.com/iso_varying_string.f95</a> and at <a href=\"ftp://ftp.nag.co.uk/sc22wg5/ISO_VARYING_STRING/\">ftp://ftp.nag.co.uk/sc22wg5/ISO_VARYING_STRING/</a>. </p>\n<p>Deferred-length character strings of Fortran 2003 supports part of the features of <code>ISO_VARYING_STRING</code> and should be considered as replacement. (Namely, allocatable or pointers of the type <code>character(len=:)</code>.)          </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Varying-Length-Character-Strings.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Varying-Length-Character-Strings.html</a>\n  </p>\n</div>\n","invoking-gnu-fortran":"<h1 class=\"chapter\" id=\"Invoking-GNU-Fortran\">2 GNU Fortran Command Options</h1> \n<p>The <code>gfortran</code> command supports all the options supported by the <code>gcc</code> command. Only options specific to GNU Fortran are documented here. </p>\n<p>See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Invoking-GCC.html#Invoking-GCC\">GCC Command Options</a>, for information on the non-Fortran-specific aspects of the <code>gcc</code> command (and, therefore, the <code>gfortran</code> command). </p>\n<p>All GCC and GNU Fortran options are accepted both by <code>gfortran</code> and by <code>gcc</code> (as well as any other drivers built at the same time, such as <code>g++</code>), since adding GNU Fortran to the GCC distribution enables acceptance of GNU Fortran options by all of the relevant drivers. </p>\n<p>In some cases, options have positive and negative forms; the negative form of <code>-ffoo</code> would be <code>-fno-foo</code>. This manual documents only one of these two forms, whichever one is not the default.  </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"option-summary#Option-Summary\">Option Summary</a>: Brief list of all <code>gfortran</code> options, without explanations. </li>\n<li>\n<a accesskey=\"2\" href=\"fortran-dialect-options#Fortran-Dialect-Options\">Fortran Dialect Options</a>: Controlling the variant of Fortran language compiled. </li>\n<li>\n<a accesskey=\"3\" href=\"preprocessing-options#Preprocessing-Options\">Preprocessing Options</a>: Enable and customize preprocessing. </li>\n<li>\n<a accesskey=\"4\" href=\"error-and-warning-options#Error-and-Warning-Options\">Error and Warning Options</a>: How picky should the compiler be? </li>\n<li>\n<a accesskey=\"5\" href=\"debugging-options#Debugging-Options\">Debugging Options</a>: Symbol tables, measurements, and debugging dumps. </li>\n<li>\n<a accesskey=\"6\" href=\"directory-options#Directory-Options\">Directory Options</a>: Where to find module files </li>\n<li>\n<a accesskey=\"7\" href=\"link-options#Link-Options\">Link Options </a>: Influencing the linking step </li>\n<li>\n<a accesskey=\"8\" href=\"runtime-options#Runtime-Options\">Runtime Options</a>: Influencing runtime behavior </li>\n<li>\n<a accesskey=\"9\" href=\"code-gen-options#Code-Gen-Options\">Code Gen Options</a>: Specifying conventions for function calls, data layout and register usage. </li>\n<li>\n<a href=\"environment-variables#Environment-Variables\">Environment Variables</a>: Environment variables that affect <code>gfortran</code>. </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Invoking-GNU-Fortran.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Invoking-GNU-Fortran.html</a>\n  </p>\n</div>\n","option-summary":"<h1 class=\"section\" id=\"Option-Summary\">2.1 Option summary</h1>  <p>Here is a summary of all the options specific to GNU Fortran, grouped by type. Explanations are in the following sections. </p>\n<dl> <dt>Fortran Language Options</dt>\n<dd>See <a href=\"fortran-dialect-options#Fortran-Dialect-Options\">Options controlling Fortran dialect</a>. <pre class=\"smallexample\">-fall-intrinsics -fbackslash -fcray-pointer -fd-lines-as-code \n-fd-lines-as-comments -fdefault-double-8 -fdefault-integer-8 \n-fdefault-real-8 -fdollar-ok -ffixed-line-length-<var>n</var> \n-ffixed-line-length-none -ffree-form -ffree-line-length-<var>n</var> \n-ffree-line-length-none -fimplicit-none -finteger-4-integer-8 \n-fmax-identifier-length -fmodule-private -fno-fixed-form -fno-range-check \n-fopenmp -freal-4-real-10 -freal-4-real-16 -freal-4-real-8 \n-freal-8-real-10 -freal-8-real-16 -freal-8-real-4 -std=<var>std</var></pre> </dd>\n<dt>Preprocessing Options</dt>\n<dd>See <a href=\"preprocessing-options#Preprocessing-Options\">Enable and customize preprocessing</a>. <pre class=\"smallexample\">-A-<var>question</var><span class=\"roman\">[</span>=<var>answer</var><span class=\"roman\">]</span>\n-A<var>question</var>=<var>answer</var> -C -CC -D<var>macro</var><span class=\"roman\">[</span>=<var>defn</var><span class=\"roman\">]</span>\n-H -P \n-U<var>macro</var> -cpp -dD -dI -dM -dN -dU -fworking-directory\n-imultilib <var>dir</var> \n-iprefix <var>file</var> -iquote -isysroot <var>dir</var> -isystem <var>dir</var> -nocpp\n-nostdinc \n-undef</pre> </dd>\n<dt>Error and Warning Options</dt>\n<dd>See <a href=\"error-and-warning-options#Error-and-Warning-Options\">Options to request or suppress errors and warnings</a>. <pre class=\"smallexample\">-Waliasing -Wall -Wampersand -Warray-bounds\n-Wc-binding-type -Wcharacter-truncation \n-Wconversion -Wfunction-elimination -Wimplicit-interface \n-Wimplicit-procedure -Wintrinsic-shadow -Wintrinsics-std \n-Wline-truncation -Wno-align-commons -Wno-tabs -Wreal-q-constant \n-Wsurprising -Wunderflow -Wunused-parameter -Wrealloc-lhs -Wrealloc-lhs-all \n-Wtarget-lifetime -fmax-errors=<var>n</var> -fsyntax-only -pedantic -pedantic-errors</pre> </dd>\n<dt>Debugging Options</dt>\n<dd>See <a href=\"debugging-options#Debugging-Options\">Options for debugging your program or GNU Fortran</a>. <pre class=\"smallexample\">-fbacktrace -fdump-fortran-optimized -fdump-fortran-original \n-fdump-parse-tree -ffpe-trap=<var>list</var> -ffpe-summary=<var>list</var></pre> </dd>\n<dt>Directory Options</dt>\n<dd>See <a href=\"directory-options#Directory-Options\">Options for directory search</a>. <pre class=\"smallexample\">-I<var>dir</var>  -J<var>dir</var> -fintrinsic-modules-path <var>dir</var></pre> </dd>\n<dt>Link Options</dt>\n<dd>See <a href=\"link-options#Link-Options\">Options for influencing the linking step</a>. <pre class=\"smallexample\">-static-libgfortran</pre> </dd>\n<dt>Runtime Options</dt>\n<dd>See <a href=\"runtime-options#Runtime-Options\">Options for influencing runtime behavior</a>. <pre class=\"smallexample\">-fconvert=<var>conversion</var> -fmax-subrecord-length=<var>length</var> \n-frecord-marker=<var>length</var> -fsign-zero</pre> </dd>\n<dt>Code Generation Options</dt>\n<dd>See <a href=\"code-gen-options#Code-Gen-Options\">Options for code generation conventions</a>. <pre class=\"smallexample\">-faggressive-function-elimination -fblas-matmul-limit=<var>n</var> \n-fbounds-check -fcheck-array-temporaries \n-fcheck=<var>&lt;all|array-temps|bounds|do|mem|pointer|recursion&gt;</var> \n-fcoarray=<var>&lt;none|single|lib&gt;</var> -fexternal-blas -ff2c\n-ffrontend-optimize \n-finit-character=<var>n</var> -finit-integer=<var>n</var> -finit-local-zero \n-finit-logical=<var>&lt;true|false&gt;</var>\n-finit-real=<var>&lt;zero|inf|-inf|nan|snan&gt;</var> \n-fmax-array-constructor=<var>n</var> -fmax-stack-var-size=<var>n</var>\n-fno-align-commons \n-fno-automatic -fno-protect-parens -fno-underscoring \n-fsecond-underscore -fpack-derived -frealloc-lhs -frecursive \n-frepack-arrays -fshort-enums -fstack-arrays</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Option-Summary.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Option-Summary.html</a>\n  </p>\n</div>\n","fortran-dialect-options":"<h1 class=\"section\" id=\"Fortran-Dialect-Options\">2.2 Options controlling Fortran dialect</h1> <p> The following options control the details of the Fortran dialect accepted by the compiler: </p>\n<dl> <dt>\n<code>-ffree-form</code><dt><code>-ffixed-form</code></dt>\n</dt>\n<dd>\nSpecify the layout used by the source file. The free form layout was introduced in Fortran 90. Fixed form was traditionally used in older Fortran programs. When neither option is specified, the source form is determined by the file extension. </dd>\n<dt><code>-fall-intrinsics</code></dt>\n<dd>\nThis option causes all intrinsic procedures (including the GNU-specific extensions) to be accepted. This can be useful with <code>-std=f95</code> to force standard-compliance but get access to the full range of intrinsics available with <code>gfortran</code>. As a consequence, <code>-Wintrinsics-std</code> will be ignored and no user-defined procedure with the same name as any intrinsic will be called except when it is explicitly declared <code>EXTERNAL</code>. </dd>\n<dt>\n<code>-fd-lines-as-code</code><dt><code>-fd-lines-as-comments</code></dt>\n</dt>\n<dd>\nEnable special treatment for lines beginning with <code>d</code> or <code>D</code> in fixed form sources. If the <code>-fd-lines-as-code</code> option is given they are treated as if the first column contained a blank. If the <code>-fd-lines-as-comments</code> option is given, they are treated as comment lines. </dd>\n<dt><code>-fdollar-ok</code></dt>\n<dd>\nAllow ‘<code>$</code>’ as a valid non-first character in a symbol name. Symbols that start with ‘<code>$</code>’ are rejected since it is unclear which rules to apply to implicit typing as different vendors implement different rules. Using ‘<code>$</code>’ in <code>IMPLICIT</code> statements is also rejected. </dd>\n<dt><code>-fbackslash</code></dt>\n<dd>\nChange the interpretation of backslashes in string literals from a single backslash character to “C-style” escape characters. The following combinations are expanded <code>\\a</code>, <code>\\b</code>, <code>\\f</code>, <code>\\n</code>, <code>\\r</code>, <code>\\t</code>, <code>\\v</code>, <code>\\\\</code>, and <code>\\0</code> to the ASCII characters alert, backspace, form feed, newline, carriage return, horizontal tab, vertical tab, backslash, and NUL, respectively. Additionally, <code>\\x</code><var>nn</var>, <code>\\u</code><var>nnnn</var> and <code>\\U</code><var>nnnnnnnn</var> (where each <var>n</var> is a hexadecimal digit) are translated into the Unicode characters corresponding to the specified code points. All other combinations of a character preceded by \\ are unexpanded. </dd>\n<dt><code>-fmodule-private</code></dt>\n<dd>\nSet the default accessibility of module entities to <code>PRIVATE</code>. Use-associated entities will not be accessible unless they are explicitly declared as <code>PUBLIC</code>. </dd>\n<dt>\n<code>-ffixed-line-length-</code><var>n</var>\n</dt>\n<dd>\nSet column after which characters are ignored in typical fixed-form lines in the source file, and through which spaces are assumed (as if padded to that length) after the ends of short fixed-form lines. <p>Popular values for <var>n</var> include 72 (the standard and the default), 80 (card image), and 132 (corresponding to “extended-source” options in some popular compilers). <var>n</var> may also be ‘<code>none</code>’, meaning that the entire line is meaningful and that continued character constants never have implicit spaces appended to them to fill out the line. <code>-ffixed-line-length-0</code> means the same thing as <code>-ffixed-line-length-none</code>. </p>\n</dd>\n<dt>\n<code>-ffree-line-length-</code><var>n</var>\n</dt>\n<dd>\nSet column after which characters are ignored in typical free-form lines in the source file. The default value is 132. <var>n</var> may be ‘<code>none</code>’, meaning that the entire line is meaningful. <code>-ffree-line-length-0</code> means the same thing as <code>-ffree-line-length-none</code>. </dd>\n<dt>\n<code>-fmax-identifier-length=</code><var>n</var>\n</dt>\n<dd>\nSpecify the maximum allowed identifier length. Typical values are 31 (Fortran 95) and 63 (Fortran 2003 and Fortran 2008). </dd>\n<dt><code>-fimplicit-none</code></dt>\n<dd>\nSpecify that no implicit typing is allowed, unless overridden by explicit <code>IMPLICIT</code> statements. This is the equivalent of adding <code>implicit none</code> to the start of every procedure. </dd>\n<dt><code>-fcray-pointer</code></dt>\n<dd>\nEnable the Cray pointer extension, which provides C-like pointer functionality. </dd>\n<dt><code>-fopenmp</code></dt>\n<dd>\nEnable the OpenMP extensions. This includes OpenMP <code>!$omp</code> directives in free form and <code>c$omp</code>, <code>*$omp</code> and <code>!$omp</code> directives in fixed form, <code>!$</code> conditional compilation sentinels in free form and <code>c$</code>, <code>*$</code> and <code>!$</code> sentinels in fixed form, and when linking arranges for the OpenMP runtime library to be linked in. The option <code>-fopenmp</code> implies <code>-frecursive</code>. </dd>\n<dt><code>-fno-range-check</code></dt>\n<dd>\nDisable range checking on results of simplification of constant expressions during compilation. For example, GNU Fortran will give an error at compile time when simplifying <code>a = 1. / 0</code>. With this option, no error will be given and <code>a</code> will be assigned the value <code>+Infinity</code>. If an expression evaluates to a value outside of the relevant range of [<code>-HUGE()</code>:<code>HUGE()</code>], then the expression will be replaced by <code>-Inf</code> or <code>+Inf</code> as appropriate. Similarly, <code>DATA i/Z'FFFFFFFF'/</code> will result in an integer overflow on most systems, but with <code>-fno-range-check</code> the value will “wrap around” and <code>i</code> will be initialized to -1 instead. </dd>\n<dt><code>-fdefault-integer-8</code></dt>\n<dd>\nSet the default integer and logical types to an 8 byte wide type. This option also affects the kind of integer constants like <code>42</code>. Unlike <code>-finteger-4-integer-8</code>, it does not promote variables with explicit kind declaration. </dd>\n<dt><code>-fdefault-real-8</code></dt>\n<dd>\nSet the default real type to an 8 byte wide type. This option also affects the kind of non-double real constants like <code>1.0</code>, and does promote the default width of <code>DOUBLE PRECISION</code> to 16 bytes if possible, unless <code>-fdefault-double-8</code> is given, too. Unlike <code>-freal-4-real-8</code>, it does not promote variables with explicit kind declaration. </dd>\n<dt><code>-fdefault-double-8</code></dt>\n<dd>\nSet the <code>DOUBLE PRECISION</code> type to an 8 byte wide type. Do nothing if this is already the default. If <code>-fdefault-real-8</code> is given, <code>DOUBLE PRECISION</code> would instead be promoted to 16 bytes if possible, and <code>-fdefault-double-8</code> can be used to prevent this. The kind of real constants like <code>1.d0</code> will not be changed by <code>-fdefault-real-8</code> though, so also <code>-fdefault-double-8</code> does not affect it. </dd>\n<dt><code>-finteger-4-integer-8</code></dt>\n<dd>\nPromote all <code>INTEGER(KIND=4)</code> entities to an <code>INTEGER(KIND=8)</code> entities. If <code>KIND=8</code> is unavailable, then an error will be issued. This option should be used with care and may not be suitable for your codes. Areas of possible concern include calls to external procedures, alignment in <code>EQUIVALENCE</code> and/or <code>COMMON</code>, generic interfaces, BOZ literal constant conversion, and I/O. Inspection of the intermediate representation of the translated Fortran code, produced by <code>-fdump-tree-original</code>, is suggested. </dd>\n<dt>\n<code>-freal-4-real-8</code><dt>\n<code>-freal-4-real-10</code><dt>\n<code>-freal-4-real-16</code><dt>\n<code>-freal-8-real-4</code><dt>\n<code>-freal-8-real-10</code><dt><code>-freal-8-real-16</code></dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>\nPromote all <code>REAL(KIND=M)</code> entities to <code>REAL(KIND=N)</code> entities. If <code>REAL(KIND=N)</code> is unavailable, then an error will be issued. All other real kind types are unaffected by this option. These options should be used with care and may not be suitable for your codes. Areas of possible concern include calls to external procedures, alignment in <code>EQUIVALENCE</code> and/or <code>COMMON</code>, generic interfaces, BOZ literal constant conversion, and I/O. Inspection of the intermediate representation of the translated Fortran code, produced by <code>-fdump-tree-original</code>, is suggested. </dd>\n<dt>\n<code>-std=</code><var>std</var>\n</dt>\n<dd>\nSpecify the standard to which the program is expected to conform, which may be one of ‘<code>f95</code>’, ‘<code>f2003</code>’, ‘<code>f2008</code>’, ‘<code>gnu</code>’, or ‘<code>legacy</code>’. The default value for <var>std</var> is ‘<code>gnu</code>’, which specifies a superset of the Fortran 95 standard that includes all of the extensions supported by GNU Fortran, although warnings will be given for obsolete extensions not recommended for use in new code. The ‘<code>legacy</code>’ value is equivalent but without the warnings for obsolete extensions, and may be useful for old non-standard programs. The ‘<code>f95</code>’, ‘<code>f2003</code>’ and ‘<code>f2008</code>’ values specify strict conformance to the Fortran 95, Fortran 2003 and Fortran 2008 standards, respectively; errors are given for all extensions beyond the relevant language standard, and warnings are given for the Fortran 77 features that are permitted but obsolescent in later standards. ‘<code>-std=f2008ts</code>’ allows the Fortran 2008 standard including the additions of the Technical Specification (TS) 29113 on Further Interoperability of Fortran with C. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Fortran-Dialect-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Fortran-Dialect-Options.html</a>\n  </p>\n</div>\n","preprocessing-options":"<h1 class=\"section\" id=\"Preprocessing-Options\">2.3 Enable and customize preprocessing</h1> <p> Preprocessor related options. See section <a href=\"preprocessing-and-conditional-compilation#Preprocessing-and-conditional-compilation\">Preprocessing and conditional compilation</a> for more detailed information on preprocessing in <code>gfortran</code>. </p>\n<dl> <dt>\n<code>-cpp</code><dt><code>-nocpp</code></dt>\n</dt>\n<dd>\nEnable preprocessing. The preprocessor is automatically invoked if the file extension is <code>.fpp</code>, <code>.FPP</code>, <code>.F</code>, <code>.FOR</code>, <code>.FTN</code>, <code>.F90</code>, <code>.F95</code>, <code>.F03</code> or <code>.F08</code>. Use this option to manually enable preprocessing of any kind of Fortran file. <p>To disable preprocessing of files with any of the above listed extensions, use the negative form: <code>-nocpp</code>. </p>\n<p>The preprocessor is run in traditional mode. Any restrictions of the file-format, especially the limits on line length, apply for preprocessed output as well, so it might be advisable to use the <code>-ffree-line-length-none</code> or <code>-ffixed-line-length-none</code> options. </p>\n</dd>\n<dt><code>-dM</code></dt>\n<dd>\nInstead of the normal output, generate a list of <code>'#define'</code> directives for all the macros defined during the execution of the preprocessor, including predefined macros. This gives you a way of finding out what is predefined in your version of the preprocessor. Assuming you have no file <code>foo.f90</code>, the command <pre class=\"smallexample\">touch foo.f90; gfortran -cpp -E -dM foo.f90</pre> <p>will show all the predefined macros. </p>\n</dd>\n<dt><code>-dD</code></dt>\n<dd>\nLike <code>-dM</code> except in two respects: it does not include the predefined macros, and it outputs both the <code>#define</code> directives and the result of preprocessing. Both kinds of output go to the standard output file. </dd>\n<dt><code>-dN</code></dt>\n<dd>\nLike <code>-dD</code>, but emit only the macro names, not their expansions. </dd>\n<dt><code>-dU</code></dt>\n<dd>\nLike <code>dD</code> except that only macros that are expanded, or whose definedness is tested in preprocessor directives, are output; the output is delayed until the use or test of the macro; and <code>'#undef'</code> directives are also output for macros tested but undefined at the time. </dd>\n<dt><code>-dI</code></dt>\n<dd>\nOutput <code>'#include'</code> directives in addition to the result of preprocessing. </dd>\n<dt><code>-fworking-directory</code></dt>\n<dd>\nEnable generation of linemarkers in the preprocessor output that will let the compiler know the current working directory at the time of preprocessing. When this option is enabled, the preprocessor will emit, after the initial linemarker, a second linemarker with the current working directory followed by two slashes. GCC will use this directory, when it is present in the preprocessed input, as the directory emitted as the current working directory in some debugging information formats. This option is implicitly enabled if debugging information is enabled, but this can be inhibited with the negated form <code>-fno-working-directory</code>. If the <code>-P</code> flag is present in the command line, this option has no effect, since no <code>#line</code> directives are emitted whatsoever. </dd>\n<dt>\n<code>-idirafter </code><var>dir</var>\n</dt>\n<dd>\nSearch <var>dir</var> for include files, but do it after all directories specified with <code>-I</code> and the standard system directories have been exhausted. <var>dir</var> is treated as a system include directory. If dir begins with <code>=</code>, then the <code>=</code> will be replaced by the sysroot prefix; see <code>--sysroot</code> and <code>-isysroot</code>. </dd>\n<dt>\n<code>-imultilib </code><var>dir</var>\n</dt>\n<dd>\nUse <var>dir</var> as a subdirectory of the directory containing target-specific C++ headers. </dd>\n<dt>\n<code>-iprefix </code><var>prefix</var>\n</dt>\n<dd>\nSpecify <var>prefix</var> as the prefix for subsequent <code>-iwithprefix</code> options. If the <var>prefix</var> represents a directory, you should include the final <code>'/'</code>. </dd>\n<dt>\n<code>-isysroot </code><var>dir</var>\n</dt>\n<dd>\nThis option is like the <code>--sysroot</code> option, but applies only to header files. See the <code>--sysroot</code> option for more information. </dd>\n<dt>\n<code>-iquote </code><var>dir</var>\n</dt>\n<dd>\nSearch <var>dir</var> only for header files requested with <code>#include \"file\"</code>; they are not searched for <code>#include &lt;file&gt;</code>, before all directories specified by <code>-I</code> and before the standard system directories. If <var>dir</var> begins with <code>=</code>, then the <code>=</code> will be replaced by the sysroot prefix; see <code>--sysroot</code> and <code>-isysroot</code>. </dd>\n<dt>\n<code>-isystem </code><var>dir</var>\n</dt>\n<dd>\nSearch <var>dir</var> for header files, after all directories specified by <code>-I</code> but before the standard system directories. Mark it as a system directory, so that it gets the same special treatment as is applied to the standard system directories. If <var>dir</var> begins with <code>=</code>, then the <code>=</code> will be replaced by the sysroot prefix; see <code>--sysroot</code> and <code>-isysroot</code>. </dd>\n<dt><code>-nostdinc</code></dt>\n<dd>\nDo not search the standard system directories for header files. Only the directories you have specified with <code>-I</code> options (and the directory of the current file, if appropriate) are searched. </dd>\n<dt><code>-undef</code></dt>\n<dd>\nDo not predefine any system-specific or GCC-specific macros. The standard predefined macros remain defined. </dd>\n<dt>\n<code>-A</code><var>predicate</var><code>=</code><var>answer</var>\n</dt>\n<dd>\nMake an assertion with the predicate <var>predicate</var> and answer <var>answer</var>. This form is preferred to the older form -A predicate(answer), which is still supported, because it does not use shell special characters. </dd>\n<dt>\n<code>-A-</code><var>predicate</var><code>=</code><var>answer</var>\n</dt>\n<dd>\nCancel an assertion with the predicate <var>predicate</var> and answer <var>answer</var>. </dd>\n<dt><code>-C</code></dt>\n<dd>\nDo not discard comments. All comments are passed through to the output file, except for comments in processed directives, which are deleted along with the directive. <p>You should be prepared for side effects when using <code>-C</code>; it causes the preprocessor to treat comments as tokens in their own right. For example, comments appearing at the start of what would be a directive line have the effect of turning that line into an ordinary source line, since the first token on the line is no longer a <code>'#'</code>. </p>\n<p>Warning: this currently handles C-Style comments only. The preprocessor does not yet recognize Fortran-style comments. </p>\n</dd>\n<dt><code>-CC</code></dt>\n<dd>\nDo not discard comments, including during macro expansion. This is like <code>-C</code>, except that comments contained within macros are also passed through to the output file where the macro is expanded. <p>In addition to the side-effects of the <code>-C</code> option, the <code>-CC</code> option causes all C++-style comments inside a macro to be converted to C-style comments. This is to prevent later use of that macro from inadvertently commenting out the remainder of the source line. The <code>-CC</code> option is generally used to support lint comments. </p>\n<p>Warning: this currently handles C- and C++-Style comments only. The preprocessor does not yet recognize Fortran-style comments. </p>\n</dd>\n<dt>\n<code>-D</code><var>name</var>\n</dt>\n<dd>\nPredefine name as a macro, with definition <code>1</code>. </dd>\n<dt>\n<code>-D</code><var>name</var><code>=</code><var>definition</var>\n</dt>\n<dd>\nThe contents of <var>definition</var> are tokenized and processed as if they appeared during translation phase three in a <code>'#define'</code> directive. In particular, the definition will be truncated by embedded newline characters. <p>If you are invoking the preprocessor from a shell or shell-like program you may need to use the shell's quoting syntax to protect characters such as spaces that have a meaning in the shell syntax. </p>\n<p>If you wish to define a function-like macro on the command line, write its argument list with surrounding parentheses before the equals sign (if any). Parentheses are meaningful to most shells, so you will need to quote the option. With sh and csh, <code>-D'name(args...)=definition'</code> works. </p>\n<p><code>-D</code> and <code>-U</code> options are processed in the order they are given on the command line. All -imacros file and -include file options are processed after all -D and -U options. </p>\n</dd>\n<dt><code>-H</code></dt>\n<dd>\nPrint the name of each header file used, in addition to other normal activities. Each name is indented to show how deep in the <code>'#include'</code> stack it is. </dd>\n<dt><code>-P</code></dt>\n<dd>\nInhibit generation of linemarkers in the output from the preprocessor. This might be useful when running the preprocessor on something that is not C code, and will be sent to a program which might be confused by the linemarkers. </dd>\n<dt>\n<code>-U</code><var>name</var>\n</dt>\n<dd>\nCancel any previous definition of <var>name</var>, either built in or provided with a <code>-D</code> option. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Preprocessing-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Preprocessing-Options.html</a>\n  </p>\n</div>\n","error-and-warning-options":"<h1 class=\"section\" id=\"Error-and-Warning-Options\">2.4 Options to request or suppress errors and warnings</h1> <p> Errors are diagnostic messages that report that the GNU Fortran compiler cannot compile the relevant piece of source code. The compiler will continue to process the program in an attempt to report further errors to aid in debugging, but will not produce any compiled output. </p>\n<p>Warnings are diagnostic messages that report constructions which are not inherently erroneous but which are risky or suggest there is likely to be a bug in the program. Unless <code>-Werror</code> is specified, they do not prevent compilation of the program. </p>\n<p>You can request many specific warnings with options beginning <code>-W</code>, for example <code>-Wimplicit</code> to request warnings on implicit declarations. Each of these specific warning options also has a negative form beginning <code>-Wno-</code> to turn off warnings; for example, <code>-Wno-implicit</code>. This manual lists only one of the two forms, whichever is not the default. </p>\n<p>These options control the amount and kinds of errors and warnings produced by GNU Fortran: </p>\n<dl> <dt>\n<code>-fmax-errors=</code><var>n</var>\n</dt>\n<dd>\nLimits the maximum number of error messages to <var>n</var>, at which point GNU Fortran bails out rather than attempting to continue processing the source code. If <var>n</var> is 0, there is no limit on the number of error messages produced. </dd>\n<dt><code>-fsyntax-only</code></dt>\n<dd>\nCheck the code for syntax errors, but do not actually compile it. This will generate module files for each module present in the code, but no other output file. </dd>\n<dt><code>-pedantic</code></dt>\n<dd>\nIssue warnings for uses of extensions to Fortran 95. <code>-pedantic</code> also applies to C-language constructs where they occur in GNU Fortran source files, such as use of ‘<code>\\e</code>’ in a character constant within a directive like <code>#include</code>. <p>Valid Fortran 95 programs should compile properly with or without this option. However, without this option, certain GNU extensions and traditional Fortran features are supported as well. With this option, many of them are rejected. </p>\n<p>Some users try to use <code>-pedantic</code> to check programs for conformance. They soon find that it does not do quite what they want—it finds some nonstandard practices, but not all. However, improvements to GNU Fortran in this area are welcome. </p>\n<p>This should be used in conjunction with <code>-std=f95</code>, <code>-std=f2003</code> or <code>-std=f2008</code>. </p>\n</dd>\n<dt><code>-pedantic-errors</code></dt>\n<dd>\nLike <code>-pedantic</code>, except that errors are produced rather than warnings. </dd>\n<dt><code>-Wall</code></dt>\n<dd>\nEnables commonly used warning options pertaining to usage that we recommend avoiding and that we believe are easy to avoid. This currently includes <code>-Waliasing</code>, <code>-Wampersand</code>, <code>-Wconversion</code>, <code>-Wsurprising</code>, <code>-Wc-binding-type</code>, <code>-Wintrinsics-std</code>, <code>-Wno-tabs</code>, <code>-Wintrinsic-shadow</code>, <code>-Wline-truncation</code>, <code>-Wtarget-lifetime</code>, <code>-Wreal-q-constant</code> and <code>-Wunused</code>. </dd>\n<dt><code>-Waliasing</code></dt>\n<dd>\nWarn about possible aliasing of dummy arguments. Specifically, it warns if the same actual argument is associated with a dummy argument with <code>INTENT(IN)</code> and a dummy argument with <code>INTENT(OUT)</code> in a call with an explicit interface. <p>The following example will trigger the warning. </p>\n<pre class=\"smallexample\">interface\n  subroutine bar(a,b)\n    integer, intent(in) :: a\n    integer, intent(out) :: b\n  end subroutine\nend interface\ninteger :: a\n          \ncall bar(a,a)</pre> </dd>\n<dt><code>-Wampersand</code></dt>\n<dd>\nWarn about missing ampersand in continued character constants. The warning is given with <code>-Wampersand</code>, <code>-pedantic</code>, <code>-std=f95</code>, <code>-std=f2003</code> and <code>-std=f2008</code>. Note: With no ampersand given in a continued character constant, GNU Fortran assumes continuation at the first non-comment, non-whitespace character after the ampersand that initiated the continuation. </dd>\n<dt><code>-Warray-temporaries</code></dt>\n<dd>\nWarn about array temporaries generated by the compiler. The information generated by this warning is sometimes useful in optimization, in order to avoid such temporaries. </dd>\n<dt><code>-Wc-binding-type</code></dt>\n<dd>\nWarn if the a variable might not be C interoperable. In particular, warn if the variable has been declared using an intrinsic type with default kind instead of using a kind parameter defined for C interoperability in the intrinsic <code>ISO_C_Binding</code> module. This option is implied by <code>-Wall</code>. </dd>\n<dt><code>-Wcharacter-truncation</code></dt>\n<dd>\nWarn when a character assignment will truncate the assigned string. </dd>\n<dt><code>-Wline-truncation</code></dt>\n<dd>\nWarn when a source code line will be truncated. This option is implied by <code>-Wall</code>. </dd>\n<dt><code>-Wconversion</code></dt>\n<dd>\nWarn about implicit conversions that are likely to change the value of the expression after conversion. Implied by <code>-Wall</code>. </dd>\n<dt><code>-Wconversion-extra</code></dt>\n<dd>\nWarn about implicit conversions between different types and kinds. </dd>\n<dt><code>-Wextra</code></dt>\n<dd>\nEnables some warning options for usages of language features which may be problematic. This currently includes <code>-Wcompare-reals</code> and <code>-Wunused-parameter</code>. </dd>\n<dt><code>-Wimplicit-interface</code></dt>\n<dd>\nWarn if a procedure is called without an explicit interface. Note this only checks that an explicit interface is present. It does not check that the declared interfaces are consistent across program units. </dd>\n<dt><code>-Wimplicit-procedure</code></dt>\n<dd>\nWarn if a procedure is called that has neither an explicit interface nor has been declared as <code>EXTERNAL</code>. </dd>\n<dt><code>-Wintrinsics-std</code></dt>\n<dd>\nWarn if <code>gfortran</code> finds a procedure named like an intrinsic not available in the currently selected standard (with <code>-std</code>) and treats it as <code>EXTERNAL</code> procedure because of this. <code>-fall-intrinsics</code> can be used to never trigger this behavior and always link to the intrinsic regardless of the selected standard. </dd>\n<dt><code>-Wreal-q-constant</code></dt>\n<dd>\nProduce a warning if a real-literal-constant contains a <code>q</code> exponent-letter. </dd>\n<dt><code>-Wsurprising</code></dt>\n<dd>\nProduce a warning when “suspicious” code constructs are encountered. While technically legal these usually indicate that an error has been made. <p>This currently produces a warning under the following circumstances: </p>\n<ul> <li>An INTEGER SELECT construct has a CASE that can never be matched as its lower value is greater than its upper value. </li>\n<li>A LOGICAL SELECT construct has three CASE statements. </li>\n<li>A TRANSFER specifies a source that is shorter than the destination. </li>\n<li>The type of a function result is declared more than once with the same type. If <code>-pedantic</code> or standard-conforming mode is enabled, this is an error. </li>\n<li>A <code>CHARACTER</code> variable is declared with negative length. </li>\n</ul> </dd>\n<dt><code>-Wtabs</code></dt>\n<dd>\nBy default, tabs are accepted as whitespace, but tabs are not members of the Fortran Character Set. For continuation lines, a tab followed by a digit between 1 and 9 is supported. <code>-Wno-tabs</code> will cause a warning to be issued if a tab is encountered. Note, <code>-Wno-tabs</code> is active for <code>-pedantic</code>, <code>-std=f95</code>, <code>-std=f2003</code>, <code>-std=f2008</code> and <code>-Wall</code>. </dd>\n<dt><code>-Wunderflow</code></dt>\n<dd>\nProduce a warning when numerical constant expressions are encountered, which yield an UNDERFLOW during compilation. </dd>\n<dt><code>-Wintrinsic-shadow</code></dt>\n<dd>\nWarn if a user-defined procedure or module procedure has the same name as an intrinsic; in this case, an explicit interface or <code>EXTERNAL</code> or <code>INTRINSIC</code> declaration might be needed to get calls later resolved to the desired intrinsic/procedure. This option is implied by <code>-Wall</code>. </dd>\n<dt><code>-Wunused-dummy-argument</code></dt>\n<dd>\nWarn about unused dummy arguments. This option is implied by <code>-Wall</code>. </dd>\n<dt><code>-Wunused-parameter</code></dt>\n<dd>\nContrary to <code>gcc</code>'s meaning of <code>-Wunused-parameter</code>, <code>gfortran</code>'s implementation of this option does not warn about unused dummy arguments (see <code>-Wunused-dummy-argument</code>), but about unused <code>PARAMETER</code> values. <code>-Wunused-parameter</code> is not included in <code>-Wall</code> but is implied by <code>-Wall -Wextra</code>. </dd>\n<dt><code>-Walign-commons</code></dt>\n<dd>\nBy default, <code>gfortran</code> warns about any occasion of variables being padded for proper alignment inside a <code>COMMON</code> block. This warning can be turned off via <code>-Wno-align-commons</code>. See also <code>-falign-commons</code>. </dd>\n<dt><code>-Wfunction-elimination</code></dt>\n<dd>\nWarn if any calls to functions are eliminated by the optimizations enabled by the <code>-ffrontend-optimize</code> option. </dd>\n<dt><code>-Wrealloc-lhs</code></dt>\n<dd>\nWarn when the compiler might insert code to for allocation or reallocation of an allocatable array variable of intrinsic type in intrinsic assignments. In hot loops, the Fortran 2003 reallocation feature may reduce the performance. If the array is already allocated with the correct shape, consider using a whole-array array-spec (e.g. <code>(:,:,:)</code>) for the variable on the left-hand side to prevent the reallocation check. Note that in some cases the warning is shown, even if the compiler will optimize reallocation checks away. For instance, when the right-hand side contains the same variable multiplied by a scalar. See also <code>-frealloc-lhs</code>. </dd>\n<dt><code>-Wrealloc-lhs-all</code></dt>\n<dd>\nWarn when the compiler inserts code to for allocation or reallocation of an allocatable variable; this includes scalars and derived types. </dd>\n<dt><code>-Wcompare-reals</code></dt>\n<dd>\nWarn when comparing real or complex types for equality or inequality. This option is implied by <code>-Wextra</code>. </dd>\n<dt><code>-Wtarget-lifetime</code></dt>\n<dd>\nWarn if the pointer in a pointer assignment might be longer than the its target. This option is implied by <code>-Wall</code>. </dd>\n<dt><code>-Wzerotrip</code></dt>\n<dd>\nWarn if a <code>DO</code> loop is known to execute zero times at compile time. This option is implied by <code>-Wall</code>. </dd>\n<dt><code>-Werror</code></dt>\n<dd>\nTurns all warnings into errors. </dd>\n</dl> <p>See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Warning-Options.html#Warning-Options\">Options to Request or Suppress Errors and Warnings</a>, for information on more options offered by the GBE shared by <code>gfortran</code>, <code>gcc</code> and other GNU compilers. </p>\n<p>Some of these have no effect when compiling programs written in Fortran. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Error-and-Warning-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Error-and-Warning-Options.html</a>\n  </p>\n</div>\n","debugging-options":"<h1 class=\"section\" id=\"Debugging-Options\">2.5 Options for debugging your program or GNU Fortran</h1> <p> GNU Fortran has various special options that are used for debugging either your program or the GNU Fortran compiler. </p>\n<dl> <dt><code>-fdump-fortran-original</code></dt>\n<dd>\nOutput the internal parse tree after translating the source program into internal representation. Only really useful for debugging the GNU Fortran compiler itself. </dd>\n<dt><code>-fdump-fortran-optimized</code></dt>\n<dd>\nOutput the parse tree after front-end optimization. Only really useful for debugging the GNU Fortran compiler itself. </dd>\n<dt><code>-fdump-parse-tree</code></dt>\n<dd>\nOutput the internal parse tree after translating the source program into internal representation. Only really useful for debugging the GNU Fortran compiler itself. This option is deprecated; use <code>-fdump-fortran-original</code> instead. </dd>\n<dt>\n<code>-ffpe-trap=</code><var>list</var>\n</dt>\n<dd>\nSpecify a list of floating point exception traps to enable. On most systems, if a floating point exception occurs and the trap for that exception is enabled, a SIGFPE signal will be sent and the program being aborted, producing a core file useful for debugging. <var>list</var> is a (possibly empty) comma-separated list of the following exceptions: ‘<code>invalid</code>’ (invalid floating point operation, such as <code>SQRT(-1.0)</code>), ‘<code>zero</code>’ (division by zero), ‘<code>overflow</code>’ (overflow in a floating point operation), ‘<code>underflow</code>’ (underflow in a floating point operation), ‘<code>inexact</code>’ (loss of precision during operation), and ‘<code>denormal</code>’ (operation performed on a denormal value). The first five exceptions correspond to the five IEEE 754 exceptions, whereas the last one (‘<code>denormal</code>’) is not part of the IEEE 754 standard but is available on some common architectures such as x86. <p>The first three exceptions (‘<code>invalid</code>’, ‘<code>zero</code>’, and ‘<code>overflow</code>’) often indicate serious errors, and unless the program has provisions for dealing with these exceptions, enabling traps for these three exceptions is probably a good idea. </p>\n<p>Many, if not most, floating point operations incur loss of precision due to rounding, and hence the <code>ffpe-trap=inexact</code> is likely to be uninteresting in practice. </p>\n<p>By default no exception traps are enabled. </p>\n</dd>\n<dt>\n<code>-ffpe-summary=</code><var>list</var>\n</dt>\n<dd>\nSpecify a list of floating-point exceptions, whose flag status is printed to <code>ERROR_UNIT</code> when invoking <code>STOP</code> and <code>ERROR STOP</code>. <var>list</var> can be either ‘<code>none</code>’, ‘<code>all</code>’ or a comma-separated list of the following exceptions: ‘<code>invalid</code>’, ‘<code>zero</code>’, ‘<code>overflow</code>’, ‘<code>underflow</code>’, ‘<code>inexact</code>’ and ‘<code>denormal</code>’. (See <code>-ffpe-trap</code> for a description of the exceptions.) <p>By default, a summary for all exceptions but ‘<code>inexact</code>’ is shown. </p>\n</dd>\n<dt><code>-fno-backtrace</code></dt>\n<dd>\nWhen a serious runtime error is encountered or a deadly signal is emitted (segmentation fault, illegal instruction, bus error, floating-point exception, and the other POSIX signals that have the action ‘<code>core</code>’), the Fortran runtime library tries to output a backtrace of the error. <code>-fno-backtrace</code> disables the backtrace generation. This option only has influence for compilation of the Fortran main program. </dd>\n</dl> <p>See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Debugging-Options.html#Debugging-Options\">Options for Debugging Your Program or GCC</a>, for more information on debugging options. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Debugging-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Debugging-Options.html</a>\n  </p>\n</div>\n","directory-options":"<h1 class=\"section\" id=\"Directory-Options\">2.6 Options for directory search</h1> <p>These options affect how GNU Fortran searches for files specified by the <code>INCLUDE</code> directive and where it searches for previously compiled modules. </p>\n<p>It also affects the search paths used by <code>cpp</code> when used to preprocess Fortran source. </p>\n<dl> <dt>\n<code>-I</code><var>dir</var>\n</dt>\n<dd>\nThese affect interpretation of the <code>INCLUDE</code> directive (as well as of the <code>#include</code> directive of the <code>cpp</code> preprocessor). <p>Also note that the general behavior of <code>-I</code> and <code>INCLUDE</code> is pretty much the same as of <code>-I</code> with <code>#include</code> in the <code>cpp</code> preprocessor, with regard to looking for <code>header.gcc</code> files and other such things. </p>\n<p>This path is also used to search for <code>.mod</code> files when previously compiled modules are required by a <code>USE</code> statement. </p>\n<p>See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Directory-Options.html#Directory-Options\">Options for Directory Search</a>, for information on the <code>-I</code> option. </p>\n</dd>\n<dt>\n<code>-J</code><var>dir</var>\n</dt>\n<dd>\nThis option specifies where to put <code>.mod</code> files for compiled modules. It is also added to the list of directories to searched by an <code>USE</code> statement. <p>The default is the current directory. </p>\n</dd>\n<dt>\n<code>-fintrinsic-modules-path </code><var>dir</var>\n</dt>\n<dd>\nThis option specifies the location of pre-compiled intrinsic modules, if they are not in the default location expected by the compiler. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Directory-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Directory-Options.html</a>\n  </p>\n</div>\n","link-options":"<h1 class=\"section\" id=\"Link-Options\">2.7 Influencing the linking step</h1> <p> These options come into play when the compiler links object files into an executable output file. They are meaningless if the compiler is not doing a link step. </p>\n<dl> <dt><code>-static-libgfortran</code></dt>\n<dd>\nOn systems that provide <code>libgfortran</code> as a shared and a static library, this option forces the use of the static version. If no shared version of <code>libgfortran</code> was built when the compiler was configured, this option has no effect. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Link-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Link-Options.html</a>\n  </p>\n</div>\n","runtime-options":"<h1 class=\"section\" id=\"Runtime-Options\">2.8 Influencing runtime behavior</h1> <p> These options affect the runtime behavior of programs compiled with GNU Fortran. </p>\n<dl> <dt>\n<code>-fconvert=</code><var>conversion</var>\n</dt>\n<dd>\nSpecify the representation of data for unformatted files. Valid values for conversion are: ‘<code>native</code>’, the default; ‘<code>swap</code>’, swap between big- and little-endian; ‘<code>big-endian</code>’, use big-endian representation for unformatted files; ‘<code>little-endian</code>’, use little-endian representation for unformatted files. <p><em>This option has an effect only when used in the main program. The </em><code>CONVERT</code><em> specifier and the GFORTRAN_CONVERT_UNIT environment variable override the default specified by </em><code>-fconvert</code><em>.</em> </p>\n</dd>\n<dt>\n<code>-frecord-marker=</code><var>length</var>\n</dt>\n<dd>\nSpecify the length of record markers for unformatted files. Valid values for <var>length</var> are 4 and 8. Default is 4. <em>This is different from previous versions of </em><code>gfortran</code>, which specified a default record marker length of 8 on most systems. If you want to read or write files compatible with earlier versions of <code>gfortran</code>, use <code>-frecord-marker=8</code>. </dd>\n<dt>\n<code>-fmax-subrecord-length=</code><var>length</var>\n</dt>\n<dd>\nSpecify the maximum length for a subrecord. The maximum permitted value for length is 2147483639, which is also the default. Only really useful for use by the gfortran testsuite. </dd>\n<dt><code>-fsign-zero</code></dt>\n<dd>\nWhen enabled, floating point numbers of value zero with the sign bit set are written as negative number in formatted output and treated as negative in the <code>SIGN</code> intrinsic. <code>-fno-sign-zero</code> does not print the negative sign of zero values (or values rounded to zero for I/O) and regards zero as positive number in the <code>SIGN</code> intrinsic for compatibility with Fortran 77. The default is <code>-fsign-zero</code>. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Runtime-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Runtime-Options.html</a>\n  </p>\n</div>\n","code-gen-options":"<h1 class=\"section\" id=\"Code-Gen-Options\">2.9 Options for code generation conventions</h1> <p> These machine-independent options control the interface conventions used in code generation. </p>\n<p>Most of them have both positive and negative forms; the negative form of <code>-ffoo</code> would be <code>-fno-foo</code>. In the table below, only one of the forms is listed—the one which is not the default. You can figure out the other form by either removing <code>no-</code> or adding it. </p>\n<dl> <dt><code>-fno-automatic</code></dt>\n<dd>\nTreat each program unit (except those marked as RECURSIVE) as if the <code>SAVE</code> statement were specified for every local variable and array referenced in it. Does not affect common blocks. (Some Fortran compilers provide this option under the name <code>-static</code> or <code>-save</code>.) The default, which is <code>-fautomatic</code>, uses the stack for local variables smaller than the value given by <code>-fmax-stack-var-size</code>. Use the option <code>-frecursive</code> to use no static memory. </dd>\n<dt><code>-ff2c</code></dt>\n<dd>\nGenerate code designed to be compatible with code generated by <code>g77</code> and <code>f2c</code>. <p>The calling conventions used by <code>g77</code> (originally implemented in <code>f2c</code>) require functions that return type default <code>REAL</code> to actually return the C type <code>double</code>, and functions that return type <code>COMPLEX</code> to return the values via an extra argument in the calling sequence that points to where to store the return value. Under the default GNU calling conventions, such functions simply return their results as they would in GNU C—default <code>REAL</code> functions return the C type <code>float</code>, and <code>COMPLEX</code> functions return the GNU C type <code>complex</code>. Additionally, this option implies the <code>-fsecond-underscore</code> option, unless <code>-fno-second-underscore</code> is explicitly requested. </p>\n<p>This does not affect the generation of code that interfaces with the <code>libgfortran</code> library. </p>\n<p><em>Caution:</em> It is not a good idea to mix Fortran code compiled with <code>-ff2c</code> with code compiled with the default <code>-fno-f2c</code> calling conventions as, calling <code>COMPLEX</code> or default <code>REAL</code> functions between program parts which were compiled with different calling conventions will break at execution time. </p>\n<p><em>Caution:</em> This will break code which passes intrinsic functions of type default <code>REAL</code> or <code>COMPLEX</code> as actual arguments, as the library implementations use the <code>-fno-f2c</code> calling conventions. </p>\n</dd>\n<dt><code>-fno-underscoring</code></dt>\n<dd>\nDo not transform names of entities specified in the Fortran source file by appending underscores to them. <p>With <code>-funderscoring</code> in effect, GNU Fortran appends one underscore to external names with no underscores. This is done to ensure compatibility with code produced by many UNIX Fortran compilers. </p>\n<p><em>Caution</em>: The default behavior of GNU Fortran is incompatible with <code>f2c</code> and <code>g77</code>, please use the <code>-ff2c</code> option if you want object files compiled with GNU Fortran to be compatible with object code created with these tools. </p>\n<p>Use of <code>-fno-underscoring</code> is not recommended unless you are experimenting with issues such as integration of GNU Fortran into existing system environments (vis-à-vis existing libraries, tools, and so on). </p>\n<p>For example, with <code>-funderscoring</code>, and assuming other defaults like <code>-fcase-lower</code> and that <code>j()</code> and <code>max_count()</code> are external functions while <code>my_var</code> and <code>lvar</code> are local variables, a statement like </p>\n<pre class=\"smallexample\">I = J() + MAX_COUNT (MY_VAR, LVAR)</pre> <p class=\"noindent\">is implemented as something akin to: </p>\n<pre class=\"smallexample\">i = j_() + max_count__(&amp;my_var__, &amp;lvar);</pre> <p>With <code>-fno-underscoring</code>, the same statement is implemented as: </p>\n<pre class=\"smallexample\">i = j() + max_count(&amp;my_var, &amp;lvar);</pre> <p>Use of <code>-fno-underscoring</code> allows direct specification of user-defined names while debugging and when interfacing GNU Fortran code with other languages. </p>\n<p>Note that just because the names match does <em>not</em> mean that the interface implemented by GNU Fortran for an external name matches the interface implemented by some other language for that same name. That is, getting code produced by GNU Fortran to link to code produced by some other compiler using this or any other method can be only a small part of the overall solution—getting the code generated by both compilers to agree on issues other than naming can require significant effort, and, unlike naming disagreements, linkers normally cannot detect disagreements in these other areas. </p>\n<p>Also, note that with <code>-fno-underscoring</code>, the lack of appended underscores introduces the very real possibility that a user-defined external name will conflict with a name in a system library, which could make finding unresolved-reference bugs quite difficult in some cases—they might occur at program run time, and show up only as buggy behavior at run time. </p>\n<p>In future versions of GNU Fortran we hope to improve naming and linking issues so that debugging always involves using the names as they appear in the source, even if the names as seen by the linker are mangled to prevent accidental linking between procedures with incompatible interfaces. </p>\n</dd>\n<dt><code>-fsecond-underscore</code></dt>\n<dd>\nBy default, GNU Fortran appends an underscore to external names. If this option is used GNU Fortran appends two underscores to names with underscores and one underscore to external names with no underscores. GNU Fortran also appends two underscores to internal names with underscores to avoid naming collisions with external names. <p>This option has no effect if <code>-fno-underscoring</code> is in effect. It is implied by the <code>-ff2c</code> option. </p>\n<p>Otherwise, with this option, an external name such as <code>MAX_COUNT</code> is implemented as a reference to the link-time external symbol <code>max_count__</code>, instead of <code>max_count_</code>. This is required for compatibility with <code>g77</code> and <code>f2c</code>, and is implied by use of the <code>-ff2c</code> option. </p>\n</dd>\n<dt>\n<code>-fcoarray=</code><var>&lt;keyword&gt;</var>\n</dt>\n<dd>\n <dl> <dt>‘<code>none</code>’</dt>\n<dd>Disable coarray support; using coarray declarations and image-control statements will produce a compile-time error. (Default) </dd>\n<dt>‘<code>single</code>’</dt>\n<dd>Single-image mode, i.e. <code>num_images()</code> is always one. </dd>\n<dt>‘<code>lib</code>’</dt>\n<dd>Library-based coarray parallelization; a suitable GNU Fortran coarray library needs to be linked. </dd>\n</dl> </dd>\n<dt>\n<code>-fcheck=</code><var>&lt;keyword&gt;</var>\n</dt>\n<dd>\n Enable the generation of run-time checks; the argument shall be a comma-delimited list of the following keywords. <dl> <dt>‘<code>all</code>’</dt>\n<dd>Enable all run-time test of <code>-fcheck</code>. </dd>\n<dt>‘<code>array-temps</code>’</dt>\n<dd>Warns at run time when for passing an actual argument a temporary array had to be generated. The information generated by this warning is sometimes useful in optimization, in order to avoid such temporaries. <p>Note: The warning is only printed once per location. </p>\n</dd>\n<dt>‘<code>bounds</code>’</dt>\n<dd>Enable generation of run-time checks for array subscripts and against the declared minimum and maximum values. It also checks array indices for assumed and deferred shape arrays against the actual allocated bounds and ensures that all string lengths are equal for character array constructors without an explicit typespec. <p>Some checks require that <code>-fcheck=bounds</code> is set for the compilation of the main program. </p>\n<p>Note: In the future this may also include other forms of checking, e.g., checking substring references. </p>\n</dd>\n<dt>‘<code>do</code>’</dt>\n<dd>Enable generation of run-time checks for invalid modification of loop iteration variables. </dd>\n<dt>‘<code>mem</code>’</dt>\n<dd>Enable generation of run-time checks for memory allocation. Note: This option does not affect explicit allocations using the <code>ALLOCATE</code> statement, which will be always checked. </dd>\n<dt>‘<code>pointer</code>’</dt>\n<dd>Enable generation of run-time checks for pointers and allocatables. </dd>\n<dt>‘<code>recursion</code>’</dt>\n<dd>Enable generation of run-time checks for recursively called subroutines and functions which are not marked as recursive. See also <code>-frecursive</code>. Note: This check does not work for OpenMP programs and is disabled if used together with <code>-frecursive</code> and <code>-fopenmp</code>. </dd>\n</dl> </dd>\n<dt><code>-fbounds-check</code></dt>\n<dd>\n Deprecated alias for <code>-fcheck=bounds</code>. </dd>\n<dt><code>-fcheck-array-temporaries</code></dt>\n<dd>\nDeprecated alias for <code>-fcheck=array-temps</code>. </dd>\n<dt>\n<code>-fmax-array-constructor=</code><var>n</var>\n</dt>\n<dd>\nThis option can be used to increase the upper limit permitted in array constructors. The code below requires this option to expand the array at compile time. <pre class=\"smallexample\">program test\nimplicit none\ninteger j\ninteger, parameter :: n = 100000\ninteger, parameter :: i(n) = (/ (2*j, j = 1, n) /)\nprint '(10(I0,1X))', i\nend program test</pre> <p><em>Caution: This option can lead to long compile times and excessively large object files.</em> </p>\n<p>The default value for <var>n</var> is 65535. </p>\n</dd>\n<dt>\n<code>-fmax-stack-var-size=</code><var>n</var>\n</dt>\n<dd>\nThis option specifies the size in bytes of the largest array that will be put on the stack; if the size is exceeded static memory is used (except in procedures marked as RECURSIVE). Use the option <code>-frecursive</code> to allow for recursive procedures which do not have a RECURSIVE attribute or for parallel programs. Use <code>-fno-automatic</code> to never use the stack. <p>This option currently only affects local arrays declared with constant bounds, and may not apply to all character variables. Future versions of GNU Fortran may improve this behavior. </p>\n<p>The default value for <var>n</var> is 32768. </p>\n</dd>\n<dt><code>-fstack-arrays</code></dt>\n<dd>\nAdding this option will make the Fortran compiler put all local arrays, even those of unknown size onto stack memory. If your program uses very large local arrays it is possible that you will have to extend your runtime limits for stack memory on some operating systems. This flag is enabled by default at optimization level <code>-Ofast</code>. </dd>\n<dt><code>-fpack-derived</code></dt>\n<dd>\nThis option tells GNU Fortran to pack derived type members as closely as possible. Code compiled with this option is likely to be incompatible with code compiled without this option, and may execute slower. </dd>\n<dt><code>-frepack-arrays</code></dt>\n<dd>\nIn some circumstances GNU Fortran may pass assumed shape array sections via a descriptor describing a noncontiguous area of memory. This option adds code to the function prologue to repack the data into a contiguous block at runtime. <p>This should result in faster accesses to the array. However it can introduce significant overhead to the function call, especially when the passed data is noncontiguous. </p>\n</dd>\n<dt><code>-fshort-enums</code></dt>\n<dd>\nThis option is provided for interoperability with C code that was compiled with the <code>-fshort-enums</code> option. It will make GNU Fortran choose the smallest <code>INTEGER</code> kind a given enumerator set will fit in, and give all its enumerators this kind. </dd>\n<dt><code>-fexternal-blas</code></dt>\n<dd>\nThis option will make <code>gfortran</code> generate calls to BLAS functions for some matrix operations like <code>MATMUL</code>, instead of using our own algorithms, if the size of the matrices involved is larger than a given limit (see <code>-fblas-matmul-limit</code>). This may be profitable if an optimized vendor BLAS library is available. The BLAS library will have to be specified at link time. </dd>\n<dt>\n<code>-fblas-matmul-limit=</code><var>n</var>\n</dt>\n<dd>\nOnly significant when <code>-fexternal-blas</code> is in effect. Matrix multiplication of matrices with size larger than (or equal to) <var>n</var> will be performed by calls to BLAS functions, while others will be handled by <code>gfortran</code> internal algorithms. If the matrices involved are not square, the size comparison is performed using the geometric mean of the dimensions of the argument and result matrices. <p>The default value for <var>n</var> is 30. </p>\n</dd>\n<dt><code>-frecursive</code></dt>\n<dd>\nAllow indirect recursion by forcing all local arrays to be allocated on the stack. This flag cannot be used together with <code>-fmax-stack-var-size=</code> or <code>-fno-automatic</code>. </dd>\n<dt>\n<code>-finit-local-zero</code><dt>\n<code>-finit-integer=</code><var>n</var><dt>\n<code>-finit-real=</code><var>&lt;zero|inf|-inf|nan|snan&gt;</var><dt>\n<code>-finit-logical=</code><var>&lt;true|false&gt;</var><dt>\n<code>-finit-character=</code><var>n</var>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>\nThe <code>-finit-local-zero</code> option instructs the compiler to initialize local <code>INTEGER</code>, <code>REAL</code>, and <code>COMPLEX</code> variables to zero, <code>LOGICAL</code> variables to false, and <code>CHARACTER</code> variables to a string of null bytes. Finer-grained initialization options are provided by the <samp><span class=\"option\">-finit-integer=</span><var>n</var></samp>, <samp><span class=\"option\">-finit-real=</span><var>&lt;zero|inf|-inf|nan|snan&gt;</var></samp> (which also initializes the real and imaginary parts of local <code>COMPLEX</code> variables), <samp><span class=\"option\">-finit-logical=</span><var>&lt;true|false&gt;</var></samp>, and <samp><span class=\"option\">-finit-character=</span><var>n</var></samp> (where <var>n</var> is an ASCII character value) options. These options do not initialize <ul> <li>allocatable arrays </li>\n<li>components of derived type variables </li>\n<li>variables that appear in an <code>EQUIVALENCE</code> statement. </li>\n</ul> (These limitations may be removed in future releases). <p>Note that the <code>-finit-real=nan</code> option initializes <code>REAL</code> and <code>COMPLEX</code> variables with a quiet NaN. For a signalling NaN use <code>-finit-real=snan</code>; note, however, that compile-time optimizations may convert them into quiet NaN and that trapping needs to be enabled (e.g. via <code>-ffpe-trap</code>). </p>\n<p>Finally, note that enabling any of the <code>-finit-*</code> options will silence warnings that would have been emitted by <code>-Wuninitialized</code> for the affected local variables. </p>\n</dd>\n<dt><code>-falign-commons</code></dt>\n<dd>\nBy default, <code>gfortran</code> enforces proper alignment of all variables in a <code>COMMON</code> block by padding them as needed. On certain platforms this is mandatory, on others it increases performance. If a <code>COMMON</code> block is not declared with consistent data types everywhere, this padding can cause trouble, and <code>-fno-align-commons</code> can be used to disable automatic alignment. The same form of this option should be used for all files that share a <code>COMMON</code> block. To avoid potential alignment issues in <code>COMMON</code> blocks, it is recommended to order objects from largest to smallest. </dd>\n<dt><code>-fno-protect-parens</code></dt>\n<dd>\nBy default the parentheses in expression are honored for all optimization levels such that the compiler does not do any re-association. Using <code>-fno-protect-parens</code> allows the compiler to reorder <code>REAL</code> and <code>COMPLEX</code> expressions to produce faster code. Note that for the re-association optimization <code>-fno-signed-zeros</code> and <code>-fno-trapping-math</code> need to be in effect. The parentheses protection is enabled by default, unless <code>-Ofast</code> is given. </dd>\n<dt><code>-frealloc-lhs</code></dt>\n<dd>\nAn allocatable left-hand side of an intrinsic assignment is automatically (re)allocated if it is either unallocated or has a different shape. The option is enabled by default except when <code>-std=f95</code> is given. See also <code>-Wrealloc-lhs</code>. </dd>\n<dt><code>-faggressive-function-elimination</code></dt>\n<dd>\nFunctions with identical argument lists are eliminated within statements, regardless of whether these functions are marked <code>PURE</code> or not. For example, in <pre class=\"smallexample\">a = f(b,c) + f(b,c)</pre> <p>there will only be a single call to <code>f</code>. This option only works if <code>-ffrontend-optimize</code> is in effect. </p>\n</dd>\n<dt><code>-ffrontend-optimize</code></dt>\n<dd>\nThis option performs front-end optimization, based on manipulating parts the Fortran parse tree. Enabled by default by any <code>-O</code> option. Optimizations enabled by this option include elimination of identical function calls within expressions, removing unnecessary calls to <code>TRIM</code> in comparisons and assignments and replacing <code>TRIM(a)</code> with <code>a(1:LEN_TRIM(a))</code>. It can be deselected by specifying <code>-fno-frontend-optimize</code>. </dd>\n</dl> <p>See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Code-Gen-Options.html#Code-Gen-Options\">Options for Code Generation Conventions</a>, for information on more options offered by the GBE shared by <code>gfortran</code>, <code>gcc</code>, and other GNU compilers.  </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Code-Gen-Options.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Code-Gen-Options.html</a>\n  </p>\n</div>\n","environment-variables":"<h1 class=\"section\" id=\"Environment-Variables\">2.10 Environment variables affecting <code>gfortran</code>\n</h1> \n<p>The <code>gfortran</code> compiler currently does not make use of any environment variables to control its operation above and beyond those that affect the operation of <code>gcc</code>. </p>\n<p>See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Environment-Variables.html#Environment-Variables\">Environment Variables Affecting GCC</a>, for information on environment variables. </p>\n<p>See <a href=\"runtime#Runtime\">Runtime</a>, for environment variables that affect the run-time behavior of programs compiled with GNU Fortran.     </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Environment-Variables.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Environment-Variables.html</a>\n  </p>\n</div>\n","runtime":"<h1 class=\"chapter\" id=\"Runtime\">3 Runtime: Influencing runtime behavior with environment variables</h1> <p> The behavior of the <code>gfortran</code> can be influenced by environment variables. </p>\n<p>Malformed environment variables are silently ignored. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"tmpdir#TMPDIR\">TMPDIR</a>: Directory for scratch files </li>\n<li>\n<a accesskey=\"2\" href=\"gfortran_005fstdin_005funit#GFORTRAN_005fSTDIN_005fUNIT\">GFORTRAN_STDIN_UNIT</a>: Unit number for standard input </li>\n<li>\n<a accesskey=\"3\" href=\"gfortran_005fstdout_005funit#GFORTRAN_005fSTDOUT_005fUNIT\">GFORTRAN_STDOUT_UNIT</a>: Unit number for standard output </li>\n<li>\n<a accesskey=\"4\" href=\"gfortran_005fstderr_005funit#GFORTRAN_005fSTDERR_005fUNIT\">GFORTRAN_STDERR_UNIT</a>: Unit number for standard error </li>\n<li>\n<a accesskey=\"5\" href=\"gfortran_005funbuffered_005fall#GFORTRAN_005fUNBUFFERED_005fALL\">GFORTRAN_UNBUFFERED_ALL</a>: Do not buffer I/O for all units. </li>\n<li>\n<a accesskey=\"6\" href=\"gfortran_005funbuffered_005fpreconnected#GFORTRAN_005fUNBUFFERED_005fPRECONNECTED\">GFORTRAN_UNBUFFERED_PRECONNECTED</a>: Do not buffer I/O for preconnected units. </li>\n<li>\n<a accesskey=\"7\" href=\"gfortran_005fshow_005flocus#GFORTRAN_005fSHOW_005fLOCUS\">GFORTRAN_SHOW_LOCUS</a>: Show location for runtime errors </li>\n<li>\n<a accesskey=\"8\" href=\"gfortran_005foptional_005fplus#GFORTRAN_005fOPTIONAL_005fPLUS\">GFORTRAN_OPTIONAL_PLUS</a>: Print leading + where permitted </li>\n<li>\n<a accesskey=\"9\" href=\"gfortran_005fdefault_005frecl#GFORTRAN_005fDEFAULT_005fRECL\">GFORTRAN_DEFAULT_RECL</a>: Default record length for new files </li>\n<li>\n<a href=\"gfortran_005flist_005fseparator#GFORTRAN_005fLIST_005fSEPARATOR\">GFORTRAN_LIST_SEPARATOR</a>: Separator for list output </li>\n<li>\n<a href=\"gfortran_005fconvert_005funit#GFORTRAN_005fCONVERT_005fUNIT\">GFORTRAN_CONVERT_UNIT</a>: Set endianness for unformatted I/O </li>\n<li>\n<a href=\"gfortran_005ferror_005fbacktrace#GFORTRAN_005fERROR_005fBACKTRACE\">GFORTRAN_ERROR_BACKTRACE</a>: Show backtrace on run-time errors </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Runtime.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Runtime.html</a>\n  </p>\n</div>\n","tmpdir":"<h1 class=\"section\" id=\"TMPDIR\">3.1 <code>TMPDIR</code>—Directory for scratch files</h1> <p>When opening a file with <code>STATUS='SCRATCH'</code>, GNU Fortran tries to create the file in one of the potential directories by testing each directory in the order below. </p>\n<ol type=\"1\" start=\"1\"> <li>The environment variable <code>TMPDIR</code>, if it exists. </li>\n<li>On the MinGW target, the directory returned by the <code>GetTempPath</code> function. Alternatively, on the Cygwin target, the <code>TMP</code> and <code>TEMP</code> environment variables, if they exist, in that order. </li>\n<li>The <code>P_tmpdir</code> macro if it is defined, otherwise the directory <code>/tmp</code>. </li>\n</ol><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/TMPDIR.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/TMPDIR.html</a>\n  </p>\n</div>\n","gfortran_005fstdin_005funit":"<h1 class=\"section\" id=\"GFORTRAN_005fSTDIN_005fUNIT\">3.2 <code>GFORTRAN_STDIN_UNIT</code>—Unit number for standard input</h1> <p>This environment variable can be used to select the unit number preconnected to standard input. This must be a positive integer. The default value is 5. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GFORTRAN_005fSTDIN_005fUNIT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GFORTRAN_005fSTDIN_005fUNIT.html</a>\n  </p>\n</div>\n","gfortran_005fstdout_005funit":"<h1 class=\"section\" id=\"GFORTRAN_005fSTDOUT_005fUNIT\">3.3 <code>GFORTRAN_STDOUT_UNIT</code>—Unit number for standard output</h1> <p>This environment variable can be used to select the unit number preconnected to standard output. This must be a positive integer. The default value is 6. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GFORTRAN_005fSTDOUT_005fUNIT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GFORTRAN_005fSTDOUT_005fUNIT.html</a>\n  </p>\n</div>\n","gfortran_005fstderr_005funit":"<h1 class=\"section\" id=\"GFORTRAN_005fSTDERR_005fUNIT\">3.4 <code>GFORTRAN_STDERR_UNIT</code>—Unit number for standard error</h1> <p>This environment variable can be used to select the unit number preconnected to standard error. This must be a positive integer. The default value is 0. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GFORTRAN_005fSTDERR_005fUNIT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GFORTRAN_005fSTDERR_005fUNIT.html</a>\n  </p>\n</div>\n","gfortran_005funbuffered_005fall":"<h1 class=\"section\" id=\"GFORTRAN_005fUNBUFFERED_005fALL\">3.5 <code>GFORTRAN_UNBUFFERED_ALL</code>—Do not buffer I/O on all units</h1> <p>This environment variable controls whether all I/O is unbuffered. If the first letter is ‘<code>y</code>’, ‘<code>Y</code>’ or ‘<code>1</code>’, all I/O is unbuffered. This will slow down small sequential reads and writes. If the first letter is ‘<code>n</code>’, ‘<code>N</code>’ or ‘<code>0</code>’, I/O is buffered. This is the default. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GFORTRAN_005fUNBUFFERED_005fALL.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GFORTRAN_005fUNBUFFERED_005fALL.html</a>\n  </p>\n</div>\n","gfortran_005funbuffered_005fpreconnected":"<h1 class=\"section\" id=\"GFORTRAN_005fUNBUFFERED_005fPRECONNECTED\">3.6 <code>GFORTRAN_UNBUFFERED_PRECONNECTED</code>—Do not buffer I/O on preconnected units</h1> <p>The environment variable named <code>GFORTRAN_UNBUFFERED_PRECONNECTED</code> controls whether I/O on a preconnected unit (i.e. STDOUT or STDERR) is unbuffered. If the first letter is ‘<code>y</code>’, ‘<code>Y</code>’ or ‘<code>1</code>’, I/O is unbuffered. This will slow down small sequential reads and writes. If the first letter is ‘<code>n</code>’, ‘<code>N</code>’ or ‘<code>0</code>’, I/O is buffered. This is the default. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GFORTRAN_005fUNBUFFERED_005fPRECONNECTED.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GFORTRAN_005fUNBUFFERED_005fPRECONNECTED.html</a>\n  </p>\n</div>\n","gfortran_005fshow_005flocus":"<h1 class=\"section\" id=\"GFORTRAN_005fSHOW_005fLOCUS\">3.7 <code>GFORTRAN_SHOW_LOCUS</code>—Show location for runtime errors</h1> <p>If the first letter is ‘<code>y</code>’, ‘<code>Y</code>’ or ‘<code>1</code>’, filename and line numbers for runtime errors are printed. If the first letter is ‘<code>n</code>’, ‘<code>N</code>’ or ‘<code>0</code>’, do not print filename and line numbers for runtime errors. The default is to print the location. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GFORTRAN_005fSHOW_005fLOCUS.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GFORTRAN_005fSHOW_005fLOCUS.html</a>\n  </p>\n</div>\n","gfortran_005foptional_005fplus":"<h1 class=\"section\" id=\"GFORTRAN_005fOPTIONAL_005fPLUS\">3.8 <code>GFORTRAN_OPTIONAL_PLUS</code>—Print leading + where permitted</h1> <p>If the first letter is ‘<code>y</code>’, ‘<code>Y</code>’ or ‘<code>1</code>’, a plus sign is printed where permitted by the Fortran standard. If the first letter is ‘<code>n</code>’, ‘<code>N</code>’ or ‘<code>0</code>’, a plus sign is not printed in most cases. Default is not to print plus signs. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GFORTRAN_005fOPTIONAL_005fPLUS.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GFORTRAN_005fOPTIONAL_005fPLUS.html</a>\n  </p>\n</div>\n","gfortran_005fdefault_005frecl":"<h1 class=\"section\" id=\"GFORTRAN_005fDEFAULT_005fRECL\">3.9 <code>GFORTRAN_DEFAULT_RECL</code>—Default record length for new files</h1> <p>This environment variable specifies the default record length, in bytes, for files which are opened without a <code>RECL</code> tag in the <code>OPEN</code> statement. This must be a positive integer. The default value is 1073741824 bytes (1 GB). </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GFORTRAN_005fDEFAULT_005fRECL.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GFORTRAN_005fDEFAULT_005fRECL.html</a>\n  </p>\n</div>\n","gfortran_005flist_005fseparator":"<h1 class=\"section\" id=\"GFORTRAN_005fLIST_005fSEPARATOR\">3.10 <code>GFORTRAN_LIST_SEPARATOR</code>—Separator for list output</h1> <p>This environment variable specifies the separator when writing list-directed output. It may contain any number of spaces and at most one comma. If you specify this on the command line, be sure to quote spaces, as in </p>\n<pre class=\"smallexample\">$ GFORTRAN_LIST_SEPARATOR='  ,  ' ./a.out</pre> <p>when <code>a.out</code> is the compiled Fortran program that you want to run. Default is a single space. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GFORTRAN_005fLIST_005fSEPARATOR.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GFORTRAN_005fLIST_005fSEPARATOR.html</a>\n  </p>\n</div>\n","gfortran_005fconvert_005funit":"<h1 class=\"section\" id=\"GFORTRAN_005fCONVERT_005fUNIT\">3.11 <code>GFORTRAN_CONVERT_UNIT</code>—Set endianness for unformatted I/O</h1> <p>By setting the <code>GFORTRAN_CONVERT_UNIT</code> variable, it is possible to change the representation of data for unformatted files. The syntax for the <code>GFORTRAN_CONVERT_UNIT</code> variable is: </p>\n<pre class=\"smallexample\">GFORTRAN_CONVERT_UNIT: mode | mode ';' exception | exception ;\nmode: 'native' | 'swap' | 'big_endian' | 'little_endian' ;\nexception: mode ':' unit_list | unit_list ;\nunit_list: unit_spec | unit_list unit_spec ;\nunit_spec: INTEGER | INTEGER '-' INTEGER ;</pre> <p>The variable consists of an optional default mode, followed by a list of optional exceptions, which are separated by semicolons from the preceding default and each other. Each exception consists of a format and a comma-separated list of units. Valid values for the modes are the same as for the <code>CONVERT</code> specifier: </p>\n<ul> <li>\n<code>NATIVE</code> Use the native format. This is the default. </li>\n<li>\n<code>SWAP</code> Swap between little- and big-endian. </li>\n<li>\n<code>LITTLE_ENDIAN</code> Use the little-endian format for unformatted files. </li>\n<li>\n<code>BIG_ENDIAN</code> Use the big-endian format for unformatted files. </li>\n</ul> A missing mode for an exception is taken to mean <code>BIG_ENDIAN</code>. Examples of values for <code>GFORTRAN_CONVERT_UNIT</code> are: <ul> <li>\n<code>'big_endian'</code> Do all unformatted I/O in big_endian mode. </li>\n<li>\n<code>'little_endian;native:10-20,25'</code> Do all unformatted I/O in little_endian mode, except for units 10 to 20 and 25, which are in native format. </li>\n<li>\n<code>'10-20'</code> Units 10 to 20 are big-endian, the rest is native. </li>\n</ul> <p>Setting the environment variables should be done on the command line or via the <code>export</code> command for <code>sh</code>-compatible shells and via <code>setenv</code> for <code>csh</code>-compatible shells. </p>\n<p>Example for <code>sh</code>: </p>\n<pre class=\"smallexample\">$ gfortran foo.f90\n$ GFORTRAN_CONVERT_UNIT='big_endian;native:10-20' ./a.out</pre> <p>Example code for <code>csh</code>: </p>\n<pre class=\"smallexample\">% gfortran foo.f90\n% setenv GFORTRAN_CONVERT_UNIT 'big_endian;native:10-20'\n% ./a.out</pre> <p>Using anything but the native representation for unformatted data carries a significant speed overhead. If speed in this area matters to you, it is best if you use this only for data that needs to be portable. </p>\n<p>See <a href=\"convert-specifier#CONVERT-specifier\">CONVERT specifier</a>, for an alternative way to specify the data representation for unformatted files. See <a href=\"runtime-options#Runtime-Options\">Runtime Options</a>, for setting a default data representation for the whole program. The <code>CONVERT</code> specifier overrides the <code>-fconvert</code> compile options. </p>\n<p><em>Note that the values specified via the GFORTRAN_CONVERT_UNIT environment variable will override the CONVERT specifier in the open statement</em>. This is to give control over data formats to users who do not have the source code of their program available. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GFORTRAN_005fCONVERT_005fUNIT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GFORTRAN_005fCONVERT_005fUNIT.html</a>\n  </p>\n</div>\n","gfortran_005ferror_005fbacktrace":"<h1 class=\"section\" id=\"GFORTRAN_005fERROR_005fBACKTRACE\">3.12 <code>GFORTRAN_ERROR_BACKTRACE</code>—Show backtrace on run-time errors</h1> <p>If the <code>GFORTRAN_ERROR_BACKTRACE</code> variable is set to ‘<code>y</code>’, ‘<code>Y</code>’ or ‘<code>1</code>’ (only the first letter is relevant) then a backtrace is printed when a serious run-time error occurs. To disable the backtracing, set the variable to ‘<code>n</code>’, ‘<code>N</code>’, ‘<code>0</code>’. Default is to print a backtrace unless the <code>-fno-backtrace</code> compile option was used.       </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GFORTRAN_005fERROR_005fBACKTRACE.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GFORTRAN_005fERROR_005fBACKTRACE.html</a>\n  </p>\n</div>\n","fortran-2003-and-2008-status":"<h1 class=\"chapter\" id=\"Fortran-2003-and-2008-status\">4 Fortran 2003 and 2008 Status</h1> <ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"fortran-2003-status#Fortran-2003-status\">Fortran 2003 status</a> </li>\n<li>\n<a accesskey=\"2\" href=\"fortran-2008-status#Fortran-2008-status\">Fortran 2008 status</a> </li>\n<li>\n<a accesskey=\"3\" href=\"ts-29113-status#TS-29113-status\">TS 29113 status</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Fortran-2003-and-2008-status.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Fortran-2003-and-2008-status.html</a>\n  </p>\n</div>\n","fortran-2003-status":"<h1 class=\"section\" id=\"Fortran-2003-status\">4.1 Fortran 2003 status</h1> <p>GNU Fortran supports several Fortran 2003 features; an incomplete list can be found below. See also the <a href=\"http://gcc.gnu.org/wiki/Fortran2003\">wiki page</a> about Fortran 2003. </p>\n<ul> <li>Procedure pointers including procedure-pointer components with <code>PASS</code> attribute. </li>\n<li>Procedures which are bound to a derived type (type-bound procedures) including <code>PASS</code>, <code>PROCEDURE</code> and <code>GENERIC</code>, and operators bound to a type. </li>\n<li>Abstract interfaces and type extension with the possibility to override type-bound procedures or to have deferred binding. </li>\n<li>Polymorphic entities (“<code>CLASS</code>”) for derived types and unlimited polymorphism (“<code>CLASS(*)</code>”) – including <code>SAME_TYPE_AS</code>, <code>EXTENDS_TYPE_OF</code> and <code>SELECT TYPE</code> for scalars and arrays and finalization. </li>\n<li>Generic interface names, which have the same name as derived types, are now supported. This allows one to write constructor functions. Note that Fortran does not support static constructor functions. For static variables, only default initialization or structure-constructor initialization are available. </li>\n<li>The <code>ASSOCIATE</code> construct. </li>\n<li>Interoperability with C including enumerations, </li>\n<li>In structure constructors the components with default values may be omitted. </li>\n<li>Extensions to the <code>ALLOCATE</code> statement, allowing for a type-specification with type parameter and for allocation and initialization from a <code>SOURCE=</code> expression; <code>ALLOCATE</code> and <code>DEALLOCATE</code> optionally return an error message string via <code>ERRMSG=</code>. </li>\n<li>Reallocation on assignment: If an intrinsic assignment is used, an allocatable variable on the left-hand side is automatically allocated (if unallocated) or reallocated (if the shape is different). Currently, scalar deferred character length left-hand sides are correctly handled but arrays are not yet fully implemented. </li>\n<li>Deferred-length character variables and scalar deferred-length character components of derived types are supported. (Note that array-valued compoents are not yet implemented.) </li>\n<li>Transferring of allocations via <code>MOVE_ALLOC</code>. </li>\n<li>The <code>PRIVATE</code> and <code>PUBLIC</code> attributes may be given individually to derived-type components. </li>\n<li>In pointer assignments, the lower bound may be specified and the remapping of elements is supported. </li>\n<li>For pointers an <code>INTENT</code> may be specified which affect the association status not the value of the pointer target. </li>\n<li>Intrinsics <code>command_argument_count</code>, <code>get_command</code>, <code>get_command_argument</code>, and <code>get_environment_variable</code>. </li>\n<li>Support for Unicode characters (ISO 10646) and UTF-8, including the <code>SELECTED_CHAR_KIND</code> and <code>NEW_LINE</code> intrinsic functions. </li>\n<li>Support for binary, octal and hexadecimal (BOZ) constants in the intrinsic functions <code>INT</code>, <code>REAL</code>, <code>CMPLX</code> and <code>DBLE</code>. </li>\n<li>Support for namelist variables with allocatable and pointer attribute and nonconstant length type parameter. </li>\n<li>\nArray constructors using square brackets. That is, <code>[...]</code> rather than <code>(/.../)</code>. Type-specification for array constructors like <code>(/ some-type :: ... /)</code>. </li>\n<li>Extensions to the specification and initialization expressions, including the support for intrinsics with real and complex arguments. </li>\n<li>Support for the asynchronous input/output syntax; however, the data transfer is currently always synchronously performed. </li>\n<li>\n<code>FLUSH</code> statement. </li>\n<li>\n<code>IOMSG=</code> specifier for I/O statements. </li>\n<li>\nSupport for the declaration of enumeration constants via the <code>ENUM</code> and <code>ENUMERATOR</code> statements. Interoperability with <code>gcc</code> is guaranteed also for the case where the <code>-fshort-enums</code> command line option is given. </li>\n<li>\nTR 15581: <ul> <li>\n<code>ALLOCATABLE</code> dummy arguments. </li>\n<li>\n<code>ALLOCATABLE</code> function results </li>\n<li>\n<code>ALLOCATABLE</code> components of derived types </li>\n</ul> </li>\n<li>\nThe <code>OPEN</code> statement supports the <code>ACCESS='STREAM'</code> specifier, allowing I/O without any record structure. </li>\n<li>Namelist input/output for internal files. </li>\n<li>Minor I/O features: Rounding during formatted output, using of a decimal comma instead of a decimal point, setting whether a plus sign should appear for positive numbers. On system where <code>strtod</code> honours the rounding mode, the rounding mode is also supported for input. </li>\n<li>\nThe <code>PROTECTED</code> statement and attribute. </li>\n<li>\nThe <code>VALUE</code> statement and attribute. </li>\n<li>\nThe <code>VOLATILE</code> statement and attribute. </li>\n<li>\nThe <code>IMPORT</code> statement, allowing to import host-associated derived types. </li>\n<li>The intrinsic modules <code>ISO_FORTRAN_ENVIRONMENT</code> is supported, which contains parameters of the I/O units, storage sizes. Additionally, procedures for C interoperability are available in the <code>ISO_C_BINDING</code> module. </li>\n<li>\n<code>USE</code> statement with <code>INTRINSIC</code> and <code>NON_INTRINSIC</code> attribute; supported intrinsic modules: <code>ISO_FORTRAN_ENV</code>, <code>ISO_C_BINDING</code>, <code>OMP_LIB</code> and <code>OMP_LIB_KINDS</code>. </li>\n<li>Renaming of operators in the <code>USE</code> statement. </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Fortran-2003-status.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Fortran-2003-status.html</a>\n  </p>\n</div>\n","fortran-2008-status":"<h1 class=\"section\" id=\"Fortran-2008-status\">4.2 Fortran 2008 status</h1> <p>The latest version of the Fortran standard is ISO/IEC 1539-1:2010, informally known as Fortran 2008. The official version is available from International Organization for Standardization (ISO) or its national member organizations. The the final draft (FDIS) can be downloaded free of charge from <a href=\"http://www.nag.co.uk/sc22wg5/links.html\">http://www.nag.co.uk/sc22wg5/links.html</a>. Fortran is developed by the Working Group 5 of Sub-Committee 22 of the Joint Technical Committee 1 of the International Organization for Standardization and the International Electrotechnical Commission (IEC). This group is known as <a href=\"http://www.nag.co.uk/sc22wg5/\">WG5</a>. </p>\n<p>The GNU Fortran compiler supports several of the new features of Fortran 2008; the <a href=\"http://gcc.gnu.org/wiki/Fortran2008Status\">wiki</a> has some information about the current Fortran 2008 implementation status. In particular, the following is implemented. </p>\n<ul> <li>The <code>-std=f2008</code> option and support for the file extensions <code>.f08</code> and <code>.F08</code>. </li>\n<li>The <code>OPEN</code> statement now supports the <code>NEWUNIT=</code> option, which returns a unique file unit, thus preventing inadvertent use of the same unit in different parts of the program. </li>\n<li>The <code>g0</code> format descriptor and unlimited format items. </li>\n<li>The mathematical intrinsics <code>ASINH</code>, <code>ACOSH</code>, <code>ATANH</code>, <code>ERF</code>, <code>ERFC</code>, <code>GAMMA</code>, <code>LOG_GAMMA</code>, <code>BESSEL_J0</code>, <code>BESSEL_J1</code>, <code>BESSEL_JN</code>, <code>BESSEL_Y0</code>, <code>BESSEL_Y1</code>, <code>BESSEL_YN</code>, <code>HYPOT</code>, <code>NORM2</code>, and <code>ERFC_SCALED</code>. </li>\n<li>Using complex arguments with <code>TAN</code>, <code>SINH</code>, <code>COSH</code>, <code>TANH</code>, <code>ASIN</code>, <code>ACOS</code>, and <code>ATAN</code> is now possible; <code>ATAN</code>(<var>Y</var>,<var>X</var>) is now an alias for <code>ATAN2</code>(<var>Y</var>,<var>X</var>). </li>\n<li>Support of the <code>PARITY</code> intrinsic functions. </li>\n<li>The following bit intrinsics: <code>LEADZ</code> and <code>TRAILZ</code> for counting the number of leading and trailing zero bits, <code>POPCNT</code> and <code>POPPAR</code> for counting the number of one bits and returning the parity; <code>BGE</code>, <code>BGT</code>, <code>BLE</code>, and <code>BLT</code> for bitwise comparisons; <code>DSHIFTL</code> and <code>DSHIFTR</code> for combined left and right shifts, <code>MASKL</code> and <code>MASKR</code> for simple left and right justified masks, <code>MERGE_BITS</code> for a bitwise merge using a mask, <code>SHIFTA</code>, <code>SHIFTL</code> and <code>SHIFTR</code> for shift operations, and the transformational bit intrinsics <code>IALL</code>, <code>IANY</code> and <code>IPARITY</code>. </li>\n<li>Support of the <code>EXECUTE_COMMAND_LINE</code> intrinsic subroutine. </li>\n<li>Support for the <code>STORAGE_SIZE</code> intrinsic inquiry function. </li>\n<li>The <code>INT{8,16,32}</code> and <code>REAL{32,64,128}</code> kind type parameters and the array-valued named constants <code>INTEGER_KINDS</code>, <code>LOGICAL_KINDS</code>, <code>REAL_KINDS</code> and <code>CHARACTER_KINDS</code> of the intrinsic module <code>ISO_FORTRAN_ENV</code>. </li>\n<li>The module procedures <code>C_SIZEOF</code> of the intrinsic module <code>ISO_C_BINDINGS</code> and <code>COMPILER_VERSION</code> and <code>COMPILER_OPTIONS</code> of <code>ISO_FORTRAN_ENV</code>. </li>\n<li>Coarray support for serial programs with <code>-fcoarray=single</code> flag and experimental support for multiple images with the <code>-fcoarray=lib</code> flag. </li>\n<li>The <code>DO CONCURRENT</code> construct is supported. </li>\n<li>The <code>BLOCK</code> construct is supported. </li>\n<li>The <code>STOP</code> and the new <code>ERROR STOP</code> statements now support all constant expressions. Both show the signals which were signaling at termination. </li>\n<li>Support for the <code>CONTIGUOUS</code> attribute. </li>\n<li>Support for <code>ALLOCATE</code> with <code>MOLD</code>. </li>\n<li>Support for the <code>IMPURE</code> attribute for procedures, which allows for <code>ELEMENTAL</code> procedures without the restrictions of <code>PURE</code>. </li>\n<li>Null pointers (including <code>NULL()</code>) and not-allocated variables can be used as actual argument to optional non-pointer, non-allocatable dummy arguments, denoting an absent argument. </li>\n<li>Non-pointer variables with <code>TARGET</code> attribute can be used as actual argument to <code>POINTER</code> dummies with <code>INTENT(IN)</code>. </li>\n<li>Pointers including procedure pointers and those in a derived type (pointer components) can now be initialized by a target instead of only by <code>NULL</code>. </li>\n<li>The <code>EXIT</code> statement (with construct-name) can be now be used to leave not only the <code>DO</code> but also the <code>ASSOCIATE</code>, <code>BLOCK</code>, <code>IF</code>, <code>SELECT CASE</code> and <code>SELECT TYPE</code> constructs. </li>\n<li>Internal procedures can now be used as actual argument. </li>\n<li>Minor features: obsolesce diagnostics for <code>ENTRY</code> with <code>-std=f2008</code>; a line may start with a semicolon; for internal and module procedures <code>END</code> can be used instead of <code>END SUBROUTINE</code> and <code>END FUNCTION</code>; <code>SELECTED_REAL_KIND</code> now also takes a <code>RADIX</code> argument; intrinsic types are supported for <code>TYPE</code>(<var>intrinsic-type-spec</var>); multiple type-bound procedures can be declared in a single <code>PROCEDURE</code> statement; implied-shape arrays are supported for named constants (<code>PARAMETER</code>). </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Fortran-2008-status.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Fortran-2008-status.html</a>\n  </p>\n</div>\n","ts-29113-status":"<h1 class=\"section\" id=\"TS-29113-status\">4.3 Technical Specification 29113 Status</h1> <p>GNU Fortran supports some of the new features of the Technical Specification (TS) 29113 on Further Interoperability of Fortran with C. The <a href=\"http://gcc.gnu.org/wiki/TS29113Status\">wiki</a> has some information about the current TS 29113 implementation status. In particular, the following is implemented. </p>\n<p>See also <a href=\"further-interoperability-of-fortran-with-c#Further-Interoperability-of-Fortran-with-C\">Further Interoperability of Fortran with C</a>. </p>\n<ul> <li>The <code>-std=f2008ts</code> option. </li>\n<li>The <code>OPTIONAL</code> attribute is allowed for dummy arguments of <code>BIND(C) procedures.</code> </li>\n<li>The <code>RANK</code> intrinsic is supported. </li>\n<li>GNU Fortran's implementation for variables with <code>ASYNCHRONOUS</code> attribute is compatible with TS 29113. </li>\n<li>Assumed types (<code>TYPE(*)</code>. </li>\n<li>Assumed-rank (<code>DIMENSION(..)</code>). However, the array descriptor of the TS is not yet supported. </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/TS-29113-status.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/TS-29113-status.html</a>\n  </p>\n</div>\n","compiler-characteristics":"<h1 class=\"chapter\" id=\"Compiler-Characteristics\">5 Compiler Characteristics</h1> <p>This chapter describes certain characteristics of the GNU Fortran compiler, that are not specified by the Fortran standard, but which might in some way or another become visible to the programmer. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"kind-type-parameters#KIND-Type-Parameters\">KIND Type Parameters</a> </li>\n<li>\n<a accesskey=\"2\" href=\"internal-representation-of-logical-variables#Internal-representation-of-LOGICAL-variables\">Internal representation of LOGICAL variables</a> </li>\n<li>\n<a accesskey=\"3\" href=\"thread_002dsafety-of-the-runtime-library#Thread_002dsafety-of-the-runtime-library\">Thread-safety of the runtime library</a> </li>\n<li>\n<a accesskey=\"4\" href=\"data-consistency-and-durability#Data-consistency-and-durability\">Data consistency and durability</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Compiler-Characteristics.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Compiler-Characteristics.html</a>\n  </p>\n</div>\n","kind-type-parameters":"<h1 class=\"section\" id=\"KIND-Type-Parameters\">5.1 KIND Type Parameters</h1> <p> The <code>KIND</code> type parameters supported by GNU Fortran for the primitive data types are: </p>\n<dl> <dt><code>INTEGER</code></dt>\n<dd>1, 2, 4, 8*, 16*, default: 4** </dd>\n<dt><code>LOGICAL</code></dt>\n<dd>1, 2, 4, 8*, 16*, default: 4** </dd>\n<dt><code>REAL</code></dt>\n<dd>4, 8, 10*, 16*, default: 4*** </dd>\n<dt><code>COMPLEX</code></dt>\n<dd>4, 8, 10*, 16*, default: 4*** </dd>\n<dt><code>DOUBLE PRECISION</code></dt>\n<dd>4, 8, 10*, 16*, default: 8*** </dd>\n<dt><code>CHARACTER</code></dt>\n<dd>1, 4, default: 1 </dd>\n</dl> <p class=\"noindent\">* not available on all systems  ** unless <code>-fdefault-integer-8</code> is used  *** unless <code>-fdefault-real-8</code> is used (see <a href=\"fortran-dialect-options#Fortran-Dialect-Options\">Fortran Dialect Options</a>) </p>\n<p class=\"noindent\">The <code>KIND</code> value matches the storage size in bytes, except for <code>COMPLEX</code> where the storage size is twice as much (or both real and imaginary part are a real value of the given size). It is recommended to use the <a href=\"selected_005fchar_005fkind#SELECTED_005fCHAR_005fKIND\">SELECTED_CHAR_KIND</a>, <a href=\"selected_005fint_005fkind#SELECTED_005fINT_005fKIND\">SELECTED_INT_KIND</a> and <a href=\"selected_005freal_005fkind#SELECTED_005fREAL_005fKIND\">SELECTED_REAL_KIND</a> intrinsics or the <code>INT8</code>, <code>INT16</code>, <code>INT32</code>, <code>INT64</code>, <code>REAL32</code>, <code>REAL64</code>, and <code>REAL128</code> parameters of the <code>ISO_FORTRAN_ENV</code> module instead of the concrete values. The available kind parameters can be found in the constant arrays <code>CHARACTER_KINDS</code>, <code>INTEGER_KINDS</code>, <code>LOGICAL_KINDS</code> and <code>REAL_KINDS</code> in the <a href=\"iso_005ffortran_005fenv#ISO_005fFORTRAN_005fENV\">ISO_FORTRAN_ENV</a> module. For C interoperability, the kind parameters of the <a href=\"iso_005fc_005fbinding#ISO_005fC_005fBINDING\">ISO_C_BINDING</a> module should be used. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/KIND-Type-Parameters.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/KIND-Type-Parameters.html</a>\n  </p>\n</div>\n","internal-representation-of-logical-variables":"<h1 class=\"section\" id=\"Internal-representation-of-LOGICAL-variables\">5.2 Internal representation of LOGICAL variables</h1> <p> The Fortran standard does not specify how variables of <code>LOGICAL</code> type are represented, beyond requiring that <code>LOGICAL</code> variables of default kind have the same storage size as default <code>INTEGER</code> and <code>REAL</code> variables. The GNU Fortran internal representation is as follows. </p>\n<p>A <code>LOGICAL(KIND=N)</code> variable is represented as an <code>INTEGER(KIND=N)</code> variable, however, with only two permissible values: <code>1</code> for <code>.TRUE.</code> and <code>0</code> for <code>.FALSE.</code>. Any other integer value results in undefined behavior. </p>\n<p>See also <a href=\"argument-passing-conventions#Argument-passing-conventions\">Argument passing conventions</a> and <a href=\"interoperability-with-c#Interoperability-with-C\">Interoperability with C</a>. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Internal-representation-of-LOGICAL-variables.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Internal-representation-of-LOGICAL-variables.html</a>\n  </p>\n</div>\n","thread_002dsafety-of-the-runtime-library":"<h1 class=\"section\" id=\"Thread_002dsafety-of-the-runtime-library\">5.3 Thread-safety of the runtime library</h1> <p> GNU Fortran can be used in programs with multiple threads, e.g. by using OpenMP, by calling OS thread handling functions via the <code>ISO_C_BINDING</code> facility, or by GNU Fortran compiled library code being called from a multi-threaded program. </p>\n<p>The GNU Fortran runtime library, (<code>libgfortran</code>), supports being called concurrently from multiple threads with the following exceptions. </p>\n<p>During library initialization, the C <code>getenv</code> function is used, which need not be thread-safe. Similarly, the <code>getenv</code> function is used to implement the <code>GET_ENVIRONMENT_VARIABLE</code> and <code>GETENV</code> intrinsics. It is the responsibility of the user to ensure that the environment is not being updated concurrently when any of these actions are taking place. </p>\n<p>The <code>EXECUTE_COMMAND_LINE</code> and <code>SYSTEM</code> intrinsics are implemented with the <code>system</code> function, which need not be thread-safe. It is the responsibility of the user to ensure that <code>system</code> is not called concurrently. </p>\n<p>Finally, for platforms not supporting thread-safe POSIX functions, further functionality might not be thread-safe. For details, please consult the documentation for your operating system. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Thread_002dsafety-of-the-runtime-library.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Thread_002dsafety-of-the-runtime-library.html</a>\n  </p>\n</div>\n","data-consistency-and-durability":"<h1 class=\"section\" id=\"Data-consistency-and-durability\">5.4 Data consistency and durability</h1> <p> This section contains a brief overview of data and metadata consistency and durability issues when doing I/O. </p>\n<p>With respect to durability, GNU Fortran makes no effort to ensure that data is committed to stable storage. If this is required, the GNU Fortran programmer can use the intrinsic <code>FNUM</code> to retrieve the low level file descriptor corresponding to an open Fortran unit. Then, using e.g. the <code>ISO_C_BINDING</code> feature, one can call the underlying system call to flush dirty data to stable storage, such as <code>fsync</code> on POSIX, <code>_commit</code> on MingW, or <code>fcntl(fd,\nF_FULLSYNC, 0)</code> on Mac OS X. The following example shows how to call fsync: </p>\n<pre class=\"smallexample\">! Declare the interface for POSIX fsync function\ninterface\n  function fsync (fd) bind(c,name=\"fsync\")\n  use iso_c_binding, only: c_int\n    integer(c_int), value :: fd\n    integer(c_int) :: fsync\n  end function fsync\nend interface\n     \n! Variable declaration\ninteger :: ret\n     \n! Opening unit 10\nopen (10,file=\"foo\")\n     \n! ...\n! Perform I/O on unit 10\n! ...\n     \n! Flush and sync\nflush(10)\nret = fsync(fnum(10))\n     \n! Handle possible error\nif (ret /= 0) stop \"Error calling FSYNC\"</pre> <p>With respect to consistency, for regular files GNU Fortran uses buffered I/O in order to improve performance. This buffer is flushed automatically when full and in some other situations, e.g. when closing a unit. It can also be explicitly flushed with the <code>FLUSH</code> statement. Also, the buffering can be turned off with the <code>GFORTRAN_UNBUFFERED_ALL</code> and <code>GFORTRAN_UNBUFFERED_PRECONNECTED</code> environment variables. Special files, such as terminals and pipes, are always unbuffered. Sometimes, however, further things may need to be done in order to allow other processes to see data that GNU Fortran has written, as follows. </p>\n<p>The Windows platform supports a relaxed metadata consistency model, where file metadata is written to the directory lazily. This means that, for instance, the <code>dir</code> command can show a stale size for a file. One can force a directory metadata update by closing the unit, or by calling <code>_commit</code> on the file descriptor. Note, though, that <code>_commit</code> will force all dirty data to stable storage, which is often a very slow operation. </p>\n<p>The Network File System (NFS) implements a relaxed consistency model called open-to-close consistency. Closing a file forces dirty data and metadata to be flushed to the server, and opening a file forces the client to contact the server in order to revalidate cached data. <code>fsync</code> will also force a flush of dirty data and metadata to the server. Similar to <code>open</code> and <code>close</code>, acquiring and releasing <code>fcntl</code> file locks, if the server supports them, will also force cache validation and flushing dirty data and metadata.      </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Data-consistency-and-durability.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Data-consistency-and-durability.html</a>\n  </p>\n</div>\n","extensions":"<h1 class=\"chapter\" id=\"Extensions\">6 Extensions</h1> <p> The two sections below detail the extensions to standard Fortran that are implemented in GNU Fortran, as well as some of the popular or historically important extensions that are not (or not yet) implemented. For the latter case, we explain the alternatives available to GNU Fortran users, including replacement by standard-conforming code or GNU extensions. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"extensions-implemented-in-gnu-fortran#Extensions-implemented-in-GNU-Fortran\">Extensions implemented in GNU Fortran</a> </li>\n<li>\n<a accesskey=\"2\" href=\"extensions-not-implemented-in-gnu-fortran#Extensions-not-implemented-in-GNU-Fortran\">Extensions not implemented in GNU Fortran</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Extensions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Extensions.html</a>\n  </p>\n</div>\n","extensions-implemented-in-gnu-fortran":"<h1 class=\"section\" id=\"Extensions-implemented-in-GNU-Fortran\">6.1 Extensions implemented in GNU Fortran</h1> <p> GNU Fortran implements a number of extensions over standard Fortran. This chapter contains information on their syntax and meaning. There are currently two categories of GNU Fortran extensions, those that provide functionality beyond that provided by any standard, and those that are supported by GNU Fortran purely for backward compatibility with legacy compilers. By default, <code>-std=gnu</code> allows the compiler to accept both types of extensions, but to warn about the use of the latter. Specifying either <code>-std=f95</code>, <code>-std=f2003</code> or <code>-std=f2008</code> disables both types of extensions, and <code>-std=legacy</code> allows both without warning. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"old_002dstyle-kind-specifications#Old_002dstyle-kind-specifications\">Old-style kind specifications</a> </li>\n<li>\n<a accesskey=\"2\" href=\"old_002dstyle-variable-initialization#Old_002dstyle-variable-initialization\">Old-style variable initialization</a> </li>\n<li>\n<a accesskey=\"3\" href=\"extensions-to-namelist#Extensions-to-namelist\">Extensions to namelist</a> </li>\n<li>\n<a accesskey=\"4\" href=\"x-format-descriptor-without-count-field#X-format-descriptor-without-count-field\">X format descriptor without count field</a> </li>\n<li>\n<a accesskey=\"5\" href=\"commas-in-format-specifications#Commas-in-FORMAT-specifications\">Commas in FORMAT specifications</a> </li>\n<li>\n<a accesskey=\"6\" href=\"missing-period-in-format-specifications#Missing-period-in-FORMAT-specifications\">Missing period in FORMAT specifications</a> </li>\n<li>\n<a accesskey=\"7\" href=\"i_002fo-item-lists#I_002fO-item-lists\">I/O item lists</a> </li>\n<li>\n<a accesskey=\"8\" href=\"_003ccode_003eq_003c_002fcode_003e-exponent_002dletter#g_t_003ccode_003eQ_003c_002fcode_003e-exponent_002dletter\"><code>Q</code> exponent-letter</a> </li>\n<li>\n<a accesskey=\"9\" href=\"boz-literal-constants#BOZ-literal-constants\">BOZ literal constants</a> </li>\n<li>\n<a href=\"real-array-indices#Real-array-indices\">Real array indices</a> </li>\n<li>\n<a href=\"unary-operators#Unary-operators\">Unary operators</a> </li>\n<li>\n<a href=\"implicitly-convert-logical-and-integer-values#Implicitly-convert-LOGICAL-and-INTEGER-values\">Implicitly convert LOGICAL and INTEGER values</a> </li>\n<li>\n<a href=\"hollerith-constants-support#Hollerith-constants-support\">Hollerith constants support</a> </li>\n<li>\n<a href=\"cray-pointers#Cray-pointers\">Cray pointers</a> </li>\n<li>\n<a href=\"convert-specifier#CONVERT-specifier\">CONVERT specifier</a> </li>\n<li>\n<a href=\"openmp#OpenMP\">OpenMP</a> </li>\n<li>\n<a href=\"argument-list-functions#Argument-list-functions\">Argument list functions</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Extensions-implemented-in-GNU-Fortran.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Extensions-implemented-in-GNU-Fortran.html</a>\n  </p>\n</div>\n","old_002dstyle-kind-specifications":"<h1 class=\"subsection\" id=\"Old_002dstyle-kind-specifications\">6.1.1 Old-style kind specifications</h1> <p> GNU Fortran allows old-style kind specifications in declarations. These look like: </p>\n<pre class=\"smallexample\">TYPESPEC*size x,y,z</pre> <p class=\"noindent\">where <code>TYPESPEC</code> is a basic type (<code>INTEGER</code>, <code>REAL</code>, etc.), and where <code>size</code> is a byte count corresponding to the storage size of a valid kind for that type. (For <code>COMPLEX</code> variables, <code>size</code> is the total size of the real and imaginary parts.) The statement then declares <code>x</code>, <code>y</code> and <code>z</code> to be of type <code>TYPESPEC</code> with the appropriate kind. This is equivalent to the standard-conforming declaration </p>\n<pre class=\"smallexample\">TYPESPEC(k) x,y,z</pre> <p class=\"noindent\">where <code>k</code> is the kind parameter suitable for the intended precision. As kind parameters are implementation-dependent, use the <code>KIND</code>, <code>SELECTED_INT_KIND</code> and <code>SELECTED_REAL_KIND</code> intrinsics to retrieve the correct value, for instance <code>REAL*8 x</code> can be replaced by: </p>\n<pre class=\"smallexample\">INTEGER, PARAMETER :: dbl = KIND(1.0d0)\nREAL(KIND=dbl) :: x</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Old_002dstyle-kind-specifications.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Old_002dstyle-kind-specifications.html</a>\n  </p>\n</div>\n","old_002dstyle-variable-initialization":"<h1 class=\"subsection\" id=\"Old_002dstyle-variable-initialization\">6.1.2 Old-style variable initialization</h1> <p>GNU Fortran allows old-style initialization of variables of the form: </p>\n<pre class=\"smallexample\">INTEGER i/1/,j/2/\nREAL x(2,2) /3*0.,1./</pre> <p>The syntax for the initializers is as for the <code>DATA</code> statement, but unlike in a <code>DATA</code> statement, an initializer only applies to the variable immediately preceding the initialization. In other words, something like <code>INTEGER I,J/2,3/</code> is not valid. This style of initialization is only allowed in declarations without double colons (<code>::</code>); the double colons were introduced in Fortran 90, which also introduced a standard syntax for initializing variables in type declarations. </p>\n<p>Examples of standard-conforming code equivalent to the above example are: </p>\n<pre class=\"smallexample\">! Fortran 90\n      INTEGER :: i = 1, j = 2\n      REAL :: x(2,2) = RESHAPE((/0.,0.,0.,1./),SHAPE(x))\n! Fortran 77\n      INTEGER i, j\n      REAL x(2,2)\n      DATA i/1/, j/2/, x/3*0.,1./</pre> <p>Note that variables which are explicitly initialized in declarations or in <code>DATA</code> statements automatically acquire the <code>SAVE</code> attribute. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Old_002dstyle-variable-initialization.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Old_002dstyle-variable-initialization.html</a>\n  </p>\n</div>\n","extensions-to-namelist":"<h1 class=\"subsection\" id=\"Extensions-to-namelist\">6.1.3 Extensions to namelist</h1> <p> GNU Fortran fully supports the Fortran 95 standard for namelist I/O including array qualifiers, substrings and fully qualified derived types. The output from a namelist write is compatible with namelist read. The output has all names in upper case and indentation to column 1 after the namelist name. Two extensions are permitted: </p>\n<p>Old-style use of ‘<code>$</code>’ instead of ‘<code>&amp;</code>’ </p>\n<pre class=\"smallexample\">$MYNML\n X(:)%Y(2) = 1.0 2.0 3.0\n CH(1:4) = \"abcd\"\n$END</pre> <p>It should be noted that the default terminator is ‘<code>/</code>’ rather than ‘<code>&amp;END</code>’. </p>\n<p>Querying of the namelist when inputting from stdin. After at least one space, entering ‘<code>?</code>’ sends to stdout the namelist name and the names of the variables in the namelist: </p>\n<pre class=\"smallexample\">?\n\n&amp;mynml\n x\n x%y\n ch\n&amp;end</pre> <p>Entering ‘<code>=?</code>’ outputs the namelist to stdout, as if <code>WRITE(*,NML = mynml)</code> had been called: </p>\n<pre class=\"smallexample\">=?\n\n&amp;MYNML\n X(1)%Y=  0.000000    ,  1.000000    ,  0.000000    ,\n X(2)%Y=  0.000000    ,  2.000000    ,  0.000000    ,\n X(3)%Y=  0.000000    ,  3.000000    ,  0.000000    ,\n CH=abcd,  /</pre> <p>To aid this dialog, when input is from stdin, errors send their messages to stderr and execution continues, even if <code>IOSTAT</code> is set. </p>\n<p><code>PRINT</code> namelist is permitted. This causes an error if <code>-std=f95</code> is used. </p>\n<pre class=\"smallexample\">PROGRAM test_print\n  REAL, dimension (4)  ::  x = (/1.0, 2.0, 3.0, 4.0/)\n  NAMELIST /mynml/ x\n  PRINT mynml\nEND PROGRAM test_print</pre> <p>Expanded namelist reads are permitted. This causes an error if <code>-std=f95</code> is used. In the following example, the first element of the array will be given the value 0.00 and the two succeeding elements will be given the values 1.00 and 2.00. </p>\n<pre class=\"smallexample\">&amp;MYNML\n  X(1,1) = 0.00 , 1.00 , 2.00\n/</pre> <p>When writing a namelist, if no <code>DELIM=</code> is specified, by default a double quote is used to delimit character strings. If -std=F95, F2003, or F2008, etc, the delim status is set to 'none'. Defaulting to quotes ensures that namelists with character strings can be subsequently read back in accurately. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Extensions-to-namelist.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Extensions-to-namelist.html</a>\n  </p>\n</div>\n","x-format-descriptor-without-count-field":"<h1 class=\"subsection\" id=\"X-format-descriptor-without-count-field\">6.1.4 <code>X</code> format descriptor without count field</h1> <p>To support legacy codes, GNU Fortran permits the count field of the <code>X</code> edit descriptor in <code>FORMAT</code> statements to be omitted. When omitted, the count is implicitly assumed to be one. </p>\n<pre class=\"smallexample\">PRINT 10, 2, 3\n10     FORMAT (I1, X, I1)</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/X-format-descriptor-without-count-field.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/X-format-descriptor-without-count-field.html</a>\n  </p>\n</div>\n","commas-in-format-specifications":"<h1 class=\"subsection\" id=\"Commas-in-FORMAT-specifications\">6.1.5 Commas in <code>FORMAT</code> specifications</h1> <p>To support legacy codes, GNU Fortran allows the comma separator to be omitted immediately before and after character string edit descriptors in <code>FORMAT</code> statements. </p>\n<pre class=\"smallexample\">PRINT 10, 2, 3\n10     FORMAT ('FOO='I1' BAR='I2)</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Commas-in-FORMAT-specifications.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Commas-in-FORMAT-specifications.html</a>\n  </p>\n</div>\n","missing-period-in-format-specifications":"<h1 class=\"subsection\" id=\"Missing-period-in-FORMAT-specifications\">6.1.6 Missing period in <code>FORMAT</code> specifications</h1> <p>To support legacy codes, GNU Fortran allows missing periods in format specifications if and only if <code>-std=legacy</code> is given on the command line. This is considered non-conforming code and is discouraged. </p>\n<pre class=\"smallexample\">REAL :: value\n       READ(*,10) value\n10     FORMAT ('F4')</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Missing-period-in-FORMAT-specifications.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Missing-period-in-FORMAT-specifications.html</a>\n  </p>\n</div>\n","i_002fo-item-lists":"<h1 class=\"subsection\" id=\"I_002fO-item-lists\">6.1.7 I/O item lists</h1> <p> To support legacy codes, GNU Fortran allows the input item list of the <code>READ</code> statement, and the output item lists of the <code>WRITE</code> and <code>PRINT</code> statements, to start with a comma. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/I_002fO-item-lists.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/I_002fO-item-lists.html</a>\n  </p>\n</div>\n","_003ccode_003eq_003c_002fcode_003e-exponent_002dletter":"<h1 class=\"subsection\" id=\"g_t_003ccode_003eQ_003c_002fcode_003e-exponent_002dletter\">6.1.8 <code>Q</code> exponent-letter</h1> <p> GNU Fortran accepts real literal constants with an exponent-letter of <code>Q</code>, for example, <code>1.23Q45</code>. The constant is interpreted as a <code>REAL(16)</code> entity on targets that support this type. If the target does not support <code>REAL(16)</code> but has a <code>REAL(10)</code> type, then the real-literal-constant will be interpreted as a <code>REAL(10)</code> entity. In the absence of <code>REAL(16)</code> and <code>REAL(10)</code>, an error will occur. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/_003ccode_003eQ_003c_002fcode_003e-exponent_002dletter.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/_003ccode_003eQ_003c_002fcode_003e-exponent_002dletter.html</a>\n  </p>\n</div>\n","boz-literal-constants":"<h1 class=\"subsection\" id=\"BOZ-literal-constants\">6.1.9 BOZ literal constants</h1> <p> Besides decimal constants, Fortran also supports binary (<code>b</code>), octal (<code>o</code>) and hexadecimal (<code>z</code>) integer constants. The syntax is: ‘<code>prefix quote digits quote</code>’, were the prefix is either <code>b</code>, <code>o</code> or <code>z</code>, quote is either <code>'</code> or <code>\"</code> and the digits are for binary <code>0</code> or <code>1</code>, for octal between <code>0</code> and <code>7</code>, and for hexadecimal between <code>0</code> and <code>F</code>. (Example: <code>b'01011101'</code>.) </p>\n<p>Up to Fortran 95, BOZ literals were only allowed to initialize integer variables in DATA statements. Since Fortran 2003 BOZ literals are also allowed as argument of <code>REAL</code>, <code>DBLE</code>, <code>INT</code> and <code>CMPLX</code>; the result is the same as if the integer BOZ literal had been converted by <code>TRANSFER</code> to, respectively, <code>real</code>, <code>double precision</code>, <code>integer</code> or <code>complex</code>. As GNU Fortran extension the intrinsic procedures <code>FLOAT</code>, <code>DFLOAT</code>, <code>COMPLEX</code> and <code>DCMPLX</code> are treated alike. </p>\n<p>As an extension, GNU Fortran allows hexadecimal BOZ literal constants to be specified using the <code>X</code> prefix, in addition to the standard <code>Z</code> prefix. The BOZ literal can also be specified by adding a suffix to the string, for example, <code>Z'ABC'</code> and <code>'ABC'Z</code> are equivalent. </p>\n<p>Furthermore, GNU Fortran allows using BOZ literal constants outside DATA statements and the four intrinsic functions allowed by Fortran 2003. In DATA statements, in direct assignments, where the right-hand side only contains a BOZ literal constant, and for old-style initializers of the form <code>integer i /o'0173'/</code>, the constant is transferred as if <code>TRANSFER</code> had been used; for <code>COMPLEX</code> numbers, only the real part is initialized unless <code>CMPLX</code> is used. In all other cases, the BOZ literal constant is converted to an <code>INTEGER</code> value with the largest decimal representation. This value is then converted numerically to the type and kind of the variable in question. (For instance, <code>real :: r = b'0000001' + 1</code> initializes <code>r</code> with <code>2.0</code>.) As different compilers implement the extension differently, one should be careful when doing bitwise initialization of non-integer variables. </p>\n<p>Note that initializing an <code>INTEGER</code> variable with a statement such as <code>DATA i/Z'FFFFFFFF'/</code> will give an integer overflow error rather than the desired result of -1 when <code>i</code> is a 32-bit integer on a system that supports 64-bit integers. The ‘<code>-fno-range-check</code>’ option can be used as a workaround for legacy code that initializes integers in this manner. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/BOZ-literal-constants.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/BOZ-literal-constants.html</a>\n  </p>\n</div>\n","real-array-indices":"<h1 class=\"subsection\" id=\"Real-array-indices\">6.1.10 Real array indices</h1> <p> As an extension, GNU Fortran allows the use of <code>REAL</code> expressions or variables as array indices. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Real-array-indices.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Real-array-indices.html</a>\n  </p>\n</div>\n","unary-operators":"<h1 class=\"subsection\" id=\"Unary-operators\">6.1.11 Unary operators</h1> <p> As an extension, GNU Fortran allows unary plus and unary minus operators to appear as the second operand of binary arithmetic operators without the need for parenthesis. </p>\n<pre class=\"smallexample\">X = Y * -Z</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Unary-operators.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Unary-operators.html</a>\n  </p>\n</div>\n","implicitly-convert-logical-and-integer-values":"<h1 class=\"subsection\" id=\"Implicitly-convert-LOGICAL-and-INTEGER-values\">6.1.12 Implicitly convert <code>LOGICAL</code> and <code>INTEGER</code> values</h1> <p> As an extension for backwards compatibility with other compilers, GNU Fortran allows the implicit conversion of <code>LOGICAL</code> values to <code>INTEGER</code> values and vice versa. When converting from a <code>LOGICAL</code> to an <code>INTEGER</code>, <code>.FALSE.</code> is interpreted as zero, and <code>.TRUE.</code> is interpreted as one. When converting from <code>INTEGER</code> to <code>LOGICAL</code>, the value zero is interpreted as <code>.FALSE.</code> and any nonzero value is interpreted as <code>.TRUE.</code>. </p>\n<pre class=\"smallexample\">LOGICAL :: l\nl = 1</pre> <pre class=\"smallexample\">INTEGER :: i\ni = .TRUE.</pre> <p>However, there is no implicit conversion of <code>INTEGER</code> values in <code>if</code>-statements, nor of <code>LOGICAL</code> or <code>INTEGER</code> values in I/O operations. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Implicitly-convert-LOGICAL-and-INTEGER-values.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Implicitly-convert-LOGICAL-and-INTEGER-values.html</a>\n  </p>\n</div>\n","hollerith-constants-support":"<h1 class=\"subsection\" id=\"Hollerith-constants-support\">6.1.13 Hollerith constants support</h1> <p> GNU Fortran supports Hollerith constants in assignments, function arguments, and <code>DATA</code> and <code>ASSIGN</code> statements. A Hollerith constant is written as a string of characters preceded by an integer constant indicating the character count, and the letter <code>H</code> or <code>h</code>, and stored in bytewise fashion in a numeric (<code>INTEGER</code>, <code>REAL</code>, or <code>complex</code>) or <code>LOGICAL</code> variable. The constant will be padded or truncated to fit the size of the variable in which it is stored. </p>\n<p>Examples of valid uses of Hollerith constants: </p>\n<pre class=\"smallexample\">complex*16 x(2)\ndata x /16Habcdefghijklmnop, 16Hqrstuvwxyz012345/\nx(1) = 16HABCDEFGHIJKLMNOP\ncall foo (4h abc)</pre> <p>Invalid Hollerith constants examples: </p>\n<pre class=\"smallexample\">integer*4 a\na = 8H12345678 ! Valid, but the Hollerith constant will be truncated.\na = 0H         ! At least one character is needed.</pre> <p>In general, Hollerith constants were used to provide a rudimentary facility for handling character strings in early Fortran compilers, prior to the introduction of <code>CHARACTER</code> variables in Fortran 77; in those cases, the standard-compliant equivalent is to convert the program to use proper character strings. On occasion, there may be a case where the intent is specifically to initialize a numeric variable with a given byte sequence. In these cases, the same result can be obtained by using the <code>TRANSFER</code> statement, as in this example. </p>\n<pre class=\"smallexample\">INTEGER(KIND=4) :: a\na = TRANSFER (\"abcd\", a)     ! equivalent to: a = 4Habcd</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Hollerith-constants-support.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Hollerith-constants-support.html</a>\n  </p>\n</div>\n","cray-pointers":"<h1 class=\"subsection\" id=\"Cray-pointers\">6.1.14 Cray pointers</h1> <p> Cray pointers are part of a non-standard extension that provides a C-like pointer in Fortran. This is accomplished through a pair of variables: an integer \"pointer\" that holds a memory address, and a \"pointee\" that is used to dereference the pointer. </p>\n<p>Pointer/pointee pairs are declared in statements of the form: </p>\n<pre class=\"smallexample\">pointer ( &lt;pointer&gt; , &lt;pointee&gt; )</pre> <p>or, </p>\n<pre class=\"smallexample\">pointer ( &lt;pointer1&gt; , &lt;pointee1&gt; ), ( &lt;pointer2&gt; , &lt;pointee2&gt; ), ...</pre> <p>The pointer is an integer that is intended to hold a memory address. The pointee may be an array or scalar. A pointee can be an assumed size array—that is, the last dimension may be left unspecified by using a <code>*</code> in place of a value—but a pointee cannot be an assumed shape array. No space is allocated for the pointee. </p>\n<p>The pointee may have its type declared before or after the pointer statement, and its array specification (if any) may be declared before, during, or after the pointer statement. The pointer may be declared as an integer prior to the pointer statement. However, some machines have default integer sizes that are different than the size of a pointer, and so the following code is not portable: </p>\n<pre class=\"smallexample\">integer ipt\npointer (ipt, iarr)</pre> <p>If a pointer is declared with a kind that is too small, the compiler will issue a warning; the resulting binary will probably not work correctly, because the memory addresses stored in the pointers may be truncated. It is safer to omit the first line of the above example; if explicit declaration of ipt's type is omitted, then the compiler will ensure that ipt is an integer variable large enough to hold a pointer. </p>\n<p>Pointer arithmetic is valid with Cray pointers, but it is not the same as C pointer arithmetic. Cray pointers are just ordinary integers, so the user is responsible for determining how many bytes to add to a pointer in order to increment it. Consider the following example: </p>\n<pre class=\"smallexample\">real target(10)\nreal pointee(10)\npointer (ipt, pointee)\nipt = loc (target)\nipt = ipt + 1</pre> <p>The last statement does not set <code>ipt</code> to the address of <code>target(1)</code>, as it would in C pointer arithmetic. Adding <code>1</code> to <code>ipt</code> just adds one byte to the address stored in <code>ipt</code>. </p>\n<p>Any expression involving the pointee will be translated to use the value stored in the pointer as the base address. </p>\n<p>To get the address of elements, this extension provides an intrinsic function <code>LOC()</code>. The <code>LOC()</code> function is equivalent to the <code>&amp;</code> operator in C, except the address is cast to an integer type: </p>\n<pre class=\"smallexample\">real ar(10)\npointer(ipt, arpte(10))\nreal arpte\nipt = loc(ar)  ! Makes arpte is an alias for ar\narpte(1) = 1.0 ! Sets ar(1) to 1.0</pre> <p>The pointer can also be set by a call to the <code>MALLOC</code> intrinsic (see <a href=\"malloc#MALLOC\">MALLOC</a>). </p>\n<p>Cray pointees often are used to alias an existing variable. For example: </p>\n<pre class=\"smallexample\">integer target(10)\ninteger iarr(10)\npointer (ipt, iarr)\nipt = loc(target)</pre> <p>As long as <code>ipt</code> remains unchanged, <code>iarr</code> is now an alias for <code>target</code>. The optimizer, however, will not detect this aliasing, so it is unsafe to use <code>iarr</code> and <code>target</code> simultaneously. Using a pointee in any way that violates the Fortran aliasing rules or assumptions is illegal. It is the user's responsibility to avoid doing this; the compiler works under the assumption that no such aliasing occurs. </p>\n<p>Cray pointers will work correctly when there is no aliasing (i.e., when they are used to access a dynamically allocated block of memory), and also in any routine where a pointee is used, but any variable with which it shares storage is not used. Code that violates these rules may not run as the user intends. This is not a bug in the optimizer; any code that violates the aliasing rules is illegal. (Note that this is not unique to GNU Fortran; any Fortran compiler that supports Cray pointers will “incorrectly” optimize code with illegal aliasing.) </p>\n<p>There are a number of restrictions on the attributes that can be applied to Cray pointers and pointees. Pointees may not have the <code>ALLOCATABLE</code>, <code>INTENT</code>, <code>OPTIONAL</code>, <code>DUMMY</code>, <code>TARGET</code>, <code>INTRINSIC</code>, or <code>POINTER</code> attributes. Pointers may not have the <code>DIMENSION</code>, <code>POINTER</code>, <code>TARGET</code>, <code>ALLOCATABLE</code>, <code>EXTERNAL</code>, or <code>INTRINSIC</code> attributes, nor may they be function results. Pointees may not occur in more than one pointer statement. A pointee cannot be a pointer. Pointees cannot occur in equivalence, common, or data statements. </p>\n<p>A Cray pointer may also point to a function or a subroutine. For example, the following excerpt is valid: </p>\n<pre class=\"smallexample\">implicit none\nexternal sub\npointer (subptr,subpte)\nexternal subpte\nsubptr = loc(sub)\ncall subpte()\n[...]\nsubroutine sub\n[...]\nend subroutine sub</pre> <p>A pointer may be modified during the course of a program, and this will change the location to which the pointee refers. However, when pointees are passed as arguments, they are treated as ordinary variables in the invoked function. Subsequent changes to the pointer will not change the base address of the array that was passed. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Cray-pointers.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Cray-pointers.html</a>\n  </p>\n</div>\n","convert-specifier":"<h1 class=\"subsection\" id=\"CONVERT-specifier\">6.1.15 <code>CONVERT</code> specifier</h1> <p> GNU Fortran allows the conversion of unformatted data between little- and big-endian representation to facilitate moving of data between different systems. The conversion can be indicated with the <code>CONVERT</code> specifier on the <code>OPEN</code> statement. See <a href=\"gfortran_005fconvert_005funit#GFORTRAN_005fCONVERT_005fUNIT\">GFORTRAN_CONVERT_UNIT</a>, for an alternative way of specifying the data format via an environment variable. </p>\n<p>Valid values for <code>CONVERT</code> are: </p>\n<ul> <li>\n<code>CONVERT='NATIVE'</code> Use the native format. This is the default. </li>\n<li>\n<code>CONVERT='SWAP'</code> Swap between little- and big-endian. </li>\n<li>\n<code>CONVERT='LITTLE_ENDIAN'</code> Use the little-endian representation for unformatted files. </li>\n<li>\n<code>CONVERT='BIG_ENDIAN'</code> Use the big-endian representation for unformatted files. </li>\n</ul> <p>Using the option could look like this: </p>\n<pre class=\"smallexample\">open(file='big.dat',form='unformatted',access='sequential', &amp;\n     convert='big_endian')</pre> <p>The value of the conversion can be queried by using <code>INQUIRE(CONVERT=ch)</code>. The values returned are <code>'BIG_ENDIAN'</code> and <code>'LITTLE_ENDIAN'</code>. </p>\n<p><code>CONVERT</code> works between big- and little-endian for <code>INTEGER</code> values of all supported kinds and for <code>REAL</code> on IEEE systems of kinds 4 and 8. Conversion between different “extended double” types on different architectures such as m68k and x86_64, which GNU Fortran supports as <code>REAL(KIND=10)</code> and <code>REAL(KIND=16)</code>, will probably not work. </p>\n<p><em>Note that the values specified via the GFORTRAN_CONVERT_UNIT environment variable will override the CONVERT specifier in the open statement</em>. This is to give control over data formats to users who do not have the source code of their program available. </p>\n<p>Using anything but the native representation for unformatted data carries a significant speed overhead. If speed in this area matters to you, it is best if you use this only for data that needs to be portable. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/CONVERT-specifier.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/CONVERT-specifier.html</a>\n  </p>\n</div>\n","openmp":"<h1 class=\"subsection\" id=\"OpenMP\">6.1.16 OpenMP</h1> <p> OpenMP (Open Multi-Processing) is an application programming interface (API) that supports multi-platform shared memory multiprocessing programming in C/C++ and Fortran on many architectures, including Unix and Microsoft Windows platforms. It consists of a set of compiler directives, library routines, and environment variables that influence run-time behavior. </p>\n<p>GNU Fortran strives to be compatible to the <a href=\"http://openmp.org/wp/openmp-specifications/\">OpenMP Application Program Interface v4.0</a>. </p>\n<p>To enable the processing of the OpenMP directive <code>!$omp</code> in free-form source code; the <code>c$omp</code>, <code>*$omp</code> and <code>!$omp</code> directives in fixed form; the <code>!$</code> conditional compilation sentinels in free form; and the <code>c$</code>, <code>*$</code> and <code>!$</code> sentinels in fixed form, <code>gfortran</code> needs to be invoked with the <code>-fopenmp</code>. This also arranges for automatic linking of the GNU OpenMP runtime library <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/libgomp/index.html#Top\">libgomp</a>. </p>\n<p>The OpenMP Fortran runtime library routines are provided both in a form of a Fortran 90 module named <code>omp_lib</code> and in a form of a Fortran <code>include</code> file named <code>omp_lib.h</code>. </p>\n<p>An example of a parallelized loop taken from Appendix A.1 of the OpenMP Application Program Interface v2.5: </p>\n<pre class=\"smallexample\">SUBROUTINE A1(N, A, B)\n  INTEGER I, N\n  REAL B(N), A(N)\n!$OMP PARALLEL DO !I is private by default\n  DO I=2,N\n    B(I) = (A(I) + A(I-1)) / 2.0\n  ENDDO\n!$OMP END PARALLEL DO\nEND SUBROUTINE A1</pre> <p>Please note: </p>\n<ul> <li>\n<code>-fopenmp</code> implies <code>-frecursive</code>, i.e., all local arrays will be allocated on the stack. When porting existing code to OpenMP, this may lead to surprising results, especially to segmentation faults if the stacksize is limited. </li>\n<li>On glibc-based systems, OpenMP enabled applications cannot be statically linked due to limitations of the underlying pthreads-implementation. It might be possible to get a working solution if <code>-Wl,--whole-archive -lpthread -Wl,--no-whole-archive</code> is added to the command line. However, this is not supported by <code>gcc</code> and thus not recommended. </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/OpenMP.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/OpenMP.html</a>\n  </p>\n</div>\n","argument-list-functions":"<h1 class=\"subsection\" id=\"Argument-list-functions\">6.1.17 Argument list functions <code>%VAL</code>, <code>%REF</code> and <code>%LOC</code>\n</h1> <p> GNU Fortran supports argument list functions <code>%VAL</code>, <code>%REF</code> and <code>%LOC</code> statements, for backward compatibility with g77. It is recommended that these should be used only for code that is accessing facilities outside of GNU Fortran, such as operating system or windowing facilities. It is best to constrain such uses to isolated portions of a program–portions that deal specifically and exclusively with low-level, system-dependent facilities. Such portions might well provide a portable interface for use by the program as a whole, but are themselves not portable, and should be thoroughly tested each time they are rebuilt using a new compiler or version of a compiler. </p>\n<p><code>%VAL</code> passes a scalar argument by value, <code>%REF</code> passes it by reference and <code>%LOC</code> passes its memory location. Since gfortran already passes scalar arguments by reference, <code>%REF</code> is in effect a do-nothing. <code>%LOC</code> has the same effect as a Fortran pointer. </p>\n<p>An example of passing an argument by value to a C subroutine foo.: </p>\n<pre class=\"smallexample\">C\nC prototype      void foo_ (float x);\nC\n      external foo\n      real*4 x\n      x = 3.14159\n      call foo (%VAL (x))\n      end</pre> <p>For details refer to the g77 manual <a href=\"http://gcc.gnu.org/onlinedocs/gcc-3.4.6/g77/index.html#Top\">http://gcc.gnu.org/onlinedocs/gcc-3.4.6/g77/index.html#Top</a>. </p>\n<p>Also, <code>c_by_val.f</code> and its partner <code>c_by_val.c</code> of the GNU Fortran testsuite are worth a look. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Argument-list-functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Argument-list-functions.html</a>\n  </p>\n</div>\n","extensions-not-implemented-in-gnu-fortran":"<h1 class=\"section\" id=\"Extensions-not-implemented-in-GNU-Fortran\">6.2 Extensions not implemented in GNU Fortran</h1> <p> The long history of the Fortran language, its wide use and broad userbase, the large number of different compiler vendors and the lack of some features crucial to users in the first standards have lead to the existence of a number of important extensions to the language. While some of the most useful or popular extensions are supported by the GNU Fortran compiler, not all existing extensions are supported. This section aims at listing these extensions and offering advice on how best make code that uses them running with the GNU Fortran compiler.     </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"structure-and-record#STRUCTURE-and-RECORD\">STRUCTURE and RECORD</a>  </li>\n<li>\n<a accesskey=\"2\" href=\"encode-and-decode-statements#ENCODE-and-DECODE-statements\">ENCODE and DECODE statements</a> </li>\n<li>\n<a accesskey=\"3\" href=\"variable-format-expressions#Variable-FORMAT-expressions\">Variable FORMAT expressions</a>       </li>\n<li>\n<a accesskey=\"4\" href=\"alternate-complex-function-syntax#Alternate-complex-function-syntax\">Alternate complex function syntax</a> </li>\n<li>\n<a accesskey=\"5\" href=\"volatile-common-blocks#Volatile-COMMON-blocks\">Volatile COMMON blocks</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Extensions-not-implemented-in-GNU-Fortran.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Extensions-not-implemented-in-GNU-Fortran.html</a>\n  </p>\n</div>\n","structure-and-record":"<h1 class=\"subsection\" id=\"STRUCTURE-and-RECORD\">6.2.1 <code>STRUCTURE</code> and <code>RECORD</code>\n</h1> <p> Record structures are a pre-Fortran-90 vendor extension to create user-defined aggregate data types. GNU Fortran does not support record structures, only Fortran 90's “derived types”, which have a different syntax. </p>\n<p>In many cases, record structures can easily be converted to derived types. To convert, replace <code>STRUCTURE /</code><var>structure-name</var><code>/</code> by <code>TYPE</code> <var>type-name</var>. Additionally, replace <code>RECORD /</code><var>structure-name</var><code>/</code> by <code>TYPE(</code><var>type-name</var><code>)</code>. Finally, in the component access, replace the period (<code>.</code>) by the percent sign (<code>%</code>). </p>\n<p>Here is an example of code using the non portable record structure syntax: </p>\n<pre class=\"example\">! Declaring a structure named ``item'' and containing three fields:\n! an integer ID, an description string and a floating-point price.\nSTRUCTURE /item/\n  INTEGER id\n  CHARACTER(LEN=200) description\n  REAL price\nEND STRUCTURE\n\n! Define two variables, an single record of type ``item''\n! named ``pear'', and an array of items named ``store_catalog''\nRECORD /item/ pear, store_catalog(100)\n\n! We can directly access the fields of both variables\npear.id = 92316\npear.description = \"juicy D'Anjou pear\"\npear.price = 0.15\nstore_catalog(7).id = 7831\nstore_catalog(7).description = \"milk bottle\"\nstore_catalog(7).price = 1.2\n\n! We can also manipulate the whole structure\nstore_catalog(12) = pear\nprint *, store_catalog(12)</pre> <p class=\"noindent\">This code can easily be rewritten in the Fortran 90 syntax as following: </p>\n<pre class=\"example\">! ``STRUCTURE /name/ ... END STRUCTURE'' becomes\n! ``TYPE name ... END TYPE''\nTYPE item\n  INTEGER id\n  CHARACTER(LEN=200) description\n  REAL price\nEND TYPE\n\n! ``RECORD /name/ variable'' becomes ``TYPE(name) variable''\nTYPE(item) pear, store_catalog(100)\n\n! Instead of using a dot (.) to access fields of a record, the\n! standard syntax uses a percent sign (%)\npear%id = 92316\npear%description = \"juicy D'Anjou pear\"\npear%price = 0.15\nstore_catalog(7)%id = 7831\nstore_catalog(7)%description = \"milk bottle\"\nstore_catalog(7)%price = 1.2\n\n! Assignments of a whole variable do not change\nstore_catalog(12) = pear\nprint *, store_catalog(12)</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/STRUCTURE-and-RECORD.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/STRUCTURE-and-RECORD.html</a>\n  </p>\n</div>\n","encode-and-decode-statements":"<h1 class=\"subsection\" id=\"ENCODE-and-DECODE-statements\">6.2.2 <code>ENCODE</code> and <code>DECODE</code> statements</h1> <p> GNU Fortran does not support the <code>ENCODE</code> and <code>DECODE</code> statements. These statements are best replaced by <code>READ</code> and <code>WRITE</code> statements involving internal files (<code>CHARACTER</code> variables and arrays), which have been part of the Fortran standard since Fortran 77. For example, replace a code fragment like </p>\n<pre class=\"smallexample\">INTEGER*1 LINE(80)\n      REAL A, B, C\nc     ... Code that sets LINE\n      DECODE (80, 9000, LINE) A, B, C\n 9000 FORMAT (1X, 3(F10.5))</pre> <p class=\"noindent\">with the following: </p>\n<pre class=\"smallexample\">CHARACTER(LEN=80) LINE\n      REAL A, B, C\nc     ... Code that sets LINE\n      READ (UNIT=LINE, FMT=9000) A, B, C\n 9000 FORMAT (1X, 3(F10.5))</pre> <p>Similarly, replace a code fragment like </p>\n<pre class=\"smallexample\">INTEGER*1 LINE(80)\n      REAL A, B, C\nc     ... Code that sets A, B and C\n      ENCODE (80, 9000, LINE) A, B, C\n 9000 FORMAT (1X, 'OUTPUT IS ', 3(F10.5))</pre> <p class=\"noindent\">with the following: </p>\n<pre class=\"smallexample\">CHARACTER(LEN=80) LINE\n      REAL A, B, C\nc     ... Code that sets A, B and C\n      WRITE (UNIT=LINE, FMT=9000) A, B, C\n 9000 FORMAT (1X, 'OUTPUT IS ', 3(F10.5))</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ENCODE-and-DECODE-statements.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ENCODE-and-DECODE-statements.html</a>\n  </p>\n</div>\n","variable-format-expressions":"<h1 class=\"subsection\" id=\"Variable-FORMAT-expressions\">6.2.3 Variable <code>FORMAT</code> expressions</h1> <p> A variable <code>FORMAT</code> expression is format statement which includes angle brackets enclosing a Fortran expression: <code>FORMAT(I&lt;N&gt;)</code>. GNU Fortran does not support this legacy extension. The effect of variable format expressions can be reproduced by using the more powerful (and standard) combination of internal output and string formats. For example, replace a code fragment like this: </p>\n<pre class=\"smallexample\">WRITE(6,20) INT1\n20   FORMAT(I&lt;N+1&gt;)</pre> <p class=\"noindent\">with the following: </p>\n<pre class=\"smallexample\">c     Variable declaration\n      CHARACTER(LEN=20) FMT\nc\nc     Other code here...\nc\n      WRITE(FMT,'(\"(I\", I0, \")\")') N+1\n      WRITE(6,FMT) INT1</pre> <p class=\"noindent\">or with: </p>\n<pre class=\"smallexample\">c     Variable declaration\n      CHARACTER(LEN=20) FMT\nc\nc     Other code here...\nc\n      WRITE(FMT,*) N+1\n      WRITE(6,\"(I\" // ADJUSTL(FMT) // \")\") INT1</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Variable-FORMAT-expressions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Variable-FORMAT-expressions.html</a>\n  </p>\n</div>\n","alternate-complex-function-syntax":"<h1 class=\"subsection\" id=\"Alternate-complex-function-syntax\">6.2.4 Alternate complex function syntax</h1> <p> Some Fortran compilers, including <code>g77</code>, let the user declare complex functions with the syntax <code>COMPLEX FUNCTION name*16()</code>, as well as <code>COMPLEX*16 FUNCTION name()</code>. Both are non-standard, legacy extensions. <code>gfortran</code> accepts the latter form, which is more common, but not the former. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Alternate-complex-function-syntax.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Alternate-complex-function-syntax.html</a>\n  </p>\n</div>\n","volatile-common-blocks":"<h1 class=\"subsection\" id=\"Volatile-COMMON-blocks\">6.2.5 Volatile <code>COMMON</code> blocks</h1> <p> Some Fortran compilers, including <code>g77</code>, let the user declare <code>COMMON</code> with the <code>VOLATILE</code> attribute. This is invalid standard Fortran syntax and is not supported by <code>gfortran</code>. Note that <code>gfortran</code> accepts <code>VOLATILE</code> variables in <code>COMMON</code> blocks since revision 4.3.    </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Volatile-COMMON-blocks.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Volatile-COMMON-blocks.html</a>\n  </p>\n</div>\n","mixed_002dlanguage-programming":"<h1 class=\"chapter\" id=\"Mixed_002dLanguage-Programming\">7 Mixed-Language Programming</h1> \n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"interoperability-with-c#Interoperability-with-C\">Interoperability with C</a> </li>\n<li>\n<a accesskey=\"2\" href=\"gnu-fortran-compiler-directives#GNU-Fortran-Compiler-Directives\">GNU Fortran Compiler Directives</a> </li>\n<li>\n<a accesskey=\"3\" href=\"non_002dfortran-main-program#Non_002dFortran-Main-Program\">Non-Fortran Main Program</a> </li>\n<li>\n<a accesskey=\"4\" href=\"naming-and-argument_002dpassing-conventions#Naming-and-argument_002dpassing-conventions\">Naming and argument-passing conventions</a> </li>\n</ul> <p>This chapter is about mixed-language interoperability, but also applies if one links Fortran code compiled by different compilers. In most cases, use of the C Binding features of the Fortran 2003 standard is sufficient, and their use is highly recommended. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Mixed_002dLanguage-Programming.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Mixed_002dLanguage-Programming.html</a>\n  </p>\n</div>\n","interoperability-with-c":"<h1 class=\"section\" id=\"Interoperability-with-C\">7.1 Interoperability with C</h1> <ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"intrinsic-types#Intrinsic-Types\">Intrinsic Types</a> </li>\n<li>\n<a accesskey=\"2\" href=\"derived-types-and-struct#Derived-Types-and-struct\">Derived Types and struct</a> </li>\n<li>\n<a accesskey=\"3\" href=\"interoperable-global-variables#Interoperable-Global-Variables\">Interoperable Global Variables</a> </li>\n<li>\n<a accesskey=\"4\" href=\"interoperable-subroutines-and-functions#Interoperable-Subroutines-and-Functions\">Interoperable Subroutines and Functions</a> </li>\n<li>\n<a accesskey=\"5\" href=\"working-with-pointers#Working-with-Pointers\">Working with Pointers</a> </li>\n<li>\n<a accesskey=\"6\" href=\"further-interoperability-of-fortran-with-c#Further-Interoperability-of-Fortran-with-C\">Further Interoperability of Fortran with C</a> </li>\n</ul> <p>Since Fortran 2003 (ISO/IEC 1539-1:2004(E)) there is a standardized way to generate procedure and derived-type declarations and global variables which are interoperable with C (ISO/IEC 9899:1999). The <code>bind(C)</code> attribute has been added to inform the compiler that a symbol shall be interoperable with C; also, some constraints are added. Note, however, that not all C features have a Fortran equivalent or vice versa. For instance, neither C's unsigned integers nor C's functions with variable number of arguments have an equivalent in Fortran. </p>\n<p>Note that array dimensions are reversely ordered in C and that arrays in C always start with index 0 while in Fortran they start by default with 1. Thus, an array declaration <code>A(n,m)</code> in Fortran matches <code>A[m][n]</code> in C and accessing the element <code>A(i,j)</code> matches <code>A[j-1][i-1]</code>. The element following <code>A(i,j)</code> (C: <code>A[j-1][i-1]</code>; assuming i &lt; n) in memory is <code>A(i+1,j)</code> (C: <code>A[j-1][i]</code>). </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Interoperability-with-C.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Interoperability-with-C.html</a>\n  </p>\n</div>\n","intrinsic-types":"<h1 class=\"subsection\" id=\"Intrinsic-Types\">7.1.1 Intrinsic Types</h1> <p>In order to ensure that exactly the same variable type and kind is used in C and Fortran, the named constants shall be used which are defined in the <code>ISO_C_BINDING</code> intrinsic module. That module contains named constants for kind parameters and character named constants for the escape sequences in C. For a list of the constants, see <a href=\"iso_005fc_005fbinding#ISO_005fC_005fBINDING\">ISO_C_BINDING</a>. </p>\n<p>For logical types, please note that the Fortran standard only guarantees interoperability between C99's <code>_Bool</code> and Fortran's <code>C_Bool</code>-kind logicals and C99 defines that <code>true</code> has the value 1 and <code>false</code> the value 0. Using any other integer value with GNU Fortran's <code>LOGICAL</code> (with any kind parameter) gives an undefined result. (Passing other integer values than 0 and 1 to GCC's <code>_Bool</code> is also undefined, unless the integer is explicitly or implicitly casted to <code>_Bool</code>.) </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Intrinsic-Types.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Intrinsic-Types.html</a>\n  </p>\n</div>\n","derived-types-and-struct":"<h1 class=\"subsection\" id=\"Derived-Types-and-struct\">7.1.2 Derived Types and struct</h1> <p>For compatibility of derived types with <code>struct</code>, one needs to use the <code>BIND(C)</code> attribute in the type declaration. For instance, the following type declaration </p>\n<pre class=\"smallexample\">USE ISO_C_BINDING\nTYPE, BIND(C) :: myType\n  INTEGER(C_INT) :: i1, i2\n  INTEGER(C_SIGNED_CHAR) :: i3\n  REAL(C_DOUBLE) :: d1\n  COMPLEX(C_FLOAT_COMPLEX) :: c1\n  CHARACTER(KIND=C_CHAR) :: str(5)\nEND TYPE</pre> <p>matches the following <code>struct</code> declaration in C </p>\n<pre class=\"smallexample\">struct {\n  int i1, i2;\n  /* Note: \"char\" might be signed or unsigned.  */\n  signed char i3;\n  double d1;\n  float _Complex c1;\n  char str[5];\n} myType;</pre> <p>Derived types with the C binding attribute shall not have the <code>sequence</code> attribute, type parameters, the <code>extends</code> attribute, nor type-bound procedures. Every component must be of interoperable type and kind and may not have the <code>pointer</code> or <code>allocatable</code> attribute. The names of the components are irrelevant for interoperability. </p>\n<p>As there exist no direct Fortran equivalents, neither unions nor structs with bit field or variable-length array members are interoperable. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Derived-Types-and-struct.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Derived-Types-and-struct.html</a>\n  </p>\n</div>\n","interoperable-global-variables":"<h1 class=\"subsection\" id=\"Interoperable-Global-Variables\">7.1.3 Interoperable Global Variables</h1> <p>Variables can be made accessible from C using the C binding attribute, optionally together with specifying a binding name. Those variables have to be declared in the declaration part of a <code>MODULE</code>, be of interoperable type, and have neither the <code>pointer</code> nor the <code>allocatable</code> attribute. </p>\n<pre class=\"smallexample\">MODULE m\n  USE myType_module\n  USE ISO_C_BINDING\n  integer(C_INT), bind(C, name=\"_MyProject_flags\") :: global_flag\n  type(myType), bind(C) :: tp\nEND MODULE</pre> <p>Here, <code>_MyProject_flags</code> is the case-sensitive name of the variable as seen from C programs while <code>global_flag</code> is the case-insensitive name as seen from Fortran. If no binding name is specified, as for <var>tp</var>, the C binding name is the (lowercase) Fortran binding name. If a binding name is specified, only a single variable may be after the double colon. Note of warning: You cannot use a global variable to access <var>errno</var> of the C library as the C standard allows it to be a macro. Use the <code>IERRNO</code> intrinsic (GNU extension) instead. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Interoperable-Global-Variables.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Interoperable-Global-Variables.html</a>\n  </p>\n</div>\n","interoperable-subroutines-and-functions":"<h1 class=\"subsection\" id=\"Interoperable-Subroutines-and-Functions\">7.1.4 Interoperable Subroutines and Functions</h1> <p>Subroutines and functions have to have the <code>BIND(C)</code> attribute to be compatible with C. The dummy argument declaration is relatively straightforward. However, one needs to be careful because C uses call-by-value by default while Fortran behaves usually similar to call-by-reference. Furthermore, strings and pointers are handled differently. Note that in Fortran 2003 and 2008 only explicit size and assumed-size arrays are supported but not assumed-shape or deferred-shape (i.e. allocatable or pointer) arrays. However, those are allowed since the Technical Specification 29113, see <a href=\"further-interoperability-of-fortran-with-c#Further-Interoperability-of-Fortran-with-C\">Further Interoperability of Fortran with C</a> </p>\n<p>To pass a variable by value, use the <code>VALUE</code> attribute. Thus, the following C prototype </p>\n<pre class=\"smallexample\"><code>int func(int i, int *j)</code></pre> <p>matches the Fortran declaration </p>\n<pre class=\"smallexample\">integer(c_int) function func(i,j)\n  use iso_c_binding, only: c_int\n  integer(c_int), VALUE :: i\n  integer(c_int) :: j</pre> <p>Note that pointer arguments also frequently need the <code>VALUE</code> attribute, see <a href=\"working-with-pointers#Working-with-Pointers\">Working with Pointers</a>. </p>\n<p>Strings are handled quite differently in C and Fortran. In C a string is a <code>NUL</code>-terminated array of characters while in Fortran each string has a length associated with it and is thus not terminated (by e.g. <code>NUL</code>). For example, if one wants to use the following C function, </p>\n<pre class=\"smallexample\">#include &lt;stdio.h&gt;\nvoid print_C(char *string) /* equivalent: char string[]  */\n{\n   printf(\"%s\\n\", string);\n}</pre> <p>to print “Hello World” from Fortran, one can call it using </p>\n<pre class=\"smallexample\">use iso_c_binding, only: C_CHAR, C_NULL_CHAR\ninterface\n  subroutine print_c(string) bind(C, name=\"print_C\")\n    use iso_c_binding, only: c_char\n    character(kind=c_char) :: string(*)\n  end subroutine print_c\nend interface\ncall print_c(C_CHAR_\"Hello World\"//C_NULL_CHAR)</pre> <p>As the example shows, one needs to ensure that the string is <code>NUL</code> terminated. Additionally, the dummy argument <var>string</var> of <code>print_C</code> is a length-one assumed-size array; using <code>character(len=*)</code> is not allowed. The example above uses <code>c_char_\"Hello World\"</code> to ensure the string literal has the right type; typically the default character kind and <code>c_char</code> are the same and thus <code>\"Hello World\"</code> is equivalent. However, the standard does not guarantee this. </p>\n<p>The use of strings is now further illustrated using the C library function <code>strncpy</code>, whose prototype is </p>\n<pre class=\"smallexample\">char *strncpy(char *restrict s1, const char *restrict s2, size_t n);</pre> <p>The function <code>strncpy</code> copies at most <var>n</var> characters from string <var>s2</var> to <var>s1</var> and returns <var>s1</var>. In the following example, we ignore the return value: </p>\n<pre class=\"smallexample\">use iso_c_binding\nimplicit none\ncharacter(len=30) :: str,str2\ninterface\n  ! Ignore the return value of strncpy -&gt; subroutine\n  ! \"restrict\" is always assumed if we do not pass a pointer\n  subroutine strncpy(dest, src, n) bind(C)\n    import\n    character(kind=c_char),  intent(out) :: dest(*)\n    character(kind=c_char),  intent(in)  :: src(*)\n    integer(c_size_t), value, intent(in) :: n\n  end subroutine strncpy\nend interface\nstr = repeat('X',30) ! Initialize whole string with 'X'\ncall strncpy(str, c_char_\"Hello World\"//C_NULL_CHAR, &amp;\n             len(c_char_\"Hello World\",kind=c_size_t))\nprint '(a)', str ! prints: \"Hello WorldXXXXXXXXXXXXXXXXXXX\"\nend</pre> <p>The intrinsic procedures are described in <a href=\"intrinsic-procedures#Intrinsic-Procedures\">Intrinsic Procedures</a>. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Interoperable-Subroutines-and-Functions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Interoperable-Subroutines-and-Functions.html</a>\n  </p>\n</div>\n","working-with-pointers":"<h1 class=\"subsection\" id=\"Working-with-Pointers\">7.1.5 Working with Pointers</h1> <p>C pointers are represented in Fortran via the special opaque derived type <code>type(c_ptr)</code> (with private components). Thus one needs to use intrinsic conversion procedures to convert from or to C pointers. </p>\n<p>For some applications, using an assumed type (<code>TYPE(*)</code>) can be an alternative to a C pointer; see <a href=\"further-interoperability-of-fortran-with-c#Further-Interoperability-of-Fortran-with-C\">Further Interoperability of Fortran with C</a>. </p>\n<p>For example, </p>\n<pre class=\"smallexample\">use iso_c_binding\ntype(c_ptr) :: cptr1, cptr2\ninteger, target :: array(7), scalar\ninteger, pointer :: pa(:), ps\ncptr1 = c_loc(array(1)) ! The programmer needs to ensure that the\n                        ! array is contiguous if required by the C\n                        ! procedure\ncptr2 = c_loc(scalar)\ncall c_f_pointer(cptr2, ps)\ncall c_f_pointer(cptr2, pa, shape=[7])</pre> <p>When converting C to Fortran arrays, the one-dimensional <code>SHAPE</code> argument has to be passed. </p>\n<p>If a pointer is a dummy-argument of an interoperable procedure, it usually has to be declared using the <code>VALUE</code> attribute. <code>void*</code> matches <code>TYPE(C_PTR), VALUE</code>, while <code>TYPE(C_PTR)</code> alone matches <code>void**</code>. </p>\n<p>Procedure pointers are handled analogously to pointers; the C type is <code>TYPE(C_FUNPTR)</code> and the intrinsic conversion procedures are <code>C_F_PROCPOINTER</code> and <code>C_FUNLOC</code>. </p>\n<p>Let us consider two examples of actually passing a procedure pointer from C to Fortran and vice versa. Note that these examples are also very similar to passing ordinary pointers between both languages. First, consider this code in C: </p>\n<pre class=\"smallexample\">/* Procedure implemented in Fortran.  */\nvoid get_values (void (*)(double));\n\n/* Call-back routine we want called from Fortran.  */\nvoid\nprint_it (double x)\n{\n  printf (\"Number is %f.\\n\", x);\n}\n\n/* Call Fortran routine and pass call-back to it.  */\nvoid\nfoobar ()\n{\n  get_values (&amp;print_it);\n}</pre> <p>A matching implementation for <code>get_values</code> in Fortran, that correctly receives the procedure pointer from C and is able to call it, is given in the following <code>MODULE</code>: </p>\n<pre class=\"smallexample\">MODULE m\n  IMPLICIT NONE\n\n  ! Define interface of call-back routine.\n  ABSTRACT INTERFACE\n    SUBROUTINE callback (x)\n      USE, INTRINSIC :: ISO_C_BINDING\n      REAL(KIND=C_DOUBLE), INTENT(IN), VALUE :: x\n    END SUBROUTINE callback\n  END INTERFACE\n\nCONTAINS\n\n  ! Define C-bound procedure.\n  SUBROUTINE get_values (cproc) BIND(C)\n    USE, INTRINSIC :: ISO_C_BINDING\n    TYPE(C_FUNPTR), INTENT(IN), VALUE :: cproc\n\n    PROCEDURE(callback), POINTER :: proc\n\n    ! Convert C to Fortran procedure pointer.\n    CALL C_F_PROCPOINTER (cproc, proc)\n\n    ! Call it.\n    CALL proc (1.0_C_DOUBLE)\n    CALL proc (-42.0_C_DOUBLE)\n    CALL proc (18.12_C_DOUBLE)\n  END SUBROUTINE get_values\n\nEND MODULE m</pre> <p>Next, we want to call a C routine that expects a procedure pointer argument and pass it a Fortran procedure (which clearly must be interoperable!). Again, the C function may be: </p>\n<pre class=\"smallexample\">int\ncall_it (int (*func)(int), int arg)\n{\n  return func (arg);\n}</pre> <p>It can be used as in the following Fortran code: </p>\n<pre class=\"smallexample\">MODULE m\n  USE, INTRINSIC :: ISO_C_BINDING\n  IMPLICIT NONE\n\n  ! Define interface of C function.\n  INTERFACE\n    INTEGER(KIND=C_INT) FUNCTION call_it (func, arg) BIND(C)\n      USE, INTRINSIC :: ISO_C_BINDING\n      TYPE(C_FUNPTR), INTENT(IN), VALUE :: func\n      INTEGER(KIND=C_INT), INTENT(IN), VALUE :: arg\n    END FUNCTION call_it\n  END INTERFACE\n\nCONTAINS\n\n  ! Define procedure passed to C function.\n  ! It must be interoperable!\n  INTEGER(KIND=C_INT) FUNCTION double_it (arg) BIND(C)\n    INTEGER(KIND=C_INT), INTENT(IN), VALUE :: arg\n    double_it = arg + arg\n  END FUNCTION double_it\n\n  ! Call C function.\n  SUBROUTINE foobar ()\n    TYPE(C_FUNPTR) :: cproc\n    INTEGER(KIND=C_INT) :: i\n\n    ! Get C procedure pointer.\n    cproc = C_FUNLOC (double_it)\n\n    ! Use it.\n    DO i = 1_C_INT, 10_C_INT\n      PRINT *, call_it (cproc, i)\n    END DO\n  END SUBROUTINE foobar\n\nEND MODULE m</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Working-with-Pointers.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Working-with-Pointers.html</a>\n  </p>\n</div>\n","further-interoperability-of-fortran-with-c":"<h1 class=\"subsection\" id=\"Further-Interoperability-of-Fortran-with-C\">7.1.6 Further Interoperability of Fortran with C</h1> <p>The Technical Specification ISO/IEC TS 29113:2012 on further interoperability of Fortran with C extends the interoperability support of Fortran 2003 and Fortran 2008. Besides removing some restrictions and constraints, it adds assumed-type (<code>TYPE(*)</code>) and assumed-rank (<code>dimension</code>) variables and allows for interoperability of assumed-shape, assumed-rank and deferred-shape arrays, including allocatables and pointers. </p>\n<p>Note: Currently, GNU Fortran does not support the array descriptor (dope vector) as specified in the Technical Specification, but uses an array descriptor with different fields. The Chasm Language Interoperability Tools, <a href=\"http://chasm-interop.sourceforge.net/\">http://chasm-interop.sourceforge.net/</a>, provide an interface to GNU Fortran's array descriptor. </p>\n<p>The Technical Specification adds the following new features, which are supported by GNU Fortran: </p>\n<ul> <li>The <code>ASYNCHRONOUS</code> attribute has been clarified and extended to allow its use with asynchronous communication in user-provided libraries such as in implementations of the Message Passing Interface specification. </li>\n<li>Many constraints have been relaxed, in particular for the <code>C_LOC</code> and <code>C_F_POINTER</code> intrinsics. </li>\n<li>The <code>OPTIONAL</code> attribute is now allowed for dummy arguments; an absent argument matches a <code>NULL</code> pointer. </li>\n<li>Assumed types (<code>TYPE(*)</code>) have been added, which may only be used for dummy arguments. They are unlimited polymorphic but contrary to <code>CLASS(*)</code> they do not contain any type information, similar to C's <code>void *</code> pointers. Expressions of any type and kind can be passed; thus, it can be used as replacement for <code>TYPE(C_PTR)</code>, avoiding the use of <code>C_LOC</code> in the caller. <p>Note, however, that <code>TYPE(*)</code> only accepts scalar arguments, unless the <code>DIMENSION</code> is explicitly specified. As <code>DIMENSION(*)</code> only supports array (including array elements) but no scalars, it is not a full replacement for <code>C_LOC</code>. On the other hand, assumed-type assumed-rank dummy arguments (<code>TYPE(*), DIMENSION(..)</code>) allow for both scalars and arrays, but require special code on the callee side to handle the array descriptor. </p>\n</li>\n<li>Assumed-rank arrays (<code>DIMENSION(..)</code>) as dummy argument allow that scalars and arrays of any rank can be passed as actual argument. As the Technical Specification does not provide for direct means to operate with them, they have to be used either from the C side or be converted using <code>C_LOC</code> and <code>C_F_POINTER</code> to scalars or arrays of a specific rank. The rank can be determined using the <code>RANK</code> intrinisic. </li>\n</ul> <p>Currently unimplemented: </p>\n<ul> <li>GNU Fortran always uses an array descriptor, which does not match the one of the Technical Specification. The <code>ISO_Fortran_binding.h</code> header file and the C functions it specifies are not available. </li>\n<li>Using assumed-shape, assumed-rank and deferred-shape arrays in <code>BIND(C)</code> procedures is not fully supported. In particular, C interoperable strings of other length than one are not supported as this requires the new array descriptor. </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Further-Interoperability-of-Fortran-with-C.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Further-Interoperability-of-Fortran-with-C.html</a>\n  </p>\n</div>\n","gnu-fortran-compiler-directives":"<h1 class=\"section\" id=\"GNU-Fortran-Compiler-Directives\">7.2 GNU Fortran Compiler Directives</h1> <p>The Fortran standard describes how a conforming program shall behave; however, the exact implementation is not standardized. In order to allow the user to choose specific implementation details, compiler directives can be used to set attributes of variables and procedures which are not part of the standard. Whether a given attribute is supported and its exact effects depend on both the operating system and on the processor; see <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/index.html#Top\">C Extensions</a> for details. </p>\n<p>For procedures and procedure pointers, the following attributes can be used to change the calling convention: </p>\n<ul> <li>\n<code>CDECL</code> – standard C calling convention </li>\n<li>\n<code>STDCALL</code> – convention where the called procedure pops the stack </li>\n<li>\n<code>FASTCALL</code> – part of the arguments are passed via registers instead using the stack </li>\n</ul> <p>Besides changing the calling convention, the attributes also influence the decoration of the symbol name, e.g., by a leading underscore or by a trailing at-sign followed by the number of bytes on the stack. When assigning a procedure to a procedure pointer, both should use the same calling convention. </p>\n<p>On some systems, procedures and global variables (module variables and <code>COMMON</code> blocks) need special handling to be accessible when they are in a shared library. The following attributes are available: </p>\n<ul> <li>\n<code>DLLEXPORT</code> – provide a global pointer to a pointer in the DLL </li>\n<li>\n<code>DLLIMPORT</code> – reference the function or variable using a global pointer </li>\n</ul> <p>For dummy arguments, the <code>NO_ARG_CHECK</code> attribute can be used; in other compilers, it is also known as <code>IGNORE_TKR</code>. For dummy arguments with this attribute actual arguments of any type and kind (similar to <code>TYPE(*)</code>), scalars and arrays of any rank (no equivalent in Fortran standard) are accepted. As with <code>TYPE(*)</code>, the argument is unlimited polymorphic and no type information is available. Additionally, the argument may only be passed to dummy arguments with the <code>NO_ARG_CHECK</code> attribute and as argument to the <code>PRESENT</code> intrinsic function and to <code>C_LOC</code> of the <code>ISO_C_BINDING</code> module. </p>\n<p>Variables with <code>NO_ARG_CHECK</code> attribute shall be of assumed-type (<code>TYPE(*)</code>; recommended) or of type <code>INTEGER</code>, <code>LOGICAL</code>, <code>REAL</code> or <code>COMPLEX</code>. They shall not have the <code>ALLOCATE</code>, <code>CODIMENSION</code>, <code>INTENT(OUT)</code>, <code>POINTER</code> or <code>VALUE</code> attribute; furthermore, they shall be either scalar or of assumed-size (<code>dimension(*)</code>). As <code>TYPE(*)</code>, the <code>NO_ARG_CHECK</code> attribute requires an explicit interface. </p>\n<ul> <li>\n<code>NO_ARG_CHECK</code> – disable the type, kind and rank checking </li>\n</ul> <p>The attributes are specified using the syntax </p>\n<p><code>!GCC$ ATTRIBUTES</code> <var>attribute-list</var> <code>::</code> <var>variable-list</var> </p>\n<p>where in free-form source code only whitespace is allowed before <code>!GCC$</code> and in fixed-form source code <code>!GCC$</code>, <code>cGCC$</code> or <code>*GCC$</code> shall start in the first column. </p>\n<p>For procedures, the compiler directives shall be placed into the body of the procedure; for variables and procedure pointers, they shall be in the same declaration part as the variable or procedure pointer. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GNU-Fortran-Compiler-Directives.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GNU-Fortran-Compiler-Directives.html</a>\n  </p>\n</div>\n","non_002dfortran-main-program":"<h1 class=\"section\" id=\"Non_002dFortran-Main-Program\">7.3 Non-Fortran Main Program</h1> <ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"_005fgfortran_005fset_005fargs#g_t_005fgfortran_005fset_005fargs\">_gfortran_set_args</a>: Save command-line arguments </li>\n<li>\n<a accesskey=\"2\" href=\"_005fgfortran_005fset_005foptions#g_t_005fgfortran_005fset_005foptions\">_gfortran_set_options</a>: Set library option flags </li>\n<li>\n<a accesskey=\"3\" href=\"_005fgfortran_005fset_005fconvert#g_t_005fgfortran_005fset_005fconvert\">_gfortran_set_convert</a>: Set endian conversion </li>\n<li>\n<a accesskey=\"4\" href=\"_005fgfortran_005fset_005frecord_005fmarker#g_t_005fgfortran_005fset_005frecord_005fmarker\">_gfortran_set_record_marker</a>: Set length of record markers </li>\n<li>\n<a accesskey=\"5\" href=\"_005fgfortran_005fset_005ffpe#g_t_005fgfortran_005fset_005ffpe\">_gfortran_set_fpe</a>: Set when a Floating Point Exception should be raised </li>\n<li>\n<a accesskey=\"6\" href=\"_005fgfortran_005fset_005fmax_005fsubrecord_005flength#g_t_005fgfortran_005fset_005fmax_005fsubrecord_005flength\">_gfortran_set_max_subrecord_length</a>: Set subrecord length </li>\n</ul> <p>Even if you are doing mixed-language programming, it is very likely that you do not need to know or use the information in this section. Since it is about the internal structure of GNU Fortran, it may also change in GCC minor releases. </p>\n<p>When you compile a <code>PROGRAM</code> with GNU Fortran, a function with the name <code>main</code> (in the symbol table of the object file) is generated, which initializes the libgfortran library and then calls the actual program which uses the name <code>MAIN__</code>, for historic reasons. If you link GNU Fortran compiled procedures to, e.g., a C or C++ program or to a Fortran program compiled by a different compiler, the libgfortran library is not initialized and thus a few intrinsic procedures do not work properly, e.g. those for obtaining the command-line arguments. </p>\n<p>Therefore, if your <code>PROGRAM</code> is not compiled with GNU Fortran and the GNU Fortran compiled procedures require intrinsics relying on the library initialization, you need to initialize the library yourself. Using the default options, gfortran calls <code>_gfortran_set_args</code> and <code>_gfortran_set_options</code>. The initialization of the former is needed if the called procedures access the command line (and for backtracing); the latter sets some flags based on the standard chosen or to enable backtracing. In typical programs, it is not necessary to call any initialization function. </p>\n<p>If your <code>PROGRAM</code> is compiled with GNU Fortran, you shall not call any of the following functions. The libgfortran initialization functions are shown in C syntax but using C bindings they are also accessible from Fortran. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Non_002dFortran-Main-Program.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Non_002dFortran-Main-Program.html</a>\n  </p>\n</div>\n","_005fgfortran_005fset_005fargs":"<h1 class=\"subsection\" id=\"g_t_005fgfortran_005fset_005fargs\">7.3.1 <code>_gfortran_set_args</code> — Save command-line arguments</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>_gfortran_set_args</code> saves the command-line arguments; this initialization is required if any of the command-line intrinsics is called. Additionally, it shall be called if backtracing is enabled (see <code>_gfortran_set_options</code>). </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>void _gfortran_set_args (int argc, char *argv[])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>argc</var> </td>\n<td valign=\"top\" width=\"70%\">number of command line argument strings </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>argv</var> </td>\n<td valign=\"top\" width=\"70%\">the command-line argument strings; argv[0] is the pathname of the executable itself. </td>\n</tr>\n</table> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">int main (int argc, char *argv[])\n{\n  /* Initialize libgfortran.  */\n  _gfortran_set_args (argc, argv);\n  return 0;\n}</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/_005fgfortran_005fset_005fargs.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/_005fgfortran_005fset_005fargs.html</a>\n  </p>\n</div>\n","_005fgfortran_005fset_005foptions":"<h1 class=\"subsection\" id=\"g_t_005fgfortran_005fset_005foptions\">7.3.2 <code>_gfortran_set_options</code> — Set library option flags</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>_gfortran_set_options</code> sets several flags related to the Fortran standard to be used, whether backtracing should be enabled and whether range checks should be performed. The syntax allows for upward compatibility since the number of passed flags is specified; for non-passed flags, the default value is used. See also see <a href=\"code-gen-options#Code-Gen-Options\">Code Gen Options</a>. Please note that not all flags are actually used. </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>void _gfortran_set_options (int num, int options[])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>num</var> </td>\n<td valign=\"top\" width=\"70%\">number of options passed </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>argv</var> </td>\n<td valign=\"top\" width=\"70%\">The list of flag values </td>\n</tr>\n</table> </dd>\n<dt>option flag list:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>option</var>[0] </td>\n<td valign=\"top\" width=\"70%\">Allowed standard; can give run-time errors if e.g. an input-output edit descriptor is invalid in a given standard. Possible values are (bitwise or-ed) <code>GFC_STD_F77</code> (1), <code>GFC_STD_F95_OBS</code> (2), <code>GFC_STD_F95_DEL</code> (4), <code>GFC_STD_F95</code> (8), <code>GFC_STD_F2003</code> (16), <code>GFC_STD_GNU</code> (32), <code>GFC_STD_LEGACY</code> (64), <code>GFC_STD_F2008</code> (128), <code>GFC_STD_F2008_OBS</code> (256) and GFC_STD_F2008_TS (512). Default: <code>GFC_STD_F95_OBS | GFC_STD_F95_DEL | GFC_STD_F95 | GFC_STD_F2003\n| GFC_STD_F2008 | GFC_STD_F2008_TS | GFC_STD_F2008_OBS | GFC_STD_F77\n| GFC_STD_GNU | GFC_STD_LEGACY</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>option</var>[1] </td>\n<td valign=\"top\" width=\"70%\">Standard-warning flag; prints a warning to standard error. Default: <code>GFC_STD_F95_DEL | GFC_STD_LEGACY</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>option</var>[2] </td>\n<td valign=\"top\" width=\"70%\">If non zero, enable pedantic checking. Default: off. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>option</var>[3] </td>\n<td valign=\"top\" width=\"70%\">Unused. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>option</var>[4] </td>\n<td valign=\"top\" width=\"70%\">If non zero, enable backtracing on run-time errors. Default: off. (Default in the compiler: on.) Note: Installs a signal handler and requires command-line initialization using <code>_gfortran_set_args</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>option</var>[5] </td>\n<td valign=\"top\" width=\"70%\">If non zero, supports signed zeros. Default: enabled. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>option</var>[6] </td>\n<td valign=\"top\" width=\"70%\">Enables run-time checking. Possible values are (bitwise or-ed): GFC_RTCHECK_BOUNDS (1), GFC_RTCHECK_ARRAY_TEMPS (2), GFC_RTCHECK_RECURSION (4), GFC_RTCHECK_DO (16), GFC_RTCHECK_POINTER (32). Default: disabled. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>option</var>[7] </td>\n<td valign=\"top\" width=\"70%\">Unused. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>option</var>[8] </td>\n<td valign=\"top\" width=\"70%\">Show a warning when invoking <code>STOP</code> and <code>ERROR STOP</code> if a floating-point exception occurred. Possible values are (bitwise or-ed) <code>GFC_FPE_INVALID</code> (1), <code>GFC_FPE_DENORMAL</code> (2), <code>GFC_FPE_ZERO</code> (4), <code>GFC_FPE_OVERFLOW</code> (8), <code>GFC_FPE_UNDERFLOW</code> (16), <code>GFC_FPE_INEXACT</code> (32). Default: None (0). (Default in the compiler: <code>GFC_FPE_INVALID | GFC_FPE_DENORMAL |\nGFC_FPE_ZERO | GFC_FPE_OVERFLOW | GFC_FPE_UNDERFLOW</code>.) </td>\n</tr>\n</table> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">/* Use gfortran 4.9 default options.  */\nstatic int options[] = {68, 511, 0, 0, 1, 1, 0, 0, 31};\n_gfortran_set_options (9, &amp;options);</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/_005fgfortran_005fset_005foptions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/_005fgfortran_005fset_005foptions.html</a>\n  </p>\n</div>\n","_005fgfortran_005fset_005fconvert":"<h1 class=\"subsection\" id=\"g_t_005fgfortran_005fset_005fconvert\">7.3.3 <code>_gfortran_set_convert</code> — Set endian conversion</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>_gfortran_set_convert</code> set the representation of data for unformatted files. </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>void _gfortran_set_convert (int conv)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>conv</var> </td>\n<td valign=\"top\" width=\"70%\">Endian conversion, possible values: GFC_CONVERT_NATIVE (0, default), GFC_CONVERT_SWAP (1), GFC_CONVERT_BIG (2), GFC_CONVERT_LITTLE (3). </td>\n</tr></table> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">int main (int argc, char *argv[])\n{\n  /* Initialize libgfortran.  */\n  _gfortran_set_args (argc, argv);\n  _gfortran_set_convert (1);\n  return 0;\n}</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/_005fgfortran_005fset_005fconvert.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/_005fgfortran_005fset_005fconvert.html</a>\n  </p>\n</div>\n","_005fgfortran_005fset_005frecord_005fmarker":"<h1 class=\"subsection\" id=\"g_t_005fgfortran_005fset_005frecord_005fmarker\">7.3.4 <code>_gfortran_set_record_marker</code> — Set length of record markers</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>_gfortran_set_record_marker</code> sets the length of record markers for unformatted files. </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>void _gfortran_set_record_marker (int val)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>val</var> </td>\n<td valign=\"top\" width=\"70%\">Length of the record marker; valid values are 4 and 8. Default is 4. </td>\n</tr></table> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">int main (int argc, char *argv[])\n{\n  /* Initialize libgfortran.  */\n  _gfortran_set_args (argc, argv);\n  _gfortran_set_record_marker (8);\n  return 0;\n}</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/_005fgfortran_005fset_005frecord_005fmarker.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/_005fgfortran_005fset_005frecord_005fmarker.html</a>\n  </p>\n</div>\n","_005fgfortran_005fset_005ffpe":"<h1 class=\"subsection\" id=\"g_t_005fgfortran_005fset_005ffpe\">7.3.5 <code>_gfortran_set_fpe</code> — Enable floating point exception traps</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>_gfortran_set_fpe</code> enables floating point exception traps for the specified exceptions. On most systems, this will result in a SIGFPE signal being sent and the program being aborted. </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>void _gfortran_set_fpe (int val)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>option</var>[0] </td>\n<td valign=\"top\" width=\"70%\">IEEE exceptions. Possible values are (bitwise or-ed) zero (0, default) no trapping, <code>GFC_FPE_INVALID</code> (1), <code>GFC_FPE_DENORMAL</code> (2), <code>GFC_FPE_ZERO</code> (4), <code>GFC_FPE_OVERFLOW</code> (8), <code>GFC_FPE_UNDERFLOW</code> (16), and <code>GFC_FPE_INEXACT</code> (32). </td>\n</tr></table> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">int main (int argc, char *argv[])\n{\n  /* Initialize libgfortran.  */\n  _gfortran_set_args (argc, argv);\n  /* FPE for invalid operations such as SQRT(-1.0).  */\n  _gfortran_set_fpe (1);\n  return 0;\n}</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/_005fgfortran_005fset_005ffpe.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/_005fgfortran_005fset_005ffpe.html</a>\n  </p>\n</div>\n","_005fgfortran_005fset_005fmax_005fsubrecord_005flength":"<h1 class=\"subsection\" id=\"g_t_005fgfortran_005fset_005fmax_005fsubrecord_005flength\">7.3.6 <code>_gfortran_set_max_subrecord_length</code> — Set subrecord length</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>_gfortran_set_max_subrecord_length</code> set the maximum length for a subrecord. This option only makes sense for testing and debugging of unformatted I/O. </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>void _gfortran_set_max_subrecord_length (int val)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>val</var> </td>\n<td valign=\"top\" width=\"70%\">the maximum length for a subrecord; the maximum permitted value is 2147483639, which is also the default. </td>\n</tr></table> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">int main (int argc, char *argv[])\n{\n  /* Initialize libgfortran.  */\n  _gfortran_set_args (argc, argv);\n  _gfortran_set_max_subrecord_length (8);\n  return 0;\n}</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/_005fgfortran_005fset_005fmax_005fsubrecord_005flength.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/_005fgfortran_005fset_005fmax_005fsubrecord_005flength.html</a>\n  </p>\n</div>\n","naming-and-argument_002dpassing-conventions":"<h1 class=\"section\" id=\"Naming-and-argument_002dpassing-conventions\">7.4 Naming and argument-passing conventions</h1> <p>This section gives an overview about the naming convention of procedures and global variables and about the argument passing conventions used by GNU Fortran. If a C binding has been specified, the naming convention and some of the argument-passing conventions change. If possible, mixed-language and mixed-compiler projects should use the better defined C binding for interoperability. See see <a href=\"interoperability-with-c#Interoperability-with-C\">Interoperability with C</a>. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"naming-conventions#Naming-conventions\">Naming conventions</a> </li>\n<li>\n<a accesskey=\"2\" href=\"argument-passing-conventions#Argument-passing-conventions\">Argument passing conventions</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Naming-and-argument_002dpassing-conventions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Naming-and-argument_002dpassing-conventions.html</a>\n  </p>\n</div>\n","naming-conventions":"<h1 class=\"subsection\" id=\"Naming-conventions\">7.4.1 Naming conventions</h1> <p>According the Fortran standard, valid Fortran names consist of a letter between <code>A</code> to <code>Z</code>, <code>a</code> to <code>z</code>, digits <code>0</code>, <code>1</code> to <code>9</code> and underscores (<code>_</code>) with the restriction that names may only start with a letter. As vendor extension, the dollar sign (<code>$</code>) is additionally permitted with the option <code>-fdollar-ok</code>, but not as first character and only if the target system supports it. </p>\n<p>By default, the procedure name is the lower-cased Fortran name with an appended underscore (<code>_</code>); using <code>-fno-underscoring</code> no underscore is appended while <code>-fsecond-underscore</code> appends two underscores. Depending on the target system and the calling convention, the procedure might be additionally dressed; for instance, on 32bit Windows with <code>stdcall</code>, an at-sign <code>@</code> followed by an integer number is appended. For the changing the calling convention, see see <a href=\"gnu-fortran-compiler-directives#GNU-Fortran-Compiler-Directives\">GNU Fortran Compiler Directives</a>. </p>\n<p>For common blocks, the same convention is used, i.e. by default an underscore is appended to the lower-cased Fortran name. Blank commons have the name <code>__BLNK__</code>. </p>\n<p>For procedures and variables declared in the specification space of a module, the name is formed by <code>__</code>, followed by the lower-cased module name, <code>_MOD_</code>, and the lower-cased Fortran name. Note that no underscore is appended. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Naming-conventions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Naming-conventions.html</a>\n  </p>\n</div>\n","argument-passing-conventions":"<h1 class=\"subsection\" id=\"Argument-passing-conventions\">7.4.2 Argument passing conventions</h1> <p>Subroutines do not return a value (matching C99's <code>void</code>) while functions either return a value as specified in the platform ABI or the result variable is passed as hidden argument to the function and no result is returned. A hidden result variable is used when the result variable is an array or of type <code>CHARACTER</code>. </p>\n<p>Arguments are passed according to the platform ABI. In particular, complex arguments might not be compatible to a struct with two real components for the real and imaginary part. The argument passing matches the one of C99's <code>_Complex</code>. Functions with scalar complex result variables return their value and do not use a by-reference argument. Note that with the <code>-ff2c</code> option, the argument passing is modified and no longer completely matches the platform ABI. Some other Fortran compilers use <code>f2c</code> semantic by default; this might cause problems with interoperablility. </p>\n<p>GNU Fortran passes most arguments by reference, i.e. by passing a pointer to the data. Note that the compiler might use a temporary variable into which the actual argument has been copied, if required semantically (copy-in/copy-out). </p>\n<p>For arguments with <code>ALLOCATABLE</code> and <code>POINTER</code> attribute (including procedure pointers), a pointer to the pointer is passed such that the pointer address can be modified in the procedure. </p>\n<p>For dummy arguments with the <code>VALUE</code> attribute: Scalar arguments of the type <code>INTEGER</code>, <code>LOGICAL</code>, <code>REAL</code> and <code>COMPLEX</code> are passed by value according to the platform ABI. (As vendor extension and not recommended, using <code>%VAL()</code> in the call to a procedure has the same effect.) For <code>TYPE(C_PTR)</code> and procedure pointers, the pointer itself is passed such that it can be modified without affecting the caller.    </p>\n<p>For Boolean (<code>LOGICAL</code>) arguments, please note that GCC expects only the integer value 0 and 1. If a GNU Fortran <code>LOGICAL</code> variable contains another integer value, the result is undefined. As some other Fortran compilers use -1 for <code>.TRUE.</code>, extra care has to be taken – such as passing the value as <code>INTEGER</code>. (The same value restriction also applies to other front ends of GCC, e.g. to GCC's C99 compiler for <code>_Bool</code> or GCC's Ada compiler for <code>Boolean</code>.) </p>\n<p>For arguments of <code>CHARACTER</code> type, the character length is passed as hidden argument. For deferred-length strings, the value is passed by reference, otherwise by value. The character length has the type <code>INTEGER(kind=4)</code>. Note with C binding, <code>CHARACTER(len=1)</code> result variables are returned according to the platform ABI and no hidden length argument is used for dummy arguments; with <code>VALUE</code>, those variables are passed by value. </p>\n<p>For <code>OPTIONAL</code> dummy arguments, an absent argument is denoted by a NULL pointer, except for scalar dummy arguments of type <code>INTEGER</code>, <code>LOGICAL</code>, <code>REAL</code> and <code>COMPLEX</code> which have the <code>VALUE</code> attribute. For those, a hidden Boolean argument (<code>logical(kind=C_bool),value</code>) is used to indicate whether the argument is present. </p>\n<p>Arguments which are assumed-shape, assumed-rank or deferred-rank arrays or, with <code>-fcoarray=lib</code>, allocatable scalar coarrays use an array descriptor. All other arrays pass the address of the first element of the array. With <code>-fcoarray=lib</code>, the token and the offset belonging to nonallocatable coarrays dummy arguments are passed as hidden argument along the character length hidden arguments. The token is an oparque pointer identifying the coarray and the offset is a passed-by-value integer of kind <code>C_PTRDIFF_T</code>, denoting the byte offset between the base address of the coarray and the passed scalar or first element of the passed array. </p>\n<p>The arguments are passed in the following order </p>\n<ul> <li>Result variable, when the function result is passed by reference </li>\n<li>Character length of the function result, if it is a of type <code>CHARACTER</code> and no C binding is used </li>\n<li>The arguments in the order in which they appear in the Fortran declaration </li>\n<li>The the present status for optional arguments with value attribute, which are internally passed by value </li>\n<li>The character length and/or coarray token and offset for the first argument which is a <code>CHARACTER</code> or a nonallocatable coarray dummy argument, followed by the hidden arguments of the next dummy argument of such a type </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Argument-passing-conventions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Argument-passing-conventions.html</a>\n  </p>\n</div>\n","intrinsic-procedures":"<h1 class=\"chapter\" id=\"Intrinsic-Procedures\">8 Intrinsic Procedures</h1> \n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"introduction-to-intrinsics#Introduction-to-Intrinsics\">Introduction</a>: </li>\n<li>\n<a accesskey=\"2\" href=\"abort#ABORT\"><code>ABORT</code></a>: </li>\n<li>\n<a accesskey=\"3\" href=\"abs#ABS\"><code>ABS</code></a>: </li>\n<li>\n<a accesskey=\"4\" href=\"access#ACCESS\"><code>ACCESS</code></a>: </li>\n<li>\n<a accesskey=\"5\" href=\"achar#ACHAR\"><code>ACHAR</code></a>: </li>\n<li>\n<a accesskey=\"6\" href=\"acos#ACOS\"><code>ACOS</code></a>: </li>\n<li>\n<a accesskey=\"7\" href=\"acosh#ACOSH\"><code>ACOSH</code></a>: </li>\n<li>\n<a accesskey=\"8\" href=\"adjustl#ADJUSTL\"><code>ADJUSTL</code></a>: </li>\n<li>\n<a accesskey=\"9\" href=\"adjustr#ADJUSTR\"><code>ADJUSTR</code></a>: </li>\n<li>\n<a href=\"aimag#AIMAG\"><code>AIMAG</code></a>: </li>\n<li>\n<a href=\"aint#AINT\"><code>AINT</code></a>: </li>\n<li>\n<a href=\"alarm#ALARM\"><code>ALARM</code></a>: </li>\n<li>\n<a href=\"all#ALL\"><code>ALL</code></a>: </li>\n<li>\n<a href=\"allocated#ALLOCATED\"><code>ALLOCATED</code></a>: </li>\n<li>\n<a href=\"and#AND\"><code>AND</code></a>: </li>\n<li>\n<a href=\"anint#ANINT\"><code>ANINT</code></a>: </li>\n<li>\n<a href=\"any#ANY\"><code>ANY</code></a>: </li>\n<li>\n<a href=\"asin#ASIN\"><code>ASIN</code></a>: </li>\n<li>\n<a href=\"asinh#ASINH\"><code>ASINH</code></a>: </li>\n<li>\n<a href=\"associated#ASSOCIATED\"><code>ASSOCIATED</code></a>: </li>\n<li>\n<a href=\"atan#ATAN\"><code>ATAN</code></a>: </li>\n<li>\n<a href=\"atan2#ATAN2\"><code>ATAN2</code></a>: </li>\n<li>\n<a href=\"atanh#ATANH\"><code>ATANH</code></a>: </li>\n<li>\n<a href=\"atomic_005fdefine#ATOMIC_005fDEFINE\"><code>ATOMIC_DEFINE</code></a>: </li>\n<li>\n<a href=\"atomic_005fref#ATOMIC_005fREF\"><code>ATOMIC_REF</code></a>: </li>\n<li>\n<a href=\"backtrace#BACKTRACE\"><code>BACKTRACE</code></a>: </li>\n<li>\n<a href=\"bessel_005fj0#BESSEL_005fJ0\"><code>BESSEL_J0</code></a>: </li>\n<li>\n<a href=\"bessel_005fj1#BESSEL_005fJ1\"><code>BESSEL_J1</code></a>: </li>\n<li>\n<a href=\"bessel_005fjn#BESSEL_005fJN\"><code>BESSEL_JN</code></a>: </li>\n<li>\n<a href=\"bessel_005fy0#BESSEL_005fY0\"><code>BESSEL_Y0</code></a>: </li>\n<li>\n<a href=\"bessel_005fy1#BESSEL_005fY1\"><code>BESSEL_Y1</code></a>: </li>\n<li>\n<a href=\"bessel_005fyn#BESSEL_005fYN\"><code>BESSEL_YN</code></a>: </li>\n<li>\n<a href=\"bge#BGE\"><code>BGE</code></a>: </li>\n<li>\n<a href=\"bgt#BGT\"><code>BGT</code></a>: </li>\n<li>\n<a href=\"bit_005fsize#BIT_005fSIZE\"><code>BIT_SIZE</code></a>: </li>\n<li>\n<a href=\"ble#BLE\"><code>BLE</code></a>: </li>\n<li>\n<a href=\"blt#BLT\"><code>BLT</code></a>: </li>\n<li>\n<a href=\"btest#BTEST\"><code>BTEST</code></a>: </li>\n<li>\n<a href=\"c_005fassociated#C_005fASSOCIATED\"><code>C_ASSOCIATED</code></a>: </li>\n<li>\n<a href=\"c_005ff_005fpointer#C_005fF_005fPOINTER\"><code>C_F_POINTER</code></a>: </li>\n<li>\n<a href=\"c_005ff_005fprocpointer#C_005fF_005fPROCPOINTER\"><code>C_F_PROCPOINTER</code></a>: </li>\n<li>\n<a href=\"c_005ffunloc#C_005fFUNLOC\"><code>C_FUNLOC</code></a>: </li>\n<li>\n<a href=\"c_005floc#C_005fLOC\"><code>C_LOC</code></a>: </li>\n<li>\n<a href=\"c_005fsizeof#C_005fSIZEOF\"><code>C_SIZEOF</code></a>: </li>\n<li>\n<a href=\"ceiling#CEILING\"><code>CEILING</code></a>: </li>\n<li>\n<a href=\"char#CHAR\"><code>CHAR</code></a>: </li>\n<li>\n<a href=\"chdir#CHDIR\"><code>CHDIR</code></a>: </li>\n<li>\n<a href=\"chmod#CHMOD\"><code>CHMOD</code></a>: </li>\n<li>\n<a href=\"cmplx#CMPLX\"><code>CMPLX</code></a>: </li>\n<li>\n<a href=\"command_005fargument_005fcount#COMMAND_005fARGUMENT_005fCOUNT\"><code>COMMAND_ARGUMENT_COUNT</code></a>: </li>\n<li>\n<a href=\"compiler_005foptions#COMPILER_005fOPTIONS\"><code>COMPILER_OPTIONS</code></a>: </li>\n<li>\n<a href=\"compiler_005fversion#COMPILER_005fVERSION\"><code>COMPILER_VERSION</code></a>: </li>\n<li>\n<a href=\"complex#COMPLEX\"><code>COMPLEX</code></a>: </li>\n<li>\n<a href=\"conjg#CONJG\"><code>CONJG</code></a>: </li>\n<li>\n<a href=\"cos#COS\"><code>COS</code></a>: </li>\n<li>\n<a href=\"cosh#COSH\"><code>COSH</code></a>: </li>\n<li>\n<a href=\"count#COUNT\"><code>COUNT</code></a>: </li>\n<li>\n<a href=\"cpu_005ftime#CPU_005fTIME\"><code>CPU_TIME</code></a>: </li>\n<li>\n<a href=\"cshift#CSHIFT\"><code>CSHIFT</code></a>: </li>\n<li>\n<a href=\"ctime#CTIME\"><code>CTIME</code></a>: </li>\n<li>\n<a href=\"date_005fand_005ftime#DATE_005fAND_005fTIME\"><code>DATE_AND_TIME</code></a>: </li>\n<li>\n<a href=\"dble#DBLE\"><code>DBLE</code></a>: </li>\n<li>\n<a href=\"dcmplx#DCMPLX\"><code>DCMPLX</code></a>: </li>\n<li>\n<a href=\"digits#DIGITS\"><code>DIGITS</code></a>: </li>\n<li>\n<a href=\"dim#DIM\"><code>DIM</code></a>: </li>\n<li>\n<a href=\"dot_005fproduct#DOT_005fPRODUCT\"><code>DOT_PRODUCT</code></a>: </li>\n<li>\n<a href=\"dprod#DPROD\"><code>DPROD</code></a>: </li>\n<li>\n<a href=\"dreal#DREAL\"><code>DREAL</code></a>: </li>\n<li>\n<a href=\"dshiftl#DSHIFTL\"><code>DSHIFTL</code></a>: </li>\n<li>\n<a href=\"dshiftr#DSHIFTR\"><code>DSHIFTR</code></a>: </li>\n<li>\n<a href=\"dtime#DTIME\"><code>DTIME</code></a>: </li>\n<li>\n<a href=\"eoshift#EOSHIFT\"><code>EOSHIFT</code></a>: </li>\n<li>\n<a href=\"epsilon#EPSILON\"><code>EPSILON</code></a>: </li>\n<li>\n<a href=\"erf#ERF\"><code>ERF</code></a>: </li>\n<li>\n<a href=\"erfc#ERFC\"><code>ERFC</code></a>: </li>\n<li>\n<a href=\"erfc_005fscaled#ERFC_005fSCALED\"><code>ERFC_SCALED</code></a>: </li>\n<li>\n<a href=\"etime#ETIME\"><code>ETIME</code></a>: </li>\n<li>\n<a href=\"execute_005fcommand_005fline#EXECUTE_005fCOMMAND_005fLINE\"><code>EXECUTE_COMMAND_LINE</code></a>: </li>\n<li>\n<a href=\"exit#EXIT\"><code>EXIT</code></a> </li>\n<li>\n<a href=\"exp#EXP\"><code>EXP</code></a>: </li>\n<li>\n<a href=\"exponent#EXPONENT\"><code>EXPONENT</code></a>: </li>\n<li>\n<a href=\"extends_005ftype_005fof#EXTENDS_005fTYPE_005fOF\"><code>EXTENDS_TYPE_OF</code></a>: </li>\n<li>\n<a href=\"fdate#FDATE\"><code>FDATE</code></a>: </li>\n<li>\n<a href=\"fget#FGET\"><code>FGET</code></a>: </li>\n<li>\n<a href=\"fgetc#FGETC\"><code>FGETC</code></a>: </li>\n<li>\n<a href=\"floor#FLOOR\"><code>FLOOR</code></a>: </li>\n<li>\n<a href=\"flush#FLUSH\"><code>FLUSH</code></a>: </li>\n<li>\n<a href=\"fnum#FNUM\"><code>FNUM</code></a>: </li>\n<li>\n<a href=\"fput#FPUT\"><code>FPUT</code></a>: </li>\n<li>\n<a href=\"fputc#FPUTC\"><code>FPUTC</code></a>: </li>\n<li>\n<a href=\"fraction#FRACTION\"><code>FRACTION</code></a>: </li>\n<li>\n<a href=\"free#FREE\"><code>FREE</code></a>: </li>\n<li>\n<a href=\"fseek#FSEEK\"><code>FSEEK</code></a>: </li>\n<li>\n<a href=\"fstat#FSTAT\"><code>FSTAT</code></a>: </li>\n<li>\n<a href=\"ftell#FTELL\"><code>FTELL</code></a>: </li>\n<li>\n<a href=\"gamma#GAMMA\"><code>GAMMA</code></a>: </li>\n<li>\n<a href=\"gerror#GERROR\"><code>GERROR</code></a>: </li>\n<li>\n<a href=\"getarg#GETARG\"><code>GETARG</code></a>: </li>\n<li>\n<a href=\"get_005fcommand#GET_005fCOMMAND\"><code>GET_COMMAND</code></a>: </li>\n<li>\n<a href=\"get_005fcommand_005fargument#GET_005fCOMMAND_005fARGUMENT\"><code>GET_COMMAND_ARGUMENT</code></a>: </li>\n<li>\n<a href=\"getcwd#GETCWD\"><code>GETCWD</code></a>: </li>\n<li>\n<a href=\"getenv#GETENV\"><code>GETENV</code></a>: </li>\n<li>\n<a href=\"get_005fenvironment_005fvariable#GET_005fENVIRONMENT_005fVARIABLE\"><code>GET_ENVIRONMENT_VARIABLE</code></a>: </li>\n<li>\n<a href=\"getgid#GETGID\"><code>GETGID</code></a>: </li>\n<li>\n<a href=\"getlog#GETLOG\"><code>GETLOG</code></a>: </li>\n<li>\n<a href=\"getpid#GETPID\"><code>GETPID</code></a>: </li>\n<li>\n<a href=\"getuid#GETUID\"><code>GETUID</code></a>: </li>\n<li>\n<a href=\"gmtime#GMTIME\"><code>GMTIME</code></a>: </li>\n<li>\n<a href=\"hostnm#HOSTNM\"><code>HOSTNM</code></a>: </li>\n<li>\n<a href=\"huge#HUGE\"><code>HUGE</code></a>: </li>\n<li>\n<a href=\"hypot#HYPOT\"><code>HYPOT</code></a>: </li>\n<li>\n<a href=\"iachar#IACHAR\"><code>IACHAR</code></a>: </li>\n<li>\n<a href=\"iall#IALL\"><code>IALL</code></a>: </li>\n<li>\n<a href=\"iand#IAND\"><code>IAND</code></a>: </li>\n<li>\n<a href=\"iany#IANY\"><code>IANY</code></a>: </li>\n<li>\n<a href=\"iargc#IARGC\"><code>IARGC</code></a>: </li>\n<li>\n<a href=\"ibclr#IBCLR\"><code>IBCLR</code></a>: </li>\n<li>\n<a href=\"ibits#IBITS\"><code>IBITS</code></a>: </li>\n<li>\n<a href=\"ibset#IBSET\"><code>IBSET</code></a>: </li>\n<li>\n<a href=\"ichar#ICHAR\"><code>ICHAR</code></a>: </li>\n<li>\n<a href=\"idate#IDATE\"><code>IDATE</code></a>: </li>\n<li>\n<a href=\"ieor#IEOR\"><code>IEOR</code></a>: </li>\n<li>\n<a href=\"ierrno#IERRNO\"><code>IERRNO</code></a>: </li>\n<li>\n<a href=\"image_005findex#IMAGE_005fINDEX\"><code>IMAGE_INDEX</code></a>: </li>\n<li>\n<a href=\"index-intrinsic#INDEX-intrinsic\"><code>INDEX</code></a>: </li>\n<li>\n<a href=\"int#INT\"><code>INT</code></a>: </li>\n<li>\n<a href=\"int2#INT2\"><code>INT2</code></a>: </li>\n<li>\n<a href=\"int8#INT8\"><code>INT8</code></a>: </li>\n<li>\n<a href=\"ior#IOR\"><code>IOR</code></a>: </li>\n<li>\n<a href=\"iparity#IPARITY\"><code>IPARITY</code></a>: </li>\n<li>\n<a href=\"irand#IRAND\"><code>IRAND</code></a>: </li>\n<li>\n<a href=\"is_005fiostat_005fend#IS_005fIOSTAT_005fEND\"><code>IS_IOSTAT_END</code></a>: </li>\n<li>\n<a href=\"is_005fiostat_005feor#IS_005fIOSTAT_005fEOR\"><code>IS_IOSTAT_EOR</code></a>: </li>\n<li>\n<a href=\"isatty#ISATTY\"><code>ISATTY</code></a>: </li>\n<li>\n<a href=\"ishft#ISHFT\"><code>ISHFT</code></a>: </li>\n<li>\n<a href=\"ishftc#ISHFTC\"><code>ISHFTC</code></a>: </li>\n<li>\n<a href=\"isnan#ISNAN\"><code>ISNAN</code></a>: </li>\n<li>\n<a href=\"itime#ITIME\"><code>ITIME</code></a>: </li>\n<li>\n<a href=\"kill#KILL\"><code>KILL</code></a>: </li>\n<li>\n<a href=\"kind#KIND\"><code>KIND</code></a>: </li>\n<li>\n<a href=\"lbound#LBOUND\"><code>LBOUND</code></a>: </li>\n<li>\n<a href=\"lcobound#LCOBOUND\"><code>LCOBOUND</code></a>: </li>\n<li>\n<a href=\"leadz#LEADZ\"><code>LEADZ</code></a>: </li>\n<li>\n<a href=\"len#LEN\"><code>LEN</code></a>: </li>\n<li>\n<a href=\"len_005ftrim#LEN_005fTRIM\"><code>LEN_TRIM</code></a>: </li>\n<li>\n<a href=\"lge#LGE\"><code>LGE</code></a>: </li>\n<li>\n<a href=\"lgt#LGT\"><code>LGT</code></a>: </li>\n<li>\n<a href=\"link#LINK\"><code>LINK</code></a>: </li>\n<li>\n<a href=\"lle#LLE\"><code>LLE</code></a>: </li>\n<li>\n<a href=\"llt#LLT\"><code>LLT</code></a>: </li>\n<li>\n<a href=\"lnblnk#LNBLNK\"><code>LNBLNK</code></a>: </li>\n<li>\n<a href=\"loc#LOC\"><code>LOC</code></a>: </li>\n<li>\n<a href=\"log#LOG\"><code>LOG</code></a>: </li>\n<li>\n<a href=\"log10#LOG10\"><code>LOG10</code></a>: </li>\n<li>\n<a href=\"log_005fgamma#LOG_005fGAMMA\"><code>LOG_GAMMA</code></a>: </li>\n<li>\n<a href=\"logical#LOGICAL\"><code>LOGICAL</code></a>: </li>\n<li>\n<a href=\"long#LONG\"><code>LONG</code></a>: </li>\n<li>\n<a href=\"lshift#LSHIFT\"><code>LSHIFT</code></a>: </li>\n<li>\n<a href=\"lstat#LSTAT\"><code>LSTAT</code></a>: </li>\n<li>\n<a href=\"ltime#LTIME\"><code>LTIME</code></a>: </li>\n<li>\n<a href=\"malloc#MALLOC\"><code>MALLOC</code></a>: </li>\n<li>\n<a href=\"maskl#MASKL\"><code>MASKL</code></a>: </li>\n<li>\n<a href=\"maskr#MASKR\"><code>MASKR</code></a>: </li>\n<li>\n<a href=\"matmul#MATMUL\"><code>MATMUL</code></a>: </li>\n<li>\n<a href=\"max#MAX\"><code>MAX</code></a>: </li>\n<li>\n<a href=\"maxexponent#MAXEXPONENT\"><code>MAXEXPONENT</code></a>: </li>\n<li>\n<a href=\"maxloc#MAXLOC\"><code>MAXLOC</code></a>: </li>\n<li>\n<a href=\"maxval#MAXVAL\"><code>MAXVAL</code></a>: </li>\n<li>\n<a href=\"mclock#MCLOCK\"><code>MCLOCK</code></a>: </li>\n<li>\n<a href=\"mclock8#MCLOCK8\"><code>MCLOCK8</code></a>: </li>\n<li>\n<a href=\"merge#MERGE\"><code>MERGE</code></a>: </li>\n<li>\n<a href=\"merge_005fbits#MERGE_005fBITS\"><code>MERGE_BITS</code></a>: </li>\n<li>\n<a href=\"min#MIN\"><code>MIN</code></a>: </li>\n<li>\n<a href=\"minexponent#MINEXPONENT\"><code>MINEXPONENT</code></a>: </li>\n<li>\n<a href=\"minloc#MINLOC\"><code>MINLOC</code></a>: </li>\n<li>\n<a href=\"minval#MINVAL\"><code>MINVAL</code></a>: </li>\n<li>\n<a href=\"mod#MOD\"><code>MOD</code></a>: </li>\n<li>\n<a href=\"modulo#MODULO\"><code>MODULO</code></a>: </li>\n<li>\n<a href=\"move_005falloc#MOVE_005fALLOC\"><code>MOVE_ALLOC</code></a>: </li>\n<li>\n<a href=\"mvbits#MVBITS\"><code>MVBITS</code></a>: </li>\n<li>\n<a href=\"nearest#NEAREST\"><code>NEAREST</code></a>: </li>\n<li>\n<a href=\"new_005fline#NEW_005fLINE\"><code>NEW_LINE</code></a>: </li>\n<li>\n<a href=\"nint#NINT\"><code>NINT</code></a>: </li>\n<li>\n<a href=\"norm2#NORM2\"><code>NORM2</code></a>: </li>\n<li>\n<a href=\"not#NOT\"><code>NOT</code></a>: </li>\n<li>\n<a href=\"null#NULL\"><code>NULL</code></a>: </li>\n<li>\n<a href=\"num_005fimages#NUM_005fIMAGES\"><code>NUM_IMAGES</code></a>: </li>\n<li>\n<a href=\"or#OR\"><code>OR</code></a>: </li>\n<li>\n<a href=\"pack#PACK\"><code>PACK</code></a>: </li>\n<li>\n<a href=\"parity#PARITY\"><code>PARITY</code></a>: </li>\n<li>\n<a href=\"perror#PERROR\"><code>PERROR</code></a>: </li>\n<li>\n<a href=\"popcnt#POPCNT\"><code>POPCNT</code></a>: </li>\n<li>\n<a href=\"poppar#POPPAR\"><code>POPPAR</code></a>: </li>\n<li>\n<a href=\"precision#PRECISION\"><code>PRECISION</code></a>: </li>\n<li>\n<a href=\"present#PRESENT\"><code>PRESENT</code></a>: </li>\n<li>\n<a href=\"product#PRODUCT\"><code>PRODUCT</code></a>: </li>\n<li>\n<a href=\"radix#RADIX\"><code>RADIX</code></a>: </li>\n<li>\n<a href=\"ran#RAN\"><code>RAN</code></a>: </li>\n<li>\n<a href=\"rand#RAND\"><code>RAND</code></a>: </li>\n<li>\n<a href=\"random_005fnumber#RANDOM_005fNUMBER\"><code>RANDOM_NUMBER</code></a>: </li>\n<li>\n<a href=\"random_005fseed#RANDOM_005fSEED\"><code>RANDOM_SEED</code></a>: </li>\n<li>\n<a href=\"range#RANGE\"><code>RANGE</code></a>: </li>\n<li>\n<a href=\"rank#RANK\"><code>RANK</code> </a>: </li>\n<li>\n<a href=\"real#REAL\"><code>REAL</code></a>: </li>\n<li>\n<a href=\"rename#RENAME\"><code>RENAME</code></a>: </li>\n<li>\n<a href=\"repeat#REPEAT\"><code>REPEAT</code></a>: </li>\n<li>\n<a href=\"reshape#RESHAPE\"><code>RESHAPE</code></a>: </li>\n<li>\n<a href=\"rrspacing#RRSPACING\"><code>RRSPACING</code></a>: </li>\n<li>\n<a href=\"rshift#RSHIFT\"><code>RSHIFT</code></a>: </li>\n<li>\n<a href=\"same_005ftype_005fas#SAME_005fTYPE_005fAS\"><code>SAME_TYPE_AS</code></a>: </li>\n<li>\n<a href=\"scale#SCALE\"><code>SCALE</code></a>: </li>\n<li>\n<a href=\"scan#SCAN\"><code>SCAN</code></a>: </li>\n<li>\n<a href=\"secnds#SECNDS\"><code>SECNDS</code></a>: </li>\n<li>\n<a href=\"second#SECOND\"><code>SECOND</code></a>: </li>\n<li>\n<a href=\"selected_005fchar_005fkind#SELECTED_005fCHAR_005fKIND\"><code>SELECTED_CHAR_KIND</code></a>: </li>\n<li>\n<a href=\"selected_005fint_005fkind#SELECTED_005fINT_005fKIND\"><code>SELECTED_INT_KIND</code></a>: </li>\n<li>\n<a href=\"selected_005freal_005fkind#SELECTED_005fREAL_005fKIND\"><code>SELECTED_REAL_KIND</code></a>: </li>\n<li>\n<a href=\"set_005fexponent#SET_005fEXPONENT\"><code>SET_EXPONENT</code></a>: </li>\n<li>\n<a href=\"shape#SHAPE\"><code>SHAPE</code></a>: </li>\n<li>\n<a href=\"shifta#SHIFTA\"><code>SHIFTA</code></a>: </li>\n<li>\n<a href=\"shiftl#SHIFTL\"><code>SHIFTL</code></a>: </li>\n<li>\n<a href=\"shiftr#SHIFTR\"><code>SHIFTR</code></a>: </li>\n<li>\n<a href=\"sign#SIGN\"><code>SIGN</code></a>: </li>\n<li>\n<a href=\"signal#SIGNAL\"><code>SIGNAL</code></a>: </li>\n<li>\n<a href=\"sin#SIN\"><code>SIN</code></a>: </li>\n<li>\n<a href=\"sinh#SINH\"><code>SINH</code></a>: </li>\n<li>\n<a href=\"size#SIZE\"><code>SIZE</code></a>: </li>\n<li>\n<a href=\"sizeof#SIZEOF\"><code>SIZEOF</code></a>: </li>\n<li>\n<a href=\"sleep#SLEEP\"><code>SLEEP</code></a>: </li>\n<li>\n<a href=\"spacing#SPACING\"><code>SPACING</code></a>: </li>\n<li>\n<a href=\"spread#SPREAD\"><code>SPREAD</code></a>: </li>\n<li>\n<a href=\"sqrt#SQRT\"><code>SQRT</code></a>: </li>\n<li>\n<a href=\"srand#SRAND\"><code>SRAND</code></a>: </li>\n<li>\n<a href=\"stat#STAT\"><code>STAT</code></a>: </li>\n<li>\n<a href=\"storage_005fsize#STORAGE_005fSIZE\"><code>STORAGE_SIZE</code></a>: </li>\n<li>\n<a href=\"sum#SUM\"><code>SUM</code></a>: </li>\n<li>\n<a href=\"symlnk#SYMLNK\"><code>SYMLNK</code></a>: </li>\n<li>\n<a href=\"system#SYSTEM\"><code>SYSTEM</code></a>: </li>\n<li>\n<a href=\"system_005fclock#SYSTEM_005fCLOCK\"><code>SYSTEM_CLOCK</code></a>: </li>\n<li>\n<a href=\"tan#TAN\"><code>TAN</code></a>: </li>\n<li>\n<a href=\"tanh#TANH\"><code>TANH</code></a>: </li>\n<li>\n<a href=\"this_005fimage#THIS_005fIMAGE\"><code>THIS_IMAGE</code></a>: </li>\n<li>\n<a href=\"time#TIME\"><code>TIME</code></a>: </li>\n<li>\n<a href=\"time8#TIME8\"><code>TIME8</code></a>: </li>\n<li>\n<a href=\"tiny#TINY\"><code>TINY</code></a>: </li>\n<li>\n<a href=\"trailz#TRAILZ\"><code>TRAILZ</code></a>: </li>\n<li>\n<a href=\"transfer#TRANSFER\"><code>TRANSFER</code></a>: </li>\n<li>\n<a href=\"transpose#TRANSPOSE\"><code>TRANSPOSE</code></a>: </li>\n<li>\n<a href=\"trim#TRIM\"><code>TRIM</code></a>: </li>\n<li>\n<a href=\"ttynam#TTYNAM\"><code>TTYNAM</code></a> </li>\n<li>\n<a href=\"ubound#UBOUND\"><code>UBOUND</code></a>: </li>\n<li>\n<a href=\"ucobound#UCOBOUND\"><code>UCOBOUND</code></a>: </li>\n<li>\n<a href=\"umask#UMASK\"><code>UMASK</code></a>: </li>\n<li>\n<a href=\"unlink#UNLINK\"><code>UNLINK</code></a>: </li>\n<li>\n<a href=\"unpack#UNPACK\"><code>UNPACK</code></a>: </li>\n<li>\n<a href=\"verify#VERIFY\"><code>VERIFY</code></a>: </li>\n<li>\n<a href=\"xor#XOR\"><code>XOR</code></a>: </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Intrinsic-Procedures.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Intrinsic-Procedures.html</a>\n  </p>\n</div>\n","introduction-to-intrinsics":"<h1 class=\"section\" id=\"Introduction-to-Intrinsics\">8.1 Introduction to intrinsic procedures</h1> <p>The intrinsic procedures provided by GNU Fortran include all of the intrinsic procedures required by the Fortran 95 standard, a set of intrinsic procedures for backwards compatibility with G77, and a selection of intrinsic procedures from the Fortran 2003 and Fortran 2008 standards. Any conflict between a description here and a description in either the Fortran 95 standard, the Fortran 2003 standard or the Fortran 2008 standard is unintentional, and the standard(s) should be considered authoritative. </p>\n<p>The enumeration of the <code>KIND</code> type parameter is processor defined in the Fortran 95 standard. GNU Fortran defines the default integer type and default real type by <code>INTEGER(KIND=4)</code> and <code>REAL(KIND=4)</code>, respectively. The standard mandates that both data types shall have another kind, which have more precision. On typical target architectures supported by <code>gfortran</code>, this kind type parameter is <code>KIND=8</code>. Hence, <code>REAL(KIND=8)</code> and <code>DOUBLE PRECISION</code> are equivalent. In the description of generic intrinsic procedures, the kind type parameter will be specified by <code>KIND=*</code>, and in the description of specific names for an intrinsic procedure the kind type parameter will be explicitly given (e.g., <code>REAL(KIND=4)</code> or <code>REAL(KIND=8)</code>). Finally, for brevity the optional <code>KIND=</code> syntax will be omitted. </p>\n<p>Many of the intrinsic procedures take one or more optional arguments. This document follows the convention used in the Fortran 95 standard, and denotes such arguments by square brackets. </p>\n<p>GNU Fortran offers the <code>-std=f95</code> and <code>-std=gnu</code> options, which can be used to restrict the set of intrinsic procedures to a given standard. By default, <code>gfortran</code> sets the <code>-std=gnu</code> option, and so all intrinsic procedures described here are accepted. There is one caveat. For a select group of intrinsic procedures, <code>g77</code> implemented both a function and a subroutine. Both classes have been implemented in <code>gfortran</code> for backwards compatibility with <code>g77</code>. It is noted here that these functions and subroutines cannot be intermixed in a given subprogram. In the descriptions that follow, the applicable standard for each intrinsic procedure is noted. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Introduction-to-Intrinsics.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Introduction-to-Intrinsics.html</a>\n  </p>\n</div>\n","abort":"<h1 class=\"section\" id=\"ABORT\">8.2 <code>ABORT</code> — Abort the program</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>ABORT</code> causes immediate termination of the program. On operating systems that support a core dump, <code>ABORT</code> will produce a core dump. It will also print a backtrace, unless <code>-fno-backtrace</code> is given. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL ABORT</code> </dd>\n<dt>Return value:</dt>\n<dd>Does not return. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_abort\n  integer :: i = 1, j = 2\n  if (i /= j) call abort\nend program test_abort</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"exit#EXIT\">EXIT</a>, <a href=\"kill#KILL\">KILL</a>, <a href=\"backtrace#BACKTRACE\">BACKTRACE</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ABORT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ABORT.html</a>\n  </p>\n</div>\n","abs":"<h1 class=\"section\" id=\"ABS\">8.3 <code>ABS</code> — Absolute value</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>ABS(A)</code> computes the absolute value of <code>A</code>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later, has overloads that are GNU extensions </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = ABS(A)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>A</var> </td>\n<td valign=\"top\" width=\"70%\">The type of the argument shall be an <code>INTEGER</code>, <code>REAL</code>, or <code>COMPLEX</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of the same type and kind as the argument except the return value is <code>REAL</code> for a <code>COMPLEX</code> argument. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_abs\n  integer :: i = -1\n  real :: x = -1.e0\n  complex :: z = (-1.e0,0.e0)\n  i = abs(i)\n  x = abs(x)\n  x = abs(z)\nend program test_abs</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>ABS(A)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4) A</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>CABS(A)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(4) A</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DABS(A)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) A</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>IABS(A)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>INTEGER(4) A</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>INTEGER(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>ZABS(A)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(8) A</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(8)</code> </td>\n<td valign=\"top\" width=\"25%\">GNU extension </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>CDABS(A)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(8) A</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(8)</code> </td>\n<td valign=\"top\" width=\"25%\">GNU extension </td>\n</tr>\n</table> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ABS.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ABS.html</a>\n  </p>\n</div>\n","access":"<h1 class=\"section\" id=\"ACCESS\">8.4 <code>ACCESS</code> — Checks file access modes</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>ACCESS(NAME, MODE)</code> checks whether the file <var>NAME</var> exists, is readable, writable or executable. Except for the executable check, <code>ACCESS</code> can be replaced by Fortran 95's <code>INQUIRE</code>. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = ACCESS(NAME, MODE)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>NAME</var> </td>\n<td valign=\"top\" width=\"70%\">Scalar <code>CHARACTER</code> of default kind with the file name. Tailing blank are ignored unless the character <code>achar(0)</code> is present, then all characters up to and excluding <code>achar(0)</code> are used as file name. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>MODE</var> </td>\n<td valign=\"top\" width=\"70%\">Scalar <code>CHARACTER</code> of default kind with the file access mode, may be any concatenation of <code>\"r\"</code> (readable), <code>\"w\"</code> (writable) and <code>\"x\"</code> (executable), or <code>\" \"</code> to check for existence. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>Returns a scalar <code>INTEGER</code>, which is <code>0</code> if the file is accessible in the given mode; otherwise or if an invalid argument has been given for <code>MODE</code> the value <code>1</code> is returned. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program access_test\n  implicit none\n  character(len=*), parameter :: file  = 'test.dat'\n  character(len=*), parameter :: file2 = 'test.dat  '//achar(0)\n  if(access(file,' ') == 0) print *, trim(file),' is exists'\n  if(access(file,'r') == 0) print *, trim(file),' is readable'\n  if(access(file,'w') == 0) print *, trim(file),' is writable'\n  if(access(file,'x') == 0) print *, trim(file),' is executable'\n  if(access(file2,'rwx') == 0) &amp;\n    print *, trim(file2),' is readable, writable and executable'\nend program access_test</pre> </dd>\n<dt>Specific names:<dt>See also:</dt>\n</dt>\n\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ACCESS.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ACCESS.html</a>\n  </p>\n</div>\n","achar":"<h1 class=\"section\" id=\"ACHAR\">8.5 <code>ACHAR</code> — Character in ASCII collating sequence</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>ACHAR(I)</code> returns the character located at position <code>I</code> in the ASCII collating sequence. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later, with <var>KIND</var> argument Fortran 2003 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = ACHAR(I [, KIND])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>KIND</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) An <code>INTEGER</code> initialization expression indicating the kind parameter of the result. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>CHARACTER</code> with a length of one. If the <var>KIND</var> argument is present, the return value is of the specified kind and of the default kind otherwise. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_achar\n  character c\n  c = achar(32)\nend program test_achar</pre> </dd>\n<dt>Note:</dt>\n<dd>See <a href=\"ichar#ICHAR\">ICHAR</a> for a discussion of converting between numerical values and formatted string representations. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"char#CHAR\">CHAR</a>, <a href=\"iachar#IACHAR\">IACHAR</a>, <a href=\"ichar#ICHAR\">ICHAR</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ACHAR.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ACHAR.html</a>\n  </p>\n</div>\n","acos":"<h1 class=\"section\" id=\"ACOS\">8.6 <code>ACOS</code> — Arccosine function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>ACOS(X)</code> computes the arccosine of <var>X</var> (inverse of <code>COS(X)</code>). </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later, for a complex argument Fortran 2008 or later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = ACOS(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall either be <code>REAL</code> with a magnitude that is less than or equal to one - or the type shall be <code>COMPLEX</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of the same type and kind as <var>X</var>. The real part of the result is in radians and lies in the range 0 \\leq \\Re \\acos(x) \\leq \\pi. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_acos\n  real(8) :: x = 0.866_8\n  x = acos(x)\nend program test_acos</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>ACOS(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DACOS(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>Inverse function: <a href=\"cos#COS\">COS</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ACOS.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ACOS.html</a>\n  </p>\n</div>\n","acosh":"<h1 class=\"section\" id=\"ACOSH\">8.7 <code>ACOSH</code> — Inverse hyperbolic cosine function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>ACOSH(X)</code> computes the inverse hyperbolic cosine of <var>X</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = ACOSH(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL</code> or <code>COMPLEX</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value has the same type and kind as <var>X</var>. If <var>X</var> is complex, the imaginary part of the result is in radians and lies between 0 \\leq \\Im \\acosh(x) \\leq \\pi. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_acosh\n  REAL(8), DIMENSION(3) :: x = (/ 1.0, 2.0, 3.0 /)\n  WRITE (*,*) ACOSH(x)\nEND PROGRAM</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DACOSH(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">GNU extension </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>Inverse function: <a href=\"cosh#COSH\">COSH</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ACOSH.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ACOSH.html</a>\n  </p>\n</div>\n","adjustl":"<h1 class=\"section\" id=\"ADJUSTL\">8.8 <code>ADJUSTL</code> — Left adjust a string</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>ADJUSTL(STRING)</code> will left adjust a string by removing leading spaces. Spaces are inserted at the end of the string as needed. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 90 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = ADJUSTL(STRING)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STRING</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>CHARACTER</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>CHARACTER</code> and of the same kind as <var>STRING</var> where leading spaces are removed and the same number of spaces are inserted on the end of <var>STRING</var>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_adjustl\n  character(len=20) :: str = '   gfortran'\n  str = adjustl(str)\n  print *, str\nend program test_adjustl</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"adjustr#ADJUSTR\">ADJUSTR</a>, <a href=\"trim#TRIM\">TRIM</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ADJUSTL.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ADJUSTL.html</a>\n  </p>\n</div>\n","adjustr":"<h1 class=\"section\" id=\"ADJUSTR\">8.9 <code>ADJUSTR</code> — Right adjust a string</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>ADJUSTR(STRING)</code> will right adjust a string by removing trailing spaces. Spaces are inserted at the start of the string as needed. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = ADJUSTR(STRING)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STR</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>CHARACTER</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>CHARACTER</code> and of the same kind as <var>STRING</var> where trailing spaces are removed and the same number of spaces are inserted at the start of <var>STRING</var>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_adjustr\n  character(len=20) :: str = 'gfortran'\n  str = adjustr(str)\n  print *, str\nend program test_adjustr</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"adjustl#ADJUSTL\">ADJUSTL</a>, <a href=\"trim#TRIM\">TRIM</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ADJUSTR.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ADJUSTR.html</a>\n  </p>\n</div>\n","aimag":"<h1 class=\"section\" id=\"AIMAG\">8.10 <code>AIMAG</code> — Imaginary part of complex number</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>AIMAG(Z)</code> yields the imaginary part of complex argument <code>Z</code>. The <code>IMAG(Z)</code> and <code>IMAGPART(Z)</code> intrinsic functions are provided for compatibility with <code>g77</code>, and their use in new code is strongly discouraged. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later, has overloads that are GNU extensions </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = AIMAG(Z)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>Z</var> </td>\n<td valign=\"top\" width=\"70%\">The type of the argument shall be <code>COMPLEX</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>REAL</code> with the kind type parameter of the argument. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_aimag\n  complex(4) z4\n  complex(8) z8\n  z4 = cmplx(1.e0_4, 0.e0_4)\n  z8 = cmplx(0.e0_8, 1.e0_8)\n  print *, aimag(z4), dimag(z8)\nend program test_aimag</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>AIMAG(Z)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX Z</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL</code> </td>\n<td valign=\"top\" width=\"25%\">GNU extension </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DIMAG(Z)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(8) Z</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">GNU extension </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>IMAG(Z)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX Z</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL</code> </td>\n<td valign=\"top\" width=\"25%\">GNU extension </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>IMAGPART(Z)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX Z</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL</code> </td>\n<td valign=\"top\" width=\"25%\">GNU extension </td>\n</tr>\n</table> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/AIMAG.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/AIMAG.html</a>\n  </p>\n</div>\n","aint":"<h1 class=\"section\" id=\"AINT\">8.11 <code>AINT</code> — Truncate to a whole number</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>AINT(A [, KIND])</code> truncates its argument to a whole number. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = AINT(A [, KIND])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>A</var> </td>\n<td valign=\"top\" width=\"70%\">The type of the argument shall be <code>REAL</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>KIND</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) An <code>INTEGER</code> initialization expression indicating the kind parameter of the result. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>REAL</code> with the kind type parameter of the argument if the optional <var>KIND</var> is absent; otherwise, the kind type parameter will be given by <var>KIND</var>. If the magnitude of <var>X</var> is less than one, <code>AINT(X)</code> returns zero. If the magnitude is equal to or greater than one then it returns the largest whole number that does not exceed its magnitude. The sign is the same as the sign of <var>X</var>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_aint\n  real(4) x4\n  real(8) x8\n  x4 = 1.234E0_4\n  x8 = 4.321_8\n  print *, aint(x4), dint(x8)\n  x8 = aint(x4,8)\nend program test_aint</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>AINT(A)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4) A</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DINT(A)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) A</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n</table> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/AINT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/AINT.html</a>\n  </p>\n</div>\n","alarm":"<h1 class=\"section\" id=\"ALARM\">8.12 <code>ALARM</code> — Execute a routine after a given delay</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>ALARM(SECONDS, HANDLER [, STATUS])</code> causes external subroutine <var>HANDLER</var> to be executed after a delay of <var>SECONDS</var> by using <code>alarm(2)</code> to set up a signal and <code>signal(2)</code> to catch it. If <var>STATUS</var> is supplied, it will be returned with the number of seconds remaining until any previously scheduled alarm was due to be delivered, or zero if there was no previously scheduled alarm. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL ALARM(SECONDS, HANDLER [, STATUS])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>SECONDS</var> </td>\n<td valign=\"top\" width=\"70%\">The type of the argument shall be a scalar <code>INTEGER</code>. It is <code>INTENT(IN)</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>HANDLER</var> </td>\n<td valign=\"top\" width=\"70%\">Signal handler (<code>INTEGER FUNCTION</code> or <code>SUBROUTINE</code>) or dummy/global <code>INTEGER</code> scalar. The scalar values may be either <code>SIG_IGN=1</code> to ignore the alarm generated or <code>SIG_DFL=0</code> to set the default action. It is <code>INTENT(IN)</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STATUS</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) <var>STATUS</var> shall be a scalar variable of the default <code>INTEGER</code> kind. It is <code>INTENT(OUT)</code>. </td>\n</tr>\n</table> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_alarm\n  external handler_print\n  integer i\n  call alarm (3, handler_print, i)\n  print *, i\n  call sleep(10)\nend program test_alarm</pre> <p>This will cause the external routine <var>handler_print</var> to be called after 3 seconds. </p>\n</dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ALARM.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ALARM.html</a>\n  </p>\n</div>\n","all":"<h1 class=\"section\" id=\"ALL\">8.13 <code>ALL</code> — All values in <var>MASK</var> along <var>DIM</var> are true</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>ALL(MASK [, DIM])</code> determines if all the values are true in <var>MASK</var> in the array along dimension <var>DIM</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = ALL(MASK [, DIM])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>MASK</var> </td>\n<td valign=\"top\" width=\"70%\">The type of the argument shall be <code>LOGICAL</code> and it shall not be scalar. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>DIM</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) <var>DIM</var> shall be a scalar integer with a value that lies between one and the rank of <var>MASK</var>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>\n<code>ALL(MASK)</code> returns a scalar value of type <code>LOGICAL</code> where the kind type parameter is the same as the kind type parameter of <var>MASK</var>. If <var>DIM</var> is present, then <code>ALL(MASK, DIM)</code> returns an array with the rank of <var>MASK</var> minus 1. The shape is determined from the shape of <var>MASK</var> where the <var>DIM</var> dimension is elided. <dl> <dt>(A)</dt>\n<dd>\n<code>ALL(MASK)</code> is true if all elements of <var>MASK</var> are true. It also is true if <var>MASK</var> has zero size; otherwise, it is false. </dd>\n<dt>(B)</dt>\n<dd>If the rank of <var>MASK</var> is one, then <code>ALL(MASK,DIM)</code> is equivalent to <code>ALL(MASK)</code>. If the rank is greater than one, then <code>ALL(MASK,DIM)</code> is determined by applying <code>ALL</code> to the array sections. </dd>\n</dl> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_all\n  logical l\n  l = all((/.true., .true., .true./))\n  print *, l\n  call section\n  contains\n    subroutine section\n      integer a(2,3), b(2,3)\n      a = 1\n      b = 1\n      b(2,2) = 2\n      print *, all(a .eq. b, 1)\n      print *, all(a .eq. b, 2)\n    end subroutine section\nend program test_all</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ALL.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ALL.html</a>\n  </p>\n</div>\n","allocated":"<h1 class=\"section\" id=\"ALLOCATED\">8.14 <code>ALLOCATED</code> — Status of an allocatable entity</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>ALLOCATED(ARRAY)</code> and <code>ALLOCATED(SCALAR)</code> check the allocation status of <var>ARRAY</var> and <var>SCALAR</var>, respectively. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later. Note, the <code>SCALAR=</code> keyword and allocatable scalar entities are available in Fortran 2003 and later. </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = ALLOCATED(ARRAY)</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = ALLOCATED(SCALAR)</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>ARRAY</var> </td>\n<td valign=\"top\" width=\"70%\">The argument shall be an <code>ALLOCATABLE</code> array. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>SCALAR</var> </td>\n<td valign=\"top\" width=\"70%\">The argument shall be an <code>ALLOCATABLE</code> scalar. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is a scalar <code>LOGICAL</code> with the default logical kind type parameter. If the argument is allocated, then the result is <code>.TRUE.</code>; otherwise, it returns <code>.FALSE.</code> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_allocated\n  integer :: i = 4\n  real(4), allocatable :: x(:)\n  if (.not. allocated(x)) allocate(x(i))\nend program test_allocated</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ALLOCATED.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ALLOCATED.html</a>\n  </p>\n</div>\n","and":"<h1 class=\"section\" id=\"AND\">8.15 <code>AND</code> — Bitwise logical AND</h1> \n<dl> <dt>Description:</dt>\n<dd>Bitwise logical <code>AND</code>. <p>This intrinsic routine is provided for backwards compatibility with GNU Fortran 77. For integer arguments, programmers should consider the use of the <a href=\"iand#IAND\">IAND</a> intrinsic defined by the Fortran standard. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = AND(I, J)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be either a scalar <code>INTEGER</code> type or a scalar <code>LOGICAL</code> type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>J</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be the same as the type of <var>I</var>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return type is either a scalar <code>INTEGER</code> or a scalar <code>LOGICAL</code>. If the kind type parameters differ, then the smaller kind type is implicitly converted to larger kind, and the return has the larger kind. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_and\n  LOGICAL :: T = .TRUE., F = .FALSE.\n  INTEGER :: a, b\n  DATA a / Z'F' /, b / Z'3' /\n\n  WRITE (*,*) AND(T, T), AND(T, F), AND(F, T), AND(F, F)\n  WRITE (*,*) AND(a, b)\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>Fortran 95 elemental function: <a href=\"iand#IAND\">IAND</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/AND.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/AND.html</a>\n  </p>\n</div>\n","anint":"<h1 class=\"section\" id=\"ANINT\">8.16 <code>ANINT</code> — Nearest whole number</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>ANINT(A [, KIND])</code> rounds its argument to the nearest whole number. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = ANINT(A [, KIND])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>A</var> </td>\n<td valign=\"top\" width=\"70%\">The type of the argument shall be <code>REAL</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>KIND</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) An <code>INTEGER</code> initialization expression indicating the kind parameter of the result. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type real with the kind type parameter of the argument if the optional <var>KIND</var> is absent; otherwise, the kind type parameter will be given by <var>KIND</var>. If <var>A</var> is greater than zero, <code>ANINT(A)</code> returns <code>AINT(X+0.5)</code>. If <var>A</var> is less than or equal to zero then it returns <code>AINT(X-0.5)</code>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_anint\n  real(4) x4\n  real(8) x8\n  x4 = 1.234E0_4\n  x8 = 4.321_8\n  print *, anint(x4), dnint(x8)\n  x8 = anint(x4,8)\nend program test_anint</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>AINT(A)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4) A</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DNINT(A)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) A</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n</table> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ANINT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ANINT.html</a>\n  </p>\n</div>\n","any":"<h1 class=\"section\" id=\"ANY\">8.17 <code>ANY</code> — Any value in <var>MASK</var> along <var>DIM</var> is true</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>ANY(MASK [, DIM])</code> determines if any of the values in the logical array <var>MASK</var> along dimension <var>DIM</var> are <code>.TRUE.</code>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = ANY(MASK [, DIM])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>MASK</var> </td>\n<td valign=\"top\" width=\"70%\">The type of the argument shall be <code>LOGICAL</code> and it shall not be scalar. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>DIM</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) <var>DIM</var> shall be a scalar integer with a value that lies between one and the rank of <var>MASK</var>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>\n<code>ANY(MASK)</code> returns a scalar value of type <code>LOGICAL</code> where the kind type parameter is the same as the kind type parameter of <var>MASK</var>. If <var>DIM</var> is present, then <code>ANY(MASK, DIM)</code> returns an array with the rank of <var>MASK</var> minus 1. The shape is determined from the shape of <var>MASK</var> where the <var>DIM</var> dimension is elided. <dl> <dt>(A)</dt>\n<dd>\n<code>ANY(MASK)</code> is true if any element of <var>MASK</var> is true; otherwise, it is false. It also is false if <var>MASK</var> has zero size. </dd>\n<dt>(B)</dt>\n<dd>If the rank of <var>MASK</var> is one, then <code>ANY(MASK,DIM)</code> is equivalent to <code>ANY(MASK)</code>. If the rank is greater than one, then <code>ANY(MASK,DIM)</code> is determined by applying <code>ANY</code> to the array sections. </dd>\n</dl> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_any\n  logical l\n  l = any((/.true., .true., .true./))\n  print *, l\n  call section\n  contains\n    subroutine section\n      integer a(2,3), b(2,3)\n      a = 1\n      b = 1\n      b(2,2) = 2\n      print *, any(a .eq. b, 1)\n      print *, any(a .eq. b, 2)\n    end subroutine section\nend program test_any</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ANY.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ANY.html</a>\n  </p>\n</div>\n","asin":"<h1 class=\"section\" id=\"ASIN\">8.18 <code>ASIN</code> — Arcsine function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>ASIN(X)</code> computes the arcsine of its <var>X</var> (inverse of <code>SIN(X)</code>). </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later, for a complex argument Fortran 2008 or later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = ASIN(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be either <code>REAL</code> and a magnitude that is less than or equal to one - or be <code>COMPLEX</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of the same type and kind as <var>X</var>. The real part of the result is in radians and lies in the range -\\pi/2 \\leq \\Re \\asin(x) \\leq \\pi/2. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_asin\n  real(8) :: x = 0.866_8\n  x = asin(x)\nend program test_asin</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>ASIN(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DASIN(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>Inverse function: <a href=\"sin#SIN\">SIN</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ASIN.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ASIN.html</a>\n  </p>\n</div>\n","asinh":"<h1 class=\"section\" id=\"ASINH\">8.19 <code>ASINH</code> — Inverse hyperbolic sine function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>ASINH(X)</code> computes the inverse hyperbolic sine of <var>X</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = ASINH(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL</code> or <code>COMPLEX</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of the same type and kind as <var>X</var>. If <var>X</var> is complex, the imaginary part of the result is in radians and lies between -\\pi/2 \\leq \\Im \\asinh(x) \\leq \\pi/2. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_asinh\n  REAL(8), DIMENSION(3) :: x = (/ -1.0, 0.0, 1.0 /)\n  WRITE (*,*) ASINH(x)\nEND PROGRAM</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DASINH(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">GNU extension. </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>Inverse function: <a href=\"sinh#SINH\">SINH</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ASINH.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ASINH.html</a>\n  </p>\n</div>\n","associated":"<h1 class=\"section\" id=\"ASSOCIATED\">8.20 <code>ASSOCIATED</code> — Status of a pointer or pointer/target pair</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>ASSOCIATED(POINTER [, TARGET])</code> determines the status of the pointer <var>POINTER</var> or if <var>POINTER</var> is associated with the target <var>TARGET</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = ASSOCIATED(POINTER [, TARGET])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>POINTER</var> </td>\n<td valign=\"top\" width=\"70%\">\n<var>POINTER</var> shall have the <code>POINTER</code> attribute and it can be of any type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>TARGET</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) <var>TARGET</var> shall be a pointer or a target. It must have the same type, kind type parameter, and array rank as <var>POINTER</var>. </td>\n</tr>\n</table> The association status of neither <var>POINTER</var> nor <var>TARGET</var> shall be undefined. </dd>\n<dt>Return value:</dt>\n<dd>\n<code>ASSOCIATED(POINTER)</code> returns a scalar value of type <code>LOGICAL(4)</code>. There are several cases: <dl> <dt>(A) When the optional <var>TARGET</var> is not present then</dt>\n<dd>\n<code>ASSOCIATED(POINTER)</code> is true if <var>POINTER</var> is associated with a target; otherwise, it returns false. </dd>\n<dt>(B) If <var>TARGET</var> is present and a scalar target, the result is true if</dt>\n<dd>\n<var>TARGET</var> is not a zero-sized storage sequence and the target associated with <var>POINTER</var> occupies the same storage units. If <var>POINTER</var> is disassociated, the result is false. </dd>\n<dt>(C) If <var>TARGET</var> is present and an array target, the result is true if</dt>\n<dd>\n<var>TARGET</var> and <var>POINTER</var> have the same shape, are not zero-sized arrays, are arrays whose elements are not zero-sized storage sequences, and <var>TARGET</var> and <var>POINTER</var> occupy the same storage units in array element order. As in case(B), the result is false, if <var>POINTER</var> is disassociated. </dd>\n<dt>(D) If <var>TARGET</var> is present and an scalar pointer, the result is true</dt>\n<dd>if <var>TARGET</var> is associated with <var>POINTER</var>, the target associated with <var>TARGET</var> are not zero-sized storage sequences and occupy the same storage units. The result is false, if either <var>TARGET</var> or <var>POINTER</var> is disassociated. </dd>\n<dt>(E) If <var>TARGET</var> is present and an array pointer, the result is true if</dt>\n<dd>target associated with <var>POINTER</var> and the target associated with <var>TARGET</var> have the same shape, are not zero-sized arrays, are arrays whose elements are not zero-sized storage sequences, and <var>TARGET</var> and <var>POINTER</var> occupy the same storage units in array element order. The result is false, if either <var>TARGET</var> or <var>POINTER</var> is disassociated. </dd>\n</dl> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_associated\n   implicit none\n   real, target  :: tgt(2) = (/1., 2./)\n   real, pointer :: ptr(:)\n   ptr =&gt; tgt\n   if (associated(ptr)     .eqv. .false.) call abort\n   if (associated(ptr,tgt) .eqv. .false.) call abort\nend program test_associated</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"null#NULL\">NULL</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ASSOCIATED.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ASSOCIATED.html</a>\n  </p>\n</div>\n","atan":"<h1 class=\"section\" id=\"ATAN\">8.21 <code>ATAN</code> — Arctangent function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>ATAN(X)</code> computes the arctangent of <var>X</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later, for a complex argument and for two arguments Fortran 2008 or later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = ATAN(X)</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = ATAN(Y, X)</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL</code> or <code>COMPLEX</code>; if <var>Y</var> is present, <var>X</var> shall be REAL. </td>\n</tr>\n<tr align=\"left\"><td valign=\"top\" width=\"15%\">\n<var>Y</var> shall be of the same type and kind as <var>X</var>. </td></tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of the same type and kind as <var>X</var>. If <var>Y</var> is present, the result is identical to <code>ATAN2(Y,X)</code>. Otherwise, it the arcus tangent of <var>X</var>, where the real part of the result is in radians and lies in the range -\\pi/2 \\leq \\Re \\atan(x) \\leq \\pi/2. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_atan\n  real(8) :: x = 2.866_8\n  x = atan(x)\nend program test_atan</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>ATAN(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DATAN(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>Inverse function: <a href=\"tan#TAN\">TAN</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ATAN.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ATAN.html</a>\n  </p>\n</div>\n","atan2":"<h1 class=\"section\" id=\"ATAN2\">8.22 <code>ATAN2</code> — Arctangent function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>ATAN2(Y, X)</code> computes the principal value of the argument function of the complex number X + i Y. This function can be used to transform from Cartesian into polar coordinates and allows to determine the angle in the correct quadrant. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = ATAN2(Y, X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>Y</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type and kind type parameter shall be the same as <var>Y</var>. If <var>Y</var> is zero, then <var>X</var> must be nonzero. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value has the same type and kind type parameter as <var>Y</var>. It is the principal value of the complex number X + i Y. If <var>X</var> is nonzero, then it lies in the range -\\pi \\le \\atan (x) \\leq \\pi. The sign is positive if <var>Y</var> is positive. If <var>Y</var> is zero, then the return value is zero if <var>X</var> is strictly positive, \\pi if <var>X</var> is negative and <var>Y</var> is positive zero (or the processor does not handle signed zeros), and -\\pi if <var>X</var> is negative and <var>Y</var> is negative zero. Finally, if <var>X</var> is zero, then the magnitude of the result is \\pi/2. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_atan2\n  real(4) :: x = 1.e0_4, y = 0.5e0_4\n  x = atan2(y,x)\nend program test_atan2</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>ATAN2(X, Y)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4) X, Y</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DATAN2(X, Y)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) X, Y</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n</table> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ATAN2.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ATAN2.html</a>\n  </p>\n</div>\n","atanh":"<h1 class=\"section\" id=\"ATANH\">8.23 <code>ATANH</code> — Inverse hyperbolic tangent function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>ATANH(X)</code> computes the inverse hyperbolic tangent of <var>X</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = ATANH(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL</code> or <code>COMPLEX</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value has same type and kind as <var>X</var>. If <var>X</var> is complex, the imaginary part of the result is in radians and lies between -\\pi/2 \\leq \\Im \\atanh(x) \\leq \\pi/2. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_atanh\n  REAL, DIMENSION(3) :: x = (/ -1.0, 0.0, 1.0 /)\n  WRITE (*,*) ATANH(x)\nEND PROGRAM</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DATANH(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">GNU extension </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>Inverse function: <a href=\"tanh#TANH\">TANH</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ATANH.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ATANH.html</a>\n  </p>\n</div>\n","atomic_005fdefine":"<h1 class=\"section\" id=\"ATOMIC_005fDEFINE\">8.24 <code>ATOMIC_DEFINE</code> — Setting a variable atomically</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>ATOMIC_DEFINE(ATOM, VALUE)</code> defines the variable <var>ATOM</var> with the value <var>VALUE</var> atomically. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Atomic subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL ATOMIC_DEFINE(ATOM, VALUE)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>ATOM</var> </td>\n<td valign=\"top\" width=\"70%\">Scalar coarray or coindexed variable of either integer type with <code>ATOMIC_INT_KIND</code> kind or logical type with <code>ATOMIC_LOGICAL_KIND</code> kind. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>VALURE</var> </td>\n<td valign=\"top\" width=\"70%\">Scalar and of the same type as <var>ATOM</var>. If the kind is different, the value is converted to the kind of <var>ATOM</var>. </td>\n</tr>\n</table> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program atomic\n  use iso_fortran_env\n  integer(atomic_int_kind) :: atom[*]\n  call atomic_define (atom[1], this_image())\nend program atomic</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"atomic_005fref#ATOMIC_005fREF\">ATOMIC_REF</a>, <a href=\"iso_005ffortran_005fenv#ISO_005fFORTRAN_005fENV\">ISO_FORTRAN_ENV</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ATOMIC_005fDEFINE.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ATOMIC_005fDEFINE.html</a>\n  </p>\n</div>\n","atomic_005fref":"<h1 class=\"section\" id=\"ATOMIC_005fREF\">8.25 <code>ATOMIC_REF</code> — Obtaining the value of a variable atomically</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>ATOMIC_DEFINE(ATOM, VALUE)</code> atomically assigns the value of the variable <var>ATOM</var> to <var>VALUE</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Atomic subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL ATOMIC_REF(VALUE, ATOM)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>VALURE</var> </td>\n<td valign=\"top\" width=\"70%\">Scalar and of the same type as <var>ATOM</var>. If the kind is different, the value is converted to the kind of <var>ATOM</var>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>ATOM</var> </td>\n<td valign=\"top\" width=\"70%\">Scalar coarray or coindexed variable of either integer type with <code>ATOMIC_INT_KIND</code> kind or logical type with <code>ATOMIC_LOGICAL_KIND</code> kind. </td>\n</tr>\n</table> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program atomic\n  use iso_fortran_env\n  logical(atomic_logical_kind) :: atom[*]\n  logical :: val\n  call atomic_ref (atom, .false.)\n  ! ...\n  call atomic_ref (atom, val)\n  if (val) then\n    print *, \"Obtained\"\n  end if\nend program atomic</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"atomic_005fdefine#ATOMIC_005fDEFINE\">ATOMIC_DEFINE</a>, <a href=\"iso_005ffortran_005fenv#ISO_005fFORTRAN_005fENV\">ISO_FORTRAN_ENV</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ATOMIC_005fREF.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ATOMIC_005fREF.html</a>\n  </p>\n</div>\n","backtrace":"<h1 class=\"section\" id=\"BACKTRACE\">8.26 <code>BACKTRACE</code> — Show a backtrace</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>BACKTRACE</code> shows a backtrace at an arbitrary place in user code. Program execution continues normally afterwards. The backtrace information is printed to the unit corresponding to <code>ERROR_UNIT</code> in <code>ISO_FORTRAN_ENV</code>. </dd>\n<dt>Standard:</dt>\n<dd>GNU Extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL BACKTRACE</code> </dd>\n<dt>Arguments:</dt>\n<dd>None </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"abort#ABORT\">ABORT</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/BACKTRACE.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/BACKTRACE.html</a>\n  </p>\n</div>\n","bessel_005fj0":"<h1 class=\"section\" id=\"BESSEL_005fJ0\">8.27 <code>BESSEL_J0</code> — Bessel function of the first kind of order 0</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>BESSEL_J0(X)</code> computes the Bessel function of the first kind of order 0 of <var>X</var>. This function is available under the name <code>BESJ0</code> as a GNU extension. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = BESSEL_J0(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL</code>, and it shall be scalar. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>REAL</code> and lies in the range - 0.4027... \\leq Bessel (0,x) \\leq 1. It has the same kind as <var>X</var>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_besj0\n  real(8) :: x = 0.0_8\n  x = bessel_j0(x)\nend program test_besj0</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DBESJ0(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">GNU extension </td>\n</tr>\n</table> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/BESSEL_005fJ0.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/BESSEL_005fJ0.html</a>\n  </p>\n</div>\n","bessel_005fj1":"<h1 class=\"section\" id=\"BESSEL_005fJ1\">8.28 <code>BESSEL_J1</code> — Bessel function of the first kind of order 1</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>BESSEL_J1(X)</code> computes the Bessel function of the first kind of order 1 of <var>X</var>. This function is available under the name <code>BESJ1</code> as a GNU extension. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = BESSEL_J1(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL</code>, and it shall be scalar. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>REAL</code> and it lies in the range - 0.5818... \\leq Bessel (0,x) \\leq 0.5818 . It has the same kind as <var>X</var>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_besj1\n  real(8) :: x = 1.0_8\n  x = bessel_j1(x)\nend program test_besj1</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DBESJ1(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">GNU extension </td>\n</tr>\n</table> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/BESSEL_005fJ1.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/BESSEL_005fJ1.html</a>\n  </p>\n</div>\n","bessel_005fjn":"<h1 class=\"section\" id=\"BESSEL_005fJN\">8.29 <code>BESSEL_JN</code> — Bessel function of the first kind</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>BESSEL_JN(N, X)</code> computes the Bessel function of the first kind of order <var>N</var> of <var>X</var>. This function is available under the name <code>BESJN</code> as a GNU extension. If <var>N</var> and <var>X</var> are arrays, their ranks and shapes shall conform. <p><code>BESSEL_JN(N1, N2, X)</code> returns an array with the Bessel functions of the first kind of the orders <var>N1</var> to <var>N2</var>. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later, negative <var>N</var> is allowed as GNU extension </dd>\n<dt>Class:</dt>\n<dd>Elemental function, except for the transformational function <code>BESSEL_JN(N1, N2, X)</code> </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = BESSEL_JN(N, X)</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = BESSEL_JN(N1, N2, X)</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>N</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar or an array of type <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>N1</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a non-negative scalar of type <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>N2</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a non-negative scalar of type <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar or an array of type <code>REAL</code>; for <code>BESSEL_JN(N1, N2, X)</code> it shall be scalar. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is a scalar of type <code>REAL</code>. It has the same kind as <var>X</var>. </dd>\n<dt>Note:</dt>\n<dd>The transformational function uses a recurrence algorithm which might, for some values of <var>X</var>, lead to different results than calls to the elemental function. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_besjn\n  real(8) :: x = 1.0_8\n  x = bessel_jn(5,x)\nend program test_besjn</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DBESJN(N, X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>INTEGER N</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">GNU extension </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\"></td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) X</code> </td>\n<td valign=\"top\" width=\"20%\"></td>\n<td valign=\"top\" width=\"25%\"> </td>\n</tr>\n</table> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/BESSEL_005fJN.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/BESSEL_005fJN.html</a>\n  </p>\n</div>\n","bessel_005fy0":"<h1 class=\"section\" id=\"BESSEL_005fY0\">8.30 <code>BESSEL_Y0</code> — Bessel function of the second kind of order 0</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>BESSEL_Y0(X)</code> computes the Bessel function of the second kind of order 0 of <var>X</var>. This function is available under the name <code>BESY0</code> as a GNU extension. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = BESSEL_Y0(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL</code>, and it shall be scalar. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is a scalar of type <code>REAL</code>. It has the same kind as <var>X</var>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_besy0\n  real(8) :: x = 0.0_8\n  x = bessel_y0(x)\nend program test_besy0</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\"><code>DBESY0(X)</code></td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">GNU extension </td>\n</tr>\n</table> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/BESSEL_005fY0.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/BESSEL_005fY0.html</a>\n  </p>\n</div>\n","bessel_005fy1":"<h1 class=\"section\" id=\"BESSEL_005fY1\">8.31 <code>BESSEL_Y1</code> — Bessel function of the second kind of order 1</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>BESSEL_Y1(X)</code> computes the Bessel function of the second kind of order 1 of <var>X</var>. This function is available under the name <code>BESY1</code> as a GNU extension. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = BESSEL_Y1(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL</code>, and it shall be scalar. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is a scalar of type <code>REAL</code>. It has the same kind as <var>X</var>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_besy1\n  real(8) :: x = 1.0_8\n  x = bessel_y1(x)\nend program test_besy1</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\"><code>DBESY1(X)</code></td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">GNU extension </td>\n</tr>\n</table> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/BESSEL_005fY1.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/BESSEL_005fY1.html</a>\n  </p>\n</div>\n","bessel_005fyn":"<h1 class=\"section\" id=\"BESSEL_005fYN\">8.32 <code>BESSEL_YN</code> — Bessel function of the second kind</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>BESSEL_YN(N, X)</code> computes the Bessel function of the second kind of order <var>N</var> of <var>X</var>. This function is available under the name <code>BESYN</code> as a GNU extension. If <var>N</var> and <var>X</var> are arrays, their ranks and shapes shall conform. <p><code>BESSEL_YN(N1, N2, X)</code> returns an array with the Bessel functions of the first kind of the orders <var>N1</var> to <var>N2</var>. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later, negative <var>N</var> is allowed as GNU extension </dd>\n<dt>Class:</dt>\n<dd>Elemental function, except for the transformational function <code>BESSEL_YN(N1, N2, X)</code> </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = BESSEL_YN(N, X)</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = BESSEL_YN(N1, N2, X)</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>N</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar or an array of type <code>INTEGER</code> . </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>N1</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a non-negative scalar of type <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>N2</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a non-negative scalar of type <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar or an array of type <code>REAL</code>; for <code>BESSEL_YN(N1, N2, X)</code> it shall be scalar. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is a scalar of type <code>REAL</code>. It has the same kind as <var>X</var>. </dd>\n<dt>Note:</dt>\n<dd>The transformational function uses a recurrence algorithm which might, for some values of <var>X</var>, lead to different results than calls to the elemental function. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_besyn\n  real(8) :: x = 1.0_8\n  x = bessel_yn(5,x)\nend program test_besyn</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DBESYN(N,X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>INTEGER N</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">GNU extension </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\"></td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) X</code> </td>\n<td valign=\"top\" width=\"20%\"></td>\n<td valign=\"top\" width=\"25%\"> </td>\n</tr>\n</table> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/BESSEL_005fYN.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/BESSEL_005fYN.html</a>\n  </p>\n</div>\n","bge":"<h1 class=\"section\" id=\"BGE\">8.33 <code>BGE</code> — Bitwise greater than or equal to</h1> \n<dl> <dt>Description:</dt>\n<dd>Determines whether an integral is a bitwise greater than or equal to another. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = BGE(I, J)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of <code>INTEGER</code> type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>J</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of <code>INTEGER</code> type, and of the same kind as <var>I</var>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>LOGICAL</code> and of the default kind. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"bgt#BGT\">BGT</a>, <a href=\"ble#BLE\">BLE</a>, <a href=\"blt#BLT\">BLT</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/BGE.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/BGE.html</a>\n  </p>\n</div>\n","bgt":"<h1 class=\"section\" id=\"BGT\">8.34 <code>BGT</code> — Bitwise greater than</h1> \n<dl> <dt>Description:</dt>\n<dd>Determines whether an integral is a bitwise greater than another. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = BGT(I, J)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of <code>INTEGER</code> type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>J</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of <code>INTEGER</code> type, and of the same kind as <var>I</var>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>LOGICAL</code> and of the default kind. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"bge#BGE\">BGE</a>, <a href=\"ble#BLE\">BLE</a>, <a href=\"blt#BLT\">BLT</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/BGT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/BGT.html</a>\n  </p>\n</div>\n","bit_005fsize":"<h1 class=\"section\" id=\"BIT_005fSIZE\">8.35 <code>BIT_SIZE</code> — Bit size inquiry function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>BIT_SIZE(I)</code> returns the number of bits (integer precision plus sign bit) represented by the type of <var>I</var>. The result of <code>BIT_SIZE(I)</code> is independent of the actual value of <var>I</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = BIT_SIZE(I)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_bit_size\n    integer :: i = 123\n    integer :: size\n    size = bit_size(i)\n    print *, size\nend program test_bit_size</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/BIT_005fSIZE.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/BIT_005fSIZE.html</a>\n  </p>\n</div>\n","ble":"<h1 class=\"section\" id=\"BLE\">8.36 <code>BLE</code> — Bitwise less than or equal to</h1> \n<dl> <dt>Description:</dt>\n<dd>Determines whether an integral is a bitwise less than or equal to another. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = BLE(I, J)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of <code>INTEGER</code> type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>J</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of <code>INTEGER</code> type, and of the same kind as <var>I</var>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>LOGICAL</code> and of the default kind. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"bgt#BGT\">BGT</a>, <a href=\"bge#BGE\">BGE</a>, <a href=\"blt#BLT\">BLT</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/BLE.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/BLE.html</a>\n  </p>\n</div>\n","blt":"<h1 class=\"section\" id=\"BLT\">8.37 <code>BLT</code> — Bitwise less than</h1> \n<dl> <dt>Description:</dt>\n<dd>Determines whether an integral is a bitwise less than another. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = BLT(I, J)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of <code>INTEGER</code> type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>J</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of <code>INTEGER</code> type, and of the same kind as <var>I</var>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>LOGICAL</code> and of the default kind. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"bge#BGE\">BGE</a>, <a href=\"bgt#BGT\">BGT</a>, <a href=\"ble#BLE\">BLE</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/BLT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/BLT.html</a>\n  </p>\n</div>\n","btest":"<h1 class=\"section\" id=\"BTEST\">8.38 <code>BTEST</code> — Bit test function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>BTEST(I,POS)</code> returns logical <code>.TRUE.</code> if the bit at <var>POS</var> in <var>I</var> is set. The counting of the bits starts at 0. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = BTEST(I, POS)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>POS</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>LOGICAL</code> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_btest\n    integer :: i = 32768 + 1024 + 64\n    integer :: pos\n    logical :: bool\n    do pos=0,16\n        bool = btest(i, pos)\n        print *, pos, bool\n    end do\nend program test_btest</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/BTEST.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/BTEST.html</a>\n  </p>\n</div>\n","c_005fassociated":"<h1 class=\"section\" id=\"C_005fASSOCIATED\">8.39 <code>C_ASSOCIATED</code> — Status of a C pointer</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>C_ASSOCIATED(c_ptr_1[, c_ptr_2])</code> determines the status of the C pointer <var>c_ptr_1</var> or if <var>c_ptr_1</var> is associated with the target <var>c_ptr_2</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2003 and later </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = C_ASSOCIATED(c_ptr_1[, c_ptr_2])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>c_ptr_1</var> </td>\n<td valign=\"top\" width=\"70%\">Scalar of the type <code>C_PTR</code> or <code>C_FUNPTR</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>c_ptr_2</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Scalar of the same type as <var>c_ptr_1</var>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>LOGICAL</code>; it is <code>.false.</code> if either <var>c_ptr_1</var> is a C NULL pointer or if <var>c_ptr1</var> and <var>c_ptr_2</var> point to different addresses. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">subroutine association_test(a,b)\n  use iso_c_binding, only: c_associated, c_loc, c_ptr\n  implicit none\n  real, pointer :: a\n  type(c_ptr) :: b\n  if(c_associated(b, c_loc(a))) &amp;\n     stop 'b and a do not point to same target'\nend subroutine association_test</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"c_005floc#C_005fLOC\">C_LOC</a>, <a href=\"c_005ffunloc#C_005fFUNLOC\">C_FUNLOC</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/C_005fASSOCIATED.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/C_005fASSOCIATED.html</a>\n  </p>\n</div>\n","c_005ff_005fpointer":"<h1 class=\"section\" id=\"C_005fF_005fPOINTER\">8.40 <code>C_F_POINTER</code> — Convert C into Fortran pointer</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>C_F_POINTER(CPTR, FPTR[, SHAPE])</code> assigns the target of the C pointer <var>CPTR</var> to the Fortran pointer <var>FPTR</var> and specifies its shape. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2003 and later </dd>\n<dt>Class:</dt>\n<dd>Subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL C_F_POINTER(CPTR, FPTR[, SHAPE])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>CPTR</var> </td>\n<td valign=\"top\" width=\"70%\">scalar of the type <code>C_PTR</code>. It is <code>INTENT(IN)</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>FPTR</var> </td>\n<td valign=\"top\" width=\"70%\">pointer interoperable with <var>cptr</var>. It is <code>INTENT(OUT)</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>SHAPE</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Rank-one array of type <code>INTEGER</code> with <code>INTENT(IN)</code>. It shall be present if and only if <var>fptr</var> is an array. The size must be equal to the rank of <var>fptr</var>. </td>\n</tr>\n</table> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program main\n  use iso_c_binding\n  implicit none\n  interface\n    subroutine my_routine(p) bind(c,name='myC_func')\n      import :: c_ptr\n      type(c_ptr), intent(out) :: p\n    end subroutine\n  end interface\n  type(c_ptr) :: cptr\n  real,pointer :: a(:)\n  call my_routine(cptr)\n  call c_f_pointer(cptr, a, [12])\nend program main</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"c_005floc#C_005fLOC\">C_LOC</a>, <a href=\"c_005ff_005fprocpointer#C_005fF_005fPROCPOINTER\">C_F_PROCPOINTER</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/C_005fF_005fPOINTER.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/C_005fF_005fPOINTER.html</a>\n  </p>\n</div>\n","c_005ff_005fprocpointer":"<h1 class=\"section\" id=\"C_005fF_005fPROCPOINTER\">8.41 <code>C_F_PROCPOINTER</code> — Convert C into Fortran procedure pointer</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>C_F_PROCPOINTER(CPTR, FPTR)</code> Assign the target of the C function pointer <var>CPTR</var> to the Fortran procedure pointer <var>FPTR</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2003 and later </dd>\n<dt>Class:</dt>\n<dd>Subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL C_F_PROCPOINTER(cptr, fptr)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>CPTR</var> </td>\n<td valign=\"top\" width=\"70%\">scalar of the type <code>C_FUNPTR</code>. It is <code>INTENT(IN)</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>FPTR</var> </td>\n<td valign=\"top\" width=\"70%\">procedure pointer interoperable with <var>cptr</var>. It is <code>INTENT(OUT)</code>. </td>\n</tr>\n</table> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program main\n  use iso_c_binding\n  implicit none\n  abstract interface\n    function func(a)\n      import :: c_float\n      real(c_float), intent(in) :: a\n      real(c_float) :: func\n    end function\n  end interface\n  interface\n     function getIterFunc() bind(c,name=\"getIterFunc\")\n       import :: c_funptr\n       type(c_funptr) :: getIterFunc\n     end function\n  end interface\n  type(c_funptr) :: cfunptr\n  procedure(func), pointer :: myFunc\n  cfunptr = getIterFunc()\n  call c_f_procpointer(cfunptr, myFunc)\nend program main</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"c_005floc#C_005fLOC\">C_LOC</a>, <a href=\"c_005ff_005fpointer#C_005fF_005fPOINTER\">C_F_POINTER</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/C_005fF_005fPROCPOINTER.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/C_005fF_005fPROCPOINTER.html</a>\n  </p>\n</div>\n","c_005ffunloc":"<h1 class=\"section\" id=\"C_005fFUNLOC\">8.42 <code>C_FUNLOC</code> — Obtain the C address of a procedure</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>C_FUNLOC(x)</code> determines the C address of the argument. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2003 and later </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = C_FUNLOC(x)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>x</var> </td>\n<td valign=\"top\" width=\"70%\">Interoperable function or pointer to such function. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>C_FUNPTR</code> and contains the C address of the argument. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">module x\n  use iso_c_binding\n  implicit none\ncontains\n  subroutine sub(a) bind(c)\n    real(c_float) :: a\n    a = sqrt(a)+5.0\n  end subroutine sub\nend module x\nprogram main\n  use iso_c_binding\n  use x\n  implicit none\n  interface\n    subroutine my_routine(p) bind(c,name='myC_func')\n      import :: c_funptr\n      type(c_funptr), intent(in) :: p\n    end subroutine\n  end interface\n  call my_routine(c_funloc(sub))\nend program main</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"c_005fassociated#C_005fASSOCIATED\">C_ASSOCIATED</a>, <a href=\"c_005floc#C_005fLOC\">C_LOC</a>, <a href=\"c_005ff_005fpointer#C_005fF_005fPOINTER\">C_F_POINTER</a>, <a href=\"c_005ff_005fprocpointer#C_005fF_005fPROCPOINTER\">C_F_PROCPOINTER</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/C_005fFUNLOC.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/C_005fFUNLOC.html</a>\n  </p>\n</div>\n","c_005floc":"<h1 class=\"section\" id=\"C_005fLOC\">8.43 <code>C_LOC</code> — Obtain the C address of an object</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>C_LOC(X)</code> determines the C address of the argument. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2003 and later </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = C_LOC(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"10%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"75%\">Shall have either the POINTER or TARGET attribute. It shall not be a coindexed object. It shall either be a variable with interoperable type and kind type parameters, or be a scalar, nonpolymorphic variable with no length type parameters. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>C_PTR</code> and contains the C address of the argument. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">subroutine association_test(a,b)\n  use iso_c_binding, only: c_associated, c_loc, c_ptr\n  implicit none\n  real, pointer :: a\n  type(c_ptr) :: b\n  if(c_associated(b, c_loc(a))) &amp;\n     stop 'b and a do not point to same target'\nend subroutine association_test</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"c_005fassociated#C_005fASSOCIATED\">C_ASSOCIATED</a>, <a href=\"c_005ffunloc#C_005fFUNLOC\">C_FUNLOC</a>, <a href=\"c_005ff_005fpointer#C_005fF_005fPOINTER\">C_F_POINTER</a>, <a href=\"c_005ff_005fprocpointer#C_005fF_005fPROCPOINTER\">C_F_PROCPOINTER</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/C_005fLOC.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/C_005fLOC.html</a>\n  </p>\n</div>\n","c_005fsizeof":"<h1 class=\"section\" id=\"C_005fSIZEOF\">8.44 <code>C_SIZEOF</code> — Size in bytes of an expression</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>C_SIZEOF(X)</code> calculates the number of bytes of storage the expression <code>X</code> occupies. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 </dd>\n<dt>Class:</dt>\n<dd>Inquiry function of the module <code>ISO_C_BINDING</code> </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>N = C_SIZEOF(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The argument shall be an interoperable data entity. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type integer and of the system-dependent kind <code>C_SIZE_T</code> (from the <code>ISO_C_BINDING</code> module). Its value is the number of bytes occupied by the argument. If the argument has the <code>POINTER</code> attribute, the number of bytes of the storage area pointed to is returned. If the argument is of a derived type with <code>POINTER</code> or <code>ALLOCATABLE</code> components, the return value does not account for the sizes of the data pointed to by these components. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">use iso_c_binding\ninteger(c_int) :: i\nreal(c_float) :: r, s(5)\nprint *, (c_sizeof(s)/c_sizeof(r) == 5)\nend</pre> <p>The example will print <code>.TRUE.</code> unless you are using a platform where default <code>REAL</code> variables are unusually padded. </p>\n</dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"sizeof#SIZEOF\">SIZEOF</a>, <a href=\"storage_005fsize#STORAGE_005fSIZE\">STORAGE_SIZE</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/C_005fSIZEOF.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/C_005fSIZEOF.html</a>\n  </p>\n</div>\n","ceiling":"<h1 class=\"section\" id=\"CEILING\">8.45 <code>CEILING</code> — Integer ceiling function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>CEILING(A)</code> returns the least integer greater than or equal to <var>A</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = CEILING(A [, KIND])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>A</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>KIND</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) An <code>INTEGER</code> initialization expression indicating the kind parameter of the result. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER(KIND)</code> if <var>KIND</var> is present and a default-kind <code>INTEGER</code> otherwise. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_ceiling\n    real :: x = 63.29\n    real :: y = -63.59\n    print *, ceiling(x) ! returns 64\n    print *, ceiling(y) ! returns -63\nend program test_ceiling</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"floor#FLOOR\">FLOOR</a>, <a href=\"nint#NINT\">NINT</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/CEILING.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/CEILING.html</a>\n  </p>\n</div>\n","char":"<h1 class=\"section\" id=\"CHAR\">8.46 <code>CHAR</code> — Character conversion function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>CHAR(I [, KIND])</code> returns the character represented by the integer <var>I</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = CHAR(I [, KIND])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>KIND</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) An <code>INTEGER</code> initialization expression indicating the kind parameter of the result. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>CHARACTER(1)</code> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_char\n    integer :: i = 74\n    character(1) :: c\n    c = char(i)\n    print *, i, c ! returns 'J'\nend program test_char</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>CHAR(I)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>INTEGER I</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>CHARACTER(LEN=1)</code> </td>\n<td valign=\"top\" width=\"25%\">F77 and later </td>\n</tr>\n</table> </dd>\n<dt>Note:</dt>\n<dd>See <a href=\"ichar#ICHAR\">ICHAR</a> for a discussion of converting between numerical values and formatted string representations. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"achar#ACHAR\">ACHAR</a>, <a href=\"iachar#IACHAR\">IACHAR</a>, <a href=\"ichar#ICHAR\">ICHAR</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/CHAR.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/CHAR.html</a>\n  </p>\n</div>\n","chdir":"<h1 class=\"section\" id=\"CHDIR\">8.47 <code>CHDIR</code> — Change working directory</h1> \n<dl> <dt>Description:</dt>\n<dd>Change current working directory to a specified path. <p>This intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine, function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>CALL CHDIR(NAME [, STATUS])</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>STATUS = CHDIR(NAME)</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>NAME</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>CHARACTER</code> of default kind and shall specify a valid path within the file system. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STATUS</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) <code>INTEGER</code> status flag of the default kind. Returns 0 on success, and a system specific and nonzero error code otherwise. </td>\n</tr>\n</table> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_chdir\n  CHARACTER(len=255) :: path\n  CALL getcwd(path)\n  WRITE(*,*) TRIM(path)\n  CALL chdir(\"/tmp\")\n  CALL getcwd(path)\n  WRITE(*,*) TRIM(path)\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"getcwd#GETCWD\">GETCWD</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/CHDIR.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/CHDIR.html</a>\n  </p>\n</div>\n","chmod":"<h1 class=\"section\" id=\"CHMOD\">8.48 <code>CHMOD</code> — Change access permissions of files</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>CHMOD</code> changes the permissions of a file. <p>This intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine, function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>CALL CHMOD(NAME, MODE[, STATUS])</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>STATUS = CHMOD(NAME, MODE)</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"> <tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>NAME</var> </td>\n<td valign=\"top\" width=\"70%\">Scalar <code>CHARACTER</code> of default kind with the file name. Trailing blanks are ignored unless the character <code>achar(0)</code> is present, then all characters up to and excluding <code>achar(0)</code> are used as the file name. \n</td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>MODE</var> </td>\n<td valign=\"top\" width=\"70%\">Scalar <code>CHARACTER</code> of default kind giving the file permission. <var>MODE</var> uses the same syntax as the <code>chmod</code> utility as defined by the POSIX standard. The argument shall either be a string of a nonnegative octal number or a symbolic mode. \n</td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STATUS</var> </td>\n<td valign=\"top\" width=\"70%\">(optional) scalar <code>INTEGER</code>, which is <code>0</code> on success and nonzero otherwise. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>In either syntax, <var>STATUS</var> is set to <code>0</code> on success and nonzero otherwise. </dd>\n<dt>Example:</dt>\n<dd>\n<code>CHMOD</code> as subroutine <pre class=\"smallexample\">program chmod_test\n  implicit none\n  integer :: status\n  call chmod('test.dat','u+x',status)\n  print *, 'Status: ', status\nend program chmod_test</pre> <p><code>CHMOD</code> as function: </p>\n<pre class=\"smallexample\">program chmod_test\n  implicit none\n  integer :: status\n  status = chmod('test.dat','u+x')\n  print *, 'Status: ', status\nend program chmod_test</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/CHMOD.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/CHMOD.html</a>\n  </p>\n</div>\n","cmplx":"<h1 class=\"section\" id=\"CMPLX\">8.49 <code>CMPLX</code> — Complex conversion function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>CMPLX(X [, Y [, KIND]])</code> returns a complex number where <var>X</var> is converted to the real component. If <var>Y</var> is present it is converted to the imaginary component. If <var>Y</var> is not present then the imaginary component is set to 0.0. If <var>X</var> is complex then <var>Y</var> must not be present. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = CMPLX(X [, Y [, KIND]])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type may be <code>INTEGER</code>, <code>REAL</code>, or <code>COMPLEX</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>Y</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional; only allowed if <var>X</var> is not <code>COMPLEX</code>.) May be <code>INTEGER</code> or <code>REAL</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>KIND</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) An <code>INTEGER</code> initialization expression indicating the kind parameter of the result. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of <code>COMPLEX</code> type, with a kind equal to <var>KIND</var> if it is specified. If <var>KIND</var> is not specified, the result is of the default <code>COMPLEX</code> kind, regardless of the kinds of <var>X</var> and <var>Y</var>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_cmplx\n    integer :: i = 42\n    real :: x = 3.14\n    complex :: z\n    z = cmplx(i, x)\n    print *, z, cmplx(x)\nend program test_cmplx</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"complex#COMPLEX\">COMPLEX</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/CMPLX.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/CMPLX.html</a>\n  </p>\n</div>\n","command_005fargument_005fcount":"<h1 class=\"section\" id=\"COMMAND_005fARGUMENT_005fCOUNT\">8.50 <code>COMMAND_ARGUMENT_COUNT</code> — Get number of command line arguments</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>COMMAND_ARGUMENT_COUNT</code> returns the number of arguments passed on the command line when the containing program was invoked. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2003 and later </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = COMMAND_ARGUMENT_COUNT()</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\"><td valign=\"top\" width=\"15%\">None </td></tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is an <code>INTEGER</code> of default kind. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_command_argument_count\n    integer :: count\n    count = command_argument_count()\n    print *, count\nend program test_command_argument_count</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"get_005fcommand#GET_005fCOMMAND\">GET_COMMAND</a>, <a href=\"get_005fcommand_005fargument#GET_005fCOMMAND_005fARGUMENT\">GET_COMMAND_ARGUMENT</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/COMMAND_005fARGUMENT_005fCOUNT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/COMMAND_005fARGUMENT_005fCOUNT.html</a>\n  </p>\n</div>\n","compiler_005foptions":"<h1 class=\"section\" id=\"COMPILER_005fOPTIONS\">8.51 <code>COMPILER_OPTIONS</code> — Options passed to the compiler</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>COMPILER_OPTIONS</code> returns a string with the options used for compiling. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 </dd>\n<dt>Class:</dt>\n<dd>Inquiry function of the module <code>ISO_FORTRAN_ENV</code> </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>STR = COMPILER_OPTIONS()</code> </dd>\n<dt>Arguments:</dt>\n<dd>None. </dd>\n<dt>Return value:</dt>\n<dd>The return value is a default-kind string with system-dependent length. It contains the compiler flags used to compile the file, which called the <code>COMPILER_OPTIONS</code> intrinsic. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">use iso_fortran_env\nprint '(4a)', 'This file was compiled by ', &amp;\n              compiler_version(), ' using the options ', &amp;\n              compiler_options()\nend</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"compiler_005fversion#COMPILER_005fVERSION\">COMPILER_VERSION</a>, <a href=\"iso_005ffortran_005fenv#ISO_005fFORTRAN_005fENV\">ISO_FORTRAN_ENV</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/COMPILER_005fOPTIONS.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/COMPILER_005fOPTIONS.html</a>\n  </p>\n</div>\n","compiler_005fversion":"<h1 class=\"section\" id=\"COMPILER_005fVERSION\">8.52 <code>COMPILER_VERSION</code> — Compiler version string</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>COMPILER_VERSION</code> returns a string with the name and the version of the compiler. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 </dd>\n<dt>Class:</dt>\n<dd>Inquiry function of the module <code>ISO_FORTRAN_ENV</code> </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>STR = COMPILER_VERSION()</code> </dd>\n<dt>Arguments:</dt>\n<dd>None. </dd>\n<dt>Return value:</dt>\n<dd>The return value is a default-kind string with system-dependent length. It contains the name of the compiler and its version number. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">use iso_fortran_env\nprint '(4a)', 'This file was compiled by ', &amp;\n              compiler_version(), ' using the options ', &amp;\n              compiler_options()\nend</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"compiler_005foptions#COMPILER_005fOPTIONS\">COMPILER_OPTIONS</a>, <a href=\"iso_005ffortran_005fenv#ISO_005fFORTRAN_005fENV\">ISO_FORTRAN_ENV</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/COMPILER_005fVERSION.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/COMPILER_005fVERSION.html</a>\n  </p>\n</div>\n","complex":"<h1 class=\"section\" id=\"COMPLEX\">8.53 <code>COMPLEX</code> — Complex conversion function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>COMPLEX(X, Y)</code> returns a complex number where <var>X</var> is converted to the real component and <var>Y</var> is converted to the imaginary component. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = COMPLEX(X, Y)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type may be <code>INTEGER</code> or <code>REAL</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>Y</var> </td>\n<td valign=\"top\" width=\"70%\">The type may be <code>INTEGER</code> or <code>REAL</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>If <var>X</var> and <var>Y</var> are both of <code>INTEGER</code> type, then the return value is of default <code>COMPLEX</code> type. <p>If <var>X</var> and <var>Y</var> are of <code>REAL</code> type, or one is of <code>REAL</code> type and one is of <code>INTEGER</code> type, then the return value is of <code>COMPLEX</code> type with a kind equal to that of the <code>REAL</code> argument with the highest precision. </p>\n</dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_complex\n    integer :: i = 42\n    real :: x = 3.14\n    print *, complex(i, x)\nend program test_complex</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"cmplx#CMPLX\">CMPLX</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/COMPLEX.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/COMPLEX.html</a>\n  </p>\n</div>\n","conjg":"<h1 class=\"section\" id=\"CONJG\">8.54 <code>CONJG</code> — Complex conjugate function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>CONJG(Z)</code> returns the conjugate of <var>Z</var>. If <var>Z</var> is <code>(x, y)</code> then the result is <code>(x, -y)</code> </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later, has overloads that are GNU extensions </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>Z = CONJG(Z)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>Z</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>COMPLEX</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>COMPLEX</code>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_conjg\n    complex :: z = (2.0, 3.0)\n    complex(8) :: dz = (2.71_8, -3.14_8)\n    z= conjg(z)\n    print *, z\n    dz = dconjg(dz)\n    print *, dz\nend program test_conjg</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>CONJG(Z)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX Z</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX</code> </td>\n<td valign=\"top\" width=\"25%\">GNU extension </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DCONJG(Z)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(8) Z</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(8)</code> </td>\n<td valign=\"top\" width=\"25%\">GNU extension </td>\n</tr>\n</table> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/CONJG.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/CONJG.html</a>\n  </p>\n</div>\n","cos":"<h1 class=\"section\" id=\"COS\">8.55 <code>COS</code> — Cosine function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>COS(X)</code> computes the cosine of <var>X</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later, has overloads that are GNU extensions </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = COS(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL</code> or <code>COMPLEX</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of the same type and kind as <var>X</var>. The real part of the result is in radians. If <var>X</var> is of the type <code>REAL</code>, the return value lies in the range -1 \\leq \\cos (x) \\leq 1. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_cos\n  real :: x = 0.0\n  x = cos(x)\nend program test_cos</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>COS(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DCOS(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>CCOS(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(4) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>ZCOS(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(8)</code> </td>\n<td valign=\"top\" width=\"25%\">GNU extension </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>CDCOS(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(8)</code> </td>\n<td valign=\"top\" width=\"25%\">GNU extension </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>Inverse function: <a href=\"acos#ACOS\">ACOS</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/COS.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/COS.html</a>\n  </p>\n</div>\n","cosh":"<h1 class=\"section\" id=\"COSH\">8.56 <code>COSH</code> — Hyperbolic cosine function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>COSH(X)</code> computes the hyperbolic cosine of <var>X</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later, for a complex argument Fortran 2008 or later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>X = COSH(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL</code> or <code>COMPLEX</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value has same type and kind as <var>X</var>. If <var>X</var> is complex, the imaginary part of the result is in radians. If <var>X</var> is <code>REAL</code>, the return value has a lower bound of one, \\cosh (x) \\geq 1. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_cosh\n  real(8) :: x = 1.0_8\n  x = cosh(x)\nend program test_cosh</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>COSH(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DCOSH(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>Inverse function: <a href=\"acosh#ACOSH\">ACOSH</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/COSH.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/COSH.html</a>\n  </p>\n</div>\n","count":"<h1 class=\"section\" id=\"COUNT\">8.57 <code>COUNT</code> — Count function</h1> \n<dl> <dt>Description:</dt>\n<dd> Counts the number of <code>.TRUE.</code> elements in a logical <var>MASK</var>, or, if the <var>DIM</var> argument is supplied, counts the number of elements along each row of the array in the <var>DIM</var> direction. If the array has zero size, or all of the elements of <var>MASK</var> are <code>.FALSE.</code>, then the result is <code>0</code>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later, with <var>KIND</var> argument Fortran 2003 and later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = COUNT(MASK [, DIM, KIND])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>MASK</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>LOGICAL</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>DIM</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) The type shall be <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>KIND</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) An <code>INTEGER</code> initialization expression indicating the kind parameter of the result. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> and of kind <var>KIND</var>. If <var>KIND</var> is absent, the return value is of default integer kind. If <var>DIM</var> is present, the result is an array with a rank one less than the rank of <var>ARRAY</var>, and a size corresponding to the shape of <var>ARRAY</var> with the <var>DIM</var> dimension removed. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_count\n    integer, dimension(2,3) :: a, b\n    logical, dimension(2,3) :: mask\n    a = reshape( (/ 1, 2, 3, 4, 5, 6 /), (/ 2, 3 /))\n    b = reshape( (/ 0, 7, 3, 4, 5, 8 /), (/ 2, 3 /))\n    print '(3i3)', a(1,:)\n    print '(3i3)', a(2,:)\n    print *\n    print '(3i3)', b(1,:)\n    print '(3i3)', b(2,:)\n    print *\n    mask = a.ne.b\n    print '(3l3)', mask(1,:)\n    print '(3l3)', mask(2,:)\n    print *\n    print '(3i3)', count(mask)\n    print *\n    print '(3i3)', count(mask, 1)\n    print *\n    print '(3i3)', count(mask, 2)\nend program test_count</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/COUNT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/COUNT.html</a>\n  </p>\n</div>\n","cpu_005ftime":"<h1 class=\"section\" id=\"CPU_005fTIME\">8.58 <code>CPU_TIME</code> — CPU elapsed time in seconds</h1> \n<dl> <dt>Description:</dt>\n<dd>Returns a <code>REAL</code> value representing the elapsed CPU time in seconds. This is useful for testing segments of code to determine execution time. <p>If a time source is available, time will be reported with microsecond resolution. If no time source is available, <var>TIME</var> is set to <code>-1.0</code>. </p>\n<p>Note that <var>TIME</var> may contain a, system dependent, arbitrary offset and may not start with <code>0.0</code>. For <code>CPU_TIME</code>, the absolute value is meaningless, only differences between subsequent calls to this subroutine, as shown in the example below, should be used. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL CPU_TIME(TIME)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>TIME</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL</code> with <code>INTENT(OUT)</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>None </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_cpu_time\n    real :: start, finish\n    call cpu_time(start)\n        ! put code to test here\n    call cpu_time(finish)\n    print '(\"Time = \",f6.3,\" seconds.\")',finish-start\nend program test_cpu_time</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"system_005fclock#SYSTEM_005fCLOCK\">SYSTEM_CLOCK</a>, <a href=\"date_005fand_005ftime#DATE_005fAND_005fTIME\">DATE_AND_TIME</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/CPU_005fTIME.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/CPU_005fTIME.html</a>\n  </p>\n</div>\n","cshift":"<h1 class=\"section\" id=\"CSHIFT\">8.59 <code>CSHIFT</code> — Circular shift elements of an array</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>CSHIFT(ARRAY, SHIFT [, DIM])</code> performs a circular shift on elements of <var>ARRAY</var> along the dimension of <var>DIM</var>. If <var>DIM</var> is omitted it is taken to be <code>1</code>. <var>DIM</var> is a scalar of type <code>INTEGER</code> in the range of 1 \\leq DIM \\leq n) where n is the rank of <var>ARRAY</var>. If the rank of <var>ARRAY</var> is one, then all elements of <var>ARRAY</var> are shifted by <var>SHIFT</var> places. If rank is greater than one, then all complete rank one sections of <var>ARRAY</var> along the given dimension are shifted. Elements shifted out one end of each rank one section are shifted back in the other end. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = CSHIFT(ARRAY, SHIFT [, DIM])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>ARRAY</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an array of any type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>SHIFT</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>DIM</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>Returns an array of same type and rank as the <var>ARRAY</var> argument. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_cshift\n    integer, dimension(3,3) :: a\n    a = reshape( (/ 1, 2, 3, 4, 5, 6, 7, 8, 9 /), (/ 3, 3 /))\n    print '(3i3)', a(1,:)\n    print '(3i3)', a(2,:)\n    print '(3i3)', a(3,:)\n    a = cshift(a, SHIFT=(/1, 2, -1/), DIM=2)\n    print *\n    print '(3i3)', a(1,:)\n    print '(3i3)', a(2,:)\n    print '(3i3)', a(3,:)\nend program test_cshift</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/CSHIFT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/CSHIFT.html</a>\n  </p>\n</div>\n","ctime":"<h1 class=\"section\" id=\"CTIME\">8.60 <code>CTIME</code> — Convert a time into a string</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>CTIME</code> converts a system time value, such as returned by <code>TIME8</code>, to a string. The output will be of the form ‘<code>Sat Aug 19 18:13:14 1995</code>’. <p>This intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine, function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>CALL CTIME(TIME, RESULT)</code>. </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = CTIME(TIME)</code>. </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>TIME</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be of type <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>RESULT</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be of type <code>CHARACTER</code> and of default kind. It is an <code>INTENT(OUT)</code> argument. If the length of this variable is too short for the time and date string to fit completely, it will be blank on procedure return. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The converted date and time as a string. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_ctime\n    integer(8) :: i\n    character(len=30) :: date\n    i = time8()\n\n    ! Do something, main part of the program\n\n    call ctime(i,date)\n    print *, 'Program was started on ', date\nend program test_ctime</pre> </dd>\n<dt>See Also:</dt>\n<dd>\n<a href=\"date_005fand_005ftime#DATE_005fAND_005fTIME\">DATE_AND_TIME</a>, <a href=\"gmtime#GMTIME\">GMTIME</a>, <a href=\"ltime#LTIME\">LTIME</a>, <a href=\"time#TIME\">TIME</a>, <a href=\"time8#TIME8\">TIME8</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/CTIME.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/CTIME.html</a>\n  </p>\n</div>\n","date_005fand_005ftime":"<h1 class=\"section\" id=\"DATE_005fAND_005fTIME\">8.61 <code>DATE_AND_TIME</code> — Date and time subroutine</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>DATE_AND_TIME(DATE, TIME, ZONE, VALUES)</code> gets the corresponding date and time information from the real-time system clock. <var>DATE</var> is <code>INTENT(OUT)</code> and has form ccyymmdd. <var>TIME</var> is <code>INTENT(OUT)</code> and has form hhmmss.sss. <var>ZONE</var> is <code>INTENT(OUT)</code> and has form (+-)hhmm, representing the difference with respect to Coordinated Universal Time (UTC). Unavailable time and date parameters return blanks. <p><var>VALUES</var> is <code>INTENT(OUT)</code> and provides the following: </p>\n\n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"></td>\n<td valign=\"top\" width=\"30%\">\n<code>VALUE(1)</code>: </td>\n<td valign=\"top\" width=\"40%\">The year </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"></td>\n<td valign=\"top\" width=\"30%\">\n<code>VALUE(2)</code>: </td>\n<td valign=\"top\" width=\"40%\">The month </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"></td>\n<td valign=\"top\" width=\"30%\">\n<code>VALUE(3)</code>: </td>\n<td valign=\"top\" width=\"40%\">The day of the month </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"></td>\n<td valign=\"top\" width=\"30%\">\n<code>VALUE(4)</code>: </td>\n<td valign=\"top\" width=\"40%\">Time difference with UTC in minutes </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"></td>\n<td valign=\"top\" width=\"30%\">\n<code>VALUE(5)</code>: </td>\n<td valign=\"top\" width=\"40%\">The hour of the day </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"></td>\n<td valign=\"top\" width=\"30%\">\n<code>VALUE(6)</code>: </td>\n<td valign=\"top\" width=\"40%\">The minutes of the hour </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"></td>\n<td valign=\"top\" width=\"30%\">\n<code>VALUE(7)</code>: </td>\n<td valign=\"top\" width=\"40%\">The seconds of the minute </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"></td>\n<td valign=\"top\" width=\"30%\">\n<code>VALUE(8)</code>: </td>\n<td valign=\"top\" width=\"40%\">The milliseconds of the second </td>\n</tr>\n</table> </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL DATE_AND_TIME([DATE, TIME, ZONE, VALUES])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>DATE</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) The type shall be <code>CHARACTER(LEN=8)</code> or larger, and of default kind. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>TIME</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) The type shall be <code>CHARACTER(LEN=10)</code> or larger, and of default kind. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>ZONE</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) The type shall be <code>CHARACTER(LEN=5)</code> or larger, and of default kind. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><var>VALUES</var></td>\n<td valign=\"top\" width=\"70%\">(Optional) The type shall be <code>INTEGER(8)</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>None </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_time_and_date\n    character(8)  :: date\n    character(10) :: time\n    character(5)  :: zone\n    integer,dimension(8) :: values\n    ! using keyword arguments\n    call date_and_time(date,time,zone,values)\n    call date_and_time(DATE=date,ZONE=zone)\n    call date_and_time(TIME=time)\n    call date_and_time(VALUES=values)\n    print '(a,2x,a,2x,a)', date, time, zone\n    print '(8i5)', values\nend program test_time_and_date</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"cpu_005ftime#CPU_005fTIME\">CPU_TIME</a>, <a href=\"system_005fclock#SYSTEM_005fCLOCK\">SYSTEM_CLOCK</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/DATE_005fAND_005fTIME.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/DATE_005fAND_005fTIME.html</a>\n  </p>\n</div>\n","dble":"<h1 class=\"section\" id=\"DBLE\">8.62 <code>DBLE</code> — Double conversion function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>DBLE(A)</code> Converts <var>A</var> to double precision real type. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = DBLE(A)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>A</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>, <code>REAL</code>, or <code>COMPLEX</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type double precision real. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_dble\n    real    :: x = 2.18\n    integer :: i = 5\n    complex :: z = (2.3,1.14)\n    print *, dble(x), dble(i), dble(z)\nend program test_dble</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"real#REAL\">REAL</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/DBLE.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/DBLE.html</a>\n  </p>\n</div>\n","dcmplx":"<h1 class=\"section\" id=\"DCMPLX\">8.63 <code>DCMPLX</code> — Double complex conversion function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>DCMPLX(X [,Y])</code> returns a double complex number where <var>X</var> is converted to the real component. If <var>Y</var> is present it is converted to the imaginary component. If <var>Y</var> is not present then the imaginary component is set to 0.0. If <var>X</var> is complex then <var>Y</var> must not be present. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = DCMPLX(X [, Y])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type may be <code>INTEGER</code>, <code>REAL</code>, or <code>COMPLEX</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>Y</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional if <var>X</var> is not <code>COMPLEX</code>.) May be <code>INTEGER</code> or <code>REAL</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>COMPLEX(8)</code> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_dcmplx\n    integer :: i = 42\n    real :: x = 3.14\n    complex :: z\n    z = cmplx(i, x)\n    print *, dcmplx(i)\n    print *, dcmplx(x)\n    print *, dcmplx(z)\n    print *, dcmplx(x,i)\nend program test_dcmplx</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/DCMPLX.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/DCMPLX.html</a>\n  </p>\n</div>\n","digits":"<h1 class=\"section\" id=\"DIGITS\">8.64 <code>DIGITS</code> — Significant binary digits function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>DIGITS(X)</code> returns the number of significant binary digits of the internal model representation of <var>X</var>. For example, on a system using a 32-bit floating point representation, a default real number would likely return 24. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = DIGITS(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type may be <code>INTEGER</code> or <code>REAL</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_digits\n    integer :: i = 12345\n    real :: x = 3.143\n    real(8) :: y = 2.33\n    print *, digits(i)\n    print *, digits(x)\n    print *, digits(y)\nend program test_digits</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/DIGITS.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/DIGITS.html</a>\n  </p>\n</div>\n","dim":"<h1 class=\"section\" id=\"DIM\">8.65 <code>DIM</code> — Positive difference</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>DIM(X,Y)</code> returns the difference <code>X-Y</code> if the result is positive; otherwise returns zero. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = DIM(X, Y)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code> or <code>REAL</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>Y</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be the same type and kind as <var>X</var>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> or <code>REAL</code>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_dim\n    integer :: i\n    real(8) :: x\n    i = dim(4, 15)\n    x = dim(4.345_8, 2.111_8)\n    print *, i\n    print *, x\nend program test_dim</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DIM(X,Y)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4) X, Y</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>IDIM(X,Y)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>INTEGER(4) X, Y</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>INTEGER(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DDIM(X,Y)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) X, Y</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n</table> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/DIM.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/DIM.html</a>\n  </p>\n</div>\n","dot_005fproduct":"<h1 class=\"section\" id=\"DOT_005fPRODUCT\">8.66 <code>DOT_PRODUCT</code> — Dot product function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>DOT_PRODUCT(VECTOR_A, VECTOR_B)</code> computes the dot product multiplication of two vectors <var>VECTOR_A</var> and <var>VECTOR_B</var>. The two vectors may be either numeric or logical and must be arrays of rank one and of equal size. If the vectors are <code>INTEGER</code> or <code>REAL</code>, the result is <code>SUM(VECTOR_A*VECTOR_B)</code>. If the vectors are <code>COMPLEX</code>, the result is <code>SUM(CONJG(VECTOR_A)*VECTOR_B)</code>. If the vectors are <code>LOGICAL</code>, the result is <code>ANY(VECTOR_A .AND. VECTOR_B)</code>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = DOT_PRODUCT(VECTOR_A, VECTOR_B)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>VECTOR_A</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be numeric or <code>LOGICAL</code>, rank 1. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>VECTOR_B</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be numeric if <var>VECTOR_A</var> is of numeric type or <code>LOGICAL</code> if <var>VECTOR_A</var> is of type <code>LOGICAL</code>. <var>VECTOR_B</var> shall be a rank-one array. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>If the arguments are numeric, the return value is a scalar of numeric type, <code>INTEGER</code>, <code>REAL</code>, or <code>COMPLEX</code>. If the arguments are <code>LOGICAL</code>, the return value is <code>.TRUE.</code> or <code>.FALSE.</code>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_dot_prod\n    integer, dimension(3) :: a, b\n    a = (/ 1, 2, 3 /)\n    b = (/ 4, 5, 6 /)\n    print '(3i3)', a\n    print *\n    print '(3i3)', b\n    print *\n    print *, dot_product(a,b)\nend program test_dot_prod</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/DOT_005fPRODUCT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/DOT_005fPRODUCT.html</a>\n  </p>\n</div>\n","dprod":"<h1 class=\"section\" id=\"DPROD\">8.67 <code>DPROD</code> — Double product function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>DPROD(X,Y)</code> returns the product <code>X*Y</code>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = DPROD(X, Y)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>Y</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>REAL(8)</code>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_dprod\n    real :: x = 5.2\n    real :: y = 2.3\n    real(8) :: d\n    d = dprod(x,y)\n    print *, d\nend program test_dprod</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DPROD(X,Y)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4) X, Y</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n</table> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/DPROD.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/DPROD.html</a>\n  </p>\n</div>\n","dreal":"<h1 class=\"section\" id=\"DREAL\">8.68 <code>DREAL</code> — Double real part function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>DREAL(Z)</code> returns the real part of complex variable <var>Z</var>. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = DREAL(A)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>A</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>COMPLEX(8)</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>REAL(8)</code>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_dreal\n    complex(8) :: z = (1.3_8,7.2_8)\n    print *, dreal(z)\nend program test_dreal</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"aimag#AIMAG\">AIMAG</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/DREAL.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/DREAL.html</a>\n  </p>\n</div>\n","dshiftl":"<h1 class=\"section\" id=\"DSHIFTL\">8.69 <code>DSHIFTL</code> — Combined left shift</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>DSHIFTL(I, J, SHIFT)</code> combines bits of <var>I</var> and <var>J</var>. The rightmost <var>SHIFT</var> bits of the result are the leftmost <var>SHIFT</var> bits of <var>J</var>, and the remaining bits are the rightmost bits of <var>I</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = DSHIFTL(I, J, SHIFT)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>INTEGER</code> or a BOZ constant. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>J</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>INTEGER</code> or a BOZ constant. If both <var>I</var> and <var>J</var> have integer type, then they shall have the same kind type parameter. <var>I</var> and <var>J</var> shall not both be BOZ constants. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>SHIFT</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>INTEGER</code>. It shall be nonnegative. If <var>I</var> is not a BOZ constant, then <var>SHIFT</var> shall be less than or equal to <code>BIT_SIZE(I)</code>; otherwise, <var>SHIFT</var> shall be less than or equal to <code>BIT_SIZE(J)</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>If either <var>I</var> or <var>J</var> is a BOZ constant, it is first converted as if by the intrinsic function <code>INT</code> to an integer type with the kind type parameter of the other. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"dshiftr#DSHIFTR\">DSHIFTR</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/DSHIFTL.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/DSHIFTL.html</a>\n  </p>\n</div>\n","dshiftr":"<h1 class=\"section\" id=\"DSHIFTR\">8.70 <code>DSHIFTR</code> — Combined right shift</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>DSHIFTR(I, J, SHIFT)</code> combines bits of <var>I</var> and <var>J</var>. The leftmost <var>SHIFT</var> bits of the result are the rightmost <var>SHIFT</var> bits of <var>I</var>, and the remaining bits are the leftmost bits of <var>J</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = DSHIFTR(I, J, SHIFT)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>INTEGER</code> or a BOZ constant. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>J</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>INTEGER</code> or a BOZ constant. If both <var>I</var> and <var>J</var> have integer type, then they shall have the same kind type parameter. <var>I</var> and <var>J</var> shall not both be BOZ constants. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>SHIFT</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>INTEGER</code>. It shall be nonnegative. If <var>I</var> is not a BOZ constant, then <var>SHIFT</var> shall be less than or equal to <code>BIT_SIZE(I)</code>; otherwise, <var>SHIFT</var> shall be less than or equal to <code>BIT_SIZE(J)</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>If either <var>I</var> or <var>J</var> is a BOZ constant, it is first converted as if by the intrinsic function <code>INT</code> to an integer type with the kind type parameter of the other. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"dshiftl#DSHIFTL\">DSHIFTL</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/DSHIFTR.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/DSHIFTR.html</a>\n  </p>\n</div>\n","dtime":"<h1 class=\"section\" id=\"DTIME\">8.71 <code>DTIME</code> — Execution time subroutine (or function)</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>DTIME(VALUES, TIME)</code> initially returns the number of seconds of runtime since the start of the process's execution in <var>TIME</var>. <var>VALUES</var> returns the user and system components of this time in <code>VALUES(1)</code> and <code>VALUES(2)</code> respectively. <var>TIME</var> is equal to <code>VALUES(1) +\nVALUES(2)</code>. <p>Subsequent invocations of <code>DTIME</code> return values accumulated since the previous invocation. </p>\n<p>On some systems, the underlying timings are represented using types with sufficiently small limits that overflows (wrap around) are possible, such as 32-bit types. Therefore, the values returned by this intrinsic might be, or become, negative, or numerically less than previous values, during a single run of the compiled program. </p>\n<p>Please note, that this implementation is thread safe if used within OpenMP directives, i.e., its state will be consistent while called from multiple threads. However, if <code>DTIME</code> is called from multiple threads, the result is still the time since the last invocation. This may not give the intended results. If possible, use <code>CPU_TIME</code> instead. </p>\n<p>This intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit. </p>\n<p><var>VALUES</var> and <var>TIME</var> are <code>INTENT(OUT)</code> and provide the following: </p>\n\n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"></td>\n<td valign=\"top\" width=\"30%\">\n<code>VALUES(1)</code>: </td>\n<td valign=\"top\" width=\"40%\">User time in seconds. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"></td>\n<td valign=\"top\" width=\"30%\">\n<code>VALUES(2)</code>: </td>\n<td valign=\"top\" width=\"40%\">System time in seconds. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"></td>\n<td valign=\"top\" width=\"30%\">\n<code>TIME</code>: </td>\n<td valign=\"top\" width=\"40%\">Run time since start in seconds. </td>\n</tr>\n</table> </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine, function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>CALL DTIME(VALUES, TIME)</code>. </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>TIME = DTIME(VALUES)</code>, (not recommended). </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><var>VALUES</var></td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL(4), DIMENSION(2)</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><var>TIME</var></td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL(4)</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>Elapsed time in seconds since the last invocation or since the start of program execution if not called before. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_dtime\n    integer(8) :: i, j\n    real, dimension(2) :: tarray\n    real :: result\n    call dtime(tarray, result)\n    print *, result\n    print *, tarray(1)\n    print *, tarray(2)\n    do i=1,100000000    ! Just a delay\n        j = i * i - i\n    end do\n    call dtime(tarray, result)\n    print *, result\n    print *, tarray(1)\n    print *, tarray(2)\nend program test_dtime</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"cpu_005ftime#CPU_005fTIME\">CPU_TIME</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/DTIME.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/DTIME.html</a>\n  </p>\n</div>\n","eoshift":"<h1 class=\"section\" id=\"EOSHIFT\">8.72 <code>EOSHIFT</code> — End-off shift elements of an array</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>EOSHIFT(ARRAY, SHIFT[, BOUNDARY, DIM])</code> performs an end-off shift on elements of <var>ARRAY</var> along the dimension of <var>DIM</var>. If <var>DIM</var> is omitted it is taken to be <code>1</code>. <var>DIM</var> is a scalar of type <code>INTEGER</code> in the range of 1 \\leq DIM \\leq n) where n is the rank of <var>ARRAY</var>. If the rank of <var>ARRAY</var> is one, then all elements of <var>ARRAY</var> are shifted by <var>SHIFT</var> places. If rank is greater than one, then all complete rank one sections of <var>ARRAY</var> along the given dimension are shifted. Elements shifted out one end of each rank one section are dropped. If <var>BOUNDARY</var> is present then the corresponding value of from <var>BOUNDARY</var> is copied back in the other end. If <var>BOUNDARY</var> is not present then the following are copied in depending on the type of <var>ARRAY</var>. \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<em>Array Type</em> </td>\n<td valign=\"top\" width=\"80%\">\n<em>Boundary Value</em> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">Numeric </td>\n<td valign=\"top\" width=\"80%\">0 of the type and kind of <var>ARRAY</var>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">Logical </td>\n<td valign=\"top\" width=\"80%\">\n<code>.FALSE.</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">Character(<var>len</var>) </td>\n<td valign=\"top\" width=\"80%\">\n<var>len</var> blanks. </td>\n</tr>\n</table> </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = EOSHIFT(ARRAY, SHIFT [, BOUNDARY, DIM])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>ARRAY</var> </td>\n<td valign=\"top\" width=\"70%\">May be any type, not scalar. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>SHIFT</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>BOUNDARY</var> </td>\n<td valign=\"top\" width=\"70%\">Same type as <var>ARRAY</var>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>DIM</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>Returns an array of same type and rank as the <var>ARRAY</var> argument. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_eoshift\n    integer, dimension(3,3) :: a\n    a = reshape( (/ 1, 2, 3, 4, 5, 6, 7, 8, 9 /), (/ 3, 3 /))\n    print '(3i3)', a(1,:)\n    print '(3i3)', a(2,:)\n    print '(3i3)', a(3,:)\n    a = EOSHIFT(a, SHIFT=(/1, 2, 1/), BOUNDARY=-5, DIM=2)\n    print *\n    print '(3i3)', a(1,:)\n    print '(3i3)', a(2,:)\n    print '(3i3)', a(3,:)\nend program test_eoshift</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/EOSHIFT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/EOSHIFT.html</a>\n  </p>\n</div>\n","epsilon":"<h1 class=\"section\" id=\"EPSILON\">8.73 <code>EPSILON</code> — Epsilon function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>EPSILON(X)</code> returns the smallest number <var>E</var> of the same kind as <var>X</var> such that 1 + E &gt; 1. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = EPSILON(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of same type as the argument. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_epsilon\n    real :: x = 3.143\n    real(8) :: y = 2.33\n    print *, EPSILON(x)\n    print *, EPSILON(y)\nend program test_epsilon</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/EPSILON.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/EPSILON.html</a>\n  </p>\n</div>\n","erf":"<h1 class=\"section\" id=\"ERF\">8.74 <code>ERF</code> — Error function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>ERF(X)</code> computes the error function of <var>X</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = ERF(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>REAL</code>, of the same kind as <var>X</var> and lies in the range -1 \\leq erf (x) \\leq 1 . </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_erf\n  real(8) :: x = 0.17_8\n  x = erf(x)\nend program test_erf</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DERF(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">GNU extension </td>\n</tr>\n</table> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ERF.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ERF.html</a>\n  </p>\n</div>\n","erfc":"<h1 class=\"section\" id=\"ERFC\">8.75 <code>ERFC</code> — Error function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>ERFC(X)</code> computes the complementary error function of <var>X</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = ERFC(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>REAL</code> and of the same kind as <var>X</var>. It lies in the range 0 \\leq erfc (x) \\leq 2 . </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_erfc\n  real(8) :: x = 0.17_8\n  x = erfc(x)\nend program test_erfc</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DERFC(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">GNU extension </td>\n</tr>\n</table> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ERFC.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ERFC.html</a>\n  </p>\n</div>\n","erfc_005fscaled":"<h1 class=\"section\" id=\"ERFC_005fSCALED\">8.76 <code>ERFC_SCALED</code> — Error function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>ERFC_SCALED(X)</code> computes the exponentially-scaled complementary error function of <var>X</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = ERFC_SCALED(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>REAL</code> and of the same kind as <var>X</var>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_erfc_scaled\n  real(8) :: x = 0.17_8\n  x = erfc_scaled(x)\nend program test_erfc_scaled</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ERFC_005fSCALED.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ERFC_005fSCALED.html</a>\n  </p>\n</div>\n","etime":"<h1 class=\"section\" id=\"ETIME\">8.77 <code>ETIME</code> — Execution time subroutine (or function)</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>ETIME(VALUES, TIME)</code> returns the number of seconds of runtime since the start of the process's execution in <var>TIME</var>. <var>VALUES</var> returns the user and system components of this time in <code>VALUES(1)</code> and <code>VALUES(2)</code> respectively. <var>TIME</var> is equal to <code>VALUES(1) + VALUES(2)</code>. <p>On some systems, the underlying timings are represented using types with sufficiently small limits that overflows (wrap around) are possible, such as 32-bit types. Therefore, the values returned by this intrinsic might be, or become, negative, or numerically less than previous values, during a single run of the compiled program. </p>\n<p>This intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit. </p>\n<p><var>VALUES</var> and <var>TIME</var> are <code>INTENT(OUT)</code> and provide the following: </p>\n\n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"></td>\n<td valign=\"top\" width=\"30%\">\n<code>VALUES(1)</code>: </td>\n<td valign=\"top\" width=\"60%\">User time in seconds. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"></td>\n<td valign=\"top\" width=\"30%\">\n<code>VALUES(2)</code>: </td>\n<td valign=\"top\" width=\"60%\">System time in seconds. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"></td>\n<td valign=\"top\" width=\"30%\">\n<code>TIME</code>: </td>\n<td valign=\"top\" width=\"60%\">Run time since start in seconds. </td>\n</tr>\n</table> </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine, function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>CALL ETIME(VALUES, TIME)</code>. </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>TIME = ETIME(VALUES)</code>, (not recommended). </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><var>VALUES</var></td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL(4), DIMENSION(2)</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><var>TIME</var></td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL(4)</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>Elapsed time in seconds since the start of program execution. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_etime\n    integer(8) :: i, j\n    real, dimension(2) :: tarray\n    real :: result\n    call ETIME(tarray, result)\n    print *, result\n    print *, tarray(1)\n    print *, tarray(2)\n    do i=1,100000000    ! Just a delay\n        j = i * i - i\n    end do\n    call ETIME(tarray, result)\n    print *, result\n    print *, tarray(1)\n    print *, tarray(2)\nend program test_etime</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"cpu_005ftime#CPU_005fTIME\">CPU_TIME</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ETIME.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ETIME.html</a>\n  </p>\n</div>\n","execute_005fcommand_005fline":"<h1 class=\"section\" id=\"EXECUTE_005fCOMMAND_005fLINE\">8.78 <code>EXECUTE_COMMAND_LINE</code> — Execute a shell command</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>EXECUTE_COMMAND_LINE</code> runs a shell command, synchronously or asynchronously. <p>The <code>COMMAND</code> argument is passed to the shell and executed, using the C library's <code>system</code> call. (The shell is <code>sh</code> on Unix systems, and <code>cmd.exe</code> on Windows.) If <code>WAIT</code> is present and has the value false, the execution of the command is asynchronous if the system supports it; otherwise, the command is executed synchronously. </p>\n<p>The three last arguments allow the user to get status information. After synchronous execution, <code>EXITSTAT</code> contains the integer exit code of the command, as returned by <code>system</code>. <code>CMDSTAT</code> is set to zero if the command line was executed (whatever its exit status was). <code>CMDMSG</code> is assigned an error message if an error has occurred. </p>\n<p>Note that the <code>system</code> function need not be thread-safe. It is the responsibility of the user to ensure that <code>system</code> is not called concurrently. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL EXECUTE_COMMAND_LINE(COMMAND [, WAIT, EXITSTAT, CMDSTAT, CMDMSG ])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>COMMAND</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a default <code>CHARACTER</code> scalar. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>WAIT</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Shall be a default <code>LOGICAL</code> scalar. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>EXITSTAT</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Shall be an <code>INTEGER</code> of the default kind. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>CMDSTAT</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Shall be an <code>INTEGER</code> of the default kind. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>CMDMSG</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Shall be an <code>CHARACTER</code> scalar of the default kind. </td>\n</tr>\n</table> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_exec\n  integer :: i\n\n  call execute_command_line (\"external_prog.exe\", exitstat=i)\n  print *, \"Exit status of external_prog.exe was \", i\n\n  call execute_command_line (\"reindex_files.exe\", wait=.false.)\n  print *, \"Now reindexing files in the background\"\n\nend program test_exec</pre> </dd>\n<dt>Note:</dt>\n<dd> Because this intrinsic is implemented in terms of the <code>system</code> function call, its behavior with respect to signaling is processor dependent. In particular, on POSIX-compliant systems, the SIGINT and SIGQUIT signals will be ignored, and the SIGCHLD will be blocked. As such, if the parent process is terminated, the child process might not be terminated alongside. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"system#SYSTEM\">SYSTEM</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/EXECUTE_005fCOMMAND_005fLINE.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/EXECUTE_005fCOMMAND_005fLINE.html</a>\n  </p>\n</div>\n","exit":"<h1 class=\"section\" id=\"EXIT\">8.79 <code>EXIT</code> — Exit the program with status.</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>EXIT</code> causes immediate termination of the program with status. If status is omitted it returns the canonical <em>success</em> for the system. All Fortran I/O units are closed. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL EXIT([STATUS])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STATUS</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an <code>INTEGER</code> of the default kind. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>\n<code>STATUS</code> is passed to the parent process on exit. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_exit\n  integer :: STATUS = 0\n  print *, 'This program is going to exit.'\n  call EXIT(STATUS)\nend program test_exit</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"abort#ABORT\">ABORT</a>, <a href=\"kill#KILL\">KILL</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/EXIT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/EXIT.html</a>\n  </p>\n</div>\n","exp":"<h1 class=\"section\" id=\"EXP\">8.80 <code>EXP</code> — Exponential function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>EXP(X)</code> computes the base e exponential of <var>X</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later, has overloads that are GNU extensions </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = EXP(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL</code> or <code>COMPLEX</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value has same type and kind as <var>X</var>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_exp\n  real :: x = 1.0\n  x = exp(x)\nend program test_exp</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>EXP(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DEXP(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>CEXP(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(4) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>ZEXP(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(8)</code> </td>\n<td valign=\"top\" width=\"25%\">GNU extension </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>CDEXP(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(8)</code> </td>\n<td valign=\"top\" width=\"25%\">GNU extension </td>\n</tr>\n</table> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/EXP.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/EXP.html</a>\n  </p>\n</div>\n","exponent":"<h1 class=\"section\" id=\"EXPONENT\">8.81 <code>EXPONENT</code> — Exponent function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>EXPONENT(X)</code> returns the value of the exponent part of <var>X</var>. If <var>X</var> is zero the value returned is zero. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = EXPONENT(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type default <code>INTEGER</code>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_exponent\n  real :: x = 1.0\n  integer :: i\n  i = exponent(x)\n  print *, i\n  print *, exponent(0.0)\nend program test_exponent</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/EXPONENT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/EXPONENT.html</a>\n  </p>\n</div>\n","extends_005ftype_005fof":"<h1 class=\"section\" id=\"EXTENDS_005fTYPE_005fOF\">8.82 <code>EXTENDS_TYPE_OF</code> — Query dynamic type for extension</h1> \n<dl> <dt>Description:</dt>\n<dd>Query dynamic type for extension. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2003 and later </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = EXTENDS_TYPE_OF(A, MOLD)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>A</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an object of extensible declared type or unlimited polymorphic. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>MOLD</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an object of extensible declared type or unlimited polymorphic. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is a scalar of type default logical. It is true if and only if the dynamic type of A is an extension type of the dynamic type of MOLD. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"same_005ftype_005fas#SAME_005fTYPE_005fAS\">SAME_TYPE_AS</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/EXTENDS_005fTYPE_005fOF.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/EXTENDS_005fTYPE_005fOF.html</a>\n  </p>\n</div>\n","fdate":"<h1 class=\"section\" id=\"FDATE\">8.83 <code>FDATE</code> — Get the current time as a string</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>FDATE(DATE)</code> returns the current date (using the same format as <code>CTIME</code>) in <var>DATE</var>. It is equivalent to <code>CALL CTIME(DATE,\nTIME())</code>. <p>This intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine, function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>CALL FDATE(DATE)</code>. </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>DATE = FDATE()</code>. </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><var>DATE</var></td>\n<td valign=\"top\" width=\"70%\">The type shall be of type <code>CHARACTER</code> of the default kind. It is an <code>INTENT(OUT)</code> argument. If the length of this variable is too short for the date and time string to fit completely, it will be blank on procedure return. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The current date and time as a string. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_fdate\n    integer(8) :: i, j\n    character(len=30) :: date\n    call fdate(date)\n    print *, 'Program started on ', date\n    do i = 1, 100000000 ! Just a delay\n        j = i * i - i\n    end do\n    call fdate(date)\n    print *, 'Program ended on ', date\nend program test_fdate</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"date_005fand_005ftime#DATE_005fAND_005fTIME\">DATE_AND_TIME</a>, <a href=\"ctime#CTIME\">CTIME</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/FDATE.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/FDATE.html</a>\n  </p>\n</div>\n","fget":"<h1 class=\"section\" id=\"FGET\">8.84 <code>FGET</code> — Read a single character in stream mode from stdin</h1> \n<dl> <dt>Description:</dt>\n<dd>Read a single character in stream mode from stdin by bypassing normal formatted output. Stream I/O should not be mixed with normal record-oriented (formatted or unformatted) I/O on the same unit; the results are unpredictable. <p>This intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit. </p>\n<p>Note that the <code>FGET</code> intrinsic is provided for backwards compatibility with <code>g77</code>. GNU Fortran provides the Fortran 2003 Stream facility. Programmers should consider the use of new stream IO feature in new code for future portability. See also <a href=\"fortran-2003-status#Fortran-2003-status\">Fortran 2003 status</a>. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine, function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>CALL FGET(C [, STATUS])</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>STATUS = FGET(C)</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>C</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>CHARACTER</code> and of default kind. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STATUS</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) status flag of type <code>INTEGER</code>. Returns 0 on success, -1 on end-of-file, and a system specific positive error code otherwise. </td>\n</tr>\n</table> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_fget\n  INTEGER, PARAMETER :: strlen = 100\n  INTEGER :: status, i = 1\n  CHARACTER(len=strlen) :: str = \"\"\n\n  WRITE (*,*) 'Enter text:'\n  DO\n    CALL fget(str(i:i), status)\n    if (status /= 0 .OR. i &gt; strlen) exit\n    i = i + 1\n  END DO\n  WRITE (*,*) TRIM(str)\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"fgetc#FGETC\">FGETC</a>, <a href=\"fput#FPUT\">FPUT</a>, <a href=\"fputc#FPUTC\">FPUTC</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/FGET.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/FGET.html</a>\n  </p>\n</div>\n","fgetc":"<h1 class=\"section\" id=\"FGETC\">8.85 <code>FGETC</code> — Read a single character in stream mode</h1> \n<dl> <dt>Description:</dt>\n<dd>Read a single character in stream mode by bypassing normal formatted output. Stream I/O should not be mixed with normal record-oriented (formatted or unformatted) I/O on the same unit; the results are unpredictable. <p>This intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit. </p>\n<p>Note that the <code>FGET</code> intrinsic is provided for backwards compatibility with <code>g77</code>. GNU Fortran provides the Fortran 2003 Stream facility. Programmers should consider the use of new stream IO feature in new code for future portability. See also <a href=\"fortran-2003-status#Fortran-2003-status\">Fortran 2003 status</a>. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine, function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>CALL FGETC(UNIT, C [, STATUS])</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>STATUS = FGETC(UNIT, C)</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>UNIT</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>C</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>CHARACTER</code> and of default kind. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STATUS</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) status flag of type <code>INTEGER</code>. Returns 0 on success, -1 on end-of-file and a system specific positive error code otherwise. </td>\n</tr>\n</table> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_fgetc\n  INTEGER :: fd = 42, status\n  CHARACTER :: c\n\n  OPEN(UNIT=fd, FILE=\"/etc/passwd\", ACTION=\"READ\", STATUS = \"OLD\")\n  DO\n    CALL fgetc(fd, c, status)\n    IF (status /= 0) EXIT\n    call fput(c)\n  END DO\n  CLOSE(UNIT=fd)\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"fget#FGET\">FGET</a>, <a href=\"fput#FPUT\">FPUT</a>, <a href=\"fputc#FPUTC\">FPUTC</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/FGETC.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/FGETC.html</a>\n  </p>\n</div>\n","floor":"<h1 class=\"section\" id=\"FLOOR\">8.86 <code>FLOOR</code> — Integer floor function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>FLOOR(A)</code> returns the greatest integer less than or equal to <var>X</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = FLOOR(A [, KIND])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>A</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>KIND</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) An <code>INTEGER</code> initialization expression indicating the kind parameter of the result. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER(KIND)</code> if <var>KIND</var> is present and of default-kind <code>INTEGER</code> otherwise. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_floor\n    real :: x = 63.29\n    real :: y = -63.59\n    print *, floor(x) ! returns 63\n    print *, floor(y) ! returns -64\nend program test_floor</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"ceiling#CEILING\">CEILING</a>, <a href=\"nint#NINT\">NINT</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/FLOOR.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/FLOOR.html</a>\n  </p>\n</div>\n","flush":"<h1 class=\"section\" id=\"FLUSH\">8.87 <code>FLUSH</code> — Flush I/O unit(s)</h1> \n<dl> <dt>Description:</dt>\n<dd>Flushes Fortran unit(s) currently open for output. Without the optional argument, all units are flushed, otherwise just the unit specified. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL FLUSH(UNIT)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>UNIT</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) The type shall be <code>INTEGER</code>. </td>\n</tr></table> </dd>\n<dt>Note:</dt>\n<dd>Beginning with the Fortran 2003 standard, there is a <code>FLUSH</code> statement that should be preferred over the <code>FLUSH</code> intrinsic. <p>The <code>FLUSH</code> intrinsic and the Fortran 2003 <code>FLUSH</code> statement have identical effect: they flush the runtime library's I/O buffer so that the data becomes visible to other processes. This does not guarantee that the data is committed to disk. </p>\n<p>On POSIX systems, you can request that all data is transferred to the storage device by calling the <code>fsync</code> function, with the POSIX file descriptor of the I/O unit as argument (retrieved with GNU intrinsic <code>FNUM</code>). The following example shows how: </p>\n<pre class=\"smallexample\">! Declare the interface for POSIX fsync function\ninterface\n  function fsync (fd) bind(c,name=\"fsync\")\n  use iso_c_binding, only: c_int\n    integer(c_int), value :: fd\n    integer(c_int) :: fsync\n  end function fsync\nend interface\n          \n! Variable declaration\ninteger :: ret\n          \n! Opening unit 10\nopen (10,file=\"foo\")\n          \n! ...\n! Perform I/O on unit 10\n! ...\n          \n! Flush and sync\nflush(10)\nret = fsync(fnum(10))\n          \n! Handle possible error\nif (ret /= 0) stop \"Error calling FSYNC\"</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/FLUSH.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/FLUSH.html</a>\n  </p>\n</div>\n","fnum":"<h1 class=\"section\" id=\"FNUM\">8.88 <code>FNUM</code> — File number function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>FNUM(UNIT)</code> returns the POSIX file descriptor number corresponding to the open Fortran I/O unit <code>UNIT</code>. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = FNUM(UNIT)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>UNIT</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_fnum\n  integer :: i\n  open (unit=10, status = \"scratch\")\n  i = fnum(10)\n  print *, i\n  close (10)\nend program test_fnum</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/FNUM.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/FNUM.html</a>\n  </p>\n</div>\n","fput":"<h1 class=\"section\" id=\"FPUT\">8.89 <code>FPUT</code> — Write a single character in stream mode to stdout</h1> \n<dl> <dt>Description:</dt>\n<dd>Write a single character in stream mode to stdout by bypassing normal formatted output. Stream I/O should not be mixed with normal record-oriented (formatted or unformatted) I/O on the same unit; the results are unpredictable. <p>This intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit. </p>\n<p>Note that the <code>FGET</code> intrinsic is provided for backwards compatibility with <code>g77</code>. GNU Fortran provides the Fortran 2003 Stream facility. Programmers should consider the use of new stream IO feature in new code for future portability. See also <a href=\"fortran-2003-status#Fortran-2003-status\">Fortran 2003 status</a>. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine, function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>CALL FPUT(C [, STATUS])</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>STATUS = FPUT(C)</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>C</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>CHARACTER</code> and of default kind. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STATUS</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) status flag of type <code>INTEGER</code>. Returns 0 on success, -1 on end-of-file and a system specific positive error code otherwise. </td>\n</tr>\n</table> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_fput\n  CHARACTER(len=10) :: str = \"gfortran\"\n  INTEGER :: i\n  DO i = 1, len_trim(str)\n    CALL fput(str(i:i))\n  END DO\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"fputc#FPUTC\">FPUTC</a>, <a href=\"fget#FGET\">FGET</a>, <a href=\"fgetc#FGETC\">FGETC</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/FPUT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/FPUT.html</a>\n  </p>\n</div>\n","fputc":"<h1 class=\"section\" id=\"FPUTC\">8.90 <code>FPUTC</code> — Write a single character in stream mode</h1> \n<dl> <dt>Description:</dt>\n<dd>Write a single character in stream mode by bypassing normal formatted output. Stream I/O should not be mixed with normal record-oriented (formatted or unformatted) I/O on the same unit; the results are unpredictable. <p>This intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit. </p>\n<p>Note that the <code>FGET</code> intrinsic is provided for backwards compatibility with <code>g77</code>. GNU Fortran provides the Fortran 2003 Stream facility. Programmers should consider the use of new stream IO feature in new code for future portability. See also <a href=\"fortran-2003-status#Fortran-2003-status\">Fortran 2003 status</a>. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine, function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>CALL FPUTC(UNIT, C [, STATUS])</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>STATUS = FPUTC(UNIT, C)</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>UNIT</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>C</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>CHARACTER</code> and of default kind. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STATUS</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) status flag of type <code>INTEGER</code>. Returns 0 on success, -1 on end-of-file and a system specific positive error code otherwise. </td>\n</tr>\n</table> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_fputc\n  CHARACTER(len=10) :: str = \"gfortran\"\n  INTEGER :: fd = 42, i\n\n  OPEN(UNIT = fd, FILE = \"out\", ACTION = \"WRITE\", STATUS=\"NEW\")\n  DO i = 1, len_trim(str)\n    CALL fputc(fd, str(i:i))\n  END DO\n  CLOSE(fd)\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"fput#FPUT\">FPUT</a>, <a href=\"fget#FGET\">FGET</a>, <a href=\"fgetc#FGETC\">FGETC</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/FPUTC.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/FPUTC.html</a>\n  </p>\n</div>\n","fraction":"<h1 class=\"section\" id=\"FRACTION\">8.91 <code>FRACTION</code> — Fractional part of the model representation</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>FRACTION(X)</code> returns the fractional part of the model representation of <code>X</code>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>Y = FRACTION(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type of the argument shall be a <code>REAL</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of the same type and kind as the argument. The fractional part of the model representation of <code>X</code> is returned; it is <code>X * RADIX(X)**(-EXPONENT(X))</code>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_fraction\n  real :: x\n  x = 178.1387e-4\n  print *, fraction(x), x * radix(x)**(-exponent(x))\nend program test_fraction</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/FRACTION.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/FRACTION.html</a>\n  </p>\n</div>\n","free":"<h1 class=\"section\" id=\"FREE\">8.92 <code>FREE</code> — Frees memory</h1> \n<dl> <dt>Description:</dt>\n<dd>Frees memory previously allocated by <code>MALLOC</code>. The <code>FREE</code> intrinsic is an extension intended to be used with Cray pointers, and is provided in GNU Fortran to allow user to compile legacy code. For new code using Fortran 95 pointers, the memory de-allocation intrinsic is <code>DEALLOCATE</code>. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL FREE(PTR)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>PTR</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. It represents the location of the memory that should be de-allocated. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>None </dd>\n<dt>Example:</dt>\n<dd>See <code>MALLOC</code> for an example. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"malloc#MALLOC\">MALLOC</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/FREE.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/FREE.html</a>\n  </p>\n</div>\n","fseek":"<h1 class=\"section\" id=\"FSEEK\">8.93 <code>FSEEK</code> — Low level file positioning subroutine</h1> \n<dl> <dt>Description:</dt>\n<dd>Moves <var>UNIT</var> to the specified <var>OFFSET</var>. If <var>WHENCE</var> is set to 0, the <var>OFFSET</var> is taken as an absolute value <code>SEEK_SET</code>, if set to 1, <var>OFFSET</var> is taken to be relative to the current position <code>SEEK_CUR</code>, and if set to 2 relative to the end of the file <code>SEEK_END</code>. On error, <var>STATUS</var> is set to a nonzero value. If <var>STATUS</var> the seek fails silently. <p>This intrinsic routine is not fully backwards compatible with <code>g77</code>. In <code>g77</code>, the <code>FSEEK</code> takes a statement label instead of a <var>STATUS</var> variable. If FSEEK is used in old code, change </p>\n<pre class=\"smallexample\">CALL FSEEK(UNIT, OFFSET, WHENCE, *label)</pre> <p>to </p>\n<pre class=\"smallexample\">INTEGER :: status\nCALL FSEEK(UNIT, OFFSET, WHENCE, status)\nIF (status /= 0) GOTO label</pre> <p>Please note that GNU Fortran provides the Fortran 2003 Stream facility. Programmers should consider the use of new stream IO feature in new code for future portability. See also <a href=\"fortran-2003-status#Fortran-2003-status\">Fortran 2003 status</a>. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL FSEEK(UNIT, OFFSET, WHENCE[, STATUS])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>UNIT</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar of type <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>OFFSET</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar of type <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>WHENCE</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar of type <code>INTEGER</code>. Its value shall be either 0, 1 or 2. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STATUS</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) shall be a scalar of type <code>INTEGER(4)</code>. </td>\n</tr>\n</table> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_fseek\n  INTEGER, PARAMETER :: SEEK_SET = 0, SEEK_CUR = 1, SEEK_END = 2\n  INTEGER :: fd, offset, ierr\n\n  ierr   = 0\n  offset = 5\n  fd     = 10\n\n  OPEN(UNIT=fd, FILE=\"fseek.test\")\n  CALL FSEEK(fd, offset, SEEK_SET, ierr)  ! move to OFFSET\n  print *, FTELL(fd), ierr\n\n  CALL FSEEK(fd, 0, SEEK_END, ierr)       ! move to end\n  print *, FTELL(fd), ierr\n\n  CALL FSEEK(fd, 0, SEEK_SET, ierr)       ! move to beginning\n  print *, FTELL(fd), ierr\n\n  CLOSE(UNIT=fd)\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"ftell#FTELL\">FTELL</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/FSEEK.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/FSEEK.html</a>\n  </p>\n</div>\n","fstat":"<h1 class=\"section\" id=\"FSTAT\">8.94 <code>FSTAT</code> — Get file status</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>FSTAT</code> is identical to <a href=\"stat#STAT\">STAT</a>, except that information about an already opened file is obtained. <p>The elements in <code>VALUES</code> are the same as described by <a href=\"stat#STAT\">STAT</a>. </p>\n<p>This intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine, function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>CALL FSTAT(UNIT, VALUES [, STATUS])</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>STATUS = FSTAT(UNIT, VALUES)</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>UNIT</var> </td>\n<td valign=\"top\" width=\"70%\">An open I/O unit number of type <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>VALUES</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER(4), DIMENSION(13)</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STATUS</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) status flag of type <code>INTEGER(4)</code>. Returns 0 on success and a system specific error code otherwise. </td>\n</tr>\n</table> </dd>\n<dt>Example:</dt>\n<dd>See <a href=\"stat#STAT\">STAT</a> for an example. </dd>\n<dt>See also:</dt>\n<dd>To stat a link: <a href=\"lstat#LSTAT\">LSTAT</a>, to stat a file: <a href=\"stat#STAT\">STAT</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/FSTAT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/FSTAT.html</a>\n  </p>\n</div>\n","ftell":"<h1 class=\"section\" id=\"FTELL\">8.95 <code>FTELL</code> — Current stream position</h1> \n<dl> <dt>Description:</dt>\n<dd>Retrieves the current position within an open file. <p>This intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine, function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>CALL FTELL(UNIT, OFFSET)</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>OFFSET = FTELL(UNIT)</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>OFFSET</var> </td>\n<td valign=\"top\" width=\"70%\">Shall of type <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>UNIT</var> </td>\n<td valign=\"top\" width=\"70%\">Shall of type <code>INTEGER</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>In either syntax, <var>OFFSET</var> is set to the current offset of unit number <var>UNIT</var>, or to -1 if the unit is not currently open. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_ftell\n  INTEGER :: i\n  OPEN(10, FILE=\"temp.dat\")\n  CALL ftell(10,i)\n  WRITE(*,*) i\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"fseek#FSEEK\">FSEEK</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/FTELL.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/FTELL.html</a>\n  </p>\n</div>\n","gamma":"<h1 class=\"section\" id=\"GAMMA\">8.96 <code>GAMMA</code> — Gamma function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>GAMMA(X)</code> computes Gamma (\\Gamma) of <var>X</var>. For positive, integer values of <var>X</var> the Gamma function simplifies to the factorial function \\Gamma(x)=(x-1)!. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>X = GAMMA(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>REAL</code> and neither zero nor a negative integer. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>REAL</code> of the same kind as <var>X</var>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_gamma\n  real :: x = 1.0\n  x = gamma(x) ! returns 1.0\nend program test_gamma</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>GAMMA(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4)</code> </td>\n<td valign=\"top\" width=\"25%\">GNU Extension </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DGAMMA(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">GNU Extension </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>Logarithm of the Gamma function: <a href=\"log_005fgamma#LOG_005fGAMMA\">LOG_GAMMA</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GAMMA.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GAMMA.html</a>\n  </p>\n</div>\n","gerror":"<h1 class=\"section\" id=\"GERROR\">8.97 <code>GERROR</code> — Get last system error message</h1> \n<dl> <dt>Description:</dt>\n<dd>Returns the system error message corresponding to the last system error. This resembles the functionality of <code>strerror(3)</code> in C. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL GERROR(RESULT)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>RESULT</var> </td>\n<td valign=\"top\" width=\"70%\">Shall of type <code>CHARACTER</code> and of default </td>\n</tr></table> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_gerror\n  CHARACTER(len=100) :: msg\n  CALL gerror(msg)\n  WRITE(*,*) msg\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"ierrno#IERRNO\">IERRNO</a>, <a href=\"perror#PERROR\">PERROR</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GERROR.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GERROR.html</a>\n  </p>\n</div>\n","getarg":"<h1 class=\"section\" id=\"GETARG\">8.98 <code>GETARG</code> — Get command line arguments</h1> \n<dl> <dt>Description:</dt>\n<dd>Retrieve the <var>POS</var>-th argument that was passed on the command line when the containing program was invoked. <p>This intrinsic routine is provided for backwards compatibility with GNU Fortran 77. In new code, programmers should consider the use of the <a href=\"get_005fcommand_005fargument#GET_005fCOMMAND_005fARGUMENT\">GET_COMMAND_ARGUMENT</a> intrinsic defined by the Fortran 2003 standard. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL GETARG(POS, VALUE)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>POS</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>INTEGER</code> and not wider than the default integer kind; <var>POS</var> \\geq 0 </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>VALUE</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>CHARACTER</code> and of default kind. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>VALUE</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>CHARACTER</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>After <code>GETARG</code> returns, the <var>VALUE</var> argument holds the <var>POS</var>th command line argument. If <var>VALUE</var> can not hold the argument, it is truncated to fit the length of <var>VALUE</var>. If there are less than <var>POS</var> arguments specified at the command line, <var>VALUE</var> will be filled with blanks. If <var>POS</var> = 0, <var>VALUE</var> is set to the name of the program (on systems that support this feature). </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_getarg\n  INTEGER :: i\n  CHARACTER(len=32) :: arg\n\n  DO i = 1, iargc()\n    CALL getarg(i, arg)\n    WRITE (*,*) arg\n  END DO\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>GNU Fortran 77 compatibility function: <a href=\"iargc#IARGC\">IARGC</a> <p>Fortran 2003 functions and subroutines: <a href=\"get_005fcommand#GET_005fCOMMAND\">GET_COMMAND</a>, <a href=\"get_005fcommand_005fargument#GET_005fCOMMAND_005fARGUMENT\">GET_COMMAND_ARGUMENT</a>, <a href=\"command_005fargument_005fcount#COMMAND_005fARGUMENT_005fCOUNT\">COMMAND_ARGUMENT_COUNT</a> </p>\n</dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GETARG.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GETARG.html</a>\n  </p>\n</div>\n","get_005fcommand":"<h1 class=\"section\" id=\"GET_005fCOMMAND\">8.99 <code>GET_COMMAND</code> — Get the entire command line</h1> \n<dl> <dt>Description:</dt>\n<dd>Retrieve the entire command line that was used to invoke the program. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2003 and later </dd>\n<dt>Class:</dt>\n<dd>Subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL GET_COMMAND([COMMAND, LENGTH, STATUS])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>COMMAND</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) shall be of type <code>CHARACTER</code> and of default kind. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>LENGTH</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Shall be of type <code>INTEGER</code> and of default kind. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STATUS</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Shall be of type <code>INTEGER</code> and of default kind. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>If <var>COMMAND</var> is present, stores the entire command line that was used to invoke the program in <var>COMMAND</var>. If <var>LENGTH</var> is present, it is assigned the length of the command line. If <var>STATUS</var> is present, it is assigned 0 upon success of the command, -1 if <var>COMMAND</var> is too short to store the command line, or a positive value in case of an error. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_get_command\n  CHARACTER(len=255) :: cmd\n  CALL get_command(cmd)\n  WRITE (*,*) TRIM(cmd)\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"get_005fcommand_005fargument#GET_005fCOMMAND_005fARGUMENT\">GET_COMMAND_ARGUMENT</a>, <a href=\"command_005fargument_005fcount#COMMAND_005fARGUMENT_005fCOUNT\">COMMAND_ARGUMENT_COUNT</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GET_005fCOMMAND.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GET_005fCOMMAND.html</a>\n  </p>\n</div>\n","get_005fcommand_005fargument":"<h1 class=\"section\" id=\"GET_005fCOMMAND_005fARGUMENT\">8.100 <code>GET_COMMAND_ARGUMENT</code> — Get command line arguments</h1> \n<dl> <dt>Description:</dt>\n<dd>Retrieve the <var>NUMBER</var>-th argument that was passed on the command line when the containing program was invoked. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2003 and later </dd>\n<dt>Class:</dt>\n<dd>Subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL GET_COMMAND_ARGUMENT(NUMBER [, VALUE, LENGTH, STATUS])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>NUMBER</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar of type <code>INTEGER</code> and of default kind, <var>NUMBER</var> \\geq 0 </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>VALUE</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Shall be a scalar of type <code>CHARACTER</code> and of default kind. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>LENGTH</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Shall be a scalar of type <code>INTEGER</code> and of default kind. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STATUS</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Shall be a scalar of type <code>INTEGER</code> and of default kind. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>After <code>GET_COMMAND_ARGUMENT</code> returns, the <var>VALUE</var> argument holds the <var>NUMBER</var>-th command line argument. If <var>VALUE</var> can not hold the argument, it is truncated to fit the length of <var>VALUE</var>. If there are less than <var>NUMBER</var> arguments specified at the command line, <var>VALUE</var> will be filled with blanks. If <var>NUMBER</var> = 0, <var>VALUE</var> is set to the name of the program (on systems that support this feature). The <var>LENGTH</var> argument contains the length of the <var>NUMBER</var>-th command line argument. If the argument retrieval fails, <var>STATUS</var> is a positive number; if <var>VALUE</var> contains a truncated command line argument, <var>STATUS</var> is -1; and otherwise the <var>STATUS</var> is zero. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_get_command_argument\n  INTEGER :: i\n  CHARACTER(len=32) :: arg\n\n  i = 0\n  DO\n    CALL get_command_argument(i, arg)\n    IF (LEN_TRIM(arg) == 0) EXIT\n\n    WRITE (*,*) TRIM(arg)\n    i = i+1\n  END DO\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"get_005fcommand#GET_005fCOMMAND\">GET_COMMAND</a>, <a href=\"command_005fargument_005fcount#COMMAND_005fARGUMENT_005fCOUNT\">COMMAND_ARGUMENT_COUNT</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GET_005fCOMMAND_005fARGUMENT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GET_005fCOMMAND_005fARGUMENT.html</a>\n  </p>\n</div>\n","getcwd":"<h1 class=\"section\" id=\"GETCWD\">8.101 <code>GETCWD</code> — Get current working directory</h1> \n<dl> <dt>Description:</dt>\n<dd>Get current working directory. <p>This intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine, function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>CALL GETCWD(C [, STATUS])</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>STATUS = GETCWD(C)</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>C</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>CHARACTER</code> and of default kind. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STATUS</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) status flag. Returns 0 on success, a system specific and nonzero error code otherwise. </td>\n</tr>\n</table> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_getcwd\n  CHARACTER(len=255) :: cwd\n  CALL getcwd(cwd)\n  WRITE(*,*) TRIM(cwd)\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"chdir#CHDIR\">CHDIR</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GETCWD.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GETCWD.html</a>\n  </p>\n</div>\n","getenv":"<h1 class=\"section\" id=\"GETENV\">8.102 <code>GETENV</code> — Get an environmental variable</h1> \n<dl> <dt>Description:</dt>\n<dd>Get the <var>VALUE</var> of the environmental variable <var>NAME</var>. <p>This intrinsic routine is provided for backwards compatibility with GNU Fortran 77. In new code, programmers should consider the use of the <a href=\"get_005fenvironment_005fvariable#GET_005fENVIRONMENT_005fVARIABLE\">GET_ENVIRONMENT_VARIABLE</a> intrinsic defined by the Fortran 2003 standard. </p>\n<p>Note that <code>GETENV</code> need not be thread-safe. It is the responsibility of the user to ensure that the environment is not being updated concurrently with a call to the <code>GETENV</code> intrinsic. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL GETENV(NAME, VALUE)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>NAME</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>CHARACTER</code> and of default kind. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>VALUE</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>CHARACTER</code> and of default kind. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>Stores the value of <var>NAME</var> in <var>VALUE</var>. If <var>VALUE</var> is not large enough to hold the data, it is truncated. If <var>NAME</var> is not set, <var>VALUE</var> will be filled with blanks. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_getenv\n  CHARACTER(len=255) :: homedir\n  CALL getenv(\"HOME\", homedir)\n  WRITE (*,*) TRIM(homedir)\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"get_005fenvironment_005fvariable#GET_005fENVIRONMENT_005fVARIABLE\">GET_ENVIRONMENT_VARIABLE</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GETENV.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GETENV.html</a>\n  </p>\n</div>\n","get_005fenvironment_005fvariable":"<h1 class=\"section\" id=\"GET_005fENVIRONMENT_005fVARIABLE\">8.103 <code>GET_ENVIRONMENT_VARIABLE</code> — Get an environmental variable</h1> \n<dl> <dt>Description:</dt>\n<dd>Get the <var>VALUE</var> of the environmental variable <var>NAME</var>. <p>Note that <code>GET_ENVIRONMENT_VARIABLE</code> need not be thread-safe. It is the responsibility of the user to ensure that the environment is not being updated concurrently with a call to the <code>GET_ENVIRONMENT_VARIABLE</code> intrinsic. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>Fortran 2003 and later </dd>\n<dt>Class:</dt>\n<dd>Subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL GET_ENVIRONMENT_VARIABLE(NAME[, VALUE, LENGTH, STATUS, TRIM_NAME)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>NAME</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar of type <code>CHARACTER</code> and of default kind. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>VALUE</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Shall be a scalar of type <code>CHARACTER</code> and of default kind. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>LENGTH</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Shall be a scalar of type <code>INTEGER</code> and of default kind. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STATUS</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Shall be a scalar of type <code>INTEGER</code> and of default kind. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>TRIM_NAME</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Shall be a scalar of type <code>LOGICAL</code> and of default kind. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>Stores the value of <var>NAME</var> in <var>VALUE</var>. If <var>VALUE</var> is not large enough to hold the data, it is truncated. If <var>NAME</var> is not set, <var>VALUE</var> will be filled with blanks. Argument <var>LENGTH</var> contains the length needed for storing the environment variable <var>NAME</var> or zero if it is not present. <var>STATUS</var> is -1 if <var>VALUE</var> is present but too short for the environment variable; it is 1 if the environment variable does not exist and 2 if the processor does not support environment variables; in all other cases <var>STATUS</var> is zero. If <var>TRIM_NAME</var> is present with the value <code>.FALSE.</code>, the trailing blanks in <var>NAME</var> are significant; otherwise they are not part of the environment variable name. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_getenv\n  CHARACTER(len=255) :: homedir\n  CALL get_environment_variable(\"HOME\", homedir)\n  WRITE (*,*) TRIM(homedir)\nEND PROGRAM</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GET_005fENVIRONMENT_005fVARIABLE.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GET_005fENVIRONMENT_005fVARIABLE.html</a>\n  </p>\n</div>\n","getgid":"<h1 class=\"section\" id=\"GETGID\">8.104 <code>GETGID</code> — Group ID function</h1> \n<dl> <dt>Description:</dt>\n<dd>Returns the numerical group ID of the current process. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = GETGID()</code> </dd>\n<dt>Return value:</dt>\n<dd>The return value of <code>GETGID</code> is an <code>INTEGER</code> of the default kind. </dd>\n<dt>Example:</dt>\n<dd>See <code>GETPID</code> for an example. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"getpid#GETPID\">GETPID</a>, <a href=\"getuid#GETUID\">GETUID</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GETGID.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GETGID.html</a>\n  </p>\n</div>\n","getlog":"<h1 class=\"section\" id=\"GETLOG\">8.105 <code>GETLOG</code> — Get login name</h1> \n<dl> <dt>Description:</dt>\n<dd>Gets the username under which the program is running. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL GETLOG(C)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>C</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>CHARACTER</code> and of default kind. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>Stores the current user name in <var>LOGIN</var>. (On systems where POSIX functions <code>geteuid</code> and <code>getpwuid</code> are not available, and the <code>getlogin</code> function is not implemented either, this will return a blank string.) </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM TEST_GETLOG\n  CHARACTER(32) :: login\n  CALL GETLOG(login)\n  WRITE(*,*) login\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"getuid#GETUID\">GETUID</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GETLOG.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GETLOG.html</a>\n  </p>\n</div>\n","getpid":"<h1 class=\"section\" id=\"GETPID\">8.106 <code>GETPID</code> — Process ID function</h1> \n<dl> <dt>Description:</dt>\n<dd>Returns the numerical process identifier of the current process. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = GETPID()</code> </dd>\n<dt>Return value:</dt>\n<dd>The return value of <code>GETPID</code> is an <code>INTEGER</code> of the default kind. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program info\n  print *, \"The current process ID is \", getpid()\n  print *, \"Your numerical user ID is \", getuid()\n  print *, \"Your numerical group ID is \", getgid()\nend program info</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"getgid#GETGID\">GETGID</a>, <a href=\"getuid#GETUID\">GETUID</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GETPID.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GETPID.html</a>\n  </p>\n</div>\n","getuid":"<h1 class=\"section\" id=\"GETUID\">8.107 <code>GETUID</code> — User ID function</h1> \n<dl> <dt>Description:</dt>\n<dd>Returns the numerical user ID of the current process. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = GETUID()</code> </dd>\n<dt>Return value:</dt>\n<dd>The return value of <code>GETUID</code> is an <code>INTEGER</code> of the default kind. </dd>\n<dt>Example:</dt>\n<dd>See <code>GETPID</code> for an example. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"getpid#GETPID\">GETPID</a>, <a href=\"getlog#GETLOG\">GETLOG</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GETUID.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GETUID.html</a>\n  </p>\n</div>\n","gmtime":"<h1 class=\"section\" id=\"GMTIME\">8.108 <code>GMTIME</code> — Convert time to GMT info</h1> \n<dl> <dt>Description:</dt>\n<dd>Given a system time value <var>TIME</var> (as provided by the <code>TIME8</code> intrinsic), fills <var>VALUES</var> with values extracted from it appropriate to the UTC time zone (Universal Coordinated Time, also known in some countries as GMT, Greenwich Mean Time), using <code>gmtime(3)</code>. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL GMTIME(TIME, VALUES)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>TIME</var> </td>\n<td valign=\"top\" width=\"70%\">An <code>INTEGER</code> scalar expression corresponding to a system time, with <code>INTENT(IN)</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>VALUES</var> </td>\n<td valign=\"top\" width=\"70%\">A default <code>INTEGER</code> array with 9 elements, with <code>INTENT(OUT)</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The elements of <var>VALUES</var> are assigned as follows: <ol type=\"1\" start=\"1\"> <li>Seconds after the minute, range 0–59 or 0–61 to allow for leap seconds </li>\n<li>Minutes after the hour, range 0–59 </li>\n<li>Hours past midnight, range 0–23 </li>\n<li>Day of month, range 0–31 </li>\n<li>Number of months since January, range 0–12 </li>\n<li>Years since 1900 </li>\n<li>Number of days since Sunday, range 0–6 </li>\n<li>Days since January 1 </li>\n<li>Daylight savings indicator: positive if daylight savings is in effect, zero if not, and negative if the information is not available. </li>\n</ol> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"ctime#CTIME\">CTIME</a>, <a href=\"ltime#LTIME\">LTIME</a>, <a href=\"time#TIME\">TIME</a>, <a href=\"time8#TIME8\">TIME8</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GMTIME.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/GMTIME.html</a>\n  </p>\n</div>\n","hostnm":"<h1 class=\"section\" id=\"HOSTNM\">8.109 <code>HOSTNM</code> — Get system host name</h1> \n<dl> <dt>Description:</dt>\n<dd>Retrieves the host name of the system on which the program is running. <p>This intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine, function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>CALL HOSTNM(C [, STATUS])</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>STATUS = HOSTNM(NAME)</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>C</var> </td>\n<td valign=\"top\" width=\"70%\">Shall of type <code>CHARACTER</code> and of default kind. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STATUS</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) status flag of type <code>INTEGER</code>. Returns 0 on success, or a system specific error code otherwise. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>In either syntax, <var>NAME</var> is set to the current hostname if it can be obtained, or to a blank string otherwise. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/HOSTNM.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/HOSTNM.html</a>\n  </p>\n</div>\n","huge":"<h1 class=\"section\" id=\"HUGE\">8.110 <code>HUGE</code> — Largest number of a kind</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>HUGE(X)</code> returns the largest number that is not an infinity in the model of the type of <code>X</code>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = HUGE(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>REAL</code> or <code>INTEGER</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of the same type and kind as <var>X</var> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_huge_tiny\n  print *, huge(0), huge(0.0), huge(0.0d0)\n  print *, tiny(0.0), tiny(0.0d0)\nend program test_huge_tiny</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/HUGE.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/HUGE.html</a>\n  </p>\n</div>\n","hypot":"<h1 class=\"section\" id=\"HYPOT\">8.111 <code>HYPOT</code> — Euclidean distance function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>HYPOT(X,Y)</code> is the Euclidean distance function. It is equal to \\sqrtX^2 + Y^2, without undue underflow or overflow. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = HYPOT(X, Y)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>Y</var> </td>\n<td valign=\"top\" width=\"70%\">The type and kind type parameter shall be the same as <var>X</var>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value has the same type and kind type parameter as <var>X</var>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_hypot\n  real(4) :: x = 1.e0_4, y = 0.5e0_4\n  x = hypot(x,y)\nend program test_hypot</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/HYPOT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/HYPOT.html</a>\n  </p>\n</div>\n","iachar":"<h1 class=\"section\" id=\"IACHAR\">8.112 <code>IACHAR</code> — Code in ASCII collating sequence</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>IACHAR(C)</code> returns the code for the ASCII character in the first character position of <code>C</code>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later, with <var>KIND</var> argument Fortran 2003 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = IACHAR(C [, KIND])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>C</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar <code>CHARACTER</code>, with <code>INTENT(IN)</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>KIND</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) An <code>INTEGER</code> initialization expression indicating the kind parameter of the result. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> and of kind <var>KIND</var>. If <var>KIND</var> is absent, the return value is of default integer kind. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_iachar\n  integer i\n  i = iachar(' ')\nend program test_iachar</pre> </dd>\n<dt>Note:</dt>\n<dd>See <a href=\"ichar#ICHAR\">ICHAR</a> for a discussion of converting between numerical values and formatted string representations. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"achar#ACHAR\">ACHAR</a>, <a href=\"char#CHAR\">CHAR</a>, <a href=\"ichar#ICHAR\">ICHAR</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IACHAR.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IACHAR.html</a>\n  </p>\n</div>\n","iall":"<h1 class=\"section\" id=\"IALL\">8.113 <code>IALL</code> — Bitwise AND of array elements</h1> \n<dl> <dt>Description:</dt>\n<dd>Reduces with bitwise AND the elements of <var>ARRAY</var> along dimension <var>DIM</var> if the corresponding element in <var>MASK</var> is <code>TRUE</code>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = IALL(ARRAY[, MASK])</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = IALL(ARRAY, DIM[, MASK])</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>ARRAY</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an array of type <code>INTEGER</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>DIM</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) shall be a scalar of type <code>INTEGER</code> with a value in the range from 1 to n, where n equals the rank of <var>ARRAY</var>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>MASK</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) shall be of type <code>LOGICAL</code> and either be a scalar or an array of the same shape as <var>ARRAY</var>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The result is of the same type as <var>ARRAY</var>. <p>If <var>DIM</var> is absent, a scalar with the bitwise ALL of all elements in <var>ARRAY</var> is returned. Otherwise, an array of rank n-1, where n equals the rank of <var>ARRAY</var>, and a shape similar to that of <var>ARRAY</var> with dimension <var>DIM</var> dropped is returned. </p>\n</dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_iall\n  INTEGER(1) :: a(2)\n\n  a(1) = b'00100100'\n  a(2) = b'01101010'\n\n  ! prints 00100000\n  PRINT '(b8.8)', IALL(a)\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"iany#IANY\">IANY</a>, <a href=\"iparity#IPARITY\">IPARITY</a>, <a href=\"iand#IAND\">IAND</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IALL.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IALL.html</a>\n  </p>\n</div>\n","iand":"<h1 class=\"section\" id=\"IAND\">8.114 <code>IAND</code> — Bitwise logical and</h1> \n<dl> <dt>Description:</dt>\n<dd>Bitwise logical <code>AND</code>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = IAND(I, J)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>J</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>, of the same kind as <var>I</var>. (As a GNU extension, different kinds are also permitted.) </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return type is <code>INTEGER</code>, of the same kind as the arguments. (If the argument kinds differ, it is of the same kind as the larger argument.) </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_iand\n  INTEGER :: a, b\n  DATA a / Z'F' /, b / Z'3' /\n  WRITE (*,*) IAND(a, b)\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"ior#IOR\">IOR</a>, <a href=\"ieor#IEOR\">IEOR</a>, <a href=\"ibits#IBITS\">IBITS</a>, <a href=\"ibset#IBSET\">IBSET</a>, <a href=\"ibclr#IBCLR\">IBCLR</a>, <a href=\"not#NOT\">NOT</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IAND.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IAND.html</a>\n  </p>\n</div>\n","iany":"<h1 class=\"section\" id=\"IANY\">8.115 <code>IANY</code> — Bitwise OR of array elements</h1> \n<dl> <dt>Description:</dt>\n<dd>Reduces with bitwise OR (inclusive or) the elements of <var>ARRAY</var> along dimension <var>DIM</var> if the corresponding element in <var>MASK</var> is <code>TRUE</code>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = IANY(ARRAY[, MASK])</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = IANY(ARRAY, DIM[, MASK])</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>ARRAY</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an array of type <code>INTEGER</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>DIM</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) shall be a scalar of type <code>INTEGER</code> with a value in the range from 1 to n, where n equals the rank of <var>ARRAY</var>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>MASK</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) shall be of type <code>LOGICAL</code> and either be a scalar or an array of the same shape as <var>ARRAY</var>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The result is of the same type as <var>ARRAY</var>. <p>If <var>DIM</var> is absent, a scalar with the bitwise OR of all elements in <var>ARRAY</var> is returned. Otherwise, an array of rank n-1, where n equals the rank of <var>ARRAY</var>, and a shape similar to that of <var>ARRAY</var> with dimension <var>DIM</var> dropped is returned. </p>\n</dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_iany\n  INTEGER(1) :: a(2)\n\n  a(1) = b'00100100'\n  a(2) = b'01101010'\n\n  ! prints 01101110\n  PRINT '(b8.8)', IANY(a)\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"iparity#IPARITY\">IPARITY</a>, <a href=\"iall#IALL\">IALL</a>, <a href=\"ior#IOR\">IOR</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IANY.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IANY.html</a>\n  </p>\n</div>\n","iargc":"<h1 class=\"section\" id=\"IARGC\">8.116 <code>IARGC</code> — Get the number of command line arguments</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>IARGC</code> returns the number of arguments passed on the command line when the containing program was invoked. <p>This intrinsic routine is provided for backwards compatibility with GNU Fortran 77. In new code, programmers should consider the use of the <a href=\"command_005fargument_005fcount#COMMAND_005fARGUMENT_005fCOUNT\">COMMAND_ARGUMENT_COUNT</a> intrinsic defined by the Fortran 2003 standard. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = IARGC()</code> </dd>\n<dt>Arguments:</dt>\n<dd>None. </dd>\n<dt>Return value:</dt>\n<dd>The number of command line arguments, type <code>INTEGER(4)</code>. </dd>\n<dt>Example:</dt>\n<dd>See <a href=\"getarg#GETARG\">GETARG</a> </dd>\n<dt>See also:</dt>\n<dd>GNU Fortran 77 compatibility subroutine: <a href=\"getarg#GETARG\">GETARG</a> <p>Fortran 2003 functions and subroutines: <a href=\"get_005fcommand#GET_005fCOMMAND\">GET_COMMAND</a>, <a href=\"get_005fcommand_005fargument#GET_005fCOMMAND_005fARGUMENT\">GET_COMMAND_ARGUMENT</a>, <a href=\"command_005fargument_005fcount#COMMAND_005fARGUMENT_005fCOUNT\">COMMAND_ARGUMENT_COUNT</a> </p>\n</dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IARGC.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IARGC.html</a>\n  </p>\n</div>\n","ibclr":"<h1 class=\"section\" id=\"IBCLR\">8.117 <code>IBCLR</code> — Clear bit</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>IBCLR</code> returns the value of <var>I</var> with the bit at position <var>POS</var> set to zero. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = IBCLR(I, POS)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>POS</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> and of the same kind as <var>I</var>. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"ibits#IBITS\">IBITS</a>, <a href=\"ibset#IBSET\">IBSET</a>, <a href=\"iand#IAND\">IAND</a>, <a href=\"ior#IOR\">IOR</a>, <a href=\"ieor#IEOR\">IEOR</a>, <a href=\"mvbits#MVBITS\">MVBITS</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IBCLR.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IBCLR.html</a>\n  </p>\n</div>\n","ibits":"<h1 class=\"section\" id=\"IBITS\">8.118 <code>IBITS</code> — Bit extraction</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>IBITS</code> extracts a field of length <var>LEN</var> from <var>I</var>, starting from bit position <var>POS</var> and extending left for <var>LEN</var> bits. The result is right-justified and the remaining bits are zeroed. The value of <code>POS+LEN</code> must be less than or equal to the value <code>BIT_SIZE(I)</code>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = IBITS(I, POS, LEN)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>POS</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>LEN</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> and of the same kind as <var>I</var>. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"bit_005fsize#BIT_005fSIZE\">BIT_SIZE</a>, <a href=\"ibclr#IBCLR\">IBCLR</a>, <a href=\"ibset#IBSET\">IBSET</a>, <a href=\"iand#IAND\">IAND</a>, <a href=\"ior#IOR\">IOR</a>, <a href=\"ieor#IEOR\">IEOR</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IBITS.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IBITS.html</a>\n  </p>\n</div>\n","ibset":"<h1 class=\"section\" id=\"IBSET\">8.119 <code>IBSET</code> — Set bit</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>IBSET</code> returns the value of <var>I</var> with the bit at position <var>POS</var> set to one. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = IBSET(I, POS)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>POS</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> and of the same kind as <var>I</var>. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"ibclr#IBCLR\">IBCLR</a>, <a href=\"ibits#IBITS\">IBITS</a>, <a href=\"iand#IAND\">IAND</a>, <a href=\"ior#IOR\">IOR</a>, <a href=\"ieor#IEOR\">IEOR</a>, <a href=\"mvbits#MVBITS\">MVBITS</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IBSET.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IBSET.html</a>\n  </p>\n</div>\n","ichar":"<h1 class=\"section\" id=\"ICHAR\">8.120 <code>ICHAR</code> — Character-to-integer conversion function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>ICHAR(C)</code> returns the code for the character in the first character position of <code>C</code> in the system's native character set. The correspondence between characters and their codes is not necessarily the same across different GNU Fortran implementations. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later, with <var>KIND</var> argument Fortran 2003 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = ICHAR(C [, KIND])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>C</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar <code>CHARACTER</code>, with <code>INTENT(IN)</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>KIND</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) An <code>INTEGER</code> initialization expression indicating the kind parameter of the result. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> and of kind <var>KIND</var>. If <var>KIND</var> is absent, the return value is of default integer kind. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_ichar\n  integer i\n  i = ichar(' ')\nend program test_ichar</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>ICHAR(C)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>CHARACTER C</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>INTEGER(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n</table> </dd>\n<dt>Note:</dt>\n<dd>No intrinsic exists to convert between a numeric value and a formatted character string representation – for instance, given the <code>CHARACTER</code> value <code>'154'</code>, obtaining an <code>INTEGER</code> or <code>REAL</code> value with the value 154, or vice versa. Instead, this functionality is provided by internal-file I/O, as in the following example: <pre class=\"smallexample\">program read_val\n  integer value\n  character(len=10) string, string2\n  string = '154'\n\n  ! Convert a string to a numeric value\n  read (string,'(I10)') value\n  print *, value\n\n  ! Convert a value to a formatted string\n  write (string2,'(I10)') value\n  print *, string2\nend program read_val</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"achar#ACHAR\">ACHAR</a>, <a href=\"char#CHAR\">CHAR</a>, <a href=\"iachar#IACHAR\">IACHAR</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ICHAR.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ICHAR.html</a>\n  </p>\n</div>\n","idate":"<h1 class=\"section\" id=\"IDATE\">8.121 <code>IDATE</code> — Get current local time subroutine (day/month/year)</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>IDATE(VALUES)</code> Fills <var>VALUES</var> with the numerical values at the current local time. The day (in the range 1-31), month (in the range 1-12), and year appear in elements 1, 2, and 3 of <var>VALUES</var>, respectively. The year has four significant digits. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL IDATE(VALUES)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>VALUES</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER, DIMENSION(3)</code> and the kind shall be the default integer kind. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>Does not return anything. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_idate\n  integer, dimension(3) :: tarray\n  call idate(tarray)\n  print *, tarray(1)\n  print *, tarray(2)\n  print *, tarray(3)\nend program test_idate</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IDATE.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IDATE.html</a>\n  </p>\n</div>\n","ieor":"<h1 class=\"section\" id=\"IEOR\">8.122 <code>IEOR</code> — Bitwise logical exclusive or</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>IEOR</code> returns the bitwise Boolean exclusive-OR of <var>I</var> and <var>J</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = IEOR(I, J)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>J</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>, of the same kind as <var>I</var>. (As a GNU extension, different kinds are also permitted.) </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return type is <code>INTEGER</code>, of the same kind as the arguments. (If the argument kinds differ, it is of the same kind as the larger argument.) </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"ior#IOR\">IOR</a>, <a href=\"iand#IAND\">IAND</a>, <a href=\"ibits#IBITS\">IBITS</a>, <a href=\"ibset#IBSET\">IBSET</a>, <a href=\"ibclr#IBCLR\">IBCLR</a>, <a href=\"not#NOT\">NOT</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IEOR.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IEOR.html</a>\n  </p>\n</div>\n","ierrno":"<h1 class=\"section\" id=\"IERRNO\">8.123 <code>IERRNO</code> — Get the last system error number</h1> \n<dl> <dt>Description:</dt>\n<dd>Returns the last system error number, as given by the C <code>errno</code> variable. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = IERRNO()</code> </dd>\n<dt>Arguments:</dt>\n<dd>None. </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> and of the default integer kind. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"perror#PERROR\">PERROR</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IERRNO.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IERRNO.html</a>\n  </p>\n</div>\n","image_005findex":"<h1 class=\"section\" id=\"IMAGE_005fINDEX\">8.124 <code>IMAGE_INDEX</code> — Function that converts a cosubscript to an image index</h1> \n<dl> <dt>Description:</dt>\n<dd>Returns the image index belonging to a cosubscript. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Inquiry function. </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = IMAGE_INDEX(COARRAY, SUB)</code> </dd>\n<dt>Arguments: None.</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>COARRAY</var> </td>\n<td valign=\"top\" width=\"70%\">Coarray of any type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>SUB</var> </td>\n<td valign=\"top\" width=\"70%\">default integer rank-1 array of a size equal to the corank of <var>COARRAY</var>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>Scalar default integer with the value of the image index which corresponds to the cosubscripts. For invalid cosubscripts the result is zero. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">INTEGER :: array[2,-1:4,8,*]\n! Writes  28 (or 0 if there are fewer than 28 images)\nWRITE (*,*) IMAGE_INDEX (array, [2,0,3,1])</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"this_005fimage#THIS_005fIMAGE\">THIS_IMAGE</a>, <a href=\"num_005fimages#NUM_005fIMAGES\">NUM_IMAGES</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IMAGE_005fINDEX.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IMAGE_005fINDEX.html</a>\n  </p>\n</div>\n","index-intrinsic":"<h1 class=\"section\" id=\"INDEX-intrinsic\">8.125 <code>INDEX</code> — Position of a substring within a string</h1> \n<dl> <dt>Description:</dt>\n<dd>Returns the position of the start of the first occurrence of string <var>SUBSTRING</var> as a substring in <var>STRING</var>, counting from one. If <var>SUBSTRING</var> is not present in <var>STRING</var>, zero is returned. If the <var>BACK</var> argument is present and true, the return value is the start of the last occurrence rather than the first. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later, with <var>KIND</var> argument Fortran 2003 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = INDEX(STRING, SUBSTRING [, BACK [, KIND]])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STRING</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar <code>CHARACTER</code>, with <code>INTENT(IN)</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>SUBSTRING</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar <code>CHARACTER</code>, with <code>INTENT(IN)</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>BACK</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Shall be a scalar <code>LOGICAL</code>, with <code>INTENT(IN)</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>KIND</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) An <code>INTEGER</code> initialization expression indicating the kind parameter of the result. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> and of kind <var>KIND</var>. If <var>KIND</var> is absent, the return value is of default integer kind. </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>INDEX(STRING, SUBSTRING)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>CHARACTER</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>INTEGER(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"scan#SCAN\">SCAN</a>, <a href=\"verify#VERIFY\">VERIFY</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/INDEX-intrinsic.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/INDEX-intrinsic.html</a>\n  </p>\n</div>\n","int":"<h1 class=\"section\" id=\"INT\">8.126 <code>INT</code> — Convert to integer type</h1> \n<dl> <dt>Description:</dt>\n<dd>Convert to integer type </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = INT(A [, KIND))</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>A</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>INTEGER</code>, <code>REAL</code>, or <code>COMPLEX</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>KIND</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) An <code>INTEGER</code> initialization expression indicating the kind parameter of the result. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>These functions return a <code>INTEGER</code> variable or array under the following rules: <dl> <dt>(A)</dt>\n<dd>If <var>A</var> is of type <code>INTEGER</code>, <code>INT(A) = A</code> </dd>\n<dt>(B)</dt>\n<dd>If <var>A</var> is of type <code>REAL</code> and |A| &lt; 1, <code>INT(A)</code> equals <code>0</code>. If |A| \\geq 1, then <code>INT(A)</code> equals the largest integer that does not exceed the range of <var>A</var> and whose sign is the same as the sign of <var>A</var>. </dd>\n<dt>(C)</dt>\n<dd>If <var>A</var> is of type <code>COMPLEX</code>, rule B is applied to the real part of <var>A</var>. </dd>\n</dl> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_int\n  integer :: i = 42\n  complex :: z = (-3.7, 1.0)\n  print *, int(i)\n  print *, int(z), int(z,8)\nend program</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>INT(A)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4) A</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>INTEGER</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>IFIX(A)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4) A</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>INTEGER</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>IDINT(A)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) A</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>INTEGER</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n</table> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/INT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/INT.html</a>\n  </p>\n</div>\n","int2":"<h1 class=\"section\" id=\"INT2\">8.127 <code>INT2</code> — Convert to 16-bit integer type</h1> \n<dl> <dt>Description:</dt>\n<dd>Convert to a <code>KIND=2</code> integer type. This is equivalent to the standard <code>INT</code> intrinsic with an optional argument of <code>KIND=2</code>, and is only included for backwards compatibility. <p>The <code>SHORT</code> intrinsic is equivalent to <code>INT2</code>. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = INT2(A)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>A</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>INTEGER</code>, <code>REAL</code>, or <code>COMPLEX</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is a <code>INTEGER(2)</code> variable. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"int#INT\">INT</a>, <a href=\"int8#INT8\">INT8</a>, <a href=\"long#LONG\">LONG</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/INT2.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/INT2.html</a>\n  </p>\n</div>\n","int8":"<h1 class=\"section\" id=\"INT8\">8.128 <code>INT8</code> — Convert to 64-bit integer type</h1> \n<dl> <dt>Description:</dt>\n<dd>Convert to a <code>KIND=8</code> integer type. This is equivalent to the standard <code>INT</code> intrinsic with an optional argument of <code>KIND=8</code>, and is only included for backwards compatibility. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = INT8(A)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>A</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>INTEGER</code>, <code>REAL</code>, or <code>COMPLEX</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is a <code>INTEGER(8)</code> variable. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"int#INT\">INT</a>, <a href=\"int2#INT2\">INT2</a>, <a href=\"long#LONG\">LONG</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/INT8.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/INT8.html</a>\n  </p>\n</div>\n","ior":"<h1 class=\"section\" id=\"IOR\">8.129 <code>IOR</code> — Bitwise logical or</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>IOR</code> returns the bitwise Boolean inclusive-OR of <var>I</var> and <var>J</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = IOR(I, J)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>J</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>, of the same kind as <var>I</var>. (As a GNU extension, different kinds are also permitted.) </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return type is <code>INTEGER</code>, of the same kind as the arguments. (If the argument kinds differ, it is of the same kind as the larger argument.) </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"ieor#IEOR\">IEOR</a>, <a href=\"iand#IAND\">IAND</a>, <a href=\"ibits#IBITS\">IBITS</a>, <a href=\"ibset#IBSET\">IBSET</a>, <a href=\"ibclr#IBCLR\">IBCLR</a>, <a href=\"not#NOT\">NOT</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IOR.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IOR.html</a>\n  </p>\n</div>\n","iparity":"<h1 class=\"section\" id=\"IPARITY\">8.130 <code>IPARITY</code> — Bitwise XOR of array elements</h1> \n<dl> <dt>Description:</dt>\n<dd>Reduces with bitwise XOR (exclusive or) the elements of <var>ARRAY</var> along dimension <var>DIM</var> if the corresponding element in <var>MASK</var> is <code>TRUE</code>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = IPARITY(ARRAY[, MASK])</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = IPARITY(ARRAY, DIM[, MASK])</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>ARRAY</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an array of type <code>INTEGER</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>DIM</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) shall be a scalar of type <code>INTEGER</code> with a value in the range from 1 to n, where n equals the rank of <var>ARRAY</var>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>MASK</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) shall be of type <code>LOGICAL</code> and either be a scalar or an array of the same shape as <var>ARRAY</var>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The result is of the same type as <var>ARRAY</var>. <p>If <var>DIM</var> is absent, a scalar with the bitwise XOR of all elements in <var>ARRAY</var> is returned. Otherwise, an array of rank n-1, where n equals the rank of <var>ARRAY</var>, and a shape similar to that of <var>ARRAY</var> with dimension <var>DIM</var> dropped is returned. </p>\n</dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_iparity\n  INTEGER(1) :: a(2)\n\n  a(1) = b'00100100'\n  a(2) = b'01101010'\n\n  ! prints 01001110\n  PRINT '(b8.8)', IPARITY(a)\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"iany#IANY\">IANY</a>, <a href=\"iall#IALL\">IALL</a>, <a href=\"ieor#IEOR\">IEOR</a>, <a href=\"parity#PARITY\">PARITY</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IPARITY.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IPARITY.html</a>\n  </p>\n</div>\n","irand":"<h1 class=\"section\" id=\"IRAND\">8.131 <code>IRAND</code> — Integer pseudo-random number</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>IRAND(FLAG)</code> returns a pseudo-random number from a uniform distribution between 0 and a system-dependent limit (which is in most cases 2147483647). If <var>FLAG</var> is 0, the next number in the current sequence is returned; if <var>FLAG</var> is 1, the generator is restarted by <code>CALL SRAND(0)</code>; if <var>FLAG</var> has any other value, it is used as a new seed with <code>SRAND</code>. <p>This intrinsic routine is provided for backwards compatibility with GNU Fortran 77. It implements a simple modulo generator as provided by <code>g77</code>. For new code, one should consider the use of <a href=\"random_005fnumber#RANDOM_005fNUMBER\">RANDOM_NUMBER</a> as it implements a superior algorithm. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = IRAND(I)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar <code>INTEGER</code> of kind 4. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of <code>INTEGER(kind=4)</code> type. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_irand\n  integer,parameter :: seed = 86456\n\n  call srand(seed)\n  print *, irand(), irand(), irand(), irand()\n  print *, irand(seed), irand(), irand(), irand()\nend program test_irand</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IRAND.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IRAND.html</a>\n  </p>\n</div>\n","is_005fiostat_005fend":"<h1 class=\"section\" id=\"IS_005fIOSTAT_005fEND\">8.132 <code>IS_IOSTAT_END</code> — Test for end-of-file value</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>IS_IOSTAT_END</code> tests whether an variable has the value of the I/O status “end of file”. The function is equivalent to comparing the variable with the <code>IOSTAT_END</code> parameter of the intrinsic module <code>ISO_FORTRAN_ENV</code>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2003 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = IS_IOSTAT_END(I)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of the type <code>INTEGER</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>Returns a <code>LOGICAL</code> of the default kind, which <code>.TRUE.</code> if <var>I</var> has the value which indicates an end of file condition for <code>IOSTAT=</code> specifiers, and is <code>.FALSE.</code> otherwise. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM iostat\n  IMPLICIT NONE\n  INTEGER :: stat, i\n  OPEN(88, FILE='test.dat')\n  READ(88, *, IOSTAT=stat) i\n  IF(IS_IOSTAT_END(stat)) STOP 'END OF FILE'\nEND PROGRAM</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IS_005fIOSTAT_005fEND.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IS_005fIOSTAT_005fEND.html</a>\n  </p>\n</div>\n","is_005fiostat_005feor":"<h1 class=\"section\" id=\"IS_005fIOSTAT_005fEOR\">8.133 <code>IS_IOSTAT_EOR</code> — Test for end-of-record value</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>IS_IOSTAT_EOR</code> tests whether an variable has the value of the I/O status “end of record”. The function is equivalent to comparing the variable with the <code>IOSTAT_EOR</code> parameter of the intrinsic module <code>ISO_FORTRAN_ENV</code>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2003 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = IS_IOSTAT_EOR(I)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of the type <code>INTEGER</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>Returns a <code>LOGICAL</code> of the default kind, which <code>.TRUE.</code> if <var>I</var> has the value which indicates an end of file condition for <code>IOSTAT=</code> specifiers, and is <code>.FALSE.</code> otherwise. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM iostat\n  IMPLICIT NONE\n  INTEGER :: stat, i(50)\n  OPEN(88, FILE='test.dat', FORM='UNFORMATTED')\n  READ(88, IOSTAT=stat) i\n  IF(IS_IOSTAT_EOR(stat)) STOP 'END OF RECORD'\nEND PROGRAM</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IS_005fIOSTAT_005fEOR.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/IS_005fIOSTAT_005fEOR.html</a>\n  </p>\n</div>\n","isatty":"<h1 class=\"section\" id=\"ISATTY\">8.134 <code>ISATTY</code> — Whether a unit is a terminal device.</h1> \n<dl> <dt>Description:</dt>\n<dd>Determine whether a unit is connected to a terminal device. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = ISATTY(UNIT)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>UNIT</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar <code>INTEGER</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>Returns <code>.TRUE.</code> if the <var>UNIT</var> is connected to a terminal device, <code>.FALSE.</code> otherwise. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_isatty\n  INTEGER(kind=1) :: unit\n  DO unit = 1, 10\n    write(*,*) isatty(unit=unit)\n  END DO\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"ttynam#TTYNAM\">TTYNAM</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ISATTY.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ISATTY.html</a>\n  </p>\n</div>\n","ishft":"<h1 class=\"section\" id=\"ISHFT\">8.135 <code>ISHFT</code> — Shift bits</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>ISHFT</code> returns a value corresponding to <var>I</var> with all of the bits shifted <var>SHIFT</var> places. A value of <var>SHIFT</var> greater than zero corresponds to a left shift, a value of zero corresponds to no shift, and a value less than zero corresponds to a right shift. If the absolute value of <var>SHIFT</var> is greater than <code>BIT_SIZE(I)</code>, the value is undefined. Bits shifted out from the left end or right end are lost; zeros are shifted in from the opposite end. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = ISHFT(I, SHIFT)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>SHIFT</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> and of the same kind as <var>I</var>. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"ishftc#ISHFTC\">ISHFTC</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ISHFT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ISHFT.html</a>\n  </p>\n</div>\n","ishftc":"<h1 class=\"section\" id=\"ISHFTC\">8.136 <code>ISHFTC</code> — Shift bits circularly</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>ISHFTC</code> returns a value corresponding to <var>I</var> with the rightmost <var>SIZE</var> bits shifted circularly <var>SHIFT</var> places; that is, bits shifted out one end are shifted into the opposite end. A value of <var>SHIFT</var> greater than zero corresponds to a left shift, a value of zero corresponds to no shift, and a value less than zero corresponds to a right shift. The absolute value of <var>SHIFT</var> must be less than <var>SIZE</var>. If the <var>SIZE</var> argument is omitted, it is taken to be equivalent to <code>BIT_SIZE(I)</code>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = ISHFTC(I, SHIFT [, SIZE])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>SHIFT</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>SIZE</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) The type shall be <code>INTEGER</code>; the value must be greater than zero and less than or equal to <code>BIT_SIZE(I)</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> and of the same kind as <var>I</var>. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"ishft#ISHFT\">ISHFT</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ISHFTC.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ISHFTC.html</a>\n  </p>\n</div>\n","isnan":"<h1 class=\"section\" id=\"ISNAN\">8.137 <code>ISNAN</code> — Test for a NaN</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>ISNAN</code> tests whether a floating-point value is an IEEE Not-a-Number (NaN). </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>ISNAN(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">Variable of the type <code>REAL</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>Returns a default-kind <code>LOGICAL</code>. The returned value is <code>TRUE</code> if <var>X</var> is a NaN and <code>FALSE</code> otherwise. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_nan\n  implicit none\n  real :: x\n  x = -1.0\n  x = sqrt(x)\n  if (isnan(x)) stop '\"x\" is a NaN'\nend program test_nan</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ISNAN.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ISNAN.html</a>\n  </p>\n</div>\n","itime":"<h1 class=\"section\" id=\"ITIME\">8.138 <code>ITIME</code> — Get current local time subroutine (hour/minutes/seconds)</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>IDATE(VALUES)</code> Fills <var>VALUES</var> with the numerical values at the current local time. The hour (in the range 1-24), minute (in the range 1-60), and seconds (in the range 1-60) appear in elements 1, 2, and 3 of <var>VALUES</var>, respectively. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL ITIME(VALUES)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>VALUES</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER, DIMENSION(3)</code> and the kind shall be the default integer kind. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>Does not return anything. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_itime\n  integer, dimension(3) :: tarray\n  call itime(tarray)\n  print *, tarray(1)\n  print *, tarray(2)\n  print *, tarray(3)\nend program test_itime</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ITIME.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ITIME.html</a>\n  </p>\n</div>\n","kill":"<h1 class=\"section\" id=\"KILL\">8.139 <code>KILL</code> — Send a signal to a process</h1> \n<dl> <dt>Description:<dt>Standard:</dt>\n</dt>\n<dd>Sends the signal specified by <var>SIGNAL</var> to the process <var>PID</var>. See <code>kill(2)</code>. <p>This intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit. </p>\n</dd>\n<dt>Class:</dt>\n<dd>Subroutine, function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>CALL KILL(C, VALUE [, STATUS])</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>STATUS = KILL(C, VALUE)</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>C</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar <code>INTEGER</code>, with <code>INTENT(IN)</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>VALUE</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar <code>INTEGER</code>, with <code>INTENT(IN)</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STATUS</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) status flag of type <code>INTEGER(4)</code> or <code>INTEGER(8)</code>. Returns 0 on success, or a system-specific error code otherwise. </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"abort#ABORT\">ABORT</a>, <a href=\"exit#EXIT\">EXIT</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/KILL.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/KILL.html</a>\n  </p>\n</div>\n","kind":"<h1 class=\"section\" id=\"KIND\">8.140 <code>KIND</code> — Kind of an entity</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>KIND(X)</code> returns the kind value of the entity <var>X</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>K = KIND(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>LOGICAL</code>, <code>INTEGER</code>, <code>REAL</code>, <code>COMPLEX</code> or <code>CHARACTER</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is a scalar of type <code>INTEGER</code> and of the default integer kind. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_kind\n  integer,parameter :: kc = kind(' ')\n  integer,parameter :: kl = kind(.true.)\n\n  print *, \"The default character kind is \", kc\n  print *, \"The default logical kind is \", kl\nend program test_kind</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/KIND.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/KIND.html</a>\n  </p>\n</div>\n","lbound":"<h1 class=\"section\" id=\"LBOUND\">8.141 <code>LBOUND</code> — Lower dimension bounds of an array</h1> \n<dl> <dt>Description:</dt>\n<dd>Returns the lower bounds of an array, or a single lower bound along the <var>DIM</var> dimension. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later, with <var>KIND</var> argument Fortran 2003 and later </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = LBOUND(ARRAY [, DIM [, KIND]])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>ARRAY</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an array, of any type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>DIM</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Shall be a scalar <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>KIND</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) An <code>INTEGER</code> initialization expression indicating the kind parameter of the result. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> and of kind <var>KIND</var>. If <var>KIND</var> is absent, the return value is of default integer kind. If <var>DIM</var> is absent, the result is an array of the lower bounds of <var>ARRAY</var>. If <var>DIM</var> is present, the result is a scalar corresponding to the lower bound of the array along that dimension. If <var>ARRAY</var> is an expression rather than a whole array or array structure component, or if it has a zero extent along the relevant dimension, the lower bound is taken to be 1. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"ubound#UBOUND\">UBOUND</a>, <a href=\"lcobound#LCOBOUND\">LCOBOUND</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LBOUND.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LBOUND.html</a>\n  </p>\n</div>\n","lcobound":"<h1 class=\"section\" id=\"LCOBOUND\">8.142 <code>LCOBOUND</code> — Lower codimension bounds of an array</h1> \n<dl> <dt>Description:</dt>\n<dd>Returns the lower bounds of a coarray, or a single lower cobound along the <var>DIM</var> codimension. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = LCOBOUND(COARRAY [, DIM [, KIND]])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>ARRAY</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an coarray, of any type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>DIM</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Shall be a scalar <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>KIND</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) An <code>INTEGER</code> initialization expression indicating the kind parameter of the result. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> and of kind <var>KIND</var>. If <var>KIND</var> is absent, the return value is of default integer kind. If <var>DIM</var> is absent, the result is an array of the lower cobounds of <var>COARRAY</var>. If <var>DIM</var> is present, the result is a scalar corresponding to the lower cobound of the array along that codimension. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"ucobound#UCOBOUND\">UCOBOUND</a>, <a href=\"lbound#LBOUND\">LBOUND</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LCOBOUND.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LCOBOUND.html</a>\n  </p>\n</div>\n","leadz":"<h1 class=\"section\" id=\"LEADZ\">8.143 <code>LEADZ</code> — Number of leading zero bits of an integer</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>LEADZ</code> returns the number of leading zero bits of an integer. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = LEADZ(I)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>INTEGER</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The type of the return value is the default <code>INTEGER</code>. If all the bits of <code>I</code> are zero, the result value is <code>BIT_SIZE(I)</code>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_leadz\n  WRITE (*,*) BIT_SIZE(1)  ! prints 32\n  WRITE (*,*) LEADZ(1)     ! prints 31\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"bit_005fsize#BIT_005fSIZE\">BIT_SIZE</a>, <a href=\"trailz#TRAILZ\">TRAILZ</a>, <a href=\"popcnt#POPCNT\">POPCNT</a>, <a href=\"poppar#POPPAR\">POPPAR</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LEADZ.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LEADZ.html</a>\n  </p>\n</div>\n","len":"<h1 class=\"section\" id=\"LEN\">8.144 <code>LEN</code> — Length of a character entity</h1> \n<dl> <dt>Description:</dt>\n<dd>Returns the length of a character string. If <var>STRING</var> is an array, the length of an element of <var>STRING</var> is returned. Note that <var>STRING</var> need not be defined when this intrinsic is invoked, since only the length, not the content, of <var>STRING</var> is needed. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later, with <var>KIND</var> argument Fortran 2003 and later </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>L = LEN(STRING [, KIND])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STRING</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar or array of type <code>CHARACTER</code>, with <code>INTENT(IN)</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>KIND</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) An <code>INTEGER</code> initialization expression indicating the kind parameter of the result. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> and of kind <var>KIND</var>. If <var>KIND</var> is absent, the return value is of default integer kind. </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>LEN(STRING)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>CHARACTER</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>INTEGER</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"len_005ftrim#LEN_005fTRIM\">LEN_TRIM</a>, <a href=\"adjustl#ADJUSTL\">ADJUSTL</a>, <a href=\"adjustr#ADJUSTR\">ADJUSTR</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LEN.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LEN.html</a>\n  </p>\n</div>\n","len_005ftrim":"<h1 class=\"section\" id=\"LEN_005fTRIM\">8.145 <code>LEN_TRIM</code> — Length of a character entity without trailing blank characters</h1> \n<dl> <dt>Description:</dt>\n<dd>Returns the length of a character string, ignoring any trailing blanks. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later, with <var>KIND</var> argument Fortran 2003 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = LEN_TRIM(STRING [, KIND])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STRING</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar of type <code>CHARACTER</code>, with <code>INTENT(IN)</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>KIND</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) An <code>INTEGER</code> initialization expression indicating the kind parameter of the result. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> and of kind <var>KIND</var>. If <var>KIND</var> is absent, the return value is of default integer kind. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"len#LEN\">LEN</a>, <a href=\"adjustl#ADJUSTL\">ADJUSTL</a>, <a href=\"adjustr#ADJUSTR\">ADJUSTR</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LEN_005fTRIM.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LEN_005fTRIM.html</a>\n  </p>\n</div>\n","lge":"<h1 class=\"section\" id=\"LGE\">8.146 <code>LGE</code> — Lexical greater than or equal</h1> \n<dl> <dt>Description:</dt>\n<dd>Determines whether one string is lexically greater than or equal to another string, where the two strings are interpreted as containing ASCII character codes. If the String A and String B are not the same length, the shorter is compared as if spaces were appended to it to form a value that has the same length as the longer. <p>In general, the lexical comparison intrinsics <code>LGE</code>, <code>LGT</code>, <code>LLE</code>, and <code>LLT</code> differ from the corresponding intrinsic operators <code>.GE.</code>, <code>.GT.</code>, <code>.LE.</code>, and <code>.LT.</code>, in that the latter use the processor's character ordering (which is not ASCII on some targets), whereas the former always use the ASCII ordering. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = LGE(STRING_A, STRING_B)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STRING_A</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of default <code>CHARACTER</code> type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STRING_B</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of default <code>CHARACTER</code> type. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>Returns <code>.TRUE.</code> if <code>STRING_A &gt;= STRING_B</code>, and <code>.FALSE.</code> otherwise, based on the ASCII ordering. </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>LGE(STRING_A, STRING_B)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>CHARACTER</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>LOGICAL</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"lgt#LGT\">LGT</a>, <a href=\"lle#LLE\">LLE</a>, <a href=\"llt#LLT\">LLT</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LGE.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LGE.html</a>\n  </p>\n</div>\n","lgt":"<h1 class=\"section\" id=\"LGT\">8.147 <code>LGT</code> — Lexical greater than</h1> \n<dl> <dt>Description:</dt>\n<dd>Determines whether one string is lexically greater than another string, where the two strings are interpreted as containing ASCII character codes. If the String A and String B are not the same length, the shorter is compared as if spaces were appended to it to form a value that has the same length as the longer. <p>In general, the lexical comparison intrinsics <code>LGE</code>, <code>LGT</code>, <code>LLE</code>, and <code>LLT</code> differ from the corresponding intrinsic operators <code>.GE.</code>, <code>.GT.</code>, <code>.LE.</code>, and <code>.LT.</code>, in that the latter use the processor's character ordering (which is not ASCII on some targets), whereas the former always use the ASCII ordering. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = LGT(STRING_A, STRING_B)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STRING_A</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of default <code>CHARACTER</code> type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STRING_B</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of default <code>CHARACTER</code> type. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>Returns <code>.TRUE.</code> if <code>STRING_A &gt; STRING_B</code>, and <code>.FALSE.</code> otherwise, based on the ASCII ordering. </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>LGT(STRING_A, STRING_B)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>CHARACTER</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>LOGICAL</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"lge#LGE\">LGE</a>, <a href=\"lle#LLE\">LLE</a>, <a href=\"llt#LLT\">LLT</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LGT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LGT.html</a>\n  </p>\n</div>\n","link":"<h1 class=\"section\" id=\"LINK\">8.148 <code>LINK</code> — Create a hard link</h1> \n<dl> <dt>Description:</dt>\n<dd>Makes a (hard) link from file <var>PATH1</var> to <var>PATH2</var>. A null character (<code>CHAR(0)</code>) can be used to mark the end of the names in <var>PATH1</var> and <var>PATH2</var>; otherwise, trailing blanks in the file names are ignored. If the <var>STATUS</var> argument is supplied, it contains 0 on success or a nonzero error code upon return; see <code>link(2)</code>. <p>This intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine, function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>CALL LINK(PATH1, PATH2 [, STATUS])</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>STATUS = LINK(PATH1, PATH2)</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>PATH1</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of default <code>CHARACTER</code> type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>PATH2</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of default <code>CHARACTER</code> type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STATUS</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Shall be of default <code>INTEGER</code> type. </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"symlnk#SYMLNK\">SYMLNK</a>, <a href=\"unlink#UNLINK\">UNLINK</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LINK.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LINK.html</a>\n  </p>\n</div>\n","lle":"<h1 class=\"section\" id=\"LLE\">8.149 <code>LLE</code> — Lexical less than or equal</h1> \n<dl> <dt>Description:</dt>\n<dd>Determines whether one string is lexically less than or equal to another string, where the two strings are interpreted as containing ASCII character codes. If the String A and String B are not the same length, the shorter is compared as if spaces were appended to it to form a value that has the same length as the longer. <p>In general, the lexical comparison intrinsics <code>LGE</code>, <code>LGT</code>, <code>LLE</code>, and <code>LLT</code> differ from the corresponding intrinsic operators <code>.GE.</code>, <code>.GT.</code>, <code>.LE.</code>, and <code>.LT.</code>, in that the latter use the processor's character ordering (which is not ASCII on some targets), whereas the former always use the ASCII ordering. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = LLE(STRING_A, STRING_B)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STRING_A</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of default <code>CHARACTER</code> type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STRING_B</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of default <code>CHARACTER</code> type. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>Returns <code>.TRUE.</code> if <code>STRING_A &lt;= STRING_B</code>, and <code>.FALSE.</code> otherwise, based on the ASCII ordering. </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>LLE(STRING_A, STRING_B)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>CHARACTER</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>LOGICAL</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"lge#LGE\">LGE</a>, <a href=\"lgt#LGT\">LGT</a>, <a href=\"llt#LLT\">LLT</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LLE.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LLE.html</a>\n  </p>\n</div>\n","llt":"<h1 class=\"section\" id=\"LLT\">8.150 <code>LLT</code> — Lexical less than</h1> \n<dl> <dt>Description:</dt>\n<dd>Determines whether one string is lexically less than another string, where the two strings are interpreted as containing ASCII character codes. If the String A and String B are not the same length, the shorter is compared as if spaces were appended to it to form a value that has the same length as the longer. <p>In general, the lexical comparison intrinsics <code>LGE</code>, <code>LGT</code>, <code>LLE</code>, and <code>LLT</code> differ from the corresponding intrinsic operators <code>.GE.</code>, <code>.GT.</code>, <code>.LE.</code>, and <code>.LT.</code>, in that the latter use the processor's character ordering (which is not ASCII on some targets), whereas the former always use the ASCII ordering. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = LLT(STRING_A, STRING_B)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STRING_A</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of default <code>CHARACTER</code> type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STRING_B</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of default <code>CHARACTER</code> type. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>Returns <code>.TRUE.</code> if <code>STRING_A &lt; STRING_B</code>, and <code>.FALSE.</code> otherwise, based on the ASCII ordering. </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>LLT(STRING_A, STRING_B)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>CHARACTER</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>LOGICAL</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"lge#LGE\">LGE</a>, <a href=\"lgt#LGT\">LGT</a>, <a href=\"lle#LLE\">LLE</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LLT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LLT.html</a>\n  </p>\n</div>\n","lnblnk":"<h1 class=\"section\" id=\"LNBLNK\">8.151 <code>LNBLNK</code> — Index of the last non-blank character in a string</h1> \n<dl> <dt>Description:</dt>\n<dd>Returns the length of a character string, ignoring any trailing blanks. This is identical to the standard <code>LEN_TRIM</code> intrinsic, and is only included for backwards compatibility. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = LNBLNK(STRING)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STRING</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar of type <code>CHARACTER</code>, with <code>INTENT(IN)</code> </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of <code>INTEGER(kind=4)</code> type. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"index-intrinsic#INDEX-intrinsic\">INDEX intrinsic</a>, <a href=\"len_005ftrim#LEN_005fTRIM\">LEN_TRIM</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LNBLNK.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LNBLNK.html</a>\n  </p>\n</div>\n","loc":"<h1 class=\"section\" id=\"LOC\">8.152 <code>LOC</code> — Returns the address of a variable</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>LOC(X)</code> returns the address of <var>X</var> as an integer. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = LOC(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">Variable of any type. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code>, with a <code>KIND</code> corresponding to the size (in bytes) of a memory address on the target machine. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_loc\n  integer :: i\n  real :: r\n  i = loc(r)\n  print *, i\nend program test_loc</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LOC.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LOC.html</a>\n  </p>\n</div>\n","log":"<h1 class=\"section\" id=\"LOG\">8.153 <code>LOG</code> — Natural logarithm function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>LOG(X)</code> computes the natural logarithm of <var>X</var>, i.e. the logarithm to the base e. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = LOG(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL</code> or <code>COMPLEX</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>REAL</code> or <code>COMPLEX</code>. The kind type parameter is the same as <var>X</var>. If <var>X</var> is <code>COMPLEX</code>, the imaginary part \\omega is in the range -\\pi \\leq \\omega \\leq \\pi. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_log\n  real(8) :: x = 2.7182818284590451_8\n  complex :: z = (1.0, 2.0)\n  x = log(x)    ! will yield (approximately) 1\n  z = log(z)\nend program test_log</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>ALOG(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4)</code> </td>\n<td valign=\"top\" width=\"25%\">f95, gnu </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DLOG(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">f95, gnu </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>CLOG(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(4) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(4)</code> </td>\n<td valign=\"top\" width=\"25%\">f95, gnu </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>ZLOG(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(8)</code> </td>\n<td valign=\"top\" width=\"25%\">f95, gnu </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>CDLOG(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(8)</code> </td>\n<td valign=\"top\" width=\"25%\">f95, gnu </td>\n</tr>\n</table> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LOG.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LOG.html</a>\n  </p>\n</div>\n","log10":"<h1 class=\"section\" id=\"LOG10\">8.154 <code>LOG10</code> — Base 10 logarithm function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>LOG10(X)</code> computes the base 10 logarithm of <var>X</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = LOG10(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>REAL</code> or <code>COMPLEX</code>. The kind type parameter is the same as <var>X</var>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_log10\n  real(8) :: x = 10.0_8\n  x = log10(x)\nend program test_log10</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>ALOG10(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 95 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DLOG10(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 95 and later </td>\n</tr>\n</table> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LOG10.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LOG10.html</a>\n  </p>\n</div>\n","log_005fgamma":"<h1 class=\"section\" id=\"LOG_005fGAMMA\">8.155 <code>LOG_GAMMA</code> — Logarithm of the Gamma function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>LOG_GAMMA(X)</code> computes the natural logarithm of the absolute value of the Gamma (\\Gamma) function. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>X = LOG_GAMMA(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>REAL</code> and neither zero nor a negative integer. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>REAL</code> of the same kind as <var>X</var>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_log_gamma\n  real :: x = 1.0\n  x = lgamma(x) ! returns 0.0\nend program test_log_gamma</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>LGAMMA(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4)</code> </td>\n<td valign=\"top\" width=\"25%\">GNU Extension </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>ALGAMA(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4)</code> </td>\n<td valign=\"top\" width=\"25%\">GNU Extension </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DLGAMA(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">GNU Extension </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>Gamma function: <a href=\"gamma#GAMMA\">GAMMA</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LOG_005fGAMMA.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LOG_005fGAMMA.html</a>\n  </p>\n</div>\n","logical":"<h1 class=\"section\" id=\"LOGICAL\">8.156 <code>LOGICAL</code> — Convert to logical type</h1> \n<dl> <dt>Description:</dt>\n<dd>Converts one kind of <code>LOGICAL</code> variable to another. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = LOGICAL(L [, KIND])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>L</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>LOGICAL</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>KIND</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) An <code>INTEGER</code> initialization expression indicating the kind parameter of the result. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is a <code>LOGICAL</code> value equal to <var>L</var>, with a kind corresponding to <var>KIND</var>, or of the default logical kind if <var>KIND</var> is not given. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"int#INT\">INT</a>, <a href=\"real#REAL\">REAL</a>, <a href=\"cmplx#CMPLX\">CMPLX</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LOGICAL.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LOGICAL.html</a>\n  </p>\n</div>\n","long":"<h1 class=\"section\" id=\"LONG\">8.157 <code>LONG</code> — Convert to integer type</h1> \n<dl> <dt>Description:</dt>\n<dd>Convert to a <code>KIND=4</code> integer type, which is the same size as a C <code>long</code> integer. This is equivalent to the standard <code>INT</code> intrinsic with an optional argument of <code>KIND=4</code>, and is only included for backwards compatibility. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = LONG(A)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>A</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>INTEGER</code>, <code>REAL</code>, or <code>COMPLEX</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is a <code>INTEGER(4)</code> variable. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"int#INT\">INT</a>, <a href=\"int2#INT2\">INT2</a>, <a href=\"int8#INT8\">INT8</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LONG.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LONG.html</a>\n  </p>\n</div>\n","lshift":"<h1 class=\"section\" id=\"LSHIFT\">8.158 <code>LSHIFT</code> — Left shift bits</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>LSHIFT</code> returns a value corresponding to <var>I</var> with all of the bits shifted left by <var>SHIFT</var> places. If the absolute value of <var>SHIFT</var> is greater than <code>BIT_SIZE(I)</code>, the value is undefined. Bits shifted out from the left end are lost; zeros are shifted in from the opposite end. <p>This function has been superseded by the <code>ISHFT</code> intrinsic, which is standard in Fortran 95 and later, and the <code>SHIFTL</code> intrinsic, which is standard in Fortran 2008 and later. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = LSHIFT(I, SHIFT)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>SHIFT</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> and of the same kind as <var>I</var>. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"ishft#ISHFT\">ISHFT</a>, <a href=\"ishftc#ISHFTC\">ISHFTC</a>, <a href=\"rshift#RSHIFT\">RSHIFT</a>, <a href=\"shifta#SHIFTA\">SHIFTA</a>, <a href=\"shiftl#SHIFTL\">SHIFTL</a>, <a href=\"shiftr#SHIFTR\">SHIFTR</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LSHIFT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LSHIFT.html</a>\n  </p>\n</div>\n","lstat":"<h1 class=\"section\" id=\"LSTAT\">8.159 <code>LSTAT</code> — Get file status</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>LSTAT</code> is identical to <a href=\"stat#STAT\">STAT</a>, except that if path is a symbolic link, then the link itself is statted, not the file that it refers to. <p>The elements in <code>VALUES</code> are the same as described by <a href=\"stat#STAT\">STAT</a>. </p>\n<p>This intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine, function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>CALL LSTAT(NAME, VALUES [, STATUS])</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>STATUS = LSTAT(NAME, VALUES)</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>NAME</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>CHARACTER</code> of the default kind, a valid path within the file system. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>VALUES</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER(4), DIMENSION(13)</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STATUS</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) status flag of type <code>INTEGER(4)</code>. Returns 0 on success and a system specific error code otherwise. </td>\n</tr>\n</table> </dd>\n<dt>Example:</dt>\n<dd>See <a href=\"stat#STAT\">STAT</a> for an example. </dd>\n<dt>See also:</dt>\n<dd>To stat an open file: <a href=\"fstat#FSTAT\">FSTAT</a>, to stat a file: <a href=\"stat#STAT\">STAT</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LSTAT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LSTAT.html</a>\n  </p>\n</div>\n","ltime":"<h1 class=\"section\" id=\"LTIME\">8.160 <code>LTIME</code> — Convert time to local time info</h1> \n<dl> <dt>Description:</dt>\n<dd>Given a system time value <var>TIME</var> (as provided by the <code>TIME8</code> intrinsic), fills <var>VALUES</var> with values extracted from it appropriate to the local time zone using <code>localtime(3)</code>. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL LTIME(TIME, VALUES)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>TIME</var> </td>\n<td valign=\"top\" width=\"70%\">An <code>INTEGER</code> scalar expression corresponding to a system time, with <code>INTENT(IN)</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>VALUES</var> </td>\n<td valign=\"top\" width=\"70%\">A default <code>INTEGER</code> array with 9 elements, with <code>INTENT(OUT)</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The elements of <var>VALUES</var> are assigned as follows: <ol type=\"1\" start=\"1\"> <li>Seconds after the minute, range 0–59 or 0–61 to allow for leap seconds </li>\n<li>Minutes after the hour, range 0–59 </li>\n<li>Hours past midnight, range 0–23 </li>\n<li>Day of month, range 0–31 </li>\n<li>Number of months since January, range 0–12 </li>\n<li>Years since 1900 </li>\n<li>Number of days since Sunday, range 0–6 </li>\n<li>Days since January 1 </li>\n<li>Daylight savings indicator: positive if daylight savings is in effect, zero if not, and negative if the information is not available. </li>\n</ol> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"ctime#CTIME\">CTIME</a>, <a href=\"gmtime#GMTIME\">GMTIME</a>, <a href=\"time#TIME\">TIME</a>, <a href=\"time8#TIME8\">TIME8</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LTIME.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/LTIME.html</a>\n  </p>\n</div>\n","malloc":"<h1 class=\"section\" id=\"MALLOC\">8.161 <code>MALLOC</code> — Allocate dynamic memory</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>MALLOC(SIZE)</code> allocates <var>SIZE</var> bytes of dynamic memory and returns the address of the allocated memory. The <code>MALLOC</code> intrinsic is an extension intended to be used with Cray pointers, and is provided in GNU Fortran to allow the user to compile legacy code. For new code using Fortran 95 pointers, the memory allocation intrinsic is <code>ALLOCATE</code>. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>PTR = MALLOC(SIZE)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>SIZE</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER(K)</code>, with <var>K</var> such that variables of type <code>INTEGER(K)</code> have the same size as C pointers (<code>sizeof(void *)</code>). </dd>\n<dt>Example:</dt>\n<dd>The following example demonstrates the use of <code>MALLOC</code> and <code>FREE</code> with Cray pointers. <pre class=\"smallexample\">program test_malloc\n  implicit none\n  integer i\n  real*8 x(*), z\n  pointer(ptr_x,x)\n\n  ptr_x = malloc(20*8)\n  do i = 1, 20\n    x(i) = sqrt(1.0d0 / i)\n  end do\n  z = 0\n  do i = 1, 20\n    z = z + x(i)\n    print *, z\n  end do\n  call free(ptr_x)\nend program test_malloc</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"free#FREE\">FREE</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MALLOC.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MALLOC.html</a>\n  </p>\n</div>\n","maskl":"<h1 class=\"section\" id=\"MASKL\">8.162 <code>MASKL</code> — Left justified mask</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>MASKL(I[, KIND])</code> has its leftmost <var>I</var> bits set to 1, and the remaining bits set to 0. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = MASKL(I[, KIND])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>KIND</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar constant expression of type <code>INTEGER</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code>. If <var>KIND</var> is present, it specifies the kind value of the return type; otherwise, it is of the default integer kind. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"maskr#MASKR\">MASKR</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MASKL.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MASKL.html</a>\n  </p>\n</div>\n","maskr":"<h1 class=\"section\" id=\"MASKR\">8.163 <code>MASKR</code> — Right justified mask</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>MASKL(I[, KIND])</code> has its rightmost <var>I</var> bits set to 1, and the remaining bits set to 0. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = MASKR(I[, KIND])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>KIND</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar constant expression of type <code>INTEGER</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code>. If <var>KIND</var> is present, it specifies the kind value of the return type; otherwise, it is of the default integer kind. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"maskl#MASKL\">MASKL</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MASKR.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MASKR.html</a>\n  </p>\n</div>\n","matmul":"<h1 class=\"section\" id=\"MATMUL\">8.164 <code>MATMUL</code> — matrix multiplication</h1> \n<dl> <dt>Description:</dt>\n<dd>Performs a matrix multiplication on numeric or logical arguments. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = MATMUL(MATRIX_A, MATRIX_B)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>MATRIX_A</var> </td>\n<td valign=\"top\" width=\"70%\">An array of <code>INTEGER</code>, <code>REAL</code>, <code>COMPLEX</code>, or <code>LOGICAL</code> type, with a rank of one or two. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>MATRIX_B</var> </td>\n<td valign=\"top\" width=\"70%\">An array of <code>INTEGER</code>, <code>REAL</code>, or <code>COMPLEX</code> type if <var>MATRIX_A</var> is of a numeric type; otherwise, an array of <code>LOGICAL</code> type. The rank shall be one or two, and the first (or only) dimension of <var>MATRIX_B</var> shall be equal to the last (or only) dimension of <var>MATRIX_A</var>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The matrix product of <var>MATRIX_A</var> and <var>MATRIX_B</var>. The type and kind of the result follow the usual type and kind promotion rules, as for the <code>*</code> or <code>.AND.</code> operators. </dd>\n<dt>See also:</dt>\n\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MATMUL.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MATMUL.html</a>\n  </p>\n</div>\n","max":"<h1 class=\"section\" id=\"MAX\">8.165 <code>MAX</code> — Maximum value of an argument list</h1> \n<dl> <dt>Description:</dt>\n<dd>Returns the argument with the largest (most positive) value. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = MAX(A1, A2 [, A3 [, ...]])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>A1</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code> or <code>REAL</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>A2</var>, <var>A3</var>, ... </td>\n<td valign=\"top\" width=\"70%\">An expression of the same type and kind as <var>A1</var>. (As a GNU extension, arguments of different kinds are permitted.) </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value corresponds to the maximum value among the arguments, and has the same type and kind as the first argument. </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>MAX0(A1)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>INTEGER(4) A1</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>INTEGER(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>AMAX0(A1)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>INTEGER(4) A1</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(MAX(X))</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>MAX1(A1)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL A1</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>INT(MAX(X))</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>AMAX1(A1)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4) A1</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DMAX1(A1)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) A1</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"maxloc#MAXLOC\">MAXLOC</a> <a href=\"maxval#MAXVAL\">MAXVAL</a>, <a href=\"min#MIN\">MIN</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MAX.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MAX.html</a>\n  </p>\n</div>\n","maxexponent":"<h1 class=\"section\" id=\"MAXEXPONENT\">8.166 <code>MAXEXPONENT</code> — Maximum exponent of a real kind</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>MAXEXPONENT(X)</code> returns the maximum exponent in the model of the type of <code>X</code>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = MAXEXPONENT(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>REAL</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> and of the default integer kind. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program exponents\n  real(kind=4) :: x\n  real(kind=8) :: y\n\n  print *, minexponent(x), maxexponent(x)\n  print *, minexponent(y), maxexponent(y)\nend program exponents</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MAXEXPONENT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MAXEXPONENT.html</a>\n  </p>\n</div>\n","maxloc":"<h1 class=\"section\" id=\"MAXLOC\">8.167 <code>MAXLOC</code> — Location of the maximum value within an array</h1> \n<dl> <dt>Description:</dt>\n<dd>Determines the location of the element in the array with the maximum value, or, if the <var>DIM</var> argument is supplied, determines the locations of the maximum element along each row of the array in the <var>DIM</var> direction. If <var>MASK</var> is present, only the elements for which <var>MASK</var> is <code>.TRUE.</code> are considered. If more than one element in the array has the maximum value, the location returned is that of the first such element in array element order. If the array has zero size, or all of the elements of <var>MASK</var> are <code>.FALSE.</code>, then the result is an array of zeroes. Similarly, if <var>DIM</var> is supplied and all of the elements of <var>MASK</var> along a given row are zero, the result value for that row is zero. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = MAXLOC(ARRAY, DIM [, MASK])</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = MAXLOC(ARRAY [, MASK])</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>ARRAY</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an array of type <code>INTEGER</code> or <code>REAL</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>DIM</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Shall be a scalar of type <code>INTEGER</code>, with a value between one and the rank of <var>ARRAY</var>, inclusive. It may not be an optional dummy argument. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>MASK</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an array of type <code>LOGICAL</code>, and conformable with <var>ARRAY</var>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>If <var>DIM</var> is absent, the result is a rank-one array with a length equal to the rank of <var>ARRAY</var>. If <var>DIM</var> is present, the result is an array with a rank one less than the rank of <var>ARRAY</var>, and a size corresponding to the size of <var>ARRAY</var> with the <var>DIM</var> dimension removed. If <var>DIM</var> is present and <var>ARRAY</var> has a rank of one, the result is a scalar. In all cases, the result is of default <code>INTEGER</code> type. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"max#MAX\">MAX</a>, <a href=\"maxval#MAXVAL\">MAXVAL</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MAXLOC.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MAXLOC.html</a>\n  </p>\n</div>\n","maxval":"<h1 class=\"section\" id=\"MAXVAL\">8.168 <code>MAXVAL</code> — Maximum value of an array</h1> \n<dl> <dt>Description:</dt>\n<dd>Determines the maximum value of the elements in an array value, or, if the <var>DIM</var> argument is supplied, determines the maximum value along each row of the array in the <var>DIM</var> direction. If <var>MASK</var> is present, only the elements for which <var>MASK</var> is <code>.TRUE.</code> are considered. If the array has zero size, or all of the elements of <var>MASK</var> are <code>.FALSE.</code>, then the result is <code>-HUGE(ARRAY)</code> if <var>ARRAY</var> is numeric, or a string of nulls if <var>ARRAY</var> is of character type. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = MAXVAL(ARRAY, DIM [, MASK])</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = MAXVAL(ARRAY [, MASK])</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>ARRAY</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an array of type <code>INTEGER</code> or <code>REAL</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>DIM</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Shall be a scalar of type <code>INTEGER</code>, with a value between one and the rank of <var>ARRAY</var>, inclusive. It may not be an optional dummy argument. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>MASK</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an array of type <code>LOGICAL</code>, and conformable with <var>ARRAY</var>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>If <var>DIM</var> is absent, or if <var>ARRAY</var> has a rank of one, the result is a scalar. If <var>DIM</var> is present, the result is an array with a rank one less than the rank of <var>ARRAY</var>, and a size corresponding to the size of <var>ARRAY</var> with the <var>DIM</var> dimension removed. In all cases, the result is of the same type and kind as <var>ARRAY</var>. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"max#MAX\">MAX</a>, <a href=\"maxloc#MAXLOC\">MAXLOC</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MAXVAL.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MAXVAL.html</a>\n  </p>\n</div>\n","mclock":"<h1 class=\"section\" id=\"MCLOCK\">8.169 <code>MCLOCK</code> — Time function</h1> \n<dl> <dt>Description:</dt>\n<dd>Returns the number of clock ticks since the start of the process, based on the function <code>clock(3)</code> in the C standard library. <p>This intrinsic is not fully portable, such as to systems with 32-bit <code>INTEGER</code> types but supporting times wider than 32 bits. Therefore, the values returned by this intrinsic might be, or become, negative, or numerically less than previous values, during a single run of the compiled program. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = MCLOCK()</code> </dd>\n<dt>Return value:</dt>\n<dd>The return value is a scalar of type <code>INTEGER(4)</code>, equal to the number of clock ticks since the start of the process, or <code>-1</code> if the system does not support <code>clock(3)</code>. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"ctime#CTIME\">CTIME</a>, <a href=\"gmtime#GMTIME\">GMTIME</a>, <a href=\"ltime#LTIME\">LTIME</a>, <a href=\"mclock#MCLOCK\">MCLOCK</a>, <a href=\"time#TIME\">TIME</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MCLOCK.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MCLOCK.html</a>\n  </p>\n</div>\n","mclock8":"<h1 class=\"section\" id=\"MCLOCK8\">8.170 <code>MCLOCK8</code> — Time function (64-bit)</h1> \n<dl> <dt>Description:</dt>\n<dd>Returns the number of clock ticks since the start of the process, based on the function <code>clock(3)</code> in the C standard library. <p><em>Warning:</em> this intrinsic does not increase the range of the timing values over that returned by <code>clock(3)</code>. On a system with a 32-bit <code>clock(3)</code>, <code>MCLOCK8</code> will return a 32-bit value, even though it is converted to a 64-bit <code>INTEGER(8)</code> value. That means overflows of the 32-bit value can still occur. Therefore, the values returned by this intrinsic might be or become negative or numerically less than previous values during a single run of the compiled program. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = MCLOCK8()</code> </dd>\n<dt>Return value:</dt>\n<dd>The return value is a scalar of type <code>INTEGER(8)</code>, equal to the number of clock ticks since the start of the process, or <code>-1</code> if the system does not support <code>clock(3)</code>. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"ctime#CTIME\">CTIME</a>, <a href=\"gmtime#GMTIME\">GMTIME</a>, <a href=\"ltime#LTIME\">LTIME</a>, <a href=\"mclock#MCLOCK\">MCLOCK</a>, <a href=\"time8#TIME8\">TIME8</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MCLOCK8.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MCLOCK8.html</a>\n  </p>\n</div>\n","merge":"<h1 class=\"section\" id=\"MERGE\">8.171 <code>MERGE</code> — Merge variables</h1> \n<dl> <dt>Description:</dt>\n<dd>Select values from two arrays according to a logical mask. The result is equal to <var>TSOURCE</var> if <var>MASK</var> is <code>.TRUE.</code>, or equal to <var>FSOURCE</var> if it is <code>.FALSE.</code>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = MERGE(TSOURCE, FSOURCE, MASK)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>TSOURCE</var> </td>\n<td valign=\"top\" width=\"70%\">May be of any type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>FSOURCE</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of the same type and type parameters as <var>TSOURCE</var>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>MASK</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>LOGICAL</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The result is of the same type and type parameters as <var>TSOURCE</var>. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MERGE.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MERGE.html</a>\n  </p>\n</div>\n","merge_005fbits":"<h1 class=\"section\" id=\"MERGE_005fBITS\">8.172 <code>MERGE_BITS</code> — Merge of bits under mask</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>MERGE_BITS(I, J, MASK)</code> merges the bits of <var>I</var> and <var>J</var> as determined by the mask. The i-th bit of the result is equal to the i-th bit of <var>I</var> if the i-th bit of <var>MASK</var> is 1; it is equal to the i-th bit of <var>J</var> otherwise. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = MERGE_BITS(I, J, MASK)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>J</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>INTEGER</code> and of the same kind as <var>I</var>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>MASK</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>INTEGER</code> and of the same kind as <var>I</var>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The result is of the same type and kind as <var>I</var>. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MERGE_005fBITS.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MERGE_005fBITS.html</a>\n  </p>\n</div>\n","min":"<h1 class=\"section\" id=\"MIN\">8.173 <code>MIN</code> — Minimum value of an argument list</h1> \n<dl> <dt>Description:</dt>\n<dd>Returns the argument with the smallest (most negative) value. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = MIN(A1, A2 [, A3, ...])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>A1</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code> or <code>REAL</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>A2</var>, <var>A3</var>, ... </td>\n<td valign=\"top\" width=\"70%\">An expression of the same type and kind as <var>A1</var>. (As a GNU extension, arguments of different kinds are permitted.) </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value corresponds to the maximum value among the arguments, and has the same type and kind as the first argument. </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>MIN0(A1)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>INTEGER(4) A1</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>INTEGER(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>AMIN0(A1)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>INTEGER(4) A1</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>MIN1(A1)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL A1</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>INTEGER(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>AMIN1(A1)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4) A1</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DMIN1(A1)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) A1</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"max#MAX\">MAX</a>, <a href=\"minloc#MINLOC\">MINLOC</a>, <a href=\"minval#MINVAL\">MINVAL</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MIN.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MIN.html</a>\n  </p>\n</div>\n","minexponent":"<h1 class=\"section\" id=\"MINEXPONENT\">8.174 <code>MINEXPONENT</code> — Minimum exponent of a real kind</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>MINEXPONENT(X)</code> returns the minimum exponent in the model of the type of <code>X</code>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = MINEXPONENT(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>REAL</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> and of the default integer kind. </dd>\n<dt>Example:</dt>\n<dd>See <code>MAXEXPONENT</code> for an example. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MINEXPONENT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MINEXPONENT.html</a>\n  </p>\n</div>\n","minloc":"<h1 class=\"section\" id=\"MINLOC\">8.175 <code>MINLOC</code> — Location of the minimum value within an array</h1> \n<dl> <dt>Description:</dt>\n<dd>Determines the location of the element in the array with the minimum value, or, if the <var>DIM</var> argument is supplied, determines the locations of the minimum element along each row of the array in the <var>DIM</var> direction. If <var>MASK</var> is present, only the elements for which <var>MASK</var> is <code>.TRUE.</code> are considered. If more than one element in the array has the minimum value, the location returned is that of the first such element in array element order. If the array has zero size, or all of the elements of <var>MASK</var> are <code>.FALSE.</code>, then the result is an array of zeroes. Similarly, if <var>DIM</var> is supplied and all of the elements of <var>MASK</var> along a given row are zero, the result value for that row is zero. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = MINLOC(ARRAY, DIM [, MASK])</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = MINLOC(ARRAY [, MASK])</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>ARRAY</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an array of type <code>INTEGER</code> or <code>REAL</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>DIM</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Shall be a scalar of type <code>INTEGER</code>, with a value between one and the rank of <var>ARRAY</var>, inclusive. It may not be an optional dummy argument. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>MASK</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an array of type <code>LOGICAL</code>, and conformable with <var>ARRAY</var>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>If <var>DIM</var> is absent, the result is a rank-one array with a length equal to the rank of <var>ARRAY</var>. If <var>DIM</var> is present, the result is an array with a rank one less than the rank of <var>ARRAY</var>, and a size corresponding to the size of <var>ARRAY</var> with the <var>DIM</var> dimension removed. If <var>DIM</var> is present and <var>ARRAY</var> has a rank of one, the result is a scalar. In all cases, the result is of default <code>INTEGER</code> type. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"min#MIN\">MIN</a>, <a href=\"minval#MINVAL\">MINVAL</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MINLOC.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MINLOC.html</a>\n  </p>\n</div>\n","minval":"<h1 class=\"section\" id=\"MINVAL\">8.176 <code>MINVAL</code> — Minimum value of an array</h1> \n<dl> <dt>Description:</dt>\n<dd>Determines the minimum value of the elements in an array value, or, if the <var>DIM</var> argument is supplied, determines the minimum value along each row of the array in the <var>DIM</var> direction. If <var>MASK</var> is present, only the elements for which <var>MASK</var> is <code>.TRUE.</code> are considered. If the array has zero size, or all of the elements of <var>MASK</var> are <code>.FALSE.</code>, then the result is <code>HUGE(ARRAY)</code> if <var>ARRAY</var> is numeric, or a string of <code>CHAR(255)</code> characters if <var>ARRAY</var> is of character type. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = MINVAL(ARRAY, DIM [, MASK])</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = MINVAL(ARRAY [, MASK])</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>ARRAY</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an array of type <code>INTEGER</code> or <code>REAL</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>DIM</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Shall be a scalar of type <code>INTEGER</code>, with a value between one and the rank of <var>ARRAY</var>, inclusive. It may not be an optional dummy argument. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>MASK</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an array of type <code>LOGICAL</code>, and conformable with <var>ARRAY</var>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>If <var>DIM</var> is absent, or if <var>ARRAY</var> has a rank of one, the result is a scalar. If <var>DIM</var> is present, the result is an array with a rank one less than the rank of <var>ARRAY</var>, and a size corresponding to the size of <var>ARRAY</var> with the <var>DIM</var> dimension removed. In all cases, the result is of the same type and kind as <var>ARRAY</var>. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"min#MIN\">MIN</a>, <a href=\"minloc#MINLOC\">MINLOC</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MINVAL.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MINVAL.html</a>\n  </p>\n</div>\n","mod":"<h1 class=\"section\" id=\"MOD\">8.177 <code>MOD</code> — Remainder function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>MOD(A,P)</code> computes the remainder of the division of A by P. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = MOD(A, P)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>A</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar of type <code>INTEGER</code> or <code>REAL</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>P</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar of the same type and kind as <var>A</var> and not equal to zero. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is the result of <code>A - (INT(A/P) * P)</code>. The type and kind of the return value is the same as that of the arguments. The returned value has the same sign as A and a magnitude less than the magnitude of P. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_mod\n  print *, mod(17,3)\n  print *, mod(17.5,5.5)\n  print *, mod(17.5d0,5.5)\n  print *, mod(17.5,5.5d0)\n\n  print *, mod(-17,3)\n  print *, mod(-17.5,5.5)\n  print *, mod(-17.5d0,5.5)\n  print *, mod(-17.5,5.5d0)\n\n  print *, mod(17,-3)\n  print *, mod(17.5,-5.5)\n  print *, mod(17.5d0,-5.5)\n  print *, mod(17.5,-5.5d0)\nend program test_mod</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Arguments </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>MOD(A,P)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>INTEGER A,P</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>INTEGER</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 95 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>AMOD(A,P)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4) A,P</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 95 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DMOD(A,P)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) A,P</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 95 and later </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"modulo#MODULO\">MODULO</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MOD.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MOD.html</a>\n  </p>\n</div>\n","modulo":"<h1 class=\"section\" id=\"MODULO\">8.178 <code>MODULO</code> — Modulo function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>MODULO(A,P)</code> computes the <var>A</var> modulo <var>P</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = MODULO(A, P)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>A</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar of type <code>INTEGER</code> or <code>REAL</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>P</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar of the same type and kind as <var>A</var>. It shall not be zero. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The type and kind of the result are those of the arguments. <dl> <dt>If <var>A</var> and <var>P</var> are of type <code>INTEGER</code>:</dt>\n<dd>\n<code>MODULO(A,P)</code> has the value <var>R</var> such that <code>A=Q*P+R</code>, where <var>Q</var> is an integer and <var>R</var> is between 0 (inclusive) and <var>P</var> (exclusive). </dd>\n<dt>If <var>A</var> and <var>P</var> are of type <code>REAL</code>:</dt>\n<dd>\n<code>MODULO(A,P)</code> has the value of <code>A - FLOOR (A / P) * P</code>. </dd>\n</dl> The returned value has the same sign as P and a magnitude less than the magnitude of P. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_modulo\n  print *, modulo(17,3)\n  print *, modulo(17.5,5.5)\n\n  print *, modulo(-17,3)\n  print *, modulo(-17.5,5.5)\n\n  print *, modulo(17,-3)\n  print *, modulo(17.5,-5.5)\nend program</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"mod#MOD\">MOD</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MODULO.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MODULO.html</a>\n  </p>\n</div>\n","move_005falloc":"<h1 class=\"section\" id=\"MOVE_005fALLOC\">8.179 <code>MOVE_ALLOC</code> — Move allocation from one object to another</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>MOVE_ALLOC(FROM, TO)</code> moves the allocation from <var>FROM</var> to <var>TO</var>. <var>FROM</var> will become deallocated in the process. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2003 and later </dd>\n<dt>Class:</dt>\n<dd>Pure subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL MOVE_ALLOC(FROM, TO)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>FROM</var> </td>\n<td valign=\"top\" width=\"70%\">\n<code>ALLOCATABLE</code>, <code>INTENT(INOUT)</code>, may be of any type and kind. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>TO</var> </td>\n<td valign=\"top\" width=\"70%\">\n<code>ALLOCATABLE</code>, <code>INTENT(OUT)</code>, shall be of the same type, kind and rank as <var>FROM</var>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>None </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_move_alloc\n    integer, allocatable :: a(:), b(:)\n\n    allocate(a(3))\n    a = [ 1, 2, 3 ]\n    call move_alloc(a, b)\n    print *, allocated(a), allocated(b)\n    print *, b\nend program test_move_alloc</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MOVE_005fALLOC.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MOVE_005fALLOC.html</a>\n  </p>\n</div>\n","mvbits":"<h1 class=\"section\" id=\"MVBITS\">8.180 <code>MVBITS</code> — Move bits from one integer to another</h1> \n<dl> <dt>Description:</dt>\n<dd>Moves <var>LEN</var> bits from positions <var>FROMPOS</var> through <code>FROMPOS+LEN-1</code> of <var>FROM</var> to positions <var>TOPOS</var> through <code>TOPOS+LEN-1</code> of <var>TO</var>. The portion of argument <var>TO</var> not affected by the movement of bits is unchanged. The values of <code>FROMPOS+LEN-1</code> and <code>TOPOS+LEN-1</code> must be less than <code>BIT_SIZE(FROM)</code>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL MVBITS(FROM, FROMPOS, LEN, TO, TOPOS)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>FROM</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>FROMPOS</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>LEN</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>TO</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>, of the same kind as <var>FROM</var>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>TOPOS</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"ibclr#IBCLR\">IBCLR</a>, <a href=\"ibset#IBSET\">IBSET</a>, <a href=\"ibits#IBITS\">IBITS</a>, <a href=\"iand#IAND\">IAND</a>, <a href=\"ior#IOR\">IOR</a>, <a href=\"ieor#IEOR\">IEOR</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MVBITS.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/MVBITS.html</a>\n  </p>\n</div>\n","nearest":"<h1 class=\"section\" id=\"NEAREST\">8.181 <code>NEAREST</code> — Nearest representable number</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>NEAREST(X, S)</code> returns the processor-representable number nearest to <code>X</code> in the direction indicated by the sign of <code>S</code>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = NEAREST(X, S)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>REAL</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>S</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>REAL</code> and not equal to zero. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of the same type as <code>X</code>. If <code>S</code> is positive, <code>NEAREST</code> returns the processor-representable number greater than <code>X</code> and nearest to it. If <code>S</code> is negative, <code>NEAREST</code> returns the processor-representable number smaller than <code>X</code> and nearest to it. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_nearest\n  real :: x, y\n  x = nearest(42.0, 1.0)\n  y = nearest(42.0, -1.0)\n  write (*,\"(3(G20.15))\") x, y, x - y\nend program test_nearest</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/NEAREST.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/NEAREST.html</a>\n  </p>\n</div>\n","new_005fline":"<h1 class=\"section\" id=\"NEW_005fLINE\">8.182 <code>NEW_LINE</code> — New line character</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>NEW_LINE(C)</code> returns the new-line character. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2003 and later </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = NEW_LINE(C)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>C</var> </td>\n<td valign=\"top\" width=\"70%\">The argument shall be a scalar or array of the type <code>CHARACTER</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>Returns a <var>CHARACTER</var> scalar of length one with the new-line character of the same kind as parameter <var>C</var>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program newline\n  implicit none\n  write(*,'(A)') 'This is record 1.'//NEW_LINE('A')//'This is record 2.'\nend program newline</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/NEW_005fLINE.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/NEW_005fLINE.html</a>\n  </p>\n</div>\n","nint":"<h1 class=\"section\" id=\"NINT\">8.183 <code>NINT</code> — Nearest whole number</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>NINT(A)</code> rounds its argument to the nearest whole number. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later, with <var>KIND</var> argument Fortran 90 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = NINT(A [, KIND])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>A</var> </td>\n<td valign=\"top\" width=\"70%\">The type of the argument shall be <code>REAL</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>KIND</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) An <code>INTEGER</code> initialization expression indicating the kind parameter of the result. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>Returns <var>A</var> with the fractional portion of its magnitude eliminated by rounding to the nearest whole number and with its sign preserved, converted to an <code>INTEGER</code> of the default kind. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_nint\n  real(4) x4\n  real(8) x8\n  x4 = 1.234E0_4\n  x8 = 4.321_8\n  print *, nint(x4), idnint(x8)\nend program test_nint</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return Type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>NINT(A)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4) A</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>INTEGER</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 95 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>IDNINT(A)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) A</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>INTEGER</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 95 and later </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"ceiling#CEILING\">CEILING</a>, <a href=\"floor#FLOOR\">FLOOR</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/NINT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/NINT.html</a>\n  </p>\n</div>\n","norm2":"<h1 class=\"section\" id=\"NORM2\">8.184 <code>NORM2</code> — Euclidean vector norms</h1> \n<dl> <dt>Description:</dt>\n<dd>Calculates the Euclidean vector norm (L_2 norm) of of <var>ARRAY</var> along dimension <var>DIM</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = NORM2(ARRAY[, DIM])</code> </td></tr></table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>ARRAY</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an array of type <code>REAL</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>DIM</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) shall be a scalar of type <code>INTEGER</code> with a value in the range from 1 to n, where n equals the rank of <var>ARRAY</var>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The result is of the same type as <var>ARRAY</var>. <p>If <var>DIM</var> is absent, a scalar with the square root of the sum of all elements in <var>ARRAY</var> squared is returned. Otherwise, an array of rank n-1, where n equals the rank of <var>ARRAY</var>, and a shape similar to that of <var>ARRAY</var> with dimension <var>DIM</var> dropped is returned. </p>\n</dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_sum\n  REAL :: x(5) = [ real :: 1, 2, 3, 4, 5 ]\n  print *, NORM2(x)  ! = sqrt(55.) ~ 7.416\nEND PROGRAM</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/NORM2.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/NORM2.html</a>\n  </p>\n</div>\n","not":"<h1 class=\"section\" id=\"NOT\">8.185 <code>NOT</code> — Logical negation</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>NOT</code> returns the bitwise Boolean inverse of <var>I</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = NOT(I)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return type is <code>INTEGER</code>, of the same kind as the argument. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"iand#IAND\">IAND</a>, <a href=\"ieor#IEOR\">IEOR</a>, <a href=\"ior#IOR\">IOR</a>, <a href=\"ibits#IBITS\">IBITS</a>, <a href=\"ibset#IBSET\">IBSET</a>, <a href=\"ibclr#IBCLR\">IBCLR</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/NOT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/NOT.html</a>\n  </p>\n</div>\n","null":"<h1 class=\"section\" id=\"NULL\">8.186 <code>NULL</code> — Function that returns an disassociated pointer</h1> \n<dl> <dt>Description:</dt>\n<dd>Returns a disassociated pointer. <p>If <var>MOLD</var> is present, a disassociated pointer of the same type is returned, otherwise the type is determined by context. </p>\n<p>In Fortran 95, <var>MOLD</var> is optional. Please note that Fortran 2003 includes cases where it is required. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>PTR =&gt; NULL([MOLD])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>MOLD</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) shall be a pointer of any association status and of any type. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>A disassociated pointer. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">REAL, POINTER, DIMENSION(:) :: VEC =&gt; NULL ()</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"associated#ASSOCIATED\">ASSOCIATED</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/NULL.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/NULL.html</a>\n  </p>\n</div>\n","num_005fimages":"<h1 class=\"section\" id=\"NUM_005fIMAGES\">8.187 <code>NUM_IMAGES</code> — Function that returns the number of images</h1> \n<dl> <dt>Description:</dt>\n<dd>Returns the number of images. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = NUM_IMAGES()</code> </dd>\n<dt>Arguments: None. <dt>Return value:</dt>\n</dt>\n<dd>Scalar default-kind integer. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">INTEGER :: value[*]\nINTEGER :: i\nvalue = THIS_IMAGE()\nSYNC ALL\nIF (THIS_IMAGE() == 1) THEN\n  DO i = 1, NUM_IMAGES()\n    WRITE(*,'(2(a,i0))') 'value[', i, '] is ', value[i]\n  END DO\nEND IF</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"this_005fimage#THIS_005fIMAGE\">THIS_IMAGE</a>, <a href=\"image_005findex#IMAGE_005fINDEX\">IMAGE_INDEX</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/NUM_005fIMAGES.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/NUM_005fIMAGES.html</a>\n  </p>\n</div>\n","or":"<h1 class=\"section\" id=\"OR\">8.188 <code>OR</code> — Bitwise logical OR</h1> \n<dl> <dt>Description:</dt>\n<dd>Bitwise logical <code>OR</code>. <p>This intrinsic routine is provided for backwards compatibility with GNU Fortran 77. For integer arguments, programmers should consider the use of the <a href=\"ior#IOR\">IOR</a> intrinsic defined by the Fortran standard. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = OR(I, J)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be either a scalar <code>INTEGER</code> type or a scalar <code>LOGICAL</code> type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>J</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be the same as the type of <var>J</var>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return type is either a scalar <code>INTEGER</code> or a scalar <code>LOGICAL</code>. If the kind type parameters differ, then the smaller kind type is implicitly converted to larger kind, and the return has the larger kind. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_or\n  LOGICAL :: T = .TRUE., F = .FALSE.\n  INTEGER :: a, b\n  DATA a / Z'F' /, b / Z'3' /\n\n  WRITE (*,*) OR(T, T), OR(T, F), OR(F, T), OR(F, F)\n  WRITE (*,*) OR(a, b)\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>Fortran 95 elemental function: <a href=\"ior#IOR\">IOR</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/OR.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/OR.html</a>\n  </p>\n</div>\n","pack":"<h1 class=\"section\" id=\"PACK\">8.189 <code>PACK</code> — Pack an array into an array of rank one</h1> \n<dl> <dt>Description:</dt>\n<dd>Stores the elements of <var>ARRAY</var> in an array of rank one. <p>The beginning of the resulting array is made up of elements whose <var>MASK</var> equals <code>TRUE</code>. Afterwards, positions are filled with elements taken from <var>VECTOR</var>. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = PACK(ARRAY, MASK[,VECTOR])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>ARRAY</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an array of any type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>MASK</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an array of type <code>LOGICAL</code> and of the same size as <var>ARRAY</var>. Alternatively, it may be a <code>LOGICAL</code> scalar. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>VECTOR</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) shall be an array of the same type as <var>ARRAY</var> and of rank one. If present, the number of elements in <var>VECTOR</var> shall be equal to or greater than the number of true elements in <var>MASK</var>. If <var>MASK</var> is scalar, the number of elements in <var>VECTOR</var> shall be equal to or greater than the number of elements in <var>ARRAY</var>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The result is an array of rank one and the same type as that of <var>ARRAY</var>. If <var>VECTOR</var> is present, the result size is that of <var>VECTOR</var>, the number of <code>TRUE</code> values in <var>MASK</var> otherwise. </dd>\n<dt>Example:</dt>\n<dd>Gathering nonzero elements from an array: <pre class=\"smallexample\">PROGRAM test_pack_1\n  INTEGER :: m(6)\n  m = (/ 1, 0, 0, 0, 5, 0 /)\n  WRITE(*, FMT=\"(6(I0, ' '))\") pack(m, m /= 0)  ! \"1 5\"\nEND PROGRAM</pre> <p>Gathering nonzero elements from an array and appending elements from <var>VECTOR</var>: </p>\n<pre class=\"smallexample\">PROGRAM test_pack_2\n  INTEGER :: m(4)\n  m = (/ 1, 0, 0, 2 /)\n  WRITE(*, FMT=\"(4(I0, ' '))\") pack(m, m /= 0, (/ 0, 0, 3, 4 /))  ! \"1 2 3 4\"\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"unpack#UNPACK\">UNPACK</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/PACK.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/PACK.html</a>\n  </p>\n</div>\n","parity":"<h1 class=\"section\" id=\"PARITY\">8.190 <code>PARITY</code> — Reduction with exclusive OR</h1> \n<dl> <dt>Description:</dt>\n<dd>Calculates the parity, i.e. the reduction using <code>.XOR.</code>, of <var>MASK</var> along dimension <var>DIM</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = PARITY(MASK[, DIM])</code> </td></tr></table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>LOGICAL</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an array of type <code>LOGICAL</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>DIM</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) shall be a scalar of type <code>INTEGER</code> with a value in the range from 1 to n, where n equals the rank of <var>MASK</var>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The result is of the same type as <var>MASK</var>. <p>If <var>DIM</var> is absent, a scalar with the parity of all elements in <var>MASK</var> is returned, i.e. true if an odd number of elements is <code>.true.</code> and false otherwise. If <var>DIM</var> is present, an array of rank n-1, where n equals the rank of <var>ARRAY</var>, and a shape similar to that of <var>MASK</var> with dimension <var>DIM</var> dropped is returned. </p>\n</dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_sum\n  LOGICAL :: x(2) = [ .true., .false. ]\n  print *, PARITY(x) ! prints \"T\" (true).\nEND PROGRAM</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/PARITY.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/PARITY.html</a>\n  </p>\n</div>\n","perror":"<h1 class=\"section\" id=\"PERROR\">8.191 <code>PERROR</code> — Print system error message</h1> \n<dl> <dt>Description:</dt>\n<dd>Prints (on the C <code>stderr</code> stream) a newline-terminated error message corresponding to the last system error. This is prefixed by <var>STRING</var>, a colon and a space. See <code>perror(3)</code>. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL PERROR(STRING)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STRING</var> </td>\n<td valign=\"top\" width=\"70%\">A scalar of type <code>CHARACTER</code> and of the default kind. </td>\n</tr></table> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"ierrno#IERRNO\">IERRNO</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/PERROR.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/PERROR.html</a>\n  </p>\n</div>\n","popcnt":"<h1 class=\"section\" id=\"POPCNT\">8.192 <code>POPCNT</code> — Number of bits set</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>POPCNT(I)</code> returns the number of bits set ('1' bits) in the binary representation of <code>I</code>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = POPCNT(I)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>INTEGER</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> and of the default integer kind. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"poppar#POPPAR\">POPPAR</a>, <a href=\"leadz#LEADZ\">LEADZ</a>, <a href=\"trailz#TRAILZ\">TRAILZ</a> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_population\n  print *, popcnt(127),       poppar(127)\n  print *, popcnt(huge(0_4)), poppar(huge(0_4))\n  print *, popcnt(huge(0_8)), poppar(huge(0_8))\nend program test_population</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/POPCNT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/POPCNT.html</a>\n  </p>\n</div>\n","poppar":"<h1 class=\"section\" id=\"POPPAR\">8.193 <code>POPPAR</code> — Parity of the number of bits set</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>POPPAR(I)</code> returns parity of the integer <code>I</code>, i.e. the parity of the number of bits set ('1' bits) in the binary representation of <code>I</code>. It is equal to 0 if <code>I</code> has an even number of bits set, and 1 for an odd number of '1' bits. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = POPPAR(I)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>INTEGER</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> and of the default integer kind. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"popcnt#POPCNT\">POPCNT</a>, <a href=\"leadz#LEADZ\">LEADZ</a>, <a href=\"trailz#TRAILZ\">TRAILZ</a> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_population\n  print *, popcnt(127),       poppar(127)\n  print *, popcnt(huge(0_4)), poppar(huge(0_4))\n  print *, popcnt(huge(0_8)), poppar(huge(0_8))\nend program test_population</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/POPPAR.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/POPPAR.html</a>\n  </p>\n</div>\n","precision":"<h1 class=\"section\" id=\"PRECISION\">8.194 <code>PRECISION</code> — Decimal precision of a real kind</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>PRECISION(X)</code> returns the decimal precision in the model of the type of <code>X</code>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = PRECISION(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>REAL</code> or <code>COMPLEX</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> and of the default integer kind. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"selected_005freal_005fkind#SELECTED_005fREAL_005fKIND\">SELECTED_REAL_KIND</a>, <a href=\"range#RANGE\">RANGE</a> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program prec_and_range\n  real(kind=4) :: x(2)\n  complex(kind=8) :: y\n\n  print *, precision(x), range(x)\n  print *, precision(y), range(y)\nend program prec_and_range</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/PRECISION.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/PRECISION.html</a>\n  </p>\n</div>\n","present":"<h1 class=\"section\" id=\"PRESENT\">8.195 <code>PRESENT</code> — Determine whether an optional dummy argument is specified</h1> \n<dl> <dt>Description:</dt>\n<dd>Determines whether an optional dummy argument is present. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = PRESENT(A)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>A</var> </td>\n<td valign=\"top\" width=\"70%\">May be of any type and may be a pointer, scalar or array value, or a dummy procedure. It shall be the name of an optional dummy argument accessible within the current subroutine or function. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>Returns either <code>TRUE</code> if the optional argument <var>A</var> is present, or <code>FALSE</code> otherwise. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_present\n  WRITE(*,*) f(), f(42)      ! \"F T\"\nCONTAINS\n  LOGICAL FUNCTION f(x)\n    INTEGER, INTENT(IN), OPTIONAL :: x\n    f = PRESENT(x)\n  END FUNCTION\nEND PROGRAM</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/PRESENT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/PRESENT.html</a>\n  </p>\n</div>\n","product":"<h1 class=\"section\" id=\"PRODUCT\">8.196 <code>PRODUCT</code> — Product of array elements</h1> \n<dl> <dt>Description:</dt>\n<dd>Multiplies the elements of <var>ARRAY</var> along dimension <var>DIM</var> if the corresponding element in <var>MASK</var> is <code>TRUE</code>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = PRODUCT(ARRAY[, MASK])</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = PRODUCT(ARRAY, DIM[, MASK])</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>ARRAY</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an array of type <code>INTEGER</code>, <code>REAL</code> or <code>COMPLEX</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>DIM</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) shall be a scalar of type <code>INTEGER</code> with a value in the range from 1 to n, where n equals the rank of <var>ARRAY</var>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>MASK</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) shall be of type <code>LOGICAL</code> and either be a scalar or an array of the same shape as <var>ARRAY</var>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The result is of the same type as <var>ARRAY</var>. <p>If <var>DIM</var> is absent, a scalar with the product of all elements in <var>ARRAY</var> is returned. Otherwise, an array of rank n-1, where n equals the rank of <var>ARRAY</var>, and a shape similar to that of <var>ARRAY</var> with dimension <var>DIM</var> dropped is returned. </p>\n</dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_product\n  INTEGER :: x(5) = (/ 1, 2, 3, 4 ,5 /)\n  print *, PRODUCT(x)                    ! all elements, product = 120\n  print *, PRODUCT(x, MASK=MOD(x, 2)==1) ! odd elements, product = 15\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"sum#SUM\">SUM</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/PRODUCT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/PRODUCT.html</a>\n  </p>\n</div>\n","radix":"<h1 class=\"section\" id=\"RADIX\">8.197 <code>RADIX</code> — Base of a model number</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>RADIX(X)</code> returns the base of the model representing the entity <var>X</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = RADIX(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>INTEGER</code> or <code>REAL</code> </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is a scalar of type <code>INTEGER</code> and of the default integer kind. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"selected_005freal_005fkind#SELECTED_005fREAL_005fKIND\">SELECTED_REAL_KIND</a> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_radix\n  print *, \"The radix for the default integer kind is\", radix(0)\n  print *, \"The radix for the default real kind is\", radix(0.0)\nend program test_radix</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/RADIX.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/RADIX.html</a>\n  </p>\n</div>\n","ran":"<h1 class=\"section\" id=\"RAN\">8.198 <code>RAN</code> — Real pseudo-random number</h1> \n<dl> <dt>Description:</dt>\n<dd>For compatibility with HP FORTRAN 77/iX, the <code>RAN</code> intrinsic is provided as an alias for <code>RAND</code>. See <a href=\"rand#RAND\">RAND</a> for complete documentation. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Function </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"rand#RAND\">RAND</a>, <a href=\"random_005fnumber#RANDOM_005fNUMBER\">RANDOM_NUMBER</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/RAN.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/RAN.html</a>\n  </p>\n</div>\n","rand":"<h1 class=\"section\" id=\"RAND\">8.199 <code>RAND</code> — Real pseudo-random number</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>RAND(FLAG)</code> returns a pseudo-random number from a uniform distribution between 0 and 1. If <var>FLAG</var> is 0, the next number in the current sequence is returned; if <var>FLAG</var> is 1, the generator is restarted by <code>CALL SRAND(0)</code>; if <var>FLAG</var> has any other value, it is used as a new seed with <code>SRAND</code>. <p>This intrinsic routine is provided for backwards compatibility with GNU Fortran 77. It implements a simple modulo generator as provided by <code>g77</code>. For new code, one should consider the use of <a href=\"random_005fnumber#RANDOM_005fNUMBER\">RANDOM_NUMBER</a> as it implements a superior algorithm. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = RAND(I)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar <code>INTEGER</code> of kind 4. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of <code>REAL</code> type and the default kind. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_rand\n  integer,parameter :: seed = 86456\n\n  call srand(seed)\n  print *, rand(), rand(), rand(), rand()\n  print *, rand(seed), rand(), rand(), rand()\nend program test_rand</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"srand#SRAND\">SRAND</a>, <a href=\"random_005fnumber#RANDOM_005fNUMBER\">RANDOM_NUMBER</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/RAND.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/RAND.html</a>\n  </p>\n</div>\n","random_005fnumber":"<h1 class=\"section\" id=\"RANDOM_005fNUMBER\">8.200 <code>RANDOM_NUMBER</code> — Pseudo-random number</h1> \n<dl> <dt>Description:</dt>\n<dd>Returns a single pseudorandom number or an array of pseudorandom numbers from the uniform distribution over the range 0 \\leq x &lt; 1. <p>The runtime-library implements George Marsaglia's KISS (Keep It Simple Stupid) random number generator (RNG). This RNG combines: </p>\n<ol type=\"1\" start=\"1\"> <li>The congruential generator x(n) = 69069 \\cdot x(n-1) + 1327217885 with a period of 2^32, </li>\n<li>A 3-shift shift-register generator with a period of 2^32 - 1, </li>\n<li>Two 16-bit multiply-with-carry generators with a period of 597273182964842497 &gt; 2^59. </li>\n</ol> The overall period exceeds 2^123. <p>Please note, this RNG is thread safe if used within OpenMP directives, i.e., its state will be consistent while called from multiple threads. However, the KISS generator does not create random numbers in parallel from multiple sources, but in sequence from a single source. If an OpenMP-enabled application heavily relies on random numbers, one should consider employing a dedicated parallel random number generator instead. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RANDOM_NUMBER(HARVEST)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>HARVEST</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar or an array of type <code>REAL</code>. </td>\n</tr></table> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_random_number\n  REAL :: r(5,5)\n  CALL init_random_seed()         ! see example of RANDOM_SEED\n  CALL RANDOM_NUMBER(r)\nend program</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"random_005fseed#RANDOM_005fSEED\">RANDOM_SEED</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/RANDOM_005fNUMBER.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/RANDOM_005fNUMBER.html</a>\n  </p>\n</div>\n","random_005fseed":"<h1 class=\"section\" id=\"RANDOM_005fSEED\">8.201 <code>RANDOM_SEED</code> — Initialize a pseudo-random number sequence</h1> \n<dl> <dt>Description:</dt>\n<dd>Restarts or queries the state of the pseudorandom number generator used by <code>RANDOM_NUMBER</code>. <p>If <code>RANDOM_SEED</code> is called without arguments, it is initialized to a default state. The example below shows how to initialize the random seed with a varying seed in order to ensure a different random number sequence for each invocation of the program. Note that setting any of the seed values to zero should be avoided as it can result in poor quality random numbers being generated. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL RANDOM_SEED([SIZE, PUT, GET])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>SIZE</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Shall be a scalar and of type default <code>INTEGER</code>, with <code>INTENT(OUT)</code>. It specifies the minimum size of the arrays used with the <var>PUT</var> and <var>GET</var> arguments. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>PUT</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Shall be an array of type default <code>INTEGER</code> and rank one. It is <code>INTENT(IN)</code> and the size of the array must be larger than or equal to the number returned by the <var>SIZE</var> argument. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>GET</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Shall be an array of type default <code>INTEGER</code> and rank one. It is <code>INTENT(OUT)</code> and the size of the array must be larger than or equal to the number returned by the <var>SIZE</var> argument. </td>\n</tr>\n</table> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">subroutine init_random_seed()\n  use iso_fortran_env, only: int64\n  implicit none\n  integer, allocatable :: seed(:)\n  integer :: i, n, un, istat, dt(8), pid\n  integer(int64) :: t\n\n  call random_seed(size = n)\n  allocate(seed(n))\n  ! First try if the OS provides a random number generator\n  open(newunit=un, file=\"/dev/urandom\", access=\"stream\", &amp;\n       form=\"unformatted\", action=\"read\", status=\"old\", iostat=istat)\n  if (istat == 0) then\n     read(un) seed\n     close(un)\n  else\n     ! Fallback to XOR:ing the current time and pid. The PID is\n     ! useful in case one launches multiple instances of the same\n     ! program in parallel.\n     call system_clock(t)\n     if (t == 0) then\n        call date_and_time(values=dt)\n        t = (dt(1) - 1970) * 365_int64 * 24 * 60 * 60 * 1000 &amp;\n             + dt(2) * 31_int64 * 24 * 60 * 60 * 1000 &amp;\n             + dt(3) * 24_int64 * 60 * 60 * 1000 &amp;\n             + dt(5) * 60 * 60 * 1000 &amp;\n             + dt(6) * 60 * 1000 + dt(7) * 1000 &amp;\n             + dt(8)\n     end if\n     pid = getpid()\n     t = ieor(t, int(pid, kind(t)))\n     do i = 1, n\n        seed(i) = lcg(t)\n     end do\n  end if\n  call random_seed(put=seed)\ncontains\n  ! This simple PRNG might not be good enough for real work, but is\n  ! sufficient for seeding a better PRNG.\n  function lcg(s)\n    integer :: lcg\n    integer(int64) :: s\n    if (s == 0) then\n       s = 104729\n    else\n       s = mod(s, 4294967296_int64)\n    end if\n    s = mod(s * 279470273_int64, 4294967291_int64)\n    lcg = int(mod(s, int(huge(0), int64)), kind(0))\n  end function lcg\nend subroutine init_random_seed</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"random_005fnumber#RANDOM_005fNUMBER\">RANDOM_NUMBER</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/RANDOM_005fSEED.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/RANDOM_005fSEED.html</a>\n  </p>\n</div>\n","range":"<h1 class=\"section\" id=\"RANGE\">8.202 <code>RANGE</code> — Decimal exponent range</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>RANGE(X)</code> returns the decimal exponent range in the model of the type of <code>X</code>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = RANGE(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>INTEGER</code>, <code>REAL</code> or <code>COMPLEX</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> and of the default integer kind. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"selected_005freal_005fkind#SELECTED_005fREAL_005fKIND\">SELECTED_REAL_KIND</a>, <a href=\"precision#PRECISION\">PRECISION</a> </dd>\n<dt>Example:</dt>\n<dd>See <code>PRECISION</code> for an example. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/RANGE.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/RANGE.html</a>\n  </p>\n</div>\n","rank":"<h1 class=\"section\" id=\"RANK\">8.203 <code>RANK</code> — Rank of a data object</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>RANK(A)</code> returns the rank of a scalar or array data object. </dd>\n<dt>Standard:</dt>\n<dd>Technical Specification (TS) 29113 </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = RANK(A)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>A</var> </td>\n<td valign=\"top\" width=\"70%\">can be of any type </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> and of the default integer kind. For arrays, their rank is returned; for scalars zero is returned. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_rank\n  integer :: a\n  real, allocatable :: b(:,:)\n\n  print *, rank(a), rank(b) ! Prints:  0  2\nend program test_rank</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/RANK.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/RANK.html</a>\n  </p>\n</div>\n","real":"<h1 class=\"section\" id=\"REAL\">8.204 <code>REAL</code> — Convert to real type</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>REAL(A [, KIND])</code> converts its argument <var>A</var> to a real type. The <code>REALPART</code> function is provided for compatibility with <code>g77</code>, and its use is strongly discouraged. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = REAL(A [, KIND])</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = REALPART(Z)</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>A</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be <code>INTEGER</code>, <code>REAL</code>, or <code>COMPLEX</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>KIND</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) An <code>INTEGER</code> initialization expression indicating the kind parameter of the result. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>These functions return a <code>REAL</code> variable or array under the following rules: <dl> <dt>(A)</dt>\n<dd>\n<code>REAL(A)</code> is converted to a default real type if <var>A</var> is an integer or real variable. </dd>\n<dt>(B)</dt>\n<dd>\n<code>REAL(A)</code> is converted to a real type with the kind type parameter of <var>A</var> if <var>A</var> is a complex variable. </dd>\n<dt>(C)</dt>\n<dd>\n<code>REAL(A, KIND)</code> is converted to a real type with kind type parameter <var>KIND</var> if <var>A</var> is a complex, integer, or real variable. </dd>\n</dl> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_real\n  complex :: x = (1.0, 2.0)\n  print *, real(x), real(x,8), realpart(x)\nend program test_real</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>FLOAT(A)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>INTEGER(4)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DFLOAT(A)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>INTEGER(4)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">GNU extension </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>SNGL(A)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>INTEGER(8)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 77 and later </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"dble#DBLE\">DBLE</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/REAL.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/REAL.html</a>\n  </p>\n</div>\n","rename":"<h1 class=\"section\" id=\"RENAME\">8.205 <code>RENAME</code> — Rename a file</h1> \n<dl> <dt>Description:</dt>\n<dd>Renames a file from file <var>PATH1</var> to <var>PATH2</var>. A null character (<code>CHAR(0)</code>) can be used to mark the end of the names in <var>PATH1</var> and <var>PATH2</var>; otherwise, trailing blanks in the file names are ignored. If the <var>STATUS</var> argument is supplied, it contains 0 on success or a nonzero error code upon return; see <code>rename(2)</code>. <p>This intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine, function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>CALL RENAME(PATH1, PATH2 [, STATUS])</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>STATUS = RENAME(PATH1, PATH2)</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>PATH1</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of default <code>CHARACTER</code> type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>PATH2</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of default <code>CHARACTER</code> type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STATUS</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Shall be of default <code>INTEGER</code> type. </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"link#LINK\">LINK</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/RENAME.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/RENAME.html</a>\n  </p>\n</div>\n","repeat":"<h1 class=\"section\" id=\"REPEAT\">8.206 <code>REPEAT</code> — Repeated string concatenation</h1> \n<dl> <dt>Description:</dt>\n<dd>Concatenates <var>NCOPIES</var> copies of a string. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = REPEAT(STRING, NCOPIES)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STRING</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be scalar and of type <code>CHARACTER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>NCOPIES</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be scalar and of type <code>INTEGER</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>A new scalar of type <code>CHARACTER</code> built up from <var>NCOPIES</var> copies of <var>STRING</var>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_repeat\n  write(*,*) repeat(\"x\", 5)   ! \"xxxxx\"\nend program</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/REPEAT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/REPEAT.html</a>\n  </p>\n</div>\n","reshape":"<h1 class=\"section\" id=\"RESHAPE\">8.207 <code>RESHAPE</code> — Function to reshape an array</h1> \n<dl> <dt>Description:</dt>\n<dd>Reshapes <var>SOURCE</var> to correspond to <var>SHAPE</var>. If necessary, the new array may be padded with elements from <var>PAD</var> or permuted as defined by <var>ORDER</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = RESHAPE(SOURCE, SHAPE[, PAD, ORDER])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>SOURCE</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an array of any type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>SHAPE</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>INTEGER</code> and an array of rank one. Its values must be positive or zero. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>PAD</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) shall be an array of the same type as <var>SOURCE</var>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>ORDER</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) shall be of type <code>INTEGER</code> and an array of the same shape as <var>SHAPE</var>. Its values shall be a permutation of the numbers from 1 to n, where n is the size of <var>SHAPE</var>. If <var>ORDER</var> is absent, the natural ordering shall be assumed. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The result is an array of shape <var>SHAPE</var> with the same type as <var>SOURCE</var>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_reshape\n  INTEGER, DIMENSION(4) :: x\n  WRITE(*,*) SHAPE(x)                       ! prints \"4\"\n  WRITE(*,*) SHAPE(RESHAPE(x, (/2, 2/)))    ! prints \"2 2\"\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"shape#SHAPE\">SHAPE</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/RESHAPE.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/RESHAPE.html</a>\n  </p>\n</div>\n","rrspacing":"<h1 class=\"section\" id=\"RRSPACING\">8.208 <code>RRSPACING</code> — Reciprocal of the relative spacing</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>RRSPACING(X)</code> returns the reciprocal of the relative spacing of model numbers near <var>X</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = RRSPACING(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>REAL</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of the same type and kind as <var>X</var>. The value returned is equal to <code>ABS(FRACTION(X)) * FLOAT(RADIX(X))**DIGITS(X)</code>. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"spacing#SPACING\">SPACING</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/RRSPACING.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/RRSPACING.html</a>\n  </p>\n</div>\n","rshift":"<h1 class=\"section\" id=\"RSHIFT\">8.209 <code>RSHIFT</code> — Right shift bits</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>RSHIFT</code> returns a value corresponding to <var>I</var> with all of the bits shifted right by <var>SHIFT</var> places. If the absolute value of <var>SHIFT</var> is greater than <code>BIT_SIZE(I)</code>, the value is undefined. Bits shifted out from the right end are lost. The fill is arithmetic: the bits shifted in from the left end are equal to the leftmost bit, which in two's complement representation is the sign bit. <p>This function has been superseded by the <code>SHIFTA</code> intrinsic, which is standard in Fortran 2008 and later. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = RSHIFT(I, SHIFT)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>SHIFT</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> and of the same kind as <var>I</var>. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"ishft#ISHFT\">ISHFT</a>, <a href=\"ishftc#ISHFTC\">ISHFTC</a>, <a href=\"lshift#LSHIFT\">LSHIFT</a>, <a href=\"shifta#SHIFTA\">SHIFTA</a>, <a href=\"shiftr#SHIFTR\">SHIFTR</a>, <a href=\"shiftl#SHIFTL\">SHIFTL</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/RSHIFT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/RSHIFT.html</a>\n  </p>\n</div>\n","same_005ftype_005fas":"<h1 class=\"section\" id=\"SAME_005fTYPE_005fAS\">8.210 <code>SAME_TYPE_AS</code> — Query dynamic types for equality</h1> \n<dl> <dt>Description:</dt>\n<dd>Query dynamic types for equality. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2003 and later </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = SAME_TYPE_AS(A, B)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>A</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an object of extensible declared type or unlimited polymorphic. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>B</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an object of extensible declared type or unlimited polymorphic. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is a scalar of type default logical. It is true if and only if the dynamic type of A is the same as the dynamic type of B. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"extends_005ftype_005fof#EXTENDS_005fTYPE_005fOF\">EXTENDS_TYPE_OF</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SAME_005fTYPE_005fAS.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SAME_005fTYPE_005fAS.html</a>\n  </p>\n</div>\n","scale":"<h1 class=\"section\" id=\"SCALE\">8.211 <code>SCALE</code> — Scale a real value</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>SCALE(X,I)</code> returns <code>X * RADIX(X)**I</code>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = SCALE(X, I)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type of the argument shall be a <code>REAL</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">The type of the argument shall be a <code>INTEGER</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of the same type and kind as <var>X</var>. Its value is <code>X * RADIX(X)**I</code>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_scale\n  real :: x = 178.1387e-4\n  integer :: i = 5\n  print *, scale(x,i), x*radix(x)**i\nend program test_scale</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SCALE.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SCALE.html</a>\n  </p>\n</div>\n","scan":"<h1 class=\"section\" id=\"SCAN\">8.212 <code>SCAN</code> — Scan a string for the presence of a set of characters</h1> \n<dl> <dt>Description:</dt>\n<dd>Scans a <var>STRING</var> for any of the characters in a <var>SET</var> of characters. <p>If <var>BACK</var> is either absent or equals <code>FALSE</code>, this function returns the position of the leftmost character of <var>STRING</var> that is in <var>SET</var>. If <var>BACK</var> equals <code>TRUE</code>, the rightmost position is returned. If no character of <var>SET</var> is found in <var>STRING</var>, the result is zero. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later, with <var>KIND</var> argument Fortran 2003 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = SCAN(STRING, SET[, BACK [, KIND]])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STRING</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>CHARACTER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>SET</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>CHARACTER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>BACK</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) shall be of type <code>LOGICAL</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>KIND</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) An <code>INTEGER</code> initialization expression indicating the kind parameter of the result. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> and of kind <var>KIND</var>. If <var>KIND</var> is absent, the return value is of default integer kind. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_scan\n  WRITE(*,*) SCAN(\"FORTRAN\", \"AO\")          ! 2, found 'O'\n  WRITE(*,*) SCAN(\"FORTRAN\", \"AO\", .TRUE.)  ! 6, found 'A'\n  WRITE(*,*) SCAN(\"FORTRAN\", \"C++\")         ! 0, found none\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"index-intrinsic#INDEX-intrinsic\">INDEX intrinsic</a>, <a href=\"verify#VERIFY\">VERIFY</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SCAN.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SCAN.html</a>\n  </p>\n</div>\n","secnds":"<h1 class=\"section\" id=\"SECNDS\">8.213 <code>SECNDS</code> — Time function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>SECNDS(X)</code> gets the time in seconds from the real-time system clock. <var>X</var> is a reference time, also in seconds. If this is zero, the time in seconds from midnight is returned. This function is non-standard and its use is discouraged. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = SECNDS (X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>T</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>REAL(4)</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>REAL(4)</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>None </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_secnds\n    integer :: i\n    real(4) :: t1, t2\n    print *, secnds (0.0)   ! seconds since midnight\n    t1 = secnds (0.0)       ! reference time\n    do i = 1, 10000000      ! do something\n    end do\n    t2 = secnds (t1)        ! elapsed time\n    print *, \"Something took \", t2, \" seconds.\"\nend program test_secnds</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SECNDS.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SECNDS.html</a>\n  </p>\n</div>\n","second":"<h1 class=\"section\" id=\"SECOND\">8.214 <code>SECOND</code> — CPU time function</h1> \n<dl> <dt>Description:</dt>\n<dd>Returns a <code>REAL(4)</code> value representing the elapsed CPU time in seconds. This provides the same functionality as the standard <code>CPU_TIME</code> intrinsic, and is only included for backwards compatibility. <p>This intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine, function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>CALL SECOND(TIME)</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>TIME = SECOND()</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>TIME</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>REAL(4)</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>In either syntax, <var>TIME</var> is set to the process's current runtime in seconds. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"cpu_005ftime#CPU_005fTIME\">CPU_TIME</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SECOND.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SECOND.html</a>\n  </p>\n</div>\n","selected_005fchar_005fkind":"<h1 class=\"section\" id=\"SELECTED_005fCHAR_005fKIND\">8.215 <code>SELECTED_CHAR_KIND</code> — Choose character kind</h1> \n<dl> <dt>Description:</dt>\n<dd> <code>SELECTED_CHAR_KIND(NAME)</code> returns the kind value for the character set named <var>NAME</var>, if a character set with such a name is supported, or -1 otherwise. Currently, supported character sets include “ASCII” and “DEFAULT”, which are equivalent, and “ISO_10646” (Universal Character Set, UCS-4) which is commonly known as Unicode. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2003 and later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = SELECTED_CHAR_KIND(NAME)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>NAME</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar and of the default character type. </td>\n</tr></table> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program character_kind\n  use iso_fortran_env\n  implicit none\n  integer, parameter :: ascii = selected_char_kind (\"ascii\")\n  integer, parameter :: ucs4  = selected_char_kind ('ISO_10646')\n\n  character(kind=ascii, len=26) :: alphabet\n  character(kind=ucs4,  len=30) :: hello_world\n\n  alphabet = ascii_\"abcdefghijklmnopqrstuvwxyz\"\n  hello_world = ucs4_'Hello World and Ni Hao -- ' &amp;\n                // char (int (z'4F60'), ucs4)     &amp;\n                // char (int (z'597D'), ucs4)\n\n  write (*,*) alphabet\n\n  open (output_unit, encoding='UTF-8')\n  write (*,*) trim (hello_world)\nend program character_kind</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SELECTED_005fCHAR_005fKIND.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SELECTED_005fCHAR_005fKIND.html</a>\n  </p>\n</div>\n","selected_005fint_005fkind":"<h1 class=\"section\" id=\"SELECTED_005fINT_005fKIND\">8.216 <code>SELECTED_INT_KIND</code> — Choose integer kind</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>SELECTED_INT_KIND(R)</code> return the kind value of the smallest integer type that can represent all values ranging from -10^R (exclusive) to 10^R (exclusive). If there is no integer kind that accommodates this range, <code>SELECTED_INT_KIND</code> returns -1. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = SELECTED_INT_KIND(R)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>R</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar and of type <code>INTEGER</code>. </td>\n</tr></table> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program large_integers\n  integer,parameter :: k5 = selected_int_kind(5)\n  integer,parameter :: k15 = selected_int_kind(15)\n  integer(kind=k5) :: i5\n  integer(kind=k15) :: i15\n\n  print *, huge(i5), huge(i15)\n\n  ! The following inequalities are always true\n  print *, huge(i5) &gt;= 10_k5**5-1\n  print *, huge(i15) &gt;= 10_k15**15-1\nend program large_integers</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SELECTED_005fINT_005fKIND.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SELECTED_005fINT_005fKIND.html</a>\n  </p>\n</div>\n","selected_005freal_005fkind":"<h1 class=\"section\" id=\"SELECTED_005fREAL_005fKIND\">8.217 <code>SELECTED_REAL_KIND</code> — Choose real kind</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>SELECTED_REAL_KIND(P,R)</code> returns the kind value of a real data type with decimal precision of at least <code>P</code> digits, exponent range of at least <code>R</code>, and with a radix of <code>RADIX</code>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later, with <code>RADIX</code> Fortran 2008 or later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = SELECTED_REAL_KIND([P, R, RADIX])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>P</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) shall be a scalar and of type <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>R</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) shall be a scalar and of type <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>RADIX</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) shall be a scalar and of type <code>INTEGER</code>. </td>\n</tr>\n</table> Before Fortran 2008, at least one of the arguments <var>R</var> or <var>P</var> shall be present; since Fortran 2008, they are assumed to be zero if absent. </dd>\n<dt>Return value:</dt>\n<dd> <code>SELECTED_REAL_KIND</code> returns the value of the kind type parameter of a real data type with decimal precision of at least <code>P</code> digits, a decimal exponent range of at least <code>R</code>, and with the requested <code>RADIX</code>. If the <code>RADIX</code> parameter is absent, real kinds with any radix can be returned. If more than one real data type meet the criteria, the kind of the data type with the smallest decimal precision is returned. If no real data type matches the criteria, the result is <dl> <dt>-1 if the processor does not support a real data type with a</dt>\n<dd>precision greater than or equal to <code>P</code>, but the <code>R</code> and <code>RADIX</code> requirements can be fulfilled </dd>\n<dt>-2 if the processor does not support a real type with an exponent</dt>\n<dd>range greater than or equal to <code>R</code>, but <code>P</code> and <code>RADIX</code> are fulfillable </dd>\n<dt>-3 if <code>RADIX</code> but not <code>P</code> and <code>R</code> requirements</dt>\n<dd>are fulfillable </dd>\n<dt>-4 if <code>RADIX</code> and either <code>P</code> or <code>R</code> requirements</dt>\n<dd>are fulfillable </dd>\n<dt>-5 if there is no real type with the given <code>RADIX</code>\n</dt>\n\n</dl> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"precision#PRECISION\">PRECISION</a>, <a href=\"range#RANGE\">RANGE</a>, <a href=\"radix#RADIX\">RADIX</a> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program real_kinds\n  integer,parameter :: p6 = selected_real_kind(6)\n  integer,parameter :: p10r100 = selected_real_kind(10,100)\n  integer,parameter :: r400 = selected_real_kind(r=400)\n  real(kind=p6) :: x\n  real(kind=p10r100) :: y\n  real(kind=r400) :: z\n\n  print *, precision(x), range(x)\n  print *, precision(y), range(y)\n  print *, precision(z), range(z)\nend program real_kinds</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SELECTED_005fREAL_005fKIND.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SELECTED_005fREAL_005fKIND.html</a>\n  </p>\n</div>\n","set_005fexponent":"<h1 class=\"section\" id=\"SET_005fEXPONENT\">8.218 <code>SET_EXPONENT</code> — Set the exponent of the model</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>SET_EXPONENT(X, I)</code> returns the real number whose fractional part is that that of <var>X</var> and whose exponent part is <var>I</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = SET_EXPONENT(X, I)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>REAL</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>INTEGER</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of the same type and kind as <var>X</var>. The real number whose fractional part is that that of <var>X</var> and whose exponent part if <var>I</var> is returned; it is <code>FRACTION(X) * RADIX(X)**I</code>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_setexp\n  REAL :: x = 178.1387e-4\n  INTEGER :: i = 17\n  PRINT *, SET_EXPONENT(x, i), FRACTION(x) * RADIX(x)**i\nEND PROGRAM</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SET_005fEXPONENT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SET_005fEXPONENT.html</a>\n  </p>\n</div>\n","shape":"<h1 class=\"section\" id=\"SHAPE\">8.219 <code>SHAPE</code> — Determine the shape of an array</h1> \n<dl> <dt>Description:</dt>\n<dd>Determines the shape of an array. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later, with <var>KIND</var> argument Fortran 2003 and later </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = SHAPE(SOURCE [, KIND])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>SOURCE</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an array or scalar of any type. If <var>SOURCE</var> is a pointer it must be associated and allocatable arrays must be allocated. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>KIND</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) An <code>INTEGER</code> initialization expression indicating the kind parameter of the result. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>An <code>INTEGER</code> array of rank one with as many elements as <var>SOURCE</var> has dimensions. The elements of the resulting array correspond to the extend of <var>SOURCE</var> along the respective dimensions. If <var>SOURCE</var> is a scalar, the result is the rank one array of size zero. If <var>KIND</var> is absent, the return value has the default integer kind otherwise the specified kind. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_shape\n  INTEGER, DIMENSION(-1:1, -1:2) :: A\n  WRITE(*,*) SHAPE(A)             ! (/ 3, 4 /)\n  WRITE(*,*) SIZE(SHAPE(42))      ! (/ /)\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"reshape#RESHAPE\">RESHAPE</a>, <a href=\"size#SIZE\">SIZE</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SHAPE.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SHAPE.html</a>\n  </p>\n</div>\n","shifta":"<h1 class=\"section\" id=\"SHIFTA\">8.220 <code>SHIFTA</code> — Right shift with fill</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>SHIFTA</code> returns a value corresponding to <var>I</var> with all of the bits shifted right by <var>SHIFT</var> places. If the absolute value of <var>SHIFT</var> is greater than <code>BIT_SIZE(I)</code>, the value is undefined. Bits shifted out from the right end are lost. The fill is arithmetic: the bits shifted in from the left end are equal to the leftmost bit, which in two's complement representation is the sign bit. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = SHIFTA(I, SHIFT)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>SHIFT</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> and of the same kind as <var>I</var>. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"shiftl#SHIFTL\">SHIFTL</a>, <a href=\"shiftr#SHIFTR\">SHIFTR</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SHIFTA.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SHIFTA.html</a>\n  </p>\n</div>\n","shiftl":"<h1 class=\"section\" id=\"SHIFTL\">8.221 <code>SHIFTL</code> — Left shift</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>SHIFTL</code> returns a value corresponding to <var>I</var> with all of the bits shifted left by <var>SHIFT</var> places. If the absolute value of <var>SHIFT</var> is greater than <code>BIT_SIZE(I)</code>, the value is undefined. Bits shifted out from the left end are lost, and bits shifted in from the right end are set to 0. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = SHIFTL(I, SHIFT)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>SHIFT</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> and of the same kind as <var>I</var>. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"shifta#SHIFTA\">SHIFTA</a>, <a href=\"shiftr#SHIFTR\">SHIFTR</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SHIFTL.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SHIFTL.html</a>\n  </p>\n</div>\n","shiftr":"<h1 class=\"section\" id=\"SHIFTR\">8.222 <code>SHIFTR</code> — Right shift</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>SHIFTR</code> returns a value corresponding to <var>I</var> with all of the bits shifted right by <var>SHIFT</var> places. If the absolute value of <var>SHIFT</var> is greater than <code>BIT_SIZE(I)</code>, the value is undefined. Bits shifted out from the right end are lost, and bits shifted in from the left end are set to 0. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = SHIFTR(I, SHIFT)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>SHIFT</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> and of the same kind as <var>I</var>. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"shifta#SHIFTA\">SHIFTA</a>, <a href=\"shiftl#SHIFTL\">SHIFTL</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SHIFTR.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SHIFTR.html</a>\n  </p>\n</div>\n","sign":"<h1 class=\"section\" id=\"SIGN\">8.223 <code>SIGN</code> — Sign copying function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>SIGN(A,B)</code> returns the value of <var>A</var> with the sign of <var>B</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = SIGN(A, B)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>A</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>INTEGER</code> or <code>REAL</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>B</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of the same type and kind as <var>A</var> </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The kind of the return value is that of <var>A</var> and <var>B</var>. If B\\ge 0 then the result is <code>ABS(A)</code>, else it is <code>-ABS(A)</code>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_sign\n  print *, sign(-12,1)\n  print *, sign(-12,0)\n  print *, sign(-12,-1)\n\n  print *, sign(-12.,1.)\n  print *, sign(-12.,0.)\n  print *, sign(-12.,-1.)\nend program test_sign</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Arguments </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>SIGN(A,B)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4) A, B</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4)</code> </td>\n<td valign=\"top\" width=\"25%\">f77, gnu </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>ISIGN(A,B)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>INTEGER(4) A, B</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>INTEGER(4)</code> </td>\n<td valign=\"top\" width=\"25%\">f77, gnu </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DSIGN(A,B)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) A, B</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">f77, gnu </td>\n</tr>\n</table> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SIGN.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SIGN.html</a>\n  </p>\n</div>\n","signal":"<h1 class=\"section\" id=\"SIGNAL\">8.224 <code>SIGNAL</code> — Signal handling subroutine (or function)</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>SIGNAL(NUMBER, HANDLER [, STATUS])</code> causes external subroutine <var>HANDLER</var> to be executed with a single integer argument when signal <var>NUMBER</var> occurs. If <var>HANDLER</var> is an integer, it can be used to turn off handling of signal <var>NUMBER</var> or revert to its default action. See <code>signal(2)</code>. <p>If <code>SIGNAL</code> is called as a subroutine and the <var>STATUS</var> argument is supplied, it is set to the value returned by <code>signal(2)</code>. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine, function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>CALL SIGNAL(NUMBER, HANDLER [, STATUS])</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>STATUS = SIGNAL(NUMBER, HANDLER)</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>NUMBER</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar integer, with <code>INTENT(IN)</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><var>HANDLER</var></td>\n<td valign=\"top\" width=\"70%\">Signal handler (<code>INTEGER FUNCTION</code> or <code>SUBROUTINE</code>) or dummy/global <code>INTEGER</code> scalar. <code>INTEGER</code>. It is <code>INTENT(IN)</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STATUS</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) <var>STATUS</var> shall be a scalar integer. It has <code>INTENT(OUT)</code>. </td>\n</tr>\n</table>  </dd>\n<dt>Return value:</dt>\n<dd>The <code>SIGNAL</code> function returns the value returned by <code>signal(2)</code>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_signal\n  intrinsic signal\n  external handler_print\n\n  call signal (12, handler_print)\n  call signal (10, 1)\n\n  call sleep (30)\nend program test_signal</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SIGNAL.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SIGNAL.html</a>\n  </p>\n</div>\n","sin":"<h1 class=\"section\" id=\"SIN\">8.225 <code>SIN</code> — Sine function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>SIN(X)</code> computes the sine of <var>X</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = SIN(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL</code> or <code>COMPLEX</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value has same type and kind as <var>X</var>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_sin\n  real :: x = 0.0\n  x = sin(x)\nend program test_sin</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>SIN(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4)</code> </td>\n<td valign=\"top\" width=\"25%\">f77, gnu </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DSIN(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">f95, gnu </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>CSIN(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(4) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(4)</code> </td>\n<td valign=\"top\" width=\"25%\">f95, gnu </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>ZSIN(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(8)</code> </td>\n<td valign=\"top\" width=\"25%\">f95, gnu </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>CDSIN(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(8)</code> </td>\n<td valign=\"top\" width=\"25%\">f95, gnu </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"asin#ASIN\">ASIN</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SIN.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SIN.html</a>\n  </p>\n</div>\n","sinh":"<h1 class=\"section\" id=\"SINH\">8.226 <code>SINH</code> — Hyperbolic sine function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>SINH(X)</code> computes the hyperbolic sine of <var>X</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later, for a complex argument Fortran 2008 or later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = SINH(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL</code> or <code>COMPLEX</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value has same type and kind as <var>X</var>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_sinh\n  real(8) :: x = - 1.0_8\n  x = sinh(x)\nend program test_sinh</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>SINH(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 95 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DSINH(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 95 and later </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"asinh#ASINH\">ASINH</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SINH.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SINH.html</a>\n  </p>\n</div>\n","size":"<h1 class=\"section\" id=\"SIZE\">8.227 <code>SIZE</code> — Determine the size of an array</h1> \n<dl> <dt>Description:</dt>\n<dd>Determine the extent of <var>ARRAY</var> along a specified dimension <var>DIM</var>, or the total number of elements in <var>ARRAY</var> if <var>DIM</var> is absent. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later, with <var>KIND</var> argument Fortran 2003 and later </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = SIZE(ARRAY[, DIM [, KIND]])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>ARRAY</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an array of any type. If <var>ARRAY</var> is a pointer it must be associated and allocatable arrays must be allocated. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>DIM</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) shall be a scalar of type <code>INTEGER</code> and its value shall be in the range from 1 to n, where n equals the rank of <var>ARRAY</var>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>KIND</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) An <code>INTEGER</code> initialization expression indicating the kind parameter of the result. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> and of kind <var>KIND</var>. If <var>KIND</var> is absent, the return value is of default integer kind. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_size\n  WRITE(*,*) SIZE((/ 1, 2 /))    ! 2\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"shape#SHAPE\">SHAPE</a>, <a href=\"reshape#RESHAPE\">RESHAPE</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SIZE.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SIZE.html</a>\n  </p>\n</div>\n","sizeof":"<h1 class=\"section\" id=\"SIZEOF\">8.228 <code>SIZEOF</code> — Size in bytes of an expression</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>SIZEOF(X)</code> calculates the number of bytes of storage the expression <code>X</code> occupies. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>N = SIZEOF(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The argument shall be of any type, rank or shape. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type integer and of the system-dependent kind <var>C_SIZE_T</var> (from the <var>ISO_C_BINDING</var> module). Its value is the number of bytes occupied by the argument. If the argument has the <code>POINTER</code> attribute, the number of bytes of the storage area pointed to is returned. If the argument is of a derived type with <code>POINTER</code> or <code>ALLOCATABLE</code> components, the return value does not account for the sizes of the data pointed to by these components. If the argument is polymorphic, the size according to the declared type is returned. The argument may not be a procedure or procedure pointer. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">integer :: i\nreal :: r, s(5)\nprint *, (sizeof(s)/sizeof(r) == 5)\nend</pre> <p>The example will print <code>.TRUE.</code> unless you are using a platform where default <code>REAL</code> variables are unusually padded. </p>\n</dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"c_005fsizeof#C_005fSIZEOF\">C_SIZEOF</a>, <a href=\"storage_005fsize#STORAGE_005fSIZE\">STORAGE_SIZE</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SIZEOF.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SIZEOF.html</a>\n  </p>\n</div>\n","sleep":"<h1 class=\"section\" id=\"SLEEP\">8.229 <code>SLEEP</code> — Sleep for the specified number of seconds</h1> \n<dl> <dt>Description:</dt>\n<dd>Calling this subroutine causes the process to pause for <var>SECONDS</var> seconds. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL SLEEP(SECONDS)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>SECONDS</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be of default <code>INTEGER</code>. </td>\n</tr></table> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_sleep\n  call sleep(5)\nend</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SLEEP.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SLEEP.html</a>\n  </p>\n</div>\n","spacing":"<h1 class=\"section\" id=\"SPACING\">8.230 <code>SPACING</code> — Smallest distance between two numbers of a given type</h1> \n<dl> <dt>Description:</dt>\n<dd>Determines the distance between the argument <var>X</var> and the nearest adjacent number of the same type. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = SPACING(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>REAL</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The result is of the same type as the input argument <var>X</var>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_spacing\n  INTEGER, PARAMETER :: SGL = SELECTED_REAL_KIND(p=6, r=37)\n  INTEGER, PARAMETER :: DBL = SELECTED_REAL_KIND(p=13, r=200)\n\n  WRITE(*,*) spacing(1.0_SGL)      ! \"1.1920929E-07\"          on i686\n  WRITE(*,*) spacing(1.0_DBL)      ! \"2.220446049250313E-016\" on i686\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"rrspacing#RRSPACING\">RRSPACING</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SPACING.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SPACING.html</a>\n  </p>\n</div>\n","spread":"<h1 class=\"section\" id=\"SPREAD\">8.231 <code>SPREAD</code> — Add a dimension to an array</h1> \n<dl> <dt>Description:</dt>\n<dd>Replicates a <var>SOURCE</var> array <var>NCOPIES</var> times along a specified dimension <var>DIM</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = SPREAD(SOURCE, DIM, NCOPIES)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>SOURCE</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar or an array of any type and a rank less than seven. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>DIM</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar of type <code>INTEGER</code> with a value in the range from 1 to n+1, where n equals the rank of <var>SOURCE</var>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>NCOPIES</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar of type <code>INTEGER</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The result is an array of the same type as <var>SOURCE</var> and has rank n+1 where n equals the rank of <var>SOURCE</var>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_spread\n  INTEGER :: a = 1, b(2) = (/ 1, 2 /)\n  WRITE(*,*) SPREAD(A, 1, 2)            ! \"1 1\"\n  WRITE(*,*) SPREAD(B, 1, 2)            ! \"1 1 2 2\"\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"unpack#UNPACK\">UNPACK</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SPREAD.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SPREAD.html</a>\n  </p>\n</div>\n","sqrt":"<h1 class=\"section\" id=\"SQRT\">8.232 <code>SQRT</code> — Square-root function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>SQRT(X)</code> computes the square root of <var>X</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = SQRT(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL</code> or <code>COMPLEX</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>REAL</code> or <code>COMPLEX</code>. The kind type parameter is the same as <var>X</var>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_sqrt\n  real(8) :: x = 2.0_8\n  complex :: z = (1.0, 2.0)\n  x = sqrt(x)\n  z = sqrt(z)\nend program test_sqrt</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>SQRT(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 95 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DSQRT(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 95 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>CSQRT(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(4) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 95 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>ZSQRT(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(8)</code> </td>\n<td valign=\"top\" width=\"25%\">GNU extension </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>CDSQRT(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>COMPLEX(8)</code> </td>\n<td valign=\"top\" width=\"25%\">GNU extension </td>\n</tr>\n</table> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SQRT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SQRT.html</a>\n  </p>\n</div>\n","srand":"<h1 class=\"section\" id=\"SRAND\">8.233 <code>SRAND</code> — Reinitialize the random number generator</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>SRAND</code> reinitializes the pseudo-random number generator called by <code>RAND</code> and <code>IRAND</code>. The new seed used by the generator is specified by the required argument <var>SEED</var>. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL SRAND(SEED)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>SEED</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar <code>INTEGER(kind=4)</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>Does not return anything. </dd>\n<dt>Example:</dt>\n<dd>See <code>RAND</code> and <code>IRAND</code> for examples. </dd>\n<dt>Notes:</dt>\n<dd>The Fortran 2003 standard specifies the intrinsic <code>RANDOM_SEED</code> to initialize the pseudo-random numbers generator and <code>RANDOM_NUMBER</code> to generate pseudo-random numbers. Please note that in GNU Fortran, these two sets of intrinsics (<code>RAND</code>, <code>IRAND</code> and <code>SRAND</code> on the one hand, <code>RANDOM_NUMBER</code> and <code>RANDOM_SEED</code> on the other hand) access two independent pseudo-random number generators. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"rand#RAND\">RAND</a>, <a href=\"random_005fseed#RANDOM_005fSEED\">RANDOM_SEED</a>, <a href=\"random_005fnumber#RANDOM_005fNUMBER\">RANDOM_NUMBER</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SRAND.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SRAND.html</a>\n  </p>\n</div>\n","stat":"<h1 class=\"section\" id=\"STAT\">8.234 <code>STAT</code> — Get file status</h1> \n<dl> <dt>Description:</dt>\n<dd>This function returns information about a file. No permissions are required on the file itself, but execute (search) permission is required on all of the directories in path that lead to the file. <p>The elements that are obtained and stored in the array <code>VALUES</code>: </p>\n\n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<code>VALUES(1)</code> </td>\n<td valign=\"top\" width=\"70%\">Device ID </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<code>VALUES(2)</code> </td>\n<td valign=\"top\" width=\"70%\">Inode number </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<code>VALUES(3)</code> </td>\n<td valign=\"top\" width=\"70%\">File mode </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<code>VALUES(4)</code> </td>\n<td valign=\"top\" width=\"70%\">Number of links </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<code>VALUES(5)</code> </td>\n<td valign=\"top\" width=\"70%\">Owner's uid </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<code>VALUES(6)</code> </td>\n<td valign=\"top\" width=\"70%\">Owner's gid </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<code>VALUES(7)</code> </td>\n<td valign=\"top\" width=\"70%\">ID of device containing directory entry for file (0 if not available) </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<code>VALUES(8)</code> </td>\n<td valign=\"top\" width=\"70%\">File size (bytes) </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<code>VALUES(9)</code> </td>\n<td valign=\"top\" width=\"70%\">Last access time </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<code>VALUES(10)</code> </td>\n<td valign=\"top\" width=\"70%\">Last modification time </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<code>VALUES(11)</code> </td>\n<td valign=\"top\" width=\"70%\">Last file status change time </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<code>VALUES(12)</code> </td>\n<td valign=\"top\" width=\"70%\">Preferred I/O block size (-1 if not available) </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<code>VALUES(13)</code> </td>\n<td valign=\"top\" width=\"70%\">Number of blocks allocated (-1 if not available) </td>\n</tr>\n</table> <p>Not all these elements are relevant on all systems. If an element is not relevant, it is returned as 0. </p>\n<p>This intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine, function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>CALL STAT(NAME, VALUES [, STATUS])</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>STATUS = STAT(NAME, VALUES)</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>NAME</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>CHARACTER</code>, of the default kind and a valid path within the file system. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>VALUES</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>INTEGER(4), DIMENSION(13)</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STATUS</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) status flag of type <code>INTEGER(4)</code>. Returns 0 on success and a system specific error code otherwise. </td>\n</tr>\n</table> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_stat\n  INTEGER, DIMENSION(13) :: buff\n  INTEGER :: status\n\n  CALL STAT(\"/etc/passwd\", buff, status)\n\n  IF (status == 0) THEN\n    WRITE (*, FMT=\"('Device ID:',               T30, I19)\") buff(1)\n    WRITE (*, FMT=\"('Inode number:',            T30, I19)\") buff(2)\n    WRITE (*, FMT=\"('File mode (octal):',       T30, O19)\") buff(3)\n    WRITE (*, FMT=\"('Number of links:',         T30, I19)\") buff(4)\n    WRITE (*, FMT=\"('Owner''s uid:',            T30, I19)\") buff(5)\n    WRITE (*, FMT=\"('Owner''s gid:',            T30, I19)\") buff(6)\n    WRITE (*, FMT=\"('Device where located:',    T30, I19)\") buff(7)\n    WRITE (*, FMT=\"('File size:',               T30, I19)\") buff(8)\n    WRITE (*, FMT=\"('Last access time:',        T30, A19)\") CTIME(buff(9))\n    WRITE (*, FMT=\"('Last modification time',   T30, A19)\") CTIME(buff(10))\n    WRITE (*, FMT=\"('Last status change time:', T30, A19)\") CTIME(buff(11))\n    WRITE (*, FMT=\"('Preferred block size:',    T30, I19)\") buff(12)\n    WRITE (*, FMT=\"('No. of blocks allocated:', T30, I19)\") buff(13)\n  END IF\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>To stat an open file: <a href=\"fstat#FSTAT\">FSTAT</a>, to stat a link: <a href=\"lstat#LSTAT\">LSTAT</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/STAT.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/STAT.html</a>\n  </p>\n</div>\n","storage_005fsize":"<h1 class=\"section\" id=\"STORAGE_005fSIZE\">8.235 <code>STORAGE_SIZE</code> — Storage size in bits</h1> \n<dl> <dt>Description:</dt>\n<dd>Returns the storage size of argument <var>A</var> in bits. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = STORAGE_SIZE(A [, KIND])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>A</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar or array of any type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>KIND</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) shall be a scalar integer constant expression. </td>\n</tr>\n</table> </dd>\n<dt>Return Value:</dt>\n<dd>The result is a scalar integer with the kind type parameter specified by KIND (or default integer type if KIND is missing). The result value is the size expressed in bits for an element of an array that has the dynamic type and type parameters of A. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"c_005fsizeof#C_005fSIZEOF\">C_SIZEOF</a>, <a href=\"sizeof#SIZEOF\">SIZEOF</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/STORAGE_005fSIZE.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/STORAGE_005fSIZE.html</a>\n  </p>\n</div>\n","sum":"<h1 class=\"section\" id=\"SUM\">8.236 <code>SUM</code> — Sum of array elements</h1> \n<dl> <dt>Description:</dt>\n<dd>Adds the elements of <var>ARRAY</var> along dimension <var>DIM</var> if the corresponding element in <var>MASK</var> is <code>TRUE</code>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = SUM(ARRAY[, MASK])</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = SUM(ARRAY, DIM[, MASK])</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>ARRAY</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an array of type <code>INTEGER</code>, <code>REAL</code> or <code>COMPLEX</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>DIM</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) shall be a scalar of type <code>INTEGER</code> with a value in the range from 1 to n, where n equals the rank of <var>ARRAY</var>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>MASK</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) shall be of type <code>LOGICAL</code> and either be a scalar or an array of the same shape as <var>ARRAY</var>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The result is of the same type as <var>ARRAY</var>. <p>If <var>DIM</var> is absent, a scalar with the sum of all elements in <var>ARRAY</var> is returned. Otherwise, an array of rank n-1, where n equals the rank of <var>ARRAY</var>, and a shape similar to that of <var>ARRAY</var> with dimension <var>DIM</var> dropped is returned. </p>\n</dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_sum\n  INTEGER :: x(5) = (/ 1, 2, 3, 4 ,5 /)\n  print *, SUM(x)                        ! all elements, sum = 15\n  print *, SUM(x, MASK=MOD(x, 2)==1)     ! odd elements, sum = 9\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"product#PRODUCT\">PRODUCT</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SUM.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SUM.html</a>\n  </p>\n</div>\n","symlnk":"<h1 class=\"section\" id=\"SYMLNK\">8.237 <code>SYMLNK</code> — Create a symbolic link</h1> \n<dl> <dt>Description:</dt>\n<dd>Makes a symbolic link from file <var>PATH1</var> to <var>PATH2</var>. A null character (<code>CHAR(0)</code>) can be used to mark the end of the names in <var>PATH1</var> and <var>PATH2</var>; otherwise, trailing blanks in the file names are ignored. If the <var>STATUS</var> argument is supplied, it contains 0 on success or a nonzero error code upon return; see <code>symlink(2)</code>. If the system does not supply <code>symlink(2)</code>, <code>ENOSYS</code> is returned. <p>This intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine, function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>CALL SYMLNK(PATH1, PATH2 [, STATUS])</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>STATUS = SYMLNK(PATH1, PATH2)</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>PATH1</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of default <code>CHARACTER</code> type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>PATH2</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of default <code>CHARACTER</code> type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STATUS</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Shall be of default <code>INTEGER</code> type. </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"link#LINK\">LINK</a>, <a href=\"unlink#UNLINK\">UNLINK</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SYMLNK.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SYMLNK.html</a>\n  </p>\n</div>\n","system":"<h1 class=\"section\" id=\"SYSTEM\">8.238 <code>SYSTEM</code> — Execute a shell command</h1> \n<dl> <dt>Description:</dt>\n<dd>Passes the command <var>COMMAND</var> to a shell (see <code>system(3)</code>). If argument <var>STATUS</var> is present, it contains the value returned by <code>system(3)</code>, which is presumably 0 if the shell command succeeded. Note that which shell is used to invoke the command is system-dependent and environment-dependent. <p>This intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit. </p>\n<p>Note that the <code>system</code> function need not be thread-safe. It is the responsibility of the user to ensure that <code>system</code> is not called concurrently. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine, function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>CALL SYSTEM(COMMAND [, STATUS])</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>STATUS = SYSTEM(COMMAND)</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>COMMAND</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of default <code>CHARACTER</code> type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STATUS</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Shall be of default <code>INTEGER</code> type. </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"execute_005fcommand_005fline#EXECUTE_005fCOMMAND_005fLINE\">EXECUTE_COMMAND_LINE</a>, which is part of the Fortran 2008 standard and should considered in new code for future portability. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SYSTEM.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SYSTEM.html</a>\n  </p>\n</div>\n","system_005fclock":"<h1 class=\"section\" id=\"SYSTEM_005fCLOCK\">8.239 <code>SYSTEM_CLOCK</code> — Time function</h1> \n<dl> <dt>Description:</dt>\n<dd>Determines the <var>COUNT</var> of a processor clock since an unspecified time in the past modulo <var>COUNT_MAX</var>, <var>COUNT_RATE</var> determines the number of clock ticks per second. If the platform supports a monotonic clock, that clock is used and can, depending on the platform clock implementation, provide up to nanosecond resolution. If a monotonic clock is not available, the implementation falls back to a realtime clock. <p><var>COUNT_RATE</var> is system dependent and can vary depending on the kind of the arguments. For <var>kind=4</var> arguments, <var>COUNT</var> represents milliseconds, while for <var>kind=8</var> arguments, <var>COUNT</var> typically represents micro- or nanoseconds depending on resolution of the underlying platform clock. <var>COUNT_MAX</var> usually equals <code>HUGE(COUNT_MAX)</code>. Note that the millisecond resolution of the <var>kind=4</var> version implies that the <var>COUNT</var> will wrap around in roughly 25 days. In order to avoid issues with the wrap around and for more precise timing, please use the <var>kind=8</var> version. </p>\n<p>If there is no clock, or querying the clock fails, <var>COUNT</var> is set to <code>-HUGE(COUNT)</code>, and <var>COUNT_RATE</var> and <var>COUNT_MAX</var> are set to zero. </p>\n<p>When running on a platform using the GNU C library (glibc) version 2.16 or older, or a derivative thereof, the high resolution monotonic clock is available only when linking with the <var>rt</var> library. This can be done explicitly by adding the <code>-lrt</code> flag when linking the application, but is also done implicitly when using OpenMP. </p>\n<p>On the Windows platform, the version with <var>kind=4</var> arguments uses the <code>GetTickCount</code> function, whereas the <var>kind=8</var> version uses <code>QueryPerformanceCounter</code> and <code>QueryPerformanceCounterFrequency</code>. For more information, and potential caveats, please see the platform documentation. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Subroutine </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>CALL SYSTEM_CLOCK([COUNT, COUNT_RATE, COUNT_MAX])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>COUNT</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) shall be a scalar of type <code>INTEGER</code> with <code>INTENT(OUT)</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>COUNT_RATE</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) shall be a scalar of type <code>INTEGER</code> with <code>INTENT(OUT)</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>COUNT_MAX</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) shall be a scalar of type <code>INTEGER</code> with <code>INTENT(OUT)</code>. </td>\n</tr>\n</table> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_system_clock\n  INTEGER :: count, count_rate, count_max\n  CALL SYSTEM_CLOCK(count, count_rate, count_max)\n  WRITE(*,*) count, count_rate, count_max\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"date_005fand_005ftime#DATE_005fAND_005fTIME\">DATE_AND_TIME</a>, <a href=\"cpu_005ftime#CPU_005fTIME\">CPU_TIME</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SYSTEM_005fCLOCK.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/SYSTEM_005fCLOCK.html</a>\n  </p>\n</div>\n","tan":"<h1 class=\"section\" id=\"TAN\">8.240 <code>TAN</code> — Tangent function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>TAN(X)</code> computes the tangent of <var>X</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later, for a complex argument Fortran 2008 or later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = TAN(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL</code> or <code>COMPLEX</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value has same type and kind as <var>X</var>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_tan\n  real(8) :: x = 0.165_8\n  x = tan(x)\nend program test_tan</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>TAN(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 95 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DTAN(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 95 and later </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"atan#ATAN\">ATAN</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/TAN.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/TAN.html</a>\n  </p>\n</div>\n","tanh":"<h1 class=\"section\" id=\"TANH\">8.241 <code>TANH</code> — Hyperbolic tangent function</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>TANH(X)</code> computes the hyperbolic tangent of <var>X</var>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 77 and later, for a complex argument Fortran 2008 or later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>X = TANH(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be <code>REAL</code> or <code>COMPLEX</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value has same type and kind as <var>X</var>. If <var>X</var> is complex, the imaginary part of the result is in radians. If <var>X</var> is <code>REAL</code>, the return value lies in the range - 1 \\leq tanh(x) \\leq 1 . </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">program test_tanh\n  real(8) :: x = 2.1_8\n  x = tanh(x)\nend program test_tanh</pre> </dd>\n<dt>Specific names:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"20%\">Argument </td>\n<td valign=\"top\" width=\"20%\">Return type </td>\n<td valign=\"top\" width=\"25%\">Standard </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>TANH(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(4)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 95 and later </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>DTANH(X)</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8) X</code> </td>\n<td valign=\"top\" width=\"20%\">\n<code>REAL(8)</code> </td>\n<td valign=\"top\" width=\"25%\">Fortran 95 and later </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"atanh#ATANH\">ATANH</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/TANH.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/TANH.html</a>\n  </p>\n</div>\n","this_005fimage":"<h1 class=\"section\" id=\"THIS_005fIMAGE\">8.242 <code>THIS_IMAGE</code> — Function that returns the cosubscript index of this image</h1> \n<dl> <dt>Description:</dt>\n<dd>Returns the cosubscript for this image. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = THIS_IMAGE()</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>RESULT = THIS_IMAGE(COARRAY [, DIM])</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>COARRAY</var> </td>\n<td valign=\"top\" width=\"70%\">Coarray of any type (optional; if <var>DIM</var> present, required). </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>DIM</var> </td>\n<td valign=\"top\" width=\"70%\">default integer scalar (optional). If present, <var>DIM</var> shall be between one and the corank of <var>COARRAY</var>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>Default integer. If <var>COARRAY</var> is not present, it is scalar and its value is the index of the invoking image. Otherwise, if <var>DIM</var> is not present, a rank-1 array with corank elements is returned, containing the cosubscripts for <var>COARRAY</var> specifying the invoking image. If <var>DIM</var> is present, a scalar is returned, with the value of the <var>DIM</var> element of <code>THIS_IMAGE(COARRAY)</code>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">INTEGER :: value[*]\nINTEGER :: i\nvalue = THIS_IMAGE()\nSYNC ALL\nIF (THIS_IMAGE() == 1) THEN\n  DO i = 1, NUM_IMAGES()\n    WRITE(*,'(2(a,i0))') 'value[', i, '] is ', value[i]\n  END DO\nEND IF</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"num_005fimages#NUM_005fIMAGES\">NUM_IMAGES</a>, <a href=\"image_005findex#IMAGE_005fINDEX\">IMAGE_INDEX</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/THIS_005fIMAGE.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/THIS_005fIMAGE.html</a>\n  </p>\n</div>\n","time":"<h1 class=\"section\" id=\"TIME\">8.243 <code>TIME</code> — Time function</h1> \n<dl> <dt>Description:</dt>\n<dd>Returns the current time encoded as an integer (in the manner of the function <code>time(3)</code> in the C standard library). This value is suitable for passing to <code>CTIME</code>, <code>GMTIME</code>, and <code>LTIME</code>. <p>This intrinsic is not fully portable, such as to systems with 32-bit <code>INTEGER</code> types but supporting times wider than 32 bits. Therefore, the values returned by this intrinsic might be, or become, negative, or numerically less than previous values, during a single run of the compiled program. </p>\n<p>See <a href=\"time8#TIME8\">TIME8</a>, for information on a similar intrinsic that might be portable to more GNU Fortran implementations, though to fewer Fortran compilers. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = TIME()</code> </dd>\n<dt>Return value:</dt>\n<dd>The return value is a scalar of type <code>INTEGER(4)</code>. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"ctime#CTIME\">CTIME</a>, <a href=\"gmtime#GMTIME\">GMTIME</a>, <a href=\"ltime#LTIME\">LTIME</a>, <a href=\"mclock#MCLOCK\">MCLOCK</a>, <a href=\"time8#TIME8\">TIME8</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/TIME.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/TIME.html</a>\n  </p>\n</div>\n","time8":"<h1 class=\"section\" id=\"TIME8\">8.244 <code>TIME8</code> — Time function (64-bit)</h1> \n<dl> <dt>Description:</dt>\n<dd>Returns the current time encoded as an integer (in the manner of the function <code>time(3)</code> in the C standard library). This value is suitable for passing to <code>CTIME</code>, <code>GMTIME</code>, and <code>LTIME</code>. <p><em>Warning:</em> this intrinsic does not increase the range of the timing values over that returned by <code>time(3)</code>. On a system with a 32-bit <code>time(3)</code>, <code>TIME8</code> will return a 32-bit value, even though it is converted to a 64-bit <code>INTEGER(8)</code> value. That means overflows of the 32-bit value can still occur. Therefore, the values returned by this intrinsic might be or become negative or numerically less than previous values during a single run of the compiled program. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = TIME8()</code> </dd>\n<dt>Return value:</dt>\n<dd>The return value is a scalar of type <code>INTEGER(8)</code>. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"ctime#CTIME\">CTIME</a>, <a href=\"gmtime#GMTIME\">GMTIME</a>, <a href=\"ltime#LTIME\">LTIME</a>, <a href=\"mclock8#MCLOCK8\">MCLOCK8</a>, <a href=\"time#TIME\">TIME</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/TIME8.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/TIME8.html</a>\n  </p>\n</div>\n","tiny":"<h1 class=\"section\" id=\"TINY\">8.245 <code>TINY</code> — Smallest positive number of a real kind</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>TINY(X)</code> returns the smallest positive (non zero) number in the model of the type of <code>X</code>. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = TINY(X)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>X</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>REAL</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of the same type and kind as <var>X</var> </dd>\n<dt>Example:</dt>\n<dd>See <code>HUGE</code> for an example. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/TINY.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/TINY.html</a>\n  </p>\n</div>\n","trailz":"<h1 class=\"section\" id=\"TRAILZ\">8.246 <code>TRAILZ</code> — Number of trailing zero bits of an integer</h1> \n<dl> <dt>Description:</dt>\n<dd>\n<code>TRAILZ</code> returns the number of trailing zero bits of an integer. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = TRAILZ(I)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>INTEGER</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The type of the return value is the default <code>INTEGER</code>. If all the bits of <code>I</code> are zero, the result value is <code>BIT_SIZE(I)</code>. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_trailz\n  WRITE (*,*) TRAILZ(8)  ! prints 3\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"bit_005fsize#BIT_005fSIZE\">BIT_SIZE</a>, <a href=\"leadz#LEADZ\">LEADZ</a>, <a href=\"poppar#POPPAR\">POPPAR</a>, <a href=\"popcnt#POPCNT\">POPCNT</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/TRAILZ.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/TRAILZ.html</a>\n  </p>\n</div>\n","transfer":"<h1 class=\"section\" id=\"TRANSFER\">8.247 <code>TRANSFER</code> — Transfer bit patterns</h1> \n<dl> <dt>Description:</dt>\n<dd>Interprets the bitwise representation of <var>SOURCE</var> in memory as if it is the representation of a variable or array of the same type and type parameters as <var>MOLD</var>. <p>This is approximately equivalent to the C concept of <em>casting</em> one type to another. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = TRANSFER(SOURCE, MOLD[, SIZE])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>SOURCE</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar or an array of any type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>MOLD</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar or an array of any type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>SIZE</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) shall be a scalar of type <code>INTEGER</code>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The result has the same type as <var>MOLD</var>, with the bit level representation of <var>SOURCE</var>. If <var>SIZE</var> is present, the result is a one-dimensional array of length <var>SIZE</var>. If <var>SIZE</var> is absent but <var>MOLD</var> is an array (of any size or shape), the result is a one- dimensional array of the minimum length needed to contain the entirety of the bitwise representation of <var>SOURCE</var>. If <var>SIZE</var> is absent and <var>MOLD</var> is a scalar, the result is a scalar. <p>If the bitwise representation of the result is longer than that of <var>SOURCE</var>, then the leading bits of the result correspond to those of <var>SOURCE</var> and any trailing bits are filled arbitrarily. </p>\n<p>When the resulting bit representation does not correspond to a valid representation of a variable of the same type as <var>MOLD</var>, the results are undefined, and subsequent operations on the result cannot be guaranteed to produce sensible behavior. For example, it is possible to create <code>LOGICAL</code> variables for which <var>VAR</var> and <code>.NOT.</code><var>VAR</var> both appear to be true. </p>\n</dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_transfer\n  integer :: x = 2143289344\n  print *, transfer(x, 1.0)    ! prints \"NaN\" on i686\nEND PROGRAM</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/TRANSFER.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/TRANSFER.html</a>\n  </p>\n</div>\n","transpose":"<h1 class=\"section\" id=\"TRANSPOSE\">8.248 <code>TRANSPOSE</code> — Transpose an array of rank two</h1> \n<dl> <dt>Description:</dt>\n<dd>Transpose an array of rank two. Element (i, j) of the result has the value <code>MATRIX(j, i)</code>, for all i, j. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = TRANSPOSE(MATRIX)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>MATRIX</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an array of any type and have a rank of two. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>The result has the same type as <var>MATRIX</var>, and has shape <code>(/ m, n /)</code> if <var>MATRIX</var> has shape <code>(/ n, m /)</code>. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/TRANSPOSE.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/TRANSPOSE.html</a>\n  </p>\n</div>\n","trim":"<h1 class=\"section\" id=\"TRIM\">8.249 <code>TRIM</code> — Remove trailing blank characters of a string</h1> \n<dl> <dt>Description:</dt>\n<dd>Removes trailing blank characters of a string. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = TRIM(STRING)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\"><tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STRING</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar of type <code>CHARACTER</code>. </td>\n</tr></table> </dd>\n<dt>Return value:</dt>\n<dd>A scalar of type <code>CHARACTER</code> which length is that of <var>STRING</var> less the number of trailing blanks. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_trim\n  CHARACTER(len=10), PARAMETER :: s = \"GFORTRAN  \"\n  WRITE(*,*) LEN(s), LEN(TRIM(s))  ! \"10 8\", with/without trailing blanks\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"adjustl#ADJUSTL\">ADJUSTL</a>, <a href=\"adjustr#ADJUSTR\">ADJUSTR</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/TRIM.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/TRIM.html</a>\n  </p>\n</div>\n","ttynam":"<h1 class=\"section\" id=\"TTYNAM\">8.250 <code>TTYNAM</code> — Get the name of a terminal device.</h1> \n<dl> <dt>Description:</dt>\n<dd>Get the name of a terminal device. For more information, see <code>ttyname(3)</code>. <p>This intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine, function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>CALL TTYNAM(UNIT, NAME)</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>NAME = TTYNAM(UNIT)</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>UNIT</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>NAME</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>CHARACTER</code>. </td>\n</tr>\n</table> </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_ttynam\n  INTEGER :: unit\n  DO unit = 1, 10\n    IF (isatty(unit=unit)) write(*,*) ttynam(unit)\n  END DO\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"isatty#ISATTY\">ISATTY</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/TTYNAM.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/TTYNAM.html</a>\n  </p>\n</div>\n","ubound":"<h1 class=\"section\" id=\"UBOUND\">8.251 <code>UBOUND</code> — Upper dimension bounds of an array</h1> \n<dl> <dt>Description:</dt>\n<dd>Returns the upper bounds of an array, or a single upper bound along the <var>DIM</var> dimension. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later, with <var>KIND</var> argument Fortran 2003 and later </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = UBOUND(ARRAY [, DIM [, KIND]])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>ARRAY</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an array, of any type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>DIM</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Shall be a scalar <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><var>KIND</var></td>\n<td valign=\"top\" width=\"70%\">(Optional) An <code>INTEGER</code> initialization expression indicating the kind parameter of the result. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> and of kind <var>KIND</var>. If <var>KIND</var> is absent, the return value is of default integer kind. If <var>DIM</var> is absent, the result is an array of the upper bounds of <var>ARRAY</var>. If <var>DIM</var> is present, the result is a scalar corresponding to the upper bound of the array along that dimension. If <var>ARRAY</var> is an expression rather than a whole array or array structure component, or if it has a zero extent along the relevant dimension, the upper bound is taken to be the number of elements along the relevant dimension. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"lbound#LBOUND\">LBOUND</a>, <a href=\"lcobound#LCOBOUND\">LCOBOUND</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/UBOUND.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/UBOUND.html</a>\n  </p>\n</div>\n","ucobound":"<h1 class=\"section\" id=\"UCOBOUND\">8.252 <code>UCOBOUND</code> — Upper codimension bounds of an array</h1> \n<dl> <dt>Description:</dt>\n<dd>Returns the upper cobounds of a coarray, or a single upper cobound along the <var>DIM</var> codimension. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 2008 and later </dd>\n<dt>Class:</dt>\n<dd>Inquiry function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = UCOBOUND(COARRAY [, DIM [, KIND]])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>ARRAY</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an coarray, of any type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>DIM</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Shall be a scalar <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>KIND</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) An <code>INTEGER</code> initialization expression indicating the kind parameter of the result. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> and of kind <var>KIND</var>. If <var>KIND</var> is absent, the return value is of default integer kind. If <var>DIM</var> is absent, the result is an array of the lower cobounds of <var>COARRAY</var>. If <var>DIM</var> is present, the result is a scalar corresponding to the lower cobound of the array along that codimension. </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"lcobound#LCOBOUND\">LCOBOUND</a>, <a href=\"lbound#LBOUND\">LBOUND</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/UCOBOUND.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/UCOBOUND.html</a>\n  </p>\n</div>\n","umask":"<h1 class=\"section\" id=\"UMASK\">8.253 <code>UMASK</code> — Set the file creation mask</h1> \n<dl> <dt>Description:</dt>\n<dd>Sets the file creation mask to <var>MASK</var>. If called as a function, it returns the old value. If called as a subroutine and argument <var>OLD</var> if it is supplied, it is set to the old value. See <code>umask(2)</code>. </dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine, function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>CALL UMASK(MASK [, OLD])</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>OLD = UMASK(MASK)</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>MASK</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be a scalar of type <code>INTEGER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>OLD</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Shall be a scalar of type <code>INTEGER</code>. </td>\n</tr>\n</table> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/UMASK.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/UMASK.html</a>\n  </p>\n</div>\n","unlink":"<h1 class=\"section\" id=\"UNLINK\">8.254 <code>UNLINK</code> — Remove a file from the file system</h1> \n<dl> <dt>Description:</dt>\n<dd>Unlinks the file <var>PATH</var>. A null character (<code>CHAR(0)</code>) can be used to mark the end of the name in <var>PATH</var>; otherwise, trailing blanks in the file name are ignored. If the <var>STATUS</var> argument is supplied, it contains 0 on success or a nonzero error code upon return; see <code>unlink(2)</code>. <p>This intrinsic is provided in both subroutine and function forms; however, only one form can be used in any given program unit. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Subroutine, function </dd>\n<dt>Syntax:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>CALL UNLINK(PATH [, STATUS])</code> </td></tr>\n<tr align=\"left\"><td valign=\"top\" width=\"80%\">\n<code>STATUS = UNLINK(PATH)</code> </td></tr>\n</table> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>PATH</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of default <code>CHARACTER</code> type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STATUS</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) Shall be of default <code>INTEGER</code> type. </td>\n</tr>\n</table> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"link#LINK\">LINK</a>, <a href=\"symlnk#SYMLNK\">SYMLNK</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/UNLINK.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/UNLINK.html</a>\n  </p>\n</div>\n","unpack":"<h1 class=\"section\" id=\"UNPACK\">8.255 <code>UNPACK</code> — Unpack an array of rank one into an array</h1> \n<dl> <dt>Description:</dt>\n<dd>Store the elements of <var>VECTOR</var> in an array of higher rank. </dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later </dd>\n<dt>Class:</dt>\n<dd>Transformational function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = UNPACK(VECTOR, MASK, FIELD)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>VECTOR</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an array of any type and rank one. It shall have at least as many elements as <var>MASK</var> has <code>TRUE</code> values. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>MASK</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be an array of type <code>LOGICAL</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>FIELD</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of the same type as <var>VECTOR</var> and have the same shape as <var>MASK</var>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The resulting array corresponds to <var>FIELD</var> with <code>TRUE</code> elements of <var>MASK</var> replaced by values from <var>VECTOR</var> in array element order. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_unpack\n  integer :: vector(2)  = (/1,1/)\n  logical :: mask(4)  = (/ .TRUE., .FALSE., .FALSE., .TRUE. /)\n  integer :: field(2,2) = 0, unity(2,2)\n\n  ! result: unity matrix\n  unity = unpack(vector, reshape(mask, (/2,2/)), field)\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"pack#PACK\">PACK</a>, <a href=\"spread#SPREAD\">SPREAD</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/UNPACK.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/UNPACK.html</a>\n  </p>\n</div>\n","verify":"<h1 class=\"section\" id=\"VERIFY\">8.256 <code>VERIFY</code> — Scan a string for characters not a given set</h1> \n<dl> <dt>Description:</dt>\n<dd>Verifies that all the characters in <var>STRING</var> belong to the set of characters in <var>SET</var>. <p>If <var>BACK</var> is either absent or equals <code>FALSE</code>, this function returns the position of the leftmost character of <var>STRING</var> that is not in <var>SET</var>. If <var>BACK</var> equals <code>TRUE</code>, the rightmost position is returned. If all characters of <var>STRING</var> are found in <var>SET</var>, the result is zero. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>Fortran 95 and later, with <var>KIND</var> argument Fortran 2003 and later </dd>\n<dt>Class:</dt>\n<dd>Elemental function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = VERIFY(STRING, SET[, BACK [, KIND]])</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>STRING</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>CHARACTER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>SET</var> </td>\n<td valign=\"top\" width=\"70%\">Shall be of type <code>CHARACTER</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>BACK</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) shall be of type <code>LOGICAL</code>. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>KIND</var> </td>\n<td valign=\"top\" width=\"70%\">(Optional) An <code>INTEGER</code> initialization expression indicating the kind parameter of the result. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return value is of type <code>INTEGER</code> and of kind <var>KIND</var>. If <var>KIND</var> is absent, the return value is of default integer kind. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_verify\n  WRITE(*,*) VERIFY(\"FORTRAN\", \"AO\")           ! 1, found 'F'\n  WRITE(*,*) VERIFY(\"FORTRAN\", \"FOO\")          ! 3, found 'R'\n  WRITE(*,*) VERIFY(\"FORTRAN\", \"C++\")          ! 1, found 'F'\n  WRITE(*,*) VERIFY(\"FORTRAN\", \"C++\", .TRUE.)  ! 7, found 'N'\n  WRITE(*,*) VERIFY(\"FORTRAN\", \"FORTRAN\")      ! 0' found none\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>\n<a href=\"scan#SCAN\">SCAN</a>, <a href=\"index-intrinsic#INDEX-intrinsic\">INDEX intrinsic</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/VERIFY.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/VERIFY.html</a>\n  </p>\n</div>\n","xor":"<h1 class=\"section\" id=\"XOR\">8.257 <code>XOR</code> — Bitwise logical exclusive OR</h1> \n<dl> <dt>Description:</dt>\n<dd>Bitwise logical exclusive or. <p>This intrinsic routine is provided for backwards compatibility with GNU Fortran 77. For integer arguments, programmers should consider the use of the <a href=\"ieor#IEOR\">IEOR</a> intrinsic and for logical arguments the <code>.NEQV.</code> operator, which are both defined by the Fortran standard. </p>\n</dd>\n<dt>Standard:</dt>\n<dd>GNU extension </dd>\n<dt>Class:</dt>\n<dd>Function </dd>\n<dt>Syntax:</dt>\n<dd>\n<code>RESULT = XOR(I, J)</code> </dd>\n<dt>Arguments:</dt>\n<dd> \n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>I</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be either a scalar <code>INTEGER</code> type or a scalar <code>LOGICAL</code> type. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<var>J</var> </td>\n<td valign=\"top\" width=\"70%\">The type shall be the same as the type of <var>I</var>. </td>\n</tr>\n</table> </dd>\n<dt>Return value:</dt>\n<dd>The return type is either a scalar <code>INTEGER</code> or a scalar <code>LOGICAL</code>. If the kind type parameters differ, then the smaller kind type is implicitly converted to larger kind, and the return has the larger kind. </dd>\n<dt>Example:</dt>\n<dd> <pre class=\"smallexample\">PROGRAM test_xor\n  LOGICAL :: T = .TRUE., F = .FALSE.\n  INTEGER :: a, b\n  DATA a / Z'F' /, b / Z'3' /\n\n  WRITE (*,*) XOR(T, T), XOR(T, F), XOR(F, T), XOR(F, F)\n  WRITE (*,*) XOR(a, b)\nEND PROGRAM</pre> </dd>\n<dt>See also:</dt>\n<dd>Fortran 95 elemental function: <a href=\"ieor#IEOR\">IEOR</a> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/XOR.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/XOR.html</a>\n  </p>\n</div>\n","intrinsic-modules":"<h1 class=\"chapter\" id=\"Intrinsic-Modules\">9 Intrinsic Modules</h1> \n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"iso_005ffortran_005fenv#ISO_005fFORTRAN_005fENV\">ISO_FORTRAN_ENV</a> </li>\n<li>\n<a accesskey=\"2\" href=\"iso_005fc_005fbinding#ISO_005fC_005fBINDING\">ISO_C_BINDING</a> </li>\n<li>\n<a accesskey=\"3\" href=\"openmp-modules-omp_005flib-and-omp_005flib_005fkinds#OpenMP-Modules-OMP_005fLIB-and-OMP_005fLIB_005fKINDS\">OpenMP Modules OMP_LIB and OMP_LIB_KINDS</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Intrinsic-Modules.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/Intrinsic-Modules.html</a>\n  </p>\n</div>\n","iso_005ffortran_005fenv":"<h1 class=\"section\" id=\"ISO_005fFORTRAN_005fENV\">9.1 <code>ISO_FORTRAN_ENV</code>\n</h1> <dl> <dt>Standard:</dt>\n<dd>Fortran 2003 and later, except when otherwise noted </dd>\n</dl> <p>The <code>ISO_FORTRAN_ENV</code> module provides the following scalar default-integer named constants: </p>\n<dl> <dt>\n<code>ATOMIC_INT_KIND</code>:</dt>\n<dd>Default-kind integer constant to be used as kind parameter when defining integer variables used in atomic operations. (Fortran 2008 or later.) </dd>\n<dt>\n<code>ATOMIC_LOGICAL_KIND</code>:</dt>\n<dd>Default-kind integer constant to be used as kind parameter when defining logical variables used in atomic operations. (Fortran 2008 or later.) </dd>\n<dt>\n<code>CHARACTER_KINDS</code>:</dt>\n<dd>Default-kind integer constant array of rank one containing the supported kind parameters of the <code>CHARACTER</code> type. (Fortran 2008 or later.) </dd>\n<dt>\n<code>CHARACTER_STORAGE_SIZE</code>:</dt>\n<dd>Size in bits of the character storage unit. </dd>\n<dt>\n<code>ERROR_UNIT</code>:</dt>\n<dd>Identifies the preconnected unit used for error reporting. </dd>\n<dt>\n<code>FILE_STORAGE_SIZE</code>:</dt>\n<dd>Size in bits of the file-storage unit. </dd>\n<dt>\n<code>INPUT_UNIT</code>:</dt>\n<dd>Identifies the preconnected unit identified by the asterisk (<code>*</code>) in <code>READ</code> statement. </dd>\n<dt>\n<code>INT8</code>, <code>INT16</code>, <code>INT32</code>, <code>INT64</code>:</dt>\n<dd>Kind type parameters to specify an INTEGER type with a storage size of 16, 32, and 64 bits. It is negative if a target platform does not support the particular kind. (Fortran 2008 or later.) </dd>\n<dt>\n<code>INTEGER_KINDS</code>:</dt>\n<dd>Default-kind integer constant array of rank one containing the supported kind parameters of the <code>INTEGER</code> type. (Fortran 2008 or later.) </dd>\n<dt>\n<code>IOSTAT_END</code>:</dt>\n<dd>The value assigned to the variable passed to the <code>IOSTAT=</code> specifier of an input/output statement if an end-of-file condition occurred. </dd>\n<dt>\n<code>IOSTAT_EOR</code>:</dt>\n<dd>The value assigned to the variable passed to the <code>IOSTAT=</code> specifier of an input/output statement if an end-of-record condition occurred. </dd>\n<dt>\n<code>IOSTAT_INQUIRE_INTERNAL_UNIT</code>:</dt>\n<dd>Scalar default-integer constant, used by <code>INQUIRE</code> for the <code>IOSTAT=</code> specifier to denote an that a unit number identifies an internal unit. (Fortran 2008 or later.) </dd>\n<dt>\n<code>NUMERIC_STORAGE_SIZE</code>:</dt>\n<dd>The size in bits of the numeric storage unit. </dd>\n<dt>\n<code>LOGICAL_KINDS</code>:</dt>\n<dd>Default-kind integer constant array of rank one containing the supported kind parameters of the <code>LOGICAL</code> type. (Fortran 2008 or later.) </dd>\n<dt>\n<code>OUTPUT_UNIT</code>:</dt>\n<dd>Identifies the preconnected unit identified by the asterisk (<code>*</code>) in <code>WRITE</code> statement. </dd>\n<dt>\n<code>REAL32</code>, <code>REAL64</code>, <code>REAL128</code>:</dt>\n<dd>Kind type parameters to specify a REAL type with a storage size of 32, 64, and 128 bits. It is negative if a target platform does not support the particular kind. (Fortran 2008 or later.) </dd>\n<dt>\n<code>REAL_KINDS</code>:</dt>\n<dd>Default-kind integer constant array of rank one containing the supported kind parameters of the <code>REAL</code> type. (Fortran 2008 or later.) </dd>\n<dt>\n<code>STAT_LOCKED</code>:</dt>\n<dd>Scalar default-integer constant used as STAT= return value by <code>LOCK</code> to denote that the lock variable is locked by the executing image. (Fortran 2008 or later.) </dd>\n<dt>\n<code>STAT_LOCKED_OTHER_IMAGE</code>:</dt>\n<dd>Scalar default-integer constant used as STAT= return value by <code>UNLOCK</code> to denote that the lock variable is locked by another image. (Fortran 2008 or later.) </dd>\n<dt>\n<code>STAT_STOPPED_IMAGE</code>:</dt>\n<dd>Positive, scalar default-integer constant used as STAT= return value if the argument in the statement requires synchronisation with an image, which has initiated the termination of the execution. (Fortran 2008 or later.) </dd>\n<dt>\n<code>STAT_UNLOCKED</code>:</dt>\n<dd>Scalar default-integer constant used as STAT= return value by <code>UNLOCK</code> to denote that the lock variable is unlocked. (Fortran 2008 or later.) </dd>\n</dl> <p>The module provides the following derived type: </p>\n<dl> <dt>\n<code>LOCK_TYPE</code>:</dt>\n<dd>Derived type with private components to be use with the <code>LOCK</code> and <code>UNLOCK</code> statement. A variable of its type has to be always declared as coarray and may not appear in a variable-definition context. (Fortran 2008 or later.) </dd>\n</dl> <p>The module also provides the following intrinsic procedures: <a href=\"compiler_005foptions#COMPILER_005fOPTIONS\">COMPILER_OPTIONS</a> and <a href=\"compiler_005fversion#COMPILER_005fVERSION\">COMPILER_VERSION</a>. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ISO_005fFORTRAN_005fENV.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ISO_005fFORTRAN_005fENV.html</a>\n  </p>\n</div>\n","iso_005fc_005fbinding":"<h1 class=\"section\" id=\"ISO_005fC_005fBINDING\">9.2 <code>ISO_C_BINDING</code>\n</h1> <dl> <dt>Standard:</dt>\n<dd>Fortran 2003 and later, GNU extensions </dd>\n</dl> <p>The following intrinsic procedures are provided by the module; their definition can be found in the section Intrinsic Procedures of this manual. </p>\n<dl> <dt>\n<code>C_ASSOCIATED</code><dt>\n<code>C_F_POINTER</code><dt>\n<code>C_F_PROCPOINTER</code><dt>\n<code>C_FUNLOC</code><dt>\n<code>C_LOC</code><dt><code>C_SIZEOF</code></dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n\n</dl>   <p>The <code>ISO_C_BINDING</code> module provides the following named constants of type default integer, which can be used as KIND type parameters. </p>\n<p>In addition to the integer named constants required by the Fortran 2003 standard and <code>C_PTRDIFF_T</code> of TS 29113, GNU Fortran provides as an extension named constants for the 128-bit integer types supported by the C compiler: <code>C_INT128_T, C_INT_LEAST128_T, C_INT_FAST128_T</code>. Furthermore, if <code>__float128</code> is supported in C, the named constants <code>C_FLOAT128, C_FLOAT128_COMPLEX</code> are defined. </p>\n\n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">Fortran Type </td>\n<td valign=\"top\" width=\"35%\">Named constant </td>\n<td valign=\"top\" width=\"35%\">C type </td>\n<td valign=\"top\" width=\"35%\">Extension </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><code>INTEGER</code></td>\n<td valign=\"top\" width=\"35%\">\n<code>C_INT</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>int</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><code>INTEGER</code></td>\n<td valign=\"top\" width=\"35%\">\n<code>C_SHORT</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>short int</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><code>INTEGER</code></td>\n<td valign=\"top\" width=\"35%\">\n<code>C_LONG</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>long int</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><code>INTEGER</code></td>\n<td valign=\"top\" width=\"35%\">\n<code>C_LONG_LONG</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>long long int</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><code>INTEGER</code></td>\n<td valign=\"top\" width=\"35%\">\n<code>C_SIGNED_CHAR</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>signed char</code>/<code>unsigned char</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><code>INTEGER</code></td>\n<td valign=\"top\" width=\"35%\">\n<code>C_SIZE_T</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>size_t</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><code>INTEGER</code></td>\n<td valign=\"top\" width=\"35%\">\n<code>C_INT8_T</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>int8_t</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><code>INTEGER</code></td>\n<td valign=\"top\" width=\"35%\">\n<code>C_INT16_T</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>int16_t</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><code>INTEGER</code></td>\n<td valign=\"top\" width=\"35%\">\n<code>C_INT32_T</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>int32_t</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><code>INTEGER</code></td>\n<td valign=\"top\" width=\"35%\">\n<code>C_INT64_T</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>int64_t</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><code>INTEGER</code></td>\n<td valign=\"top\" width=\"35%\">\n<code>C_INT128_T</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>int128_t</code> </td>\n<td valign=\"top\" width=\"35%\">Ext. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><code>INTEGER</code></td>\n<td valign=\"top\" width=\"35%\">\n<code>C_INT_LEAST8_T</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>int_least8_t</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><code>INTEGER</code></td>\n<td valign=\"top\" width=\"35%\">\n<code>C_INT_LEAST16_T</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>int_least16_t</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><code>INTEGER</code></td>\n<td valign=\"top\" width=\"35%\">\n<code>C_INT_LEAST32_T</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>int_least32_t</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><code>INTEGER</code></td>\n<td valign=\"top\" width=\"35%\">\n<code>C_INT_LEAST64_T</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>int_least64_t</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><code>INTEGER</code></td>\n<td valign=\"top\" width=\"35%\"><code>C_INT_LEAST128_T</code></td>\n<td valign=\"top\" width=\"35%\">\n<code>int_least128_t</code> </td>\n<td valign=\"top\" width=\"35%\">Ext. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><code>INTEGER</code></td>\n<td valign=\"top\" width=\"35%\">\n<code>C_INT_FAST8_T</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>int_fast8_t</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><code>INTEGER</code></td>\n<td valign=\"top\" width=\"35%\">\n<code>C_INT_FAST16_T</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>int_fast16_t</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><code>INTEGER</code></td>\n<td valign=\"top\" width=\"35%\">\n<code>C_INT_FAST32_T</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>int_fast32_t</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><code>INTEGER</code></td>\n<td valign=\"top\" width=\"35%\">\n<code>C_INT_FAST64_T</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>int_fast64_t</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><code>INTEGER</code></td>\n<td valign=\"top\" width=\"35%\">\n<code>C_INT_FAST128_T</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>int_fast128_t</code> </td>\n<td valign=\"top\" width=\"35%\">Ext. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><code>INTEGER</code></td>\n<td valign=\"top\" width=\"35%\">\n<code>C_INTMAX_T</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>intmax_t</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><code>INTEGER</code></td>\n<td valign=\"top\" width=\"35%\">\n<code>C_INTPTR_T</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>intptr_t</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><code>INTEGER</code></td>\n<td valign=\"top\" width=\"35%\">\n<code>C_PTRDIFF_T</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>intptr_t</code> </td>\n<td valign=\"top\" width=\"35%\">TS 29113 </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<code>REAL</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>C_FLOAT</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>float</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<code>REAL</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>C_DOUBLE</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>double</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<code>REAL</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>C_LONG_DOUBLE</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>long double</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<code>REAL</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>C_FLOAT128</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>__float128</code> </td>\n<td valign=\"top\" width=\"35%\">Ext. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><code>COMPLEX</code></td>\n<td valign=\"top\" width=\"35%\">\n<code>C_FLOAT_COMPLEX</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>float _Complex</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><code>COMPLEX</code></td>\n<td valign=\"top\" width=\"35%\"><code>C_DOUBLE_COMPLEX</code></td>\n<td valign=\"top\" width=\"35%\">\n<code>double _Complex</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><code>COMPLEX</code></td>\n<td valign=\"top\" width=\"35%\"><code>C_LONG_DOUBLE_COMPLEX</code></td>\n<td valign=\"top\" width=\"35%\">\n<code>long double _Complex</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\">\n<code>REAL</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>C_FLOAT128_COMPLEX</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>__float128 _Complex</code> </td>\n<td valign=\"top\" width=\"35%\">Ext. </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><code>LOGICAL</code></td>\n<td valign=\"top\" width=\"35%\">\n<code>C_BOOL</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>_Bool</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"15%\"><code>CHARACTER</code></td>\n<td valign=\"top\" width=\"35%\">\n<code>C_CHAR</code> </td>\n<td valign=\"top\" width=\"35%\">\n<code>char</code> </td>\n</tr>\n</table> <p>Additionally, the following parameters of type <code>CHARACTER(KIND=C_CHAR)</code> are defined. </p>\n\n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"45%\">C definition </td>\n<td valign=\"top\" width=\"15%\">Value </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>C_NULL_CHAR</code> </td>\n<td valign=\"top\" width=\"45%\">null character </td>\n<td valign=\"top\" width=\"15%\">\n<code>'\\0'</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>C_ALERT</code> </td>\n<td valign=\"top\" width=\"45%\">alert </td>\n<td valign=\"top\" width=\"15%\">\n<code>'\\a'</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>C_BACKSPACE</code> </td>\n<td valign=\"top\" width=\"45%\">backspace </td>\n<td valign=\"top\" width=\"15%\">\n<code>'\\b'</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>C_FORM_FEED</code> </td>\n<td valign=\"top\" width=\"45%\">form feed </td>\n<td valign=\"top\" width=\"15%\">\n<code>'\\f'</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>C_NEW_LINE</code> </td>\n<td valign=\"top\" width=\"45%\">new line </td>\n<td valign=\"top\" width=\"15%\">\n<code>'\\n'</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>C_CARRIAGE_RETURN</code> </td>\n<td valign=\"top\" width=\"45%\">carriage return </td>\n<td valign=\"top\" width=\"15%\">\n<code>'\\r'</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>C_HORIZONTAL_TAB</code> </td>\n<td valign=\"top\" width=\"45%\">horizontal tab </td>\n<td valign=\"top\" width=\"15%\">\n<code>'\\t'</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>C_VERTICAL_TAB</code> </td>\n<td valign=\"top\" width=\"45%\">vertical tab </td>\n<td valign=\"top\" width=\"15%\">\n<code>'\\v'</code> </td>\n</tr>\n</table> <p>Moreover, the following two named constants are defined: </p>\n\n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">Name </td>\n<td valign=\"top\" width=\"80%\">Type </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>C_NULL_PTR</code> </td>\n<td valign=\"top\" width=\"80%\">\n<code>C_PTR</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\" width=\"20%\">\n<code>C_NULL_FUNPTR</code> </td>\n<td valign=\"top\" width=\"80%\">\n<code>C_FUNPTR</code> </td>\n</tr>\n</table> <p>Both are equivalent to the value <code>NULL</code> in C. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ISO_005fC_005fBINDING.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/ISO_005fC_005fBINDING.html</a>\n  </p>\n</div>\n","openmp-modules-omp_005flib-and-omp_005flib_005fkinds":"<h1 class=\"section\" id=\"OpenMP-Modules-OMP_005fLIB-and-OMP_005fLIB_005fKINDS\">9.3 OpenMP Modules <code>OMP_LIB</code> and <code>OMP_LIB_KINDS</code>\n</h1> <dl> <dt>Standard:</dt>\n<dd>OpenMP Application Program Interface v4.0 </dd>\n</dl> <p>The OpenMP Fortran runtime library routines are provided both in a form of two Fortran 90 modules, named <code>OMP_LIB</code> and <code>OMP_LIB_KINDS</code>, and in a form of a Fortran <code>include</code> file named <code>omp_lib.h</code>. The procedures provided by <code>OMP_LIB</code> can be found in the <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/libgomp/index.html#Top\">Introduction</a> manual, the named constants defined in the modules are listed below. </p>\n<p>For details refer to the actual <a href=\"http://www.openmp.org/mp-documents/OpenMP4.0.0.pdf\">OpenMP Application Program Interface v4.0</a>. </p>\n<p><code>OMP_LIB_KINDS</code> provides the following scalar default-integer named constants: </p>\n<dl> <dt>\n<code>omp_lock_kind</code><dt>\n<code>omp_nest_lock_kind</code><dt>\n<code>omp_proc_bind_kind</code><dt><code>omp_sched_kind</code></dt>\n</dt>\n</dt>\n</dt>\n\n</dl> <p><code>OMP_LIB</code> provides the scalar default-integer named constant <code>openmp_version</code> with a value of the form <var>yyyymm</var>, where <code>yyyy</code> is the year and <var>mm</var> the month of the OpenMP version; for OpenMP v4.0 the value is <code>201307</code>. </p>\n<p>The following scalar integer named constants of the kind <code>omp_sched_kind</code>: </p>\n<dl> <dt>\n<code>omp_sched_static</code><dt>\n<code>omp_sched_dynamic</code><dt>\n<code>omp_sched_guided</code><dt><code>omp_sched_auto</code></dt>\n</dt>\n</dt>\n</dt>\n\n</dl> <p>And the following scalar integer named constants of the kind <code>omp_proc_bind_kind</code>: </p>\n<dl> <dt>\n<code>omp_proc_bind_false</code><dt>\n<code>omp_proc_bind_true</code><dt>\n<code>omp_proc_bind_master</code><dt>\n<code>omp_proc_bind_close</code><dt><code>omp_proc_bind_spread</code></dt>\n</dt>\n</dt>\n</dt>\n</dt>\n\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/OpenMP-Modules-OMP_005fLIB-and-OMP_005fLIB_005fKINDS.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gfortran/OpenMP-Modules-OMP_005fLIB-and-OMP_005fLIB_005fKINDS.html</a>\n  </p>\n</div>\n"}