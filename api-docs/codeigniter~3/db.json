{"index":"<h1 id=\"codeigniter-user-guide\">CodeIgniter User Guide</h1> <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/license.html\">License Agreement</a></li> <li><a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/changelog.html\">Change Log</a></li> </ul>  <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#welcome\" id=\"id1\">Welcome</a></li> <li><a class=\"reference internal\" href=\"#basic-info\" id=\"id2\">Basic Info</a></li> <li><a class=\"reference internal\" href=\"#installation\" id=\"id3\">Installation</a></li> <li><a class=\"reference internal\" href=\"#introduction\" id=\"id4\">Introduction</a></li> <li><a class=\"reference internal\" href=\"#tutorial\" id=\"id5\">Tutorial</a></li> <li><a class=\"reference internal\" href=\"#contributing-to-codeigniter\" id=\"id6\">Contributing to CodeIgniter</a></li> <li><a class=\"reference internal\" href=\"#general-topics\" id=\"id7\">General Topics</a></li> <li><a class=\"reference internal\" href=\"#library-reference\" id=\"id8\">Library Reference</a></li> <li><a class=\"reference internal\" href=\"#database-reference\" id=\"id9\">Database Reference</a></li> <li><a class=\"reference internal\" href=\"#helper-reference\" id=\"id10\">Helper Reference</a></li> </ul>   <h2 id=\"welcome\">Welcome</h2>  <ul> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/general/welcome.html\">Welcome to CodeIgniter</a> </li> </ul>    <h2 id=\"basic-info\">Basic Info</h2> <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/general/requirements.html\">Server Requirements</a></li> <li><a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/general/credits.html\">Credits</a></li> </ul>   <h2 id=\"installation\">Installation</h2>  <ul> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"installation/index\">Installation Instructions</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"installation/downloads\">Downloading CodeIgniter</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"installation/index\">Installation Instructions</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"installation/upgrading\">Upgrading From a Previous Version</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"installation/troubleshooting\">Troubleshooting</a></li> </ul> </li> </ul>    <h2 id=\"introduction\">Introduction</h2>  <ul> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"overview/index\">CodeIgniter Overview</a><ul> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"overview/getting_started\">Getting Started</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"overview/at_a_glance\">CodeIgniter at a Glance</a> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"overview/features\">Supported Features</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"overview/appflow\">Application Flow Chart</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"overview/mvc\">Model-View-Controller</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"overview/goals\">Architectural Goals</a></li> </ul> </li> </ul>    <h2 id=\"tutorial\">Tutorial</h2>  <ul> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"tutorial/index\">Tutorial</a><ul> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"tutorial/static_pages\">Static pages</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"tutorial/news_section\">News section</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"tutorial/create_news_items\">Create news items</a> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"tutorial/conclusion\">Conclusion</a></li> </ul> </li> </ul>    <h2 id=\"contributing-to-codeigniter\">Contributing to CodeIgniter</h2>  <ul> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/contributing/index.html\">Contributing to CodeIgniter</a><ul> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/documentation/index.html\">Writing CodeIgniter Documentation</a> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/DCO.html\">Developer’s Certificate of Origin 1.1</a></li> </ul> </li> </ul>    <h2 id=\"general-topics\">General Topics</h2>  <ul> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"general/index\">General Topics</a><ul> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"general/urls\">CodeIgniter URLs</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"general/controllers\">Controllers</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"general/reserved_names\">Reserved Names</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"general/views\">Views</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"general/models\">Models</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"general/helpers\">Helpers</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"general/libraries\">Using CodeIgniter Libraries</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"general/creating_libraries\">Creating Libraries</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"general/drivers\">Using CodeIgniter Drivers</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"general/creating_drivers\">Creating Drivers</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"general/core_classes\">Creating Core System Classes</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"general/ancillary_classes\">Creating Ancillary Classes</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"general/hooks\">Hooks - Extending the Framework Core</a> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"general/autoloader\">Auto-loading Resources</a></li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"general/common_functions\">Common Functions</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"general/compatibility_functions\">Compatibility Functions</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"general/routing\">URI Routing</a> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"general/errors\">Error Handling</a></li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"general/caching\">Caching</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"general/profiling\">Profiling Your Application</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"general/cli\">Running via the CLI</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"general/managing_apps\">Managing your Applications</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"general/environments\">Handling Multiple Environments</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"general/alternative_php\">Alternate PHP Syntax for View Files</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"general/security\">Security</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"general/styleguide\">PHP Style Guide</a> </li> </ul> </li> </ul>    <h2 id=\"library-reference\">Library Reference</h2>  <ul> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/libraries/index.html\">Libraries</a><ul> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"libraries/benchmark\">Benchmarking Class</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"libraries/caching\">Caching Driver</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"libraries/calendar\">Calendaring Class</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"libraries/cart\">Shopping Cart Class</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"libraries/config\">Config Class</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"libraries/email\">Email Class</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"libraries/encrypt\">Encrypt Class</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"libraries/encryption\">Encryption Library</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"libraries/file_uploading\">File Uploading Class</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"libraries/form_validation\">Form Validation</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"libraries/ftp\">FTP Class</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"libraries/image_lib\">Image Manipulation Class</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"libraries/input\">Input Class</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"libraries/javascript\">Javascript Class</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"libraries/language\">Language Class</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"libraries/loader\">Loader Class</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"libraries/migration\">Migrations Class</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"libraries/output\">Output Class</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"libraries/pagination\">Pagination Class</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"libraries/parser\">Template Parser Class</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"libraries/security\">Security Class</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"libraries/sessions\">Session Library</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"libraries/table\">HTML Table Class</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"libraries/trackback\">Trackback Class</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"libraries/typography\">Typography Class</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"libraries/unit_testing\">Unit Testing Class</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"libraries/uri\">URI Class</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"libraries/user_agent\">User Agent Class</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"libraries/xmlrpc\">XML-RPC and XML-RPC Server Classes</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"libraries/zip\">Zip Encoding Class</a> </li> </ul> </li> </ul>    <h2 id=\"database-reference\">Database Reference</h2>  <ul> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"database/index\">Database Reference</a><ul> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"database/examples\">Quick Start: Usage Examples</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"database/configuration\">Database Configuration</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"database/connecting\">Connecting to a Database</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"database/queries\">Running Queries</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"database/results\">Generating Query Results</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"database/helpers\">Query Helper Functions</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"database/query_builder\">Query Builder Class</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"database/transactions\">Transactions</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"database/metadata\">Getting MetaData</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"database/call_function\">Custom Function Calls</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"database/caching\">Query Caching</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"database/forge\">Database Manipulation with Database Forge</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"database/utilities\">Database Utilities Class</a> </li> <li class=\"toctree-l2\"><a class=\"reference internal\" href=\"database/db_driver_reference\">Database Driver Reference</a></li> </ul> </li> </ul>    <h2 id=\"helper-reference\">Helper Reference</h2>  <ul> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/helpers/index.html\">Helpers</a><ul> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"helpers/array_helper\">Array Helper</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"helpers/captcha_helper\">CAPTCHA Helper</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"helpers/cookie_helper\">Cookie Helper</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"helpers/date_helper\">Date Helper</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"helpers/directory_helper\">Directory Helper</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"helpers/download_helper\">Download Helper</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"helpers/email_helper\">Email Helper</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"helpers/file_helper\">File Helper</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"helpers/form_helper\">Form Helper</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"helpers/html_helper\">HTML Helper</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"helpers/inflector_helper\">Inflector Helper</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"helpers/language_helper\">Language Helper</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"helpers/number_helper\">Number Helper</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"helpers/path_helper\">Path Helper</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"helpers/security_helper\">Security Helper</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"helpers/smiley_helper\">Smiley Helper</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"helpers/string_helper\">String Helper</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"helpers/text_helper\">Text Helper</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"helpers/typography_helper\">Typography Helper</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"helpers/url_helper\">URL Helper</a> </li> <li class=\"toctree-l2\">\n<a class=\"reference internal\" href=\"helpers/xml_helper\">XML Helper</a> </li> </ul> </li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/index.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/index.html</a>\n  </p>\n</div>\n","installation/index":"<h1 id=\"installation-instructions\">Installation Instructions</h1> <p>CodeIgniter is installed in four steps:</p> <ol class=\"arabic simple\"> <li>Unzip the package.</li> <li>Upload the CodeIgniter folders and files to your server. Normally the <em>index.php</em> file will be at your root.</li> <li>Open the <em>application/config/config.php</em> file with a text editor and set your base URL. If you intend to use encryption or sessions, set your encryption key.</li> <li>If you intend to use a database, open the <em>application/config/database.php</em> file with a text editor and set your database settings.</li> </ol> <p>If you wish to increase security by hiding the location of your CodeIgniter files you can rename the system and application folders to something more private. If you do rename them, you must open your main <em>index.php</em> file and set the <code>$system_path</code> and <code>$application_folder</code> variables at the top of the file with the new name you’ve chosen.</p> <p>For the best security, both the system and any application folders should be placed above web root so that they are not directly accessible via a browser. By default, <em>.htaccess</em> files are included in each folder to help prevent direct access, but it is best to remove them from public access entirely in case the web server configuration changes or doesn’t abide by the <em>.htaccess</em>.</p> <p>If you would like to keep your views public it is also possible to move the views folder out of your application folder.</p> <p>After moving them, open your main index.php file and set the <code>$system_path</code>, <code>$application_folder</code> and <code>$view_folder</code> variables, preferably with a full path, e.g. ‘<em>/www/MyUser/system</em>‘.</p> <p>One additional measure to take in production environments is to disable PHP error reporting and any other development-only functionality. In CodeIgniter, this can be done by setting the <code>ENVIRONMENT</code> constant, which is more fully described on the <a class=\"reference internal\" href=\"../general/security\">security page</a>.</p> <p>That’s it!</p> <p>If you’re new to CodeIgniter, please read the <a class=\"reference internal\" href=\"../overview/getting_started\">Getting Started</a> section of the User Guide to begin learning how to build dynamic PHP applications. Enjoy!</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/installation/index.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/installation/index.html</a>\n  </p>\n</div>\n","installation/troubleshooting":"<h1 id=\"troubleshooting\">Troubleshooting</h1> <p>If you find that no matter what you put in your URL only your default page is loading, it might be that your server does not support the REQUEST_URI variable needed to serve search-engine friendly URLs. As a first step, open your <em>application/config/config.php</em> file and look for the URI Protocol information. It will recommend that you try a couple alternate settings. If it still doesn’t work after you’ve tried this you’ll need to force CodeIgniter to add a question mark to your URLs. To do this open your <em>application/config/config.php</em> file and change this:</p> <pre data-language=\"php\">$config['index_page'] = \"index.php\";\n</pre> <p>To this:</p> <pre data-language=\"php\">$config['index_page'] = \"index.php?\";\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/installation/troubleshooting.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/installation/troubleshooting.html</a>\n  </p>\n</div>\n","overview/getting_started":"<h1 id=\"getting-started-with-codeigniter\">Getting Started With CodeIgniter</h1> <p>Any software application requires some effort to learn. We’ve done our best to minimize the learning curve while making the process as enjoyable as possible.</p> <p>The first step is to <a class=\"reference internal\" href=\"../installation/index\">install</a> CodeIgniter, then read all the topics in the <strong>Introduction</strong> section of the Table of Contents.</p> <p>Next, read each of the <strong>General Topics</strong> pages in order. Each topic builds on the previous one, and includes code examples that you are encouraged to try.</p> <p>Once you understand the basics you’ll be ready to explore the <strong>Class Reference</strong> and <strong>Helper Reference</strong> pages to learn to utilize the native libraries and helper files.</p> <p>Feel free to take advantage of our <a class=\"reference external\" href=\"http://forum.codeigniter.com/\">Community Forums</a> if you have questions or problems, and our <a class=\"reference external\" href=\"https://github.com/bcit-ci/CodeIgniter/wiki\">Wiki</a> to see code examples posted by other users.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/overview/getting_started.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/overview/getting_started.html</a>\n  </p>\n</div>\n","overview/features":"<h1 id=\"codeigniter-features\">CodeIgniter Features</h1> <p>Features in and of themselves are a very poor way to judge an application since they tell you nothing about the user experience, or how intuitively or intelligently it is designed. Features don’t reveal anything about the quality of the code, or the performance, or the attention to detail, or security practices. The only way to really judge an app is to try it and get to know the code. <a class=\"reference internal\" href=\"../installation/index\">Installing</a> CodeIgniter is child’s play so we encourage you to do just that. In the mean time here’s a list of CodeIgniter’s main features.</p> <ul class=\"simple\"> <li>Model-View-Controller Based System</li> <li>Extremely Light Weight</li> <li>Full Featured database classes with support for several platforms.</li> <li>Query Builder Database Support</li> <li>Form and Data Validation</li> <li>Security and XSS Filtering</li> <li>Session Management</li> <li>Email Sending Class. Supports Attachments, HTML/Text email, multiple protocols (sendmail, SMTP, and Mail) and more.</li> <li>Image Manipulation Library (cropping, resizing, rotating, etc.). Supports GD, ImageMagick, and NetPBM</li> <li>File Uploading Class</li> <li>FTP Class</li> <li>Localization</li> <li>Pagination</li> <li>Data Encryption</li> <li>Benchmarking</li> <li>Full Page Caching</li> <li>Error Logging</li> <li>Application Profiling</li> <li>Calendaring Class</li> <li>User Agent Class</li> <li>Zip Encoding Class</li> <li>Template Engine Class</li> <li>Trackback Class</li> <li>XML-RPC Library</li> <li>Unit Testing Class</li> <li>Search-engine Friendly URLs</li> <li>Flexible URI Routing</li> <li>Support for Hooks and Class Extensions</li> <li>Large library of “helper” functions</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/overview/features.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/overview/features.html</a>\n  </p>\n</div>\n","overview/appflow":"<h1 id=\"application-flow-chart\">Application Flow Chart</h1> <p>The following graphic illustrates how data flows throughout the system:</p> <p><img alt=\"CodeIgniter application flow\" src=\"https://www.codeigniter.com/user_guide/_images/appflowchart.gif\"></p> <ol class=\"arabic simple\"> <li>The index.php serves as the front controller, initializing the base resources needed to run CodeIgniter.</li> <li>The Router examines the HTTP request to determine what should be done with it.</li> <li>If a cache file exists, it is sent directly to the browser, bypassing the normal system execution.</li> <li>Security. Before the application controller is loaded, the HTTP request and any user submitted data is filtered for security.</li> <li>The Controller loads the model, core libraries, helpers, and any other resources needed to process the specific request.</li> <li>The finalized View is rendered then sent to the web browser to be seen. If caching is enabled, the view is cached first so that on subsequent requests it can be served.</li> </ol><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/overview/appflow.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/overview/appflow.html</a>\n  </p>\n</div>\n","overview/goals":"<h1 id=\"design-and-architectural-goals\">Design and Architectural Goals</h1> <p>Our goal for CodeIgniter is maximum performance, capability, and flexibility in the smallest, lightest possible package.</p> <p>To meet this goal we are committed to benchmarking, re-factoring, and simplifying at every step of the development process, rejecting anything that doesn’t further the stated objective.</p> <p>From a technical and architectural standpoint, CodeIgniter was created with the following objectives:</p> <ul class=\"simple\"> <li>\n<strong>Dynamic Instantiation.</strong> In CodeIgniter, components are loaded and routines executed only when requested, rather than globally. No assumptions are made by the system regarding what may be needed beyond the minimal core resources, so the system is very light-weight by default. The events, as triggered by the HTTP request, and the controllers and views you design will determine what is invoked.</li> <li>\n<strong>Loose Coupling.</strong> Coupling is the degree to which components of a system rely on each other. The less components depend on each other the more reusable and flexible the system becomes. Our goal was a very loosely coupled system.</li> <li>\n<strong>Component Singularity.</strong> Singularity is the degree to which components have a narrowly focused purpose. In CodeIgniter, each class and its functions are highly autonomous in order to allow maximum usefulness.</li> </ul> <p>CodeIgniter is a dynamically instantiated, loosely coupled system with high component singularity. It strives for simplicity, flexibility, and high performance in a small footprint package.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/overview/goals.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/overview/goals.html</a>\n  </p>\n</div>\n","installation/downloads":"<h1 id=\"downloading-codeigniter\">Downloading CodeIgniter</h1> <ul class=\"simple\"> <li><a class=\"reference external\" href=\"https://codeload.github.com/bcit-ci/CodeIgniter/zip/3.1.0\">CodeIgniter v3.1.0 (Current version)</a></li> <li><a class=\"reference external\" href=\"https://codeload.github.com/bcit-ci/CodeIgniter/zip/3.0.6\">CodeIgniter v3.0.6</a></li> <li><a class=\"reference external\" href=\"https://codeload.github.com/bcit-ci/CodeIgniter/zip/3.0.5\">CodeIgniter v3.0.5</a></li> <li><a class=\"reference external\" href=\"https://codeload.github.com/bcit-ci/CodeIgniter/zip/3.0.4\">CodeIgniter v3.0.4</a></li> <li><a class=\"reference external\" href=\"https://codeload.github.com/bcit-ci/CodeIgniter/zip/3.0.3\">CodeIgniter v3.0.3</a></li> <li><a class=\"reference external\" href=\"https://codeload.github.com/bcit-ci/CodeIgniter/zip/3.0.2\">CodeIgniter v3.0.2</a></li> <li><a class=\"reference external\" href=\"https://codeload.github.com/bcit-ci/CodeIgniter/zip/3.0.1\">CodeIgniter v3.0.1</a></li> <li><a class=\"reference external\" href=\"https://codeload.github.com/bcit-ci/CodeIgniter/zip/3.0.0\">CodeIgniter v3.0.0</a></li> <li><a class=\"reference external\" href=\"https://codeload.github.com/bcit-ci/CodeIgniter/zip/2.2.3\">CodeIgniter v2.2.3</a></li> <li><a class=\"reference external\" href=\"https://codeload.github.com/bcit-ci/CodeIgniter/zip/2.2.2\">CodeIgniter v2.2.2</a></li> <li><a class=\"reference external\" href=\"https://codeload.github.com/bcit-ci/CodeIgniter/zip/2.2.1\">CodeIgniter v2.2.1</a></li> <li><a class=\"reference external\" href=\"https://codeload.github.com/bcit-ci/CodeIgniter/zip/2.2.0\">CodeIgniter v2.2.0</a></li> <li><a class=\"reference external\" href=\"https://codeload.github.com/bcit-ci/CodeIgniter/zip/2.1.4\">CodeIgniter v2.1.4</a></li> <li><a class=\"reference external\" href=\"https://codeload.github.com/bcit-ci/CodeIgniter/zip/2.1.3\">CodeIgniter v2.1.3</a></li> <li><a class=\"reference external\" href=\"https://codeload.github.com/bcit-ci/CodeIgniter/zip/2.1.2\">CodeIgniter v2.1.2</a></li> <li><a class=\"reference external\" href=\"https://codeload.github.com/bcit-ci/CodeIgniter/zip/2.1.1\">CodeIgniter v2.1.1</a></li> <li><a class=\"reference external\" href=\"https://codeload.github.com/bcit-ci/CodeIgniter/zip/v2.1.0\">CodeIgniter v2.1.0</a></li> </ul>  <h2 id=\"github\">GitHub</h2> <p><a class=\"reference external\" href=\"http://git-scm.com/about\">Git</a> is a distributed version control system.</p> <p>Public Git access is available at <a class=\"reference external\" href=\"https://github.com/bcit-ci/CodeIgniter\">GitHub</a>. Please note that while every effort is made to keep this code base functional, we cannot guarantee the functionality of code taken from the develop branch.</p> <p>Beginning with version 2.0.3, stable versions are also available via <a class=\"reference external\" href=\"https://github.com/bcit-ci/CodeIgniter/releases\">GitHub Releases</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/installation/downloads.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/installation/downloads.html</a>\n  </p>\n</div>\n","overview/index":"<h1 id=\"codeigniter-overview\">CodeIgniter Overview</h1> <p>The following pages describe the broad concepts behind CodeIgniter:</p>  <ul> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"getting_started\">Getting Started</a></li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"at_a_glance\">CodeIgniter at a Glance</a> </li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"features\">Supported Features</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"appflow\">Application Flow Chart</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"mvc\">Model-View-Controller</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"goals\">Architectural Goals</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/overview/index.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/overview/index.html</a>\n  </p>\n</div>\n","tutorial/conclusion":"<h1 id=\"conclusion\">Conclusion</h1> <p>This tutorial did not cover all of the things you might expect of a full-fledged content management system, but it introduced you to the more important topics of routing, writing controllers, and models. We hope this tutorial gave you an insight into some of CodeIgniter’s basic design patterns, which you can expand upon.</p> <p>Now that you’ve completed this tutorial, we recommend you check out the rest of the documentation. CodeIgniter is often praised because of its comprehensive documentation. Use this to your advantage and read the “Introduction” and “General Topics” sections thoroughly. You should read the class and helper references when needed.</p> <p>Every intermediate PHP programmer should be able to get the hang of CodeIgniter within a few days.</p> <p>If you still have questions about the framework or your own CodeIgniter code, you can:</p> <ul class=\"simple\"> <li>Check out our <a class=\"reference external\" href=\"http://forum.codeigniter.com/\">forums</a>\n</li> <li>Visit our <a class=\"reference external\" href=\"https://github.com/bcit-ci/CodeIgniter/wiki/IRC\">IRC chatroom</a>\n</li> <li>Explore the <a class=\"reference external\" href=\"https://github.com/bcit-ci/CodeIgniter/wiki/\">Wiki</a>\n</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/tutorial/conclusion.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/tutorial/conclusion.html</a>\n  </p>\n</div>\n","overview/mvc":"<h1 id=\"model-view-controller\">Model-View-Controller</h1> <p>CodeIgniter is based on the Model-View-Controller development pattern. MVC is a software approach that separates application logic from presentation. In practice, it permits your web pages to contain minimal scripting since the presentation is separate from the PHP scripting.</p> <ul class=\"simple\"> <li>The <strong>Model</strong> represents your data structures. Typically your model classes will contain functions that help you retrieve, insert, and update information in your database.</li> <li>The <strong>View</strong> is the information that is being presented to a user. A View will normally be a web page, but in CodeIgniter, a view can also be a page fragment like a header or footer. It can also be an RSS page, or any other type of “page”.</li> <li>The <strong>Controller</strong> serves as an <em>intermediary</em> between the Model, the View, and any other resources needed to process the HTTP request and generate a web page.</li> </ul> <p>CodeIgniter has a fairly loose approach to MVC since Models are not required. If you don’t need the added separation, or find that maintaining models requires more complexity than you want, you can ignore them and build your application minimally using Controllers and Views. CodeIgniter also enables you to incorporate your own existing scripts, or even develop core libraries for the system, enabling you to work in a way that makes the most sense to you.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/overview/mvc.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/overview/mvc.html</a>\n  </p>\n</div>\n","tutorial/index":"<h1 id=\"tutorial\">Tutorial</h1> <p>This tutorial is intended to introduce you to the CodeIgniter framework and the basic principles of MVC architecture. It will show you how a basic CodeIgniter application is constructed in step-by-step fashion.</p> <p>In this tutorial, you will be creating a <strong>basic news application</strong>. You will begin by writing the code that can load static pages. Next, you will create a news section that reads news items from a database. Finally, you’ll add a form to create news items in the database.</p> <p>This tutorial will primarily focus on:</p> <ul class=\"simple\"> <li>Model-View-Controller basics</li> <li>Routing basics</li> <li>Form validation</li> <li>Performing basic database queries using “Query Builder”</li> </ul> <p>The entire tutorial is split up over several pages, each explaining a small part of the functionality of the CodeIgniter framework. You’ll go through the following pages:</p> <ul class=\"simple\"> <li>Introduction, this page, which gives you an overview of what to expect.</li> <li>\n<a class=\"reference internal\" href=\"static_pages\">Static pages</a>, which will teach you the basics of controllers, views and routing.</li> <li>\n<a class=\"reference internal\" href=\"news_section\">News section</a>, where you’ll start using models and will be doing some basic database operations.</li> <li>\n<a class=\"reference internal\" href=\"create_news_items\">Create news items</a>, which will introduce more advanced database operations and form validation.</li> <li>\n<a class=\"reference internal\" href=\"conclusion\">Conclusion</a>, which will give you some pointers on further reading and other resources.</li> </ul> <p>Enjoy your exploration of the CodeIgniter framework.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/tutorial/index.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/tutorial/index.html</a>\n  </p>\n</div>\n","general/index":"<h1 id=\"general-topics\">General Topics</h1>  <ul> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"urls\">CodeIgniter URLs</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"controllers\">Controllers</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"reserved_names\">Reserved Names</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"views\">Views</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"models\">Models</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"helpers\">Helpers</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"libraries\">Using CodeIgniter Libraries</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"creating_libraries\">Creating Libraries</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"drivers\">Using CodeIgniter Drivers</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"creating_drivers\">Creating Drivers</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"core_classes\">Creating Core System Classes</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"ancillary_classes\">Creating Ancillary Classes</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"hooks\">Hooks - Extending the Framework Core</a> </li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"autoloader\">Auto-loading Resources</a></li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"common_functions\">Common Functions</a></li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"compatibility_functions\">Compatibility Functions</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"routing\">URI Routing</a> </li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"errors\">Error Handling</a></li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"caching\">Caching</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"profiling\">Profiling Your Application</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"cli\">Running via the CLI</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"managing_apps\">Managing your Applications</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"environments\">Handling Multiple Environments</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"alternative_php\">Alternate PHP Syntax for View Files</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"security\">Security</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"styleguide\">PHP Style Guide</a> </li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/general/index.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/general/index.html</a>\n  </p>\n</div>\n","general/reserved_names":"<h1 id=\"reserved-names\">Reserved Names</h1> <p>In order to help out, CodeIgniter uses a series of function, method, class and variable names in its operation. Because of this, some names cannot be used by a developer. Following is a list of reserved names that cannot be used.</p>  <h2 id=\"controller-names\">Controller names</h2> <p>Since your controller classes will extend the main application controller you must be careful not to name your methods identically to the ones used by that class, otherwise your local methods will override them. The following is a list of reserved names. Do not name your controller any of these:</p> <ul class=\"simple\"> <li>CI_Controller</li> <li>Default</li> <li>index</li> </ul>   <h2 id=\"functions\">Functions</h2> <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"common_functions#is_php\" title=\"is_php\"><code>is_php()</code></a></li> <li><a class=\"reference internal\" href=\"common_functions#is_really_writable\" title=\"is_really_writable\"><code>is_really_writable()</code></a></li> <li><code>load_class()</code></li> <li><code>is_loaded()</code></li> <li><code>get_config()</code></li> <li><a class=\"reference internal\" href=\"common_functions#config_item\" title=\"config_item\"><code>config_item()</code></a></li> <li><a class=\"reference internal\" href=\"errors#show_error\" title=\"show_error\"><code>show_error()</code></a></li> <li><a class=\"reference internal\" href=\"errors#show_404\" title=\"show_404\"><code>show_404()</code></a></li> <li><a class=\"reference internal\" href=\"errors#log_message\" title=\"log_message\"><code>log_message()</code></a></li> <li><a class=\"reference internal\" href=\"common_functions#set_status_header\" title=\"set_status_header\"><code>set_status_header()</code></a></li> <li><a class=\"reference internal\" href=\"common_functions#get_mimes\" title=\"get_mimes\"><code>get_mimes()</code></a></li> <li><a class=\"reference internal\" href=\"common_functions#html_escape\" title=\"html_escape\"><code>html_escape()</code></a></li> <li><a class=\"reference internal\" href=\"common_functions#remove_invisible_characters\" title=\"remove_invisible_characters\"><code>remove_invisible_characters()</code></a></li> <li><a class=\"reference internal\" href=\"common_functions#is_https\" title=\"is_https\"><code>is_https()</code></a></li> <li><a class=\"reference internal\" href=\"common_functions#function_usable\" title=\"function_usable\"><code>function_usable()</code></a></li> <li><a class=\"reference internal\" href=\"ancillary_classes#get_instance\" title=\"get_instance\"><code>get_instance()</code></a></li> <li><code>_error_handler()</code></li> <li><code>_exception_handler()</code></li> <li><code>_stringify_attributes()</code></li> </ul>   <h2 id=\"variables\">Variables</h2> <ul class=\"simple\"> <li><code>$config</code></li> <li><code>$db</code></li> <li><code>$lang</code></li> </ul>   <h2 id=\"constants\">Constants</h2> <ul class=\"simple\"> <li>ENVIRONMENT</li> <li>FCPATH</li> <li>SELF</li> <li>BASEPATH</li> <li>APPPATH</li> <li>VIEWPATH</li> <li>CI_VERSION</li> <li>MB_ENABLED</li> <li>ICONV_ENABLED</li> <li>UTF8_ENABLED</li> <li>FILE_READ_MODE</li> <li>FILE_WRITE_MODE</li> <li>DIR_READ_MODE</li> <li>DIR_WRITE_MODE</li> <li>FOPEN_READ</li> <li>FOPEN_READ_WRITE</li> <li>FOPEN_WRITE_CREATE_DESTRUCTIVE</li> <li>FOPEN_READ_WRITE_CREATE_DESTRUCTIVE</li> <li>FOPEN_WRITE_CREATE</li> <li>FOPEN_READ_WRITE_CREATE</li> <li>FOPEN_WRITE_CREATE_STRICT</li> <li>FOPEN_READ_WRITE_CREATE_STRICT</li> <li>SHOW_DEBUG_BACKTRACE</li> <li>EXIT_SUCCESS</li> <li>EXIT_ERROR</li> <li>EXIT_CONFIG</li> <li>EXIT_UNKNOWN_FILE</li> <li>EXIT_UNKNOWN_CLASS</li> <li>EXIT_UNKNOWN_METHOD</li> <li>EXIT_USER_INPUT</li> <li>EXIT_DATABASE</li> <li>EXIT__AUTO_MIN</li> <li>EXIT__AUTO_MAX</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/general/reserved_names.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/general/reserved_names.html</a>\n  </p>\n</div>\n","overview/at_a_glance":"<h1 id=\"codeigniter-at-a-glance\">CodeIgniter at a Glance</h1>  <h2 id=\"codeigniter-is-an-application-framework\">CodeIgniter is an Application Framework</h2> <p>CodeIgniter is a toolkit for people who build web applications using PHP. Its goal is to enable you to develop projects much faster than you could if you were writing code from scratch, by providing a rich set of libraries for commonly needed tasks, as well as a simple interface and logical structure to access these libraries. CodeIgniter lets you creatively focus on your project by minimizing the amount of code needed for a given task.</p>   <h2 id=\"codeigniter-is-free\">CodeIgniter is Free</h2> <p>CodeIgniter is licensed under the MIT license so you can use it however you please. For more information please read the <a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/license.html\">license agreement</a>.</p>   <h2 id=\"codeigniter-is-light-weight\">CodeIgniter is Light Weight</h2> <p>Truly light weight. The core system requires only a few very small libraries. This is in stark contrast to many frameworks that require significantly more resources. Additional libraries are loaded dynamically upon request, based on your needs for a given process, so the base system is very lean and quite fast.</p>   <h2 id=\"codeigniter-is-fast\">CodeIgniter is Fast</h2> <p>Really fast. We challenge you to find a framework that has better performance than CodeIgniter.</p>   <h2 id=\"codeigniter-uses-m-v-c\">CodeIgniter Uses M-V-C</h2> <p>CodeIgniter uses the Model-View-Controller approach, which allows great separation between logic and presentation. This is particularly good for projects in which designers are working with your template files, as the code these files contain will be minimized. We describe MVC in more detail on its own page.</p>   <h2 id=\"codeigniter-generates-clean-urls\">CodeIgniter Generates Clean URLs</h2> <p>The URLs generated by CodeIgniter are clean and search-engine friendly. Rather than using the standard “query string” approach to URLs that is synonymous with dynamic systems, CodeIgniter uses a segment-based approach:</p> <pre data-language=\"php\">example.com/news/article/345\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">By default the <em>index.php</em> file is included in the URL but it can be removed using a simple <em>.htaccess</em> file.</p> </div>   <h2 id=\"codeigniter-packs-a-punch\">CodeIgniter Packs a Punch</h2> <p>CodeIgniter comes with full-range of libraries that enable the most commonly needed web development tasks, like accessing a database, sending email, validating form data, maintaining sessions, manipulating images, working with XML-RPC data and much more.</p>   <h2 id=\"codeigniter-is-extensible\">CodeIgniter is Extensible</h2> <p>The system can be easily extended through the use of your own libraries, helpers, or through class extensions or system hooks.</p>   <h2 id=\"codeigniter-does-not-require-a-template-engine\">CodeIgniter Does Not Require a Template Engine</h2> <p>Although CodeIgniter <em>does</em> come with a simple template parser that can be optionally used, it does not force you to use one. Template engines simply can not match the performance of native PHP, and the syntax that must be learned to use a template engine is usually only marginally easier than learning the basics of PHP. Consider this block of PHP code:</p> <pre data-language=\"php\">&lt;ul&gt;\n&lt;?php foreach ($addressbook as $name):?&gt;\n        &lt;li&gt;&lt;?=$name?&gt;&lt;/li&gt;\n&lt;?php endforeach; ?&gt;\n&lt;/ul&gt;\n</pre> <p>Contrast this with the pseudo-code used by a template engine:</p> <pre data-language=\"php\">&lt;ul&gt;\n{foreach from=$addressbook item=\"name\"}\n        &lt;li&gt;{$name}&lt;/li&gt;\n{/foreach}\n&lt;/ul&gt;\n</pre> <p>Yes, the template engine example is a bit cleaner, but it comes at the price of performance, as the pseudo-code must be converted back into PHP to run. Since one of our goals is <em>maximum performance</em>, we opted to not require the use of a template engine.</p>   <h2 id=\"codeigniter-is-thoroughly-documented\">CodeIgniter is Thoroughly Documented</h2> <p>Programmers love to code and hate to write documentation. We’re no different, of course, but since documentation is <strong>as important</strong> as the code itself, we are committed to doing it. Our source code is extremely clean and well commented as well.</p>   <h2 id=\"codeigniter-has-a-friendly-community-of-users\">CodeIgniter has a Friendly Community of Users</h2> <p>Our growing community of users can be seen actively participating in our <a class=\"reference external\" href=\"http://forum.codeigniter.com/\">Community Forums</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/overview/at_a_glance.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/overview/at_a_glance.html</a>\n  </p>\n</div>\n","general/urls":"<h1 id=\"codeigniter-urls\">CodeIgniter URLs</h1> <p>By default, URLs in CodeIgniter are designed to be search-engine and human friendly. Rather than using the standard “query string” approach to URLs that is synonymous with dynamic systems, CodeIgniter uses a <strong>segment-based</strong> approach:</p> <pre data-language=\"php\">example.com/news/article/my_article\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Query string URLs can be optionally enabled, as described below.</p> </div>  <h2 id=\"uri-segments\">URI Segments</h2> <p>The segments in the URL, in following with the Model-View-Controller approach, usually represent:</p> <pre data-language=\"php\">example.com/class/function/ID\n</pre> <ol class=\"arabic simple\"> <li>The first segment represents the controller <strong>class</strong> that should be invoked.</li> <li>The second segment represents the class <strong>function</strong>, or method, that should be called.</li> <li>The third, and any additional segments, represent the ID and any variables that will be passed to the controller.</li> </ol> <p>The <a class=\"reference internal\" href=\"../libraries/uri\">URI Library</a> and the <a class=\"reference internal\" href=\"../helpers/url_helper\">URL Helper</a> contain functions that make it easy to work with your URI data. In addition, your URLs can be remapped using the <a class=\"reference internal\" href=\"routing\">URI Routing</a> feature for more flexibility.</p>   <h2 id=\"removing-the-index-php-file\">Removing the index.php file</h2> <p>By default, the <strong>index.php</strong> file will be included in your URLs:</p> <pre data-language=\"php\">example.com/index.php/news/article/my_article\n</pre> <p>If your Apache server has <em>mod_rewrite</em> enabled, you can easily remove this file by using a .htaccess file with some simple rules. Here is an example of such a file, using the “negative” method in which everything is redirected except the specified items:</p> <pre data-language=\"php\">RewriteEngine On\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule ^(.*)$ index.php/$1 [L]\n</pre> <p>In the above example, any HTTP request other than those for existing directories and existing files is treated as a request for your index.php file.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">These specific rules might not work for all server configurations.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Make sure to also exclude from the above rule any assets that you might need to be accessible from the outside world.</p> </div>   <h2 id=\"adding-a-url-suffix\">Adding a URL Suffix</h2> <p>In your <strong>config/config.php</strong> file you can specify a suffix that will be added to all URLs generated by CodeIgniter. For example, if a URL is this:</p> <pre data-language=\"php\">example.com/index.php/products/view/shoes\n</pre> <p>You can optionally add a suffix, like <strong>.html,</strong> making the page appear to be of a certain type:</p> <pre data-language=\"php\">example.com/index.php/products/view/shoes.html\n</pre>   <h2 id=\"enabling-query-strings\">Enabling Query Strings</h2> <p>In some cases you might prefer to use query strings URLs:</p> <pre data-language=\"php\">index.php?c=products&amp;m=view&amp;id=345\n</pre> <p>CodeIgniter optionally supports this capability, which can be enabled in your <strong>application/config.php</strong> file. If you open your config file you’ll see these items:</p> <pre data-language=\"php\">$config['enable_query_strings'] = FALSE;\n$config['controller_trigger'] = 'c';\n$config['function_trigger'] = 'm';\n</pre> <p>If you change “enable_query_strings” to TRUE this feature will become active. Your controllers and functions will then be accessible using the “trigger” words you’ve set to invoke your controllers and methods:</p> <pre data-language=\"php\">index.php?c=controller&amp;m=method\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If you are using query strings you will have to build your own URLs, rather than utilizing the URL helpers (and other helpers that generate URLs, like some of the form helpers) as these are designed to work with segment based URLs.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/general/urls.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/general/urls.html</a>\n  </p>\n</div>\n","tutorial/static_pages":"<h1 id=\"static-pages\">Static pages</h1> <p><strong>Note:</strong> This tutorial assumes you’ve downloaded CodeIgniter and <a class=\"reference internal\" href=\"../installation/index\">installed the framework</a> in your development environment.</p> <p>The first thing you’re going to do is set up a <strong>controller</strong> to handle static pages. A controller is simply a class that helps delegate work. It is the glue of your web application.</p> <p>For example, when a call is made to:</p>  <a class=\"reference external\" href=\"http://example.com/news/latest/10\">http://example.com/news/latest/10</a> <p>We might imagine that there is a controller named “news”. The method being called on news would be “latest”. The news method’s job could be to grab 10 news items, and render them on the page. Very often in MVC, you’ll see URL patterns that match:</p>  <a class=\"reference external\" href=\"#\">http://example.com/[controller-class]/[controller-method]/[arguments</a>] <p>As URL schemes become more complex, this may change. But for now, this is all we will need to know.</p> <p>Create a file at <em>application/controllers/Pages.php</em> with the following code.</p> <pre data-language=\"php\">&lt;?php\nclass Pages extends CI_Controller {\n\n        public function view($page = 'home')\n        {\n        }\n}\n</pre> <p>You have created a class named <code>Pages</code>, with a view method that accepts one argument named <code>$page</code>. The <code>Pages</code> class is extending the <code>CI_Controller</code> class. This means that the new pages class can access the methods and variables defined in the <code>CI_Controller</code> class (<em>system/core/Controller.php</em>).</p> <p>The <strong>controller is what will become the center of every request</strong> to your web application. In very technical CodeIgniter discussions, it may be referred to as the <em>super object</em>. Like any php class, you refer to it within your controllers as <code>$this</code>. Referring to <code>$this</code> is how you will load libraries, views, and generally command the framework.</p> <p>Now you’ve created your first method, it’s time to make some basic page templates. We will be creating two “views” (page templates) that act as our page footer and header.</p> <p>Create the header at <em>application/views/templates/header.php</em> and add the following code:</p> <pre data-language=\"php\">&lt;html&gt;\n        &lt;head&gt;\n                &lt;title&gt;CodeIgniter Tutorial&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n\n                &lt;h1&gt;&lt;?php echo $title; ?&gt;&lt;/h1&gt;\n</pre> <p>The header contains the basic HTML code that you’ll want to display before loading the main view, together with a heading. It will also output the <code>$title</code> variable, which we’ll define later in the controller. Now, create a footer at <em>application/views/templates/footer.php</em> that includes the following code:</p> <pre data-language=\"php\">                &lt;em&gt;&amp;copy; 2015&lt;/em&gt;\n        &lt;/body&gt;\n&lt;/html&gt;\n</pre>  <h2 id=\"adding-logic-to-the-controller\">Adding logic to the controller</h2> <p>Earlier you set up a controller with a <code>view()</code> method. The method accepts one parameter, which is the name of the page to be loaded. The static page templates will be located in the <em>application/views/pages/</em> directory.</p> <p>In that directory, create two files named <em>home.php</em> and <em>about.php</em>. Within those files, type some text − anything you’d like − and save them. If you like to be particularly un-original, try “Hello World!”.</p> <p>In order to load those pages, you’ll have to check whether the requested page actually exists:</p> <pre data-language=\"php\">public function view($page = 'home')\n{\n        if ( ! file_exists(APPPATH.'views/pages/'.$page.'.php'))\n        {\n                // Whoops, we don't have a page for that!\n                show_404();\n        }\n\n        $data['title'] = ucfirst($page); // Capitalize the first letter\n\n        $this-&gt;load-&gt;view('templates/header', $data);\n        $this-&gt;load-&gt;view('pages/'.$page, $data);\n        $this-&gt;load-&gt;view('templates/footer', $data);\n}\n</pre> <p>Now, when the page does exist, it is loaded, including the header and footer, and displayed to the user. If the page doesn’t exist, a “404 Page not found” error is shown.</p> <p>The first line in this method checks whether the page actually exists. PHP’s native <code>file_exists()</code> function is used to check whether the file is where it’s expected to be. <code>show_404()</code> is a built-in CodeIgniter function that renders the default error page.</p> <p>In the header template, the <code>$title</code> variable was used to customize the page title. The value of title is defined in this method, but instead of assigning the value to a variable, it is assigned to the title element in the <code>$data</code> array.</p> <p>The last thing that has to be done is loading the views in the order they should be displayed. The second parameter in the <code>view()</code> method is used to pass values to the view. Each value in the <code>$data</code> array is assigned to a variable with the name of its key. So the value of <code>$data['title']</code> in the controller is equivalent to <code>$title</code> in the view.</p>   <h2 id=\"routing\">Routing</h2> <p>The controller is now functioning! Point your browser to <code>[your-site-url]index.php/pages/view</code> to see your page. When you visit <code>index.php/pages/view/about</code> you’ll see the about page, again including the header and footer.</p> <p>Using custom routing rules, you have the power to map any URI to any controller and method, and break free from the normal convention: <code>http://example.com/[controller-class]/[controller-method]/[arguments]</code></p> <p>Let’s do that. Open the routing file located at <em>application/config/routes.php</em> and add the following two lines. Remove all other code that sets any element in the <code>$route</code> array.</p> <pre data-language=\"php\">$route['default_controller'] = 'pages/view';\n$route['(:any)'] = 'pages/view/$1';\n</pre> <p>CodeIgniter reads its routing rules from top to bottom and routes the request to the first matching rule. Each rule is a regular expression (left-side) mapped to a controller and method name separated by slashes (right-side). When a request comes in, CodeIgniter looks for the first match, and calls the appropriate controller and method, possibly with arguments.</p> <p>More information about routing can be found in the URI Routing <a class=\"reference internal\" href=\"../general/routing\">documentation</a>.</p> <p>Here, the second rule in the <code>$routes</code> array matches <strong>any</strong> request using the wildcard string <code>(:any)</code>. and passes the parameter to the <code>view()</code> method of the <code>Pages</code> class.</p> <p>Now visit <code>index.php/about</code>. Did it get routed correctly to the <code>view()</code> method in the pages controller? Awesome!</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/tutorial/static_pages.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/tutorial/static_pages.html</a>\n  </p>\n</div>\n","tutorial/create_news_items":"<h1 id=\"create-news-items\">Create news items</h1> <p>You now know how you can read data from a database using CodeIgniter, but you haven’t written any information to the database yet. In this section you’ll expand your news controller and model created earlier to include this functionality.</p>  <h2 id=\"create-a-form\">Create a form</h2> <p>To input data into the database you need to create a form where you can input the information to be stored. This means you’ll be needing a form with two fields, one for the title and one for the text. You’ll derive the slug from our title in the model. Create the new view at <em>application/views/news/create.php</em>.</p> <pre data-language=\"php\">&lt;h2&gt;&lt;?php echo $title; ?&gt;&lt;/h2&gt;\n\n&lt;?php echo validation_errors(); ?&gt;\n\n&lt;?php echo form_open('news/create'); ?&gt;\n\n    &lt;label for=\"title\"&gt;Title&lt;/label&gt;\n    &lt;input type=\"input\" name=\"title\" /&gt;&lt;br /&gt;\n\n    &lt;label for=\"text\"&gt;Text&lt;/label&gt;\n    &lt;textarea name=\"text\"&gt;&lt;/textarea&gt;&lt;br /&gt;\n\n    &lt;input type=\"submit\" name=\"submit\" value=\"Create news item\" /&gt;\n\n&lt;/form&gt;\n</pre> <p>There are only two things here that probably look unfamiliar to you: the <code>form_open()</code> function and the <code>validation_errors()</code> function.</p> <p>The first function is provided by the <a class=\"reference internal\" href=\"../helpers/form_helper\">form helper</a> and renders the form element and adds extra functionality, like adding a hidden <a class=\"reference internal\" href=\"../libraries/security\">CSRF prevention field</a>. The latter is used to report errors related to form validation.</p> <p>Go back to your news controller. You’re going to do two things here, check whether the form was submitted and whether the submitted data passed the validation rules. You’ll use the <a class=\"reference internal\" href=\"../libraries/form_validation\">form validation</a> library to do this.</p> <pre data-language=\"php\">public function create()\n{\n    $this-&gt;load-&gt;helper('form');\n    $this-&gt;load-&gt;library('form_validation');\n\n    $data['title'] = 'Create a news item';\n\n    $this-&gt;form_validation-&gt;set_rules('title', 'Title', 'required');\n    $this-&gt;form_validation-&gt;set_rules('text', 'Text', 'required');\n\n    if ($this-&gt;form_validation-&gt;run() === FALSE)\n    {\n        $this-&gt;load-&gt;view('templates/header', $data);\n        $this-&gt;load-&gt;view('news/create');\n        $this-&gt;load-&gt;view('templates/footer');\n\n    }\n    else\n    {\n        $this-&gt;news_model-&gt;set_news();\n        $this-&gt;load-&gt;view('news/success');\n    }\n}\n</pre> <p>The code above adds a lot of functionality. The first few lines load the form helper and the form validation library. After that, rules for the form validation are set. The <code>set_rules()</code> method takes three arguments; the name of the input field, the name to be used in error messages, and the rule. In this case the title and text fields are required.</p> <p>CodeIgniter has a powerful form validation library as demonstrated above. You can read <a class=\"reference internal\" href=\"../libraries/form_validation\">more about this library here</a>.</p> <p>Continuing down, you can see a condition that checks whether the form validation ran successfully. If it did not, the form is displayed, if it was submitted <strong>and</strong> passed all the rules, the model is called. After this, a view is loaded to display a success message. Create a view at <em>application/views/news/success.php</em> and write a success message.</p>   <h2 id=\"model\">Model</h2> <p>The only thing that remains is writing a method that writes the data to the database. You’ll use the Query Builder class to insert the information and use the input library to get the posted data. Open up the model created earlier and add the following:</p> <pre data-language=\"php\">public function set_news()\n{\n    $this-&gt;load-&gt;helper('url');\n\n    $slug = url_title($this-&gt;input-&gt;post('title'), 'dash', TRUE);\n\n    $data = array(\n        'title' =&gt; $this-&gt;input-&gt;post('title'),\n        'slug' =&gt; $slug,\n        'text' =&gt; $this-&gt;input-&gt;post('text')\n    );\n\n    return $this-&gt;db-&gt;insert('news', $data);\n}\n</pre> <p>This new method takes care of inserting the news item into the database. The third line contains a new function, url_title(). This function - provided by the <a class=\"reference internal\" href=\"../helpers/url_helper\">URL helper</a> - strips down the string you pass it, replacing all spaces by dashes (-) and makes sure everything is in lowercase characters. This leaves you with a nice slug, perfect for creating URIs.</p> <p>Let’s continue with preparing the record that is going to be inserted later, inside the <code>$data</code> array. Each element corresponds with a column in the database table created earlier. You might notice a new method here, namely the <code>post()</code> method from the <a class=\"reference internal\" href=\"../libraries/input\">input library</a>. This method makes sure the data is sanitized, protecting you from nasty attacks from others. The input library is loaded by default. At last, you insert our <code>$data</code> array into our database.</p>   <h2 id=\"routing\">Routing</h2> <p>Before you can start adding news items into your CodeIgniter application you have to add an extra rule to <em>config/routes.php</em> file. Make sure your file contains the following. This makes sure CodeIgniter sees ‘create’ as a method instead of a news item’s slug.</p> <pre data-language=\"php\">$route['news/create'] = 'news/create';\n$route['news/(:any)'] = 'news/view/$1';\n$route['news'] = 'news';\n$route['(:any)'] = 'pages/view/$1';\n$route['default_controller'] = 'pages/view';\n</pre> <p>Now point your browser to your local development environment where you installed CodeIgniter and add index.php/news/create to the URL. Congratulations, you just created your first CodeIgniter application! Add some news and check out the different pages you made.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/tutorial/create_news_items.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/tutorial/create_news_items.html</a>\n  </p>\n</div>\n","tutorial/news_section":"<h1 id=\"news-section\">News section</h1> <p>In the last section, we went over some basic concepts of the framework by writing a class that includes static pages. We cleaned up the URI by adding custom routing rules. Now it’s time to introduce dynamic content and start using a database.</p>  <h2 id=\"setting-up-your-model\">Setting up your model</h2> <p>Instead of writing database operations right in the controller, queries should be placed in a model, so they can easily be reused later. Models are the place where you retrieve, insert, and update information in your database or other data stores. They represent your data.</p> <p>Open up the <em>application/models/</em> directory and create a new file called <em>News_model.php</em> and add the following code. Make sure you’ve configured your database properly as described <a class=\"reference internal\" href=\"../database/configuration\">here</a>.</p> <pre data-language=\"php\">&lt;?php\nclass News_model extends CI_Model {\n\n        public function __construct()\n        {\n                $this-&gt;load-&gt;database();\n        }\n}\n</pre> <p>This code looks similar to the controller code that was used earlier. It creates a new model by extending <code>CI_Model</code> and loads the database library. This will make the database class available through the <code>$this-&gt;db</code> object.</p> <p>Before querying the database, a database schema has to be created. Connect to your database and run the SQL command below (MySQL). Also add some seed records.</p> <pre data-language=\"php\">CREATE TABLE news (\n        id int(11) NOT NULL AUTO_INCREMENT,\n        title varchar(128) NOT NULL,\n        slug varchar(128) NOT NULL,\n        text text NOT NULL,\n        PRIMARY KEY (id),\n        KEY slug (slug)\n);\n</pre> <p>Now that the database and a model have been set up, you’ll need a method to get all of our posts from our database. To do this, the database abstraction layer that is included with CodeIgniter — <a class=\"reference internal\" href=\"../database/query_builder\">Query Builder</a> — is used. This makes it possible to write your ‘queries’ once and make them work on <a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/general/requirements.html\">all supported database systems</a>. Add the following code to your model.</p> <pre data-language=\"php\">public function get_news($slug = FALSE)\n{\n        if ($slug === FALSE)\n        {\n                $query = $this-&gt;db-&gt;get('news');\n                return $query-&gt;result_array();\n        }\n\n        $query = $this-&gt;db-&gt;get_where('news', array('slug' =&gt; $slug));\n        return $query-&gt;row_array();\n}\n</pre> <p>With this code you can perform two different queries. You can get all news records, or get a news item by its <a class=\"reference external\" href=\"#\">slug</a>. You might have noticed that the <code>$slug</code> variable wasn’t sanitized before running the query; <a class=\"reference internal\" href=\"../database/query_builder\">Query Builder</a> does this for you.</p>   <h2 id=\"display-the-news\">Display the news</h2> <p>Now that the queries are written, the model should be tied to the views that are going to display the news items to the user. This could be done in our <code>Pages</code> controller created earlier, but for the sake of clarity, a new <code>News</code> controller is defined. Create the new controller at <em>application/controllers/News.php</em>.</p> <pre data-language=\"php\">&lt;?php\nclass News extends CI_Controller {\n\n        public function __construct()\n        {\n                parent::__construct();\n                $this-&gt;load-&gt;model('news_model');\n                $this-&gt;load-&gt;helper('url_helper');\n        }\n\n        public function index()\n        {\n                $data['news'] = $this-&gt;news_model-&gt;get_news();\n        }\n\n        public function view($slug = NULL)\n        {\n                $data['news_item'] = $this-&gt;news_model-&gt;get_news($slug);\n        }\n}\n</pre> <p>Looking at the code, you may see some similarity with the files we created earlier. First, the <code>__construct()</code> method: it calls the constructor of its parent class (<code>CI_Controller</code>) and loads the model, so it can be used in all other methods in this controller. It also loads a collection of <a class=\"reference internal\" href=\"../helpers/url_helper\">URL Helper</a> functions, because we’ll use one of them in a view later.</p> <p>Next, there are two methods to view all news items and one for a specific news item. You can see that the <code>$slug</code> variable is passed to the model’s method in the second method. The model is using this slug to identify the news item to be returned.</p> <p>Now the data is retrieved by the controller through our model, but nothing is displayed yet. The next thing to do is passing this data to the views.</p> <pre data-language=\"php\">public function index()\n{\n        $data['news'] = $this-&gt;news_model-&gt;get_news();\n        $data['title'] = 'News archive';\n\n        $this-&gt;load-&gt;view('templates/header', $data);\n        $this-&gt;load-&gt;view('news/index', $data);\n        $this-&gt;load-&gt;view('templates/footer');\n}\n</pre> <p>The code above gets all news records from the model and assigns it to a variable. The value for the title is also assigned to the <code>$data['title']</code> element and all data is passed to the views. You now need to create a view to render the news items. Create <em>application/views/news/index.php</em> and add the next piece of code.</p> <pre data-language=\"php\">&lt;h2&gt;&lt;?php echo $title; ?&gt;&lt;/h2&gt;\n\n&lt;?php foreach ($news as $news_item): ?&gt;\n\n        &lt;h3&gt;&lt;?php echo $news_item['title']; ?&gt;&lt;/h3&gt;\n        &lt;div class=\"main\"&gt;\n                &lt;?php echo $news_item['text']; ?&gt;\n        &lt;/div&gt;\n        &lt;p&gt;&lt;a href=\"&lt;?php echo site_url('news/'.$news_item['slug']); ?&gt;\"&gt;View article&lt;/a&gt;&lt;/p&gt;\n\n&lt;?php endforeach; ?&gt;\n</pre> <p>Here, each news item is looped and displayed to the user. You can see we wrote our template in PHP mixed with HTML. If you prefer to use a template language, you can use CodeIgniter’s <a class=\"reference internal\" href=\"../libraries/parser\">Template Parser</a> class or a third party parser.</p> <p>The news overview page is now done, but a page to display individual news items is still absent. The model created earlier is made in such way that it can easily be used for this functionality. You only need to add some code to the controller and create a new view. Go back to the <code>News</code> controller and update <code>view()</code> with the following:</p> <pre data-language=\"php\">public function view($slug = NULL)\n{\n        $data['news_item'] = $this-&gt;news_model-&gt;get_news($slug);\n\n        if (empty($data['news_item']))\n        {\n                show_404();\n        }\n\n        $data['title'] = $data['news_item']['title'];\n\n        $this-&gt;load-&gt;view('templates/header', $data);\n        $this-&gt;load-&gt;view('news/view', $data);\n        $this-&gt;load-&gt;view('templates/footer');\n}\n</pre> <p>Instead of calling the <code>get_news()</code> method without a parameter, the <code>$slug</code> variable is passed, so it will return the specific news item. The only things left to do is create the corresponding view at <em>application/views/news/view.php</em>. Put the following code in this file.</p> <pre data-language=\"php\">&lt;?php\necho '&lt;h2&gt;'.$news_item['title'].'&lt;/h2&gt;';\necho $news_item['text'];\n</pre>   <h2 id=\"routing\">Routing</h2> <p>Because of the wildcard routing rule created earlier, you need an extra route to view the controller that you just made. Modify your routing file (<em>application/config/routes.php</em>) so it looks as follows. This makes sure the requests reaches the <code>News</code> controller instead of going directly to the <code>Pages</code> controller. The first line routes URI’s with a slug to the <code>view()</code> method in the <code>News</code> controller.</p> <pre data-language=\"php\">$route['news/(:any)'] = 'news/view/$1';\n$route['news'] = 'news';\n$route['(:any)'] = 'pages/view/$1';\n$route['default_controller'] = 'pages/view';\n</pre> <p>Point your browser to your document root, followed by index.php/news and watch your news page.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/tutorial/news_section.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/tutorial/news_section.html</a>\n  </p>\n</div>\n","general/controllers":"<h1 id=\"controllers\">Controllers</h1> <p>Controllers are the heart of your application, as they determine how HTTP requests should be handled.</p>  <p class=\"topic-title first\">Page Contents</p> <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#controllers\" id=\"id1\">Controllers</a><ul> <li><a class=\"reference internal\" href=\"#what-is-a-controller\" id=\"id2\">What is a Controller?</a></li> <li><a class=\"reference internal\" href=\"#let-s-try-it-hello-world\" id=\"id3\">Let’s try it: Hello World!</a></li> <li><a class=\"reference internal\" href=\"#methods\" id=\"id4\">Methods</a></li> <li><a class=\"reference internal\" href=\"#passing-uri-segments-to-your-methods\" id=\"id5\">Passing URI Segments to your methods</a></li> <li><a class=\"reference internal\" href=\"#defining-a-default-controller\" id=\"id6\">Defining a Default Controller</a></li> <li><a class=\"reference internal\" href=\"#remapping-method-calls\" id=\"id7\">Remapping Method Calls</a></li> <li><a class=\"reference internal\" href=\"#processing-output\" id=\"id8\">Processing Output</a></li> <li><a class=\"reference internal\" href=\"#private-methods\" id=\"id9\">Private methods</a></li> <li><a class=\"reference internal\" href=\"#organizing-your-controllers-into-sub-directories\" id=\"id10\">Organizing Your Controllers into Sub-directories</a></li> <li><a class=\"reference internal\" href=\"#class-constructors\" id=\"id11\">Class Constructors</a></li> <li><a class=\"reference internal\" href=\"#reserved-method-names\" id=\"id12\">Reserved method names</a></li> <li><a class=\"reference internal\" href=\"#that-s-it\" id=\"id13\">That’s it!</a></li> </ul> </li> </ul>   <h2 id=\"what-is-a-controller\">What is a Controller?</h2> <p><strong>A Controller is simply a class file that is named in a way that can be associated with a URI.</strong></p> <p>Consider this URI:</p> <pre data-language=\"php\">example.com/index.php/blog/\n</pre> <p>In the above example, CodeIgniter would attempt to find a controller named Blog.php and load it.</p> <p><strong>When a controller’s name matches the first segment of a URI, it will be loaded.</strong></p>   <h2 id=\"let-s-try-it-hello-world\">Let’s try it: Hello World!</h2> <p>Let’s create a simple controller so you can see it in action. Using your text editor, create a file called Blog.php, and put the following code in it:</p> <pre data-language=\"php\">&lt;?php\nclass Blog extends CI_Controller {\n\n        public function index()\n        {\n                echo 'Hello World!';\n        }\n}\n</pre> <p>Then save the file to your <em>application/controllers/</em> directory.</p> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">The file must be called ‘Blog.php’, with a capital ‘B’.</p> </div> <p>Now visit the your site using a URL similar to this:</p> <pre data-language=\"php\">example.com/index.php/blog/\n</pre> <p>If you did it right, you should see:</p>  Hello World! <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">Class names must start with an uppercase letter.</p> </div> <p>This is valid:</p> <pre data-language=\"php\">&lt;?php\nclass Blog extends CI_Controller {\n\n}\n</pre> <p>This is <strong>not</strong> valid:</p> <pre data-language=\"php\">&lt;?php\nclass blog extends CI_Controller {\n\n}\n</pre> <p>Also, always make sure your controller extends the parent controller class so that it can inherit all its methods.</p>   <h2 id=\"methods\">Methods</h2> <p>In the above example the method name is <code>index()</code>. The “index” method is always loaded by default if the <strong>second segment</strong> of the URI is empty. Another way to show your “Hello World” message would be this:</p> <pre data-language=\"php\">example.com/index.php/blog/index/\n</pre> <p><strong>The second segment of the URI determines which method in the controller gets called.</strong></p> <p>Let’s try it. Add a new method to your controller:</p> <pre data-language=\"php\">&lt;?php\nclass Blog extends CI_Controller {\n\n        public function index()\n        {\n                echo 'Hello World!';\n        }\n\n        public function comments()\n        {\n                echo 'Look at this!';\n        }\n}\n</pre> <p>Now load the following URL to see the comment method:</p> <pre data-language=\"php\">example.com/index.php/blog/comments/\n</pre> <p>You should see your new message.</p>   <h2 id=\"passing-uri-segments-to-your-methods\">Passing URI Segments to your methods</h2> <p>If your URI contains more than two segments they will be passed to your method as parameters.</p> <p>For example, let’s say you have a URI like this:</p> <pre data-language=\"php\">example.com/index.php/products/shoes/sandals/123\n</pre> <p>Your method will be passed URI segments 3 and 4 (“sandals” and “123”):</p> <pre data-language=\"php\">&lt;?php\nclass Products extends CI_Controller {\n\n        public function shoes($sandals, $id)\n        {\n                echo $sandals;\n                echo $id;\n        }\n}\n</pre> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">If you are using the <a class=\"reference internal\" href=\"routing\">URI Routing</a> feature, the segments passed to your method will be the re-routed ones.</p> </div>   <h2 id=\"defining-a-default-controller\">Defining a Default Controller</h2> <p>CodeIgniter can be told to load a default controller when a URI is not present, as will be the case when only your site root URL is requested. To specify a default controller, open your <strong>application/config/routes.php</strong> file and set this variable:</p> <pre data-language=\"php\">$route['default_controller'] = 'blog';\n</pre> <p>Where ‘blog’ is the name of the controller class you want used. If you now load your main index.php file without specifying any URI segments you’ll see your “Hello World” message by default.</p> <p>For more information, please refer to the “Reserved Routes” section of the <a class=\"reference internal\" href=\"routing\">URI Routing</a> documentation.</p>   <h2 id=\"remapping-method-calls\">Remapping Method Calls</h2> <p>As noted above, the second segment of the URI typically determines which method in the controller gets called. CodeIgniter permits you to override this behavior through the use of the <code>_remap()</code> method:</p> <pre data-language=\"php\">public function _remap()\n{\n        // Some code here...\n}\n</pre> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">If your controller contains a method named _remap(), it will <strong>always</strong> get called regardless of what your URI contains. It overrides the normal behavior in which the URI determines which method is called, allowing you to define your own method routing rules.</p> </div> <p>The overridden method call (typically the second segment of the URI) will be passed as a parameter to the <code>_remap()</code> method:</p> <pre data-language=\"php\">public function _remap($method)\n{\n        if ($method === 'some_method')\n        {\n                $this-&gt;$method();\n        }\n        else\n        {\n                $this-&gt;default_method();\n        }\n}\n</pre> <p>Any extra segments after the method name are passed into <code>_remap()</code> as an optional second parameter. This array can be used in combination with PHP’s <a class=\"reference external\" href=\"http://php.net/call_user_func_array\">call_user_func_array()</a> to emulate CodeIgniter’s default behavior.</p> <p>Example:</p> <pre data-language=\"php\">public function _remap($method, $params = array())\n{\n        $method = 'process_'.$method;\n        if (method_exists($this, $method))\n        {\n                return call_user_func_array(array($this, $method), $params);\n        }\n        show_404();\n}\n</pre>   <h2 id=\"processing-output\">Processing Output</h2> <p>CodeIgniter has an output class that takes care of sending your final rendered data to the web browser automatically. More information on this can be found in the <a class=\"reference internal\" href=\"views\">Views</a> and <a class=\"reference internal\" href=\"../libraries/output\">Output Class</a> pages. In some cases, however, you might want to post-process the finalized data in some way and send it to the browser yourself. CodeIgniter permits you to add a method named <code>_output()</code> to your controller that will receive the finalized output data.</p> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">If your controller contains a method named <code>_output()</code>, it will <strong>always</strong> be called by the output class instead of echoing the finalized data directly. The first parameter of the method will contain the finalized output.</p> </div> <p>Here is an example:</p> <pre data-language=\"php\">public function _output($output)\n{\n        echo $output;\n}\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>Please note that your <code>_output()</code> method will receive the data in its finalized state. Benchmark and memory usage data will be rendered, cache files written (if you have caching enabled), and headers will be sent (if you use that <a class=\"reference internal\" href=\"../libraries/output\">feature</a>) before it is handed off to the <code>_output()</code> method. To have your controller’s output cached properly, its <code>_output()</code> method can use:</p> <pre data-language=\"php\">if ($this-&gt;output-&gt;cache_expiration &gt; 0)\n{\n        $this-&gt;output-&gt;_write_cache($output);\n}\n</pre> <p class=\"last\">If you are using this feature the page execution timer and memory usage stats might not be perfectly accurate since they will not take into account any further processing you do. For an alternate way to control output <em>before</em> any of the final processing is done, please see the available methods in the <a class=\"reference internal\" href=\"../libraries/output\">Output Library</a>.</p> </div>   <h2 id=\"private-methods\">Private methods</h2> <p>In some cases you may want certain methods hidden from public access. In order to achieve this, simply declare the method as being private or protected and it will not be served via a URL request. For example, if you were to have a method like this:</p> <pre data-language=\"php\">private function _utility()\n{\n        // some code\n}\n</pre> <p>Trying to access it via the URL, like this, will not work:</p> <pre data-language=\"php\">example.com/index.php/blog/_utility/\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Prefixing method names with an underscore will also prevent them from being called. This is a legacy feature that is left for backwards-compatibility.</p> </div>   <h2 id=\"organizing-your-controllers-into-sub-directories\">Organizing Your Controllers into Sub-directories</h2> <p>If you are building a large application you might want to hierarchically organize or structure your controllers into sub-directories. CodeIgniter permits you to do this.</p> <p>Simply create sub-directories under the main <em>application/controllers/</em> one and place your controller classes within them.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>When using this feature the first segment of your URI must specify the folder. For example, let’s say you have a controller located here:</p> <pre data-language=\"php\">application/controllers/products/Shoes.php\n</pre> <p>To call the above controller your URI will look something like this:</p> <pre data-language=\"php\">example.com/index.php/products/shoes/show/123\n</pre> </div> <p>Each of your sub-directories may contain a default controller which will be called if the URL contains <em>only</em> the sub-directory. Simply put a controller in there that matches the name of your ‘default_controller’ as specified in your <em>application/config/routes.php</em> file.</p> <p>CodeIgniter also permits you to remap your URIs using its <a class=\"reference internal\" href=\"routing\">URI Routing</a> feature.</p>   <h2 id=\"class-constructors\">Class Constructors</h2> <p>If you intend to use a constructor in any of your Controllers, you <strong>MUST</strong> place the following line of code in it:</p> <pre data-language=\"php\">parent::__construct();\n</pre> <p>The reason this line is necessary is because your local constructor will be overriding the one in the parent controller class so we need to manually call it.</p> <p>Example:</p> <pre data-language=\"php\">&lt;?php\nclass Blog extends CI_Controller {\n\n        public function __construct()\n        {\n                parent::__construct();\n                // Your own constructor code\n        }\n}\n</pre> <p>Constructors are useful if you need to set some default values, or run a default process when your class is instantiated. Constructors can’t return a value, but they can do some default work.</p>   <h2 id=\"reserved-method-names\">Reserved method names</h2> <p>Since your controller classes will extend the main application controller you must be careful not to name your methods identically to the ones used by that class, otherwise your local functions will override them. See <a class=\"reference internal\" href=\"reserved_names\">Reserved Names</a> for a full list.</p> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">You should also never have a method named identically to its class name. If you do, and there is no <code>__construct()</code> method in the same class, then your e.g. <code>Index::index()</code> method will be executed as a class constructor! This is a PHP4 backwards-compatibility feature.</p> </div>   <h2 id=\"that-s-it\">That’s it!</h2> <p>That, in a nutshell, is all there is to know about controllers.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/general/controllers.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/general/controllers.html</a>\n  </p>\n</div>\n","general/caching":"<h1 id=\"web-page-caching\">Web Page Caching</h1> <p>CodeIgniter lets you cache your pages in order to achieve maximum performance.</p> <p>Although CodeIgniter is quite fast, the amount of dynamic information you display in your pages will correlate directly to the server resources, memory, and processing cycles utilized, which affect your page load speeds. By caching your pages, since they are saved in their fully rendered state, you can achieve performance that nears that of static web pages.</p>  <h2 id=\"how-does-caching-work\">How Does Caching Work?</h2> <p>Caching can be enabled on a per-page basis, and you can set the length of time that a page should remain cached before being refreshed. When a page is loaded for the first time, the cache file will be written to your application/cache folder. On subsequent page loads the cache file will be retrieved and sent to the requesting user’s browser. If it has expired, it will be deleted and refreshed before being sent to the browser.</p>   <h2 id=\"enabling-caching\">Enabling Caching</h2> <p>To enable caching, put the following tag in any of your controller methods:</p> <pre data-language=\"php\">$this-&gt;output-&gt;cache($n);\n</pre> <p>Where <code>$n</code> is the number of <strong>minutes</strong> you wish the page to remain cached between refreshes.</p> <p>The above tag can go anywhere within a method. It is not affected by the order that it appears, so place it wherever it seems most logical to you. Once the tag is in place, your pages will begin being cached.</p> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">Because of the way CodeIgniter stores content for output, caching will only work if you are generating display for your controller with a <a class=\"reference internal\" href=\"views\">view</a>.</p> </div> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">If you change configuration options that might affect your output, you have to manually delete your cache files.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Before the cache files can be written you must set the file permissions on your <em>application/cache/</em> directory such that it is writable.</p> </div>   <h2 id=\"deleting-caches\">Deleting Caches</h2> <p>If you no longer wish to cache a file you can remove the caching tag and it will no longer be refreshed when it expires.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Removing the tag will not delete the cache immediately. It will have to expire normally.</p> </div> <p>If you need to manually delete the cache, you can use the <code>delete_cache()</code> method:</p> <pre data-language=\"php\">// Deletes cache for the currently requested URI\n$this-&gt;output-&gt;delete_cache();\n\n// Deletes cache for /foo/bar\n$this-&gt;output-&gt;delete_cache('/foo/bar');\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/general/caching.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/general/caching.html</a>\n  </p>\n</div>\n","general/autoloader":"<h1 id=\"auto-loading-resources\">Auto-loading Resources</h1> <p>CodeIgniter comes with an “Auto-load” feature that permits libraries, helpers, and models to be initialized automatically every time the system runs. If you need certain resources globally throughout your application you should consider auto-loading them for convenience.</p> <p>The following items can be loaded automatically:</p> <ul class=\"simple\"> <li>Classes found in the <em>libraries/</em> directory</li> <li>Helper files found in the <em>helpers/</em> directory</li> <li>Custom config files found in the <em>config/</em> directory</li> <li>Language files found in the <em>system/language/</em> directory</li> <li>Models found in the <em>models/</em> folder</li> </ul> <p>To autoload resources, open the <strong>application/config/autoload.php</strong> file and add the item you want loaded to the autoload array. You’ll find instructions in that file corresponding to each type of item.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Do not include the file extension (.php) when adding items to the autoload array.</p> </div> <p>Additionally, if you want CodeIgniter to use a <a class=\"reference external\" href=\"https://getcomposer.org/\">Composer</a> auto-loader, just set <code>$config['composer_autoload']</code> to <code>TRUE</code> or a custom path in <strong>application/config/config.php</strong>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/general/autoloader.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/general/autoloader.html</a>\n  </p>\n</div>\n","general/common_functions":"<h1 id=\"common-functions\">Common Functions</h1> <p>CodeIgniter uses a few functions for its operation that are globally defined, and are available to you at any point. These do not require loading any libraries or helpers.</p> \n<dl class=\"function\"> <dt id=\"is_php\">\n<code>is_php($version)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$version</strong> (<em>string</em>) – Version number</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE if the running PHP version is at least the one specified or FALSE if not</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Determines if the PHP version being used is greater than the supplied version number.</p> <p>Example:</p> <pre data-language=\"php\">if (is_php('5.3'))\n{\n        $str = quoted_printable_encode($str);\n}\n</pre> <p>Returns boolean TRUE if the installed version of PHP is equal to or greater than the supplied version number. Returns FALSE if the installed version of PHP is lower than the supplied version number.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"is_really_writable\">\n<code>is_really_writable($file)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$file</strong> (<em>string</em>) – File path</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE if the path is writable, FALSE if not</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p><code>is_writable()</code> returns TRUE on Windows servers when you really can’t write to the file as the OS reports to PHP as FALSE only if the read-only attribute is marked.</p> <p>This function determines if a file is actually writable by attempting to write to it first. Generally only recommended on platforms where this information may be unreliable.</p> <p>Example:</p> <pre data-language=\"php\">if (is_really_writable('file.txt'))\n{\n        echo \"I could write to this if I wanted to\";\n}\nelse\n{\n        echo \"File is not writable\";\n}\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">See also <a class=\"reference external\" href=\"https://bugs.php.net/bug.php?id=54709\">PHP bug #54709</a> for more info.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"config_item\">\n<code>config_item($key)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$key</strong> (<em>string</em>) – Config item key</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Configuration key value or NULL if not found</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>The <a class=\"reference internal\" href=\"../libraries/config\">Config Library</a> is the preferred way of accessing configuration information, however <code>config_item()</code> can be used to retrieve single keys. See <a class=\"reference internal\" href=\"../libraries/config\">Config Library</a> documentation for more information.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"set_status_header\">\n<code>set_status_header($code[, $text = ''])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$code</strong> (<em>int</em>) – HTTP Reponse status code</li> <li>\n<strong>$text</strong> (<em>string</em>) – A custom message to set with the status code</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Permits you to manually set a server status header. Example:</p> <pre data-language=\"php\">set_status_header(401);\n// Sets the header as:  Unauthorized\n</pre> <p><a class=\"reference external\" href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\">See here</a> for a full list of headers.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"remove_invisible_characters\">\n<code>remove_invisible_characters($str[, $url_encoded = TRUE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> <li>\n<strong>$url_encoded</strong> (<em>bool</em>) – Whether to remove URL-encoded characters as well</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Sanitized string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>This function prevents inserting NULL characters between ASCII characters, like Java\\0script.</p> <p>Example:</p> <pre data-language=\"php\">remove_invisible_characters('Java\\\\0script');\n// Returns: 'Javascript'\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"html_escape\">\n<code>html_escape($var)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$var</strong> (<em>mixed</em>) – Variable to escape (string or array)</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">HTML escaped string(s)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>This function acts as an alias for PHP’s native <code>htmlspecialchars()</code> function, with the advantage of being able to accept an array of strings.</p> <p>It is useful in preventing Cross Site Scripting (XSS).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"get_mimes\">\n<code>get_mimes()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">An associative array of file types</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">array</td> </tr>  </table> <p>This function returns a <em>reference</em> to the MIMEs array from <em>application/config/mimes.php</em>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"is_https\">\n<code>is_https()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">TRUE if currently using HTTP-over-SSL, FALSE if not</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">bool</td> </tr>  </table> <p>Returns TRUE if a secure (HTTPS) connection is used and FALSE in any other case (including non-HTTP requests).</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"is_cli\">\n<code>is_cli()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">TRUE if currently running under CLI, FALSE otherwise</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">bool</td> </tr>  </table> <p>Returns TRUE if the application is run through the command line and FALSE if not.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This function checks both if the <code>PHP_SAPI</code> value is ‘cli’ or if the <code>STDIN</code> constant is defined.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"function_usable\">\n<code>function_usable($function_name)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$function_name</strong> (<em>string</em>) – Function name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE if the function can be used, FALSE if not</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Returns TRUE if a function exists and is usable, FALSE otherwise.</p> <p>This function runs a <code>function_exists()</code> check and if the <cite>Suhosin extension &lt;http://www.hardened-php.net/suhosin/&gt;</cite> is loaded, checks if it doesn’t disable the function being checked.</p> <p>It is useful if you want to check for the availability of functions such as <code>eval()</code> and <code>exec()</code>, which are dangerous and might be disabled on servers with highly restrictive security policies.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This function was introduced because Suhosin terminated script execution, but this turned out to be a bug. A fix has been available for some time (version 0.9.34), but is unfortunately not released yet.</p> </div> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/general/common_functions.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/general/common_functions.html</a>\n  </p>\n</div>\n","general/compatibility_functions":"<h1 id=\"compatibility-functions\">Compatibility Functions</h1> <p>CodeIgniter provides a set of compatibility functions that enable you to use functions what are otherwise natively available in PHP, but only in higher versions or depending on a certain extension.</p> <p>Being custom implementations, these functions will also have some set of dependencies on their own, but are still useful if your PHP setup doesn’t offer them natively.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Much like the <cite>common functions &lt;common_functions&gt;</cite>, the compatibility functions are always available, as long as their dependencies are met.</p> </div>  <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#password-hashing\" id=\"id7\">Password Hashing</a><ul> <li><a class=\"reference internal\" href=\"#dependencies\" id=\"id8\">Dependencies</a></li> <li><a class=\"reference internal\" href=\"#constants\" id=\"id9\">Constants</a></li> <li><a class=\"reference internal\" href=\"#function-reference\" id=\"id10\">Function reference</a></li> </ul> </li> <li>\n<a class=\"reference internal\" href=\"#hash-message-digest\" id=\"id11\">Hash (Message Digest)</a><ul> <li><a class=\"reference internal\" href=\"#id1\" id=\"id12\">Dependencies</a></li> <li><a class=\"reference internal\" href=\"#id2\" id=\"id13\">Function reference</a></li> </ul> </li> <li>\n<a class=\"reference internal\" href=\"#multibyte-string\" id=\"id14\">Multibyte String</a><ul> <li><a class=\"reference internal\" href=\"#id3\" id=\"id15\">Dependencies</a></li> <li><a class=\"reference internal\" href=\"#id4\" id=\"id16\">Function reference</a></li> </ul> </li> <li>\n<a class=\"reference internal\" href=\"#standard-functions\" id=\"id17\">Standard Functions</a><ul> <li><a class=\"reference internal\" href=\"#id5\" id=\"id18\">Dependencies</a></li> <li><a class=\"reference internal\" href=\"#id6\" id=\"id19\">Function reference</a></li> </ul> </li> </ul>   <h2 id=\"password-hashing\">Password Hashing</h2> <p>This set of compatibility functions offers a “backport” of PHP’s standard <a class=\"reference external\" href=\"http://php.net/password\">Password Hashing extension</a> that is otherwise available only since PHP 5.5.</p>  <h3 id=\"dependencies\">Dependencies</h3> <ul class=\"simple\"> <li>PHP 5.3.7</li> <li>\n<code>CRYPT_BLOWFISH</code> support for <code>crypt()</code>\n</li> </ul>   <h3 id=\"constants\">Constants</h3> <ul class=\"simple\"> <li><code>PASSWORD_BCRYPT</code></li> <li><code>PASSWORD_DEFAULT</code></li> </ul>   <h3 id=\"function-reference\">Function reference</h3> <dl class=\"function\"> <dt id=\"password_get_info\">\n<code>password_get_info($hash)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$hash</strong> (<em>string</em>) – Password hash</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Information about the hashed password</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>For more information, please refer to the <a class=\"reference external\" href=\"http://php.net/password_get_info\">PHP manual for password_get_info()</a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"password_hash\">\n<code>password_hash($password, $algo[, $options = array()])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$password</strong> (<em>string</em>) – Plain-text password</li> <li>\n<strong>$algo</strong> (<em>int</em>) – Hashing algorithm</li> <li>\n<strong>$options</strong> (<em>array</em>) – Hashing options</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Hashed password or FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>For more information, please refer to the <a class=\"reference external\" href=\"http://php.net/password_hash\">PHP manual for password_hash()</a>.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Unless you provide your own (and valid) salt, this function has a further dependency on an available CSPRNG source. Each of the following would satisfy that: - <code>mcrypt_create_iv()</code> with <code>MCRYPT_DEV_URANDOM</code> - <code>openssl_random_pseudo_bytes()</code> - /dev/arandom - /dev/urandom</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"password_needs_rehash\">\n<code>password_needs_rehash()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$hash</strong> (<em>string</em>) – Password hash</li> <li>\n<strong>$algo</strong> (<em>int</em>) – Hashing algorithm</li> <li>\n<strong>$options</strong> (<em>array</em>) – Hashing options</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE if the hash should be rehashed to match the given algorithm and options, FALSE otherwise</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>For more information, please refer to the <a class=\"reference external\" href=\"http://php.net/password_needs_rehash\">PHP manual for password_needs_rehash()</a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"password_verify\">\n<code>password_verify($password, $hash)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$password</strong> (<em>string</em>) – Plain-text password</li> <li>\n<strong>$hash</strong> (<em>string</em>) – Password hash</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE if the password matches the hash, FALSE if not</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>For more information, please refer to the <a class=\"reference external\" href=\"http://php.net/password_verify\">PHP manual for password_verify()</a>.</p> </dd>\n</dl>    <h2 id=\"hash-message-digest\">Hash (Message Digest)</h2> <p>This compatibility layer contains backports for the <code>hash_equals()</code> and <code>hash_pbkdf2()</code> functions, which otherwise require PHP 5.6 and/or PHP 5.5 respectively.</p>  <h3 id=\"id1\">Dependencies</h3> <ul class=\"simple\"> <li>None</li> </ul>   <h3 id=\"id2\">Function reference</h3> <dl class=\"function\"> <dt id=\"hash_equals\">\n<code>hash_equals($known_string, $user_string)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$known_string</strong> (<em>string</em>) – Known string</li> <li>\n<strong>$user_string</strong> (<em>string</em>) – User-supplied string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE if the strings match, FALSE otherwise</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>For more information, please refer to the <a class=\"reference external\" href=\"http://php.net/hash_equals\">PHP manual for hash_equals()</a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"hash_pbkdf2\">\n<code>hash_pbkdf2($algo, $password, $salt, $iterations[, $length = 0[, $raw_output = FALSE]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$algo</strong> (<em>string</em>) – Hashing algorithm</li> <li>\n<strong>$password</strong> (<em>string</em>) – Password</li> <li>\n<strong>$salt</strong> (<em>string</em>) – Hash salt</li> <li>\n<strong>$iterations</strong> (<em>int</em>) – Number of iterations to perform during derivation</li> <li>\n<strong>$length</strong> (<em>int</em>) – Output string length</li> <li>\n<strong>$raw_output</strong> (<em>bool</em>) – Whether to return raw binary data</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Password-derived key or FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>For more information, please refer to the <a class=\"reference external\" href=\"http://php.net/hash_pbkdf2\">PHP manual for hash_pbkdf2()</a>.</p> </dd>\n</dl>    <h2 id=\"multibyte-string\">Multibyte String</h2> <p>This set of compatibility functions offers limited support for PHP’s <a class=\"reference external\" href=\"http://php.net/mbstring\">Multibyte String extension</a>. Because of the limited alternative solutions, only a few functions are available.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">When a character set parameter is ommited, <code>$config['charset']</code> will be used.</p> </div>  <h3 id=\"id3\">Dependencies</h3> <ul class=\"simple\"> <li>\n<a class=\"reference external\" href=\"http://php.net/iconv\">iconv</a> extension</li> </ul> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">This dependency is optional and these functions will always be declared. If iconv is not available, they WILL fall-back to their non-mbstring versions.</p> </div> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">Where a character set is supplied, it must be supported by iconv and in a format that it recognizes.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">For you own dependency check on the actual mbstring extension, use the <code>MB_ENABLED</code> constant.</p> </div>   <h3 id=\"id4\">Function reference</h3> <dl class=\"function\"> <dt id=\"mb_strlen\">\n<code>mb_strlen($str[, $encoding = NULL])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> <li>\n<strong>$encoding</strong> (<em>string</em>) – Character set</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Number of characters in the input string or FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>For more information, please refer to the <a class=\"reference external\" href=\"http://php.net/mb_strlen\">PHP manual for mb_strlen()</a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"mb_strpos\">\n<code>mb_strpos($haystack, $needle[, $offset = 0[, $encoding = NULL]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$haystack</strong> (<em>string</em>) – String to search in</li> <li>\n<strong>$needle</strong> (<em>string</em>) – Part of string to search for</li> <li>\n<strong>$offset</strong> (<em>int</em>) – Search offset</li> <li>\n<strong>$encoding</strong> (<em>string</em>) – Character set</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Numeric character position of where $needle was found or FALSE if not found</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>For more information, please refer to the <a class=\"reference external\" href=\"http://php.net/mb_strpos\">PHP manual for mb_strpos()</a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"mb_substr\">\n<code>mb_substr($str, $start[, $length = NULL[, $encoding = NULL]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> <li>\n<strong>$start</strong> (<em>int</em>) – Position of first character</li> <li>\n<strong>$length</strong> (<em>int</em>) – Maximum number of characters</li> <li>\n<strong>$encoding</strong> (<em>string</em>) – Character set</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Portion of $str specified by $start and $length or FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>For more information, please refer to the <a class=\"reference external\" href=\"http://php.net/mb_substr\">PHP manual for mb_substr()</a>.</p> </dd>\n</dl>    <h2 id=\"standard-functions\">Standard Functions</h2> <p>This set of compatibility functions offers support for a few standard functions in PHP that otherwise require a newer PHP version.</p>  <h3 id=\"id5\">Dependencies</h3> <ul class=\"simple\"> <li>None</li> </ul>   <h3 id=\"id6\">Function reference</h3> <dl class=\"function\"> <dt id=\"array_column\">\n<code>array_column(array $array, $column_key[, $index_key = NULL])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$array</strong> (<em>array</em>) – Array to fetch results from</li> <li>\n<strong>$column_key</strong> (<em>mixed</em>) – Key of the column to return values from</li> <li>\n<strong>$index_key</strong> (<em>mixed</em>) – Key to use for the returned values</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An array of values representing a single column from the input array</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>For more information, please refer to the <a class=\"reference external\" href=\"http://php.net/array_column\">PHP manual for array_column()</a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"array_replace\">\n<code>array_replace(array $array1[, ...])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$array1</strong> (<em>array</em>) – Array in which to replace elements</li> <li>\n<strong>...</strong> (<em>array</em>) – Array (or multiple ones) from which to extract elements</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Modified array</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>For more information, please refer to the <a class=\"reference external\" href=\"http://php.net/array_replace\">PHP manual for array_replace()</a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"array_replace_recursive\">\n<code>array_replace_recursive(array $array1[, ...])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$array1</strong> (<em>array</em>) – Array in which to replace elements</li> <li>\n<strong>...</strong> (<em>array</em>) – Array (or multiple ones) from which to extract elements</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Modified array</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>For more information, please refer to the <a class=\"reference external\" href=\"http://php.net/array_replace_recursive\">PHP manual for array_replace_recursive()</a>.</p> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">Only PHP’s native function can detect endless recursion. Unless you are running PHP 5.3+, be careful with references!</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"hex2bin\">\n<code>hex2bin($data)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$data</strong> (<em>array</em>) – Hexadecimal representation of data</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Binary representation of the given data</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>For more information, please refer to the <a class=\"reference external\" href=\"http://php.net/hex2bin\">PHP manual for hex2bin()</a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"quoted_printable_encode\">\n<code>quoted_printable_encode($str)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">8bit-encoded string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>For more information, please refer to the <a class=\"reference external\" href=\"http://php.net/quoted_printable_encode\">PHP manual for quoted_printable_encode()</a>.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/general/compatibility_functions.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/general/compatibility_functions.html</a>\n  </p>\n</div>\n","general/drivers":"<h1 id=\"using-codeigniter-drivers\">Using CodeIgniter Drivers</h1> <p>Drivers are a special type of Library that has a parent class and any number of potential child classes. Child classes have access to the parent class, but not their siblings. Drivers provide an elegant syntax in your <a class=\"reference internal\" href=\"controllers\">controllers</a> for libraries that benefit from or require being broken down into discrete classes.</p> <p>Drivers are found in the <em>system/libraries/</em> directory, in their own sub-directory which is identically named to the parent library class. Also inside that directory is a subdirectory named drivers, which contains all of the possible child class files.</p> <p>To use a driver you will initialize it within a controller using the following initialization method:</p> <pre data-language=\"php\">$this-&gt;load-&gt;driver('class_name');\n</pre> <p>Where class name is the name of the driver class you want to invoke. For example, to load a driver named “Some_parent” you would do this:</p> <pre data-language=\"php\">$this-&gt;load-&gt;driver('some_parent');\n</pre> <p>Methods of that class can then be invoked with:</p> <pre data-language=\"php\">$this-&gt;some_parent-&gt;some_method();\n</pre> <p>The child classes, the drivers themselves, can then be called directly through the parent class, without initializing them:</p> <pre data-language=\"php\">$this-&gt;some_parent-&gt;child_one-&gt;some_method();\n$this-&gt;some_parent-&gt;child_two-&gt;another_method();\n</pre>  <h2 id=\"creating-your-own-drivers\">Creating Your Own Drivers</h2> <p>Please read the section of the user guide that discusses how to <a class=\"reference internal\" href=\"creating_drivers\">create your own drivers</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/general/drivers.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/general/drivers.html</a>\n  </p>\n</div>\n","general/core_classes":"<h1 id=\"creating-core-system-classes\">Creating Core System Classes</h1> <p>Every time CodeIgniter runs there are several base classes that are initialized automatically as part of the core framework. It is possible, however, to swap any of the core system classes with your own versions or even extend the core versions.</p> <p><strong>Most users will never have any need to do this, but the option to replace or extend them does exist for those who would like to significantly alter the CodeIgniter core.</strong></p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Messing with a core system class has a lot of implications, so make sure you know what you are doing before attempting it.</p> </div>  <h2 id=\"system-class-list\">System Class List</h2> <p>The following is a list of the core system files that are invoked every time CodeIgniter runs:</p> <ul class=\"simple\"> <li>Benchmark</li> <li>Config</li> <li>Controller</li> <li>Exceptions</li> <li>Hooks</li> <li>Input</li> <li>Language</li> <li>Loader</li> <li>Log</li> <li>Output</li> <li>Router</li> <li>Security</li> <li>URI</li> <li>Utf8</li> </ul>   <h2 id=\"replacing-core-classes\">Replacing Core Classes</h2> <p>To use one of your own system classes instead of a default one simply place your version inside your local <em>application/core/</em> directory:</p> <pre data-language=\"php\">application/core/some_class.php\n</pre> <p>If this directory does not exist you can create it.</p> <p>Any file named identically to one from the list above will be used instead of the one normally used.</p> <p>Please note that your class must use CI as a prefix. For example, if your file is named Input.php the class will be named:</p> <pre data-language=\"php\">class CI_Input {\n\n}\n</pre>   <h2 id=\"extending-core-class\">Extending Core Class</h2> <p>If all you need to do is add some functionality to an existing library - perhaps add a method or two - then it’s overkill to replace the entire library with your version. In this case it’s better to simply extend the class. Extending a class is nearly identical to replacing a class with a couple exceptions:</p> <ul class=\"simple\"> <li>The class declaration must extend the parent class.</li> <li>Your new class name and filename must be prefixed with MY_ (this item is configurable. See below.).</li> </ul> <p>For example, to extend the native Input class you’ll create a file named application/core/MY_Input.php, and declare your class with:</p> <pre data-language=\"php\">class MY_Input extends CI_Input {\n\n}\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>If you need to use a constructor in your class make sure you extend the parent constructor:</p> <pre data-language=\"php\">class MY_Input extends CI_Input {\n\n        public function __construct()\n        {\n                parent::__construct();\n        }\n}\n</pre> </div> <p><strong>Tip:</strong> Any functions in your class that are named identically to the methods in the parent class will be used instead of the native ones (this is known as “method overriding”). This allows you to substantially alter the CodeIgniter core.</p> <p>If you are extending the Controller core class, then be sure to extend your new class in your application controller’s constructors.</p> <pre data-language=\"php\">class Welcome extends MY_Controller {\n\n        public function __construct()\n        {\n                parent::__construct();\n        }\n\n        public function index()\n        {\n                $this-&gt;load-&gt;view('welcome_message');\n        }\n}\n</pre>  <h3 id=\"setting-your-own-prefix\">Setting Your Own Prefix</h3> <p>To set your own sub-class prefix, open your <em>application/config/config.php</em> file and look for this item:</p> <pre data-language=\"php\">$config['subclass_prefix'] = 'MY_';\n</pre> <p>Please note that all native CodeIgniter libraries are prefixed with CI_ so DO NOT use that as your prefix.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/general/core_classes.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/general/core_classes.html</a>\n  </p>\n</div>\n","general/helpers":"<h1 id=\"helper-functions\">Helper Functions</h1> <p>Helpers, as the name suggests, help you with tasks. Each helper file is simply a collection of functions in a particular category. There are <strong>URL Helpers</strong>, that assist in creating links, there are Form Helpers that help you create form elements, <strong>Text Helpers</strong> perform various text formatting routines, <strong>Cookie Helpers</strong> set and read cookies, File Helpers help you deal with files, etc.</p> <p>Unlike most other systems in CodeIgniter, Helpers are not written in an Object Oriented format. They are simple, procedural functions. Each helper function performs one specific task, with no dependence on other functions.</p> <p>CodeIgniter does not load Helper Files by default, so the first step in using a Helper is to load it. Once loaded, it becomes globally available in your <a class=\"reference internal\" href=\"controllers\">controller</a> and <a class=\"reference internal\" href=\"views\">views</a>.</p> <p>Helpers are typically stored in your <strong>system/helpers</strong>, or <strong>application/helpers directory</strong>. CodeIgniter will look first in your <strong>application/helpers directory</strong>. If the directory does not exist or the specified helper is not located there CI will instead look in your global <em>system/helpers/</em> directory.</p>  <h2 id=\"loading-a-helper\">Loading a Helper</h2> <p>Loading a helper file is quite simple using the following method:</p> <pre data-language=\"php\">$this-&gt;load-&gt;helper('name');\n</pre> <p>Where <strong>name</strong> is the file name of the helper, without the .php file extension or the “helper” part.</p> <p>For example, to load the <strong>URL Helper</strong> file, which is named <strong>url_helper.php</strong>, you would do this:</p> <pre data-language=\"php\">$this-&gt;load-&gt;helper('url');\n</pre> <p>A helper can be loaded anywhere within your controller methods (or even within your View files, although that’s not a good practice), as long as you load it before you use it. You can load your helpers in your controller constructor so that they become available automatically in any function, or you can load a helper in a specific function that needs it.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The Helper loading method above does not return a value, so don’t try to assign it to a variable. Just use it as shown.</p> </div>   <h2 id=\"loading-multiple-helpers\">Loading Multiple Helpers</h2> <p>If you need to load more than one helper you can specify them in an array, like this:</p> <pre data-language=\"php\">$this-&gt;load-&gt;helper(\n        array('helper1', 'helper2', 'helper3')\n);\n</pre>   <h2 id=\"auto-loading-helpers\">Auto-loading Helpers</h2> <p>If you find that you need a particular helper globally throughout your application, you can tell CodeIgniter to auto-load it during system initialization. This is done by opening the <strong>application/config/autoload.php</strong> file and adding the helper to the autoload array.</p>   <h2 id=\"using-a-helper\">Using a Helper</h2> <p>Once you’ve loaded the Helper File containing the function you intend to use, you’ll call it the way you would a standard PHP function.</p> <p>For example, to create a link using the <code>anchor()</code> function in one of your view files you would do this:</p> <pre data-language=\"php\">&lt;?php echo anchor('blog/comments', 'Click Here');?&gt;\n</pre> <p>Where “Click Here” is the name of the link, and “blog/comments” is the URI to the controller/method you wish to link to.</p>   <h2 id=\"extending-helpers\">“Extending” Helpers</h2> <p>To “extend” Helpers, create a file in your <strong>application/helpers/</strong> folder with an identical name to the existing Helper, but prefixed with <strong>MY_</strong> (this item is configurable. See below.).</p> <p>If all you need to do is add some functionality to an existing helper - perhaps add a function or two, or change how a particular helper function operates - then it’s overkill to replace the entire helper with your version. In this case it’s better to simply “extend” the Helper.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The term “extend” is used loosely since Helper functions are procedural and discrete and cannot be extended in the traditional programmatic sense. Under the hood, this gives you the ability to add to or or to replace the functions a Helper provides.</p> </div> <p>For example, to extend the native <strong>Array Helper</strong> you’ll create a file named <strong>application/helpers/MY_array_helper.php</strong>, and add or override functions:</p> <pre data-language=\"php\">// any_in_array() is not in the Array Helper, so it defines a new function\nfunction any_in_array($needle, $haystack)\n{\n        $needle = is_array($needle) ? $needle : array($needle);\n\n        foreach ($needle as $item)\n        {\n                if (in_array($item, $haystack))\n                {\n                        return TRUE;\n                }\n        }\n\n        return FALSE;\n}\n\n// random_element() is included in Array Helper, so it overrides the native function\nfunction random_element($array)\n{\n        shuffle($array);\n        return array_pop($array);\n}\n</pre>  <h3 id=\"setting-your-own-prefix\">Setting Your Own Prefix</h3> <p>The filename prefix for “extending” Helpers is the same used to extend libraries and core classes. To set your own prefix, open your <strong>application/config/config.php</strong> file and look for this item:</p> <pre data-language=\"php\">$config['subclass_prefix'] = 'MY_';\n</pre> <p>Please note that all native CodeIgniter libraries are prefixed with <strong>CI_</strong> so DO NOT use that as your prefix.</p>    <h2 id=\"now-what\">Now What?</h2> <p>In the Table of Contents you’ll find a list of all the available Helper Files. Browse each one to see what they do.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/general/helpers.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/general/helpers.html</a>\n  </p>\n</div>\n","general/views":"<h1 id=\"views\">Views</h1> <p>A view is simply a web page, or a page fragment, like a header, footer, sidebar, etc. In fact, views can flexibly be embedded within other views (within other views, etc., etc.) if you need this type of hierarchy.</p> <p>Views are never called directly, they must be loaded by a <a class=\"reference internal\" href=\"controllers\">controller</a>. Remember that in an MVC framework, the Controller acts as the traffic cop, so it is responsible for fetching a particular view. If you have not read the <a class=\"reference internal\" href=\"controllers\">Controllers</a> page you should do so before continuing.</p> <p>Using the example controller you created in the <a class=\"reference internal\" href=\"controllers\">controller</a> page, let’s add a view to it.</p>  <h2 id=\"creating-a-view\">Creating a View</h2> <p>Using your text editor, create a file called blogview.php, and put this in it:</p> <pre data-language=\"php\">&lt;html&gt;\n&lt;head&gt;\n        &lt;title&gt;My Blog&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n        &lt;h1&gt;Welcome to my Blog!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre> <p>Then save the file in your <em>application/views/</em> directory.</p>   <h2 id=\"loading-a-view\">Loading a View</h2> <p>To load a particular view file you will use the following method:</p> <pre data-language=\"php\">$this-&gt;load-&gt;view('name');\n</pre> <p>Where name is the name of your view file.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The .php file extension does not need to be specified unless you use something other than .php.</p> </div> <p>Now, open the controller file you made earlier called Blog.php, and replace the echo statement with the view loading method:</p> <pre data-language=\"php\">&lt;?php\nclass Blog extends CI_Controller {\n\n        public function index()\n        {\n                $this-&gt;load-&gt;view('blogview');\n        }\n}\n</pre> <p>If you visit your site using the URL you did earlier you should see your new view. The URL was similar to this:</p> <pre data-language=\"php\">example.com/index.php/blog/\n</pre>   <h2 id=\"loading-multiple-views\">Loading multiple views</h2> <p>CodeIgniter will intelligently handle multiple calls to <code>$this-&gt;load-&gt;view()</code> from within a controller. If more than one call happens they will be appended together. For example, you may wish to have a header view, a menu view, a content view, and a footer view. That might look something like this:</p> <pre data-language=\"php\">&lt;?php\n\nclass Page extends CI_Controller {\n\n        public function index()\n        {\n                $data['page_title'] = 'Your title';\n                $this-&gt;load-&gt;view('header');\n                $this-&gt;load-&gt;view('menu');\n                $this-&gt;load-&gt;view('content', $data);\n                $this-&gt;load-&gt;view('footer');\n        }\n\n}\n</pre> <p>In the example above, we are using “dynamically added data”, which you will see below.</p>   <h2 id=\"storing-views-within-sub-directories\">Storing Views within Sub-directories</h2> <p>Your view files can also be stored within sub-directories if you prefer that type of organization. When doing so you will need to include the directory name loading the view. Example:</p> <pre data-language=\"php\">$this-&gt;load-&gt;view('directory_name/file_name');\n</pre>   <h2 id=\"adding-dynamic-data-to-the-view\">Adding Dynamic Data to the View</h2> <p>Data is passed from the controller to the view by way of an <strong>array</strong> or an <strong>object</strong> in the second parameter of the view loading method. Here is an example using an array:</p> <pre data-language=\"php\">$data = array(\n        'title' =&gt; 'My Title',\n        'heading' =&gt; 'My Heading',\n        'message' =&gt; 'My Message'\n);\n\n$this-&gt;load-&gt;view('blogview', $data);\n</pre> <p>And here’s an example using an object:</p> <pre data-language=\"php\">$data = new Someclass();\n$this-&gt;load-&gt;view('blogview', $data);\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If you use an object, the class variables will be turned into array elements.</p> </div> <p>Let’s try it with your controller file. Open it add this code:</p> <pre data-language=\"php\">&lt;?php\nclass Blog extends CI_Controller {\n\n        public function index()\n        {\n                $data['title'] = \"My Real Title\";\n                $data['heading'] = \"My Real Heading\";\n\n                $this-&gt;load-&gt;view('blogview', $data);\n        }\n}\n</pre> <p>Now open your view file and change the text to variables that correspond to the array keys in your data:</p> <pre data-language=\"php\">&lt;html&gt;\n&lt;head&gt;\n        &lt;title&gt;&lt;?php echo $title;?&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n        &lt;h1&gt;&lt;?php echo $heading;?&gt;&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre> <p>Then load the page at the URL you’ve been using and you should see the variables replaced.</p>   <h2 id=\"creating-loops\">Creating Loops</h2> <p>The data array you pass to your view files is not limited to simple variables. You can pass multi dimensional arrays, which can be looped to generate multiple rows. For example, if you pull data from your database it will typically be in the form of a multi-dimensional array.</p> <p>Here’s a simple example. Add this to your controller:</p> <pre data-language=\"php\">&lt;?php\nclass Blog extends CI_Controller {\n\n        public function index()\n        {\n                $data['todo_list'] = array('Clean House', 'Call Mom', 'Run Errands');\n\n                $data['title'] = \"My Real Title\";\n                $data['heading'] = \"My Real Heading\";\n\n                $this-&gt;load-&gt;view('blogview', $data);\n        }\n}\n</pre> <p>Now open your view file and create a loop:</p> <pre data-language=\"php\">&lt;html&gt;\n&lt;head&gt;\n        &lt;title&gt;&lt;?php echo $title;?&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n        &lt;h1&gt;&lt;?php echo $heading;?&gt;&lt;/h1&gt;\n\n        &lt;h3&gt;My Todo List&lt;/h3&gt;\n\n        &lt;ul&gt;\n        &lt;?php foreach ($todo_list as $item):?&gt;\n\n                &lt;li&gt;&lt;?php echo $item;?&gt;&lt;/li&gt;\n\n        &lt;?php endforeach;?&gt;\n        &lt;/ul&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">You’ll notice that in the example above we are using PHP’s alternative syntax. If you are not familiar with it you can read about it <a class=\"reference internal\" href=\"alternative_php\">here</a>.</p> </div>   <h2 id=\"returning-views-as-data\">Returning views as data</h2> <p>There is a third <strong>optional</strong> parameter lets you change the behavior of the method so that it returns data as a string rather than sending it to your browser. This can be useful if you want to process the data in some way. If you set the parameter to TRUE (boolean) it will return data. The default behavior is false, which sends it to your browser. Remember to assign it to a variable if you want the data returned:</p> <pre data-language=\"php\">$string = $this-&gt;load-&gt;view('myfile', '', TRUE);\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/general/views.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/general/views.html</a>\n  </p>\n</div>\n","general/models":"<h1 id=\"models\">Models</h1> <p>Models are <strong>optionally</strong> available for those who want to use a more traditional MVC approach.</p>  <p class=\"topic-title first\">Page Contents</p> <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#models\" id=\"id1\">Models</a><ul> <li><a class=\"reference internal\" href=\"#what-is-a-model\" id=\"id2\">What is a Model?</a></li> <li><a class=\"reference internal\" href=\"#anatomy-of-a-model\" id=\"id3\">Anatomy of a Model</a></li> <li><a class=\"reference internal\" href=\"#loading-a-model\" id=\"id4\">Loading a Model</a></li> <li><a class=\"reference internal\" href=\"#auto-loading-models\" id=\"id5\">Auto-loading Models</a></li> <li><a class=\"reference internal\" href=\"#connecting-to-your-database\" id=\"id6\">Connecting to your Database</a></li> </ul> </li> </ul>   <h2 id=\"what-is-a-model\">What is a Model?</h2> <p>Models are PHP classes that are designed to work with information in your database. For example, let’s say you use CodeIgniter to manage a blog. You might have a model class that contains functions to insert, update, and retrieve your blog data. Here is an example of what such a model class might look like:</p> <pre data-language=\"php\">class Blog_model extends CI_Model {\n\n        public $title;\n        public $content;\n        public $date;\n\n        public function __construct()\n        {\n                // Call the CI_Model constructor\n                parent::__construct();\n        }\n\n        public function get_last_ten_entries()\n        {\n                $query = $this-&gt;db-&gt;get('entries', 10);\n                return $query-&gt;result();\n        }\n\n        public function insert_entry()\n        {\n                $this-&gt;title    = $_POST['title']; // please read the below note\n                $this-&gt;content  = $_POST['content'];\n                $this-&gt;date     = time();\n\n                $this-&gt;db-&gt;insert('entries', $this);\n        }\n\n        public function update_entry()\n        {\n                $this-&gt;title    = $_POST['title'];\n                $this-&gt;content  = $_POST['content'];\n                $this-&gt;date     = time();\n\n                $this-&gt;db-&gt;update('entries', $this, array('id' =&gt; $_POST['id']));\n        }\n\n}\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The methods in the above example use the <a class=\"reference internal\" href=\"../database/query_builder\">Query Builder</a> database methods.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">For the sake of simplicity in this example we’re using <code>$_POST</code> directly. This is generally bad practice, and a more common approach would be to use the <a class=\"reference internal\" href=\"../libraries/input\">Input Library</a> <code>$this-&gt;input-&gt;post('title')</code>.</p> </div>   <h2 id=\"anatomy-of-a-model\">Anatomy of a Model</h2> <p>Model classes are stored in your <strong>application/models/</strong> directory. They can be nested within sub-directories if you want this type of organization.</p> <p>The basic prototype for a model class is this:</p> <pre data-language=\"php\">class Model_name extends CI_Model {\n\n        public function __construct()\n        {\n                parent::__construct();\n        }\n\n}\n</pre> <p>Where <strong>Model_name</strong> is the name of your class. Class names <strong>must</strong> have the first letter capitalized with the rest of the name lowercase. Make sure your class extends the base Model class.</p> <p>The file name must match the class name. For example, if this is your class:</p> <pre data-language=\"php\">class User_model extends CI_Model {\n\n        public function __construct()\n        {\n                parent::__construct();\n        }\n\n}\n</pre> <p>Your file will be this:</p> <pre data-language=\"php\">application/models/User_model.php\n</pre>   <h2 id=\"loading-a-model\">Loading a Model</h2> <p>Your models will typically be loaded and called from within your <a class=\"reference internal\" href=\"controllers\">controller</a> methods. To load a model you will use the following method:</p> <pre data-language=\"php\">$this-&gt;load-&gt;model('model_name');\n</pre> <p>If your model is located in a sub-directory, include the relative path from your models directory. For example, if you have a model located at <em>application/models/blog/Queries.php</em> you’ll load it using:</p> <pre data-language=\"php\">$this-&gt;load-&gt;model('blog/queries');\n</pre> <p>Once loaded, you will access your model methods using an object with the same name as your class:</p> <pre data-language=\"php\">$this-&gt;load-&gt;model('model_name');\n\n$this-&gt;model_name-&gt;method();\n</pre> <p>If you would like your model assigned to a different object name you can specify it via the second parameter of the loading method:</p> <pre data-language=\"php\">$this-&gt;load-&gt;model('model_name', 'foobar');\n\n$this-&gt;foobar-&gt;method();\n</pre> <p>Here is an example of a controller, that loads a model, then serves a view:</p> <pre data-language=\"php\">class Blog_controller extends CI_Controller {\n\n        public function blog()\n        {\n                $this-&gt;load-&gt;model('blog');\n\n                $data['query'] = $this-&gt;blog-&gt;get_last_ten_entries();\n\n                $this-&gt;load-&gt;view('blog', $data);\n        }\n}\n</pre>   <h2 id=\"auto-loading-models\">Auto-loading Models</h2> <p>If you find that you need a particular model globally throughout your application, you can tell CodeIgniter to auto-load it during system initialization. This is done by opening the <strong>application/config/autoload.php</strong> file and adding the model to the autoload array.</p>   <h2 id=\"connecting-to-your-database\">Connecting to your Database</h2> <p>When a model is loaded it does <strong>NOT</strong> connect automatically to your database. The following options for connecting are available to you:</p> <ul> <li>You can connect using the standard database methods <a class=\"reference internal\" href=\"../database/connecting\">described here</a>, either from within your Controller class or your Model class. </li> <li>\n<p class=\"first\">You can tell the model loading method to auto-connect by passing TRUE (boolean) via the third parameter, and connectivity settings, as defined in your database config file will be used:</p> <pre data-language=\"php\">$this-&gt;load-&gt;model('model_name', '', TRUE);\n</pre> </li> <li>\n<p class=\"first\">You can manually pass database connectivity settings via the third parameter:</p> <pre data-language=\"php\">$config['hostname'] = 'localhost';\n$config['username'] = 'myusername';\n$config['password'] = 'mypassword';\n$config['database'] = 'mydatabase';\n$config['dbdriver'] = 'mysqli';\n$config['dbprefix'] = '';\n$config['pconnect'] = FALSE;\n$config['db_debug'] = TRUE;\n\n$this-&gt;load-&gt;model('model_name', '', $config);\n</pre> </li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/general/models.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/general/models.html</a>\n  </p>\n</div>\n","general/environments":"<h1 id=\"handling-multiple-environments\">Handling Multiple Environments</h1> <p>Developers often desire different system behavior depending on whether an application is running in a development or production environment. For example, verbose error output is something that would be useful while developing an application, but it may also pose a security issue when “live”.</p>  <h2 id=\"the-environment-constant\">The ENVIRONMENT Constant</h2> <p>By default, CodeIgniter comes with the environment constant set to use the value provided in <code>$_SERVER['CI_ENV']</code>, otherwise defaults to ‘development’. At the top of index.php, you will see:</p> <pre data-language=\"php\">define('ENVIRONMENT', isset($_SERVER['CI_ENV']) ? $_SERVER['CI_ENV'] : 'development');\n</pre> <p>This server variable can be set in your .htaccess file, or Apache config using <a class=\"reference external\" href=\"https://httpd.apache.org/docs/2.2/mod/mod_env.html#setenv\">SetEnv</a>. Alternative methods are available for nginx and other servers, or you can remove this logic entirely and set the constant based on the server’s IP address.</p> <p>In addition to affecting some basic framework behavior (see the next section), you may use this constant in your own development to differentiate between which environment you are running in.</p>   <h2 id=\"effects-on-default-framework-behavior\">Effects On Default Framework Behavior</h2> <p>There are some places in the CodeIgniter system where the ENVIRONMENT constant is used. This section describes how default framework behavior is affected.</p>  <h3 id=\"error-reporting\">Error Reporting</h3> <p>Setting the ENVIRONMENT constant to a value of ‘development’ will cause all PHP errors to be rendered to the browser when they occur. Conversely, setting the constant to ‘production’ will disable all error output. Disabling error reporting in production is a <a class=\"reference internal\" href=\"security\">good security practice</a>.</p>   <h3 id=\"configuration-files\">Configuration Files</h3> <p>Optionally, you can have CodeIgniter load environment-specific configuration files. This may be useful for managing things like differing API keys across multiple environments. This is described in more detail in the environment section of the <a class=\"reference internal\" href=\"../libraries/config\">Config Class</a> documentation.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/general/environments.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/general/environments.html</a>\n  </p>\n</div>\n","general/hooks":"<h1 id=\"hooks-extending-the-framework-core\">Hooks - Extending the Framework Core</h1> <p>CodeIgniter’s Hooks feature provides a means to tap into and modify the inner workings of the framework without hacking the core files. When CodeIgniter runs it follows a specific execution process, diagramed in the <a class=\"reference internal\" href=\"../overview/appflow\">Application Flow</a> page. There may be instances, however, where you’d like to cause some action to take place at a particular stage in the execution process. For example, you might want to run a script right before your controllers get loaded, or right after, or you might want to trigger one of your own scripts in some other location.</p>  <h2 id=\"enabling-hooks\">Enabling Hooks</h2> <p>The hooks feature can be globally enabled/disabled by setting the following item in the <strong>application/config/config.php</strong> file:</p> <pre data-language=\"php\">$config['enable_hooks'] = TRUE;\n</pre>   <h2 id=\"defining-a-hook\">Defining a Hook</h2> <p>Hooks are defined in the <strong>application/config/hooks.php</strong> file. Each hook is specified as an array with this prototype:</p> <pre data-language=\"php\">$hook['pre_controller'] = array(\n        'class'    =&gt; 'MyClass',\n        'function' =&gt; 'Myfunction',\n        'filename' =&gt; 'Myclass.php',\n        'filepath' =&gt; 'hooks',\n        'params'   =&gt; array('beer', 'wine', 'snacks')\n);\n</pre> <p><strong>Notes:</strong></p> <p>The array index correlates to the name of the particular hook point you want to use. In the above example the hook point is pre_controller. A list of hook points is found below. The following items should be defined in your associative hook array:</p> <ul class=\"simple\"> <li>\n<strong>class</strong> The name of the class you wish to invoke. If you prefer to use a procedural function instead of a class, leave this item blank.</li> <li>\n<strong>function</strong> The function (or method) name you wish to call.</li> <li>\n<strong>filename</strong> The file name containing your class/function.</li> <li>\n<strong>filepath</strong> The name of the directory containing your script. Note: Your script must be located in a directory INSIDE your <em>application/</em> directory, so the file path is relative to that directory. For example, if your script is located in <em>application/hooks/</em>, you will simply use ‘hooks’ as your filepath. If your script is located in <em>application/hooks/utilities/</em> you will use ‘hooks/utilities’ as your filepath. No trailing slash.</li> <li>\n<strong>params</strong> Any parameters you wish to pass to your script. This item is optional.</li> </ul> <p>If you’re running PHP 5.3+, you can also use lambda/anoymous functions (or closures) as hooks, with a simpler syntax:</p> <pre data-language=\"php\">$hook['post_controller'] = function()\n{\n        /* do something here */\n};\n</pre>   <h2 id=\"multiple-calls-to-the-same-hook\">Multiple Calls to the Same Hook</h2> <p>If want to use the same hook point with more than one script, simply make your array declaration multi-dimensional, like this:</p> <pre data-language=\"php\">$hook['pre_controller'][] = array(\n        'class'    =&gt; 'MyClass',\n        'function' =&gt; 'MyMethod',\n        'filename' =&gt; 'Myclass.php',\n        'filepath' =&gt; 'hooks',\n        'params'   =&gt; array('beer', 'wine', 'snacks')\n);\n\n$hook['pre_controller'][] = array(\n        'class'    =&gt; 'MyOtherClass',\n        'function' =&gt; 'MyOtherMethod',\n        'filename' =&gt; 'Myotherclass.php',\n        'filepath' =&gt; 'hooks',\n        'params'   =&gt; array('red', 'yellow', 'blue')\n);\n</pre> <p>Notice the brackets after each array index:</p> <pre data-language=\"php\">$hook['pre_controller'][]\n</pre> <p>This permits you to have the same hook point with multiple scripts. The order you define your array will be the execution order.</p>   <h2 id=\"hook-points\">Hook Points</h2> <p>The following is a list of available hook points.</p> <ul class=\"simple\"> <li>\n<strong>pre_system</strong> Called very early during system execution. Only the benchmark and hooks class have been loaded at this point. No routing or other processes have happened.</li> <li>\n<strong>pre_controller</strong> Called immediately prior to any of your controllers being called. All base classes, routing, and security checks have been done.</li> <li>\n<strong>post_controller_constructor</strong> Called immediately after your controller is instantiated, but prior to any method calls happening.</li> <li>\n<strong>post_controller</strong> Called immediately after your controller is fully executed.</li> <li>\n<strong>display_override</strong> Overrides the <code>_display()</code> method, used to send the finalized page to the web browser at the end of system execution. This permits you to use your own display methodology. Note that you will need to reference the CI superobject with <code>$this-&gt;CI =&amp; get_instance()</code> and then the finalized data will be available by calling <code>$this-&gt;CI-&gt;output-&gt;get_output()</code>.</li> <li>\n<strong>cache_override</strong> Enables you to call your own method instead of the <code>_display_cache()</code> method in the <a class=\"reference internal\" href=\"../libraries/output\">Output Library</a>. This permits you to use your own cache display mechanism.</li> <li>\n<strong>post_system</strong> Called after the final rendered page is sent to the browser, at the end of system execution after the finalized data is sent to the browser.</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/general/hooks.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/general/hooks.html</a>\n  </p>\n</div>\n","general/alternative_php":"<h1 id=\"alternate-php-syntax-for-view-files\">Alternate PHP Syntax for View Files</h1> <p>If you do not utilize CodeIgniter’s <a class=\"reference internal\" href=\"../libraries/parser\">template engine</a>, you’ll be using pure PHP in your View files. To minimize the PHP code in these files, and to make it easier to identify the code blocks it is recommended that you use PHPs alternative syntax for control structures and short tag echo statements. If you are not familiar with this syntax, it allows you to eliminate the braces from your code, and eliminate “echo” statements.</p>  <h2 id=\"automatic-short-tag-support\">Automatic Short Tag Support</h2> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If you find that the syntax described in this page does not work on your server it might be that “short tags” are disabled in your PHP ini file. CodeIgniter will optionally rewrite short tags on-the-fly, allowing you to use that syntax even if your server doesn’t support it. This feature can be enabled in your <em>config/config.php</em> file.</p> </div> <p>Please note that if you do use this feature, if PHP errors are encountered in your <strong>view files</strong>, the error message and line number will not be accurately shown. Instead, all errors will be shown as <code>eval()</code> errors.</p>   <h2 id=\"alternative-echos\">Alternative Echos</h2> <p>Normally to echo, or print out a variable you would do this:</p> <pre data-language=\"php\">&lt;?php echo $variable; ?&gt;\n</pre> <p>With the alternative syntax you can instead do it this way:</p> <pre data-language=\"php\">&lt;?=$variable?&gt;\n</pre>   <h2 id=\"alternative-control-structures\">Alternative Control Structures</h2> <p>Controls structures, like if, for, foreach, and while can be written in a simplified format as well. Here is an example using <code>foreach</code>:</p> <pre data-language=\"php\">&lt;ul&gt;\n\n&lt;?php foreach ($todo as $item): ?&gt;\n\n        &lt;li&gt;&lt;?=$item?&gt;&lt;/li&gt;\n\n&lt;?php endforeach; ?&gt;\n\n&lt;/ul&gt;\n</pre> <p>Notice that there are no braces. Instead, the end brace is replaced with <code>endforeach</code>. Each of the control structures listed above has a similar closing syntax: <code>endif</code>, <code>endfor</code>, <code>endforeach</code>, and <code>endwhile</code></p> <p>Also notice that instead of using a semicolon after each structure (except the last one), there is a colon. This is important!</p> <p>Here is another example, using <code>if</code>/<code>elseif</code>/<code>else</code>. Notice the colons:</p> <pre data-language=\"php\">&lt;?php if ($username === 'sally'): ?&gt;\n\n        &lt;h3&gt;Hi Sally&lt;/h3&gt;\n\n&lt;?php elseif ($username === 'joe'): ?&gt;\n\n        &lt;h3&gt;Hi Joe&lt;/h3&gt;\n\n&lt;?php else: ?&gt;\n\n        &lt;h3&gt;Hi unknown user&lt;/h3&gt;\n\n&lt;?php endif; ?&gt;\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/general/alternative_php.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/general/alternative_php.html</a>\n  </p>\n</div>\n","general/security":"<h1 id=\"security\">Security</h1> <p>This page describes some “best practices” regarding web security, and details CodeIgniter’s internal security features.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If you came here looking for a security contact, please refer to our <cite>Contribution Guide &lt;../contributing/index&gt;</cite>.</p> </div>  <h2 id=\"uri-security\">URI Security</h2> <p>CodeIgniter is fairly restrictive regarding which characters it allows in your URI strings in order to help minimize the possibility that malicious data can be passed to your application. URIs may only contain the following:</p> <ul class=\"simple\"> <li>Alpha-numeric text (latin characters only)</li> <li>Tilde: ~</li> <li>Percent sign: %</li> <li>Period: .</li> <li>Colon: :</li> <li>Underscore: _</li> <li>Dash: -</li> <li>Space</li> </ul>   <h2 id=\"register-globals\">Register_globals</h2> <p>During system initialization all global variables that are found to exist in the <code>$_GET</code>, <code>$_POST</code>, <code>$_REQUEST</code> and <code>$_COOKIE</code> are unset.</p> <p>The unsetting routine is effectively the same as <em>register_globals = off</em>.</p>   <h2 id=\"display-errors\">display_errors</h2> <p>In production environments, it is typically desirable to “disable” PHP’s error reporting by setting the internal <em>display_errors</em> flag to a value of 0. This disables native PHP errors from being rendered as output, which may potentially contain sensitive information.</p> <p>Setting CodeIgniter’s <strong>ENVIRONMENT</strong> constant in index.php to a value of <strong>‘production’</strong> will turn off these errors. In development mode, it is recommended that a value of ‘development’ is used. More information about differentiating between environments can be found on the <a class=\"reference internal\" href=\"environments\">Handling Environments</a> page.</p>   <h2 id=\"magic-quotes-runtime\">magic_quotes_runtime</h2> <p>The <em>magic_quotes_runtime</em> directive is turned off during system initialization so that you don’t have to remove slashes when retrieving data from your database.</p>  <h3 id=\"best-practices\">Best Practices</h3> <p>Before accepting any data into your application, whether it be POST data from a form submission, COOKIE data, URI data, XML-RPC data, or even data from the SERVER array, you are encouraged to practice this three step approach:</p> <ol class=\"arabic simple\"> <li>Validate the data to ensure it conforms to the correct type, length, size, etc.</li> <li>Filter the data as if it were tainted.</li> <li>Escape the data before submitting it into your database or outputting it to a browser.</li> </ol> <p>CodeIgniter provides the following functions and tips to assist you in this process:</p>    <h2 id=\"xss-filtering\">XSS Filtering</h2> <p>CodeIgniter comes with a Cross Site Scripting filter. This filter looks for commonly used techniques to embed malicious JavaScript into your data, or other types of code that attempt to hijack cookies or do other malicious things. The XSS Filter is described <a class=\"reference internal\" href=\"../libraries/security\">here</a>.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">XSS filtering should <em>only be performed on output</em>. Filtering input data may modify the data in undesirable ways, including stripping special characters from passwords, which reduces security instead of improving it.</p> </div>   <h2 id=\"csrf-protection\">CSRF protection</h2> <p>CSRF stands for Cross-Site Request Forgery, which is the process of an attacker tricking their victim into unknowingly submitting a request.</p> <p>CodeIgniter provides CSRF protection out of the box, which will get automatically triggered for every non-GET HTTP request, but also needs you to create your submit forms in a certain way. This is explained in the <a class=\"reference internal\" href=\"../libraries/security\">Security Library</a> documentation.</p>   <h2 id=\"password-handling\">Password handling</h2> <p>It is <em>critical</em> that you handle passwords in your application properly.</p> <p>Unfortunately, many developers don’t know how to do that, and the web is full of outdated or otherwise wrongful advices, which doesn’t help.</p> <p>We would like to give you a list of combined do’s and don’ts to help you with that. Please read below.</p> <ul> <li>\n<p class=\"first\">DO NOT store passwords in plain-text format.</p> <p>Always <strong>hash</strong> your passwords.</p> </li> <li>\n<p class=\"first\">DO NOT use Base64 or similar encoding for storing passwords.</p> <p>This is as good as storing them in plain-text. Really. Do <strong>hashing</strong>, not <em>encoding</em>.</p> <p>Encoding, and encryption too, are two-way processes. Passwords are secrets that must only be known to their owner, and thus must work only in one direction. Hashing does that - there’s <em>no</em> un-hashing or de-hashing, but there is decoding and decryption.</p> </li> <li>\n<p class=\"first\">DO NOT use weak or broken hashing algorithms like MD5 or SHA1.</p> <p>These algorithms are old, proven to be flawed, and not designed for password hashing in the first place.</p> <p>Also, DON’T invent your own algorithms.</p> <p>Only use strong password hashing algorithms like BCrypt, which is used in PHP’s own <a class=\"reference external\" href=\"http://php.net/password\">Password Hashing</a> functions.</p> <p>Please use them, even if you’re not running PHP 5.5+, CodeIgniter provides them for you as long as you’re running at least PHP version 5.3.7 (and if you don’t meet that requirement - please, upgrade).</p> <p>If you’re one of the really unlucky people who can’t even upgrade to a more recent PHP version, use <cite>hash_pbkdf() &lt;http://php.net/hash_pbkdf2&gt;</cite>, which we also provide in our compatibility layer.</p> </li> <li>\n<p class=\"first\">DO NOT ever display or send a password in plain-text format!</p> <p>Even to the password’s owner, if you need a “Forgotten password” feature, just randomly generate a new, one-time (this is also important) password and send that instead.</p> </li> <li>\n<p class=\"first\">DO NOT put unnecessary limits on your users’ passwords.</p> <p>If you’re using a hashing algorithm other than BCrypt (which has a limit of 72 characters), you should set a relatively high limit on password lengths in order to mitigate DoS attacks - say, 1024 characters.</p> <p>Other than that however, there’s no point in forcing a rule that a password can only be up to a number of characters, or that it can’t contain a certain set of special characters.</p> <p>Not only does this <strong>reduce</strong> security instead of improving it, but there’s literally no reason to do it. No technical limitations and no (practical) storage constraints apply once you’ve hashed them, none!</p> </li> </ul>   <h2 id=\"validate-input-data\">Validate input data</h2> <p>CodeIgniter has a <a class=\"reference internal\" href=\"../libraries/form_validation\">Form Validation Library</a> that assists you in validating, filtering, and prepping your data.</p> <p>Even if that doesn’t work for your use case however, be sure to always validate and sanitize all input data. For example, if you expect a numeric string for an input variable, you can check for that with <code>is_numeric()</code> or <code>ctype_digit()</code>. Always try to narrow down your checks to a certain pattern.</p> <p>Have it in mind that this includes not only <code>$_POST</code> and <code>$_GET</code> variables, but also cookies, the user-agent string and basically <em>all data that is not created directly by your own code</em>.</p>   <h2 id=\"escape-all-data-before-database-insertion\">Escape all data before database insertion</h2> <p>Never insert information into your database without escaping it. Please see the section that discusses <a class=\"reference internal\" href=\"../database/queries\">database queries</a> for more information.</p>   <h2 id=\"hide-your-files\">Hide your files</h2> <p>Another good security practice is to only leave your <em>index.php</em> and “assets” (e.g. .js, css and image files) under your server’s <em>webroot</em> directory (most commonly named “htdocs/”). These are the only files that you would need to be accessible from the web.</p> <p>Allowing your visitors to see anything else would potentially allow them to access sensitive data, execute scripts, etc.</p> <p>If you’re not allowed to do that, you can try using a .htaccess file to restrict access to those resources.</p> <p>CodeIgniter will have an index.html file in all of its directories in an attempt to hide some of this data, but have it in mind that this is not enough to prevent a serious attacker.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/general/security.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/general/security.html</a>\n  </p>\n</div>\n","general/errors":"<h1 id=\"error-handling\">Error Handling</h1> <p>CodeIgniter lets you build error reporting into your applications using the functions described below. In addition, it has an error logging class that permits error and debugging messages to be saved as text files.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">By default, CodeIgniter displays all PHP errors. You might wish to change this behavior once your development is complete. You’ll find the error_reporting() function located at the top of your main index.php file. Disabling error reporting will NOT prevent log files from being written if there are errors.</p> </div> <p>Unlike most systems in CodeIgniter, the error functions are simple procedural interfaces that are available globally throughout the application. This approach permits error messages to get triggered without having to worry about class/function scoping.</p> <p>CodeIgniter also returns a status code whenever a portion of the core calls <code>exit()</code>. This exit status code is separate from the HTTP status code, and serves as a notice to other processes that may be watching of whether the script completed successfully, or if not, what kind of problem it encountered that caused it to abort. These values are defined in <em>application/config/constants.php</em>. While exit status codes are most useful in CLI settings, returning the proper code helps server software keep track of your scripts and the health of your application.</p> <p>The following functions let you generate errors:</p> <dl class=\"function\"> <dt id=\"show_error\">\n<code>show_error($message, $status_code, $heading = 'An Error Was Encountered')</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$message</strong> (<em>mixed</em>) – Error message</li> <li>\n<strong>$status_code</strong> (<em>int</em>) – HTTP Response status code</li> <li>\n<strong>$heading</strong> (<em>string</em>) – Error page heading</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>This function will display the error message supplied to it using the error template appropriate to your execution:</p> <pre data-language=\"php\">application/views/errors/html/error_general.php\n</pre> <p>or:</p>  application/views/errors/cli/error_general.php <p>The optional parameter <code>$status_code</code> determines what HTTP status code should be sent with the error. If <code>$status_code</code> is less than 100, the HTTP status code will be set to 500, and the exit status code will be set to <code>$status_code + EXIT__AUTO_MIN</code>. If that value is larger than <code>EXIT__AUTO_MAX</code>, or if <code>$status_code</code> is 100 or higher, the exit status code will be set to <code>EXIT_ERROR</code>. You can check in <em>application/config/constants.php</em> for more detail.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"show_404\">\n<code>show_404($page = '', $log_error = TRUE)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$page</strong> (<em>string</em>) – URI string</li> <li>\n<strong>$log_error</strong> (<em>bool</em>) – Whether to log the error</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>This function will display the 404 error message supplied to it using the error template appropriate to your execution:</p> <pre data-language=\"php\">application/views/errors/html/error_404.php\n</pre> <p>or:</p>  application/views/errors/cli/error_404.php <p>The function expects the string passed to it to be the file path to the page that isn’t found. The exit status code will be set to <code>EXIT_UNKNOWN_FILE</code>. Note that CodeIgniter automatically shows 404 messages if controllers are not found.</p> <p>CodeIgniter automatically logs any <code>show_404()</code> calls. Setting the optional second parameter to FALSE will skip logging.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"log_message\">\n<code>log_message($level, $message)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$level</strong> (<em>string</em>) – Log level: ‘error’, ‘debug’ or ‘info’</li> <li>\n<strong>$message</strong> (<em>string</em>) – Message to log</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>This function lets you write messages to your log files. You must supply one of three “levels” in the first parameter, indicating what type of message it is (debug, error, info), with the message itself in the second parameter.</p> <p>Example:</p> <pre data-language=\"php\">if ($some_var == '')\n{\n        log_message('error', 'Some variable did not contain a value.');\n}\nelse\n{\n        log_message('debug', 'Some variable was correctly set');\n}\n\nlog_message('info', 'The purpose of some variable is to provide some value.');\n</pre> <p>There are three message types:</p> <ol class=\"arabic simple\"> <li>Error Messages. These are actual errors, such as PHP errors or user errors.</li> <li>Debug Messages. These are messages that assist in debugging. For example, if a class has been initialized, you could log this as debugging info.</li> <li>Informational Messages. These are the lowest priority messages, simply giving information regarding some process.</li> </ol> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In order for the log file to actually be written, the <em>logs/</em> directory must be writable. In addition, you must set the “threshold” for logging in <em>application/config/config.php</em>. You might, for example, only want error messages to be logged, and not the other two types. If you set it to zero logging will be disabled.</p> </div> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/general/errors.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/general/errors.html</a>\n  </p>\n</div>\n","general/libraries":"<h1 id=\"using-codeigniter-libraries\">Using CodeIgniter Libraries</h1> <p>All of the available libraries are located in your <em>system/libraries/</em> directory. In most cases, to use one of these classes involves initializing it within a <a class=\"reference internal\" href=\"controllers\">controller</a> using the following initialization method:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('class_name');\n</pre> <p>Where ‘class_name’ is the name of the class you want to invoke. For example, to load the <a class=\"reference internal\" href=\"../libraries/form_validation\">Form Validation Library</a> you would do this:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('form_validation');\n</pre> <p>Once initialized you can use it as indicated in the user guide page corresponding to that class.</p> <p>Additionally, multiple libraries can be loaded at the same time by passing an array of libraries to the load method.</p> <p>Example:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library(array('email', 'table'));\n</pre>  <h2 id=\"creating-your-own-libraries\">Creating Your Own Libraries</h2> <p>Please read the section of the user guide that discusses how to <a class=\"reference internal\" href=\"creating_libraries\">create your own libraries</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/general/libraries.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/general/libraries.html</a>\n  </p>\n</div>\n","libraries/encrypt":"<h1 id=\"encrypt-class\">Encrypt Class</h1> <p>The Encrypt Class provides two-way data encryption. It encrypted using the Mcrypt PHP extension, which is required for the Encrypt Class to run.</p> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">This library has been DEPRECATED and is only kept for backwards compatibility. Please use the new <a class=\"reference internal\" href=\"encryption\">Encryption Library</a>.</p> </div>  <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#using-the-encrypt-library\" id=\"id1\">Using the Encrypt Library</a><ul> <li><a class=\"reference internal\" href=\"#setting-your-key\" id=\"id2\">Setting your Key</a></li> <li><a class=\"reference internal\" href=\"#message-length\" id=\"id3\">Message Length</a></li> <li><a class=\"reference internal\" href=\"#initializing-the-class\" id=\"id4\">Initializing the Class</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#class-reference\" id=\"id5\">Class Reference</a></li> </ul>   <h2 id=\"using-the-encrypt-library\">Using the Encrypt Library</h2>  <h3 id=\"setting-your-key\">Setting your Key</h3> <p>A <em>key</em> is a piece of information that controls the cryptographic process and permits an encrypted string to be decoded. In fact, the key you chose will provide the <strong>only</strong> means to decode data that was encrypted with that key, so not only must you choose the key carefully, you must never change it if you intend use it for persistent data.</p> <p>It goes without saying that you should guard your key carefully. Should someone gain access to your key, the data will be easily decoded. If your server is not totally under your control it’s impossible to ensure key security so you may want to think carefully before using it for anything that requires high security, like storing credit card numbers.</p> <p>To take maximum advantage of the encryption algorithm, your key should be 32 characters in length (256 bits). The key should be as random a string as you can concoct, with numbers and uppercase and lowercase letters. Your key should <strong>not</strong> be a simple text string. In order to be cryptographically secure it needs to be as random as possible.</p> <p>Your key can be either stored in your <strong>application/config/config.php</strong>, or you can design your own storage mechanism and pass the key dynamically when encoding/decoding.</p> <p>To save your key to your <strong>application/config/config.php</strong>, open the file and set:</p> <pre data-language=\"php\">$config['encryption_key'] = \"YOUR KEY\";\n</pre>   <h3 id=\"message-length\">Message Length</h3> <p>It’s important for you to know that the encoded messages the encryption function generates will be approximately 2.6 times longer than the original message. For example, if you encrypt the string “my super secret data”, which is 21 characters in length, you’ll end up with an encoded string that is roughly 55 characters (we say “roughly” because the encoded string length increments in 64 bit clusters, so it’s not exactly linear). Keep this information in mind when selecting your data storage mechanism. Cookies, for example, can only hold 4K of information.</p>   <h3 id=\"initializing-the-class\">Initializing the Class</h3> <p>Like most other classes in CodeIgniter, the Encrypt class is initialized in your controller using the <code>$this-&gt;load-&gt;library()</code> method:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('encrypt');\n</pre> <p>Once loaded, the Encrypt library object will be available using:</p> <pre data-language=\"php\">$this-&gt;encrypt\n</pre>    <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_Encrypt\">\n<code>class CI_Encrypt</code> </dt> <dd>\n<dl class=\"method\"> <dt id=\"CI_Encrypt::encode\">\n<code>encode($string[, $key = ''])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$string</strong> (<em>string</em>) – Data to encrypt</li> <li>\n<strong>$key</strong> (<em>string</em>) – Encryption key</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Encrypted string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Performs the data encryption and returns it as a string. Example:</p> <pre data-language=\"php\">$msg = 'My secret message';\n\n$encrypted_string = $this-&gt;encrypt-&gt;encode($msg);\n</pre> <p>You can optionally pass your encryption key via the second parameter if you don’t want to use the one in your config file:</p> <pre data-language=\"php\">$msg = 'My secret message';\n$key = 'super-secret-key';\n\n$encrypted_string = $this-&gt;encrypt-&gt;encode($msg, $key);\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Encrypt::decode\">\n<code>decode($string[, $key = ''])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$string</strong> (<em>string</em>) – String to decrypt</li> <li>\n<strong>$key</strong> (<em>string</em>) – Encryption key</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Plain-text string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Decrypts an encoded string. Example:</p> <pre data-language=\"php\">$encrypted_string = 'APANtByIGI1BpVXZTJgcsAG8GZl8pdwwa84';\n\n$plaintext_string = $this-&gt;encrypt-&gt;decode($encrypted_string);\n</pre> <p>You can optionally pass your encryption key via the second parameter if you don’t want to use the one in your config file:</p> <pre data-language=\"php\">$msg = 'My secret message';\n$key = 'super-secret-key';\n\n$encrypted_string = $this-&gt;encrypt-&gt;decode($msg, $key);\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Encrypt::set_cipher\">\n<code>set_cipher($cipher)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$cipher</strong> (<em>int</em>) – Valid PHP MCrypt cypher constant</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Encrypt instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Encrypt</p> </td> </tr>  </table> <p>Permits you to set an Mcrypt cipher. By default it uses <code>MCRYPT_RIJNDAEL_256</code>. Example:</p> <pre data-language=\"php\">$this-&gt;encrypt-&gt;set_cipher(MCRYPT_BLOWFISH);\n</pre> <p>Please visit php.net for a list of <a class=\"reference external\" href=\"http://php.net/mcrypt\">available ciphers</a>.</p> <p>If you’d like to manually test whether your server supports MCrypt you can use:</p> <pre data-language=\"php\">echo extension_loaded('mcrypt') ? 'Yup' : 'Nope';\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Encrypt::set_mode\">\n<code>set_mode($mode)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$mode</strong> (<em>int</em>) – Valid PHP MCrypt mode constant</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Encrypt instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Encrypt</p> </td> </tr>  </table> <p>Permits you to set an Mcrypt mode. By default it uses <strong>MCRYPT_MODE_CBC</strong>. Example:</p> <pre data-language=\"php\">$this-&gt;encrypt-&gt;set_mode(MCRYPT_MODE_CFB);\n</pre> <p>Please visit php.net for a list of <a class=\"reference external\" href=\"http://php.net/mcrypt\">available modes</a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Encrypt::encode_from_legacy\">\n<code>encode_from_legacy($string[, $legacy_mode = MCRYPT_MODE_ECB[, $key = '']])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$string</strong> (<em>string</em>) – String to encrypt</li> <li>\n<strong>$legacy_mode</strong> (<em>int</em>) – Valid PHP MCrypt cipher constant</li> <li>\n<strong>$key</strong> (<em>string</em>) – Encryption key</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Newly encrypted string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Enables you to re-encode data that was originally encrypted with CodeIgniter 1.x to be compatible with the Encrypt library in CodeIgniter 2.x. It is only necessary to use this method if you have encrypted data stored permanently such as in a file or database and are on a server that supports Mcrypt. “Light” use encryption such as encrypted session data or transitory encrypted flashdata require no intervention on your part. However, existing encrypted Sessions will be destroyed since data encrypted prior to 2.x will not be decoded.</p> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\"><strong>Why only a method to re-encode the data instead of maintaining legacy methods for both encoding and decoding?</strong> The algorithms in the Encrypt library have improved in CodeIgniter 2.x both for performance and security, and we do not wish to encourage continued use of the older methods. You can of course extend the Encryption library if you wish and replace the new methods with the old and retain seamless compatibility with CodeIgniter 1.x encrypted data, but this a decision that a developer should make cautiously and deliberately, if at all.</p> </div> <pre data-language=\"php\">$new_data = $this-&gt;encrypt-&gt;encode_from_legacy($old_encrypted_string);\n</pre> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Parameter</th> <th class=\"head\">Default</th> <th class=\"head\">Description</th> </tr> </thead>  <tr class=\"row-even\">\n<td><strong>$orig_data</strong></td> <td>n/a</td> <td>The original encrypted data from CodeIgniter 1.x’s Encryption library</td> </tr> <tr class=\"row-odd\">\n<td><strong>$legacy_mode</strong></td> <td>MCRYPT_MODE_ECB</td> <td>The Mcrypt mode that was used to generate the original encrypted data. CodeIgniter 1.x’s default was MCRYPT_MODE_ECB, and it will assume that to be the case unless overridden by this parameter.</td> </tr> <tr class=\"row-even\">\n<td><strong>$key</strong></td> <td>n/a</td> <td>The encryption key. This it typically specified in your config file as outlined above.</td> </tr>  </table> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/libraries/encrypt.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/libraries/encrypt.html</a>\n  </p>\n</div>\n","general/profiling":"<h1 id=\"profiling-your-application\">Profiling Your Application</h1> <p>The Profiler Class will display benchmark results, queries you have run, and <code>$_POST</code> data at the bottom of your pages. This information can be useful during development in order to help with debugging and optimization.</p>  <h2 id=\"initializing-the-class\">Initializing the Class</h2> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">This class does NOT need to be initialized. It is loaded automatically by the <a class=\"reference internal\" href=\"../libraries/output\">Output Library</a> if profiling is enabled as shown below.</p> </div>   <h2 id=\"enabling-the-profiler\">Enabling the Profiler</h2> <p>To enable the profiler place the following line anywhere within your <a class=\"reference internal\" href=\"controllers\">Controller</a> methods:</p> <pre data-language=\"php\">$this-&gt;output-&gt;enable_profiler(TRUE);\n</pre> <p>When enabled a report will be generated and inserted at the bottom of your pages.</p> <p>To disable the profiler you will use:</p> <pre data-language=\"php\">$this-&gt;output-&gt;enable_profiler(FALSE);\n</pre>   <h2 id=\"setting-benchmark-points\">Setting Benchmark Points</h2> <p>In order for the Profiler to compile and display your benchmark data you must name your mark points using specific syntax.</p> <p>Please read the information on setting Benchmark points in the <a class=\"reference internal\" href=\"../libraries/benchmark\">Benchmark Library</a> page.</p>   <h2 id=\"enabling-and-disabling-profiler-sections\">Enabling and Disabling Profiler Sections</h2> <p>Each section of Profiler data can be enabled or disabled by setting a corresponding config variable to TRUE or FALSE. This can be done one of two ways. First, you can set application wide defaults with the <em>application/config/profiler.php</em> config file.</p> <p>Example:</p> <pre data-language=\"php\">$config['config']          = FALSE;\n$config['queries']         = FALSE;\n</pre> <p>In your controllers, you can override the defaults and config file values by calling the <code>set_profiler_sections()</code> method of the <a class=\"reference internal\" href=\"../libraries/output\">Output Library</a>:</p> <pre data-language=\"php\">$sections = array(\n        'config'  =&gt; TRUE,\n        'queries' =&gt; TRUE\n);\n\n$this-&gt;output-&gt;set_profiler_sections($sections);\n</pre> <p>Available sections and the array key used to access them are described in the table below.</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Key</th> <th class=\"head\">Description</th> <th class=\"head\">Default</th> </tr> </thead>  <tr class=\"row-even\">\n<td><strong>benchmarks</strong></td> <td>Elapsed time of Benchmark points and total execution time</td> <td>TRUE</td> </tr> <tr class=\"row-odd\">\n<td><strong>config</strong></td> <td>CodeIgniter Config variables</td> <td>TRUE</td> </tr> <tr class=\"row-even\">\n<td><strong>controller_info</strong></td> <td>The Controller class and method requested</td> <td>TRUE</td> </tr> <tr class=\"row-odd\">\n<td><strong>get</strong></td> <td>Any GET data passed in the request</td> <td>TRUE</td> </tr> <tr class=\"row-even\">\n<td><strong>http_headers</strong></td> <td>The HTTP headers for the current request</td> <td>TRUE</td> </tr> <tr class=\"row-odd\">\n<td><strong>memory_usage</strong></td> <td>Amount of memory consumed by the current request, in bytes</td> <td>TRUE</td> </tr> <tr class=\"row-even\">\n<td><strong>post</strong></td> <td>Any POST data passed in the request</td> <td>TRUE</td> </tr> <tr class=\"row-odd\">\n<td><strong>queries</strong></td> <td>Listing of all database queries executed, including execution time</td> <td>TRUE</td> </tr> <tr class=\"row-even\">\n<td><strong>uri_string</strong></td> <td>The URI of the current request</td> <td>TRUE</td> </tr> <tr class=\"row-odd\">\n<td><strong>session_data</strong></td> <td>Data stored in the current session</td> <td>TRUE</td> </tr> <tr class=\"row-even\">\n<td><strong>query_toggle_count</strong></td> <td>The number of queries after which the query block will default to hidden.</td> <td>25</td> </tr>  </table> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Disabling the <a class=\"reference internal\" href=\"../database/configuration\">save_queries</a> setting in your database configuration will also effectively disable profiling for database queries and render the ‘queries’ setting above useless. You can optionally override this setting with <code>$this-&gt;db-&gt;save_queries = TRUE;</code>. Without this setting you won’t be able to view the queries or the <cite>last_query &lt;database/helpers&gt;</cite>.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/general/profiling.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/general/profiling.html</a>\n  </p>\n</div>\n","general/cli":"<h1 id=\"running-via-the-cli\">Running via the CLI</h1> <p>As well as calling an applications <a class=\"reference internal\" href=\"controllers\">Controllers</a> via the URL in a browser they can also be loaded via the command-line interface (CLI).</p>  <p class=\"topic-title first\">Page Contents</p> <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#running-via-the-cli\" id=\"id1\">Running via the CLI</a><ul> <li><a class=\"reference internal\" href=\"#what-is-the-cli\" id=\"id2\">What is the CLI?</a></li> <li><a class=\"reference internal\" href=\"#why-run-via-the-command-line\" id=\"id3\">Why run via the command-line?</a></li> <li><a class=\"reference internal\" href=\"#let-s-try-it-hello-world\" id=\"id4\">Let’s try it: Hello World!</a></li> <li><a class=\"reference internal\" href=\"#that-s-it\" id=\"id5\">That’s it!</a></li> </ul> </li> </ul>   <h2 id=\"what-is-the-cli\">What is the CLI?</h2> <p>The command-line interface is a text-based method of interacting with computers. For more information, check the <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Command-line_interface\">Wikipedia article</a>.</p>   <h2 id=\"why-run-via-the-command-line\">Why run via the command-line?</h2> <p>There are many reasons for running CodeIgniter from the command-line, but they are not always obvious.</p> <ul class=\"simple\"> <li>Run your cron-jobs without needing to use <em>wget</em> or <em>curl</em>\n</li> <li>Make your cron-jobs inaccessible from being loaded in the URL by checking the return value of <a class=\"reference internal\" href=\"common_functions#is_cli\" title=\"is_cli\"><code>is_cli()</code></a>.</li> <li>Make interactive “tasks” that can do things like set permissions, prune cache folders, run backups, etc.</li> <li>Integrate with other applications in other languages. For example, a random C++ script could call one command and run code in your models!</li> </ul>   <h2 id=\"let-s-try-it-hello-world\">Let’s try it: Hello World!</h2> <p>Let’s create a simple controller so you can see it in action. Using your text editor, create a file called Tools.php, and put the following code in it:</p> <pre data-language=\"php\">&lt;?php\nclass Tools extends CI_Controller {\n\n        public function message($to = 'World')\n        {\n                echo \"Hello {$to}!\".PHP_EOL;\n        }\n}\n</pre> <p>Then save the file to your <em>application/controllers/</em> folder.</p> <p>Now normally you would visit the your site using a URL similar to this:</p> <pre data-language=\"php\">example.com/index.php/tools/message/to\n</pre> <p>Instead, we are going to open Terminal in Mac/Linux or go to Run &gt; “cmd” in Windows and navigate to our CodeIgniter project.</p> <pre data-language=\"bash\">$ cd /path/to/project;\n$ php index.php tools message\n</pre> <p>If you did it right, you should see <em>Hello World!</em> printed.</p> <pre data-language=\"bash\">$ php index.php tools message \"John Smith\"\n</pre> <p>Here we are passing it a argument in the same way that URL parameters work. “John Smith” is passed as a argument and output is:</p> <pre data-language=\"php\">Hello John Smith!\n</pre>   <h2 id=\"that-s-it\">That’s it!</h2> <p>That, in a nutshell, is all there is to know about controllers on the command line. Remember that this is just a normal controller, so routing and <code>_remap()</code> works fine.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/general/cli.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/general/cli.html</a>\n  </p>\n</div>\n","libraries/caching":"<h1 id=\"caching-driver\">Caching Driver</h1> <p>CodeIgniter features wrappers around some of the most popular forms of fast and dynamic caching. All but file-based caching require specific server requirements, and a Fatal Exception will be thrown if server requirements are not met.</p>  <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#example-usage\" id=\"id1\">Example Usage</a></li> <li><a class=\"reference internal\" href=\"#class-reference\" id=\"id2\">Class Reference</a></li> <li>\n<a class=\"reference internal\" href=\"#drivers\" id=\"id3\">Drivers</a><ul> <li><a class=\"reference internal\" href=\"#alternative-php-cache-apc-caching\" id=\"id4\">Alternative PHP Cache (APC) Caching</a></li> <li><a class=\"reference internal\" href=\"#file-based-caching\" id=\"id5\">File-based Caching</a></li> <li><a class=\"reference internal\" href=\"#memcached-caching\" id=\"id6\">Memcached Caching</a></li> <li><a class=\"reference internal\" href=\"#wincache-caching\" id=\"id7\">WinCache Caching</a></li> <li><a class=\"reference internal\" href=\"#redis-caching\" id=\"id8\">Redis Caching</a></li> <li><a class=\"reference internal\" href=\"#dummy-cache\" id=\"id9\">Dummy Cache</a></li> </ul> </li> </ul>   <h2 id=\"example-usage\">Example Usage</h2> <p>The following example will load the cache driver, specify <a class=\"reference external\" href=\"#alternative-php-cache-apc-caching\">APC</a> as the driver to use, and fall back to file-based caching if APC is not available in the hosting environment.</p> <pre data-language=\"php\">$this-&gt;load-&gt;driver('cache', array('adapter' =&gt; 'apc', 'backup' =&gt; 'file'));\n\nif ( ! $foo = $this-&gt;cache-&gt;get('foo'))\n{\n        echo 'Saving to the cache!&lt;br /&gt;';\n        $foo = 'foobarbaz!';\n\n        // Save into the cache for 5 minutes\n        $this-&gt;cache-&gt;save('foo', $foo, 300);\n}\n\necho $foo;\n</pre> <p>You can also prefix cache item names via the <strong>key_prefix</strong> setting, which is useful to avoid collisions when you’re running multiple applications on the same environment.</p> <pre data-language=\"php\">$this-&gt;load-&gt;driver('cache',\n        array('adapter' =&gt; 'apc', 'backup' =&gt; 'file', 'key_prefix' =&gt; 'my_')\n);\n\n$this-&gt;cache-&gt;get('foo'); // Will get the cache entry named 'my_foo'\n</pre>   <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_Cache\">\n<code>class CI_Cache</code> </dt> <dd>\n<dl class=\"method\"> <dt id=\"CI_Cache::is_supported\">\n<code>is_supported($driver)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$driver</strong> (<em>string</em>) – the name of the caching driver</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE if supported, FALSE if not</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>This method is automatically called when accessing drivers via <code>$this-&gt;cache-&gt;get()</code>. However, if the individual drivers are used, make sure to call this method to ensure the driver is supported in the hosting environment.</p> <pre data-language=\"php\">if ($this-&gt;cache-&gt;apc-&gt;is_supported())\n{\n        if ($data = $this-&gt;cache-&gt;apc-&gt;get('my_cache'))\n        {\n                // do things.\n        }\n}\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Cache::get\">\n<code>get($id)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$id</strong> (<em>string</em>) – Cache item name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Item value or FALSE if not found</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>This method will attempt to fetch an item from the cache store. If the item does not exist, the method will return FALSE.</p> <pre data-language=\"php\">$foo = $this-&gt;cache-&gt;get('my_cached_item');\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Cache::save\">\n<code>save($id, $data[, $ttl = 60[, $raw = FALSE]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$id</strong> (<em>string</em>) – Cache item name</li> <li>\n<strong>$data</strong> (<em>mixed</em>) – the data to save</li> <li>\n<strong>$ttl</strong> (<em>int</em>) – Time To Live, in seconds (default 60)</li> <li>\n<strong>$raw</strong> (<em>bool</em>) – Whether to store the raw value</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>This method will save an item to the cache store. If saving fails, the method will return FALSE.</p> <pre data-language=\"php\">$this-&gt;cache-&gt;save('cache_item_id', 'data_to_cache');\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>$raw</code> parameter is only utilized by APC and Memcache, in order to allow usage of <code>increment()</code> and <code>decrement()</code>.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Cache::delete\">\n<code>delete($id)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$id</strong> (<em>string</em>) – name of cached item</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>This method will delete a specific item from the cache store. If item deletion fails, the method will return FALSE.</p> <pre data-language=\"php\">$this-&gt;cache-&gt;delete('cache_item_id');\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Cache::increment\">\n<code>increment($id[, $offset = 1])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$id</strong> (<em>string</em>) – Cache ID</li> <li>\n<strong>$offset</strong> (<em>int</em>) – Step/value to add</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">New value on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Performs atomic incrementation of a raw stored value.</p> <pre data-language=\"php\">// 'iterator' has a value of 2\n\n$this-&gt;cache-&gt;increment('iterator'); // 'iterator' is now 3\n\n$this-&gt;cache-&gt;increment('iterator', 3); // 'iterator' is now 6\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Cache::decrement\">\n<code>decrement($id[, $offset = 1])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$id</strong> (<em>string</em>) – Cache ID</li> <li>\n<strong>$offset</strong> (<em>int</em>) – Step/value to reduce by</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">New value on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Performs atomic decrementation of a raw stored value.</p> <pre data-language=\"php\">// 'iterator' has a value of 6\n\n$this-&gt;cache-&gt;decrement('iterator'); // 'iterator' is now 5\n\n$this-&gt;cache-&gt;decrement('iterator', 2); // 'iterator' is now 3\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Cache::clean\">\n<code>clean()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">TRUE on success, FALSE on failure</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">bool</td> </tr>  </table> <p>This method will ‘clean’ the entire cache. If the deletion of the cache files fails, the method will return FALSE.</p> <pre data-language=\"php\">$this-&gt;cache-&gt;clean();\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Cache::cache_info\">\n<code>cache_info()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Information on the entire cache database</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">mixed</td> </tr>  </table> <p>This method will return information on the entire cache.</p> <pre data-language=\"php\">var_dump($this-&gt;cache-&gt;cache_info());\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The information returned and the structure of the data is dependent on which adapter is being used.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Cache::get_metadata\">\n<code>get_metadata($id)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$id</strong> (<em>string</em>) – Cache item name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Metadata for the cached item</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>This method will return detailed information on a specific item in the cache.</p> <pre data-language=\"php\">var_dump($this-&gt;cache-&gt;get_metadata('my_cached_item'));\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The information returned and the structure of the data is dependent on which adapter is being used.</p> </div> </dd>\n</dl> </dd>\n</dl>   <h2 id=\"drivers\">Drivers</h2>  <h3 id=\"alternative-php-cache-apc-caching\">Alternative PHP Cache (APC) Caching</h3> <p>All of the methods listed above can be accessed without passing a specific adapter to the driver loader as follows:</p> <pre data-language=\"php\">$this-&gt;load-&gt;driver('cache');\n$this-&gt;cache-&gt;apc-&gt;save('foo', 'bar', 10);\n</pre> <p>For more information on APC, please see <a class=\"reference external\" href=\"http://php.net/apc\">http://php.net/apc</a>.</p>   <h3 id=\"file-based-caching\">File-based Caching</h3> <p>Unlike caching from the Output Class, the driver file-based caching allows for pieces of view files to be cached. Use this with care, and make sure to benchmark your application, as a point can come where disk I/O will negate positive gains by caching.</p> <p>All of the methods listed above can be accessed without passing a specific adapter to the driver loader as follows:</p> <pre data-language=\"php\">$this-&gt;load-&gt;driver('cache');\n$this-&gt;cache-&gt;file-&gt;save('foo', 'bar', 10);\n</pre>   <h3 id=\"memcached-caching\">Memcached Caching</h3> <p>Multiple Memcached servers can be specified in the memcached.php configuration file, located in the _application/config/* directory.</p> <p>All of the methods listed above can be accessed without passing a specific adapter to the driver loader as follows:</p> <pre data-language=\"php\">$this-&gt;load-&gt;driver('cache');\n$this-&gt;cache-&gt;memcached-&gt;save('foo', 'bar', 10);\n</pre> <p>For more information on Memcached, please see <a class=\"reference external\" href=\"http://php.net/memcached\">http://php.net/memcached</a>.</p>   <h3 id=\"wincache-caching\">WinCache Caching</h3> <p>Under Windows, you can also utilize the WinCache driver.</p> <p>All of the methods listed above can be accessed without passing a specific adapter to the driver loader as follows:</p> <pre data-language=\"php\">$this-&gt;load-&gt;driver('cache');\n$this-&gt;cache-&gt;wincache-&gt;save('foo', 'bar', 10);\n</pre> <p>For more information on WinCache, please see <a class=\"reference external\" href=\"http://php.net/wincache\">http://php.net/wincache</a>.</p>   <h3 id=\"redis-caching\">Redis Caching</h3> <p>Redis is an in-memory key-value store which can operate in LRU cache mode. To use it, you need <a class=\"reference external\" href=\"https://github.com/phpredis/phpredis\">Redis server and phpredis PHP extension</a>.</p> <p>Config options to connect to redis server must be stored in the application/config/redis.php file. Available options are:</p> <pre data-language=\"php\">$config['socket_type'] = 'tcp'; //`tcp` or `unix`\n$config['socket'] = '/var/run/redis.sock'; // in case of `unix` socket type\n$config['host'] = '127.0.0.1';\n$config['password'] = NULL;\n$config['port'] = 6379;\n$config['timeout'] = 0;\n</pre> <p>All of the methods listed above can be accessed without passing a specific adapter to the driver loader as follows:</p> <pre data-language=\"php\">$this-&gt;load-&gt;driver('cache');\n$this-&gt;cache-&gt;redis-&gt;save('foo', 'bar', 10);\n</pre> <p>For more information on Redis, please see <a class=\"reference external\" href=\"http://redis.io\">http://redis.io</a>.</p>   <h3 id=\"dummy-cache\">Dummy Cache</h3> <p>This is a caching backend that will always ‘miss.’ It stores no data, but lets you keep your caching code in place in environments that don’t support your chosen cache.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/libraries/caching.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/libraries/caching.html</a>\n  </p>\n</div>\n","libraries/benchmark":"<h1 id=\"benchmarking-class\">Benchmarking Class</h1> <p>CodeIgniter has a Benchmarking class that is always active, enabling the time difference between any two marked points to be calculated.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This class is initialized automatically by the system so there is no need to do it manually.</p> </div> <p>In addition, the benchmark is always started the moment the framework is invoked, and ended by the output class right before sending the final view to the browser, enabling a very accurate timing of the entire system execution to be shown.</p>  <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#using-the-benchmark-class\" id=\"id1\">Using the Benchmark Class</a><ul> <li><a class=\"reference internal\" href=\"#profiling-your-benchmark-points\" id=\"id2\">Profiling Your Benchmark Points</a></li> <li><a class=\"reference internal\" href=\"#displaying-total-execution-time\" id=\"id3\">Displaying Total Execution Time</a></li> <li><a class=\"reference internal\" href=\"#displaying-memory-consumption\" id=\"id4\">Displaying Memory Consumption</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#class-reference\" id=\"id5\">Class Reference</a></li> </ul>   <h2 id=\"using-the-benchmark-class\">Using the Benchmark Class</h2> <p>The Benchmark class can be used within your <a class=\"reference internal\" href=\"../general/controllers\">controllers</a>, <a class=\"reference internal\" href=\"../general/views\">views</a>, or your <a class=\"reference internal\" href=\"../general/models\">models</a>. The process for usage is this:</p> <ol class=\"arabic simple\"> <li>Mark a start point</li> <li>Mark an end point</li> <li>Run the “elapsed time” function to view the results</li> </ol> <p>Here’s an example using real code:</p> <pre data-language=\"php\">$this-&gt;benchmark-&gt;mark('code_start');\n\n// Some code happens here\n\n$this-&gt;benchmark-&gt;mark('code_end');\n\necho $this-&gt;benchmark-&gt;elapsed_time('code_start', 'code_end');\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>The words “code_start” and “code_end” are arbitrary. They are simply words used to set two markers. You can use any words you want, and you can set multiple sets of markers. Consider this example:</p> <pre data-language=\"php\">$this-&gt;benchmark-&gt;mark('dog');\n\n// Some code happens here\n\n$this-&gt;benchmark-&gt;mark('cat');\n\n// More code happens here\n\n$this-&gt;benchmark-&gt;mark('bird');\n\necho $this-&gt;benchmark-&gt;elapsed_time('dog', 'cat');\necho $this-&gt;benchmark-&gt;elapsed_time('cat', 'bird');\necho $this-&gt;benchmark-&gt;elapsed_time('dog', 'bird');\n</pre> </div>  <h3 id=\"profiling-your-benchmark-points\">Profiling Your Benchmark Points</h3> <p>If you want your benchmark data to be available to the <a class=\"reference internal\" href=\"../general/profiling\">Profiler</a> all of your marked points must be set up in pairs, and each mark point name must end with _start and _end. Each pair of points must otherwise be named identically. Example:</p> <pre data-language=\"php\">$this-&gt;benchmark-&gt;mark('my_mark_start');\n\n// Some code happens here...\n\n$this-&gt;benchmark-&gt;mark('my_mark_end');\n\n$this-&gt;benchmark-&gt;mark('another_mark_start');\n\n// Some more code happens here...\n\n$this-&gt;benchmark-&gt;mark('another_mark_end');\n</pre> <p>Please read the <a class=\"reference internal\" href=\"../general/profiling\">Profiler page</a> for more information.</p>   <h3 id=\"displaying-total-execution-time\">Displaying Total Execution Time</h3> <p>If you would like to display the total elapsed time from the moment CodeIgniter starts to the moment the final output is sent to the browser, simply place this in one of your view templates:</p> <pre data-language=\"php\">&lt;?php echo $this-&gt;benchmark-&gt;elapsed_time();?&gt;\n</pre> <p>You’ll notice that it’s the same function used in the examples above to calculate the time between two point, except you are <strong>not</strong> using any parameters. When the parameters are absent, CodeIgniter does not stop the benchmark until right before the final output is sent to the browser. It doesn’t matter where you use the function call, the timer will continue to run until the very end.</p> <p>An alternate way to show your elapsed time in your view files is to use this pseudo-variable, if you prefer not to use the pure PHP:</p> <pre data-language=\"php\">{elapsed_time}\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If you want to benchmark anything within your controller functions you must set your own start/end points.</p> </div>   <h3 id=\"displaying-memory-consumption\">Displaying Memory Consumption</h3> <p>If your PHP installation is configured with –enable-memory-limit, you can display the amount of memory consumed by the entire system using the following code in one of your view file:</p> <pre data-language=\"php\">&lt;?php echo $this-&gt;benchmark-&gt;memory_usage();?&gt;\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This function can only be used in your view files. The consumption will reflect the total memory used by the entire app.</p> </div> <p>An alternate way to show your memory usage in your view files is to use this pseudo-variable, if you prefer not to use the pure PHP:</p> <pre data-language=\"php\">{memory_usage}\n</pre>    <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_Benchmark\">\n<code>class CI_Benchmark</code> </dt> <dd>\n<dl class=\"method\"> <dt id=\"CI_Benchmark::mark\">\n<code>mark($name)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$name</strong> (<em>string</em>) – the name you wish to assign to your marker</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Sets a benchmark marker.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Benchmark::elapsed_time\">\n<code>elapsed_time([$point1 = ''[, $point2 = ''[, $decimals = 4]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$point1</strong> (<em>string</em>) – a particular marked point</li> <li>\n<strong>$point2</strong> (<em>string</em>) – a particular marked point</li> <li>\n<strong>$decimals</strong> (<em>int</em>) – number of decimal places for precision</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Elapsed time</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Calculates and returns the time difference between two marked points.</p> <p>If the first parameter is empty this function instead returns the <code>{elapsed_time}</code> pseudo-variable. This permits the full system execution time to be shown in a template. The output class will swap the real value for this variable.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Benchmark::memory_usage\">\n<code>memory_usage()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Memory usage info</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">string</td> </tr>  </table> <p>Simply returns the <code>{memory_usage}</code> marker.</p> <p>This permits it to be put it anywhere in a template without the memory being calculated until the end. The <a class=\"reference internal\" href=\"output\">Output Class</a> will swap the real value for this variable.</p> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/libraries/benchmark.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/libraries/benchmark.html</a>\n  </p>\n</div>\n","installation/upgrading":"<h1 id=\"upgrading-from-a-previous-version\">Upgrading From a Previous Version</h1> <p>Please read the upgrade notes corresponding to the version you are upgrading from.</p>  <ul> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_310.html\">Upgrading from 3.0.6 to 3.1.0</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_306.html\">Upgrading from 3.0.5 to 3.0.6</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_305.html\">Upgrading from 3.0.4 to 3.0.5</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_304.html\">Upgrading from 3.0.3 to 3.0.4</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_303.html\">Upgrading from 3.0.2 to 3.0.3</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_302.html\">Upgrading from 3.0.1 to 3.0.2</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_301.html\">Upgrading from 3.0.0 to 3.0.1</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_300.html\">Upgrading from 2.2.x to 3.0.x</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_223.html\">Upgrading from 2.2.2 to 2.2.3</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_222.html\">Upgrading from 2.2.1 to 2.2.2</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_221.html\">Upgrading from 2.2.0 to 2.2.1</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_220.html\">Upgrading from 2.1.4 to 2.2.x</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_214.html\">Upgrading from 2.1.3 to 2.1.4</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_213.html\">Upgrading from 2.1.2 to 2.1.3</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_212.html\">Upgrading from 2.1.1 to 2.1.2</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_211.html\">Upgrading from 2.1.0 to 2.1.1</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_210.html\">Upgrading from 2.0.3 to 2.1.0</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_203.html\">Upgrading from 2.0.2 to 2.0.3</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_202.html\">Upgrading from 2.0.1 to 2.0.2</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_201.html\">Upgrading from 2.0 to 2.0.1</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_200.html\">Upgrading from 1.7.2 to 2.0</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_172.html\">Upgrading from 1.7.1 to 1.7.2</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_171.html\">Upgrading from 1.7.0 to 1.7.1</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_170.html\">Upgrading from 1.6.3 to 1.7.0</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_163.html\">Upgrading from 1.6.2 to 1.6.3</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_162.html\">Upgrading from 1.6.1 to 1.6.2</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_161.html\">Upgrading from 1.6.0 to 1.6.1</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_160.html\">Upgrading from 1.5.4 to 1.6.0</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_154.html\">Upgrading from 1.5.3 to 1.5.4</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_153.html\">Upgrading from 1.5.2 to 1.5.3</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_152.html\">Upgrading from 1.5.0 or 1.5.1 to 1.5.2</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_150.html\">Upgrading from 1.4.1 to 1.5.0</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_141.html\">Upgrading from 1.4.0 to 1.4.1</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_140.html\">Upgrading from 1.3.3 to 1.4.0</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_133.html\">Upgrading from 1.3.2 to 1.3.3</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_132.html\">Upgrading from 1.3.1 to 1.3.2</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_131.html\">Upgrading from 1.3 to 1.3.1</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_130.html\">Upgrading from 1.2 to 1.3</a> </li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_120.html\">Upgrading from 1.1 to 1.2</a></li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"https://www.codeigniter.com/user_guide/installation/upgrade_b11.html\">Upgrading from Beta 1.0 to Beta 1.1</a> </li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/installation/upgrading.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/installation/upgrading.html</a>\n  </p>\n</div>\n","general/ancillary_classes":"<h1 id=\"creating-ancillary-classes\">Creating Ancillary Classes</h1> <p>In some cases you may want to develop classes that exist apart from your controllers but have the ability to utilize all of CodeIgniter’s resources. This is easily possible as you’ll see.</p>  <h2 id=\"get-instance\">get_instance()</h2> <dl class=\"function\"> <dt id=\"get_instance\">\n<code>get_instance()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Reference to your controller’s instance</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">CI_Controller</td> </tr>  </table> </dd>\n</dl> <p><strong>Any class that you instantiate within your controller methods can access CodeIgniter’s native resources</strong> simply by using the <code>get_instance()</code> function. This function returns the main CodeIgniter object.</p> <p>Normally, to call any of the available CodeIgniter methods requires you to use the <code>$this</code> construct:</p> <pre data-language=\"php\">$this-&gt;load-&gt;helper('url');\n$this-&gt;load-&gt;library('session');\n$this-&gt;config-&gt;item('base_url');\n// etc.\n</pre> <p><code>$this</code>, however, only works within your controllers, your models, or your views. If you would like to use CodeIgniter’s classes from within your own custom classes you can do so as follows:</p> <p>First, assign the CodeIgniter object to a variable:</p> <pre data-language=\"php\">$CI =&amp; get_instance();\n</pre> <p>Once you’ve assigned the object to a variable, you’ll use that variable <em>instead</em> of <code>$this</code>:</p> <pre data-language=\"php\">$CI =&amp; get_instance();\n\n$CI-&gt;load-&gt;helper('url');\n$CI-&gt;load-&gt;library('session');\n$CI-&gt;config-&gt;item('base_url');\n// etc.\n</pre> <p>If you’ll be using <code>get_instance()</code> inside another class, then it would be better if you assign it to a property. This way, you won’t need to call <code>get_instance()</code> in every single method.</p> <p>Example:</p> <pre data-language=\"php\">class Example {\n\n        protected $CI;\n\n        // We'll use a constructor, as you can't directly call a function\n        // from a property definition.\n        public function __construct()\n        {\n                // Assign the CodeIgniter super-object\n                $this-&gt;CI =&amp; get_instance();\n        }\n\n        public function foo()\n        {\n                $this-&gt;CI-&gt;load-&gt;helper('url');\n                redirect();\n        }\n\n        public function bar()\n        {\n                $this-&gt;CI-&gt;config-&gt;item('base_url');\n        }\n}\n</pre> <p>In the above example, both methods <code>foo()</code> and <code>bar()</code> will work after you instantiate the Example class, without the need to call <code>get_instance()</code> in each of them.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/general/ancillary_classes.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/general/ancillary_classes.html</a>\n  </p>\n</div>\n","libraries/cart":"<h1 id=\"shopping-cart-class\">Shopping Cart Class</h1> <p>The Cart Class permits items to be added to a session that stays active while a user is browsing your site. These items can be retrieved and displayed in a standard “shopping cart” format, allowing the user to update the quantity or remove items from the cart.</p> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">The Cart library is DEPRECATED and should not be used. It is currently only kept for backwards compatibility.</p> </div> <p>Please note that the Cart Class ONLY provides the core “cart” functionality. It does not provide shipping, credit card authorization, or other processing components.</p>  <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#using-the-cart-class\" id=\"id1\">Using the Cart Class</a><ul> <li><a class=\"reference internal\" href=\"#initializing-the-shopping-cart-class\" id=\"id2\">Initializing the Shopping Cart Class</a></li> <li><a class=\"reference internal\" href=\"#adding-an-item-to-the-cart\" id=\"id3\">Adding an Item to The Cart</a></li> <li><a class=\"reference internal\" href=\"#adding-multiple-items-to-the-cart\" id=\"id4\">Adding Multiple Items to The Cart</a></li> <li><a class=\"reference internal\" href=\"#displaying-the-cart\" id=\"id5\">Displaying the Cart</a></li> <li>\n<a class=\"reference internal\" href=\"#updating-the-cart\" id=\"id6\">Updating The Cart</a><ul> <li><a class=\"reference internal\" href=\"#what-is-a-row-id\" id=\"id7\">What is a Row ID?</a></li> </ul> </li> </ul> </li> <li><a class=\"reference internal\" href=\"#class-reference\" id=\"id8\">Class Reference</a></li> </ul>   <h2 id=\"using-the-cart-class\">Using the Cart Class</h2>  <h3 id=\"initializing-the-shopping-cart-class\">Initializing the Shopping Cart Class</h3> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">The Cart class utilizes CodeIgniter’s <a class=\"reference internal\" href=\"sessions\">Session Class</a> to save the cart information to a database, so before using the Cart class you must set up a database table as indicated in the <a class=\"reference internal\" href=\"sessions\">Session Documentation</a>, and set the session preferences in your application/config/config.php file to utilize a database.</p> </div> <p>To initialize the Shopping Cart Class in your controller constructor, use the <code>$this-&gt;load-&gt;library()</code> method:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('cart');\n</pre> <p>Once loaded, the Cart object will be available using:</p> <pre data-language=\"php\">$this-&gt;cart\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The Cart Class will load and initialize the Session Class automatically, so unless you are using sessions elsewhere in your application, you do not need to load the Session class.</p> </div>   <h3 id=\"adding-an-item-to-the-cart\">Adding an Item to The Cart</h3> <p>To add an item to the shopping cart, simply pass an array with the product information to the <code>$this-&gt;cart-&gt;insert()</code> method, as shown below:</p> <pre data-language=\"php\">$data = array(\n        'id'      =&gt; 'sku_123ABC',\n        'qty'     =&gt; 1,\n        'price'   =&gt; 39.95,\n        'name'    =&gt; 'T-Shirt',\n        'options' =&gt; array('Size' =&gt; 'L', 'Color' =&gt; 'Red')\n);\n\n$this-&gt;cart-&gt;insert($data);\n</pre> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">The first four array indexes above (id, qty, price, and name) are <strong>required</strong>. If you omit any of them the data will not be saved to the cart. The fifth index (options) is optional. It is intended to be used in cases where your product has options associated with it. Use an array for options, as shown above.</p> </div> <p>The five reserved indexes are:</p> <ul class=\"simple\"> <li>\n<strong>id</strong> - Each product in your store must have a unique identifier. Typically this will be an “sku” or other such identifier.</li> <li>\n<strong>qty</strong> - The quantity being purchased.</li> <li>\n<strong>price</strong> - The price of the item.</li> <li>\n<strong>name</strong> - The name of the item.</li> <li>\n<strong>options</strong> - Any additional attributes that are needed to identify the product. These must be passed via an array.</li> </ul> <p>In addition to the five indexes above, there are two reserved words: rowid and subtotal. These are used internally by the Cart class, so please do NOT use those words as index names when inserting data into the cart.</p> <p>Your array may contain additional data. Anything you include in your array will be stored in the session. However, it is best to standardize your data among all your products in order to make displaying the information in a table easier.</p> <pre data-language=\"php\">$data = array(\n        'id'      =&gt; 'sku_123ABC',\n        'qty'     =&gt; 1,\n        'price'   =&gt; 39.95,\n        'name'    =&gt; 'T-Shirt',\n        'coupon'         =&gt; 'XMAS-50OFF'\n);\n\n$this-&gt;cart-&gt;insert($data);\n</pre> <p>The <code>insert()</code> method will return the $rowid if you successfully insert a single item.</p>   <h3 id=\"adding-multiple-items-to-the-cart\">Adding Multiple Items to The Cart</h3> <p>By using a multi-dimensional array, as shown below, it is possible to add multiple products to the cart in one action. This is useful in cases where you wish to allow people to select from among several items on the same page.</p> <pre data-language=\"php\">$data = array(\n        array(\n                'id'      =&gt; 'sku_123ABC',\n                'qty'     =&gt; 1,\n                'price'   =&gt; 39.95,\n                'name'    =&gt; 'T-Shirt',\n                'options' =&gt; array('Size' =&gt; 'L', 'Color' =&gt; 'Red')\n        ),\n        array(\n                'id'      =&gt; 'sku_567ZYX',\n                'qty'     =&gt; 1,\n                'price'   =&gt; 9.95,\n                'name'    =&gt; 'Coffee Mug'\n        ),\n        array(\n                'id'      =&gt; 'sku_965QRS',\n                'qty'     =&gt; 1,\n                'price'   =&gt; 29.95,\n                'name'    =&gt; 'Shot Glass'\n        )\n);\n\n$this-&gt;cart-&gt;insert($data);\n</pre>   <h3 id=\"displaying-the-cart\">Displaying the Cart</h3> <p>To display the cart you will create a <a class=\"reference internal\" href=\"../general/views\">view file</a> with code similar to the one shown below.</p> <p>Please note that this example uses the <a class=\"reference internal\" href=\"../helpers/form_helper\">form helper</a>.</p> <pre data-language=\"php\">&lt;?php echo form_open('path/to/controller/update/method'); ?&gt;\n\n&lt;table cellpadding=\"6\" cellspacing=\"1\" style=\"width:100%\" border=\"0\"&gt;\n\n&lt;tr&gt;\n        &lt;th&gt;QTY&lt;/th&gt;\n        &lt;th&gt;Item Description&lt;/th&gt;\n        &lt;th style=\"text-align:right\"&gt;Item Price&lt;/th&gt;\n        &lt;th style=\"text-align:right\"&gt;Sub-Total&lt;/th&gt;\n&lt;/tr&gt;\n\n&lt;?php $i = 1; ?&gt;\n\n&lt;?php foreach ($this-&gt;cart-&gt;contents() as $items): ?&gt;\n\n        &lt;?php echo form_hidden($i.'[rowid]', $items['rowid']); ?&gt;\n\n        &lt;tr&gt;\n                &lt;td&gt;&lt;?php echo form_input(array('name' =&gt; $i.'[qty]', 'value' =&gt; $items['qty'], 'maxlength' =&gt; '3', 'size' =&gt; '5')); ?&gt;&lt;/td&gt;\n                &lt;td&gt;\n                        &lt;?php echo $items['name']; ?&gt;\n\n                        &lt;?php if ($this-&gt;cart-&gt;has_options($items['rowid']) == TRUE): ?&gt;\n\n                                &lt;p&gt;\n                                        &lt;?php foreach ($this-&gt;cart-&gt;product_options($items['rowid']) as $option_name =&gt; $option_value): ?&gt;\n\n                                                &lt;strong&gt;&lt;?php echo $option_name; ?&gt;:&lt;/strong&gt; &lt;?php echo $option_value; ?&gt;&lt;br /&gt;\n\n                                        &lt;?php endforeach; ?&gt;\n                                &lt;/p&gt;\n\n                        &lt;?php endif; ?&gt;\n\n                &lt;/td&gt;\n                &lt;td style=\"text-align:right\"&gt;&lt;?php echo $this-&gt;cart-&gt;format_number($items['price']); ?&gt;&lt;/td&gt;\n                &lt;td style=\"text-align:right\"&gt;$&lt;?php echo $this-&gt;cart-&gt;format_number($items['subtotal']); ?&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n\n&lt;?php $i++; ?&gt;\n\n&lt;?php endforeach; ?&gt;\n\n&lt;tr&gt;\n        &lt;td colspan=\"2\"&gt; &lt;/td&gt;\n        &lt;td class=\"right\"&gt;&lt;strong&gt;Total&lt;/strong&gt;&lt;/td&gt;\n        &lt;td class=\"right\"&gt;$&lt;?php echo $this-&gt;cart-&gt;format_number($this-&gt;cart-&gt;total()); ?&gt;&lt;/td&gt;\n&lt;/tr&gt;\n\n&lt;/table&gt;\n\n&lt;p&gt;&lt;?php echo form_submit('', 'Update your Cart'); ?&gt;&lt;/p&gt;\n</pre>   <h3 id=\"updating-the-cart\">Updating The Cart</h3> <p>To update the information in your cart, you must pass an array containing the Row ID and one or more pre-defined properties to the <code>$this-&gt;cart-&gt;update()</code> method.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If the quantity is set to zero, the item will be removed from the cart.</p> </div> <pre data-language=\"php\">$data = array(\n        'rowid' =&gt; 'b99ccdf16028f015540f341130b6d8ec',\n        'qty'   =&gt; 3\n);\n\n$this-&gt;cart-&gt;update($data);\n\n// Or a multi-dimensional array\n\n$data = array(\n        array(\n                'rowid'   =&gt; 'b99ccdf16028f015540f341130b6d8ec',\n                'qty'     =&gt; 3\n        ),\n        array(\n                'rowid'   =&gt; 'xw82g9q3r495893iajdh473990rikw23',\n                'qty'     =&gt; 4\n        ),\n        array(\n                'rowid'   =&gt; 'fh4kdkkkaoe30njgoe92rkdkkobec333',\n                'qty'     =&gt; 2\n        )\n);\n\n$this-&gt;cart-&gt;update($data);\n</pre> <p>You may also update any property you have previously defined when inserting the item such as options, price or other custom fields.</p> <pre data-language=\"php\">$data = array(\n        'rowid'  =&gt; 'b99ccdf16028f015540f341130b6d8ec',\n        'qty'    =&gt; 1,\n        'price'  =&gt; 49.95,\n        'coupon' =&gt; NULL\n);\n\n$this-&gt;cart-&gt;update($data);\n</pre>  <h4 id=\"what-is-a-row-id\">What is a Row ID?</h4> <p>The row ID is a unique identifier that is generated by the cart code when an item is added to the cart. The reason a unique ID is created is so that identical products with different options can be managed by the cart.</p> <p>For example, let’s say someone buys two identical t-shirts (same product ID), but in different sizes. The product ID (and other attributes) will be identical for both sizes because it’s the same shirt. The only difference will be the size. The cart must therefore have a means of identifying this difference so that the two sizes of shirts can be managed independently. It does so by creating a unique “row ID” based on the product ID and any options associated with it.</p> <p>In nearly all cases, updating the cart will be something the user does via the “view cart” page, so as a developer, it is unlikely that you will ever have to concern yourself with the “row ID”, other than making sure your “view cart” page contains this information in a hidden form field, and making sure it gets passed to the <code>update()</code> method when the update form is submitted. Please examine the construction of the “view cart” page above for more information.</p>     <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_Cart\">\n<code>class CI_Cart</code> </dt> <dd>\n<dl class=\"attribute\"> <dt>\n<code>$product_id_rules = '.a-z0-9_-'</code> </dt> <dd>\n<p>These are the regular expression rules that we use to validate the product ID - alpha-numeric, dashes, underscores, or periods by default</p> </dd>\n</dl> <dl class=\"attribute\"> <dt>\n<code>$product_name_rules = 'w -.:'</code> </dt> <dd>\n<p>These are the regular expression rules that we use to validate the product ID and product name - alpha-numeric, dashes, underscores, colons or periods by default</p> </dd>\n</dl> <dl class=\"attribute\"> <dt>\n<code>$product_name_safe = TRUE</code> </dt> <dd>\n<p>Whether or not to only allow safe product names. Default TRUE.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Cart::insert\">\n<code>insert([$items = array()])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$items</strong> (<em>array</em>) – Items to insert into the cart</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Insert items into the cart and save it to the session table. Returns TRUE on success and FALSE on failure.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Cart::update\">\n<code>update([$items = array()])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$items</strong> (<em>array</em>) – Items to update in the cart</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>This method permits changing the properties of a given item. Typically it is called from the “view cart” page if a user makes changes to the quantity before checkout. That array must contain the rowid for each item.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Cart::remove\">\n<code>remove($rowid)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$rowid</strong> (<em>int</em>) – ID of the item to remove from the cart</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Allows you to remove an item from the shopping cart by passing it the <code>$rowid</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Cart::total\">\n<code>total()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Total amount</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">int</td> </tr>  </table> <p>Displays the total amount in the cart.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Cart::total_items\">\n<code>total_items()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Total amount of items in the cart</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">int</td> </tr>  </table> <p>Displays the total number of items in the cart.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Cart::contents\">\n<code>contents([$newest_first = FALSE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$newest_first</strong> (<em>bool</em>) – Whether to order the array with newest items first</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An array of cart contents</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>Returns an array containing everything in the cart. You can sort the order by which the array is returned by passing it TRUE where the contents will be sorted from newest to oldest, otherwise it is sorted from oldest to newest.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Cart::get_item\">\n<code>get_item($row_id)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$row_id</strong> (<em>int</em>) – Row ID to retrieve</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Array of item data</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>Returns an array containing data for the item matching the specified row ID, or FALSE if no such item exists.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Cart::has_options\">\n<code>has_options($row_id = '')</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$row_id</strong> (<em>int</em>) – Row ID to inspect</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE if options exist, FALSE otherwise</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Returns TRUE (boolean) if a particular row in the cart contains options. This method is designed to be used in a loop with <code>contents()</code>, since you must pass the rowid to this method, as shown in the Displaying the Cart example above.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Cart::product_options\">\n<code>product_options([$row_id = ''])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$row_id</strong> (<em>int</em>) – Row ID</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Array of product options</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>Returns an array of options for a particular product. This method is designed to be used in a loop with <code>contents()</code>, since you must pass the rowid to this method, as shown in the Displaying the Cart example above.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Cart::destroy\">\n<code>destroy()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">void</td> </tr>  </table> <p>Permits you to destroy the cart. This method will likely be called when you are finished processing the customer’s order.</p> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/libraries/cart.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/libraries/cart.html</a>\n  </p>\n</div>\n","libraries/file_uploading":"<h1 id=\"file-uploading-class\">File Uploading Class</h1> <p>CodeIgniter’s File Uploading Class permits files to be uploaded. You can set various preferences, restricting the type and size of the files.</p>  <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#the-process\" id=\"id1\">The Process</a><ul> <li><a class=\"reference internal\" href=\"#creating-the-upload-form\" id=\"id2\">Creating the Upload Form</a></li> <li><a class=\"reference internal\" href=\"#the-success-page\" id=\"id3\">The Success Page</a></li> <li><a class=\"reference internal\" href=\"#the-controller\" id=\"id4\">The Controller</a></li> <li><a class=\"reference internal\" href=\"#the-upload-directory\" id=\"id5\">The Upload Directory</a></li> <li><a class=\"reference internal\" href=\"#try-it\" id=\"id6\">Try it!</a></li> </ul> </li> <li>\n<a class=\"reference internal\" href=\"#reference-guide\" id=\"id7\">Reference Guide</a><ul> <li><a class=\"reference internal\" href=\"#initializing-the-upload-class\" id=\"id8\">Initializing the Upload Class</a></li> <li><a class=\"reference internal\" href=\"#setting-preferences\" id=\"id9\">Setting Preferences</a></li> <li><a class=\"reference internal\" href=\"#preferences\" id=\"id10\">Preferences</a></li> <li><a class=\"reference internal\" href=\"#setting-preferences-in-a-config-file\" id=\"id11\">Setting preferences in a config file</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#class-reference\" id=\"id12\">Class Reference</a></li> </ul>   <h2 id=\"the-process\">The Process</h2> <p>Uploading a file involves the following general process:</p> <ul class=\"simple\"> <li>An upload form is displayed, allowing a user to select a file and upload it.</li> <li>When the form is submitted, the file is uploaded to the destination you specify.</li> <li>Along the way, the file is validated to make sure it is allowed to be uploaded based on the preferences you set.</li> <li>Once uploaded, the user will be shown a success message.</li> </ul> <p>To demonstrate this process here is brief tutorial. Afterward you’ll find reference information.</p>  <h3 id=\"creating-the-upload-form\">Creating the Upload Form</h3> <p>Using a text editor, create a form called upload_form.php. In it, place this code and save it to your <strong>application/views/</strong> directory:</p> <pre data-language=\"php\">&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Upload Form&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;?php echo $error;?&gt;\n\n&lt;?php echo form_open_multipart('upload/do_upload');?&gt;\n\n&lt;input type=\"file\" name=\"userfile\" size=\"20\" /&gt;\n\n&lt;br /&gt;&lt;br /&gt;\n\n&lt;input type=\"submit\" value=\"upload\" /&gt;\n\n&lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</pre> <p>You’ll notice we are using a form helper to create the opening form tag. File uploads require a multipart form, so the helper creates the proper syntax for you. You’ll also notice we have an $error variable. This is so we can show error messages in the event the user does something wrong.</p>   <h3 id=\"the-success-page\">The Success Page</h3> <p>Using a text editor, create a form called upload_success.php. In it, place this code and save it to your <strong>application/views/</strong> directory:</p> <pre data-language=\"php\">&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Upload Form&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;h3&gt;Your file was successfully uploaded!&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;?php foreach ($upload_data as $item =&gt; $value):?&gt;\n&lt;li&gt;&lt;?php echo $item;?&gt;: &lt;?php echo $value;?&gt;&lt;/li&gt;\n&lt;?php endforeach; ?&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;?php echo anchor('upload', 'Upload Another File!'); ?&gt;&lt;/p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>   <h3 id=\"the-controller\">The Controller</h3> <p>Using a text editor, create a controller called Upload.php. In it, place this code and save it to your <strong>application/controllers/</strong> directory:</p> <pre data-language=\"php\">&lt;?php\n\nclass Upload extends CI_Controller {\n\n        public function __construct()\n        {\n                parent::__construct();\n                $this-&gt;load-&gt;helper(array('form', 'url'));\n        }\n\n        public function index()\n        {\n                $this-&gt;load-&gt;view('upload_form', array('error' =&gt; ' ' ));\n        }\n\n        public function do_upload()\n        {\n                $config['upload_path']          = './uploads/';\n                $config['allowed_types']        = 'gif|jpg|png';\n                $config['max_size']             = 100;\n                $config['max_width']            = 1024;\n                $config['max_height']           = 768;\n\n                $this-&gt;load-&gt;library('upload', $config);\n\n                if ( ! $this-&gt;upload-&gt;do_upload('userfile'))\n                {\n                        $error = array('error' =&gt; $this-&gt;upload-&gt;display_errors());\n\n                        $this-&gt;load-&gt;view('upload_form', $error);\n                }\n                else\n                {\n                        $data = array('upload_data' =&gt; $this-&gt;upload-&gt;data());\n\n                        $this-&gt;load-&gt;view('upload_success', $data);\n                }\n        }\n}\n?&gt;\n</pre>   <h3 id=\"the-upload-directory\">The Upload Directory</h3> <p>You’ll need a destination directory for your uploaded images. Create a directory at the root of your CodeIgniter installation called uploads and set its file permissions to 777.</p>   <h3 id=\"try-it\">Try it!</h3> <p>To try your form, visit your site using a URL similar to this one:</p> <pre data-language=\"php\">example.com/index.php/upload/\n</pre> <p>You should see an upload form. Try uploading an image file (either a jpg, gif, or png). If the path in your controller is correct it should work.</p>    <h2 id=\"reference-guide\">Reference Guide</h2>  <h3 id=\"initializing-the-upload-class\">Initializing the Upload Class</h3> <p>Like most other classes in CodeIgniter, the Upload class is initialized in your controller using the <code>$this-&gt;load-&gt;library()</code> method:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('upload');\n</pre> <p>Once the Upload class is loaded, the object will be available using: $this-&gt;upload</p>   <h3 id=\"setting-preferences\">Setting Preferences</h3> <p>Similar to other libraries, you’ll control what is allowed to be upload based on your preferences. In the controller you built above you set the following preferences:</p> <pre data-language=\"php\">$config['upload_path'] = './uploads/';\n$config['allowed_types'] = 'gif|jpg|png';\n$config['max_size']     = '100';\n$config['max_width'] = '1024';\n$config['max_height'] = '768';\n\n$this-&gt;load-&gt;library('upload', $config);\n\n// Alternately you can set preferences by calling the ``initialize()`` method. Useful if you auto-load the class:\n$this-&gt;upload-&gt;initialize($config);\n</pre> <p>The above preferences should be fairly self-explanatory. Below is a table describing all available preferences.</p>   <h3 id=\"preferences\">Preferences</h3> <p>The following preferences are available. The default value indicates what will be used if you do not specify that preference.</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Preference</th> <th class=\"head\">Default Value</th> <th class=\"head\">Options</th> <th class=\"head\">Description</th> </tr> </thead>  <tr class=\"row-even\">\n<td><strong>upload_path</strong></td> <td>None</td> <td>None</td> <td>The path to the directory where the upload should be placed. The directory must be writable and the path can be absolute or relative.</td> </tr> <tr class=\"row-odd\">\n<td><strong>allowed_types</strong></td> <td>None</td> <td>None</td> <td>The mime types corresponding to the types of files you allow to be uploaded. Usually the file extension can be used as the mime type. Can be either an array or a pipe-separated string.</td> </tr> <tr class=\"row-even\">\n<td><strong>file_name</strong></td> <td>None</td> <td>Desired file name</td> <td>If set CodeIgniter will rename the uploaded file to this name. The extension provided in the file name must also be an allowed file type. If no extension is provided in the original file_name will be used.</td> </tr> <tr class=\"row-odd\">\n<td><strong>file_ext_tolower</strong></td> <td>FALSE</td> <td>TRUE/FALSE (boolean)</td> <td>If set to TRUE, the file extension will be forced to lower case</td> </tr> <tr class=\"row-even\">\n<td><strong>overwrite</strong></td> <td>FALSE</td> <td>TRUE/FALSE (boolean)</td> <td>If set to true, if a file with the same name as the one you are uploading exists, it will be overwritten. If set to false, a number will be appended to the filename if another with the same name exists.</td> </tr> <tr class=\"row-odd\">\n<td><strong>max_size</strong></td> <td>0</td> <td>None</td> <td>The maximum size (in kilobytes) that the file can be. Set to zero for no limit. Note: Most PHP installations have their own limit, as specified in the php.ini file. Usually 2 MB (or 2048 KB) by default.</td> </tr> <tr class=\"row-even\">\n<td><strong>max_width</strong></td> <td>0</td> <td>None</td> <td>The maximum width (in pixels) that the image can be. Set to zero for no limit.</td> </tr> <tr class=\"row-odd\">\n<td><strong>max_height</strong></td> <td>0</td> <td>None</td> <td>The maximum height (in pixels) that the image can be. Set to zero for no limit.</td> </tr> <tr class=\"row-even\">\n<td><strong>min_width</strong></td> <td>0</td> <td>None</td> <td>The minimum width (in pixels) that the image can be. Set to zero for no limit.</td> </tr> <tr class=\"row-odd\">\n<td><strong>min_height</strong></td> <td>0</td> <td>None</td> <td>The minimum height (in pixels) that the image can be. Set to zero for no limit.</td> </tr> <tr class=\"row-even\">\n<td><strong>max_filename</strong></td> <td>0</td> <td>None</td> <td>The maximum length that a file name can be. Set to zero for no limit.</td> </tr> <tr class=\"row-odd\">\n<td><strong>max_filename_increment</strong></td> <td>100</td> <td>None</td> <td>When overwrite is set to FALSE, use this to set the maximum filename increment for CodeIgniter to append to the filename.</td> </tr> <tr class=\"row-even\">\n<td><strong>encrypt_name</strong></td> <td>FALSE</td> <td>TRUE/FALSE (boolean)</td> <td>If set to TRUE the file name will be converted to a random encrypted string. This can be useful if you would like the file saved with a name that can not be discerned by the person uploading it.</td> </tr> <tr class=\"row-odd\">\n<td><strong>remove_spaces</strong></td> <td>TRUE</td> <td>TRUE/FALSE (boolean)</td> <td>If set to TRUE, any spaces in the file name will be converted to underscores. This is recommended.</td> </tr> <tr class=\"row-even\">\n<td><strong>detect_mime</strong></td> <td>TRUE</td> <td>TRUE/FALSE (boolean)</td> <td>If set to TRUE, a server side detection of the file type will be performed to avoid code injection attacks. DO NOT disable this option unless you have no other option as that would cause a security risk.</td> </tr> <tr class=\"row-odd\">\n<td><strong>mod_mime_fix</strong></td> <td>TRUE</td> <td>TRUE/FALSE (boolean)</td> <td>If set to TRUE, multiple filename extensions will be suffixed with an underscore in order to avoid triggering <a class=\"reference external\" href=\"http://httpd.apache.org/docs/2.0/mod/mod_mime.html#multipleext\">Apache mod_mime</a>. DO NOT turn off this option if your upload directory is public, as this is a security risk.</td> </tr>  </table>   <h3 id=\"setting-preferences-in-a-config-file\">Setting preferences in a config file</h3> <p>If you prefer not to set preferences using the above method, you can instead put them into a config file. Simply create a new file called the upload.php, add the $config array in that file. Then save the file in: <strong>config/upload.php</strong> and it will be used automatically. You will NOT need to use the <code>$this-&gt;upload-&gt;initialize()</code> method if you save your preferences in a config file.</p>    <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_Upload\">\n<code>class CI_Upload</code> </dt> <dd>\n<dl class=\"method\"> <dt id=\"CI_Upload::initialize\">\n<code>initialize([array $config = array()[, $reset = TRUE]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$config</strong> (<em>array</em>) – Preferences</li> <li>\n<strong>$reset</strong> (<em>bool</em>) – Whether to reset preferences (that are not provided in $config) to their defaults</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Upload instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Upload</p> </td> </tr>  </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Upload::do_upload\">\n<code>do_upload([$field = 'userfile'])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$field</strong> (<em>string</em>) – Name of the form field</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Performs the upload based on the preferences you’ve set.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">By default the upload routine expects the file to come from a form field called userfile, and the form must be of type “multipart”.</p> </div> <pre data-language=\"php\">&lt;form method=\"post\" action=\"some_action\" enctype=\"multipart/form-data\" /&gt;\n</pre> <p>If you would like to set your own field name simply pass its value to the <code>do_upload()</code> method:</p> <pre data-language=\"php\">$field_name = \"some_field_name\";\n$this-&gt;upload-&gt;do_upload($field_name);\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Upload::display_errors\">\n<code>display_errors([$open = '<p>'[, $close = '</p>']])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$open</strong> (<em>string</em>) – Opening markup</li> <li>\n<strong>$close</strong> (<em>string</em>) – Closing markup</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Formatted error message(s)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Retrieves any error messages if the <code>do_upload()</code> method returned false. The method does not echo automatically, it returns the data so you can assign it however you need.</p> <p><strong>Formatting Errors</strong></p>  <p>By default the above method wraps any errors within &lt;p&gt; tags. You can set your own delimiters like this:</p> <pre data-language=\"php\">$this-&gt;upload-&gt;display_errors('&lt;p&gt;', '&lt;/p&gt;');\n</pre>  </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Upload::data\">\n<code>data([$index = NULL])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$data</strong> (<em>string</em>) – Element to return instead of the full array</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Information about the uploaded file</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>This is a helper method that returns an array containing all of the data related to the file you uploaded. Here is the array prototype:</p> <pre data-language=\"php\">Array\n(\n        [file_name]     =&gt; mypic.jpg\n        [file_type]     =&gt; image/jpeg\n        [file_path]     =&gt; /path/to/your/upload/\n        [full_path]     =&gt; /path/to/your/upload/jpg.jpg\n        [raw_name]      =&gt; mypic\n        [orig_name]     =&gt; mypic.jpg\n        [client_name]   =&gt; mypic.jpg\n        [file_ext]      =&gt; .jpg\n        [file_size]     =&gt; 22.2\n        [is_image]      =&gt; 1\n        [image_width]   =&gt; 800\n        [image_height]  =&gt; 600\n        [image_type]    =&gt; jpeg\n        [image_size_str] =&gt; width=\"800\" height=\"200\"\n)\n</pre> <p>To return one element from the array:</p> <pre data-language=\"php\">$this-&gt;upload-&gt;data('file_name');       // Returns: mypic.jpg\n</pre> <p>Here’s a table explaining the above-displayed array items:</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Item</th> <th class=\"head\">Description</th> </tr> </thead>  <tr class=\"row-even\">\n<td>file_name</td> <td>Name of the file that was uploaded, including the filename extension</td> </tr> <tr class=\"row-odd\">\n<td>file_type</td> <td>File MIME type identifier</td> </tr> <tr class=\"row-even\">\n<td>file_path</td> <td>Absolute server path to the file</td> </tr> <tr class=\"row-odd\">\n<td>full_path</td> <td>Absolute server path, including the file name</td> </tr> <tr class=\"row-even\">\n<td>raw_name</td> <td>File name, without the extension</td> </tr> <tr class=\"row-odd\">\n<td>orig_name</td> <td>Original file name. This is only useful if you use the encrypted name option.</td> </tr> <tr class=\"row-even\">\n<td>client_name</td> <td>File name as supplied by the client user agent, prior to any file name preparation or incrementing</td> </tr> <tr class=\"row-odd\">\n<td>file_ext</td> <td>Filename extension, period included</td> </tr> <tr class=\"row-even\">\n<td>file_size</td> <td>File size in kilobytes</td> </tr> <tr class=\"row-odd\">\n<td>is_image</td> <td>Whether the file is an image or not. 1 = image. 0 = not.</td> </tr> <tr class=\"row-even\">\n<td>image_width</td> <td>Image width</td> </tr> <tr class=\"row-odd\">\n<td>image_height</td> <td>Image height</td> </tr> <tr class=\"row-even\">\n<td>image_type</td> <td>Image type (usually the file name extension without the period)</td> </tr> <tr class=\"row-odd\">\n<td>image_size_str</td> <td>A string containing the width and height (useful to put into an image tag)</td> </tr>  </table> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/libraries/file_uploading.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/libraries/file_uploading.html</a>\n  </p>\n</div>\n","libraries/calendar":"<h1 id=\"calendaring-class\">Calendaring Class</h1> <p>The Calendar class enables you to dynamically create calendars. Your calendars can be formatted through the use of a calendar template, allowing 100% control over every aspect of its design. In addition, you can pass data to your calendar cells.</p>  <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#using-the-calendaring-class\" id=\"id1\">Using the Calendaring Class</a><ul> <li><a class=\"reference internal\" href=\"#initializing-the-class\" id=\"id2\">Initializing the Class</a></li> <li><a class=\"reference internal\" href=\"#displaying-a-calendar\" id=\"id3\">Displaying a Calendar</a></li> <li><a class=\"reference internal\" href=\"#passing-data-to-your-calendar-cells\" id=\"id4\">Passing Data to your Calendar Cells</a></li> <li><a class=\"reference internal\" href=\"#setting-display-preferences\" id=\"id5\">Setting Display Preferences</a></li> <li><a class=\"reference internal\" href=\"#showing-next-previous-month-links\" id=\"id6\">Showing Next/Previous Month Links</a></li> <li><a class=\"reference internal\" href=\"#creating-a-calendar-template\" id=\"id7\">Creating a Calendar Template</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#class-reference\" id=\"id8\">Class Reference</a></li> </ul>   <h2 id=\"using-the-calendaring-class\">Using the Calendaring Class</h2>  <h3 id=\"initializing-the-class\">Initializing the Class</h3> <p>Like most other classes in CodeIgniter, the Calendar class is initialized in your controller using the $this-&gt;load-&gt;library function:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('calendar');\n</pre> <p>Once loaded, the Calendar object will be available using:</p> <pre data-language=\"php\">$this-&gt;calendar\n</pre>   <h3 id=\"displaying-a-calendar\">Displaying a Calendar</h3> <p>Here is a very simple example showing how you can display a calendar:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('calendar');\necho $this-&gt;calendar-&gt;generate();\n</pre> <p>The above code will generate a calendar for the current month/year based on your server time. To show a calendar for a specific month and year you will pass this information to the calendar generating function:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('calendar');\necho $this-&gt;calendar-&gt;generate(2006, 6);\n</pre> <p>The above code will generate a calendar showing the month of June in 2006. The first parameter specifies the year, the second parameter specifies the month.</p>   <h3 id=\"passing-data-to-your-calendar-cells\">Passing Data to your Calendar Cells</h3> <p>To add data to your calendar cells involves creating an associative array in which the keys correspond to the days you wish to populate and the array value contains the data. The array is passed to the third parameter of the calendar generating function. Consider this example:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('calendar');\n\n$data = array(\n        3  =&gt; 'http://example.com/news/article/2006/06/03/',\n        7  =&gt; 'http://example.com/news/article/2006/06/07/',\n        13 =&gt; 'http://example.com/news/article/2006/06/13/',\n        26 =&gt; 'http://example.com/news/article/2006/06/26/'\n);\n\necho $this-&gt;calendar-&gt;generate(2006, 6, $data);\n</pre> <p>Using the above example, day numbers 3, 7, 13, and 26 will become links pointing to the URLs you’ve provided.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">By default it is assumed that your array will contain links. In the section that explains the calendar template below you’ll see how you can customize how data passed to your cells is handled so you can pass different types of information.</p> </div>   <h3 id=\"setting-display-preferences\">Setting Display Preferences</h3> <p>There are seven preferences you can set to control various aspects of the calendar. Preferences are set by passing an array of preferences in the second parameter of the loading function. Here is an example:</p> <pre data-language=\"php\">$prefs = array(\n        'start_day'    =&gt; 'saturday',\n        'month_type'   =&gt; 'long',\n        'day_type'     =&gt; 'short'\n);\n\n$this-&gt;load-&gt;library('calendar', $prefs);\n\necho $this-&gt;calendar-&gt;generate();\n</pre> <p>The above code would start the calendar on saturday, use the “long” month heading, and the “short” day names. More information regarding preferences below.</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Preference</th> <th class=\"head\">Default</th> <th class=\"head\">Options</th> <th class=\"head\">Description</th> </tr> </thead>  <tr class=\"row-even\">\n<td><strong>template</strong></td> <td>None</td> <td>None</td> <td>\n<dl class=\"first last docutils\"> <dt>A string or array containing your calendar template.</dt> <dd>See the template section below.</dd> </dl> </td> </tr> <tr class=\"row-odd\">\n<td><strong>local_time</strong></td> <td>time()</td> <td>None</td> <td>A Unix timestamp corresponding to the current time.</td> </tr> <tr class=\"row-even\">\n<td><strong>start_day</strong></td> <td>sunday</td> <td>Any week day (sunday, monday, tuesday, etc.)</td> <td>Sets the day of the week the calendar should start on.</td> </tr> <tr class=\"row-odd\">\n<td><strong>month_type</strong></td> <td>long</td> <td>long, short</td> <td>\n<dl class=\"first last docutils\"> <dt>Determines what version of the month name to use in the header.</dt> <dd>long = January, short = Jan.</dd> </dl> </td> </tr> <tr class=\"row-even\">\n<td><strong>day_type</strong></td> <td>abr</td> <td>long, short, abr</td> <td>\n<dl class=\"first last docutils\"> <dt>Determines what version of the weekday names to use in</dt> <dd>the column headers. long = Sunday, short = Sun, abr = Su.</dd> </dl> </td> </tr> <tr class=\"row-odd\">\n<td><strong>show_next_prev</strong></td> <td>FALSE</td> <td>TRUE/FALSE (boolean)</td> <td>\n<dl class=\"first last docutils\"> <dt>Determines whether to display links allowing you to toggle</dt> <dd>to next/previous months. See information on this feature below.</dd> </dl> </td> </tr> <tr class=\"row-even\">\n<td><strong>next_prev_url</strong></td> <td>controller/method</td> <td>A URL</td> <td>Sets the basepath used in the next/previous calendar links.</td> </tr> <tr class=\"row-odd\">\n<td><strong>show_other_days</strong></td> <td>FALSE</td> <td>TRUE/FALSE (boolean)</td> <td>\n<dl class=\"first last docutils\"> <dt>Determines whether to display days of other months that share the</dt> <dd>first or last week of the calendar month.</dd> </dl> </td> </tr>  </table>   <h3 id=\"showing-next-previous-month-links\">Showing Next/Previous Month Links</h3> <p>To allow your calendar to dynamically increment/decrement via the next/previous links requires that you set up your calendar code similar to this example:</p> <pre data-language=\"php\">$prefs = array(\n        'show_next_prev'  =&gt; TRUE,\n        'next_prev_url'   =&gt; 'http://example.com/index.php/calendar/show/'\n);\n\n$this-&gt;load-&gt;library('calendar', $prefs);\n\necho $this-&gt;calendar-&gt;generate($this-&gt;uri-&gt;segment(3), $this-&gt;uri-&gt;segment(4));\n</pre> <p>You’ll notice a few things about the above example:</p> <ul class=\"simple\"> <li>You must set the “show_next_prev” to TRUE.</li> <li>You must supply the URL to the controller containing your calendar in the “next_prev_url” preference. If you don’t, it will be set to the current <em>controller/method</em>.</li> <li>You must supply the “year” and “month” to the calendar generating function via the URI segments where they appear (Note: The calendar class automatically adds the year/month to the base URL you provide.).</li> </ul>   <h3 id=\"creating-a-calendar-template\">Creating a Calendar Template</h3> <p>By creating a calendar template you have 100% control over the design of your calendar. Using the string method, each component of your calendar will be placed within a pair of pseudo-variables as shown here:</p> <pre data-language=\"php\">$prefs['template'] = '\n\n        {table_open}&lt;table border=\"0\" cellpadding=\"0\" cellspacing=\"0\"&gt;{/table_open}\n\n        {heading_row_start}&lt;tr&gt;{/heading_row_start}\n\n        {heading_previous_cell}&lt;th&gt;&lt;a href=\"{previous_url}\"&gt;&amp;lt;&amp;lt;&lt;/a&gt;&lt;/th&gt;{/heading_previous_cell}\n        {heading_title_cell}&lt;th colspan=\"{colspan}\"&gt;{heading}&lt;/th&gt;{/heading_title_cell}\n        {heading_next_cell}&lt;th&gt;&lt;a href=\"{next_url}\"&gt;&amp;gt;&amp;gt;&lt;/a&gt;&lt;/th&gt;{/heading_next_cell}\n\n        {heading_row_end}&lt;/tr&gt;{/heading_row_end}\n\n        {week_row_start}&lt;tr&gt;{/week_row_start}\n        {week_day_cell}&lt;td&gt;{week_day}&lt;/td&gt;{/week_day_cell}\n        {week_row_end}&lt;/tr&gt;{/week_row_end}\n\n        {cal_row_start}&lt;tr&gt;{/cal_row_start}\n        {cal_cell_start}&lt;td&gt;{/cal_cell_start}\n        {cal_cell_start_today}&lt;td&gt;{/cal_cell_start_today}\n        {cal_cell_start_other}&lt;td class=\"other-month\"&gt;{/cal_cell_start_other}\n\n        {cal_cell_content}&lt;a href=\"{content}\"&gt;{day}&lt;/a&gt;{/cal_cell_content}\n        {cal_cell_content_today}&lt;div class=\"highlight\"&gt;&lt;a href=\"{content}\"&gt;{day}&lt;/a&gt;&lt;/div&gt;{/cal_cell_content_today}\n\n        {cal_cell_no_content}{day}{/cal_cell_no_content}\n        {cal_cell_no_content_today}&lt;div class=\"highlight\"&gt;{day}&lt;/div&gt;{/cal_cell_no_content_today}\n\n        {cal_cell_blank}&amp;nbsp;{/cal_cell_blank}\n\n        {cal_cell_other}{day}{/cal_cel_other}\n\n        {cal_cell_end}&lt;/td&gt;{/cal_cell_end}\n        {cal_cell_end_today}&lt;/td&gt;{/cal_cell_end_today}\n        {cal_cell_end_other}&lt;/td&gt;{/cal_cell_end_other}\n        {cal_row_end}&lt;/tr&gt;{/cal_row_end}\n\n        {table_close}&lt;/table&gt;{/table_close}\n';\n\n$this-&gt;load-&gt;library('calendar', $prefs);\n\necho $this-&gt;calendar-&gt;generate();\n</pre> <p>Using the array method, you will pass <cite>key =&gt; value</cite> pairs. You can pass as many or as few values as you’d like. Omitted keys will use the default values inherited in the calendar class.</p> <p>Example:</p> <pre data-language=\"php\">$prefs['template'] = array(\n        'table_open'           =&gt; '&lt;table class=\"calendar\"&gt;',\n        'cal_cell_start'       =&gt; '&lt;td class=\"day\"&gt;',\n        'cal_cell_start_today' =&gt; '&lt;td class=\"today\"&gt;'\n);\n\n$this-&gt;load-&gt;library('calendar', $prefs);\n\necho $this-&gt;calendar-&gt;generate();\n</pre>    <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_Calendar\">\n<code>class CI_Calendar</code> </dt> <dd>\n<dl class=\"method\"> <dt id=\"CI_Calendar::initialize\">\n<code>initialize([$config = array()])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$config</strong> (<em>array</em>) – Configuration parameters</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Calendar instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Calendar</p> </td> </tr>  </table> <p>Initializes the Calendaring preferences. Accepts an associative array as input, containing display preferences.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Calendar::generate\">\n<code>generate([$year = ''[, $month = ''[, $data = array()]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$year</strong> (<em>int</em>) – Year</li> <li>\n<strong>$month</strong> (<em>int</em>) – Month</li> <li>\n<strong>$data</strong> (<em>array</em>) – Data to be shown in the calendar cells</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">HTML-formatted calendar</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Generate the calendar.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Calendar::get_month_name\">\n<code>get_month_name($month)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$month</strong> (<em>int</em>) – Month</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Month name</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Generates a textual month name based on the numeric month provided.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Calendar::get_day_names\">\n<code>get_day_names($day_type = '')</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$day_type</strong> (<em>string</em>) – ‘long’, ‘short’, or ‘abr’</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Array of day names</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>Returns an array of day names (Sunday, Monday, etc.) based on the type provided. Options: long, short, abr. If no <code>$day_type</code> is provided (or if an invalid type is provided) this method will return the “abbreviated” style.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Calendar::adjust_date\">\n<code>adjust_date($month, $year)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$month</strong> (<em>int</em>) – Month</li> <li>\n<strong>$year</strong> (<em>int</em>) – Year</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An associative array containing month and year</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>This method makes sure that you have a valid month/year. For example, if you submit 13 as the month, the year will increment and the month will become January:</p> <pre data-language=\"php\">print_r($this-&gt;calendar-&gt;adjust_date(13, 2014));\n</pre> <p>outputs:</p> <pre data-language=\"php\">Array\n(\n        [month] =&gt; '01'\n        [year] =&gt; '2015'\n)\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Calendar::get_total_days\">\n<code>get_total_days($month, $year)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$month</strong> (<em>int</em>) – Month</li> <li>\n<strong>$year</strong> (<em>int</em>) – Year</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Count of days in the specified month</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">int</p> </td> </tr>  </table> <p>Total days in a given month:</p> <pre data-language=\"php\">echo $this-&gt;calendar-&gt;get_total_days(2, 2012);\n// 29\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This method is an alias for <a class=\"reference internal\" href=\"../helpers/date_helper\">Date Helper</a> function <a class=\"reference internal\" href=\"../helpers/date_helper#days_in_month\" title=\"days_in_month\"><code>days_in_month()</code></a>.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Calendar::default_template\">\n<code>default_template()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">An array of template values</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">array</td> </tr>  </table> <p>Sets the default template. This method is used when you have not created your own template.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Calendar::parse_template\">\n<code>parse_template()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">CI_Calendar instance (method chaining)</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">CI_Calendar</td> </tr>  </table> <p>Harvests the data within the template <code>{pseudo-variables}</code> used to display the calendar.</p> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/libraries/calendar.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/libraries/calendar.html</a>\n  </p>\n</div>\n","general/creating_libraries":"<h1 id=\"creating-libraries\">Creating Libraries</h1> <p>When we use the term “Libraries” we are normally referring to the classes that are located in the libraries directory and described in the Class Reference of this user guide. In this case, however, we will instead describe how you can create your own libraries within your application/libraries directory in order to maintain separation between your local resources and the global framework resources.</p> <p>As an added bonus, CodeIgniter permits your libraries to extend native classes if you simply need to add some functionality to an existing library. Or you can even replace native libraries just by placing identically named versions in your <em>application/libraries</em> directory.</p> <p>In summary:</p> <ul class=\"simple\"> <li>You can create entirely new libraries.</li> <li>You can extend native libraries.</li> <li>You can replace native libraries.</li> </ul> <p>The page below explains these three concepts in detail.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The Database classes can not be extended or replaced with your own classes. All other classes are able to be replaced/extended.</p> </div>  <h2 id=\"storage\">Storage</h2> <p>Your library classes should be placed within your <em>application/libraries</em> directory, as this is where CodeIgniter will look for them when they are initialized.</p>   <h2 id=\"naming-conventions\">Naming Conventions</h2> <ul class=\"simple\"> <li>File names must be capitalized. For example: Myclass.php</li> <li>Class declarations must be capitalized. For example: class Myclass</li> <li>Class names and file names must match.</li> </ul>   <h2 id=\"the-class-file\">The Class File</h2> <p>Classes should have this basic prototype:</p> <pre data-language=\"php\">&lt;?php\ndefined('BASEPATH') OR exit('No direct script access allowed');\n\nclass Someclass {\n\n        public function some_method()\n        {\n        }\n}\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">We are using the name Someclass purely as an example.</p> </div>   <h2 id=\"using-your-class\">Using Your Class</h2> <p>From within any of your <a class=\"reference internal\" href=\"controllers\">Controller</a> methods you can initialize your class using the standard:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('someclass');\n</pre> <p>Where <em>someclass</em> is the file name, without the ”.php” file extension. You can submit the file name capitalized or lower case. CodeIgniter doesn’t care.</p> <p>Once loaded you can access your class using the lower case version:</p> <pre data-language=\"php\">$this-&gt;someclass-&gt;some_method();  // Object instances will always be lower case\n</pre>   <h2 id=\"passing-parameters-when-initializing-your-class\">Passing Parameters When Initializing Your Class</h2> <p>In the library loading method you can dynamically pass data as an array via the second parameter and it will be passed to your class constructor:</p> <pre data-language=\"php\">$params = array('type' =&gt; 'large', 'color' =&gt; 'red');\n\n$this-&gt;load-&gt;library('someclass', $params);\n</pre> <p>If you use this feature you must set up your class constructor to expect data:</p> <pre data-language=\"php\">&lt;?php defined('BASEPATH') OR exit('No direct script access allowed');\n\nclass Someclass {\n\n        public function __construct($params)\n        {\n                // Do something with $params\n        }\n}\n</pre> <p>You can also pass parameters stored in a config file. Simply create a config file named identically to the class file name and store it in your <em>application/config/</em> directory. Note that if you dynamically pass parameters as described above, the config file option will not be available.</p>   <h2 id=\"utilizing-codeigniter-resources-within-your-library\">Utilizing CodeIgniter Resources within Your Library</h2> <p>To access CodeIgniter’s native resources within your library use the <code>get_instance()</code> method. This method returns the CodeIgniter super object.</p> <p>Normally from within your controller methods you will call any of the available CodeIgniter methods using the <code>$this</code> construct:</p> <pre data-language=\"php\">$this-&gt;load-&gt;helper('url');\n$this-&gt;load-&gt;library('session');\n$this-&gt;config-&gt;item('base_url');\n// etc.\n</pre> <p><code>$this</code>, however, only works directly within your controllers, your models, or your views. If you would like to use CodeIgniter’s classes from within your own custom classes you can do so as follows:</p> <p>First, assign the CodeIgniter object to a variable:</p> <pre data-language=\"php\">$CI =&amp; get_instance();\n</pre> <p>Once you’ve assigned the object to a variable, you’ll use that variable <em>instead</em> of <code>$this</code>:</p> <pre data-language=\"php\">$CI =&amp; get_instance();\n\n$CI-&gt;load-&gt;helper('url');\n$CI-&gt;load-&gt;library('session');\n$CI-&gt;config-&gt;item('base_url');\n// etc.\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>You’ll notice that the above <code>get_instance()</code> function is being passed by reference:</p> <pre data-language=\"php\">$CI =&amp; get_instance();\n</pre> <p class=\"last\">This is very important. Assigning by reference allows you to use the original CodeIgniter object rather than creating a copy of it.</p> </div> <p>However, since a library is a class, it would be better if you take full advantage of the OOP principles. So, in order to be able to use the CodeIgniter super-object in all of the class methods, you’re encouraged to assign it to a property instead:</p> <pre data-language=\"php\">class Example_library {\n\n        protected $CI;\n\n        // We'll use a constructor, as you can't directly call a function\n        // from a property definition.\n        public function __construct()\n        {\n                // Assign the CodeIgniter super-object\n                $this-&gt;CI =&amp; get_instance();\n        }\n\n        public function foo()\n        {\n                $this-&gt;CI-&gt;load-&gt;helper('url');\n                redirect();\n        }\n\n        public function bar()\n        {\n                echo $this-&gt;CI-&gt;config-&gt;item('base_url');\n        }\n\n}\n</pre>   <h2 id=\"replacing-native-libraries-with-your-versions\">Replacing Native Libraries with Your Versions</h2> <p>Simply by naming your class files identically to a native library will cause CodeIgniter to use it instead of the native one. To use this feature you must name the file and the class declaration exactly the same as the native library. For example, to replace the native Email library you’ll create a file named <em>application/libraries/Email.php</em>, and declare your class with:</p> <pre data-language=\"php\">class CI_Email {\n\n}\n</pre> <p>Note that most native classes are prefixed with CI_.</p> <p>To load your library you’ll see the standard loading method:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('email');\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">At this time the Database classes can not be replaced with your own versions.</p> </div>   <h2 id=\"extending-native-libraries\">Extending Native Libraries</h2> <p>If all you need to do is add some functionality to an existing library - perhaps add a method or two - then it’s overkill to replace the entire library with your version. In this case it’s better to simply extend the class. Extending a class is nearly identical to replacing a class with a couple exceptions:</p> <ul class=\"simple\"> <li>The class declaration must extend the parent class.</li> <li>Your new class name and filename must be prefixed with MY_ (this item is configurable. See below.).</li> </ul> <p>For example, to extend the native Email class you’ll create a file named <em>application/libraries/MY_Email.php</em>, and declare your class with:</p> <pre data-language=\"php\">class MY_Email extends CI_Email {\n\n}\n</pre> <p>If you need to use a constructor in your class make sure you extend the parent constructor:</p> <pre data-language=\"php\">class MY_Email extends CI_Email {\n\n        public function __construct($config = array())\n        {\n                parent::__construct($config);\n        }\n\n}\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Not all of the libraries have the same (or any) parameters in their constructor. Take a look at the library that you’re extending first to see how it should be implemented.</p> </div>  <h3 id=\"loading-your-sub-class\">Loading Your Sub-class</h3> <p>To load your sub-class you’ll use the standard syntax normally used. DO NOT include your prefix. For example, to load the example above, which extends the Email class, you will use:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('email');\n</pre> <p>Once loaded you will use the class variable as you normally would for the class you are extending. In the case of the email class all calls will use:</p> <pre data-language=\"php\">$this-&gt;email-&gt;some_method();\n</pre>   <h3 id=\"setting-your-own-prefix\">Setting Your Own Prefix</h3> <p>To set your own sub-class prefix, open your <em>application/config/config.php</em> file and look for this item:</p> <pre data-language=\"php\">$config['subclass_prefix'] = 'MY_';\n</pre> <p>Please note that all native CodeIgniter libraries are prefixed with CI_ so DO NOT use that as your prefix.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/general/creating_libraries.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/general/creating_libraries.html</a>\n  </p>\n</div>\n","libraries/email":"<h1 id=\"email-class\">Email Class</h1> <p>CodeIgniter’s robust Email Class supports the following features:</p> <ul class=\"simple\"> <li>Multiple Protocols: Mail, Sendmail, and SMTP</li> <li>TLS and SSL Encryption for SMTP</li> <li>Multiple recipients</li> <li>CC and BCCs</li> <li>HTML or Plaintext email</li> <li>Attachments</li> <li>Word wrapping</li> <li>Priorities</li> <li>BCC Batch Mode, enabling large email lists to be broken into small BCC batches.</li> <li>Email Debugging tools</li> </ul>  <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#using-the-email-library\" id=\"id1\">Using the Email Library</a><ul> <li><a class=\"reference internal\" href=\"#sending-email\" id=\"id2\">Sending Email</a></li> <li>\n<a class=\"reference internal\" href=\"#setting-email-preferences\" id=\"id3\">Setting Email Preferences</a><ul> <li><a class=\"reference internal\" href=\"#setting-email-preferences-in-a-config-file\" id=\"id4\">Setting Email Preferences in a Config File</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#email-preferences\" id=\"id5\">Email Preferences</a></li> <li><a class=\"reference internal\" href=\"#overriding-word-wrapping\" id=\"id6\">Overriding Word Wrapping</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#class-reference\" id=\"id7\">Class Reference</a></li> </ul>   <h2 id=\"using-the-email-library\">Using the Email Library</h2>  <h3 id=\"sending-email\">Sending Email</h3> <p>Sending email is not only simple, but you can configure it on the fly or set your preferences in a config file.</p> <p>Here is a basic example demonstrating how you might send email. Note: This example assumes you are sending the email from one of your <a class=\"reference internal\" href=\"../general/controllers\">controllers</a>.</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('email');\n\n$this-&gt;email-&gt;from('[email protected]', 'Your Name');\n$this-&gt;email-&gt;to('[email protected]');\n$this-&gt;email-&gt;cc('[email protected]');\n$this-&gt;email-&gt;bcc('[email protected]');\n\n$this-&gt;email-&gt;subject('Email Test');\n$this-&gt;email-&gt;message('Testing the email class.');\n\n$this-&gt;email-&gt;send();\n</pre>   <h3 id=\"setting-email-preferences\">Setting Email Preferences</h3> <p>There are 21 different preferences available to tailor how your email messages are sent. You can either set them manually as described here, or automatically via preferences stored in your config file, described below:</p> <p>Preferences are set by passing an array of preference values to the email initialize method. Here is an example of how you might set some preferences:</p> <pre data-language=\"php\">$config['protocol'] = 'sendmail';\n$config['mailpath'] = '/usr/sbin/sendmail';\n$config['charset'] = 'iso-8859-1';\n$config['wordwrap'] = TRUE;\n\n$this-&gt;email-&gt;initialize($config);\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Most of the preferences have default values that will be used if you do not set them.</p> </div>  <h4 id=\"setting-email-preferences-in-a-config-file\">Setting Email Preferences in a Config File</h4> <p>If you prefer not to set preferences using the above method, you can instead put them into a config file. Simply create a new file called the email.php, add the $config array in that file. Then save the file at config/email.php and it will be used automatically. You will NOT need to use the <code>$this-&gt;email-&gt;initialize()</code> method if you save your preferences in a config file.</p>    <h3 id=\"email-preferences\">Email Preferences</h3> <p>The following is a list of all the preferences that can be set when sending email.</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Preference</th> <th class=\"head\">Default Value</th> <th class=\"head\">Options</th> <th class=\"head\">Description</th> </tr> </thead>  <tr class=\"row-even\">\n<td><strong>useragent</strong></td> <td>CodeIgniter</td> <td>None</td> <td>The “user agent”.</td> </tr> <tr class=\"row-odd\">\n<td><strong>protocol</strong></td> <td>mail</td> <td>mail, sendmail, or smtp</td> <td>The mail sending protocol.</td> </tr> <tr class=\"row-even\">\n<td><strong>mailpath</strong></td> <td>/usr/sbin/sendmail</td> <td>None</td> <td>The server path to Sendmail.</td> </tr> <tr class=\"row-odd\">\n<td><strong>smtp_host</strong></td> <td>No Default</td> <td>None</td> <td>SMTP Server Address.</td> </tr> <tr class=\"row-even\">\n<td><strong>smtp_user</strong></td> <td>No Default</td> <td>None</td> <td>SMTP Username.</td> </tr> <tr class=\"row-odd\">\n<td><strong>smtp_pass</strong></td> <td>No Default</td> <td>None</td> <td>SMTP Password.</td> </tr> <tr class=\"row-even\">\n<td><strong>smtp_port</strong></td> <td>25</td> <td>None</td> <td>SMTP Port.</td> </tr> <tr class=\"row-odd\">\n<td><strong>smtp_timeout</strong></td> <td>5</td> <td>None</td> <td>SMTP Timeout (in seconds).</td> </tr> <tr class=\"row-even\">\n<td><strong>smtp_keepalive</strong></td> <td>FALSE</td> <td>TRUE or FALSE (boolean)</td> <td>Enable persistent SMTP connections.</td> </tr> <tr class=\"row-odd\">\n<td><strong>smtp_crypto</strong></td> <td>No Default</td> <td>tls or ssl</td> <td>SMTP Encryption</td> </tr> <tr class=\"row-even\">\n<td><strong>wordwrap</strong></td> <td>TRUE</td> <td>TRUE or FALSE (boolean)</td> <td>Enable word-wrap.</td> </tr> <tr class=\"row-odd\">\n<td><strong>wrapchars</strong></td> <td>76</td> <td> </td> <td>Character count to wrap at.</td> </tr> <tr class=\"row-even\">\n<td><strong>mailtype</strong></td> <td>text</td> <td>text or html</td> <td>Type of mail. If you send HTML email you must send it as a complete web page. Make sure you don’t have any relative links or relative image paths otherwise they will not work.</td> </tr> <tr class=\"row-odd\">\n<td><strong>charset</strong></td> <td><code>$config['charset']</code></td> <td> </td> <td>Character set (utf-8, iso-8859-1, etc.).</td> </tr> <tr class=\"row-even\">\n<td><strong>validate</strong></td> <td>FALSE</td> <td>TRUE or FALSE (boolean)</td> <td>Whether to validate the email address.</td> </tr> <tr class=\"row-odd\">\n<td><strong>priority</strong></td> <td>3</td> <td>1, 2, 3, 4, 5</td> <td>Email Priority. 1 = highest. 5 = lowest. 3 = normal.</td> </tr> <tr class=\"row-even\">\n<td><strong>crlf</strong></td> <td>\\n</td> <td>“\\r\\n” or “\\n” or “\\r”</td> <td>Newline character. (Use “\\r\\n” to comply with RFC 822).</td> </tr> <tr class=\"row-odd\">\n<td><strong>newline</strong></td> <td>\\n</td> <td>“\\r\\n” or “\\n” or “\\r”</td> <td>Newline character. (Use “\\r\\n” to comply with RFC 822).</td> </tr> <tr class=\"row-even\">\n<td><strong>bcc_batch_mode</strong></td> <td>FALSE</td> <td>TRUE or FALSE (boolean)</td> <td>Enable BCC Batch Mode.</td> </tr> <tr class=\"row-odd\">\n<td><strong>bcc_batch_size</strong></td> <td>200</td> <td>None</td> <td>Number of emails in each BCC batch.</td> </tr> <tr class=\"row-even\">\n<td><strong>dsn</strong></td> <td>FALSE</td> <td>TRUE or FALSE (boolean)</td> <td>Enable notify message from server</td> </tr>  </table>   <h3 id=\"overriding-word-wrapping\">Overriding Word Wrapping</h3> <p>If you have word wrapping enabled (recommended to comply with RFC 822) and you have a very long link in your email it can get wrapped too, causing it to become un-clickable by the person receiving it. CodeIgniter lets you manually override word wrapping within part of your message like this:</p> <pre data-language=\"php\">The text of your email that\ngets wrapped normally.\n\n{unwrap}http://example.com/a_long_link_that_should_not_be_wrapped.html{/unwrap}\n\nMore text that will be\nwrapped normally.\n</pre> <p>Place the item you do not want word-wrapped between: {unwrap} {/unwrap}</p>    <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_Email\">\n<code>class CI_Email</code> </dt> <dd>\n<dl class=\"method\"> <dt id=\"CI_Email::from\">\n<code>from($from[, $name = ''[, $return_path = NULL]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$from</strong> (<em>string</em>) – “From” e-mail address</li> <li>\n<strong>$name</strong> (<em>string</em>) – “From” display name</li> <li>\n<strong>$return_path</strong> (<em>string</em>) – Optional email address to redirect undelivered e-mail to</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Email instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Email</p> </td> </tr>  </table> <p>Sets the email address and name of the person sending the email:</p> <pre data-language=\"php\">$this-&gt;email-&gt;from('[email protected]', 'Your Name');\n</pre> <p>You can also set a Return-Path, to help redirect undelivered mail:</p> <pre data-language=\"php\">$this-&gt;email-&gt;from('[email protected]', 'Your Name', '[email protected]');\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Return-Path can’t be used if you’ve configured ‘smtp’ as your protocol.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Email::reply_to\">\n<code>reply_to($replyto[, $name = ''])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$replyto</strong> (<em>string</em>) – E-mail address for replies</li> <li>\n<strong>$name</strong> (<em>string</em>) – Display name for the reply-to e-mail address</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Email instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Email</p> </td> </tr>  </table> <p>Sets the reply-to address. If the information is not provided the information in the :meth:from method is used. Example:</p> <pre data-language=\"php\">$this-&gt;email-&gt;reply_to('[email protected]', 'Your Name');\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Email::to\">\n<code>to($to)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$to</strong> (<em>mixed</em>) – Comma-delimited string or an array of e-mail addresses</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Email instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Email</p> </td> </tr>  </table> <p>Sets the email address(s) of the recipient(s). Can be a single e-mail, a comma-delimited list or an array:</p> <pre data-language=\"php\">$this-&gt;email-&gt;to('[email protected]');\n</pre> <pre data-language=\"php\">$this-&gt;email-&gt;to('[email protected], [email protected], [email protected]');\n</pre> <pre data-language=\"php\">$this-&gt;email-&gt;to(\n        array('[email protected]', '[email protected]', '[email protected]')\n);\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Email::cc\">\n<code>cc($cc)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$cc</strong> (<em>mixed</em>) – Comma-delimited string or an array of e-mail addresses</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Email instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Email</p> </td> </tr>  </table> <p>Sets the CC email address(s). Just like the “to”, can be a single e-mail, a comma-delimited list or an array.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Email::bcc\">\n<code>bcc($bcc[, $limit = ''])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$bcc</strong> (<em>mixed</em>) – Comma-delimited string or an array of e-mail addresses</li> <li>\n<strong>$limit</strong> (<em>int</em>) – Maximum number of e-mails to send per batch</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Email instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Email</p> </td> </tr>  </table> <p>Sets the BCC email address(s). Just like the <code>to()</code> method, can be a single e-mail, a comma-delimited list or an array.</p> <p>If <code>$limit</code> is set, “batch mode” will be enabled, which will send the emails to batches, with each batch not exceeding the specified <code>$limit</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Email::subject\">\n<code>subject($subject)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$subject</strong> (<em>string</em>) – E-mail subject line</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Email instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Email</p> </td> </tr>  </table> <p>Sets the email subject:</p> <pre data-language=\"php\">$this-&gt;email-&gt;subject('This is my subject');\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Email::message\">\n<code>message($body)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$body</strong> (<em>string</em>) – E-mail message body</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Email instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Email</p> </td> </tr>  </table> <p>Sets the e-mail message body:</p> <pre data-language=\"php\">$this-&gt;email-&gt;message('This is my message');\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Email::set_alt_message\">\n<code>set_alt_message($str)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Alternative e-mail message body</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Email instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Email</p> </td> </tr>  </table> <p>Sets the alternative e-mail message body:</p> <pre data-language=\"php\">$this-&gt;email-&gt;set_alt_message('This is the alternative message');\n</pre> <p>This is an optional message string which can be used if you send HTML formatted email. It lets you specify an alternative message with no HTML formatting which is added to the header string for people who do not accept HTML email. If you do not set your own message CodeIgniter will extract the message from your HTML email and strip the tags.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Email::set_header\">\n<code>set_header($header, $value)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$header</strong> (<em>string</em>) – Header name</li> <li>\n<strong>$value</strong> (<em>string</em>) – Header value</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Email instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Email</p> </td> </tr>  </table> <p>Appends additional headers to the e-mail:</p> <pre data-language=\"php\">$this-&gt;email-&gt;set_header('Header1', 'Value1');\n$this-&gt;email-&gt;set_header('Header2', 'Value2');\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Email::clear\">\n<code>clear([$clear_attachments = FALSE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$clear_attachments</strong> (<em>bool</em>) – Whether or not to clear attachments</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Email instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Email</p> </td> </tr>  </table> <p>Initializes all the email variables to an empty state. This method is intended for use if you run the email sending method in a loop, permitting the data to be reset between cycles.</p> <pre data-language=\"php\">foreach ($list as $name =&gt; $address)\n{\n        $this-&gt;email-&gt;clear();\n\n        $this-&gt;email-&gt;to($address);\n        $this-&gt;email-&gt;from('[email protected]');\n        $this-&gt;email-&gt;subject('Here is your info '.$name);\n        $this-&gt;email-&gt;message('Hi '.$name.' Here is the info you requested.');\n        $this-&gt;email-&gt;send();\n}\n</pre> <p>If you set the parameter to TRUE any attachments will be cleared as well:</p> <pre data-language=\"php\">$this-&gt;email-&gt;clear(TRUE);\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Email::send\">\n<code>send([$auto_clear = TRUE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$auto_clear</strong> (<em>bool</em>) – Whether to clear message data automatically</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>The e-mail sending method. Returns boolean TRUE or FALSE based on success or failure, enabling it to be used conditionally:</p> <pre data-language=\"php\">if ( ! $this-&gt;email-&gt;send())\n{\n        // Generate error\n}\n</pre> <p>This method will automatically clear all parameters if the request was successful. To stop this behaviour pass FALSE:</p> <pre data-language=\"php\">if ($this-&gt;email-&gt;send(FALSE))\n{\n        // Parameters won't be cleared\n}\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In order to use the <code>print_debugger()</code> method, you need to avoid clearing the email parameters.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Email::attach\">\n<code>attach($filename[, $disposition = ''[, $newname = NULL[, $mime = '']]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$filename</strong> (<em>string</em>) – File name</li> <li>\n<strong>$disposition</strong> (<em>string</em>) – ‘disposition’ of the attachment. Most email clients make their own decision regardless of the MIME specification used here. <a class=\"reference external\" href=\"https://www.iana.org/assignments/cont-disp/cont-disp.xhtml\">https://www.iana.org/assignments/cont-disp/cont-disp.xhtml</a>\n</li> <li>\n<strong>$newname</strong> (<em>string</em>) – Custom file name to use in the e-mail</li> <li>\n<strong>$mime</strong> (<em>string</em>) – MIME type to use (useful for buffered data)</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Email instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Email</p> </td> </tr>  </table> <p>Enables you to send an attachment. Put the file path/name in the first parameter. For multiple attachments use the method multiple times. For example:</p> <pre data-language=\"php\">$this-&gt;email-&gt;attach('/path/to/photo1.jpg');\n$this-&gt;email-&gt;attach('/path/to/photo2.jpg');\n$this-&gt;email-&gt;attach('/path/to/photo3.jpg');\n</pre> <p>To use the default disposition (attachment), leave the second parameter blank, otherwise use a custom disposition:</p> <pre data-language=\"php\">$this-&gt;email-&gt;attach('image.jpg', 'inline');\n</pre> <p>You can also use a URL:</p> <pre data-language=\"php\">$this-&gt;email-&gt;attach('http://example.com/filename.pdf');\n</pre> <p>If you’d like to use a custom file name, you can use the third paramater:</p> <pre data-language=\"php\">$this-&gt;email-&gt;attach('filename.pdf', 'attachment', 'report.pdf');\n</pre> <p>If you need to use a buffer string instead of a real - physical - file you can use the first parameter as buffer, the third parameter as file name and the fourth parameter as mime-type:</p> <pre data-language=\"php\">$this-&gt;email-&gt;attach($buffer, 'attachment', 'report.pdf', 'application/pdf');\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Email::attachment_cid\">\n<code>attachment_cid($filename)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$filename</strong> (<em>string</em>) – Existing attachment filename</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Attachment Content-ID or FALSE if not found</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Sets and returns an attachment’s Content-ID, which enables your to embed an inline (picture) attachment into HTML. First parameter must be the already attached file name.</p> <pre data-language=\"php\">$filename = '/img/photo1.jpg';\n$this-&gt;email-&gt;attach($filename);\nforeach ($list as $address)\n{\n        $this-&gt;email-&gt;to($address);\n        $cid = $this-&gt;email-&gt;attachment_cid($filename);\n        $this-&gt;email-&gt;message('&lt;img src=\"cid:'. $cid .'\" alt=\"photo1\" /&gt;');\n        $this-&gt;email-&gt;send();\n}\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Content-ID for each e-mail must be re-created for it to be unique.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Email::print_debugger\">\n<code>print_debugger([$include = array('headers', 'subject', 'body')])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$include</strong> (<em>array</em>) – Which parts of the message to print out</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Formatted debug data</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Returns a string containing any server messages, the email headers, and the email messsage. Useful for debugging.</p> <p>You can optionally specify which parts of the message should be printed. Valid options are: <strong>headers</strong>, <strong>subject</strong>, <strong>body</strong>.</p> <p>Example:</p> <pre data-language=\"php\">// You need to pass FALSE while sending in order for the email data\n// to not be cleared - if that happens, print_debugger() would have\n// nothing to output.\n$this-&gt;email-&gt;send(FALSE);\n\n// Will only print the email headers, excluding the message subject and body\n$this-&gt;email-&gt;print_debugger(array('headers'));\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">By default, all of the raw data will be printed.</p> </div> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/libraries/email.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/libraries/email.html</a>\n  </p>\n</div>\n","libraries/language":"<h1 id=\"language-class\">Language Class</h1> <p>The Language Class provides functions to retrieve language files and lines of text for purposes of internationalization.</p> <p>In your CodeIgniter <strong>system</strong> folder, you will find a <strong>language</strong> sub-directory containing a set of language files for the <strong>english</strong> idiom. The files in this directory (<strong>system/language/english/</strong>) define the regular messages, error messages, and other generally output terms or expressions, for the different parts of the CodeIgniter framework.</p> <p>You can create or incorporate your own language files, as needed, in order to provide application-specific error and other messages, or to provide translations of the core messages into other languages. These translations or additional messages would go inside your <strong>application/language/</strong> directory, with separate sub-directories for each idiom (for instance, ‘french’ or ‘german’).</p> <p>The CodeIgniter framework comes with a set of language files for the “english” idiom. Additional approved translations for different idioms may be found in the <a class=\"reference external\" href=\"https://github.com/bcit-ci/codeigniter3-translations\">CodeIgniter 3 Translations repositories</a>. Each repository deals with a single idiom.</p> <p>When CodeIgniter loads language files, it will load the one in <strong>system/language/</strong> first and will then look for an override in your <strong>application/language/</strong> directory.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Each language should be stored in its own folder. For example, the English files are located at: system/language/english</p> </div>  <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#handling-multiple-languages\" id=\"id1\">Handling Multiple Languages</a><ul> <li><a class=\"reference internal\" href=\"#sample-language-files\" id=\"id2\">Sample Language Files</a></li> <li><a class=\"reference internal\" href=\"#example-of-switching-languages\" id=\"id3\">Example of switching languages</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#internationalization\" id=\"id4\">Internationalization</a></li> <li>\n<a class=\"reference internal\" href=\"#using-the-language-class\" id=\"id5\">Using the Language Class</a><ul> <li><a class=\"reference internal\" href=\"#creating-language-files\" id=\"id6\">Creating Language Files</a></li> <li><a class=\"reference internal\" href=\"#loading-a-language-file\" id=\"id7\">Loading A Language File</a></li> <li>\n<a class=\"reference internal\" href=\"#fetching-a-line-of-text\" id=\"id8\">Fetching a Line of Text</a><ul> <li><a class=\"reference internal\" href=\"#using-language-lines-as-form-labels\" id=\"id9\">Using language lines as form labels</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#auto-loading-languages\" id=\"id10\">Auto-loading Languages</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#class-reference\" id=\"id11\">Class Reference</a></li> </ul>   <h2 id=\"handling-multiple-languages\">Handling Multiple Languages</h2> <p>If you want to support multiple languages in your application, you would provide folders inside your <strong>application/language/</strong> directory for each of them, and you would specify the default language in your <strong>application/config/config.php</strong>.</p> <p>The <strong>application/language/english/</strong> directory would contain any additional language files needed by your application, for instance for error messages.</p> <p>Each of the other idiom-specific directories would contain the core language files that you obtained from the translations repositories, or that you translated yourself, as well as any additional ones needed by your application.</p> <p>You would store the language you are currently using, for instance in a session variable.</p>  <h3 id=\"sample-language-files\">Sample Language Files</h3> <pre data-language=\"php\">system/\n        language/\n                english/\n                        ...\n                        email_lang.php\n                        form_validation_lang.php\n                        ...\n\napplication/\n        language/\n                english/\n                        error_messages_lang.php\n                french/\n                        ...\n                        email_lang.php\n                        error_messages_lang.php\n                        form_validation_lang.php\n                        ...\n</pre>   <h3 id=\"example-of-switching-languages\">Example of switching languages</h3> <pre data-language=\"php\">$idiom = $this-&gt;session-&gt;get_userdata('language');\n$this-&gt;lang-&gt;load('error_messages', $idiom);\n$oops = $this-&gt;lang-&gt;line('message_key');\n</pre>    <h2 id=\"internationalization\">Internationalization</h2> <p>The Language class in CodeIgniter is meant to provide an easy and lightweight way to support multiplelanguages in your application. It is not meant to be a full implementation of what is commonly called <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Internationalization_and_localization\">internationalization and localization</a>.</p> <p>We use the term “idiom” to refer to a language using its common name, rather than using any of the international standards, such as “en”, “en-US”, or “en-CA-x-ca” for English and some of its variants.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">There is nothing to prevent you from using those abbreviations in your application!</p> </div>   <h2 id=\"using-the-language-class\">Using the Language Class</h2>  <h3 id=\"creating-language-files\">Creating Language Files</h3> <p>Language files must be named with <strong>_lang.php</strong> as the filename extension. For example, let’s say you want to create a file containing error messages. You might name it: error_lang.php</p> <p>Within the file you will assign each line of text to an array called <code>$lang</code> with this prototype:</p> <pre data-language=\"php\">$lang['language_key'] = 'The actual message to be shown';\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">It’s a good practice to use a common prefix for all messages in a given file to avoid collisions with similarly named items in other files. For example, if you are creating error messages you might prefix them with error_</p> </div> <pre data-language=\"php\">$lang['error_email_missing'] = 'You must submit an email address';\n$lang['error_url_missing'] = 'You must submit a URL';\n$lang['error_username_missing'] = 'You must submit a username';\n</pre>   <h3 id=\"loading-a-language-file\">Loading A Language File</h3> <p>In order to fetch a line from a particular file you must load the file first. Loading a language file is done with the following code:</p> <pre data-language=\"php\">$this-&gt;lang-&gt;load('filename', 'language');\n</pre> <p>Where filename is the name of the file you wish to load (without the file extension), and language is the language set containing it (ie, english). If the second parameter is missing, the default language set in your <strong>application/config/config.php</strong> file will be used.</p> <p>You can also load multiple language files at the same time by passing an array of language files as first parameter.</p> <pre data-language=\"php\">$this-&gt;lang-&gt;load(array('filename1', 'filename2'));\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <em>language</em> parameter can only consist of letters.</p> </div>   <h3 id=\"fetching-a-line-of-text\">Fetching a Line of Text</h3> <p>Once your desired language file is loaded you can access any line of text using this function:</p> <pre data-language=\"php\">$this-&gt;lang-&gt;line('language_key');\n</pre> <p>Where <em>language_key</em> is the array key corresponding to the line you wish to show.</p> <p>You can optionally pass FALSE as the second argument of that method to disable error logging, in case you’re not sure if the line exists:</p> <pre data-language=\"php\">$this-&gt;lang-&gt;line('misc_key', FALSE);\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This method simply returns the line. It does not echo it.</p> </div>  <h4 id=\"using-language-lines-as-form-labels\">Using language lines as form labels</h4> <p>This feature has been deprecated from the language library and moved to the <a class=\"reference internal\" href=\"../helpers/language_helper#lang\" title=\"lang\"><code>lang()</code></a> function of the <a class=\"reference internal\" href=\"../helpers/language_helper\">Language Helper</a>.</p>    <h3 id=\"auto-loading-languages\">Auto-loading Languages</h3> <p>If you find that you need a particular language globally throughout your application, you can tell CodeIgniter to <a class=\"reference internal\" href=\"../general/autoloader\">auto-load</a> it during system initialization. This is done by opening the <strong>application/config/autoload.php</strong> file and adding the language(s) to the autoload array.</p>    <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_Lang\">\n<code>class CI_Lang</code> </dt> <dd>\n<dl class=\"method\"> <dt id=\"CI_Lang::load\">\n<code>load($langfile[, $idiom = ''[, $return = FALSE[, $add_suffix = TRUE[, $alt_path = '']]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$langfile</strong> (<em>mixed</em>) – Language file to load or array with multiple files</li> <li>\n<strong>$idiom</strong> (<em>string</em>) – Language name (i.e. ‘english’)</li> <li>\n<strong>$return</strong> (<em>bool</em>) – Whether to return the loaded array of translations</li> <li>\n<strong>$add_suffix</strong> (<em>bool</em>) – Whether to add the ‘_lang’ suffix to the language file name</li> <li>\n<strong>$alt_path</strong> (<em>string</em>) – An alternative path to look in for the language file</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Array of language lines if $return is set to TRUE, otherwise void</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Loads a language file.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Lang::line\">\n<code>line($line[, $log_errors = TRUE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$line</strong> (<em>string</em>) – Language line key name</li> <li>\n<strong>$log_errors</strong> (<em>bool</em>) – Whether to log an error if the line isn’t found</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Language line string or FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Fetches a single translation line from the already loaded language files, based on the line’s name.</p> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/libraries/language.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/libraries/language.html</a>\n  </p>\n</div>\n","general/styleguide":"<h1 id=\"php-style-guide\">PHP Style Guide</h1> <p>The following page describes the coding styles adhered to when contributing to the development of CodeIgniter. There is no requirement to use these styles in your own CodeIgniter application, though they are recommended.</p>  <p class=\"topic-title first\">Table of Contents</p> <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#php-style-guide\" id=\"id1\">PHP Style Guide</a><ul> <li>\n<a class=\"reference internal\" href=\"#file-format\" id=\"id2\">File Format</a><ul> <li><a class=\"reference internal\" href=\"#textmate\" id=\"id3\">TextMate</a></li> <li><a class=\"reference internal\" href=\"#bbedit\" id=\"id4\">BBEdit</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#php-closing-tag\" id=\"id5\">PHP Closing Tag</a></li> <li><a class=\"reference internal\" href=\"#file-naming\" id=\"id6\">File Naming</a></li> <li><a class=\"reference internal\" href=\"#class-and-method-naming\" id=\"id7\">Class and Method Naming</a></li> <li><a class=\"reference internal\" href=\"#variable-names\" id=\"id8\">Variable Names</a></li> <li><a class=\"reference internal\" href=\"#commenting\" id=\"id9\">Commenting</a></li> <li><a class=\"reference internal\" href=\"#constants\" id=\"id10\">Constants</a></li> <li><a class=\"reference internal\" href=\"#true-false-and-null\" id=\"id11\">TRUE, FALSE, and NULL</a></li> <li><a class=\"reference internal\" href=\"#logical-operators\" id=\"id12\">Logical Operators</a></li> <li><a class=\"reference internal\" href=\"#comparing-return-values-and-typecasting\" id=\"id13\">Comparing Return Values and Typecasting</a></li> <li><a class=\"reference internal\" href=\"#debugging-code\" id=\"id14\">Debugging Code</a></li> <li><a class=\"reference internal\" href=\"#whitespace-in-files\" id=\"id15\">Whitespace in Files</a></li> <li><a class=\"reference internal\" href=\"#compatibility\" id=\"id16\">Compatibility</a></li> <li><a class=\"reference internal\" href=\"#one-file-per-class\" id=\"id17\">One File per Class</a></li> <li><a class=\"reference internal\" href=\"#whitespace\" id=\"id18\">Whitespace</a></li> <li><a class=\"reference internal\" href=\"#line-breaks\" id=\"id19\">Line Breaks</a></li> <li><a class=\"reference internal\" href=\"#code-indenting\" id=\"id20\">Code Indenting</a></li> <li><a class=\"reference internal\" href=\"#bracket-and-parenthetic-spacing\" id=\"id21\">Bracket and Parenthetic Spacing</a></li> <li><a class=\"reference internal\" href=\"#localized-text\" id=\"id22\">Localized Text</a></li> <li><a class=\"reference internal\" href=\"#private-methods-and-variables\" id=\"id23\">Private Methods and Variables</a></li> <li><a class=\"reference internal\" href=\"#php-errors\" id=\"id24\">PHP Errors</a></li> <li><a class=\"reference internal\" href=\"#short-open-tags\" id=\"id25\">Short Open Tags</a></li> <li><a class=\"reference internal\" href=\"#one-statement-per-line\" id=\"id26\">One Statement Per Line</a></li> <li><a class=\"reference internal\" href=\"#strings\" id=\"id27\">Strings</a></li> <li><a class=\"reference internal\" href=\"#sql-queries\" id=\"id28\">SQL Queries</a></li> <li><a class=\"reference internal\" href=\"#default-function-arguments\" id=\"id29\">Default Function Arguments</a></li> </ul> </li> </ul>   <h2 id=\"file-format\">File Format</h2> <p>Files should be saved with Unicode (UTF-8) encoding. The BOM should <em>not</em> be used. Unlike UTF-16 and UTF-32, there’s no byte order to indicate in a UTF-8 encoded file, and the BOM can have a negative side effect in PHP of sending output, preventing the application from being able to set its own headers. Unix line endings should be used (LF).</p> <p>Here is how to apply these settings in some of the more common text editors. Instructions for your text editor may vary; check your text editor’s documentation.</p>  <h3 id=\"textmate\">TextMate</h3> <ol class=\"arabic simple\"> <li>Open the Application Preferences</li> <li>Click Advanced, and then the “Saving” tab</li> <li>In “File Encoding”, select “UTF-8 (recommended)”</li> <li>In “Line Endings”, select “LF (recommended)”</li> <li>\n<em>Optional:</em> Check “Use for existing files as well” if you wish to modify the line endings of files you open to your new preference.</li> </ol>   <h3 id=\"bbedit\">BBEdit</h3> <ol class=\"arabic simple\"> <li>Open the Application Preferences</li> <li>Select “Text Encodings” on the left.</li> <li>In “Default text encoding for new documents”, select “Unicode (UTF-8, no BOM)”</li> <li>\n<em>Optional:</em> In “If file’s encoding can’t be guessed, use”, select “Unicode (UTF-8, no BOM)”</li> <li>Select “Text Files” on the left.</li> <li>In “Default line breaks”, select “Mac OS X and Unix (LF)”</li> </ol>    <h2 id=\"php-closing-tag\">PHP Closing Tag</h2> <p>The PHP closing tag on a PHP document <strong>?&gt;</strong> is optional to the PHP parser. However, if used, any whitespace following the closing tag, whether introduced by the developer, user, or an FTP application, can cause unwanted output, PHP errors, or if the latter are suppressed, blank pages. For this reason, all PHP files MUST OMIT the PHP closing tag and end with a single empty line instead.</p>   <h2 id=\"file-naming\">File Naming</h2> <p>Class files must be named in a Ucfirst-like manner, while any other file name (configurations, views, generic scripts, etc.) should be in all lowercase.</p> <p><strong>INCORRECT</strong>:</p> <pre data-language=\"php\">somelibrary.php\nsomeLibrary.php\nSOMELIBRARY.php\nSome_Library.php\n\nApplication_config.php\nApplication_Config.php\napplicationConfig.php\n</pre> <p><strong>CORRECT</strong>:</p> <pre data-language=\"php\">Somelibrary.php\nSome_library.php\n\napplicationconfig.php\napplication_config.php\n</pre> <p>Furthermore, class file names should match the name of the class itself. For example, if you have a class named <cite>Myclass</cite>, then its filename must be <strong>Myclass.php</strong>.</p>   <h2 id=\"class-and-method-naming\">Class and Method Naming</h2> <p>Class names should always start with an uppercase letter. Multiple words should be separated with an underscore, and not CamelCased.</p> <p><strong>INCORRECT</strong>:</p> <pre data-language=\"php\">class superclass\nclass SuperClass\n</pre> <p><strong>CORRECT</strong>:</p> <pre data-language=\"php\">class Super_class\n</pre> <pre data-language=\"php\">class Super_class {\n\n        public function __construct()\n        {\n\n        }\n}\n</pre> <p>Class methods should be entirely lowercased and named to clearly indicate their function, preferably including a verb. Try to avoid overly long and verbose names. Multiple words should be separated with an underscore.</p> <p><strong>INCORRECT</strong>:</p> <pre data-language=\"php\">function fileproperties()               // not descriptive and needs underscore separator\nfunction fileProperties()               // not descriptive and uses CamelCase\nfunction getfileproperties()            // Better!  But still missing underscore separator\nfunction getFileProperties()            // uses CamelCase\nfunction get_the_file_properties_from_the_file()        // wordy\n</pre> <p><strong>CORRECT</strong>:</p> <pre data-language=\"php\">function get_file_properties()  // descriptive, underscore separator, and all lowercase letters\n</pre>   <h2 id=\"variable-names\">Variable Names</h2> <p>The guidelines for variable naming are very similar to those used for class methods. Variables should contain only lowercase letters, use underscore separators, and be reasonably named to indicate their purpose and contents. Very short, non-word variables should only be used as iterators in for() loops.</p> <p><strong>INCORRECT</strong>:</p> <pre data-language=\"php\">$j = 'foo';             // single letter variables should only be used in for() loops\n$Str                    // contains uppercase letters\n$bufferedText           // uses CamelCasing, and could be shortened without losing semantic meaning\n$groupid                // multiple words, needs underscore separator\n$name_of_last_city_used // too long\n</pre> <p><strong>CORRECT</strong>:</p> <pre data-language=\"php\">for ($j = 0; $j &lt; 10; $j++)\n$str\n$buffer\n$group_id\n$last_city\n</pre>   <h2 id=\"commenting\">Commenting</h2> <p>In general, code should be commented prolifically. It not only helps describe the flow and intent of the code for less experienced programmers, but can prove invaluable when returning to your own code months down the line. There is not a required format for comments, but the following are recommended.</p> <p><a class=\"reference external\" href=\"http://manual.phpdoc.org/HTMLSmartyConverter/HandS/phpDocumentor/tutorial_phpDocumentor.howto.pkg.html#basics.docblock\">DocBlock</a> style comments preceding class, method, and property declarations so they can be picked up by IDEs:</p> <pre data-language=\"php\">/**\n * Super Class\n *\n * @package     Package Name\n * @subpackage  Subpackage\n * @category    Category\n * @author      Author Name\n * @link        http://example.com\n */\nclass Super_class {\n</pre> <pre data-language=\"php\">/**\n * Encodes string for use in XML\n *\n * @param       string  $str    Input string\n * @return      string\n */\nfunction xml_encode($str)\n</pre> <pre data-language=\"php\">/**\n * Data for class manipulation\n *\n * @var array\n */\npublic $data = array();\n</pre> <p>Use single line comments within code, leaving a blank line between large comment blocks and code.</p> <pre data-language=\"php\">// break up the string by newlines\n$parts = explode(\"\\n\", $str);\n\n// A longer comment that needs to give greater detail on what is\n// occurring and why can use multiple single-line comments.  Try to\n// keep the width reasonable, around 70 characters is the easiest to\n// read.  Don't hesitate to link to permanent external resources\n// that may provide greater detail:\n//\n// http://example.com/information_about_something/in_particular/\n\n$parts = $this-&gt;foo($parts);\n</pre>   <h2 id=\"constants\">Constants</h2> <p>Constants follow the same guidelines as do variables, except constants should always be fully uppercase. <em>Always use CodeIgniter constants when appropriate, i.e. SLASH, LD, RD, PATH_CACHE, etc.</em></p> <p><strong>INCORRECT</strong>:</p> <pre data-language=\"php\">myConstant      // missing underscore separator and not fully uppercase\nN               // no single-letter constants\nS_C_VER         // not descriptive\n$str = str_replace('{foo}', 'bar', $str);       // should use LD and RD constants\n</pre> <p><strong>CORRECT</strong>:</p> <pre data-language=\"php\">MY_CONSTANT\nNEWLINE\nSUPER_CLASS_VERSION\n$str = str_replace(LD.'foo'.RD, 'bar', $str);\n</pre>   <h2 id=\"true-false-and-null\">TRUE, FALSE, and NULL</h2> <p><strong>TRUE</strong>, <strong>FALSE</strong>, and <strong>NULL</strong> keywords should always be fully uppercase.</p> <p><strong>INCORRECT</strong>:</p> <pre data-language=\"php\">if ($foo == true)\n$bar = false;\nfunction foo($bar = null)\n</pre> <p><strong>CORRECT</strong>:</p> <pre data-language=\"php\">if ($foo == TRUE)\n$bar = FALSE;\nfunction foo($bar = NULL)\n</pre>   <h2 id=\"logical-operators\">Logical Operators</h2> <p>Use of the <code>||</code> “or” comparison operator is discouraged, as its clarity on some output devices is low (looking like the number 11, for instance). <code>&amp;&amp;</code> is preferred over <code>AND</code> but either are acceptable, and a space should always precede and follow <code>!</code>.</p> <p><strong>INCORRECT</strong>:</p> <pre data-language=\"php\">if ($foo || $bar)\nif ($foo AND $bar)  // okay but not recommended for common syntax highlighting applications\nif (!$foo)\nif (! is_array($foo))\n</pre> <p><strong>CORRECT</strong>:</p> <pre data-language=\"php\">if ($foo OR $bar)\nif ($foo &amp;&amp; $bar) // recommended\nif ( ! $foo)\nif ( ! is_array($foo))\n</pre>   <h2 id=\"comparing-return-values-and-typecasting\">Comparing Return Values and Typecasting</h2> <p>Some PHP functions return FALSE on failure, but may also have a valid return value of “” or 0, which would evaluate to FALSE in loose comparisons. Be explicit by comparing the variable type when using these return values in conditionals to ensure the return value is indeed what you expect, and not a value that has an equivalent loose-type evaluation.</p> <p>Use the same stringency in returning and checking your own variables. Use <strong>===</strong> and <strong>!==</strong> as necessary.</p> <p><strong>INCORRECT</strong>:</p> <pre data-language=\"php\">// If 'foo' is at the beginning of the string, strpos will return a 0,\n// resulting in this conditional evaluating as TRUE\nif (strpos($str, 'foo') == FALSE)\n</pre> <p><strong>CORRECT</strong>:</p> <pre data-language=\"php\">if (strpos($str, 'foo') === FALSE)\n</pre> <p><strong>INCORRECT</strong>:</p> <pre data-language=\"php\">function build_string($str = \"\")\n{\n        if ($str == \"\") // uh-oh!  What if FALSE or the integer 0 is passed as an argument?\n        {\n\n        }\n}\n</pre> <p><strong>CORRECT</strong>:</p> <pre data-language=\"php\">function build_string($str = \"\")\n{\n        if ($str === \"\")\n        {\n\n        }\n}\n</pre> <p>See also information regarding <a class=\"reference external\" href=\"http://php.net/manual/en/language.types.type-juggling.php#language.types.typecasting\">typecasting</a>, which can be quite useful. Typecasting has a slightly different effect which may be desirable. When casting a variable as a string, for instance, NULL and boolean FALSE variables become empty strings, 0 (and other numbers) become strings of digits, and boolean TRUE becomes “1”:</p> <pre data-language=\"php\">$str = (string) $str; // cast $str as a string\n</pre>   <h2 id=\"debugging-code\">Debugging Code</h2> <p>Do not leave debugging code in your submissions, even when commented out. Things such as <code>var_dump()</code>, <code>print_r()</code>, <code>die()</code>/<code>exit()</code> should not be included in your code unless it serves a specific purpose other than debugging.</p>   <h2 id=\"whitespace-in-files\">Whitespace in Files</h2> <p>No whitespace can precede the opening PHP tag or follow the closing PHP tag. Output is buffered, so whitespace in your files can cause output to begin before CodeIgniter outputs its content, leading to errors and an inability for CodeIgniter to send proper headers.</p>   <h2 id=\"compatibility\">Compatibility</h2> <p>CodeIgniter recommends PHP 5.6 or newer to be used, but it should be compatible with PHP 5.3.7. Your code must either be compatible with this requirement, provide a suitable fallback, or be an optional feature that dies quietly without affecting a user’s application.</p> <p>Additionally, do not use PHP functions that require non-default libraries to be installed unless your code contains an alternative method when the function is not available.</p>   <h2 id=\"one-file-per-class\">One File per Class</h2> <p>Use separate files for each class, unless the classes are <em>closely related</em>. An example of a CodeIgniter file that contains multiple classes is the Xmlrpc library file.</p>   <h2 id=\"whitespace\">Whitespace</h2> <p>Use tabs for whitespace in your code, not spaces. This may seem like a small thing, but using tabs instead of whitespace allows the developer looking at your code to have indentation at levels that they prefer and customize in whatever application they use. And as a side benefit, it results in (slightly) more compact files, storing one tab character versus, say, four space characters.</p>   <h2 id=\"line-breaks\">Line Breaks</h2> <p>Files must be saved with Unix line breaks. This is more of an issue for developers who work in Windows, but in any case ensure that your text editor is setup to save files with Unix line breaks.</p>   <h2 id=\"code-indenting\">Code Indenting</h2> <p>Use Allman style indenting. With the exception of Class declarations, braces are always placed on a line by themselves, and indented at the same level as the control statement that “owns” them.</p> <p><strong>INCORRECT</strong>:</p> <pre data-language=\"php\">function foo($bar) {\n        // ...\n}\n\nforeach ($arr as $key =&gt; $val) {\n        // ...\n}\n\nif ($foo == $bar) {\n        // ...\n} else {\n        // ...\n}\n\nfor ($i = 0; $i &lt; 10; $i++)\n        {\n        for ($j = 0; $j &lt; 10; $j++)\n                {\n                // ...\n                }\n        }\n\ntry {\n        // ...\n}\ncatch() {\n        // ...\n}\n</pre> <p><strong>CORRECT</strong>:</p> <pre data-language=\"php\">function foo($bar)\n{\n        // ...\n}\n\nforeach ($arr as $key =&gt; $val)\n{\n        // ...\n}\n\nif ($foo == $bar)\n{\n        // ...\n}\nelse\n{\n        // ...\n}\n\nfor ($i = 0; $i &lt; 10; $i++)\n{\n        for ($j = 0; $j &lt; 10; $j++)\n        {\n                // ...\n        }\n}\n\ntry\n{\n        // ...\n}\ncatch()\n{\n        // ...\n}\n</pre>   <h2 id=\"bracket-and-parenthetic-spacing\">Bracket and Parenthetic Spacing</h2> <p>In general, parenthesis and brackets should not use any additional spaces. The exception is that a space should always follow PHP control structures that accept arguments with parenthesis (declare, do-while, elseif, for, foreach, if, switch, while), to help distinguish them from functions and increase readability.</p> <p><strong>INCORRECT</strong>:</p> <pre data-language=\"php\">$arr[ $foo ] = 'foo';\n</pre> <p><strong>CORRECT</strong>:</p> <pre data-language=\"php\">$arr[$foo] = 'foo'; // no spaces around array keys\n</pre> <p><strong>INCORRECT</strong>:</p> <pre data-language=\"php\">function foo ( $bar )\n{\n\n}\n</pre> <p><strong>CORRECT</strong>:</p> <pre data-language=\"php\">function foo($bar) // no spaces around parenthesis in function declarations\n{\n\n}\n</pre> <p><strong>INCORRECT</strong>:</p> <pre data-language=\"php\">foreach( $query-&gt;result() as $row )\n</pre> <p><strong>CORRECT</strong>:</p> <pre data-language=\"php\">foreach ($query-&gt;result() as $row) // single space following PHP control structures, but not in interior parenthesis\n</pre>   <h2 id=\"localized-text\">Localized Text</h2> <p>CodeIgniter libraries should take advantage of corresponding language files whenever possible.</p> <p><strong>INCORRECT</strong>:</p> <pre data-language=\"php\">return \"Invalid Selection\";\n</pre> <p><strong>CORRECT</strong>:</p> <pre data-language=\"php\">return $this-&gt;lang-&gt;line('invalid_selection');\n</pre>   <h2 id=\"private-methods-and-variables\">Private Methods and Variables</h2> <p>Methods and variables that are only accessed internally, such as utility and helper functions that your public methods use for code abstraction, should be prefixed with an underscore.</p> <pre data-language=\"php\">public function convert_text()\nprivate function _convert_text()\n</pre>   <h2 id=\"php-errors\">PHP Errors</h2> <p>Code must run error free and not rely on warnings and notices to be hidden to meet this requirement. For instance, never access a variable that you did not set yourself (such as <code>$_POST</code> array keys) without first checking to see that it <code>isset()</code>.</p> <p>Make sure that your dev environment has error reporting enabled for ALL users, and that display_errors is enabled in the PHP environment. You can check this setting with:</p> <pre data-language=\"php\">if (ini_get('display_errors') == 1)\n{\n        exit \"Enabled\";\n}\n</pre> <p>On some servers where <em>display_errors</em> is disabled, and you do not have the ability to change this in the php.ini, you can often enable it with:</p> <pre data-language=\"php\">ini_set('display_errors', 1);\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Setting the <a class=\"reference external\" href=\"http://php.net/manual/en/errorfunc.configuration.php#ini.display-errors\">display_errors</a> setting with <code>ini_set()</code> at runtime is not identical to having it enabled in the PHP environment. Namely, it will not have any effect if the script has fatal errors.</p> </div>   <h2 id=\"short-open-tags\">Short Open Tags</h2> <p>Always use full PHP opening tags, in case a server does not have <em>short_open_tag</em> enabled.</p> <p><strong>INCORRECT</strong>:</p> <pre data-language=\"php\">&lt;? echo $foo; ?&gt;\n\n&lt;?=$foo?&gt;\n</pre> <p><strong>CORRECT</strong>:</p> <pre data-language=\"php\">&lt;?php echo $foo; ?&gt;\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">PHP 5.4 will always have the <strong>&lt;?=</strong> tag available.</p> </div>   <h2 id=\"one-statement-per-line\">One Statement Per Line</h2> <p>Never combine statements on one line.</p> <p><strong>INCORRECT</strong>:</p> <pre data-language=\"php\">$foo = 'this'; $bar = 'that'; $bat = str_replace($foo, $bar, $bag);\n</pre> <p><strong>CORRECT</strong>:</p> <pre data-language=\"php\">$foo = 'this';\n$bar = 'that';\n$bat = str_replace($foo, $bar, $bag);\n</pre>   <h2 id=\"strings\">Strings</h2> <p>Always use single quoted strings unless you need variables parsed, and in cases where you do need variables parsed, use braces to prevent greedy token parsing. You may also use double-quoted strings if the string contains single quotes, so you do not have to use escape characters.</p> <p><strong>INCORRECT</strong>:</p> <pre data-language=\"php\">\"My String\"                                     // no variable parsing, so no use for double quotes\n\"My string $foo\"                                // needs braces\n'SELECT foo FROM bar WHERE baz = \\'bag\\''       // ugly\n</pre> <p><strong>CORRECT</strong>:</p> <pre data-language=\"php\">'My String'\n\"My string {$foo}\"\n\"SELECT foo FROM bar WHERE baz = 'bag'\"\n</pre>   <h2 id=\"sql-queries\">SQL Queries</h2> <p>SQL keywords are always capitalized: SELECT, INSERT, UPDATE, WHERE, AS, JOIN, ON, IN, etc.</p> <p>Break up long queries into multiple lines for legibility, preferably breaking for each clause.</p> <p><strong>INCORRECT</strong>:</p> <pre data-language=\"php\">// keywords are lowercase and query is too long for\n// a single line (... indicates continuation of line)\n$query = $this-&gt;db-&gt;query(\"select foo, bar, baz, foofoo, foobar as raboof, foobaz from exp_pre_email_addresses\n...where foo != 'oof' and baz != 'zab' order by foobaz limit 5, 100\");\n</pre> <p><strong>CORRECT</strong>:</p> <pre data-language=\"php\">$query = $this-&gt;db-&gt;query(\"SELECT foo, bar, baz, foofoo, foobar AS raboof, foobaz\n                                FROM exp_pre_email_addresses\n                                WHERE foo != 'oof'\n                                AND baz != 'zab'\n                                ORDER BY foobaz\n                                LIMIT 5, 100\");\n</pre>   <h2 id=\"default-function-arguments\">Default Function Arguments</h2> <p>Whenever appropriate, provide function argument defaults, which helps prevent PHP errors with mistaken calls and provides common fallback values which can save a few lines of code. Example:</p> <pre data-language=\"php\">function foo($bar = '', $baz = FALSE)\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/general/styleguide.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/general/styleguide.html</a>\n  </p>\n</div>\n","libraries/pagination":"<h1 id=\"pagination-class\">Pagination Class</h1> <p>CodeIgniter’s Pagination class is very easy to use, and it is 100% customizable, either dynamically or via stored preferences.</p>  <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#example\" id=\"id1\">Example</a><ul> <li><a class=\"reference internal\" href=\"#notes\" id=\"id2\">Notes</a></li> <li><a class=\"reference internal\" href=\"#setting-preferences-in-a-config-file\" id=\"id3\">Setting preferences in a config file</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#customizing-the-pagination\" id=\"id4\">Customizing the Pagination</a></li> <li><a class=\"reference internal\" href=\"#adding-enclosing-markup\" id=\"id5\">Adding Enclosing Markup</a></li> <li><a class=\"reference internal\" href=\"#customizing-the-first-link\" id=\"id6\">Customizing the First Link</a></li> <li><a class=\"reference internal\" href=\"#customizing-the-last-link\" id=\"id7\">Customizing the Last Link</a></li> <li><a class=\"reference internal\" href=\"#customizing-the-next-link\" id=\"id8\">Customizing the “Next” Link</a></li> <li><a class=\"reference internal\" href=\"#customizing-the-previous-link\" id=\"id9\">Customizing the “Previous” Link</a></li> <li><a class=\"reference internal\" href=\"#customizing-the-current-page-link\" id=\"id10\">Customizing the “Current Page” Link</a></li> <li><a class=\"reference internal\" href=\"#customizing-the-digit-link\" id=\"id11\">Customizing the “Digit” Link</a></li> <li><a class=\"reference internal\" href=\"#hiding-the-pages\" id=\"id12\">Hiding the Pages</a></li> <li><a class=\"reference internal\" href=\"#adding-attributes-to-anchors\" id=\"id13\">Adding attributes to anchors</a></li> <li><a class=\"reference internal\" href=\"#disabling-the-rel-attribute\" id=\"id14\">Disabling the “rel” attribute</a></li> <li><a class=\"reference internal\" href=\"#class-reference\" id=\"id15\">Class Reference</a></li> </ul>  \n<p>If you are not familiar with the term “pagination”, it refers to links that allows you to navigate from page to page, like this:</p> <pre data-language=\"php\">« First  &lt; 1 2 3 4 5 &gt;  Last »\n</pre>  <h2 id=\"example\">Example</h2> <p>Here is a simple example showing how to create pagination in one of your <a class=\"reference internal\" href=\"../general/controllers\">controller</a> methods:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('pagination');\n\n$config['base_url'] = 'http://example.com/index.php/test/page/';\n$config['total_rows'] = 200;\n$config['per_page'] = 20;\n\n$this-&gt;pagination-&gt;initialize($config);\n\necho $this-&gt;pagination-&gt;create_links();\n</pre>  <h3 id=\"notes\">Notes</h3> <p>The <code>$config</code> array contains your configuration variables. It is passed to the <code>$this-&gt;pagination-&gt;initialize()</code> method as shown above. Although there are some twenty items you can configure, at minimum you need the three shown. Here is a description of what those items represent:</p> <ul class=\"simple\"> <li>\n<strong>base_url</strong> This is the full URL to the controller class/function containing your pagination. In the example above, it is pointing to a controller called “Test” and a function called “page”. Keep in mind that you can <a class=\"reference internal\" href=\"../general/routing\">re-route your URI</a> if you need a different structure.</li> <li>\n<strong>total_rows</strong> This number represents the total rows in the result set you are creating pagination for. Typically this number will be the total rows that your database query returned.</li> <li>\n<strong>per_page</strong> The number of items you intend to show per page. In the above example, you would be showing 20 items per page.</li> </ul> <p>The <code>create_links()</code> method returns an empty string when there is no pagination to show.</p>   <h3 id=\"setting-preferences-in-a-config-file\">Setting preferences in a config file</h3> <p>If you prefer not to set preferences using the above method, you can instead put them into a config file. Simply create a new file called pagination.php, add the <code>$config</code> array in that file. Then save the file in <em>application/config/pagination.php</em> and it will be used automatically. You will NOT need to use <code>$this-&gt;pagination-&gt;initialize()</code> if you save your preferences in a config file.</p>    <h2 id=\"customizing-the-pagination\">Customizing the Pagination</h2> <p>The following is a list of all the preferences you can pass to the initialization function to tailor the display.</p> <p><strong>$config[‘uri_segment’] = 3;</strong></p> <p>The pagination function automatically determines which segment of your URI contains the page number. If you need something different you can specify it.</p> <p><strong>$config[‘num_links’] = 2;</strong></p> <p>The number of “digit” links you would like before and after the selected page number. For example, the number 2 will place two digits on either side, as in the example links at the very top of this page.</p> <p><strong>$config[‘use_page_numbers’] = TRUE;</strong></p> <p>By default, the URI segment will use the starting index for the items you are paginating. If you prefer to show the the actual page number, set this to TRUE.</p> <p><strong>$config[‘page_query_string’] = TRUE;</strong></p> <p>By default, the pagination library assume you are using <a class=\"reference internal\" href=\"../general/urls\">URI Segments</a>, and constructs your links something like:</p> <pre data-language=\"php\">http://example.com/index.php/test/page/20\n</pre> <p>If you have <code>$config['enable_query_strings']</code> set to TRUE your links will automatically be re-written using Query Strings. This option can also be explictly set. Using <code>$config['page_query_string']</code> set to TRUE, the pagination link will become:</p> <pre data-language=\"php\">http://example.com/index.php?c=test&amp;m=page&amp;per_page=20\n</pre> <p>Note that “per_page” is the default query string passed, however can be configured using <code>$config['query_string_segment'] = 'your_string'</code></p> <p><strong>$config[‘reuse_query_string’] = FALSE;</strong></p> <p>By default your Query String arguments (nothing to do with other query string options) will be ignored. Setting this config to TRUE will add existing query string arguments back into the URL after the URI segment and before the suffix.:</p> <pre data-language=\"php\">http://example.com/index.php/test/page/20?query=search%term\n</pre> <p>This helps you mix together normal <a class=\"reference internal\" href=\"../general/urls\">URI Segments</a> as well as query string arguments, which until 3.0 was not possible.</p> <p><strong>$config[‘prefix’] = ‘’;</strong></p> <p>A custom prefix added to the path. The prefix value will be right before the offset segment.</p> <p><strong>$config[‘suffix’] = ‘’;</strong></p> <p>A custom suffix added to the path. The sufix value will be right after the offset segment.</p> <p><strong>$config[‘use_global_url_suffix’] = FALSE;</strong></p> <p>When set to TRUE, it will <strong>override</strong> the <code>$config['suffix']</code> value and instead set it to the one that you have in <code>$config['url_suffix']</code> in your <strong>application/config/config.php</strong> file.</p>   <h2 id=\"adding-enclosing-markup\">Adding Enclosing Markup</h2> <p>If you would like to surround the entire pagination with some markup you can do it with these two preferences:</p> <p><strong>$config[‘full_tag_open’] = ‘&lt;p&gt;’;</strong></p> <p>The opening tag placed on the left side of the entire result.</p> <p><strong>$config[‘full_tag_close’] = ‘&lt;/p&gt;’;</strong></p> <p>The closing tag placed on the right side of the entire result.</p>   <h2 id=\"customizing-the-first-link\">Customizing the First Link</h2> <p><strong>$config[‘first_link’] = ‘First’;</strong></p> <p>The text you would like shown in the “first” link on the left. If you do not want this link rendered, you can set its value to FALSE.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This value can also be translated via a language file.</p> </div> <p><strong>$config[‘first_tag_open’] = ‘&lt;div&gt;’;</strong></p> <p>The opening tag for the “first” link.</p> <p><strong>$config[‘first_tag_close’] = ‘&lt;/div&gt;’;</strong></p> <p>The closing tag for the “first” link.</p> <p><strong>$config[‘first_url’] = ‘’;</strong></p> <p>An alternative URL to use for the “first page” link.</p>   <h2 id=\"customizing-the-last-link\">Customizing the Last Link</h2> <p><strong>$config[‘last_link’] = ‘Last’;</strong></p> <p>The text you would like shown in the “last” link on the right. If you do not want this link rendered, you can set its value to FALSE.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This value can also be translated via a language file.</p> </div> <p><strong>$config[‘last_tag_open’] = ‘&lt;div&gt;’;</strong></p> <p>The opening tag for the “last” link.</p> <p><strong>$config[‘last_tag_close’] = ‘&lt;/div&gt;’;</strong></p> <p>The closing tag for the “last” link.</p>   <h2 id=\"customizing-the-next-link\">Customizing the “Next” Link</h2> <p><strong>$config[‘next_link’] = ‘&amp;gt;’;</strong></p> <p>The text you would like shown in the “next” page link. If you do not want this link rendered, you can set its value to FALSE.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This value can also be translated via a language file.</p> </div> <p><strong>$config[‘next_tag_open’] = ‘&lt;div&gt;’;</strong></p> <p>The opening tag for the “next” link.</p> <p><strong>$config[‘next_tag_close’] = ‘&lt;/div&gt;’;</strong></p> <p>The closing tag for the “next” link.</p>   <h2 id=\"customizing-the-previous-link\">Customizing the “Previous” Link</h2> <p><strong>$config[‘prev_link’] = ‘&amp;lt;’;</strong></p> <p>The text you would like shown in the “previous” page link. If you do not want this link rendered, you can set its value to FALSE.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This value can also be translated via a language file.</p> </div> <p><strong>$config[‘prev_tag_open’] = ‘&lt;div&gt;’;</strong></p> <p>The opening tag for the “previous” link.</p> <p><strong>$config[‘prev_tag_close’] = ‘&lt;/div&gt;’;</strong></p> <p>The closing tag for the “previous” link.</p>   <h2 id=\"customizing-the-current-page-link\">Customizing the “Current Page” Link</h2> <p><strong>$config[‘cur_tag_open’] = ‘&lt;b&gt;’;</strong></p> <p>The opening tag for the “current” link.</p> <p><strong>$config[‘cur_tag_close’] = ‘&lt;/b&gt;’;</strong></p> <p>The closing tag for the “current” link.</p>   <h2 id=\"customizing-the-digit-link\">Customizing the “Digit” Link</h2> <p><strong>$config[‘num_tag_open’] = ‘&lt;div&gt;’;</strong></p> <p>The opening tag for the “digit” link.</p> <p><strong>$config[‘num_tag_close’] = ‘&lt;/div&gt;’;</strong></p> <p>The closing tag for the “digit” link.</p>   <h2 id=\"hiding-the-pages\">Hiding the Pages</h2> <p>If you wanted to not list the specific pages (for example, you only want “next” and “previous” links), you can suppress their rendering by adding:</p> <pre data-language=\"php\">$config['display_pages'] = FALSE;\n</pre>   <h2 id=\"adding-attributes-to-anchors\">Adding attributes to anchors</h2> <p>If you want to add an extra attribute to be added to every link rendered by the pagination class, you can set them as key/value pairs in the “attributes” config:</p> <pre data-language=\"php\">// Produces: class=\"myclass\"\n$config['attributes'] = array('class' =&gt; 'myclass');\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Usage of the old method of setting classes via “anchor_class” is deprecated.</p> </div>   <h2 id=\"disabling-the-rel-attribute\">Disabling the “rel” attribute</h2> <p>By default the rel attribute is dynamically generated and appended to the appropriate anchors. If for some reason you want to turn it off, you can pass boolean FALSE as a regular attribute</p> <pre data-language=\"php\">$config['attributes']['rel'] = FALSE;\n</pre>   <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_Pagination\">\n<code>class CI_Pagination</code> </dt> <dd>\n<dl class=\"method\"> <dt id=\"CI_Pagination::initialize\">\n<code>initialize([$params = array()])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$params</strong> (<em>array</em>) – Configuration parameters</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Pagination instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Pagination</p> </td> </tr>  </table> <p>Initializes the Pagination class with your preferred options.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Pagination::create_links\">\n<code>create_links()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">HTML-formatted pagination</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">string</td> </tr>  </table> <p>Returns a “pagination” bar, containing the generated links or an empty string if there’s just a single page.</p> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/libraries/pagination.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/libraries/pagination.html</a>\n  </p>\n</div>\n","libraries/ftp":"<h1 id=\"ftp-class\">FTP Class</h1> <p>CodeIgniter’s FTP Class permits files to be transfered to a remote server. Remote files can also be moved, renamed, and deleted. The FTP class also includes a “mirroring” function that permits an entire local directory to be recreated remotely via FTP.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">SFTP and SSL FTP protocols are not supported, only standard FTP.</p> </div>  <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#working-with-the-ftp-class\" id=\"id1\">Working with the FTP Class</a><ul> <li><a class=\"reference internal\" href=\"#initializing-the-class\" id=\"id2\">Initializing the Class</a></li> <li><a class=\"reference internal\" href=\"#usage-examples\" id=\"id3\">Usage Examples</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#class-reference\" id=\"id4\">Class Reference</a></li> </ul>   <h2 id=\"working-with-the-ftp-class\">Working with the FTP Class</h2>  <h3 id=\"initializing-the-class\">Initializing the Class</h3> <p>Like most other classes in CodeIgniter, the FTP class is initialized in your controller using the $this-&gt;load-&gt;library function:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('ftp');\n</pre> <p>Once loaded, the FTP object will be available using: $this-&gt;ftp</p>   <h3 id=\"usage-examples\">Usage Examples</h3> <p>In this example a connection is opened to the FTP server, and a local file is read and uploaded in ASCII mode. The file permissions are set to 755.</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('ftp');\n\n$config['hostname'] = 'ftp.example.com';\n$config['username'] = 'your-username';\n$config['password'] = 'your-password';\n$config['debug']        = TRUE;\n\n$this-&gt;ftp-&gt;connect($config);\n\n$this-&gt;ftp-&gt;upload('/local/path/to/myfile.html', '/public_html/myfile.html', 'ascii', 0775);\n\n$this-&gt;ftp-&gt;close();\n</pre> <p>In this example a list of files is retrieved from the server.</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('ftp');\n\n$config['hostname'] = 'ftp.example.com';\n$config['username'] = 'your-username';\n$config['password'] = 'your-password';\n$config['debug']        = TRUE;\n\n$this-&gt;ftp-&gt;connect($config);\n\n$list = $this-&gt;ftp-&gt;list_files('/public_html/');\n\nprint_r($list);\n\n$this-&gt;ftp-&gt;close();\n</pre> <p>In this example a local directory is mirrored on the server.</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('ftp');\n\n$config['hostname'] = 'ftp.example.com';\n$config['username'] = 'your-username';\n$config['password'] = 'your-password';\n$config['debug']        = TRUE;\n\n$this-&gt;ftp-&gt;connect($config);\n\n$this-&gt;ftp-&gt;mirror('/path/to/myfolder/', '/public_html/myfolder/');\n\n$this-&gt;ftp-&gt;close();\n</pre>    <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_FTP\">\n<code>class CI_FTP</code> </dt> <dd>\n<dl class=\"method\"> <dt id=\"CI_FTP::connect\">\n<code>connect([$config = array()])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$config</strong> (<em>array</em>) – Connection values</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Connects and logs into to the FTP server. Connection preferences are set by passing an array to the function, or you can store them in a config file.</p> <p>Here is an example showing how you set preferences manually:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('ftp');\n\n$config['hostname'] = 'ftp.example.com';\n$config['username'] = 'your-username';\n$config['password'] = 'your-password';\n$config['port']     = 21;\n$config['passive']  = FALSE;\n$config['debug']    = TRUE;\n\n$this-&gt;ftp-&gt;connect($config);\n</pre> <p><strong>Setting FTP Preferences in a Config File</strong></p> <p>If you prefer you can store your FTP preferences in a config file. Simply create a new file called the ftp.php, add the $config array in that file. Then save the file at <em>application/config/ftp.php</em> and it will be used automatically.</p> <p><strong>Available connection options</strong></p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Option name</th> <th class=\"head\">Default value</th> <th class=\"head\">Description</th> </tr> </thead>  <tr class=\"row-even\">\n<td><strong>hostname</strong></td> <td>n/a</td> <td>FTP hostname (usually something like: ftp.example.com)</td> </tr> <tr class=\"row-odd\">\n<td><strong>username</strong></td> <td>n/a</td> <td>FTP username</td> </tr> <tr class=\"row-even\">\n<td><strong>password</strong></td> <td>n/a</td> <td>FTP password</td> </tr> <tr class=\"row-odd\">\n<td><strong>port</strong></td> <td>21</td> <td>FTP server port number</td> </tr> <tr class=\"row-even\">\n<td><strong>debug</strong></td> <td>FALSE</td> <td>TRUE/FALSE (boolean): Whether to enable debugging to display error messages</td> </tr> <tr class=\"row-odd\">\n<td><strong>passive</strong></td> <td>TRUE</td> <td>TRUE/FALSE (boolean): Whether to use passive mode</td> </tr>  </table> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_FTP::upload\">\n<code>upload($locpath, $rempath[, $mode = 'auto'[, $permissions = NULL]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$locpath</strong> (<em>string</em>) – Local file path</li> <li>\n<strong>$rempath</strong> (<em>string</em>) – Remote file path</li> <li>\n<strong>$mode</strong> (<em>string</em>) – FTP mode, defaults to ‘auto’ (options are: ‘auto’, ‘binary’, ‘ascii’)</li> <li>\n<strong>$permissions</strong> (<em>int</em>) – File permissions (octal)</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Uploads a file to your server. You must supply the local path and the remote path, and you can optionally set the mode and permissions. Example:</p> <pre data-language=\"php\">$this-&gt;ftp-&gt;upload('/local/path/to/myfile.html', '/public_html/myfile.html', 'ascii', 0775);\n</pre> <p>If ‘auto’ mode is used it will base the mode on the file extension of the source file.</p> <p>If set, permissions have to be passed as an octal value.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_FTP::download\">\n<code>download($rempath, $locpath[, $mode = 'auto'])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$rempath</strong> (<em>string</em>) – Remote file path</li> <li>\n<strong>$locpath</strong> (<em>string</em>) – Local file path</li> <li>\n<strong>$mode</strong> (<em>string</em>) – FTP mode, defaults to ‘auto’ (options are: ‘auto’, ‘binary’, ‘ascii’)</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Downloads a file from your server. You must supply the remote path and the local path, and you can optionally set the mode. Example:</p> <pre data-language=\"php\">$this-&gt;ftp-&gt;download('/public_html/myfile.html', '/local/path/to/myfile.html', 'ascii');\n</pre> <p>If ‘auto’ mode is used it will base the mode on the file extension of the source file.</p> <p>Returns FALSE if the download does not execute successfully (including if PHP does not have permission to write the local file).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_FTP::rename\">\n<code>rename($old_file, $new_file[, $move = FALSE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$old_file</strong> (<em>string</em>) – Old file name</li> <li>\n<strong>$new_file</strong> (<em>string</em>) – New file name</li> <li>\n<strong>$move</strong> (<em>bool</em>) – Whether a move is being performed</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Permits you to rename a file. Supply the source file name/path and the new file name/path.</p> <pre data-language=\"php\">// Renames green.html to blue.html\n$this-&gt;ftp-&gt;rename('/public_html/foo/green.html', '/public_html/foo/blue.html');\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_FTP::move\">\n<code>move($old_file, $new_file)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$old_file</strong> (<em>string</em>) – Old file name</li> <li>\n<strong>$new_file</strong> (<em>string</em>) – New file name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Lets you move a file. Supply the source and destination paths:</p> <pre data-language=\"php\">// Moves blog.html from \"joe\" to \"fred\"\n$this-&gt;ftp-&gt;move('/public_html/joe/blog.html', '/public_html/fred/blog.html');\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If the destination file name is different the file will be renamed.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_FTP::delete_file\">\n<code>delete_file($filepath)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$filepath</strong> (<em>string</em>) – Path to file to delete</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Lets you delete a file. Supply the source path with the file name.</p> <pre data-language=\"php\">$this-&gt;ftp-&gt;delete_file('/public_html/joe/blog.html');\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_FTP::delete_dir\">\n<code>delete_dir($filepath)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$filepath</strong> (<em>string</em>) – Path to directory to delete</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Lets you delete a directory and everything it contains. Supply the source path to the directory with a trailing slash.</p> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">Be VERY careful with this method! It will recursively delete <strong>everything</strong> within the supplied path, including sub-folders and all files. Make absolutely sure your path is correct. Try using <code>list_files()</code> first to verify that your path is correct.</p> </div> <pre data-language=\"php\">$this-&gt;ftp-&gt;delete_dir('/public_html/path/to/folder/');\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_FTP::list_files\">\n<code>list_files([$path = '.'])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$path</strong> (<em>string</em>) – Directory path</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An array list of files or FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>Permits you to retrieve a list of files on your server returned as an array. You must supply the path to the desired directory.</p> <pre data-language=\"php\">$list = $this-&gt;ftp-&gt;list_files('/public_html/');\nprint_r($list);\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_FTP::mirror\">\n<code>mirror($locpath, $rempath)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$locpath</strong> (<em>string</em>) – Local path</li> <li>\n<strong>$rempath</strong> (<em>string</em>) – Remote path</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Recursively reads a local folder and everything it contains (including sub-folders) and creates a mirror via FTP based on it. Whatever the directory structure of the original file path will be recreated on the server. You must supply a source path and a destination path:</p> <pre data-language=\"php\">$this-&gt;ftp-&gt;mirror('/path/to/myfolder/', '/public_html/myfolder/');\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_FTP::mkdir\">\n<code>mkdir($path[, $permissions = NULL])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$path</strong> (<em>string</em>) – Path to directory to create</li> <li>\n<strong>$permissions</strong> (<em>int</em>) – Permissions (octal)</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Lets you create a directory on your server. Supply the path ending in the folder name you wish to create, with a trailing slash.</p> <p>Permissions can be set by passing an octal value in the second parameter.</p> <pre data-language=\"php\">// Creates a folder named \"bar\"\n$this-&gt;ftp-&gt;mkdir('/public_html/foo/bar/', 0755);\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_FTP::chmod\">\n<code>chmod($path, $perm)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$path</strong> (<em>string</em>) – Path to alter permissions for</li> <li>\n<strong>$perm</strong> (<em>int</em>) – Permissions (octal)</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Permits you to set file permissions. Supply the path to the file or directory you wish to alter permissions on:</p> <pre data-language=\"php\">// Chmod \"bar\" to 755\n$this-&gt;ftp-&gt;chmod('/public_html/foo/bar/', 0755);\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_FTP::changedir\">\n<code>changedir($path[, $suppress_debug = FALSE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$path</strong> (<em>string</em>) – Directory path</li> <li>\n<strong>$suppress_debug</strong> (<em>bool</em>) – Whether to turn off debug messages for this command</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Changes the current working directory to the specified path.</p> <p>The <code>$suppress_debug</code> parameter is useful in case you want to use this method as an <code>is_dir()</code> alternative for FTP.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_FTP::close\">\n<code>close()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">TRUE on success, FALSE on failure</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">bool</td> </tr>  </table> <p>Closes the connection to your server. It’s recommended that you use this when you are finished uploading.</p> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/libraries/ftp.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/libraries/ftp.html</a>\n  </p>\n</div>\n","libraries/loader":"<h1 id=\"loader-class\">Loader Class</h1> <p>Loader, as the name suggests, is used to load elements. These elements can be libraries (classes) <a class=\"reference internal\" href=\"../general/views\">View files</a>, <a class=\"reference internal\" href=\"../general/drivers\">Drivers</a>, <a class=\"reference internal\" href=\"../general/helpers\">Helpers</a>, <a class=\"reference internal\" href=\"../general/models\">Models</a>, or your own files.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This class is initialized automatically by the system so there is no need to do it manually.</p> </div>  <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#application-packages\" id=\"id2\">Application “Packages”</a><ul> <li><a class=\"reference internal\" href=\"#package-view-files\" id=\"id3\">Package view files</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#class-reference\" id=\"id4\">Class Reference</a></li> </ul>   <h2 id=\"application-packages\">Application “Packages”</h2> <p>An application package allows for the easy distribution of complete sets of resources in a single directory, complete with its own libraries, models, helpers, config, and language files. It is recommended that these packages be placed in the application/third_party directory. Below is a sample map of an package directory.</p> <p>The following is an example of a directory for an application package named “Foo Bar”.</p> <pre data-language=\"php\">/application/third_party/foo_bar\n\nconfig/\nhelpers/\nlanguage/\nlibraries/\nmodels/\n</pre> <p>Whatever the purpose of the “Foo Bar” application package, it has its own config files, helpers, language files, libraries, and models. To use these resources in your controllers, you first need to tell the Loader that you are going to be loading resources from a package, by adding the package path via the <code>add_package_path()</code> method.</p>  <h3 id=\"package-view-files\">Package view files</h3> <p>By Default, package view files paths are set when <code>add_package_path()</code> is called. View paths are looped through, and once a match is encountered that view is loaded.</p> <p>In this instance, it is possible for view naming collisions within packages to occur, and possibly the incorrect package being loaded. To ensure against this, set an optional second parameter of FALSE when calling <code>add_package_path()</code>.</p> <pre data-language=\"php\">$this-&gt;load-&gt;add_package_path(APPPATH.'my_app', FALSE);\n$this-&gt;load-&gt;view('my_app_index'); // Loads\n$this-&gt;load-&gt;view('welcome_message'); // Will not load the default welcome_message b/c the second param to add_package_path is FALSE\n\n// Reset things\n$this-&gt;load-&gt;remove_package_path(APPPATH.'my_app');\n\n// Again without the second parameter:\n$this-&gt;load-&gt;add_package_path(APPPATH.'my_app');\n$this-&gt;load-&gt;view('my_app_index'); // Loads\n$this-&gt;load-&gt;view('welcome_message'); // Loads\n</pre>    <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_Loader\">\n<code>class CI_Loader</code> </dt> <dd>\n<dl class=\"method\"> <dt id=\"CI_Loader::library\">\n<code>library($library[, $params = NULL[, $object_name = NULL]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$library</strong> (<em>mixed</em>) – Library name as a string or an array with multiple libraries</li> <li>\n<strong>$params</strong> (<em>array</em>) – Optional array of parameters to pass to the loaded library’s constructor</li> <li>\n<strong>$object_name</strong> (<em>string</em>) – Optional object name to assign the library to</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Loader instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Loader</p> </td> </tr>  </table> <p>This method is used to load core classes.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">We use the terms “class” and “library” interchangeably.</p> </div> <p>For example, if you would like to send email with CodeIgniter, the first step is to load the email class within your controller:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('email');\n</pre> <p>Once loaded, the library will be ready for use, using <code>$this-&gt;email</code>.</p> <p>Library files can be stored in subdirectories within the main “libraries” directory, or within your personal <em>application/libraries</em> directory. To load a file located in a subdirectory, simply include the path, relative to the “libraries” directory. For example, if you have file located at:</p> <pre data-language=\"php\">libraries/flavors/Chocolate.php\n</pre> <p>You will load it using:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('flavors/chocolate');\n</pre> <p>You may nest the file in as many subdirectories as you want.</p> <p>Additionally, multiple libraries can be loaded at the same time by passing an array of libraries to the load method.</p> <pre data-language=\"php\">$this-&gt;load-&gt;library(array('email', 'table'));\n</pre> <p><strong>Setting options</strong></p> <p>The second (optional) parameter allows you to optionally pass configuration setting. You will typically pass these as an array:</p> <pre data-language=\"php\">$config = array (\n        'mailtype' =&gt; 'html',\n        'charset'  =&gt; 'utf-8,\n        'priority' =&gt; '1'\n);\n\n$this-&gt;load-&gt;library('email', $config);\n</pre> <p>Config options can usually also be set via a config file. Each library is explained in detail in its own page, so please read the information regarding each one you would like to use.</p> <p>Please take note, when multiple libraries are supplied in an array for the first parameter, each will receive the same parameter information.</p> <p><strong>Assigning a Library to a different object name</strong></p> <p>If the third (optional) parameter is blank, the library will usually be assigned to an object with the same name as the library. For example, if the library is named Calendar, it will be assigned to a variable named <code>$this-&gt;calendar</code>.</p> <p>If you prefer to set your own class names you can pass its value to the third parameter:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('calendar', NULL, 'my_calendar');\n\n// Calendar class is now accessed using:\n$this-&gt;my_calendar\n</pre> <p>Please take note, when multiple libraries are supplied in an array for the first parameter, this parameter is discarded.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Loader::driver\">\n<code>driver($library[, $params = NULL[, $object_name]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$library</strong> (<em>mixed</em>) – Library name as a string or an array with multiple libraries</li> <li>\n<strong>$params</strong> (<em>array</em>) – Optional array of parameters to pass to the loaded library’s constructor</li> <li>\n<strong>$object_name</strong> (<em>string</em>) – Optional object name to assign the library to</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Loader instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Loader</p> </td> </tr>  </table> <p>This method is used to load driver libraries, acts very much like the <code>library()</code> method.</p> <p>As an example, if you would like to use sessions with CodeIgniter, the first step is to load the session driver within your controller:</p> <pre data-language=\"php\">$this-&gt;load-&gt;driver('session');\n</pre> <p>Once loaded, the library will be ready for use, using <code>$this-&gt;session</code>.</p> <p>Driver files must be stored in a subdirectory within the main “libraries” directory, or within your personal <em>application/libraries</em> directory. The subdirectory must match the parent class name. Read the <a class=\"reference internal\" href=\"../general/drivers\">Drivers</a> description for details.</p> <p>Additionally, multiple driver libraries can be loaded at the same time by passing an array of drivers to the load method.</p> <pre data-language=\"php\">$this-&gt;load-&gt;driver(array('session', 'cache'));\n</pre> <p><strong>Setting options</strong></p> <p>The second (optional) parameter allows you to optionally pass configuration settings. You will typically pass these as an array:</p> <pre data-language=\"php\">$config = array(\n        'sess_driver' =&gt; 'cookie',\n        'sess_encrypt_cookie'  =&gt; true,\n        'encryption_key' =&gt; 'mysecretkey'\n);\n\n$this-&gt;load-&gt;driver('session', $config);\n</pre> <p>Config options can usually also be set via a config file. Each library is explained in detail in its own page, so please read the information regarding each one you would like to use.</p> <p><strong>Assigning a Driver to a different object name</strong></p> <p>If the third (optional) parameter is blank, the library will be assigned to an object with the same name as the parent class. For example, if the library is named Session, it will be assigned to a variable named <code>$this-&gt;session</code>.</p> <p>If you prefer to set your own class names you can pass its value to the third parameter:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('session', '', 'my_session');\n\n// Session class is now accessed using:\n$this-&gt;my_session\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Loader::view\">\n<code>view($view[, $vars = array()[, return = FALSE]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$view</strong> (<em>string</em>) – View name</li> <li>\n<strong>$vars</strong> (<em>array</em>) – An associative array of variables</li> <li>\n<strong>$return</strong> (<em>bool</em>) – Whether to return the loaded view</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">View content string if $return is set to TRUE, otherwise CI_Loader instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>This method is used to load your View files. If you haven’t read the <a class=\"reference internal\" href=\"../general/views\">Views</a> section of the user guide it is recommended that you do since it shows you how this method is typically used.</p> <p>The first parameter is required. It is the name of the view file you would like to load.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The .php file extension does not need to be specified unless you use something other than .php.</p> </div> <p>The second <strong>optional</strong> parameter can take an associative array or an object as input, which it runs through the PHP <a class=\"reference external\" href=\"http://php.net/extract\">extract()</a> function to convert to variables that can be used in your view files. Again, read the <a class=\"reference internal\" href=\"../general/views\">Views</a> page to learn how this might be useful.</p> <p>The third <strong>optional</strong> parameter lets you change the behavior of the method so that it returns data as a string rather than sending it to your browser. This can be useful if you want to process the data in some way. If you set the parameter to TRUE (boolean) it will return data. The default behavior is FALSE, which sends it to your browser. Remember to assign it to a variable if you want the data returned:</p> <pre data-language=\"php\">$string = $this-&gt;load-&gt;view('myfile', '', TRUE);\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Loader::vars\">\n<code>vars($vars[, $val = ''])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$vars</strong> (<em>mixed</em>) – An array of variables or a single variable name</li> <li>\n<strong>$val</strong> (<em>mixed</em>) – Optional variable value</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Loader instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Loader</p> </td> </tr>  </table> <p>This method takes an associative array as input and generates variables using the PHP <a class=\"reference external\" href=\"http://php.net/extract\">extract()</a> function. This method produces the same result as using the second parameter of the <code>$this-&gt;load-&gt;view()</code> method above. The reason you might want to use this method independently is if you would like to set some global variables in the constructor of your controller and have them become available in any view file loaded from any method. You can have multiple calls to this method. The data get cached and merged into one array for conversion to variables.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Loader::get_var\">\n<code>get_var($key)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$key</strong> (<em>string</em>) – Variable name key</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Value if key is found, NULL if not</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>This method checks the associative array of variables available to your views. This is useful if for any reason a var is set in a library or another controller method using <code>$this-&gt;load-&gt;vars()</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Loader::get_vars\">\n<code>get_vars()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">An array of all assigned view variables</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">array</td> </tr>  </table> <p>This method retrieves all variables available to your views.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Loader::clear_vars\">\n<code>clear_vars()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">CI_Loader instance (method chaining)</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">CI_Loader</td> </tr>  </table> <p>Clears cached view variables.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Loader::model\">\n<code>model($model[, $name = ''[, $db_conn = FALSE]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$model</strong> (<em>mixed</em>) – Model name or an array containing multiple models</li> <li>\n<strong>$name</strong> (<em>string</em>) – Optional object name to assign the model to</li> <li>\n<strong>$db_conn</strong> (<em>string</em>) – Optional database configuration group to load</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Loader instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Loader</p> </td> </tr>  </table> <pre data-language=\"php\">$this-&gt;load-&gt;model('model_name');\n</pre> <p>If your model is located in a subdirectory, include the relative path from your models directory. For example, if you have a model located at <em>application/models/blog/Queries.php</em> you’ll load it using:</p> <pre data-language=\"php\">$this-&gt;load-&gt;model('blog/queries');\n</pre> <p>If you would like your model assigned to a different object name you can specify it via the second parameter of the loading method:</p> <pre data-language=\"php\">$this-&gt;load-&gt;model('model_name', 'fubar');\n$this-&gt;fubar-&gt;method();\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Loader::database\">\n<code>database([$params = ''[, $return = FALSE[, $query_builder = NULL]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$params</strong> (<em>mixed</em>) – Database group name or configuration options</li> <li>\n<strong>$return</strong> (<em>bool</em>) – Whether to return the loaded database object</li> <li>\n<strong>$query_builder</strong> (<em>bool</em>) – Whether to load the Query Builder</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Loaded CI_DB instance or FALSE on failure if $return is set to TRUE, otherwise CI_Loader instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>This method lets you load the database class. The two parameters are <strong>optional</strong>. Please see the <a class=\"reference internal\" href=\"../database/index\">database</a> section for more info.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Loader::dbforge\">\n<code>dbforge([$db = NULL[, $return = FALSE]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$db</strong> (<em>object</em>) – Database object</li> <li>\n<strong>$return</strong> (<em>bool</em>) – Whether to return the Database Forge instance</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Loaded CI_DB_forge instance if $return is set to TRUE, otherwise CI_Loader instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Loads the <a class=\"reference internal\" href=\"../database/forge\">Database Forge</a> class, please refer to that manual for more info.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Loader::dbutil\">\n<code>dbutil([$db = NULL[, $return = FALSE]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$db</strong> (<em>object</em>) – Database object</li> <li>\n<strong>$return</strong> (<em>bool</em>) – Whether to return the Database Utilities instance</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Loaded CI_DB_utility instance if $return is set to TRUE, otherwise CI_Loader instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Loads the <a class=\"reference internal\" href=\"../database/utilities\">Database Utilities</a> class, please refer to that manual for more info.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Loader::helper\">\n<code>helper($helpers)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$helpers</strong> (<em>mixed</em>) – Helper name as a string or an array containing multiple helpers</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Loader instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Loader</p> </td> </tr>  </table> <p>This method loads helper files, where file_name is the name of the file, without the _helper.php extension.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Loader::file\">\n<code>file($path[, $return = FALSE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$path</strong> (<em>string</em>) – File path</li> <li>\n<strong>$return</strong> (<em>bool</em>) – Whether to return the loaded file</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">File contents if $return is set to TRUE, otherwise CI_Loader instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>This is a generic file loading method. Supply the filepath and name in the first parameter and it will open and read the file. By default the data is sent to your browser, just like a View file, but if you set the second parameter to boolean TRUE it will instead return the data as a string.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Loader::language\">\n<code>language($files[, $lang = ''])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$files</strong> (<em>mixed</em>) – Language file name or an array of multiple language files</li> <li>\n<strong>$lang</strong> (<em>string</em>) – Language name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Loader instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Loader</p> </td> </tr>  </table> <p>This method is an alias of the <a class=\"reference internal\" href=\"language\">language loading method</a>: <code>$this-&gt;lang-&gt;load()</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Loader::config\">\n<code>config($file[, $use_sections = FALSE[, $fail_gracefully = FALSE]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$file</strong> (<em>string</em>) – Configuration file name</li> <li>\n<strong>$use_sections</strong> (<em>bool</em>) – Whether configuration values should be loaded into their own section</li> <li>\n<strong>$fail_gracefully</strong> (<em>bool</em>) – Whether to just return FALSE in case of failure</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>This method is an alias of the <a class=\"reference internal\" href=\"config\">config file loading method</a>: <code>$this-&gt;config-&gt;load()</code></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Loader::is_loaded\">\n<code>is_loaded($class)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$class</strong> (<em>string</em>) – Class name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Singleton property name if found, FALSE if not</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Allows you to check if a class has already been loaded or not.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The word “class” here refers to libraries and drivers.</p> </div> <p>If the requested class has been loaded, the method returns its assigned name in the CI Super-object and FALSE if it’s not:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('form_validation');\n$this-&gt;load-&gt;is_loaded('Form_validation');      // returns 'form_validation'\n\n$this-&gt;load-&gt;is_loaded('Nonexistent_library');  // returns FALSE\n</pre> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">If you have more than one instance of a class (assigned to different properties), then the first one will be returned.</p> </div> <pre data-language=\"php\">$this-&gt;load-&gt;library('form_validation', $config, 'fv');\n$this-&gt;load-&gt;library('form_validation');\n\n$this-&gt;load-&gt;is_loaded('Form_validation');      // returns 'fv'\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Loader::add_package_path\">\n<code>add_package_path($path[, $view_cascade = TRUE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$path</strong> (<em>string</em>) – Path to add</li> <li>\n<strong>$view_cascade</strong> (<em>bool</em>) – Whether to use cascading views</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Loader instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Loader</p> </td> </tr>  </table> <p>Adding a package path instructs the Loader class to prepend a given path for subsequent requests for resources. As an example, the “Foo Bar” application package above has a library named Foo_bar.php. In our controller, we’d do the following:</p> <pre data-language=\"php\">$this-&gt;load-&gt;add_package_path(APPPATH.'third_party/foo_bar/')\n        -&gt;library('foo_bar');\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Loader::remove_package_path\">\n<code>remove_package_path([$path = ''])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$path</strong> (<em>string</em>) – Path to remove</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Loader instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Loader</p> </td> </tr>  </table> <p>When your controller is finished using resources from an application package, and particularly if you have other application packages you want to work with, you may wish to remove the package path so the Loader no longer looks in that directory for resources. To remove the last path added, simply call the method with no parameters.</p> <p>Or to remove a specific package path, specify the same path previously given to <code>add_package_path()</code> for a package.:</p> <pre data-language=\"php\">$this-&gt;load-&gt;remove_package_path(APPPATH.'third_party/foo_bar/');\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Loader::get_package_paths\">\n<code>get_package_paths([$include_base = TRUE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$include_base</strong> (<em>bool</em>) – Whether to include BASEPATH</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An array of package paths</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>Returns all currently available package paths.</p> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/libraries/loader.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/libraries/loader.html</a>\n  </p>\n</div>\n","libraries/security":"<h1 id=\"security-class\">Security Class</h1> <p>The Security Class contains methods that help you create a secure application, processing input data for security.</p>  <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#xss-filtering\" id=\"id1\">XSS Filtering</a></li> <li><a class=\"reference internal\" href=\"#cross-site-request-forgery-csrf\" id=\"id2\">Cross-site request forgery (CSRF)</a></li> <li><a class=\"reference internal\" href=\"#class-reference\" id=\"id3\">Class Reference</a></li> </ul>   <h2 id=\"xss-filtering\">XSS Filtering</h2> <p>CodeIgniter comes with a Cross Site Scripting prevention filter, which looks for commonly used techniques to trigger JavaScript or other types of code that attempt to hijack cookies or do other malicious things. If anything disallowed is encountered it is rendered safe by converting the data to character entities.</p> <p>To filter data through the XSS filter use the <code>xss_clean()</code> method:</p> <pre data-language=\"php\">$data = $this-&gt;security-&gt;xss_clean($data);\n</pre> <p>An optional second parameter, <em>is_image</em>, allows this function to be used to test images for potential XSS attacks, useful for file upload security. When this second parameter is set to TRUE, instead of returning an altered string, the function returns TRUE if the image is safe, and FALSE if it contained potentially malicious information that a browser may attempt to execute.</p> <pre data-language=\"php\">if ($this-&gt;security-&gt;xss_clean($file, TRUE) === FALSE)\n{\n        // file failed the XSS test\n}\n</pre>   <h2 id=\"cross-site-request-forgery-csrf\">Cross-site request forgery (CSRF)</h2> <p>You can enable CSRF protection by altering your <strong>application/config/config.php</strong> file in the following way:</p> <pre data-language=\"php\">$config['csrf_protection'] = TRUE;\n</pre> <p>If you use the <a class=\"reference internal\" href=\"../helpers/form_helper\">form helper</a>, then <code>form_open()</code> will automatically insert a hidden csrf field in your forms. If not, then you can use <code>get_csrf_token_name()</code> and <code>get_csrf_hash()</code></p> <pre data-language=\"php\">$csrf = array(\n        'name' =&gt; $this-&gt;security-&gt;get_csrf_token_name(),\n        'hash' =&gt; $this-&gt;security-&gt;get_csrf_hash()\n);\n\n...\n\n&lt;input type=\"hidden\" name=\"&lt;?=$csrf['name'];?&gt;\" value=\"&lt;?=$csrf['hash'];?&gt;\" /&gt;\n</pre> <p>Tokens may be either regenerated on every submission (default) or kept the same throughout the life of the CSRF cookie. The default regeneration of tokens provides stricter security, but may result in usability concerns as other tokens become invalid (back/forward navigation, multiple tabs/windows, asynchronous actions, etc). You may alter this behavior by editing the following config parameter</p> <pre data-language=\"php\">$config['csrf_regenerate'] = TRUE;\n</pre> <p>Select URIs can be whitelisted from csrf protection (for example API endpoints expecting externally POSTed content). You can add these URIs by editing the ‘csrf_exclude_uris’ config parameter:</p> <pre data-language=\"php\">$config['csrf_exclude_uris'] = array('api/person/add');\n</pre> <p>Regular expressions are also supported (case-insensitive):</p> <pre data-language=\"php\">$config['csrf_exclude_uris'] = array(\n        'api/record/[0-9]+',\n        'api/title/[a-z]+'\n);\n</pre>   <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_Security\">\n<code>class CI_Security</code> </dt> <dd>\n<dl class=\"method\"> <dt id=\"CI_Security::xss_clean\">\n<code>xss_clean($str[, $is_image = FALSE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>mixed</em>) – Input string or an array of strings</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">XSS-clean data</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Tries to remove XSS exploits from the input data and returns the cleaned string. If the optional second parameter is set to true, it will return boolean TRUE if the image is safe to use and FALSE if malicious data was detected in it.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Security::sanitize_filename\">\n<code>sanitize_filename($str[, $relative_path = FALSE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – File name/path</li> <li>\n<strong>$relative_path</strong> (<em>bool</em>) – Whether to preserve any directories in the file path</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Sanitized file name/path</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Tries to sanitize filenames in order to prevent directory traversal attempts and other security threats, which is particularly useful for files that were supplied via user input.</p> <pre data-language=\"php\">$filename = $this-&gt;security-&gt;sanitize_filename($this-&gt;input-&gt;post('filename'));\n</pre> <p>If it is acceptable for the user input to include relative paths, e.g. <em>file/in/some/approved/folder.txt</em>, you can set the second optional parameter, <code>$relative_path</code> to TRUE.</p> <pre data-language=\"php\">$filename = $this-&gt;security-&gt;sanitize_filename($this-&gt;input-&gt;post('filename'), TRUE);\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Security::get_csrf_token_name\">\n<code>get_csrf_token_name()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">CSRF token name</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">string</td> </tr>  </table> <p>Returns the CSRF token name (the <code>$config['csrf_token_name']</code> value).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Security::get_csrf_hash\">\n<code>get_csrf_hash()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">CSRF hash</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">string</td> </tr>  </table> <p>Returns the CSRF hash value. Useful in combination with <code>get_csrf_token_name()</code> for manually building forms or sending valid AJAX POST requests.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Security::entity_decode\">\n<code>entity_decode($str[, $charset = NULL])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> <li>\n<strong>$charset</strong> (<em>string</em>) – Character set of the input string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Entity-decoded string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>This method acts a lot like PHP’s own native <code>html_entity_decode()</code> function in ENT_COMPAT mode, only it tries to detect HTML entities that don’t end in a semicolon because some browsers allow that.</p> <p>If the <code>$charset</code> parameter is left empty, then your configured <code>$config['charset']</code> value will be used.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Security::get_random_bytes\">\n<code>get_random_bytes($length)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$length</strong> (<em>int</em>) – Output length</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">A binary stream of random bytes or FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>A convenience method for getting proper random bytes via <code>mcrypt_create_iv()</code>, <code>/dev/urandom</code> or <code>openssl_random_pseudo_bytes()</code> (in that order), if one of them is available.</p> <p>Used for generating CSRF and XSS tokens.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The output is NOT guaranteed to be cryptographically secure, just the best attempt at that.</p> </div> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/libraries/security.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/libraries/security.html</a>\n  </p>\n</div>\n","libraries/input":"<h1 id=\"input-class\">Input Class</h1> <p>The Input Class serves two purposes:</p> <ol class=\"arabic simple\"> <li>It pre-processes global input data for security.</li> <li>It provides some helper methods for fetching input data and pre-processing it.</li> </ol> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This class is initialized automatically by the system so there is no need to do it manually.</p> </div>  <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#input-filtering\" id=\"id1\">Input Filtering</a><ul> <li><a class=\"reference internal\" href=\"#security-filtering\" id=\"id2\">Security Filtering</a></li> <li><a class=\"reference internal\" href=\"#xss-filtering\" id=\"id3\">XSS Filtering</a></li> </ul> </li> <li>\n<a class=\"reference internal\" href=\"#accessing-form-data\" id=\"id4\">Accessing form data</a><ul> <li><a class=\"reference internal\" href=\"#using-post-get-cookie-or-server-data\" id=\"id5\">Using POST, GET, COOKIE, or SERVER Data</a></li> <li><a class=\"reference internal\" href=\"#using-the-php-input-stream\" id=\"id6\">Using the php://input stream</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#class-reference\" id=\"id7\">Class Reference</a></li> </ul>   <h2 id=\"input-filtering\">Input Filtering</h2>  <h3 id=\"security-filtering\">Security Filtering</h3> <p>The security filtering method is called automatically when a new <a class=\"reference internal\" href=\"../general/controllers\">controller</a> is invoked. It does the following:</p> <ul class=\"simple\"> <li>If <code>$config['allow_get_array']</code> is FALSE (default is TRUE), destroys the global GET array.</li> <li>Destroys all global variables in the event register_globals is turned on.</li> <li>Filters the GET/POST/COOKIE array keys, permitting only alpha-numeric (and a few other) characters.</li> <li>Provides XSS (Cross-site Scripting Hacks) filtering. This can be enabled globally, or upon request.</li> <li>Standardizes newline characters to <code>PHP_EOL</code> (\\n in UNIX-based OSes, \\r\\n under Windows). This is configurable.</li> </ul>   <h3 id=\"xss-filtering\">XSS Filtering</h3> <p>The Input class has the ability to filter input automatically to prevent cross-site scripting attacks. If you want the filter to run automatically every time it encounters POST or COOKIE data you can enable it by opening your <em>application/config/config.php</em> file and setting this:</p> <pre data-language=\"php\">$config['global_xss_filtering'] = TRUE;\n</pre> <p>Please refer to the <a class=\"reference internal\" href=\"security\">Security class</a> documentation for information on using XSS Filtering in your application.</p> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">The ‘global_xss_filtering’ setting is DEPRECATED and kept solely for backwards-compatibility purposes. XSS escaping should be performed on <em>output</em>, not <em>input</em>!</p> </div>    <h2 id=\"accessing-form-data\">Accessing form data</h2>  <h3 id=\"using-post-get-cookie-or-server-data\">Using POST, GET, COOKIE, or SERVER Data</h3> <p>CodeIgniter comes with helper methods that let you fetch POST, GET, COOKIE or SERVER items. The main advantage of using the provided methods rather than fetching an item directly (<code>$_POST['something']</code>) is that the methods will check to see if the item is set and return NULL if not. This lets you conveniently use data without having to test whether an item exists first. In other words, normally you might do something like this:</p> <pre data-language=\"php\">$something = isset($_POST['something']) ? $_POST['something'] : NULL;\n</pre> <p>With CodeIgniter’s built in methods you can simply do this:</p> <pre data-language=\"php\">$something = $this-&gt;input-&gt;post('something');\n</pre> <p>The main methods are:</p> <ul class=\"simple\"> <li><code>$this-&gt;input-&gt;post()</code></li> <li><code>$this-&gt;input-&gt;get()</code></li> <li><code>$this-&gt;input-&gt;cookie()</code></li> <li><code>$this-&gt;input-&gt;server()</code></li> </ul>   <h3 id=\"using-the-php-input-stream\">Using the php://input stream</h3> <p>If you want to utilize the PUT, DELETE, PATCH or other exotic request methods, they can only be accessed via a special input stream, that can only be read once. This isn’t as easy as just reading from e.g. the <code>$_POST</code> array, because it will always exist and you can try and access multiple variables without caring that you might only have one shot at all of the POST data.</p> <p>CodeIgniter will take care of that for you, and you can read the data from the <strong>php://input</strong> stream at any time, just by using the <code>$raw_input_stream</code> property:</p> <pre data-language=\"php\">$this-&gt;input-&gt;raw_input_stream;\n</pre> <p>Additionally if the input stream is form-encoded like $_POST you can access its values by calling the <code>input_stream()</code> method:</p> <pre data-language=\"php\">$this-&gt;input-&gt;input_stream('key');\n</pre> <p>Similar to other methods such as <code>get()</code> and <code>post()</code>, if the requested data is not found, it will return NULL and you can also decide whether to run the data through <code>xss_clean()</code> by passing a boolean value as the second parameter:</p> <pre data-language=\"php\">$this-&gt;input-&gt;input_stream('key', TRUE); // XSS Clean\n$this-&gt;input-&gt;input_stream('key', FALSE); // No XSS filter\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">You can utilize <code>method()</code> in order to know if you’re reading PUT, DELETE or PATCH data.</p> </div>    <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_Input\">\n<code>class CI_Input</code> </dt> <dd>\n<dl class=\"attribute\"> <dt>\n<code>$raw_input_stream</code> </dt> <dd>\n<p>Read only property that will return php://input data as is.</p> <p>The property can be read multiple times.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Input::post\">\n<code>post([$index = NULL[, $xss_clean = NULL]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$index</strong> (<em>mixed</em>) – POST parameter name</li> <li>\n<strong>$xss_clean</strong> (<em>bool</em>) – Whether to apply XSS filtering</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">$_POST if no parameters supplied, otherwise the POST value if found or NULL if not</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>The first parameter will contain the name of the POST item you are looking for:</p> <pre data-language=\"php\">$this-&gt;input-&gt;post('some_data');\n</pre> <p>The method returns NULL if the item you are attempting to retrieve does not exist.</p> <p>The second optional parameter lets you run the data through the XSS filter. It’s enabled by setting the second parameter to boolean TRUE or by setting your <code>$config['global_xss_filtering']</code> to TRUE.</p> <pre data-language=\"php\">$this-&gt;input-&gt;post('some_data', TRUE);\n</pre> <p>To return an array of all POST items call without any parameters.</p> <p>To return all POST items and pass them through the XSS filter set the first parameter NULL while setting the second parameter to boolean TRUE.</p> <pre data-language=\"php\">$this-&gt;input-&gt;post(NULL, TRUE); // returns all POST items with XSS filter\n$this-&gt;input-&gt;post(NULL, FALSE); // returns all POST items without XSS filter\n</pre> <p>To return an array of multiple POST parameters, pass all the required keys as an array.</p> <pre data-language=\"php\">$this-&gt;input-&gt;post(array('field1', 'field2'));\n</pre> <p>Same rule applied here, to retrive the parameters with XSS filtering enabled, set the second parameter to boolean TRUE.</p> <pre data-language=\"php\">$this-&gt;input-&gt;post(array('field1', 'field2'), TRUE);\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Input::get\">\n<code>get([$index = NULL[, $xss_clean = NULL]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$index</strong> (<em>mixed</em>) – GET parameter name</li> <li>\n<strong>$xss_clean</strong> (<em>bool</em>) – Whether to apply XSS filtering</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">$_GET if no parameters supplied, otherwise the GET value if found or NULL if not</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>This method is identical to <code>post()</code>, only it fetches GET data.</p> <pre data-language=\"php\">$this-&gt;input-&gt;get('some_data', TRUE);\n</pre> <p>To return an array of all GET items call without any parameters.</p> <p>To return all GET items and pass them through the XSS filter set the first parameter NULL while setting the second parameter to boolean TRUE.</p> <pre data-language=\"php\">$this-&gt;input-&gt;get(NULL, TRUE); // returns all GET items with XSS filter\n$this-&gt;input-&gt;get(NULL, FALSE); // returns all GET items without XSS filtering\n</pre> <p>To return an array of multiple GET parameters, pass all the required keys as an array.</p> <pre data-language=\"php\">$this-&gt;input-&gt;get(array('field1', 'field2'));\n</pre> <p>Same rule applied here, to retrive the parameters with XSS filtering enabled, set the second parameter to boolean TRUE.</p> <pre data-language=\"php\">$this-&gt;input-&gt;get(array('field1', 'field2'), TRUE);\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Input::post_get\">\n<code>post_get($index[, $xss_clean = NULL])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$index</strong> (<em>string</em>) – POST/GET parameter name</li> <li>\n<strong>$xss_clean</strong> (<em>bool</em>) – Whether to apply XSS filtering</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">POST/GET value if found, NULL if not</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>This method works pretty much the same way as <code>post()</code> and <code>get()</code>, only combined. It will search through both POST and GET streams for data, looking in POST first, and then in GET:</p> <pre data-language=\"php\">$this-&gt;input-&gt;post_get('some_data', TRUE);\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Input::get_post\">\n<code>get_post($index[, $xss_clean = NULL])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$index</strong> (<em>string</em>) – GET/POST parameter name</li> <li>\n<strong>$xss_clean</strong> (<em>bool</em>) – Whether to apply XSS filtering</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">GET/POST value if found, NULL if not</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>This method works the same way as <code>post_get()</code> only it looks for GET data first.</p>  $this-&gt;input-&gt;get_post(‘some_data’, TRUE); <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This method used to act EXACTLY like <code>post_get()</code>, but it’s behavior has changed in CodeIgniter 3.0.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Input::cookie\">\n<code>cookie([$index = NULL[, $xss_clean = NULL]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$index</strong> (<em>mixed</em>) – COOKIE name</li> <li>\n<strong>$xss_clean</strong> (<em>bool</em>) – Whether to apply XSS filtering</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">$_COOKIE if no parameters supplied, otherwise the COOKIE value if found or NULL if not</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>This method is identical to <code>post()</code> and <code>get()</code>, only it fetches cookie data:</p> <pre data-language=\"php\">$this-&gt;input-&gt;cookie('some_cookie');\n$this-&gt;input-&gt;cookie('some_cookie, TRUE); // with XSS filter\n</pre> <p>To return an array of multiple cookie values, pass all the required keys as an array.</p> <pre data-language=\"php\">$this-&gt;input-&gt;cookie(array('some_cookie', 'some_cookie2'));\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Unlike the <a class=\"reference internal\" href=\"../helpers/cookie_helper\">Cookie Helper</a> function <a class=\"reference internal\" href=\"../helpers/cookie_helper#get_cookie\" title=\"get_cookie\"><code>get_cookie()</code></a>, this method does NOT prepend your configured <code>$config['cookie_prefix']</code> value.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Input::server\">\n<code>server($index[, $xss_clean = NULL])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$index</strong> (<em>mixed</em>) – Value name</li> <li>\n<strong>$xss_clean</strong> (<em>bool</em>) – Whether to apply XSS filtering</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">$_SERVER item value if found, NULL if not</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>This method is identical to the <code>post()</code>, <code>get()</code> and <code>cookie()</code> methods, only it fetches server data (<code>$_SERVER</code>):</p> <pre data-language=\"php\">$this-&gt;input-&gt;server('some_data');\n</pre> <p>To return an array of multiple <code>$_SERVER</code> values, pass all the required keys as an array.</p> <pre data-language=\"php\">$this-&gt;input-&gt;server(array('SERVER_PROTOCOL', 'REQUEST_URI'));\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Input::input_stream\">\n<code>input_stream([$index = NULL[, $xss_clean = NULL]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$index</strong> (<em>mixed</em>) – Key name</li> <li>\n<strong>$xss_clean</strong> (<em>bool</em>) – Whether to apply XSS filtering</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Input stream array if no parameters supplied, otherwise the specified value if found or NULL if not</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>This method is identical to <code>get()</code>, <code>post()</code> and <code>cookie()</code>, only it fetches the <em>php://input</em> stream data.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Input::set_cookie\">\n<code>set_cookie($name = ''[, $value = ''[, $expire = ''[, $domain = ''[, $path = '/'[, $prefix = ''[, $secure = FALSE[, $httponly = FALSE]]]]]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$name</strong> (<em>mixed</em>) – Cookie name or an array of parameters</li> <li>\n<strong>$value</strong> (<em>string</em>) – Cookie value</li> <li>\n<strong>$expire</strong> (<em>int</em>) – Cookie expiration time in seconds</li> <li>\n<strong>$domain</strong> (<em>string</em>) – Cookie domain</li> <li>\n<strong>$path</strong> (<em>string</em>) – Cookie path</li> <li>\n<strong>$prefix</strong> (<em>string</em>) – Cookie name prefix</li> <li>\n<strong>$secure</strong> (<em>bool</em>) – Whether to only transfer the cookie through HTTPS</li> <li>\n<strong>$httponly</strong> (<em>bool</em>) – Whether to only make the cookie accessible for HTTP requests (no JavaScript)</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Sets a cookie containing the values you specify. There are two ways to pass information to this method so that a cookie can be set: Array Method, and Discrete Parameters:</p> <p><strong>Array Method</strong></p> <p>Using this method, an associative array is passed to the first parameter:</p> <pre data-language=\"php\">$cookie = array(\n        'name'   =&gt; 'The Cookie Name',\n        'value'  =&gt; 'The Value',\n        'expire' =&gt; '86500',\n        'domain' =&gt; '.some-domain.com',\n        'path'   =&gt; '/',\n        'prefix' =&gt; 'myprefix_',\n        'secure' =&gt; TRUE\n);\n\n$this-&gt;input-&gt;set_cookie($cookie);\n</pre> <p><strong>Notes</strong></p> <p>Only the name and value are required. To delete a cookie set it with the expiration blank.</p> <p>The expiration is set in <strong>seconds</strong>, which will be added to the current time. Do not include the time, but rather only the number of seconds from <em>now</em> that you wish the cookie to be valid. If the expiration is set to zero the cookie will only last as long as the browser is open.</p> <p>For site-wide cookies regardless of how your site is requested, add your URL to the <strong>domain</strong> starting with a period, like this: .your-domain.com</p> <p>The path is usually not needed since the method sets a root path.</p> <p>The prefix is only needed if you need to avoid name collisions with other identically named cookies for your server.</p> <p>The secure boolean is only needed if you want to make it a secure cookie by setting it to TRUE.</p> <p><strong>Discrete Parameters</strong></p> <p>If you prefer, you can set the cookie by passing data using individual parameters:</p> <pre data-language=\"php\">$this-&gt;input-&gt;set_cookie($name, $value, $expire, $domain, $path, $prefix, $secure);\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Input::ip_address\">\n<code>ip_address()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Visitor’s IP address or ‘0.0.0.0’ if not valid</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">string</td> </tr>  </table> <p>Returns the IP address for the current user. If the IP address is not valid, the method will return ‘0.0.0.0’:</p> <pre data-language=\"php\">echo $this-&gt;input-&gt;ip_address();\n</pre> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">This method takes into account the <code>$config['proxy_ips']</code> setting and will return the reported HTTP_X_FORWARDED_FOR, HTTP_CLIENT_IP, HTTP_X_CLIENT_IP or HTTP_X_CLUSTER_CLIENT_IP address for the allowed IP addresses.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Input::valid_ip\">\n<code>valid_ip($ip[, $which = ''])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$ip</strong> (<em>string</em>) – IP address</li> <li>\n<strong>$which</strong> (<em>string</em>) – IP protocol (‘ipv4’ or ‘ipv6’)</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE if the address is valid, FALSE if not</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Takes an IP address as input and returns TRUE or FALSE (boolean) depending on whether it is valid or not.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The $this-&gt;input-&gt;ip_address() method above automatically validates the IP address.</p> </div> <pre data-language=\"php\">if ( ! $this-&gt;input-&gt;valid_ip($ip))\n{\n        echo 'Not Valid';\n}\nelse\n{\n        echo 'Valid';\n}\n</pre> <p>Accepts an optional second string parameter of ‘ipv4’ or ‘ipv6’ to specify an IP format. The default checks for both formats.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Input::user_agent\">\n<code>user_agent([$xss_clean = NULL])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">User agent string or NULL if not set</p> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$xss_clean</strong> (<em>bool</em>) – Whether to apply XSS filtering</li> </ul> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Returns the user agent string (web browser) being used by the current user, or NULL if it’s not available.</p> <pre data-language=\"php\">echo $this-&gt;input-&gt;user_agent();\n</pre> <p>See the <a class=\"reference internal\" href=\"user_agent\">User Agent Class</a> for methods which extract information from the user agent string.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Input::request_headers\">\n<code>request_headers([$xss_clean = FALSE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$xss_clean</strong> (<em>bool</em>) – Whether to apply XSS filtering</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An array of HTTP request headers</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>Returns an array of HTTP request headers. Useful if running in a non-Apache environment where <a class=\"reference external\" href=\"http://php.net/apache_request_headers\">apache_request_headers()</a> will not be supported.</p> <pre data-language=\"php\">$headers = $this-&gt;input-&gt;request_headers();\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Input::get_request_header\">\n<code>get_request_header($index[, $xss_clean = FALSE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$index</strong> (<em>string</em>) – HTTP request header name</li> <li>\n<strong>$xss_clean</strong> (<em>bool</em>) – Whether to apply XSS filtering</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An HTTP request header or NULL if not found</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Returns a single member of the request headers array or NULL if the searched header is not found.</p> <pre data-language=\"php\">$this-&gt;input-&gt;get_request_header('some-header', TRUE);\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Input::is_ajax_request\">\n<code>is_ajax_request()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">TRUE if it is an Ajax request, FALSE if not</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">bool</td> </tr>  </table> <p>Checks to see if the HTTP_X_REQUESTED_WITH server header has been set, and returns boolean TRUE if it is or FALSE if not.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Input::is_cli_request\">\n<code>is_cli_request()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">TRUE if it is a CLI request, FALSE if not</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">bool</td> </tr>  </table> <p>Checks to see if the application was run from the command-line interface.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This method checks both the PHP SAPI name currently in use and if the <code>STDIN</code> constant is defined, which is usually a failsafe way to see if PHP is being run via the command line.</p> </div> <pre data-language=\"php\">$this-&gt;input-&gt;is_cli_request()\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This method is DEPRECATED and is now just an alias for the <code>is_cli()</code> function.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Input::method\">\n<code>method([$upper = FALSE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$upper</strong> (<em>bool</em>) – Whether to return the request method name in upper or lower case</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">HTTP request method</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Returns the <code>$_SERVER['REQUEST_METHOD']</code>, with the option to set it in uppercase or lowercase.</p> <pre data-language=\"php\">echo $this-&gt;input-&gt;method(TRUE); // Outputs: POST\necho $this-&gt;input-&gt;method(FALSE); // Outputs: post\necho $this-&gt;input-&gt;method(); // Outputs: post\n</pre> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/libraries/input.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/libraries/input.html</a>\n  </p>\n</div>\n","libraries/javascript":"<h1 id=\"javascript-class\">Javascript Class</h1> <p>CodeIgniter provides a library to help you with certain common functions that you may want to use with Javascript. Please note that CodeIgniter does not require the jQuery library to run, and that any scripting library will work equally well. The jQuery library is simply presented as a convenience if you choose to use it.</p> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">This library is DEPRECATED and should not be used. It has always been with an ‘experimental’ status and is now no longer supported. Currently only kept for backwards compatibility.</p> </div>  <ul> <li><a class=\"reference internal\" href=\"#initializing-the-class\" id=\"id4\">Initializing the Class</a></li> <li>\n<a class=\"reference internal\" href=\"#setup-and-configuration\" id=\"id5\">Setup and Configuration</a><ul> <li><a class=\"reference internal\" href=\"#set-these-variables-in-your-view\" id=\"id6\">Set these variables in your view</a></li> <li><a class=\"reference internal\" href=\"#set-the-path-to-the-librarys-with-config-items\" id=\"id7\">Set the path to the librarys with config items</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#the-jquery-class\" id=\"id8\">The jQuery Class</a></li> <li><a class=\"reference internal\" href=\"#jquery-events\" id=\"id9\">jQuery Events</a></li> <li>\n<a class=\"reference internal\" href=\"#effects\" id=\"id10\">Effects</a><ul> <li><a class=\"reference internal\" href=\"#hide-show\" id=\"id11\">hide() / show()</a></li> <li><a class=\"reference internal\" href=\"#toggle\" id=\"id12\">toggle()</a></li> <li><a class=\"reference internal\" href=\"#animate\" id=\"id13\">animate()</a></li> <li><a class=\"reference internal\" href=\"#fadein-fadeout\" id=\"id14\">fadeIn() / fadeOut()</a></li> <li><a class=\"reference internal\" href=\"#toggleclass\" id=\"id15\">toggleClass()</a></li> <li><a class=\"reference internal\" href=\"#id2\" id=\"id16\">fadeIn() / fadeOut()</a></li> <li><a class=\"reference internal\" href=\"#slideup-slidedown-slidetoggle\" id=\"id17\">slideUp() / slideDown() / slideToggle()</a></li> </ul> </li> <li>\n<a class=\"reference internal\" href=\"#plugins\" id=\"id18\">Plugins</a><ul> <li><a class=\"reference internal\" href=\"#corner\" id=\"id19\">corner()</a></li> <li><a class=\"reference internal\" href=\"#tablesorter\" id=\"id20\">tablesorter()</a></li> <li><a class=\"reference internal\" href=\"#modal\" id=\"id21\">modal()</a></li> <li><a class=\"reference internal\" href=\"#calendar\" id=\"id22\">calendar()</a></li> </ul> </li> </ul>\n   <h2 id=\"using-the-javascript-class\">Using the Javascript Class</h2>  <h3 id=\"initializing-the-class\">Initializing the Class</h3> <p>To initialize the Javascript class manually in your controller constructor, use the <code>$this-&gt;load-&gt;library()</code> method. Currently, the only available library is jQuery, which will automatically be loaded like this:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('javascript');\n</pre> <p>The Javascript class also accepts parameters:</p> <ul class=\"simple\"> <li>js_library_driver (string) <em>default: ‘jquery’</em>\n</li> <li>autoload (bool) <em>default: TRUE</em>\n</li> </ul> <p>You may override the defaults by sending an associative array:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library(\n        'javascript',\n        array(\n                'js_library_driver' =&gt; 'scripto',\n                'autoload' =&gt; FALSE\n        )\n);\n</pre> <p>Again, presently only ‘jquery’ is available. You may wish to set autoload to FALSE, though, if you do not want the jQuery library to automatically include a script tag for the main jQuery script file. This is useful if you are loading it from a location outside of CodeIgniter, or already have the script tag in your markup.</p> <p>Once loaded, the jQuery library object will be available using:</p>  $this-&gt;javascript   <h3 id=\"setup-and-configuration\">Setup and Configuration</h3>  <h4 id=\"set-these-variables-in-your-view\">Set these variables in your view</h4> <p>As a Javascript library, your files must be available to your application.</p> <p>As Javascript is a client side language, the library must be able to write content into your final output. This generally means a view. You’ll need to include the following variables in the <code>&lt;head&gt;</code> sections of your output.</p> <pre data-language=\"php\">&lt;?php echo $library_src;?&gt;\n&lt;?php echo $script_head;?&gt;\n</pre> <p><code>$library_src</code>, is where the actual library file will be loaded, as well as any subsequent plugin script calls; $script_head is where specific events, functions and other commands will be rendered.</p>   <h4 id=\"set-the-path-to-the-librarys-with-config-items\">Set the path to the librarys with config items</h4> <p>There are some configuration items in Javascript library. These can either be set in <em>application/config.php</em>, within its own <em>config/javascript.php</em> file, or within any controller usings the <code>set_item()</code> function.</p> <p>An image to be used as an “ajax loader”, or progress indicator. Without one, the simple text message of “loading” will appear when Ajax calls need to be made.</p> <pre data-language=\"php\">$config['javascript_location'] = 'http://localhost/codeigniter/themes/js/jquery/';\n$config['javascript_ajax_img'] = 'images/ajax-loader.gif';\n</pre> <p>If you keep your files in the same directories they were downloaded from, then you need not set this configuration items.</p>    <h3 id=\"the-jquery-class\">The jQuery Class</h3> <p>To initialize the jQuery class manually in your controller constructor, use the <code>$this-&gt;load-&gt;library()</code> method:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('javascript/jquery');\n</pre> <p>You may send an optional parameter to determine whether or not a script tag for the main jQuery file will be automatically included when loading the library. It will be created by default. To prevent this, load the library as follows:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('javascript/jquery', FALSE);\n</pre> <p>Once loaded, the jQuery library object will be available using:</p>  $this-&gt;jquery   <h3 id=\"jquery-events\">jQuery Events</h3> <p>Events are set using the following syntax.</p> <pre data-language=\"php\">$this-&gt;jquery-&gt;event('element_path', code_to_run());\n</pre> <p>In the above example:</p> <ul class=\"simple\"> <li>“event” is any of blur, change, click, dblclick, error, focus, hover, keydown, keyup, load, mousedown, mouseup, mouseover, mouseup, resize, scroll, or unload.</li> <li>“element_path” is any valid <a class=\"reference external\" href=\"http://api.jquery.com/category/selectors/\">jQuery selector</a>. Due to jQuery’s unique selector syntax, this is usually an element id, or CSS selector. For example “#notice_area” would effect <code>&lt;div id=\"notice_area\"&gt;</code>, and “#content a.notice” would effect all anchors with a class of “notice” in the div with id “content”.</li> <li>“<code>code_to_run()</code>” is script your write yourself, or an action such as an effect from the jQuery library below.</li> </ul>   <h3 id=\"effects\">Effects</h3> <p>The query library supports a powerful <a class=\"reference external\" href=\"http://api.jquery.com/category/effects/\">Effects</a> repertoire. Before an effect can be used, it must be loaded:</p> <pre data-language=\"php\">$this-&gt;jquery-&gt;effect([optional path] plugin name); // for example $this-&gt;jquery-&gt;effect('bounce');\n</pre>  <h4 id=\"hide-show\">hide() / show()</h4> <p>Each of this functions will affect the visibility of an item on your page. hide() will set an item invisible, show() will reveal it.</p> <pre data-language=\"php\">$this-&gt;jquery-&gt;hide(target, optional speed, optional extra information);\n$this-&gt;jquery-&gt;show(target, optional speed, optional extra information);\n</pre> <ul class=\"simple\"> <li>“target” will be any valid jQuery selector or selectors.</li> <li>“speed” is optional, and is set to either slow, normal, fast, or alternatively a number of milliseconds.</li> <li>“extra information” is optional, and could include a callback, or other additional information.</li> </ul>   <h4 id=\"toggle\">toggle()</h4> <p>toggle() will change the visibility of an item to the opposite of its current state, hiding visible elements, and revealing hidden ones.</p> <pre data-language=\"php\">$this-&gt;jquery-&gt;toggle(target);\n</pre> <ul class=\"simple\"> <li>“target” will be any valid jQuery selector or selectors.</li> </ul>   <h4 id=\"animate\">animate()</h4> <pre data-language=\"php\">$this-&gt;jquery-&gt;animate(target, parameters, optional speed, optional extra information);\n</pre> <ul class=\"simple\"> <li>“target” will be any valid jQuery selector or selectors.</li> <li>“parameters” in jQuery would generally include a series of CSS properties that you wish to change.</li> <li>“speed” is optional, and is set to either slow, normal, fast, or alternatively a number of milliseconds.</li> <li>“extra information” is optional, and could include a callback, or other additional information.</li> </ul> <p>For a full summary, see <a class=\"reference external\" href=\"http://api.jquery.com/animate/\">http://api.jquery.com/animate/</a></p> <p>Here is an example of an animate() called on a div with an id of “note”, and triggered by a click using the jQuery library’s click() event.</p> <pre data-language=\"php\">$params = array(\n'height' =&gt; 80,\n'width' =&gt; '50%',\n'marginLeft' =&gt; 125\n);\n$this-&gt;jquery-&gt;click('#trigger', $this-&gt;jquery-&gt;animate('#note', $params, 'normal'));\n</pre>   <h4 id=\"fadein-fadeout\">fadeIn() / fadeOut()</h4> <pre data-language=\"php\">$this-&gt;jquery-&gt;fadeIn(target,  optional speed, optional extra information);\n$this-&gt;jquery-&gt;fadeOut(target,  optional speed, optional extra information);\n</pre> <ul class=\"simple\"> <li>“target” will be any valid jQuery selector or selectors.</li> <li>“speed” is optional, and is set to either slow, normal, fast, or alternatively a number of milliseconds.</li> <li>“extra information” is optional, and could include a callback, or other additional information.</li> </ul>   <h4 id=\"toggleclass\">toggleClass()</h4> <p>This function will add or remove a CSS class to its target.</p> <pre data-language=\"php\">$this-&gt;jquery-&gt;toggleClass(target, class)\n</pre> <ul class=\"simple\"> <li>“target” will be any valid jQuery selector or selectors.</li> <li>“class” is any CSS classname. Note that this class must be defined and available in a CSS that is already loaded.</li> </ul>   <h4 id=\"id2\">fadeIn() / fadeOut()</h4> <p>These effects cause an element(s) to disappear or reappear over time.</p> <pre data-language=\"php\">$this-&gt;jquery-&gt;fadeIn(target,  optional speed, optional extra information);\n$this-&gt;jquery-&gt;fadeOut(target,  optional speed, optional extra information);\n</pre> <ul class=\"simple\"> <li>“target” will be any valid jQuery selector or selectors.</li> <li>“speed” is optional, and is set to either slow, normal, fast, or alternatively a number of milliseconds.</li> <li>“extra information” is optional, and could include a callback, or other additional information.</li> </ul>   <h4 id=\"slideup-slidedown-slidetoggle\">slideUp() / slideDown() / slideToggle()</h4> <p>These effects cause an element(s) to slide.</p> <pre data-language=\"php\">$this-&gt;jquery-&gt;slideUp(target,  optional speed, optional extra information);\n$this-&gt;jquery-&gt;slideDown(target,  optional speed, optional extra information);\n$this-&gt;jquery-&gt;slideToggle(target,  optional speed, optional extra information);\n</pre> <ul class=\"simple\"> <li>“target” will be any valid jQuery selector or selectors.</li> <li>“speed” is optional, and is set to either slow, normal, fast, or alternatively a number of milliseconds.</li> <li>“extra information” is optional, and could include a callback, or other additional information.</li> </ul>    <h3 id=\"plugins\">Plugins</h3> <p>Some select jQuery plugins are made available using this library.</p>  <h4 id=\"corner\">corner()</h4> <p>Used to add distinct corners to page elements. For full details see <a class=\"reference external\" href=\"http://malsup.com/jquery/corner/\">http://malsup.com/jquery/corner/</a></p> <pre data-language=\"php\">$this-&gt;jquery-&gt;corner(target, corner_style);\n</pre> <ul class=\"simple\"> <li>“target” will be any valid jQuery selector or selectors.</li> <li>“corner_style” is optional, and can be set to any valid style such as round, sharp, bevel, bite, dog, etc. Individual corners can be set by following the style with a space and using “tl” (top left), “tr” (top right), “bl” (bottom left), or “br” (bottom right).</li> </ul> <pre data-language=\"php\">$this-&gt;jquery-&gt;corner(\"#note\", \"cool tl br\");\n</pre>   <h4 id=\"tablesorter\">tablesorter()</h4> <p>description to come</p>   <h4 id=\"modal\">modal()</h4> <p>description to come</p>   <h4 id=\"calendar\">calendar()</h4> <p>description to come</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/libraries/javascript.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/libraries/javascript.html</a>\n  </p>\n</div>\n","libraries/image_lib":"<h1 id=\"image-manipulation-class\">Image Manipulation Class</h1> <p>CodeIgniter’s Image Manipulation class lets you perform the following actions:</p> <ul class=\"simple\"> <li>Image Resizing</li> <li>Thumbnail Creation</li> <li>Image Cropping</li> <li>Image Rotating</li> <li>Image Watermarking</li> </ul> <p>All three major image libraries are supported: GD/GD2, NetPBM, and ImageMagick</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Watermarking is only available using the GD/GD2 library. In addition, even though other libraries are supported, GD is required in order for the script to calculate the image properties. The image processing, however, will be performed with the library you specify.</p> </div>  <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#initializing-the-class\" id=\"id1\">Initializing the Class</a><ul> <li><a class=\"reference internal\" href=\"#processing-an-image\" id=\"id2\">Processing an Image</a></li> <li><a class=\"reference internal\" href=\"#processing-methods\" id=\"id3\">Processing Methods</a></li> <li><a class=\"reference internal\" href=\"#preferences\" id=\"id4\">Preferences</a></li> <li><a class=\"reference internal\" href=\"#setting-preferences-in-a-config-file\" id=\"id5\">Setting preferences in a config file</a></li> </ul> </li> <li>\n<a class=\"reference internal\" href=\"#image-watermarking\" id=\"id6\">Image Watermarking</a><ul> <li><a class=\"reference internal\" href=\"#two-types-of-watermarking\" id=\"id7\">Two Types of Watermarking</a></li> <li><a class=\"reference internal\" href=\"#watermarking-an-image\" id=\"id8\">Watermarking an Image</a></li> <li>\n<a class=\"reference internal\" href=\"#watermarking-preferences\" id=\"id9\">Watermarking Preferences</a><ul> <li><a class=\"reference internal\" href=\"#text-preferences\" id=\"id10\">Text Preferences</a></li> <li><a class=\"reference internal\" href=\"#overlay-preferences\" id=\"id11\">Overlay Preferences</a></li> </ul> </li> </ul> </li> <li><a class=\"reference internal\" href=\"#class-reference\" id=\"id12\">Class Reference</a></li> </ul>   <h2 id=\"initializing-the-class\">Initializing the Class</h2> <p>Like most other classes in CodeIgniter, the image class is initialized in your controller using the $this-&gt;load-&gt;library function:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('image_lib');\n</pre> <p>Once the library is loaded it will be ready for use. The image library object you will use to call all functions is: <code>$this-&gt;image_lib</code></p>  <h3 id=\"processing-an-image\">Processing an Image</h3> <p>Regardless of the type of processing you would like to perform (resizing, cropping, rotation, or watermarking), the general process is identical. You will set some preferences corresponding to the action you intend to perform, then call one of four available processing functions. For example, to create an image thumbnail you’ll do this:</p> <pre data-language=\"php\">$config['image_library'] = 'gd2';\n$config['source_image'] = '/path/to/image/mypic.jpg';\n$config['create_thumb'] = TRUE;\n$config['maintain_ratio'] = TRUE;\n$config['width']         = 75;\n$config['height']       = 50;\n\n$this-&gt;load-&gt;library('image_lib', $config);\n\n$this-&gt;image_lib-&gt;resize();\n</pre> <p>The above code tells the image_resize function to look for an image called <em>mypic.jpg</em> located in the source_image folder, then create a thumbnail that is 75 X 50 pixels using the GD2 image_library. Since the maintain_ratio option is enabled, the thumb will be as close to the target width and height as possible while preserving the original aspect ratio. The thumbnail will be called <em>mypic_thumb.jpg</em> and located at the same level as <em>source_image</em>.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In order for the image class to be allowed to do any processing, the folder containing the image files must have write permissions.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Image processing can require a considerable amount of server memory for some operations. If you are experiencing out of memory errors while processing images you may need to limit their maximum size, and/or adjust PHP memory limits.</p> </div>   <h3 id=\"processing-methods\">Processing Methods</h3> <p>There are four available processing methods:</p> <ul class=\"simple\"> <li>$this-&gt;image_lib-&gt;resize()</li> <li>$this-&gt;image_lib-&gt;crop()</li> <li>$this-&gt;image_lib-&gt;rotate()</li> <li>$this-&gt;image_lib-&gt;watermark()</li> </ul> <p>These methods return boolean TRUE upon success and FALSE for failure. If they fail you can retrieve the error message using this function:</p> <pre data-language=\"php\">echo $this-&gt;image_lib-&gt;display_errors();\n</pre> <p>A good practice is to use the processing function conditionally, showing an error upon failure, like this:</p> <pre data-language=\"php\">if ( ! $this-&gt;image_lib-&gt;resize())\n{\n        echo $this-&gt;image_lib-&gt;display_errors();\n}\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>You can optionally specify the HTML formatting to be applied to the errors, by submitting the opening/closing tags in the function, like this:</p> <pre data-language=\"php\">$this-&gt;image_lib-&gt;display_errors('&lt;p&gt;', '&lt;/p&gt;');\n</pre> </div>   <h3 id=\"processing-preferences\">Preferences</h3> <p id=\"preferences\">The preferences described below allow you to tailor the image processing to suit your needs.</p> <p>Note that not all preferences are available for every function. For example, the x/y axis preferences are only available for image cropping. Likewise, the width and height preferences have no effect on cropping. The “availability” column indicates which functions support a given preference.</p> <p>Availability Legend:</p> <ul class=\"simple\"> <li>R - Image Resizing</li> <li>C - Image Cropping</li> <li>X - Image Rotation</li> <li>W - Image Watermarking</li> </ul> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Preference</th> <th class=\"head\">Default Value</th> <th class=\"head\">Options</th> <th class=\"head\">Description</th> <th class=\"head\">Availability</th> </tr> </thead>  <tr class=\"row-even\">\n<td><strong>image_library</strong></td> <td>GD2</td> <td>GD, GD2, ImageMagick, NetPBM</td> <td>Sets the image library to be used.</td> <td>R, C, X, W</td> </tr> <tr class=\"row-odd\">\n<td><strong>library_path</strong></td> <td>None</td> <td>None</td> <td>Sets the server path to your ImageMagick or NetPBM library. If you use either of those libraries you must supply the path.</td> <td>R, C, X R, C, S, W</td> </tr> <tr class=\"row-even\">\n<td><strong>source_image</strong></td> <td>None</td> <td>None</td> <td>Sets the source image name/path. The path must be a relative or absolute server path, not a URL.</td> <td> </td> </tr> <tr class=\"row-odd\">\n<td><strong>dynamic_output</strong></td> <td>FALSE</td> <td>TRUE/FALSE (boolean)</td> <td>Determines whether the new image file should be written to disk or generated dynamically. Note: If you choose the dynamic setting, only one image can be shown at a time, and it can’t be positioned on the page. It simply outputs the raw image dynamically to your browser, along with image headers.</td> <td>R, C, X, W</td> </tr> <tr class=\"row-even\">\n<td><strong>file_permissions</strong></td> <td>0644</td> <td>(integer)</td> <td>File system permissions to apply on the resulting image file, writing it to the disk. WARNING: Use octal integer notation!</td> <td>R, C, X, W</td> </tr> <tr class=\"row-odd\">\n<td><strong>quality</strong></td> <td>90%</td> <td>1 - 100%</td> <td>Sets the quality of the image. The higher the quality the larger the file size.</td> <td>R, C, X, W</td> </tr> <tr class=\"row-even\">\n<td><strong>new_image</strong></td> <td>None</td> <td>None</td> <td>Sets the destination image name/path. You’ll use this preference when creating an image copy. The path must be a relative or absolute server path, not a URL.</td> <td>R, C, X, W</td> </tr> <tr class=\"row-odd\">\n<td><strong>width</strong></td> <td>None</td> <td>None</td> <td>Sets the width you would like the image set to.</td> <td>R, C</td> </tr> <tr class=\"row-even\">\n<td><strong>height</strong></td> <td>None</td> <td>None</td> <td>Sets the height you would like the image set to.</td> <td>R, C</td> </tr> <tr class=\"row-odd\">\n<td><strong>create_thumb</strong></td> <td>FALSE</td> <td>TRUE/FALSE (boolean)</td> <td>Tells the image processing function to create a thumb.</td> <td>R</td> </tr> <tr class=\"row-even\">\n<td><strong>thumb_marker</strong></td> <td>_thumb</td> <td>None</td> <td>Specifies the thumbnail indicator. It will be inserted just before the file extension, so mypic.jpg would become mypic_thumb.jpg</td> <td>R</td> </tr> <tr class=\"row-odd\">\n<td><strong>maintain_ratio</strong></td> <td>TRUE</td> <td>TRUE/FALSE (boolean)</td> <td>Specifies whether to maintain the original aspect ratio when resizing or use hard values.</td> <td>R, C</td> </tr> <tr class=\"row-even\">\n<td><strong>master_dim</strong></td> <td>auto</td> <td>auto, width, height</td> <td>Specifies what to use as the master axis when resizing or creating thumbs. For example, let’s say you want to resize an image to 100 X 75 pixels. If the source image size does not allow perfect resizing to those dimensions, this setting determines which axis should be used as the hard value. “auto” sets the axis automatically based on whether the image is taller than wider, or vice versa.</td> <td>R</td> </tr> <tr class=\"row-odd\">\n<td><strong>rotation_angle</strong></td> <td>None</td> <td>90, 180, 270, vrt, hor</td> <td>Specifies the angle of rotation when rotating images. Note that PHP rotates counter-clockwise, so a 90 degree rotation to the right must be specified as 270.</td> <td>X</td> </tr> <tr class=\"row-even\">\n<td><strong>x_axis</strong></td> <td>None</td> <td>None</td> <td>Sets the X coordinate in pixels for image cropping. For example, a setting of 30 will crop an image 30 pixels from the left.</td> <td>C</td> </tr> <tr class=\"row-odd\">\n<td><strong>y_axis</strong></td> <td>None</td> <td>None</td> <td>Sets the Y coordinate in pixels for image cropping. For example, a setting of 30 will crop an image 30 pixels from the top.</td> <td>C</td> </tr>  </table>   <h3 id=\"setting-preferences-in-a-config-file\">Setting preferences in a config file</h3> <p>If you prefer not to set preferences using the above method, you can instead put them into a config file. Simply create a new file called image_lib.php, add the $config array in that file. Then save the file in <em>config/image_lib.php</em> and it will be used automatically. You will NOT need to use the <code>$this-&gt;image_lib-&gt;initialize()</code> method if you save your preferences in a config file.</p>    <h2 id=\"image-watermarking\">Image Watermarking</h2> <p>The Watermarking feature requires the GD/GD2 library.</p>  <h3 id=\"two-types-of-watermarking\">Two Types of Watermarking</h3> <p>There are two types of watermarking that you can use:</p> <ul class=\"simple\"> <li>\n<strong>Text</strong>: The watermark message will be generated using text, either with a True Type font that you specify, or using the native text output that the GD library supports. If you use the True Type version your GD installation must be compiled with True Type support (most are, but not all).</li> <li>\n<strong>Overlay</strong>: The watermark message will be generated by overlaying an image (usually a transparent PNG or GIF) containing your watermark over the source image.</li> </ul>   <h3 id=\"watermarking\">Watermarking an Image</h3> <p id=\"watermarking-an-image\">Just as with the other methods (resizing, cropping, and rotating) the general process for watermarking involves setting the preferences corresponding to the action you intend to perform, then calling the watermark function. Here is an example:</p> <pre data-language=\"php\">$config['source_image'] = '/path/to/image/mypic.jpg';\n$config['wm_text'] = 'Copyright 2006 - John Doe';\n$config['wm_type'] = 'text';\n$config['wm_font_path'] = './system/fonts/texb.ttf';\n$config['wm_font_size'] = '16';\n$config['wm_font_color'] = 'ffffff';\n$config['wm_vrt_alignment'] = 'bottom';\n$config['wm_hor_alignment'] = 'center';\n$config['wm_padding'] = '20';\n\n$this-&gt;image_lib-&gt;initialize($config);\n\n$this-&gt;image_lib-&gt;watermark();\n</pre> <p>The above example will use a 16 pixel True Type font to create the text “Copyright 2006 - John Doe”. The watermark will be positioned at the bottom/center of the image, 20 pixels from the bottom of the image.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In order for the image class to be allowed to do any processing, the image file must have “write” file permissions For example, 777.</p> </div>   <h3 id=\"watermarking-preferences\">Watermarking Preferences</h3> <p>This table shows the preferences that are available for both types of watermarking (text or overlay)</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Preference</th> <th class=\"head\">Default Value</th> <th class=\"head\">Options</th> <th class=\"head\">Description</th> </tr> </thead>  <tr class=\"row-even\">\n<td><strong>wm_type</strong></td> <td>text</td> <td>text, overlay</td> <td>Sets the type of watermarking that should be used.</td> </tr> <tr class=\"row-odd\">\n<td><strong>source_image</strong></td> <td>None</td> <td>None</td> <td>Sets the source image name/path. The path must be a relative or absolute server path, not a URL.</td> </tr> <tr class=\"row-even\">\n<td><strong>dynamic_output</strong></td> <td>FALSE</td> <td>TRUE/FALSE (boolean)</td> <td>Determines whether the new image file should be written to disk or generated dynamically. Note: If you choose the dynamic setting, only one image can be shown at a time, and it can’t be positioned on the page. It simply outputs the raw image dynamically to your browser, along with image headers.</td> </tr> <tr class=\"row-odd\">\n<td><strong>quality</strong></td> <td>90%</td> <td>1 - 100%</td> <td>Sets the quality of the image. The higher the quality the larger the file size.</td> </tr> <tr class=\"row-even\">\n<td><strong>wm_padding</strong></td> <td>None</td> <td>A number</td> <td>The amount of padding, set in pixels, that will be applied to the watermark to set it away from the edge of your images.</td> </tr> <tr class=\"row-odd\">\n<td><strong>wm_vrt_alignment</strong></td> <td>bottom</td> <td>top, middle, bottom</td> <td>Sets the vertical alignment for the watermark image.</td> </tr> <tr class=\"row-even\">\n<td><strong>wm_hor_alignment</strong></td> <td>center</td> <td>left, center, right</td> <td>Sets the horizontal alignment for the watermark image.</td> </tr> <tr class=\"row-odd\">\n<td><strong>wm_hor_offset</strong></td> <td>None</td> <td>None</td> <td>You may specify a horizontal offset (in pixels) to apply to the watermark position. The offset normally moves the watermark to the right, except if you have your alignment set to “right” then your offset value will move the watermark toward the left of the image.</td> </tr> <tr class=\"row-even\">\n<td><strong>wm_vrt_offset</strong></td> <td>None</td> <td>None</td> <td>You may specify a vertical offset (in pixels) to apply to the watermark position. The offset normally moves the watermark down, except if you have your alignment set to “bottom” then your offset value will move the watermark toward the top of the image.</td> </tr>  </table>  <h4 id=\"text-preferences\">Text Preferences</h4> <p>This table shows the preferences that are available for the text type of watermarking.</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Preference</th> <th class=\"head\">Default Value</th> <th class=\"head\">Options</th> <th class=\"head\">Description</th> </tr> </thead>  <tr class=\"row-even\">\n<td><strong>wm_text</strong></td> <td>None</td> <td>None</td> <td>The text you would like shown as the watermark. Typically this will be a copyright notice.</td> </tr> <tr class=\"row-odd\">\n<td><strong>wm_font_path</strong></td> <td>None</td> <td>None</td> <td>The server path to the True Type Font you would like to use. If you do not use this option, the native GD font will be used.</td> </tr> <tr class=\"row-even\">\n<td><strong>wm_font_size</strong></td> <td>16</td> <td>None</td> <td>The size of the text. Note: If you are not using the True Type option above, the number is set using a range of 1 - 5. Otherwise, you can use any valid pixel size for the font you’re using.</td> </tr> <tr class=\"row-odd\">\n<td><strong>wm_font_color</strong></td> <td>ffffff</td> <td>None</td> <td>The font color, specified in hex. Both the full 6-length (ie, 993300) and the short three character abbreviated version (ie, fff) are supported.</td> </tr> <tr class=\"row-even\">\n<td><strong>wm_shadow_color</strong></td> <td>None</td> <td>None</td> <td>The color of the drop shadow, specified in hex. If you leave this blank a drop shadow will not be used. Both the full 6-length (ie, 993300) and the short three character abbreviated version (ie, fff) are supported.</td> </tr> <tr class=\"row-odd\">\n<td><strong>wm_shadow_distance</strong></td> <td>3</td> <td>None</td> <td>The distance (in pixels) from the font that the drop shadow should appear.</td> </tr>  </table>   <h4 id=\"overlay-preferences\">Overlay Preferences</h4> <p>This table shows the preferences that are available for the overlay type of watermarking.</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Preference</th> <th class=\"head\">Default Value</th> <th class=\"head\">Options</th> <th class=\"head\">Description</th> </tr> </thead>  <tr class=\"row-even\">\n<td><strong>wm_overlay_path</strong></td> <td>None</td> <td>None</td> <td>The server path to the image you wish to use as your watermark. Required only if you are using the overlay method.</td> </tr> <tr class=\"row-odd\">\n<td><strong>wm_opacity</strong></td> <td>50</td> <td>1 - 100</td> <td>Image opacity. You may specify the opacity (i.e. transparency) of your watermark image. This allows the watermark to be faint and not completely obscure the details from the original image behind it. A 50% opacity is typical.</td> </tr> <tr class=\"row-even\">\n<td><strong>wm_x_transp</strong></td> <td>4</td> <td>A number</td> <td>If your watermark image is a PNG or GIF image, you may specify a color on the image to be “transparent”. This setting (along with the next) will allow you to specify that color. This works by specifying the “X” and “Y” coordinate pixel (measured from the upper left) within the image that corresponds to a pixel representative of the color you want to be transparent.</td> </tr> <tr class=\"row-odd\">\n<td><strong>wm_y_transp</strong></td> <td>4</td> <td>A number</td> <td>Along with the previous setting, this allows you to specify the coordinate to a pixel representative of the color you want to be transparent.</td> </tr>  </table>     <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_Image_lib\">\n<code>class CI_Image_lib</code> </dt> <dd>\n<dl class=\"method\"> <dt id=\"CI_Image_lib::initialize\">\n<code>initialize([$props = array()])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$props</strong> (<em>array</em>) – Image processing preferences</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE in case of invalid settings</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Initializes the class for processing an image.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Image_lib::resize\">\n<code>resize()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">TRUE on success, FALSE on failure</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">bool</td> </tr>  </table> <p>The image resizing method lets you resize the original image, create a copy (with or without resizing), or create a thumbnail image.</p> <p>For practical purposes there is no difference between creating a copy and creating a thumbnail except a thumb will have the thumbnail marker as part of the name (i.e. mypic_thumb.jpg).</p> <p>All preferences listed in the <a class=\"reference internal\" href=\"#processing-preferences\">Preferences</a> table are available for this method except these three: <em>rotation_angle</em>, <em>x_axis</em> and <em>y_axis</em>.</p> <p><strong>Creating a Thumbnail</strong></p> <p>The resizing method will create a thumbnail file (and preserve the original) if you set this preference to TRUE:</p> <pre data-language=\"php\">$config['create_thumb'] = TRUE;\n</pre> <p>This single preference determines whether a thumbnail is created or not.</p> <p><strong>Creating a Copy</strong></p> <p>The resizing method will create a copy of the image file (and preserve the original) if you set a path and/or a new filename using this preference:</p> <pre data-language=\"php\">$config['new_image'] = '/path/to/new_image.jpg';\n</pre> <p>Notes regarding this preference:</p> <ul class=\"simple\"> <li>If only the new image name is specified it will be placed in the same folder as the original</li> <li>If only the path is specified, the new image will be placed in the destination with the same name as the original.</li> <li>If both the path and image name are specified it will placed in its own destination and given the new name.</li> </ul> <p><strong>Resizing the Original Image</strong></p> <p>If neither of the two preferences listed above (create_thumb, and new_image) are used, the resizing method will instead target the original image for processing.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Image_lib::crop\">\n<code>crop()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">TRUE on success, FALSE on failure</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">bool</td> </tr>  </table> <p>The cropping method works nearly identically to the resizing function except it requires that you set preferences for the X and Y axis (in pixels) specifying where to crop, like this:</p> <pre data-language=\"php\">$config['x_axis'] = 100;\n$config['y_axis'] = 40;\n</pre> <p>All preferences listed in the <a class=\"reference internal\" href=\"#processing-preferences\">Preferences</a> table are available for this method except these: <em>rotation_angle</em>, <em>create_thumb</em> and <em>new_image</em>.</p> <p>Here’s an example showing how you might crop an image:</p> <pre data-language=\"php\">$config['image_library'] = 'imagemagick';\n$config['library_path'] = '/usr/X11R6/bin/';\n$config['source_image'] = '/path/to/image/mypic.jpg';\n$config['x_axis'] = 100;\n$config['y_axis'] = 60;\n\n$this-&gt;image_lib-&gt;initialize($config);\n\nif ( ! $this-&gt;image_lib-&gt;crop())\n{\n        echo $this-&gt;image_lib-&gt;display_errors();\n}\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Without a visual interface it is difficult to crop images, so this method is not very useful unless you intend to build such an interface. That’s exactly what we did using for the photo gallery module in ExpressionEngine, the CMS we develop. We added a JavaScript UI that lets the cropping area be selected.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Image_lib::rotate\">\n<code>rotate()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">TRUE on success, FALSE on failure</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">bool</td> </tr>  </table> <p>The image rotation method requires that the angle of rotation be set via its preference:</p> <pre data-language=\"php\">$config['rotation_angle'] = '90';\n</pre> <p>There are 5 rotation options:</p> <ol class=\"arabic simple\"> <li>90 - rotates counter-clockwise by 90 degrees.</li> <li>180 - rotates counter-clockwise by 180 degrees.</li> <li>270 - rotates counter-clockwise by 270 degrees.</li> <li>hor - flips the image horizontally.</li> <li>vrt - flips the image vertically.</li> </ol> <p>Here’s an example showing how you might rotate an image:</p> <pre data-language=\"php\">$config['image_library'] = 'netpbm';\n$config['library_path'] = '/usr/bin/';\n$config['source_image'] = '/path/to/image/mypic.jpg';\n$config['rotation_angle'] = 'hor';\n\n$this-&gt;image_lib-&gt;initialize($config);\n\nif ( ! $this-&gt;image_lib-&gt;rotate())\n{\n        echo $this-&gt;image_lib-&gt;display_errors();\n}\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Image_lib::watermark\">\n<code>watermark()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">TRUE on success, FALSE on failure</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">bool</td> </tr>  </table> <p>Creates a watermark over an image, please refer to the <a class=\"reference internal\" href=\"#watermarking\">Watermarking an Image</a> section for more info.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Image_lib::clear\">\n<code>clear()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">void</td> </tr>  </table> <p>The clear method resets all of the values used when processing an image. You will want to call this if you are processing images in a loop.</p> <pre data-language=\"php\">$this-&gt;image_lib-&gt;clear();\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Image_lib::display_errors\">\n<code>display_errors([$open = '<p>[, $close = '</p>']])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$open</strong> (<em>string</em>) – Error message opening tag</li> <li>\n<strong>$close</strong> (<em>string</em>) – Error message closing tag</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Error messages</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Returns all detected errors formatted as a string.</p> <pre data-language=\"php\">echo $this-&gt;image_lib-&gt;display_errors();\n</pre> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/libraries/image_lib.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/libraries/image_lib.html</a>\n  </p>\n</div>\n","libraries/typography":"<h1 id=\"typography-class\">Typography Class</h1> <p>The Typography Class provides methods that help you format text.</p>  <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#using-the-typography-class\" id=\"id1\">Using the Typography Class</a><ul> <li><a class=\"reference internal\" href=\"#initializing-the-class\" id=\"id2\">Initializing the Class</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#class-reference\" id=\"id3\">Class Reference</a></li> </ul>   <h2 id=\"using-the-typography-class\">Using the Typography Class</h2>  <h3 id=\"initializing-the-class\">Initializing the Class</h3> <p>Like most other classes in CodeIgniter, the Typography class is initialized in your controller using the <code>$this-&gt;load-&gt;library()</code> method:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('typography');\n</pre> <p>Once loaded, the Typography library object will be available using:</p> <pre data-language=\"php\">$this-&gt;typography\n</pre>    <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_Typography\">\n<code>class CI_Typography</code> </dt> <dd>\n<dl class=\"attribute\"> <dt>\n<code>$protect_braced_quotes = FALSE</code> </dt> <dd>\n<p>When using the Typography library in conjunction with the <a class=\"reference internal\" href=\"parser\">Template Parser library</a> it can often be desirable to protect single and double quotes within curly braces. To enable this, set the <code>protect_braced_quotes</code> class property to TRUE.</p> <p>Usage example:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('typography');\n$this-&gt;typography-&gt;protect_braced_quotes = TRUE;\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Typography::format_characters\">\n<code>format_characters($str)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Formatted string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>This method is similar to <code>auto_typography()</code> above, except that it only does character conversion:</p>  <ul class=\"simple\"> <li>Quotes are converted to correctly facing curly quote entities, except those that appear within tags.</li> <li>Apostrophes are converted to curly apostrophe entities.</li> <li>Double dashes (either like – this or like–this) are converted to em—dashes.</li> <li>Three consecutive periods either preceding or following a word are converted to ellipsis (…).</li> <li>Double spaces following sentences are converted to non-breaking spaces to mimic double spacing.</li> </ul>  <p>Usage example:</p> <pre data-language=\"php\">$string = $this-&gt;typography-&gt;format_characters($string);\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Typography::nl2br_except_pre\">\n<code>nl2br_except_pre($str)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Formatted string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Converts newlines to &lt;br /&gt; tags unless they appear within &lt;pre&gt; tags. This method is identical to the native PHP <code>nl2br()</code> function, except that it ignores &lt;pre&gt; tags.</p> <p>Usage example:</p> <pre data-language=\"php\">$string = $this-&gt;typography-&gt;nl2br_except_pre($string);\n</pre> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/libraries/typography.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/libraries/typography.html</a>\n  </p>\n</div>\n","libraries/parser":"<h1 id=\"template-parser-class\">Template Parser Class</h1> <p>The Template Parser Class can perform simple text substitution for pseudo-variables contained within your view files. It can parse simple variables or variable tag pairs.</p> <p>If you’ve never used a template engine, pseudo-variable names are enclosed in braces, like this:</p> <pre data-language=\"php\">&lt;html&gt;\n        &lt;head&gt;\n                &lt;title&gt;{blog_title}&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n                &lt;h3&gt;{blog_heading}&lt;/h3&gt;\n\n        {blog_entries}\n                &lt;h5&gt;{title}&lt;/h5&gt;\n                &lt;p&gt;{body}&lt;/p&gt;\n        {/blog_entries}\n\n        &lt;/body&gt;\n&lt;/html&gt;\n</pre> <p>These variables are not actual PHP variables, but rather plain text representations that allow you to eliminate PHP from your templates (view files).</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">CodeIgniter does <strong>not</strong> require you to use this class since using pure PHP in your view pages lets them run a little faster. However, some developers prefer to use a template engine if they work with designers who they feel would find some confusion working with PHP.</p> </div> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">The Template Parser Class is <strong>not</strong> a full-blown template parsing solution. We’ve kept it very lean on purpose in order to maintain maximum performance.</p> </div>  <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#using-the-template-parser-class\" id=\"id1\">Using the Template Parser Class</a><ul> <li><a class=\"reference internal\" href=\"#initializing-the-class\" id=\"id2\">Initializing the Class</a></li> <li><a class=\"reference internal\" href=\"#parsing-templates\" id=\"id3\">Parsing templates</a></li> <li><a class=\"reference internal\" href=\"#variable-pairs\" id=\"id4\">Variable Pairs</a></li> <li><a class=\"reference internal\" href=\"#usage-notes\" id=\"id5\">Usage Notes</a></li> <li><a class=\"reference internal\" href=\"#view-fragments\" id=\"id6\">View Fragments</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#class-reference\" id=\"id7\">Class Reference</a></li> </ul>   <h2 id=\"using-the-template-parser-class\">Using the Template Parser Class</h2>  <h3 id=\"initializing-the-class\">Initializing the Class</h3> <p>Like most other classes in CodeIgniter, the Parser class is initialized in your controller using the <code>$this-&gt;load-&gt;library()</code> method:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('parser');\n</pre> <p>Once loaded, the Parser library object will be available using: $this-&gt;parser</p>   <h3 id=\"parsing-templates\">Parsing templates</h3> <p>You can use the <code>parse()</code> method to parse (or render) simple templates, like this:</p> <pre data-language=\"php\">$data = array(\n        'blog_title' =&gt; 'My Blog Title',\n        'blog_heading' =&gt; 'My Blog Heading'\n);\n\n$this-&gt;parser-&gt;parse('blog_template', $data);\n</pre> <p>The first parameter contains the name of the <a class=\"reference internal\" href=\"../general/views\">view file</a> (in this example the file would be called blog_template.php), and the second parameter contains an associative array of data to be replaced in the template. In the above example, the template would contain two variables: {blog_title} and {blog_heading}</p> <p>There is no need to “echo” or do something with the data returned by $this-&gt;parser-&gt;parse(). It is automatically passed to the output class to be sent to the browser. However, if you do want the data returned instead of sent to the output class you can pass TRUE (boolean) as the third parameter:</p> <pre data-language=\"php\">$string = $this-&gt;parser-&gt;parse('blog_template', $data, TRUE);\n</pre>   <h3 id=\"variable-pairs\">Variable Pairs</h3> <p>The above example code allows simple variables to be replaced. What if you would like an entire block of variables to be repeated, with each iteration containing new values? Consider the template example we showed at the top of the page:</p> <pre data-language=\"php\">&lt;html&gt;\n        &lt;head&gt;\n                &lt;title&gt;{blog_title}&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n                &lt;h3&gt;{blog_heading}&lt;/h3&gt;\n\n        {blog_entries}\n                &lt;h5&gt;{title}&lt;/h5&gt;\n                &lt;p&gt;{body}&lt;/p&gt;\n        {/blog_entries}\n\n        &lt;/body&gt;\n&lt;/html&gt;\n</pre> <p>In the above code you’ll notice a pair of variables: {blog_entries} data... {/blog_entries}. In a case like this, the entire chunk of data between these pairs would be repeated multiple times, corresponding to the number of rows in the “blog_entries” element of the parameters array.</p> <p>Parsing variable pairs is done using the identical code shown above to parse single variables, except, you will add a multi-dimensional array corresponding to your variable pair data. Consider this example:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('parser');\n\n$data = array(\n        'blog_title'   =&gt; 'My Blog Title',\n        'blog_heading' =&gt; 'My Blog Heading',\n        'blog_entries' =&gt; array(\n                array('title' =&gt; 'Title 1', 'body' =&gt; 'Body 1'),\n                array('title' =&gt; 'Title 2', 'body' =&gt; 'Body 2'),\n                array('title' =&gt; 'Title 3', 'body' =&gt; 'Body 3'),\n                array('title' =&gt; 'Title 4', 'body' =&gt; 'Body 4'),\n                array('title' =&gt; 'Title 5', 'body' =&gt; 'Body 5')\n        )\n);\n\n$this-&gt;parser-&gt;parse('blog_template', $data);\n</pre> <p>If your “pair” data is coming from a database result, which is already a multi-dimensional array, you can simply use the database <code>result_array()</code> method:</p> <pre data-language=\"php\">$query = $this-&gt;db-&gt;query(\"SELECT * FROM blog\");\n\n$this-&gt;load-&gt;library('parser');\n\n$data = array(\n        'blog_title'   =&gt; 'My Blog Title',\n        'blog_heading' =&gt; 'My Blog Heading',\n        'blog_entries' =&gt; $query-&gt;result_array()\n);\n\n$this-&gt;parser-&gt;parse('blog_template', $data);\n</pre>   <h3 id=\"usage-notes\">Usage Notes</h3> <p>If you include substitution parameters that are not referenced in your template, they are ignored:</p> <pre data-language=\"php\">$template = 'Hello, {firstname} {lastname}';\n$data = array(\n        'title' =&gt; 'Mr',\n        'firstname' =&gt; 'John',\n        'lastname' =&gt; 'Doe'\n);\n$this-&gt;parser-&gt;parse_string($template, $data);\n\n// Result: Hello, John Doe\n</pre> <p>If you do not include a substitution parameter that is referenced in your template, the original pseudo-variable is shown in the result:</p> <pre data-language=\"php\">$template = 'Hello, {firstname} {initials} {lastname}';\n$data = array(\n        'title' =&gt; 'Mr',\n        'firstname' =&gt; 'John',\n        'lastname' =&gt; 'Doe'\n);\n$this-&gt;parser-&gt;parse_string($template, $data);\n\n// Result: Hello, John {initials} Doe\n</pre> <p>If you provide a string substitution parameter when an array is expected, i.e. for a variable pair, the substitution is done for the opening variable pair tag, but the closing variable pair tag is not rendered properly:</p> <pre data-language=\"php\">$template = 'Hello, {firstname} {lastname} ({degrees}{degree} {/degrees})';\n$data = array(\n        'degrees' =&gt; 'Mr',\n        'firstname' =&gt; 'John',\n        'lastname' =&gt; 'Doe',\n        'titles' =&gt; array(\n                array('degree' =&gt; 'BSc'),\n                array('degree' =&gt; 'PhD')\n        )\n);\n$this-&gt;parser-&gt;parse_string($template, $data);\n\n// Result: Hello, John Doe (Mr{degree} {/degrees})\n</pre> <p>If you name one of your individual substitution parameters the same as one used inside a variable pair, the results may not be as expected:</p> <pre data-language=\"php\">$template = 'Hello, {firstname} {lastname} ({degrees}{degree} {/degrees})';\n$data = array(\n        'degree' =&gt; 'Mr',\n        'firstname' =&gt; 'John',\n        'lastname' =&gt; 'Doe',\n        'degrees' =&gt; array(\n                array('degree' =&gt; 'BSc'),\n                array('degree' =&gt; 'PhD')\n        )\n);\n$this-&gt;parser-&gt;parse_string($template, $data);\n\n// Result: Hello, John Doe (Mr Mr )\n</pre>   <h3 id=\"view-fragments\">View Fragments</h3> <p>You do not have to use variable pairs to get the effect of iteration in your views. It is possible to use a view fragment for what would be inside a variable pair, and to control the iteration in your controller instead of in the view.</p> <p>An example with the iteration controlled in the view:</p> <pre data-language=\"php\">$template = '&lt;ul&gt;{menuitems}\n        &lt;li&gt;&lt;a href=\"{link}\"&gt;{title}&lt;/a&gt;&lt;/li&gt;\n{/menuitems}&lt;/ul&gt;';\n\n$data = array(\n        'menuitems' =&gt; array(\n                array('title' =&gt; 'First Link', 'link' =&gt; '/first'),\n                array('title' =&gt; 'Second Link', 'link' =&gt; '/second'),\n        )\n);\n$this-&gt;parser-&gt;parse_string($template, $data);\n</pre> <p>Result:</p> <pre data-language=\"php\">&lt;ul&gt;\n        &lt;li&gt;&lt;a href=\"/first\"&gt;First Link&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=\"/second\"&gt;Second Link&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</pre> <p>An example with the iteration controlled in the controller, using a view fragment:</p> <pre data-language=\"php\">$temp = '';\n$template1 = '&lt;li&gt;&lt;a href=\"{link}\"&gt;{title}&lt;/a&gt;&lt;/li&gt;';\n$data1 = array(\n        array('title' =&gt; 'First Link', 'link' =&gt; '/first'),\n        array('title' =&gt; 'Second Link', 'link' =&gt; '/second'),\n);\n\nforeach ($data1 as $menuitem)\n{\n        $temp .= $this-&gt;parser-&gt;parse_string($template1, $menuitem, TRUE);\n}\n\n$template = '&lt;ul&gt;{menuitems}&lt;/ul&gt;';\n$data = array(\n        'menuitems' =&gt; $temp\n);\n$this-&gt;parser-&gt;parse_string($template, $data);\n</pre> <p>Result:</p> <pre data-language=\"php\">&lt;ul&gt;\n        &lt;li&gt;&lt;a href=\"/first\"&gt;First Link&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=\"/second\"&gt;Second Link&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</pre>    <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_Parser\">\n<code>class CI_Parser</code> </dt> <dd>\n<dl class=\"method\"> <dt id=\"CI_Parser::parse\">\n<code>parse($template, $data[, $return = FALSE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$template</strong> (<em>string</em>) – Path to view file</li> <li>\n<strong>$data</strong> (<em>array</em>) – Variable data</li> <li>\n<strong>$return</strong> (<em>bool</em>) – Whether to only return the parsed template</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Parsed template string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Parses a template from the provided path and variables.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Parser::parse_string\">\n<code>parse_string($template, $data[, $return = FALSE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$template</strong> (<em>string</em>) – Path to view file</li> <li>\n<strong>$data</strong> (<em>array</em>) – Variable data</li> <li>\n<strong>$return</strong> (<em>bool</em>) – Whether to only return the parsed template</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Parsed template string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>This method works exactly like <code>parse()</code>, only it accepts the template as a string instead of loading a view file.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Parser::set_delimiters\">\n<code>set_delimiters([$l = '{'[, $r = '}']])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$l</strong> (<em>string</em>) – Left delimiter</li> <li>\n<strong>$r</strong> (<em>string</em>) – Right delimiter</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Sets the delimiters (opening and closing) for a pseudo-variable “tag” in a template.</p> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/libraries/parser.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/libraries/parser.html</a>\n  </p>\n</div>\n","general/managing_apps":"<h1 id=\"managing-your-applications\">Managing your Applications</h1> <p>By default it is assumed that you only intend to use CodeIgniter to manage one application, which you will build in your <em>application/</em> directory. It is possible, however, to have multiple sets of applications that share a single CodeIgniter installation, or even to rename or relocate your application directory.</p>  <h2 id=\"renaming-the-application-directory\">Renaming the Application Directory</h2> <p>If you would like to rename your application directory you may do so as long as you open your main index.php file and set its name using the <code>$application_folder</code> variable:</p> <pre data-language=\"php\">$application_folder = 'application';\n</pre>   <h2 id=\"relocating-your-application-directory\">Relocating your Application Directory</h2> <p>It is possible to move your application directory to a different location on your server than your web root. To do so open your main index.php and set a <em>full server path</em> in the <code>$application_folder</code> variable:</p> <pre data-language=\"php\">$application_folder = '/path/to/your/application';\n</pre>   <h2 id=\"running-multiple-applications-with-one-codeigniter-installation\">Running Multiple Applications with one CodeIgniter Installation</h2> <p>If you would like to share a common CodeIgniter installation to manage several different applications simply put all of the directories located inside your application directory into their own sub-directory.</p> <p>For example, let’s say you want to create two applications, named “foo” and “bar”. You could structure your application directories like this:</p> <pre data-language=\"php\">applications/foo/\napplications/foo/config/\napplications/foo/controllers/\napplications/foo/libraries/\napplications/foo/models/\napplications/foo/views/\napplications/bar/\napplications/bar/config/\napplications/bar/controllers/\napplications/bar/libraries/\napplications/bar/models/\napplications/bar/views/\n</pre> <p>To select a particular application for use requires that you open your main index.php file and set the <code>$application_folder</code> variable. For example, to select the “foo” application for use you would do this:</p> <pre data-language=\"php\">$application_folder = 'applications/foo';\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Each of your applications will need its own index.php file which calls the desired application. The index.php file can be named anything you want.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/general/managing_apps.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/general/managing_apps.html</a>\n  </p>\n</div>\n","libraries/unit_testing":"<h1 id=\"unit-testing-class\">Unit Testing Class</h1> <p>Unit testing is an approach to software development in which tests are written for each function in your application. If you are not familiar with the concept you might do a little googling on the subject.</p> <p>CodeIgniter’s Unit Test class is quite simple, consisting of an evaluation function and two result functions. It’s not intended to be a full-blown test suite but rather a simple mechanism to evaluate your code to determine if it is producing the correct data type and result.</p>  <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#using-the-unit-testing-library\" id=\"id1\">Using the Unit Testing Library</a><ul> <li><a class=\"reference internal\" href=\"#initializing-the-class\" id=\"id2\">Initializing the Class</a></li> <li><a class=\"reference internal\" href=\"#running-tests\" id=\"id3\">Running Tests</a></li> <li><a class=\"reference internal\" href=\"#generating-reports\" id=\"id4\">Generating Reports</a></li> <li><a class=\"reference internal\" href=\"#strict-mode\" id=\"id5\">Strict Mode</a></li> <li><a class=\"reference internal\" href=\"#enabling-disabling-unit-testing\" id=\"id6\">Enabling/Disabling Unit Testing</a></li> <li>\n<a class=\"reference internal\" href=\"#unit-test-display\" id=\"id7\">Unit Test Display</a><ul> <li><a class=\"reference internal\" href=\"#customizing-displayed-tests\" id=\"id8\">Customizing displayed tests</a></li> <li><a class=\"reference internal\" href=\"#creating-a-template\" id=\"id9\">Creating a Template</a></li> </ul> </li> </ul> </li> <li><a class=\"reference internal\" href=\"#class-reference\" id=\"id10\">Class Reference</a></li> </ul>   <h2 id=\"using-the-unit-testing-library\">Using the Unit Testing Library</h2>  <h3 id=\"initializing-the-class\">Initializing the Class</h3> <p>Like most other classes in CodeIgniter, the Unit Test class is initialized in your controller using the $this-&gt;load-&gt;library function:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('unit_test');\n</pre> <p>Once loaded, the Unit Test object will be available using <code>$this-&gt;unit</code></p>   <h3 id=\"running-tests\">Running Tests</h3> <p>Running a test involves supplying a test and an expected result in the following way:</p>  $this-&gt;unit-&gt;run(‘test’, ‘expected result’, ‘test name’, ‘notes’); <p>Where test is the result of the code you wish to test, expected result is the data type you expect, test name is an optional name you can give your test, and notes are optional notes. Example:</p> <pre data-language=\"php\">$test = 1 + 1;\n\n$expected_result = 2;\n\n$test_name = 'Adds one plus one';\n\n$this-&gt;unit-&gt;run($test, $expected_result, $test_name);\n</pre> <p>The expected result you supply can either be a literal match, or a data type match. Here’s an example of a literal:</p> <pre data-language=\"php\">$this-&gt;unit-&gt;run('Foo', 'Foo');\n</pre> <p>Here is an example of a data type match:</p> <pre data-language=\"php\">$this-&gt;unit-&gt;run('Foo', 'is_string');\n</pre> <p>Notice the use of “is_string” in the second parameter? This tells the function to evaluate whether your test is producing a string as the result. Here is a list of allowed comparison types:</p> <ul class=\"simple\"> <li>is_object</li> <li>is_string</li> <li>is_bool</li> <li>is_true</li> <li>is_false</li> <li>is_int</li> <li>is_numeric</li> <li>is_float</li> <li>is_double</li> <li>is_array</li> <li>is_null</li> <li>is_resource</li> </ul>   <h3 id=\"generating-reports\">Generating Reports</h3> <p>You can either display results after each test, or your can run several tests and generate a report at the end. To show a report directly simply echo or return the run function:</p> <pre data-language=\"php\">echo $this-&gt;unit-&gt;run($test, $expected_result);\n</pre> <p>To run a full report of all tests, use this:</p> <pre data-language=\"php\">echo $this-&gt;unit-&gt;report();\n</pre> <p>The report will be formatted in an HTML table for viewing. If you prefer the raw data you can retrieve an array using:</p> <pre data-language=\"php\">echo $this-&gt;unit-&gt;result();\n</pre>   <h3 id=\"strict-mode\">Strict Mode</h3> <p>By default the unit test class evaluates literal matches loosely. Consider this example:</p> <pre data-language=\"php\">$this-&gt;unit-&gt;run(1, TRUE);\n</pre> <p>The test is evaluating an integer, but the expected result is a boolean. PHP, however, due to it’s loose data-typing will evaluate the above code as TRUE using a normal equality test:</p> <pre data-language=\"php\">if (1 == TRUE) echo 'This evaluates as true';\n</pre> <p>If you prefer, you can put the unit test class in to strict mode, which will compare the data type as well as the value:</p> <pre data-language=\"php\">if (1 === TRUE) echo 'This evaluates as FALSE';\n</pre> <p>To enable strict mode use this:</p> <pre data-language=\"php\">$this-&gt;unit-&gt;use_strict(TRUE);\n</pre>   <h3 id=\"enabling-disabling-unit-testing\">Enabling/Disabling Unit Testing</h3> <p>If you would like to leave some testing in place in your scripts, but not have it run unless you need it, you can disable unit testing using:</p> <pre data-language=\"php\">$this-&gt;unit-&gt;active(FALSE);\n</pre>   <h3 id=\"unit-test-display\">Unit Test Display</h3> <p>When your unit test results display, the following items show by default:</p> <ul class=\"simple\"> <li>Test Name (test_name)</li> <li>Test Datatype (test_datatype)</li> <li>Expected Datatype (res_datatype)</li> <li>Result (result)</li> <li>File Name (file)</li> <li>Line Number (line)</li> <li>Any notes you entered for the test (notes)</li> </ul> <p>You can customize which of these items get displayed by using $this-&gt;unit-&gt;set_test_items(). For example, if you only wanted the test name and the result displayed:</p>  <h4 id=\"customizing-displayed-tests\">Customizing displayed tests</h4> <pre data-language=\"php\">$this-&gt;unit-&gt;set_test_items(array('test_name', 'result'));\n</pre>   <h4 id=\"creating-a-template\">Creating a Template</h4> <p>If you would like your test results formatted differently then the default you can set your own template. Here is an example of a simple template. Note the required pseudo-variables:</p> <pre data-language=\"php\">$str = '\n&lt;table border=\"0\" cellpadding=\"4\" cellspacing=\"1\"&gt;\n{rows}\n        &lt;tr&gt;\n                &lt;td&gt;{item}&lt;/td&gt;\n                &lt;td&gt;{result}&lt;/td&gt;\n        &lt;/tr&gt;\n{/rows}\n&lt;/table&gt;';\n\n$this-&gt;unit-&gt;set_template($str);\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Your template must be declared <strong>before</strong> running the unit test process.</p> </div>     <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_Unit_test\">\n<code>class CI_Unit_test</code> </dt> <dd>\n<dl class=\"method\"> <dt id=\"CI_Unit_test::set_test_items\">\n<code>set_test_items($items)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$items</strong> (<em>array</em>) – List of visible test items</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Sets a list of items that should be visible in tests. Valid options are:</p>  <ul class=\"simple\"> <li>test_name</li> <li>test_datatype</li> <li>res_datatype</li> <li>result</li> <li>file</li> <li>line</li> <li>notes</li> </ul>  </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Unit_test::run\">\n<code>run($test[, $expected = TRUE[, $test_name = 'undefined'[, $notes = '']]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$test</strong> (<em>mixed</em>) – Test data</li> <li>\n<strong>$expected</strong> (<em>mixed</em>) – Expected result</li> <li>\n<strong>$test_name</strong> (<em>string</em>) – Test name</li> <li>\n<strong>$notes</strong> (<em>string</em>) – Any notes to be attached to the test</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Test report</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Runs unit tests.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Unit_test::report\">\n<code>report([$result = array()])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$result</strong> (<em>array</em>) – Array containing tests results</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Test report</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Generates a report about already complete tests.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Unit_test::use_strict\">\n<code>use_strict([$state = TRUE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$state</strong> (<em>bool</em>) – Strict state flag</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Enables/disables strict type comparison in tests.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Unit_test::active\">\n<code>active([$state = TRUE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$state</strong> (<em>bool</em>) – Whether to enable testing</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Enables/disables unit testing.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Unit_test::result\">\n<code>result([$results = array()])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$results</strong> (<em>array</em>) – Tests results list</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Array of raw result data</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>Returns raw tests results data.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Unit_test::set_template\">\n<code>set_template($template)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$template</strong> (<em>string</em>) – Test result template</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Sets the template for displaying tests results.</p> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/libraries/unit_testing.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/libraries/unit_testing.html</a>\n  </p>\n</div>\n","general/creating_drivers":"<h1 id=\"creating-drivers\">Creating Drivers</h1>  <h2 id=\"driver-directory-and-file-structure\">Driver Directory and File Structure</h2> <p>Sample driver directory and file structure layout:</p> <ul class=\"simple\"> <li>/application/libraries/Driver_name<ul> <li>Driver_name.php</li> <li>drivers<ul> <li>Driver_name_subclass_1.php</li> <li>Driver_name_subclass_2.php</li> <li>Driver_name_subclass_3.php</li> </ul> </li> </ul> </li> </ul> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In order to maintain compatibility on case-sensitive file systems, the Driver_name directory must be named in the format returned by <code>ucfirst()</code>.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The Driver library’s architecture is such that the subclasses don’t extend and therefore don’t inherit properties or methods of the main driver.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/general/creating_drivers.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/general/creating_drivers.html</a>\n  </p>\n</div>\n","general/routing":"<h1 id=\"uri-routing\">URI Routing</h1> <p>Typically there is a one-to-one relationship between a URL string and its corresponding controller class/method. The segments in a URI normally follow this pattern:</p> <pre data-language=\"php\">example.com/class/function/id/\n</pre> <p>In some instances, however, you may want to remap this relationship so that a different class/method can be called instead of the one corresponding to the URL.</p> <p>For example, let’s say you want your URLs to have this prototype:</p> <pre data-language=\"php\">example.com/product/1/\nexample.com/product/2/\nexample.com/product/3/\nexample.com/product/4/\n</pre> <p>Normally the second segment of the URL is reserved for the method name, but in the example above it instead has a product ID. To overcome this, CodeIgniter allows you to remap the URI handler.</p>  <h2 id=\"setting-your-own-routing-rules\">Setting your own routing rules</h2> <p>Routing rules are defined in your <em>application/config/routes.php</em> file. In it you’ll see an array called <code>$route</code> that permits you to specify your own routing criteria. Routes can either be specified using wildcards or Regular Expressions.</p>   <h2 id=\"wildcards\">Wildcards</h2> <p>A typical wildcard route might look something like this:</p> <pre data-language=\"php\">$route['product/:num'] = 'catalog/product_lookup';\n</pre> <p>In a route, the array key contains the URI to be matched, while the array value contains the destination it should be re-routed to. In the above example, if the literal word “product” is found in the first segment of the URL, and a number is found in the second segment, the “catalog” class and the “product_lookup” method are instead used.</p> <p>You can match literal values or you can use two wildcard types:</p> <p><strong>(:num)</strong> will match a segment containing only numbers. <strong>(:any)</strong> will match a segment containing any character (except for ‘/’, which is the segment delimiter).</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Wildcards are actually aliases for regular expressions, with <strong>:any</strong> being translated to <strong>[^/]+</strong> and <strong>:num</strong> to <strong>[0-9]+</strong>, respectively.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Routes will run in the order they are defined. Higher routes will always take precedence over lower ones.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Route rules are not filters! Setting a rule of e.g. ‘foo/bar/(:num)’ will not prevent controller <em>Foo</em> and method <em>bar</em> to be called with a non-numeric value if that is a valid route.</p> </div>   <h2 id=\"examples\">Examples</h2> <p>Here are a few routing examples:</p> <pre data-language=\"php\">$route['journals'] = 'blogs';\n</pre> <p>A URL containing the word “journals” in the first segment will be remapped to the “blogs” class.</p> <pre data-language=\"php\">$route['blog/joe'] = 'blogs/users/34';\n</pre> <p>A URL containing the segments blog/joe will be remapped to the “blogs” class and the “users” method. The ID will be set to “34”.</p> <pre data-language=\"php\">$route['product/(:any)'] = 'catalog/product_lookup';\n</pre> <p>A URL with “product” as the first segment, and anything in the second will be remapped to the “catalog” class and the “product_lookup” method.</p> <pre data-language=\"php\">$route['product/(:num)'] = 'catalog/product_lookup_by_id/$1';\n</pre> <p>A URL with “product” as the first segment, and a number in the second will be remapped to the “catalog” class and the “product_lookup_by_id” method passing in the match as a variable to the method.</p> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">Do not use leading/trailing slashes.</p> </div>   <h2 id=\"regular-expressions\">Regular Expressions</h2> <p>If you prefer you can use regular expressions to define your routing rules. Any valid regular expression is allowed, as are back-references.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If you use back-references you must use the dollar syntax rather than the double backslash syntax.</p> </div> <p>A typical RegEx route might look something like this:</p> <pre data-language=\"php\">$route['products/([a-z]+)/(\\d+)'] = '$1/id_$2';\n</pre> <p>In the above example, a URI similar to products/shirts/123 would instead call the “shirts” controller class and the “id_123” method.</p> <p>With regular expressions, you can also catch multiple segments at once. For example, if a user accesses a password protected area of your web application and you wish to be able to redirect them back to the same page after they log in, you may find this example useful:</p> <pre data-language=\"php\">$route['login/(.+)'] = 'auth/login/$1';\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In the above example, if the <code>$1</code> placeholder contains a slash, it will still be split into multiple parameters when passed to <code>Auth::login()</code>.</p> </div> <p>For those of you who don’t know regular expressions and want to learn more about them, <a class=\"reference external\" href=\"http://www.regular-expressions.info/\">regular-expressions.info</a> might be a good starting point.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">You can also mix and match wildcards with regular expressions.</p> </div>   <h2 id=\"callbacks\">Callbacks</h2> <p>If you are using PHP &gt;= 5.3 you can use callbacks in place of the normal routing rules to process the back-references. Example:</p> <pre data-language=\"php\">$route['products/([a-zA-Z]+)/edit/(\\d+)'] = function ($product_type, $id)\n{\n        return 'catalog/product_edit/' . strtolower($product_type) . '/' . $id;\n};\n</pre>   <h2 id=\"using-http-verbs-in-routes\">Using HTTP verbs in routes</h2> <p>It is possible to use HTTP verbs (request method) to define your routing rules. This is particularly useful when building RESTful applications. You can use standard HTTP verbs (GET, PUT, POST, DELETE, PATCH) or a custom one such (e.g. PURGE). HTTP verb rules are case-insensitive. All you need to do is to add the verb as an array key to your route. Example:</p> <pre data-language=\"php\">$route['products']['put'] = 'product/insert';\n</pre> <p>In the above example, a PUT request to URI “products” would call the <code>Product::insert()</code> controller method.</p> <pre data-language=\"php\">$route['products/(:num)']['DELETE'] = 'product/delete/$1';\n</pre> <p>A DELETE request to URL with “products” as first the segment and a number in the second will be mapped to the <code>Product::delete()</code> method, passing the numeric value as the first parameter.</p> <p>Using HTTP verbs is of course, optional.</p>   <h2 id=\"reserved-routes\">Reserved Routes</h2> <p>There are three reserved routes:</p> <pre data-language=\"php\">$route['default_controller'] = 'welcome';\n</pre> <p>This route points to the action that should be executed if the URI contains no data, which will be the case when people load your root URL. The setting accepts a <strong>controller/method</strong> value and <code>index()</code> would be the default method if you don’t specify one. In the above example, it is <code>Welcome::index()</code> that would be called.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">You can NOT use a directory as a part of this setting!</p> </div> <p>You are encouraged to always have a default route as otherwise a 404 page will appear by default.</p> <pre data-language=\"php\">$route['404_override'] = '';\n</pre> <p>This route indicates which controller class should be loaded if the requested controller is not found. It will override the default 404 error page. Same per-directory rules as with ‘default_controller’ apply here as well.</p> <p>It won’t affect to the <code>show_404()</code> function, which will continue loading the default <em>error_404.php</em> file at <em>application/views/errors/error_404.php</em>.</p> <pre data-language=\"php\">$route['translate_uri_dashes'] = FALSE;\n</pre> <p>As evident by the boolean value, this is not exactly a route. This option enables you to automatically replace dashes (‘-‘) with underscores in the controller and method URI segments, thus saving you additional route entries if you need to do that. This is required, because the dash isn’t a valid class or method name character and would cause a fatal error if you try to use it.</p> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">The reserved routes must come before any wildcard or regular expression routes.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/general/routing.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/general/routing.html</a>\n  </p>\n</div>\n","libraries/xmlrpc":"<h1 id=\"xml-rpc-and-xml-rpc-server-classes\">XML-RPC and XML-RPC Server Classes</h1> <p>CodeIgniter’s XML-RPC classes permit you to send requests to another server, or set up your own XML-RPC server to receive requests.</p>  <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#what-is-xml-rpc\" id=\"id3\">What is XML-RPC?</a></li> <li>\n<a class=\"reference internal\" href=\"#using-the-xml-rpc-class\" id=\"id4\">Using the XML-RPC Class</a><ul> <li><a class=\"reference internal\" href=\"#initializing-the-class\" id=\"id5\">Initializing the Class</a></li> <li>\n<a class=\"reference internal\" href=\"#sending-xml-rpc-requests\" id=\"id6\">Sending XML-RPC Requests</a><ul> <li><a class=\"reference internal\" href=\"#explanation\" id=\"id7\">Explanation</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#anatomy-of-a-request\" id=\"id8\">Anatomy of a Request</a></li> <li><a class=\"reference internal\" href=\"#creating-an-xml-rpc-server\" id=\"id9\">Creating an XML-RPC Server</a></li> <li>\n<a class=\"reference internal\" href=\"#processing-server-requests\" id=\"id10\">Processing Server Requests</a><ul> <li><a class=\"reference internal\" href=\"#notes\" id=\"id11\">Notes:</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#formatting-a-response\" id=\"id12\">Formatting a Response</a></li> <li><a class=\"reference internal\" href=\"#sending-an-error-response\" id=\"id13\">Sending an Error Response</a></li> <li>\n<a class=\"reference internal\" href=\"#creating-your-own-client-and-server\" id=\"id14\">Creating Your Own Client and Server</a><ul> <li><a class=\"reference internal\" href=\"#the-client\" id=\"id15\">The Client</a></li> <li><a class=\"reference internal\" href=\"#the-server\" id=\"id16\">The Server</a></li> <li><a class=\"reference internal\" href=\"#try-it\" id=\"id17\">Try it!</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#using-associative-arrays-in-a-request-parameter\" id=\"id18\">Using Associative Arrays In a Request Parameter</a></li> <li><a class=\"reference internal\" href=\"#id2\" id=\"id19\">Data Types</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#class-reference\" id=\"id20\">Class Reference</a></li> </ul>   <h2 id=\"what-is-xml-rpc\">What is XML-RPC?</h2> <p>Quite simply it is a way for two computers to communicate over the internet using XML. One computer, which we will call the client, sends an XML-RPC <strong>request</strong> to another computer, which we will call the server. Once the server receives and processes the request it will send back a <strong>response</strong> to the client.</p> <p>For example, using the MetaWeblog API, an XML-RPC Client (usually a desktop publishing tool) will send a request to an XML-RPC Server running on your site. This request might be a new weblog entry being sent for publication, or it could be a request for an existing entry for editing. When the XML-RPC Server receives this request it will examine it to determine which class/method should be called to process the request. Once processed, the server will then send back a response message.</p> <p>For detailed specifications, you can visit the <a class=\"reference external\" href=\"http://www.xmlrpc.com/\">XML-RPC</a> site.</p>   <h2 id=\"using-the-xml-rpc-class\">Using the XML-RPC Class</h2>  <h3 id=\"initializing-the-class\">Initializing the Class</h3> <p>Like most other classes in CodeIgniter, the XML-RPC and XML-RPCS classes are initialized in your controller using the $this-&gt;load-&gt;library function:</p> <p>To load the XML-RPC class you will use:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('xmlrpc');\n</pre> <p>Once loaded, the xml-rpc library object will be available using: $this-&gt;xmlrpc</p> <p>To load the XML-RPC Server class you will use:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('xmlrpc');\n$this-&gt;load-&gt;library('xmlrpcs');\n</pre> <p>Once loaded, the xml-rpcs library object will be available using: $this-&gt;xmlrpcs</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">When using the XML-RPC Server class you must load BOTH the XML-RPC class and the XML-RPC Server class.</p> </div>   <h3 id=\"sending-xml-rpc-requests\">Sending XML-RPC Requests</h3> <p>To send a request to an XML-RPC server you must specify the following information:</p> <ul class=\"simple\"> <li>The URL of the server</li> <li>The method on the server you wish to call</li> <li>The <em>request</em> data (explained below).</li> </ul> <p>Here is a basic example that sends a simple Weblogs.com ping to the <a class=\"reference external\" href=\"http://pingomatic.com/\">Ping-o-Matic</a></p> <pre data-language=\"php\">$this-&gt;load-&gt;library('xmlrpc');\n\n$this-&gt;xmlrpc-&gt;server('http://rpc.pingomatic.com/', 80);\n$this-&gt;xmlrpc-&gt;method('weblogUpdates.ping');\n\n$request = array('My Photoblog', 'http://www.my-site.com/photoblog/');\n$this-&gt;xmlrpc-&gt;request($request);\n\nif ( ! $this-&gt;xmlrpc-&gt;send_request())\n{\n        echo $this-&gt;xmlrpc-&gt;display_error();\n}\n</pre>  <h4 id=\"explanation\">Explanation</h4> <p>The above code initializes the XML-RPC class, sets the server URL and method to be called (weblogUpdates.ping). The request (in this case, the title and URL of your site) is placed into an array for transportation, and compiled using the request() function. Lastly, the full request is sent. If the send_request() method returns false we will display the error message sent back from the XML-RPC Server.</p>    <h3 id=\"anatomy-of-a-request\">Anatomy of a Request</h3> <p>An XML-RPC request is simply the data you are sending to the XML-RPC server. Each piece of data in a request is referred to as a request parameter. The above example has two parameters: The URL and title of your site. When the XML-RPC server receives your request, it will look for parameters it requires.</p> <p>Request parameters must be placed into an array for transportation, and each parameter can be one of seven data types (strings, numbers, dates, etc.). If your parameters are something other than strings you will have to include the data type in the request array.</p> <p>Here is an example of a simple array with three parameters:</p> <pre data-language=\"php\">$request = array('John', 'Doe', 'www.some-site.com');\n$this-&gt;xmlrpc-&gt;request($request);\n</pre> <p>If you use data types other than strings, or if you have several different data types, you will place each parameter into its own array, with the data type in the second position:</p> <pre data-language=\"php\">$request = array(\n        array('John', 'string'),\n        array('Doe', 'string'),\n        array(FALSE, 'boolean'),\n        array(12345, 'int')\n);\n$this-&gt;xmlrpc-&gt;request($request);\n</pre> <p>The <a class=\"reference external\" href=\"#datatypes\">Data Types</a> section below has a full list of data types.</p>   <h3 id=\"creating-an-xml-rpc-server\">Creating an XML-RPC Server</h3> <p>An XML-RPC Server acts as a traffic cop of sorts, waiting for incoming requests and redirecting them to the appropriate functions for processing.</p> <p>To create your own XML-RPC server involves initializing the XML-RPC Server class in your controller where you expect the incoming request to appear, then setting up an array with mapping instructions so that incoming requests can be sent to the appropriate class and method for processing.</p> <p>Here is an example to illustrate:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('xmlrpc');\n$this-&gt;load-&gt;library('xmlrpcs');\n\n$config['functions']['new_post'] = array('function' =&gt; 'My_blog.new_entry');\n$config['functions']['update_post'] = array('function' =&gt; 'My_blog.update_entry');\n$config['object'] = $this;\n\n$this-&gt;xmlrpcs-&gt;initialize($config);\n$this-&gt;xmlrpcs-&gt;serve();\n</pre> <p>The above example contains an array specifying two method requests that the Server allows. The allowed methods are on the left side of the array. When either of those are received, they will be mapped to the class and method on the right.</p> <p>The ‘object’ key is a special key that you pass an instantiated class object with, which is necessary when the method you are mapping to is not part of the CodeIgniter super object.</p> <p>In other words, if an XML-RPC Client sends a request for the new_post method, your server will load the My_blog class and call the new_entry function. If the request is for the update_post method, your server will load the My_blog class and call the <code>update_entry()</code> method.</p> <p>The function names in the above example are arbitrary. You’ll decide what they should be called on your server, or if you are using standardized APIs, like the Blogger or MetaWeblog API, you’ll use their function names.</p> <p>There are two additional configuration keys you may make use of when initializing the server class: debug can be set to TRUE in order to enable debugging, and xss_clean may be set to FALSE to prevent sending data through the Security library’s <code>xss_clean()</code> method.</p>   <h3 id=\"processing-server-requests\">Processing Server Requests</h3> <p>When the XML-RPC Server receives a request and loads the class/method for processing, it will pass an object to that method containing the data sent by the client.</p> <p>Using the above example, if the new_post method is requested, the server will expect a class to exist with this prototype:</p> <pre data-language=\"php\">class My_blog extends CI_Controller {\n\n        public function new_post($request)\n        {\n\n        }\n}\n</pre> <p>The $request variable is an object compiled by the Server, which contains the data sent by the XML-RPC Client. Using this object you will have access to the <em>request parameters</em> enabling you to process the request. When you are done you will send a Response back to the Client.</p> <p>Below is a real-world example, using the Blogger API. One of the methods in the Blogger API is <code>getUserInfo()</code>. Using this method, an XML-RPC Client can send the Server a username and password, in return the Server sends back information about that particular user (nickname, user ID, email address, etc.). Here is how the processing function might look:</p> <pre data-language=\"php\">class My_blog extends CI_Controller {\n\n        public function getUserInfo($request)\n        {\n                $username = 'smitty';\n                $password = 'secretsmittypass';\n\n                $this-&gt;load-&gt;library('xmlrpc');\n\n                $parameters = $request-&gt;output_parameters();\n\n                if ($parameters[1] != $username &amp;&amp; $parameters[2] != $password)\n                {\n                        return $this-&gt;xmlrpc-&gt;send_error_message('100', 'Invalid Access');\n                }\n\n                $response = array(\n                        array(\n                                'nickname'  =&gt; array('Smitty', 'string'),\n                                'userid'    =&gt; array('99', 'string'),\n                                'url'       =&gt; array('http://yoursite.com', 'string'),\n                                'email'     =&gt; array('[email protected]', 'string'),\n                                'lastname'  =&gt; array('Smith', 'string'),\n                                'firstname' =&gt; array('John', 'string')\n                        ),\n                         'struct'\n                );\n\n                return $this-&gt;xmlrpc-&gt;send_response($response);\n        }\n}\n</pre>  <h4 id=\"notes\">Notes:</h4> <p>The <code>output_parameters()</code> method retrieves an indexed array corresponding to the request parameters sent by the client. In the above example, the output parameters will be the username and password.</p> <p>If the username and password sent by the client were not valid, and error message is returned using <code>send_error_message()</code>.</p> <p>If the operation was successful, the client will be sent back a response array containing the user’s info.</p>    <h3 id=\"formatting-a-response\">Formatting a Response</h3> <p>Similar to <em>Requests</em>, <em>Responses</em> must be formatted as an array. However, unlike requests, a response is an array <strong>that contains a single item</strong>. This item can be an array with several additional arrays, but there can be only one primary array index. In other words, the basic prototype is this:</p> <pre data-language=\"php\">$response = array('Response data', 'array');\n</pre> <p>Responses, however, usually contain multiple pieces of information. In order to accomplish this we must put the response into its own array so that the primary array continues to contain a single piece of data. Here’s an example showing how this might be accomplished:</p> <pre data-language=\"php\">$response = array(\n        array(\n                'first_name' =&gt; array('John', 'string'),\n                'last_name' =&gt; array('Doe', 'string'),\n                'member_id' =&gt; array(123435, 'int'),\n                'todo_list' =&gt; array(array('clean house', 'call mom', 'water plants'), 'array'),\n        ),\n        'struct'\n);\n</pre> <p>Notice that the above array is formatted as a struct. This is the most common data type for responses.</p> <p>As with Requests, a response can be one of the seven data types listed in the <a class=\"reference external\" href=\"#datatypes\">Data Types</a> section.</p>   <h3 id=\"sending-an-error-response\">Sending an Error Response</h3> <p>If you need to send the client an error response you will use the following:</p> <pre data-language=\"php\">return $this-&gt;xmlrpc-&gt;send_error_message('123', 'Requested data not available');\n</pre> <p>The first parameter is the error number while the second parameter is the error message.</p>   <h3 id=\"creating-your-own-client-and-server\">Creating Your Own Client and Server</h3> <p>To help you understand everything we’ve covered thus far, let’s create a couple controllers that act as XML-RPC Client and Server. You’ll use the Client to send a request to the Server and receive a response.</p>  <h4 id=\"the-client\">The Client</h4> <p>Using a text editor, create a controller called Xmlrpc_client.php. In it, place this code and save it to your application/controllers/ folder:</p> <pre data-language=\"php\">&lt;?php\n\nclass Xmlrpc_client extends CI_Controller {\n\n        public function index()\n        {\n                $this-&gt;load-&gt;helper('url');\n                $server_url = site_url('xmlrpc_server');\n\n                $this-&gt;load-&gt;library('xmlrpc');\n\n                $this-&gt;xmlrpc-&gt;server($server_url, 80);\n                $this-&gt;xmlrpc-&gt;method('Greetings');\n\n                $request = array('How is it going?');\n                $this-&gt;xmlrpc-&gt;request($request);\n\n                if ( ! $this-&gt;xmlrpc-&gt;send_request())\n                {\n                        echo $this-&gt;xmlrpc-&gt;display_error();\n                }\n                else\n                {\n                        echo '&lt;pre&gt;';\n                        print_r($this-&gt;xmlrpc-&gt;display_response());\n                        echo '&lt;/pre&gt;';\n                }\n        }\n}\n?&gt;\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In the above code we are using a “url helper”. You can find more information in the <a class=\"reference internal\" href=\"../general/helpers\">Helpers Functions</a> page.</p> </div>   <h4 id=\"the-server\">The Server</h4> <p>Using a text editor, create a controller called Xmlrpc_server.php. In it, place this code and save it to your application/controllers/ folder:</p> <pre data-language=\"php\">&lt;?php\n\nclass Xmlrpc_server extends CI_Controller {\n\n        public function index()\n        {\n                $this-&gt;load-&gt;library('xmlrpc');\n                $this-&gt;load-&gt;library('xmlrpcs');\n\n                $config['functions']['Greetings'] = array('function' =&gt; 'Xmlrpc_server.process');\n\n                $this-&gt;xmlrpcs-&gt;initialize($config);\n                $this-&gt;xmlrpcs-&gt;serve();\n        }\n\n\n        public function process($request)\n        {\n                $parameters = $request-&gt;output_parameters();\n\n                $response = array(\n                        array(\n                                'you_said'  =&gt; $parameters[0],\n                                'i_respond' =&gt; 'Not bad at all.'\n                        ),\n                        'struct'\n                );\n\n                return $this-&gt;xmlrpc-&gt;send_response($response);\n        }\n}\n</pre>   <h4 id=\"try-it\">Try it!</h4> <p>Now visit the your site using a URL similar to this:</p> <pre data-language=\"php\">example.com/index.php/xmlrpc_client/\n</pre> <p>You should now see the message you sent to the server, and its response back to you.</p> <p>The client you created sends a message (“How’s is going?”) to the server, along with a request for the “Greetings” method. The Server receives the request and maps it to the <code>process()</code> method, where a response is sent back.</p>    <h3 id=\"using-associative-arrays-in-a-request-parameter\">Using Associative Arrays In a Request Parameter</h3> <p>If you wish to use an associative array in your method parameters you will need to use a struct datatype:</p> <pre data-language=\"php\">$request = array(\n        array(\n                // Param 0\n                array('name' =&gt; 'John'),\n                'struct'\n        ),\n        array(\n                // Param 1\n                array(\n                        'size' =&gt; 'large',\n                        'shape'=&gt;'round'\n                ),\n                'struct'\n        )\n);\n\n$this-&gt;xmlrpc-&gt;request($request);\n</pre> <p>You can retrieve the associative array when processing the request in the Server.</p> <pre data-language=\"php\">$parameters = $request-&gt;output_parameters();\n$name = $parameters[0]['name'];\n$size = $parameters[1]['size'];\n$shape = $parameters[1]['shape'];\n</pre>   <h3 id=\"id2\">Data Types</h3> <p>According to the <a class=\"reference external\" href=\"http://www.xmlrpc.com/spec\">XML-RPC spec</a> there are seven types of values that you can send via XML-RPC:</p> <ul class=\"simple\"> <li>\n<em>int</em> or <em>i4</em>\n</li> <li><em>boolean</em></li> <li><em>string</em></li> <li><em>double</em></li> <li><em>dateTime.iso8601</em></li> <li><em>base64</em></li> <li>\n<em>struct</em> (contains array of values)</li> <li>\n<em>array</em> (contains array of values)</li> </ul>    <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_Xmlrpc\">\n<code>class CI_Xmlrpc</code> </dt> <dd>\n<dl class=\"method\"> <dt id=\"CI_Xmlrpc::initialize\">\n<code>initialize([$config = array()])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$config</strong> (<em>array</em>) – Configuration data</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Initializes the XML-RPC library. Accepts an associative array containing your settings.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Xmlrpc::server\">\n<code>server($url[, $port = 80[, $proxy = FALSE[, $proxy_port = 8080]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$url</strong> (<em>string</em>) – XML-RPC server URL</li> <li>\n<strong>$port</strong> (<em>int</em>) – Server port</li> <li>\n<strong>$proxy</strong> (<em>string</em>) – Optional proxy</li> <li>\n<strong>$proxy_port</strong> (<em>int</em>) – Proxy listening port</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Sets the URL and port number of the server to which a request is to be sent:</p> <pre data-language=\"php\">$this-&gt;xmlrpc-&gt;server('http://www.sometimes.com/pings.php', 80);\n</pre> <p>Basic HTTP authentication is also supported, simply add it to the server URL:</p> <pre data-language=\"php\">$this-&gt;xmlrpc-&gt;server('http://user:[email protected]/', 80);\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Xmlrpc::timeout\">\n<code>timeout($seconds = 5)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$seconds</strong> (<em>int</em>) – Timeout in seconds</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Set a time out period (in seconds) after which the request will be canceled:</p> <pre data-language=\"php\">$this-&gt;xmlrpc-&gt;timeout(6);\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Xmlrpc::method\">\n<code>method($function)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$function</strong> (<em>string</em>) – Method name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Sets the method that will be requested from the XML-RPC server:</p> <pre data-language=\"php\">$this-&gt;xmlrpc-&gt;method('method');\n</pre> <p>Where method is the name of the method.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Xmlrpc::request\">\n<code>request($incoming)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$incoming</strong> (<em>array</em>) – Request data</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Takes an array of data and builds request to be sent to XML-RPC server:</p> <pre data-language=\"php\">$request = array(array('My Photoblog', 'string'), 'http://www.yoursite.com/photoblog/');\n$this-&gt;xmlrpc-&gt;request($request);\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Xmlrpc::send_request\">\n<code>send_request()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">TRUE on success, FALSE on failure</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">bool</td> </tr>  </table> <p>The request sending method. Returns boolean TRUE or FALSE based on success for failure, enabling it to be used conditionally.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Xmlrpc::display_error\">\n<code>display_error()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Error message string</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">string</td> </tr>  </table> <p>Returns an error message as a string if your request failed for some reason.</p> <pre data-language=\"php\">echo $this-&gt;xmlrpc-&gt;display_error();\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Xmlrpc::display_response\">\n<code>display_response()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Response</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">mixed</td> </tr>  </table> <p>Returns the response from the remote server once request is received. The response will typically be an associative array.</p> <pre data-language=\"php\">$this-&gt;xmlrpc-&gt;display_response();\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Xmlrpc::send_error_message\">\n<code>send_error_message($number, $message)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$number</strong> (<em>int</em>) – Error number</li> <li>\n<strong>$message</strong> (<em>string</em>) – Error message</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">XML_RPC_Response instance</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">XML_RPC_Response</p> </td> </tr>  </table> <p>This method lets you send an error message from your server to the client. First parameter is the error number while the second parameter is the error message.</p> <pre data-language=\"php\">return $this-&gt;xmlrpc-&gt;send_error_message(123, 'Requested data not available');\n</pre> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/libraries/xmlrpc.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/libraries/xmlrpc.html</a>\n  </p>\n</div>\n","libraries/migration":"<h1 id=\"migrations-class\">Migrations Class</h1> <p>Migrations are a convenient way for you to alter your database in a structured and organized manner. You could edit fragments of SQL by hand but you would then be responsible for telling other developers that they need to go and run them. You would also have to keep track of which changes need to be run against the production machines next time you deploy.</p> <p>The database table <strong>migration</strong> tracks which migrations have already been run so all you have to do is update your application files and call <code>$this-&gt;migration-&gt;current()</code> to work out which migrations should be run. The current version is found in <strong>application/config/migration.php</strong>.</p>  <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#migration-file-names\" id=\"id1\">Migration file names</a></li> <li><a class=\"reference internal\" href=\"#create-a-migration\" id=\"id2\">Create a Migration</a></li> <li><a class=\"reference internal\" href=\"#usage-example\" id=\"id3\">Usage Example</a></li> <li><a class=\"reference internal\" href=\"#migration-preferences\" id=\"id4\">Migration Preferences</a></li> <li><a class=\"reference internal\" href=\"#class-reference\" id=\"id5\">Class Reference</a></li> </ul>   <h2 id=\"migration-file-names\">Migration file names</h2> <p>Each Migration is run in numeric order forward or backwards depending on the method taken. Two numbering styles are available:</p> <ul class=\"simple\"> <li>\n<strong>Sequential:</strong> each migration is numbered in sequence, starting with <strong>001</strong>. Each number must be three digits, and there must not be any gaps in the sequence. (This was the numbering scheme prior to CodeIgniter 3.0.)</li> <li>\n<strong>Timestamp:</strong> each migration is numbered using the timestamp when the migration was created, in <strong>YYYYMMDDHHIISS</strong> format (e.g. <strong>20121031100537</strong>). This helps prevent numbering conflicts when working in a team environment, and is the preferred scheme in CodeIgniter 3.0 and later.</li> </ul> <p>The desired style may be selected using the <code>$config['migration_type']</code> setting in your <em>application/config/migration.php</em> file.</p> <p>Regardless of which numbering style you choose to use, prefix your migration files with the migration number followed by an underscore and a descriptive name for the migration. For example:</p> <ul class=\"simple\"> <li>001_add_blog.php (sequential numbering)</li> <li>20121031100537_add_blog.php (timestamp numbering)</li> </ul>   <h2 id=\"create-a-migration\">Create a Migration</h2> <p>This will be the first migration for a new site which has a blog. All migrations go in the <strong>application/migrations/</strong> directory and have names such as <em>20121031100537_add_blog.php</em>.</p> <pre data-language=\"php\">&lt;?php\n\ndefined('BASEPATH') OR exit('No direct script access allowed');\n\nclass Migration_Add_blog extends CI_Migration {\n\n        public function up()\n        {\n                $this-&gt;dbforge-&gt;add_field(array(\n                        'blog_id' =&gt; array(\n                                'type' =&gt; 'INT',\n                                'constraint' =&gt; 5,\n                                'unsigned' =&gt; TRUE,\n                                'auto_increment' =&gt; TRUE\n                        ),\n                        'blog_title' =&gt; array(\n                                'type' =&gt; 'VARCHAR',\n                                'constraint' =&gt; '100',\n                        ),\n                        'blog_description' =&gt; array(\n                                'type' =&gt; 'TEXT',\n                                'null' =&gt; TRUE,\n                        ),\n                ));\n                $this-&gt;dbforge-&gt;add_key('blog_id', TRUE);\n                $this-&gt;dbforge-&gt;create_table('blog');\n        }\n\n        public function down()\n        {\n                $this-&gt;dbforge-&gt;drop_table('blog');\n        }\n}\n</pre> <p>Then in <strong>application/config/migration.php</strong> set <code>$config['migration_version'] = 20121031100537;</code>.</p>   <h2 id=\"usage-example\">Usage Example</h2> <p>In this example some simple code is placed in <strong>application/controllers/Migrate.php</strong> to update the schema.:</p> <pre data-language=\"php\">&lt;?php\n\nclass Migrate extends CI_Controller\n{\n\n        public function index()\n        {\n                $this-&gt;load-&gt;library('migration');\n\n                if ($this-&gt;migration-&gt;current() === FALSE)\n                {\n                        show_error($this-&gt;migration-&gt;error_string());\n                }\n        }\n\n}\n</pre>   <h2 id=\"migration-preferences\">Migration Preferences</h2> <p>The following is a table of all the config options for migrations.</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Preference</th> <th class=\"head\">Default</th> <th class=\"head\">Options</th> <th class=\"head\">Description</th> </tr> </thead>  <tr class=\"row-even\">\n<td><strong>migration_enabled</strong></td> <td>FALSE</td> <td>TRUE / FALSE</td> <td>Enable or disable migrations.</td> </tr> <tr class=\"row-odd\">\n<td><strong>migration_path</strong></td> <td>APPPATH.’migrations/’</td> <td>None</td> <td>The path to your migrations folder.</td> </tr> <tr class=\"row-even\">\n<td><strong>migration_version</strong></td> <td>0</td> <td>None</td> <td>The current version your database should use.</td> </tr> <tr class=\"row-odd\">\n<td><strong>migration_table</strong></td> <td>migrations</td> <td>None</td> <td>The table name for storing the schema version number.</td> </tr> <tr class=\"row-even\">\n<td><strong>migration_auto_latest</strong></td> <td>FALSE</td> <td>TRUE / FALSE</td> <td>Enable or disable automatically running migrations.</td> </tr> <tr class=\"row-odd\">\n<td><strong>migration_type</strong></td> <td>‘timestamp’</td> <td>‘timestamp’ / ‘sequential’</td> <td>The type of numeric identifier used to name migration files.</td> </tr>  </table>   <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_Migration\">\n<code>class CI_Migration</code> </dt> <dd>\n<dl class=\"method\"> <dt id=\"CI_Migration::current\">\n<code>current()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">TRUE if no migrations are found, current version string on success, FALSE on failure</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">mixed</td> </tr>  </table> <p>Migrates up to the current version (whatever is set for <code>$config['migration_version']</code> in <em>application/config/migration.php</em>).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Migration::error_string\">\n<code>error_string()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Error messages</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">string</td> </tr>  </table> <p>This returns a string of errors that were detected while performing a migration.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Migration::find_migrations\">\n<code>find_migrations()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">An array of migration files</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">array</td> </tr>  </table> <p>An array of migration filenames are returned that are found in the <strong>migration_path</strong> property.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Migration::latest\">\n<code>latest()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Current version string on success, FALSE on failure</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">mixed</td> </tr>  </table> <p>This works much the same way as <code>current()</code> but instead of looking for the <code>$config['migration_version']</code> the Migration class will use the very newest migration found in the filesystem.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Migration::version\">\n<code>version($target_version)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$target_version</strong> (<em>mixed</em>) – Migration version to process</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE if no migrations are found, current version string on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Version can be used to roll back changes or step forwards programmatically to specific versions. It works just like <code>current()</code> but ignores <code>$config['migration_version']</code>.</p> <pre data-language=\"php\">$this-&gt;migration-&gt;version(5);\n</pre> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/libraries/migration.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/libraries/migration.html</a>\n  </p>\n</div>\n","libraries/config":"<h1 id=\"config-class\">Config Class</h1> <p>The Config class provides a means to retrieve configuration preferences. These preferences can come from the default config file (application/config/config.php) or from your own custom config files.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This class is initialized automatically by the system so there is no need to do it manually.</p> </div>  <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#working-with-the-config-class\" id=\"id1\">Working with the Config Class</a><ul> <li><a class=\"reference internal\" href=\"#anatomy-of-a-config-file\" id=\"id2\">Anatomy of a Config File</a></li> <li>\n<a class=\"reference internal\" href=\"#loading-a-config-file\" id=\"id3\">Loading a Config File</a><ul> <li><a class=\"reference internal\" href=\"#manual-loading\" id=\"id4\">Manual Loading</a></li> <li><a class=\"reference internal\" href=\"#auto-loading\" id=\"id5\">Auto-loading</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#fetching-config-items\" id=\"id6\">Fetching Config Items</a></li> <li><a class=\"reference internal\" href=\"#setting-a-config-item\" id=\"id7\">Setting a Config Item</a></li> <li><a class=\"reference internal\" href=\"#environments\" id=\"id8\">Environments</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#class-reference\" id=\"id9\">Class Reference</a></li> </ul>   <h2 id=\"working-with-the-config-class\">Working with the Config Class</h2>  <h3 id=\"anatomy-of-a-config-file\">Anatomy of a Config File</h3> <p>By default, CodeIgniter has one primary config file, located at application/config/config.php. If you open the file using your text editor you’ll see that config items are stored in an array called $config.</p> <p>You can add your own config items to this file, or if you prefer to keep your configuration items separate (assuming you even need config items), simply create your own file and save it in config folder.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If you do create your own config files use the same format as the primary one, storing your items in an array called $config. CodeIgniter will intelligently manage these files so there will be no conflict even though the array has the same name (assuming an array index is not named the same as another).</p> </div>   <h3 id=\"loading-a-config-file\">Loading a Config File</h3> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">CodeIgniter automatically loads the primary config file (application/config/config.php), so you will only need to load a config file if you have created your own.</p> </div> <p>There are two ways to load a config file:</p>  <h4 id=\"manual-loading\">Manual Loading</h4> <p>To load one of your custom config files you will use the following function within the <a class=\"reference internal\" href=\"../general/controllers\">controller</a> that needs it:</p> <pre data-language=\"php\">$this-&gt;config-&gt;load('filename');\n</pre> <p>Where filename is the name of your config file, without the .php file extension.</p> <p>If you need to load multiple config files normally they will be merged into one master config array. Name collisions can occur, however, if you have identically named array indexes in different config files. To avoid collisions you can set the second parameter to TRUE and each config file will be stored in an array index corresponding to the name of the config file. Example:</p> <pre data-language=\"php\">// Stored in an array with this prototype: $this-&gt;config['blog_settings'] = $config\n$this-&gt;config-&gt;load('blog_settings', TRUE);\n</pre> <p>Please see the section entitled Fetching Config Items below to learn how to retrieve config items set this way.</p> <p>The third parameter allows you to suppress errors in the event that a config file does not exist:</p> <pre data-language=\"php\">$this-&gt;config-&gt;load('blog_settings', FALSE, TRUE);\n</pre>   <h4 id=\"auto-loading\">Auto-loading</h4> <p>If you find that you need a particular config file globally, you can have it loaded automatically by the system. To do this, open the <strong>autoload.php</strong> file, located at application/config/autoload.php, and add your config file as indicated in the file.</p>    <h3 id=\"fetching-config-items\">Fetching Config Items</h3> <p>To retrieve an item from your config file, use the following function:</p> <pre data-language=\"php\">$this-&gt;config-&gt;item('item_name');\n</pre> <p>Where item_name is the $config array index you want to retrieve. For example, to fetch your language choice you’ll do this:</p> <pre data-language=\"php\">$lang = $this-&gt;config-&gt;item('language');\n</pre> <p>The function returns NULL if the item you are trying to fetch does not exist.</p> <p>If you are using the second parameter of the $this-&gt;config-&gt;load function in order to assign your config items to a specific index you can retrieve it by specifying the index name in the second parameter of the $this-&gt;config-&gt;item() function. Example:</p> <pre data-language=\"php\">// Loads a config file named blog_settings.php and assigns it to an index named \"blog_settings\"\n$this-&gt;config-&gt;load('blog_settings', TRUE);\n\n// Retrieve a config item named site_name contained within the blog_settings array\n$site_name = $this-&gt;config-&gt;item('site_name', 'blog_settings');\n\n// An alternate way to specify the same item:\n$blog_config = $this-&gt;config-&gt;item('blog_settings');\n$site_name = $blog_config['site_name'];\n</pre>   <h3 id=\"setting-a-config-item\">Setting a Config Item</h3> <p>If you would like to dynamically set a config item or change an existing one, you can do so using:</p> <pre data-language=\"php\">$this-&gt;config-&gt;set_item('item_name', 'item_value');\n</pre> <p>Where item_name is the $config array index you want to change, and item_value is its value.</p>   <h3 id=\"config-environments\">Environments</h3> <p id=\"environments\">You may load different configuration files depending on the current environment. The ENVIRONMENT constant is defined in index.php, and is described in detail in the <a class=\"reference internal\" href=\"../general/environments\">Handling Environments</a> section.</p> <p>To create an environment-specific configuration file, create or copy a configuration file in application/config/{ENVIRONMENT}/{FILENAME}.php</p> <p>For example, to create a production-only config.php, you would:</p> <ol class=\"arabic simple\"> <li>Create the directory application/config/production/</li> <li>Copy your existing config.php into the above directory</li> <li>Edit application/config/production/config.php so it contains your production settings</li> </ol> <p>When you set the ENVIRONMENT constant to ‘production’, the settings for your new production-only config.php will be loaded.</p> <p>You can place the following configuration files in environment-specific folders:</p> <ul class=\"simple\"> <li>Default CodeIgniter configuration files</li> <li>Your own custom configuration files</li> </ul> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">CodeIgniter always loads the global config file first (i.e., the one in application/config/), then tries to load the configuration files for the current environment. This means you are not obligated to place <strong>all</strong> of your configuration files in an environment folder. Only the files that change per environment. Additionally you don’t have to copy <strong>all</strong> the config items in the environment config file. Only the config items that you wish to change for your environment. The config items declared in your environment folders always overwrite those in your global config files.</p> </div>    <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_Config\">\n<code>class CI_Config</code> </dt> <dd>\n<dl class=\"attribute\"> <dt>\n<code>$config</code> </dt> <dd>\n<p>Array of all loaded config values</p> </dd>\n</dl> <dl class=\"attribute\"> <dt>\n<code>$is_loaded</code> </dt> <dd>\n<p>Array of all loaded config files</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Config::item\">\n<code>item($item[, $index=''])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$item</strong> (<em>string</em>) – Config item name</li> <li>\n<strong>$index</strong> (<em>string</em>) – Index name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Config item value or NULL if not found</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Fetch a config file item.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Config::set_item\">\n<code>set_item($item, $value)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$item</strong> (<em>string</em>) – Config item name</li> <li>\n<strong>$value</strong> (<em>string</em>) – Config item value</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Sets a config file item to the specified value.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Config::slash_item\">\n<code>slash_item($item)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$item</strong> (<em>string</em>) – config item name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Config item value with a trailing forward slash or NULL if not found</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>This method is identical to <code>item()</code>, except it appends a forward slash to the end of the item, if it exists.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Config::load\">\n<code>load([$file = ''[, $use_sections = FALSE[, $fail_gracefully = FALSE]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$file</strong> (<em>string</em>) – Configuration file name</li> <li>\n<strong>$use_sections</strong> (<em>bool</em>) – Whether config values shoud be loaded into their own section (index of the main config array)</li> <li>\n<strong>$fail_gracefully</strong> (<em>bool</em>) – Whether to return FALSE or to display an error message</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Loads a configuration file.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Config::site_url\">\n<code>site_url()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Site URL</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">string</td> </tr>  </table> <p>This method retrieves the URL to your site, along with the “index” value you’ve specified in the config file.</p> <p>This method is normally accessed via the corresponding functions in the <a class=\"reference internal\" href=\"../helpers/url_helper\">URL Helper</a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Config::base_url\">\n<code>base_url()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Base URL</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">string</td> </tr>  </table> <p>This method retrieves the URL to your site, plus an optional path such as to a stylesheet or image.</p> <p>This method is normally accessed via the corresponding functions in the <a class=\"reference internal\" href=\"../helpers/url_helper\">URL Helper</a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Config::system_url\">\n<code>system_url()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">URL pointing at your CI system/ directory</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">string</td> </tr>  </table> <p>This method retrieves the URL to your CodeIgniter system/ directory.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This method is DEPRECATED because it encourages usage of insecure coding practices. Your <em>system/</em> directory shouldn’t be publicly accessible.</p> </div> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/libraries/config.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/libraries/config.html</a>\n  </p>\n</div>\n","libraries/output":"<h1 id=\"output-class\">Output Class</h1> <p>The Output class is a core class with one main function: To send the finalized web page to the requesting browser. It is also responsible for <a class=\"reference internal\" href=\"../general/caching\">caching</a> your web pages, if you use that feature.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This class is initialized automatically by the system so there is no need to do it manually.</p> </div> <p>Under normal circumstances you won’t even notice the Output class since it works transparently without your intervention. For example, when you use the <a class=\"reference internal\" href=\"loader\">Loader</a> class to load a view file, it’s automatically passed to the Output class, which will be called automatically by CodeIgniter at the end of system execution. It is possible, however, for you to manually intervene with the output if you need to.</p>     <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_Output\">\n<code>class CI_Output</code> </dt> <dd>\n<dl class=\"attribute\"> <dt>\n<code>$parse_exec_vars = TRUE;</code> </dt> <dd>\n<p>Enables/disables parsing of the {elapsed_time} and {memory_usage} pseudo-variables.</p> <p>CodeIgniter will parse those tokens in your output by default. To disable this, set this property to FALSE in your controller.</p> <pre data-language=\"php\">$this-&gt;output-&gt;parse_exec_vars = FALSE;\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Output::set_output\">\n<code>set_output($output)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$output</strong> (<em>string</em>) – String to set the output to</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Output instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Output</p> </td> </tr>  </table> <p>Permits you to manually set the final output string. Usage example:</p> <pre data-language=\"php\">$this-&gt;output-&gt;set_output($data);\n</pre> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">If you do set your output manually, it must be the last thing done in the function you call it from. For example, if you build a page in one of your controller methods, don’t set the output until the end.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Output::set_content_type\">\n<code>set_content_type($mime_type[, $charset = NULL])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$mime_type</strong> (<em>string</em>) – MIME Type idenitifer string</li> <li>\n<strong>$charset</strong> (<em>string</em>) – Character set</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Output instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Output</p> </td> </tr>  </table> <p>Permits you to set the mime-type of your page so you can serve JSON data, JPEG’s, XML, etc easily.</p> <pre data-language=\"php\">$this-&gt;output\n        -&gt;set_content_type('application/json')\n        -&gt;set_output(json_encode(array('foo' =&gt; 'bar')));\n\n$this-&gt;output\n        -&gt;set_content_type('jpeg') // You could also use \".jpeg\" which will have the full stop removed before looking in config/mimes.php\n        -&gt;set_output(file_get_contents('files/something.jpg'));\n</pre> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">Make sure any non-mime string you pass to this method exists in <em>application/config/mimes.php</em> or it will have no effect.</p> </div> <p>You can also set the character set of the document, by passing a second argument:</p> <pre data-language=\"php\">$this-&gt;output-&gt;set_content_type('css', 'utf-8');\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Output::get_content_type\">\n<code>get_content_type()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Content-Type string</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">string</td> </tr>  </table> <p>Returns the Content-Type HTTP header that’s currently in use, excluding the character set value.</p> <pre data-language=\"php\">$mime = $this-&gt;output-&gt;get_content_type();\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If not set, the default return value is ‘text/html’.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Output::get_header\">\n<code>get_header($header)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$header</strong> (<em>string</em>) – HTTP header name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">HTTP response header or NULL if not found</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Returns the requested HTTP header value, or NULL if the requested header is not set. Example:</p> <pre data-language=\"php\">$this-&gt;output-&gt;set_content_type('text/plain', 'UTF-8');\necho $this-&gt;output-&gt;get_header('content-type');\n// Outputs: text/plain; charset=utf-8\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The header name is compared in a case-insensitive manner.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Raw headers sent via PHP’s native <code>header()</code> function are also detected.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Output::get_output\">\n<code>get_output()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Output string</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">string</td> </tr>  </table> <p>Permits you to manually retrieve any output that has been sent for storage in the output class. Usage example:</p> <pre data-language=\"php\">$string = $this-&gt;output-&gt;get_output();\n</pre> <p>Note that data will only be retrievable from this function if it has been previously sent to the output class by one of the CodeIgniter functions like <code>$this-&gt;load-&gt;view()</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Output::append_output\">\n<code>append_output($output)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$output</strong> (<em>string</em>) – Additional output data to append</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Output instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Output</p> </td> </tr>  </table> <p>Appends data onto the output string.</p> <pre data-language=\"php\">$this-&gt;output-&gt;append_output($data);\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Output::set_header\">\n<code>set_header($header[, $replace = TRUE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$header</strong> (<em>string</em>) – HTTP response header</li> <li>\n<strong>$replace</strong> (<em>bool</em>) – Whether to replace the old header value, if it is already set</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Output instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Output</p> </td> </tr>  </table> <p>Permits you to manually set server headers, which the output class will send for you when outputting the final rendered display. Example:</p> <pre data-language=\"php\">$this-&gt;output-&gt;set_header('HTTP/1.0 200 OK');\n$this-&gt;output-&gt;set_header('HTTP/1.1 200 OK');\n$this-&gt;output-&gt;set_header('Last-Modified: '.gmdate('D, d M Y H:i:s', $last_update).' GMT');\n$this-&gt;output-&gt;set_header('Cache-Control: no-store, no-cache, must-revalidate');\n$this-&gt;output-&gt;set_header('Cache-Control: post-check=0, pre-check=0');\n$this-&gt;output-&gt;set_header('Pragma: no-cache');\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Output::set_status_header\">\n<code>set_status_header([$code = 200[, $text = '']])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$code</strong> (<em>int</em>) – HTTP status code</li> <li>\n<strong>$text</strong> (<em>string</em>) – Optional message</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Output instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Output</p> </td> </tr>  </table> <p>Permits you to manually set a server status header. Example:</p> <pre data-language=\"php\">$this-&gt;output-&gt;set_status_header(401);\n// Sets the header as:  Unauthorized\n</pre> <p><a class=\"reference external\" href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\">See here</a> for a full list of headers.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This method is an alias for <a class=\"reference internal\" href=\"../general/common_functions\">Common function</a> <code>set_status_header()</code>.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Output::enable_profiler\">\n<code>enable_profiler([$val = TRUE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$val</strong> (<em>bool</em>) – Whether to enable or disable the Profiler</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Output instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Output</p> </td> </tr>  </table> <p>Permits you to enable/disable the <a class=\"reference internal\" href=\"../general/profiling\">Profiler</a>, which will display benchmark and other data at the bottom of your pages for debugging and optimization purposes.</p> <p>To enable the profiler place the following line anywhere within your <a class=\"reference internal\" href=\"../general/controllers\">Controller</a> methods:</p> <pre data-language=\"php\">$this-&gt;output-&gt;enable_profiler(TRUE);\n</pre> <p>When enabled a report will be generated and inserted at the bottom of your pages.</p> <p>To disable the profiler you would use:</p> <pre data-language=\"php\">$this-&gt;output-&gt;enable_profiler(FALSE);\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Output::set_profiler_sections\">\n<code>set_profiler_sections($sections)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$sections</strong> (<em>array</em>) – Profiler sections</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Output instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Output</p> </td> </tr>  </table> <p>Permits you to enable/disable specific sections of the Profiler when it is enabled. Please refer to the <a class=\"reference internal\" href=\"../general/profiling\">Profiler</a> documentation for further information.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Output::cache\">\n<code>cache($time)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$time</strong> (<em>int</em>) – Cache expiration time in minutes</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Output instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Output</p> </td> </tr>  </table> <p>Caches the current page for the specified amount of minutes.</p> <p>For more information, please see the <a class=\"reference internal\" href=\"../general/caching\">caching documentation</a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Output::_display\">\n<code>_display([$output = ''])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$output</strong> (<em>string</em>) – Output data override</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">void</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Sends finalized output data to the browser along with any server headers. It also stops benchmark timers.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This method is called automatically at the end of script execution, you won’t need to call it manually unless you are aborting script execution using <code>exit()</code> or <code>die()</code> in your code.</p> </div> <p>Example:</p> <pre data-language=\"php\">$response = array('status' =&gt; 'OK');\n\n$this-&gt;output\n        -&gt;set_status_header(200)\n        -&gt;set_content_type('application/json', 'utf-8')\n        -&gt;set_output(json_encode($response, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES))\n        -&gt;_display();\nexit;\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Calling this method manually without aborting script execution will result in duplicated output.</p> </div> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/libraries/output.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/libraries/output.html</a>\n  </p>\n</div>\n","libraries/encryption":"<h1 id=\"encryption-library\">Encryption Library</h1> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">DO NOT use this or any other <em>encryption</em> library for user password storage! Passwords must be <em>hashed</em> instead, and you should do that via PHP’s own <a class=\"reference external\" href=\"http://php.net/password\">Password Hashing extension</a>.</p> </div> <p>The Encryption Library provides two-way data encryption. To do so in a cryptographically secure way, it utilizes PHP extensions that are unfortunately not always available on all systems. You must meet one of the following dependencies in order to use this library:</p> <ul class=\"simple\"> <li>\n<a class=\"reference external\" href=\"http://php.net/openssl\">OpenSSL</a> (and PHP 5.3.3)</li> <li>\n<a class=\"reference external\" href=\"http://php.net/mcrypt\">MCrypt</a> (and <cite>MCRYPT_DEV_URANDOM</cite> availability)</li> </ul> <p>If neither of the above dependencies is met, we simply cannot offer you a good enough implementation to meet the high standards required for proper cryptography.</p>  <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#using-the-encryption-library\" id=\"id2\">Using the Encryption Library</a><ul> <li><a class=\"reference internal\" href=\"#initializing-the-class\" id=\"id3\">Initializing the Class</a></li> <li><a class=\"reference internal\" href=\"#default-behavior\" id=\"id4\">Default behavior</a></li> <li><a class=\"reference internal\" href=\"#setting-your-encryption-key\" id=\"id5\">Setting your encryption_key</a></li> <li>\n<a class=\"reference internal\" href=\"#supported-encryption-ciphers-and-modes\" id=\"id6\">Supported encryption ciphers and modes</a><ul> <li><a class=\"reference internal\" href=\"#portable-ciphers\" id=\"id7\">Portable ciphers</a></li> <li><a class=\"reference internal\" href=\"#driver-specific-ciphers\" id=\"id8\">Driver-specific ciphers</a></li> <li><a class=\"reference internal\" href=\"#encryption-modes\" id=\"id9\">Encryption modes</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#message-length\" id=\"id10\">Message Length</a></li> <li><a class=\"reference internal\" href=\"#configuring-the-library\" id=\"id11\">Configuring the library</a></li> <li>\n<a class=\"reference internal\" href=\"#encrypting-and-decrypting-data\" id=\"id12\">Encrypting and decrypting data</a><ul> <li><a class=\"reference internal\" href=\"#how-it-works\" id=\"id13\">How it works</a></li> <li><a class=\"reference internal\" href=\"#using-custom-parameters\" id=\"id14\">Using custom parameters</a></li> <li><a class=\"reference internal\" href=\"#supported-hmac-authentication-algorithms\" id=\"id15\">Supported HMAC authentication algorithms</a></li> </ul> </li> </ul> </li> <li><a class=\"reference internal\" href=\"#class-reference\" id=\"id16\">Class Reference</a></li> </ul>   <h2 id=\"using-the-encryption-library\">Using the Encryption Library</h2>  <h3 id=\"initializing-the-class\">Initializing the Class</h3> <p>Like most other classes in CodeIgniter, the Encryption library is initialized in your controller using the <code>$this-&gt;load-&gt;library()</code> method:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('encryption');\n</pre> <p>Once loaded, the Encryption library object will be available using:</p> <pre data-language=\"php\">$this-&gt;encryption\n</pre>   <h3 id=\"default-behavior\">Default behavior</h3> <p>By default, the Encryption Library will use the AES-128 cipher in CBC mode, using your configured <em>encryption_key</em> and SHA512 HMAC authentication.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">AES-128 is chosen both because it is proven to be strong and because of its wide availability across different cryptographic software and programming languages’ APIs.</p> </div> <p>However, the <em>encryption_key</em> is not used as is.</p> <p>If you are somewhat familiar with cryptography, you should already know that a HMAC also requires a secret key and using the same key for both encryption and authentication is a bad practice.</p> <p>Because of that, two separate keys are derived from your already configured <em>encryption_key</em>: one for encryption and one for authentication. This is done via a technique called <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/HKDF\">HMAC-based Key Derivation Function</a> (HKDF).</p>   <h3 id=\"setting-your-encryption-key\">Setting your encryption_key</h3> <p>An <em>encryption key</em> is a piece of information that controls the cryptographic process and permits a plain-text string to be encrypted, and afterwards - decrypted. It is the secret “ingredient” in the whole process that allows you to be the only one who is able to decrypt data that you’ve decided to hide from the eyes of the public. After one key is used to encrypt data, that same key provides the <strong>only</strong> means to decrypt it, so not only must you chose one carefully, but you must not lose it or you will also lose access to the data.</p> <p>It must be noted that to ensure maximum security, such key <em>should</em> not only be as strong as possible, but also often changed. Such behavior however is rarely practical or possible to implement, and that is why CodeIgniter gives you the ability to configure a single key that is to be used (almost) every time.</p> <p>It goes without saying that you should guard your key carefully. Should someone gain access to your key, the data will be easily decrypted. If your server is not totally under your control it’s impossible to ensure key security so you may want to think carefully before using it for anything that requires high security, like storing credit card numbers.</p> <p>Your encryption key <strong>must</strong> be as long as the encyption algorithm in use allows. For AES-128, that’s 128 bits or 16 bytes (charcters) long. You will find a table below that shows the supported key lengths of different ciphers.</p> <p>The key should be as random as possible and it <strong>must not</strong> be a regular text string, nor the output of a hashing function, etc. In order to create a proper key, you must use the Encryption library’s <code>create_key()</code> method</p> <pre data-language=\"php\">// $key will be assigned a 16-byte (128-bit) random key\n$key = $this-&gt;encryption-&gt;create_key(16);\n</pre> <p>The key can be either stored in your <em>application/config/config.php</em>, or you can design your own storage mechanism and pass the key dynamically when encrypting/decrypting.</p> <p>To save your key to your <em>application/config/config.php</em>, open the file and set:</p> <pre data-language=\"php\">$config['encryption_key'] = 'YOUR KEY';\n</pre> <p>You’ll notice that the <code>create_key()</code> method outputs binary data, which is hard to deal with (i.e. a copy-paste may damage it), so you may use <code>bin2hex()</code>, <code>hex2bin()</code> or Base64-encoding to work with the key in a more friendly manner. For example:</p> <pre data-language=\"php\">// Get a hex-encoded representation of the key:\n$key = bin2hex($this-&gt;encryption-&gt;create_key(16));\n\n// Put the same value in your config with hex2bin(),\n// so that it is still passed as binary to the library:\n$config['encryption_key'] = hex2bin(&lt;your hex-encoded key&gt;);\n</pre>   <h3 id=\"ciphers-and-modes\">Supported encryption ciphers and modes</h3> <div class=\"admonition note\" id=\"supported-encryption-ciphers-and-modes\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The terms ‘cipher’ and ‘encryption algorithm’ are interchangeable.</p> </div>  <h4 id=\"portable-ciphers\">Portable ciphers</h4> <p>Because MCrypt and OpenSSL (also called drivers throughout this document) each support different sets of encryption algorithms and often implement them in different ways, our Encryption library is designed to use them in a portable fashion, or in other words - it enables you to use them interchangeably, at least for the ciphers supported by both drivers.</p> <p>It is also implemented in a way that aims to match the standard implementations in other programming languages and libraries.</p> <p>Here’s a list of the so called “portable” ciphers, where “CodeIgniter name” is the string value that you’d have to pass to the Encryption library to use that cipher:</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Cipher name</th> <th class=\"head\">CodeIgniter name</th> <th class=\"head\">Key lengths (bits / bytes)</th> <th class=\"head\">Supported modes</th> </tr> </thead>  <tr class=\"row-even\">\n<td>AES-128 / Rijndael-128</td> <td>aes-128</td> <td>128 / 16</td> <td>CBC, CTR, CFB, CFB8, OFB, ECB</td> </tr> <tr class=\"row-odd\">\n<td>AES-192</td> <td>aes-192</td> <td>192 / 24</td> <td>CBC, CTR, CFB, CFB8, OFB, ECB</td> </tr> <tr class=\"row-even\">\n<td>AES-256</td> <td>aes-256</td> <td>256 / 32</td> <td>CBC, CTR, CFB, CFB8, OFB, ECB</td> </tr> <tr class=\"row-odd\">\n<td>DES</td> <td>des</td> <td>56 / 7</td> <td>CBC, CFB, CFB8, OFB, ECB</td> </tr> <tr class=\"row-even\">\n<td>TripleDES</td> <td>tripledes</td> <td>56 / 7, 112 / 14, 168 / 21</td> <td>CBC, CFB, CFB8, OFB</td> </tr> <tr class=\"row-odd\">\n<td>Blowfish</td> <td>blowfish</td> <td>128-448 / 16-56</td> <td>CBC, CFB, OFB, ECB</td> </tr> <tr class=\"row-even\">\n<td>CAST5 / CAST-128</td> <td>cast5</td> <td>88-128 / 11-16</td> <td>CBC, CFB, OFB, ECB</td> </tr> <tr class=\"row-odd\">\n<td>RC4 / ARCFour</td> <td>rc4</td> <td>40-2048 / 5-256</td> <td>Stream</td> </tr>  </table> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">Because of how MCrypt works, if you fail to provide a key with the appropriate length, you might end up using a different algorithm than the one configured, so be really careful with that!</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In case it isn’t clear from the above table, Blowfish, CAST5 and RC4 support variable length keys. That is, any number in the shown ranges is valid, although in bit terms that only happens in 8-bit increments.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Even though CAST5 supports key lengths lower than 128 bits (16 bytes), in fact they will just be zero-padded to the maximum length, as specified in <a class=\"reference external\" href=\"http://tools.ietf.org/rfc/rfc2144.txt\">RFC 2144</a>.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Blowfish supports key lengths as small as 32 bits (4 bytes), but our tests have shown that only lengths of 128 bits (16 bytes) or higher are properly supported by both MCrypt and OpenSSL. It is also a bad practice to use such low-length keys anyway.</p> </div>   <h4 id=\"driver-specific-ciphers\">Driver-specific ciphers</h4> <p>As noted above, MCrypt and OpenSSL support different sets of encryption ciphers. For portability reasons and because we haven’t tested them properly, we do not advise you to use the ones that are driver-specific, but regardless, here’s a list of most of them:</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Cipher name</th> <th class=\"head\">Driver</th> <th class=\"head\">Key lengths (bits / bytes)</th> <th class=\"head\">Supported modes</th> </tr> </thead>  <tr class=\"row-even\">\n<td>AES-128</td> <td>OpenSSL</td> <td>128 / 16</td> <td>CBC, CTR, CFB, CFB8, OFB, ECB, XTS</td> </tr> <tr class=\"row-odd\">\n<td>AES-192</td> <td>OpenSSL</td> <td>192 / 24</td> <td>CBC, CTR, CFB, CFB8, OFB, ECB, XTS</td> </tr> <tr class=\"row-even\">\n<td>AES-256</td> <td>OpenSSL</td> <td>256 / 32</td> <td>CBC, CTR, CFB, CFB8, OFB, ECB, XTS</td> </tr> <tr class=\"row-odd\">\n<td>Rijndael-128</td> <td>MCrypt</td> <td>128 / 16, 192 / 24, 256 / 32</td> <td>CBC, CTR, CFB, CFB8, OFB, OFB8, ECB</td> </tr> <tr class=\"row-even\">\n<td>Rijndael-192</td> <td>MCrypt</td> <td>128 / 16, 192 / 24, 256 / 32</td> <td>CBC, CTR, CFB, CFB8, OFB, OFB8, ECB</td> </tr> <tr class=\"row-odd\">\n<td>Rijndael-256</td> <td>MCrypt</td> <td>128 / 16, 192 / 24, 256 / 32</td> <td>CBC, CTR, CFB, CFB8, OFB, OFB8, ECB</td> </tr> <tr class=\"row-even\">\n<td>GOST</td> <td>MCrypt</td> <td>256 / 32</td> <td>CBC, CTR, CFB, CFB8, OFB, OFB8, ECB</td> </tr> <tr class=\"row-odd\">\n<td>Twofish</td> <td>MCrypt</td> <td>128 / 16, 192 / 24, 256 / 32</td> <td>CBC, CTR, CFB, CFB8, OFB, OFB8, ECB</td> </tr> <tr class=\"row-even\">\n<td>CAST-128</td> <td>MCrypt</td> <td>40-128 / 5-16</td> <td>CBC, CTR, CFB, CFB8, OFB, OFB8, ECB</td> </tr> <tr class=\"row-odd\">\n<td>CAST-256</td> <td>MCrypt</td> <td>128 / 16, 192 / 24, 256 / 32</td> <td>CBC, CTR, CFB, CFB8, OFB, OFB8, ECB</td> </tr> <tr class=\"row-even\">\n<td>Loki97</td> <td>MCrypt</td> <td>128 / 16, 192 / 24, 256 / 32</td> <td>CBC, CTR, CFB, CFB8, OFB, OFB8, ECB</td> </tr> <tr class=\"row-odd\">\n<td>SaferPlus</td> <td>MCrypt</td> <td>128 / 16, 192 / 24, 256 / 32</td> <td>CBC, CTR, CFB, CFB8, OFB, OFB8, ECB</td> </tr> <tr class=\"row-even\">\n<td>Serpent</td> <td>MCrypt</td> <td>128 / 16, 192 / 24, 256 / 32</td> <td>CBC, CTR, CFB, CFB8, OFB, OFB8, ECB</td> </tr> <tr class=\"row-odd\">\n<td>XTEA</td> <td>MCrypt</td> <td>128 / 16</td> <td>CBC, CTR, CFB, CFB8, OFB, OFB8, ECB</td> </tr> <tr class=\"row-even\">\n<td>RC2</td> <td>MCrypt</td> <td>8-1024 / 1-128</td> <td>CBC, CTR, CFB, CFB8, OFB, OFB8, ECB</td> </tr> <tr class=\"row-odd\">\n<td>RC2</td> <td>OpenSSL</td> <td>8-1024 / 1-128</td> <td>CBC, CFB, OFB, ECB</td> </tr> <tr class=\"row-even\">\n<td>Camellia-128</td> <td>OpenSSL</td> <td>128 / 16</td> <td>CBC, CFB, CFB8, OFB, ECB</td> </tr> <tr class=\"row-odd\">\n<td>Camellia-192</td> <td>OpenSSL</td> <td>192 / 24</td> <td>CBC, CFB, CFB8, OFB, ECB</td> </tr> <tr class=\"row-even\">\n<td>Camellia-256</td> <td>OpenSSL</td> <td>256 / 32</td> <td>CBC, CFB, CFB8, OFB, ECB</td> </tr> <tr class=\"row-odd\">\n<td>Seed</td> <td>OpenSSL</td> <td>128 / 16</td> <td>CBC, CFB, OFB, ECB</td> </tr>  </table> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If you wish to use one of those ciphers, you’d have to pass its name in lower-case to the Encryption library.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">You’ve probably noticed that all AES cipers (and Rijndael-128) are also listed in the portable ciphers list. This is because drivers support different modes for these ciphers. Also, it is important to note that AES-128 and Rijndael-128 are actually the same cipher, but <strong>only</strong> when used with a 128-bit key.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">CAST-128 / CAST-5 is also listed in both the portable and driver-specific ciphers list. This is because OpenSSL’s implementation doesn’t appear to be working correctly with key sizes of 80 bits and lower.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">RC2 is listed as supported by both MCrypt and OpenSSL. However, both drivers implement them differently and they are not portable. It is probably worth noting that we only found one obscure source confirming that it is MCrypt that is not properly implementing it.</p> </div>   <h4 id=\"id1\">Encryption modes</h4> <p id=\"encryption-modes\">Different modes of encryption have different characteristics and serve for different purposes. Some are stronger than others, some are faster and some offer extra features. We are not going in depth into that here, we’ll leave that to the cryptography experts. The table below is to provide brief informational reference to our more experienced users. If you are a beginner, just stick to the CBC mode - it is widely accepted as strong and secure for general purposes.</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Mode name</th> <th class=\"head\">CodeIgniter name</th> <th class=\"head\">Driver support</th> <th class=\"head\">Additional info</th> </tr> </thead>  <tr class=\"row-even\">\n<td>CBC</td> <td>cbc</td> <td>MCrypt, OpenSSL</td> <td>A safe default choice</td> </tr> <tr class=\"row-odd\">\n<td>CTR</td> <td>ctr</td> <td>MCrypt, OpenSSL</td> <td>Considered as theoretically better than CBC, but not as widely available</td> </tr> <tr class=\"row-even\">\n<td>CFB</td> <td>cfb</td> <td>MCrypt, OpenSSL</td> <td>N/A</td> </tr> <tr class=\"row-odd\">\n<td>CFB8</td> <td>cfb8</td> <td>MCrypt, OpenSSL</td> <td>Same as CFB, but operates in 8-bit mode (not recommended).</td> </tr> <tr class=\"row-even\">\n<td>OFB</td> <td>ofb</td> <td>MCrypt, OpenSSL</td> <td>N/A</td> </tr> <tr class=\"row-odd\">\n<td>OFB8</td> <td>ofb8</td> <td>MCrypt</td> <td>Same as OFB, but operates in 8-bit mode (not recommended).</td> </tr> <tr class=\"row-even\">\n<td>ECB</td> <td>ecb</td> <td>MCrypt, OpenSSL</td> <td>Ignores IV (not recommended).</td> </tr> <tr class=\"row-odd\">\n<td>XTS</td> <td>xts</td> <td>OpenSSL</td> <td>Usually used for encrypting random access data such as RAM or hard-disk storage.</td> </tr> <tr class=\"row-even\">\n<td>Stream</td> <td>stream</td> <td>MCrypt, OpenSSL</td> <td>This is not actually a mode, it just says that a stream cipher is being used. Required because of the general cipher+mode initialization process.</td> </tr>  </table>    <h3 id=\"message-length\">Message Length</h3> <p>It’s probably important for you to know that an encrypted string is usually longer than the original, plain-text string (depending on the cipher).</p> <p>This is influenced by the cipher algorithm itself, the IV prepended to the cipher-text and the HMAC authentication message that is also prepended. Furthermore, the encrypted message is also Base64-encoded so that it is safe for storage and transmission, regardless of a possible character set in use.</p> <p>Keep this information in mind when selecting your data storage mechanism. Cookies, for example, can only hold 4K of information.</p>   <h3 id=\"configuration\">Configuring the library</h3> <p id=\"configuring-the-library\">For usability, performance, but also historical reasons tied to our old <a class=\"reference internal\" href=\"encrypt\">Encrypt Class</a>, the Encryption library is designed to use repeatedly the same driver, encryption cipher, mode and key.</p> <p>As noted in the “Default behavior” section above, this means using an auto-detected driver (OpenSSL has a higher priority), the AES-128 ciper in CBC mode, and your <code>$config['encryption_key']</code> value.</p> <p>If you wish to change that however, you need to use the <code>initialize()</code> method. It accepts an associative array of parameters, all of which are optional:</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Option</th> <th class=\"head\">Possible values</th> </tr> </thead>  <tr class=\"row-even\">\n<td>driver</td> <td>‘mcrypt’, ‘openssl’</td> </tr> <tr class=\"row-odd\">\n<td>cipher</td> <td>Cipher name (see <a class=\"reference internal\" href=\"#ciphers-and-modes\">Supported encryption ciphers and modes</a>)</td> </tr> <tr class=\"row-even\">\n<td>mode</td> <td>Encryption mode (see <a class=\"reference internal\" href=\"#encryption-modes\">Encryption modes</a>)</td> </tr> <tr class=\"row-odd\">\n<td>key</td> <td>Encryption key</td> </tr>  </table> <p>For example, if you were to change the encryption algorithm and mode to AES-256 in CTR mode, this is what you should do:</p> <pre data-language=\"php\">$this-&gt;encryption-&gt;initialize(\n        array(\n                'cipher' =&gt; 'aes-256',\n                'mode' =&gt; 'ctr',\n                'key' =&gt; '&lt;a 32-character random string&gt;'\n        )\n);\n</pre> <p>Note that we only mentioned that you want to change the ciper and mode, but we also included a key in the example. As previously noted, it is important that you choose a key with a proper size for the used algorithm.</p> <p>There’s also the ability to change the driver, if for some reason you have both, but want to use MCrypt instead of OpenSSL:</p> <pre data-language=\"php\">// Switch to the MCrypt driver\n$this-&gt;encryption-&gt;initialize(array('driver' =&gt; 'mcrypt'));\n\n// Switch back to the OpenSSL driver\n$this-&gt;encryption-&gt;initialize(array('driver' =&gt; 'openssl'));\n</pre>   <h3 id=\"encrypting-and-decrypting-data\">Encrypting and decrypting data</h3> <p>Encrypting and decrypting data with the already configured library settings is simple. As simple as just passing the string to the <code>encrypt()</code> and/or <code>decrypt()</code> methods:</p> <pre data-language=\"php\">$plain_text = 'This is a plain-text message!';\n$ciphertext = $this-&gt;encryption-&gt;encrypt($plain_text);\n\n// Outputs: This is a plain-text message!\necho $this-&gt;encryption-&gt;decrypt($ciphertext);\n</pre> <p>And that’s it! The Encryption library will do everything necessary for the whole process to be cryptographically secure out-of-the-box. You don’t need to worry about it.</p> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">Both methods will return FALSE in case of an error. While for <code>encrypt()</code> this can only mean incorrect configuration, you should always check the return value of <code>decrypt()</code> in production code.</p> </div>  <h4 id=\"how-it-works\">How it works</h4> <p>If you must know how the process works, here’s what happens under the hood:</p> <ul class=\"simple\"> <li>\n<code>$this-&gt;encryption-&gt;encrypt($plain_text)</code><ol class=\"arabic\"> <li>Derive an encryption key and a HMAC key from your configured <em>encryption_key</em> via HKDF, using the SHA-512 digest algorithm.</li> <li>Generate a random initialization vector (IV).</li> <li>Encrypt the data via AES-128 in CBC mode (or another previously configured cipher and mode), using the above-mentioned derived encryption key and IV.</li> <li>Prepend said IV to the resulting cipher-text.</li> <li>Base64-encode the resulting string, so that it can be safely stored or transferred without worrying about character sets.</li> <li>Create a SHA-512 HMAC authentication message using the derived HMAC key to ensure data integrity and prepend it to the Base64 string.</li> </ol> </li> <li>\n<code>$this-&gt;encryption-&gt;decrypt($ciphertext)</code><ol class=\"arabic\"> <li>Derive an encryption key and a HMAC key from your configured <em>encryption_key</em> via HKDF, using the SHA-512 digest algorithm. Because your configured <em>encryption_key</em> is the same, this will produce the same result as in the <code>encrypt()</code> method above - otherwise you won’t be able to decrypt it.</li> <li>Check if the string is long enough, separate the HMAC out of it and validate if it is correct (this is done in a way that prevents timing attacks agains it). Return FALSE if either of the checks fails.</li> <li>Base64-decode the string.</li> <li>Separate the IV out of the cipher-text and decrypt the said cipher-text using that IV and the derived encryption key.</li> </ol> </li> </ul>   <h4 id=\"custom-parameters\">Using custom parameters</h4> <p id=\"using-custom-parameters\">Let’s say you have to interact with another system that is out of your control and uses another method to encrypt data. A method that will most certainly not match the above-described sequence and probably not use all of the steps either.</p> <p>The Encryption library allows you to change how its encryption and decryption processes work, so that you can easily tailor a custom solution for such situations.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">It is possible to use the library in this way, without setting an <em>encryption_key</em> in your configuration file.</p> </div> <p>All you have to do is to pass an associative array with a few parameters to either the <code>encrypt()</code> or <code>decrypt()</code> method. Here’s an example:</p> <pre data-language=\"php\">// Assume that we have $ciphertext, $key and $hmac_key\n// from on outside source\n\n$message = $this-&gt;encryption-&gt;decrypt(\n        $ciphertext,\n        array(\n                'cipher' =&gt; 'blowfish',\n                'mode' =&gt; 'cbc',\n                'key' =&gt; $key,\n                'hmac_digest' =&gt; 'sha256',\n                'hmac_key' =&gt; $hmac_key\n        )\n);\n</pre> <p>In the above example, we are decrypting a message that was encrypted using the Blowfish cipher in CBC mode and authenticated via a SHA-256 HMAC.</p> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">Note that both ‘key’ and ‘hmac_key’ are used in this example. When using custom parameters, encryption and HMAC keys are not derived like the default behavior of the library is.</p> </div> <p>Below is a list of the available options.</p> <p>However, unless you really need to and you know what you are doing, we advise you to not change the encryption process as this could impact security, so please do so with caution.</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Option</th> <th class=\"head\">Default value</th> <th class=\"head\">Mandatory / Optional</th> <th class=\"head\">Description</th> </tr> </thead>  <tr class=\"row-even\">\n<td>cipher</td> <td>N/A</td> <td>Yes</td> <td>Encryption algorithm (see <a class=\"reference internal\" href=\"#ciphers-and-modes\">Supported encryption ciphers and modes</a>).</td> </tr> <tr class=\"row-odd\">\n<td>mode</td> <td>N/A</td> <td>Yes</td> <td>Encryption mode (see <a class=\"reference internal\" href=\"#encryption-modes\">Encryption modes</a>).</td> </tr> <tr class=\"row-even\">\n<td>key</td> <td>N/A</td> <td>Yes</td> <td>Encryption key.</td> </tr> <tr class=\"row-odd\">\n<td>hmac</td> <td>TRUE</td> <td>No</td> <td>Whether to use a HMAC. Boolean. If set to FALSE, then <em>hmac_digest</em> and <em>hmac_key</em> will be ignored.</td> </tr> <tr class=\"row-even\">\n<td>hmac_digest</td> <td>sha512</td> <td>No</td> <td>HMAC message digest algorithm (see <a class=\"reference internal\" href=\"#digests\">Supported HMAC authentication algorithms</a>).</td> </tr> <tr class=\"row-odd\">\n<td>hmac_key</td> <td>N/A</td> <td>Yes, unless <em>hmac</em> is FALSE</td> <td>HMAC key.</td> </tr> <tr class=\"row-even\">\n<td>raw_data</td> <td>FALSE</td> <td>No</td> <td>Whether the cipher-text should be raw. Boolean. If set to TRUE, then Base64 encoding and decoding will not be performed and HMAC will not be a hexadecimal string.</td> </tr>  </table> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\"><code>encrypt()</code> and <code>decrypt()</code> will return FALSE if a mandatory parameter is not provided or if a provided value is incorrect. This includes <em>hmac_key</em>, unless <em>hmac</em> is set to FALSE.</p> </div>   <h4 id=\"digests\">Supported HMAC authentication algorithms</h4> <p id=\"supported-hmac-authentication-algorithms\">For HMAC message authentication, the Encryption library supports usage of the SHA-2 family of algorithms:</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Algorithm</th> <th class=\"head\">Raw length (bytes)</th> <th class=\"head\">Hex-encoded length (bytes)</th> </tr> </thead>  <tr class=\"row-even\">\n<td>sha512</td> <td>64</td> <td>128</td> </tr> <tr class=\"row-odd\">\n<td>sha384</td> <td>48</td> <td>96</td> </tr> <tr class=\"row-even\">\n<td>sha256</td> <td>32</td> <td>64</td> </tr> <tr class=\"row-odd\">\n<td>sha224</td> <td>28</td> <td>56</td> </tr>  </table> <p>The reason for not including other popular algorithms, such as MD5 or SHA1 is that they are no longer considered secure enough and as such, we don’t want to encourage their usage. If you absolutely need to use them, it is easy to do so via PHP’s native <a class=\"reference external\" href=\"http://php.net/manual/en/function.hash-hmac.php\">hash_hmac()</a> function.</p> <p>Stronger algorithms of course will be added in the future as they appear and become widely available.</p>     <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_Encryption\">\n<code>class CI_Encryption</code> </dt> <dd>\n<dl class=\"method\"> <dt id=\"CI_Encryption::initialize\">\n<code>initialize($params)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$params</strong> (<em>array</em>) – Configuration parameters</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Encryption instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Encryption</p> </td> </tr>  </table> <p>Initializes (configures) the library to use a different driver, cipher, mode or key.</p> <p>Example:</p> <pre data-language=\"php\">$this-&gt;encryption-&gt;initialize(\n        array('mode' =&gt; 'ctr')\n);\n</pre> <p>Please refer to the <a class=\"reference internal\" href=\"#configuration\">Configuring the library</a> section for detailed info.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Encryption::encrypt\">\n<code>encrypt($data[, $params = NULL])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$data</strong> (<em>string</em>) – Data to encrypt</li> <li>\n<strong>$params</strong> (<em>array</em>) – Optional parameters</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Encrypted data or FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Encrypts the input data and returns its ciphertext.</p> <p>Example:</p> <pre data-language=\"php\">$ciphertext = $this-&gt;encryption-&gt;encrypt('My secret message');\n</pre> <p>Please refer to the <a class=\"reference internal\" href=\"#custom-parameters\">Using custom parameters</a> section for information on the optional parameters.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Encryption::decrypt\">\n<code>decrypt($data[, $params = NULL])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$data</strong> (<em>string</em>) – Data to decrypt</li> <li>\n<strong>$params</strong> (<em>array</em>) – Optional parameters</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Decrypted data or FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Decrypts the input data and returns it in plain-text.</p> <p>Example:</p> <pre data-language=\"php\">echo $this-&gt;encryption-&gt;decrypt($ciphertext);\n</pre> <p>Please refer to the <a class=\"reference internal\" href=\"#custom-parameters\">Using custom parameters</a> secrion for information on the optional parameters.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Encryption::create_key\">\n<code>create_key($length)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$length</strong> (<em>int</em>) – Output length</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">A pseudo-random cryptographic key with the specified length, or FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Creates a cryptographic key by fetching random data from the operating system’s sources (i.e. /dev/urandom).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Encryption::hkdf\">\n<code>hkdf($key[, $digest = 'sha512'[, $salt = NULL[, $length = NULL[, $info = '']]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$key</strong> (<em>string</em>) – Input key material</li> <li>\n<strong>$digest</strong> (<em>string</em>) – A SHA-2 family digest algorithm</li> <li>\n<strong>$salt</strong> (<em>string</em>) – Optional salt</li> <li>\n<strong>$length</strong> (<em>int</em>) – Optional output length</li> <li>\n<strong>$info</strong> (<em>string</em>) – Optional context/application-specific info</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">A pseudo-random key or FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Derives a key from another, presumably weaker key.</p> <p>This method is used internally to derive an encryption and HMAC key from your configured <em>encryption_key</em>.</p> <p>It is publicly available due to its otherwise general purpose. It is described in <a class=\"reference external\" href=\"https://tools.ietf.org/rfc/rfc5869.txt\">RFC 5869</a>.</p> <p>However, as opposed to the description in RFC 5869, this implementation doesn’t support SHA1.</p> <p>Example:</p> <pre data-language=\"php\">$hmac_key = $this-&gt;encryption-&gt;hkdf(\n        $key,\n        'sha512',\n        NULL,\n        NULL,\n        'authentication'\n);\n\n// $hmac_key is a pseudo-random key with a length of 64 bytes\n</pre> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/libraries/encryption.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/libraries/encryption.html</a>\n  </p>\n</div>\n","database/queries":"<h1 id=\"queries\">Queries</h1>  <h2 id=\"query-basics\">Query Basics</h2>  <h3 id=\"regular-queries\">Regular Queries</h3> <p>To submit a query, use the <strong>query</strong> function:</p> <pre data-language=\"php\">$this-&gt;db-&gt;query('YOUR QUERY HERE');\n</pre> <p>The query() function returns a database result <strong>object</strong> when “read” type queries are run, which you can use to <a class=\"reference internal\" href=\"results\">show your results</a>. When “write” type queries are run it simply returns TRUE or FALSE depending on success or failure. When retrieving data you will typically assign the query to your own variable, like this:</p> <pre data-language=\"php\">$query = $this-&gt;db-&gt;query('YOUR QUERY HERE');\n</pre>   <h3 id=\"simplified-queries\">Simplified Queries</h3> <p>The <strong>simple_query</strong> method is a simplified version of the $this-&gt;db-&gt;query() method. It DOES NOT return a database result set, nor does it set the query timer, or compile bind data, or store your query for debugging. It simply lets you submit a query. Most users will rarely use this function.</p> <p>It returns whatever the database drivers’ “execute” function returns. That typically is TRUE/FALSE on success or failure for write type queries such as INSERT, DELETE or UPDATE statements (which is what it really should be used for) and a resource/object on success for queries with fetchable results.</p> <pre data-language=\"php\">if ($this-&gt;db-&gt;simple_query('YOUR QUERY'))\n{\n        echo \"Success!\";\n}\nelse\n{\n        echo \"Query failed!\";\n}\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">PostgreSQL’s <code>pg_exec()</code> function (for example) always returns a resource on success, even for write type queries. So take that in mind if you’re looking for a boolean value.</p> </div>    <h2 id=\"working-with-database-prefixes-manually\">Working with Database prefixes manually</h2> <p>If you have configured a database prefix and would like to prepend it to a table name for use in a native SQL query for example, then you can use the following:</p> <pre data-language=\"php\">$this-&gt;db-&gt;dbprefix('tablename'); // outputs prefix_tablename\n</pre> <p>If for any reason you would like to change the prefix programatically without needing to create a new connection, you can use this method:</p> <pre data-language=\"php\">$this-&gt;db-&gt;set_dbprefix('newprefix');\n$this-&gt;db-&gt;dbprefix('tablename'); // outputs newprefix_tablename\n</pre>   <h2 id=\"protecting-identifiers\">Protecting identifiers</h2> <p>In many databases it is advisable to protect table and field names - for example with backticks in MySQL. <strong>Query Builder queries are automatically protected</strong>, however if you need to manually protect an identifier you can use:</p> <pre data-language=\"php\">$this-&gt;db-&gt;protect_identifiers('table_name');\n</pre> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">Although the Query Builder will try its best to properly quote any field and table names that you feed it, note that it is NOT designed to work with arbitrary user input. DO NOT feed it with unsanitized user data.</p> </div> <p>This function will also add a table prefix to your table, assuming you have a prefix specified in your database config file. To enable the prefixing set TRUE (boolean) via the second parameter:</p> <pre data-language=\"php\">$this-&gt;db-&gt;protect_identifiers('table_name', TRUE);\n</pre>   <h2 id=\"escaping-queries\">Escaping Queries</h2> <p>It’s a very good security practice to escape your data before submitting it into your database. CodeIgniter has three methods that help you do this:</p> <ol class=\"arabic\"> <li>\n<p class=\"first\"><strong>$this-&gt;db-&gt;escape()</strong> This function determines the data type so that it can escape only string data. It also automatically adds single quotes around the data so you don’t have to:</p> <pre data-language=\"php\">$sql = \"INSERT INTO table (title) VALUES(\".$this-&gt;db-&gt;escape($title).\")\";\n</pre> </li> <li>\n<p class=\"first\"><strong>$this-&gt;db-&gt;escape_str()</strong> This function escapes the data passed to it, regardless of type. Most of the time you’ll use the above function rather than this one. Use the function like this:</p> <pre data-language=\"php\">$sql = \"INSERT INTO table (title) VALUES('\".$this-&gt;db-&gt;escape_str($title).\"')\";\n</pre> </li> <li>\n<strong>$this-&gt;db-&gt;escape_like_str()</strong> This method should be used when strings are to be used in LIKE conditions so that LIKE wildcards (‘%’, ‘_’) in the string are also properly escaped. </li> </ol> <pre data-language=\"php\">$search = '20% raise';\n$sql = \"SELECT id FROM table WHERE column LIKE '%\" .\n    $this-&gt;db-&gt;escape_like_str($search).\"%' ESCAPE '!'\";\n</pre> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">The <code>escape_like_str()</code> method uses ‘!’ (exclamation mark) to escape special characters for <em>LIKE</em> conditions. Because this method escapes partial strings that you would wrap in quotes yourself, it cannot automatically add the <code>ESCAPE '!'</code> condition for you, and so you’ll have to manually do that.</p> </div>   <h2 id=\"query-bindings\">Query Bindings</h2> <p>Bindings enable you to simplify your query syntax by letting the system put the queries together for you. Consider the following example:</p> <pre data-language=\"php\">$sql = \"SELECT * FROM some_table WHERE id = ? AND status = ? AND author = ?\";\n$this-&gt;db-&gt;query($sql, array(3, 'live', 'Rick'));\n</pre> <p>The question marks in the query are automatically replaced with the values in the array in the second parameter of the query function.</p> <p>Binding also work with arrays, which will be transformed to IN sets:</p> <pre data-language=\"php\">$sql = \"SELECT * FROM some_table WHERE id IN ? AND status = ? AND author = ?\";\n$this-&gt;db-&gt;query($sql, array(array(3, 6), 'live', 'Rick'));\n</pre> <p>The resulting query will be:</p> <pre data-language=\"php\">SELECT * FROM some_table WHERE id IN (3,6) AND status = 'live' AND author = 'Rick'\n</pre> <p>The secondary benefit of using binds is that the values are automatically escaped, producing safer queries. You don’t have to remember to manually escape data; the engine does it automatically for you.</p>   <h2 id=\"handling-errors\">Handling Errors</h2> <p><strong>$this-&gt;db-&gt;error();</strong></p> <p>If you need to get the last error that has occured, the error() method will return an array containing its code and message. Here’s a quick example:</p> <pre data-language=\"php\">if ( ! $this-&gt;db-&gt;simple_query('SELECT `example_field` FROM `example_table`'))\n{\n        $error = $this-&gt;db-&gt;error(); // Has keys 'code' and 'message'\n}\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/database/queries.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/database/queries.html</a>\n  </p>\n</div>\n","database/configuration":"<h1 id=\"database-configuration\">Database Configuration</h1> <p>CodeIgniter has a config file that lets you store your database connection values (username, password, database name, etc.). The config file is located at application/config/database.php. You can also set database connection values for specific <a class=\"reference internal\" href=\"../libraries/config\">environments</a> by placing <strong>database.php</strong> in the respective environment config folder.</p> <p>The config settings are stored in a multi-dimensional array with this prototype:</p> <pre data-language=\"php\">$db['default'] = array(\n        'dsn'   =&gt; '',\n        'hostname' =&gt; 'localhost',\n        'username' =&gt; 'root',\n        'password' =&gt; '',\n        'database' =&gt; 'database_name',\n        'dbdriver' =&gt; 'mysqli',\n        'dbprefix' =&gt; '',\n        'pconnect' =&gt; TRUE,\n        'db_debug' =&gt; TRUE,\n        'cache_on' =&gt; FALSE,\n        'cachedir' =&gt; '',\n        'char_set' =&gt; 'utf8',\n        'dbcollat' =&gt; 'utf8_general_ci',\n        'swap_pre' =&gt; '',\n        'encrypt' =&gt; FALSE,\n        'compress' =&gt; FALSE,\n        'stricton' =&gt; FALSE,\n        'failover' =&gt; array()\n);\n</pre> <p>Some database drivers (such as PDO, PostgreSQL, Oracle, ODBC) might require a full DSN string to be provided. If that is the case, you should use the ‘dsn’ configuration setting, as if you’re using the driver’s underlying native PHP extension, like this:</p> <pre data-language=\"php\">// PDO\n$db['default']['dsn'] = 'pgsql:host=localhost;port=5432;dbname=database_name';\n\n// Oracle\n$db['default']['dsn'] = '//localhost/XE';\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If you do not specify a DSN string for a driver that requires it, CodeIgniter will try to build it with the rest of the provided settings.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If you provide a DSN string and it is missing some valid settings (e.g. the database character set), which are present in the rest of the configuration fields, CodeIgniter will append them.</p> </div> <p>You can also specify failovers for the situation when the main connection cannot connect for some reason. These failovers can be specified by setting the failover for a connection like this:</p> <pre data-language=\"php\">$db['default']['failover'] = array(\n                array(\n                        'hostname' =&gt; 'localhost1',\n                        'username' =&gt; '',\n                        'password' =&gt; '',\n                        'database' =&gt; '',\n                        'dbdriver' =&gt; 'mysqli',\n                        'dbprefix' =&gt; '',\n                        'pconnect' =&gt; TRUE,\n                        'db_debug' =&gt; TRUE,\n                        'cache_on' =&gt; FALSE,\n                        'cachedir' =&gt; '',\n                        'char_set' =&gt; 'utf8',\n                        'dbcollat' =&gt; 'utf8_general_ci',\n                        'swap_pre' =&gt; '',\n                        'encrypt' =&gt; FALSE,\n                        'compress' =&gt; FALSE,\n                        'stricton' =&gt; FALSE\n                ),\n                array(\n                        'hostname' =&gt; 'localhost2',\n                        'username' =&gt; '',\n                        'password' =&gt; '',\n                        'database' =&gt; '',\n                        'dbdriver' =&gt; 'mysqli',\n                        'dbprefix' =&gt; '',\n                        'pconnect' =&gt; TRUE,\n                        'db_debug' =&gt; TRUE,\n                        'cache_on' =&gt; FALSE,\n                        'cachedir' =&gt; '',\n                        'char_set' =&gt; 'utf8',\n                        'dbcollat' =&gt; 'utf8_general_ci',\n                        'swap_pre' =&gt; '',\n                        'encrypt' =&gt; FALSE,\n                        'compress' =&gt; FALSE,\n                        'stricton' =&gt; FALSE\n                )\n        );\n</pre> <p>You can specify as many failovers as you like.</p> <p>The reason we use a multi-dimensional array rather than a more simple one is to permit you to optionally store multiple sets of connection values. If, for example, you run multiple environments (development, production, test, etc.) under a single installation, you can set up a connection group for each, then switch between groups as needed. For example, to set up a “test” environment you would do this:</p> <pre data-language=\"php\">$db['test'] = array(\n        'dsn'   =&gt; '',\n        'hostname' =&gt; 'localhost',\n        'username' =&gt; 'root',\n        'password' =&gt; '',\n        'database' =&gt; 'database_name',\n        'dbdriver' =&gt; 'mysqli',\n        'dbprefix' =&gt; '',\n        'pconnect' =&gt; TRUE,\n        'db_debug' =&gt; TRUE,\n        'cache_on' =&gt; FALSE,\n        'cachedir' =&gt; '',\n        'char_set' =&gt; 'utf8',\n        'dbcollat' =&gt; 'utf8_general_ci',\n        'swap_pre' =&gt; '',\n        'compress' =&gt; FALSE,\n        'encrypt' =&gt; FALSE,\n        'stricton' =&gt; FALSE,\n        'failover' =&gt; array()\n);\n</pre> <p>Then, to globally tell the system to use that group you would set this variable located in the config file:</p> <pre data-language=\"php\">$active_group = 'test';\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The name ‘test’ is arbitrary. It can be anything you want. By default we’ve used the word “default” for the primary connection, but it too can be renamed to something more relevant to your project.</p> </div>  <h2 id=\"query-builder\">Query Builder</h2> <p>The <a class=\"reference internal\" href=\"query_builder\">Query Builder Class</a> is globally enabled or disabled by setting the $query_builder variable in the database configuration file to TRUE/FALSE (boolean). The default setting is TRUE. If you are not using the query builder class, setting it to FALSE will utilize fewer resources when the database classes are initialized.</p> <pre data-language=\"php\">$query_builder = TRUE;\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">that some CodeIgniter classes such as Sessions require Query Builder to be enabled to access certain functionality.</p> </div>   <h2 id=\"explanation-of-values\">Explanation of Values:</h2> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Name Config</th> <th class=\"head\">Description</th> </tr> </thead>  <tr class=\"row-even\">\n<td><strong>dsn</strong></td> <td>The DSN connect string (an all-in-one configuration sequence).</td> </tr> <tr class=\"row-odd\">\n<td><strong>hostname</strong></td> <td>The hostname of your database server. Often this is ‘localhost’.</td> </tr> <tr class=\"row-even\">\n<td><strong>username</strong></td> <td>The username used to connect to the database.</td> </tr> <tr class=\"row-odd\">\n<td><strong>password</strong></td> <td>The password used to connect to the database.</td> </tr> <tr class=\"row-even\">\n<td><strong>database</strong></td> <td>The name of the database you want to connect to.</td> </tr> <tr class=\"row-odd\">\n<td><strong>dbdriver</strong></td> <td>The database type. ie: mysqli, postgre, odbc, etc. Must be specified in lower case.</td> </tr> <tr class=\"row-even\">\n<td><strong>dbprefix</strong></td> <td>An optional table prefix which will added to the table name when running <a class=\"reference internal\" href=\"query_builder\">Query Builder</a> queries. This permits multiple CodeIgniter installations to share one database.</td> </tr> <tr class=\"row-odd\">\n<td><strong>pconnect</strong></td> <td>TRUE/FALSE (boolean) - Whether to use a persistent connection.</td> </tr> <tr class=\"row-even\">\n<td><strong>db_debug</strong></td> <td>TRUE/FALSE (boolean) - Whether database errors should be displayed.</td> </tr> <tr class=\"row-odd\">\n<td><strong>cache_on</strong></td> <td>TRUE/FALSE (boolean) - Whether database query caching is enabled, see also <a class=\"reference internal\" href=\"caching\">Database Caching Class</a>.</td> </tr> <tr class=\"row-even\">\n<td><strong>cachedir</strong></td> <td>The absolute server path to your database query cache directory.</td> </tr> <tr class=\"row-odd\">\n<td><strong>char_set</strong></td> <td>The character set used in communicating with the database.</td> </tr> <tr class=\"row-even\">\n<td><strong>dbcollat</strong></td> <td>\n<p class=\"first\">The character collation used in communicating with the database</p> <div class=\"last admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Only used in the ‘mysql’ and ‘mysqli’ drivers.</p> </div> </td> </tr> <tr class=\"row-odd\">\n<td><strong>swap_pre</strong></td> <td>A default table prefix that should be swapped with dbprefix. This is useful for distributed applications where you might run manually written queries, and need the prefix to still be customizable by the end user.</td> </tr> <tr class=\"row-even\">\n<td><strong>schema</strong></td> <td>The database schema, defaults to ‘public’. Used by PostgreSQL and ODBC drivers.</td> </tr> <tr class=\"row-odd\">\n<td><strong>encrypt</strong></td> <td>\n<p class=\"first\">Whether or not to use an encrypted connection.</p>  <ul class=\"simple\"> <li>‘mysql’ (deprecated), ‘sqlsrv’ and ‘pdo/sqlsrv’ drivers accept TRUE/FALSE</li> <li>‘mysqli’ and ‘pdo/mysql’ drivers accept an array with the following options:<ul> <li>‘ssl_key’ - Path to the private key file</li> <li>‘ssl_cert’ - Path to the public key certificate file</li> <li>‘ssl_ca’ - Path to the certificate authority file</li> <li>‘ssl_capath’ - Path to a directory containing trusted CA certificats in PEM format</li> <li>‘ssl_cipher’ - List of <em>allowed</em> ciphers to be used for the encryption, separated by colons (‘:’)</li> <li>‘ssl_verify’ - TRUE/FALSE; Whether to verify the server certificate or not (‘mysqli’ only)</li> </ul> </li> </ul>  </td> </tr> <tr class=\"row-even\">\n<td><strong>compress</strong></td> <td>Whether or not to use client compression (MySQL only).</td> </tr> <tr class=\"row-odd\">\n<td><strong>stricton</strong></td> <td>TRUE/FALSE (boolean) - Whether to force “Strict Mode” connections, good for ensuring strict SQL while developing an application.</td> </tr> <tr class=\"row-even\">\n<td><strong>port</strong></td> <td>\n<p class=\"first\">The database port number. To use this value you have to add a line to the database config array.</p> <pre data-language=\"php\">$db['default']['port'] = 5432;\n</pre> </td> </tr>  </table> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Depending on what database platform you are using (MySQL, PostgreSQL, etc.) not all values will be needed. For example, when using SQLite you will not need to supply a username or password, and the database name will be the path to your database file. The information above assumes you are using MySQL.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/database/configuration.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/database/configuration.html</a>\n  </p>\n</div>\n","database/index":"<h1 id=\"database-reference\">Database Reference</h1> <p>CodeIgniter comes with a full-featured and very fast abstracted database class that supports both traditional structures and Query Builder patterns. The database functions offer clear, simple syntax.</p>  <ul> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"examples\">Quick Start: Usage Examples</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"configuration\">Database Configuration</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"connecting\">Connecting to a Database</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"queries\">Running Queries</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"results\">Generating Query Results</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"helpers\">Query Helper Functions</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"query_builder\">Query Builder Class</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"transactions\">Transactions</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"metadata\">Getting MetaData</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"call_function\">Custom Function Calls</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"caching\">Query Caching</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"forge\">Database Manipulation with Database Forge</a> </li> <li class=\"toctree-l1\">\n<a class=\"reference internal\" href=\"utilities\">Database Utilities Class</a> </li> <li class=\"toctree-l1\"><a class=\"reference internal\" href=\"db_driver_reference\">Database Driver Reference</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/database/index.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/database/index.html</a>\n  </p>\n</div>\n","database/metadata":"<h1 id=\"database-metadata\">Database Metadata</h1>  <h2 id=\"table-metadata\">Table MetaData</h2> <p>These functions let you fetch table information.</p>  <h3 id=\"list-the-tables-in-your-database\">List the Tables in Your Database</h3> <p><strong>$this-&gt;db-&gt;list_tables();</strong></p> <p>Returns an array containing the names of all the tables in the database you are currently connected to. Example:</p> <pre data-language=\"php\">$tables = $this-&gt;db-&gt;list_tables();\n\nforeach ($tables as $table)\n{\n        echo $table;\n}\n</pre>   <h3 id=\"determine-if-a-table-exists\">Determine If a Table Exists</h3> <p><strong>$this-&gt;db-&gt;table_exists();</strong></p> <p>Sometimes it’s helpful to know whether a particular table exists before running an operation on it. Returns a boolean TRUE/FALSE. Usage example:</p> <pre data-language=\"php\">if ($this-&gt;db-&gt;table_exists('table_name'))\n{\n        // some code...\n}\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Replace <em>table_name</em> with the name of the table you are looking for.</p> </div>    <h2 id=\"field-metadata\">Field MetaData</h2>  <h3 id=\"list-the-fields-in-a-table\">List the Fields in a Table</h3> <p><strong>$this-&gt;db-&gt;list_fields()</strong></p> <p>Returns an array containing the field names. This query can be called two ways:</p> <p>1. You can supply the table name and call it from the $this-&gt;db-&gt; object:</p> <pre data-language=\"php\">$fields = $this-&gt;db-&gt;list_fields('table_name');\n\nforeach ($fields as $field)\n{\n        echo $field;\n}\n</pre> <p>2. You can gather the field names associated with any query you run by calling the function from your query result object:</p> <pre data-language=\"php\">$query = $this-&gt;db-&gt;query('SELECT * FROM some_table');\n\nforeach ($query-&gt;list_fields() as $field)\n{\n        echo $field;\n}\n</pre>   <h3 id=\"determine-if-a-field-is-present-in-a-table\">Determine If a Field is Present in a Table</h3> <p><strong>$this-&gt;db-&gt;field_exists()</strong></p> <p>Sometimes it’s helpful to know whether a particular field exists before performing an action. Returns a boolean TRUE/FALSE. Usage example:</p> <pre data-language=\"php\">if ($this-&gt;db-&gt;field_exists('field_name', 'table_name'))\n{\n        // some code...\n}\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Replace <em>field_name</em> with the name of the column you are looking for, and replace <em>table_name</em> with the name of the table you are looking for.</p> </div>   <h3 id=\"retrieve-field-metadata\">Retrieve Field Metadata</h3> <p><strong>$this-&gt;db-&gt;field_data()</strong></p> <p>Returns an array of objects containing field information.</p> <p>Sometimes it’s helpful to gather the field names or other metadata, like the column type, max length, etc.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Not all databases provide meta-data.</p> </div> <p>Usage example:</p> <pre data-language=\"php\">$fields = $this-&gt;db-&gt;field_data('table_name');\n\nforeach ($fields as $field)\n{\n        echo $field-&gt;name;\n        echo $field-&gt;type;\n        echo $field-&gt;max_length;\n        echo $field-&gt;primary_key;\n}\n</pre> <p>If you have run a query already you can use the result object instead of supplying the table name:</p> <pre data-language=\"php\">$query = $this-&gt;db-&gt;query(\"YOUR QUERY\");\n$fields = $query-&gt;field_data();\n</pre> <p>The following data is available from this function if supported by your database:</p> <ul class=\"simple\"> <li>name - column name</li> <li>max_length - maximum length of the column</li> <li>primary_key - 1 if the column is a primary key</li> <li>type - the type of the column</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/database/metadata.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/database/metadata.html</a>\n  </p>\n</div>\n","libraries/table":"<h1 id=\"html-table-class\">HTML Table Class</h1> <p>The Table Class provides functions that enable you to auto-generate HTML tables from arrays or database result sets.</p>  <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#using-the-table-class\" id=\"id1\">Using the Table Class</a><ul> <li><a class=\"reference internal\" href=\"#initializing-the-class\" id=\"id2\">Initializing the Class</a></li> <li><a class=\"reference internal\" href=\"#examples\" id=\"id3\">Examples</a></li> <li><a class=\"reference internal\" href=\"#changing-the-look-of-your-table\" id=\"id4\">Changing the Look of Your Table</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#class-reference\" id=\"id5\">Class Reference</a></li> </ul>   <h2 id=\"using-the-table-class\">Using the Table Class</h2>  <h3 id=\"initializing-the-class\">Initializing the Class</h3> <p>Like most other classes in CodeIgniter, the Table class is initialized in your controller using the <code>$this-&gt;load-&gt;library()</code> method:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('table');\n</pre> <p>Once loaded, the Table library object will be available using:</p> <pre data-language=\"php\">$this-&gt;table\n</pre>   <h3 id=\"examples\">Examples</h3> <p>Here is an example showing how you can create a table from a multi-dimensional array. Note that the first array index will become the table heading (or you can set your own headings using the <code>set_heading()</code> method described in the function reference below).</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('table');\n\n$data = array(\n        array('Name', 'Color', 'Size'),\n        array('Fred', 'Blue', 'Small'),\n        array('Mary', 'Red', 'Large'),\n        array('John', 'Green', 'Medium')\n);\n\necho $this-&gt;table-&gt;generate($data);\n</pre> <p>Here is an example of a table created from a database query result. The table class will automatically generate the headings based on the table names (or you can set your own headings using the <code>set_heading()</code> method described in the class reference below).</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('table');\n\n$query = $this-&gt;db-&gt;query('SELECT * FROM my_table');\n\necho $this-&gt;table-&gt;generate($query);\n</pre> <p>Here is an example showing how you might create a table using discrete parameters:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('table');\n\n$this-&gt;table-&gt;set_heading('Name', 'Color', 'Size');\n\n$this-&gt;table-&gt;add_row('Fred', 'Blue', 'Small');\n$this-&gt;table-&gt;add_row('Mary', 'Red', 'Large');\n$this-&gt;table-&gt;add_row('John', 'Green', 'Medium');\n\necho $this-&gt;table-&gt;generate();\n</pre> <p>Here is the same example, except instead of individual parameters, arrays are used:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('table');\n\n$this-&gt;table-&gt;set_heading(array('Name', 'Color', 'Size'));\n\n$this-&gt;table-&gt;add_row(array('Fred', 'Blue', 'Small'));\n$this-&gt;table-&gt;add_row(array('Mary', 'Red', 'Large'));\n$this-&gt;table-&gt;add_row(array('John', 'Green', 'Medium'));\n\necho $this-&gt;table-&gt;generate();\n</pre>   <h3 id=\"changing-the-look-of-your-table\">Changing the Look of Your Table</h3> <p>The Table Class permits you to set a table template with which you can specify the design of your layout. Here is the template prototype:</p> <pre data-language=\"php\">$template = array(\n        'table_open'            =&gt; '&lt;table border=\"0\" cellpadding=\"4\" cellspacing=\"0\"&gt;',\n\n        'thead_open'            =&gt; '&lt;thead&gt;',\n        'thead_close'           =&gt; '&lt;/thead&gt;',\n\n        'heading_row_start'     =&gt; '&lt;tr&gt;',\n        'heading_row_end'       =&gt; '&lt;/tr&gt;',\n        'heading_cell_start'    =&gt; '&lt;th&gt;',\n        'heading_cell_end'      =&gt; '&lt;/th&gt;',\n\n        'tbody_open'            =&gt; '&lt;tbody&gt;',\n        'tbody_close'           =&gt; '&lt;/tbody&gt;',\n\n        'row_start'             =&gt; '&lt;tr&gt;',\n        'row_end'               =&gt; '&lt;/tr&gt;',\n        'cell_start'            =&gt; '&lt;td&gt;',\n        'cell_end'              =&gt; '&lt;/td&gt;',\n\n        'row_alt_start'         =&gt; '&lt;tr&gt;',\n        'row_alt_end'           =&gt; '&lt;/tr&gt;',\n        'cell_alt_start'        =&gt; '&lt;td&gt;',\n        'cell_alt_end'          =&gt; '&lt;/td&gt;',\n\n        'table_close'           =&gt; '&lt;/table&gt;'\n);\n\n$this-&gt;table-&gt;set_template($template);\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">You’ll notice there are two sets of “row” blocks in the template. These permit you to create alternating row colors or design elements that alternate with each iteration of the row data.</p> </div> <p>You are NOT required to submit a complete template. If you only need to change parts of the layout you can simply submit those elements. In this example, only the table opening tag is being changed:</p> <pre data-language=\"php\">$template = array(\n        'table_open' =&gt; '&lt;table border=\"1\" cellpadding=\"2\" cellspacing=\"1\" class=\"mytable\"&gt;'\n);\n\n$this-&gt;table-&gt;set_template($template);\n</pre> <p>You can also set defaults for these in a config file.</p>    <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_Table\">\n<code>class CI_Table</code> </dt> <dd>\n<dl class=\"attribute\"> <dt>\n<code>$function = NULL</code> </dt> <dd>\n<p>Allows you to specify a native PHP function or a valid function array object to be applied to all cell data.</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('table');\n\n$this-&gt;table-&gt;set_heading('Name', 'Color', 'Size');\n$this-&gt;table-&gt;add_row('Fred', '&lt;strong&gt;Blue&lt;/strong&gt;', 'Small');\n\n$this-&gt;table-&gt;function = 'htmlspecialchars';\necho $this-&gt;table-&gt;generate();\n</pre> <p>In the above example, all cell data would be ran through PHP’s <code>htmlspecialchars()</code> function, resulting in:</p> <pre data-language=\"php\">&lt;td&gt;Fred&lt;/td&gt;&lt;td&gt;&amp;lt;strong&amp;gt;Blue&amp;lt;/strong&amp;gt;&lt;/td&gt;&lt;td&gt;Small&lt;/td&gt;\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Table::generate\">\n<code>generate([$table_data = NULL])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table_data</strong> (<em>mixed</em>) – Data to populate the table rows with</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">HTML table</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Returns a string containing the generated table. Accepts an optional parameter which can be an array or a database result object.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Table::set_caption\">\n<code>set_caption($caption)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$caption</strong> (<em>string</em>) – Table caption</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Table instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Table</p> </td> </tr>  </table> <p>Permits you to add a caption to the table.</p> <pre data-language=\"php\">$this-&gt;table-&gt;set_caption('Colors');\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Table::set_heading\">\n<code>set_heading([$args = array()[, ...]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$args</strong> (<em>mixed</em>) – An array or multiple strings containing the table column titles</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Table instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Table</p> </td> </tr>  </table> <p>Permits you to set the table heading. You can submit an array or discrete params:</p> <pre data-language=\"php\">$this-&gt;table-&gt;set_heading('Name', 'Color', 'Size');\n\n$this-&gt;table-&gt;set_heading(array('Name', 'Color', 'Size'));\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Table::add_row\">\n<code>add_row([$args = array()[, ...]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$args</strong> (<em>mixed</em>) – An array or multiple strings containing the row values</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Table instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Table</p> </td> </tr>  </table> <p>Permits you to add a row to your table. You can submit an array or discrete params:</p> <pre data-language=\"php\">$this-&gt;table-&gt;add_row('Blue', 'Red', 'Green');\n\n$this-&gt;table-&gt;add_row(array('Blue', 'Red', 'Green'));\n</pre> <p>If you would like to set an individual cell’s tag attributes, you can use an associative array for that cell. The associative key <strong>data</strong> defines the cell’s data. Any other key =&gt; val pairs are added as key=’val’ attributes to the tag:</p> <pre data-language=\"php\">$cell = array('data' =&gt; 'Blue', 'class' =&gt; 'highlight', 'colspan' =&gt; 2);\n$this-&gt;table-&gt;add_row($cell, 'Red', 'Green');\n\n// generates\n// &lt;td class='highlight' colspan='2'&gt;Blue&lt;/td&gt;&lt;td&gt;Red&lt;/td&gt;&lt;td&gt;Green&lt;/td&gt;\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Table::make_columns\">\n<code>make_columns([$array = array()[, $col_limit = 0]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$array</strong> (<em>array</em>) – An array containing multiple rows’ data</li> <li>\n<strong>$col_limit</strong> (<em>int</em>) – Count of columns in the table</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An array of HTML table columns</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>This method takes a one-dimensional array as input and creates a multi-dimensional array with a depth equal to the number of columns desired. This allows a single array with many elements to be displayed in a table that has a fixed column count. Consider this example:</p> <pre data-language=\"php\">$list = array('one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve');\n\n$new_list = $this-&gt;table-&gt;make_columns($list, 3);\n\n$this-&gt;table-&gt;generate($new_list);\n\n// Generates a table with this prototype\n\n&lt;table border=\"0\" cellpadding=\"4\" cellspacing=\"0\"&gt;\n&lt;tr&gt;\n&lt;td&gt;one&lt;/td&gt;&lt;td&gt;two&lt;/td&gt;&lt;td&gt;three&lt;/td&gt;\n&lt;/tr&gt;&lt;tr&gt;\n&lt;td&gt;four&lt;/td&gt;&lt;td&gt;five&lt;/td&gt;&lt;td&gt;six&lt;/td&gt;\n&lt;/tr&gt;&lt;tr&gt;\n&lt;td&gt;seven&lt;/td&gt;&lt;td&gt;eight&lt;/td&gt;&lt;td&gt;nine&lt;/td&gt;\n&lt;/tr&gt;&lt;tr&gt;\n&lt;td&gt;ten&lt;/td&gt;&lt;td&gt;eleven&lt;/td&gt;&lt;td&gt;twelve&lt;/td&gt;&lt;/tr&gt;\n&lt;/table&gt;\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Table::set_template\">\n<code>set_template($template)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$template</strong> (<em>array</em>) – An associative array containing template values</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Permits you to set your template. You can submit a full or partial template.</p> <pre data-language=\"php\">$template = array(\n        'table_open'  =&gt; '&lt;table border=\"1\" cellpadding=\"2\" cellspacing=\"1\" class=\"mytable\"&gt;'\n);\n\n$this-&gt;table-&gt;set_template($template);\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Table::set_empty\">\n<code>set_empty($value)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$value</strong> (<em>mixed</em>) – Value to put in empty cells</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Table instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Table</p> </td> </tr>  </table> <p>Lets you set a default value for use in any table cells that are empty. You might, for example, set a non-breaking space:</p> <pre data-language=\"php\">$this-&gt;table-&gt;set_empty(\"&amp;nbsp;\");\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Table::clear\">\n<code>clear()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">CI_Table instance (method chaining)</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">CI_Table</td> </tr>  </table> <p>Lets you clear the table heading and row data. If you need to show multiple tables with different data you should to call this method after each table has been generated to clear the previous table information. Example:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('table');\n\n$this-&gt;table-&gt;set_heading('Name', 'Color', 'Size');\n$this-&gt;table-&gt;add_row('Fred', 'Blue', 'Small');\n$this-&gt;table-&gt;add_row('Mary', 'Red', 'Large');\n$this-&gt;table-&gt;add_row('John', 'Green', 'Medium');\n\necho $this-&gt;table-&gt;generate();\n\n$this-&gt;table-&gt;clear();\n\n$this-&gt;table-&gt;set_heading('Name', 'Day', 'Delivery');\n$this-&gt;table-&gt;add_row('Fred', 'Wednesday', 'Express');\n$this-&gt;table-&gt;add_row('Mary', 'Monday', 'Air');\n$this-&gt;table-&gt;add_row('John', 'Saturday', 'Overnight');\n\necho $this-&gt;table-&gt;generate();\n</pre> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/libraries/table.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/libraries/table.html</a>\n  </p>\n</div>\n","libraries/trackback":"<h1 id=\"trackback-class\">Trackback Class</h1> <p>The Trackback Class provides functions that enable you to send and receive Trackback data.</p> <p>If you are not familiar with Trackbacks you’ll find more information <a class=\"reference external\" href=\"http://en.wikipedia.org/wiki/Trackback\">here</a>.</p>  <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#using-the-trackback-class\" id=\"id1\">Using the Trackback Class</a><ul> <li><a class=\"reference internal\" href=\"#initializing-the-class\" id=\"id2\">Initializing the Class</a></li> <li><a class=\"reference internal\" href=\"#sending-trackbacks\" id=\"id3\">Sending Trackbacks</a></li> <li><a class=\"reference internal\" href=\"#receiving-trackbacks\" id=\"id4\">Receiving Trackbacks</a></li> <li><a class=\"reference internal\" href=\"#your-ping-url\" id=\"id5\">Your Ping URL</a></li> <li><a class=\"reference internal\" href=\"#creating-a-trackback-table\" id=\"id6\">Creating a Trackback Table</a></li> <li>\n<a class=\"reference internal\" href=\"#processing-a-trackback\" id=\"id7\">Processing a Trackback</a><ul> <li><a class=\"reference internal\" href=\"#notes\" id=\"id8\">Notes:</a></li> </ul> </li> </ul> </li> <li><a class=\"reference internal\" href=\"#class-reference\" id=\"id9\">Class Reference</a></li> </ul>   <h2 id=\"using-the-trackback-class\">Using the Trackback Class</h2>  <h3 id=\"initializing-the-class\">Initializing the Class</h3> <p>Like most other classes in CodeIgniter, the Trackback class is initialized in your controller using the <code>$this-&gt;load-&gt;library()</code> method:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('trackback');\n</pre> <p>Once loaded, the Trackback library object will be available using:</p> <pre data-language=\"php\">$this-&gt;trackback\n</pre>   <h3 id=\"sending-trackbacks\">Sending Trackbacks</h3> <p>A Trackback can be sent from any of your controller functions using code similar to this example:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('trackback');\n\n$tb_data = array(\n        'ping_url'  =&gt; 'http://example.com/trackback/456',\n        'url'       =&gt; 'http://www.my-example.com/blog/entry/123',\n        'title'     =&gt; 'The Title of My Entry',\n        'excerpt'   =&gt; 'The entry content.',\n        'blog_name' =&gt; 'My Blog Name',\n        'charset'   =&gt; 'utf-8'\n);\n\nif ( ! $this-&gt;trackback-&gt;send($tb_data))\n{\n        echo $this-&gt;trackback-&gt;display_errors();\n}\nelse\n{\n        echo 'Trackback was sent!';\n}\n</pre> <p>Description of array data:</p> <ul class=\"simple\"> <li>\n<strong>ping_url</strong> - The URL of the site you are sending the Trackback to. You can send Trackbacks to multiple URLs by separating each URL with a comma.</li> <li>\n<strong>url</strong> - The URL to YOUR site where the weblog entry can be seen.</li> <li>\n<strong>title</strong> - The title of your weblog entry.</li> <li>\n<strong>excerpt</strong> - The content of your weblog entry.</li> <li>\n<strong>blog_name</strong> - The name of your weblog.</li> <li>\n<strong>charset</strong> - The character encoding your weblog is written in. If omitted, UTF-8 will be used.</li> </ul> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The Trackback class will automatically send only the first 500 characters of your entry. It will also strip all HTML.</p> </div> <p>The Trackback sending method returns TRUE/FALSE (boolean) on success or failure. If it fails, you can retrieve the error message using:</p> <pre data-language=\"php\">$this-&gt;trackback-&gt;display_errors();\n</pre>   <h3 id=\"receiving-trackbacks\">Receiving Trackbacks</h3> <p>Before you can receive Trackbacks you must create a weblog. If you don’t have a blog yet there’s no point in continuing.</p> <p>Receiving Trackbacks is a little more complex than sending them, only because you will need a database table in which to store them, and you will need to validate the incoming trackback data. You are encouraged to implement a thorough validation process to guard against spam and duplicate data. You may also want to limit the number of Trackbacks you allow from a particular IP within a given span of time to further curtail spam. The process of receiving a Trackback is quite simple; the validation is what takes most of the effort.</p>   <h3 id=\"your-ping-url\">Your Ping URL</h3> <p>In order to accept Trackbacks you must display a Trackback URL next to each one of your weblog entries. This will be the URL that people will use to send you Trackbacks (we will refer to this as your “Ping URL”).</p> <p>Your Ping URL must point to a controller function where your Trackback receiving code is located, and the URL must contain the ID number for each particular entry, so that when the Trackback is received you’ll be able to associate it with a particular entry.</p> <p>For example, if your controller class is called Trackback, and the receiving function is called receive, your Ping URLs will look something like this:</p> <pre data-language=\"php\">http://example.com/index.php/trackback/receive/entry_id\n</pre> <p>Where entry_id represents the individual ID number for each of your entries.</p>   <h3 id=\"creating-a-trackback-table\">Creating a Trackback Table</h3> <p>Before you can receive Trackbacks you must create a table in which to store them. Here is a basic prototype for such a table:</p> <pre data-language=\"php\">CREATE TABLE trackbacks (\n        tb_id int(10) unsigned NOT NULL auto_increment,\n        entry_id int(10) unsigned NOT NULL default 0,\n        url varchar(200) NOT NULL,\n        title varchar(100) NOT NULL,\n        excerpt text NOT NULL,\n        blog_name varchar(100) NOT NULL,\n        tb_date int(10) NOT NULL,\n        ip_address varchar(45) NOT NULL,\n        PRIMARY KEY `tb_id` (`tb_id`),\n        KEY `entry_id` (`entry_id`)\n);\n</pre> <p>The Trackback specification only requires four pieces of information to be sent in a Trackback (url, title, excerpt, blog_name), but to make the data more useful we’ve added a few more fields in the above table schema (date, IP address, etc.).</p>   <h3 id=\"processing-a-trackback\">Processing a Trackback</h3> <p>Here is an example showing how you will receive and process a Trackback. The following code is intended for use within the controller function where you expect to receive Trackbacks.:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('trackback');\n$this-&gt;load-&gt;database();\n\nif ($this-&gt;uri-&gt;segment(3) == FALSE)\n{\n        $this-&gt;trackback-&gt;send_error('Unable to determine the entry ID');\n}\n\nif ( ! $this-&gt;trackback-&gt;receive())\n{\n        $this-&gt;trackback-&gt;send_error('The Trackback did not contain valid data');\n}\n\n$data = array(\n        'tb_id'      =&gt; '',\n        'entry_id'   =&gt; $this-&gt;uri-&gt;segment(3),\n        'url'        =&gt; $this-&gt;trackback-&gt;data('url'),\n        'title'      =&gt; $this-&gt;trackback-&gt;data('title'),\n        'excerpt'    =&gt; $this-&gt;trackback-&gt;data('excerpt'),\n        'blog_name'  =&gt; $this-&gt;trackback-&gt;data('blog_name'),\n        'tb_date'    =&gt; time(),\n        'ip_address' =&gt; $this-&gt;input-&gt;ip_address()\n);\n\n$sql = $this-&gt;db-&gt;insert_string('trackbacks', $data);\n$this-&gt;db-&gt;query($sql);\n\n$this-&gt;trackback-&gt;send_success();\n</pre>  <h4 id=\"notes\">Notes:</h4> <p>The entry ID number is expected in the third segment of your URL. This is based on the URI example we gave earlier:</p> <pre data-language=\"php\">http://example.com/index.php/trackback/receive/entry_id\n</pre> <p>Notice the entry_id is in the third URI segment, which you can retrieve using:</p> <pre data-language=\"php\">$this-&gt;uri-&gt;segment(3);\n</pre> <p>In our Trackback receiving code above, if the third segment is missing, we will issue an error. Without a valid entry ID, there’s no reason to continue.</p> <p>The $this-&gt;trackback-&gt;receive() function is simply a validation function that looks at the incoming data and makes sure it contains the four pieces of data that are required (url, title, excerpt, blog_name). It returns TRUE on success and FALSE on failure. If it fails you will issue an error message.</p> <p>The incoming Trackback data can be retrieved using this function:</p> <pre data-language=\"php\">$this-&gt;trackback-&gt;data('item')\n</pre> <p>Where item represents one of these four pieces of info: url, title, excerpt, or blog_name</p> <p>If the Trackback data is successfully received, you will issue a success message using:</p> <pre data-language=\"php\">$this-&gt;trackback-&gt;send_success();\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The above code contains no data validation, which you are encouraged to add.</p> </div>     <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_Trackback\">\n<code>class CI_Trackback</code> </dt> <dd>\n<dl class=\"attribute\"> <dt>\n<code>$data = array('url' =&gt; '', 'title' =&gt; '', 'excerpt' =&gt; '', 'blog_name' =&gt; '', 'charset' =&gt; '')</code> </dt> <dd>\n<p>Trackback data array.</p> </dd>\n</dl> <dl class=\"attribute\"> <dt>\n<code>$convert_ascii = TRUE</code> </dt> <dd>\n<p>Whether to convert high ASCII and MS Word characters to HTML entities.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Trackback::send\">\n<code>send($tb_data)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$tb_data</strong> (<em>array</em>) – Trackback data</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Send trackback.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Trackback::receive\">\n<code>receive()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">TRUE on success, FALSE on failure</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">bool</td> </tr>  </table> <p>This method simply validates the incoming TB data, returning TRUE on success and FALSE on failure. If the data is valid it is set to the <code>$this-&gt;data</code> array so that it can be inserted into a database.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Trackback::send_error\">\n<code>send_error([$message = 'Incomplete information'])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$message</strong> (<em>string</em>) – Error message</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Responses to a trackback request with an error message.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This method will terminate script execution.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Trackback::send_success\">\n<code>send_success()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">void</td> </tr>  </table> <p>Responses to a trackback request with a success message.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This method will terminate script execution.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Trackback::data\">\n<code>data($item)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$item</strong> (<em>string</em>) – Data key</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Data value or empty string if not found</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Returns a single item from the reponse data array.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Trackback::process\">\n<code>process($url, $data)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$url</strong> (<em>string</em>) – Target url</li> <li>\n<strong>$data</strong> (<em>string</em>) – Raw POST data</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Opens a socket connection and passes the data to the server, returning TRUE on success and FALSE on failure.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Trackback::extract_urls\">\n<code>extract_urls($urls)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$urls</strong> (<em>string</em>) – Comma-separated URL list</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Array of URLs</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>This method lets multiple trackbacks to be sent. It takes a string of URLs (separated by comma or space) and puts each URL into an array.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Trackback::validate_url\">\n<code>validate_url(&amp;$url)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$url</strong> (<em>string</em>) – Trackback URL</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Simply adds the <em>http://</em> prefix it it’s not already present in the URL.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Trackback::get_id\">\n<code>get_id($url)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$url</strong> (<em>string</em>) – Trackback URL</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">URL ID or FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Find and return a trackback URL’s ID or FALSE on failure.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Trackback::convert_xml\">\n<code>convert_xml($str)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Converted string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Converts reserved XML characters to entities.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Trackback::limit_characters\">\n<code>limit_characters($str[, $n = 500[, $end_char = '…']])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> <li>\n<strong>$n</strong> (<em>int</em>) – Max characters number</li> <li>\n<strong>$end_char</strong> (<em>string</em>) – Character to put at end of string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Shortened string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Limits the string based on the character count. Will preserve complete words.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Trackback::convert_ascii\">\n<code>convert_ascii($str)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Converted string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Converts high ASCII text and MS Word special characterss to HTML entities.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Trackback::set_error\">\n<code>set_error($msg)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$msg</strong> (<em>string</em>) – Error message</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Set an log an error message.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Trackback::display_errors\">\n<code>display_errors([$open = '<p>'[, $close = '</p>']])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$open</strong> (<em>string</em>) – Open tag</li> <li>\n<strong>$close</strong> (<em>string</em>) – Close tag</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">HTML formatted error messages</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Returns error messages formatted in HTML or an empty string if there are no errors.</p> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/libraries/trackback.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/libraries/trackback.html</a>\n  </p>\n</div>\n","libraries/uri":"<h1 id=\"uri-class\">URI Class</h1> <p>The URI Class provides methods that help you retrieve information from your URI strings. If you use URI routing, you can also retrieve information about the re-routed segments.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This class is initialized automatically by the system so there is no need to do it manually.</p> </div>     <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_URI\">\n<code>class CI_URI</code> </dt> <dd>\n<dl class=\"method\"> <dt id=\"CI_URI::segment\">\n<code>segment($n[, $no_result = NULL])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$n</strong> (<em>int</em>) – Segment index number</li> <li>\n<strong>$no_result</strong> (<em>mixed</em>) – What to return if the searched segment is not found</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Segment value or $no_result value if not found</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Permits you to retrieve a specific segment. Where n is the segment number you wish to retrieve. Segments are numbered from left to right. For example, if your full URL is this:</p> <pre data-language=\"php\">http://example.com/index.php/news/local/metro/crime_is_up\n</pre> <p>The segment numbers would be this:</p> <ol class=\"arabic simple\"> <li>news</li> <li>local</li> <li>metro</li> <li>crime_is_up</li> </ol> <p>The optional second parameter defaults to NULL and allows you to set the return value of this method when the requested URI segment is missing. For example, this would tell the method to return the number zero in the event of failure:</p> <pre data-language=\"php\">$product_id = $this-&gt;uri-&gt;segment(3, 0);\n</pre> <p>It helps avoid having to write code like this:</p> <pre data-language=\"php\">if ($this-&gt;uri-&gt;segment(3) === FALSE)\n{\n        $product_id = 0;\n}\nelse\n{\n        $product_id = $this-&gt;uri-&gt;segment(3);\n}\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_URI::rsegment\">\n<code>rsegment($n[, $no_result = NULL])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$n</strong> (<em>int</em>) – Segment index number</li> <li>\n<strong>$no_result</strong> (<em>mixed</em>) – What to return if the searched segment is not found</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Routed segment value or $no_result value if not found</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>This method is identical to <code>segment()</code>, except that it lets you retrieve a specific segment from your re-routed URI in the event you are using CodeIgniter’s <a class=\"reference internal\" href=\"../general/routing\">URI Routing</a> feature.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_URI::slash_segment\">\n<code>slash_segment($n[, $where = 'trailing'])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$n</strong> (<em>int</em>) – Segment index number</li> <li>\n<strong>$where</strong> (<em>string</em>) – Where to add the slash (‘trailing’ or ‘leading’)</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Segment value, prepended/suffixed with a forward slash, or a slash if not found</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>This method is almost identical to <code>segment()</code>, except it adds a trailing and/or leading slash based on the second parameter. If the parameter is not used, a trailing slash added. Examples:</p> <pre data-language=\"php\">$this-&gt;uri-&gt;slash_segment(3);\n$this-&gt;uri-&gt;slash_segment(3, 'leading');\n$this-&gt;uri-&gt;slash_segment(3, 'both');\n</pre> <p>Returns:</p> <ol class=\"arabic simple\"> <li>segment/</li> <li>/segment</li> <li>/segment/</li> </ol> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_URI::slash_rsegment\">\n<code>slash_rsegment($n[, $where = 'trailing'])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$n</strong> (<em>int</em>) – Segment index number</li> <li>\n<strong>$where</strong> (<em>string</em>) – Where to add the slash (‘trailing’ or ‘leading’)</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Routed segment value, prepended/suffixed with a forward slash, or a slash if not found</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>This method is identical to <code>slash_segment()</code>, except that it lets you add slashes a specific segment from your re-routed URI in the event you are using CodeIgniter’s <a class=\"reference internal\" href=\"../general/routing\">URI Routing</a> feature.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_URI::uri_to_assoc\">\n<code>uri_to_assoc([$n = 3[, $default = array()]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$n</strong> (<em>int</em>) – Segment index number</li> <li>\n<strong>$default</strong> (<em>array</em>) – Default values</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Associative URI segments array</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>This method lets you turn URI segments into an associative array of key/value pairs. Consider this URI:</p> <pre data-language=\"php\">index.php/user/search/name/joe/location/UK/gender/male\n</pre> <p>Using this method you can turn the URI into an associative array with this prototype:</p> <pre data-language=\"php\">[array]\n(\n        'name'          =&gt; 'joe'\n        'location'      =&gt; 'UK'\n        'gender'        =&gt; 'male'\n)\n</pre> <p>The first parameter lets you set an offset, which defaults to 3 since your URI will normally contain a controller/method pair in the first and second segments. Example:</p> <pre data-language=\"php\">$array = $this-&gt;uri-&gt;uri_to_assoc(3);\necho $array['name'];\n</pre> <p>The second parameter lets you set default key names, so that the array returned will always contain expected indexes, even if missing from the URI. Example:</p> <pre data-language=\"php\">$default = array('name', 'gender', 'location', 'type', 'sort');\n$array = $this-&gt;uri-&gt;uri_to_assoc(3, $default);\n</pre> <p>If the URI does not contain a value in your default, an array index will be set to that name, with a value of NULL.</p> <p>Lastly, if a corresponding value is not found for a given key (if there is an odd number of URI segments) the value will be set to NULL.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_URI::ruri_to_assoc\">\n<code>ruri_to_assoc([$n = 3[, $default = array()]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$n</strong> (<em>int</em>) – Segment index number</li> <li>\n<strong>$default</strong> (<em>array</em>) – Default values</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Associative routed URI segments array</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>This method is identical to <code>uri_to_assoc()</code>, except that it creates an associative array using the re-routed URI in the event you are using CodeIgniter’s <a class=\"reference internal\" href=\"../general/routing\">URI Routing</a> feature.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_URI::assoc_to_uri\">\n<code>assoc_to_uri($array)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$array</strong> (<em>array</em>) – Input array of key/value pairs</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">URI string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Takes an associative array as input and generates a URI string from it. The array keys will be included in the string. Example:</p> <pre data-language=\"php\">$array = array('product' =&gt; 'shoes', 'size' =&gt; 'large', 'color' =&gt; 'red');\n$str = $this-&gt;uri-&gt;assoc_to_uri($array);\n\n// Produces: product/shoes/size/large/color/red\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_URI::uri_string\">\n<code>uri_string()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">URI string</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">string</td> </tr>  </table> <p>Returns a string with the complete URI. For example, if this is your full URL:</p> <pre data-language=\"php\">http://example.com/index.php/news/local/345\n</pre> <p>The method would return this:</p> <pre data-language=\"php\">news/local/345\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_URI::ruri_string\">\n<code>ruri_string()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Routed URI string</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">string</td> </tr>  </table> <p>This method is identical to <code>uri_string()</code>, except that it returns the re-routed URI in the event you are using CodeIgniter’s <a class=\"reference internal\" href=\"../general/routing\">URI Routing</a> feature.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_URI::total_segments\">\n<code>total_segments()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Count of URI segments</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">int</td> </tr>  </table> <p>Returns the total number of segments.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_URI::total_rsegments\">\n<code>total_rsegments()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Count of routed URI segments</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">int</td> </tr>  </table> <p>This method is identical to <code>total_segments()</code>, except that it returns the total number of segments in your re-routed URI in the event you are using CodeIgniter’s <a class=\"reference internal\" href=\"../general/routing\">URI Routing</a> feature.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_URI::segment_array\">\n<code>segment_array()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">URI segments array</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">array</td> </tr>  </table> <p>Returns an array containing the URI segments. For example:</p> <pre data-language=\"php\">$segs = $this-&gt;uri-&gt;segment_array();\n\nforeach ($segs as $segment)\n{\n        echo $segment;\n        echo '&lt;br /&gt;';\n}\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_URI::rsegment_array\">\n<code>rsegment_array()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Routed URI segments array</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">array</td> </tr>  </table> <p>This method is identical to <code>segment_array()</code>, except that it returns the array of segments in your re-routed URI in the event you are using CodeIgniter’s <a class=\"reference internal\" href=\"../general/routing\">URI Routing</a> feature.</p> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/libraries/uri.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/libraries/uri.html</a>\n  </p>\n</div>\n","libraries/form_validation":"<h1 id=\"form-validation\">Form Validation</h1> <p>CodeIgniter provides a comprehensive form validation and data prepping class that helps minimize the amount of code you’ll write.</p>  <p class=\"topic-title first\">Page Contents</p> <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#form-validation\" id=\"id6\">Form Validation</a><ul> <li><a class=\"reference internal\" href=\"#overview\" id=\"id7\">Overview</a></li> <li>\n<a class=\"reference internal\" href=\"#form-validation-tutorial\" id=\"id8\">Form Validation Tutorial</a><ul> <li><a class=\"reference internal\" href=\"#the-form\" id=\"id9\">The Form</a></li> <li><a class=\"reference internal\" href=\"#the-success-page\" id=\"id10\">The Success Page</a></li> <li><a class=\"reference internal\" href=\"#the-controller\" id=\"id11\">The Controller</a></li> <li><a class=\"reference internal\" href=\"#try-it\" id=\"id12\">Try it!</a></li> <li><a class=\"reference internal\" href=\"#explanation\" id=\"id13\">Explanation</a></li> <li><a class=\"reference internal\" href=\"#setting-validation-rules\" id=\"id14\">Setting Validation Rules</a></li> <li><a class=\"reference internal\" href=\"#setting-rules-using-an-array\" id=\"id15\">Setting Rules Using an Array</a></li> <li><a class=\"reference internal\" href=\"#cascading-rules\" id=\"id16\">Cascading Rules</a></li> <li><a class=\"reference internal\" href=\"#prepping-data\" id=\"id17\">Prepping Data</a></li> <li><a class=\"reference internal\" href=\"#re-populating-the-form\" id=\"id18\">Re-populating the form</a></li> <li><a class=\"reference internal\" href=\"#callbacks-your-own-validation-methods\" id=\"id19\">Callbacks: Your own Validation Methods</a></li> <li><a class=\"reference internal\" href=\"#callable-use-anything-as-a-rule\" id=\"id20\">Callable: Use anything as a rule</a></li> <li><a class=\"reference internal\" href=\"#setting-error-messages\" id=\"id21\">Setting Error Messages</a></li> <li><a class=\"reference internal\" href=\"#translating-field-names\" id=\"id22\">Translating Field Names</a></li> <li><a class=\"reference internal\" href=\"#changing-the-error-delimiters\" id=\"id23\">Changing the Error Delimiters</a></li> <li><a class=\"reference internal\" href=\"#showing-errors-individually\" id=\"id24\">Showing Errors Individually</a></li> <li><a class=\"reference internal\" href=\"#validating-an-array-other-than-post\" id=\"id25\">Validating an Array (other than $_POST)</a></li> </ul> </li> <li>\n<a class=\"reference internal\" href=\"#saving-sets-of-validation-rules-to-a-config-file\" id=\"id26\">Saving Sets of Validation Rules to a Config File</a><ul> <li><a class=\"reference internal\" href=\"#how-to-save-your-rules\" id=\"id27\">How to save your rules</a></li> <li><a class=\"reference internal\" href=\"#creating-sets-of-rules\" id=\"id28\">Creating Sets of Rules</a></li> <li><a class=\"reference internal\" href=\"#calling-a-specific-rule-group\" id=\"id29\">Calling a Specific Rule Group</a></li> <li><a class=\"reference internal\" href=\"#associating-a-controller-method-with-a-rule-group\" id=\"id30\">Associating a Controller Method with a Rule Group</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#using-arrays-as-field-names\" id=\"id31\">Using Arrays as Field Names</a></li> <li><a class=\"reference internal\" href=\"#rule-reference\" id=\"id32\">Rule Reference</a></li> <li><a class=\"reference internal\" href=\"#prepping-reference\" id=\"id33\">Prepping Reference</a></li> <li><a class=\"reference internal\" href=\"#class-reference\" id=\"id34\">Class Reference</a></li> <li><a class=\"reference internal\" href=\"#helper-reference\" id=\"id35\">Helper Reference</a></li> </ul> </li> </ul>   <h2 id=\"overview\">Overview</h2> <p>Before explaining CodeIgniter’s approach to data validation, let’s describe the ideal scenario:</p> <ol class=\"arabic simple\"> <li>A form is displayed.</li> <li>You fill it in and submit it.</li> <li>If you submitted something invalid, or perhaps missed a required item, the form is redisplayed containing your data along with an error message describing the problem.</li> <li>This process continues until you have submitted a valid form.</li> </ol> <p>On the receiving end, the script must:</p> <ol class=\"arabic simple\"> <li>Check for required data.</li> <li>Verify that the data is of the correct type, and meets the correct criteria. For example, if a username is submitted it must be validated to contain only permitted characters. It must be of a minimum length, and not exceed a maximum length. The username can’t be someone else’s existing username, or perhaps even a reserved word. Etc.</li> <li>Sanitize the data for security.</li> <li>Pre-format the data if needed (Does the data need to be trimmed? HTML encoded? Etc.)</li> <li>Prep the data for insertion in the database.</li> </ol> <p>Although there is nothing terribly complex about the above process, it usually requires a significant amount of code, and to display error messages, various control structures are usually placed within the form HTML. Form validation, while simple to create, is generally very messy and tedious to implement.</p>   <h2 id=\"form-validation-tutorial\">Form Validation Tutorial</h2> <p>What follows is a “hands on” tutorial for implementing CodeIgniters Form Validation.</p> <p>In order to implement form validation you’ll need three things:</p> <ol class=\"arabic simple\"> <li>A <a class=\"reference internal\" href=\"../general/views\">View</a> file containing a form.</li> <li>A View file containing a “success” message to be displayed upon successful submission.</li> <li>A <a class=\"reference internal\" href=\"../general/controllers\">controller</a> method to receive and process the submitted data.</li> </ol> <p>Let’s create those three things, using a member sign-up form as the example.</p>  <h3 id=\"the-form\">The Form</h3> <p>Using a text editor, create a form called myform.php. In it, place this code and save it to your application/views/ folder:</p> <pre data-language=\"php\">&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;My Form&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;?php echo validation_errors(); ?&gt;\n\n&lt;?php echo form_open('form'); ?&gt;\n\n&lt;h5&gt;Username&lt;/h5&gt;\n&lt;input type=\"text\" name=\"username\" value=\"\" size=\"50\" /&gt;\n\n&lt;h5&gt;Password&lt;/h5&gt;\n&lt;input type=\"text\" name=\"password\" value=\"\" size=\"50\" /&gt;\n\n&lt;h5&gt;Password Confirm&lt;/h5&gt;\n&lt;input type=\"text\" name=\"passconf\" value=\"\" size=\"50\" /&gt;\n\n&lt;h5&gt;Email Address&lt;/h5&gt;\n&lt;input type=\"text\" name=\"email\" value=\"\" size=\"50\" /&gt;\n\n&lt;div&gt;&lt;input type=\"submit\" value=\"Submit\" /&gt;&lt;/div&gt;\n\n&lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>   <h3 id=\"the-success-page\">The Success Page</h3> <p>Using a text editor, create a form called formsuccess.php. In it, place this code and save it to your application/views/ folder:</p> <pre data-language=\"php\">&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;My Form&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;h3&gt;Your form was successfully submitted!&lt;/h3&gt;\n\n&lt;p&gt;&lt;?php echo anchor('form', 'Try it again!'); ?&gt;&lt;/p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>   <h3 id=\"the-controller\">The Controller</h3> <p>Using a text editor, create a controller called Form.php. In it, place this code and save it to your application/controllers/ folder:</p> <pre data-language=\"php\">&lt;?php\n\nclass Form extends CI_Controller {\n\n        public function index()\n        {\n                $this-&gt;load-&gt;helper(array('form', 'url'));\n\n                $this-&gt;load-&gt;library('form_validation');\n\n                if ($this-&gt;form_validation-&gt;run() == FALSE)\n                {\n                        $this-&gt;load-&gt;view('myform');\n                }\n                else\n                {\n                        $this-&gt;load-&gt;view('formsuccess');\n                }\n        }\n}\n</pre>   <h3 id=\"try-it\">Try it!</h3> <p>To try your form, visit your site using a URL similar to this one:</p> <pre data-language=\"php\">example.com/index.php/form/\n</pre> <p>If you submit the form you should simply see the form reload. That’s because you haven’t set up any validation rules yet.</p> <p><strong>Since you haven’t told the Form Validation class to validate anything yet, it returns FALSE (boolean false) by default. ``The run()`` method only returns TRUE if it has successfully applied your rules without any of them failing.</strong></p>   <h3 id=\"explanation\">Explanation</h3> <p>You’ll notice several things about the above pages:</p> <p>The form (myform.php) is a standard web form with a couple exceptions:</p> <ol class=\"arabic\"> <li>It uses a form helper to create the form opening. Technically, this isn’t necessary. You could create the form using standard HTML. However, the benefit of using the helper is that it generates the action URL for you, based on the URL in your config file. This makes your application more portable in the event your URLs change. </li> <li>\n<p class=\"first\">At the top of the form you’ll notice the following function call:</p> <pre data-language=\"php\">&lt;?php echo validation_errors(); ?&gt;\n</pre> <p>This function will return any error messages sent back by the validator. If there are no messages it returns an empty string.</p> </li> </ol> <p>The controller (Form.php) has one method: <code>index()</code>. This method initializes the validation class and loads the form helper and URL helper used by your view files. It also runs the validation routine. Based on whether the validation was successful it either presents the form or the success page.</p>   <h3 id=\"id1\">Setting Validation Rules</h3> <p id=\"setting-validation-rules\">CodeIgniter lets you set as many validation rules as you need for a given field, cascading them in order, and it even lets you prep and pre-process the field data at the same time. To set validation rules you will use the <code>set_rules()</code> method:</p> <pre data-language=\"php\">$this-&gt;form_validation-&gt;set_rules();\n</pre> <p>The above method takes <strong>three</strong> parameters as input:</p> <ol class=\"arabic simple\"> <li>The field name - the exact name you’ve given the form field.</li> <li>A “human” name for this field, which will be inserted into the error message. For example, if your field is named “user” you might give it a human name of “Username”.</li> <li>The validation rules for this form field.</li> <li>(optional) Set custom error messages on any rules given for current field. If not provided will use the default one.</li> </ol> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If you would like the field name to be stored in a language file, please see <a class=\"reference internal\" href=\"#translating-field-names\">Translating Field Names</a>.</p> </div> <p>Here is an example. In your controller (Form.php), add this code just below the validation initialization method:</p> <pre data-language=\"php\">$this-&gt;form_validation-&gt;set_rules('username', 'Username', 'required');\n$this-&gt;form_validation-&gt;set_rules('password', 'Password', 'required');\n$this-&gt;form_validation-&gt;set_rules('passconf', 'Password Confirmation', 'required');\n$this-&gt;form_validation-&gt;set_rules('email', 'Email', 'required');\n</pre> <p>Your controller should now look like this:</p> <pre data-language=\"php\">&lt;?php\n\nclass Form extends CI_Controller {\n\n        public function index()\n        {\n                $this-&gt;load-&gt;helper(array('form', 'url'));\n\n                $this-&gt;load-&gt;library('form_validation');\n\n                $this-&gt;form_validation-&gt;set_rules('username', 'Username', 'required');\n                $this-&gt;form_validation-&gt;set_rules('password', 'Password', 'required',\n                        array('required' =&gt; 'You must provide a %s.')\n                );\n                $this-&gt;form_validation-&gt;set_rules('passconf', 'Password Confirmation', 'required');\n                $this-&gt;form_validation-&gt;set_rules('email', 'Email', 'required');\n\n                if ($this-&gt;form_validation-&gt;run() == FALSE)\n                {\n                        $this-&gt;load-&gt;view('myform');\n                }\n                else\n                {\n                        $this-&gt;load-&gt;view('formsuccess');\n                }\n        }\n}\n</pre> <p>Now submit the form with the fields blank and you should see the error messages. If you submit the form with all the fields populated you’ll see your success page.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The form fields are not yet being re-populated with the data when there is an error. We’ll get to that shortly.</p> </div>   <h3 id=\"setting-rules-using-an-array\">Setting Rules Using an Array</h3> <p>Before moving on it should be noted that the rule setting method can be passed an array if you prefer to set all your rules in one action. If you use this approach, you must name your array keys as indicated:</p> <pre data-language=\"php\">$config = array(\n        array(\n                'field' =&gt; 'username',\n                'label' =&gt; 'Username',\n                'rules' =&gt; 'required'\n        ),\n        array(\n                'field' =&gt; 'password',\n                'label' =&gt; 'Password',\n                'rules' =&gt; 'required',\n                'errors' =&gt; array(\n                        'required' =&gt; 'You must provide a %s.',\n                ),\n        ),\n        array(\n                'field' =&gt; 'passconf',\n                'label' =&gt; 'Password Confirmation',\n                'rules' =&gt; 'required'\n        ),\n        array(\n                'field' =&gt; 'email',\n                'label' =&gt; 'Email',\n                'rules' =&gt; 'required'\n        )\n);\n\n$this-&gt;form_validation-&gt;set_rules($config);\n</pre>   <h3 id=\"cascading-rules\">Cascading Rules</h3> <p>CodeIgniter lets you pipe multiple rules together. Let’s try it. Change your rules in the third parameter of rule setting method, like this:</p> <pre data-language=\"php\">$this-&gt;form_validation-&gt;set_rules(\n        'username', 'Username',\n        'required|min_length[5]|max_length[12]|is_unique[users.username]',\n        array(\n                'required'      =&gt; 'You have not provided %s.',\n                'is_unique'     =&gt; 'This %s already exists.'\n        )\n);\n$this-&gt;form_validation-&gt;set_rules('password', 'Password', 'required');\n$this-&gt;form_validation-&gt;set_rules('passconf', 'Password Confirmation', 'required|matches[password]');\n$this-&gt;form_validation-&gt;set_rules('email', 'Email', 'required|valid_email|is_unique[users.email]');\n</pre> <p>The above code sets the following rules:</p> <ol class=\"arabic simple\"> <li>The username field be no shorter than 5 characters and no longer than 12.</li> <li>The password field must match the password confirmation field.</li> <li>The email field must contain a valid email address.</li> </ol> <p>Give it a try! Submit your form without the proper data and you’ll see new error messages that correspond to your new rules. There are numerous rules available which you can read about in the validation reference.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>You can also pass an array of rules to <code>set_rules()</code>, instead of a string. Example:</p> <pre data-language=\"php\">$this-&gt;form_validation-&gt;set_rules('username', 'Username', array('required', 'min_length[5]'));\n</pre> </div>   <h3 id=\"prepping-data\">Prepping Data</h3> <p>In addition to the validation method like the ones we used above, you can also prep your data in various ways. For example, you can set up rules like this:</p> <pre data-language=\"php\">$this-&gt;form_validation-&gt;set_rules('username', 'Username', 'trim|required|min_length[5]|max_length[12]');\n$this-&gt;form_validation-&gt;set_rules('password', 'Password', 'trim|required|min_length[8]');\n$this-&gt;form_validation-&gt;set_rules('passconf', 'Password Confirmation', 'trim|required|matches[password]');\n$this-&gt;form_validation-&gt;set_rules('email', 'Email', 'trim|required|valid_email');\n</pre> <p>In the above example, we are “trimming” the fields, checking for length where necessary and making sure that both password fields match.</p> <p><strong>Any native PHP function that accepts one parameter can be used as a rule, like ``htmlspecialchars()``, ``trim()``, etc.</strong></p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">You will generally want to use the prepping functions <strong>after</strong> the validation rules so if there is an error, the original data will be shown in the form.</p> </div>   <h3 id=\"re-populating-the-form\">Re-populating the form</h3> <p>Thus far we have only been dealing with errors. It’s time to repopulate the form field with the submitted data. CodeIgniter offers several helper functions that permit you to do this. The one you will use most commonly is:</p> <pre data-language=\"php\">set_value('field name')\n</pre> <p>Open your myform.php view file and update the <strong>value</strong> in each field using the <a class=\"reference internal\" href=\"../helpers/form_helper#set_value\" title=\"set_value\"><code>set_value()</code></a> function:</p> <p><strong>Don’t forget to include each field name in the :php:func:`set_value()` function calls!</strong></p> <pre data-language=\"php\">&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;My Form&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;?php echo validation_errors(); ?&gt;\n\n&lt;?php echo form_open('form'); ?&gt;\n\n&lt;h5&gt;Username&lt;/h5&gt;\n&lt;input type=\"text\" name=\"username\" value=\"&lt;?php echo set_value('username'); ?&gt;\" size=\"50\" /&gt;\n\n&lt;h5&gt;Password&lt;/h5&gt;\n&lt;input type=\"text\" name=\"password\" value=\"&lt;?php echo set_value('password'); ?&gt;\" size=\"50\" /&gt;\n\n&lt;h5&gt;Password Confirm&lt;/h5&gt;\n&lt;input type=\"text\" name=\"passconf\" value=\"&lt;?php echo set_value('passconf'); ?&gt;\" size=\"50\" /&gt;\n\n&lt;h5&gt;Email Address&lt;/h5&gt;\n&lt;input type=\"text\" name=\"email\" value=\"&lt;?php echo set_value('email'); ?&gt;\" size=\"50\" /&gt;\n\n&lt;div&gt;&lt;input type=\"submit\" value=\"Submit\" /&gt;&lt;/div&gt;\n\n&lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</pre> <p>Now reload your page and submit the form so that it triggers an error. Your form fields should now be re-populated</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <a class=\"reference internal\" href=\"#class-reference\">Class Reference</a> section below contains methods that permit you to re-populate &lt;select&gt; menus, radio buttons, and checkboxes.</p> </div> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p>If you use an array as the name of a form field, you must supply it as an array to the function. Example:</p> <pre data-language=\"php\">&lt;input type=\"text\" name=\"colors[]\" value=\"&lt;?php echo set_value('colors[]'); ?&gt;\" size=\"50\" /&gt;\n</pre> </div> <p>For more info please see the <a class=\"reference internal\" href=\"#using-arrays-as-field-names\">Using Arrays as Field Names</a> section below.</p>   <h3 id=\"callbacks-your-own-validation-methods\">Callbacks: Your own Validation Methods</h3> <p>The validation system supports callbacks to your own validation methods. This permits you to extend the validation class to meet your needs. For example, if you need to run a database query to see if the user is choosing a unique username, you can create a callback method that does that. Let’s create an example of this.</p> <p>In your controller, change the “username” rule to this:</p> <pre data-language=\"php\">$this-&gt;form_validation-&gt;set_rules('username', 'Username', 'callback_username_check');\n</pre> <p>Then add a new method called <code>username_check()</code> to your controller. Here’s how your controller should now look:</p> <pre data-language=\"php\">&lt;?php\n\nclass Form extends CI_Controller {\n\n        public function index()\n        {\n                $this-&gt;load-&gt;helper(array('form', 'url'));\n\n                $this-&gt;load-&gt;library('form_validation');\n\n                $this-&gt;form_validation-&gt;set_rules('username', 'Username', 'callback_username_check');\n                $this-&gt;form_validation-&gt;set_rules('password', 'Password', 'required');\n                $this-&gt;form_validation-&gt;set_rules('passconf', 'Password Confirmation', 'required');\n                $this-&gt;form_validation-&gt;set_rules('email', 'Email', 'required|is_unique[users.email]');\n\n                if ($this-&gt;form_validation-&gt;run() == FALSE)\n                {\n                        $this-&gt;load-&gt;view('myform');\n                }\n                else\n                {\n                        $this-&gt;load-&gt;view('formsuccess');\n                }\n        }\n\n        public function username_check($str)\n        {\n                if ($str == 'test')\n                {\n                        $this-&gt;form_validation-&gt;set_message('username_check', 'The {field} field can not be the word \"test\"');\n                        return FALSE;\n                }\n                else\n                {\n                        return TRUE;\n                }\n        }\n\n}\n</pre> <p>Reload your form and submit it with the word “test” as the username. You can see that the form field data was passed to your callback method for you to process.</p> <p>To invoke a callback just put the method name in a rule, with “callback_” as the rule <strong>prefix</strong>. If you need to receive an extra parameter in your callback method, just add it normally after the method name between square brackets, as in: <code>callback_foo[bar]</code>, then it will be passed as the second argument of your callback method.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">You can also process the form data that is passed to your callback and return it. If your callback returns anything other than a boolean TRUE/FALSE it is assumed that the data is your newly processed form data.</p> </div>   <h3 id=\"callable-use-anything-as-a-rule\">Callable: Use anything as a rule</h3> <p>If callback rules aren’t good enough for you (for example, because they are limited to your controller), don’t get disappointed, there’s one more way to create custom rules: anything that <code>is_callable()</code> would return TRUE for.</p> <p>Consider the following example:</p> <pre data-language=\"php\">$this-&gt;form_validation-&gt;set_rules(\n        'username', 'Username',\n        array(\n                'required',\n                array($this-&gt;users_model, 'valid_username')\n        )\n);\n</pre> <p>The above code would use the <code>valid_username()</code> method from your <code>Users_model</code> object.</p> <p>This is just an example of course, and callbacks aren’t limited to models. You can use any object/method that accepts the field value as its’ first parameter. Or if you’re running PHP 5.3+, you can also use an anonymous function:</p> <pre data-language=\"php\">$this-&gt;form_validation-&gt;set_rules(\n        'username', 'Username',\n        array(\n                'required',\n                function($value)\n                {\n                        // Check $value\n                }\n        )\n);\n</pre> <p>Of course, since a Callable rule by itself is not a string, it isn’t a rule name either. That is a problem when you want to set error messages for them. In order to get around that problem, you can put such rules as the second element of an array, with the first one being the rule name:</p> <pre data-language=\"php\">$this-&gt;form_validation-&gt;set_rules(\n        'username', 'Username',\n        array(\n                'required',\n                array('username_callable', array($this-&gt;users_model, 'valid_username'))\n        )\n);\n</pre> <p>Anonymous function (PHP 5.3+) version:</p> <pre data-language=\"php\">$this-&gt;form_validation-&gt;set_rules(\n        'username', 'Username',\n        array(\n                'required',\n                array(\n                        'username_callable',\n                        function($str)\n                        {\n                                // Check validity of $str and return TRUE or FALSE\n                        }\n                )\n        )\n);\n</pre>   <h3 id=\"id2\">Setting Error Messages</h3> <p id=\"setting-error-messages\">All of the native error messages are located in the following language file: <strong>system/language/english/form_validation_lang.php</strong></p> <p>To set your own global custom message for a rule, you can either extend/override the language file by creating your own in <strong>application/language/english/form_validation_lang.php</strong> (read more about this in the <a class=\"reference internal\" href=\"language\">Language Class</a> documentation), or use the following method:</p> <pre data-language=\"php\">$this-&gt;form_validation-&gt;set_message('rule', 'Error Message');\n</pre> <p>If you need to set a custom error message for a particular field on some particular rule, use the set_rules() method:</p> <pre data-language=\"php\">$this-&gt;form_validation-&gt;set_rules('field_name', 'Field Label', 'rule1|rule2|rule3',\n        array('rule2' =&gt; 'Error Message on rule2 for this field_name')\n);\n</pre> <p>Where rule corresponds to the name of a particular rule, and Error Message is the text you would like displayed.</p> <p>If you’d like to include a field’s “human” name, or the optional parameter some rules allow for (such as max_length), you can add the <strong>{field}</strong> and <strong>{param}</strong> tags to your message, respectively:</p> <pre data-language=\"php\">$this-&gt;form_validation-&gt;set_message('min_length', '{field} must have at least {param} characters.');\n</pre> <p>On a field with the human name Username and a rule of min_length[5], an error would display: “Username must have at least 5 characters.”</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The old <cite>sprintf()</cite> method of using <strong>%s</strong> in your error messages will still work, however it will override the tags above. You should use one or the other.</p> </div> <p>In the callback rule example above, the error message was set by passing the name of the method (without the “callback_” prefix):</p> <pre data-language=\"php\">$this-&gt;form_validation-&gt;set_message('username_check')\n</pre>   <h3 id=\"id3\">Translating Field Names</h3> <p id=\"translating-field-names\">If you would like to store the “human” name you passed to the <code>set_rules()</code> method in a language file, and therefore make the name able to be translated, here’s how:</p> <p>First, prefix your “human” name with <strong>lang:</strong>, as in this example:</p> <pre data-language=\"php\">$this-&gt;form_validation-&gt;set_rules('first_name', 'lang:first_name', 'required');\n</pre> <p>Then, store the name in one of your language file arrays (without the prefix):</p> <pre data-language=\"php\">$lang['first_name'] = 'First Name';\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>If you store your array item in a language file that is not loaded automatically by CI, you’ll need to remember to load it in your controller using:</p> <pre data-language=\"php\">$this-&gt;lang-&gt;load('file_name');\n</pre> </div> <p>See the <a class=\"reference internal\" href=\"language\">Language Class</a> page for more info regarding language files.</p>   <h3 id=\"changing-delimiters\">Changing the Error Delimiters</h3> <p id=\"changing-the-error-delimiters\">By default, the Form Validation class adds a paragraph tag (&lt;p&gt;) around each error message shown. You can either change these delimiters globally, individually, or change the defaults in a config file.</p> <ol class=\"arabic\"> <li>\n<p class=\"first\"><strong>Changing delimiters Globally</strong> To globally change the error delimiters, in your controller method, just after loading the Form Validation class, add this:</p> <pre data-language=\"php\">$this-&gt;form_validation-&gt;set_error_delimiters('&lt;div class=\"error\"&gt;', '&lt;/div&gt;');\n</pre> <p>In this example, we’ve switched to using div tags.</p> </li> <li>\n<p class=\"first\"><strong>Changing delimiters Individually</strong> Each of the two error generating functions shown in this tutorial can be supplied their own delimiters as follows:</p> <pre data-language=\"php\">&lt;?php echo form_error('field name', '&lt;div class=\"error\"&gt;', '&lt;/div&gt;'); ?&gt;\n</pre> <p>Or:</p> <pre data-language=\"php\">&lt;?php echo validation_errors('&lt;div class=\"error\"&gt;', '&lt;/div&gt;'); ?&gt;\n</pre> </li> <li>\n<p class=\"first\"><strong>Set delimiters in a config file</strong> You can add your error delimiters in application/config/form_validation.php as follows:</p> <pre data-language=\"php\">$config['error_prefix'] = '&lt;div class=\"error_prefix\"&gt;';\n$config['error_suffix'] = '&lt;/div&gt;';\n</pre> </li> </ol>   <h3 id=\"showing-errors-individually\">Showing Errors Individually</h3> <p>If you prefer to show an error message next to each form field, rather than as a list, you can use the <a class=\"reference internal\" href=\"../helpers/form_helper#form_error\" title=\"form_error\"><code>form_error()</code></a> function.</p> <p>Try it! Change your form so that it looks like this:</p> <pre data-language=\"php\">&lt;h5&gt;Username&lt;/h5&gt;\n&lt;?php echo form_error('username'); ?&gt;\n&lt;input type=\"text\" name=\"username\" value=\"&lt;?php echo set_value('username'); ?&gt;\" size=\"50\" /&gt;\n\n&lt;h5&gt;Password&lt;/h5&gt;\n&lt;?php echo form_error('password'); ?&gt;\n&lt;input type=\"text\" name=\"password\" value=\"&lt;?php echo set_value('password'); ?&gt;\" size=\"50\" /&gt;\n\n&lt;h5&gt;Password Confirm&lt;/h5&gt;\n&lt;?php echo form_error('passconf'); ?&gt;\n&lt;input type=\"text\" name=\"passconf\" value=\"&lt;?php echo set_value('passconf'); ?&gt;\" size=\"50\" /&gt;\n\n&lt;h5&gt;Email Address&lt;/h5&gt;\n&lt;?php echo form_error('email'); ?&gt;\n&lt;input type=\"text\" name=\"email\" value=\"&lt;?php echo set_value('email'); ?&gt;\" size=\"50\" /&gt;\n</pre> <p>If there are no errors, nothing will be shown. If there is an error, the message will appear.</p> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p>If you use an array as the name of a form field, you must supply it as an array to the function. Example:</p> <pre data-language=\"php\">&lt;?php echo form_error('options[size]'); ?&gt;\n&lt;input type=\"text\" name=\"options[size]\" value=\"&lt;?php echo set_value(\"options[size]\"); ?&gt;\" size=\"50\" /&gt;\n</pre> </div> <p>For more info please see the <a class=\"reference internal\" href=\"#using-arrays-as-field-names\">Using Arrays as Field Names</a> section below.</p>   <h3 id=\"validating-an-array-other-than-post\">Validating an Array (other than $_POST)</h3> <p>Sometimes you may want to validate an array that does not originate from <code>$_POST</code> data.</p> <p>In this case, you can specify the array to be validated:</p> <pre data-language=\"php\">$data = array(\n        'username' =&gt; 'johndoe',\n        'password' =&gt; 'mypassword',\n        'passconf' =&gt; 'mypassword'\n);\n\n$this-&gt;form_validation-&gt;set_data($data);\n</pre> <p>Creating validation rules, running the validation, and retrieving error messages works the same whether you are validating <code>$_POST</code> data or another array of your choice.</p> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">You have to call the <code>set_data()</code> method <em>before</em> defining any validation rules.</p> </div> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">If you want to validate more than one array during a single execution, then you should call the <code>reset_validation()</code> method before setting up rules and validating the new array.</p> </div> <p>For more info please see the <a class=\"reference internal\" href=\"#class-reference\">Class Reference</a> section below.</p>    <h2 id=\"saving-groups\">Saving Sets of Validation Rules to a Config File</h2> <p id=\"saving-sets-of-validation-rules-to-a-config-file\">A nice feature of the Form Validation class is that it permits you to store all your validation rules for your entire application in a config file. You can organize these rules into “groups”. These groups can either be loaded automatically when a matching controller/method is called, or you can manually call each set as needed.</p>  <h3 id=\"how-to-save-your-rules\">How to save your rules</h3> <p>To store your validation rules, simply create a file named form_validation.php in your application/config/ folder. In that file you will place an array named $config with your rules. As shown earlier, the validation array will have this prototype:</p> <pre data-language=\"php\">$config = array(\n        array(\n                'field' =&gt; 'username',\n                'label' =&gt; 'Username',\n                'rules' =&gt; 'required'\n        ),\n        array(\n                'field' =&gt; 'password',\n                'label' =&gt; 'Password',\n                'rules' =&gt; 'required'\n        ),\n        array(\n                'field' =&gt; 'passconf',\n                'label' =&gt; 'Password Confirmation',\n                'rules' =&gt; 'required'\n        ),\n        array(\n                'field' =&gt; 'email',\n                'label' =&gt; 'Email',\n                'rules' =&gt; 'required'\n        )\n);\n</pre> <p>Your validation rule file will be loaded automatically and used when you call the <code>run()</code> method.</p> <p>Please note that you MUST name your <code>$config</code> array.</p>   <h3 id=\"creating-sets-of-rules\">Creating Sets of Rules</h3> <p>In order to organize your rules into “sets” requires that you place them into “sub arrays”. Consider the following example, showing two sets of rules. We’ve arbitrarily called these two rules “signup” and “email”. You can name your rules anything you want:</p> <pre data-language=\"php\">$config = array(\n        'signup' =&gt; array(\n                array(\n                        'field' =&gt; 'username',\n                        'label' =&gt; 'Username',\n                        'rules' =&gt; 'required'\n                ),\n                array(\n                        'field' =&gt; 'password',\n                        'label' =&gt; 'Password',\n                        'rules' =&gt; 'required'\n                ),\n                array(\n                        'field' =&gt; 'passconf',\n                        'label' =&gt; 'Password Confirmation',\n                        'rules' =&gt; 'required'\n                ),\n                array(\n                        'field' =&gt; 'email',\n                        'label' =&gt; 'Email',\n                        'rules' =&gt; 'required'\n                )\n        ),\n        'email' =&gt; array(\n                array(\n                        'field' =&gt; 'emailaddress',\n                        'label' =&gt; 'EmailAddress',\n                        'rules' =&gt; 'required|valid_email'\n                ),\n                array(\n                        'field' =&gt; 'name',\n                        'label' =&gt; 'Name',\n                        'rules' =&gt; 'required|alpha'\n                ),\n                array(\n                        'field' =&gt; 'title',\n                        'label' =&gt; 'Title',\n                        'rules' =&gt; 'required'\n                ),\n                array(\n                        'field' =&gt; 'message',\n                        'label' =&gt; 'MessageBody',\n                        'rules' =&gt; 'required'\n                )\n        )\n);\n</pre>   <h3 id=\"calling-a-specific-rule-group\">Calling a Specific Rule Group</h3> <p>In order to call a specific group, you will pass its name to the <code>run()</code> method. For example, to call the signup rule you will do this:</p> <pre data-language=\"php\">if ($this-&gt;form_validation-&gt;run('signup') == FALSE)\n{\n        $this-&gt;load-&gt;view('myform');\n}\nelse\n{\n        $this-&gt;load-&gt;view('formsuccess');\n}\n</pre>   <h3 id=\"associating-a-controller-method-with-a-rule-group\">Associating a Controller Method with a Rule Group</h3> <p>An alternate (and more automatic) method of calling a rule group is to name it according to the controller class/method you intend to use it with. For example, let’s say you have a controller named Member and a method named signup. Here’s what your class might look like:</p> <pre data-language=\"php\">&lt;?php\n\nclass Member extends CI_Controller {\n\n        public function signup()\n        {\n                $this-&gt;load-&gt;library('form_validation');\n\n                if ($this-&gt;form_validation-&gt;run() == FALSE)\n                {\n                        $this-&gt;load-&gt;view('myform');\n                }\n                else\n                {\n                        $this-&gt;load-&gt;view('formsuccess');\n                }\n        }\n}\n</pre> <p>In your validation config file, you will name your rule group member/signup:</p> <pre data-language=\"php\">$config = array(\n        'member/signup' =&gt; array(\n                array(\n                        'field' =&gt; 'username',\n                        'label' =&gt; 'Username',\n                        'rules' =&gt; 'required'\n                ),\n                array(\n                        'field' =&gt; 'password',\n                        'label' =&gt; 'Password',\n                        'rules' =&gt; 'required'\n                ),\n                array(\n                        'field' =&gt; 'passconf',\n                        'label' =&gt; 'PasswordConfirmation',\n                        'rules' =&gt; 'required'\n                ),\n                array(\n                        'field' =&gt; 'email',\n                        'label' =&gt; 'Email',\n                        'rules' =&gt; 'required'\n                )\n        )\n);\n</pre> <p>When a rule group is named identically to a controller class/method it will be used automatically when the <code>run()</code> method is invoked from that class/method.</p>    <h2 id=\"id4\">Using Arrays as Field Names</h2> <p id=\"using-arrays-as-field-names\">The Form Validation class supports the use of arrays as field names. Consider this example:</p> <pre data-language=\"php\">&lt;input type=\"text\" name=\"options[]\" value=\"\" size=\"50\" /&gt;\n</pre> <p>If you do use an array as a field name, you must use the EXACT array name in the <a class=\"reference internal\" href=\"#helper-functions\">Helper Functions</a> that require the field name, and as your Validation Rule field name.</p> <p>For example, to set a rule for the above field you would use:</p> <pre data-language=\"php\">$this-&gt;form_validation-&gt;set_rules('options[]', 'Options', 'required');\n</pre> <p>Or, to show an error for the above field you would use:</p> <pre data-language=\"php\">&lt;?php echo form_error('options[]'); ?&gt;\n</pre> <p>Or to re-populate the field you would use:</p> <pre data-language=\"php\">&lt;input type=\"text\" name=\"options[]\" value=\"&lt;?php echo set_value('options[]'); ?&gt;\" size=\"50\" /&gt;\n</pre> <p>You can use multidimensional arrays as field names as well. For example:</p> <pre data-language=\"php\">&lt;input type=\"text\" name=\"options[size]\" value=\"\" size=\"50\" /&gt;\n</pre> <p>Or even:</p> <pre data-language=\"php\">&lt;input type=\"text\" name=\"sports[nba][basketball]\" value=\"\" size=\"50\" /&gt;\n</pre> <p>As with our first example, you must use the exact array name in the helper functions:</p> <pre data-language=\"php\">&lt;?php echo form_error('sports[nba][basketball]'); ?&gt;\n</pre> <p>If you are using checkboxes (or other fields) that have multiple options, don’t forget to leave an empty bracket after each option, so that all selections will be added to the POST array:</p> <pre data-language=\"php\">&lt;input type=\"checkbox\" name=\"options[]\" value=\"red\" /&gt;\n&lt;input type=\"checkbox\" name=\"options[]\" value=\"blue\" /&gt;\n&lt;input type=\"checkbox\" name=\"options[]\" value=\"green\" /&gt;\n</pre> <p>Or if you use a multidimensional array:</p> <pre data-language=\"php\">&lt;input type=\"checkbox\" name=\"options[color][]\" value=\"red\" /&gt;\n&lt;input type=\"checkbox\" name=\"options[color][]\" value=\"blue\" /&gt;\n&lt;input type=\"checkbox\" name=\"options[color][]\" value=\"green\" /&gt;\n</pre> <p>When you use a helper function you’ll include the bracket as well:</p> <pre data-language=\"php\">&lt;?php echo form_error('options[color][]'); ?&gt;\n</pre>   <h2 id=\"rule-reference\">Rule Reference</h2> <p>The following is a list of all the native rules that are available to use:</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Rule</th> <th class=\"head\">Parameter</th> <th class=\"head\">Description</th> <th class=\"head\">Example</th> </tr> </thead>  <tr class=\"row-even\">\n<td><strong>required</strong></td> <td>No</td> <td>Returns FALSE if the form element is empty.</td> <td> </td> </tr> <tr class=\"row-odd\">\n<td><strong>matches</strong></td> <td>Yes</td> <td>Returns FALSE if the form element does not match the one in the parameter.</td> <td>matches[form_item]</td> </tr> <tr class=\"row-even\">\n<td><strong>regex_match</strong></td> <td>Yes</td> <td>Returns FALSE if the form element does not match the regular expression.</td> <td>regex_match[/regex/]</td> </tr> <tr class=\"row-odd\">\n<td><strong>differs</strong></td> <td>Yes</td> <td>Returns FALSE if the form element does not differ from the one in the parameter.</td> <td>differs[form_item]</td> </tr> <tr class=\"row-even\">\n<td><strong>is_unique</strong></td> <td>Yes</td> <td>Returns FALSE if the form element is not unique to the table and field name in the parameter. Note: This rule requires <a class=\"reference internal\" href=\"../database/query_builder\">Query Builder</a> to be enabled in order to work.</td> <td>is_unique[table.field]</td> </tr> <tr class=\"row-odd\">\n<td><strong>min_length</strong></td> <td>Yes</td> <td>Returns FALSE if the form element is shorter than the parameter value.</td> <td>min_length[3]</td> </tr> <tr class=\"row-even\">\n<td><strong>max_length</strong></td> <td>Yes</td> <td>Returns FALSE if the form element is longer than the parameter value.</td> <td>max_length[12]</td> </tr> <tr class=\"row-odd\">\n<td><strong>exact_length</strong></td> <td>Yes</td> <td>Returns FALSE if the form element is not exactly the parameter value.</td> <td>exact_length[8]</td> </tr> <tr class=\"row-even\">\n<td><strong>greater_than</strong></td> <td>Yes</td> <td>Returns FALSE if the form element is less than or equal to the parameter value or not numeric.</td> <td>greater_than[8]</td> </tr> <tr class=\"row-odd\">\n<td><strong>greater_than_equal_to</strong></td> <td>Yes</td> <td>Returns FALSE if the form element is less than the parameter value, or not numeric.</td> <td>greater_than_equal_to[8]</td> </tr> <tr class=\"row-even\">\n<td><strong>less_than</strong></td> <td>Yes</td> <td>Returns FALSE if the form element is greater than or equal to the parameter value or not numeric.</td> <td>less_than[8]</td> </tr> <tr class=\"row-odd\">\n<td><strong>less_than_equal_to</strong></td> <td>Yes</td> <td>Returns FALSE if the form element is greater than the parameter value, or not numeric.</td> <td>less_than_equal_to[8]</td> </tr> <tr class=\"row-even\">\n<td><strong>in_list</strong></td> <td>Yes</td> <td>Returns FALSE if the form element is not within a predetermined list.</td> <td>in_list[red,blue,green]</td> </tr> <tr class=\"row-odd\">\n<td><strong>alpha</strong></td> <td>No</td> <td>Returns FALSE if the form element contains anything other than alphabetical characters.</td> <td> </td> </tr> <tr class=\"row-even\">\n<td><strong>alpha_numeric</strong></td> <td>No</td> <td>Returns FALSE if the form element contains anything other than alpha-numeric characters.</td> <td> </td> </tr> <tr class=\"row-odd\">\n<td><strong>alpha_numeric_spaces</strong></td> <td>No</td> <td>Returns FALSE if the form element contains anything other than alpha-numeric characters or spaces. Should be used after trim to avoid spaces at the beginning or end.</td> <td> </td> </tr> <tr class=\"row-even\">\n<td><strong>alpha_dash</strong></td> <td>No</td> <td>Returns FALSE if the form element contains anything other than alpha-numeric characters, underscores or dashes.</td> <td> </td> </tr> <tr class=\"row-odd\">\n<td><strong>numeric</strong></td> <td>No</td> <td>Returns FALSE if the form element contains anything other than numeric characters.</td> <td> </td> </tr> <tr class=\"row-even\">\n<td><strong>integer</strong></td> <td>No</td> <td>Returns FALSE if the form element contains anything other than an integer.</td> <td> </td> </tr> <tr class=\"row-odd\">\n<td><strong>decimal</strong></td> <td>No</td> <td>Returns FALSE if the form element contains anything other than a decimal number.</td> <td> </td> </tr> <tr class=\"row-even\">\n<td><strong>is_natural</strong></td> <td>No</td> <td>Returns FALSE if the form element contains anything other than a natural number: 0, 1, 2, 3, etc.</td> <td> </td> </tr> <tr class=\"row-odd\">\n<td><strong>is_natural_no_zero</strong></td> <td>No</td> <td>Returns FALSE if the form element contains anything other than a natural number, but not zero: 1, 2, 3, etc.</td> <td> </td> </tr> <tr class=\"row-even\">\n<td><strong>valid_url</strong></td> <td>No</td> <td>Returns FALSE if the form element does not contain a valid URL.</td> <td> </td> </tr> <tr class=\"row-odd\">\n<td><strong>valid_email</strong></td> <td>No</td> <td>Returns FALSE if the form element does not contain a valid email address.</td> <td> </td> </tr> <tr class=\"row-even\">\n<td><strong>valid_emails</strong></td> <td>No</td> <td>Returns FALSE if any value provided in a comma separated list is not a valid email.</td> <td> </td> </tr> <tr class=\"row-odd\">\n<td><strong>valid_ip</strong></td> <td>No</td> <td>Returns FALSE if the supplied IP is not valid. Accepts an optional parameter of ‘ipv4’ or ‘ipv6’ to specify an IP format.</td> <td> </td> </tr> <tr class=\"row-even\">\n<td><strong>valid_base64</strong></td> <td>No</td> <td>Returns FALSE if the supplied string contains anything other than valid Base64 characters.</td> <td> </td> </tr>  </table> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>These rules can also be called as discrete methods. For example:</p> <pre data-language=\"php\">$this-&gt;form_validation-&gt;required($string);\n</pre> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">You can also use any native PHP functions that permit up to two parameters, where at least one is required (to pass the field data).</p> </div>   <h2 id=\"prepping-reference\">Prepping Reference</h2> <p>The following is a list of all the prepping methods that are available to use:</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Name</th> <th class=\"head\">Parameter</th> <th class=\"head\">Description</th> </tr> </thead>  <tr class=\"row-even\">\n<td><strong>prep_for_form</strong></td> <td>No</td> <td>DEPRECATED: Converts special characters so that HTML data can be shown in a form field without breaking it.</td> </tr> <tr class=\"row-odd\">\n<td><strong>prep_url</strong></td> <td>No</td> <td>Adds “http://” to URLs if missing.</td> </tr> <tr class=\"row-even\">\n<td><strong>strip_image_tags</strong></td> <td>No</td> <td>Strips the HTML from image tags leaving the raw URL.</td> </tr> <tr class=\"row-odd\">\n<td><strong>encode_php_tags</strong></td> <td>No</td> <td>Converts PHP tags to entities.</td> </tr>  </table> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">You can also use any native PHP functions that permits one parameter, like <code>trim()</code>, <code>htmlspecialchars()</code>, <code>urldecode()</code>, etc.</p> </div>   <h2 id=\"id5\">Class Reference</h2> <dl class=\"class\" id=\"class-reference\"> <dt id=\"CI_Form_validation\">\n<code>class CI_Form_validation</code> </dt> <dd>\n<dl class=\"method\"> <dt id=\"CI_Form_validation::set_rules\">\n<code>set_rules($field[, $label = ''[, $rules = '']])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$field</strong> (<em>string</em>) – Field name</li> <li>\n<strong>$label</strong> (<em>string</em>) – Field label</li> <li>\n<strong>$rules</strong> (<em>mixed</em>) – Validation rules, as a string list separated by a pipe “|”, or as an array or rules</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Form_validation instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Form_validation</p> </td> </tr>  </table> <p>Permits you to set validation rules, as described in the tutorial sections above:</p> <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#setting-validation-rules\">Setting Validation Rules</a></li> <li><a class=\"reference internal\" href=\"#saving-groups\">Saving Sets of Validation Rules to a Config File</a></li> </ul> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Form_validation::run\">\n<code>run([$group = ''])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$group</strong> (<em>string</em>) – The name of the validation group to run</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE if validation failed</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Runs the validation routines. Returns boolean TRUE on success and FALSE on failure. You can optionally pass the name of the validation group via the method, as described in: <a class=\"reference internal\" href=\"#saving-groups\">Saving Sets of Validation Rules to a Config File</a></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Form_validation::set_message\">\n<code>set_message($lang[, $val = ''])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$lang</strong> (<em>string</em>) – The rule the message is for</li> <li>\n<strong>$val</strong> (<em>string</em>) – The message</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Form_validation instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Form_validation</p> </td> </tr>  </table> <p>Permits you to set custom error messages. See <a class=\"reference internal\" href=\"#setting-error-messages\">Setting Error Messages</a></p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Form_validation::set_error_delimiters\">\n<code>set_error_delimiters([$prefix = '<p>'[, $suffix = '</p>']])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$prefix</strong> (<em>string</em>) – Error message prefix</li> <li>\n<strong>$suffix</strong> (<em>string</em>) – Error message suffix</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Form_validation instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Form_validation</p> </td> </tr>  </table> <p>Sets the default prefix and suffix for error messages.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Form_validation::set_data\">\n<code>set_data($data)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$data</strong> (<em>array</em>) – Array of data validate</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_Form_validation instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_Form_validation</p> </td> </tr>  </table> <p>Permits you to set an array for validation, instead of using the default <code>$_POST</code> array.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Form_validation::reset_validation\">\n<code>reset_validation()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">CI_Form_validation instance (method chaining)</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">CI_Form_validation</td> </tr>  </table> <p>Permits you to reset the validation when you validate more than one array. This method should be called before validating each new array.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Form_validation::error_array\">\n<code>error_array()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Array of error messages</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">array</td> </tr>  </table> <p>Returns the error messages as an array.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Form_validation::error_string\">\n<code>error_string([$prefix = ''[, $suffix = '']])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$prefix</strong> (<em>string</em>) – Error message prefix</li> <li>\n<strong>$suffix</strong> (<em>string</em>) – Error message suffix</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Error messages as a string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Returns all error messages (as returned from error_array()) formatted as a string and separated by a newline character.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Form_validation::error\">\n<code>error($field[, $prefix = ''[, $suffix = '']])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$field</strong> (<em>string</em>) – Field name</li> <li>\n<strong>$prefix</strong> (<em>string</em>) – Optional prefix</li> <li>\n<strong>$suffix</strong> (<em>string</em>) – Optional suffix</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Error message string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Returns the error message for a specific field, optionally adding a prefix and/or suffix to it (usually HTML tags).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Form_validation::has_rule\">\n<code>has_rule($field)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$field</strong> (<em>string</em>) – Field name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE if the field has rules set, FALSE if not</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Checks to see if there is a rule set for the specified field.</p> </dd>\n</dl> </dd>\n</dl>   <h2 id=\"helper-functions\">Helper Reference</h2> <p id=\"helper-reference\">Please refer to the <a class=\"reference internal\" href=\"../helpers/form_helper\">Form Helper</a> manual for the following functions:</p> <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"../helpers/form_helper#form_error\" title=\"form_error\"><code>form_error()</code></a></li> <li><a class=\"reference internal\" href=\"../helpers/form_helper#validation_errors\" title=\"validation_errors\"><code>validation_errors()</code></a></li> <li><a class=\"reference internal\" href=\"../helpers/form_helper#set_value\" title=\"set_value\"><code>set_value()</code></a></li> <li><a class=\"reference internal\" href=\"../helpers/form_helper#set_select\" title=\"set_select\"><code>set_select()</code></a></li> <li><a class=\"reference internal\" href=\"../helpers/form_helper#set_checkbox\" title=\"set_checkbox\"><code>set_checkbox()</code></a></li> <li><a class=\"reference internal\" href=\"../helpers/form_helper#set_radio\" title=\"set_radio\"><code>set_radio()</code></a></li> </ul> <p>Note that these are procedural functions, so they <strong>do not</strong> require you to prepend them with <code>$this-&gt;form_validation</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/libraries/form_validation.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/libraries/form_validation.html</a>\n  </p>\n</div>\n","libraries/user_agent":"<h1 id=\"user-agent-class\">User Agent Class</h1> <p>The User Agent Class provides functions that help identify information about the browser, mobile device, or robot visiting your site. In addition you can get referrer information as well as language and supported character-set information.</p>  <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#using-the-user-agent-class\" id=\"id1\">Using the User Agent Class</a><ul> <li><a class=\"reference internal\" href=\"#initializing-the-class\" id=\"id2\">Initializing the Class</a></li> <li><a class=\"reference internal\" href=\"#user-agent-definitions\" id=\"id3\">User Agent Definitions</a></li> <li><a class=\"reference internal\" href=\"#example\" id=\"id4\">Example</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#class-reference\" id=\"id5\">Class Reference</a></li> </ul>   <h2 id=\"using-the-user-agent-class\">Using the User Agent Class</h2>  <h3 id=\"initializing-the-class\">Initializing the Class</h3> <p>Like most other classes in CodeIgniter, the User Agent class is initialized in your controller using the $this-&gt;load-&gt;library function:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('user_agent');\n</pre> <p>Once loaded, the object will be available using: <code>$this-&gt;agent</code></p>   <h3 id=\"user-agent-definitions\">User Agent Definitions</h3> <p>The user agent name definitions are located in a config file located at: application/config/user_agents.php. You may add items to the various user agent arrays if needed.</p>   <h3 id=\"example\">Example</h3> <p>When the User Agent class is initialized it will attempt to determine whether the user agent browsing your site is a web browser, a mobile device, or a robot. It will also gather the platform information if it is available.</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('user_agent');\n\nif ($this-&gt;agent-&gt;is_browser())\n{\n        $agent = $this-&gt;agent-&gt;browser().' '.$this-&gt;agent-&gt;version();\n}\nelseif ($this-&gt;agent-&gt;is_robot())\n{\n        $agent = $this-&gt;agent-&gt;robot();\n}\nelseif ($this-&gt;agent-&gt;is_mobile())\n{\n        $agent = $this-&gt;agent-&gt;mobile();\n}\nelse\n{\n        $agent = 'Unidentified User Agent';\n}\n\necho $agent;\n\necho $this-&gt;agent-&gt;platform(); // Platform info (Windows, Linux, Mac, etc.)\n</pre>    <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_User_agent\">\n<code>class CI_User_agent</code> </dt> <dd>\n<dl class=\"method\"> <dt id=\"CI_User_agent::is_browser\">\n<code>is_browser([$key = NULL])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$key</strong> (<em>string</em>) – Optional browser name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE if the user agent is a (specified) browser, FALSE if not</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Returns TRUE/FALSE (boolean) if the user agent is a known web browser.</p> <pre data-language=\"php\">if ($this-&gt;agent-&gt;is_browser('Safari'))\n{\n        echo 'You are using Safari.';\n}\nelseif ($this-&gt;agent-&gt;is_browser())\n{\n        echo 'You are using a browser.';\n}\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The string “Safari” in this example is an array key in the list of browser definitions. You can find this list in <strong>application/config/user_agents.php</strong> if you want to add new browsers or change the stings.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_User_agent::is_mobile\">\n<code>is_mobile([$key = NULL])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$key</strong> (<em>string</em>) – Optional mobile device name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE if the user agent is a (specified) mobile device, FALSE if not</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Returns TRUE/FALSE (boolean) if the user agent is a known mobile device.</p> <pre data-language=\"php\">if ($this-&gt;agent-&gt;is_mobile('iphone'))\n{\n        $this-&gt;load-&gt;view('iphone/home');\n}\nelseif ($this-&gt;agent-&gt;is_mobile())\n{\n        $this-&gt;load-&gt;view('mobile/home');\n}\nelse\n{\n        $this-&gt;load-&gt;view('web/home');\n}\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_User_agent::is_robot\">\n<code>is_robot([$key = NULL])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$key</strong> (<em>string</em>) – Optional robot name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE if the user agent is a (specified) robot, FALSE if not</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Returns TRUE/FALSE (boolean) if the user agent is a known robot.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The user agent library only contains the most common robot definitions. It is not a complete list of bots. There are hundreds of them so searching for each one would not be very efficient. If you find that some bots that commonly visit your site are missing from the list you can add them to your <strong>application/config/user_agents.php</strong> file.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_User_agent::is_referral\">\n<code>is_referral()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">TRUE if the user agent is a referral, FALSE if not</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">bool</td> </tr>  </table> <p>Returns TRUE/FALSE (boolean) if the user agent was referred from another site.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_User_agent::browser\">\n<code>browser()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Detected browser or an empty string</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">string</td> </tr>  </table> <p>Returns a string containing the name of the web browser viewing your site.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_User_agent::version\">\n<code>version()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Detected browser version or an empty string</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">string</td> </tr>  </table> <p>Returns a string containing the version number of the web browser viewing your site.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_User_agent::mobile\">\n<code>mobile()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Detected mobile device brand or an empty string</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">string</td> </tr>  </table> <p>Returns a string containing the name of the mobile device viewing your site.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_User_agent::robot\">\n<code>robot()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Detected robot name or an empty string</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">string</td> </tr>  </table> <p>Returns a string containing the name of the robot viewing your site.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_User_agent::platform\">\n<code>platform()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Detected operating system or an empty string</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">string</td> </tr>  </table> <p>Returns a string containing the platform viewing your site (Linux, Windows, OS X, etc.).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_User_agent::referrer\">\n<code>referrer()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Detected referrer or an empty string</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">string</td> </tr>  </table> <p>The referrer, if the user agent was referred from another site. Typically you’ll test for this as follows:</p> <pre data-language=\"php\">if ($this-&gt;agent-&gt;is_referral())\n{\n        echo $this-&gt;agent-&gt;referrer();\n}\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_User_agent::agent_string\">\n<code>agent_string()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Full user agent string or an empty string</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">string</td> </tr>  </table> <p>Returns a string containing the full user agent string. Typically it will be something like this:</p> <pre data-language=\"php\">Mozilla/5.0 (Macintosh; U; Intel Mac OS X; en-US; rv:1.8.0.4) Gecko/20060613 Camino/1.0.2\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_User_agent::accept_lang\">\n<code>accept_lang([$lang = 'en'])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$lang</strong> (<em>string</em>) – Language key</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE if provided language is accepted, FALSE if not</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Lets you determine if the user agent accepts a particular language. Example:</p> <pre data-language=\"php\">if ($this-&gt;agent-&gt;accept_lang('en'))\n{\n        echo 'You accept English!';\n}\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This method is not typically very reliable since some browsers do not provide language info, and even among those that do, it is not always accurate.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_User_agent::languages\">\n<code>languages()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">An array list of accepted languages</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">array</td> </tr>  </table> <p>Returns an array of languages supported by the user agent.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_User_agent::accept_charset\">\n<code>accept_charset([$charset = 'utf-8'])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$charset</strong> (<em>string</em>) – Character set</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE if the character set is accepted, FALSE if not</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Lets you determine if the user agent accepts a particular character set. Example:</p> <pre data-language=\"php\">if ($this-&gt;agent-&gt;accept_charset('utf-8'))\n{\n        echo 'You browser supports UTF-8!';\n}\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This method is not typically very reliable since some browsers do not provide character-set info, and even among those that do, it is not always accurate.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_User_agent::charsets\">\n<code>charsets()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">An array list of accepted character sets</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">array</td> </tr>  </table> <p>Returns an array of character sets accepted by the user agent.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_User_agent::parse\">\n<code>parse($string)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$string</strong> (<em>string</em>) – A custom user-agent string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Parses a custom user-agent string, different from the one reported by the current visitor.</p> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/libraries/user_agent.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/libraries/user_agent.html</a>\n  </p>\n</div>\n","libraries/zip":"<h1 id=\"zip-encoding-class\">Zip Encoding Class</h1> <p>CodeIgniter’s Zip Encoding Class permits you to create Zip archives. Archives can be downloaded to your desktop or saved to a directory.</p>  <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#using-the-zip-encoding-class\" id=\"id1\">Using the Zip Encoding Class</a><ul> <li><a class=\"reference internal\" href=\"#initializing-the-class\" id=\"id2\">Initializing the Class</a></li> <li><a class=\"reference internal\" href=\"#usage-example\" id=\"id3\">Usage Example</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#class-reference\" id=\"id4\">Class Reference</a></li> </ul>   <h2 id=\"using-the-zip-encoding-class\">Using the Zip Encoding Class</h2>  <h3 id=\"initializing-the-class\">Initializing the Class</h3> <p>Like most other classes in CodeIgniter, the Zip class is initialized in your controller using the $this-&gt;load-&gt;library function:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('zip');\n</pre> <p>Once loaded, the Zip library object will be available using:</p> <pre data-language=\"php\">$this-&gt;zip\n</pre>   <h3 id=\"usage-example\">Usage Example</h3> <p>This example demonstrates how to compress a file, save it to a folder on your server, and download it to your desktop.</p> <pre data-language=\"php\">$name = 'mydata1.txt';\n$data = 'A Data String!';\n\n$this-&gt;zip-&gt;add_data($name, $data);\n\n// Write the zip file to a folder on your server. Name it \"my_backup.zip\"\n$this-&gt;zip-&gt;archive('/path/to/directory/my_backup.zip');\n\n// Download the file to your desktop. Name it \"my_backup.zip\"\n$this-&gt;zip-&gt;download('my_backup.zip');\n</pre>    <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_Zip\">\n<code>class CI_Zip</code> </dt> <dd>\n<dl class=\"attribute\"> <dt>\n<code>$compression_level = 2</code> </dt> <dd>\n<p>The compression level to use.</p> <p>It can range from 0 to 9, with 9 being the highest and 0 effectively disabling compression:</p> <pre data-language=\"php\">$this-&gt;zip-&gt;compression_level = 0;\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Zip::add_data\">\n<code>add_data($filepath[, $data = NULL])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$filepath</strong> (<em>mixed</em>) – A single file path or an array of file =&gt; data pairs</li> <li>\n<strong>$data</strong> (<em>array</em>) – File contents (ignored if $filepath is an array)</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Adds data to the Zip archive. Can work both in single and multiple files mode.</p> <p>When adding a single file, the first parameter must contain the name you would like given to the file and the second must contain the file contents:</p> <pre data-language=\"php\">$name = 'mydata1.txt';\n$data = 'A Data String!';\n$this-&gt;zip-&gt;add_data($name, $data);\n\n$name = 'mydata2.txt';\n$data = 'Another Data String!';\n$this-&gt;zip-&gt;add_data($name, $data);\n</pre> <p>When adding multiple files, the first parameter must contain <em>file =&gt; contents</em> pairs and the second parameter is ignored:</p> <pre data-language=\"php\">$data = array(\n        'mydata1.txt' =&gt; 'A Data String!',\n        'mydata2.txt' =&gt; 'Another Data String!'\n);\n\n$this-&gt;zip-&gt;add_data($data);\n</pre> <p>If you would like your compressed data organized into sub-directories, simply include the path as part of the filename(s):</p> <pre data-language=\"php\">$name = 'personal/my_bio.txt';\n$data = 'I was born in an elevator...';\n\n$this-&gt;zip-&gt;add_data($name, $data);\n</pre> <p>The above example will place my_bio.txt inside a folder called personal.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Zip::add_dir\">\n<code>add_dir($directory)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$directory</strong> (<em>mixed</em>) – Directory name string or an array of multiple directories</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Permits you to add a directory. Usually this method is unnecessary since you can place your data into directories when using <code>$this-&gt;zip-&gt;add_data()</code>, but if you would like to create an empty directory you can do so:</p> <pre data-language=\"php\">$this-&gt;zip-&gt;add_dir('myfolder'); // Creates a directory called \"myfolder\"\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Zip::read_file\">\n<code>read_file($path[, $archive_filepath = FALSE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$path</strong> (<em>string</em>) – Path to file</li> <li>\n<strong>$archive_filepath</strong> (<em>mixed</em>) – New file name/path (string) or (boolean) whether to maintain the original filepath</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Permits you to compress a file that already exists somewhere on your server. Supply a file path and the zip class will read it and add it to the archive:</p> <pre data-language=\"php\">$path = '/path/to/photo.jpg';\n\n$this-&gt;zip-&gt;read_file($path);\n\n// Download the file to your desktop. Name it \"my_backup.zip\"\n$this-&gt;zip-&gt;download('my_backup.zip');\n</pre> <p>If you would like the Zip archive to maintain the directory structure of the file in it, pass TRUE (boolean) in the second parameter. Example:</p> <pre data-language=\"php\">$path = '/path/to/photo.jpg';\n\n$this-&gt;zip-&gt;read_file($path, TRUE);\n\n// Download the file to your desktop. Name it \"my_backup.zip\"\n$this-&gt;zip-&gt;download('my_backup.zip');\n</pre> <p>In the above example, photo.jpg will be placed into the <em>path/to/</em> directory.</p> <p>You can also specify a new name (path included) for the added file on the fly:</p> <pre data-language=\"php\">$path = '/path/to/photo.jpg';\n$new_path = '/new/path/some_photo.jpg';\n\n$this-&gt;zip-&gt;read_file($path, $new_path);\n\n// Download ZIP archive containing /new/path/some_photo.jpg\n$this-&gt;zip-&gt;download('my_archive.zip');\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Zip::read_dir\">\n<code>read_dir($path[, $preserve_filepath = TRUE[, $root_path = NULL]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$path</strong> (<em>string</em>) – Path to directory</li> <li>\n<strong>$preserve_filepath</strong> (<em>bool</em>) – Whether to maintain the original path</li> <li>\n<strong>$root_path</strong> (<em>string</em>) – Part of the path to exclude from the archive directory</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Permits you to compress a directory (and its contents) that already exists somewhere on your server. Supply a path to the directory and the zip class will recursively read and recreate it as a Zip archive. All files contained within the supplied path will be encoded, as will any sub-directories contained within it. Example:</p> <pre data-language=\"php\">$path = '/path/to/your/directory/';\n\n$this-&gt;zip-&gt;read_dir($path);\n\n// Download the file to your desktop. Name it \"my_backup.zip\"\n$this-&gt;zip-&gt;download('my_backup.zip');\n</pre> <p>By default the Zip archive will place all directories listed in the first parameter inside the zip. If you want the tree preceding the target directory to be ignored, you can pass FALSE (boolean) in the second parameter. Example:</p> <pre data-language=\"php\">$path = '/path/to/your/directory/';\n\n$this-&gt;zip-&gt;read_dir($path, FALSE);\n</pre> <p>This will create a ZIP with a directory named “directory” inside, then all sub-directories stored correctly inside that, but will not include the <em>/path/to/your</em> part of the path.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Zip::archive\">\n<code>archive($filepath)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$filepath</strong> (<em>string</em>) – Path to target zip archive</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Writes the Zip-encoded file to a directory on your server. Submit a valid server path ending in the file name. Make sure the directory is writable (755 is usually OK). Example:</p> <pre data-language=\"php\">$this-&gt;zip-&gt;archive('/path/to/folder/myarchive.zip'); // Creates a file named myarchive.zip\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Zip::download\">\n<code>download($filename = 'backup.zip')</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$filename</strong> (<em>string</em>) – Archive file name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Causes the Zip file to be downloaded from your server. You must pass the name you would like the zip file called. Example:</p> <pre data-language=\"php\">$this-&gt;zip-&gt;download('latest_stuff.zip'); // File will be named \"latest_stuff.zip\"\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Do not display any data in the controller in which you call this method since it sends various server headers that cause the download to happen and the file to be treated as binary.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Zip::get_zip\">\n<code>get_zip()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Zip file content</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">string</td> </tr>  </table> <p>Returns the Zip-compressed file data. Generally you will not need this method unless you want to do something unique with the data. Example:</p> <pre data-language=\"php\">$name = 'my_bio.txt';\n$data = 'I was born in an elevator...';\n\n$this-&gt;zip-&gt;add_data($name, $data);\n\n$zip_file = $this-&gt;zip-&gt;get_zip();\n</pre> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Zip::clear_data\">\n<code>clear_data()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">void</td> </tr>  </table> <p>The Zip class caches your zip data so that it doesn’t need to recompile the Zip archive for each method you use above. If, however, you need to create multiple Zip archives, each with different data, you can clear the cache between calls. Example:</p> <pre data-language=\"php\">$name = 'my_bio.txt';\n$data = 'I was born in an elevator...';\n\n$this-&gt;zip-&gt;add_data($name, $data);\n$zip_file = $this-&gt;zip-&gt;get_zip();\n\n$this-&gt;zip-&gt;clear_data();\n\n$name = 'photo.jpg';\n$this-&gt;zip-&gt;read_file(\"/path/to/photo.jpg\"); // Read the file's contents\n\n$this-&gt;zip-&gt;download('myphotos.zip');\n</pre> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/libraries/zip.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/libraries/zip.html</a>\n  </p>\n</div>\n","database/utilities":"<h1 id=\"database-utility-class\">Database Utility Class</h1> <p>The Database Utility Class contains methods that help you manage your database.</p>  <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#initializing-the-utility-class\" id=\"id1\">Initializing the Utility Class</a></li> <li>\n<a class=\"reference internal\" href=\"#using-the-database-utilities\" id=\"id2\">Using the Database Utilities</a><ul> <li><a class=\"reference internal\" href=\"#retrieve-list-of-database-names\" id=\"id3\">Retrieve list of database names</a></li> <li><a class=\"reference internal\" href=\"#determine-if-a-database-exists\" id=\"id4\">Determine If a Database Exists</a></li> <li><a class=\"reference internal\" href=\"#optimize-a-table\" id=\"id5\">Optimize a Table</a></li> <li><a class=\"reference internal\" href=\"#repair-a-table\" id=\"id6\">Repair a Table</a></li> <li><a class=\"reference internal\" href=\"#optimize-a-database\" id=\"id7\">Optimize a Database</a></li> <li><a class=\"reference internal\" href=\"#export-a-query-result-as-a-csv-file\" id=\"id8\">Export a Query Result as a CSV File</a></li> <li><a class=\"reference internal\" href=\"#export-a-query-result-as-an-xml-document\" id=\"id9\">Export a Query Result as an XML Document</a></li> </ul> </li> <li>\n<a class=\"reference internal\" href=\"#backup-your-database\" id=\"id10\">Backup Your Database</a><ul> <li><a class=\"reference internal\" href=\"#database-backup-notes\" id=\"id11\">Database Backup Notes</a></li> <li><a class=\"reference internal\" href=\"#usage-example\" id=\"id12\">Usage Example</a></li> <li><a class=\"reference internal\" href=\"#setting-backup-preferences\" id=\"id13\">Setting Backup Preferences</a></li> <li><a class=\"reference internal\" href=\"#description-of-backup-preferences\" id=\"id14\">Description of Backup Preferences</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#class-reference\" id=\"id15\">Class Reference</a></li> </ul>   <h2 id=\"initializing-the-utility-class\">Initializing the Utility Class</h2> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">In order to initialize the Utility class, your database driver must already be running, since the utilities class relies on it.</p> </div> <p>Load the Utility Class as follows:</p> <pre data-language=\"php\">$this-&gt;load-&gt;dbutil();\n</pre> <p>You can also pass another database object to the DB Utility loader, in case the database you want to manage isn’t the default one:</p> <pre data-language=\"php\">$this-&gt;myutil = $this-&gt;load-&gt;dbutil($this-&gt;other_db, TRUE);\n</pre> <p>In the above example, we’re passing a custom database object as the first parameter and then tell it to return the dbutil object, instead of assigning it directly to <code>$this-&gt;dbutil</code>.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Both of the parameters can be used individually, just pass an empty value as the first one if you wish to skip it.</p> </div> <p>Once initialized you will access the methods using the <code>$this-&gt;dbutil</code> object:</p> <pre data-language=\"php\">$this-&gt;dbutil-&gt;some_method();\n</pre>   <h2 id=\"using-the-database-utilities\">Using the Database Utilities</h2>  <h3 id=\"retrieve-list-of-database-names\">Retrieve list of database names</h3> <p>Returns an array of database names:</p> <pre data-language=\"php\">$dbs = $this-&gt;dbutil-&gt;list_databases();\n\nforeach ($dbs as $db)\n{\n        echo $db;\n}\n</pre>   <h3 id=\"determine-if-a-database-exists\">Determine If a Database Exists</h3> <p>Sometimes it’s helpful to know whether a particular database exists. Returns a boolean TRUE/FALSE. Usage example:</p> <pre data-language=\"php\">if ($this-&gt;dbutil-&gt;database_exists('database_name'))\n{\n        // some code...\n}\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Replace <em>database_name</em> with the name of the database you are looking for. This method is case sensitive.</p> </div>   <h3 id=\"optimize-a-table\">Optimize a Table</h3> <p>Permits you to optimize a table using the table name specified in the first parameter. Returns TRUE/FALSE based on success or failure:</p> <pre data-language=\"php\">if ($this-&gt;dbutil-&gt;optimize_table('table_name'))\n{\n        echo 'Success!';\n}\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Not all database platforms support table optimization. It is mostly for use with MySQL.</p> </div>   <h3 id=\"repair-a-table\">Repair a Table</h3> <p>Permits you to repair a table using the table name specified in the first parameter. Returns TRUE/FALSE based on success or failure:</p> <pre data-language=\"php\">if ($this-&gt;dbutil-&gt;repair_table('table_name'))\n{\n        echo 'Success!';\n}\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Not all database platforms support table repairs.</p> </div>   <h3 id=\"optimize-a-database\">Optimize a Database</h3> <p>Permits you to optimize the database your DB class is currently connected to. Returns an array containing the DB status messages or FALSE on failure.</p> <pre data-language=\"php\">$result = $this-&gt;dbutil-&gt;optimize_database();\n\nif ($result !== FALSE)\n{\n        print_r($result);\n}\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Not all database platforms support database optimization. It it is mostly for use with MySQL.</p> </div>   <h3 id=\"export-a-query-result-as-a-csv-file\">Export a Query Result as a CSV File</h3> <p>Permits you to generate a CSV file from a query result. The first parameter of the method must contain the result object from your query. Example:</p> <pre data-language=\"php\">$this-&gt;load-&gt;dbutil();\n\n$query = $this-&gt;db-&gt;query(\"SELECT * FROM mytable\");\n\necho $this-&gt;dbutil-&gt;csv_from_result($query);\n</pre> <p>The second, third, and fourth parameters allow you to set the delimiter newline, and enclosure characters respectively. By default commas are used as the delimiter, “n” is used as a new line, and a double-quote is used as the enclosure. Example:</p> <pre data-language=\"php\">$delimiter = \",\";\n$newline = \"\\r\\n\";\n$enclosure = '\"';\n\necho $this-&gt;dbutil-&gt;csv_from_result($query, $delimiter, $newline, $enclosure);\n</pre> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">This method will NOT write the CSV file for you. It simply creates the CSV layout. If you need to write the file use the <a class=\"reference internal\" href=\"../helpers/file_helper\">File Helper</a>.</p> </div>   <h3 id=\"export-a-query-result-as-an-xml-document\">Export a Query Result as an XML Document</h3> <p>Permits you to generate an XML file from a query result. The first parameter expects a query result object, the second may contain an optional array of config parameters. Example:</p> <pre data-language=\"php\">$this-&gt;load-&gt;dbutil();\n\n$query = $this-&gt;db-&gt;query(\"SELECT * FROM mytable\");\n\n$config = array (\n        'root'          =&gt; 'root',\n        'element'       =&gt; 'element',\n        'newline'       =&gt; \"\\n\",\n        'tab'           =&gt; \"\\t\"\n);\n\necho $this-&gt;dbutil-&gt;xml_from_result($query, $config);\n</pre> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">This method will NOT write the XML file for you. It simply creates the XML layout. If you need to write the file use the <a class=\"reference internal\" href=\"../helpers/file_helper\">File Helper</a>.</p> </div>    <h2 id=\"backup-your-database\">Backup Your Database</h2>  <h3 id=\"database-backup-notes\">Database Backup Notes</h3> <p>Permits you to backup your full database or individual tables. The backup data can be compressed in either Zip or Gzip format.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This feature is only available for MySQL and Interbase/Firebird databases.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>For Interbase/Firebird databases, the backup file name is the only parameter.</p> <p class=\"last\">$this-&gt;dbutil-&gt;backup(‘db_backup_filename’);</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Due to the limited execution time and memory available to PHP, backing up very large databases may not be possible. If your database is very large you might need to backup directly from your SQL server via the command line, or have your server admin do it for you if you do not have root privileges.</p> </div>   <h3 id=\"usage-example\">Usage Example</h3> <pre data-language=\"php\">// Load the DB utility class\n$this-&gt;load-&gt;dbutil();\n\n// Backup your entire database and assign it to a variable\n$backup = $this-&gt;dbutil-&gt;backup();\n\n// Load the file helper and write the file to your server\n$this-&gt;load-&gt;helper('file');\nwrite_file('/path/to/mybackup.gz', $backup);\n\n// Load the download helper and send the file to your desktop\n$this-&gt;load-&gt;helper('download');\nforce_download('mybackup.gz', $backup);\n</pre>   <h3 id=\"setting-backup-preferences\">Setting Backup Preferences</h3> <p>Backup preferences are set by submitting an array of values to the first parameter of the <code>backup()</code> method. Example:</p> <pre data-language=\"php\">$prefs = array(\n        'tables'        =&gt; array('table1', 'table2'),   // Array of tables to backup.\n        'ignore'        =&gt; array(),                     // List of tables to omit from the backup\n        'format'        =&gt; 'txt',                       // gzip, zip, txt\n        'filename'      =&gt; 'mybackup.sql',              // File name - NEEDED ONLY WITH ZIP FILES\n        'add_drop'      =&gt; TRUE,                        // Whether to add DROP TABLE statements to backup file\n        'add_insert'    =&gt; TRUE,                        // Whether to add INSERT data to backup file\n        'newline'       =&gt; \"\\n\"                         // Newline character used in backup file\n);\n\n$this-&gt;dbutil-&gt;backup($prefs);\n</pre>   <h3 id=\"description-of-backup-preferences\">Description of Backup Preferences</h3> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Preference</th> <th class=\"head\">Default Value</th> <th class=\"head\">Options</th> <th class=\"head\">Description</th> </tr> </thead>  <tr class=\"row-even\">\n<td><strong>tables</strong></td> <td>empty array</td> <td>None</td> <td>An array of tables you want backed up. If left blank all tables will be exported.</td> </tr> <tr class=\"row-odd\">\n<td><strong>ignore</strong></td> <td>empty array</td> <td>None</td> <td>An array of tables you want the backup routine to ignore.</td> </tr> <tr class=\"row-even\">\n<td><strong>format</strong></td> <td>gzip</td> <td>gzip, zip, txt</td> <td>The file format of the export file.</td> </tr> <tr class=\"row-odd\">\n<td><strong>filename</strong></td> <td>the current date/time</td> <td>None</td> <td>The name of the backed-up file. The name is needed only if you are using zip compression.</td> </tr> <tr class=\"row-even\">\n<td><strong>add_drop</strong></td> <td>TRUE</td> <td>TRUE/FALSE</td> <td>Whether to include DROP TABLE statements in your SQL export file.</td> </tr> <tr class=\"row-odd\">\n<td><strong>add_insert</strong></td> <td>TRUE</td> <td>TRUE/FALSE</td> <td>Whether to include INSERT statements in your SQL export file.</td> </tr> <tr class=\"row-even\">\n<td><strong>newline</strong></td> <td>“\\n”</td> <td>“\\n”, “\\r”, “\\r\\n”</td> <td>Type of newline to use in your SQL export file.</td> </tr> <tr class=\"row-odd\">\n<td><strong>foreign_key_checks</strong></td> <td>TRUE</td> <td>TRUE/FALSE</td> <td>Whether output should keep foreign key checks enabled.</td> </tr>  </table>    <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_DB_utility\">\n<code>class CI_DB_utility</code> </dt> <dd>\n<dl class=\"method\"> <dt id=\"CI_DB_utility::backup\">\n<code>backup([$params = array()])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$params</strong> (<em>array</em>) – An associative array of options</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">raw/(g)zipped SQL query string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Perform a database backup, per user preferences.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_utility::database_exists\">\n<code>database_exists($database_name)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$database_name</strong> (<em>string</em>) – Database name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE if the database exists, FALSE otherwise</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Check for the existence of a database.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_utility::list_databases\">\n<code>list_databases()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Array of database names found</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">array</td> </tr>  </table> <p>Retrieve a list of all the database names.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_utility::optimize_database\">\n<code>optimize_database()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Array of optimization messages or FALSE on failure</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">array</td> </tr>  </table> <p>Optimizes the database.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_utility::optimize_table\">\n<code>optimize_table($table_name)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table_name</strong> (<em>string</em>) – Name of the table to optimize</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Array of optimization messages or FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>Optimizes a database table.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_utility::repair_table\">\n<code>repair_table($table_name)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table_name</strong> (<em>string</em>) – Name of the table to repair</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Array of repair messages or FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>Repairs a database table.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_utility::csv_from_result\">\n<code>csv_from_result($query[, $delim = ', '[, $newline = \"n\"[, $enclosure = '\"']]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$query</strong> (<em>object</em>) – A database result object</li> <li>\n<strong>$delim</strong> (<em>string</em>) – The CSV field delimiter to use</li> <li>\n<strong>$newline</strong> (<em>string</em>) – The newline character to use</li> <li>\n<strong>$enclosure</strong> (<em>string</em>) – The enclosure delimiter to use</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">The generated CSV file as a string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Translates a database result object into a CSV document.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_utility::xml_from_result\">\n<code>xml_from_result($query[, $params = array()])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$query</strong> (<em>object</em>) – A database result object</li> <li>\n<strong>$params</strong> (<em>array</em>) – An associative array of preferences</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">The generated XML document as a string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Translates a database result object into an XML document.</p> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/database/utilities.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/database/utilities.html</a>\n  </p>\n</div>\n","helpers/captcha_helper":"<h1 id=\"captcha-helper\">CAPTCHA Helper</h1> <p>The CAPTCHA Helper file contains functions that assist in creating CAPTCHA images.</p>  <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#loading-this-helper\" id=\"id1\">Loading this Helper</a></li> <li>\n<a class=\"reference internal\" href=\"#using-the-captcha-helper\" id=\"id2\">Using the CAPTCHA helper</a><ul> <li><a class=\"reference internal\" href=\"#adding-a-database\" id=\"id3\">Adding a Database</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#available-functions\" id=\"id4\">Available Functions</a></li> </ul>   <h2 id=\"loading-this-helper\">Loading this Helper</h2> <p>This helper is loaded using the following code:</p> <pre data-language=\"php\">$this-&gt;load-&gt;helper('captcha');\n</pre>   <h2 id=\"using-the-captcha-helper\">Using the CAPTCHA helper</h2> <p>Once loaded you can generate a CAPTCHA like this:</p> <pre data-language=\"php\">$vals = array(\n        'word'          =&gt; 'Random word',\n        'img_path'      =&gt; './captcha/',\n        'img_url'       =&gt; 'http://example.com/captcha/',\n        'font_path'     =&gt; './path/to/fonts/texb.ttf',\n        'img_width'     =&gt; '150',\n        'img_height'    =&gt; 30,\n        'expiration'    =&gt; 7200,\n        'word_length'   =&gt; 8,\n        'font_size'     =&gt; 16,\n        'img_id'        =&gt; 'Imageid',\n        'pool'          =&gt; '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',\n\n        // White background and border, black text and red grid\n        'colors'        =&gt; array(\n                'background' =&gt; array(255, 255, 255),\n                'border' =&gt; array(255, 255, 255),\n                'text' =&gt; array(0, 0, 0),\n                'grid' =&gt; array(255, 40, 40)\n        )\n);\n\n$cap = create_captcha($vals);\necho $cap['image'];\n</pre> <ul class=\"simple\"> <li>The captcha function requires the GD image library.</li> <li>Only the <strong>img_path</strong> and <strong>img_url</strong> are required.</li> <li>If a <strong>word</strong> is not supplied, the function will generate a random ASCII string. You might put together your own word library that you can draw randomly from.</li> <li>If you do not specify a path to a TRUE TYPE font, the native ugly GD font will be used.</li> <li>The “captcha” directory must be writable</li> <li>The <strong>expiration</strong> (in seconds) signifies how long an image will remain in the captcha folder before it will be deleted. The default is two hours.</li> <li>\n<strong>word_length</strong> defaults to 8, <strong>pool</strong> defaults to ‘0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ’</li> <li>\n<strong>font_size</strong> defaults to 16, the native GD font has a size limit. Specify a “true type” font for bigger sizes.</li> <li>The <strong>img_id</strong> will be set as the “id” of the captcha image.</li> <li>If any of the <strong>colors</strong> values is missing, it will be replaced by the default.</li> </ul>  <h3 id=\"adding-a-database\">Adding a Database</h3> <p>In order for the captcha function to prevent someone from submitting, you will need to add the information returned from <code>create_captcha()</code> to your database. Then, when the data from the form is submitted by the user you will need to verify that the data exists in the database and has not expired.</p> <p>Here is a table prototype:</p> <pre data-language=\"php\">CREATE TABLE captcha (\n        captcha_id bigint(13) unsigned NOT NULL auto_increment,\n        captcha_time int(10) unsigned NOT NULL,\n        ip_address varchar(45) NOT NULL,\n        word varchar(20) NOT NULL,\n        PRIMARY KEY `captcha_id` (`captcha_id`),\n        KEY `word` (`word`)\n);\n</pre> <p>Here is an example of usage with a database. On the page where the CAPTCHA will be shown you’ll have something like this:</p> <pre data-language=\"php\">$this-&gt;load-&gt;helper('captcha');\n$vals = array(\n        'img_path'      =&gt; './captcha/',\n        'img_url'       =&gt; 'http://example.com/captcha/'\n);\n\n$cap = create_captcha($vals);\n$data = array(\n        'captcha_time'  =&gt; $cap['time'],\n        'ip_address'    =&gt; $this-&gt;input-&gt;ip_address(),\n        'word'          =&gt; $cap['word']\n);\n\n$query = $this-&gt;db-&gt;insert_string('captcha', $data);\n$this-&gt;db-&gt;query($query);\n\necho 'Submit the word you see below:';\necho $cap['image'];\necho '&lt;input type=\"text\" name=\"captcha\" value=\"\" /&gt;';\n</pre> <p>Then, on the page that accepts the submission you’ll have something like this:</p> <pre data-language=\"php\">// First, delete old captchas\n$expiration = time() - 7200; // Two hour limit\n$this-&gt;db-&gt;where('captcha_time &lt; ', $expiration)\n        -&gt;delete('captcha');\n\n// Then see if a captcha exists:\n$sql = 'SELECT COUNT(*) AS count FROM captcha WHERE word = ? AND ip_address = ? AND captcha_time &gt; ?';\n$binds = array($_POST['captcha'], $this-&gt;input-&gt;ip_address(), $expiration);\n$query = $this-&gt;db-&gt;query($sql, $binds);\n$row = $query-&gt;row();\n\nif ($row-&gt;count == 0)\n{\n        echo 'You must submit the word that appears in the image.';\n}\n</pre>    <h2 id=\"available-functions\">Available Functions</h2> <p>The following functions are available:</p> <dl class=\"function\"> <dt id=\"create_captcha\">\n<code>create_captcha([$data = ''[, $img_path = ''[, $img_url = ''[, $font_path = '']]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$data</strong> (<em>array</em>) – Array of data for the CAPTCHA</li> <li>\n<strong>$img_path</strong> (<em>string</em>) – Path to create the image in</li> <li>\n<strong>$img_url</strong> (<em>string</em>) – URL to the CAPTCHA image folder</li> <li>\n<strong>$font_path</strong> (<em>string</em>) – Server path to font</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">array(‘word’ =&gt; $word, ‘time’ =&gt; $now, ‘image’ =&gt; $img)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>Takes an array of information to generate the CAPTCHA as input and creates the image to your specifications, returning an array of associative data about the image.</p> <pre data-language=\"php\">array(\n        'image' =&gt; IMAGE TAG\n        'time'  =&gt; TIMESTAMP (in microtime)\n        'word'  =&gt; CAPTCHA WORD\n)\n</pre> <p>The <strong>image</strong> is the actual image tag:</p> <pre data-language=\"php\">&lt;img src=\"http://example.com/captcha/12345.jpg\" width=\"140\" height=\"50\" /&gt;\n</pre> <p>The <strong>time</strong> is the micro timestamp used as the image name without the file extension. It will be a number like this: 1139612155.3422</p> <p>The <strong>word</strong> is the word that appears in the captcha image, which if not supplied to the function, will be a random string.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/helpers/captcha_helper.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/helpers/captcha_helper.html</a>\n  </p>\n</div>\n","libraries/sessions":"<h1 id=\"session-library\">Session Library</h1> <p>The Session class permits you maintain a user’s “state” and track their activity while they browse your site.</p> <p>CodeIgniter comes with a few session storage drivers:</p>  <ul class=\"simple\"> <li>files (default; file-system based)</li> <li>database</li> <li>redis</li> <li>memcached</li> </ul>  <p>In addition, you may create your own, custom session drivers based on other kinds of storage, while still taking advantage of the features of the Session class.</p>  <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#using-the-session-class\" id=\"id3\">Using the Session Class</a><ul> <li><a class=\"reference internal\" href=\"#initializing-a-session\" id=\"id4\">Initializing a Session</a></li> <li>\n<a class=\"reference internal\" href=\"#how-do-sessions-work\" id=\"id5\">How do Sessions work?</a><ul> <li><a class=\"reference internal\" href=\"#a-note-about-concurrency\" id=\"id6\">A note about concurrency</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#what-is-session-data\" id=\"id7\">What is Session Data?</a></li> <li><a class=\"reference internal\" href=\"#retrieving-session-data\" id=\"id8\">Retrieving Session Data</a></li> <li><a class=\"reference internal\" href=\"#adding-session-data\" id=\"id9\">Adding Session Data</a></li> <li><a class=\"reference internal\" href=\"#removing-session-data\" id=\"id10\">Removing Session Data</a></li> <li><a class=\"reference internal\" href=\"#flashdata\" id=\"id11\">Flashdata</a></li> <li><a class=\"reference internal\" href=\"#tempdata\" id=\"id12\">Tempdata</a></li> <li><a class=\"reference internal\" href=\"#destroying-a-session\" id=\"id13\">Destroying a Session</a></li> <li><a class=\"reference internal\" href=\"#accessing-session-metadata\" id=\"id14\">Accessing session metadata</a></li> <li><a class=\"reference internal\" href=\"#session-preferences\" id=\"id15\">Session Preferences</a></li> <li>\n<a class=\"reference internal\" href=\"#session-drivers\" id=\"id16\">Session Drivers</a><ul> <li>\n<a class=\"reference internal\" href=\"#files-driver\" id=\"id17\">Files Driver</a><ul> <li><a class=\"reference internal\" href=\"#bonus-tip\" id=\"id18\">Bonus Tip</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#database-driver\" id=\"id19\">Database Driver</a></li> <li><a class=\"reference internal\" href=\"#redis-driver\" id=\"id20\">Redis Driver</a></li> <li>\n<a class=\"reference internal\" href=\"#memcached-driver\" id=\"id21\">Memcached Driver</a><ul> <li><a class=\"reference internal\" href=\"#id1\" id=\"id22\">Bonus Tip</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#custom-drivers\" id=\"id23\">Custom Drivers</a></li> </ul> </li> </ul> </li> <li><a class=\"reference internal\" href=\"#class-reference\" id=\"id24\">Class Reference</a></li> </ul>   <h2 id=\"using-the-session-class\">Using the Session Class</h2>  <h3 id=\"initializing-a-session\">Initializing a Session</h3> <p>Sessions will typically run globally with each page load, so the Session class should either be initialized in your <a class=\"reference internal\" href=\"../general/controllers\">controller</a> constructors, or it can be <a class=\"reference internal\" href=\"../general/autoloader\">auto-loaded</a> by the system. For the most part the session class will run unattended in the background, so simply initializing the class will cause it to read, create, and update sessions when necessary.</p> <p>To initialize the Session class manually in your controller constructor, use the <code>$this-&gt;load-&gt;library()</code> method:</p> <pre data-language=\"php\">$this-&gt;load-&gt;library('session');\n</pre> <p>Once loaded, the Sessions library object will be available using:</p> <pre data-language=\"php\">$this-&gt;session\n</pre> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">Because the <a class=\"reference internal\" href=\"loader\">Loader Class</a> is instantiated by CodeIgniter’s base controller, make sure to call <code>parent::__construct()</code> before trying to load a library from inside a controller constructor.</p> </div>   <h3 id=\"how-do-sessions-work\">How do Sessions work?</h3> <p>When a page is loaded, the session class will check to see if valid session cookie is sent by the user’s browser. If a sessions cookie does <strong>not</strong> exist (or if it doesn’t match one stored on the server or has expired) a new session will be created and saved.</p> <p>If a valid session does exist, its information will be updated. With each update, the session ID may be regenerated if configured to do so.</p> <p>It’s important for you to understand that once initialized, the Session class runs automatically. There is nothing you need to do to cause the above behavior to happen. You can, as you’ll see below, work with session data, but the process of reading, writing, and updating a session is automatic.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Under CLI, the Session library will automatically halt itself, as this is a concept based entirely on the HTTP protocol.</p> </div>  <h4 id=\"a-note-about-concurrency\">A note about concurrency</h4> <p>Unless you’re developing a website with heavy AJAX usage, you can skip this section. If you are, however, and if you’re experiencing performance issues, then this note is exactly what you’re looking for.</p> <p>Sessions in previous versions of CodeIgniter didn’t implement locking, which meant that two HTTP requests using the same session could run exactly at the same time. To use a more appropriate technical term - requests were non-blocking.</p> <p>However, non-blocking requests in the context of sessions also means unsafe, because modifications to session data (or session ID regeneration) in one request can interfere with the execution of a second, concurrent request. This detail was at the root of many issues and the main reason why CodeIgniter 3.0 has a completely re-written Session library.</p> <p>Why are we telling you this? Because it is likely that after trying to find the reason for your performance issues, you may conclude that locking is the issue and therefore look into how to remove the locks ...</p> <p>DO NOT DO THAT! Removing locks would be <strong>wrong</strong> and it will cause you more problems!</p> <p>Locking is not the issue, it is a solution. Your issue is that you still have the session open, while you’ve already processed it and therefore no longer need it. So, what you need is to close the session for the current request after you no longer need it.</p> <p>Long story short - call <code>session_write_close()</code> once you no longer need anything to do with session variables.</p>    <h3 id=\"what-is-session-data\">What is Session Data?</h3> <p>Session data is simply an array associated with a particular session ID (cookie).</p> <p>If you’ve used sessions in PHP before, you should be familiar with PHP’s <a class=\"reference external\" href=\"http://php.net/manual/en/reserved.variables.session.php\">$_SESSION superglobal</a> (if not, please read the content on that link).</p> <p>CodeIgniter gives access to its session data through the same means, as it uses the session handlers’ mechanism provided by PHP. Using session data is as simple as manipulating (read, set and unset values) the <code>$_SESSION</code> array.</p> <p>In addition, CodeIgniter also provides 2 special types of session data that are further explained below: flashdata and tempdata.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In previous versions, regular session data in CodeIgniter was referred to as ‘userdata’. Have this in mind if that term is used elsewhere in the manual. Most of it is written to explain how the custom ‘userdata’ methods work.</p> </div>   <h3 id=\"retrieving-session-data\">Retrieving Session Data</h3> <p>Any piece of information from the session array is available through the <code>$_SESSION</code> superglobal:</p> <pre data-language=\"php\">$_SESSION['item']\n</pre> <p>Or through the magic getter:</p> <pre data-language=\"php\">$this-&gt;session-&gt;item\n</pre> <p>And for backwards compatibility, through the <code>userdata()</code> method:</p> <pre data-language=\"php\">$this-&gt;session-&gt;userdata('item');\n</pre> <p>Where item is the array key corresponding to the item you wish to fetch. For example, to assign a previously stored ‘name’ item to the <code>$name</code> variable, you will do this:</p> <pre data-language=\"php\">$name = $_SESSION['name'];\n\n// or:\n\n$name = $this-&gt;session-&gt;name\n\n// or:\n\n$name = $this-&gt;session-&gt;userdata('name');\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>userdata()</code> method returns NULL if the item you are trying to access does not exist.</p> </div> <p>If you want to retrieve all of the existing userdata, you can simply omit the item key (magic getter only works for properties):</p> <pre data-language=\"php\">$_SESSION\n\n// or:\n\n$this-&gt;session-&gt;userdata();\n</pre>   <h3 id=\"adding-session-data\">Adding Session Data</h3> <p>Let’s say a particular user logs into your site. Once authenticated, you could add their username and e-mail address to the session, making that data globally available to you without having to run a database query when you need it.</p> <p>You can simply assign data to the <code>$_SESSION</code> array, as with any other variable. Or as a property of <code>$this-&gt;session</code>.</p> <p>Alternatively, the old method of assigning it as “userdata” is also available. That however passing an array containing your new data to the <code>set_userdata()</code> method:</p> <pre data-language=\"php\">$this-&gt;session-&gt;set_userdata($array);\n</pre> <p>Where <code>$array</code> is an associative array containing your new data. Here’s an example:</p> <pre data-language=\"php\">$newdata = array(\n        'username'  =&gt; 'johndoe',\n        'email'     =&gt; '[email protected]',\n        'logged_in' =&gt; TRUE\n);\n\n$this-&gt;session-&gt;set_userdata($newdata);\n</pre> <p>If you want to add userdata one value at a time, <code>set_userdata()</code> also supports this syntax:</p> <pre data-language=\"php\">$this-&gt;session-&gt;set_userdata('some_name', 'some_value');\n</pre> <p>If you want to verify that a session value exists, simply check with <code>isset()</code>:</p> <pre data-language=\"php\">// returns FALSE if the 'some_name' item doesn't exist or is NULL,\n// TRUE otherwise:\nisset($_SESSION['some_name'])\n</pre> <p>Or you can call <code>has_userdata()</code>:</p> <pre data-language=\"php\">$this-&gt;session-&gt;has_userdata('some_name');\n</pre>   <h3 id=\"removing-session-data\">Removing Session Data</h3> <p>Just as with any other variable, unsetting a value in <code>$_SESSION</code> can be done through <code>unset()</code>:</p> <pre data-language=\"php\">unset($_SESSION['some_name']);\n\n// or multiple values:\n\nunset(\n        $_SESSION['some_name'],\n        $_SESSION['another_name']\n);\n</pre> <p>Also, just as <code>set_userdata()</code> can be used to add information to a session, <code>unset_userdata()</code> can be used to remove it, by passing the session key. For example, if you wanted to remove ‘some_name’ from your session data array:</p> <pre data-language=\"php\">$this-&gt;session-&gt;unset_userdata('some_name');\n</pre> <p>This method also accepts an array of item keys to unset:</p> <pre data-language=\"php\">$array_items = array('username', 'email');\n\n$this-&gt;session-&gt;unset_userdata($array_items);\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In previous versions, the <code>unset_userdata()</code> method used to accept an associative array of <code>key =&gt; 'dummy value'</code> pairs. This is no longer supported.</p> </div>   <h3 id=\"flashdata\">Flashdata</h3> <p>CodeIgniter supports “flashdata”, or session data that will only be available for the next request, and is then automatically cleared.</p> <p>This can be very useful, especially for one-time informational, error or status messages (for example: “Record 2 deleted”).</p> <p>It should be noted that flashdata variables are regular session vars, only marked in a specific way under the ‘__ci_vars’ key (please don’t touch that one, you’ve been warned).</p> <p>To mark an existing item as “flashdata”:</p> <pre data-language=\"php\">$this-&gt;session-&gt;mark_as_flash('item');\n</pre> <p>If you want to mark multiple items as flashdata, simply pass the keys as an array:</p> <pre data-language=\"php\">$this-&gt;session-&gt;mark_as_flash(array('item', 'item2'));\n</pre> <p>To add flashdata:</p> <pre data-language=\"php\">$_SESSION['item'] = 'value';\n$this-&gt;session-&gt;mark_as_flash('item');\n</pre> <p>Or alternatively, using the <code>set_flashdata()</code> method:</p> <pre data-language=\"php\">$this-&gt;session-&gt;set_flashdata('item', 'value');\n</pre> <p>You can also pass an array to <code>set_flashdata()</code>, in the same manner as <code>set_userdata()</code>.</p> <p>Reading flashdata variables is the same as reading regular session data through <code>$_SESSION</code>:</p> <pre data-language=\"php\">$_SESSION['item']\n</pre> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">The <code>userdata()</code> method will NOT return flashdata items.</p> </div> <p>However, if you want to be sure that you’re reading “flashdata” (and not any other kind), you can also use the <code>flashdata()</code> method:</p> <pre data-language=\"php\">$this-&gt;session-&gt;flashdata('item');\n</pre> <p>Or to get an array with all flashdata, simply omit the key parameter:</p> <pre data-language=\"php\">$this-&gt;session-&gt;flashdata();\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>flashdata()</code> method returns NULL if the item cannot be found.</p> </div> <p>If you find that you need to preserve a flashdata variable through an additional request, you can do so using the <code>keep_flashdata()</code> method. You can either pass a single item or an array of flashdata items to keep.</p> <pre data-language=\"php\">$this-&gt;session-&gt;keep_flashdata('item');\n$this-&gt;session-&gt;keep_flashdata(array('item1', 'item2', 'item3'));\n</pre>   <h3 id=\"tempdata\">Tempdata</h3> <p>CodeIgniter also supports “tempdata”, or session data with a specific expiration time. After the value expires, or the session expires or is deleted, the value is automatically removed.</p> <p>Similarly to flashdata, tempdata variables are regular session vars that are marked in a specific way under the ‘__ci_vars’ key (again, don’t touch that one).</p> <p>To mark an existing item as “tempdata”, simply pass its key and expiry time (in seconds!) to the <code>mark_as_temp()</code> method:</p> <pre data-language=\"php\">// 'item' will be erased after 300 seconds\n$this-&gt;session-&gt;mark_as_temp('item', 300);\n</pre> <p>You can mark multiple items as tempdata in two ways, depending on whether you want them all to have the same expiry time or not:</p> <pre data-language=\"php\">// Both 'item' and 'item2' will expire after 300 seconds\n$this-&gt;session-&gt;mark_as_temp(array('item', 'item2'), 300);\n\n// 'item' will be erased after 300 seconds, while 'item2'\n// will do so after only 240 seconds\n$this-&gt;session-&gt;mark_as_temp(array(\n        'item'  =&gt; 300,\n        'item2' =&gt; 240\n));\n</pre> <p>To add tempdata:</p> <pre data-language=\"php\">$_SESSION['item'] = 'value';\n$this-&gt;session-&gt;mark_as_temp('item', 300); // Expire in 5 minutes\n</pre> <p>Or alternatively, using the <code>set_tempdata()</code> method:</p> <pre data-language=\"php\">$this-&gt;session-&gt;set_tempdata('item', 'value', 300);\n</pre> <p>You can also pass an array to <code>set_tempdata()</code>:</p> <pre data-language=\"php\">$tempdata = array('newuser' =&gt; TRUE, 'message' =&gt; 'Thanks for joining!');\n\n$this-&gt;session-&gt;set_tempdata($tempdata, NULL, $expire);\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If the expiration is omitted or set to 0, the default time-to-live value of 300 seconds (or 5 minutes) will be used.</p> </div> <p>To read a tempdata variable, again you can just access it through the <code>$_SESSION</code> superglobal array:</p> <pre data-language=\"php\">$_SESSION['item']\n</pre> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">The <code>userdata()</code> method will NOT return tempdata items.</p> </div> <p>Or if you want to be sure that you’re reading “tempdata” (and not any other kind), you can also use the <code>tempdata()</code> method:</p> <pre data-language=\"php\">$this-&gt;session-&gt;tempdata('item');\n</pre> <p>And of course, if you want to retrieve all existing tempdata:</p> <pre data-language=\"php\">$this-&gt;session-&gt;tempdata();\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <code>tempdata()</code> method returns NULL if the item cannot be found.</p> </div> <p>If you need to remove a tempdata value before it expires, you can directly unset it from the <code>$_SESSION</code> array:</p> <pre data-language=\"php\">unset($_SESSION['item']);\n</pre> <p>However, this won’t remove the marker that makes this specific item to be tempdata (it will be invalidated on the next HTTP request), so if you intend to reuse that same key in the same request, you’d want to use <code>unset_tempdata()</code>:</p> <pre data-language=\"php\">$this-&gt;session-&gt;unset_tempdata('item');\n</pre>   <h3 id=\"destroying-a-session\">Destroying a Session</h3> <p>To clear the current session (for example, during a logout), you may simply use either PHP’s <a class=\"reference external\" href=\"http://php.net/session_destroy\">session_destroy()</a> function, or the <code>sess_destroy()</code> method. Both will work in exactly the same way:</p> <pre data-language=\"php\">session_destroy();\n\n// or\n\n$this-&gt;session-&gt;sess_destroy();\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This must be the last session-related operation that you do during the same request. All session data (including flashdata and tempdata) will be destroyed permanently and functions will be unusable during the same request after you destroy the session.</p> </div>   <h3 id=\"accessing-session-metadata\">Accessing session metadata</h3> <p>In previous CodeIgniter versions, the session data array included 4 items by default: ‘session_id’, ‘ip_address’, ‘user_agent’, ‘last_activity’.</p> <p>This was due to the specifics of how sessions worked, but is now no longer necessary with our new implementation. However, it may happen that your application relied on these values, so here are alternative methods of accessing them:</p>  <ul class=\"simple\"> <li>session_id: <code>session_id()</code>\n</li> <li>ip_address: <code>$_SERVER['REMOTE_ADDR']</code>\n</li> <li>user_agent: <code>$this-&gt;input-&gt;user_agent()</code> (unused by sessions)</li> <li>last_activity: Depends on the storage, no straightforward way. Sorry!</li> </ul>    <h3 id=\"session-preferences\">Session Preferences</h3> <p>CodeIgniter will usually make everything work out of the box. However, Sessions are a very sensitive component of any application, so some careful configuration must be done. Please take your time to consider all of the options and their effects.</p> <p>You’ll find the following Session related preferences in your <strong>application/config/config.php</strong> file:</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Preference</th> <th class=\"head\">Default</th> <th class=\"head\">Options</th> <th class=\"head\">Description</th> </tr> </thead>  <tr class=\"row-even\">\n<td><strong>sess_driver</strong></td> <td>files</td> <td>files/database/redis/memcached/<em>custom</em>\n</td> <td>The session storage driver to use.</td> </tr> <tr class=\"row-odd\">\n<td><strong>sess_cookie_name</strong></td> <td>ci_session</td> <td>[A-Za-z_-] characters only</td> <td>The name used for the session cookie.</td> </tr> <tr class=\"row-even\">\n<td><strong>sess_expiration</strong></td> <td>7200 (2 hours)</td> <td>Time in seconds (integer)</td> <td>The number of seconds you would like the session to last. If you would like a non-expiring session (until browser is closed) set the value to zero: 0</td> </tr> <tr class=\"row-odd\">\n<td><strong>sess_save_path</strong></td> <td>NULL</td> <td>None</td> <td>Specifies the storage location, depends on the driver being used.</td> </tr> <tr class=\"row-even\">\n<td><strong>sess_match_ip</strong></td> <td>FALSE</td> <td>TRUE/FALSE (boolean)</td> <td>Whether to validate the user’s IP address when reading the session cookie. Note that some ISPs dynamically changes the IP, so if you want a non-expiring session you will likely set this to FALSE.</td> </tr> <tr class=\"row-odd\">\n<td><strong>sess_time_to_update</strong></td> <td>300</td> <td>Time in seconds (integer)</td> <td>This option controls how often the session class will regenerate itself and create a new session ID. Setting it to 0 will disable session ID regeneration.</td> </tr> <tr class=\"row-even\">\n<td><strong>sess_regenerate_destroy</strong></td> <td>FALSE</td> <td>TRUE/FALSE (boolean)</td> <td>Whether to destroy session data associated with the old session ID when auto-regenerating the session ID. When set to FALSE, the data will be later deleted by the garbage collector.</td> </tr>  </table> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">As a last resort, the Session library will try to fetch PHP’s session related INI settings, as well as legacy CI settings such as ‘sess_expire_on_close’ when any of the above is not configured. However, you should never rely on this behavior as it can cause unexpected results or be changed in the future. Please configure everything properly.</p> </div> <p>In addition to the values above, the cookie and native drivers apply the following configuration values shared by the <a class=\"reference internal\" href=\"input\">Input</a> and <a class=\"reference internal\" href=\"security\">Security</a> classes:</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Preference</th> <th class=\"head\">Default</th> <th class=\"head\">Description</th> </tr> </thead>  <tr class=\"row-even\">\n<td><strong>cookie_domain</strong></td> <td>‘’</td> <td>The domain for which the session is applicable</td> </tr> <tr class=\"row-odd\">\n<td><strong>cookie_path</strong></td> <td>/</td> <td>The path to which the session is applicable</td> </tr> <tr class=\"row-even\">\n<td><strong>cookie_secure</strong></td> <td>FALSE</td> <td>Whether to create the session cookie only on encrypted (HTTPS) connections</td> </tr>  </table> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The ‘cookie_httponly’ setting doesn’t have an effect on sessions. Instead the HttpOnly parameter is always enabled, for security reasons. Additionaly, the ‘cookie_prefix’ setting is completely ignored.</p> </div>   <h3 id=\"session-drivers\">Session Drivers</h3> <p>As already mentioned, the Session library comes with 4 drivers, or storage engines, that you can use:</p>  <ul class=\"simple\"> <li>files</li> <li>database</li> <li>redis</li> <li>memcached</li> </ul>  <p>By default, the <a class=\"reference internal\" href=\"#files-driver\">Files Driver</a> will be used when a session is initialized, because it is the most safe choice and is expected to work everywhere (virtually every environment has a file system).</p> <p>However, any other driver may be selected via the <code>$config['sess_driver']</code> line in your <strong>application/config/config.php</strong> file, if you chose to do so. Have it in mind though, every driver has different caveats, so be sure to get yourself familiar with them (below) before you make that choice.</p> <p>In addition, you may also create and use <a class=\"reference internal\" href=\"#custom-drivers\">Custom Drivers</a>, if the ones provided by default don’t satisfy your use case.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In previous CodeIgniter versions, a different, “cookie driver” was the only option and we have received negative feedback on not providing that option. While we do listen to feedback from the community, we want to warn you that it was dropped because it is <strong>unsafe</strong> and we advise you NOT to try to replicate it via a custom driver.</p> </div>  <h4 id=\"files-driver\">Files Driver</h4> <p>The ‘files’ driver uses your file system for storing session data.</p> <p>It can safely be said that it works exactly like PHP’s own default session implementation, but in case this is an important detail for you, have it mind that it is in fact not the same code and it has some limitations (and advantages).</p> <p>To be more specific, it doesn’t support PHP’s <a class=\"reference external\" href=\"http://php.net/manual/en/session.configuration.php#ini.session.save-path\">directory level and mode formats used in session.save_path</a>, and it has most of the options hard-coded for safety. Instead, only absolute paths are supported for <code>$config['sess_save_path']</code>.</p> <p>Another important thing that you should know, is to make sure that you don’t use a publicly-readable or shared directory for storing your session files. Make sure that <em>only you</em> have access to see the contents of your chosen <em>sess_save_path</em> directory. Otherwise, anybody who can do that, can also steal any of the current sessions (also known as “session fixation” attack).</p> <p>On UNIX-like operating systems, this is usually achieved by setting the 0700 mode permissions on that directory via the <cite>chmod</cite> command, which allows only the directory’s owner to perform read and write operations on it. But be careful because the system user <em>running</em> the script is usually not your own, but something like ‘www-data’ instead, so only setting those permissions will probable break your application.</p> <p>Instead, you should do something like this, depending on your environment</p> <pre data-language=\"php\">mkdir /&lt;path to your application directory&gt;/sessions/\nchmod 0700 /&lt;path to your application directory&gt;/sessions/\nchown www-data /&lt;path to your application directory&gt;/sessions/\n</pre>  <h5 id=\"bonus-tip\">Bonus Tip</h5> <p>Some of you will probably opt to choose another session driver because file storage is usually slower. This is only half true.</p> <p>A very basic test will probably trick you into believing that an SQL database is faster, but in 99% of the cases, this is only true while you only have a few current sessions. As the sessions count and server loads increase - which is the time when it matters - the file system will consistently outperform almost all relational database setups.</p> <p>In addition, if performance is your only concern, you may want to look into using <a class=\"reference external\" href=\"http://eddmann.com/posts/storing-php-sessions-file-caches-in-memory-using-tmpfs/\">tmpfs</a>, (warning: external resource), which can make your sessions blazing fast.</p>    <h4 id=\"database-driver\">Database Driver</h4> <p>The ‘database’ driver uses a relational database such as MySQL or PostgreSQL to store sessions. This is a popular choice among many users, because it allows the developer easy access to the session data within an application - it is just another table in your database.</p> <p>However, there are some conditions that must be met:</p>  <ul class=\"simple\"> <li>Only your <strong>default</strong> database connection (or the one that you access as <code>$this-&gt;db</code> from your controllers) can be used.</li> <li>You must have the <a class=\"reference internal\" href=\"../database/query_builder\">Query Builder</a> enabled.</li> <li>You can NOT use a persistent connection.</li> <li>You can NOT use a connection with the <em>cache_on</em> setting enabled.</li> </ul>  <p>In order to use the ‘database’ session driver, you must also create this table that we already mentioned and then set it as your <code>$config['sess_save_path']</code> value. For example, if you would like to use ‘ci_sessions’ as your table name, you would do this:</p> <pre data-language=\"php\">$config['sess_driver'] = 'database';\n$config['sess_save_path'] = 'ci_sessions';\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If you’ve upgraded from a previous version of CodeIgniter and you don’t have ‘sess_save_path’ configured, then the Session library will look for the old ‘sess_table_name’ setting and use it instead. Please don’t rely on this behavior as it will get removed in the future.</p> </div> <p>And then of course, create the database table ...</p> <p>For MySQL:</p> <pre data-language=\"php\">CREATE TABLE IF NOT EXISTS `ci_sessions` (\n        `id` varchar(40) NOT NULL,\n        `ip_address` varchar(45) NOT NULL,\n        `timestamp` int(10) unsigned DEFAULT 0 NOT NULL,\n        `data` blob NOT NULL,\n        KEY `ci_sessions_timestamp` (`timestamp`)\n);\n</pre> <p>For PostgreSQL:</p> <pre data-language=\"php\">CREATE TABLE \"ci_sessions\" (\n        \"id\" varchar(40) NOT NULL,\n        \"ip_address\" varchar(45) NOT NULL,\n        \"timestamp\" bigint DEFAULT 0 NOT NULL,\n        \"data\" text DEFAULT '' NOT NULL\n);\n\nCREATE INDEX \"ci_sessions_timestamp\" ON \"ci_sessions\" (\"timestamp\");\n</pre> <p>You will also need to add a PRIMARY KEY <strong>depending on your ‘sess_match_ip’ setting</strong>. The examples below work both on MySQL and PostgreSQL:</p> <pre data-language=\"php\">// When sess_match_ip = TRUE\nALTER TABLE ci_sessions ADD PRIMARY KEY (id, ip_address);\n\n// When sess_match_ip = FALSE\nALTER TABLE ci_sessions ADD PRIMARY KEY (id);\n\n// To drop a previously created primary key (use when changing the setting)\nALTER TABLE ci_sessions DROP PRIMARY KEY;\n</pre> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">Only MySQL and PostgreSQL databases are officially supported, due to lack of advisory locking mechanisms on other platforms. Using sessions without locks can cause all sorts of problems, especially with heavy usage of AJAX, and we will not support such cases. Use <code>session_write_close()</code> after you’ve done processing session data if you’re having performance issues.</p> </div>   <h4 id=\"redis-driver\">Redis Driver</h4> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Since Redis doesn’t have a locking mechanism exposed, locks for this driver are emulated by a separate value that is kept for up to 300 seconds.</p> </div> <p>Redis is a storage engine typically used for caching and popular because of its high performance, which is also probably your reason to use the ‘redis’ session driver.</p> <p>The downside is that it is not as ubiquitous as relational databases and requires the <a class=\"reference external\" href=\"https://github.com/phpredis/phpredis\">phpredis</a> PHP extension to be installed on your system, and that one doesn’t come bundled with PHP. Chances are, you’re only be using the ‘redis’ driver only if you’re already both familiar with Redis and using it for other purposes.</p> <p>Just as with the ‘files’ and ‘database’ drivers, you must also configure the storage location for your sessions via the <code>$config['sess_save_path']</code> setting. The format here is a bit different and complicated at the same time. It is best explained by the <em>phpredis</em> extension’s README file, so we’ll simply link you to it:</p>  <a class=\"reference external\" href=\"https://github.com/phpredis/phpredis#php-session-handler\">https://github.com/phpredis/phpredis#php-session-handler</a> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">CodeIgniter’s Session library does NOT use the actual ‘redis’ <code>session.save_handler</code>. Take note <strong>only</strong> of the path format in the link above.</p> </div> <p>For the most common case however, a simple <code>host:port</code> pair should be sufficient:</p> <pre data-language=\"php\">$config['sess_driver'] = 'redis';\n$config['sess_save_path'] = 'tcp://localhost:6379';\n</pre>   <h4 id=\"memcached-driver\">Memcached Driver</h4> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Since Memcache doesn’t have a locking mechanism exposed, locks for this driver are emulated by a separate value that is kept for up to 300 seconds.</p> </div> <p>The ‘memcached’ driver is very similar to the ‘redis’ one in all of its properties, except perhaps for availability, because PHP’s <a class=\"reference external\" href=\"http://php.net/memcached\">Memcached</a> extension is distributed via PECL and some Linux distrubutions make it available as an easy to install package.</p> <p>Other than that, and without any intentional bias towards Redis, there’s not much different to be said about Memcached - it is also a popular product that is usually used for caching and famed for its speed.</p> <p>However, it is worth noting that the only guarantee given by Memcached is that setting value X to expire after Y seconds will result in it being deleted after Y seconds have passed (but not necessarily that it won’t expire earlier than that time). This happens very rarely, but should be considered as it may result in loss of sessions.</p> <p>The <code>$config['sess_save_path']</code> format is fairly straightforward here, being just a <code>host:port</code> pair:</p> <pre data-language=\"php\">$config['sess_driver'] = 'memcached';\n$config['sess_save_path'] = 'localhost:11211';\n</pre>  <h5 id=\"id1\">Bonus Tip</h5> <p>Multi-server configuration with an optional <em>weight</em> parameter as the third colon-separated (<code>:weight</code>) value is also supported, but we have to note that we haven’t tested if that is reliable.</p> <p>If you want to experiment with this feature (on your own risk), simply separate the multiple server paths with commas:</p> <pre data-language=\"php\">// localhost will be given higher priority (5) here,\n// compared to 192.0.2.1 with a weight of 1.\n$config['sess_save_path'] = 'localhost:11211:5,192.0.2.1:11211:1';\n</pre>    <h4 id=\"custom-drivers\">Custom Drivers</h4> <p>You may also create your own, custom session drivers. However, have it in mind that this is typically not an easy task, as it takes a lot of knowledge to do it properly.</p> <p>You need to know not only how sessions work in general, but also how they work specifically in PHP, how the underlying storage mechanism works, how to handle concurrency, avoid deadlocks (but NOT through lack of locks) and last but not least - how to handle the potential security issues, which is far from trivial.</p> <p>Long story short - if you don’t know how to do that already in raw PHP, you shouldn’t be trying to do it within CodeIgniter either. You’ve been warned.</p> <p>If you only want to add some extra functionality to your sessions, just extend the base Session class, which is a lot more easier. Read the <a class=\"reference internal\" href=\"../general/creating_libraries\">Creating Libraries</a> article to learn how to do that.</p> <p>Now, to the point - there are three general rules that you must follow when creating a session driver for CodeIgniter:</p>  <ul> <li>\n<p class=\"first\">Put your driver’s file under <strong>application/libraries/Session/drivers/</strong> and follow the naming conventions used by the Session class.</p> <p>For example, if you were to create a ‘dummy’ driver, you would have a <code>Session_dummy_driver</code> class name, that is declared in <em>application/libraries/Session/drivers/Session_dummy_driver.php</em>.</p> </li> <li>\n<p class=\"first\">Extend the <code>CI_Session_driver</code> class.</p> <p>This is just a basic class with a few internal helper methods. It is also extendable like any other library, if you really need to do that, but we are not going to explain how ... if you’re familiar with how class extensions/overrides work in CI, then you already know how to do it. If not, well, you shouldn’t be doing it in the first place.</p> </li> <li>\n<p class=\"first\">Implement the <a class=\"reference external\" href=\"http://php.net/sessionhandlerinterface\">SessionHandlerInterface</a> interface.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">You may notice that <code>SessionHandlerInterface</code> is provided by PHP since version 5.4.0. CodeIgniter will automatically declare the same interface if you’re running an older PHP version.</p> </div> <p>The link will explain why and how.</p> </li> </ul>  <p>So, based on our ‘dummy’ driver example above, you’d end up with something like this:</p> <pre data-language=\"php\">// application/libraries/Session/drivers/Session_dummy_driver.php:\n\nclass CI_Session_dummy_driver extends CI_Session_driver implements SessionHandlerInterface\n{\n\n        public function __construct(&amp;$params)\n        {\n                // DO NOT forget this\n                parent::__construct($params);\n\n                // Configuration &amp; other initializations\n        }\n\n        public function open($save_path, $name)\n        {\n                // Initialize storage mechanism (connection)\n        }\n\n        public function read($session_id)\n        {\n                // Read session data (if exists), acquire locks\n        }\n\n        public function write($session_id, $session_data)\n        {\n                // Create / update session data (it might not exist!)\n        }\n\n        public function close()\n        {\n                // Free locks, close connections / streams / etc.\n        }\n\n        public function destroy($session_id)\n        {\n                // Call close() method &amp; destroy data for current session (order may differ)\n        }\n\n        public function gc($maxlifetime)\n        {\n                // Erase data for expired sessions\n        }\n\n}\n</pre> <p>If you’ve done everything properly, you can now set your <em>sess_driver</em> configuration value to ‘dummy’ and use your own driver. Congratulations!</p>     <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_Session\">\n<code>class CI_Session</code> </dt> <dd>\n<dl class=\"method\"> <dt id=\"CI_Session::userdata\">\n<code>userdata([$key = NULL])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$key</strong> (<em>mixed</em>) – Session item key or NULL</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Value of the specified item key, or an array of all userdata</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Gets the value for a specific <code>$_SESSION</code> item, or an array of all “userdata” items if not key was specified.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This is a legacy method kept only for backwards compatibility with older applications. You should directly access <code>$_SESSION</code> instead.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Session::all_userdata\">\n<code>all_userdata()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">An array of all userdata</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">array</td> </tr>  </table> <p>Returns an array containing all “userdata” items.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This method is DEPRECATED. Use <code>userdata()</code> with no parameters instead.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt>\n<code>&amp;get_userdata()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">A reference to <code>$_SESSION</code>\n</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">array</td> </tr>  </table> <p>Returns a reference to the <code>$_SESSION</code> array.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This is a legacy method kept only for backwards compatibility with older applications.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Session::has_userdata\">\n<code>has_userdata($key)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$key</strong> (<em>string</em>) – Session item key</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE if the specified key exists, FALSE if not</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Checks if an item exists in <code>$_SESSION</code>.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This is a legacy method kept only for backwards compatibility with older applications. It is just an alias for <code>isset($_SESSION[$key])</code> - please use that instead.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Session::set_userdata\">\n<code>set_userdata($data[, $value = NULL])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$data</strong> (<em>mixed</em>) – An array of key/value pairs to set as session data, or the key for a single item</li> <li>\n<strong>$value</strong> (<em>mixed</em>) – The value to set for a specific session item, if $data is a key</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Assigns data to the <code>$_SESSION</code> superglobal.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This is a legacy method kept only for backwards compatibility with older applications.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Session::unset_userdata\">\n<code>unset_userdata($key)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$key</strong> (<em>mixed</em>) – Key for the session data item to unset, or an array of multiple keys</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Unsets the specified key(s) from the <code>$_SESSION</code> superglobal.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This is a legacy method kept only for backwards compatibility with older applications. It is just an alias for <code>unset($_SESSION[$key])</code> - please use that instead.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Session::mark_as_flash\">\n<code>mark_as_flash($key)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$key</strong> (<em>mixed</em>) – Key to mark as flashdata, or an array of multiple keys</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Marks a <code>$_SESSION</code> item key (or multiple ones) as “flashdata”.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Session::get_flash_keys\">\n<code>get_flash_keys()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Array containing the keys of all “flashdata” items.</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">array</td> </tr>  </table> <p>Gets a list of all <code>$_SESSION</code> that have been marked as “flashdata”.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Session::unmark_flash\">\n<code>unmark_flash($key)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$key</strong> (<em>mixed</em>) – Key to be un-marked as flashdata, or an array of multiple keys</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Unmarks a <code>$_SESSION</code> item key (or multiple ones) as “flashdata”.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Session::flashdata\">\n<code>flashdata([$key = NULL])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$key</strong> (<em>mixed</em>) – Flashdata item key or NULL</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Value of the specified item key, or an array of all flashdata</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Gets the value for a specific <code>$_SESSION</code> item that has been marked as “flashdata”, or an array of all “flashdata” items if no key was specified.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This is a legacy method kept only for backwards compatibility with older applications. You should directly access <code>$_SESSION</code> instead.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Session::keep_flashdata\">\n<code>keep_flashdata($key)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$key</strong> (<em>mixed</em>) – Flashdata key to keep, or an array of multiple keys</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Retains the specified session data key(s) as “flashdata” through the next request.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This is a legacy method kept only for backwards compatibility with older applications. It is just an alias for the <code>mark_as_flash()</code> method.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Session::set_flashdata\">\n<code>set_flashdata($data[, $value = NULL])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$data</strong> (<em>mixed</em>) – An array of key/value pairs to set as flashdata, or the key for a single item</li> <li>\n<strong>$value</strong> (<em>mixed</em>) – The value to set for a specific session item, if $data is a key</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Assigns data to the <code>$_SESSION</code> superglobal and marks it as “flashdata”.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This is a legacy method kept only for backwards compatibility with older applications.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Session::mark_as_temp\">\n<code>mark_as_temp($key[, $ttl = 300])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$key</strong> (<em>mixed</em>) – Key to mark as tempdata, or an array of multiple keys</li> <li>\n<strong>$ttl</strong> (<em>int</em>) – Time-to-live value for the tempdata, in seconds</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Marks a <code>$_SESSION</code> item key (or multiple ones) as “tempdata”.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Session::get_temp_keys\">\n<code>get_temp_keys()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Array containing the keys of all “tempdata” items.</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">array</td> </tr>  </table> <p>Gets a list of all <code>$_SESSION</code> that have been marked as “tempdata”.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Session::unmark_temp\">\n<code>unmark_temp($key)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$key</strong> (<em>mixed</em>) – Key to be un-marked as tempdata, or an array of multiple keys</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Unmarks a <code>$_SESSION</code> item key (or multiple ones) as “tempdata”.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Session::tempdata\">\n<code>tempdata([$key = NULL])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$key</strong> (<em>mixed</em>) – Tempdata item key or NULL</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Value of the specified item key, or an array of all tempdata</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Gets the value for a specific <code>$_SESSION</code> item that has been marked as “tempdata”, or an array of all “tempdata” items if no key was specified.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This is a legacy method kept only for backwards compatibility with older applications. You should directly access <code>$_SESSION</code> instead.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Session::set_tempdata\">\n<code>set_tempdata($data[, $value = NULL])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$data</strong> (<em>mixed</em>) – An array of key/value pairs to set as tempdata, or the key for a single item</li> <li>\n<strong>$value</strong> (<em>mixed</em>) – The value to set for a specific session item, if $data is a key</li> <li>\n<strong>$ttl</strong> (<em>int</em>) – Time-to-live value for the tempdata item(s), in seconds</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Assigns data to the <code>$_SESSION</code> superglobal and marks it as “tempdata”.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This is a legacy method kept only for backwards compatibility with older applications.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Session::sess_regenerate\">\n<code>sess_regenerate([$destroy = FALSE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$destroy</strong> (<em>bool</em>) – Whether to destroy session data</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Regenerate session ID, optionally destroying the current session’s data.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This method is just an alias for PHP’s native <a class=\"reference external\" href=\"http://php.net/session_regenerate_id\">session_regenerate_id()</a> function.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Session::sess_destroy\">\n<code>sess_destroy()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">void</td> </tr>  </table> <p>Destroys the current session.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This must be the <em>last</em> session-related function that you call. All session data will be lost after you do that.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This method is just an alias for PHP’s native <a class=\"reference external\" href=\"http://php.net/session_destroy\">session_destroy()</a> function.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Session::__get\">\n<code>__get($key)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$key</strong> (<em>string</em>) – Session item key</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">The requested session data item, or NULL if it doesn’t exist</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>A magic method that allows you to use <code>$this-&gt;session-&gt;item</code> instead of <code>$_SESSION['item']</code>, if that’s what you prefer.</p> <p>It will also return the session ID by calling <code>session_id()</code> if you try to access <code>$this-&gt;session-&gt;session_id</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_Session::__set\">\n<code>__set($key, $value)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$key</strong> (<em>string</em>) – Session item key</li> <li>\n<strong>$value</strong> (<em>mixed</em>) – Value to assign to the session item key</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>A magic method that allows you to assign items to <code>$_SESSION</code> by accessing them as <code>$this-&gt;session</code> properties:</p> <pre data-language=\"php\">$this-&gt;session-&gt;foo = 'bar';\n\n// Results in:\n// $_SESSION['foo'] = 'bar';\n</pre> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/libraries/sessions.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/libraries/sessions.html</a>\n  </p>\n</div>\n","database/examples":"<h1 id=\"database-quick-start-example-code\">Database Quick Start: Example Code</h1> <p>The following page contains example code showing how the database class is used. For complete details please read the individual pages describing each function.</p>  <h2 id=\"initializing-the-database-class\">Initializing the Database Class</h2> <p>The following code loads and initializes the database class based on your <a class=\"reference internal\" href=\"configuration\">configuration</a> settings:</p> <pre data-language=\"php\">$this-&gt;load-&gt;database();\n</pre> <p>Once loaded the class is ready to be used as described below.</p> <p>Note: If all your pages require database access you can connect automatically. See the <a class=\"reference internal\" href=\"connecting\">connecting</a> page for details.</p>   <h2 id=\"standard-query-with-multiple-results-object-version\">Standard Query With Multiple Results (Object Version)</h2> <pre data-language=\"php\">$query = $this-&gt;db-&gt;query('SELECT name, title, email FROM my_table');\n\nforeach ($query-&gt;result() as $row)\n{\n        echo $row-&gt;title;\n        echo $row-&gt;name;\n        echo $row-&gt;email;\n}\n\necho 'Total Results: ' . $query-&gt;num_rows();\n</pre> <p>The above result() function returns an array of <strong>objects</strong>. Example: $row-&gt;title</p>   <h2 id=\"standard-query-with-multiple-results-array-version\">Standard Query With Multiple Results (Array Version)</h2> <pre data-language=\"php\">$query = $this-&gt;db-&gt;query('SELECT name, title, email FROM my_table');\n\nforeach ($query-&gt;result_array() as $row)\n{\n        echo $row['title'];\n        echo $row['name'];\n        echo $row['email'];\n}\n</pre> <p>The above result_array() function returns an array of standard array indexes. Example: $row[‘title’]</p>   <h2 id=\"standard-query-with-single-result\">Standard Query With Single Result</h2> <pre data-language=\"php\">$query = $this-&gt;db-&gt;query('SELECT name FROM my_table LIMIT 1');\n$row = $query-&gt;row();\necho $row-&gt;name;\n</pre> <p>The above row() function returns an <strong>object</strong>. Example: $row-&gt;name</p>   <h2 id=\"standard-query-with-single-result-array-version\">Standard Query With Single Result (Array version)</h2> <pre data-language=\"php\">$query = $this-&gt;db-&gt;query('SELECT name FROM my_table LIMIT 1');\n$row = $query-&gt;row_array();\necho $row['name'];\n</pre> <p>The above row_array() function returns an <strong>array</strong>. Example: $row[‘name’]</p>   <h2 id=\"standard-insert\">Standard Insert</h2> <pre data-language=\"php\">$sql = \"INSERT INTO mytable (title, name) VALUES (\".$this-&gt;db-&gt;escape($title).\", \".$this-&gt;db-&gt;escape($name).\")\";\n$this-&gt;db-&gt;query($sql);\necho $this-&gt;db-&gt;affected_rows();\n</pre>   <h2 id=\"query-builder-query\">Query Builder Query</h2> <p>The <a class=\"reference internal\" href=\"query_builder\">Query Builder Pattern</a> gives you a simplified means of retrieving data:</p> <pre data-language=\"php\">$query = $this-&gt;db-&gt;get('table_name');\n\nforeach ($query-&gt;result() as $row)\n{\n        echo $row-&gt;title;\n}\n</pre> <p>The above get() function retrieves all the results from the supplied table. The <a class=\"reference internal\" href=\"query_builder\">Query Builder</a> class contains a full compliment of functions for working with data.</p>   <h2 id=\"query-builder-insert\">Query Builder Insert</h2> <pre data-language=\"php\">$data = array(\n        'title' =&gt; $title,\n        'name' =&gt; $name,\n        'date' =&gt; $date\n);\n\n$this-&gt;db-&gt;insert('mytable', $data);  // Produces: INSERT INTO mytable (title, name, date) VALUES ('{$title}', '{$name}', '{$date}')\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/database/examples.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/database/examples.html</a>\n  </p>\n</div>\n","database/connecting":"<h1 id=\"connecting-to-your-database\">Connecting to your Database</h1> <p>There are two ways to connect to a database:</p>  <h2 id=\"automatically-connecting\">Automatically Connecting</h2> <p>The “auto connect” feature will load and instantiate the database class with every page load. To enable “auto connecting”, add the word database to the library array, as indicated in the following file:</p> <p>application/config/autoload.php</p>   <h2 id=\"manually-connecting\">Manually Connecting</h2> <p>If only some of your pages require database connectivity you can manually connect to your database by adding this line of code in any function where it is needed, or in your class constructor to make the database available globally in that class.</p> <pre data-language=\"php\">$this-&gt;load-&gt;database();\n</pre> <p>If the above function does <strong>not</strong> contain any information in the first parameter it will connect to the group specified in your database config file. For most people, this is the preferred method of use.</p>  <h3 id=\"available-parameters\">Available Parameters</h3> <ol class=\"arabic simple\"> <li>The database connection values, passed either as an array or a DSN string.</li> <li>TRUE/FALSE (boolean). Whether to return the connection ID (see Connecting to Multiple Databases below).</li> <li>TRUE/FALSE (boolean). Whether to enable the Query Builder class. Set to TRUE by default.</li> </ol>   <h3 id=\"manually-connecting-to-a-database\">Manually Connecting to a Database</h3> <p>The first parameter of this function can <strong>optionally</strong> be used to specify a particular database group from your config file, or you can even submit connection values for a database that is not specified in your config file. Examples:</p> <p>To choose a specific group from your config file you can do this:</p> <pre data-language=\"php\">$this-&gt;load-&gt;database('group_name');\n</pre> <p>Where group_name is the name of the connection group from your config file.</p> <p>To connect manually to a desired database you can pass an array of values:</p> <pre data-language=\"php\">$config['hostname'] = 'localhost';\n$config['username'] = 'myusername';\n$config['password'] = 'mypassword';\n$config['database'] = 'mydatabase';\n$config['dbdriver'] = 'mysqli';\n$config['dbprefix'] = '';\n$config['pconnect'] = FALSE;\n$config['db_debug'] = TRUE;\n$config['cache_on'] = FALSE;\n$config['cachedir'] = '';\n$config['char_set'] = 'utf8';\n$config['dbcollat'] = 'utf8_general_ci';\n$this-&gt;load-&gt;database($config);\n</pre> <p>For information on each of these values please see the <a class=\"reference internal\" href=\"configuration\">configuration page</a>.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>For the PDO driver, you should use the $config[‘dsn’] setting instead of ‘hostname’ and ‘database’:</p> <div class=\"last line-block\"> <div class=\"line\"><br></div> <div class=\"line\">$config[‘dsn’] = ‘mysql:host=localhost;dbname=mydatabase’;</div> </div> </div> <p>Or you can submit your database values as a Data Source Name. DSNs must have this prototype:</p> <pre data-language=\"php\">$dsn = 'dbdriver://username:[email protected]/database';\n$this-&gt;load-&gt;database($dsn);\n</pre> <p>To override default config values when connecting with a DSN string, add the config variables as a query string.</p> <pre data-language=\"php\">$dsn = 'dbdriver://username:[email protected]/database?char_set=utf8&amp;dbcollat=utf8_general_ci&amp;cache_on=true&amp;cachedir=/path/to/cache';\n$this-&gt;load-&gt;database($dsn);\n</pre>    <h2 id=\"connecting-to-multiple-databases\">Connecting to Multiple Databases</h2> <p>If you need to connect to more than one database simultaneously you can do so as follows:</p> <pre data-language=\"php\">$DB1 = $this-&gt;load-&gt;database('group_one', TRUE);\n$DB2 = $this-&gt;load-&gt;database('group_two', TRUE);\n</pre> <p>Note: Change the words “group_one” and “group_two” to the specific group names you are connecting to (or you can pass the connection values as indicated above).</p> <p>By setting the second parameter to TRUE (boolean) the function will return the database object.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>When you connect this way, you will use your object name to issue commands rather than the syntax used throughout this guide. In other words, rather than issuing commands with:</p> <div class=\"last line-block\"> <div class=\"line\"><br></div> <div class=\"line\">$this-&gt;db-&gt;query();</div> <div class=\"line\">$this-&gt;db-&gt;result();</div> <div class=\"line\">etc...</div> <div class=\"line\"><br></div> <div class=\"line\">You will instead use:</div> <div class=\"line\"><br></div> <div class=\"line\">$DB1-&gt;query();</div> <div class=\"line\">$DB1-&gt;result();</div> <div class=\"line\">etc...</div> </div> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>You don’t need to create separate database configurations if you only need to use a different database on the same connection. You can switch to a different database when you need to, like this:</p> <div class=\"last line-block\"> <div class=\"line\">$this-&gt;db-&gt;db_select($database2_name);</div> </div> </div>   <h2 id=\"reconnecting-keeping-the-connection-alive\">Reconnecting / Keeping the Connection Alive</h2> <p>If the database server’s idle timeout is exceeded while you’re doing some heavy PHP lifting (processing an image, for instance), you should consider pinging the server by using the reconnect() method before sending further queries, which can gracefully keep the connection alive or re-establish it.</p> <pre data-language=\"php\">$this-&gt;db-&gt;reconnect();\n</pre>   <h2 id=\"manually-closing-the-connection\">Manually closing the Connection</h2> <p>While CodeIgniter intelligently takes care of closing your database connections, you can explicitly close the connection.</p> <pre data-language=\"php\">$this-&gt;db-&gt;close();\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/database/connecting.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/database/connecting.html</a>\n  </p>\n</div>\n","database/db_driver_reference":"<h1 id=\"db-driver-reference\">DB Driver Reference</h1> <p>This is the platform-independent base DB implementation class. This class will not be called directly. Rather, the adapter class for the specific database will extend and instantiate it.</p> <p>The how-to material for this has been split over several articles. This article is intended to be a reference for them.</p> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">Not all methods are supported by all database drivers, some of them may fail (and return FALSE) if the underlying driver does not support them.</p> </div> <dl class=\"class\"> <dt id=\"CI_DB_driver\">\n<code>class CI_DB_driver</code> </dt> <dd>\n<dl class=\"method\"> <dt id=\"CI_DB_driver::initialize\">\n<code>initialize()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">TRUE on success, FALSE on failure</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">bool</td> </tr>  </table> <p>Initialize database settings, establish a connection to the database.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::db_connect\">\n<code>db_connect($persistent = TRUE)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$persistent</strong> (<em>bool</em>) – Whether to establish a persistent connection or a regular one</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Database connection resource/object or FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Establish a connection with the database.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The returned value depends on the underlying driver in use. For example, a <code>mysqli</code> instance will be returned with the ‘mysqli’ driver.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::db_pconnect\">\n<code>db_pconnect()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Database connection resource/object or FALSE on failure</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">mixed</td> </tr>  </table> <p>Establish a persistent connection with the database.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This method is just an alias for <code>db_connect(TRUE)</code>.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::reconnect\">\n<code>reconnect()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">TRUE on success, FALSE on failure</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">bool</td> </tr>  </table> <p>Keep / reestablish the database connection if no queries have been sent for a length of time exceeding the server’s idle timeout.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::db_select\">\n<code>db_select([$database = ''])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$database</strong> (<em>string</em>) – Database name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Select / switch the current database.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::db_set_charset\">\n<code>db_set_charset($charset)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$charset</strong> (<em>string</em>) – Character set name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Set client character set.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::platform\">\n<code>platform()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Platform name</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">string</td> </tr>  </table> <p>The name of the platform in use (mysql, mssql, etc...).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::version\">\n<code>version()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">The version of the database being used</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">string</td> </tr>  </table> <p>Database version number.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::query\">\n<code>query($sql[, $binds = FALSE[, $return_object = NULL]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$sql</strong> (<em>string</em>) – The SQL statement to execute</li> <li>\n<strong>$binds</strong> (<em>array</em>) – An array of binding data</li> <li>\n<strong>$return_object</strong> (<em>bool</em>) – Whether to return a result object or not</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE for successful “write-type” queries, CI_DB_result instance (method chaining) on “query” success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Execute an SQL query.</p> <p>Accepts an SQL string as input and returns a result object upon successful execution of a “read” type query.</p> <p>Returns:</p>  <ul class=\"simple\"> <li>Boolean TRUE upon successful execution of a “write type” queries</li> <li>Boolean FALSE upon failure</li> <li>\n<code>CI_DB_result</code> object for “read type” queries</li> </ul>  </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::simple_query\">\n<code>simple_query($sql)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$sql</strong> (<em>string</em>) – The SQL statement to execute</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Whatever the underlying driver’s “query” function returns</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>A simplified version of the <code>query()</code> method, appropriate for use when you don’t need to get a result object or to just send a query to the database and not care for the result.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::affected_rows\">\n<code>affected_rows()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Number of rows affected</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">int</td> </tr>  </table> <p>Returns the number of rows <em>changed</em> by the last executed query.</p> <p>Useful for checking how much rows were created, updated or deleted during the last executed query.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::trans_strict\">\n<code>trans_strict([$mode = TRUE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$mode</strong> (<em>bool</em>) – Strict mode flag</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Enable/disable transaction “strict” mode.</p> <p>When strict mode is enabled, if you are running multiple groups of transactions and one group fails, all subsequent groups will be rolled back.</p> <p>If strict mode is disabled, each group is treated autonomously, meaning a failure of one group will not affect any others.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::trans_off\">\n<code>trans_off()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">void</td> </tr>  </table> <p>Disables transactions at run-time.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::trans_start\">\n<code>trans_start([$test_mode = FALSE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$test_mode</strong> (<em>bool</em>) – Test mode flag</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Start a transaction.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::trans_complete\">\n<code>trans_complete()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">TRUE on success, FALSE on failure</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">bool</td> </tr>  </table> <p>Complete Transaction.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::trans_status\">\n<code>trans_status()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">TRUE if the transaction succeeded, FALSE if it failed</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">bool</td> </tr>  </table> <p>Lets you retrieve the transaction status flag to determine if it has failed.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::compile_binds\">\n<code>compile_binds($sql, $binds)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$sql</strong> (<em>string</em>) – The SQL statement</li> <li>\n<strong>$binds</strong> (<em>array</em>) – An array of binding data</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">The updated SQL statement</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Compiles an SQL query with the bind values passed for it.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::is_write_type\">\n<code>is_write_type($sql)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$sql</strong> (<em>string</em>) – The SQL statement</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE if the SQL statement is of “write type”, FALSE if not</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Determines if a query is of a “write” type (such as INSERT, UPDATE, DELETE) or “read” type (i.e. SELECT).</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::elapsed_time\">\n<code>elapsed_time([$decimals = 6])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$decimals</strong> (<em>int</em>) – The number of decimal places</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">The aggregate query elapsed time, in microseconds</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Calculate the aggregate query elapsed time.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::total_queries\">\n<code>total_queries()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">The total number of queries executed</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">int</td> </tr>  </table> <p>Returns the total number of queries that have been executed so far.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::last_query\">\n<code>last_query()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">The last query executed</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">string</td> </tr>  </table> <p>Returns the last query that was executed.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::escape\">\n<code>escape($str)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>mixed</em>) – The value to escape, or an array of multiple ones</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">The escaped value(s)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Escapes input data based on type, including boolean and NULLs.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::escape_str\">\n<code>escape_str($str[, $like = FALSE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>mixed</em>) – A string value or array of multiple ones</li> <li>\n<strong>$like</strong> (<em>bool</em>) – Whether or not the string will be used in a LIKE condition</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">The escaped string(s)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Escapes string values.</p> <div class=\"admonition warning\"> <p class=\"first admonition-title\">Warning</p> <p class=\"last\">The returned strings do NOT include quotes around them.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::escape_like_str\">\n<code>escape_like_str($str)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>mixed</em>) – A string value or array of multiple ones</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">The escaped string(s)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Escape LIKE strings.</p> <p>Similar to <code>escape_str()</code>, but will also escape the <code>%</code> and <code>_</code> wildcard characters, so that they don’t cause false-positives in LIKE conditions.</p> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">The <code>escape_like_str()</code> method uses ‘!’ (exclamation mark) to escape special characters for <em>LIKE</em> conditions. Because this method escapes partial strings that you would wrap in quotes yourself, it cannot automatically add the <code>ESCAPE '!'</code> condition for you, and so you’ll have to manually do that.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::primary\">\n<code>primary($table)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table</strong> (<em>string</em>) – Table name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">The primary key name, FALSE if none</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Retrieves the primary key of a table.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If the database platform does not support primary key detection, the first column name may be assumed as the primary key.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::count_all\">\n<code>count_all([$table = ''])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table</strong> (<em>string</em>) – Table name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Row count for the specified table</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">int</p> </td> </tr>  </table> <p>Returns the total number of rows in a table, or 0 if no table was provided.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::list_tables\">\n<code>list_tables([$constrain_by_prefix = FALSE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$constrain_by_prefix</strong> (<em>bool</em>) – TRUE to match table names by the configured dbprefix</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Array of table names or FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>Gets a list of the tables in the current database.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::table_exists\">\n<code>table_exists($table_name)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table_name</strong> (<em>string</em>) – The table name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE if that table exists, FALSE if not</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Determine if a particular table exists.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::list_fields\">\n<code>list_fields($table)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table</strong> (<em>string</em>) – The table name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Array of field names or FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>Gets a list of the field names in a table.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::field_exists\">\n<code>field_exists($field_name, $table_name)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table_name</strong> (<em>string</em>) – The table name</li> <li>\n<strong>$field_name</strong> (<em>string</em>) – The field name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE if that field exists in that table, FALSE if not</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Determine if a particular field exists.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::field_data\">\n<code>field_data($table)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table</strong> (<em>string</em>) – The table name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Array of field data items or FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>Gets a list containing field data about a table.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::escape_identifiers\">\n<code>escape_identifiers($item)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$item</strong> (<em>mixed</em>) – The item or array of items to escape</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">The input item(s), escaped</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Escape SQL identifiers, such as column, table and names.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::insert_string\">\n<code>insert_string($table, $data)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table</strong> (<em>string</em>) – The target table</li> <li>\n<strong>$data</strong> (<em>array</em>) – An associative array of key/value pairs</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">The SQL INSERT statement, as a string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Generate an INSERT statement string.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::update_string\">\n<code>update_string($table, $data, $where)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table</strong> (<em>string</em>) – The target table</li> <li>\n<strong>$data</strong> (<em>array</em>) – An associative array of key/value pairs</li> <li>\n<strong>$where</strong> (<em>mixed</em>) – The WHERE statement conditions</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">The SQL UPDATE statement, as a string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Generate an UPDATE statement string.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::call_function\">\n<code>call_function($function)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$function</strong> (<em>string</em>) – Function name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">The function result</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Runs a native PHP function , using a platform agnostic wrapper.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::cache_set_path\">\n<code>cache_set_path([$path = ''])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$path</strong> (<em>string</em>) – Path to the cache directory</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Sets the directory path to use for caching storage.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::cache_on\">\n<code>cache_on()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">TRUE if caching is on, FALSE if not</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">bool</td> </tr>  </table> <p>Enable database results caching.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::cache_off\">\n<code>cache_off()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">TRUE if caching is on, FALSE if not</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">bool</td> </tr>  </table> <p>Disable database results caching.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::cache_delete\">\n<code>cache_delete([$segment_one = ''[, $segment_two = '']])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$segment_one</strong> (<em>string</em>) – First URI segment</li> <li>\n<strong>$segment_two</strong> (<em>string</em>) – Second URI segment</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Delete the cache files associated with a particular URI.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::cache_delete_all\">\n<code>cache_delete_all()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">TRUE on success, FALSE on failure</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">bool</td> </tr>  </table> <p>Delete all cache files.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::close\">\n<code>close()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">void</td> </tr>  </table> <p>Close the DB Connection.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::display_error\">\n<code>display_error([$error = ''[, $swap = ''[, $native = FALSE]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$error</strong> (<em>string</em>) – The error message</li> <li>\n<strong>$swap</strong> (<em>string</em>) – Any “swap” values</li> <li>\n<strong>$native</strong> (<em>bool</em>) – Whether to localize the message</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first\">void</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Displays the DB error screensends the application/views/errors/error_db.php template</p> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Display an error message and stop script execution.</p> <p>The message is displayed using the <em>application/views/errors/error_db.php</em> template.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_driver::protect_identifiers\">\n<code>protect_identifiers($item[, $prefix_single = FALSE[, $protect_identifiers = NULL[, $field_exists = TRUE]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$item</strong> (<em>string</em>) – The item to work with</li> <li>\n<strong>$prefix_single</strong> (<em>bool</em>) – Whether to apply the dbprefix even if the input item is a single identifier</li> <li>\n<strong>$protect_identifiers</strong> (<em>bool</em>) – Whether to quote identifiers</li> <li>\n<strong>$field_exists</strong> (<em>bool</em>) – Whether the supplied item contains a field name or not</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">The modified item</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Takes a column or table name (optionally with an alias) and applies the configured <em>dbprefix</em> to it.</p> <p>Some logic is necessary in order to deal with column names that include the path.</p> <p>Consider a query like this:</p> <pre data-language=\"php\">SELECT * FROM hostname.database.table.column AS c FROM hostname.database.table\n</pre> <p>Or a query with aliasing:</p> <pre data-language=\"php\">SELECT m.member_id, m.member_name FROM members AS m\n</pre> <p>Since the column name can include up to four segments (host, DB, table, column) or also have an alias prefix, we need to do a bit of work to figure this out and insert the table prefix (if it exists) in the proper position, and escape only the correct identifiers.</p> <p>This method is used extensively by the Query Builder class.</p> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/database/db_driver_reference.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/database/db_driver_reference.html</a>\n  </p>\n</div>\n","database/helpers":"<h1 id=\"query-helper-methods\">Query Helper Methods</h1>  <h2 id=\"information-from-executing-a-query\">Information From Executing a Query</h2> <p><strong>$this-&gt;db-&gt;insert_id()</strong></p> <p>The insert ID number when performing database inserts.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If using the PDO driver with PostgreSQL, or using the Interbase driver, this function requires a $name parameter, which specifies the appropriate sequence to check for the insert id.</p> </div> <p><strong>$this-&gt;db-&gt;affected_rows()</strong></p> <p>Displays the number of affected rows, when doing “write” type queries (insert, update, etc.).</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In MySQL “DELETE FROM TABLE” returns 0 affected rows. The database class has a small hack that allows it to return the correct number of affected rows. By default this hack is enabled but it can be turned off in the database driver file.</p> </div> <p><strong>$this-&gt;db-&gt;last_query()</strong></p> <p>Returns the last query that was run (the query string, not the result). Example:</p> <pre data-language=\"php\">$str = $this-&gt;db-&gt;last_query();\n\n// Produces:  SELECT * FROM sometable....\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Disabling the <strong>save_queries</strong> setting in your database configuration will render this function useless.</p> </div>   <h2 id=\"information-about-your-database\">Information About Your Database</h2> <p><strong>$this-&gt;db-&gt;count_all()</strong></p> <p>Permits you to determine the number of rows in a particular table. Submit the table name in the first parameter. Example:</p> <pre data-language=\"php\">echo $this-&gt;db-&gt;count_all('my_table');\n\n// Produces an integer, like 25\n</pre> <p><strong>$this-&gt;db-&gt;platform()</strong></p> <p>Outputs the database platform you are running (MySQL, MS SQL, Postgres, etc...):</p> <pre data-language=\"php\">echo $this-&gt;db-&gt;platform();\n</pre> <p><strong>$this-&gt;db-&gt;version()</strong></p> <p>Outputs the database version you are running:</p> <pre data-language=\"php\">echo $this-&gt;db-&gt;version();\n</pre>   <h2 id=\"making-your-queries-easier\">Making Your Queries Easier</h2> <p><strong>$this-&gt;db-&gt;insert_string()</strong></p> <p>This function simplifies the process of writing database inserts. It returns a correctly formatted SQL insert string. Example:</p> <pre data-language=\"php\">$data = array('name' =&gt; $name, 'email' =&gt; $email, 'url' =&gt; $url);\n\n$str = $this-&gt;db-&gt;insert_string('table_name', $data);\n</pre> <p>The first parameter is the table name, the second is an associative array with the data to be inserted. The above example produces:</p> <pre data-language=\"php\">INSERT INTO table_name (name, email, url) VALUES ('Rick', '[email protected]', 'example.com')\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Values are automatically escaped, producing safer queries.</p> </div> <p><strong>$this-&gt;db-&gt;update_string()</strong></p> <p>This function simplifies the process of writing database updates. It returns a correctly formatted SQL update string. Example:</p> <pre data-language=\"php\">$data = array('name' =&gt; $name, 'email' =&gt; $email, 'url' =&gt; $url);\n\n$where = \"author_id = 1 AND status = 'active'\";\n\n$str = $this-&gt;db-&gt;update_string('table_name', $data, $where);\n</pre> <p>The first parameter is the table name, the second is an associative array with the data to be updated, and the third parameter is the “where” clause. The above example produces:</p> <pre data-language=\"php\">UPDATE table_name SET name = 'Rick', email = '[email protected]', url = 'example.com' WHERE author_id = 1 AND status = 'active'\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Values are automatically escaped, producing safer queries.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/database/helpers.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/database/helpers.html</a>\n  </p>\n</div>\n","database/transactions":"<h1 id=\"transactions\">Transactions</h1> <p>CodeIgniter’s database abstraction allows you to use transactions with databases that support transaction-safe table types. In MySQL, you’ll need to be running InnoDB or BDB table types rather than the more common MyISAM. Most other database platforms support transactions natively.</p> <p>If you are not familiar with transactions we recommend you find a good online resource to learn about them for your particular database. The information below assumes you have a basic understanding of transactions.</p>  <h2 id=\"codeigniter-s-approach-to-transactions\">CodeIgniter’s Approach to Transactions</h2> <p>CodeIgniter utilizes an approach to transactions that is very similar to the process used by the popular database class ADODB. We’ve chosen that approach because it greatly simplifies the process of running transactions. In most cases all that is required are two lines of code.</p> <p>Traditionally, transactions have required a fair amount of work to implement since they demand that you keep track of your queries and determine whether to commit or rollback based on the success or failure of your queries. This is particularly cumbersome with nested queries. In contrast, we’ve implemented a smart transaction system that does all this for you automatically (you can also manage your transactions manually if you choose to, but there’s really no benefit).</p>   <h2 id=\"running-transactions\">Running Transactions</h2> <p>To run your queries using transactions you will use the $this-&gt;db-&gt;trans_start() and $this-&gt;db-&gt;trans_complete() functions as follows:</p> <pre data-language=\"php\">$this-&gt;db-&gt;trans_start();\n$this-&gt;db-&gt;query('AN SQL QUERY...');\n$this-&gt;db-&gt;query('ANOTHER QUERY...');\n$this-&gt;db-&gt;query('AND YET ANOTHER QUERY...');\n$this-&gt;db-&gt;trans_complete();\n</pre> <p>You can run as many queries as you want between the start/complete functions and they will all be committed or rolled back based on success or failure of any given query.</p>   <h2 id=\"strict-mode\">Strict Mode</h2> <p>By default CodeIgniter runs all transactions in Strict Mode. When strict mode is enabled, if you are running multiple groups of transactions, if one group fails all groups will be rolled back. If strict mode is disabled, each group is treated independently, meaning a failure of one group will not affect any others.</p> <p>Strict Mode can be disabled as follows:</p> <pre data-language=\"php\">$this-&gt;db-&gt;trans_strict(FALSE);\n</pre>   <h2 id=\"managing-errors\">Managing Errors</h2> <p>If you have error reporting enabled in your config/database.php file you’ll see a standard error message if the commit was unsuccessful. If debugging is turned off, you can manage your own errors like this:</p> <pre data-language=\"php\">$this-&gt;db-&gt;trans_start();\n$this-&gt;db-&gt;query('AN SQL QUERY...');\n$this-&gt;db-&gt;query('ANOTHER QUERY...');\n$this-&gt;db-&gt;trans_complete();\n\nif ($this-&gt;db-&gt;trans_status() === FALSE)\n{\n        // generate an error... or use the log_message() function to log your error\n}\n</pre>   <h2 id=\"enabling-transactions\">Enabling Transactions</h2> <p>Transactions are enabled automatically the moment you use $this-&gt;db-&gt;trans_start(). If you would like to disable transactions you can do so using $this-&gt;db-&gt;trans_off():</p> <pre data-language=\"php\">$this-&gt;db-&gt;trans_off();\n\n$this-&gt;db-&gt;trans_start();\n$this-&gt;db-&gt;query('AN SQL QUERY...');\n$this-&gt;db-&gt;trans_complete();\n</pre> <p>When transactions are disabled, your queries will be auto-commited, just as they are when running queries without transactions.</p>   <h2 id=\"test-mode\">Test Mode</h2> <p>You can optionally put the transaction system into “test mode”, which will cause your queries to be rolled back – even if the queries produce a valid result. To use test mode simply set the first parameter in the $this-&gt;db-&gt;trans_start() function to TRUE:</p> <pre data-language=\"php\">$this-&gt;db-&gt;trans_start(TRUE); // Query will be rolled back\n$this-&gt;db-&gt;query('AN SQL QUERY...');\n$this-&gt;db-&gt;trans_complete();\n</pre>   <h2 id=\"running-transactions-manually\">Running Transactions Manually</h2> <p>If you would like to run transactions manually you can do so as follows:</p> <pre data-language=\"php\">$this-&gt;db-&gt;trans_begin();\n\n$this-&gt;db-&gt;query('AN SQL QUERY...');\n$this-&gt;db-&gt;query('ANOTHER QUERY...');\n$this-&gt;db-&gt;query('AND YET ANOTHER QUERY...');\n\nif ($this-&gt;db-&gt;trans_status() === FALSE)\n{\n        $this-&gt;db-&gt;trans_rollback();\n}\nelse\n{\n        $this-&gt;db-&gt;trans_commit();\n}\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Make sure to use $this-&gt;db-&gt;trans_begin() when running manual transactions, <strong>NOT</strong> $this-&gt;db-&gt;trans_start().</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/database/transactions.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/database/transactions.html</a>\n  </p>\n</div>\n","database/call_function":"<h1 id=\"custom-function-calls\">Custom Function Calls</h1>  <h2 id=\"this-db-call-function\">$this-&gt;db-&gt;call_function();</h2> <p>This function enables you to call PHP database functions that are not natively included in CodeIgniter, in a platform independent manner. For example, let’s say you want to call the mysql_get_client_info() function, which is <strong>not</strong> natively supported by CodeIgniter. You could do so like this:</p> <pre data-language=\"php\">$this-&gt;db-&gt;call_function('get_client_info');\n</pre> <p>You must supply the name of the function, <strong>without</strong> the mysql_ prefix, in the first parameter. The prefix is added automatically based on which database driver is currently being used. This permits you to run the same function on different database platforms. Obviously not all function calls are identical between platforms, so there are limits to how useful this function can be in terms of portability.</p> <p>Any parameters needed by the function you are calling will be added to the second parameter.</p> <pre data-language=\"php\">$this-&gt;db-&gt;call_function('some_function', $param1, $param2, etc..);\n</pre> <p>Often, you will either need to supply a database connection ID or a database result ID. The connection ID can be accessed using:</p> <pre data-language=\"php\">$this-&gt;db-&gt;conn_id;\n</pre> <p>The result ID can be accessed from within your result object, like this:</p> <pre data-language=\"php\">$query = $this-&gt;db-&gt;query(\"SOME QUERY\");\n\n$query-&gt;result_id;\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/database/call_function.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/database/call_function.html</a>\n  </p>\n</div>\n","database/caching":"<h1 id=\"database-caching-class\">Database Caching Class</h1> <p>The Database Caching Class permits you to cache your queries as text files for reduced database load.</p> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">This class is initialized automatically by the database driver when caching is enabled. Do NOT load this class manually.</p> </div> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">Not all query result functions are available when you use caching. Please read this page carefully.</p> </div>  <h2 id=\"enabling-caching\">Enabling Caching</h2> <p>Caching is enabled in three steps:</p> <ul class=\"simple\"> <li>Create a writable directory on your server where the cache files can be stored.</li> <li>Set the path to your cache folder in your application/config/database.php file.</li> <li>Enable the caching feature, either globally by setting the preference in your application/config/database.php file, or manually as described below.</li> </ul> <p>Once enabled, caching will happen automatically whenever a page is loaded that contains database queries.</p>   <h2 id=\"how-does-caching-work\">How Does Caching Work?</h2> <p>CodeIgniter’s query caching system happens dynamically when your pages are viewed. When caching is enabled, the first time a web page is loaded, the query result object will be serialized and stored in a text file on your server. The next time the page is loaded the cache file will be used instead of accessing your database. Your database usage can effectively be reduced to zero for any pages that have been cached.</p> <p>Only read-type (SELECT) queries can be cached, since these are the only type of queries that produce a result. Write-type (INSERT, UPDATE, etc.) queries, since they don’t generate a result, will not be cached by the system.</p> <p>Cache files DO NOT expire. Any queries that have been cached will remain cached until you delete them. The caching system permits you clear caches associated with individual pages, or you can delete the entire collection of cache files. Typically you’ll want to use the housekeeping functions described below to delete cache files after certain events take place, like when you’ve added new information to your database.</p>   <h2 id=\"will-caching-improve-your-site-s-performance\">Will Caching Improve Your Site’s Performance?</h2> <p>Getting a performance gain as a result of caching depends on many factors. If you have a highly optimized database under very little load, you probably won’t see a performance boost. If your database is under heavy use you probably will see an improved response, assuming your file-system is not overly taxed. Remember that caching simply changes how your information is retrieved, shifting it from being a database operation to a file-system one.</p> <p>In some clustered server environments, for example, caching may be detrimental since file-system operations are so intense. On single servers in shared environments, caching will probably be beneficial. Unfortunately there is no single answer to the question of whether you should cache your database. It really depends on your situation.</p>   <h2 id=\"how-are-cache-files-stored\">How are Cache Files Stored?</h2> <p>CodeIgniter places the result of EACH query into its own cache file. Sets of cache files are further organized into sub-folders corresponding to your controller functions. To be precise, the sub-folders are named identically to the first two segments of your URI (the controller class name and function name).</p> <p>For example, let’s say you have a controller called blog with a function called comments that contains three queries. The caching system will create a cache folder called blog+comments, into which it will write three cache files.</p> <p>If you use dynamic queries that change based on information in your URI (when using pagination, for example), each instance of the query will produce its own cache file. It’s possible, therefore, to end up with many times more cache files than you have queries.</p>   <h2 id=\"managing-your-cache-files\">Managing your Cache Files</h2> <p>Since cache files do not expire, you’ll need to build deletion routines into your application. For example, let’s say you have a blog that allows user commenting. Whenever a new comment is submitted you’ll want to delete the cache files associated with the controller function that serves up your comments. You’ll find two delete functions described below that help you clear data.</p>   <h2 id=\"not-all-database-functions-work-with-caching\">Not All Database Functions Work with Caching</h2> <p>Lastly, we need to point out that the result object that is cached is a simplified version of the full result object. For that reason, some of the query result functions are not available for use.</p> <p>The following functions ARE NOT available when using a cached result object:</p> <ul class=\"simple\"> <li>num_fields()</li> <li>field_names()</li> <li>field_data()</li> <li>free_result()</li> </ul> <p>Also, the two database resources (result_id and conn_id) are not available when caching, since result resources only pertain to run-time operations.</p>  <h3 id=\"function-reference\">Function Reference</h3>    <h2 id=\"this-db-cache-on-this-db-cache-off\">$this-&gt;db-&gt;cache_on() / $this-&gt;db-&gt;cache_off()</h2> <p>Manually enables/disables caching. This can be useful if you want to keep certain queries from being cached. Example:</p> <pre data-language=\"php\">// Turn caching on\n$this-&gt;db-&gt;cache_on();\n$query = $this-&gt;db-&gt;query(\"SELECT * FROM mytable\");\n\n// Turn caching off for this one query\n$this-&gt;db-&gt;cache_off();\n$query = $this-&gt;db-&gt;query(\"SELECT * FROM members WHERE member_id = '$current_user'\");\n\n// Turn caching back on\n$this-&gt;db-&gt;cache_on();\n$query = $this-&gt;db-&gt;query(\"SELECT * FROM another_table\");\n</pre>   <h2 id=\"this-db-cache-delete\">$this-&gt;db-&gt;cache_delete()</h2> <p>Deletes the cache files associated with a particular page. This is useful if you need to clear caching after you update your database.</p> <p>The caching system saves your cache files to folders that correspond to the URI of the page you are viewing. For example, if you are viewing a page at example.com/index.php/blog/comments, the caching system will put all cache files associated with it in a folder called blog+comments. To delete those particular cache files you will use:</p> <pre data-language=\"php\">$this-&gt;db-&gt;cache_delete('blog', 'comments');\n</pre> <p>If you do not use any parameters the current URI will be used when determining what should be cleared.</p>   <h2 id=\"this-db-cache-delete-all\">$this-&gt;db-&gt;cache_delete_all()</h2> <p>Clears all existing cache files. Example:</p> <pre data-language=\"php\">$this-&gt;db-&gt;cache_delete_all();\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/database/caching.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/database/caching.html</a>\n  </p>\n</div>\n","database/results":"<h1 id=\"generating-query-results\">Generating Query Results</h1> <p>There are several ways to generate query results:</p>  <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#result-arrays\" id=\"id1\">Result Arrays</a></li> <li><a class=\"reference internal\" href=\"#result-rows\" id=\"id2\">Result Rows</a></li> <li><a class=\"reference internal\" href=\"#custom-result-objects\" id=\"id3\">Custom Result Objects</a></li> <li><a class=\"reference internal\" href=\"#result-helper-methods\" id=\"id4\">Result Helper Methods</a></li> <li><a class=\"reference internal\" href=\"#class-reference\" id=\"id5\">Class Reference</a></li> </ul>   <h2 id=\"result-arrays\">Result Arrays</h2> <p><strong>result()</strong></p> <p>This method returns the query result as an array of <strong>objects</strong>, or <strong>an empty array</strong> on failure. Typically you’ll use this in a foreach loop, like this:</p> <pre data-language=\"php\">$query = $this-&gt;db-&gt;query(\"YOUR QUERY\");\n\nforeach ($query-&gt;result() as $row)\n{\n        echo $row-&gt;title;\n        echo $row-&gt;name;\n        echo $row-&gt;body;\n}\n</pre> <p>The above method is an alias of <code>result_object()</code>.</p> <p>You can also pass a string to <code>result()</code> which represents a class to instantiate for each result object (note: this class must be loaded)</p> <pre data-language=\"php\">$query = $this-&gt;db-&gt;query(\"SELECT * FROM users;\");\n\nforeach ($query-&gt;result('User') as $user)\n{\n        echo $user-&gt;name; // access attributes\n        echo $user-&gt;reverse_name(); // or methods defined on the 'User' class\n}\n</pre> <p><strong>result_array()</strong></p> <p>This method returns the query result as a pure array, or an empty array when no result is produced. Typically you’ll use this in a foreach loop, like this:</p> <pre data-language=\"php\">$query = $this-&gt;db-&gt;query(\"YOUR QUERY\");\n\nforeach ($query-&gt;result_array() as $row)\n{\n        echo $row['title'];\n        echo $row['name'];\n        echo $row['body'];\n}\n</pre>   <h2 id=\"result-rows\">Result Rows</h2> <p><strong>row()</strong></p> <p>This method returns a single result row. If your query has more than one row, it returns only the first row. The result is returned as an <strong>object</strong>. Here’s a usage example:</p> <pre data-language=\"php\">$query = $this-&gt;db-&gt;query(\"YOUR QUERY\");\n\n$row = $query-&gt;row();\n\nif (isset($row))\n{\n        echo $row-&gt;title;\n        echo $row-&gt;name;\n        echo $row-&gt;body;\n}\n</pre> <p>If you want a specific row returned you can submit the row number as a digit in the first parameter:</p> <pre data-language=\"php\">$row = $query-&gt;row(5);\n</pre> <p>You can also add a second String parameter, which is the name of a class to instantiate the row with:</p> <pre data-language=\"php\">$query = $this-&gt;db-&gt;query(\"SELECT * FROM users LIMIT 1;\");\n$row = $query-&gt;row(0, 'User');\n\necho $row-&gt;name; // access attributes\necho $row-&gt;reverse_name(); // or methods defined on the 'User' class\n</pre> <p><strong>row_array()</strong></p> <p>Identical to the above <code>row()</code> method, except it returns an array. Example:</p> <pre data-language=\"php\">$query = $this-&gt;db-&gt;query(\"YOUR QUERY\");\n\n$row = $query-&gt;row_array();\n\nif (isset($row))\n{\n        echo $row['title'];\n        echo $row['name'];\n        echo $row['body'];\n}\n</pre> <p>If you want a specific row returned you can submit the row number as a digit in the first parameter:</p> <pre data-language=\"php\">$row = $query-&gt;row_array(5);\n</pre> <p>In addition, you can walk forward/backwards/first/last through your results using these variations:</p>  <div class=\"line-block\"> <div class=\"line\"><strong>$row = $query-&gt;first_row()</strong></div> <div class=\"line\"><strong>$row = $query-&gt;last_row()</strong></div> <div class=\"line\"><strong>$row = $query-&gt;next_row()</strong></div> <div class=\"line\"><strong>$row = $query-&gt;previous_row()</strong></div> </div>  <p>By default they return an object unless you put the word “array” in the parameter:</p>  <div class=\"line-block\"> <div class=\"line\"><strong>$row = $query-&gt;first_row(‘array’)</strong></div> <div class=\"line\"><strong>$row = $query-&gt;last_row(‘array’)</strong></div> <div class=\"line\"><strong>$row = $query-&gt;next_row(‘array’)</strong></div> <div class=\"line\"><strong>$row = $query-&gt;previous_row(‘array’)</strong></div> </div>  <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">All the methods above will load the whole result into memory (prefetching). Use <code>unbuffered_row()</code> for processing large result sets.</p> </div> <p><strong>unbuffered_row()</strong></p> <p>This method returns a single result row without prefetching the whole result in memory as <code>row()</code> does. If your query has more than one row, it returns the current row and moves the internal data pointer ahead.</p> <pre data-language=\"php\">$query = $this-&gt;db-&gt;query(\"YOUR QUERY\");\n\nwhile ($row = $query-&gt;unbuffered_row())\n{\n        echo $row-&gt;title;\n        echo $row-&gt;name;\n        echo $row-&gt;body;\n}\n</pre> <p>You can optionally pass ‘object’ (default) or ‘array’ in order to specify the returned value’s type:</p> <pre data-language=\"php\">$query-&gt;unbuffered_row();               // object\n$query-&gt;unbuffered_row('object');       // object\n$query-&gt;unbuffered_row('array');        // associative array\n</pre>   <h2 id=\"custom-result-objects\">Custom Result Objects</h2> <p>You can have the results returned as an instance of a custom class instead of a <code>stdClass</code> or array, as the <code>result()</code> and <code>result_array()</code> methods allow. This requires that the class is already loaded into memory. The object will have all values returned from the database set as properties. If these have been declared and are non-public then you should provide a <code>__set()</code> method to allow them to be set.</p> <p>Example:</p> <pre data-language=\"php\">class User {\n\n        public $id;\n        public $email;\n        public $username;\n\n        protected $last_login;\n\n        public function last_login($format)\n        {\n                return $this-&gt;last_login-&gt;format($format);\n        }\n\n        public function __set($name, $value)\n        {\n                if ($name === 'last_login')\n                {\n                        $this-&gt;last_login = DateTime::createFromFormat('U', $value);\n                }\n        }\n\n        public function __get($name)\n        {\n                if (isset($this-&gt;$name))\n                {\n                        return $this-&gt;$name;\n                }\n        }\n}\n</pre> <p>In addition to the two methods listed below, the following methods also can take a class name to return the results as: <code>first_row()</code>, <code>last_row()</code>, <code>next_row()</code>, and <code>previous_row()</code>.</p> <p><strong>custom_result_object()</strong></p> <p>Returns the entire result set as an array of instances of the class requested. The only parameter is the name of the class to instantiate.</p> <p>Example:</p> <pre data-language=\"php\">$query = $this-&gt;db-&gt;query(\"YOUR QUERY\");\n\n$rows = $query-&gt;custom_result_object('User');\n\nforeach ($rows as $row)\n{\n        echo $row-&gt;id;\n        echo $row-&gt;email;\n        echo $row-&gt;last_login('Y-m-d');\n}\n</pre> <p><strong>custom_row_object()</strong></p> <p>Returns a single row from your query results. The first parameter is the row number of the results. The second parameter is the class name to instantiate.</p> <p>Example:</p> <pre data-language=\"php\">$query = $this-&gt;db-&gt;query(\"YOUR QUERY\");\n\n$row = $query-&gt;custom_row_object(0, 'User');\n\nif (isset($row))\n{\n        echo $row-&gt;email;   // access attributes\n        echo $row-&gt;last_login('Y-m-d');   // access class methods\n}\n</pre> <p>You can also use the <code>row()</code> method in exactly the same way.</p> <p>Example:</p> <pre data-language=\"php\">$row = $query-&gt;custom_row_object(0, 'User');\n</pre>   <h2 id=\"result-helper-methods\">Result Helper Methods</h2> <p><strong>num_rows()</strong></p> <p>The number of rows returned by the query. Note: In this example, $query is the variable that the query result object is assigned to:</p> <pre data-language=\"php\">$query = $this-&gt;db-&gt;query('SELECT * FROM my_table');\n\necho $query-&gt;num_rows();\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Not all database drivers have a native way of getting the total number of rows for a result set. When this is the case, all of the data is prefetched and <code>count()</code> is manually called on the resulting array in order to achieve the same result.</p> </div> <p><strong>num_fields()</strong></p> <p>The number of FIELDS (columns) returned by the query. Make sure to call the method using your query result object:</p> <pre data-language=\"php\">$query = $this-&gt;db-&gt;query('SELECT * FROM my_table');\n\necho $query-&gt;num_fields();\n</pre> <p><strong>free_result()</strong></p> <p>It frees the memory associated with the result and deletes the result resource ID. Normally PHP frees its memory automatically at the end of script execution. However, if you are running a lot of queries in a particular script you might want to free the result after each query result has been generated in order to cut down on memory consumption.</p> <p>Example:</p> <pre data-language=\"php\">$query = $this-&gt;db-&gt;query('SELECT title FROM my_table');\n\nforeach ($query-&gt;result() as $row)\n{\n        echo $row-&gt;title;\n}\n\n$query-&gt;free_result();  // The $query result object will no longer be available\n\n$query2 = $this-&gt;db-&gt;query('SELECT name FROM some_table');\n\n$row = $query2-&gt;row();\necho $row-&gt;name;\n$query2-&gt;free_result(); // The $query2 result object will no longer be available\n</pre> <p><strong>data_seek()</strong></p> <p>This method sets the internal pointer for the next result row to be fetched. It is only useful in combination with <code>unbuffered_row()</code>.</p> <p>It accepts a positive integer value, which defaults to 0 and returns TRUE on success or FALSE on failure.</p> <pre data-language=\"php\">$query = $this-&gt;db-&gt;query('SELECT `field_name` FROM `table_name`');\n$query-&gt;data_seek(5); // Skip the first 5 rows\n$row = $query-&gt;unbuffered_row();\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Not all database drivers support this feature and will return FALSE. Most notably - you won’t be able to use it with PDO.</p> </div>   <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_DB_result\">\n<code>class CI_DB_result</code> </dt> <dd>\n<dl class=\"method\"> <dt id=\"CI_DB_result::result\">\n<code>result([$type = 'object'])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$type</strong> (<em>string</em>) – Type of requested results - array, object, or class name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Array containing the fetched rows</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>A wrapper for the <code>result_array()</code>, <code>result_object()</code> and <code>custom_result_object()</code> methods.</p> <p>Usage: see <a class=\"reference internal\" href=\"#result-arrays\">Result Arrays</a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_result::result_array\">\n<code>result_array()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Array containing the fetched rows</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">array</td> </tr>  </table> <p>Returns the query results as an array of rows, where each row is itself an associative array.</p> <p>Usage: see <a class=\"reference internal\" href=\"#result-arrays\">Result Arrays</a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_result::result_object\">\n<code>result_object()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Array containing the fetched rows</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">array</td> </tr>  </table> <p>Returns the query results as an array of rows, where each row is an object of type <code>stdClass</code>.</p> <p>Usage: see <a class=\"reference internal\" href=\"#result-arrays\">Result Arrays</a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_result::custom_result_object\">\n<code>custom_result_object($class_name)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$class_name</strong> (<em>string</em>) – Class name for the resulting rows</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Array containing the fetched rows</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>Returns the query results as an array of rows, where each row is an instance of the specified class.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_result::row\">\n<code>row([$n = 0[, $type = 'object']])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$n</strong> (<em>int</em>) – Index of the query results row to be returned</li> <li>\n<strong>$type</strong> (<em>string</em>) – Type of the requested result - array, object, or class name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">The requested row or NULL if it doesn’t exist</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>A wrapper for the <code>row_array()</code>, <code>row_object() and ``custom_row_object()</code> methods.</p> <p>Usage: see <a class=\"reference internal\" href=\"#result-rows\">Result Rows</a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_result::unbuffered_row\">\n<code>unbuffered_row([$type = 'object'])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$type</strong> (<em>string</em>) – Type of the requested result - array, object, or class name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Next row from the result set or NULL if it doesn’t exist</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Fetches the next result row and returns it in the requested form.</p> <p>Usage: see <a class=\"reference internal\" href=\"#result-rows\">Result Rows</a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_result::row_array\">\n<code>row_array([$n = 0])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$n</strong> (<em>int</em>) – Index of the query results row to be returned</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">The requested row or NULL if it doesn’t exist</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>Returns the requested result row as an associative array.</p> <p>Usage: see <a class=\"reference internal\" href=\"#result-rows\">Result Rows</a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_result::row_object\">\n<code>row_object([$n = 0])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$n</strong> (<em>int</em>) – Index of the query results row to be returned</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">The requested row or NULL if it doesn’t exist</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">stdClass</p> </td> </tr>  </table> <p>Returns the requested result row as an object of type <code>stdClass</code>.</p> <p>Usage: see <a class=\"reference internal\" href=\"#result-rows\">Result Rows</a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_result::custom_row_object\">\n<code>custom_row_object($n, $type)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$n</strong> (<em>int</em>) – Index of the results row to return</li> <li>\n<strong>$class_name</strong> (<em>string</em>) – Class name for the resulting row</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">The requested row or NULL if it doesn’t exist</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">$type</p> </td> </tr>  </table> <p>Returns the requested result row as an instance of the requested class.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_result::data_seek\">\n<code>data_seek([$n = 0])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$n</strong> (<em>int</em>) – Index of the results row to be returned next</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Moves the internal results row pointer to the desired offset.</p> <p>Usage: see <a class=\"reference internal\" href=\"#result-helper-methods\">Result Helper Methods</a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_result::set_row\">\n<code>set_row($key[, $value = NULL])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$key</strong> (<em>mixed</em>) – Column name or array of key/value pairs</li> <li>\n<strong>$value</strong> (<em>mixed</em>) – Value to assign to the column, $key is a single field name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Assigns a value to a particular column.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_result::next_row\">\n<code>next_row([$type = 'object'])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$type</strong> (<em>string</em>) – Type of the requested result - array, object, or class name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Next row of result set, or NULL if it doesn’t exist</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Returns the next row from the result set.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_result::previous_row\">\n<code>previous_row([$type = 'object'])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$type</strong> (<em>string</em>) – Type of the requested result - array, object, or class name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Previous row of result set, or NULL if it doesn’t exist</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Returns the previous row from the result set.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_result::first_row\">\n<code>first_row([$type = 'object'])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$type</strong> (<em>string</em>) – Type of the requested result - array, object, or class name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">First row of result set, or NULL if it doesn’t exist</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Returns the first row from the result set.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_result::last_row\">\n<code>last_row([$type = 'object'])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$type</strong> (<em>string</em>) – Type of the requested result - array, object, or class name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Last row of result set, or NULL if it doesn’t exist</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Returns the last row from the result set.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_result::num_rows\">\n<code>num_rows()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Number of rows in the result set</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">int</td> </tr>  </table> <p>Returns the number of rows in the result set.</p> <p>Usage: see <a class=\"reference internal\" href=\"#result-helper-methods\">Result Helper Methods</a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_result::num_fields\">\n<code>num_fields()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Number of fields in the result set</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">int</td> </tr>  </table> <p>Returns the number of fields in the result set.</p> <p>Usage: see <a class=\"reference internal\" href=\"#result-helper-methods\">Result Helper Methods</a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_result::field_data\">\n<code>field_data()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Array containing field meta-data</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">array</td> </tr>  </table> <p>Generates an array of <code>stdClass</code> objects containing field meta-data.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_result::free_result\">\n<code>free_result()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">void</td> </tr>  </table> <p>Frees a result set.</p> <p>Usage: see <a class=\"reference internal\" href=\"#result-helper-methods\">Result Helper Methods</a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_result::list_fields\">\n<code>list_fields()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">Array of column names</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">array</td> </tr>  </table> <p>Returns an array containing the field names in the result set.</p> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/database/results.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/database/results.html</a>\n  </p>\n</div>\n","helpers/array_helper":"<h1 id=\"array-helper\">Array Helper</h1> <p>The Array Helper file contains functions that assist in working with arrays.</p>  <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#loading-this-helper\" id=\"id1\">Loading this Helper</a></li> <li><a class=\"reference internal\" href=\"#available-functions\" id=\"id2\">Available Functions</a></li> </ul>   <h2 id=\"loading-this-helper\">Loading this Helper</h2> <p>This helper is loaded using the following code:</p> <pre data-language=\"php\">$this-&gt;load-&gt;helper('array');\n</pre>   <h2 id=\"available-functions\">Available Functions</h2> <p>The following functions are available:</p> <dl class=\"function\"> <dt id=\"element\">\n<code>element($item, $array[, $default = NULL])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$item</strong> (<em>string</em>) – Item to fetch from the array</li> <li>\n<strong>$array</strong> (<em>array</em>) – Input array</li> <li>\n<strong>$default</strong> (<em>bool</em>) – What to return if the array isn’t valid</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">NULL on failure or the array item.</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Lets you fetch an item from an array. The function tests whether the array index is set and whether it has a value. If a value exists it is returned. If a value does not exist it returns NULL, or whatever you’ve specified as the default value via the third parameter.</p> <p>Example:</p> <pre data-language=\"php\">$array = array(\n        'color' =&gt; 'red',\n        'shape' =&gt; 'round',\n        'size'  =&gt; ''\n);\n\necho element('color', $array); // returns \"red\"\necho element('size', $array, 'foobar'); // returns \"foobar\"\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"elements\">\n<code>elements($items, $array[, $default = NULL])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$item</strong> (<em>string</em>) – Item to fetch from the array</li> <li>\n<strong>$array</strong> (<em>array</em>) – Input array</li> <li>\n<strong>$default</strong> (<em>bool</em>) – What to return if the array isn’t valid</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">NULL on failure or the array item.</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Lets you fetch a number of items from an array. The function tests whether each of the array indices is set. If an index does not exist it is set to NULL, or whatever you’ve specified as the default value via the third parameter.</p> <p>Example:</p> <pre data-language=\"php\">$array = array(\n        'color' =&gt; 'red',\n        'shape' =&gt; 'round',\n        'radius' =&gt; '10',\n        'diameter' =&gt; '20'\n);\n\n$my_shape = elements(array('color', 'shape', 'height'), $array);\n</pre> <p>The above will return the following array:</p> <pre data-language=\"php\">array(\n        'color' =&gt; 'red',\n        'shape' =&gt; 'round',\n        'height' =&gt; NULL\n);\n</pre> <p>You can set the third parameter to any default value you like.</p> <pre data-language=\"php\">$my_shape = elements(array('color', 'shape', 'height'), $array, 'foobar');\n</pre> <p>The above will return the following array:</p> <pre data-language=\"php\">array(\n        'color'         =&gt; 'red',\n        'shape'         =&gt; 'round',\n        'height'        =&gt; 'foobar'\n);\n</pre> <p>This is useful when sending the <code>$_POST</code> array to one of your Models. This prevents users from sending additional POST data to be entered into your tables.</p> <pre data-language=\"php\">$this-&gt;load-&gt;model('post_model');\n$this-&gt;post_model-&gt;update(\n        elements(array('id', 'title', 'content'), $_POST)\n);\n</pre> <p>This ensures that only the id, title and content fields are sent to be updated.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"random_element\">\n<code>random_element($array)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$array</strong> (<em>array</em>) – Input array</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">A random element from the array</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Takes an array as input and returns a random element from it.</p> <p>Usage example:</p> <pre data-language=\"php\">$quotes = array(\n        \"I find that the harder I work, the more luck I seem to have. - Thomas Jefferson\",\n        \"Don't stay in bed, unless you can make money in bed. - George Burns\",\n        \"We didn't lose the game; we just ran out of time. - Vince Lombardi\",\n        \"If everything seems under control, you're not going fast enough. - Mario Andretti\",\n        \"Reality is merely an illusion, albeit a very persistent one. - Albert Einstein\",\n        \"Chance favors the prepared mind - Louis Pasteur\"\n);\n\necho random_element($quotes);\n</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/helpers/array_helper.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/helpers/array_helper.html</a>\n  </p>\n</div>\n","helpers/cookie_helper":"<h1 id=\"cookie-helper\">Cookie Helper</h1> <p>The Cookie Helper file contains functions that assist in working with cookies.</p>  <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#loading-this-helper\" id=\"id1\">Loading this Helper</a></li> <li><a class=\"reference internal\" href=\"#available-functions\" id=\"id2\">Available Functions</a></li> </ul>   <h2 id=\"loading-this-helper\">Loading this Helper</h2> <p>This helper is loaded using the following code:</p> <pre data-language=\"php\">$this-&gt;load-&gt;helper('cookie');\n</pre>   <h2 id=\"available-functions\">Available Functions</h2> <p>The following functions are available:</p> <dl class=\"function\"> <dt id=\"set_cookie\">\n<code>set_cookie($name[, $value = ''[, $expire = ''[, $domain = ''[, $path = '/'[, $prefix = ''[, $secure = FALSE[, $httponly = FALSE]]]]]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$name</strong> (<em>mixed</em>) – Cookie name <em>or</em> associative array of all of the parameters available to this function</li> <li>\n<strong>$value</strong> (<em>string</em>) – Cookie value</li> <li>\n<strong>$expire</strong> (<em>int</em>) – Number of seconds until expiration</li> <li>\n<strong>$domain</strong> (<em>string</em>) – Cookie domain (usually: .yourdomain.com)</li> <li>\n<strong>$path</strong> (<em>string</em>) – Cookie path</li> <li>\n<strong>$prefix</strong> (<em>string</em>) – Cookie name prefix</li> <li>\n<strong>$secure</strong> (<em>bool</em>) – Whether to only send the cookie through HTTPS</li> <li>\n<strong>$httponly</strong> (<em>bool</em>) – Whether to hide the cookie from JavaScript</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>This helper function gives you friendlier syntax to set browser cookies. Refer to the <a class=\"reference internal\" href=\"../libraries/input\">Input Library</a> for a description of its use, as this function is an alias for <code>CI_Input::set_cookie()</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"get_cookie\">\n<code>get_cookie($index[, $xss_clean = NULL])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$index</strong> (<em>string</em>) – Cookie name</li> <li>\n<strong>$xss_clean</strong> (<em>bool</em>) – Whether to apply XSS filtering to the returned value</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">The cookie value or NULL if not found</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>This helper function gives you friendlier syntax to get browser cookies. Refer to the <a class=\"reference internal\" href=\"../libraries/input\">Input Library</a> for detailed description of its use, as this function acts very similarly to <code>CI_Input::cookie()</code>, except it will also prepend the <code>$config['cookie_prefix']</code> that you might’ve set in your <em>application/config/config.php</em> file.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"delete_cookie\">\n<code>delete_cookie($name[, $domain = ''[, $path = '/'[, $prefix = '']]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$name</strong> (<em>string</em>) – Cookie name</li> <li>\n<strong>$domain</strong> (<em>string</em>) – Cookie domain (usually: .yourdomain.com)</li> <li>\n<strong>$path</strong> (<em>string</em>) – Cookie path</li> <li>\n<strong>$prefix</strong> (<em>string</em>) – Cookie name prefix</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Lets you delete a cookie. Unless you’ve set a custom path or other values, only the name of the cookie is needed.</p> <pre data-language=\"php\">delete_cookie('name');\n</pre> <p>This function is otherwise identical to <code>set_cookie()</code>, except that it does not have the value and expiration parameters. You can submit an array of values in the first parameter or you can set discrete parameters.</p> <pre data-language=\"php\">delete_cookie($name, $domain, $path, $prefix);\n</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/helpers/cookie_helper.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/helpers/cookie_helper.html</a>\n  </p>\n</div>\n","helpers/download_helper":"<h1 id=\"download-helper\">Download Helper</h1> <p>The Download Helper lets you download data to your desktop.</p>  <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#loading-this-helper\" id=\"id1\">Loading this Helper</a></li> <li><a class=\"reference internal\" href=\"#available-functions\" id=\"id2\">Available Functions</a></li> </ul>   <h2 id=\"loading-this-helper\">Loading this Helper</h2> <p>This helper is loaded using the following code:</p> <pre data-language=\"php\">$this-&gt;load-&gt;helper('download');\n</pre>   <h2 id=\"available-functions\">Available Functions</h2> <p>The following functions are available:</p> <dl class=\"function\"> <dt id=\"force_download\">\n<code>force_download([$filename = ''[, $data = ''[, $set_mime = FALSE]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$filename</strong> (<em>string</em>) – Filename</li> <li>\n<strong>$data</strong> (<em>mixed</em>) – File contents</li> <li>\n<strong>$set_mime</strong> (<em>bool</em>) – Whether to try to send the actual MIME type</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Generates server headers which force data to be downloaded to your desktop. Useful with file downloads. The first parameter is the <strong>name you want the downloaded file to be named</strong>, the second parameter is the file data.</p> <p>If you set the second parameter to NULL and <code>$filename</code> is an existing, readable file path, then its content will be read instead.</p> <p>If you set the third parameter to boolean TRUE, then the actual file MIME type (based on the filename extension) will be sent, so that if your browser has a handler for that type - it can use it.</p> <p>Example:</p> <pre data-language=\"php\">$data = 'Here is some text!';\n$name = 'mytext.txt';\nforce_download($name, $data);\n</pre> <p>If you want to download an existing file from your server you’ll need to do the following:</p> <pre data-language=\"php\">// Contents of photo.jpg will be automatically read\nforce_download('/path/to/photo.jpg', NULL);\n</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/helpers/download_helper.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/helpers/download_helper.html</a>\n  </p>\n</div>\n","helpers/directory_helper":"<h1 id=\"directory-helper\">Directory Helper</h1> <p>The Directory Helper file contains functions that assist in working with directories.</p>  <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#loading-this-helper\" id=\"id1\">Loading this Helper</a></li> <li><a class=\"reference internal\" href=\"#available-functions\" id=\"id2\">Available Functions</a></li> </ul>   <h2 id=\"loading-this-helper\">Loading this Helper</h2> <p>This helper is loaded using the following code:</p> <pre data-language=\"php\">$this-&gt;load-&gt;helper('directory');\n</pre>   <h2 id=\"available-functions\">Available Functions</h2> <p>The following functions are available:</p> <dl class=\"function\"> <dt id=\"directory_map\">\n<code>directory_map($source_dir[, $directory_depth = 0[, $hidden = FALSE]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$source_dir</strong> (<em>string</em>) – Path to the source directory</li> <li>\n<strong>$directory_depth</strong> (<em>int</em>) – Depth of directories to traverse (0 = fully recursive, 1 = current dir, etc)</li> <li>\n<strong>$hidden</strong> (<em>bool</em>) – Whether to include hidden directories</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An array of files</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>Examples:</p> <pre data-language=\"php\">$map = directory_map('./mydirectory/');\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Paths are almost always relative to your main index.php file.</p> </div> <p>Sub-folders contained within the directory will be mapped as well. If you wish to control the recursion depth, you can do so using the second parameter (integer). A depth of 1 will only map the top level directory:</p> <pre data-language=\"php\">$map = directory_map('./mydirectory/', 1);\n</pre> <p>By default, hidden files will not be included in the returned array. To override this behavior, you may set a third parameter to true (boolean):</p> <pre data-language=\"php\">$map = directory_map('./mydirectory/', FALSE, TRUE);\n</pre> <p>Each folder name will be an array index, while its contained files will be numerically indexed. Here is an example of a typical array:</p> <pre data-language=\"php\">Array (\n        [libraries] =&gt; Array\n                (\n                        [0] =&gt; benchmark.html\n                        [1] =&gt; config.html\n                        [\"database/\"] =&gt; Array\n                                (\n                                        [0] =&gt; query_builder.html\n                                        [1] =&gt; binds.html\n                                        [2] =&gt; configuration.html\n                                        [3] =&gt; connecting.html\n                                        [4] =&gt; examples.html\n                                        [5] =&gt; fields.html\n                                        [6] =&gt; index.html\n                                        [7] =&gt; queries.html\n                                )\n                        [2] =&gt; email.html\n                        [3] =&gt; file_uploading.html\n                        [4] =&gt; image_lib.html\n                        [5] =&gt; input.html\n                        [6] =&gt; language.html\n                        [7] =&gt; loader.html\n                        [8] =&gt; pagination.html\n                        [9] =&gt; uri.html\n                )\n</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/helpers/directory_helper.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/helpers/directory_helper.html</a>\n  </p>\n</div>\n","helpers/email_helper":"<h1 id=\"email-helper\">Email Helper</h1> <p>The Email Helper provides some assistive functions for working with Email. For a more robust email solution, see CodeIgniter’s <a class=\"reference internal\" href=\"../libraries/email\">Email Class</a>.</p> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">The Email helper is DEPRECATED and is currently only kept for backwards compatibility.</p> </div>  <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#loading-this-helper\" id=\"id1\">Loading this Helper</a></li> <li><a class=\"reference internal\" href=\"#available-functions\" id=\"id2\">Available Functions</a></li> </ul>   <h2 id=\"loading-this-helper\">Loading this Helper</h2> <p>This helper is loaded using the following code:</p> <pre data-language=\"php\">$this-&gt;load-&gt;helper('email');\n</pre>   <h2 id=\"available-functions\">Available Functions</h2> <p>The following functions are available:</p> <dl class=\"function\"> <dt id=\"valid_email\">\n<code>valid_email($email)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$email</strong> (<em>string</em>) – E-mail address</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE if a valid email is supplied, FALSE otherwise</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Checks if the input is a correctly formatted e-mail address. Note that is doesn’t actually prove that the address will be able recieve mail, but simply that it is a validly formed address.</p> <p>Example:</p> <pre data-language=\"php\">if (valid_email('[email protected]'))\n{\n        echo 'email is valid';\n}\nelse\n{\n        echo 'email is not valid';\n}\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>All that this function does is to use PHP’s native <code>filter_var()</code>:</p> <pre data-language=\"php\">(bool) filter_var($email, FILTER_VALIDATE_EMAIL);\n</pre> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"send_email\">\n<code>send_email($recipient, $subject, $message)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$recipient</strong> (<em>string</em>) – E-mail address</li> <li>\n<strong>$subject</strong> (<em>string</em>) – Mail subject</li> <li>\n<strong>$message</strong> (<em>string</em>) – Message body</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE if the mail was successfully sent, FALSE in case of an error</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Sends an email using PHP’s native <a class=\"reference external\" href=\"http://php.net/function.mail\">mail()</a> function.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>All that this function does is to use PHP’s native <code>mail</code></p> <pre data-language=\"php\">mail($recipient, $subject, $message);\n</pre> </div> <p>For a more robust email solution, see CodeIgniter’s <a class=\"reference internal\" href=\"../libraries/email\">Email Library</a>.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/helpers/email_helper.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/helpers/email_helper.html</a>\n  </p>\n</div>\n","database/forge":"<h1 id=\"database-forge-class\">Database Forge Class</h1> <p>The Database Forge Class contains methods that help you manage your database.</p>  <p class=\"topic-title first\">Table of Contents</p> <ul class=\"simple\"> <li>\n<a class=\"reference internal\" href=\"#database-forge-class\" id=\"id1\">Database Forge Class</a><ul> <li><a class=\"reference internal\" href=\"#initializing-the-forge-class\" id=\"id2\">Initializing the Forge Class</a></li> <li><a class=\"reference internal\" href=\"#creating-and-dropping-databases\" id=\"id3\">Creating and Dropping Databases</a></li> <li>\n<a class=\"reference internal\" href=\"#creating-and-dropping-tables\" id=\"id4\">Creating and Dropping Tables</a><ul> <li><a class=\"reference internal\" href=\"#adding-fields\" id=\"id5\">Adding fields</a></li> <li><a class=\"reference internal\" href=\"#adding-keys\" id=\"id6\">Adding Keys</a></li> <li><a class=\"reference internal\" href=\"#creating-a-table\" id=\"id7\">Creating a table</a></li> <li><a class=\"reference internal\" href=\"#dropping-a-table\" id=\"id8\">Dropping a table</a></li> <li><a class=\"reference internal\" href=\"#renaming-a-table\" id=\"id9\">Renaming a table</a></li> </ul> </li> <li>\n<a class=\"reference internal\" href=\"#modifying-tables\" id=\"id10\">Modifying Tables</a><ul> <li><a class=\"reference internal\" href=\"#adding-a-column-to-a-table\" id=\"id11\">Adding a Column to a Table</a></li> <li><a class=\"reference internal\" href=\"#dropping-a-column-from-a-table\" id=\"id12\">Dropping a Column From a Table</a></li> <li><a class=\"reference internal\" href=\"#modifying-a-column-in-a-table\" id=\"id13\">Modifying a Column in a Table</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#class-reference\" id=\"id14\">Class Reference</a></li> </ul> </li> </ul>   <h2 id=\"initializing-the-forge-class\">Initializing the Forge Class</h2> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">In order to initialize the Forge class, your database driver must already be running, since the forge class relies on it.</p> </div> <p>Load the Forge Class as follows:</p> <pre data-language=\"php\">$this-&gt;load-&gt;dbforge()\n</pre> <p>You can also pass another database object to the DB Forge loader, in case the database you want to manage isn’t the default one:</p> <pre data-language=\"php\">$this-&gt;myforge = $this-&gt;load-&gt;dbforge($this-&gt;other_db, TRUE);\n</pre> <p>In the above example, we’re passing a custom database object as the first parameter and then tell it to return the dbforge object, instead of assigning it directly to <code>$this-&gt;dbforge</code>.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Both of the parameters can be used individually, just pass an empty value as the first one if you wish to skip it.</p> </div> <p>Once initialized you will access the methods using the <code>$this-&gt;dbforge</code> object:</p> <pre data-language=\"php\">$this-&gt;dbforge-&gt;some_method();\n</pre>   <h2 id=\"creating-and-dropping-databases\">Creating and Dropping Databases</h2> <p><strong>$this-&gt;dbforge-&gt;create_database(‘db_name’)</strong></p> <p>Permits you to create the database specified in the first parameter. Returns TRUE/FALSE based on success or failure:</p> <pre data-language=\"php\">if ($this-&gt;dbforge-&gt;create_database('my_db'))\n{\n        echo 'Database created!';\n}\n</pre> <p><strong>$this-&gt;dbforge-&gt;drop_database(‘db_name’)</strong></p> <p>Permits you to drop the database specified in the first parameter. Returns TRUE/FALSE based on success or failure:</p> <pre data-language=\"php\">if ($this-&gt;dbforge-&gt;drop_database('my_db'))\n{\n        echo 'Database deleted!';\n}\n</pre>   <h2 id=\"creating-and-dropping-tables\">Creating and Dropping Tables</h2> <p>There are several things you may wish to do when creating tables. Add fields, add keys to the table, alter columns. CodeIgniter provides a mechanism for this.</p>  <h3 id=\"adding-fields\">Adding fields</h3> <p>Fields are created via an associative array. Within the array you must include a ‘type’ key that relates to the datatype of the field. For example, INT, VARCHAR, TEXT, etc. Many datatypes (for example VARCHAR) also require a ‘constraint’ key.</p> <pre data-language=\"php\">$fields = array(\n        'users' =&gt; array(\n                'type' =&gt; 'VARCHAR',\n                'constraint' =&gt; '100',\n        ),\n);\n// will translate to \"users VARCHAR(100)\" when the field is added.\n</pre> <p>Additionally, the following key/values can be used:</p> <ul class=\"simple\"> <li>unsigned/true : to generate “UNSIGNED” in the field definition.</li> <li>default/value : to generate a default value in the field definition.</li> <li>null/true : to generate “NULL” in the field definition. Without this, the field will default to “NOT NULL”.</li> <li>auto_increment/true : generates an auto_increment flag on the field. Note that the field type must be a type that supports this, such as integer.</li> <li>unique/true : to generate a unique key for the field definition.</li> </ul> <pre data-language=\"php\">$fields = array(\n        'blog_id' =&gt; array(\n                'type' =&gt; 'INT',\n                'constraint' =&gt; 5,\n                'unsigned' =&gt; TRUE,\n                'auto_increment' =&gt; TRUE\n        ),\n        'blog_title' =&gt; array(\n                'type' =&gt; 'VARCHAR',\n                'constraint' =&gt; '100',\n                'unique' =&gt; TRUE,\n        ),\n        'blog_author' =&gt; array(\n                'type' =&gt;'VARCHAR',\n                'constraint' =&gt; '100',\n                'default' =&gt; 'King of Town',\n        ),\n        'blog_description' =&gt; array(\n                'type' =&gt; 'TEXT',\n                'null' =&gt; TRUE,\n        ),\n);\n</pre> <p>After the fields have been defined, they can be added using <code>$this-&gt;dbforge-&gt;add_field($fields);</code> followed by a call to the <code>create_table()</code> method.</p> <p><strong>$this-&gt;dbforge-&gt;add_field()</strong></p> <p>The add fields method will accept the above array.</p>  <h4 id=\"passing-strings-as-fields\">Passing strings as fields</h4> <p>If you know exactly how you want a field to be created, you can pass the string into the field definitions with add_field()</p> <pre data-language=\"php\">$this-&gt;dbforge-&gt;add_field(\"label varchar(100) NOT NULL DEFAULT 'default label'\");\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Passing raw strings as fields cannot be followed by <code>add_key()</code> calls on those fields.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Multiple calls to add_field() are cumulative.</p> </div>   <h4 id=\"creating-an-id-field\">Creating an id field</h4> <p>There is a special exception for creating id fields. A field with type id will automatically be assigned as an INT(9) auto_incrementing Primary Key.</p> <pre data-language=\"php\">$this-&gt;dbforge-&gt;add_field('id');\n// gives id INT(9) NOT NULL AUTO_INCREMENT\n</pre>    <h3 id=\"adding-keys\">Adding Keys</h3> <p>Generally speaking, you’ll want your table to have Keys. This is accomplished with $this-&gt;dbforge-&gt;add_key(‘field’). An optional second parameter set to TRUE will make it a primary key. Note that add_key() must be followed by a call to create_table().</p> <p>Multiple column non-primary keys must be sent as an array. Sample output below is for MySQL.</p> <pre data-language=\"php\">$this-&gt;dbforge-&gt;add_key('blog_id', TRUE);\n// gives PRIMARY KEY `blog_id` (`blog_id`)\n\n$this-&gt;dbforge-&gt;add_key('blog_id', TRUE);\n$this-&gt;dbforge-&gt;add_key('site_id', TRUE);\n// gives PRIMARY KEY `blog_id_site_id` (`blog_id`, `site_id`)\n\n$this-&gt;dbforge-&gt;add_key('blog_name');\n// gives KEY `blog_name` (`blog_name`)\n\n$this-&gt;dbforge-&gt;add_key(array('blog_name', 'blog_label'));\n// gives KEY `blog_name_blog_label` (`blog_name`, `blog_label`)\n</pre>   <h3 id=\"creating-a-table\">Creating a table</h3> <p>After fields and keys have been declared, you can create a new table with</p> <pre data-language=\"php\">$this-&gt;dbforge-&gt;create_table('table_name');\n// gives CREATE TABLE table_name\n</pre> <p>An optional second parameter set to TRUE adds an “IF NOT EXISTS” clause into the definition</p> <pre data-language=\"php\">$this-&gt;dbforge-&gt;create_table('table_name', TRUE);\n// gives CREATE TABLE IF NOT EXISTS table_name\n</pre> <p>You could also pass optional table attributes, such as MySQL’s <code>ENGINE</code>:</p> <pre data-language=\"php\">$attributes = array('ENGINE' =&gt; 'InnoDB');\n$this-&gt;dbforge-&gt;create_table('table_name', FALSE, $attributes);\n// produces: CREATE TABLE `table_name` (...) ENGINE = InnoDB DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Unless you specify the <code>CHARACTER SET</code> and/or <code>COLLATE</code> attributes, <code>create_table()</code> will always add them with your configured <em>char_set</em> and <em>dbcollat</em> values, as long as they are not empty (MySQL only).</p> </div>   <h3 id=\"dropping-a-table\">Dropping a table</h3> <p>Execute a DROP TABLE statement and optionally add an IF EXISTS clause.</p> <pre data-language=\"php\">// Produces: DROP TABLE table_name\n$this-&gt;dbforge-&gt;drop_table('table_name');\n\n// Produces: DROP TABLE IF EXISTS table_name\n$this-&gt;dbforge-&gt;drop_table('table_name',TRUE);\n</pre>   <h3 id=\"renaming-a-table\">Renaming a table</h3> <p>Executes a TABLE rename</p> <pre data-language=\"php\">$this-&gt;dbforge-&gt;rename_table('old_table_name', 'new_table_name');\n// gives ALTER TABLE old_table_name RENAME TO new_table_name\n</pre>    <h2 id=\"modifying-tables\">Modifying Tables</h2>  <h3 id=\"adding-a-column-to-a-table\">Adding a Column to a Table</h3> <p><strong>$this-&gt;dbforge-&gt;add_column()</strong></p> <p>The <code>add_column()</code> method is used to modify an existing table. It accepts the same field array as above, and can be used for an unlimited number of additional fields.</p> <pre data-language=\"php\">$fields = array(\n        'preferences' =&gt; array('type' =&gt; 'TEXT')\n);\n$this-&gt;dbforge-&gt;add_column('table_name', $fields);\n// Executes: ALTER TABLE table_name ADD preferences TEXT\n</pre> <p>If you are using MySQL or CUBIRD, then you can take advantage of their AFTER and FIRST clauses to position the new column.</p> <p>Examples:</p> <pre data-language=\"php\">// Will place the new column after the `another_field` column:\n$fields = array(\n        'preferences' =&gt; array('type' =&gt; 'TEXT', 'after' =&gt; 'another_field')\n);\n\n// Will place the new column at the start of the table definition:\n$fields = array(\n        'preferences' =&gt; array('type' =&gt; 'TEXT', 'first' =&gt; TRUE)\n);\n</pre>   <h3 id=\"dropping-a-column-from-a-table\">Dropping a Column From a Table</h3> <p><strong>$this-&gt;dbforge-&gt;drop_column()</strong></p> <p>Used to remove a column from a table.</p> <pre data-language=\"php\">$this-&gt;dbforge-&gt;drop_column('table_name', 'column_to_drop');\n</pre>   <h3 id=\"modifying-a-column-in-a-table\">Modifying a Column in a Table</h3> <p><strong>$this-&gt;dbforge-&gt;modify_column()</strong></p> <p>The usage of this method is identical to <code>add_column()</code>, except it alters an existing column rather than adding a new one. In order to change the name you can add a “name” key into the field defining array.</p> <pre data-language=\"php\">$fields = array(\n        'old_name' =&gt; array(\n                'name' =&gt; 'new_name',\n                'type' =&gt; 'TEXT',\n        ),\n);\n$this-&gt;dbforge-&gt;modify_column('table_name', $fields);\n// gives ALTER TABLE table_name CHANGE old_name new_name TEXT\n</pre>    <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_DB_forge\">\n<code>class CI_DB_forge</code> </dt> <dd>\n<dl class=\"method\"> <dt id=\"CI_DB_forge::add_column\">\n<code>add_column($table[, $field = array()[, $_after = NULL]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table</strong> (<em>string</em>) – Table name to add the column to</li> <li>\n<strong>$field</strong> (<em>array</em>) – Column definition(s)</li> <li>\n<strong>$_after</strong> (<em>string</em>) – Column for AFTER clause (deprecated)</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Adds a column to a table. Usage: See <a class=\"reference internal\" href=\"#adding-a-column-to-a-table\">Adding a Column to a Table</a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_forge::add_field\">\n<code>add_field($field)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$field</strong> (<em>array</em>) – Field definition to add</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_DB_forge instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_DB_forge</p> </td> </tr>  </table> <p>Adds a field to the set that will be used to create a table. Usage: See <a class=\"reference internal\" href=\"#adding-fields\">Adding fields</a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_forge::add_key\">\n<code>add_key($key[, $primary = FALSE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$key</strong> (<em>array</em>) – Name of a key field</li> <li>\n<strong>$primary</strong> (<em>bool</em>) – Set to TRUE if it should be a primary key or a regular one</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_DB_forge instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_DB_forge</p> </td> </tr>  </table> <p>Adds a key to the set that will be used to create a table. Usage: See <a class=\"reference internal\" href=\"#adding-keys\">Adding Keys</a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_forge::create_database\">\n<code>create_database($db_name)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$db_name</strong> (<em>string</em>) – Name of the database to create</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Creates a new database. Usage: See <a class=\"reference internal\" href=\"#creating-and-dropping-databases\">Creating and Dropping Databases</a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_forge::create_table\">\n<code>create_table($table[, $if_not_exists = FALSE[, array $attributes = array()]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table</strong> (<em>string</em>) – Name of the table to create</li> <li>\n<strong>$if_not_exists</strong> (<em>string</em>) – Set to TRUE to add an ‘IF NOT EXISTS’ clause</li> <li>\n<strong>$attributes</strong> (<em>string</em>) – An associative array of table attributes</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Creates a new table. Usage: See <a class=\"reference internal\" href=\"#creating-a-table\">Creating a table</a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_forge::drop_column\">\n<code>drop_column($table, $column_name)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table</strong> (<em>string</em>) – Table name</li> <li>\n<strong>$column_name</strong> (<em>array</em>) – The column name to drop</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Drops a column from a table. Usage: See <a class=\"reference internal\" href=\"#dropping-a-column-from-a-table\">Dropping a Column From a Table</a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_forge::drop_database\">\n<code>drop_database($db_name)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$db_name</strong> (<em>string</em>) – Name of the database to drop</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Drops a database. Usage: See <a class=\"reference internal\" href=\"#creating-and-dropping-databases\">Creating and Dropping Databases</a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_forge::drop_table\">\n<code>drop_table($table_name[, $if_exists = FALSE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table</strong> (<em>string</em>) – Name of the table to drop</li> <li>\n<strong>$if_exists</strong> (<em>string</em>) – Set to TRUE to add an ‘IF EXISTS’ clause</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Drops a table. Usage: See <a class=\"reference internal\" href=\"#dropping-a-table\">Dropping a table</a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_forge::modify_column\">\n<code>modify_column($table, $field)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table</strong> (<em>string</em>) – Table name</li> <li>\n<strong>$field</strong> (<em>array</em>) – Column definition(s)</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Modifies a table column. Usage: See <a class=\"reference internal\" href=\"#modifying-a-column-in-a-table\">Modifying a Column in a Table</a>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_forge::rename_table\">\n<code>rename_table($table_name, $new_table_name)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table</strong> (<em>string</em>) – Current of the table</li> <li>\n<strong>$new_table_name</strong> (<em>string</em>) – New name of the table</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Renames a table. Usage: See <a class=\"reference internal\" href=\"#renaming-a-table\">Renaming a table</a>.</p> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/database/forge.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/database/forge.html</a>\n  </p>\n</div>\n","helpers/file_helper":"<h1 id=\"file-helper\">File Helper</h1> <p>The File Helper file contains functions that assist in working with files.</p>  <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#loading-this-helper\" id=\"id1\">Loading this Helper</a></li> <li><a class=\"reference internal\" href=\"#available-functions\" id=\"id2\">Available Functions</a></li> </ul>   <h2 id=\"loading-this-helper\">Loading this Helper</h2> <p>This helper is loaded using the following code:</p> <pre data-language=\"php\">$this-&gt;load-&gt;helper('file');\n</pre>   <h2 id=\"available-functions\">Available Functions</h2> <p>The following functions are available:</p> <dl class=\"function\"> <dt id=\"read_file\">\n<code>read_file($file)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$file</strong> (<em>string</em>) – File path</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">File contents or FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Returns the data contained in the file specified in the path.</p> <p>Example:</p> <pre data-language=\"php\">$string = read_file('./path/to/file.php');\n</pre> <p>The path can be a relative or full server path. Returns FALSE (boolean) on failure.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The path is relative to your main site index.php file, NOT your controller or view files. CodeIgniter uses a front controller so paths are always relative to the main site index.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This function is DEPRECATED. Use the native <code>file_get_contents()</code> instead.</p> </div> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">If your server is running an <strong>open_basedir</strong> restriction this function might not work if you are trying to access a file above the calling script.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"write_file\">\n<code>write_file($path, $data[, $mode = 'wb'])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$path</strong> (<em>string</em>) – File path</li> <li>\n<strong>$data</strong> (<em>string</em>) – Data to write to file</li> <li>\n<strong>$mode</strong> (<em>string</em>) – <code>fopen()</code> mode</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE if the write was successful, FALSE in case of an error</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Writes data to the file specified in the path. If the file does not exist then the function will create it.</p> <p>Example:</p> <pre data-language=\"php\">$data = 'Some file data';\nif ( ! write_file('./path/to/file.php', $data))\n{\n        echo 'Unable to write the file';\n}\nelse\n{\n        echo 'File written!';\n}\n</pre> <p>You can optionally set the write mode via the third parameter:</p> <pre data-language=\"php\">write_file('./path/to/file.php', $data, 'r+');\n</pre> <p>The default mode is ‘wb’. Please see the <a class=\"reference external\" href=\"http://php.net/manual/en/function.fopen.php\">PHP user guide</a> for mode options.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The path is relative to your main site index.php file, NOT your controller or view files. CodeIgniter uses a front controller so paths are always relative to the main site index.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This function acquires an exclusive lock on the file while writing to it.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"delete_files\">\n<code>delete_files($path[, $del_dir = FALSE[, $htdocs = FALSE]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$path</strong> (<em>string</em>) – Directory path</li> <li>\n<strong>$del_dir</strong> (<em>bool</em>) – Whether to also delete directories</li> <li>\n<strong>$htdocs</strong> (<em>bool</em>) – Whether to skip deleting .htaccess and index page files</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE in case of an error</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Deletes ALL files contained in the supplied path.</p> <p>Example:</p> <pre data-language=\"php\">delete_files('./path/to/directory/');\n</pre> <p>If the second parameter is set to TRUE, any directories contained within the supplied root path will be deleted as well.</p> <p>Example:</p> <pre data-language=\"php\">delete_files('./path/to/directory/', TRUE);\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The files must be writable or owned by the system in order to be deleted.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"get_filenames\">\n<code>get_filenames($source_dir[, $include_path = FALSE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$source_dir</strong> (<em>string</em>) – Directory path</li> <li>\n<strong>$include_path</strong> (<em>bool</em>) – Whether to include the path as part of the filenames</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An array of file names</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>Takes a server path as input and returns an array containing the names of all files contained within it. The file path can optionally be added to the file names by setting the second parameter to TRUE.</p> <p>Example:</p> <pre data-language=\"php\">$controllers = get_filenames(APPPATH.'controllers/');\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"get_dir_file_info\">\n<code>get_dir_file_info($source_dir, $top_level_only)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$source_dir</strong> (<em>string</em>) – Directory path</li> <li>\n<strong>$top_level_only</strong> (<em>bool</em>) – Whether to look only at the specified directory (excluding sub-directories)</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An array containing info on the supplied directory’s contents</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>Reads the specified directory and builds an array containing the filenames, filesize, dates, and permissions. Sub-folders contained within the specified path are only read if forced by sending the second parameter to FALSE, as this can be an intensive operation.</p> <p>Example:</p> <pre data-language=\"php\">$models_info = get_dir_file_info(APPPATH.'models/');\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"get_file_info\">\n<code>get_file_info($file[, $returned_values = array('name', 'server_path', 'size', 'date')])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$file</strong> (<em>string</em>) – File path</li> <li>\n<strong>$returned_values</strong> (<em>array</em>) – What type of info to return</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An array containing info on the specified file or FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>Given a file and path, returns (optionally) the <em>name</em>, <em>path</em>, <em>size</em> and <em>date modified</em> information attributes for a file. Second parameter allows you to explicitly declare what information you want returned.</p> <p>Valid <code>$returned_values</code> options are: <cite>name</cite>, <cite>size</cite>, <cite>date</cite>, <cite>readable</cite>, <cite>writeable</cite>, <cite>executable</cite> and <cite>fileperms</cite>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"get_mime_by_extension\">\n<code>get_mime_by_extension($filename)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$filename</strong> (<em>string</em>) – File name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">MIME type string or FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Translates a filename extension into a MIME type based on <em>config/mimes.php</em>. Returns FALSE if it can’t determine the type, or read the MIME config file.</p> <pre data-language=\"php\">$file = 'somefile.png';\necho $file.' is has a mime type of '.get_mime_by_extension($file);\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This is not an accurate way of determining file MIME types, and is here strictly for convenience. It should not be used for security purposes.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"symbolic_permissions\">\n<code>symbolic_permissions($perms)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$perms</strong> (<em>int</em>) – Permissions</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Symbolic permissions string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Takes numeric permissions (such as is returned by <code>fileperms()</code>) and returns standard symbolic notation of file permissions.</p> <pre data-language=\"php\">echo symbolic_permissions(fileperms('./index.php'));  // -rw-r--r--\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"octal_permissions\">\n<code>octal_permissions($perms)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$perms</strong> (<em>int</em>) – Permissions</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Octal permissions string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Takes numeric permissions (such as is returned by <code>fileperms()</code>) and returns a three character octal notation of file permissions.</p> <pre data-language=\"php\">echo octal_permissions(fileperms('./index.php')); // 644\n</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/helpers/file_helper.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/helpers/file_helper.html</a>\n  </p>\n</div>\n","helpers/date_helper":"<h1 id=\"date-helper\">Date Helper</h1> <p>The Date Helper file contains functions that help you work with dates.</p>  <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#loading-this-helper\" id=\"id1\">Loading this Helper</a></li> <li><a class=\"reference internal\" href=\"#available-functions\" id=\"id2\">Available Functions</a></li> <li><a class=\"reference internal\" href=\"#timezone-reference\" id=\"id3\">Timezone Reference</a></li> </ul>   <h2 id=\"loading-this-helper\">Loading this Helper</h2> <p>This helper is loaded using the following code:</p> <pre data-language=\"php\">$this-&gt;load-&gt;helper('date');\n</pre>   <h2 id=\"available-functions\">Available Functions</h2> <p>The following functions are available:</p> <dl class=\"function\"> <dt id=\"now\">\n<code>now([$timezone = NULL])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$timezone</strong> (<em>string</em>) – Timezone</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">UNIX timestamp</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">int</p> </td> </tr>  </table> <p>Returns the current time as a UNIX timestamp, referenced either to your server’s local time or any PHP suported timezone, based on the “time reference” setting in your config file. If you do not intend to set your master time reference to any other PHP supported timezone (which you’ll typically do if you run a site that lets each user set their own timezone settings) there is no benefit to using this function over PHP’s <code>time()</code> function.</p> <pre data-language=\"php\">echo now('Australia/Victoria');\n</pre> <p>If a timezone is not provided, it will return <code>time()</code> based on the <strong>time_reference</strong> setting.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"mdate\">\n<code>mdate([$datestr = ''[, $time = '']])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$datestr</strong> (<em>string</em>) – Date string</li> <li>\n<strong>$time</strong> (<em>int</em>) – UNIX timestamp</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">MySQL-formatted date</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>This function is identical to PHP’s <a class=\"reference external\" href=\"http://php.net/manual/en/function.date.php\">date()</a> function, except that it lets you use MySQL style date codes, where each code letter is preceded with a percent sign, e.g. <cite>%Y %m %d</cite></p> <p>The benefit of doing dates this way is that you don’t have to worry about escaping any characters that are not date codes, as you would normally have to do with the <code>date()</code> function.</p> <p>Example:</p> <pre data-language=\"php\">$datestring = 'Year: %Y Month: %m Day: %d - %h:%i %a';\n$time = time();\necho mdate($datestring, $time);\n</pre> <p>If a timestamp is not included in the second parameter the current time will be used.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"standard_date\">\n<code>standard_date([$fmt = 'DATE_RFC822'[, $time = NULL]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$fmt</strong> (<em>string</em>) – Date format</li> <li>\n<strong>$time</strong> (<em>int</em>) – UNIX timestamp</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Formatted date or FALSE on invalid format</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Lets you generate a date string in one of several standardized formats.</p> <p>Example:</p> <pre data-language=\"php\">$format = 'DATE_RFC822';\n$time = time();\necho standard_date($format, $time);\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>This function is DEPRECATED. Use the native <code>date()</code> combined with <a class=\"reference external\" href=\"http://php.net/manual/en/class.datetime.php#datetime.constants.types\">DateTime’s format constants</a> instead:</p> <pre data-language=\"php\">echo date(DATE_RFC822, time());\n</pre> </div> <p><strong>Supported formats:</strong></p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Constant</th> <th class=\"head\">Description</th> <th class=\"head\">Example</th> </tr> </thead>  <tr class=\"row-even\">\n<td>DATE_ATOM</td> <td>Atom</td> <td>2005-08-15T16:13:03+0000</td> </tr> <tr class=\"row-odd\">\n<td>DATE_COOKIE</td> <td>HTTP Cookies</td> <td>Sun, 14 Aug 2005 16:13:03 UTC</td> </tr> <tr class=\"row-even\">\n<td>DATE_ISO8601</td> <td>ISO-8601</td> <td>2005-08-14T16:13:03+00:00</td> </tr> <tr class=\"row-odd\">\n<td>DATE_RFC822</td> <td>RFC 822</td> <td>Sun, 14 Aug 05 16:13:03 UTC</td> </tr> <tr class=\"row-even\">\n<td>DATE_RFC850</td> <td>RFC 850</td> <td>Sunday, 14-Aug-05 16:13:03 UTC</td> </tr> <tr class=\"row-odd\">\n<td>DATE_RFC1036</td> <td>RFC 1036</td> <td>Sunday, 14-Aug-05 16:13:03 UTC</td> </tr> <tr class=\"row-even\">\n<td>DATE_RFC1123</td> <td>RFC 1123</td> <td>Sun, 14 Aug 2005 16:13:03 UTC</td> </tr> <tr class=\"row-odd\">\n<td>DATE_RFC2822</td> <td>RFC 2822</td> <td>Sun, 14 Aug 2005 16:13:03 +0000</td> </tr> <tr class=\"row-even\">\n<td>DATE_RSS</td> <td>RSS</td> <td>Sun, 14 Aug 2005 16:13:03 UTC</td> </tr> <tr class=\"row-odd\">\n<td>DATE_W3C</td> <td>W3C</td> <td>2005-08-14T16:13:03+0000</td> </tr>  </table> </dd>\n</dl> <dl class=\"function\"> <dt id=\"local_to_gmt\">\n<code>local_to_gmt([$time = ''])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$time</strong> (<em>int</em>) – UNIX timestamp</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">UNIX timestamp</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">int</p> </td> </tr>  </table> <p>Takes a UNIX timestamp as input and returns it as GMT.</p> <p>Example:</p> <pre data-language=\"php\">$gmt = local_to_gmt(time());\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"gmt_to_local\">\n<code>gmt_to_local([$time = ''[, $timezone = 'UTC'[, $dst = FALSE]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$time</strong> (<em>int</em>) – UNIX timestamp</li> <li>\n<strong>$timezone</strong> (<em>string</em>) – Timezone</li> <li>\n<strong>$dst</strong> (<em>bool</em>) – Whether DST is active</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">UNIX timestamp</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">int</p> </td> </tr>  </table> <p>Takes a UNIX timestamp (referenced to GMT) as input, and converts it to a localized timestamp based on the timezone and Daylight Saving Time submitted.</p> <p>Example:</p> <pre data-language=\"php\">$timestamp = 1140153693;\n$timezone  = 'UM8';\n$daylight_saving = TRUE;\necho gmt_to_local($timestamp, $timezone, $daylight_saving);\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">For a list of timezones see the reference at the bottom of this page.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"mysql_to_unix\">\n<code>mysql_to_unix([$time = ''])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$time</strong> (<em>string</em>) – MySQL timestamp</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">UNIX timestamp</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">int</p> </td> </tr>  </table> <p>Takes a MySQL Timestamp as input and returns it as a UNIX timestamp.</p> <p>Example:</p> <pre data-language=\"php\">$unix = mysql_to_unix('20061124092345');\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"unix_to_human\">\n<code>unix_to_human([$time = ''[, $seconds = FALSE[, $fmt = 'us']]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$time</strong> (<em>int</em>) – UNIX timestamp</li> <li>\n<strong>$seconds</strong> (<em>bool</em>) – Whether to show seconds</li> <li>\n<strong>$fmt</strong> (<em>string</em>) – format (us or euro)</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Formatted date</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Takes a UNIX timestamp as input and returns it in a human readable format with this prototype:</p> <pre data-language=\"php\">YYYY-MM-DD HH:MM:SS AM/PM\n</pre> <p>This can be useful if you need to display a date in a form field for submission.</p> <p>The time can be formatted with or without seconds, and it can be set to European or US format. If only the timestamp is submitted it will return the time without seconds formatted for the U.S.</p> <p>Examples:</p> <pre data-language=\"php\">$now = time();\necho unix_to_human($now); // U.S. time, no seconds\necho unix_to_human($now, TRUE, 'us'); // U.S. time with seconds\necho unix_to_human($now, TRUE, 'eu'); // Euro time with seconds\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"human_to_unix\">\n<code>human_to_unix([$datestr = ''])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$datestr</strong> (<em>int</em>) – Date string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">UNIX timestamp or FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">int</p> </td> </tr>  </table> <p>The opposite of the <code>unix_to_time()</code> function. Takes a “human” time as input and returns it as a UNIX timestamp. This is useful if you accept “human” formatted dates submitted via a form. Returns boolean FALSE date string passed to it is not formatted as indicated above.</p> <p>Example:</p> <pre data-language=\"php\">$now = time();\n$human = unix_to_human($now);\n$unix = human_to_unix($human);\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"nice_date\">\n<code>nice_date([$bad_date = ''[, $format = FALSE]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$bad_date</strong> (<em>int</em>) – The terribly formatted date-like string</li> <li>\n<strong>$format</strong> (<em>string</em>) – Date format to return (same as PHP’s <code>date()</code> function)</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Formatted date</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>This function can take a number poorly-formed date formats and convert them into something useful. It also accepts well-formed dates.</p> <p>The function will return a UNIX timestamp by default. You can, optionally, pass a format string (the same type as the PHP <code>date()</code> function accepts) as the second parameter.</p> <p>Example:</p> <pre data-language=\"php\">$bad_date = '199605';\n// Should Produce: 1996-05-01\n$better_date = nice_date($bad_date, 'Y-m-d');\n\n$bad_date = '9-11-2001';\n// Should Produce: 2001-09-11\n$better_date = nice_date($bad_date, 'Y-m-d');\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"timespan\">\n<code>timespan([$seconds = 1[, $time = ''[, $units = '']]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$seconds</strong> (<em>int</em>) – Number of seconds</li> <li>\n<strong>$time</strong> (<em>string</em>) – UNIX timestamp</li> <li>\n<strong>$units</strong> (<em>int</em>) – Number of time units to display</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Formatted time difference</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Formats a UNIX timestamp so that is appears similar to this:</p> <pre data-language=\"php\">1 Year, 10 Months, 2 Weeks, 5 Days, 10 Hours, 16 Minutes\n</pre> <p>The first parameter must contain a UNIX timestamp. The second parameter must contain a timestamp that is greater that the first timestamp. The thirdparameter is optional and limits the number of time units to display.</p> <p>If the second parameter empty, the current time will be used.</p> <p>The most common purpose for this function is to show how much time has elapsed from some point in time in the past to now.</p> <p>Example:</p> <pre data-language=\"php\">$post_date = '1079621429';\n$now = time();\n$units = 2;\necho timespan($post_date, $now, $units);\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The text generated by this function is found in the following language file: <cite>language/&lt;your_lang&gt;/date_lang.php</cite></p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"days_in_month\">\n<code>days_in_month([$month = 0[, $year = '']])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$month</strong> (<em>int</em>) – a numeric month</li> <li>\n<strong>$year</strong> (<em>int</em>) – a numeric year</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Count of days in the specified month</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">int</p> </td> </tr>  </table> <p>Returns the number of days in a given month/year. Takes leap years into account.</p> <p>Example:</p> <pre data-language=\"php\">echo days_in_month(06, 2005);\n</pre> <p>If the second parameter is empty, the current year will be used.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This function will alias the native <code>cal_days_in_month()</code>, if it is available.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"date_range\">\n<code>date_range([$unix_start = ''[, $mixed = ''[, $is_unix = TRUE[, $format = 'Y-m-d']]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$unix_start</strong> (<em>int</em>) – UNIX timestamp of the range start date</li> <li>\n<strong>$mixed</strong> (<em>int</em>) – UNIX timestamp of the range end date or interval in days</li> <li>\n<strong>$is_unix</strong> (<em>bool</em>) – set to FALSE if $mixed is not a timestamp</li> <li>\n<strong>$format</strong> (<em>string</em>) – Output date format, same as in <code>date()</code>\n</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An array of dates</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>Returns a list of dates within a specified period.</p> <p>Example:</p> <pre data-language=\"php\">$range = date_range('2012-01-01', '2012-01-15');\necho \"First 15 days of 2012:\";\nforeach ($range as $date)\n{\n        echo $date.\"\\n\";\n}\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"timezones\">\n<code>timezones([$tz = ''])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$tz</strong> (<em>string</em>) – A numeric timezone</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Hour difference from UTC</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">int</p> </td> </tr>  </table> <p>Takes a timezone reference (for a list of valid timezones, see the “Timezone Reference” below) and returns the number of hours offset from UTC.</p> <p>Example:</p> <pre data-language=\"php\">echo timezones('UM5');\n</pre> <p>This function is useful when used with <a class=\"reference internal\" href=\"#timezone_menu\" title=\"timezone_menu\"><code>timezone_menu()</code></a>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"timezone_menu\">\n<code>timezone_menu([$default = 'UTC'[, $class = ''[, $name = 'timezones'[, $attributes = '']]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$default</strong> (<em>string</em>) – Timezone</li> <li>\n<strong>$class</strong> (<em>string</em>) – Class name</li> <li>\n<strong>$name</strong> (<em>string</em>) – Menu name</li> <li>\n<strong>$attributes</strong> (<em>mixed</em>) – HTML attributes</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">HTML drop down menu with time zones</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Generates a pull-down menu of timezones, like this one:</p> <form action=\"#\"> <select name=\"timezones\"> <option value=\"UM12\">(UTC -12:00) Baker/Howland Island</option> <option value=\"UM11\">(UTC -11:00) Samoa Time Zone, Niue</option> <option value=\"UM10\">(UTC -10:00) Hawaii-Aleutian Standard Time, Cook Islands, Tahiti</option> <option value=\"UM95\">(UTC -9:30) Marquesas Islands</option> <option value=\"UM9\">(UTC -9:00) Alaska Standard Time, Gambier Islands</option> <option value=\"UM8\">(UTC -8:00) Pacific Standard Time, Clipperton Island</option> <option value=\"UM7\">(UTC -7:00) Mountain Standard Time</option> <option value=\"UM6\">(UTC -6:00) Central Standard Time</option> <option value=\"UM5\">(UTC -5:00) Eastern Standard Time, Western Caribbean Standard Time</option> <option value=\"UM45\">(UTC -4:30) Venezuelan Standard Time</option> <option value=\"UM4\">(UTC -4:00) Atlantic Standard Time, Eastern Caribbean Standard Time</option> <option value=\"UM35\">(UTC -3:30) Newfoundland Standard Time</option> <option value=\"UM3\">(UTC -3:00) Argentina, Brazil, French Guiana, Uruguay</option> <option value=\"UM2\">(UTC -2:00) South Georgia/South Sandwich Islands</option> <option value=\"UM1\">(UTC -1:00) Azores, Cape Verde Islands</option> <option value=\"UTC\" selected>(UTC) Greenwich Mean Time, Western European Time</option> <option value=\"UP1\">(UTC +1:00) Central European Time, West Africa Time</option> <option value=\"UP2\">(UTC +2:00) Central Africa Time, Eastern European Time, Kaliningrad Time</option> <option value=\"UP3\">(UTC +3:00) Moscow Time, East Africa Time</option> <option value=\"UP35\">(UTC +3:30) Iran Standard Time</option> <option value=\"UP4\">(UTC +4:00) Azerbaijan Standard Time, Samara Time</option> <option value=\"UP45\">(UTC +4:30) Afghanistan</option> <option value=\"UP5\">(UTC +5:00) Pakistan Standard Time, Yekaterinburg Time</option> <option value=\"UP55\">(UTC +5:30) Indian Standard Time, Sri Lanka Time</option> <option value=\"UP575\">(UTC +5:45) Nepal Time</option> <option value=\"UP6\">(UTC +6:00) Bangladesh Standard Time, Bhutan Time, Omsk Time</option> <option value=\"UP65\">(UTC +6:30) Cocos Islands, Myanmar</option> <option value=\"UP7\">(UTC +7:00) Krasnoyarsk Time, Cambodia, Laos, Thailand, Vietnam</option> <option value=\"UP8\">(UTC +8:00) Australian Western Standard Time, Beijing Time, Irkutsk Time</option> <option value=\"UP875\">(UTC +8:45) Australian Central Western Standard Time</option> <option value=\"UP9\">(UTC +9:00) Japan Standard Time, Korea Standard Time, Yakutsk Time</option> <option value=\"UP95\">(UTC +9:30) Australian Central Standard Time</option> <option value=\"UP10\">(UTC +10:00) Australian Eastern Standard Time, Vladivostok Time</option> <option value=\"UP105\">(UTC +10:30) Lord Howe Island</option> <option value=\"UP11\">(UTC +11:00) Srednekolymsk Time, Solomon Islands, Vanuatu</option> <option value=\"UP115\">(UTC +11:30) Norfolk Island</option> <option value=\"UP12\">(UTC +12:00) Fiji, Gilbert Islands, Kamchatka Time, New Zealand Standard Time</option> <option value=\"UP1275\">(UTC +12:45) Chatham Islands Standard Time</option> <option value=\"UP13\">(UTC +13:00) Phoenix Islands Time, Tonga</option> <option value=\"UP14\">(UTC +14:00) Line Islands</option> </select> </form>\n<p>This menu is useful if you run a membership site in which your users are allowed to set their local timezone value.</p> <p>The first parameter lets you set the “selected” state of the menu. For example, to set Pacific time as the default you will do this:</p> <pre data-language=\"php\">echo timezone_menu('UM8');\n</pre> <p>Please see the timezone reference below to see the values of this menu.</p> <p>The second parameter lets you set a CSS class name for the menu.</p> <p>The fourth parameter lets you set one or more attributes on the generated select tag.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The text contained in the menu is found in the following language file: <cite>language/&lt;your_lang&gt;/date_lang.php</cite></p> </div> </dd>\n</dl>   <h2 id=\"timezone-reference\">Timezone Reference</h2> <p>The following table indicates each timezone and its location.</p> <p>Note some of the location lists have been abridged for clarity and formatting.</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Time Zone</th> <th class=\"head\">Location</th> </tr> </thead>  <tr class=\"row-even\">\n<td>UM12</td> <td>(UTC - 12:00) Baker/Howland Island</td> </tr> <tr class=\"row-odd\">\n<td>UM11</td> <td>(UTC - 11:00) Samoa Time Zone, Niue</td> </tr> <tr class=\"row-even\">\n<td>UM10</td> <td>(UTC - 10:00) Hawaii-Aleutian Standard Time, Cook Islands</td> </tr> <tr class=\"row-odd\">\n<td>UM95</td> <td>(UTC - 09:30) Marquesas Islands</td> </tr> <tr class=\"row-even\">\n<td>UM9</td> <td>(UTC - 09:00) Alaska Standard Time, Gambier Islands</td> </tr> <tr class=\"row-odd\">\n<td>UM8</td> <td>(UTC - 08:00) Pacific Standard Time, Clipperton Island</td> </tr> <tr class=\"row-even\">\n<td>UM7</td> <td>(UTC - 07:00) Mountain Standard Time</td> </tr> <tr class=\"row-odd\">\n<td>UM6</td> <td>(UTC - 06:00) Central Standard Time</td> </tr> <tr class=\"row-even\">\n<td>UM5</td> <td>(UTC - 05:00) Eastern Standard Time, Western Caribbean</td> </tr> <tr class=\"row-odd\">\n<td>UM45</td> <td>(UTC - 04:30) Venezuelan Standard Time</td> </tr> <tr class=\"row-even\">\n<td>UM4</td> <td>(UTC - 04:00) Atlantic Standard Time, Eastern Caribbean</td> </tr> <tr class=\"row-odd\">\n<td>UM35</td> <td>(UTC - 03:30) Newfoundland Standard Time</td> </tr> <tr class=\"row-even\">\n<td>UM3</td> <td>(UTC - 03:00) Argentina, Brazil, French Guiana, Uruguay</td> </tr> <tr class=\"row-odd\">\n<td>UM2</td> <td>(UTC - 02:00) South Georgia/South Sandwich Islands</td> </tr> <tr class=\"row-even\">\n<td>UM1</td> <td>(UTC -1:00) Azores, Cape Verde Islands</td> </tr> <tr class=\"row-odd\">\n<td>UTC</td> <td>(UTC) Greenwich Mean Time, Western European Time</td> </tr> <tr class=\"row-even\">\n<td>UP1</td> <td>(UTC +1:00) Central European Time, West Africa Time</td> </tr> <tr class=\"row-odd\">\n<td>UP2</td> <td>(UTC +2:00) Central Africa Time, Eastern European Time</td> </tr> <tr class=\"row-even\">\n<td>UP3</td> <td>(UTC +3:00) Moscow Time, East Africa Time</td> </tr> <tr class=\"row-odd\">\n<td>UP35</td> <td>(UTC +3:30) Iran Standard Time</td> </tr> <tr class=\"row-even\">\n<td>UP4</td> <td>(UTC +4:00) Azerbaijan Standard Time, Samara Time</td> </tr> <tr class=\"row-odd\">\n<td>UP45</td> <td>(UTC +4:30) Afghanistan</td> </tr> <tr class=\"row-even\">\n<td>UP5</td> <td>(UTC +5:00) Pakistan Standard Time, Yekaterinburg Time</td> </tr> <tr class=\"row-odd\">\n<td>UP55</td> <td>(UTC +5:30) Indian Standard Time, Sri Lanka Time</td> </tr> <tr class=\"row-even\">\n<td>UP575</td> <td>(UTC +5:45) Nepal Time</td> </tr> <tr class=\"row-odd\">\n<td>UP6</td> <td>(UTC +6:00) Bangladesh Standard Time, Bhutan Time, Omsk Time</td> </tr> <tr class=\"row-even\">\n<td>UP65</td> <td>(UTC +6:30) Cocos Islands, Myanmar</td> </tr> <tr class=\"row-odd\">\n<td>UP7</td> <td>(UTC +7:00) Krasnoyarsk Time, Cambodia, Laos, Thailand, Vietnam</td> </tr> <tr class=\"row-even\">\n<td>UP8</td> <td>(UTC +8:00) Australian Western Standard Time, Beijing Time</td> </tr> <tr class=\"row-odd\">\n<td>UP875</td> <td>(UTC +8:45) Australian Central Western Standard Time</td> </tr> <tr class=\"row-even\">\n<td>UP9</td> <td>(UTC +9:00) Japan Standard Time, Korea Standard Time, Yakutsk</td> </tr> <tr class=\"row-odd\">\n<td>UP95</td> <td>(UTC +9:30) Australian Central Standard Time</td> </tr> <tr class=\"row-even\">\n<td>UP10</td> <td>(UTC +10:00) Australian Eastern Standard Time, Vladivostok Time</td> </tr> <tr class=\"row-odd\">\n<td>UP105</td> <td>(UTC +10:30) Lord Howe Island</td> </tr> <tr class=\"row-even\">\n<td>UP11</td> <td>(UTC +11:00) Srednekolymsk Time, Solomon Islands, Vanuatu</td> </tr> <tr class=\"row-odd\">\n<td>UP115</td> <td>(UTC +11:30) Norfolk Island</td> </tr> <tr class=\"row-even\">\n<td>UP12</td> <td>(UTC +12:00) Fiji, Gilbert Islands, Kamchatka, New Zealand</td> </tr> <tr class=\"row-odd\">\n<td>UP1275</td> <td>(UTC +12:45) Chatham Islands Standard Time</td> </tr> <tr class=\"row-even\">\n<td>UP13</td> <td>(UTC +13:00) Phoenix Islands Time, Tonga</td> </tr> <tr class=\"row-odd\">\n<td>UP14</td> <td>(UTC +14:00) Line Islands</td> </tr>  </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/helpers/date_helper.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/helpers/date_helper.html</a>\n  </p>\n</div>\n","helpers/language_helper":"<h1 id=\"language-helper\">Language Helper</h1> <p>The Language Helper file contains functions that assist in working with language files.</p>  <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#loading-this-helper\" id=\"id1\">Loading this Helper</a></li> <li><a class=\"reference internal\" href=\"#available-functions\" id=\"id2\">Available Functions</a></li> </ul>   <h2 id=\"loading-this-helper\">Loading this Helper</h2> <p>This helper is loaded using the following code:</p> <pre data-language=\"php\">$this-&gt;load-&gt;helper('language');\n</pre>   <h2 id=\"available-functions\">Available Functions</h2> <p>The following functions are available:</p> <dl class=\"function\"> <dt id=\"lang\">\n<code>lang($line[, $for = ''[, $attributes = array()]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$line</strong> (<em>string</em>) – Language line key</li> <li>\n<strong>$for</strong> (<em>string</em>) – HTML “for” attribute (ID of the element we’re creating a label for)</li> <li>\n<strong>$attributes</strong> (<em>array</em>) – Any additional HTML attributes</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">The language line; in an HTML label tag, if the <code>$for</code> parameter is not empty</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>This function returns a line of text from a loaded language file with simplified syntax that may be more desirable for view files than <code>CI_Lang::line()</code>.</p> <p>Examples:</p> <pre data-language=\"php\">echo lang('language_key');\n// Outputs: Language line\n\necho lang('language_key', 'form_item_id', array('class' =&gt; 'myClass'));\n// Outputs: &lt;label for=\"form_item_id\" class=\"myClass\"&gt;Language line&lt;/label&gt;\n</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/helpers/language_helper.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/helpers/language_helper.html</a>\n  </p>\n</div>\n","helpers/number_helper":"<h1 id=\"number-helper\">Number Helper</h1> <p>The Number Helper file contains functions that help you work with numeric data.</p>  <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#loading-this-helper\" id=\"id1\">Loading this Helper</a></li> <li><a class=\"reference internal\" href=\"#available-functions\" id=\"id2\">Available Functions</a></li> </ul>   <h2 id=\"loading-this-helper\">Loading this Helper</h2> <p>This helper is loaded using the following code:</p> <pre data-language=\"php\">$this-&gt;load-&gt;helper('number');\n</pre>   <h2 id=\"available-functions\">Available Functions</h2> <p>The following functions are available:</p> <dl class=\"function\"> <dt id=\"byte_format\">\n<code>byte_format($num[, $precision = 1])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$num</strong> (<em>mixed</em>) – Number of bytes</li> <li>\n<strong>$precision</strong> (<em>int</em>) – Floating point precision</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Formatted data size string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Formats numbers as bytes, based on size, and adds the appropriate suffix. Examples:</p> <pre data-language=\"php\">echo byte_format(456); // Returns 456 Bytes\necho byte_format(4567); // Returns 4.5 KB\necho byte_format(45678); // Returns 44.6 KB\necho byte_format(456789); // Returns 447.8 KB\necho byte_format(3456789); // Returns 3.3 MB\necho byte_format(12345678912345); // Returns 1.8 GB\necho byte_format(123456789123456789); // Returns 11,228.3 TB\n</pre> <p>An optional second parameter allows you to set the precision of the result:</p> <pre data-language=\"php\">echo byte_format(45678, 2); // Returns 44.61 KB\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The text generated by this function is found in the following language file: <em>language/&lt;your_lang&gt;/number_lang.php</em></p> </div> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/helpers/number_helper.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/helpers/number_helper.html</a>\n  </p>\n</div>\n","helpers/path_helper":"<h1 id=\"path-helper\">Path Helper</h1> <p>The Path Helper file contains functions that permits you to work with file paths on the server.</p>  <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#loading-this-helper\" id=\"id1\">Loading this Helper</a></li> <li><a class=\"reference internal\" href=\"#available-functions\" id=\"id2\">Available Functions</a></li> </ul>   <h2 id=\"loading-this-helper\">Loading this Helper</h2> <p>This helper is loaded using the following code:</p> <pre data-language=\"php\">$this-&gt;load-&gt;helper('path');\n</pre>   <h2 id=\"available-functions\">Available Functions</h2> <p>The following functions are available:</p> <dl class=\"function\"> <dt id=\"set_realpath\">\n<code>set_realpath($path[, $check_existance = FALSE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$path</strong> (<em>string</em>) – Path</li> <li>\n<strong>$check_existance</strong> (<em>bool</em>) – Whether to check if the path actually exists</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An absolute path</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>This function will return a server path without symbolic links or relative directory structures. An optional second argument will cause an error to be triggered if the path cannot be resolved.</p> <p>Examples:</p> <pre data-language=\"php\">$file = '/etc/php5/apache2/php.ini';\necho set_realpath($file); // Prints '/etc/php5/apache2/php.ini'\n\n$non_existent_file = '/path/to/non-exist-file.txt';\necho set_realpath($non_existent_file, TRUE);    // Shows an error, as the path cannot be resolved\necho set_realpath($non_existent_file, FALSE);   // Prints '/path/to/non-exist-file.txt'\n\n$directory = '/etc/php5';\necho set_realpath($directory);  // Prints '/etc/php5/'\n\n$non_existent_directory = '/path/to/nowhere';\necho set_realpath($non_existent_directory, TRUE);       // Shows an error, as the path cannot be resolved\necho set_realpath($non_existent_directory, FALSE);      // Prints '/path/to/nowhere'\n</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/helpers/path_helper.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/helpers/path_helper.html</a>\n  </p>\n</div>\n","helpers/html_helper":"<h1 id=\"html-helper\">HTML Helper</h1> <p>The HTML Helper file contains functions that assist in working with HTML.</p>  <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#loading-this-helper\" id=\"id1\">Loading this Helper</a></li> <li><a class=\"reference internal\" href=\"#available-functions\" id=\"id2\">Available Functions</a></li> </ul>   <h2 id=\"loading-this-helper\">Loading this Helper</h2> <p>This helper is loaded using the following code:</p> <pre data-language=\"php\">$this-&gt;load-&gt;helper('html');\n</pre>   <h2 id=\"available-functions\">Available Functions</h2> <p>The following functions are available:</p> <dl class=\"function\"> <dt id=\"heading\">\n<code>heading([$data = ''[, $h = '1'[, $attributes = '']]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$data</strong> (<em>string</em>) – Content</li> <li>\n<strong>$h</strong> (<em>string</em>) – Heading level</li> <li>\n<strong>$attributes</strong> (<em>mixed</em>) – HTML attributes</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">HTML heading tag</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Lets you create HTML heading tags. The first parameter will contain the data, the second the size of the heading. Example:</p> <pre data-language=\"php\">echo heading('Welcome!', 3);\n</pre> <p>The above would produce: &lt;h3&gt;Welcome!&lt;/h3&gt;</p> <p>Additionally, in order to add attributes to the heading tag such as HTML classes, ids or inline styles, a third parameter accepts either a string or an array:</p> <pre data-language=\"php\">echo heading('Welcome!', 3, 'class=\"pink\"');\necho heading('How are you?', 4, array('id' =&gt; 'question', 'class' =&gt; 'green'));\n</pre> <p>The above code produces:</p> <pre data-language=\"html\">&lt;h3 class=\"pink\"&gt;Welcome!&lt;h3&gt;\n&lt;h4 id=\"question\" class=\"green\"&gt;How are you?&lt;/h4&gt;\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"img\">\n<code>img([$src = ''[, $index_page = FALSE[, $attributes = '']]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$src</strong> (<em>string</em>) – Image source data</li> <li>\n<strong>$index_page</strong> (<em>bool</em>) – Whether to treat $src as a routed URI string</li> <li>\n<strong>$attributes</strong> (<em>array</em>) – HTML attributes</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">HTML image tag</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Lets you create HTML &lt;img /&gt; tags. The first parameter contains the image source. Example:</p> <pre data-language=\"php\">echo img('images/picture.jpg'); // gives &lt;img src=\"http://site.com/images/picture.jpg\" /&gt;\n</pre> <p>There is an optional second parameter that is a TRUE/FALSE value that specifics if the <em>src</em> should have the page specified by <code>$config['index_page']</code> added to the address it creates. Presumably, this would be if you were using a media controller:</p> <pre data-language=\"php\">echo img('images/picture.jpg', TRUE); // gives &lt;img src=\"http://site.com/index.php/images/picture.jpg\" alt=\"\" /&gt;\n</pre> <p>Additionally, an associative array can be passed to the <code>img()</code> function for complete control over all attributes and values. If an <em>alt</em> attribute is not provided, CodeIgniter will generate an empty string.</p> <p>Example:</p> <pre data-language=\"php\">$image_properties = array(\n        'src'   =&gt; 'images/picture.jpg',\n        'alt'   =&gt; 'Me, demonstrating how to eat 4 slices of pizza at one time',\n        'class' =&gt; 'post_images',\n        'width' =&gt; '200',\n        'height'=&gt; '200',\n        'title' =&gt; 'That was quite a night',\n        'rel'   =&gt; 'lightbox'\n);\n\nimg($image_properties);\n// &lt;img src=\"http://site.com/index.php/images/picture.jpg\" alt=\"Me, demonstrating how to eat 4 slices of pizza at one time\" class=\"post_images\" width=\"200\" height=\"200\" title=\"That was quite a night\" rel=\"lightbox\" /&gt;\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"link_tag\">\n<code>link_tag([$href = ''[, $rel = 'stylesheet'[, $type = 'text/css'[, $title = ''[, $media = ''[, $index_page = FALSE]]]]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$href</strong> (<em>string</em>) – What are we linking to</li> <li>\n<strong>$rel</strong> (<em>string</em>) – Relation type</li> <li>\n<strong>$type</strong> (<em>string</em>) – Type of the related document</li> <li>\n<strong>$title</strong> (<em>string</em>) – Link title</li> <li>\n<strong>$media</strong> (<em>string</em>) – Media type</li> <li>\n<strong>$index_page</strong> (<em>bool</em>) – Whether to treat $src as a routed URI string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">HTML link tag</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Lets you create HTML &lt;link /&gt; tags. This is useful for stylesheet links, as well as other links. The parameters are <em>href</em>, with optional <em>rel</em>, <em>type</em>, <em>title</em>, <em>media</em> and <em>index_page</em>.</p> <p><em>index_page</em> is a boolean value that specifies if the <em>href</em> should have the page specified by <code>$config['index_page']</code> added to the address it creates.</p> <p>Example:</p> <pre data-language=\"php\">echo link_tag('css/mystyles.css');\n// gives &lt;link href=\"http://site.com/css/mystyles.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n</pre> <p>Further examples:</p> <pre data-language=\"php\">echo link_tag('favicon.ico', 'shortcut icon', 'image/ico');\n// &lt;link href=\"http://site.com/favicon.ico\" rel=\"shortcut icon\" type=\"image/ico\" /&gt;\n\necho link_tag('feed', 'alternate', 'application/rss+xml', 'My RSS Feed');\n// &lt;link href=\"http://site.com/feed\" rel=\"alternate\" type=\"application/rss+xml\" title=\"My RSS Feed\" /&gt;\n</pre> <p>Additionally, an associative array can be passed to the <code>link()</code> function for complete control over all attributes and values:</p> <pre data-language=\"php\">$link = array(\n        'href'  =&gt; 'css/printer.css',\n        'rel'   =&gt; 'stylesheet',\n        'type'  =&gt; 'text/css',\n        'media' =&gt; 'print'\n);\n\necho link_tag($link);\n// &lt;link href=\"http://site.com/css/printer.css\" rel=\"stylesheet\" type=\"text/css\" media=\"print\" /&gt;\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"ul\">\n<code>ul($list[, $attributes = ''])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$list</strong> (<em>array</em>) – List entries</li> <li>\n<strong>$attributes</strong> (<em>array</em>) – HTML attributes</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">HTML-formatted unordered list</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Permits you to generate unordered HTML lists from simple or multi-dimensional arrays. Example:</p> <pre data-language=\"php\">$list = array(\n        'red',\n        'blue',\n        'green',\n        'yellow'\n);\n\n$attributes = array(\n        'class' =&gt; 'boldlist',\n        'id'    =&gt; 'mylist'\n);\n\necho ul($list, $attributes);\n</pre> <p>The above code will produce this:</p> <pre data-language=\"html\">&lt;ul class=\"boldlist\" id=\"mylist\"&gt;\n        &lt;li&gt;red&lt;/li&gt;\n        &lt;li&gt;blue&lt;/li&gt;\n        &lt;li&gt;green&lt;/li&gt;\n        &lt;li&gt;yellow&lt;/li&gt;\n&lt;/ul&gt;\n</pre> <p>Here is a more complex example, using a multi-dimensional array:</p> <pre data-language=\"php\">$attributes = array(\n        'class' =&gt; 'boldlist',\n        'id'    =&gt; 'mylist'\n);\n\n$list = array(\n        'colors'  =&gt; array(\n                'red',\n                'blue',\n                'green'\n        ),\n        'shapes'  =&gt; array(\n                'round',\n                'square',\n                'circles' =&gt; array(\n                        'ellipse',\n                        'oval',\n                        'sphere'\n                )\n        ),\n        'moods'  =&gt; array(\n                'happy',\n                'upset' =&gt; array(\n                        'defeated' =&gt; array(\n                                'dejected',\n                                'disheartened',\n                                'depressed'\n                        ),\n                        'annoyed',\n                        'cross',\n                        'angry'\n                )\n        )\n);\n\necho ul($list, $attributes);\n</pre> <p>The above code will produce this:</p> <pre data-language=\"html\">&lt;ul class=\"boldlist\" id=\"mylist\"&gt;\n        &lt;li&gt;colors\n                &lt;ul&gt;\n                        &lt;li&gt;red&lt;/li&gt;\n                        &lt;li&gt;blue&lt;/li&gt;\n                        &lt;li&gt;green&lt;/li&gt;\n                &lt;/ul&gt;\n        &lt;/li&gt;\n        &lt;li&gt;shapes\n                &lt;ul&gt;\n                        &lt;li&gt;round&lt;/li&gt;\n                        &lt;li&gt;suare&lt;/li&gt;\n                        &lt;li&gt;circles\n                                &lt;ul&gt;\n                                        &lt;li&gt;elipse&lt;/li&gt;\n                                        &lt;li&gt;oval&lt;/li&gt;\n                                        &lt;li&gt;sphere&lt;/li&gt;\n                                &lt;/ul&gt;\n                        &lt;/li&gt;\n                &lt;/ul&gt;\n        &lt;/li&gt;\n        &lt;li&gt;moods\n                &lt;ul&gt;\n                        &lt;li&gt;happy&lt;/li&gt;\n                        &lt;li&gt;upset\n                                &lt;ul&gt;\n                                        &lt;li&gt;defeated\n                                                &lt;ul&gt;\n                                                        &lt;li&gt;dejected&lt;/li&gt;\n                                                        &lt;li&gt;disheartened&lt;/li&gt;\n                                                        &lt;li&gt;depressed&lt;/li&gt;\n                                                &lt;/ul&gt;\n                                        &lt;/li&gt;\n                                        &lt;li&gt;annoyed&lt;/li&gt;\n                                        &lt;li&gt;cross&lt;/li&gt;\n                                        &lt;li&gt;angry&lt;/li&gt;\n                                &lt;/ul&gt;\n                        &lt;/li&gt;\n                &lt;/ul&gt;\n        &lt;/li&gt;\n&lt;/ul&gt;\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"ol\">\n<code>ol($list, $attributes = '')</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$list</strong> (<em>array</em>) – List entries</li> <li>\n<strong>$attributes</strong> (<em>array</em>) – HTML attributes</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">HTML-formatted ordered list</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Identical to <a class=\"reference internal\" href=\"#ul\" title=\"ul\"><code>ul()</code></a>, only it produces the &lt;ol&gt; tag for ordered lists instead of &lt;ul&gt;.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"meta\">\n<code>meta([$name = ''[, $content = ''[, $type = 'name'[, $newline = \"n\"]]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$name</strong> (<em>string</em>) – Meta name</li> <li>\n<strong>$content</strong> (<em>string</em>) – Meta content</li> <li>\n<strong>$type</strong> (<em>string</em>) – Meta type</li> <li>\n<strong>$newline</strong> (<em>string</em>) – Newline character</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">HTML meta tag</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Helps you generate meta tags. You can pass strings to the function, or simple arrays, or multidimensional ones.</p> <p>Examples:</p> <pre data-language=\"php\">echo meta('description', 'My Great site');\n// Generates:  &lt;meta name=\"description\" content=\"My Great Site\" /&gt;\n\necho meta('Content-type', 'text/html; charset=utf-8', 'equiv');\n// Note the third parameter.  Can be \"equiv\" or \"name\"\n// Generates:  &lt;meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /&gt;\n\necho meta(array('name' =&gt; 'robots', 'content' =&gt; 'no-cache'));\n// Generates:  &lt;meta name=\"robots\" content=\"no-cache\" /&gt;\n\n$meta = array(\n        array(\n                'name' =&gt; 'robots',\n                'content' =&gt; 'no-cache'\n        ),\n        array(\n                'name' =&gt; 'description',\n                'content' =&gt; 'My Great Site'\n        ),\n        array(\n                'name' =&gt; 'keywords',\n                'content' =&gt; 'love, passion, intrigue, deception'\n        ),\n        array(\n                'name' =&gt; 'robots',\n                'content' =&gt; 'no-cache'\n        ),\n        array(\n                'name' =&gt; 'Content-type',\n                'content' =&gt; 'text/html; charset=utf-8', 'type' =&gt; 'equiv'\n        )\n);\n\necho meta($meta);\n// Generates:\n// &lt;meta name=\"robots\" content=\"no-cache\" /&gt;\n// &lt;meta name=\"description\" content=\"My Great Site\" /&gt;\n// &lt;meta name=\"keywords\" content=\"love, passion, intrigue, deception\" /&gt;\n// &lt;meta name=\"robots\" content=\"no-cache\" /&gt;\n// &lt;meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /&gt;\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"doctype\">\n<code>doctype([$type = 'xhtml1-strict'])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$type</strong> (<em>string</em>) – Doctype name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">HTML DocType tag</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Helps you generate document type declarations, or DTD’s. XHTML 1.0 Strict is used by default, but many doctypes are available.</p> <p>Example:</p> <pre data-language=\"php\">echo doctype(); // &lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"&gt;\n\necho doctype('html4-trans'); // &lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"&gt;\n</pre> <p>The following is a list of doctype choices. These are configurable, and pulled from application/config/doctypes.php</p> <table class=\"docutils\">  <thead valign=\"bottom\"> <tr class=\"row-odd\">\n<th class=\"head\">Document type</th> <th class=\"head\">Option</th> <th class=\"head\">Result</th> </tr> </thead>  <tr class=\"row-even\">\n<td>XHTML 1.1</td> <td>xhtml11</td> <td>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.1//EN” “<a class=\"reference external\" href=\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd</a>“&gt;</td> </tr> <tr class=\"row-odd\">\n<td>XHTML 1.0 Strict</td> <td>xhtml1-strict</td> <td>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN” “<a class=\"reference external\" href=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd</a>“&gt;</td> </tr> <tr class=\"row-even\">\n<td>XHTML 1.0 Transitional</td> <td>xhtml1-trans</td> <td>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Transitional//EN” “<a class=\"reference external\" href=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd</a>“&gt;</td> </tr> <tr class=\"row-odd\">\n<td>XHTML 1.0 Frameset</td> <td>xhtml1-frame</td> <td>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Frameset//EN” “<a class=\"reference external\" href=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd</a>“&gt;</td> </tr> <tr class=\"row-even\">\n<td>XHTML Basic 1.1</td> <td>xhtml-basic11</td> <td>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML Basic 1.1//EN” “<a class=\"reference external\" href=\"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\">http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd</a>“&gt;</td> </tr> <tr class=\"row-odd\">\n<td>HTML 5</td> <td>html5</td> <td>&lt;!DOCTYPE html&gt;</td> </tr> <tr class=\"row-even\">\n<td>HTML 4 Strict</td> <td>html4-strict</td> <td>&lt;!DOCTYPE HTML PUBLIC “-//W3C//DTD HTML 4.01//EN” “<a class=\"reference external\" href=\"http://www.w3.org/TR/html4/strict.dtd\">http://www.w3.org/TR/html4/strict.dtd</a>“&gt;</td> </tr> <tr class=\"row-odd\">\n<td>HTML 4 Transitional</td> <td>html4-trans</td> <td>&lt;!DOCTYPE HTML PUBLIC “-//W3C//DTD HTML 4.01 Transitional//EN” “<a class=\"reference external\" href=\"http://www.w3.org/TR/html4/loose.dtd\">http://www.w3.org/TR/html4/loose.dtd</a>“&gt;</td> </tr> <tr class=\"row-even\">\n<td>HTML 4 Frameset</td> <td>html4-frame</td> <td>&lt;!DOCTYPE HTML PUBLIC “-//W3C//DTD HTML 4.01 Frameset//EN” “<a class=\"reference external\" href=\"http://www.w3.org/TR/html4/frameset.dtd\">http://www.w3.org/TR/html4/frameset.dtd</a>“&gt;</td> </tr> <tr class=\"row-odd\">\n<td>MathML 1.01</td> <td>mathml1</td> <td>&lt;!DOCTYPE math SYSTEM “<a class=\"reference external\" href=\"http://www.w3.org/Math/DTD/mathml1/mathml.dtd\">http://www.w3.org/Math/DTD/mathml1/mathml.dtd</a>“&gt;</td> </tr> <tr class=\"row-even\">\n<td>MathML 2.0</td> <td>mathml2</td> <td>&lt;!DOCTYPE math PUBLIC “-//W3C//DTD MathML 2.0//EN” “<a class=\"reference external\" href=\"http://www.w3.org/Math/DTD/mathml2/mathml2.dtd\">http://www.w3.org/Math/DTD/mathml2/mathml2.dtd</a>“&gt;</td> </tr> <tr class=\"row-odd\">\n<td>SVG 1.0</td> <td>svg10</td> <td>&lt;!DOCTYPE svg PUBLIC “-//W3C//DTD SVG 1.0//EN” “<a class=\"reference external\" href=\"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\">http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd</a>“&gt;</td> </tr> <tr class=\"row-even\">\n<td>SVG 1.1 Full</td> <td>svg11</td> <td>&lt;!DOCTYPE svg PUBLIC “-//W3C//DTD SVG 1.1//EN” “<a class=\"reference external\" href=\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd</a>“&gt;</td> </tr> <tr class=\"row-odd\">\n<td>SVG 1.1 Basic</td> <td>svg11-basic</td> <td>&lt;!DOCTYPE svg PUBLIC “-//W3C//DTD SVG 1.1 Basic//EN” “<a class=\"reference external\" href=\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11-basic.dtd\">http://www.w3.org/Graphics/SVG/1.1/DTD/svg11-basic.dtd</a>“&gt;</td> </tr> <tr class=\"row-even\">\n<td>SVG 1.1 Tiny</td> <td>svg11-tiny</td> <td>&lt;!DOCTYPE svg PUBLIC “-//W3C//DTD SVG 1.1 Tiny//EN” “<a class=\"reference external\" href=\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11-tiny.dtd\">http://www.w3.org/Graphics/SVG/1.1/DTD/svg11-tiny.dtd</a>“&gt;</td> </tr> <tr class=\"row-odd\">\n<td>XHTML+MathML+SVG (XHTML host)</td> <td>xhtml-math-svg-xh</td> <td>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.1 plus MathML 2.0 plus SVG 1.1//EN” “<a class=\"reference external\" href=\"http://www.w3.org/2002/04/xhtml-math-svg/xhtml-math-svg.dtd\">http://www.w3.org/2002/04/xhtml-math-svg/xhtml-math-svg.dtd</a>“&gt;</td> </tr> <tr class=\"row-even\">\n<td>XHTML+MathML+SVG (SVG host)</td> <td>xhtml-math-svg-sh</td> <td>&lt;!DOCTYPE svg:svg PUBLIC “-//W3C//DTD XHTML 1.1 plus MathML 2.0 plus SVG 1.1//EN” “http://www.w3.org/2002/04/xhtml-math-svg/xhtml-math-svg.dtd”&gt;</td> </tr> <tr class=\"row-odd\">\n<td>XHTML+RDFa 1.0</td> <td>xhtml-rdfa-1</td> <td>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML+RDFa 1.0//EN” “<a class=\"reference external\" href=\"http://www.w3.org/MarkUp/DTD/xhtml-rdfa-1.dtd\">http://www.w3.org/MarkUp/DTD/xhtml-rdfa-1.dtd</a>“&gt;</td> </tr> <tr class=\"row-even\">\n<td>XHTML+RDFa 1.1</td> <td>xhtml-rdfa-2</td> <td>&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML+RDFa 1.1//EN” “<a class=\"reference external\" href=\"http://www.w3.org/MarkUp/DTD/xhtml-rdfa-2.dtd\">http://www.w3.org/MarkUp/DTD/xhtml-rdfa-2.dtd</a>“&gt;</td> </tr>  </table> </dd>\n</dl> <dl class=\"function\"> <dt id=\"br\">\n<code>br([$count = 1])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$count</strong> (<em>int</em>) – Number of times to repeat the tag</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">HTML line break tag</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Generates line break tags (&lt;br /&gt;) based on the number you submit. Example:</p> <pre data-language=\"php\">echo br(3);\n</pre> <p>The above would produce:</p> <pre data-language=\"html\">&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This function is DEPRECATED. Use the native <code>str_repeat()</code> in combination with <code>&lt;br /&gt;</code> instead.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"nbs\">\n<code>nbs([$num = 1])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$num</strong> (<em>int</em>) – Number of space entities to produce</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">A sequence of non-breaking space HTML entities</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Generates non-breaking spaces (&amp;nbsp;) based on the number you submit. Example:</p> <pre data-language=\"php\">echo nbs(3);\n</pre> <p>The above would produce:</p> <pre data-language=\"html\">&amp;nbsp;&amp;nbsp;&amp;nbsp;\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This function is DEPRECATED. Use the native <code>str_repeat()</code> in combination with <code>&amp;nbsp;</code> instead.</p> </div> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/helpers/html_helper.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/helpers/html_helper.html</a>\n  </p>\n</div>\n","helpers/inflector_helper":"<h1 id=\"inflector-helper\">Inflector Helper</h1> <p>The Inflector Helper file contains functions that permits you to change <strong>English</strong> words to plural, singular, camel case, etc.</p>  <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#loading-this-helper\" id=\"id1\">Loading this Helper</a></li> <li><a class=\"reference internal\" href=\"#available-functions\" id=\"id2\">Available Functions</a></li> </ul>   <h2 id=\"loading-this-helper\">Loading this Helper</h2> <p>This helper is loaded using the following code:</p> <pre data-language=\"php\">$this-&gt;load-&gt;helper('inflector');\n</pre>   <h2 id=\"available-functions\">Available Functions</h2> <p>The following functions are available:</p> <dl class=\"function\"> <dt id=\"singular\">\n<code>singular($str)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">A singular word</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Changes a plural word to singular. Example:</p> <pre data-language=\"php\">echo singular('dogs'); // Prints 'dog'\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"plural\">\n<code>plural($str)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">A plural word</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Changes a singular word to plural. Example:</p> <pre data-language=\"php\">echo plural('dog'); // Prints 'dogs'\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"camelize\">\n<code>camelize($str)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Camelized string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Changes a string of words separated by spaces or underscores to camel case. Example:</p> <pre data-language=\"php\">echo camelize('my_dog_spot'); // Prints 'myDogSpot'\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"underscore\">\n<code>underscore($str)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">String containing underscores instead of spaces</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Takes multiple words separated by spaces and underscores them. Example:</p> <pre data-language=\"php\">echo underscore('my dog spot'); // Prints 'my_dog_spot'\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"humanize\">\n<code>humanize($str[, $separator = '_'])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> <li>\n<strong>$separator</strong> (<em>string</em>) – Input separator</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Humanized string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Takes multiple words separated by underscores and adds spaces between them. Each word is capitalized.</p> <p>Example:</p> <pre data-language=\"php\">echo humanize('my_dog_spot'); // Prints 'My Dog Spot'\n</pre> <p>To use dashes instead of underscores:</p> <pre data-language=\"php\">echo humanize('my-dog-spot', '-'); // Prints 'My Dog Spot'\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"is_countable\">\n<code>is_countable($word)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$word</strong> (<em>string</em>) – Input string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE if the word is countable or FALSE if not</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Checks if the given word has a plural version. Example:</p> <pre data-language=\"php\">is_countable('equipment'); // Returns FALSE\n</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/helpers/inflector_helper.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/helpers/inflector_helper.html</a>\n  </p>\n</div>\n","database/query_builder":"<h1 id=\"query-builder-class\">Query Builder Class</h1> <p>CodeIgniter gives you access to a Query Builder class. This pattern allows information to be retrieved, inserted, and updated in your database with minimal scripting. In some cases only one or two lines of code are necessary to perform a database action. CodeIgniter does not require that each database table be its own class file. It instead provides a more simplified interface.</p> <p>Beyond simplicity, a major benefit to using the Query Builder features is that it allows you to create database independent applications, since the query syntax is generated by each database adapter. It also allows for safer queries, since the values are escaped automatically by the system.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If you intend to write your own queries you can disable this class in your database config file, allowing the core database library and adapter to utilize fewer resources.</p> </div>  <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#selecting-data\" id=\"id1\">Selecting Data</a></li> <li><a class=\"reference internal\" href=\"#looking-for-specific-data\" id=\"id2\">Looking for Specific Data</a></li> <li><a class=\"reference internal\" href=\"#looking-for-similar-data\" id=\"id3\">Looking for Similar Data</a></li> <li><a class=\"reference internal\" href=\"#ordering-results\" id=\"id4\">Ordering results</a></li> <li><a class=\"reference internal\" href=\"#limiting-or-counting-results\" id=\"id5\">Limiting or Counting Results</a></li> <li><a class=\"reference internal\" href=\"#query-grouping\" id=\"id6\">Query grouping</a></li> <li><a class=\"reference internal\" href=\"#inserting-data\" id=\"id7\">Inserting Data</a></li> <li><a class=\"reference internal\" href=\"#updating-data\" id=\"id8\">Updating Data</a></li> <li><a class=\"reference internal\" href=\"#deleting-data\" id=\"id9\">Deleting Data</a></li> <li><a class=\"reference internal\" href=\"#method-chaining\" id=\"id10\">Method Chaining</a></li> <li><a class=\"reference internal\" href=\"#query-builder-caching\" id=\"id11\">Query Builder Caching</a></li> <li><a class=\"reference internal\" href=\"#resetting-query-builder\" id=\"id12\">Resetting Query Builder</a></li> <li><a class=\"reference internal\" href=\"#class-reference\" id=\"id13\">Class Reference</a></li> </ul>   <h2 id=\"selecting-data\">Selecting Data</h2> <p>The following functions allow you to build SQL <strong>SELECT</strong> statements.</p> <p><strong>$this-&gt;db-&gt;get()</strong></p> <p>Runs the selection query and returns the result. Can be used by itself to retrieve all records from a table:</p> <pre data-language=\"php\">$query = $this-&gt;db-&gt;get('mytable');  // Produces: SELECT * FROM mytable\n</pre> <p>The second and third parameters enable you to set a limit and offset clause:</p> <pre data-language=\"php\">$query = $this-&gt;db-&gt;get('mytable', 10, 20);\n\n// Executes: SELECT * FROM mytable LIMIT 20, 10\n// (in MySQL. Other databases have slightly different syntax)\n</pre> <p>You’ll notice that the above function is assigned to a variable named $query, which can be used to show the results:</p> <pre data-language=\"php\">$query = $this-&gt;db-&gt;get('mytable');\n\nforeach ($query-&gt;result() as $row)\n{\n        echo $row-&gt;title;\n}\n</pre> <p>Please visit the <a class=\"reference internal\" href=\"results\">result functions</a> page for a full discussion regarding result generation.</p> <p><strong>$this-&gt;db-&gt;get_compiled_select()</strong></p> <p>Compiles the selection query just like <strong>$this-&gt;db-&gt;get()</strong> but does not <em>run</em> the query. This method simply returns the SQL query as a string.</p> <p>Example:</p> <pre data-language=\"php\">$sql = $this-&gt;db-&gt;get_compiled_select('mytable');\necho $sql;\n\n// Prints string: SELECT * FROM mytable\n</pre> <p>The second parameter enables you to set whether or not the query builder query will be reset (by default it will be reset, just like when using <cite>$this-&gt;db-&gt;get()</cite>):</p> <pre data-language=\"php\">echo $this-&gt;db-&gt;limit(10,20)-&gt;get_compiled_select('mytable', FALSE);\n\n// Prints string: SELECT * FROM mytable LIMIT 20, 10\n// (in MySQL. Other databases have slightly different syntax)\n\necho $this-&gt;db-&gt;select('title, content, date')-&gt;get_compiled_select();\n\n// Prints string: SELECT title, content, date FROM mytable LIMIT 20, 10\n</pre> <p>The key thing to notice in the above example is that the second query did not utilize <strong>$this-&gt;db-&gt;from()</strong> and did not pass a table name into the first parameter. The reason for this outcome is because the query has not been executed using <strong>$this-&gt;db-&gt;get()</strong> which resets values or reset directly using <strong>$this-&gt;db-&gt;reset_query()</strong>.</p> <p><strong>$this-&gt;db-&gt;get_where()</strong></p> <p>Identical to the above function except that it permits you to add a “where” clause in the second parameter, instead of using the db-&gt;where() function:</p> <pre data-language=\"php\">$query = $this-&gt;db-&gt;get_where('mytable', array('id' =&gt; $id), $limit, $offset);\n</pre> <p>Please read the about the where function below for more information.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">get_where() was formerly known as getwhere(), which has been removed</p> </div> <p><strong>$this-&gt;db-&gt;select()</strong></p> <p>Permits you to write the SELECT portion of your query:</p> <pre data-language=\"php\">$this-&gt;db-&gt;select('title, content, date');\n$query = $this-&gt;db-&gt;get('mytable');\n\n// Executes: SELECT title, content, date FROM mytable\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If you are selecting all (*) from a table you do not need to use this function. When omitted, CodeIgniter assumes that you wish to select all fields and automatically adds ‘SELECT *’.</p> </div> <p><code>$this-&gt;db-&gt;select()</code> accepts an optional second parameter. If you set it to FALSE, CodeIgniter will not try to protect your field or table names. This is useful if you need a compound select statement where automatic escaping of fields may break them.</p> <pre data-language=\"php\">$this-&gt;db-&gt;select('(SELECT SUM(payments.amount) FROM payments WHERE payments.invoice_id=4') AS amount_paid', FALSE);\n$query = $this-&gt;db-&gt;get('mytable');\n</pre> <p><strong>$this-&gt;db-&gt;select_max()</strong></p> <p>Writes a <code>SELECT MAX(field)</code> portion for your query. You can optionally include a second parameter to rename the resulting field.</p> <pre data-language=\"php\">$this-&gt;db-&gt;select_max('age');\n$query = $this-&gt;db-&gt;get('members');  // Produces: SELECT MAX(age) as age FROM members\n\n$this-&gt;db-&gt;select_max('age', 'member_age');\n$query = $this-&gt;db-&gt;get('members'); // Produces: SELECT MAX(age) as member_age FROM members\n</pre> <p><strong>$this-&gt;db-&gt;select_min()</strong></p> <p>Writes a “SELECT MIN(field)” portion for your query. As with select_max(), You can optionally include a second parameter to rename the resulting field.</p> <pre data-language=\"php\">$this-&gt;db-&gt;select_min('age');\n$query = $this-&gt;db-&gt;get('members'); // Produces: SELECT MIN(age) as age FROM members\n</pre> <p><strong>$this-&gt;db-&gt;select_avg()</strong></p> <p>Writes a “SELECT AVG(field)” portion for your query. As with select_max(), You can optionally include a second parameter to rename the resulting field.</p> <pre data-language=\"php\">$this-&gt;db-&gt;select_avg('age');\n$query = $this-&gt;db-&gt;get('members'); // Produces: SELECT AVG(age) as age FROM members\n</pre> <p><strong>$this-&gt;db-&gt;select_sum()</strong></p> <p>Writes a “SELECT SUM(field)” portion for your query. As with select_max(), You can optionally include a second parameter to rename the resulting field.</p> <pre data-language=\"php\">$this-&gt;db-&gt;select_sum('age');\n$query = $this-&gt;db-&gt;get('members'); // Produces: SELECT SUM(age) as age FROM members\n</pre> <p><strong>$this-&gt;db-&gt;from()</strong></p> <p>Permits you to write the FROM portion of your query:</p> <pre data-language=\"php\">$this-&gt;db-&gt;select('title, content, date');\n$this-&gt;db-&gt;from('mytable');\n$query = $this-&gt;db-&gt;get();  // Produces: SELECT title, content, date FROM mytable\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">As shown earlier, the FROM portion of your query can be specified in the $this-&gt;db-&gt;get() function, so use whichever method you prefer.</p> </div> <p><strong>$this-&gt;db-&gt;join()</strong></p> <p>Permits you to write the JOIN portion of your query:</p> <pre data-language=\"php\">$this-&gt;db-&gt;select('*');\n$this-&gt;db-&gt;from('blogs');\n$this-&gt;db-&gt;join('comments', 'comments.id = blogs.id');\n$query = $this-&gt;db-&gt;get();\n\n// Produces:\n// SELECT * FROM blogs JOIN comments ON comments.id = blogs.id\n</pre> <p>Multiple function calls can be made if you need several joins in one query.</p> <p>If you need a specific type of JOIN you can specify it via the third parameter of the function. Options are: left, right, outer, inner, left outer, and right outer.</p> <pre data-language=\"php\">$this-&gt;db-&gt;join('comments', 'comments.id = blogs.id', 'left');\n// Produces: LEFT JOIN comments ON comments.id = blogs.id\n</pre>   <h2 id=\"looking-for-specific-data\">Looking for Specific Data</h2> <p><strong>$this-&gt;db-&gt;where()</strong></p> <p>This function enables you to set <strong>WHERE</strong> clauses using one of four methods:</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">All values passed to this function are escaped automatically, producing safer queries.</p> </div> <ol class=\"arabic\"> <li>\n<p class=\"first\"><strong>Simple key/value method:</strong></p>  <pre data-language=\"php\">$this-&gt;db-&gt;where('name', $name); // Produces: WHERE name = 'Joe'\n</pre> <p>Notice that the equal sign is added for you.</p> <p>If you use multiple function calls they will be chained together with AND between them:</p> <pre data-language=\"php\">$this-&gt;db-&gt;where('name', $name);\n$this-&gt;db-&gt;where('title', $title);\n$this-&gt;db-&gt;where('status', $status);\n// WHERE name = 'Joe' AND title = 'boss' AND status = 'active'\n</pre>  </li> <li>\n<p class=\"first\"><strong>Custom key/value method:</strong></p>  <p>You can include an operator in the first parameter in order to control the comparison:</p> <pre data-language=\"php\">$this-&gt;db-&gt;where('name !=', $name);\n$this-&gt;db-&gt;where('id &lt;', $id); // Produces: WHERE name != 'Joe' AND id &lt; 45\n</pre>  </li> <li>\n<p class=\"first\"><strong>Associative array method:</strong></p>  <pre data-language=\"php\">$array = array('name' =&gt; $name, 'title' =&gt; $title, 'status' =&gt; $status);\n$this-&gt;db-&gt;where($array);\n// Produces: WHERE name = 'Joe' AND title = 'boss' AND status = 'active'\n</pre> <p>You can include your own operators using this method as well:</p> <pre data-language=\"php\">$array = array('name !=' =&gt; $name, 'id &lt;' =&gt; $id, 'date &gt;' =&gt; $date);\n$this-&gt;db-&gt;where($array);\n</pre>  </li> <li>\n<dl class=\"first docutils\"> <dt><strong>Custom string:</strong></dt> <dd>\n<p class=\"first\">You can write your own clauses manually:</p> <pre data-language=\"php\">$where = \"name='Joe' AND status='boss' OR status='active'\";\n$this-&gt;db-&gt;where($where);\n</pre> </dd> </dl> </li> </ol> <p><code>$this-&gt;db-&gt;where()</code> accepts an optional third parameter. If you set it to FALSE, CodeIgniter will not try to protect your field or table names.</p> <pre data-language=\"php\">$this-&gt;db-&gt;where('MATCH (field) AGAINST (\"value\")', NULL, FALSE);\n</pre> <p><strong>$this-&gt;db-&gt;or_where()</strong></p> <p>This function is identical to the one above, except that multiple instances are joined by OR:</p> <pre data-language=\"php\">$this-&gt;db-&gt;where('name !=', $name);\n$this-&gt;db-&gt;or_where('id &gt;', $id);  // Produces: WHERE name != 'Joe' OR id &gt; 50\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">or_where() was formerly known as orwhere(), which has been removed.</p> </div> <p><strong>$this-&gt;db-&gt;where_in()</strong></p> <p>Generates a WHERE field IN (‘item’, ‘item’) SQL query joined with AND if appropriate</p> <pre data-language=\"php\">$names = array('Frank', 'Todd', 'James');\n$this-&gt;db-&gt;where_in('username', $names);\n// Produces: WHERE username IN ('Frank', 'Todd', 'James')\n</pre> <p><strong>$this-&gt;db-&gt;or_where_in()</strong></p> <p>Generates a WHERE field IN (‘item’, ‘item’) SQL query joined with OR if appropriate</p> <pre data-language=\"php\">$names = array('Frank', 'Todd', 'James');\n$this-&gt;db-&gt;or_where_in('username', $names);\n// Produces: OR username IN ('Frank', 'Todd', 'James')\n</pre> <p><strong>$this-&gt;db-&gt;where_not_in()</strong></p> <p>Generates a WHERE field NOT IN (‘item’, ‘item’) SQL query joined with AND if appropriate</p> <pre data-language=\"php\">$names = array('Frank', 'Todd', 'James');\n$this-&gt;db-&gt;where_not_in('username', $names);\n// Produces: WHERE username NOT IN ('Frank', 'Todd', 'James')\n</pre> <p><strong>$this-&gt;db-&gt;or_where_not_in()</strong></p> <p>Generates a WHERE field NOT IN (‘item’, ‘item’) SQL query joined with OR if appropriate</p> <pre data-language=\"php\">$names = array('Frank', 'Todd', 'James');\n$this-&gt;db-&gt;or_where_not_in('username', $names);\n// Produces: OR username NOT IN ('Frank', 'Todd', 'James')\n</pre>   <h2 id=\"looking-for-similar-data\">Looking for Similar Data</h2> <p><strong>$this-&gt;db-&gt;like()</strong></p> <p>This method enables you to generate <strong>LIKE</strong> clauses, useful for doing searches.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">All values passed to this method are escaped automatically.</p> </div> <ol class=\"arabic\"> <li>\n<p class=\"first\"><strong>Simple key/value method:</strong></p>  <pre data-language=\"php\">$this-&gt;db-&gt;like('title', 'match');\n// Produces: WHERE `title` LIKE '%match%' ESCAPE '!'\n</pre> <p>If you use multiple method calls they will be chained together with AND between them:</p> <pre data-language=\"php\">$this-&gt;db-&gt;like('title', 'match');\n$this-&gt;db-&gt;like('body', 'match');\n// WHERE `title` LIKE '%match%' ESCAPE '!' AND  `body` LIKE '%match% ESCAPE '!'\n</pre> <p>If you want to control where the wildcard (%) is placed, you can use an optional third argument. Your options are ‘before’, ‘after’ and ‘both’ (which is the default).</p> <pre data-language=\"php\">$this-&gt;db-&gt;like('title', 'match', 'before');    // Produces: WHERE `title` LIKE '%match' ESCAPE '!'\n$this-&gt;db-&gt;like('title', 'match', 'after');     // Produces: WHERE `title` LIKE 'match%' ESCAPE '!'\n$this-&gt;db-&gt;like('title', 'match', 'both');      // Produces: WHERE `title` LIKE '%match%' ESCAPE '!'\n</pre>  </li> <li>\n<p class=\"first\"><strong>Associative array method:</strong></p>  <pre data-language=\"php\">$array = array('title' =&gt; $match, 'page1' =&gt; $match, 'page2' =&gt; $match);\n$this-&gt;db-&gt;like($array);\n// WHERE `title` LIKE '%match%' ESCAPE '!' AND  `page1` LIKE '%match%' ESCAPE '!' AND  `page2` LIKE '%match%' ESCAPE '!'\n</pre>  </li> </ol> <p><strong>$this-&gt;db-&gt;or_like()</strong></p> <p>This method is identical to the one above, except that multiple instances are joined by OR:</p> <pre data-language=\"php\">$this-&gt;db-&gt;like('title', 'match'); $this-&gt;db-&gt;or_like('body', $match);\n// WHERE `title` LIKE '%match%' ESCAPE '!' OR  `body` LIKE '%match%' ESCAPE '!'\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\"><code>or_like()</code> was formerly known as <code>orlike()</code>, which has been removed.</p> </div> <p><strong>$this-&gt;db-&gt;not_like()</strong></p> <p>This method is identical to <code>like()</code>, except that it generates NOT LIKE statements:</p> <pre data-language=\"php\">$this-&gt;db-&gt;not_like('title', 'match');  // WHERE `title` NOT LIKE '%match% ESCAPE '!'\n</pre> <p><strong>$this-&gt;db-&gt;or_not_like()</strong></p> <p>This method is identical to <code>not_like()</code>, except that multiple instances are joined by OR:</p> <pre data-language=\"php\">$this-&gt;db-&gt;like('title', 'match');\n$this-&gt;db-&gt;or_not_like('body', 'match');\n// WHERE `title` LIKE '%match% OR  `body` NOT LIKE '%match%' ESCAPE '!'\n</pre> <p><strong>$this-&gt;db-&gt;group_by()</strong></p> <p>Permits you to write the GROUP BY portion of your query:</p> <pre data-language=\"php\">$this-&gt;db-&gt;group_by(\"title\"); // Produces: GROUP BY title\n</pre> <p>You can also pass an array of multiple values as well:</p> <pre data-language=\"php\">$this-&gt;db-&gt;group_by(array(\"title\", \"date\"));  // Produces: GROUP BY title, date\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">group_by() was formerly known as groupby(), which has been removed.</p> </div> <p><strong>$this-&gt;db-&gt;distinct()</strong></p> <p>Adds the “DISTINCT” keyword to a query</p> <pre data-language=\"php\">$this-&gt;db-&gt;distinct();\n$this-&gt;db-&gt;get('table'); // Produces: SELECT DISTINCT * FROM table\n</pre> <p><strong>$this-&gt;db-&gt;having()</strong></p> <p>Permits you to write the HAVING portion of your query. There are 2 possible syntaxes, 1 argument or 2:</p> <pre data-language=\"php\">$this-&gt;db-&gt;having('user_id = 45');  // Produces: HAVING user_id = 45\n$this-&gt;db-&gt;having('user_id',  45);  // Produces: HAVING user_id = 45\n</pre> <p>You can also pass an array of multiple values as well:</p> <pre data-language=\"php\">$this-&gt;db-&gt;having(array('title =' =&gt; 'My Title', 'id &lt;' =&gt; $id));\n// Produces: HAVING title = 'My Title', id &lt; 45\n</pre> <p>If you are using a database that CodeIgniter escapes queries for, you can prevent escaping content by passing an optional third argument, and setting it to FALSE.</p> <pre data-language=\"php\">$this-&gt;db-&gt;having('user_id',  45);  // Produces: HAVING `user_id` = 45 in some databases such as MySQL\n$this-&gt;db-&gt;having('user_id',  45, FALSE);  // Produces: HAVING user_id = 45\n</pre> <p><strong>$this-&gt;db-&gt;or_having()</strong></p> <p>Identical to having(), only separates multiple clauses with “OR”.</p>   <h2 id=\"ordering-results\">Ordering results</h2> <p><strong>$this-&gt;db-&gt;order_by()</strong></p> <p>Lets you set an ORDER BY clause.</p> <p>The first parameter contains the name of the column you would like to order by.</p> <p>The second parameter lets you set the direction of the result. Options are <strong>ASC</strong>, <strong>DESC</strong> AND <strong>RANDOM</strong>.</p> <pre data-language=\"php\">$this-&gt;db-&gt;order_by('title', 'DESC');\n// Produces: ORDER BY `title` DESC\n</pre> <p>You can also pass your own string in the first parameter:</p> <pre data-language=\"php\">$this-&gt;db-&gt;order_by('title DESC, name ASC');\n// Produces: ORDER BY `title` DESC, `name` ASC\n</pre> <p>Or multiple function calls can be made if you need multiple fields.</p> <pre data-language=\"php\">$this-&gt;db-&gt;order_by('title', 'DESC');\n$this-&gt;db-&gt;order_by('name', 'ASC');\n// Produces: ORDER BY `title` DESC, `name` ASC\n</pre> <p>If you choose the <strong>RANDOM</strong> direction option, then the first parameters will be ignored, unless you specify a numeric seed value.</p> <pre data-language=\"php\">$this-&gt;db-&gt;order_by('title', 'RANDOM');\n// Produces: ORDER BY RAND()\n\n$this-&gt;db-&gt;order_by(42, 'RANDOM');\n// Produces: ORDER BY RAND(42)\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">order_by() was formerly known as orderby(), which has been removed.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Random ordering is not currently supported in Oracle and will default to ASC instead.</p> </div>   <h2 id=\"limiting-or-counting-results\">Limiting or Counting Results</h2> <p><strong>$this-&gt;db-&gt;limit()</strong></p> <p>Lets you limit the number of rows you would like returned by the query:</p> <pre data-language=\"php\">$this-&gt;db-&gt;limit(10);  // Produces: LIMIT 10\n</pre> <p>The second parameter lets you set a result offset.</p> <pre data-language=\"php\">$this-&gt;db-&gt;limit(10, 20);  // Produces: LIMIT 20, 10 (in MySQL.  Other databases have slightly different syntax)\n</pre> <p><strong>$this-&gt;db-&gt;count_all_results()</strong></p> <p>Permits you to determine the number of rows in a particular Active Record query. Queries will accept Query Builder restrictors such as <code>where()</code>, <code>or_where()</code>, <code>like()</code>, <code>or_like()</code>, etc. Example:</p> <pre data-language=\"php\">echo $this-&gt;db-&gt;count_all_results('my_table');  // Produces an integer, like 25\n$this-&gt;db-&gt;like('title', 'match');\n$this-&gt;db-&gt;from('my_table');\necho $this-&gt;db-&gt;count_all_results(); // Produces an integer, like 17\n</pre> <p>However, this method also resets any field values that you may have passed to <code>select()</code>. If you need to keep them, you can pass <code>FALSE</code> as the second parameter:</p> <pre data-language=\"php\">echo $this-&gt;db-&gt;count_all_results('my_table', FALSE);\n</pre> <p><strong>$this-&gt;db-&gt;count_all()</strong></p> <p>Permits you to determine the number of rows in a particular table. Submit the table name in the first parameter. Example:</p> <pre data-language=\"php\">echo $this-&gt;db-&gt;count_all('my_table');  // Produces an integer, like 25\n</pre>   <h2 id=\"query-grouping\">Query grouping</h2> <p>Query grouping allows you to create groups of WHERE clauses by enclosing them in parentheses. This will allow you to create queries with complex WHERE clauses. Nested groups are supported. Example:</p> <pre data-language=\"php\">$this-&gt;db-&gt;select('*')-&gt;from('my_table')\n        -&gt;group_start()\n                -&gt;where('a', 'a')\n                -&gt;or_group_start()\n                        -&gt;where('b', 'b')\n                        -&gt;where('c', 'c')\n                -&gt;group_end()\n        -&gt;group_end()\n        -&gt;where('d', 'd')\n-&gt;get();\n\n// Generates:\n// SELECT * FROM (`my_table`) WHERE ( `a` = 'a' OR ( `b` = 'b' AND `c` = 'c' ) ) AND `d` = 'd'\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">groups need to be balanced, make sure every group_start() is matched by a group_end().</p> </div> <p><strong>$this-&gt;db-&gt;group_start()</strong></p> <p>Starts a new group by adding an opening parenthesis to the WHERE clause of the query.</p> <p><strong>$this-&gt;db-&gt;or_group_start()</strong></p> <p>Starts a new group by adding an opening parenthesis to the WHERE clause of the query, prefixing it with ‘OR’.</p> <p><strong>$this-&gt;db-&gt;not_group_start()</strong></p> <p>Starts a new group by adding an opening parenthesis to the WHERE clause of the query, prefixing it with ‘NOT’.</p> <p><strong>$this-&gt;db-&gt;or_not_group_start()</strong></p> <p>Starts a new group by adding an opening parenthesis to the WHERE clause of the query, prefixing it with ‘OR NOT’.</p> <p><strong>$this-&gt;db-&gt;group_end()</strong></p> <p>Ends the current group by adding an closing parenthesis to the WHERE clause of the query.</p>   <h2 id=\"inserting-data\">Inserting Data</h2> <p><strong>$this-&gt;db-&gt;insert()</strong></p> <p>Generates an insert string based on the data you supply, and runs the query. You can either pass an <strong>array</strong> or an <strong>object</strong> to the function. Here is an example using an array:</p> <pre data-language=\"php\">$data = array(\n        'title' =&gt; 'My title',\n        'name' =&gt; 'My Name',\n        'date' =&gt; 'My date'\n);\n\n$this-&gt;db-&gt;insert('mytable', $data);\n// Produces: INSERT INTO mytable (title, name, date) VALUES ('My title', 'My name', 'My date')\n</pre> <p>The first parameter will contain the table name, the second is an associative array of values.</p> <p>Here is an example using an object:</p> <pre data-language=\"php\">/*\nclass Myclass {\n        public $title = 'My Title';\n        public $content = 'My Content';\n        public $date = 'My Date';\n}\n*/\n\n$object = new Myclass;\n$this-&gt;db-&gt;insert('mytable', $object);\n// Produces: INSERT INTO mytable (title, content, date) VALUES ('My Title', 'My Content', 'My Date')\n</pre> <p>The first parameter will contain the table name, the second is an object.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">All values are escaped automatically producing safer queries.</p> </div> <p><strong>$this-&gt;db-&gt;get_compiled_insert()</strong></p> <p>Compiles the insertion query just like $this-&gt;db-&gt;insert() but does not <em>run</em> the query. This method simply returns the SQL query as a string.</p> <p>Example:</p> <pre data-language=\"php\">$data = array(\n        'title' =&gt; 'My title',\n        'name'  =&gt; 'My Name',\n        'date'  =&gt; 'My date'\n);\n\n$sql = $this-&gt;db-&gt;set($data)-&gt;get_compiled_insert('mytable');\necho $sql;\n\n// Produces string: INSERT INTO mytable (`title`, `name`, `date`) VALUES ('My title', 'My name', 'My date')\n</pre> <p>The second parameter enables you to set whether or not the query builder query will be reset (by default it will be–just like $this-&gt;db-&gt;insert()):</p> <pre data-language=\"php\">echo $this-&gt;db-&gt;set('title', 'My Title')-&gt;get_compiled_insert('mytable', FALSE);\n\n// Produces string: INSERT INTO mytable (`title`) VALUES ('My Title')\n\necho $this-&gt;db-&gt;set('content', 'My Content')-&gt;get_compiled_insert();\n\n// Produces string: INSERT INTO mytable (`title`, `content`) VALUES ('My Title', 'My Content')\n</pre> <p>The key thing to notice in the above example is that the second query did not utlize <cite>$this-&gt;db-&gt;from()</cite> nor did it pass a table name into the first parameter. The reason this worked is because the query has not been executed using <cite>$this-&gt;db-&gt;insert()</cite> which resets values or reset directly using <cite>$this-&gt;db-&gt;reset_query()</cite>.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This method doesn’t work for batched inserts.</p> </div> <p><strong>$this-&gt;db-&gt;insert_batch()</strong></p> <p>Generates an insert string based on the data you supply, and runs the query. You can either pass an <strong>array</strong> or an <strong>object</strong> to the function. Here is an example using an array:</p> <pre data-language=\"php\">$data = array(\n        array(\n                'title' =&gt; 'My title',\n                'name' =&gt; 'My Name',\n                'date' =&gt; 'My date'\n        ),\n        array(\n                'title' =&gt; 'Another title',\n                'name' =&gt; 'Another Name',\n                'date' =&gt; 'Another date'\n        )\n);\n\n$this-&gt;db-&gt;insert_batch('mytable', $data);\n// Produces: INSERT INTO mytable (title, name, date) VALUES ('My title', 'My name', 'My date'),  ('Another title', 'Another name', 'Another date')\n</pre> <p>The first parameter will contain the table name, the second is an associative array of values.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">All values are escaped automatically producing safer queries.</p> </div>   <h2 id=\"updating-data\">Updating Data</h2> <p><strong>$this-&gt;db-&gt;replace()</strong></p> <p>This method executes a REPLACE statement, which is basically the SQL standard for (optional) DELETE + INSERT, using <em>PRIMARY</em> and <em>UNIQUE</em> keys as the determining factor. In our case, it will save you from the need to implement complex logics with different combinations of <code>select()</code>, <code>update()</code>, <code>delete()</code> and <code>insert()</code> calls.</p> <p>Example:</p> <pre data-language=\"php\">$data = array(\n        'title' =&gt; 'My title',\n        'name'  =&gt; 'My Name',\n        'date'  =&gt; 'My date'\n);\n\n$this-&gt;db-&gt;replace('table', $data);\n\n// Executes: REPLACE INTO mytable (title, name, date) VALUES ('My title', 'My name', 'My date')\n</pre> <p>In the above example, if we assume that the <em>title</em> field is our primary key, then if a row containing ‘My title’ as the <em>title</em> value, that row will be deleted with our new row data replacing it.</p> <p>Usage of the <code>set()</code> method is also allowed and all fields are automatically escaped, just like with <code>insert()</code>.</p> <p><strong>$this-&gt;db-&gt;set()</strong></p> <p>This function enables you to set values for inserts or updates.</p> <p><strong>It can be used instead of passing a data array directly to the insert or update functions:</strong></p> <pre data-language=\"php\">$this-&gt;db-&gt;set('name', $name);\n$this-&gt;db-&gt;insert('mytable');  // Produces: INSERT INTO mytable (`name`) VALUES ('{$name}')\n</pre> <p>If you use multiple function called they will be assembled properly based on whether you are doing an insert or an update:</p> <pre data-language=\"php\">$this-&gt;db-&gt;set('name', $name);\n$this-&gt;db-&gt;set('title', $title);\n$this-&gt;db-&gt;set('status', $status);\n$this-&gt;db-&gt;insert('mytable');\n</pre> <p><strong>set()</strong> will also accept an optional third parameter (<code>$escape</code>), that will prevent data from being escaped if set to FALSE. To illustrate the difference, here is <code>set()</code> used both with and without the escape parameter.</p> <pre data-language=\"php\">$this-&gt;db-&gt;set('field', 'field+1', FALSE);\n$this-&gt;db-&gt;where('id', 2);\n$this-&gt;db-&gt;update('mytable'); // gives UPDATE mytable SET field = field+1 WHERE id = 2\n\n$this-&gt;db-&gt;set('field', 'field+1');\n$this-&gt;db-&gt;where('id', 2);\n$this-&gt;db-&gt;update('mytable'); // gives UPDATE `mytable` SET `field` = 'field+1' WHERE `id` = 2\n</pre> <p>You can also pass an associative array to this function:</p> <pre data-language=\"php\">$array = array(\n        'name' =&gt; $name,\n        'title' =&gt; $title,\n        'status' =&gt; $status\n);\n\n$this-&gt;db-&gt;set($array);\n$this-&gt;db-&gt;insert('mytable');\n</pre> <p>Or an object:</p> <pre data-language=\"php\">/*\nclass Myclass {\n        public $title = 'My Title';\n        public $content = 'My Content';\n        public $date = 'My Date';\n}\n*/\n\n$object = new Myclass;\n$this-&gt;db-&gt;set($object);\n$this-&gt;db-&gt;insert('mytable');\n</pre> <p><strong>$this-&gt;db-&gt;update()</strong></p> <p>Generates an update string and runs the query based on the data you supply. You can pass an <strong>array</strong> or an <strong>object</strong> to the function. Here is an example using an array:</p> <pre data-language=\"php\">$data = array(\n        'title' =&gt; $title,\n        'name' =&gt; $name,\n        'date' =&gt; $date\n);\n\n$this-&gt;db-&gt;where('id', $id);\n$this-&gt;db-&gt;update('mytable', $data);\n// Produces:\n//\n//      UPDATE mytable\n//      SET title = '{$title}', name = '{$name}', date = '{$date}'\n//      WHERE id = $id\n</pre> <p>Or you can supply an object:</p> <pre data-language=\"php\">/*\nclass Myclass {\n        public $title = 'My Title';\n        public $content = 'My Content';\n        public $date = 'My Date';\n}\n*/\n\n$object = new Myclass;\n$this-&gt;db-&gt;where('id', $id);\n$this-&gt;db-&gt;update('mytable', $object);\n// Produces:\n//\n// UPDATE `mytable`\n// SET `title` = '{$title}', `name` = '{$name}', `date` = '{$date}'\n// WHERE id = `$id`\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">All values are escaped automatically producing safer queries.</p> </div> <p>You’ll notice the use of the $this-&gt;db-&gt;where() function, enabling you to set the WHERE clause. You can optionally pass this information directly into the update function as a string:</p> <pre data-language=\"php\">$this-&gt;db-&gt;update('mytable', $data, \"id = 4\");\n</pre> <p>Or as an array:</p> <pre data-language=\"php\">$this-&gt;db-&gt;update('mytable', $data, array('id' =&gt; $id));\n</pre> <p>You may also use the $this-&gt;db-&gt;set() function described above when performing updates.</p> <p><strong>$this-&gt;db-&gt;update_batch()</strong></p> <p>Generates an update string based on the data you supply, and runs the query. You can either pass an <strong>array</strong> or an <strong>object</strong> to the function. Here is an example using an array:</p> <pre data-language=\"php\">$data = array(\n   array(\n      'title' =&gt; 'My title' ,\n      'name' =&gt; 'My Name 2' ,\n      'date' =&gt; 'My date 2'\n   ),\n   array(\n      'title' =&gt; 'Another title' ,\n      'name' =&gt; 'Another Name 2' ,\n      'date' =&gt; 'Another date 2'\n   )\n);\n\n$this-&gt;db-&gt;update_batch('mytable', $data, 'title');\n\n// Produces:\n// UPDATE `mytable` SET `name` = CASE\n// WHEN `title` = 'My title' THEN 'My Name 2'\n// WHEN `title` = 'Another title' THEN 'Another Name 2'\n// ELSE `name` END,\n// `date` = CASE\n// WHEN `title` = 'My title' THEN 'My date 2'\n// WHEN `title` = 'Another title' THEN 'Another date 2'\n// ELSE `date` END\n// WHERE `title` IN ('My title','Another title')\n</pre> <p>The first parameter will contain the table name, the second is an associative array of values, the third parameter is the where key.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">All values are escaped automatically producing safer queries.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\"><code>affected_rows()</code> won’t give you proper results with this method, due to the very nature of how it works. Instead, <code>update_batch()</code> returns the number of rows affected.</p> </div> <p><strong>$this-&gt;db-&gt;get_compiled_update()</strong></p> <p>This works exactly the same way as <code>$this-&gt;db-&gt;get_compiled_insert()</code> except that it produces an UPDATE SQL string instead of an INSERT SQL string.</p> <p>For more information view documentation for <cite>$this-&gt;db-&gt;get_compiled_insert()</cite>.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This method doesn’t work for batched updates.</p> </div>   <h2 id=\"deleting-data\">Deleting Data</h2> <p><strong>$this-&gt;db-&gt;delete()</strong></p> <p>Generates a delete SQL string and runs the query.</p> <pre data-language=\"php\">$this-&gt;db-&gt;delete('mytable', array('id' =&gt; $id));  // Produces: // DELETE FROM mytable  // WHERE id = $id\n</pre> <p>The first parameter is the table name, the second is the where clause. You can also use the where() or or_where() functions instead of passing the data to the second parameter of the function:</p> <pre data-language=\"php\">$this-&gt;db-&gt;where('id', $id);\n$this-&gt;db-&gt;delete('mytable');\n\n// Produces:\n// DELETE FROM mytable\n// WHERE id = $id\n</pre> <p>An array of table names can be passed into delete() if you would like to delete data from more than 1 table.</p> <pre data-language=\"php\">$tables = array('table1', 'table2', 'table3');\n$this-&gt;db-&gt;where('id', '5');\n$this-&gt;db-&gt;delete($tables);\n</pre> <p>If you want to delete all data from a table, you can use the truncate() function, or empty_table().</p> <p><strong>$this-&gt;db-&gt;empty_table()</strong></p> <p>Generates a delete SQL string and runs the query.:</p> <pre data-language=\"php\">$this-&gt;db-&gt;empty_table('mytable'); // Produces: DELETE FROM mytable\n</pre> <p><strong>$this-&gt;db-&gt;truncate()</strong></p> <p>Generates a truncate SQL string and runs the query.</p> <pre data-language=\"php\">$this-&gt;db-&gt;from('mytable');\n$this-&gt;db-&gt;truncate();\n\n// or\n\n$this-&gt;db-&gt;truncate('mytable');\n\n// Produce:\n// TRUNCATE mytable\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If the TRUNCATE command isn’t available, truncate() will execute as “DELETE FROM table”.</p> </div> <p><strong>$this-&gt;db-&gt;get_compiled_delete()</strong></p> <p>This works exactly the same way as <code>$this-&gt;db-&gt;get_compiled_insert()</code> except that it produces a DELETE SQL string instead of an INSERT SQL string.</p> <p>For more information view documentation for $this-&gt;db-&gt;get_compiled_insert().</p>   <h2 id=\"method-chaining\">Method Chaining</h2> <p>Method chaining allows you to simplify your syntax by connecting multiple functions. Consider this example:</p> <pre data-language=\"php\">$query = $this-&gt;db-&gt;select('title')\n                -&gt;where('id', $id)\n                -&gt;limit(10, 20)\n                -&gt;get('mytable');\n</pre>   <h2 id=\"ar-caching\">Query Builder Caching</h2> <p id=\"query-builder-caching\">While not “true” caching, Query Builder enables you to save (or “cache”) certain parts of your queries for reuse at a later point in your script’s execution. Normally, when an Query Builder call is completed, all stored information is reset for the next call. With caching, you can prevent this reset, and reuse information easily.</p> <p>Cached calls are cumulative. If you make 2 cached select() calls, and then 2 uncached select() calls, this will result in 4 select() calls. There are three Caching functions available:</p> <p><strong>$this-&gt;db-&gt;start_cache()</strong></p> <p>This function must be called to begin caching. All Query Builder queries of the correct type (see below for supported queries) are stored for later use.</p> <p><strong>$this-&gt;db-&gt;stop_cache()</strong></p> <p>This function can be called to stop caching.</p> <p><strong>$this-&gt;db-&gt;flush_cache()</strong></p> <p>This function deletes all items from the Query Builder cache.</p>  <h3 id=\"an-example-of-caching\">An example of caching</h3> <p>Here’s a usage example:</p> <pre data-language=\"php\">$this-&gt;db-&gt;start_cache();\n$this-&gt;db-&gt;select('field1');\n$this-&gt;db-&gt;stop_cache();\n$this-&gt;db-&gt;get('tablename');\n//Generates: SELECT `field1` FROM (`tablename`)\n\n$this-&gt;db-&gt;select('field2');\n$this-&gt;db-&gt;get('tablename');\n//Generates:  SELECT `field1`, `field2` FROM (`tablename`)\n\n$this-&gt;db-&gt;flush_cache();\n$this-&gt;db-&gt;select('field2');\n$this-&gt;db-&gt;get('tablename');\n//Generates:  SELECT `field2` FROM (`tablename`)\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The following statements can be cached: select, from, join, where, like, group_by, having, order_by</p> </div>    <h2 id=\"resetting-query-builder\">Resetting Query Builder</h2> <p><strong>$this-&gt;db-&gt;reset_query()</strong></p> <p>Resetting Query Builder allows you to start fresh with your query without executing it first using a method like $this-&gt;db-&gt;get() or $this-&gt;db-&gt;insert(). Just like the methods that execute a query, this will <em>not</em> reset items you’ve cached using <a class=\"reference internal\" href=\"#query-builder-caching\">Query Builder Caching</a>.</p> <p>This is useful in situations where you are using Query Builder to generate SQL (ex. <code>$this-&gt;db-&gt;get_compiled_select()</code>) but then choose to, for instance, run the query:</p> <pre data-language=\"php\">// Note that the second parameter of the get_compiled_select method is FALSE\n$sql = $this-&gt;db-&gt;select(array('field1','field2'))\n                                -&gt;where('field3',5)\n                                -&gt;get_compiled_select('mytable', FALSE);\n\n// ...\n// Do something crazy with the SQL code... like add it to a cron script for\n// later execution or something...\n// ...\n\n$data = $this-&gt;db-&gt;get()-&gt;result_array();\n\n// Would execute and return an array of results of the following query:\n// SELECT field1, field1 from mytable where field3 = 5;\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Double calls to <code>get_compiled_select()</code> while you’re using the Query Builder Caching functionality and NOT resetting your queries will results in the cache being merged twice. That in turn will i.e. if you’re caching a <code>select()</code> - select the same field twice.</p> </div>   <h2 id=\"class-reference\">Class Reference</h2> <dl class=\"class\"> <dt id=\"CI_DB_query_builder\">\n<code>class CI_DB_query_builder</code> </dt> <dd>\n<dl class=\"method\"> <dt id=\"CI_DB_query_builder::reset_query\">\n<code>reset_query()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">CI_DB_query_builder instance (method chaining)</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">CI_DB_query_builder</td> </tr>  </table> <p>Resets the current Query Builder state. Useful when you want to build a query that can be cancelled under certain conditions.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::start_cache\">\n<code>start_cache()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">CI_DB_query_builder instance (method chaining)</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">CI_DB_query_builder</td> </tr>  </table> <p>Starts the Query Builder cache.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::stop_cache\">\n<code>stop_cache()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">CI_DB_query_builder instance (method chaining)</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">CI_DB_query_builder</td> </tr>  </table> <p>Stops the Query Builder cache.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::flush_cache\">\n<code>flush_cache()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">CI_DB_query_builder instance (method chaining)</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">CI_DB_query_builder</td> </tr>  </table> <p>Empties the Query Builder cache.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::set_dbprefix\">\n<code>set_dbprefix([$prefix = ''])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$prefix</strong> (<em>string</em>) – The new prefix to use</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">The DB prefix in use</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Sets the database prefix, without having to reconnect.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::dbprefix\">\n<code>dbprefix([$table = ''])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table</strong> (<em>string</em>) – The table name to prefix</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">The prefixed table name</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Prepends a database prefix, if one exists in configuration.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::count_all_results\">\n<code>count_all_results([$table = ''[, $reset = TRUE]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table</strong> (<em>string</em>) – Table name</li> <li>\n<strong>$reset</strong> (<em>bool</em>) – Whether to reset values for SELECTs</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Number of rows in the query result</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">int</p> </td> </tr>  </table> <p>Generates a platform-specific query string that counts all records returned by an Query Builder query.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::get\">\n<code>get([$table = ''[, $limit = NULL[, $offset = NULL]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table</strong> (<em>string</em>) – The table to query</li> <li>\n<strong>$limit</strong> (<em>int</em>) – The LIMIT clause</li> <li>\n<strong>$offset</strong> (<em>int</em>) – The OFFSET clause</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_DB_result instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_DB_result</p> </td> </tr>  </table> <p>Compiles and runs SELECT statement based on the already called Query Builder methods.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::get_where\">\n<code>get_where([$table = ''[, $where = NULL[, $limit = NULL[, $offset = NULL]]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table</strong> (<em>mixed</em>) – The table(s) to fetch data from; string or array</li> <li>\n<strong>$where</strong> (<em>string</em>) – The WHERE clause</li> <li>\n<strong>$limit</strong> (<em>int</em>) – The LIMIT clause</li> <li>\n<strong>$offset</strong> (<em>int</em>) – The OFFSET clause</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_DB_result instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_DB_result</p> </td> </tr>  </table> <p>Same as <code>get()</code>, but also allows the WHERE to be added directly.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::select\">\n<code>select([$select = '*'[, $escape = NULL]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$select</strong> (<em>string</em>) – The SELECT portion of a query</li> <li>\n<strong>$escape</strong> (<em>bool</em>) – Whether to escape values and identifiers</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_DB_query_builder instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_DB_query_builder</p> </td> </tr>  </table> <p>Adds a SELECT clause to a query.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::select_avg\">\n<code>select_avg([$select = ''[, $alias = '']])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$select</strong> (<em>string</em>) – Field to compute the average of</li> <li>\n<strong>$alias</strong> (<em>string</em>) – Alias for the resulting value name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_DB_query_builder instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_DB_query_builder</p> </td> </tr>  </table> <p>Adds a SELECT AVG(field) clause to a query.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::select_max\">\n<code>select_max([$select = ''[, $alias = '']])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$select</strong> (<em>string</em>) – Field to compute the maximum of</li> <li>\n<strong>$alias</strong> (<em>string</em>) – Alias for the resulting value name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_DB_query_builder instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_DB_query_builder</p> </td> </tr>  </table> <p>Adds a SELECT MAX(field) clause to a query.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::select_min\">\n<code>select_min([$select = ''[, $alias = '']])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$select</strong> (<em>string</em>) – Field to compute the minimum of</li> <li>\n<strong>$alias</strong> (<em>string</em>) – Alias for the resulting value name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_DB_query_builder instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_DB_query_builder</p> </td> </tr>  </table> <p>Adds a SELECT MIN(field) clause to a query.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::select_sum\">\n<code>select_sum([$select = ''[, $alias = '']])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$select</strong> (<em>string</em>) – Field to compute the sum of</li> <li>\n<strong>$alias</strong> (<em>string</em>) – Alias for the resulting value name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_DB_query_builder instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_DB_query_builder</p> </td> </tr>  </table> <p>Adds a SELECT SUM(field) clause to a query.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::distinct\">\n<code>distinct([$val = TRUE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$val</strong> (<em>bool</em>) – Desired value of the “distinct” flag</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_DB_query_builder instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_DB_query_builder</p> </td> </tr>  </table> <p>Sets a flag which tells the query builder to add a DISTINCT clause to the SELECT portion of the query.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::from\">\n<code>from($from)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$from</strong> (<em>mixed</em>) – Table name(s); string or array</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_DB_query_builder instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_DB_query_builder</p> </td> </tr>  </table> <p>Specifies the FROM clause of a query.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::join\">\n<code>join($table, $cond[, $type = ''[, $escape = NULL]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table</strong> (<em>string</em>) – Table name to join</li> <li>\n<strong>$cond</strong> (<em>string</em>) – The JOIN ON condition</li> <li>\n<strong>$type</strong> (<em>string</em>) – The JOIN type</li> <li>\n<strong>$escape</strong> (<em>bool</em>) – Whether to escape values and identifiers</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_DB_query_builder instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_DB_query_builder</p> </td> </tr>  </table> <p>Adds a JOIN clause to a query.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::where\">\n<code>where($key[, $value = NULL[, $escape = NULL]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$key</strong> (<em>mixed</em>) – Name of field to compare, or associative array</li> <li>\n<strong>$value</strong> (<em>mixed</em>) – If a single key, compared to this value</li> <li>\n<strong>$escape</strong> (<em>bool</em>) – Whether to escape values and identifiers</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">DB_query_builder instance</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">object</p> </td> </tr>  </table> <p>Generates the WHERE portion of the query. Separates multiple calls with ‘AND’.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::or_where\">\n<code>or_where($key[, $value = NULL[, $escape = NULL]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$key</strong> (<em>mixed</em>) – Name of field to compare, or associative array</li> <li>\n<strong>$value</strong> (<em>mixed</em>) – If a single key, compared to this value</li> <li>\n<strong>$escape</strong> (<em>bool</em>) – Whether to escape values and identifiers</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">DB_query_builder instance</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">object</p> </td> </tr>  </table> <p>Generates the WHERE portion of the query. Separates multiple calls with ‘OR’.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::or_where_in\">\n<code>or_where_in([$key = NULL[, $values = NULL[, $escape = NULL]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$key</strong> (<em>string</em>) – The field to search</li> <li>\n<strong>$values</strong> (<em>array</em>) – The values searched on</li> <li>\n<strong>$escape</strong> (<em>bool</em>) – Whether to escape values and identifiers</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">DB_query_builder instance</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">object</p> </td> </tr>  </table> <p>Generates a WHERE field IN(‘item’, ‘item’) SQL query, joined with ‘OR’ if appropriate.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::or_where_not_in\">\n<code>or_where_not_in([$key = NULL[, $values = NULL[, $escape = NULL]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$key</strong> (<em>string</em>) – The field to search</li> <li>\n<strong>$values</strong> (<em>array</em>) – The values searched on</li> <li>\n<strong>$escape</strong> (<em>bool</em>) – Whether to escape values and identifiers</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">DB_query_builder instance</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">object</p> </td> </tr>  </table> <p>Generates a WHERE field NOT IN(‘item’, ‘item’) SQL query, joined with ‘OR’ if appropriate.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::where_in\">\n<code>where_in([$key = NULL[, $values = NULL[, $escape = NULL]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$key</strong> (<em>string</em>) – Name of field to examine</li> <li>\n<strong>$values</strong> (<em>array</em>) – Array of target values</li> <li>\n<strong>$escape</strong> (<em>bool</em>) – Whether to escape values and identifiers</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">DB_query_builder instance</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">object</p> </td> </tr>  </table> <p>Generates a WHERE field IN(‘item’, ‘item’) SQL query, joined with ‘AND’ if appropriate.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::where_not_in\">\n<code>where_not_in([$key = NULL[, $values = NULL[, $escape = NULL]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$key</strong> (<em>string</em>) – Name of field to examine</li> <li>\n<strong>$values</strong> (<em>array</em>) – Array of target values</li> <li>\n<strong>$escape</strong> (<em>bool</em>) – Whether to escape values and identifiers</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">DB_query_builder instance</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">object</p> </td> </tr>  </table> <p>Generates a WHERE field NOT IN(‘item’, ‘item’) SQL query, joined with ‘AND’ if appropriate.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::group_start\">\n<code>group_start()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">CI_DB_query_builder instance (method chaining)</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">CI_DB_query_builder</td> </tr>  </table> <p>Starts a group expression, using ANDs for the conditions inside it.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::or_group_start\">\n<code>or_group_start()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">CI_DB_query_builder instance (method chaining)</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">CI_DB_query_builder</td> </tr>  </table> <p>Starts a group expression, using ORs for the conditions inside it.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::not_group_start\">\n<code>not_group_start()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">CI_DB_query_builder instance (method chaining)</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">CI_DB_query_builder</td> </tr>  </table> <p>Starts a group expression, using AND NOTs for the conditions inside it.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::or_not_group_start\">\n<code>or_not_group_start()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">CI_DB_query_builder instance (method chaining)</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">CI_DB_query_builder</td> </tr>  </table> <p>Starts a group expression, using OR NOTs for the conditions inside it.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::group_end\">\n<code>group_end()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">DB_query_builder instance</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">object</td> </tr>  </table> <p>Ends a group expression.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::like\">\n<code>like($field[, $match = ''[, $side = 'both'[, $escape = NULL]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$field</strong> (<em>string</em>) – Field name</li> <li>\n<strong>$match</strong> (<em>string</em>) – Text portion to match</li> <li>\n<strong>$side</strong> (<em>string</em>) – Which side of the expression to put the ‘%’ wildcard on</li> <li>\n<strong>$escape</strong> (<em>bool</em>) – Whether to escape values and identifiers</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_DB_query_builder instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_DB_query_builder</p> </td> </tr>  </table> <p>Adds a LIKE clause to a query, separating multiple calls with AND.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::or_like\">\n<code>or_like($field[, $match = ''[, $side = 'both'[, $escape = NULL]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$field</strong> (<em>string</em>) – Field name</li> <li>\n<strong>$match</strong> (<em>string</em>) – Text portion to match</li> <li>\n<strong>$side</strong> (<em>string</em>) – Which side of the expression to put the ‘%’ wildcard on</li> <li>\n<strong>$escape</strong> (<em>bool</em>) – Whether to escape values and identifiers</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_DB_query_builder instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_DB_query_builder</p> </td> </tr>  </table> <p>Adds a LIKE clause to a query, separating multiple class with OR.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::not_like\">\n<code>not_like($field[, $match = ''[, $side = 'both'[, $escape = NULL]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$field</strong> (<em>string</em>) – Field name</li> <li>\n<strong>$match</strong> (<em>string</em>) – Text portion to match</li> <li>\n<strong>$side</strong> (<em>string</em>) – Which side of the expression to put the ‘%’ wildcard on</li> <li>\n<strong>$escape</strong> (<em>bool</em>) – Whether to escape values and identifiers</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_DB_query_builder instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_DB_query_builder</p> </td> </tr>  </table> <p>Adds a NOT LIKE clause to a query, separating multiple calls with AND.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::or_not_like\">\n<code>or_not_like($field[, $match = ''[, $side = 'both'[, $escape = NULL]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$field</strong> (<em>string</em>) – Field name</li> <li>\n<strong>$match</strong> (<em>string</em>) – Text portion to match</li> <li>\n<strong>$side</strong> (<em>string</em>) – Which side of the expression to put the ‘%’ wildcard on</li> <li>\n<strong>$escape</strong> (<em>bool</em>) – Whether to escape values and identifiers</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_DB_query_builder instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_DB_query_builder</p> </td> </tr>  </table> <p>Adds a NOT LIKE clause to a query, separating multiple calls with OR.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::having\">\n<code>having($key[, $value = NULL[, $escape = NULL]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$key</strong> (<em>mixed</em>) – Identifier (string) or associative array of field/value pairs</li> <li>\n<strong>$value</strong> (<em>string</em>) – Value sought if $key is an identifier</li> <li>\n<strong>$escape</strong> (<em>string</em>) – Whether to escape values and identifiers</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_DB_query_builder instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_DB_query_builder</p> </td> </tr>  </table> <p>Adds a HAVING clause to a query, separating multiple calls with AND.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::or_having\">\n<code>or_having($key[, $value = NULL[, $escape = NULL]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$key</strong> (<em>mixed</em>) – Identifier (string) or associative array of field/value pairs</li> <li>\n<strong>$value</strong> (<em>string</em>) – Value sought if $key is an identifier</li> <li>\n<strong>$escape</strong> (<em>string</em>) – Whether to escape values and identifiers</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_DB_query_builder instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_DB_query_builder</p> </td> </tr>  </table> <p>Adds a HAVING clause to a query, separating multiple calls with OR.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::group_by\">\n<code>group_by($by[, $escape = NULL])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$by</strong> (<em>mixed</em>) – Field(s) to group by; string or array</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_DB_query_builder instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_DB_query_builder</p> </td> </tr>  </table> <p>Adds a GROUP BY clause to a query.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::order_by\">\n<code>order_by($orderby[, $direction = ''[, $escape = NULL]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$orderby</strong> (<em>string</em>) – Field to order by</li> <li>\n<strong>$direction</strong> (<em>string</em>) – The order requested - ASC, DESC or random</li> <li>\n<strong>$escape</strong> (<em>bool</em>) – Whether to escape values and identifiers</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_DB_query_builder instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_DB_query_builder</p> </td> </tr>  </table> <p>Adds an ORDER BY clause to a query.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::limit\">\n<code>limit($value[, $offset = 0])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$value</strong> (<em>int</em>) – Number of rows to limit the results to</li> <li>\n<strong>$offset</strong> (<em>int</em>) – Number of rows to skip</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_DB_query_builder instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_DB_query_builder</p> </td> </tr>  </table> <p>Adds LIMIT and OFFSET clauses to a query.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::offset\">\n<code>offset($offset)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$offset</strong> (<em>int</em>) – Number of rows to skip</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_DB_query_builder instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_DB_query_builder</p> </td> </tr>  </table> <p>Adds an OFFSET clause to a query.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::set\">\n<code>set($key[, $value = ''[, $escape = NULL]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$key</strong> (<em>mixed</em>) – Field name, or an array of field/value pairs</li> <li>\n<strong>$value</strong> (<em>string</em>) – Field value, if $key is a single field</li> <li>\n<strong>$escape</strong> (<em>bool</em>) – Whether to escape values and identifiers</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_DB_query_builder instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_DB_query_builder</p> </td> </tr>  </table> <p>Adds field/value pairs to be passed later to <code>insert()</code>, <code>update()</code> or <code>replace()</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::insert\">\n<code>insert([$table = ''[, $set = NULL[, $escape = NULL]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table</strong> (<em>string</em>) – Table name</li> <li>\n<strong>$set</strong> (<em>array</em>) – An associative array of field/value pairs</li> <li>\n<strong>$escape</strong> (<em>bool</em>) – Whether to escape values and identifiers</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Compiles and executes an INSERT statement.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::insert_batch\">\n<code>insert_batch($table[, $set = NULL[, $escape = NULL[, $batch_size = 100]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table</strong> (<em>string</em>) – Table name</li> <li>\n<strong>$set</strong> (<em>array</em>) – Data to insert</li> <li>\n<strong>$escape</strong> (<em>bool</em>) – Whether to escape values and identifiers</li> <li>\n<strong>$batch_size</strong> (<em>int</em>) – Count of rows to insert at once</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Number of rows inserted or FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Compiles and executes batch <code>INSERT</code> statements.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">When more than <code>$batch_size</code> rows are provided, multiple <code>INSERT</code> queries will be executed, each trying to insert up to <code>$batch_size</code> rows.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::set_insert_batch\">\n<code>set_insert_batch($key[, $value = ''[, $escape = NULL]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$key</strong> (<em>mixed</em>) – Field name or an array of field/value pairs</li> <li>\n<strong>$value</strong> (<em>string</em>) – Field value, if $key is a single field</li> <li>\n<strong>$escape</strong> (<em>bool</em>) – Whether to escape values and identifiers</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_DB_query_builder instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_DB_query_builder</p> </td> </tr>  </table> <p>Adds field/value pairs to be inserted in a table later via <code>insert_batch()</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::update\">\n<code>update([$table = ''[, $set = NULL[, $where = NULL[, $limit = NULL]]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table</strong> (<em>string</em>) – Table name</li> <li>\n<strong>$set</strong> (<em>array</em>) – An associative array of field/value pairs</li> <li>\n<strong>$where</strong> (<em>string</em>) – The WHERE clause</li> <li>\n<strong>$limit</strong> (<em>int</em>) – The LIMIT clause</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Compiles and executes an UPDATE statement.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::update_batch\">\n<code>update_batch($table[, $set = NULL[, $value = NULL[, $batch_size = 100]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table</strong> (<em>string</em>) – Table name</li> <li>\n<strong>$set</strong> (<em>array</em>) – Field name, or an associative array of field/value pairs</li> <li>\n<strong>$value</strong> (<em>string</em>) – Field value, if $set is a single field</li> <li>\n<strong>$batch_size</strong> (<em>int</em>) – Count of conditions to group in a single query</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Number of rows updated or FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Compiles and executes batch <code>UPDATE</code> statements.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">When more than <code>$batch_size</code> field/value pairs are provided, multiple queries will be executed, each handling up to <code>$batch_size</code> field/value pairs.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::set_update_batch\">\n<code>set_update_batch($key[, $value = ''[, $escape = NULL]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$key</strong> (<em>mixed</em>) – Field name or an array of field/value pairs</li> <li>\n<strong>$value</strong> (<em>string</em>) – Field value, if $key is a single field</li> <li>\n<strong>$escape</strong> (<em>bool</em>) – Whether to escape values and identifiers</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_DB_query_builder instance (method chaining)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">CI_DB_query_builder</p> </td> </tr>  </table> <p>Adds field/value pairs to be updated in a table later via <code>update_batch()</code>.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::replace\">\n<code>replace([$table = ''[, $set = NULL]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table</strong> (<em>string</em>) – Table name</li> <li>\n<strong>$set</strong> (<em>array</em>) – An associative array of field/value pairs</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Compiles and executes a REPLACE statement.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::delete\">\n<code>delete([$table = ''[, $where = ''[, $limit = NULL[, $reset_data = TRUE]]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table</strong> (<em>mixed</em>) – The table(s) to delete from; string or array</li> <li>\n<strong>$where</strong> (<em>string</em>) – The WHERE clause</li> <li>\n<strong>$limit</strong> (<em>int</em>) – The LIMIT clause</li> <li>\n<strong>$reset_data</strong> (<em>bool</em>) – TRUE to reset the query “write” clause</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">CI_DB_query_builder instance (method chaining) or FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Compiles and executes a DELETE query.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::truncate\">\n<code>truncate([$table = ''])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table</strong> (<em>string</em>) – Table name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Executes a TRUNCATE statement on a table.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If the database platform in use doesn’t support TRUNCATE, a DELETE statement will be used instead.</p> </div> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::empty_table\">\n<code>empty_table([$table = ''])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table</strong> (<em>string</em>) – Table name</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">TRUE on success, FALSE on failure</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">bool</p> </td> </tr>  </table> <p>Deletes all records from a table via a DELETE statement.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::get_compiled_select\">\n<code>get_compiled_select([$table = ''[, $reset = TRUE]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table</strong> (<em>string</em>) – Table name</li> <li>\n<strong>$reset</strong> (<em>bool</em>) – Whether to reset the current QB values or not</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">The compiled SQL statement as a string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Compiles a SELECT statement and returns it as a string.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::get_compiled_insert\">\n<code>get_compiled_insert([$table = ''[, $reset = TRUE]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table</strong> (<em>string</em>) – Table name</li> <li>\n<strong>$reset</strong> (<em>bool</em>) – Whether to reset the current QB values or not</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">The compiled SQL statement as a string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Compiles an INSERT statement and returns it as a string.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::get_compiled_update\">\n<code>get_compiled_update([$table = ''[, $reset = TRUE]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table</strong> (<em>string</em>) – Table name</li> <li>\n<strong>$reset</strong> (<em>bool</em>) – Whether to reset the current QB values or not</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">The compiled SQL statement as a string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Compiles an UPDATE statement and returns it as a string.</p> </dd>\n</dl> <dl class=\"method\"> <dt id=\"CI_DB_query_builder::get_compiled_delete\">\n<code>get_compiled_delete([$table = ''[, $reset = TRUE]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$table</strong> (<em>string</em>) – Table name</li> <li>\n<strong>$reset</strong> (<em>bool</em>) – Whether to reset the current QB values or not</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">The compiled SQL statement as a string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Compiles a DELETE statement and returns it as a string.</p> </dd>\n</dl> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/database/query_builder.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/database/query_builder.html</a>\n  </p>\n</div>\n","helpers/security_helper":"<h1 id=\"security-helper\">Security Helper</h1> <p>The Security Helper file contains security related functions.</p>  <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#loading-this-helper\" id=\"id1\">Loading this Helper</a></li> <li><a class=\"reference internal\" href=\"#available-functions\" id=\"id2\">Available Functions</a></li> </ul>   <h2 id=\"loading-this-helper\">Loading this Helper</h2> <p>This helper is loaded using the following code:</p> <pre data-language=\"php\">$this-&gt;load-&gt;helper('security');\n</pre>   <h2 id=\"available-functions\">Available Functions</h2> <p>The following functions are available:</p> <dl class=\"function\"> <dt id=\"xss_clean\">\n<code>xss_clean($str[, $is_image = FALSE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input data</li> <li>\n<strong>$is_image</strong> (<em>bool</em>) – Whether we’re dealing with an image</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">XSS-clean string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Provides Cross Site Script Hack filtering.</p> <p>This function is an alias for <code>CI_Input::xss_clean()</code>. For more info, please see the <a class=\"reference internal\" href=\"../libraries/input\">Input Library</a> documentation.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"sanitize_filename\">\n<code>sanitize_filename($filename)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$filename</strong> (<em>string</em>) – Filename</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Sanitized file name</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Provides protection against directory traversal.</p> <p>This function is an alias for <code>CI_Security::sanitize_filename()</code>. For more info, please see the <a class=\"reference internal\" href=\"../libraries/security\">Security Library</a> documentation.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"do_hash\">\n<code>do_hash($str[, $type = 'sha1'])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input</li> <li>\n<strong>$type</strong> (<em>string</em>) – Algorithm</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Hex-formatted hash</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Permits you to create one way hashes suitable for encrypting passwords. Will use SHA1 by default.</p> <p>See <a class=\"reference external\" href=\"http://php.net/function.hash_algos\">hash_algos()</a> for a full list of supported algorithms.</p> <p>Examples:</p> <pre data-language=\"php\">$str = do_hash($str); // SHA1\n$str = do_hash($str, 'md5'); // MD5\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This function was formerly named <code>dohash()</code>, which has been removed in favor of <code>do_hash()</code>.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This function is DEPRECATED. Use the native <code>hash()</code> instead.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"strip_image_tags\">\n<code>strip_image_tags($str)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">The input string with no image tags</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>This is a security function that will strip image tags from a string. It leaves the image URL as plain text.</p> <p>Example:</p> <pre data-language=\"php\">$string = strip_image_tags($string);\n</pre> <p>This function is an alias for <code>CI_Security::strip_image_tags()</code>. For more info, please see the <a class=\"reference internal\" href=\"../libraries/security\">Security Library</a> documentation.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"encode_php_tags\">\n<code>encode_php_tags($str)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Safely formatted string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>This is a security function that converts PHP tags to entities.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\"><a class=\"reference internal\" href=\"#xss_clean\" title=\"xss_clean\"><code>xss_clean()</code></a> does this automatically, if you use it.</p> </div> <p>Example:</p> <pre data-language=\"php\">$string = encode_php_tags($string);\n</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/helpers/security_helper.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/helpers/security_helper.html</a>\n  </p>\n</div>\n","helpers/smiley_helper":"<h1 id=\"smiley-helper\">Smiley Helper</h1> <p>The Smiley Helper file contains functions that let you manage smileys (emoticons).</p> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">The Smiley helper is DEPRECATED and should not be used. It is currently only kept for backwards compatibility.</p> </div>  <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#loading-this-helper\" id=\"id1\">Loading this Helper</a></li> <li><a class=\"reference internal\" href=\"#overview\" id=\"id2\">Overview</a></li> <li>\n<a class=\"reference internal\" href=\"#clickable-smileys-tutorial\" id=\"id3\">Clickable Smileys Tutorial</a><ul> <li><a class=\"reference internal\" href=\"#the-controller\" id=\"id4\">The Controller</a></li> <li><a class=\"reference internal\" href=\"#field-aliases\" id=\"id5\">Field Aliases</a></li> </ul> </li> <li><a class=\"reference internal\" href=\"#available-functions\" id=\"id6\">Available Functions</a></li> </ul>   <h2 id=\"loading-this-helper\">Loading this Helper</h2> <p>This helper is loaded using the following code:</p> <pre data-language=\"php\">$this-&gt;load-&gt;helper('smiley');\n</pre>   <h2 id=\"overview\">Overview</h2> <p>The Smiley helper has a renderer that takes plain text smileys, like :-) and turns them into a image representation, like <img alt=\"smile!\" src=\"https://www.codeigniter.com/user_guide/_images/smile.gif\"></p> <p>It also lets you display a set of smiley images that when clicked will be inserted into a form field. For example, if you have a blog that allows user commenting you can show the smileys next to the comment form. Your users can click a desired smiley and with the help of some JavaScript it will be placed into the form field.</p>   <h2 id=\"clickable-smileys-tutorial\">Clickable Smileys Tutorial</h2> <p>Here is an example demonstrating how you might create a set of clickable smileys next to a form field. This example requires that you first download and install the smiley images, then create a controller and the View as described.</p> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">Before you begin, please <a class=\"reference external\" href=\"https://ellislab.com/asset/ci_download_files/smileys.zip\">download the smiley images</a> and put them in a publicly accessible place on your server. This helper also assumes you have the smiley replacement array located at <cite>application/config/smileys.php</cite></p> </div>  <h3 id=\"the-controller\">The Controller</h3> <p>In your <strong>application/controllers/</strong> directory, create a file called Smileys.php and place the code below in it.</p> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">Change the URL in the <a class=\"reference internal\" href=\"#get_clickable_smileys\" title=\"get_clickable_smileys\"><code>get_clickable_smileys()</code></a> function below so that it points to your smiley folder.</p> </div> <p>You’ll notice that in addition to the smiley helper, we are also using the <a class=\"reference internal\" href=\"../libraries/table\">Table Class</a>:</p> <pre data-language=\"php\">&lt;?php\n\nclass Smileys extends CI_Controller {\n\n        public function index()\n        {\n                $this-&gt;load-&gt;helper('smiley');\n                $this-&gt;load-&gt;library('table');\n\n                $image_array = get_clickable_smileys('http://example.com/images/smileys/', 'comments');\n                $col_array = $this-&gt;table-&gt;make_columns($image_array, 8);\n\n                $data['smiley_table'] = $this-&gt;table-&gt;generate($col_array);\n                $this-&gt;load-&gt;view('smiley_view', $data);\n        }\n\n}\n</pre> <p>In your <strong>application/views/</strong> directory, create a file called <strong>smiley_view.php</strong> and place this code in it:</p> <pre data-language=\"php\">&lt;html&gt;\n        &lt;head&gt;\n                &lt;title&gt;Smileys&lt;/title&gt;\n                &lt;?php echo smiley_js(); ?&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n                &lt;form name=\"blog\"&gt;\n                        &lt;textarea name=\"comments\" id=\"comments\" cols=\"40\" rows=\"4\"&gt;&lt;/textarea&gt;\n                &lt;/form&gt;\n                &lt;p&gt;Click to insert a smiley!&lt;/p&gt;\n                &lt;?php echo $smiley_table; ?&gt; &lt;/body&gt; &lt;/html&gt;\n                When you have created the above controller and view, load it by visiting http://www.example.com/index.php/smileys/\n        &lt;/body&gt;\n&lt;/html&gt;\n</pre>   <h3 id=\"field-aliases\">Field Aliases</h3> <p>When making changes to a view it can be inconvenient to have the field id in the controller. To work around this, you can give your smiley links a generic name that will be tied to a specific id in your view.</p> <pre data-language=\"php\">$image_array = get_smiley_links(\"http://example.com/images/smileys/\", \"comment_textarea_alias\");\n</pre> <p>To map the alias to the field id, pass them both into the <code>smiley_js()</code> function:</p> <pre data-language=\"php\">$image_array = smiley_js(\"comment_textarea_alias\", \"comments\");\n</pre>    <h2 id=\"available-functions\">Available Functions</h2> <dl class=\"function\"> <dt id=\"get_clickable_smileys\">\n<code>get_clickable_smileys($image_url[, $alias = ''[, $smileys = NULL]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$image_url</strong> (<em>string</em>) – URL path to the smileys directory</li> <li>\n<strong>$alias</strong> (<em>string</em>) – Field alias</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An array of ready to use smileys</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">array</p> </td> </tr>  </table> <p>Returns an array containing your smiley images wrapped in a clickable link. You must supply the URL to your smiley folder and a field id or field alias.</p> <p>Example:</p> <pre data-language=\"php\">$image_array = get_clickable_smileys('http://example.com/images/smileys/', 'comment');\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"smiley_js\">\n<code>smiley_js([$alias = ''[, $field_id = ''[, $inline = TRUE]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$alias</strong> (<em>string</em>) – Field alias</li> <li>\n<strong>$field_id</strong> (<em>string</em>) – Field ID</li> <li>\n<strong>$inline</strong> (<em>bool</em>) – Whether we’re inserting an inline smiley</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Smiley-enabling JavaScript code</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Generates the JavaScript that allows the images to be clicked and inserted into a form field. If you supplied an alias instead of an id when generating your smiley links, you need to pass the alias and corresponding form id into the function. This function is designed to be placed into the &lt;head&gt; area of your web page.</p> <p>Example:</p> <pre data-language=\"php\">&lt;?php echo smiley_js(); ?&gt;\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"parse_smileys\">\n<code>parse_smileys([$str = ''[, $image_url = ''[, $smileys = NULL]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Text containing smiley codes</li> <li>\n<strong>$image_url</strong> (<em>string</em>) – URL path to the smileys directory</li> <li>\n<strong>$smileys</strong> (<em>array</em>) – An array of smileys</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Parsed smileys</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Takes a string of text as input and replaces any contained plain text smileys into the image equivalent. The first parameter must contain your string, the second must contain the URL to your smiley folder</p> <p>Example:</p> <pre data-language=\"php\">$str = 'Here are some smileys: :-)  ;-)';\n$str = parse_smileys($str, 'http://example.com/images/smileys/');\necho $str;\n</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/helpers/smiley_helper.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/helpers/smiley_helper.html</a>\n  </p>\n</div>\n","helpers/text_helper":"<h1 id=\"text-helper\">Text Helper</h1> <p>The Text Helper file contains functions that assist in working with text.</p>  <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#loading-this-helper\" id=\"id1\">Loading this Helper</a></li> <li><a class=\"reference internal\" href=\"#available-functions\" id=\"id2\">Available Functions</a></li> </ul>   <h2 id=\"loading-this-helper\">Loading this Helper</h2> <p>This helper is loaded using the following code:</p> <pre data-language=\"php\">$this-&gt;load-&gt;helper('text');\n</pre>   <h2 id=\"available-functions\">Available Functions</h2> <p>The following functions are available:</p> <dl class=\"function\"> <dt id=\"word_limiter\">\n<code>word_limiter($str[, $limit = 100[, $end_char = '…']])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> <li>\n<strong>$limit</strong> (<em>int</em>) – Limit</li> <li>\n<strong>$end_char</strong> (<em>string</em>) – End character (usually an ellipsis)</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Word-limited string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Truncates a string to the number of <em>words</em> specified. Example:</p> <pre data-language=\"php\">$string = \"Here is a nice text string consisting of eleven words.\";\n$string = word_limiter($string, 4);\n// Returns:  Here is a nice\n</pre> <p>The third parameter is an optional suffix added to the string. By default it adds an ellipsis.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"character_limiter\">\n<code>character_limiter($str[, $n = 500[, $end_char = '…']])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> <li>\n<strong>$n</strong> (<em>int</em>) – Number of characters</li> <li>\n<strong>$end_char</strong> (<em>string</em>) – End character (usually an ellipsis)</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Character-limited string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Truncates a string to the number of <em>characters</em> specified. It maintains the integrity of words so the character count may be slightly more or less than what you specify.</p> <p>Example:</p> <pre data-language=\"php\">$string = \"Here is a nice text string consisting of eleven words.\";\n$string = character_limiter($string, 20);\n// Returns:  Here is a nice text string\n</pre> <p>The third parameter is an optional suffix added to the string, if undeclared this helper uses an ellipsis.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If you need to truncate to an exact number of characters please see the <a class=\"reference internal\" href=\"#ellipsize\" title=\"ellipsize\"><code>ellipsize()</code></a> function below.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"ascii_to_entities\">\n<code>ascii_to_entities($str)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">A string with ASCII values converted to entities</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Converts ASCII values to character entities, including high ASCII and MS Word characters that can cause problems when used in a web page, so that they can be shown consistently regardless of browser settings or stored reliably in a database. There is some dependence on your server’s supported character sets, so it may not be 100% reliable in all cases, but for the most part it should correctly identify characters outside the normal range (like accented characters).</p> <p>Example:</p> <pre data-language=\"php\">$string = ascii_to_entities($string);\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"convert_accented_characters\">\n<code>convert_accented_characters($str)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">A string with accented characters converted</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Transliterates high ASCII characters to low ASCII equivalents. Useful when non-English characters need to be used where only standard ASCII characters are safely used, for instance, in URLs.</p> <p>Example:</p> <pre data-language=\"php\">$string = convert_accented_characters($string);\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This function uses a companion config file <cite>application/config/foreign_chars.php</cite> to define the to and from array for transliteration.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"word_censor\">\n<code>word_censor($str, $censored[, $replacement = ''])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> <li>\n<strong>$censored</strong> (<em>array</em>) – List of bad words to censor</li> <li>\n<strong>$replacement</strong> (<em>string</em>) – What to replace bad words with</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Censored string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Enables you to censor words within a text string. The first parameter will contain the original string. The second will contain an array of words which you disallow. The third (optional) parameter can contain a replacement value for the words. If not specified they are replaced with pound signs: ####.</p> <p>Example:</p> <pre data-language=\"php\">$disallowed = array('darn', 'shucks', 'golly', 'phooey');\n$string = word_censor($string, $disallowed, 'Beep!');\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"highlight_code\">\n<code>highlight_code($str)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">String with code highlighted via HTML</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Colorizes a string of code (PHP, HTML, etc.). Example:</p> <pre data-language=\"php\">$string = highlight_code($string);\n</pre> <p>The function uses PHP’s <code>highlight_string()</code> function, so the colors used are the ones specified in your php.ini file.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"highlight_phrase\">\n<code>highlight_phrase($str, $phrase[, $tag_open = '<mark>'[, $tag_close = '</mark>']])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> <li>\n<strong>$phrase</strong> (<em>string</em>) – Phrase to highlight</li> <li>\n<strong>$tag_open</strong> (<em>string</em>) – Opening tag used for the highlight</li> <li>\n<strong>$tag_close</strong> (<em>string</em>) – Closing tag for the highlight</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">String with a phrase highlighted via HTML</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Will highlight a phrase within a text string. The first parameter will contain the original string, the second will contain the phrase you wish to highlight. The third and fourth parameters will contain the opening/closing HTML tags you would like the phrase wrapped in.</p> <p>Example:</p> <pre data-language=\"php\">$string = \"Here is a nice text string about nothing in particular.\";\necho highlight_phrase($string, \"nice text\", '&lt;span style=\"color:#990000;\"&gt;', '&lt;/span&gt;');\n</pre> <p>The above code prints:</p> <pre data-language=\"php\">Here is a &lt;span style=\"color:#990000;\"&gt;nice text&lt;/span&gt; string about nothing in particular.\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p>This function used to use the <code>&lt;strong&gt;</code> tag by default. Older browsers might not support the new HTML5 mark tag, so it is recommended that you insert the following CSS code into your stylesheet if you need to support such browsers:</p> <pre data-language=\"php\">mark {\n        background: #ff0;\n        color: #000;\n};\n</pre> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"word_wrap\">\n<code>word_wrap($str[, $charlim = 76])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> <li>\n<strong>$charlim</strong> (<em>int</em>) – Character limit</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Word-wrapped string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Wraps text at the specified <em>character</em> count while maintaining complete words.</p> <p>Example:</p> <pre data-language=\"php\">$string = \"Here is a simple string of text that will help us demonstrate this function.\";\necho word_wrap($string, 25);\n\n// Would produce:\n// Here is a simple string\n// of text that will help us\n// demonstrate this\n// function.\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"ellipsize\">\n<code>ellipsize($str, $max_length[, $position = 1[, $ellipsis = '…']])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> <li>\n<strong>$max_length</strong> (<em>int</em>) – String length limit</li> <li>\n<strong>$position</strong> (<em>mixed</em>) – Position to split at (int or float)</li> <li>\n<strong>$ellipsis</strong> (<em>string</em>) – What to use as the ellipsis character</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Ellipsized string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>This function will strip tags from a string, split it at a defined maximum length, and insert an ellipsis.</p> <p>The first parameter is the string to ellipsize, the second is the number of characters in the final string. The third parameter is where in the string the ellipsis should appear from 0 - 1, left to right. For example. a value of 1 will place the ellipsis at the right of the string, .5 in the middle, and 0 at the left.</p> <p>An optional forth parameter is the kind of ellipsis. By default, &amp;hellip; will be inserted.</p> <p>Example:</p> <pre data-language=\"php\">$str = 'this_string_is_entirely_too_long_and_might_break_my_design.jpg';\necho ellipsize($str, 32, .5);\n</pre> <p>Produces:</p> <pre data-language=\"php\">this_string_is_e&amp;hellip;ak_my_design.jpg\n</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/helpers/text_helper.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/helpers/text_helper.html</a>\n  </p>\n</div>\n","helpers/typography_helper":"<h1 id=\"typography-helper\">Typography Helper</h1> <p>The Typography Helper file contains functions that help your format text in semantically relevant ways.</p>  <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#loading-this-helper\" id=\"id1\">Loading this Helper</a></li> <li><a class=\"reference internal\" href=\"#available-functions\" id=\"id2\">Available Functions</a></li> </ul>   <h2 id=\"loading-this-helper\">Loading this Helper</h2> <p>This helper is loaded using the following code:</p> <pre data-language=\"php\">$this-&gt;load-&gt;helper('typography');\n</pre>   <h2 id=\"available-functions\">Available Functions</h2> <p>The following functions are available:</p> <dl class=\"function\"> <dt id=\"auto_typography\">\n<code>auto_typography($str[, $reduce_linebreaks = FALSE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> <li>\n<strong>$reduce_linebreaks</strong> (<em>bool</em>) – Whether to reduce multiple instances of double newlines to two</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">HTML-formatted typography-safe string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Formats text so that it is semantically and typographically correct HTML.</p> <p>This function is an alias for <code>CI_Typography::auto_typography()</code>. For more info, please see the <a class=\"reference internal\" href=\"../libraries/typography\">Typography Library</a> documentation.</p> <p>Usage example:</p> <pre data-language=\"php\">$string = auto_typography($string);\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Typographic formatting can be processor intensive, particularly if you have a lot of content being formatted. If you choose to use this function you may want to consider <a class=\"reference internal\" href=\"../general/caching\">caching</a> your pages.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"nl2br_except_pre\">\n<code>nl2br_except_pre($str)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">String with HTML-formatted line breaks</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Converts newlines to &lt;br /&gt; tags unless they appear within &lt;pre&gt; tags. This function is identical to the native PHP <code>nl2br()</code> function, except that it ignores &lt;pre&gt; tags.</p> <p>Usage example:</p> <pre data-language=\"php\">$string = nl2br_except_pre($string);\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"entity_decode\">\n<code>entity_decode($str, $charset = NULL)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> <li>\n<strong>$charset</strong> (<em>string</em>) – Character set</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">String with decoded HTML entities</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>This function is an alias for <code>CI_Security::entity_decode()</code>. Fore more info, please see the <a class=\"reference internal\" href=\"../libraries/security\">Security Library</a> documentation.</p> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/helpers/typography_helper.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/helpers/typography_helper.html</a>\n  </p>\n</div>\n","helpers/string_helper":"<h1 id=\"string-helper\">String Helper</h1> <p>The String Helper file contains functions that assist in working with strings.</p> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">Please note that these functions are NOT intended, nor suitable to be used for any kind of security-related logic.</p> </div>  <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#loading-this-helper\" id=\"id1\">Loading this Helper</a></li> <li><a class=\"reference internal\" href=\"#available-functions\" id=\"id2\">Available Functions</a></li> </ul>   <h2 id=\"loading-this-helper\">Loading this Helper</h2> <p>This helper is loaded using the following code:</p> <pre data-language=\"php\">$this-&gt;load-&gt;helper('string');\n</pre>   <h2 id=\"available-functions\">Available Functions</h2> <p>The following functions are available:</p> <dl class=\"function\"> <dt id=\"random_string\">\n<code>random_string([$type = 'alnum'[, $len = 8]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$type</strong> (<em>string</em>) – Randomization type</li> <li>\n<strong>$len</strong> (<em>int</em>) – Output string length</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">A random string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Generates a random string based on the type and length you specify. Useful for creating passwords or generating random hashes.</p> <p>The first parameter specifies the type of string, the second parameter specifies the length. The following choices are available:</p> <ul class=\"simple\"> <li>\n<strong>alpha</strong>: A string with lower and uppercase letters only.</li> <li>\n<strong>alnum</strong>: Alpha-numeric string with lower and uppercase characters.</li> <li>\n<strong>basic</strong>: A random number based on <code>mt_rand()</code>.</li> <li>\n<strong>numeric</strong>: Numeric string.</li> <li>\n<strong>nozero</strong>: Numeric string with no zeros.</li> <li>\n<strong>md5</strong>: An encrypted random number based on <code>md5()</code> (fixed length of 32).</li> <li>\n<strong>sha1</strong>: An encrypted random number based on <code>sha1()</code> (fixed length of 40).</li> </ul> <p>Usage example:</p> <pre data-language=\"php\">echo random_string('alnum', 16);\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Usage of the <em>unique</em> and <em>encrypt</em> types is DEPRECATED. They are just aliases for <em>md5</em> and <em>sha1</em> respectively.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"increment_string\">\n<code>increment_string($str[, $separator = '_'[, $first = 1]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> <li>\n<strong>$separator</strong> (<em>string</em>) – Separator to append a duplicate number with</li> <li>\n<strong>$first</strong> (<em>int</em>) – Starting number</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An incremented string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Increments a string by appending a number to it or increasing the number. Useful for creating “copies” or a file or duplicating database content which has unique titles or slugs.</p> <p>Usage example:</p> <pre data-language=\"php\">echo increment_string('file', '_'); // \"file_1\"\necho increment_string('file', '-', 2); // \"file-2\"\necho increment_string('file_4'); // \"file_5\"\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"alternator\">\n<code>alternator($args)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$args</strong> (<em>mixed</em>) – A variable number of arguments</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Alternated string(s)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Allows two or more items to be alternated between, when cycling through a loop. Example:</p> <pre data-language=\"php\">for ($i = 0; $i &lt; 10; $i++)\n{\n        echo alternator('string one', 'string two');\n}\n</pre> <p>You can add as many parameters as you want, and with each iteration of your loop the next item will be returned.</p> <pre data-language=\"php\">for ($i = 0; $i &lt; 10; $i++)\n{\n        echo alternator('one', 'two', 'three', 'four', 'five');\n}\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">To use multiple separate calls to this function simply call the function with no arguments to re-initialize.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"repeater\">\n<code>repeater($data[, $num = 1])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$data</strong> (<em>string</em>) – Input</li> <li>\n<strong>$num</strong> (<em>int</em>) – Number of times to repeat</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Repeated string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Generates repeating copies of the data you submit. Example:</p> <pre data-language=\"php\">$string = \"\\n\";\necho repeater($string, 30);\n</pre> <p>The above would generate 30 newlines.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This function is DEPRECATED. Use the native <code>str_repeat()</code> instead.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"reduce_double_slashes\">\n<code>reduce_double_slashes($str)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">A string with normalized slashes</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Converts double slashes in a string to a single slash, except those found in URL protocol prefixes (e.g. http&amp;#58;//).</p> <p>Example:</p> <pre data-language=\"php\">$string = \"http://example.com//index.php\";\necho reduce_double_slashes($string); // results in \"http://example.com/index.php\"\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"strip_slashes\">\n<code>strip_slashes($data)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$data</strong> (<em>mixed</em>) – Input string or an array of strings</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">String(s) with stripped slashes</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">mixed</p> </td> </tr>  </table> <p>Removes any slashes from an array of strings.</p> <p>Example:</p> <pre data-language=\"php\">$str = array(\n        'question'  =&gt; 'Is your name O\\'reilly?',\n        'answer' =&gt; 'No, my name is O\\'connor.'\n);\n\n$str = strip_slashes($str);\n</pre> <p>The above will return the following array:</p> <pre data-language=\"php\">array(\n        'question'  =&gt; \"Is your name O'reilly?\",\n        'answer' =&gt; \"No, my name is O'connor.\"\n);\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">For historical reasons, this function will also accept and handle string inputs. This however makes it just an alias for <code>stripslashes()</code>.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"trim_slashes\">\n<code>trim_slashes($str)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Slash-trimmed string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Removes any leading/trailing slashes from a string. Example:</p> <pre data-language=\"php\">$string = \"/this/that/theother/\";\necho trim_slashes($string); // results in this/that/theother\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This function is DEPRECATED. Use the native <code>trim()</code> instead: | | trim($str, ‘/’);</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"reduce_multiples\">\n<code>reduce_multiples($str[, $character = ''[, $trim = FALSE]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Text to search in</li> <li>\n<strong>$character</strong> (<em>string</em>) – Character to reduce</li> <li>\n<strong>$trim</strong> (<em>bool</em>) – Whether to also trim the specified character</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Reduced string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Reduces multiple instances of a particular character occuring directly after each other. Example:</p> <pre data-language=\"php\">$string = \"Fred, Bill,, Joe, Jimmy\";\n$string = reduce_multiples($string,\",\"); //results in \"Fred, Bill, Joe, Jimmy\"\n</pre> <p>If the third parameter is set to TRUE it will remove occurrences of the character at the beginning and the end of the string. Example:</p> <pre data-language=\"php\">$string = \",Fred, Bill,, Joe, Jimmy,\";\n$string = reduce_multiples($string, \", \", TRUE); //results in \"Fred, Bill, Joe, Jimmy\"\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"quotes_to_entities\">\n<code>quotes_to_entities($str)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">String with quotes converted to HTML entities</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Converts single and double quotes in a string to the corresponding HTML entities. Example:</p> <pre data-language=\"php\">$string = \"Joe's \\\"dinner\\\"\";\n$string = quotes_to_entities($string); //results in \"Joe&amp;#39;s &amp;quot;dinner&amp;quot;\"\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"strip_quotes\">\n<code>strip_quotes($str)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">String with quotes stripped</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Removes single and double quotes from a string. Example:</p> <pre data-language=\"php\">$string = \"Joe's \\\"dinner\\\"\";\n$string = strip_quotes($string); //results in \"Joes dinner\"\n</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/helpers/string_helper.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/helpers/string_helper.html</a>\n  </p>\n</div>\n","helpers/form_helper":"<h1 id=\"form-helper\">Form Helper</h1> <p>The Form Helper file contains functions that assist in working with forms.</p>  <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#loading-this-helper\" id=\"id1\">Loading this Helper</a></li> <li><a class=\"reference internal\" href=\"#escaping-field-values\" id=\"id2\">Escaping field values</a></li> <li><a class=\"reference internal\" href=\"#available-functions\" id=\"id3\">Available Functions</a></li> </ul>   <h2 id=\"loading-this-helper\">Loading this Helper</h2> <p>This helper is loaded using the following code:</p> <pre data-language=\"php\">$this-&gt;load-&gt;helper('form');\n</pre>   <h2 id=\"escaping-field-values\">Escaping field values</h2> <p>You may need to use HTML and characters such as quotes within your form elements. In order to do that safely, you’ll need to use <a class=\"reference internal\" href=\"../general/common_functions\">common function</a> <code>html_escape()</code>.</p> <p>Consider the following example:</p> <pre data-language=\"php\">$string = 'Here is a string containing \"quoted\" text.';\n\n&lt;input type=\"text\" name=\"myfield\" value=\"&lt;?php echo $string; ?&gt;\" /&gt;\n</pre> <p>Since the above string contains a set of quotes, it will cause the form to break. The <a class=\"reference internal\" href=\"../general/common_functions#html_escape\" title=\"html_escape\"><code>html_escape()</code></a> function converts HTML special characters so that it can be used safely:</p> <pre data-language=\"php\">&lt;input type=\"text\" name=\"myfield\" value=\"&lt;?php echo html_escape($string); ?&gt;\" /&gt;\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If you use any of the form helper functions listed on this page, the form values will be automatically escaped, so there is no need to call this function. Use it only if you are creating your own form elements.</p> </div>   <h2 id=\"available-functions\">Available Functions</h2> <p>The following functions are available:</p> <dl class=\"function\"> <dt id=\"form_open\">\n<code>form_open([$action = ''[, $attributes = ''[, $hidden = array()]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$action</strong> (<em>string</em>) – Form action/target URI string</li> <li>\n<strong>$attributes</strong> (<em>array</em>) – HTML attributes</li> <li>\n<strong>$hidden</strong> (<em>array</em>) – An array of hidden fields’ definitions</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An HTML form opening tag</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Creates an opening form tag with a base URL <strong>built from your config preferences</strong>. It will optionally let you add form attributes and hidden input fields, and will always add the <cite>accept-charset</cite> attribute based on the charset value in your config file.</p> <p>The main benefit of using this tag rather than hard coding your own HTML is that it permits your site to be more portable in the event your URLs ever change.</p> <p>Here’s a simple example:</p> <pre data-language=\"php\">echo form_open('email/send');\n</pre> <p>The above example would create a form that points to your base URL plus the “email/send” URI segments, like this:</p> <pre data-language=\"php\">&lt;form method=\"post\" accept-charset=\"utf-8\" action=\"http://example.com/index.php/email/send\"&gt;\n</pre> <p><strong>Adding Attributes</strong></p>  <p>Attributes can be added by passing an associative array to the second parameter, like this:</p> <pre data-language=\"php\">$attributes = array('class' =&gt; 'email', 'id' =&gt; 'myform');\necho form_open('email/send', $attributes);\n</pre> <p>Alternatively, you can specify the second parameter as a string:</p> <pre data-language=\"php\">echo form_open('email/send', 'class=\"email\" id=\"myform\"');\n</pre> <p>The above examples would create a form similar to this:</p> <pre data-language=\"php\">&lt;form method=\"post\" accept-charset=\"utf-8\" action=\"http://example.com/index.php/email/send\" class=\"email\" id=\"myform\"&gt;\n</pre>  <p><strong>Adding Hidden Input Fields</strong></p>  <p>Hidden fields can be added by passing an associative array to the third parameter, like this:</p> <pre data-language=\"php\">$hidden = array('username' =&gt; 'Joe', 'member_id' =&gt; '234');\necho form_open('email/send', '', $hidden);\n</pre> <p>You can skip the second parameter by passing any falsy value to it.</p> <p>The above example would create a form similar to this:</p> <pre data-language=\"php\">&lt;form method=\"post\" accept-charset=\"utf-8\" action=\"http://example.com/index.php/email/send\"&gt;\n        &lt;input type=\"hidden\" name=\"username\" value=\"Joe\" /&gt;\n        &lt;input type=\"hidden\" name=\"member_id\" value=\"234\" /&gt;\n</pre>  </dd>\n</dl> <dl class=\"function\"> <dt id=\"form_open_multipart\">\n<code>form_open_multipart([$action = ''[, $attributes = array()[, $hidden = array()]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$action</strong> (<em>string</em>) – Form action/target URI string</li> <li>\n<strong>$attributes</strong> (<em>array</em>) – HTML attributes</li> <li>\n<strong>$hidden</strong> (<em>array</em>) – An array of hidden fields’ definitions</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An HTML multipart form opening tag</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>This function is absolutely identical to <a class=\"reference internal\" href=\"#form_open\" title=\"form_open\"><code>form_open()</code></a> above, except that it adds a <em>multipart</em> attribute, which is necessary if you would like to use the form to upload files with.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"form_hidden\">\n<code>form_hidden($name[, $value = ''])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$name</strong> (<em>string</em>) – Field name</li> <li>\n<strong>$value</strong> (<em>string</em>) – Field value</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An HTML hidden input field tag</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Lets you generate hidden input fields. You can either submit a name/value string to create one field:</p> <pre data-language=\"php\">form_hidden('username', 'johndoe');\n// Would produce: &lt;input type=\"hidden\" name=\"username\" value=\"johndoe\" /&gt;\n</pre> <p>... or you can submit an associative array to create multiple fields:</p> <pre data-language=\"php\">$data = array(\n        'name'  =&gt; 'John Doe',\n        'email' =&gt; '[email protected]',\n        'url'   =&gt; 'http://example.com'\n);\n\necho form_hidden($data);\n\n/*\n        Would produce:\n        &lt;input type=\"hidden\" name=\"name\" value=\"John Doe\" /&gt;\n        &lt;input type=\"hidden\" name=\"email\" value=\"[email protected]\" /&gt;\n        &lt;input type=\"hidden\" name=\"url\" value=\"http://example.com\" /&gt;\n*/\n</pre> <p>You can also pass an associative array to the value field:</p> <pre data-language=\"php\">$data = array(\n        'name'  =&gt; 'John Doe',\n        'email' =&gt; '[email protected]',\n        'url'   =&gt; 'http://example.com'\n);\n\necho form_hidden('my_array', $data);\n\n/*\n        Would produce:\n\n        &lt;input type=\"hidden\" name=\"my_array[name]\" value=\"John Doe\" /&gt;\n        &lt;input type=\"hidden\" name=\"my_array[email]\" value=\"[email protected]\" /&gt;\n        &lt;input type=\"hidden\" name=\"my_array[url]\" value=\"http://example.com\" /&gt;\n*/\n</pre> <p>If you want to create hidden input fields with extra attributes:</p> <pre data-language=\"php\">$data = array(\n        'type'  =&gt; 'hidden',\n        'name'  =&gt; 'email',\n        'id'    =&gt; 'hiddenemail',\n        'value' =&gt; '[email protected]',\n        'class' =&gt; 'hiddenemail'\n);\n\necho form_input($data);\n\n/*\n        Would produce:\n\n        &lt;input type=\"hidden\" name=\"email\" value=\"[email protected]\" id=\"hiddenemail\" class=\"hiddenemail\" /&gt;\n*/\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"form_input\">\n<code>form_input([$data = ''[, $value = ''[, $extra = '']]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$data</strong> (<em>array</em>) – Field attributes data</li> <li>\n<strong>$value</strong> (<em>string</em>) – Field value</li> <li>\n<strong>$extra</strong> (<em>mixed</em>) – Extra attributes to be added to the tag either as an array or a literal string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An HTML text input field tag</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Lets you generate a standard text input field. You can minimally pass the field name and value in the first and second parameter:</p> <pre data-language=\"php\">echo form_input('username', 'johndoe');\n</pre> <p>Or you can pass an associative array containing any data you wish your form to contain:</p> <pre data-language=\"php\">$data = array(\n        'name'          =&gt; 'username',\n        'id'            =&gt; 'username',\n        'value'         =&gt; 'johndoe',\n        'maxlength'     =&gt; '100',\n        'size'          =&gt; '50',\n        'style'         =&gt; 'width:50%'\n);\n\necho form_input($data);\n\n/*\n        Would produce:\n\n        &lt;input type=\"text\" name=\"username\" value=\"johndoe\" id=\"username\" maxlength=\"100\" size=\"50\" style=\"width:50%\"  /&gt;\n*/\n</pre> <p>If you would like your form to contain some additional data, like JavaScript, you can pass it as a string in the third parameter:</p> <pre data-language=\"php\">$js = 'onClick=\"some_function()\"';\necho form_input('username', 'johndoe', $js);\n</pre> <p>Or you can pass it as an array:</p> <pre data-language=\"php\">$js = array('onClick' =&gt; 'some_function();');\necho form_input('username', 'johndoe', $js);\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"form_password\">\n<code>form_password([$data = ''[, $value = ''[, $extra = '']]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$data</strong> (<em>array</em>) – Field attributes data</li> <li>\n<strong>$value</strong> (<em>string</em>) – Field value</li> <li>\n<strong>$extra</strong> (<em>mixed</em>) – Extra attributes to be added to the tag either as an array or a literal string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An HTML password input field tag</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>This function is identical in all respects to the <a class=\"reference internal\" href=\"#form_input\" title=\"form_input\"><code>form_input()</code></a> function above except that it uses the “password” input type.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"form_upload\">\n<code>form_upload([$data = ''[, $value = ''[, $extra = '']]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$data</strong> (<em>array</em>) – Field attributes data</li> <li>\n<strong>$value</strong> (<em>string</em>) – Field value</li> <li>\n<strong>$extra</strong> (<em>mixed</em>) – Extra attributes to be added to the tag either as an array or a literal string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An HTML file upload input field tag</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>This function is identical in all respects to the <a class=\"reference internal\" href=\"#form_input\" title=\"form_input\"><code>form_input()</code></a> function above except that it uses the “file” input type, allowing it to be used to upload files.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"form_textarea\">\n<code>form_textarea([$data = ''[, $value = ''[, $extra = '']]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$data</strong> (<em>array</em>) – Field attributes data</li> <li>\n<strong>$value</strong> (<em>string</em>) – Field value</li> <li>\n<strong>$extra</strong> (<em>mixed</em>) – Extra attributes to be added to the tag either as an array or a literal string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An HTML textarea tag</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>This function is identical in all respects to the <a class=\"reference internal\" href=\"#form_input\" title=\"form_input\"><code>form_input()</code></a> function above except that it generates a “textarea” type.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Instead of the <em>maxlength</em> and <em>size</em> attributes in the above example, you will instead specify <em>rows</em> and <em>cols</em>.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"form_dropdown\">\n<code>form_dropdown([$name = ''[, $options = array()[, $selected = array()[, $extra = '']]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$name</strong> (<em>string</em>) – Field name</li> <li>\n<strong>$options</strong> (<em>array</em>) – An associative array of options to be listed</li> <li>\n<strong>$selected</strong> (<em>array</em>) – List of fields to mark with the <em>selected</em> attribute</li> <li>\n<strong>$extra</strong> (<em>mixed</em>) – Extra attributes to be added to the tag either as an array or a literal string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An HTML dropdown select field tag</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Lets you create a standard drop-down field. The first parameter will contain the name of the field, the second parameter will contain an associative array of options, and the third parameter will contain the value you wish to be selected. You can also pass an array of multiple items through the third parameter, and CodeIgniter will create a multiple select for you.</p> <p>Example:</p> <pre data-language=\"php\">$options = array(\n        'small'         =&gt; 'Small Shirt',\n        'med'           =&gt; 'Medium Shirt',\n        'large'         =&gt; 'Large Shirt',\n        'xlarge'        =&gt; 'Extra Large Shirt',\n);\n\n$shirts_on_sale = array('small', 'large');\necho form_dropdown('shirts', $options, 'large');\n\n/*\n        Would produce:\n\n        &lt;select name=\"shirts\"&gt;\n                &lt;option value=\"small\"&gt;Small Shirt&lt;/option&gt;\n                &lt;option value=\"med\"&gt;Medium  Shirt&lt;/option&gt;\n                &lt;option value=\"large\" selected=\"selected\"&gt;Large Shirt&lt;/option&gt;\n                &lt;option value=\"xlarge\"&gt;Extra Large Shirt&lt;/option&gt;\n        &lt;/select&gt;\n*/\n\necho form_dropdown('shirts', $options, $shirts_on_sale);\n\n/*\n        Would produce:\n\n        &lt;select name=\"shirts\" multiple=\"multiple\"&gt;\n                &lt;option value=\"small\" selected=\"selected\"&gt;Small Shirt&lt;/option&gt;\n                &lt;option value=\"med\"&gt;Medium  Shirt&lt;/option&gt;\n                &lt;option value=\"large\" selected=\"selected\"&gt;Large Shirt&lt;/option&gt;\n                &lt;option value=\"xlarge\"&gt;Extra Large Shirt&lt;/option&gt;\n        &lt;/select&gt;\n*/\n</pre> <p>If you would like the opening &lt;select&gt; to contain additional data, like an id attribute or JavaScript, you can pass it as a string in the fourth parameter:</p> <pre data-language=\"php\">$js = 'id=\"shirts\" onChange=\"some_function();\"';\necho form_dropdown('shirts', $options, 'large', $js);\n</pre> <p>Or you can pass it as an array:</p> <pre data-language=\"php\">$js = array(\n        'id'       =&gt; 'shirts',\n        'onChange' =&gt; 'some_function();'\n);\necho form_dropdown('shirts', $options, 'large', $js);\n</pre> <p>If the array passed as <code>$options</code> is a multidimensional array, then <code>form_dropdown()</code> will produce an &lt;optgroup&gt; with the array key as the label.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"form_multiselect\">\n<code>form_multiselect([$name = ''[, $options = array()[, $selected = array()[, $extra = '']]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$name</strong> (<em>string</em>) – Field name</li> <li>\n<strong>$options</strong> (<em>array</em>) – An associative array of options to be listed</li> <li>\n<strong>$selected</strong> (<em>array</em>) – List of fields to mark with the <em>selected</em> attribute</li> <li>\n<strong>$extra</strong> (<em>mixed</em>) – Extra attributes to be added to the tag either as an array or a literal string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An HTML dropdown multiselect field tag</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Lets you create a standard multiselect field. The first parameter will contain the name of the field, the second parameter will contain an associative array of options, and the third parameter will contain the value or values you wish to be selected.</p> <p>The parameter usage is identical to using <a class=\"reference internal\" href=\"#form_dropdown\" title=\"form_dropdown\"><code>form_dropdown()</code></a> above, except of course that the name of the field will need to use POST array syntax, e.g. foo[].</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"form_fieldset\">\n<code>form_fieldset([$legend_text = ''[, $attributes = array()]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$legend_text</strong> (<em>string</em>) – Text to put in the &lt;legend&gt; tag</li> <li>\n<strong>$attributes</strong> (<em>array</em>) – Attributes to be set on the &lt;fieldset&gt; tag</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An HTML fieldset opening tag</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Lets you generate fieldset/legend fields.</p> <p>Example:</p> <pre data-language=\"php\">echo form_fieldset('Address Information');\necho \"&lt;p&gt;fieldset content here&lt;/p&gt;\\n\";\necho form_fieldset_close();\n\n/*\n        Produces:\n\n                &lt;fieldset&gt;\n                        &lt;legend&gt;Address Information&lt;/legend&gt;\n                                &lt;p&gt;form content here&lt;/p&gt;\n                &lt;/fieldset&gt;\n*/\n</pre> <p>Similar to other functions, you can submit an associative array in the second parameter if you prefer to set additional attributes:</p> <pre data-language=\"php\">$attributes = array(\n        'id'    =&gt; 'address_info',\n        'class' =&gt; 'address_info'\n);\n\necho form_fieldset('Address Information', $attributes);\necho \"&lt;p&gt;fieldset content here&lt;/p&gt;\\n\";\necho form_fieldset_close();\n\n/*\n        Produces:\n\n        &lt;fieldset id=\"address_info\" class=\"address_info\"&gt;\n                &lt;legend&gt;Address Information&lt;/legend&gt;\n                &lt;p&gt;form content here&lt;/p&gt;\n        &lt;/fieldset&gt;\n*/\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"form_fieldset_close\">\n<code>form_fieldset_close([$extra = ''])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$extra</strong> (<em>string</em>) – Anything to append after the closing tag, <em>as is</em>\n</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An HTML fieldset closing tag</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Produces a closing &lt;/fieldset&gt; tag. The only advantage to using this function is it permits you to pass data to it which will be added below the tag. For example</p> <pre data-language=\"php\">$string = '&lt;/div&gt;&lt;/div&gt;';\necho form_fieldset_close($string);\n// Would produce: &lt;/fieldset&gt;&lt;/div&gt;&lt;/div&gt;\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"form_checkbox\">\n<code>form_checkbox([$data = ''[, $value = ''[, $checked = FALSE[, $extra = '']]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$data</strong> (<em>array</em>) – Field attributes data</li> <li>\n<strong>$value</strong> (<em>string</em>) – Field value</li> <li>\n<strong>$checked</strong> (<em>bool</em>) – Whether to mark the checkbox as being <em>checked</em>\n</li> <li>\n<strong>$extra</strong> (<em>mixed</em>) – Extra attributes to be added to the tag either as an array or a literal string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An HTML checkbox input tag</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Lets you generate a checkbox field. Simple example:</p> <pre data-language=\"php\">echo form_checkbox('newsletter', 'accept', TRUE);\n// Would produce:  &lt;input type=\"checkbox\" name=\"newsletter\" value=\"accept\" checked=\"checked\" /&gt;\n</pre> <p>The third parameter contains a boolean TRUE/FALSE to determine whether the box should be checked or not.</p> <p>Similar to the other form functions in this helper, you can also pass an array of attributes to the function:</p> <pre data-language=\"php\">$data = array(\n        'name'          =&gt; 'newsletter',\n        'id'            =&gt; 'newsletter',\n        'value'         =&gt; 'accept',\n        'checked'       =&gt; TRUE,\n        'style'         =&gt; 'margin:10px'\n);\n\necho form_checkbox($data);\n// Would produce: &lt;input type=\"checkbox\" name=\"newsletter\" id=\"newsletter\" value=\"accept\" checked=\"checked\" style=\"margin:10px\" /&gt;\n</pre> <p>Also as with other functions, if you would like the tag to contain additional data like JavaScript, you can pass it as a string in the fourth parameter:</p> <pre data-language=\"php\">$js = 'onClick=\"some_function()\"';\necho form_checkbox('newsletter', 'accept', TRUE, $js);\n</pre> <p>Or you can pass it as an array:</p> <pre data-language=\"php\">$js = array('onClick' =&gt; 'some_function();');\necho form_checkbox('newsletter', 'accept', TRUE, $js);\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"form_radio\">\n<code>form_radio([$data = ''[, $value = ''[, $checked = FALSE[, $extra = '']]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$data</strong> (<em>array</em>) – Field attributes data</li> <li>\n<strong>$value</strong> (<em>string</em>) – Field value</li> <li>\n<strong>$checked</strong> (<em>bool</em>) – Whether to mark the radio button as being <em>checked</em>\n</li> <li>\n<strong>$extra</strong> (<em>mixed</em>) – Extra attributes to be added to the tag either as an array or a literal string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An HTML radio input tag</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>This function is identical in all respects to the <a class=\"reference internal\" href=\"#form_checkbox\" title=\"form_checkbox\"><code>form_checkbox()</code></a> function above except that it uses the “radio” input type.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"form_label\">\n<code>form_label([$label_text = ''[, $id = ''[, $attributes = array()]]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$label_text</strong> (<em>string</em>) – Text to put in the &lt;label&gt; tag</li> <li>\n<strong>$id</strong> (<em>string</em>) – ID of the form element that we’re making a label for</li> <li>\n<strong>$attributes</strong> (<em>string</em>) – HTML attributes</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An HTML field label tag</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Lets you generate a &lt;label&gt;. Simple example:</p> <pre data-language=\"php\">echo form_label('What is your Name', 'username');\n// Would produce:  &lt;label for=\"username\"&gt;What is your Name&lt;/label&gt;\n</pre> <p>Similar to other functions, you can submit an associative array in the third parameter if you prefer to set additional attributes.</p> <p>Example:</p> <pre data-language=\"php\">$attributes = array(\n        'class' =&gt; 'mycustomclass',\n        'style' =&gt; 'color: #000;'\n);\n\necho form_label('What is your Name', 'username', $attributes);\n// Would produce:  &lt;label for=\"username\" class=\"mycustomclass\" style=\"color: #000;\"&gt;What is your Name&lt;/label&gt;\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"form_submit\">\n<code>form_submit([$data = ''[, $value = ''[, $extra = '']]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$data</strong> (<em>string</em>) – Button name</li> <li>\n<strong>$value</strong> (<em>string</em>) – Button value</li> <li>\n<strong>$extra</strong> (<em>mixed</em>) – Extra attributes to be added to the tag either as an array or a literal string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An HTML input submit tag</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Lets you generate a standard submit button. Simple example:</p> <pre data-language=\"php\">echo form_submit('mysubmit', 'Submit Post!');\n// Would produce:  &lt;input type=\"submit\" name=\"mysubmit\" value=\"Submit Post!\" /&gt;\n</pre> <p>Similar to other functions, you can submit an associative array in the first parameter if you prefer to set your own attributes. The third parameter lets you add extra data to your form, like JavaScript.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"form_reset\">\n<code>form_reset([$data = ''[, $value = ''[, $extra = '']]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$data</strong> (<em>string</em>) – Button name</li> <li>\n<strong>$value</strong> (<em>string</em>) – Button value</li> <li>\n<strong>$extra</strong> (<em>mixed</em>) – Extra attributes to be added to the tag either as an array or a literal string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An HTML input reset button tag</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Lets you generate a standard reset button. Use is identical to <code>form_submit()</code>.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"form_button\">\n<code>form_button([$data = ''[, $content = ''[, $extra = '']]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$data</strong> (<em>string</em>) – Button name</li> <li>\n<strong>$content</strong> (<em>string</em>) – Button label</li> <li>\n<strong>$extra</strong> (<em>mixed</em>) – Extra attributes to be added to the tag either as an array or a literal string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An HTML button tag</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Lets you generate a standard button element. You can minimally pass the button name and content in the first and second parameter:</p> <pre data-language=\"php\">echo form_button('name','content');\n// Would produce: &lt;button name=\"name\" type=\"button\"&gt;Content&lt;/button&gt;\n</pre> <p>Or you can pass an associative array containing any data you wish your form to contain:</p> <pre data-language=\"php\">$data = array(\n        'name'          =&gt; 'button',\n        'id'            =&gt; 'button',\n        'value'         =&gt; 'true',\n        'type'          =&gt; 'reset',\n        'content'       =&gt; 'Reset'\n);\n\necho form_button($data);\n// Would produce: &lt;button name=\"button\" id=\"button\" value=\"true\" type=\"reset\"&gt;Reset&lt;/button&gt;\n</pre> <p>If you would like your form to contain some additional data, like JavaScript, you can pass it as a string in the third parameter:</p> <pre data-language=\"php\">$js = 'onClick=\"some_function()\"';\necho form_button('mybutton', 'Click Me', $js);\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"form_close\">\n<code>form_close([$extra = ''])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$extra</strong> (<em>string</em>) – Anything to append after the closing tag, <em>as is</em>\n</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">An HTML form closing tag</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Produces a closing &lt;/form&gt; tag. The only advantage to using this function is it permits you to pass data to it which will be added below the tag. For example:</p> <pre data-language=\"php\">$string = '&lt;/div&gt;&lt;/div&gt;';\necho form_close($string);\n// Would produce:  &lt;/form&gt; &lt;/div&gt;&lt;/div&gt;\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"set_value\">\n<code>set_value($field[, $default = ''[, $html_escape = TRUE]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$field</strong> (<em>string</em>) – Field name</li> <li>\n<strong>$default</strong> (<em>string</em>) – Default value</li> <li>\n<strong>$html_escape</strong> (<em>bool</em>) – Whether to turn off HTML escaping of the value</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Field value</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Permits you to set the value of an input form or textarea. You must supply the field name via the first parameter of the function. The second (optional) parameter allows you to set a default value for the form. The third (optional) parameter allows you to turn off HTML escaping of the value, in case you need to use this function in combination with i.e. <a class=\"reference internal\" href=\"#form_input\" title=\"form_input\"><code>form_input()</code></a> and avoid double-escaping.</p> <p>Example:</p> <pre data-language=\"php\">&lt;input type=\"text\" name=\"quantity\" value=\"&lt;?php echo set_value('quantity', '0'); ?&gt;\" size=\"50\" /&gt;\n</pre> <p>The above form will show “0” when loaded for the first time.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If you’ve loaded the <a class=\"reference internal\" href=\"../libraries/form_validation\">Form Validation Library</a> and have set a validation rule for the field name in use with this helper, then it will forward the call to the <a class=\"reference internal\" href=\"../libraries/form_validation\">Form Validation Library</a>‘s own <code>set_value()</code> method. Otherwise, this function looks in <code>$_POST</code> for the field value.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"set_select\">\n<code>set_select($field[, $value = ''[, $default = FALSE]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$field</strong> (<em>string</em>) – Field name</li> <li>\n<strong>$value</strong> (<em>string</em>) – Value to check for</li> <li>\n<strong>$default</strong> (<em>string</em>) – Whether the value is also a default one</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">‘selected’ attribute or an empty string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>If you use a &lt;select&gt; menu, this function permits you to display the menu item that was selected.</p> <p>The first parameter must contain the name of the select menu, the second parameter must contain the value of each item, and the third (optional) parameter lets you set an item as the default (use boolean TRUE/FALSE).</p> <p>Example:</p> <pre data-language=\"php\">&lt;select name=\"myselect\"&gt;\n        &lt;option value=\"one\" &lt;?php echo  set_select('myselect', 'one', TRUE); ?&gt; &gt;One&lt;/option&gt;\n        &lt;option value=\"two\" &lt;?php echo  set_select('myselect', 'two'); ?&gt; &gt;Two&lt;/option&gt;\n        &lt;option value=\"three\" &lt;?php echo  set_select('myselect', 'three'); ?&gt; &gt;Three&lt;/option&gt;\n&lt;/select&gt;\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"set_checkbox\">\n<code>set_checkbox($field[, $value = ''[, $default = FALSE]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$field</strong> (<em>string</em>) – Field name</li> <li>\n<strong>$value</strong> (<em>string</em>) – Value to check for</li> <li>\n<strong>$default</strong> (<em>string</em>) – Whether the value is also a default one</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">‘checked’ attribute or an empty string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Permits you to display a checkbox in the state it was submitted.</p> <p>The first parameter must contain the name of the checkbox, the second parameter must contain its value, and the third (optional) parameter lets you set an item as the default (use boolean TRUE/FALSE).</p> <p>Example:</p> <pre data-language=\"php\">&lt;input type=\"checkbox\" name=\"mycheck\" value=\"1\" &lt;?php echo set_checkbox('mycheck', '1'); ?&gt; /&gt;\n&lt;input type=\"checkbox\" name=\"mycheck\" value=\"2\" &lt;?php echo set_checkbox('mycheck', '2'); ?&gt; /&gt;\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"set_radio\">\n<code>set_radio($field[, $value = ''[, $default = FALSE]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$field</strong> (<em>string</em>) – Field name</li> <li>\n<strong>$value</strong> (<em>string</em>) – Value to check for</li> <li>\n<strong>$default</strong> (<em>string</em>) – Whether the value is also a default one</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">‘checked’ attribute or an empty string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Permits you to display radio buttons in the state they were submitted. This function is identical to the <a class=\"reference internal\" href=\"#set_checkbox\" title=\"set_checkbox\"><code>set_checkbox()</code></a> function above.</p> <p>Example:</p> <pre data-language=\"php\">&lt;input type=\"radio\" name=\"myradio\" value=\"1\" &lt;?php echo  set_radio('myradio', '1', TRUE); ?&gt; /&gt;\n&lt;input type=\"radio\" name=\"myradio\" value=\"2\" &lt;?php echo  set_radio('myradio', '2'); ?&gt; /&gt;\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If you are using the Form Validation class, you must always specify a rule for your field, even if empty, in order for the <code>set_*()</code> functions to work. This is because if a Form Validation object is defined, the control for <code>set_*()</code> is handed over to a method of the class instead of the generic helper function.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"form_error\">\n<code>form_error([$field = ''[, $prefix = ''[, $suffix = '']]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$field</strong> (<em>string</em>) – Field name</li> <li>\n<strong>$prefix</strong> (<em>string</em>) – Error opening tag</li> <li>\n<strong>$suffix</strong> (<em>string</em>) – Error closing tag</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">HTML-formatted form validation error message(s)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Returns a validation error message from the <a class=\"reference internal\" href=\"../libraries/form_validation\">Form Validation Library</a>, associated with the specified field name. You can optionally specify opening and closing tag(s) to put around the error message.</p> <p>Example:</p> <pre data-language=\"php\">// Assuming that the 'username' field value was incorrect:\necho form_error('myfield', '&lt;div class=\"error\"&gt;', '&lt;/div&gt;');\n\n// Would produce: &lt;div class=\"error\"&gt;Error message associated with the \"username\" field.&lt;/div&gt;\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"validation_errors\">\n<code>validation_errors([$prefix = ''[, $suffix = '']])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$prefix</strong> (<em>string</em>) – Error opening tag</li> <li>\n<strong>$suffix</strong> (<em>string</em>) – Error closing tag</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">HTML-formatted form validation error message(s)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Similarly to the <a class=\"reference internal\" href=\"#form_error\" title=\"form_error\"><code>form_error()</code></a> function, returns all validation error messages produced by the <a class=\"reference internal\" href=\"../libraries/form_validation\">Form Validation Library</a>, with optional opening and closing tags around each of the messages.</p> <p>Example:</p> <pre data-language=\"php\">echo validation_errors('&lt;span class=\"error\"&gt;', '&lt;/span&gt;');\n\n/*\n        Would produce, e.g.:\n\n        &lt;span class=\"error\"&gt;The \"email\" field doesn't contain a valid e-mail address!&lt;/span&gt;\n        &lt;span class=\"error\"&gt;The \"password\" field doesn't match the \"repeat_password\" field!&lt;/span&gt;\n\n */\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"form_prep\">\n<code>form_prep($str)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Value to escape</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Escaped value</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Allows you to safely use HTML and characters such as quotes within form elements without breaking out of the form.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If you use any of the form helper functions listed in this page the form values will be prepped automatically, so there is no need to call this function. Use it only if you are creating your own form elements.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">This function is DEPRECATED and is just an alias for <a class=\"reference internal\" href=\"../general/common_functions\">common function</a> <code>html_escape()</code> - please use that instead.</p> </div> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/helpers/form_helper.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/helpers/form_helper.html</a>\n  </p>\n</div>\n","helpers/xml_helper":"<h1 id=\"xml-helper\">XML Helper</h1> <p>The XML Helper file contains functions that assist in working with XML data.</p>  <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#loading-this-helper\" id=\"id1\">Loading this Helper</a></li> <li><a class=\"reference internal\" href=\"#available-functions\" id=\"id2\">Available Functions</a></li> </ul>   <h2 id=\"loading-this-helper\">Loading this Helper</h2> <p>This helper is loaded using the following code</p> <pre data-language=\"php\">$this-&gt;load-&gt;helper('xml');\n</pre>   <h2 id=\"available-functions\">Available Functions</h2> <p>The following functions are available:</p> <dl class=\"function\"> <dt id=\"xml_convert\">\n<code>xml_convert($str[, $protect_all = FALSE])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – the text string to convert</li> <li>\n<strong>$protect_all</strong> (<em>bool</em>) – Whether to protect all content that looks like a potential entity instead of just numbered entities, e.g. &amp;foo;</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">XML-converted string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Takes a string as input and converts the following reserved XML characters to entities:</p>  <ul class=\"simple\"> <li>Ampersands: &amp;</li> <li>Less than and greater than characters: &lt; &gt;</li> <li>Single and double quotes: ‘ “</li> <li>Dashes: -</li> </ul>  <p>This function ignores ampersands if they are part of existing numbered character entities, e.g. &amp;#123;. Example:</p> <pre data-language=\"php\">$string = '&lt;p&gt;Here is a paragraph &amp; an entity (&amp;#123;).&lt;/p&gt;';\n$string = xml_convert($string);\necho $string;\n</pre> <p>outputs:</p> <pre data-language=\"html\">&amp;lt;p&amp;gt;Here is a paragraph &amp;amp; an entity (&amp;#123;).&amp;lt;/p&amp;gt;\n</pre> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/helpers/xml_helper.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/helpers/xml_helper.html</a>\n  </p>\n</div>\n","helpers/url_helper":"<h1 id=\"url-helper\">URL Helper</h1> <p>The URL Helper file contains functions that assist in working with URLs.</p>  <ul class=\"simple\"> <li><a class=\"reference internal\" href=\"#loading-this-helper\" id=\"id1\">Loading this Helper</a></li> <li><a class=\"reference internal\" href=\"#available-functions\" id=\"id2\">Available Functions</a></li> </ul>   <h2 id=\"loading-this-helper\">Loading this Helper</h2> <p>This helper is loaded using the following code:</p> <pre data-language=\"php\">$this-&gt;load-&gt;helper('url');\n</pre>   <h2 id=\"available-functions\">Available Functions</h2> <p>The following functions are available:</p> <dl class=\"function\"> <dt id=\"site_url\">\n<code>site_url([$uri = ''[, $protocol = NULL]])</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$uri</strong> (<em>string</em>) – URI string</li> <li>\n<strong>$protocol</strong> (<em>string</em>) – Protocol, e.g. ‘http’ or ‘https’</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Site URL</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Returns your site URL, as specified in your config file. The index.php file (or whatever you have set as your site <strong>index_page</strong> in your config file) will be added to the URL, as will any URI segments you pass to the function, plus the <strong>url_suffix</strong> as set in your config file.</p> <p>You are encouraged to use this function any time you need to generate a local URL so that your pages become more portable in the event your URL changes.</p> <p>Segments can be optionally passed to the function as a string or an array. Here is a string example:</p> <pre data-language=\"php\">echo site_url('news/local/123');\n</pre> <p>The above example would return something like: <em>http://example.com/index.php/news/local/123</em></p> <p>Here is an example of segments passed as an array:</p> <pre data-language=\"php\">$segments = array('news', 'local', '123');\necho site_url($segments);\n</pre> <p>This function is an alias for <code>CI_Config::site_url()</code>. For more info, please see the <a class=\"reference internal\" href=\"../libraries/config\">Config Library</a> documentation.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"base_url\">\n<code>base_url($uri = '', $protocol = NULL)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$uri</strong> (<em>string</em>) – URI string</li> <li>\n<strong>$protocol</strong> (<em>string</em>) – Protocol, e.g. ‘http’ or ‘https’</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Base URL</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Returns your site base URL, as specified in your config file. Example:</p> <pre data-language=\"php\">echo base_url();\n</pre> <p>This function returns the same thing as <a class=\"reference internal\" href=\"#site_url\" title=\"site_url\"><code>site_url()</code></a>, without the <em>index_page</em> or <em>url_suffix</em> being appended.</p> <p>Also like <a class=\"reference internal\" href=\"#site_url\" title=\"site_url\"><code>site_url()</code></a>, you can supply segments as a string or an array. Here is a string example:</p> <pre data-language=\"php\">echo base_url(\"blog/post/123\");\n</pre> <p>The above example would return something like: <em>http://example.com/blog/post/123</em></p> <p>This is useful because unlike <a class=\"reference internal\" href=\"#site_url\" title=\"site_url\"><code>site_url()</code></a>, you can supply a string to a file, such as an image or stylesheet. For example:</p> <pre data-language=\"php\">echo base_url(\"images/icons/edit.png\");\n</pre> <p>This would give you something like: <em>http://example.com/images/icons/edit.png</em></p> <p>This function is an alias for <code>CI_Config::base_url()</code>. For more info, please see the <a class=\"reference internal\" href=\"../libraries/config\">Config Library</a> documentation.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"current_url\">\n<code>current_url()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">The current URL</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">string</td> </tr>  </table> <p>Returns the full URL (including segments) of the page being currently viewed.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Calling this function is the same as doing this: | | site_url(uri_string());</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"uri_string\">\n<code>uri_string()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">An URI string</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">string</td> </tr>  </table> <p>Returns the URI segments of any page that contains this function. For example, if your URL was this:</p> <pre data-language=\"php\">http://some-site.com/blog/comments/123\n</pre> <p>The function would return:</p> <pre data-language=\"php\">blog/comments/123\n</pre> <p>This function is an alias for <code>CI_Config::uri_string()</code>. For more info, please see the <a class=\"reference internal\" href=\"../libraries/config\">Config Library</a> documentation.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"index_page\">\n<code>index_page()</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">‘index_page’ value</td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">mixed</td> </tr>  </table> <p>Returns your site <strong>index_page</strong>, as specified in your config file. Example:</p> <pre data-language=\"php\">echo index_page();\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"anchor\">\n<code>anchor($uri = '', $title = '', $attributes = '')</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$uri</strong> (<em>string</em>) – URI string</li> <li>\n<strong>$title</strong> (<em>string</em>) – Anchor title</li> <li>\n<strong>$attributes</strong> (<em>mixed</em>) – HTML attributes</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">HTML hyperlink (anchor tag)</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Creates a standard HTML anchor link based on your local site URL.</p> <p>The first parameter can contain any segments you wish appended to the URL. As with the <a class=\"reference internal\" href=\"#site_url\" title=\"site_url\"><code>site_url()</code></a> function above, segments can be a string or an array.</p> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">If you are building links that are internal to your application do not include the base URL (http&amp;#58;//...). This will be added automatically from the information specified in your config file. Include only the URI segments you wish appended to the URL.</p> </div> <p>The second segment is the text you would like the link to say. If you leave it blank, the URL will be used.</p> <p>The third parameter can contain a list of attributes you would like added to the link. The attributes can be a simple string or an associative array.</p> <p>Here are some examples:</p> <pre data-language=\"php\">echo anchor('news/local/123', 'My News', 'title=\"News title\"');\n// Prints: &lt;a href=\"http://example.com/index.php/news/local/123\" title=\"News title\"&gt;My News&lt;/a&gt;\n\necho anchor('news/local/123', 'My News', array('title' =&gt; 'The best news!'));\n// Prints: &lt;a href=\"http://example.com/index.php/news/local/123\" title=\"The best news!\"&gt;My News&lt;/a&gt;\n\necho anchor('', 'Click here');\n// Prints: &lt;a href=\"http://example.com\"&gt;Click Here&lt;/a&gt;\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"anchor_popup\">\n<code>anchor_popup($uri = '', $title = '', $attributes = FALSE)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$uri</strong> (<em>string</em>) – URI string</li> <li>\n<strong>$title</strong> (<em>string</em>) – Anchor title</li> <li>\n<strong>$attributes</strong> (<em>mixed</em>) – HTML attributes</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Pop-up hyperlink</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Nearly identical to the <a class=\"reference internal\" href=\"#anchor\" title=\"anchor\"><code>anchor()</code></a> function except that it opens the URL in a new window. You can specify JavaScript window attributes in the third parameter to control how the window is opened. If the third parameter is not set it will simply open a new window with your own browser settings.</p> <p>Here is an example with attributes:</p> <pre data-language=\"php\">$atts = array(\n        'width'       =&gt; 800,\n        'height'      =&gt; 600,\n        'scrollbars'  =&gt; 'yes',\n        'status'      =&gt; 'yes',\n        'resizable'   =&gt; 'yes',\n        'screenx'     =&gt; 0,\n        'screeny'     =&gt; 0,\n        'window_name' =&gt; '_blank'\n);\n\necho anchor_popup('news/local/123', 'Click Me!', $atts);\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The above attributes are the function defaults so you only need to set the ones that are different from what you need. If you want the function to use all of its defaults simply pass an empty array in the third parameter: | | echo anchor_popup(‘news/local/123’, ‘Click Me!’, array());</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">The <strong>window_name</strong> is not really an attribute, but an argument to the JavaScript <cite>window.open() &lt;http://www.w3schools.com/jsref/met_win_open.asp&gt;</cite> method, which accepts either a window name or a window target.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Any other attribute than the listed above will be parsed as an HTML attribute to the anchor tag.</p> </div> </dd>\n</dl> <dl class=\"function\"> <dt id=\"mailto\">\n<code>mailto($email, $title = '', $attributes = '')</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$email</strong> (<em>string</em>) – E-mail address</li> <li>\n<strong>$title</strong> (<em>string</em>) – Anchor title</li> <li>\n<strong>$attributes</strong> (<em>mixed</em>) – HTML attributes</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">A “mail to” hyperlink</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Creates a standard HTML e-mail link. Usage example:</p> <pre data-language=\"php\">echo mailto('[email protected]', 'Click Here to Contact Me');\n</pre> <p>As with the <a class=\"reference internal\" href=\"#anchor\" title=\"anchor\"><code>anchor()</code></a> tab above, you can set attributes using the third parameter:</p> <pre data-language=\"php\">$attributes = array('title' =&gt; 'Mail me');\necho mailto('[email protected]', 'Contact Me', $attributes);\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"safe_mailto\">\n<code>safe_mailto($email, $title = '', $attributes = '')</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$email</strong> (<em>string</em>) – E-mail address</li> <li>\n<strong>$title</strong> (<em>string</em>) – Anchor title</li> <li>\n<strong>$attributes</strong> (<em>mixed</em>) – HTML attributes</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">A spam-safe “mail to” hyperlink</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Identical to the <a class=\"reference internal\" href=\"#mailto\" title=\"mailto\"><code>mailto()</code></a> function except it writes an obfuscated version of the <em>mailto</em> tag using ordinal numbers written with JavaScript to help prevent the e-mail address from being harvested by spam bots.</p> </dd>\n</dl> <dl class=\"function\"> <dt id=\"auto_link\">\n<code>auto_link($str, $type = 'both', $popup = FALSE)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> <li>\n<strong>$type</strong> (<em>string</em>) – Link type (‘email’, ‘url’ or ‘both’)</li> <li>\n<strong>$popup</strong> (<em>bool</em>) – Whether to create popup links</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Linkified string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Automatically turns URLs and e-mail addresses contained in a string into links. Example:</p> <pre data-language=\"php\">$string = auto_link($string);\n</pre> <p>The second parameter determines whether URLs and e-mails are converted or just one or the other. Default behavior is both if the parameter is not specified. E-mail links are encoded as <a class=\"reference internal\" href=\"#safe_mailto\" title=\"safe_mailto\"><code>safe_mailto()</code></a> as shown above.</p> <p>Converts only URLs:</p> <pre data-language=\"php\">$string = auto_link($string, 'url');\n</pre> <p>Converts only e-mail addresses:</p> <pre data-language=\"php\">$string = auto_link($string, 'email');\n</pre> <p>The third parameter determines whether links are shown in a new window. The value can be TRUE or FALSE (boolean):</p> <pre data-language=\"php\">$string = auto_link($string, 'both', TRUE);\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"url_title\">\n<code>url_title($str, $separator = '-', $lowercase = FALSE)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – Input string</li> <li>\n<strong>$separator</strong> (<em>string</em>) – Word separator</li> <li>\n<strong>$lowercase</strong> (<em>bool</em>) – Whether to transform the output string to lower-case</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">URL-formatted string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>Takes a string as input and creates a human-friendly URL string. This is useful if, for example, you have a blog in which you’d like to use the title of your entries in the URL. Example:</p> <pre data-language=\"php\">$title = \"What's wrong with CSS?\";\n$url_title = url_title($title);\n// Produces: Whats-wrong-with-CSS\n</pre> <p>The second parameter determines the word delimiter. By default dashes are used. Preferred options are: <strong>-</strong> (dash) or <strong>_</strong> (underscore)</p> <p>Example:</p> <pre data-language=\"php\">$title = \"What's wrong with CSS?\";\n$url_title = url_title($title, 'underscore');\n// Produces: Whats_wrong_with_CSS\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">Old usage of ‘dash’ and ‘underscore’ as the second parameter is DEPRECATED.</p> </div> <p>The third parameter determines whether or not lowercase characters are forced. By default they are not. Options are boolean TRUE/FALSE.</p> <p>Example:</p> <pre data-language=\"php\">$title = \"What's wrong with CSS?\";\n$url_title = url_title($title, 'underscore', TRUE);\n// Produces: whats_wrong_with_css\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"prep_url\">\n<code>prep_url($str = '')</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$str</strong> (<em>string</em>) – URL string</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Returns:</th>\n<td class=\"field-body\">\n<p class=\"first\">Protocol-prefixed URL string</p> </td> </tr> <tr class=\"field-odd field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">string</p> </td> </tr>  </table> <p>This function will add http&amp;#58;// in the event that a protocol prefix is missing from a URL.</p> <p>Pass the URL string to the function like this:</p> <pre data-language=\"php\">$url = prep_url('example.com');\n</pre> </dd>\n</dl> <dl class=\"function\"> <dt id=\"redirect\">\n<code>redirect($uri = '', $method = 'auto', $code = NULL)</code> </dt> <dd>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\"> <col class=\"field-name\"> <col class=\"field-body\">  <tr class=\"field-odd field\">\n<th class=\"field-name\">Parameters:</th>\n<td class=\"field-body\">\n<ul class=\"first simple\"> <li>\n<strong>$uri</strong> (<em>string</em>) – URI string</li> <li>\n<strong>$method</strong> (<em>string</em>) – Redirect method (‘auto’, ‘location’ or ‘refresh’)</li> <li>\n<strong>$code</strong> (<em>string</em>) – HTTP Response code (usually 302 or 303)</li> </ul> </td> </tr> <tr class=\"field-even field\">\n<th class=\"field-name\">Return type:</th>\n<td class=\"field-body\">\n<p class=\"first last\">void</p> </td> </tr>  </table> <p>Does a “header redirect” to the URI specified. If you specify the full site URL that link will be built, but for local links simply providing the URI segments to the controller you want to direct to will create the link. The function will build the URL based on your config file values.</p> <p>The optional second parameter allows you to force a particular redirection method. The available methods are <strong>auto</strong>, <strong>location</strong> and <strong>refresh</strong>, with location being faster but less reliable on IIS servers. The default is <strong>auto</strong>, which will attempt to intelligently choose the method based on the server environment.</p> <p>The optional third parameter allows you to send a specific HTTP Response Code - this could be used for example to create 301 redirects for search engine purposes. The default Response Code is 302. The third parameter is <em>only</em> available with <strong>location</strong> redirects, and not <em>refresh</em>. Examples:</p> <pre data-language=\"php\">if ($logged_in == FALSE)\n{\n        redirect('/login/form/');\n}\n\n// with 301 redirect\nredirect('/article/13', 'location', 301);\n</pre> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">In order for this function to work it must be used before anything is outputted to the browser since it utilizes server headers.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">For very fine grained control over headers, you should use the <a class=\"reference internal\" href=\"../libraries/output\">Output Library</a> <code>set_header()</code> method.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">To IIS users: if you hide the <cite>Server</cite> HTTP header, the <em>auto</em> method won’t detect IIS, in that case it is advised you explicitly use the <strong>refresh</strong> method.</p> </div> <div class=\"admonition note\"> <p class=\"first admonition-title\">Note</p> <p class=\"last\">When the <strong>location</strong> method is used, an HTTP status code of 303 will <em>automatically</em> be selected when the page is currently accessed via POST and HTTP/1.1 is used.</p> </div> <div class=\"admonition important\"> <p class=\"first admonition-title\">Important</p> <p class=\"last\">This function will terminate script execution.</p> </div> </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2014&ndash;2016 British Columbia Institute of Technology<br>Licensed under the MIT License.<br>\n    <a href=\"https://www.codeigniter.com/user_guide/helpers/url_helper.html\" class=\"_attribution-link\">https://www.codeigniter.com/user_guide/helpers/url_helper.html</a>\n  </p>\n</div>\n"}