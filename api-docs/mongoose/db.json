{"index":"<h1>Getting Started</h1>\n<p><em>First be sure you have <a href=\"http://www.mongodb.org/downloads\">MongoDB</a> and <a href=\"http://nodejs.org/\">Node.js</a> installed.</em></p> <p>Next install Mongoose from the command line using <code>npm</code>:</p> <pre data-language=\"javascript\">$ npm install mongoose</pre>\n<p>Now say we like fuzzy kittens and want to record every kitten we ever meet in MongoDB. The first thing we need to do is include mongoose in our project and open a connection to the <code>test</code> database on our locally running instance of MongoDB.</p>\n<pre data-language=\"javascript\"><span class=\"comment\">// getting-started.js</span>\n<span class=\"keyword\">var</span> mongoose = require(<span class=\"string\">'mongoose'</span>);\nmongoose.connect(<span class=\"string\">'mongodb://localhost/test'</span>);</pre>\n<p>We have a pending connection to the test database running on localhost. We now need to get notified if we connect successfully or if a connection error occurs:</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> db = mongoose.connection;\ndb.on(<span class=\"string\">'error'</span>, console.error.bind(console, <span class=\"string\">'connection error:'</span>));\ndb.once(<span class=\"string\">'open'</span>, <span class=\"keyword\">function</span>() {\n  <span class=\"comment\">// we're connected!</span>\n});</pre>\n<p>Once our connection opens, our callback will be called. For brevity, let's assume that all following code is within this callback.</p>\n<p>With Mongoose, everything is derived from a <a href=\"guide\">Schema</a>. Let's get a reference to it and define our kittens.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> kittySchema = mongoose.Schema({\n    name: String\n});</pre>\n<p>So far so good. We've got a schema with one property, <code>name</code>, which will be a <code>String</code>. The next step is compiling our schema into a <a href=\"models\">Model</a>.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> Kitten = mongoose.model(<span class=\"string\">'Kitten'</span>, kittySchema);</pre>\n<p>A model is a class with which we construct documents. In this case, each document will be a kitten with properties and behaviors as declared in our schema. Let's create a kitten document representing the little guy we just met on the sidewalk outside:</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> silence = <span class=\"keyword\">new</span> Kitten({ name: <span class=\"string\">'Silence'</span> });\nconsole.log(silence.name); <span class=\"comment\">// 'Silence'</span></pre>\n<p>Kittens can meow, so let's take a look at how to add \"speak\" functionality to our documents:</p>\n<pre data-language=\"javascript\"><span class=\"comment\">// NOTE: methods must be added to the schema before compiling it with mongoose.model()</span>\nkittySchema.methods.speak = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">var</span> greeting = <span class=\"keyword\">this</span>.name\n    ? <span class=\"string\">\"Meow name is \"</span> + <span class=\"keyword\">this</span>.name\n    : <span class=\"string\">\"I don't have a name\"</span>;\n  console.log(greeting);\n}\n\n<span class=\"keyword\">var</span> Kitten = mongoose.model(<span class=\"string\">'Kitten'</span>, kittySchema);</pre>\n<p>Functions added to the <code>methods</code> property of a schema get compiled into the <code>Model</code> prototype and exposed on each document instance:</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> fluffy = <span class=\"keyword\">new</span> Kitten({ name: <span class=\"string\">'fluffy'</span> });\nfluffy.speak(); <span class=\"comment\">// \"Meow name is fluffy\"</span></pre>\n<p>We have talking kittens! But we still haven't saved anything to MongoDB. Each document can be saved to the database by calling its <a href=\"api#model_Model-save\">save</a> method. The first argument to the callback will be an error if any occured.</p>\n<pre data-language=\"javascript\">fluffy.save(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, fluffy)</span> {</span>\n  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> console.error(err);\n  fluffy.speak();\n});</pre>\n<p>Say time goes by and we want to display all the kittens we've seen. We can access all of the kitten documents through our Kitten <a href=\"models\">model</a>.</p>\n<pre data-language=\"javascript\">Kitten.find(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, kittens)</span> {</span>\n  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> console.error(err);\n  console.log(kittens);\n})</pre>\n<p>We just logged all of the kittens in our db to the console. If we want to filter our kittens by name, Mongoose supports MongoDBs rich <a href=\"queries\">querying</a> syntax.</p>\n<pre data-language=\"javascript\">Kitten.find({ name: <span class=\"regexp\">/^Fluff/</span> }, callback);</pre>\n<p>This performs a search for all documents with a name property that begins with \"Fluff\" and returns the result as an array of kittens to the callback.</p>\n<h2>Congratulations</h2>\n<p>That's the end of our quick start. We created a schema, added a custom document method, saved and queried kittens in MongoDB using Mongoose. Head over to the <a href=\"guide\">guide</a>, or <a href=\"api\">API docs</a> for more.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010 LearnBoost<br>Licensed under the MIT License.<br>\n    <a href=\"http://mongoosejs.com/docs/index.html\" class=\"_attribution-link\">http://mongoosejs.com/docs/index.html</a>\n  </p>\n</div>\n","guide":"<h1>Schemas</h1>\n<div class=\"important\"><p>If you haven't yet done so, please take a minute to read the <a href=\"index\">quickstart</a> to get an idea of how Mongoose works. If you are migrating from 3.x to 4.x please take a moment to read the <a href=\"http://mongoosejs.com/docs/migration.html\">migration guide</a>.</p></div>\n<h2 id=\"definition\">Defining your schema</h2>\n<p>Everything in Mongoose starts with a Schema. Each schema maps to a MongoDB collection and defines the shape of the documents within that collection.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> mongoose = require(<span class=\"string\">'mongoose'</span>);\n<span class=\"keyword\">var</span> Schema = mongoose.Schema;\n\n<span class=\"keyword\">var</span> blogSchema = <span class=\"keyword\">new</span> Schema({\n  title:  String,\n  author: String,\n  body:   String,\n  comments: [{ body: String, date: Date }],\n  date: { type: Date, <span class=\"keyword\">default</span>: Date.now },\n  hidden: Boolean,\n  meta: {\n    votes: Number,\n    favs:  Number\n  }\n});</pre>\n<p><em>If you want to add additional keys later, use the <a href=\"api#schema_Schema-add\">Schema#add</a> method.</em></p>\n<p> Each key in our <code>blogSchema</code> defines a property in our documents which will be cast to its associated <a href=\"api#schematype_SchemaType\">SchemaType</a>. For example, we've defined a <code>title</code> which will be cast to the <a href=\"api#schema-string-js\">String</a> SchemaType and <code>date</code> which will be cast to a <code>Date</code> SchemaType. Keys may also be assigned nested objects containing further key/type definitions <em>(e.g. the `meta` property above).</em></p>\n<p>The permitted SchemaTypes are </p>\n<ul>\n<li>String</li>\n<li>Number</li>\n<li>Date</li>\n<li>Buffer</li>\n<li>Boolean</li>\n<li>Mixed</li>\n<li>ObjectId</li>\n<li>Array</li>\n</ul>Read more about them <a href=\"schematypes\">here</a>.<p>Schemas not only define the structure of your document and casting of properties, they also define document <a href=\"#methods\">instance methods</a>, static <a href=\"#statics\">Model methods</a>, <a href=\"#indexes\">compound indexes</a> and document lifecycle hooks called <a href=\"middleware\">middleware</a>.</p>\n<h2 id=\"models\">Creating a model</h2>\n<p>To use our schema definition, we need to convert our <code>blogSchema</code> into a <a href=\"models\">Model</a> we can work with. To do so, we pass it into <code>mongoose.model(modelName, schema)</code>:</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> Blog = mongoose.model(<span class=\"string\">'Blog'</span>, blogSchema);\n<span class=\"comment\">// ready to go!</span>\n</pre>\n<h2 id=\"methods\">Instance methods</h2>\n<p>Instances of <code>Models</code> are <a href=\"documents\">documents</a>. Documents have many of their own <a href=\"api#document-js\">built-in instance methods</a>. We may also define our own custom document instance methods too.</p>\n<pre data-language=\"javascript\"><span class=\"comment\">// define a schema</span>\n<span class=\"keyword\">var</span> animalSchema = <span class=\"keyword\">new</span> Schema({ name: String, type: String });\n\n<span class=\"comment\">// assign a function to the \"methods\" object of our animalSchema</span>\nanimalSchema.methods.findSimilarTypes = <span class=\"keyword\">function</span>(cb) {\n  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.model(<span class=\"string\">'Animal'</span>).find({ type: <span class=\"keyword\">this</span>.type }, cb);\n};</pre>\n<p>Now all of our <code>animal</code> instances have a <code>findSimilarTypes</code> method available to it.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> Animal = mongoose.model(<span class=\"string\">'Animal'</span>, animalSchema);\n<span class=\"keyword\">var</span> dog = <span class=\"keyword\">new</span> Animal({ type: <span class=\"string\">'dog'</span> });\n\ndog.findSimilarTypes(<span class=\"keyword\">function</span>(err, dogs) {\n  console.log(dogs); <span class=\"comment\">// woof</span>\n});\n</pre>\n<div class=\"important\"><p>Overwriting a default mongoose document method may lead to unpredictible results. See <a href=\"api#schema_Schema.reserved\">this</a> for more details.</p></div>\n<h2 id=\"statics\">Statics</h2>\n<p>Adding static methods to a <code>Model</code> is simple as well. Continuing with our <code>animalSchema</code>:</p>\n<pre data-language=\"javascript\"><span class=\"comment\">// assign a function to the \"statics\" object of our animalSchema</span>\nanimalSchema.statics.findByName = <span class=\"keyword\">function</span>(name, cb) {\n  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.find({ name: <span class=\"keyword\">new</span> RegExp(name, <span class=\"string\">'i'</span>) }, cb);\n};\n\n<span class=\"keyword\">var</span> Animal = mongoose.model(<span class=\"string\">'Animal'</span>, animalSchema);\nAnimal.findByName(<span class=\"string\">'fido'</span>, <span class=\"keyword\">function</span>(err, animals) {\n  console.log(animals);\n});\n</pre>\n<h2 id=\"query-helpers\">Query Helpers</h2>\n<p>You can also add query helper functions, which are like instance methods, but for mongoose queries. Query helper methods let you extend mongoose's <a href=\"queries\">chainable query builder API</a>.</p>\n<pre data-language=\"javascript\">animalSchema.query.byName = <span class=\"keyword\">function</span>(name) {\n  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.find({ name: <span class=\"keyword\">new</span> RegExp(name, <span class=\"string\">'i'</span>) });\n};\n\n<span class=\"keyword\">var</span> Animal = mongoose.model(<span class=\"string\">'Animal'</span>, animalSchema);\nAnimal.find().byName(<span class=\"string\">'fido'</span>).exec(<span class=\"keyword\">function</span>(err, animals) {\n  console.log(animals);\n});\n</pre>\n<h2 id=\"indexes\">Indexes</h2>\n<p>MongoDB supports <a href=\"http://docs.mongodb.org/manual/indexes/\">secondary indexes</a>. With mongoose, we define these indexes within our <code>Schema</code> <a href=\"api#schematype_SchemaType-index\">at</a> <a href=\"api#schematype_SchemaType-unique\">the</a> <a href=\"api#schematype_SchemaType-sparse\">path</a> <a href=\"api#schema_date_SchemaDate-expires\">level</a> or the <code>schema</code> level. Defining indexes at the schema level is necessary when creating <a href=\"http://www.mongodb.org/display/DOCS/Indexes#Indexes-CompoundKeys\">compound indexes</a>.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> animalSchema = <span class=\"keyword\">new</span> Schema({\n  name: String,\n  type: String,\n  tags: { type: [String], index: <span class=\"literal\">true</span> } <span class=\"comment\">// field level</span>\n});\n\nanimalSchema.index({ name: <span class=\"number\">1</span>, type: -<span class=\"number\">1</span> }); <span class=\"comment\">// schema level</span>\n</pre>\n<div class=\"important\"><p>When your application starts up, Mongoose automatically calls <code>ensureIndex</code> for each defined index in your schema. Mongoose will call <code>ensureIndex</code> for each index sequentially, and emit an 'index' event on the model when all the <code>ensureIndex</code> calls succeeded or when there was an error. While nice for development, it is recommended this behavior be disabled in production since index creation can cause a <a href=\"http://docs.mongodb.org/manual/core/indexes/#index-creation-operations\">significant performance impact</a>. Disable the behavior by setting the <code>autoIndex</code> option of your schema to <code>false</code>, or globally on the connection by setting the option <code>config.autoIndex</code> to <code>false</code>.</p></div>\n<pre data-language=\"javascript\">mongoose.connect(<span class=\"string\">'mongodb://user:pass@localhost:port/database'</span>, { config: { autoIndex: <span class=\"literal\">false</span> } });\n<span class=\"comment\">// or  </span>\nmongoose.createConnection(<span class=\"string\">'mongodb://user:pass@localhost:port/database'</span>, { config: { autoIndex: <span class=\"literal\">false</span> } });\n<span class=\"comment\">// or</span>\nanimalSchema.set(<span class=\"string\">'autoIndex'</span>, <span class=\"literal\">false</span>);\n<span class=\"comment\">// or</span>\n<span class=\"keyword\">new</span> Schema({..}, { autoIndex: <span class=\"literal\">false</span> });\n</pre>\n<p>See also the <a href=\"api#model_Model.ensureIndexes\">Model#ensureIndexes</a> method.</p>\n<h2 id=\"virtuals\">Virtuals</h2>\n<p><a href=\"api#schema_Schema-virtual\">Virtuals</a> are document properties that you can get and set but that do not get persisted to MongoDB. The getters are useful for formatting or combining fields, while setters are useful for de-composing a single value into multiple values for storage.</p>\n<pre data-language=\"javascript\"><span class=\"comment\">// define a schema</span>\n<span class=\"keyword\">var</span> personSchema = <span class=\"keyword\">new</span> Schema({\n  name: {\n    first: String,\n    last: String\n  }\n});\n\n<span class=\"comment\">// compile our model</span>\n<span class=\"keyword\">var</span> Person = mongoose.model(<span class=\"string\">'Person'</span>, personSchema);\n\n<span class=\"comment\">// create a document</span>\n<span class=\"keyword\">var</span> bad = <span class=\"keyword\">new</span> Person({\n    name: { first: <span class=\"string\">'Walter'</span>, last: <span class=\"string\">'White'</span> }\n});\n</pre>\n<p>Suppose we want to log the full name of <code>bad</code>. We could do this manually like so:</p>\n<pre data-language=\"javascript\">console.log(bad.name.first + <span class=\"string\">' '</span> + bad.name.last); <span class=\"comment\">// Walter White</span>\n</pre>\n<p>Or we could define a <a href=\"api#virtualtype_VirtualType-get\">virtual property getter</a> on our <code>personSchema</code> so we don't need to write out this string concatenation mess each time:</p>\n<pre data-language=\"javascript\">personSchema.virtual(<span class=\"string\">'name.full'</span>).get(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name.first + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.name.last;\n});\n</pre>\n<p>Now, when we access our virtual \"name.full\" property, our getter function will be invoked and the value returned:</p>\n<pre data-language=\"javascript\">console.log(<span class=\"string\">'%s is insane'</span>, bad.name.full); <span class=\"comment\">// Walter White is insane</span>\n</pre>\n<p>Note that if the resulting record is converted to an object or JSON, virtuals are not included by default. Pass <code>virtuals : true</code> to either <a href=\"api#document_Document-toObject\">toObject()</a> or to toJSON() to have them returned. </p> <p>It would also be nice to be able to set <code>this.name.first</code> and <code>this.name.last</code> by setting <code>this.name.full</code>. For example, if we wanted to change <code>bad</code>'s <code>name.first</code> and <code>name.last</code> to 'Breaking' and 'Bad' respectively, it'd be nice to just:</p>\n<pre data-language=\"javascript\">bad.name.full = <span class=\"string\">'Breaking Bad'</span>;\n</pre>\n<p>Mongoose lets you do this as well through its <a href=\"api#virtualtype_VirtualType-set\">virtual property setters</a>:</p>\n<pre data-language=\"javascript\">personSchema.virtual(<span class=\"string\">'name.full'</span>).set(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(name)</span> {</span>\n  <span class=\"keyword\">var</span> split = name.split(<span class=\"string\">' '</span>);\n  <span class=\"keyword\">this</span>.name.first = split[<span class=\"number\">0</span>];\n  <span class=\"keyword\">this</span>.name.last = split[<span class=\"number\">1</span>];\n});\n\n...\n\nmad.name.full = <span class=\"string\">'Breaking Bad'</span>;\nconsole.log(mad.name.first); <span class=\"comment\">// Breaking</span>\nconsole.log(mad.name.last);  <span class=\"comment\">// Bad</span>\n</pre>\n<p>Virtual property setters are applied before other validation. So the example above would still work even if the <code>first</code> and <code>last</code> name fields were required.</p> <p>Only non-virtual properties work as part of queries and for field selection.</p>\n<h2 id=\"options\">Options</h2>\n<p><code>Schema</code>s have a few configurable options which can be passed to the constructor or <code>set</code> directly:</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">new</span> Schema({..}, options);\n\n<span class=\"comment\">// or</span>\n\n<span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({..});\nschema.set(option, value);\n</pre>\n<p>Valid options:</p> <ul>\n<li><a href=\"#autoIndex\">autoIndex</a></li>\n<li><a href=\"#capped\">capped</a></li>\n<li><a href=\"#collection\">collection</a></li>\n<li><a href=\"#emitIndexErrors\">emitIndexErrors</a></li>\n<li><a href=\"#id\">id</a></li>\n<li><a href=\"#_id\">_id</a></li>\n<li><a href=\"#minimize\">minimize</a></li>\n<li><a href=\"#read\">read</a></li>\n<li><a href=\"#safe\">safe</a></li>\n<li><a href=\"#shardKey\">shardKey</a></li>\n<li><a href=\"#strict\">strict</a></li>\n<li><a href=\"#toJSON\">toJSON</a></li>\n<li><a href=\"#toObject\">toObject</a></li>\n<li><a href=\"#typeKey\">typeKey</a></li>\n<li><a href=\"#validateBeforeSave\">validateBeforeSave</a></li>\n<li><a href=\"#versionKey\">versionKey</a></li>\n<li><a href=\"#skipVersioning\">skipVersioning</a></li>\n<li><a href=\"#timestamps\">timestamps</a></li>\n</ul>\n<h4 id=\"autoIndex\">option: autoIndex</h4>\n<p>At application startup, Mongoose sends an <code>ensureIndex</code> command for each index declared in your <code>Schema</code>. As of Mongoose v3, indexes are created in the <code>background</code> by default. If you wish to disable the auto-creation feature and manually handle when indexes are created, set your <code>Schema</code>s <code>autoIndex</code> option to <code>false</code> and use the <a href=\"api#model_Model.ensureIndexes\">ensureIndexes</a> method on your model.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({..}, { autoIndex: <span class=\"literal\">false</span> });\n<span class=\"keyword\">var</span> Clock = mongoose.model(<span class=\"string\">'Clock'</span>, schema);\nClock.ensureIndexes(callback);\n</pre>\n<h4 id=\"bufferCommands\">option: bufferCommands</h4>\n<p>By default, mongoose buffers commands when the connection goes down until the driver manages to reconnect. To disable buffering, set <code>bufferCommands</code> to false.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({..}, { bufferCommands: <span class=\"literal\">false</span> });\n</pre>\n<h4 id=\"capped\">option: capped</h4>\n<p>Mongoose supports MongoDBs <a href=\"http://www.mongodb.org/display/DOCS/Capped+Collections\">capped</a> collections. To specify the underlying MongoDB collection be <code>capped</code>, set the <code>capped</code> option to the maximum size of the collection in <a href=\"http://www.mongodb.org/display/DOCS/Capped+Collections#CappedCollections-size.\">bytes</a>.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">new</span> Schema({..}, { capped: <span class=\"number\">1024</span> });</pre>\n<p>The <code>capped</code> option may also be set to an object if you want to pass additional options like <a href=\"http://www.mongodb.org/display/DOCS/Capped+Collections#CappedCollections-max\">max</a> or <a href=\"http://www.mongodb.org/display/DOCS/Capped+Collections#CappedCollections-autoIndexId\">autoIndexId</a>. In this case you must explicitly pass the <code>size</code> option which is required.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">new</span> Schema({..}, { capped: { size: <span class=\"number\">1024</span>, max: <span class=\"number\">1000</span>, autoIndexId: <span class=\"literal\">true</span> } });\n</pre>\n<h4 id=\"collection\">option: collection</h4>\n<p>Mongoose by default produces a collection name by passing the model name to the <a href=\"api#utils_exports.toCollectionName\">utils.toCollectionName</a> method. This method pluralizes the name. Set this option if you need a different name for your collection.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> dataSchema = <span class=\"keyword\">new</span> Schema({..}, { collection: <span class=\"string\">'data'</span> });\n</pre>\n<h4 id=\"emitIndexErrors\">option: emitIndexErrors</h4>\n<p>By default, mongoose will build any indexes you specify in your schema for you, and emit an 'index' event on the model when the index build either succeeds or errors out.</p>\n<pre data-language=\"javascript\">MyModel.on(<span class=\"string\">'index'</span>, <span class=\"keyword\">function</span>(error) {\n  <span class=\"comment\">/* If error is truthy, index build failed */</span>\n});</pre>\n<p>However, this makes it tricky to catch when your index build fails. The <code>emitIndexErrors</code> option makes seeing when your index build fails simpler. If this option is on, mongoose will additionally emit an 'error' event on the model when an index build fails.</p>\n<pre data-language=\"javascript\">MyModel.schema.options.emitIndexErrors; <span class=\"comment\">// true</span>\nMyModel.on(<span class=\"string\">'error'</span>, <span class=\"keyword\">function</span>(error) {\n  <span class=\"comment\">// gets an error whenever index build fails</span>\n});</pre>\n<p>Node.js' built-in <a href=\"https://nodejs.org/api/events.html#events_class_events_eventemitter\">event emitter throws an exception if an error event is emitted and there are no listeners</a>, so its easy to configure your application to fail fast when an index build fails.</p>\n<h4 id=\"id\">option: id</h4>\n<p>Mongoose assigns each of your schemas an <code>id</code> virtual getter by default which returns the documents <code>_id</code> field cast to a string, or in the case of ObjectIds, its hexString. If you don't want an <code>id</code> getter added to your schema, you may disable it passing this option at schema construction time.</p>\n<pre data-language=\"javascript\"><span class=\"comment\">// default behavior</span>\n<span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({ name: String });\n<span class=\"keyword\">var</span> Page = mongoose.model(<span class=\"string\">'Page'</span>, schema);\n<span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Page({ name: <span class=\"string\">'mongodb.org'</span> });\nconsole.log(p.id); <span class=\"comment\">// '50341373e894ad16347efe01'</span>\n\n<span class=\"comment\">// disabled id</span>\n<span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({ name: String }, { id: <span class=\"literal\">false</span> });\n<span class=\"keyword\">var</span> Page = mongoose.model(<span class=\"string\">'Page'</span>, schema);\n<span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Page({ name: <span class=\"string\">'mongodb.org'</span> });\nconsole.log(p.id); <span class=\"comment\">// undefined</span>\n</pre>\n<h4 id=\"_id\">option: _id</h4>\n<p>Mongoose assigns each of your schemas an <code>_id</code> field by default if one is not passed into the <a href=\"api#schema-js\">Schema</a> constructor. The type assigned is an <a href=\"api#schema_Schema.Types\">ObjectId</a> to coincide with MongoDB's default behavior. If you don't want an <code>_id</code> added to your schema at all, you may disable it using this option.</p> <p>You can <strong>only</strong> use this option on sub-documents. Mongoose can't save a document without knowing its id, so you will get an error if you try to save a document without an <code>_id</code>.</p>\n<pre data-language=\"javascript\"><span class=\"comment\">// default behavior</span>\n<span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({ name: String });\n<span class=\"keyword\">var</span> Page = mongoose.model(<span class=\"string\">'Page'</span>, schema);\n<span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Page({ name: <span class=\"string\">'mongodb.org'</span> });\nconsole.log(p); <span class=\"comment\">// { _id: '50341373e894ad16347efe01', name: 'mongodb.org' }</span>\n\n<span class=\"comment\">// disabled _id</span>\n<span class=\"keyword\">var</span> childSchema = <span class=\"keyword\">new</span> Schema({ name: String }, { _id: <span class=\"literal\">false</span> });\n<span class=\"keyword\">var</span> parentSchema = <span class=\"keyword\">new</span> Schema({ children: [childSchema] });\n\n<span class=\"keyword\">var</span> Model = mongoose.model(<span class=\"string\">'Model'</span>, parentSchema);\n\nModel.create({ children: [{ name: <span class=\"string\">'Luke'</span> }] }, <span class=\"keyword\">function</span>(error, doc) {\n  <span class=\"comment\">// doc.children[0]._id will be undefined</span>\n});\n</pre>\n<h4 id=\"minimize\">option: minimize</h4>\n<p>Mongoose will, by default, \"minimize\" schemas by removing empty objects.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({ name: String, inventory: {} });\n<span class=\"keyword\">var</span> Character = mongoose.model(<span class=\"string\">'Character'</span>, schema);\n\n<span class=\"comment\">// will store `inventory` field if it is not empty</span>\n<span class=\"keyword\">var</span> frodo = <span class=\"keyword\">new</span> Character({ name: <span class=\"string\">'Frodo'</span>, inventory: { ringOfPower: <span class=\"number\">1</span> }});\nCharacter.findOne({ name: <span class=\"string\">'Frodo'</span> }, <span class=\"keyword\">function</span>(err, character) {\n  console.log(character); <span class=\"comment\">// { name: 'Frodo', inventory: { ringOfPower: 1 }}</span>\n});\n\n<span class=\"comment\">// will not store `inventory` field if it is empty</span>\n<span class=\"keyword\">var</span> sam = <span class=\"keyword\">new</span> Character({ name: <span class=\"string\">'Sam'</span>, inventory: {}});\nCharacter.findOne({ name: <span class=\"string\">'Sam'</span> }, <span class=\"keyword\">function</span>(err, character) {\n  console.log(character); <span class=\"comment\">// { name: 'Sam' }</span>\n});\n</pre>\n<p>This behavior can be overridden by setting <code>minimize</code> option to <code>false</code>. It will then store empty objects.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({ name: String, inventory: {} }, { minimize: <span class=\"literal\">false</span> });\n<span class=\"keyword\">var</span> Character = mongoose.model(<span class=\"string\">'Character'</span>, schema);\n\n<span class=\"comment\">// will store `inventory` if empty</span>\n<span class=\"keyword\">var</span> sam = <span class=\"keyword\">new</span> Character({ name: <span class=\"string\">'Sam'</span>, inventory: {}});\nCharacter.findOne({ name: <span class=\"string\">'Sam'</span> }, <span class=\"keyword\">function</span>(err, character) {\n  console.log(character); <span class=\"comment\">// { name: 'Sam', inventory: {}}</span>\n});\n</pre>\n<h4 id=\"read\">option: read</h4>\n<p>Allows setting <a href=\"api#query_Query-read\">query#read</a> options at the schema level, providing us a way to apply default <a href=\"http://docs.mongodb.org/manual/applications/replication/#replica-set-read-preference\">ReadPreferences</a> to all queries derived from a model.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({..}, { read: <span class=\"string\">'primary'</span> });            <span class=\"comment\">// also aliased as 'p'</span>\n<span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({..}, { read: <span class=\"string\">'primaryPreferred'</span> });   <span class=\"comment\">// aliased as 'pp'</span>\n<span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({..}, { read: <span class=\"string\">'secondary'</span> });          <span class=\"comment\">// aliased as 's'</span>\n<span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({..}, { read: <span class=\"string\">'secondaryPreferred'</span> }); <span class=\"comment\">// aliased as 'sp'</span>\n<span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({..}, { read: <span class=\"string\">'nearest'</span> });            <span class=\"comment\">// aliased as 'n'</span>\n</pre>\n<p>The alias of each pref is also permitted so instead of having to type out 'secondaryPreferred' and getting the spelling wrong, we can simply pass 'sp'.</p> <p>The read option also allows us to specify <em>tag sets</em>. These tell the <a href=\"https://github.com/mongodb/node-mongodb-native/\">driver</a> from which members of the replica-set it should attempt to read. Read more about tag sets <a href=\"http://docs.mongodb.org/manual/applications/replication/#tag-sets\">here</a> and <a href=\"http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences\">here</a>.</p> <p><em>NOTE: you may also specify the driver read pref <a href=\"http://mongodb.github.com/node-mongodb-native/api-generated/replset.html?highlight=strategy\">strategy</a> option when connecting:</em></p>\n<pre data-language=\"javascript\"><span class=\"comment\">// pings the replset members periodically to track network latency</span>\n<span class=\"keyword\">var</span> options = { replset: { strategy: <span class=\"string\">'ping'</span> }};\nmongoose.connect(uri, options);\n\n<span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({..}, { read: [<span class=\"string\">'nearest'</span>, { disk: <span class=\"string\">'ssd'</span> }] });\nmongoose.model(<span class=\"string\">'JellyBean'</span>, schema);\n</pre>\n<h4 id=\"safe\">option: safe</h4>\n<p>This option is passed to MongoDB with all operations and specifies if errors should be returned to our callbacks as well as tune write behavior.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> safe = <span class=\"literal\">true</span>;\n<span class=\"keyword\">new</span> Schema({ .. }, { safe: safe });\n</pre>\n<p>By default this is set to <code>true</code> for all schemas which guarentees that any occurring error gets passed back to our callback. By setting <code>safe</code> to something else like <code>{ j: 1, w: 2, wtimeout: 10000 }</code> we can guarantee the write was committed to the MongoDB journal (j: 1), at least 2 replicas (w: 2), and that the write will timeout if it takes longer than 10 seconds (wtimeout: 10000). Errors will still be passed to our callback.</p> <p>NOTE: In 3.6.x, you also need to turn <a href=\"#versionKey\">versioning</a> off. In 3.7.x and above, versioning will <strong>automatically be disabled</strong> when <code>safe</code> is set to <code>false</code></p> <p>**NOTE: this setting overrides any setting specified by passing db options while <a href=\"api#index_Mongoose-createConnection\">creating a connection</a>.</p> <p>There are other write concerns like <code>{ w: \"majority\" }</code> too. See the MongoDB <a href=\"http://www.mongodb.org/display/DOCS/getLastError+Command\">docs</a> for more details.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> safe = { w: <span class=\"string\">\"majority\"</span>, wtimeout: <span class=\"number\">10000</span> };\n<span class=\"keyword\">new</span> Schema({ .. }, { safe: safe });\n</pre>\n<h4 id=\"shardKey\">option: shardKey</h4>\n<p>The <code>shardKey</code> option is used when we have a <a href=\"http://www.mongodb.org/display/DOCS/Sharding+Introduction\">sharded MongoDB architecture</a>. Each sharded collection is given a shard key which must be present in all insert/update operations. We just need to set this schema option to the same shard key and we’ll be all set.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">new</span> Schema({ .. }, { shardKey: { tag: <span class=\"number\">1</span>, name: <span class=\"number\">1</span> }})\n</pre>\n<p><em>Note that Mongoose does not send the <code>shardcollection</code> command for you. You must configure your shards yourself.</em></p>\n<h4 id=\"strict\">option: strict</h4>\n<p>The strict option, (enabled by default), ensures that values passed to our model constructor that were not specified in our schema do not get saved to the db.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> thingSchema = <span class=\"keyword\">new</span> Schema({..})\n<span class=\"keyword\">var</span> Thing = mongoose.model(<span class=\"string\">'Thing'</span>, thingSchema);\n<span class=\"keyword\">var</span> thing = <span class=\"keyword\">new</span> Thing({ iAmNotInTheSchema: <span class=\"literal\">true</span> });\nthing.save(); <span class=\"comment\">// iAmNotInTheSchema is not saved to the db</span>\n\n<span class=\"comment\">// set to false..</span>\n<span class=\"keyword\">var</span> thingSchema = <span class=\"keyword\">new</span> Schema({..}, { strict: <span class=\"literal\">false</span> });\n<span class=\"keyword\">var</span> thing = <span class=\"keyword\">new</span> Thing({ iAmNotInTheSchema: <span class=\"literal\">true</span> });\nthing.save(); <span class=\"comment\">// iAmNotInTheSchema is now saved to the db!!</span>\n</pre>\n<p>This also affects the use of <code>doc.set()</code> to set a property value.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> thingSchema = <span class=\"keyword\">new</span> Schema({..})\n<span class=\"keyword\">var</span> Thing = mongoose.model(<span class=\"string\">'Thing'</span>, thingSchema);\n<span class=\"keyword\">var</span> thing = <span class=\"keyword\">new</span> Thing;\nthing.set(<span class=\"string\">'iAmNotInTheSchema'</span>, <span class=\"literal\">true</span>);\nthing.save(); <span class=\"comment\">// iAmNotInTheSchema is not saved to the db</span>\n</pre>\n<p>This value can be overridden at the model instance level by passing a second boolean argument:</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> Thing = mongoose.model(<span class=\"string\">'Thing'</span>);\n<span class=\"keyword\">var</span> thing = <span class=\"keyword\">new</span> Thing(doc, <span class=\"literal\">true</span>);  <span class=\"comment\">// enables strict mode</span>\n<span class=\"keyword\">var</span> thing = <span class=\"keyword\">new</span> Thing(doc, <span class=\"literal\">false</span>); <span class=\"comment\">// disables strict mode</span>\n</pre>\n<p>The <code>strict</code> option may also be set to <code>\"throw\"</code> which will cause errors to be produced instead of dropping the bad data.</p>\n<p><em>NOTE: do not set to false unless you have good reason.</em></p> <p><em>NOTE: in mongoose v2 the default was false.</em></p> <p><em>NOTE: Any key/val set on the instance that does not exist in your schema is always ignored, regardless of schema option.</em></p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> thingSchema = <span class=\"keyword\">new</span> Schema({..})\n<span class=\"keyword\">var</span> Thing = mongoose.model(<span class=\"string\">'Thing'</span>, thingSchema);\n<span class=\"keyword\">var</span> thing = <span class=\"keyword\">new</span> Thing;\nthing.iAmNotInTheSchema = <span class=\"literal\">true</span>;\nthing.save(); <span class=\"comment\">// iAmNotInTheSchema is never saved to the db</span>\n</pre>\n<h4 id=\"toJSON\">option: toJSON</h4>\n<p>Exactly the same as the <a href=\"#toObject\">toObject</a> option but only applies when the documents <code>toJSON</code> method is called.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({ name: String });\nschema.path(<span class=\"string\">'name'</span>).get(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(v)</span> {</span>\n  <span class=\"keyword\">return</span> v + <span class=\"string\">' is my name'</span>;\n});\nschema.set(<span class=\"string\">'toJSON'</span>, { getters: <span class=\"literal\">true</span>, virtuals: <span class=\"literal\">false</span> });\n<span class=\"keyword\">var</span> M = mongoose.model(<span class=\"string\">'Person'</span>, schema);\n<span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> M({ name: <span class=\"string\">'Max Headroom'</span> });\nconsole.log(m.toObject()); <span class=\"comment\">// { _id: 504e0cd7dd992d9be2f20b6f, name: 'Max Headroom' }</span>\nconsole.log(m.toJSON()); <span class=\"comment\">// { _id: 504e0cd7dd992d9be2f20b6f, name: 'Max Headroom is my name' }</span>\n<span class=\"comment\">// since we know toJSON is called whenever a js object is stringified:</span>\nconsole.log(JSON.stringify(m)); <span class=\"comment\">// { \"_id\": \"504e0cd7dd992d9be2f20b6f\", \"name\": \"Max Headroom is my name\" }</span>\n</pre>\n<p>To see all available <code>toJSON/toObject</code> options, read <a href=\"api#document_Document-toObject\">this</a>.</p>\n<h4 id=\"toObject\">option: toObject</h4>\n<p>Documents have a <a href=\"api#document_Document-toObject\">toObject</a> method which converts the mongoose document into a plain javascript object. This method accepts a few options. Instead of applying these options on a per-document basis we may declare the options here and have it applied to all of this schemas documents by default.</p> <p>To have all virtuals show up in your <code>console.log</code> output, set the <code>toObject</code> option to <code>{ getters: true }</code>:</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({ name: String });\nschema.path(<span class=\"string\">'name'</span>).get(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(v)</span> {</span>\n  <span class=\"keyword\">return</span> v + <span class=\"string\">' is my name'</span>;\n});\nschema.set(<span class=\"string\">'toObject'</span>, { getters: <span class=\"literal\">true</span> });\n<span class=\"keyword\">var</span> M = mongoose.model(<span class=\"string\">'Person'</span>, schema);\n<span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> M({ name: <span class=\"string\">'Max Headroom'</span> });\nconsole.log(m); <span class=\"comment\">// { _id: 504e0cd7dd992d9be2f20b6f, name: 'Max Headroom is my name' }</span>\n</pre>\n<p>To see all available <code>toObject</code> options, read <a href=\"api#document_Document-toObject\">this</a>.</p>\n<h4 id=\"typeKey\">option: typeKey</h4>\n<p>By default, if you have an object with key 'type' in your schema, mongoose will interpret it as a type declaration.</p>\n<pre data-language=\"javascript\"><span class=\"comment\">// Mongoose interprets this as 'loc is a String'</span>\n<span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({ loc: { type: String, coordinates: [Number] } });\n</pre>\n<p>However, for applications like <a href=\"http://docs.mongodb.org/manual/reference/geojson/\">geoJSON</a>, the 'type' property is important. If you want to control which key mongoose uses to find type declarations, set the 'typeKey' schema option.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({\n  <span class=\"comment\">// Mongoose interpets this as 'loc is an object with 2 keys, type and coordinates'</span>\n  loc: { type: String, coordinates: [Number] },\n  <span class=\"comment\">// Mongoose interprets this as 'name is a String'</span>\n  name: { $type: String }\n}, { typeKey: <span class=\"string\">'$type'</span> }); <span class=\"comment\">// A '$type' key means this object is a type declaration</span>\n</pre>\n<h4 id=\"validateBeforeSave\">option: validateBeforeSave</h4>\n<p>By default, documents are automatically validated before they are saved to the database. This is to prevent saving an invalid document. If you want to handle validation manually, and be able to save objects which don't pass validation, you can set validateBeforeSave to false.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({ name: String });\nschema.set(<span class=\"string\">'validateBeforeSave'</span>, <span class=\"literal\">false</span>);\nschema.path(<span class=\"string\">'name'</span>).validate(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(value)</span> {</span>\n    <span class=\"keyword\">return</span> v != <span class=\"literal\">null</span>;\n});\n<span class=\"keyword\">var</span> M = mongoose.model(<span class=\"string\">'Person'</span>, schema);\n<span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> M({ name: <span class=\"literal\">null</span> });\nm.validate(<span class=\"keyword\">function</span>(err) {\n    console.log(err); <span class=\"comment\">// Will tell you that null is not allowed.</span>\n});\nm.save(); <span class=\"comment\">// Succeeds despite being invalid</span>\n</pre>\n<h4 id=\"versionKey\">option: versionKey</h4>\n<p>The <code>versionKey</code> is a property set on each document when first created by Mongoose. This keys value contains the internal <a href=\"http://aaronheckmann.tumblr.com/post/48943525537/mongoose-v3-part-1-versioning\">revision</a> of the document. The <code>versionKey</code> option is a string that represents the path to use for versioning. The default is <code>__v</code>. If this conflicts with your application you can configure as such:</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({ name: <span class=\"string\">'string'</span> });\n<span class=\"keyword\">var</span> Thing = mongoose.model(<span class=\"string\">'Thing'</span>, schema);\n<span class=\"keyword\">var</span> thing = <span class=\"keyword\">new</span> Thing({ name: <span class=\"string\">'mongoose v3'</span> });\nthing.save(); <span class=\"comment\">// { __v: 0, name: 'mongoose v3' }</span>\n\n<span class=\"comment\">// customized versionKey</span>\n<span class=\"keyword\">new</span> Schema({..}, { versionKey: <span class=\"string\">'_somethingElse'</span> })\n<span class=\"keyword\">var</span> Thing = mongoose.model(<span class=\"string\">'Thing'</span>, schema);\n<span class=\"keyword\">var</span> thing = <span class=\"keyword\">new</span> Thing({ name: <span class=\"string\">'mongoose v3'</span> });\nthing.save(); <span class=\"comment\">// { _somethingElse: 0, name: 'mongoose v3' }</span>\n</pre>\n<p>Document versioning can also be disabled by setting the <code>versionKey</code> to <code>false</code>. <em>DO NOT disable versioning unless you <a href=\"http://aaronheckmann.tumblr.com/post/48943525537/mongoose-v3-part-1-versioning\">know what you are doing</a>.</em></p>\n<pre data-language=\"javascript\"><span class=\"keyword\">new</span> Schema({..}, { versionKey: <span class=\"literal\">false</span> });\n<span class=\"keyword\">var</span> Thing = mongoose.model(<span class=\"string\">'Thing'</span>, schema);\n<span class=\"keyword\">var</span> thing = <span class=\"keyword\">new</span> Thing({ name: <span class=\"string\">'no versioning please'</span> });\nthing.save(); <span class=\"comment\">// { name: 'no versioning please' }</span>\n</pre>\n<h4 id=\"skipVersioning\">option: skipVersioning</h4>\n<p><code>skipVersioning</code> allows excluding paths from versioning (i.e., the internal revision will not be incremented even if these paths are updated). DO NOT do this unless you know what you're doing. For sub-documents, include this on the parent document using the fully qualified path. </p>\n<pre data-language=\"javascript\"><span class=\"keyword\">new</span> Schema({..}, { skipVersioning: { dontVersionMe: <span class=\"literal\">true</span> } });\nthing.dontVersionMe.push(<span class=\"string\">'hey'</span>);\nthing.save(); <span class=\"comment\">// version is not incremented</span>\n</pre>\n<h4 id=\"timestamps\">option: timestamps</h4>\n<p>If set <code>timestamps</code>, mongoose assigns <code>createdAt</code> and <code>updatedAt</code> fields to your schema, the type assigned is <a href=\"api#schema-date-js\">Date</a>.</p> <p>By default, the name of two fields are <code>createdAt</code> and <code>updatedAt</code>, custom the field name by setting <code>timestamps.createdAt</code> and <code>timestamps.updatedAt</code>.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> thingSchema = <span class=\"keyword\">new</span> Schema({..}, { timestamps: { createdAt: <span class=\"string\">'created_at'</span> } });\n<span class=\"keyword\">var</span> Thing = mongoose.model(<span class=\"string\">'Thing'</span>, thingSchema);\n<span class=\"keyword\">var</span> thing = <span class=\"keyword\">new</span> Thing();\nthing.save(); <span class=\"comment\">// `created_at` &amp; `updatedAt` will be included</span>\n</pre>\n<h4 id=\"useNestedStrict\">option: useNestedStrict</h4>\n<p>In mongoose 4, <code>update()</code> and <code>findOneAndUpdate()</code> only check the top-level schema's strict mode setting.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> childSchema = <span class=\"keyword\">new</span> Schema({}, { strict: <span class=\"literal\">false</span> });\n<span class=\"keyword\">var</span> parentSchema = <span class=\"keyword\">new</span> Schema({ child: childSchema }, { strict: <span class=\"string\">'throw'</span> });\n<span class=\"keyword\">var</span> Parent = mongoose.model(<span class=\"string\">'Parent'</span>, parentSchema);\nParent.update({}, { <span class=\"string\">'child.name'</span>: <span class=\"string\">'Luke Skywalker'</span> }, <span class=\"keyword\">function</span>(error) {\n  <span class=\"comment\">// Error because parentSchema has `strict: throw`, even though</span>\n  <span class=\"comment\">// `childSchema` has `strict: false`</span>\n});\n\n<span class=\"keyword\">var</span> update = { <span class=\"string\">'child.name'</span>: <span class=\"string\">'Luke Skywalker'</span> };\n<span class=\"keyword\">var</span> opts = { strict: <span class=\"literal\">false</span> };\nParent.update({}, update, opts, <span class=\"keyword\">function</span>(error) {\n  <span class=\"comment\">// This works because passing `strict: false` to `update()` overwrites</span>\n  <span class=\"comment\">// the parent schema.</span>\n});</pre>\n<p>If you set <code>useNestedStrict</code> to true, mongoose will use the child schema's <code>strict</code> option for casting updates.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> childSchema = <span class=\"keyword\">new</span> Schema({}, { strict: <span class=\"literal\">false</span> });\n<span class=\"keyword\">var</span> parentSchema = <span class=\"keyword\">new</span> Schema({ child: childSchema },\n  { strict: <span class=\"string\">'throw'</span>, useNestedStrict: <span class=\"literal\">true</span> });\n<span class=\"keyword\">var</span> Parent = mongoose.model(<span class=\"string\">'Parent'</span>, parentSchema);\nParent.update({}, { <span class=\"string\">'child.name'</span>: <span class=\"string\">'Luke Skywalker'</span> }, <span class=\"keyword\">function</span>(error) {\n  <span class=\"comment\">// Works!</span>\n});\n</pre>\n<h2 id=\"plugins\">Pluggable</h2>\n<p>Schemas are also <a href=\"plugins\">pluggable</a> which allows us to package up reusable features into <a href=\"http://plugins.mongoosejs.io\">plugins</a> that can be shared with the community or just between your projects.</p>\n<h2 id=\"next\">Next Up</h2>\n<p>Now that we've covered <code>Schemas</code>, let's take a look at <a href=\"schematypes\">SchemaTypes</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010 LearnBoost<br>Licensed under the MIT License.<br>\n    <a href=\"http://mongoosejs.com/docs/guide.html\" class=\"_attribution-link\">http://mongoosejs.com/docs/guide.html</a>\n  </p>\n</div>\n","models":"<h1>Models</h1>\n<p><a href=\"api#model-js\">Models</a> are fancy constructors compiled from our <code>Schema</code> definitions. Instances of these models represent <a href=\"documents\">documents</a> which can be saved and retrieved from our database. All document creation and retrieval from the database is handled by these models.</p>\n<h2>Compiling your first model</h2>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> mongoose.Schema({ name: <span class=\"string\">'string'</span>, size: <span class=\"string\">'string'</span> });\n<span class=\"keyword\">var</span> Tank = mongoose.model(<span class=\"string\">'Tank'</span>, schema);\n</pre>\n<p>The first argument is the <em>singular</em> name of the collection your model is for. <strong> Mongoose automatically looks for the <em>plural</em> version of your model name. </strong> Thus, for the example above, the model Tank is for the <strong>tanks</strong> collection in the database. The <code>.model()</code> function makes a copy of <code>schema</code>. Make sure that you've added everything you want to <code>schema</code> before calling <code>.model()</code>!</p>\n<h2>Constructing documents</h2>\n<p><a href=\"documents\">Documents</a> are instances of our model. Creating them and saving to the database is easy:</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> Tank = mongoose.model(<span class=\"string\">'Tank'</span>, yourSchema);\n\n<span class=\"keyword\">var</span> small = <span class=\"keyword\">new</span> Tank({ size: <span class=\"string\">'small'</span> });\nsmall.save(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err);\n  <span class=\"comment\">// saved!</span>\n})\n\n<span class=\"comment\">// or</span>\n\nTank.create({ size: <span class=\"string\">'small'</span> }, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, small)</span> {</span>\n  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err);\n  <span class=\"comment\">// saved!</span>\n})</pre>\n<p>Note that no tanks will be created/removed until the connection your model uses is open. Every model has an associated connection. When you use <code>mongoose.model()</code>, your model will use the default mongoose connection.</p>\n<pre data-language=\"javascript\">mongoose.connect(<span class=\"string\">'localhost'</span>, <span class=\"string\">'gettingstarted'</span>);</pre>\n<p>If you create a custom connection, use that connection's <code>model()</code> function instead.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> connection = mongoose.createConnection(<span class=\"string\">'mongodb://localhost:27017/test'</span>);\n<span class=\"keyword\">var</span> Tank = connection.model(<span class=\"string\">'Tank'</span>, yourSchema);\n</pre>\n<h2>Querying</h2>\n<p>Finding documents is easy with Mongoose, which supports the <a href=\"http://www.mongodb.org/display/DOCS/Advanced+Queries\">rich</a> query syntax of MongoDB. Documents can be retreived using each <code>models</code> <a href=\"api#model_Model.find\">find</a>, <a href=\"api#model_Model.findById\">findById</a>, <a href=\"api#model_Model.findOne\">findOne</a>, or <a href=\"api#model_Model.where\">where</a> static methods.</p>\n<pre data-language=\"javascript\">Tank.find({ size: <span class=\"string\">'small'</span> }).where(<span class=\"string\">'createdDate'</span>).gt(oneYearAgo).exec(callback);</pre>\n<p>See the chapter on <a href=\"queries\">querying</a> for more details on how to use the <a href=\"api#query-js\">Query</a> api.</p>\n<h2>Removing</h2>\n<p>Models have a static <code>remove</code> method available for removing all documents matching <code>conditions</code>.</p>\n<pre data-language=\"javascript\">Tank.remove({ size: <span class=\"string\">'large'</span> }, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err);\n  <span class=\"comment\">// removed!</span>\n});</pre>\n<h2>Updating</h2>\n<p>Each <code>model</code> has its own <code>update</code> method for modifying documents in the database without returning them to your application. See the <a href=\"api#model_Model.update\">API</a> docs for more detail.</p> <p><em>If you want to update a single document in the db and return it to your application, use <a href=\"api#model_Model.findOneAndUpdate\">findOneAndUpdate</a> instead.</em></p>\n<h2>Yet more</h2>\n<p>The <a href=\"api#model_Model\">API docs</a> cover many additional methods available like <a href=\"api#model_Model.count\">count</a>, <a href=\"api#model_Model.mapReduce\">mapReduce</a>, <a href=\"api#model_Model.aggregate\">aggregate</a>, and <a href=\"api#model_Model.findOneAndRemove\">more</a>.</p>\n<h2 id=\"next\">Next Up</h2>\n<p>Now that we've covered <code>Models</code>, let's take a look at <a href=\"documents\">Documents</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010 LearnBoost<br>Licensed under the MIT License.<br>\n    <a href=\"http://mongoosejs.com/docs/models.html\" class=\"_attribution-link\">http://mongoosejs.com/docs/models.html</a>\n  </p>\n</div>\n","queries":"<h1>Queries</h1>\n<p>Documents can be retrieved through several static helper methods of <a href=\"models\">models</a>.</p>\n<p>Any <a href=\"api#model_Model\">model</a> method which <a href=\"api#model_Model.find\">involves</a> <a href=\"api#model_Model.findById\">specifying</a> <a href=\"api#model_Model.count\">query</a> <a href=\"api#model_Model.update\">conditions</a> can be executed two ways:</p> <p>When a <code>callback</code> function:</p> <ul>\n<li>is passed, the operation will be executed immediately with the results passed to the callback.</li>\n<li>is not passed, an instance of <a href=\"api#query-js\">Query</a> is returned, which provides a special query builder interface.</li>\n</ul>\n<div class=\"important\"><p>In mongoose 4, a <a href=\"api#query-js\">Query</a> has a <code>.then()</code> function, and thus can be used as a promise.</p></div>\n<p>When executing a query with a <code>callback</code> function, you specify your query as a JSON document. The JSON document's syntax is the same as the <a href=\"http://docs.mongodb.org/manual/tutorial/query-documents/\">MongoDB shell</a>.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> Person = mongoose.model(<span class=\"string\">'Person'</span>, yourSchema);\n\n<span class=\"comment\">// find each person with a last name matching 'Ghost', selecting the `name` and `occupation` fields</span>\nPerson.findOne({ <span class=\"string\">'name.last'</span>: <span class=\"string\">'Ghost'</span> }, <span class=\"string\">'name occupation'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, person)</span> {</span>\n  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err);\n  console.log(<span class=\"string\">'%s %s is a %s.'</span>, person.name.first, person.name.last, person.occupation) <span class=\"comment\">// Space Ghost is a talk show host.</span>\n})</pre>\n<p>Here we see that the query was executed immediately and the results passed to our callback. All callbacks in Mongoose use the pattern: <code>callback(error, result)</code>. If an error occurs executing the query, the <code>error</code> parameter will contain an error document, and <code>result</code> will be null. If the query is successful, the <code>error</code> parameter will be null, and the <code>result</code> will be populated with the results of the query.</p>\n<div class=\"important\"><p>Anywhere a callback is passed to a query in Mongoose, the callback follows the pattern <code>callback(error, results)</code>. What <code>results</code> is depends on the operation: For <code>findOne()</code> it is a <a href=\"api#model_Model.findOne\">potentially-null single document</a>, <code>find()</code> a <a href=\"api#model_Model.find\">list of documents</a>, <code>count()</code> <a href=\"api#model_Model.count\">the number of documents</a>, <code>update()</code> the <a href=\"api#model_Model.update\">number of documents affected</a>, etc. The <a href=\"api#model-js\">API docs for Models</a> provide more detail on what is passed to the callbacks.</p></div>\n<p>Now let's look at what happens when no <code>callback</code> is passed:</p>\n<pre data-language=\"javascript\"><span class=\"comment\">// find each person with a last name matching 'Ghost'</span>\n<span class=\"keyword\">var</span> query = Person.findOne({ <span class=\"string\">'name.last'</span>: <span class=\"string\">'Ghost'</span> });\n\n<span class=\"comment\">// selecting the `name` and `occupation` fields</span>\nquery.select(<span class=\"string\">'name occupation'</span>);\n\n<span class=\"comment\">// execute the query at a later time</span>\nquery.exec(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, person)</span> {</span>\n  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err);\n  console.log(<span class=\"string\">'%s %s is a %s.'</span>, person.name.first, person.name.last, person.occupation) <span class=\"comment\">// Space Ghost is a talk show host.</span>\n})</pre>\n<p>In the above code, the <code>query</code> variable is of type <a href=\"api#query-js\">Query</a>. A <code>Query</code> enables you to build up a query using chaining syntax, rather than specifying a JSON object. The below 2 examples are equivalent.</p>\n<pre data-language=\"javascript\"><span class=\"comment\">// With a JSON doc</span>\nPerson.\n  find({\n    occupation: <span class=\"regexp\">/host/</span>,\n    <span class=\"string\">'name.last'</span>: <span class=\"string\">'Ghost'</span>,\n    age: { $gt: <span class=\"number\">17</span>, $lt: <span class=\"number\">66</span> },\n    likes: { $<span class=\"keyword\">in</span>: [<span class=\"string\">'vaporizing'</span>, <span class=\"string\">'talking'</span>] }\n  }).\n  limit(<span class=\"number\">10</span>).\n  sort({ occupation: -<span class=\"number\">1</span> }).\n  select({ name: <span class=\"number\">1</span>, occupation: <span class=\"number\">1</span> }).\n  exec(callback);\n  \n<span class=\"comment\">// Using query builder</span>\nPerson.\n  find({ occupation: <span class=\"regexp\">/host/</span> }).\n  where(<span class=\"string\">'name.last'</span>).equals(<span class=\"string\">'Ghost'</span>).\n  where(<span class=\"string\">'age'</span>).gt(<span class=\"number\">17</span>).lt(<span class=\"number\">66</span>).\n  where(<span class=\"string\">'likes'</span>).<span class=\"keyword\">in</span>([<span class=\"string\">'vaporizing'</span>, <span class=\"string\">'talking'</span>]).\n  limit(<span class=\"number\">10</span>).\n  sort(<span class=\"string\">'-occupation'</span>).\n  select(<span class=\"string\">'name occupation'</span>).\n  exec(callback);\n  </pre>\n<p>A full list of <a href=\"api#query-js\">Query helper functions can be found in the API docs</a>.</p>\n<h2 id=\"refs\">References to other documents</h2>\n<p>There are no joins in MongoDB but sometimes we still want references to documents in other collections. This is where <a href=\"populate\">population</a> comes in. Read more about how to include documents from other collections in your query results <a href=\"api#query_Query-populate\">here</a>.</p>\n<h2>Streaming</h2>\n<p>You can <a href=\"http://nodejs.org/api/stream.html\">stream</a> query results from MongoDB. You need to call the <a href=\"api#query_Query-cursor\">Query#cursor()</a> function instead of <a href=\"api#query_Query-exec\">Query#exec</a> to return an instance of <a href=\"api#querycursor-js\">QueryCursor</a>.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> cursor = Person.find({ occupation: <span class=\"regexp\">/host/</span> }).cursor();\ncursor.on(<span class=\"string\">'data'</span>, <span class=\"keyword\">function</span>(doc) {\n  <span class=\"comment\">// Called once for every document</span>\n});\ncursor.on(<span class=\"string\">'close'</span>, <span class=\"keyword\">function</span>() {\n  <span class=\"comment\">// Called when done</span>\n});\n</pre>\n<h2 id=\"next\">Next Up</h2>\n<p>Now that we've covered <code>Queries</code>, let's take a look at <a href=\"validation\">validation</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010 LearnBoost<br>Licensed under the MIT License.<br>\n    <a href=\"http://mongoosejs.com/docs/queries.html\" class=\"_attribution-link\">http://mongoosejs.com/docs/queries.html</a>\n  </p>\n</div>\n","middleware":"<h1>Middleware</h1>\n<p>Middleware (also called pre and post <em>hooks</em>) are functions which are passed control during execution of asynchronous functions. Middleware is specified on the schema level and is useful for writing <a href=\"plugins\">plugins</a>. Mongoose 4.0 has 2 types of middleware: document middleware and query middleware. Document middleware is supported for the following document functions.</p> <ul>\n<li><a href=\"api#document_Document-init\">init</a></li>\n<li><a href=\"api#document_Document-validate\">validate</a></li>\n<li><a href=\"api#model_Model-save\">save</a></li>\n<li><a href=\"api#model_Model-remove\">remove</a></li>\n</ul> <p>Query middleware is supported for the following Model and Query functions.</p> <ul>\n<li><a href=\"api#query_Query-count\">count</a></li>\n<li><a href=\"api#query_Query-find\">find</a></li>\n<li><a href=\"api#query_Query-findOne\">findOne</a></li>\n<li><a href=\"api#query_Query-findOneAndRemove\">findOneAndRemove</a></li>\n<li><a href=\"api#query_Query-findOneAndUpdate\">findOneAndUpdate</a></li>\n<li><a href=\"api#query_Query-update\">update</a></li>\n</ul> <p>Both document middleware and query middleware support pre and post hooks. How pre and post hooks work is described in more detail below.</p> <p><strong>Note:</strong> There is no query hook for <code>remove()</code>, only for documents. If you set a 'remove' hook, it will be fired when you call <code>myDoc.remove()</code>, not when you call <code>MyModel.remove()</code>.</p>\n<h2 id=\"pre\">Pre</h2>\n<p>There are two types of <code>pre</code> hooks, serial and parallel.</p>\n<h4 id=\"serial\">Serial</h4>\n<p>Serial middleware are executed one after another, when each middleware calls <code>next</code>.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema(..);\nschema.pre(<span class=\"string\">'save'</span>, <span class=\"keyword\">function</span>(next) {\n  <span class=\"comment\">// do stuff</span>\n  next();\n});</pre>\n<h4 id=\"parallel\">Parallel</h4>\n<p>Parallel middleware offer more fine-grained flow control.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema(..);\n\n<span class=\"comment\">// `true` means this is a parallel middleware. You **must** specify `true`</span>\n<span class=\"comment\">// as the second parameter if you want to use parallel middleware.</span>\nschema.pre(<span class=\"string\">'save'</span>, <span class=\"literal\">true</span>, <span class=\"keyword\">function</span>(next, done) {\n  <span class=\"comment\">// calling next kicks off the next middleware in parallel</span>\n  next();\n  setTimeout(done, <span class=\"number\">100</span>);\n});</pre>\n<p>The hooked method, in this case <code>save</code>, will not be executed until <code>done</code> is called by each middleware.</p>\n<h4 id=\"use-cases\">Use Cases</h4>\n<p>Middleware are useful for atomizing model logic and avoiding nested blocks of async code. Here are some other ideas:</p>\n<ul>\n<li>complex validation</li>\n<li>removing dependent documents<ul><li>(removing a user removes all his blogposts)</li></ul>\n</li>\n<li>asynchronous defaults</li>\n<li>asynchronous tasks that a certain action triggers<ul>\n<li>triggering custom events</li>\n<li>notifications</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"error-handling\">Error handling</h4>\n<p>If any middleware calls <code>next</code> or <code>done</code> with a parameter of type <code>Error</code>, the flow is interrupted, and the error is passed to the callback.</p>\n<pre data-language=\"javascript\">schema.pre(<span class=\"string\">'save'</span>, <span class=\"keyword\">function</span>(next) {\n  <span class=\"comment\">// You **must** do `new Error()`. `next('something went wrong')` will</span>\n  <span class=\"comment\">// **not** work</span>\n  <span class=\"keyword\">var</span> err = <span class=\"keyword\">new</span> Error(<span class=\"string\">'something went wrong'</span>);\n  next(err);\n});\n\n<span class=\"comment\">// later...</span>\n\nmyDoc.save(<span class=\"keyword\">function</span>(err) {\n  console.log(err.message) <span class=\"comment\">// something went wrong</span>\n});\n</pre>\n<h2 id=\"post\">Post middleware</h2>\n<p><a href=\"api#schema_Schema-post\">post</a> middleware are executed <em>after</em> the hooked method and all of its <code>pre</code> middleware have completed. <code>post</code> middleware do not directly receive flow control, e.g. no <code>next</code> or <code>done</code> callbacks are passed to it. <code>post</code> hooks are a way to register traditional event listeners for these methods.</p>\n<pre data-language=\"javascript\">schema.post(<span class=\"string\">'init'</span>, <span class=\"keyword\">function</span>(doc) {\n  console.log(<span class=\"string\">'%s has been initialized from the db'</span>, doc._id);\n});\nschema.post(<span class=\"string\">'validate'</span>, <span class=\"keyword\">function</span>(doc) {\n  console.log(<span class=\"string\">'%s has been validated (but not saved yet)'</span>, doc._id);\n});\nschema.post(<span class=\"string\">'save'</span>, <span class=\"keyword\">function</span>(doc) {\n  console.log(<span class=\"string\">'%s has been saved'</span>, doc._id);\n});\nschema.post(<span class=\"string\">'remove'</span>, <span class=\"keyword\">function</span>(doc) {\n  console.log(<span class=\"string\">'%s has been removed'</span>, doc._id);\n});\n</pre>\n<h2 id=\"post-async\">Asynchronous Post Hooks</h2>\n<p>While post middleware doesn't receive flow control, you can still make sure that asynchronous post hooks are executed in a pre-defined order. If your post hook function takes at least 2 parameters, mongoose will assume the second parameter is a <code>next()</code> function that you will call to trigger the next middleware in the sequence.</p>\n<pre data-language=\"javascript\"><span class=\"comment\">// Takes 2 parameters: this is an asynchronous post hook</span>\nschema.post(<span class=\"string\">'save'</span>, <span class=\"keyword\">function</span>(doc, next) {\n  setTimeout(<span class=\"keyword\">function</span>() {\n    console.log(<span class=\"string\">'post1'</span>);\n    <span class=\"comment\">// Kick off the second post hook</span>\n    next();\n  }, <span class=\"number\">10</span>);\n});\n\n<span class=\"comment\">// Will not execute until the first middleware calls `next()`</span>\nschema.post(<span class=\"string\">'save'</span>, <span class=\"keyword\">function</span>(doc, next) {\n  console.log(<span class=\"string\">'post2'</span>);\n  next();\n});\n</pre>\n<h2 id=\"order\">Save/Validate Hooks</h2>\n<p>The <code>save()</code> function triggers <code>validate()</code> hooks, because mongoose has a built-in <code>pre('save')</code> hook that calls <code>validate()</code>. This means that all <code>pre('validate')</code> and <code>post('validate')</code> hooks get called <strong>before</strong> any <code>pre('save')</code> hooks.</p>\n<pre data-language=\"javascript\">schema.pre(<span class=\"string\">'validate'</span>, <span class=\"keyword\">function</span>() {\n  console.log(<span class=\"string\">'this gets printed first'</span>);\n});\nschema.post(<span class=\"string\">'validate'</span>, <span class=\"keyword\">function</span>() {\n  console.log(<span class=\"string\">'this gets printed second'</span>);\n});\nschema.pre(<span class=\"string\">'save'</span>, <span class=\"keyword\">function</span>() {\n  console.log(<span class=\"string\">'this gets printed third'</span>);\n});\nschema.post(<span class=\"string\">'save'</span>, <span class=\"keyword\">function</span>() {\n  console.log(<span class=\"string\">'this gets printed fourth'</span>);\n});\n</pre>\n<h2 id=\"notes\">Notes on findAndUpdate() and Query Middleware</h2>\n<p>Pre and post <code>save()</code> hooks are <strong>not</strong> executed on <code>update()</code>, <code>findOneAndUpdate()</code>, etc. You can see a more detailed discussion why in <a href=\"http://github.com/Automattic/mongoose/issues/964\">this GitHub issue</a>. Mongoose 4.0 has distinct hooks for these functions.</p>\n<pre data-language=\"javascript\">schema.pre(<span class=\"string\">'find'</span>, <span class=\"keyword\">function</span>() {\n  console.log(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> mongoose.Query); <span class=\"comment\">// true</span>\n  <span class=\"keyword\">this</span>.start = Date.now();\n});\n\nschema.post(<span class=\"string\">'find'</span>, <span class=\"keyword\">function</span>(result) {\n  console.log(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> mongoose.Query); <span class=\"comment\">// true</span>\n  <span class=\"comment\">// prints returned documents</span>\n  console.log(<span class=\"string\">'find() returned '</span> + JSON.stringify(result));\n  <span class=\"comment\">// prints number of milliseconds the query took</span>\n  console.log(<span class=\"string\">'find() took '</span> + (Date.now() - <span class=\"keyword\">this</span>.start) + <span class=\"string\">' millis'</span>);\n});\n</pre>\n<p>Query middleware differs from document middleware in a subtle but important way: in document middleware, <code>this</code> refers to the document being updated. In query middleware, mongoose doesn't necessarily have a reference to the document being updated, so <code>this</code> refers to the <strong>query</strong> object rather than the document being updated.</p> <p>For instance, if you wanted to add an <code>updatedAt</code> timestamp to every <code>update()</code> call, you would use the following pre hook.</p>\n<pre data-language=\"javascript\">schema.pre(<span class=\"string\">'update'</span>, <span class=\"keyword\">function</span>() {\n  <span class=\"keyword\">this</span>.update({},{ $set: { updatedAt: <span class=\"keyword\">new</span> Date() } });\n});\n</pre>\n<h2 id=\"error-handling\">Error Handling Middleware</h2>\n<p><em>New in 4.5.0</em></p> <p>Middleware execution normally stops the first time a piece of middleware calls <code>next()</code> with an error. However, there is a special kind of post middleware called \"error handling middleware\" that executes specifically when an error occurs.</p> <p>Error handling middleware is defined as middleware that takes one extra parameter: the 'error' that occurred as the first parameter to the function. Error handling middleware can then transform the error however you want.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({\n  name: {\n    type: String,\n    <span class=\"comment\">// Will trigger a MongoError with code 11000 when</span>\n    <span class=\"comment\">// you save a duplicate</span>\n    unique: <span class=\"literal\">true</span>\n  }\n});\n\n<span class=\"comment\">// Handler **must** take 3 parameters: the error that occurred, the document</span>\n<span class=\"comment\">// in question, and the `next()` function</span>\nschema.post(<span class=\"string\">'save'</span>, <span class=\"keyword\">function</span>(error, doc, next) {\n  <span class=\"keyword\">if</span> (error.name === <span class=\"string\">'MongoError'</span> &amp;&amp; error.code === <span class=\"number\">11000</span>) {\n    next(<span class=\"keyword\">new</span> Error(<span class=\"string\">'There was a duplicate key error'</span>));\n  } <span class=\"keyword\">else</span> {\n    next(error);\n  }\n});\n\n<span class=\"comment\">// Will trigger the `post('save')` error handler</span>\nPerson.create([{ name: <span class=\"string\">'Axl Rose'</span> }, { name: <span class=\"string\">'Axl Rose'</span> }]);\n</pre>\n<p>Error handling middleware also works with query middleware. You can also define a post <code>update()</code> hook that will catch MongoDB duplicate key errors.</p>\n<pre data-language=\"javascript\"><span class=\"comment\">// The same E11000 error can occur when you call `update()`</span>\n<span class=\"comment\">// This function **must** take 3 parameters. If you use the</span>\n<span class=\"comment\">// `passRawResult` function, this function **must** take 4</span>\n<span class=\"comment\">// parameters</span>\nschema.post(<span class=\"string\">'update'</span>, <span class=\"keyword\">function</span>(error, res, next) {\n  <span class=\"keyword\">if</span> (error.name === <span class=\"string\">'MongoError'</span> &amp;&amp; error.code === <span class=\"number\">11000</span>) {\n    next(<span class=\"keyword\">new</span> Error(<span class=\"string\">'There was a duplicate key error'</span>));\n  } <span class=\"keyword\">else</span> {\n    next(error);\n  }\n});\n\n<span class=\"keyword\">var</span> people = [{ name: <span class=\"string\">'Axl Rose'</span> }, { name: <span class=\"string\">'Slash'</span> }];\nPerson.create(people, <span class=\"keyword\">function</span>(error) {\n  Person.update({ name: <span class=\"string\">'Slash'</span> }, { $set: { name: <span class=\"string\">'Axl Rose'</span> } }, <span class=\"keyword\">function</span>(error) {\n    <span class=\"comment\">// `error.message` will be \"There was a duplicate key error\"</span>\n  });\n});\n</pre>\n<h2 id=\"next\">Next Up</h2>\n<p>Now that we've covered middleware, let's take a look at Mongoose's approach to faking JOINs with its query <a href=\"populate\">population</a> helper.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010 LearnBoost<br>Licensed under the MIT License.<br>\n    <a href=\"http://mongoosejs.com/docs/middleware.html\" class=\"_attribution-link\">http://mongoosejs.com/docs/middleware.html</a>\n  </p>\n</div>\n","schematypes":"<h1>SchemaTypes</h1>\n<p>SchemaTypes handle definition of path <a href=\"api#schematype_SchemaType-default\">defaults</a>, <a href=\"api#schematype_SchemaType-validate\">validation</a>, <a href=\"api#schematype_SchemaType-get\">getters</a>, <a href=\"api#schematype_SchemaType-set\">setters</a>, <a href=\"api#schematype_SchemaType-select\">field selection defaults</a> for <a href=\"api#query-js\">queries</a> and other general characteristics for <a href=\"api#schema-string-js\">Strings</a> and <a href=\"api#schema-number-js\">Numbers</a>. Check out their respective API documentation for more detail.</p>\n<p>Following are all valid <a href=\"api#schema_Schema.Types\">Schema Types</a>.</p>\n<ul>\n<li><a href=\"api#schema-string-js\">String</a></li>\n<li><a href=\"api#schema-number-js\">Number</a></li>\n<li><a href=\"api#schema-date-js\">Date</a></li>\n<li><a href=\"api#schema-buffer-js\">Buffer</a></li>\n<li>Boolean</li>\n<li>Mixed</li>\n<li><a href=\"api#schema-objectid-js\">Objectid</a></li>\n<li>Array</li>\n</ul>\n<h4>Example</h4>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({\n  name:    String,\n  binary:  Buffer,\n  living:  Boolean,\n  updated: { type: Date, <span class=\"keyword\">default</span>: Date.now },\n  age:     { type: Number, min: <span class=\"number\">18</span>, max: <span class=\"number\">65</span> },\n  mixed:   Schema.Types.Mixed,\n  _someId: Schema.Types.ObjectId,\n  array:      [],\n  ofString:   [String],\n  ofNumber:   [Number],\n  ofDates:    [Date],\n  ofBuffer:   [Buffer],\n  ofBoolean:  [Boolean],\n  ofMixed:    [Schema.Types.Mixed],\n  ofObjectId: [Schema.Types.ObjectId],\n  nested: {\n    stuff: { type: String, lowercase: <span class=\"literal\">true</span>, trim: <span class=\"literal\">true</span> }\n  }\n})\n\n<span class=\"comment\">// example use</span>\n\n<span class=\"keyword\">var</span> Thing = mongoose.model(<span class=\"string\">'Thing'</span>, schema);\n\n<span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> Thing;\nm.name = <span class=\"string\">'Statue of Liberty'</span>;\nm.age = <span class=\"number\">125</span>;\nm.updated = <span class=\"keyword\">new</span> Date;\nm.binary = <span class=\"keyword\">new</span> Buffer(<span class=\"number\">0</span>);\nm.living = <span class=\"literal\">false</span>;\nm.mixed = { any: { thing: <span class=\"string\">'i want'</span> } };\nm.markModified(<span class=\"string\">'mixed'</span>);\nm._someId = <span class=\"keyword\">new</span> mongoose.Types.ObjectId;\nm.array.push(<span class=\"number\">1</span>);\nm.ofString.push(<span class=\"string\">\"strings!\"</span>);\nm.ofNumber.unshift(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>);\nm.ofDates.addToSet(<span class=\"keyword\">new</span> Date);\nm.ofBuffer.pop();\nm.ofMixed = [<span class=\"number\">1</span>, [], <span class=\"string\">'three'</span>, { four: <span class=\"number\">5</span> }];\nm.nested.stuff = <span class=\"string\">'good'</span>;\nm.save(callback);\n</pre>\n<h2>Usage notes:</h2>\n<h4 id=\"Dates\">Dates</h4>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\">Built-in <code>Date</code> methods</a> are <a href=\"https://github.com/Automattic/mongoose/issues/1598\"><strong>not</strong> hooked into</a> the mongoose change tracking logic which in English means that if you use a <code>Date</code> in your document and modify it with a method like <code>setMonth()</code>, mongoose will be unaware of this change and <code>doc.save()</code> will not persist this modification. If you must modify <code>Date</code> types using built-in methods, tell mongoose about the change with <code>doc.markModified('pathToYourDate')</code> before saving.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> Assignment = mongoose.model(<span class=\"string\">'Assignment'</span>, { dueDate: Date });\nAssignment.findOne(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, doc)</span> {</span>\n  doc.dueDate.setMonth(<span class=\"number\">3</span>);\n  doc.save(callback); <span class=\"comment\">// THIS DOES NOT SAVE YOUR CHANGE</span>\n  \n  doc.markModified(<span class=\"string\">'dueDate'</span>);\n  doc.save(callback); <span class=\"comment\">// works</span>\n})\n</pre>\n<h4 id=\"mixed\">Mixed</h4>\n<p>An \"anything goes\" SchemaType, its flexibility comes at a trade-off of it being harder to maintain. Mixed is available either through Schema.Types.Mixed or by passing an empty object literal. The following are equivalent:</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> Any = <span class=\"keyword\">new</span> Schema({ any: {} });\n<span class=\"keyword\">var</span> Any = <span class=\"keyword\">new</span> Schema({ any: Object });\n<span class=\"keyword\">var</span> Any = <span class=\"keyword\">new</span> Schema({ any: Schema.Types.Mixed });</pre>\n<p>Since it is a schema-less type, you can change the value to anything else you like, but Mongoose loses the ability to auto detect and save those changes. To \"tell\" Mongoose that the value of a Mixed type has changed, call the <code>.markModified(path)</code> method of the document passing the path to the Mixed type you just changed.</p>\n<pre data-language=\"javascript\">person.anything = { x: [<span class=\"number\">3</span>, <span class=\"number\">4</span>, { y: <span class=\"string\">\"changed\"</span> }] };\nperson.markModified(<span class=\"string\">'anything'</span>);\nperson.save(); <span class=\"comment\">// anything will now get saved</span></pre>\n<h4 id=\"objectids\">ObjectIds</h4>\n<p>To specify a type of ObjectId, use <code>Schema.Types.ObjectId</code> in your declaration.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> mongoose = require(<span class=\"string\">'mongoose'</span>);\n<span class=\"keyword\">var</span> ObjectId = mongoose.Schema.Types.ObjectId;\n<span class=\"keyword\">var</span> Car = <span class=\"keyword\">new</span> Schema({ driver: ObjectId });\n<span class=\"comment\">// or just Schema.ObjectId for backwards compatibility with v2</span></pre>\n<h4 id=\"arrays\">Arrays</h4>\n<p>Provide creation of arrays of <a href=\"api#schema_Schema.Types\">SchemaTypes</a> or <a href=\"subdocs\">Sub-Documents</a>.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> ToySchema = <span class=\"keyword\">new</span> Schema({ name: String });\n<span class=\"keyword\">var</span> ToyBox = <span class=\"keyword\">new</span> Schema({\n  toys: [ToySchema],\n  buffers: [Buffer],\n  string:  [String],\n  numbers: [Number]\n  <span class=\"comment\">// ... etc</span>\n});</pre>\n<p>Note: specifying an empty array is equivalent to <code>Mixed</code>. The following all create arrays of <code>Mixed</code>:</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> Empty1 = <span class=\"keyword\">new</span> Schema({ any: [] });\n<span class=\"keyword\">var</span> Empty2 = <span class=\"keyword\">new</span> Schema({ any: Array });\n<span class=\"keyword\">var</span> Empty3 = <span class=\"keyword\">new</span> Schema({ any: [Schema.Types.Mixed] });\n<span class=\"keyword\">var</span> Empty4 = <span class=\"keyword\">new</span> Schema({ any: [{}] });</pre>\n<h2 id=\"customtypes\">Creating Custom Types</h2>\n<p>Mongoose can also be extended with custom SchemaTypes. Search the <a href=\"http://plugins.mongoosejs.com\">plugins</a> site for compatible types like <a href=\"https://github.com/aheckmann/mongoose-long\">mongoose-long</a>, <a href=\"https://github.com/vkarpov15/mongoose-int32\">mongoose-int32</a> and <a href=\"https://github.com/aheckmann/mongoose-function\">other</a> <a href=\"https://github.com/OpenifyIt/mongoose-types\">types</a>. To create your own custom schema take a look at <a href=\"customschematypes\">Creating a Basic Custom Schema Type</a>.</p>\n<h2 id=\"next\">Next Up</h2>\n<p>Now that we've covered <code>SchemaTypes</code>, let's take a look at <a href=\"models\">Models</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010 LearnBoost<br>Licensed under the MIT License.<br>\n    <a href=\"http://mongoosejs.com/docs/schematypes.html\" class=\"_attribution-link\">http://mongoosejs.com/docs/schematypes.html</a>\n  </p>\n</div>\n","documents":"<h1>Documents</h1>\n<p>Mongoose <a href=\"api#document-js\">documents</a> represent a one-to-one mapping to documents as stored in MongoDB. Each document is an instance of its <a href=\"models\">Model</a>.</p>\n<h2>Retrieving</h2>\n<p>There are many ways to retrieve documents from MongoDB. We won't cover that in this section. See the chapter on <a href=\"queries\">querying</a> for detail.</p>\n<h2>Updating</h2>\n<p>There are a number of ways to update documents. We'll first look at a traditional approach using <a href=\"api#model_Model.findById\">findById</a>:</p>\n<pre data-language=\"javascript\">Tank.findById(id, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, tank)</span> {</span>\n  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err);\n  \n  tank.size = <span class=\"string\">'large'</span>;\n  tank.save(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err);\n    res.send(tank);\n  });\n});</pre>\n<p>This approach involves first retreiving the document from Mongo, then issuing an update command (triggered by calling <code>save</code>). However, if we don't need the document returned in our application and merely want to update a property in the database directly, <a href=\"api#model_Model.update\">Model#update</a> is right for us:</p>\n<pre data-language=\"javascript\">Tank.update({ _id: id }, { $set: { size: <span class=\"string\">'large'</span> }}, callback);</pre>\n<p>If we do need the document returned in our application there is another, often <a href=\"api#model_Model.findByIdAndUpdate\">better</a>, option:</p>\n<pre data-language=\"javascript\">Tank.findByIdAndUpdate(id, { $set: { size: <span class=\"string\">'large'</span> }}, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, tank)</span> {</span>\n  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err);\n  res.send(tank);\n});</pre>\n<p>The <code>findAndUpdate/Remove</code> static methods all make a change to at most one document, and return it with just one call to the database. There <a href=\"api#model_Model.findByIdAndRemove\">are</a> <a href=\"api#model_Model.findOneAndUpdate\">several</a> <a href=\"api#model_Model.findOneAndRemove\">variations</a> on the <a href=\"http://www.mongodb.org/display/DOCS/findAndModify+Command\">findAndModify</a> theme. Read the <a href=\"api\">API</a> docs for more detail. <em>Note that <code>findAndUpdate/Remove</code> do not execute any hooks or validation before making the change in the database. If you need hooks and validation, first query for the document and then save it.</em></p>\n<h2>Validating</h2>\n<p>Documents are validated before they are saved. Read the <a href=\"api#document_Document-validate\">api</a> docs or the <a href=\"validation\">validation</a> chapter for detail.</p>\n<h2 id=\"next\">Next Up</h2>\n<p>Now that we've covered <code>Documents</code>, let's take a look at <a href=\"subdocs\">Sub-documents</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010 LearnBoost<br>Licensed under the MIT License.<br>\n    <a href=\"http://mongoosejs.com/docs/documents.html\" class=\"_attribution-link\">http://mongoosejs.com/docs/documents.html</a>\n  </p>\n</div>\n","plugins":"<h1>Plugins</h1>\n<p>Schemas are pluggable, that is, they allow for applying pre-packaged capabilities to extend their functionality. This is a very powerful feature.</p> <p>Suppose that we have several collections in our database and want to add last-modified functionality to each one. With plugins this is easy. Just create a plugin once and apply it to each <code>Schema</code>:</p>\n<pre data-language=\"javascript\"><span class=\"comment\">// lastMod.js</span>\nmodule.exports = exports = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lastModifiedPlugin</span> <span class=\"params\">(schema, options)</span> {</span>\n  schema.add({ lastMod: Date })\n  \n  schema.pre(<span class=\"string\">'save'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(next)</span> {</span>\n    <span class=\"keyword\">this</span>.lastMod = <span class=\"keyword\">new</span> Date\n    next()\n  })\n  \n  <span class=\"keyword\">if</span> (options &amp;&amp; options.index) {\n    schema.path(<span class=\"string\">'lastMod'</span>).index(options.index)\n  }\n}\n\n<span class=\"comment\">// game-schema.js</span>\n<span class=\"keyword\">var</span> lastMod = require(<span class=\"string\">'./lastMod'</span>);\n<span class=\"keyword\">var</span> Game = <span class=\"keyword\">new</span> Schema({ ... });\nGame.plugin(lastMod, { index: <span class=\"literal\">true</span> });\n\n<span class=\"comment\">// player-schema.js</span>\n<span class=\"keyword\">var</span> lastMod = require(<span class=\"string\">'./lastMod'</span>);\n<span class=\"keyword\">var</span> Player = <span class=\"keyword\">new</span> Schema({ ... });\nPlayer.plugin(lastMod);</pre>\n<p>We just added last-modified behavior to both our <code>Game</code> and <code>Player</code> schemas and declared an index on the <code>lastMod</code> path of our Games to boot. Not bad for a few lines of code.</p>\n<h2 id=\"global\">Global Plugins</h2>\n<p>Want to register a plugin for all schemas? The mongoose singleton has a <code>.plugin()</code> function that registers a plugin for every schema. For example:</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> mongoose = require(<span class=\"string\">'mongoose'</span>);\nmongoose.plugin(require(<span class=\"string\">'./lastMod'</span>));\n\n<span class=\"keyword\">var</span> gameSchema = <span class=\"keyword\">new</span> Schema({ ... });\n<span class=\"keyword\">var</span> playerSchema = <span class=\"keyword\">new</span> Schema({ ... });\n<span class=\"comment\">// `lastModifiedPlugin` gets attached to both schemas</span>\n<span class=\"keyword\">var</span> Game = mongoose.model(<span class=\"string\">'Game'</span>, gameSchema);\n<span class=\"keyword\">var</span> Player = mongoose.model(<span class=\"string\">'Player'</span>, playerSchema);</pre>\n<h2>Community!</h2>\n<p>Not only can you re-use schema functionality in your own projects but you also reap the benefits of the Mongoose community as well. Any plugin published to <a href=\"https://npmjs.org/\">npm</a> and <a href=\"https://npmjs.org/doc/tag.html\">tagged</a> with <code>mongoose</code> will show up on our <a href=\"http://plugins.mongoosejs.io\">search results</a> page.</p>\n<h2 id=\"next\">Next Up</h2>\n<p>Now that we've covered plugins and how to get involved in the great community growing around them, let's take a look how you can help <a href=\"https://github.com/Automattic/mongoose/blob/master/CONTRIBUTING.md\">contribute</a> to the continuing development of Mongoose itself.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010 LearnBoost<br>Licensed under the MIT License.<br>\n    <a href=\"http://mongoosejs.com/docs/plugins.html\" class=\"_attribution-link\">http://mongoosejs.com/docs/plugins.html</a>\n  </p>\n</div>\n","populate":"<h1>Population</h1>\n<p>There are no joins in MongoDB but sometimes we still want references to documents in other collections. This is where population comes in.</p> <p>Population is the process of automatically replacing the specified paths in the document with document(s) from other collection(s). We may populate a single document, multiple documents, plain object, multiple plain objects, or all objects returned from a query. Let's look at some examples.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> mongoose = require(<span class=\"string\">'mongoose'</span>)\n  , Schema = mongoose.Schema\n  \n<span class=\"keyword\">var</span> personSchema = Schema({\n  _id     : Number,\n  name    : String,\n  age     : Number,\n  stories : [{ type: Schema.Types.ObjectId, ref: <span class=\"string\">'Story'</span> }]\n});\n\n<span class=\"keyword\">var</span> storySchema = Schema({\n  _creator : { type: Number, ref: <span class=\"string\">'Person'</span> },\n  title    : String,\n  fans     : [{ type: Number, ref: <span class=\"string\">'Person'</span> }]\n});\n\n<span class=\"keyword\">var</span> Story  = mongoose.model(<span class=\"string\">'Story'</span>, storySchema);\n<span class=\"keyword\">var</span> Person = mongoose.model(<span class=\"string\">'Person'</span>, personSchema);</pre>\n<p>So far we've created two <a href=\"models\">Models</a>. Our <code>Person</code> model has its <code>stories</code> field set to an array of <code>ObjectId</code>s. The <code>ref</code> option is what tells Mongoose which model to use during population, in our case the <code>Story</code> model. All <code>_id</code>s we store here must be document <code>_id</code>s from the <code>Story</code> model. We also declared the <code>Story</code> <code>_creator</code> property as a <code>Number</code>, the same type as the <code>_id</code> used in the <code>personSchema</code>. It is important to match the type of <code>_id</code> to the type of ref.</p>\n<div class=\"important\"><p><strong>Note</strong>: <code>ObjectId</code>, <code>Number</code>, <code>String</code>, and <code>Buffer</code> are valid for use as refs.</p></div>\n<h2>Saving refs</h2>\n<p>Saving refs to other documents works the same way you normally save properties, just assign the <code>_id</code> value:</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> aaron = <span class=\"keyword\">new</span> Person({ _id: <span class=\"number\">0</span>, name: <span class=\"string\">'Aaron'</span>, age: <span class=\"number\">100</span> });\n\naaron.save(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err);\n  \n  <span class=\"keyword\">var</span> story1 = <span class=\"keyword\">new</span> Story({\n    title: <span class=\"string\">\"Once upon a timex.\"</span>,\n    _creator: aaron._id    <span class=\"comment\">// assign the _id from the person</span>\n  });\n  \n  story1.save(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err);\n    <span class=\"comment\">// thats it!</span>\n  });\n});</pre>\n<h2>Population</h2>\n<p>So far we haven't done anything much different. We've merely created a <code>Person</code> and a <code>Story</code>. Now let's take a look at populating our story's <code>_creator</code> using the query builder:</p>\n<pre data-language=\"javascript\">Story\n.findOne({ title: <span class=\"string\">'Once upon a timex.'</span> })\n.populate(<span class=\"string\">'_creator'</span>)\n.exec(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, story)</span> {</span>\n  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err);\n  console.log(<span class=\"string\">'The creator is %s'</span>, story._creator.name);\n  <span class=\"comment\">// prints \"The creator is Aaron\"</span>\n});</pre>\n<p>Populated paths are no longer set to their original <code>_id</code> , their value is replaced with the mongoose document returned from the database by performing a separate query before returning the results.</p> <p>Arrays of refs work the same way. Just call the <a href=\"api#query_Query-populate\">populate</a> method on the query and an array of documents will be returned <em>in place</em> of the original <code>_id</code>s.</p>\n<div class=\"important\"><p><strong>Note</strong>: mongoose &gt;= 3.6 exposes the original <code>_ids</code> used during population through the <a href=\"api#document_Document-populated\">document#populated()</a> method.</p></div>\n<h2>Setting Populated Fields</h2>\n<p>In Mongoose &gt;= 4.0, you can manually populate a field as well.</p>\n<pre data-language=\"javascript\">Story.findOne({ title: <span class=\"string\">'Once upon a timex.'</span> }, <span class=\"keyword\">function</span>(error, story) {\n  <span class=\"keyword\">if</span> (error) {\n    <span class=\"keyword\">return</span> handleError(error);\n  }\n  story._creator = aaron;\n  console.log(story._creator.name); <span class=\"comment\">// prints \"Aaron\"</span>\n});</pre>\n<p>Note that this only works for single refs. You currently <strong>can't</strong> manually populate an array of refs.</p>\n<h2>Field selection</h2>\n<p>What if we only want a few specific fields returned for the populated documents? This can be accomplished by passing the usual <a href=\"api#query_Query-select\">field name syntax</a> as the second argument to the populate method:</p>\n<pre data-language=\"javascript\">Story\n.findOne({ title: <span class=\"regexp\">/timex/i</span> })\n.populate(<span class=\"string\">'_creator'</span>, <span class=\"string\">'name'</span>) <span class=\"comment\">// only return the Persons name</span>\n.exec(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, story)</span> {</span>\n  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err);\n  \n  console.log(<span class=\"string\">'The creator is %s'</span>, story._creator.name);\n  <span class=\"comment\">// prints \"The creator is Aaron\"</span>\n  \n  console.log(<span class=\"string\">'The creators age is %s'</span>, story._creator.age);\n  <span class=\"comment\">// prints \"The creators age is null'</span>\n})</pre>\n<h2>Populating multiple paths</h2>\n<p>What if we wanted to populate multiple paths at the same time?</p>\n<pre data-language=\"javascript\">Story\n.find(...)\n.populate(<span class=\"string\">'fans _creator'</span>) <span class=\"comment\">// space delimited path names</span>\n.exec()</pre>\n<div class=\"important\"><p>In <strong>mongoose &gt;= 3.6</strong>, we can pass a space delimited string of path names to populate. Before 3.6 you must execute the <code>populate()</code> method multiple times.</p></div>\n<pre data-language=\"javascript\">Story\n.find(...)\n.populate(<span class=\"string\">'fans'</span>)\n.populate(<span class=\"string\">'_creator'</span>)\n.exec()</pre>\n<h2>Query conditions and other options</h2>\n<p>What if we wanted to populate our fans array based on their age, select just their names, and return at most, any 5 of them?</p>\n<pre data-language=\"javascript\">Story\n.find(...)\n.populate({\n  path: <span class=\"string\">'fans'</span>,\n  match: { age: { $gte: <span class=\"number\">21</span> }},\n  select: <span class=\"string\">'name -_id'</span>,\n  options: { limit: <span class=\"number\">5</span> }\n})\n.exec()</pre>\n<h2>Refs to children</h2>\n<p>We may find however, if we use the <code>aaron</code> object, we are unable to get a list of the stories. This is because no <code>story</code> objects were ever 'pushed' onto <code>aaron.stories</code>.</p> <p>There are two perspectives here. First, it's nice to have <code>aaron</code> know which stories are his.</p>\n<pre data-language=\"javascript\">aaron.stories.push(story1);\naaron.save(callback);</pre>\n<p>This allows us to perform a <code>find</code> and <code>populate</code> combo:</p>\n<pre data-language=\"javascript\">Person\n.findOne({ name: <span class=\"string\">'Aaron'</span> })\n.populate(<span class=\"string\">'stories'</span>) <span class=\"comment\">// only works if we pushed refs to children</span>\n.exec(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, person)</span> {</span>\n  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err);\n  console.log(person);\n})</pre>\n<div class=\"important\"><p>It is debatable that we really want two sets of pointers as they may get out of sync. Instead we could skip populating and directly <code>find()</code> the stories we are interested in.</p></div>\n<pre data-language=\"javascript\">Story\n.find({ _creator: aaron._id })\n.exec(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, stories)</span> {</span>\n  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err);\n  console.log(<span class=\"string\">'The stories are an array: '</span>, stories);\n})\n</pre>\n<h2>Updating refs</h2>\n<p>Now that we have a <code>story</code> we realized that the <code>_creator</code> was incorrect. We can update refs the same as any other property through Mongoose's internal casting:</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> guille = <span class=\"keyword\">new</span> Person({ name: <span class=\"string\">'Guillermo'</span> });\nguille.save(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err);\n  \n  story._creator = guille;\n  console.log(story._creator.name);\n  <span class=\"comment\">// prints \"Guillermo\" in mongoose &gt;= 3.6</span>\n  <span class=\"comment\">// see https://github.com/Automattic/mongoose/wiki/3.6-release-notes</span>\n  \n  story.save(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err);\n    \n    Story\n    .findOne({ title: <span class=\"regexp\">/timex/i</span> })\n    .populate({ path: <span class=\"string\">'_creator'</span>, select: <span class=\"string\">'name'</span> })\n    .exec(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, story)</span> {</span>\n      <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err);\n      \n      console.log(<span class=\"string\">'The creator is %s'</span>, story._creator.name)\n      <span class=\"comment\">// prints \"The creator is Guillermo\"</span>\n    })\n  })\n})\n</pre>\n<div class=\"important\"><p>The documents returned from <a href=\"api#query_Query-populate\">query population</a> become fully functional, <code>remove</code>able, <code>save</code>able documents unless the <a href=\"api#query_Query-lean\">lean</a> option is specified. Do not confuse them with <a href=\"subdocs\">sub docs</a>. Take caution when calling its remove method because you'll be removing it from the database, not just the array.</p></div>\n<h2 id=\"populate_an_existing_mongoose_document\">Populating an existing document</h2>\n<p>If we have an existing mongoose document and want to populate some of its paths, <strong>mongoose &gt;= 3.6</strong> supports the <a href=\"api#document_Document-populate\">document#populate()</a> method.</p>\n<h2 id=\"populate_multiple_documents\">Populating multiple existing documents</h2>\n<p>If we have one or many mongoose documents or even plain objects (<em>like <a href=\"api#model_Model.mapReduce\">mapReduce</a> output</em>), we may populate them using the <a href=\"api#model_Model.populate\">Model.populate()</a> method available in <strong>mongoose &gt;= 3.6</strong>. This is what <code>document#populate()</code> and <code>query#populate()</code> use to populate documents.</p>\n<h2 id=\"deep-populate\">Populating across multiple levels</h2>\n<p>Say you have a user schema which keeps track of the user's friends.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> userSchema = <span class=\"keyword\">new</span> Schema({\n  name: String,\n  friends: [{ type: ObjectId, ref: <span class=\"string\">'User'</span> }]\n});</pre>\n<p>Populate lets you get a list of a user's friends, but what if you also wanted a user's friends of friends? Specify the <code>populate</code> option to tell mongoose to populate the <code>friends</code> array of all the user's friends:</p>\n<pre data-language=\"javascript\">User.\n  findOne({ name: <span class=\"string\">'Val'</span> }).\n  populate({\n    path: <span class=\"string\">'friends'</span>,\n    <span class=\"comment\">// Get friends of friends - populate the 'friends' array for every friend</span>\n    populate: { path: <span class=\"string\">'friends'</span> }\n  });\n  </pre>\n<h2 id=\"cross-db-populate\">Populating across Databases</h2>\n<p>Let's say you have a schema representing events, and a schema representing conversations. Each event has a corresponding conversation thread.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> eventSchema = <span class=\"keyword\">new</span> Schema({\n  name: String,\n  <span class=\"comment\">// The id of the corresponding conversation</span>\n  <span class=\"comment\">// Notice there's no ref here!</span>\n  conversation: ObjectId\n});\n<span class=\"keyword\">var</span> conversationSchema = <span class=\"keyword\">new</span> Schema({\n  numMessages: Number\n});</pre>\n<p>Also, suppose that events and conversations are stored in separate MongoDB instances.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> db1 = mongoose.createConnection(<span class=\"string\">'localhost:27000/db1'</span>);\n<span class=\"keyword\">var</span> db2 = mongoose.createConnection(<span class=\"string\">'localhost:27001/db2'</span>);\n\n<span class=\"keyword\">var</span> Event = db1.model(<span class=\"string\">'Event'</span>, eventSchema);\n<span class=\"keyword\">var</span> Conversation = db2.model(<span class=\"string\">'Conversation'</span>, conversationSchema);</pre>\n<p>In this situation, you will <strong>not</strong> be able to <code>populate()</code> normally. The <code>conversation</code> field will always be null, because <code>populate()</code> doesn't know which model to use. However, <a href=\"api#model_Model.populate\">you can specify the model explicitly</a>.</p>\n<pre data-language=\"javascript\">Event.\n  find().\n  populate({ path: <span class=\"string\">'conversation'</span>, model: Conversation }).\n  exec(<span class=\"keyword\">function</span>(error, docs) { <span class=\"comment\">/* ... */</span> });</pre>\n<p>This is known as a \"cross-database populate,\" because it enables you to populate across MongoDB databases and even acrosss MongoDB instances.</p>\n<h2 id=\"dynamic-ref\">Dynamic References</h2>\n<p>Mongoose can also populate from multiple collections at the same time. Let's say you have a user schema that has an array of \"connections\" - a user can be connected to either other users or an organization.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> userSchema = <span class=\"keyword\">new</span> Schema({\n  name: String,\n  connections: [{\n    kind: String,\n    item: { type: ObjectId, refPath: <span class=\"string\">'connections.kind'</span> }\n  }]\n});\n\n<span class=\"keyword\">var</span> organizationSchema = <span class=\"keyword\">new</span> Schema({ name: String, kind: String });\n\n<span class=\"keyword\">var</span> User = mongoose.model(<span class=\"string\">'User'</span>, userSchema);\n<span class=\"keyword\">var</span> Organization = mongoose.model(<span class=\"string\">'Organization'</span>, organizationSchema);</pre>\n<p>The <code>refPath</code> property above means that mongoose will look at the <code>connections.kind</code> path to determine which model to use for <code>populate()</code>. In other words, the <code>refPath</code> property enables you to make the <code>ref</code> property dynamic.</p>\n<pre data-language=\"javascript\"><span class=\"comment\">// Say we have one organization:</span>\n<span class=\"comment\">// `{ _id: ObjectId('000000000000000000000001'), name: \"Guns N' Roses\", kind: 'Band' }`</span>\n<span class=\"comment\">// And two users:</span>\n<span class=\"comment\">// {</span>\n<span class=\"comment\">//   _id: ObjectId('000000000000000000000002')</span>\n<span class=\"comment\">//   name: 'Axl Rose',</span>\n<span class=\"comment\">//   connections: [</span>\n<span class=\"comment\">//     { kind: 'User', item: ObjectId('000000000000000000000003') },</span>\n<span class=\"comment\">//     { kind: 'Organization', item: ObjectId('000000000000000000000001') }</span>\n<span class=\"comment\">//   ]</span>\n<span class=\"comment\">// },</span>\n<span class=\"comment\">// {</span>\n<span class=\"comment\">//   _id: ObjectId('000000000000000000000003')</span>\n<span class=\"comment\">//   name: 'Slash',</span>\n<span class=\"comment\">//   connections: []</span>\n<span class=\"comment\">// }</span>\nUser.\n  findOne({ name: <span class=\"string\">'Axl Rose'</span> }).\n  populate(<span class=\"string\">'connections.item'</span>).\n  exec(<span class=\"keyword\">function</span>(error, doc) {\n    <span class=\"comment\">// doc.connections[0].item is a User doc</span>\n    <span class=\"comment\">// doc.connections[1].item is an Organization doc</span>\n  });\n  </pre>\n<h2 id=\"populate-virtuals\">Populate Virtuals</h2>\n<p><em>New in 4.5.0</em></p> <p>So far you've only populated based on the <code>_id</code> field. However, that's sometimes not the right choice. In particular, <a href=\"https://docs.mongodb.com/manual/tutorial/model-referenced-one-to-many-relationships-between-documents/\">arrays that grow without bound are a MongoDB anti-pattern</a>. Using mongoose virtuals, you can define more sophisticated relationships between documents.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> PersonSchema = <span class=\"keyword\">new</span> Schema({\n  name: String,\n  band: String\n});\n\n<span class=\"keyword\">var</span> BandSchema = <span class=\"keyword\">new</span> Schema({\n  name: String\n});\nBandSchema.virtual(<span class=\"string\">'members'</span>, {\n  ref: <span class=\"string\">'Person'</span>, <span class=\"comment\">// The model to use</span>\n  localField: <span class=\"string\">'name'</span>, <span class=\"comment\">// Find people where `localField`</span>\n  foreignField: <span class=\"string\">'band'</span> <span class=\"comment\">// is equal to `foreignField`</span>\n});\n\n<span class=\"keyword\">var</span> Person = mongoose.model(<span class=\"string\">'Person'</span>, personSchema);\n<span class=\"keyword\">var</span> Band = mongoose.model(<span class=\"string\">'Band'</span>, bandSchema);\n\n<span class=\"comment\">/**\n * Suppose you have 2 bands: \"Guns N' Roses\" and \"Motley Crue\"\n * And 4 people: \"Axl Rose\" and \"Slash\" with \"Guns N' Roses\", and\n * \"Vince Neil\" and \"Nikki Sixx\" with \"Motley Crue\"\n */</span>\nBand.find({}).populate(<span class=\"string\">'members'</span>).exec(<span class=\"keyword\">function</span>(error, bands) {\n  <span class=\"comment\">/* `bands.members` is now an array of instances of `Person` */</span>\n});\n</pre>\n<h2 id=\"next\">Next Up</h2>\n<p>Now that we've covered query population, let's take a look at <a href=\"connections\">connections</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010 LearnBoost<br>Licensed under the MIT License.<br>\n    <a href=\"http://mongoosejs.com/docs/populate.html\" class=\"_attribution-link\">http://mongoosejs.com/docs/populate.html</a>\n  </p>\n</div>\n","subdocs":"<h1>Sub Docs</h1>\n<p><a href=\"api#types-embedded-js\">Sub-documents</a> are docs with schemas of their own which are elements of a parents document array:</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> childSchema = <span class=\"keyword\">new</span> Schema({ name: <span class=\"string\">'string'</span> });\n\n<span class=\"keyword\">var</span> parentSchema = <span class=\"keyword\">new</span> Schema({\n  children: [childSchema]\n})\n</pre>\n<p>Sub-documents enjoy all the same features as normal <a href=\"api#document-js\">documents</a>. The only difference is that they are not saved individually, they are saved whenever their top-level parent document is saved.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> Parent = mongoose.model(<span class=\"string\">'Parent'</span>, parentSchema);\n<span class=\"keyword\">var</span> parent = <span class=\"keyword\">new</span> Parent({ children: [{ name: <span class=\"string\">'Matt'</span> }, { name: <span class=\"string\">'Sarah'</span> }] })\nparent.children[<span class=\"number\">0</span>].name = <span class=\"string\">'Matthew'</span>;\nparent.save(callback);\n</pre>\n<p>If an error occurs in a sub-documents' middleware, it is bubbled up to the <code>save()</code> callback of the parent, so error handling is a snap!</p>\n<pre data-language=\"javascript\">childSchema.pre(<span class=\"string\">'save'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(next)</span> {</span>\n  <span class=\"keyword\">if</span> (<span class=\"string\">'invalid'</span> == <span class=\"keyword\">this</span>.name) <span class=\"keyword\">return</span> next(<span class=\"keyword\">new</span> Error(<span class=\"string\">'#sadpanda'</span>));\n  next();\n});\n\n<span class=\"keyword\">var</span> parent = <span class=\"keyword\">new</span> Parent({ children: [{ name: <span class=\"string\">'invalid'</span> }] });\nparent.save(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n  console.log(err.message) <span class=\"comment\">// #sadpanda</span>\n})\n</pre>\n<h2>Finding a sub-document</h2>\n<p>Each document has an <code>_id</code>. DocumentArrays have a special <a href=\"api#types_documentarray_MongooseDocumentArray-id\">id</a> method for looking up a document by its <code>_id</code>.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> doc = parent.children.id(id);\n</pre>\n<h2>Adding sub-docs</h2>\n<p>MongooseArray methods such as <a href=\"api#types_array_MongooseArray.push\">push</a>, <a href=\"api#types_array_MongooseArray.unshift\">unshift</a>, <a href=\"api#types_array_MongooseArray.addToSet\">addToSet</a>, and others cast arguments to their proper types transparently:</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> Parent = mongoose.model(<span class=\"string\">'Parent'</span>);\n<span class=\"keyword\">var</span> parent = <span class=\"keyword\">new</span> Parent;\n\n<span class=\"comment\">// create a comment</span>\nparent.children.push({ name: <span class=\"string\">'Liesl'</span> });\n<span class=\"keyword\">var</span> subdoc = parent.children[<span class=\"number\">0</span>];\nconsole.log(subdoc) <span class=\"comment\">// { _id: '501d86090d371bab2c0341c5', name: 'Liesl' }</span>\nsubdoc.isNew; <span class=\"comment\">// true</span>\n\nparent.save(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err)\n  console.log(<span class=\"string\">'Success!'</span>);\n});</pre>\n<p>Sub-docs may also be created without adding them to the array by using the <a href=\"api#types_documentarray_MongooseDocumentArray.create\">create</a> method of MongooseArrays.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> newdoc = parent.children.create({ name: <span class=\"string\">'Aaron'</span> });\n</pre>\n<h2>Removing docs</h2>\n<p>Each sub-document has it's own <a href=\"api#types_embedded_EmbeddedDocument-remove\">remove</a> method.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> doc = parent.children.id(id).remove();\nparent.save(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err);\n  console.log(<span class=\"string\">'the sub-doc was removed'</span>)\n});\n</pre>\n<h4 id=\"altsyntax\">Alternate declaration syntax</h4>\n<p>If you don't need access to the sub-document schema instance, you may also declare sub-docs by simply passing an object literal:</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> parentSchema = <span class=\"keyword\">new</span> Schema({\n  children: [{ name: <span class=\"string\">'string'</span> }]\n})\n</pre>\n<h4 id=\"single-embedded\">Single Embedded Subdocs</h4>\n<p><strong>New in 4.2.0</strong></p> <p>You can also embed schemas without using arrays.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> childSchema = <span class=\"keyword\">new</span> Schema({ name: <span class=\"string\">'string'</span> });\n\n<span class=\"keyword\">var</span> parentSchema = <span class=\"keyword\">new</span> Schema({\n  child: childSchema\n});</pre>\n<p>A single embedded sub-document behaves similarly to an embedded array. It only gets saved when the parent document gets saved, and its pre/post document middleware get executed.</p>\n<pre data-language=\"javascript\">childSchema.pre(<span class=\"string\">'save'</span>, <span class=\"keyword\">function</span>(next) {\n  console.log(<span class=\"keyword\">this</span>.name); <span class=\"comment\">// prints 'Leia'</span>\n});\n<span class=\"keyword\">var</span> Parent = mongoose.model(<span class=\"string\">'Parent'</span>, parentSchema);\n<span class=\"keyword\">var</span> parent = <span class=\"keyword\">new</span> Parent({ child: { name: <span class=\"string\">'Luke'</span> } })\nparent.child.name = <span class=\"string\">'Leia'</span>;\nparent.save(callback); <span class=\"comment\">// Triggers the pre middleware.</span>\n</pre>\n<h2 id=\"next\">Next Up</h2>\n<p>Now that we've covered <code>Sub-documents</code>, let's take a look at <a href=\"queries\">querying</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010 LearnBoost<br>Licensed under the MIT License.<br>\n    <a href=\"http://mongoosejs.com/docs/subdocs.html\" class=\"_attribution-link\">http://mongoosejs.com/docs/subdocs.html</a>\n  </p>\n</div>\n","customschematypes":"<h1 id=\"creating-a-basic-custom-schema-type\">Creating a Basic Custom Schema Type</h1> <p><em>New in Mongoose 4.4.0:</em> Mongoose supports custom types. Before you reach for a custom type, however, know that a custom type is overkill for most use cases. You can do most basic tasks with <a href=\"2.7.x/docs/getters-setters\">custom getters/setters</a>, <a href=\"guide#virtuals\">virtuals</a>, and <a href=\"subdocs#single-embedded\">single embedded docs</a>.</p> <p>Let's take a look at an example of a basic schema type: a 1-byte integer. To create a new schema type, you need to inherit from <code>mongoose.SchemaType</code> and add the corresponding property to <code>mongoose.Schema.Types</code>. The one method you need to implement is the <code>cast()</code> method.</p> <pre data-language=\"javascript\">\n    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Int8</span><span class=\"params\">(key, options)</span> {</span>\n      mongoose.SchemaType.call(<span class=\"keyword\">this</span>, key, options, <span class=\"string\">'Int8'</span>);\n    }\n    Int8.prototype = Object.create(mongoose.SchemaType.prototype);\n\n    <span class=\"comment\">// `cast()` takes a parameter that can be anything. You need to</span>\n    <span class=\"comment\">// validate the provided `val` and throw a `CastError` if you</span>\n    <span class=\"comment\">// can't convert it.</span>\n    Int8.prototype.cast = <span class=\"keyword\">function</span>(val) {\n      <span class=\"keyword\">var</span> _val = Number(val);\n      <span class=\"keyword\">if</span> (isNaN(_val)) {\n        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">'Int8: '</span> + val + <span class=\"string\">' is not a number'</span>);\n      }\n      _val = Math.round(_val);\n      <span class=\"keyword\">if</span> (_val &lt; -<span class=\"number\">0x80</span> || _val &gt; <span class=\"number\">0x7F</span>) {\n        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">'Int8: '</span> + val +\n          <span class=\"string\">' is outside of the range of valid 8-bit ints'</span>);\n      }\n      <span class=\"keyword\">return</span> _val;\n    };\n\n    <span class=\"comment\">// Don't forget to add `Int8` to the type registry</span>\n    mongoose.Schema.Types.Int8 = Int8;\n\n    <span class=\"keyword\">var</span> testSchema = <span class=\"keyword\">new</span> Schema({ test: Int8 });\n    <span class=\"keyword\">var</span> Test = mongoose.model(<span class=\"string\">'Test'</span>, testSchema);\n\n    <span class=\"keyword\">var</span> t = <span class=\"keyword\">new</span> Test();\n    t.test = <span class=\"string\">'abc'</span>;\n    assert.ok(t.validateSync());\n    assert.equal(t.validateSync().errors[<span class=\"string\">'test'</span>].name, <span class=\"string\">'CastError'</span>);\n    assert.equal(t.validateSync().errors[<span class=\"string\">'test'</span>].message,\n      <span class=\"string\">'Cast to Int8 failed for value \"abc\" at path \"test\"'</span>);\n    assert.equal(t.validateSync().errors[<span class=\"string\">'test'</span>].reason.message,\n      <span class=\"string\">'Int8: abc is not a number'</span>);\n  </pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010 LearnBoost<br>Licensed under the MIT License.<br>\n    <a href=\"http://mongoosejs.com/docs/customschematypes.html\" class=\"_attribution-link\">http://mongoosejs.com/docs/customschematypes.html</a>\n  </p>\n</div>\n","validation":"<h1 id=\"validation\">Validation</h1> <p>Before we get into the specifics of validation syntax, please keep the following rules in mind:</p> <ul> <li>Validation is defined in the <a href=\"schematypes\">SchemaType</a>\n</li> <li>Validation is <a href=\"middleware\">middleware</a>. Mongoose registers validation as a <code>pre('save')</code> hook on every schema by default.</li> <li>You can manually run validation using <code>doc.validate(callback)</code> or <code>doc.validateSync()</code>\n</li> <li>Validators are not run on undefined values. The only exception is the <a href=\"api#schematype_SchemaType-required\"><code>required</code> validator</a>.</li> <li>Validation is asynchronously recursive; when you call <a href=\"api#model_Model-save\">Model#save</a>, sub-document validation is executed as well. If an error occurs, your <a href=\"api#model_Model-save\">Model#save</a> callback receives it</li> <li>Validation is customizable</li> </ul> <pre data-language=\"javascript\">\n    <span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({\n      name: {\n        type: String,\n        required: <span class=\"literal\">true</span>\n      }\n    });\n    <span class=\"keyword\">var</span> Cat = db.model(<span class=\"string\">'Cat'</span>, schema);\n\n    <span class=\"comment\">// This cat has no name :(</span>\n    <span class=\"keyword\">var</span> cat = <span class=\"keyword\">new</span> Cat();\n    cat.save(<span class=\"keyword\">function</span>(error) {\n      assert.equal(error.errors[<span class=\"string\">'name'</span>].message,\n        <span class=\"string\">'Path `name` is required.'</span>);\n\n      error = cat.validateSync();\n      assert.equal(error.errors[<span class=\"string\">'name'</span>].message,\n        <span class=\"string\">'Path `name` is required.'</span>);\n    });\n  </pre>\n<h2 id=\"built-in-validators\">Built-in Validators</h2> <p>Mongoose has several built-in validators.</p> <ul> <li>All <a href=\"schematypes\">SchemaTypes</a> have the built-in <a href=\"api#schematype_SchemaType-required\">required</a> validator. The required validator uses the <a href=\"api#schematype_SchemaType-checkRequired\">SchemaType's <code>checkRequired()</code> function</a> to determine if the value satisfies the required validator.</li> <li>\n<a href=\"api#schema-number-js\">Numbers</a> have <a href=\"api#schema_number_SchemaNumber-min\">min</a> and <a href=\"api#schema_number_SchemaNumber-max\">max</a> validators.</li> <li>\n<a href=\"api#schema-string-js\">Strings</a> have <a href=\"api#schema_string_SchemaString-enum\">enum</a>, <a href=\"api#schema_string_SchemaString-match\">match</a>, <a href=\"api#schema_string_SchemaString-maxlength\">maxlength</a> and <a href=\"api#schema_string_SchemaString-minlength\">minlength</a> validators.</li> </ul> <p>Each of the validator links above provide more information about how to enable them and customize their error messages.</p> <pre data-language=\"javascript\">\n    <span class=\"keyword\">var</span> breakfastSchema = <span class=\"keyword\">new</span> Schema({\n      eggs: {\n        type: Number,\n        min: [<span class=\"number\">6</span>, <span class=\"string\">'Too few eggs'</span>],\n        max: <span class=\"number\">12</span>\n      },\n      bacon: {\n        type: Number,\n        required: [<span class=\"literal\">true</span>, <span class=\"string\">'Why no bacon?'</span>]\n      },\n      drink: {\n        type: String,\n        enum: [<span class=\"string\">'Coffee'</span>, <span class=\"string\">'Tea'</span>]\n      }\n    });\n    <span class=\"keyword\">var</span> Breakfast = db.model(<span class=\"string\">'Breakfast'</span>, breakfastSchema);\n\n    <span class=\"keyword\">var</span> badBreakfast = <span class=\"keyword\">new</span> Breakfast({\n      eggs: <span class=\"number\">2</span>,\n      bacon: <span class=\"number\">0</span>,\n      drink: <span class=\"string\">'Milk'</span>\n    });\n    <span class=\"keyword\">var</span> error = badBreakfast.validateSync();\n    assert.equal(error.errors[<span class=\"string\">'eggs'</span>].message,\n      <span class=\"string\">'Too few eggs'</span>);\n    assert.ok(!error.errors[<span class=\"string\">'bacon'</span>]);\n    assert.equal(error.errors[<span class=\"string\">'drink'</span>].message,\n      <span class=\"string\">'`Milk` is not a valid enum value for path `drink`.'</span>);\n\n    badBreakfast.bacon = <span class=\"literal\">null</span>;\n    error = badBreakfast.validateSync();\n    assert.equal(error.errors[<span class=\"string\">'bacon'</span>].message, <span class=\"string\">'Why no bacon?'</span>);\n  </pre>\n<h2 id=\"custom-validators\">Custom Validators</h2> <p>If the built-in validators aren't enough, you can define custom validators to suit your needs.</p> <p>Custom validation is declared by passing a validation function. You can find detailed instructions on how to do this in the <a href=\"api#schematype_SchemaType-validate\"><code>SchemaType#validate()</code> API docs</a>.</p> <pre data-language=\"javascript\">\n    <span class=\"keyword\">var</span> userSchema = <span class=\"keyword\">new</span> Schema({\n      phone: {\n        type: String,\n        validate: {\n          validator: <span class=\"keyword\">function</span>(v) {\n            <span class=\"keyword\">return</span> <span class=\"regexp\">/\\d{3}-\\d{3}-\\d{4}/</span>.test(v);\n          },\n          message: <span class=\"string\">'{VALUE} is not a valid phone number!'</span>\n        },\n        required: [<span class=\"literal\">true</span>, <span class=\"string\">'User phone number required'</span>]\n      }\n    });\n\n    <span class=\"keyword\">var</span> User = db.model(<span class=\"string\">'user'</span>, userSchema);\n    <span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> User();\n    <span class=\"keyword\">var</span> error;\n\n    user.phone = <span class=\"string\">'555.0123'</span>;\n    error = user.validateSync();\n    assert.equal(error.errors[<span class=\"string\">'phone'</span>].message,\n      <span class=\"string\">'555.0123 is not a valid phone number!'</span>);\n\n    user.phone = <span class=\"string\">''</span>;\n    error = user.validateSync();\n    assert.equal(error.errors[<span class=\"string\">'phone'</span>].message,\n      <span class=\"string\">'User phone number required'</span>);\n\n    user.phone = <span class=\"string\">'201-555-0123'</span>;\n    <span class=\"comment\">// Validation succeeds! Phone number is defined</span>\n    <span class=\"comment\">// and fits `DDD-DDD-DDDD`</span>\n    error = user.validateSync();\n    assert.equal(error, <span class=\"literal\">null</span>);\n  </pre>\n<h2 id=\"async-custom-validators\">Async Custom Validators</h2> <p>Custom validators can also be asynchronous. If your validator function takes 2 arguments, mongoose will assume the 2nd argument is a callback.</p> <p>Even if you don't want to use asynchronous validators, be careful, because mongoose 4 will assume that <strong>all</strong> functions that take 2 arguments are asynchronous, like the <a href=\"https://www.npmjs.com/package/validator\"><code>validator.isEmail</code> function</a></p> <pre data-language=\"javascript\">\n    <span class=\"keyword\">var</span> userSchema = <span class=\"keyword\">new</span> Schema({\n      phone: {\n        type: String,\n        validate: {\n          validator: <span class=\"keyword\">function</span>(v, cb) {\n            setTimeout(<span class=\"keyword\">function</span>() {\n              cb(<span class=\"regexp\">/\\d{3}-\\d{3}-\\d{4}/</span>.test(v));\n            }, <span class=\"number\">5</span>);\n          },\n          message: <span class=\"string\">'{VALUE} is not a valid phone number!'</span>\n        },\n        required: [<span class=\"literal\">true</span>, <span class=\"string\">'User phone number required'</span>]\n      }\n    });\n\n    <span class=\"keyword\">var</span> User = db.model(<span class=\"string\">'User'</span>, userSchema);\n    <span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> User();\n    <span class=\"keyword\">var</span> error;\n\n    user.phone = <span class=\"string\">'555.0123'</span>;\n    user.validate(<span class=\"keyword\">function</span>(error) {\n      assert.ok(error);\n      assert.equal(error.errors[<span class=\"string\">'phone'</span>].message,\n        <span class=\"string\">'555.0123 is not a valid phone number!'</span>);\n    });\n  </pre>\n<h2 id=\"validation-errors\">Validation Errors</h2> <p>Errors returned after failed validation contain an <code>errors</code> object holding the actual <code>ValidatorError</code> objects. Each <a href=\"api#error-validation-js\">ValidatorError</a> has <code>kind</code>, <code>path</code>, <code>value</code>, and <code>message</code> properties.</p> <pre data-language=\"javascript\">\n    <span class=\"keyword\">var</span> toySchema = <span class=\"keyword\">new</span> Schema({\n      color: String,\n      name: String\n    });\n\n    <span class=\"keyword\">var</span> Toy = db.model(<span class=\"string\">'Toy'</span>, toySchema);\n\n    <span class=\"keyword\">var</span> validator = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(value)</span> {</span>\n      <span class=\"keyword\">return</span> <span class=\"regexp\">/blue|green|white|red|orange|periwinkle/i</span>.test(value);\n    };\n    Toy.schema.path(<span class=\"string\">'color'</span>).validate(validator,\n      <span class=\"string\">'Color `{VALUE}` not valid'</span>, <span class=\"string\">'Invalid color'</span>);\n\n    <span class=\"keyword\">var</span> toy = <span class=\"keyword\">new</span> Toy({ color: <span class=\"string\">'grease'</span>});\n\n    toy.save(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n      <span class=\"comment\">// err is our ValidationError object</span>\n      <span class=\"comment\">// err.errors.color is a ValidatorError object</span>\n      assert.equal(err.errors.color.message, <span class=\"string\">'Color `grease` not valid'</span>);\n      assert.equal(err.errors.color.kind, <span class=\"string\">'Invalid color'</span>);\n      assert.equal(err.errors.color.path, <span class=\"string\">'color'</span>);\n      assert.equal(err.errors.color.value, <span class=\"string\">'grease'</span>);\n      assert.equal(err.name, <span class=\"string\">'ValidationError'</span>);\n    });\n  </pre>\n<h2 id=\"required-validators-on-nested-objects\">Required Validators On Nested Objects</h2> <p>Defining validators on nested objects in mongoose is tricky, because nested objects are not fully fledged paths.</p> <pre data-language=\"javascript\">\n    <span class=\"keyword\">var</span> personSchema = <span class=\"keyword\">new</span> Schema({\n      name: {\n        first: String,\n        last: String\n      }\n    });\n\n    assert.throws(<span class=\"keyword\">function</span>() {\n      <span class=\"comment\">// This throws an error, because 'name' isn't a full fledged path</span>\n      personSchema.path(<span class=\"string\">'name'</span>).required(<span class=\"literal\">true</span>);\n    }, <span class=\"regexp\">/Cannot.*'required'/</span>);\n\n    <span class=\"comment\">// To make a nested object required, use a single nested schema</span>\n    <span class=\"keyword\">var</span> nameSchema = <span class=\"keyword\">new</span> Schema({\n      first: String,\n      last: String\n    });\n\n    personSchema = <span class=\"keyword\">new</span> Schema({\n      name: {\n        type: nameSchema,\n        required: <span class=\"literal\">true</span>\n      }\n    });\n\n    <span class=\"keyword\">var</span> Person = db.model(<span class=\"string\">'Person'</span>, personSchema);\n\n    <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> Person();\n    <span class=\"keyword\">var</span> error = person.validateSync();\n    assert.ok(error.errors[<span class=\"string\">'name'</span>]);\n  </pre>\n<h2 id=\"update-validators\">Update Validators</h2> <p>In the above examples, you learned about document validation. Mongoose also supports validation for <code>update()</code> and <code>findOneAndUpdate()</code> operations. In Mongoose 4.x, update validators are off by default - you need to specify the <code>runValidators</code> option.</p> <p>To turn on update validators, set the <code>runValidators</code> option for <code>update()</code> or <code>findOneAndUpdate()</code>. Be careful: update validators are off by default because they have several caveats.</p> <pre data-language=\"javascript\">\n    <span class=\"keyword\">var</span> toySchema = <span class=\"keyword\">new</span> Schema({\n      color: String,\n      name: String\n    });\n\n    <span class=\"keyword\">var</span> Toy = db.model(<span class=\"string\">'Toys'</span>, toySchema);\n\n    Toy.schema.path(<span class=\"string\">'color'</span>).validate(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(value)</span> {</span>\n      <span class=\"keyword\">return</span> <span class=\"regexp\">/blue|green|white|red|orange|periwinkle/i</span>.test(value);\n    }, <span class=\"string\">'Invalid color'</span>);\n\n    <span class=\"keyword\">var</span> opts = { runValidators: <span class=\"literal\">true</span> };\n    Toy.update({}, { color: <span class=\"string\">'bacon'</span> }, opts, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n      assert.equal(err.errors.color.message,\n        <span class=\"string\">'Invalid color'</span>);\n    });\n  </pre>\n<h2 id=\"update-validators-and-this\">Update Validators and this</h2> <p>There are a couple of key differences between update validators and document validators. In the color validation function above, <code>this</code> refers to the document being validated when using document validation. However, when running update validators, the document being updated may not be in the server's memory, so by default the value of <code>this</code> is not defined.</p> <pre data-language=\"javascript\">\n    <span class=\"keyword\">var</span> toySchema = <span class=\"keyword\">new</span> Schema({\n      color: String,\n      name: String\n    });\n\n    toySchema.path(<span class=\"string\">'color'</span>).validate(<span class=\"keyword\">function</span>(value) {\n      <span class=\"comment\">// When running in `validate()` or `validateSync()`, the</span>\n      <span class=\"comment\">// validator can access the document using `this`.</span>\n      <span class=\"comment\">// Does **not** work with update validators.</span>\n      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.name.toLowerCase().indexOf(<span class=\"string\">'red'</span>) !== -<span class=\"number\">1</span>) {\n        <span class=\"keyword\">return</span> value !== <span class=\"string\">'red'</span>;\n      }\n      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;\n    });\n\n    <span class=\"keyword\">var</span> Toy = db.model(<span class=\"string\">'ActionFigure'</span>, toySchema);\n\n    <span class=\"keyword\">var</span> toy = <span class=\"keyword\">new</span> Toy({ color: <span class=\"string\">'red'</span>, name: <span class=\"string\">'Red Power Ranger'</span> });\n    <span class=\"keyword\">var</span> error = toy.validateSync();\n    assert.ok(error.errors[<span class=\"string\">'color'</span>]);\n\n    <span class=\"keyword\">var</span> update = { color: <span class=\"string\">'red'</span>, name: <span class=\"string\">'Red Power Ranger'</span> };\n    <span class=\"keyword\">var</span> opts = { runValidators: <span class=\"literal\">true</span> };\n\n    Toy.update({}, update, opts, <span class=\"keyword\">function</span>(error) {\n      <span class=\"comment\">// The update validator throws an error:</span>\n      <span class=\"comment\">// \"TypeError: Cannot read property 'toLowerCase' of undefined\",</span>\n      <span class=\"comment\">// because `this` is **not** the document being updated when using</span>\n      <span class=\"comment\">// update validators</span>\n      assert.ok(error);\n    });\n  </pre>\n<h2 id=\"the-context-option\">The context option</h2> <p>The <code>context</code> option lets you set the value of <code>this</code> in update validators to the underlying query.</p> <pre data-language=\"javascript\">\n    toySchema.path(<span class=\"string\">'color'</span>).validate(<span class=\"keyword\">function</span>(value) {\n      <span class=\"comment\">// When running update validators with the `context` option set to</span>\n      <span class=\"comment\">// 'query', `this` refers to the query object.</span>\n      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.getUpdate().$set.name.toLowerCase().indexOf(<span class=\"string\">'red'</span>) !== -<span class=\"number\">1</span>) {\n        <span class=\"keyword\">return</span> value === <span class=\"string\">'red'</span>;\n      }\n      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;\n    });\n\n    <span class=\"keyword\">var</span> Toy = db.model(<span class=\"string\">'Figure'</span>, toySchema);\n\n    <span class=\"keyword\">var</span> update = { color: <span class=\"string\">'blue'</span>, name: <span class=\"string\">'Red Power Ranger'</span> };\n    <span class=\"comment\">// Note the context option</span>\n    <span class=\"keyword\">var</span> opts = { runValidators: <span class=\"literal\">true</span>, context: <span class=\"string\">'query'</span> };\n\n    Toy.update({}, update, opts, <span class=\"keyword\">function</span>(error) {\n      assert.ok(error.errors[<span class=\"string\">'color'</span>]);\n    });\n  </pre>\n<h2 id=\"update-validator-paths\">Update Validator Paths</h2> <p>The other key difference that update validators only run on the paths specified in the update. For instance, in the below example, because 'name' is not specified in the update operation, update validation will succeed.</p> <p>When using update validators, <code>required</code> validators <strong>only</strong> fail when you try to explicitly <code>$unset</code> the key.</p> <pre data-language=\"javascript\">\n    <span class=\"keyword\">var</span> kittenSchema = <span class=\"keyword\">new</span> Schema({\n      name: { type: String, required: <span class=\"literal\">true</span> },\n      age: Number\n    });\n\n    <span class=\"keyword\">var</span> Kitten = db.model(<span class=\"string\">'Kitten'</span>, kittenSchema);\n\n    <span class=\"keyword\">var</span> update = { color: <span class=\"string\">'blue'</span> };\n    <span class=\"keyword\">var</span> opts = { runValidators: <span class=\"literal\">true</span> };\n    Kitten.update({}, update, opts, <span class=\"keyword\">function</span>(err) {\n      <span class=\"comment\">// Operation succeeds despite the fact that 'name' is not specified</span>\n    });\n\n    <span class=\"keyword\">var</span> unset = { $unset: { name: <span class=\"number\">1</span> } };\n    Kitten.update({}, unset, opts, <span class=\"keyword\">function</span>(err) {\n      <span class=\"comment\">// Operation fails because 'name' is required</span>\n      assert.ok(err);\n      assert.ok(err.errors[<span class=\"string\">'name'</span>]);\n    });\n  </pre>\n<h2 id=\"update-validators-only-run-on-specified-paths\">Update Validators Only Run On Specified Paths</h2> <p>One final detail worth noting: update validators <strong>only</strong> run on <code>$set</code> and <code>$unset</code> operations. For instance, the below update will succeed, regardless of the value of <code>number</code>.</p> <pre data-language=\"javascript\">\n    <span class=\"keyword\">var</span> testSchema = <span class=\"keyword\">new</span> Schema({\n      number: { type: Number, max: <span class=\"number\">0</span> },\n    });\n\n    <span class=\"keyword\">var</span> Test = db.model(<span class=\"string\">'Test'</span>, testSchema);\n\n    <span class=\"keyword\">var</span> update = { $inc: { number: <span class=\"number\">1</span> } };\n    <span class=\"keyword\">var</span> opts = { runValidators: <span class=\"literal\">true</span> };\n    Test.update({}, update, opts, <span class=\"keyword\">function</span>(error) {\n      <span class=\"comment\">// There will never be a validation error here</span>\n    });\n  </pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010 LearnBoost<br>Licensed under the MIT License.<br>\n    <a href=\"http://mongoosejs.com/docs/validation.html\" class=\"_attribution-link\">http://mongoosejs.com/docs/validation.html</a>\n  </p>\n</div>\n","connections":"<h1>Connections</h1>\n<p>We may connect to MongoDB by utilizing the <code>mongoose.connect()</code> method.</p>\n<pre data-language=\"javascript\">mongoose.connect(<span class=\"string\">'mongodb://localhost/myapp'</span>);\n</pre>\n<p>This is the minimum needed to connect the <code>myapp</code> database running locally on the default port (27017). If the local connection fails then try using 127.0.0.1 instead of localhost. Sometimes issues may arise when the local hostname has been changed.</p> <p>We may also specify several more parameters in the <code>uri</code> depending on your environment:</p>\n<pre data-language=\"javascript\">mongoose.connect(<span class=\"string\">'mongodb://username:password@host:port/database?options...'</span>);\n</pre>\n<p>See the <a href=\"http://docs.mongodb.org/manual/reference/connection-string/\">mongodb connection string spec</a> for more detail.</p>\n<h2 id=\"options\">Options</h2>\n<p>The <code>connect</code> method also accepts an <code>options</code> object which will be passed on to the underlying driver. All options included here take precedence over options passed in the connection string.</p>\n<pre data-language=\"javascript\">mongoose.connect(uri, options);\n</pre>\n<p>The following option keys are available:</p> <pre data-language=\"javascript\"> db             - passed to the [underlying driver's db instance](http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html)\n server         - passed to the [underlying driver's server instance(s)](http://mongodb.github.io/node-mongodb-native/2.1/api/Server.html)\n replset        - passed to the [underlying driver's ReplSet instance](http://mongodb.github.io/node-mongodb-native/2.1/api/ReplSet.html)\n user           - username for authentication (if not specified in uri)\n pass           - password for authentication (if not specified in uri)\n auth           - options for authentication\n mongos         - passed to the [underlying driver's mongos options](http://mongodb.github.io/node-mongodb-native/2.1/api/Mongos.html)\n promiseLibrary - sets the [underlying driver's promise library](http://mongodb.github.io/node-mongodb-native/2.1/api/MongoClient.html)</pre> <p>Example:</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> options = {\n  db: { native_parser: <span class=\"literal\">true</span> },\n  server: { poolSize: <span class=\"number\">5</span> },\n  replset: { rs_name: <span class=\"string\">'myReplicaSetName'</span> },\n  user: <span class=\"string\">'myUserName'</span>,\n  pass: <span class=\"string\">'myPassword'</span>\n}\nmongoose.connect(uri, options);</pre>\n<p><strong>Note:</strong> The server option <code>auto_reconnect</code> is defaulted to true which <em>can</em> be overridden. The db option <code>forceServerObjectId</code> is set to false which <em>cannot</em> be overridden.</p> <p>See the <a href=\"https://github.com/mongodb/node-mongodb-native\">driver</a> for more information about available options.</p>\n<p><strong>Note:</strong> If <code>auto_reconnect</code> is on, mongoose will give up trying to reconnect after a certain number of failures. Set the <a href=\"http://mongodb.github.io/node-mongodb-native/2.1/api/Server.html\"><code>server.reconnectTries</code> and <code>server.reconnectInterval</code> options</a> to increase the number of times mongoose will try to reconnect.</p>\n<pre data-language=\"javascript\"><span class=\"comment\">// Good way to make sure mongoose never stops trying to reconnect</span>\nmongoose.connect(uri, { server: { reconnectTries: Number.MAX_VALUE } });\n\n\n</pre>\n<h4 id=\"connection-string-options\">Connection String Options</h4>\n<p>Mongoose supports the following options in the connection string.</p> <ul>\n<li><a href=\"http://mongodb.github.io/node-mongodb-native/2.1/api/Server.html\">ssl</a></li>\n<li><a href=\"http://mongodb.github.io/node-mongodb-native/2.1/api/Server.html\">poolSize</a></li>\n<li><a href=\"http://mongodb.github.io/node-mongodb-native/2.1/api/Server.html\">autoReconnect</a></li>\n<li><a href=\"http://mongodb.github.io/node-mongodb-native/2.1/api/Server.html\">socketTimeoutMS</a></li>\n<li><a href=\"http://mongodb.github.io/node-mongodb-native/2.1/api/Server.html\">connectTimeoutMS</a></li>\n<li><a href=\"http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html\">authSource</a></li>\n<li><a href=\"http://mongodb.github.io/node-mongodb-native/2.1/api/Server.html\">retries</a></li>\n<li><a href=\"http://mongodb.github.io/node-mongodb-native/2.1/api/Server.html\">reconnectWait</a></li>\n<li><a href=\"http://mongodb.github.io/node-mongodb-native/2.1/api/ReplSet.html\">rs_name</a></li>\n<li><a href=\"http://mongodb.github.io/node-mongodb-native/2.1/api/ReplSet.html\">replicaSet</a></li>\n<li><a href=\"http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html\">nativeParser</a></li>\n<li><a href=\"http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html\">w</a></li>\n<li><a href=\"http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html\">journal</a></li>\n<li><a href=\"http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html\">wtimeoutMS</a></li>\n<li><a href=\"http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html\">readPreference</a></li>\n<li><a href=\"http://mongodb.github.io/node-mongodb-native/2.1/api/Db.html\">readPreferenceTags</a></li>\n<li><a href=\"http://mongodb.github.io/node-mongodb-native/2.1/api/Server.html\">sslValidate</a></li>\n</ul>\n<h4 id=\"keepAlive\">A note about keepAlive</h4>\n<div class=\"important\"><p>For long running applications, it is often prudent to enable <code>keepAlive</code> with a number of milliseconds. Without it, after some period of time you may start to see <code>\"connection closed\"</code> errors for what seems like no reason. If so, after <a href=\"http://tldp.org/HOWTO/TCP-Keepalive-HOWTO/overview.html\">reading this</a>, you may decide to enable <code>keepAlive</code>:</p></div>\n<pre data-language=\"javascript\">options.server.socketOptions = options.replset.socketOptions = { keepAlive: <span class=\"number\">120</span> };\nmongoose.connect(uri, options);\n</pre>\n<h2 id=\"replicaset_connections\">Replica Set Connections</h2>\n<p>To connect to a replica set you pass a comma delimited list of hosts to connect to rather than a single host.</p>\n<pre data-language=\"javascript\">mongoose.connect(<span class=\"string\">'mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]'</span> [, options]);\n</pre>\n<p>To connect to a single node replica set, specify the <code>replicaSet</code> option.</p>\n<pre data-language=\"javascript\">mongoose.connect(<span class=\"string\">'mongodb://host1:port1/?replicaSet=rsName'</span>);\n</pre>\n<h2 id=\"mongos_connections\">Multi-mongos support</h2>\n<p>High availability over multiple <code>mongos</code> instances is also supported. Pass a connection string for your <code>mongos</code> instances and set the <code>mongos</code> option to true:</p>\n<pre data-language=\"javascript\">mongoose.connect(<span class=\"string\">'mongodb://mongosA:27501,mongosB:27501'</span>, { mongos: <span class=\"literal\">true</span> }, cb);\n</pre>\n<h2 id=\"multiple_connections\">Multiple connections</h2>\n<p>So far we've seen how to connect to MongoDB using Mongoose's default connection. At times we may need multiple connections open to Mongo, each with different read/write settings, or maybe just to different databases for example. In these cases we can utilize <code>mongoose.createConnection()</code> which accepts all the arguments already discussed and returns a fresh connection for you.</p>\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> conn = mongoose.createConnection(<span class=\"string\">'mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]'</span>, options);\n</pre>\n<p>This <a href=\"api#connection_Connection\">connection</a> object is then used to create and retrieve <a href=\"api#model_Model\">models</a>. Models are <strong>always</strong> scoped to a single connection.</p>\n<h2 id=\"connection_pools\">Connection pools</h2>\n<p>Each <code>connection</code>, whether created with <code>mongoose.connect</code> or <code>mongoose.createConnection</code> are all backed by an internal configurable connection pool defaulting to a size of 5. Adjust the pool size using your connection options:</p>\n<pre data-language=\"javascript\"><span class=\"comment\">// single server</span>\n<span class=\"keyword\">var</span> uri = <span class=\"string\">'mongodb://localhost/test'</span>;\nmongoose.createConnection(uri, { server: { poolSize: <span class=\"number\">4</span> }});\n\n<span class=\"comment\">// for a replica set</span>\nmongoose.createConnection(uri, { replset: { poolSize: <span class=\"number\">4</span> }});\n\n<span class=\"comment\">// passing the option in the URI works with single or replica sets</span>\n<span class=\"keyword\">var</span> uri = <span class=\"string\">'mongodb://localhost/test?poolSize=4'</span>;\nmongoose.createConnection(uri);\n</pre>\n<h2 id=\"next\">Next Up</h2>\n<p>Now that we've covered <code>connections</code>, let's take a look at how we can break pieces of our functionality out into reusable and shareable <a href=\"plugins\">plugins</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010 LearnBoost<br>Licensed under the MIT License.<br>\n    <a href=\"http://mongoosejs.com/docs/connections.html\" class=\"_attribution-link\">http://mongoosejs.com/docs/connections.html</a>\n  </p>\n</div>\n","2.7.x/docs/getters-setters":"<h1>Getters and Setters</h1> <p>Getters and setters help you change how you get and set the attributes defined by the keys and values in the underlying raw document.</p> <h1>Setters</h1> <p>Setters allow you to transform the mongoose document's data before it gets to the raw mongodb document and is set as a value on an actual key.</p> <p>Suppose you are implementing user registration for a website. User provide an email and password, which gets saved to mongodb. The email is a string that you will want to normalize to lower case, in order to avoid one email having more than one account -- e.g., otherwise, <a href=\"mailto:avenue@q.com\">avenue@q.com</a> can be registered for 2 accounts via <a href=\"mailto:avenue@q.com\">avenue@q.com</a> and <a href=\"mailto:AvEnUe@Q.CoM\">AvEnUe@Q.CoM</a>.</p> <p>You can set up email lower case normalization easily via a Mongoose setter. Note in the following snippet that setters (and also getters) are defined in the <code>Schema</code>:</p> <pre data-language=\"javascript\">function toLower (v) {\n  return v.toLowerCase();\n}\n\nvar UserSchema = new Schema({\n  email: { type: String, set: toLower } \n});\n\nvar User = mongoose.model('User', UserSchema);\nvar user = new User({email: '<a href=\"mailto:AVENUE@Q.COM\">AVENUE@Q.COM</a>'});\n\nconsole.log(user.email); // '<a href=\"mailto:avenue@q.com\">avenue@q.com</a>'\n</pre> <p>As you can see above, setters allow you to transform the data before it gets to the raw mongodb document and is set as a value on an actual key.</p> <h2>Getters</h2> <p>Getters allow you to transform the representation of the data as it travels from the raw mongodb document to the value that you see.</p> <p>Suppose you are storing credit card numbers and you want to hide everything except the last 4 digits to the mongoose user. You can do so by defining a getter in the following way (again, notice that getters are defined in the <code>Schema</code>):</p> <pre data-language=\"javascript\">function obfuscate (cc) {\n  return '****-****-****-' + cc.slice(cc.length-4, cc.length);\n}\n\nvar AccountSchema = new Schema({\n  creditCardNumber: { type: String, get: obfuscate }\n});\n\nvar Account = mongoose.model('Account', AccountSchema);\n\nAccount.findById( someId, function (err, found) {\n  console.log(found.creditCardNumber); // '****-****-****-1234'\n});\n</pre> <h2>Summary</h2> <p>Setters are intended to modify the underlying raw data. Getters are intended to transform (but not modify at the raw data level) the underlying raw data into something that the user expects to see. They are both defined in the <code>Schema</code> definition.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010 LearnBoost<br>Licensed under the MIT License.<br>\n    <a href=\"http://mongoosejs.com/docs/2.7.x/docs/getters-setters.html\" class=\"_attribution-link\">http://mongoosejs.com/docs/2.7.x/docs/getters-setters.html</a>\n  </p>\n</div>\n","api":"<h1>Mongoose API</h1>\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/index.js\" id=\"index-js\">index.js</a></h2>\n<h3 id=\"index_Mongoose-Aggregate\">Mongoose#Aggregate()</h3>\n<p>The Mongoose Aggregate constructor</p>\n\n<h3 id=\"index_Mongoose-CastError\">Mongoose#CastError(type, value, path, [reason])</h3>\n<p>The Mongoose CastError constructor</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>type</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>The name of the type</span>\n</li>\n<li>\n<code>value</code><span class=\"types\"> &lt;<a href=\"#Any\">Any</a>&gt; </span><span>The value that failed to cast</span>\n</li>\n<li>\n<code>path</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>The path <code>a.b.c</code> in the doc where this cast error occurred</span>\n</li>\n<li>\n<code>[reason]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error\">Error</a>&gt; </span><span>The original error that was thrown</span>\n</li>\n</ul>\n</div>\n\n<h3 id=\"index_Mongoose-Collection\">Mongoose#Collection()</h3>\n<p>The Mongoose Collection constructor</p>\n\n<h3 id=\"index_Mongoose-connect\">Mongoose#connect(uri(s), [options], [callback])</h3>\n<p>Opens the default mongoose connection.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>uri(s)</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>[options]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#MongooseThenable\">MongooseThenable</a>&gt; </span><span>pseudo-promise wrapper around this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"#index_Mongoose-createConnection\" title=\"Mongoose#createConnection\">Mongoose#createConnection</a></li></ul>\n</div>\n<div class=\"description\">\n<p>If arguments are passed, they are proxied to either<br><a href=\"#connection_Connection-open\">Connection#open</a> or<br><a href=\"#connection_Connection-openSet\">Connection#openSet</a> appropriately.</p> <p><em>Options passed take precedence over options included in connection strings.</em></p> <h4>Example:</h4> <pre data-language=\"javascript\">mongoose.connect(<span class=\"string\">'mongodb://user:pass@localhost:port/database'</span>);\n\n<span class=\"comment\">// replica sets</span>\n<span class=\"keyword\">var</span> uri = <span class=\"string\">'mongodb://user:pass@localhost:port,anotherhost:port,yetanother:port/mydatabase'</span>;\nmongoose.connect(uri);\n\n<span class=\"comment\">// with options</span>\nmongoose.connect(uri, options);\n\n<span class=\"comment\">// connecting to multiple mongos</span>\n<span class=\"keyword\">var</span> uri = <span class=\"string\">'mongodb://hostA:27501,hostB:27501'</span>;\n<span class=\"keyword\">var</span> opts = { mongos: <span class=\"literal\">true</span> };\nmongoose.connect(uri, opts);\n\n<span class=\"comment\">// optional callback that gets fired when initial connection completed</span>\n<span class=\"keyword\">var</span> uri = <span class=\"string\">'mongodb://nonexistent.domain:27000'</span>;\nmongoose.connect(uri, <span class=\"keyword\">function</span>(error) {\n  <span class=\"comment\">// if error is truthy, the initial connection failed.</span>\n})</pre>\n</div>\n<h3 id=\"index_Mongoose-Connection\">Mongoose#Connection()</h3>\n<p>The Mongoose <a href=\"#connection_Connection\">Connection</a> constructor</p>\n\n<h3 id=\"index_Mongoose-createConnection\">Mongoose#createConnection([uri], [options], [options.config], [options.config.autoIndex])</h3>\n<p>Creates a Connection instance.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[uri]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>a mongodb:// URI</span>\n</li>\n<li>\n<code>[options]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>options to pass to the driver</span>\n</li>\n<li>\n<code>[options.config]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>mongoose-specific options</span>\n</li>\n<li>\n<code>[options.config.autoIndex]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span><span>set to false to disable automatic index creation for all models associated with this connection.</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#connection_Connection\">Connection</a>&gt; </span><span>the created Connection object</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"#connection_Connection-open\" title=\"Connection#open\">Connection#open</a></li>\n<li><a href=\"#connection_Connection-openSet\" title=\"Connection#openSet\">Connection#openSet</a></li>\n</ul>\n</div>\n<div class=\"description\">\n<p>Each <code>connection</code> instance maps to a single database. This method is helpful when mangaging multiple db connections.</p> <p>If arguments are passed, they are proxied to either <a href=\"#connection_Connection-open\">Connection#open</a> or <a href=\"#connection_Connection-openSet\">Connection#openSet</a> appropriately. This means we can pass <code>db</code>, <code>server</code>, and <code>replset</code> options to the driver. <em>Note that the <code>safe</code> option specified in your schema will overwrite the <code>safe</code> db option specified here unless you set your schemas <code>safe</code> option to <code>undefined</code>. See <a href=\"guide#safe\">this</a> for more information.</em></p> <p><em>Options passed take precedence over options included in connection strings.</em></p> <h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"comment\">// with mongodb:// URI</span>\ndb = mongoose.createConnection(<span class=\"string\">'mongodb://user:pass@localhost:port/database'</span>);\n\n<span class=\"comment\">// and options</span>\n<span class=\"keyword\">var</span> opts = { db: { native_parser: <span class=\"literal\">true</span> }}\ndb = mongoose.createConnection(<span class=\"string\">'mongodb://user:pass@localhost:port/database'</span>, opts);\n\n<span class=\"comment\">// replica sets</span>\ndb = mongoose.createConnection(<span class=\"string\">'mongodb://user:pass@localhost:port,anotherhost:port,yetanother:port/database'</span>);\n\n<span class=\"comment\">// and options</span>\n<span class=\"keyword\">var</span> opts = { replset: { strategy: <span class=\"string\">'ping'</span>, rs_name: <span class=\"string\">'testSet'</span> }}\ndb = mongoose.createConnection(<span class=\"string\">'mongodb://user:pass@localhost:port,anotherhost:port,yetanother:port/database'</span>, opts);\n\n<span class=\"comment\">// with [host, database_name[, port] signature</span>\ndb = mongoose.createConnection(<span class=\"string\">'localhost'</span>, <span class=\"string\">'database'</span>, port)\n\n<span class=\"comment\">// and options</span>\n<span class=\"keyword\">var</span> opts = { server: { auto_reconnect: <span class=\"literal\">false</span> }, user: <span class=\"string\">'username'</span>, pass: <span class=\"string\">'mypassword'</span> }\ndb = mongoose.createConnection(<span class=\"string\">'localhost'</span>, <span class=\"string\">'database'</span>, port, opts)\n\n<span class=\"comment\">// initialize now, connect later</span>\ndb = mongoose.createConnection();\ndb.open(<span class=\"string\">'localhost'</span>, <span class=\"string\">'database'</span>, port, [opts]);</pre>\n</div>\n<h3 id=\"index_Mongoose-disconnect\">Mongoose#disconnect([fn])</h3>\n<p>Disconnects all connections.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>[fn]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span><span>called after all connection close.</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#MongooseThenable\">MongooseThenable</a>&gt; </span><span>pseudo-promise wrapper around this</span>\n</li></ul>\n</div>\n\n<h3 id=\"index_Mongoose-Document\">Mongoose#Document()</h3>\n<p>The Mongoose <a href=\"#document-js\">Document</a> constructor.</p>\n\n<h3 id=\"index_Mongoose-DocumentProvider\">Mongoose#DocumentProvider()</h3>\n<p>The Mongoose DocumentProvider constructor.</p>\n\n<h3 id=\"index_Mongoose-Error\">Mongoose#Error()</h3>\n<p>The <a href=\"#error_MongooseError\">MongooseError</a> constructor.</p>\n\n<h3 id=\"index_Mongoose-get\">Mongoose#get(key)</h3>\n<p>Gets mongoose options</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>key</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\">mongoose.get(<span class=\"string\">'test'</span>) <span class=\"comment\">// returns the 'test' value</span></pre>\n</div>\n<h3 id=\"index_Mongoose-model\">Mongoose#model(name, [schema], [collection], [skipInit])</h3>\n<p>Defines a model or retrieves it.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>name</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>model name</span>\n</li>\n<li>\n<code>[schema]</code><span class=\"types\"> &lt;<a href=\"#schema_Schema\">Schema</a>&gt; </span>\n</li>\n<li>\n<code>[collection]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>name (optional, induced from model name)</span>\n</li>\n<li>\n<code>[skipInit]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span><span>whether to skip initialization (defaults to false)</span>\n</li>\n</ul>\n</div>\n<div class=\"description\">\n<p>Models defined on the <code>mongoose</code> instance are available to all connection created by the same <code>mongoose</code> instance.</p> <h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> mongoose = require(<span class=\"string\">'mongoose'</span>);\n\n<span class=\"comment\">// define an Actor model with this mongoose instance</span>\nmongoose.model(<span class=\"string\">'Actor'</span>, <span class=\"keyword\">new</span> Schema({ name: String }));\n\n<span class=\"comment\">// create a new connection</span>\n<span class=\"keyword\">var</span> conn = mongoose.createConnection(..);\n\n<span class=\"comment\">// retrieve the Actor model</span>\n<span class=\"keyword\">var</span> Actor = conn.model(<span class=\"string\">'Actor'</span>);</pre> <p><em>When no <code>collection</code> argument is passed, Mongoose produces a collection name by passing the model <code>name</code> to the <a href=\"#utils_exports.toCollectionName\">utils.toCollectionName</a> method. This method pluralizes the name. If you don't like this behavior, either pass a collection name or set your schemas collection name option.</em></p> <h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({ name: String }, { collection: <span class=\"string\">'actor'</span> });\n\n<span class=\"comment\">// or</span>\n\nschema.set(<span class=\"string\">'collection'</span>, <span class=\"string\">'actor'</span>);\n\n<span class=\"comment\">// or</span>\n\n<span class=\"keyword\">var</span> collectionName = <span class=\"string\">'actor'</span>\n<span class=\"keyword\">var</span> M = mongoose.model(<span class=\"string\">'Actor'</span>, schema, collectionName)</pre>\n</div>\n<h3 id=\"index_Mongoose-Model\">Mongoose#Model()</h3>\n<p>The Mongoose <a href=\"#model_Model\">Model</a> constructor.</p>\n\n<h3 id=\"index_Mongoose-modelNames\">Mongoose#modelNames()</h3>\n<p>Returns an array of model names created on this instance of Mongoose.</p>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array\">Array</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Note:</h4> <p><em>Does not include names of models created using <code>connection.model()</code>.</em></p>\n</div>\n<h3 id=\"index_Mongoose\">Mongoose()</h3>\n<p>Mongoose constructor.</p>\n<div class=\"description\"><p>The exports object of the <code>mongoose</code> module is an instance of this class.<br>Most apps will only use this one instance.</p></div>\n<h3 id=\"index_Mongoose-Mongoose\">Mongoose#Mongoose()</h3>\n<p>The Mongoose constructor</p>\n<div class=\"description\">\n<p>The exports of the mongoose module is an instance of this class.</p> <h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> mongoose = require(<span class=\"string\">'mongoose'</span>);\n<span class=\"keyword\">var</span> mongoose2 = <span class=\"keyword\">new</span> mongoose.Mongoose();</pre>\n</div>\n<h3 id=\"index_Mongoose-plugin\">Mongoose#plugin(fn, [opts])</h3>\n<p>Declares a global plugin executed on all Schemas.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>fn</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span><span>plugin callback</span>\n</li>\n<li>\n<code>[opts]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>optional options</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#index_Mongoose\">Mongoose</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"plugins\" title=\"plugins\">plugins</a></li></ul>\n</div>\n<div class=\"description\"><p>Equivalent to calling <code>.plugin(fn)</code> on each Schema you create.</p></div>\n<h3 id=\"index_function%20Object()%20%7B%20%5Bnative%20code%5D%20%7D-Promise\">function Object() { [native code] }#Promise()</h3>\n<p>The Mongoose <a href=\"#promise_Promise\">Promise</a> constructor.</p>\n\n<h3 id=\"index_Mongoose-PromiseProvider\">Mongoose#PromiseProvider()</h3>\n<p>Storage layer for mongoose promises</p>\n\n<h3 id=\"index_Mongoose-Query\">Mongoose#Query()</h3>\n<p>The Mongoose <a href=\"#query_Query\">Query</a> constructor.</p>\n\n<h3 id=\"index_Mongoose-Schema\">Mongoose#Schema()</h3>\n<p>The Mongoose <a href=\"#schema_Schema\">Schema</a> constructor</p>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> mongoose = require(<span class=\"string\">'mongoose'</span>);\n<span class=\"keyword\">var</span> Schema = mongoose.Schema;\n<span class=\"keyword\">var</span> CatSchema = <span class=\"keyword\">new</span> Schema(..);</pre>\n</div>\n<h3 id=\"index_Mongoose-SchemaType\">Mongoose#SchemaType()</h3>\n<p>The Mongoose <a href=\"#schematype_SchemaType\">SchemaType</a> constructor</p>\n\n<h3 id=\"index_Mongoose-set\">Mongoose#set(key, value)</h3>\n<p>Sets mongoose options</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>key</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>value</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\">mongoose.set(<span class=\"string\">'test'</span>, value) <span class=\"comment\">// sets the 'test' option to `value`</span>\n\nmongoose.set(<span class=\"string\">'debug'</span>, <span class=\"literal\">true</span>) <span class=\"comment\">// enable logging collection methods + arguments to the console</span>\n\nmongoose.set(<span class=\"string\">'debug'</span>, <span class=\"keyword\">function</span>(collectionName, methodName, arg1, arg2...) {}); <span class=\"comment\">// use custom function to log collection methods + arguments</span></pre>\n</div>\n<h3 id=\"index_\">()</h3>\n<p>Expose connection states for user-land</p>\n\n<h3 id=\"index_Mongoose-VirtualType\">Mongoose#VirtualType()</h3>\n<p>The Mongoose <a href=\"#virtualtype_VirtualType\">VirtualType</a> constructor</p>\n\n<h3 id=\"index_Mongoose-connection\">Mongoose#<span>connection</span>\n</h3>\n<p>The default connection of the mongoose module.</p> <h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> mongoose = require(<span class=\"string\">'mongoose'</span>);\nmongoose.connect(...);\nmongoose.connection.on(<span class=\"string\">'error'</span>, cb);</pre> <p>This is the connection used by default for every model created using <a href=\"#index_Mongoose-model\">mongoose.model</a>.</p>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#connection_Connection\">Connection</a>&gt; </span>\n</li></ul>\n</div>\n<h3 id=\"index_Mongoose-mongo\">Mongoose#<span>mongo</span>\n</h3>\n<p>The <a href=\"https://github.com/mongodb/node-mongodb-native\">node-mongodb-native</a> driver Mongoose uses.</p>\n<h3 id=\"index_Mongoose-mquery\">Mongoose#<span>mquery</span>\n</h3>\n<p>The <a href=\"https://github.com/aheckmann/mquery\">mquery</a> query builder Mongoose uses.</p>\n<h3 id=\"index_Mongoose-SchemaTypes\">Mongoose#<span>SchemaTypes</span>\n</h3>\n<p>The various Mongoose SchemaTypes.</p> <h4>Note:</h4> <p><em>Alias of mongoose.Schema.Types for backwards compatibility.</em></p>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"#schema_Schema.Types\" title=\"Schema.SchemaTypes\">Schema.SchemaTypes</a></li></ul>\n</div>\n<h3 id=\"index_Mongoose-Types\">Mongoose#<span>Types</span>\n</h3>\n<p>The various Mongoose Types.</p> <h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> mongoose = require(<span class=\"string\">'mongoose'</span>);\n<span class=\"keyword\">var</span> array = mongoose.Types.Array;</pre> <h4>Types:</h4> <ul> <li><a href=\"#types-objectid-js\">ObjectId</a></li> <li><a href=\"#types-buffer-js\">Buffer</a></li> <li><a href=\"#types-embedded-js\">SubDocument</a></li> <li><a href=\"#types-array-js\">Array</a></li> <li><a href=\"#types-documentarray-js\">DocumentArray</a></li> </ul> <p>Using this exposed access to the <code>ObjectId</code> type, we can construct ids on demand.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> ObjectId = mongoose.Types.ObjectId;\n<span class=\"keyword\">var</span> id1 = <span class=\"keyword\">new</span> ObjectId;</pre>\n<h3 id=\"index_Mongoose-version\">Mongoose#<span>version</span>\n</h3>\n<p>The Mongoose version</p>\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/querystream.js\" id=\"querystream-js\">querystream.js</a></h2>\n<h3 id=\"querystream_QueryStream-destroy\">QueryStream#destroy([err])</h3>\n<p>Destroys the stream, closing the underlying cursor, which emits the close event. No more events will be emitted after the close event.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>[err]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error\">Error</a>&gt; </span>\n</li></ul>\n</div>\n\n<h3 id=\"querystream_QueryStream-pause\">QueryStream#pause()</h3>\n<p>Pauses this stream.</p>\n\n<h3 id=\"querystream_QueryStream-pipe\">QueryStream#pipe()</h3>\n<p>Pipes this query stream into another stream. This method is inherited from NodeJS Streams.</p>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://nodejs.org/api/stream.html\" title=\"NodeJS\">NodeJS</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\">query.stream().pipe(writeStream [, options])</pre>\n</div>\n<h3 id=\"querystream_QueryStream\">QueryStream(query, [options])</h3>\n<p>Provides a Node.js 0.8 style <a href=\"http://nodejs.org/docs/v0.8.21/api/stream.html#stream_readable_stream\">ReadStream</a> interface for Queries.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>query</code><span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span>\n</li>\n<li>\n<code>[options]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"inherits\">\n<h4>Inherits:</h4>\n<ul><li><a href=\"http://nodejs.org/docs/v0.8.21/api/stream.html#stream_readable_stream\" title=\"NodeJS Stream\">NodeJS Stream</a></li></ul>\n</div>\n<div class=\"events\">\n<h4>Events:</h4>\n<ul>\n<li><p><code>data</code>: emits a single Mongoose document</p></li>\n<li><p><code>error</code>: emits when an error occurs during streaming. This will emit <em>before</em> the <code>close</code> event.</p></li>\n<li><p><code>close</code>: emits when the stream reaches the end of the cursor or an error occurs, or the stream is manually <code>destroy</code>ed. After this event, no more events are emitted.</p></li>\n</ul>\n</div>\n<div class=\"description\">\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> stream = Model.find().stream();\n\nstream.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(doc)</span> {</span>\n  <span class=\"comment\">// do something with the mongoose document</span>\n}).on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n  <span class=\"comment\">// handle the error</span>\n}).on(<span class=\"string\">'close'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n  <span class=\"comment\">// the stream is closed</span>\n});</pre> <p>The stream interface allows us to simply \"plug-in\" to other <em>Node.js 0.8</em> style write streams.</p> <pre data-language=\"javascript\">Model.where(<span class=\"string\">'created'</span>).gte(twoWeeksAgo).stream().pipe(writeStream);</pre> <h4>Valid options</h4> <ul> <li>\n<code>transform</code>: optional function which accepts a mongoose document. The return value of the function will be emitted on <code>data</code>.</li> </ul> <h4>Example</h4> <pre data-language=\"javascript\"><span class=\"comment\">// JSON.stringify all documents before emitting</span>\n<span class=\"keyword\">var</span> stream = Thing.find().stream({ transform: JSON.stringify });\nstream.pipe(writeStream);</pre> <p><em>NOTE: plugging into an HTTP response will *not* work out of the box. Those streams expect only strings or buffers to be emitted, so first formatting our documents as strings/buffers is necessary.</em></p> <p><em>NOTE: these streams are Node.js 0.8 style read streams which differ from Node.js 0.10 style. Node.js 0.10 streams are not well tested yet and are not guaranteed to work.</em></p>\n</div>\n<h3 id=\"querystream_QueryStream-resume\">QueryStream#resume()</h3>\n<p>Resumes this stream.</p>\n\n<h3 id=\"querystream_QueryStream-paused\">QueryStream#<span>paused</span>\n</h3>\n<p>Flag stating whether or not this stream is paused.</p>\n<h3 id=\"querystream_QueryStream-readable\">QueryStream#<span>readable</span>\n</h3>\n<p>Flag stating whether or not this stream is readable.</p>\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/connection.js\" id=\"connection-js\">connection.js</a></h2>\n<h3 id=\"connection_Connection\">Connection(base)</h3>\n<p>Connection constructor</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>base</code><span class=\"types\"> &lt;<a href=\"#index_Mongoose\">Mongoose</a>&gt; </span><span>a mongoose instance</span>\n</li></ul>\n</div>\n<div class=\"inherits\">\n<h4>Inherits:</h4>\n<ul><li><a href=\"http://nodejs.org/api/events.html#events_class_events_eventemitter\" title=\"NodeJS EventEmitter\">NodeJS EventEmitter</a></li></ul>\n</div>\n<div class=\"events\">\n<h4>Events:</h4>\n<ul>\n<li><p><code>connecting</code>: Emitted when <code>connection.{open,openSet}()</code> is executed on this connection.</p></li>\n<li><p><code>connected</code>: Emitted when this connection successfully connects to the db. May be emitted <em>multiple</em> times in <code>reconnected</code> scenarios.</p></li>\n<li><p><code>open</code>: Emitted after we <code>connected</code> and <code>onOpen</code> is executed on all of this connections models.</p></li>\n<li><p><code>disconnecting</code>: Emitted when <code>connection.close()</code> was executed.</p></li>\n<li><p><code>disconnected</code>: Emitted after getting disconnected from the db.</p></li>\n<li><p><code>close</code>: Emitted after we <code>disconnected</code> and <code>onClose</code> executed on all of this connections models.</p></li>\n<li><p><code>reconnected</code>: Emitted after we <code>connected</code> and subsequently <code>disconnected</code>, followed by successfully another successfull connection.</p></li>\n<li><p><code>error</code>: Emitted when an error occurs on this connection.</p></li>\n<li><p><code>fullsetup</code>: Emitted in a replica-set scenario, when primary and at least one seconaries specified in the connection string are connected.</p></li>\n<li><p><code>all</code>: Emitted in a replica-set scenario, when all nodes specified in the connection string are connected.</p></li>\n</ul>\n</div>\n<div class=\"description\"><p>For practical reasons, a Connection equals a Db.</p></div>\n<h3 id=\"connection_Connection-open\">Connection#open(connection_string, [database], [port], [options], [callback])</h3>\n<p>Opens the connection to MongoDB.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>connection_string</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>mongodb://uri or the host to which you are connecting</span>\n</li>\n<li>\n<code>[database]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>database name</span>\n</li>\n<li>\n<code>[port]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span><span>database port</span>\n</li>\n<li>\n<code>[options]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>options</span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"https://github.com/mongodb/node-mongodb-native\" title=\"node-mongodb-native\">node-mongodb-native</a></li>\n<li><a href=\"http://mongodb.github.com/node-mongodb-native/api-generated/db.html#authenticate\">http://mongodb.github.com/node-mongodb-native/api-generated/db.html#authenticate</a></li>\n</ul>\n</div>\n<div class=\"description\">\n<p><code>options</code> is a hash with the following possible properties:</p> <pre data-language=\"javascript\">config  - passed to the connection config instance\ndb      - passed to the connection db instance\nserver  - passed to the connection server instance(s)\nreplset - passed to the connection ReplSet instance\nuser    - username for authentication\npass    - password for authentication\nauth    - options for authentication (see <a href=\"http://mongodb.github.com/node-mongodb-native/api-generated/db.html#authenticate\">http://mongodb.github.com/node-mongodb-native/api-generated/db.html#authenticate</a>)\n</pre> <h4>Notes:</h4> <p>Mongoose forces the db option <code>forceServerObjectId</code> false and cannot be overridden.<br>Mongoose defaults the server <code>auto_reconnect</code> options to true which can be overridden.<br>See the node-mongodb-native driver instance for options that it understands.</p> <p><em>Options passed take precedence over options included in connection strings.</em></p>\n</div>\n<h3 id=\"connection_Connection-openSet\">Connection#openSet(uris, [database], [options], [callback])</h3>\n<p>Opens the connection to a replica set.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>uris</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>comma-separated mongodb:// <code>URI</code>s</span>\n</li>\n<li>\n<code>[database]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>database name if not included in <code>uris</code></span>\n</li>\n<li>\n<code>[options]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>passed to the internal driver</span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"https://github.com/mongodb/node-mongodb-native\" title=\"node-mongodb-native\">node-mongodb-native</a></li>\n<li><a href=\"http://mongodb.github.com/node-mongodb-native/api-generated/db.html#authenticate\">http://mongodb.github.com/node-mongodb-native/api-generated/db.html#authenticate</a></li>\n</ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> db = mongoose.createConnection();\ndb.openSet(<span class=\"string\">\"mongodb://user:pwd@localhost:27020/testing,mongodb://example.com:27020,mongodb://localhost:27019\"</span>);</pre> <p>The database name and/or auth need only be included in one URI.<br>The <code>options</code> is a hash which is passed to the internal driver connection object.</p> <p>Valid <code>options</code></p> <pre data-language=\"javascript\">db      - passed to the connection db instance\nserver  - passed to the connection server instance(s)\nreplset - passed to the connection ReplSetServer instance\nuser    - username for authentication\npass    - password for authentication\nauth    - options for authentication (see <a href=\"http://mongodb.github.com/node-mongodb-native/api-generated/db.html#authenticate\">http://mongodb.github.com/node-mongodb-native/api-generated/db.html#authenticate</a>)\nmongos  - Boolean - if true, enables High Availability support for mongos\n</pre> <p><em>Options passed take precedence over options included in connection strings.</em></p> <h4>Notes:</h4> <p><em>If connecting to multiple mongos servers, set the <code>mongos</code> option to true.</em></p> <pre data-language=\"javascript\">conn.open(<span class=\"string\">'mongodb://mongosA:27501,mongosB:27501'</span>, { mongos: <span class=\"literal\">true</span> }, cb);</pre> <p>Mongoose forces the db option <code>forceServerObjectId</code> false and cannot be overridden.<br>Mongoose defaults the server <code>auto_reconnect</code> options to true which can be overridden.<br>See the node-mongodb-native driver instance for options that it understands.</p> <p><em>Options passed take precedence over options included in connection strings.</em></p>\n</div>\n<h3 id=\"connection_Connection-close\">Connection#close([callback])</h3>\n<p>Closes the connection</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span><span>optional</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#connection_Connection\">Connection</a>&gt; </span><span>self</span>\n</li></ul>\n</div>\n\n<h3 id=\"connection_Connection-collection\">Connection#collection(name, [options])</h3>\n<p>Retrieves a collection, creating it if not cached.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>name</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>of the collection</span>\n</li>\n<li>\n<code>[options]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>optional collection options</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#collection_Collection\">Collection</a>&gt; </span><span>collection instance</span>\n</li></ul>\n</div>\n<div class=\"description\"><p>Not typically needed by applications. Just talk to your collection through your model.</p></div>\n<h3 id=\"connection_Connection-model\">Connection#model(name, [schema], [collection])</h3>\n<p>Defines or retrieves a model.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>name</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>the model name</span>\n</li>\n<li>\n<code>[schema]</code><span class=\"types\"> &lt;<a href=\"#schema_Schema\">Schema</a>&gt; </span><span>a schema. necessary when defining a model</span>\n</li>\n<li>\n<code>[collection]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>name of mongodb collection (optional) if not given it will be induced from model name</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#model_Model\">Model</a>&gt; </span><span>The compiled model</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"#index_Mongoose-model\" title=\"Mongoose#model\">Mongoose#model</a></li></ul>\n</div>\n<div class=\"description\">\n<pre data-language=\"javascript\"><span class=\"keyword\">var</span> mongoose = require(<span class=\"string\">'mongoose'</span>);\n<span class=\"keyword\">var</span> db = mongoose.createConnection(..);\ndb.model(<span class=\"string\">'Venue'</span>, <span class=\"keyword\">new</span> Schema(..));\n<span class=\"keyword\">var</span> Ticket = db.model(<span class=\"string\">'Ticket'</span>, <span class=\"keyword\">new</span> Schema(..));\n<span class=\"keyword\">var</span> Venue = db.model(<span class=\"string\">'Venue'</span>);</pre> <p><em>When no <code>collection</code> argument is passed, Mongoose produces a collection name by passing the model <code>name</code> to the <a href=\"#utils_exports.toCollectionName\">utils.toCollectionName</a> method. This method pluralizes the name. If you don't like this behavior, either pass a collection name or set your schemas collection name option.</em></p> <h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({ name: String }, { collection: <span class=\"string\">'actor'</span> });\n\n<span class=\"comment\">// or</span>\n\nschema.set(<span class=\"string\">'collection'</span>, <span class=\"string\">'actor'</span>);\n\n<span class=\"comment\">// or</span>\n\n<span class=\"keyword\">var</span> collectionName = <span class=\"string\">'actor'</span>\n<span class=\"keyword\">var</span> M = conn.model(<span class=\"string\">'Actor'</span>, schema, collectionName)</pre>\n</div>\n<h3 id=\"connection_Connection-modelNames\">Connection#modelNames()</h3>\n<p>Returns an array of model names created on this connection.</p>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array\">Array</a>&gt; </span>\n</li></ul>\n</div>\n\n<h3 id=\"connection_Connection-config\">Connection#<span>config</span>\n</h3>\n<p>A hash of the global options that are associated with this connection</p>\n<h3 id=\"connection_Connection-db\">Connection#<span>db</span>\n</h3>\n<p>The mongodb.Db instance, set when the connection is opened</p>\n<h3 id=\"connection_Connection-collections\">Connection#<span>collections</span>\n</h3>\n<p>A hash of the collections associated with this connection</p>\n<h3 id=\"connection_Connection-readyState\">Connection#<span>readyState</span>\n</h3>\n<p>Connection ready state</p> <ul> <li>0 = disconnected</li> <li>1 = connected</li> <li>2 = connecting</li> <li>3 = disconnecting</li> </ul> <p>Each state change emits its associated event name.</p> <h4>Example</h4> <pre data-language=\"javascript\">conn.on(<span class=\"string\">'connected'</span>, callback);\nconn.on(<span class=\"string\">'disconnected'</span>, callback);</pre>\n<a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/utils.js\" id=\"utils-js\">utils.js</a><h3 id=\"utils_exports.pluralization\">exports.pluralization</h3>\n<p>Pluralization rules.</p>\n<p>These rules are applied while processing the argument to <code>toCollectionName</code>.</p>\n<h3 id=\"utils_exports.uncountables\">exports.uncountables</h3>\n<p>Uncountable words.</p>\n<p>These words are applied while processing the argument to <code>toCollectionName</code>.</p>\n<a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/browser.js\" id=\"browser-js\">browser.js</a><h3 id=\"browser_exports.Document\">exports.Document()</h3>\n<p>The Mongoose browser <a href=\"#document-js\">Document</a> constructor.</p>\n<h3 id=\"browser_exports.Error\">exports.Error()</h3>\n<p>The <a href=\"#error_MongooseError\">MongooseError</a> constructor.</p>\n<h3 id=\"browser_exports.Schema\">exports.Schema()</h3>\n<p>The Mongoose <a href=\"#schema_Schema\">Schema</a> constructor</p>\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> mongoose = require(<span class=\"string\">'mongoose'</span>);\n<span class=\"keyword\">var</span> Schema = mongoose.Schema;\n<span class=\"keyword\">var</span> CatSchema = <span class=\"keyword\">new</span> Schema(..);</pre>\n<h3 id=\"browser_exports.VirtualType\">exports.VirtualType()</h3>\n<p>The Mongoose <a href=\"#virtualtype_VirtualType\">VirtualType</a> constructor</p>\n<h3 id=\"browser_exports-SchemaTypes\">exports#<span>SchemaTypes</span>\n</h3>\n<p>The various Mongoose SchemaTypes.</p> <h4>Note:</h4> <p><em>Alias of mongoose.Schema.Types for backwards compatibility.</em></p>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"#schema_Schema.Types\" title=\"Schema.SchemaTypes\">Schema.SchemaTypes</a></li></ul>\n</div>\n<h3 id=\"browser_exports-Types\">exports#<span>Types</span>\n</h3>\n<p>The various Mongoose Types.</p> <h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> mongoose = require(<span class=\"string\">'mongoose'</span>);\n<span class=\"keyword\">var</span> array = mongoose.Types.Array;</pre> <h4>Types:</h4> <ul> <li><a href=\"#types-objectid-js\">ObjectId</a></li> <li><a href=\"#types-buffer-js\">Buffer</a></li> <li><a href=\"#types-embedded-js\">SubDocument</a></li> <li><a href=\"#types-array-js\">Array</a></li> <li><a href=\"#types-documentarray-js\">DocumentArray</a></li> </ul> <p>Using this exposed access to the <code>ObjectId</code> type, we can construct ids on demand.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> ObjectId = mongoose.Types.ObjectId;\n<span class=\"keyword\">var</span> id1 = <span class=\"keyword\">new</span> ObjectId;</pre>\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/drivers/node-mongodb-native/collection.js\" id=\"drivers-node-mongodb-native-collection-js\">drivers/node-mongodb-native/collection.js</a></h2>\n<h3 id=\"drivers_node-mongodb-native_collection_function%20Object()%20%7B%20%5Bnative%20code%5D%20%7D-$format\">function Object() { [native code] }#$format()</h3>\n<p>Formatter for debug print args</p>\n\n<h3 id=\"drivers_node-mongodb-native_collection_function%20Object()%20%7B%20%5Bnative%20code%5D%20%7D-$print\">function Object() { [native code] }#$print()</h3>\n<p>Debug print helper</p>\n\n<h3 id=\"drivers_node-mongodb-native_collection_NativeCollection-getIndexes\">NativeCollection#getIndexes(callback)</h3>\n<p>Retreives information about this collections indexes.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>callback</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li></ul>\n</div>\n\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/drivers/node-mongodb-native/connection.js\" id=\"drivers-node-mongodb-native-connection-js\">drivers/node-mongodb-native/connection.js</a></h2>\n<h3 id=\"drivers_node-mongodb-native_connection_NativeConnection-useDb\">NativeConnection#useDb(name)</h3>\n<p>Switches to a different database using the same connection pool.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>name</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>The database name</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#connection_Connection\">Connection</a>&gt; </span><span>New Connection Object</span>\n</li></ul>\n</div>\n<div class=\"description\"><p>Returns a new connection object, with the new db.</p></div>\n<h3 id=\"drivers_node-mongodb-native_connection_NativeConnection.STATES\">NativeConnection.STATES</h3>\n<p>Expose the possible connection states.</p>\n<a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/error/messages.js\" id=\"error-messages-js\">error/messages.js</a><h3 id=\"error_messages_MongooseError.messages\">MongooseError.messages()</h3>\n<p>The default built-in validator error messages. These may be customized.</p>\n<pre data-language=\"javascript\"><span class=\"comment\">// customize within each schema or globally like so</span>\n<span class=\"keyword\">var</span> mongoose = require(<span class=\"string\">'mongoose'</span>);\nmongoose.Error.messages.String.enum  = <span class=\"string\">\"Your custom message for {PATH}.\"</span>;</pre> <p>As you might have noticed, error messages support basic templating</p> <ul> <li>\n<code>{PATH}</code> is replaced with the invalid document path</li> <li>\n<code>{VALUE}</code> is replaced with the invalid value</li> <li>\n<code>{TYPE}</code> is replaced with the validator type such as \"regexp\", \"min\", or \"user defined\"</li> <li>\n<code>{MIN}</code> is replaced with the declared min value for the Number.min validator</li> <li>\n<code>{MAX}</code> is replaced with the declared max value for the Number.max validator</li> </ul> <p>Click the \"show code\" link below to see all defaults.</p>\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/error/validation.js\" id=\"error-validation-js\">error/validation.js</a></h2>\n<h3 id=\"error_validation_ValidationError-toString\">ValidationError#toString()</h3>\n<p>Console.log helper</p>\n\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/error.js\" id=\"error-js\">error.js</a></h2>\n<h3 id=\"error_MongooseError\">MongooseError(msg)</h3>\n<p>MongooseError constructor</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>msg</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>Error message</span>\n</li></ul>\n</div>\n<div class=\"inherits\">\n<h4>Inherits:</h4>\n<ul><li><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error\" title=\"Error\">Error</a></li></ul>\n</div>\n\n<h3 id=\"error_MongooseError.messages\">MongooseError.messages</h3>\n<p>The default built-in validator error messages.</p>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"#error_messages_MongooseError-messages\" title=\"Error.messages\">Error.messages</a></li></ul>\n</div>\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/querycursor.js\" id=\"querycursor-js\">querycursor.js</a></h2>\n<h3 id=\"querycursor_QueryCursor-close\">QueryCursor#close(callback)</h3>\n<p>Marks this cursor as closed. Will stop streaming and subsequent calls to<br><code>next()</code> will error.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>callback</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#promise_Promise\">Promise</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"#\" title=\"MongoDB\">MongoDB</a></li></ul>\n</div>\n\n<h3 id=\"querycursor_QueryCursor-eachAsync\">QueryCursor#eachAsync(fn, [callback])</h3>\n<p>Execute <code>fn</code> for every document in the cursor. If <code>fn</code> returns a promise,<br>will wait for the promise to resolve before iterating on to the next one.<br>Returns a promise that resolves when done.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>fn</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span><span>executed when all docs have been processed</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#promise_Promise\">Promise</a>&gt; </span>\n</li></ul>\n</div>\n\n<h3 id=\"querycursor_QueryCursor-next\">QueryCursor#next(callback)</h3>\n<p>Get the next document from this cursor. Will return <code>null</code> when there are<br>no documents left.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>callback</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#promise_Promise\">Promise</a>&gt; </span>\n</li></ul>\n</div>\n\n<h3 id=\"querycursor_QueryCursor\">QueryCursor(query, options)</h3>\n<p>A QueryCursor is a concurrency primitive for processing query results<br>one document at a time. A QueryCursor fulfills the <a href=\"https://strongloop.com/strongblog/whats-new-io-js-beta-streams3/\">Node.js streams3 API</a>,<br>in addition to several other mechanisms for loading documents from MongoDB<br>one at a time.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>query</code><span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span>\n</li>\n<li>\n<code>options</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>query options passed to <code>.find()</code></span>\n</li>\n</ul>\n</div>\n<div class=\"inherits\">\n<h4>Inherits:</h4>\n<ul><li><a href=\"#Readable\">Readable</a></li></ul>\n</div>\n<div class=\"events\">\n<h4>Events:</h4>\n<ul>\n<li><p><code>cursor</code>: Emitted when the cursor is created</p></li>\n<li><p><code>error</code>: Emitted when an error occurred</p></li>\n<li><p><code>data</code>: Emitted when the stream is flowing and the next doc is ready</p></li>\n<li><p><code>end</code>: Emitted when the stream is exhausted</p></li>\n</ul>\n</div>\n<div class=\"description\"><p>Unless you're an advanced user, do <strong>not</strong> instantiate this class directly.<br>Use <a href=\"http://mongoosejs.com/api.html#query_Query-cursor\"><code>Query#cursor()</code></a> instead.</p></div>\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/virtualtype.js\" id=\"virtualtype-js\">virtualtype.js</a></h2>\n<h3 id=\"virtualtype_VirtualType-applyGetters\">VirtualType#applyGetters(value, scope)</h3>\n<p>Applies getters to <code>value</code> using optional <code>scope</code>.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>value</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>scope</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;T&gt; </span><span>the value after applying all getters</span>\n</li></ul>\n</div>\n\n<h3 id=\"virtualtype_VirtualType-applySetters\">VirtualType#applySetters(value, scope)</h3>\n<p>Applies setters to <code>value</code> using optional <code>scope</code>.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>value</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>scope</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;T&gt; </span><span>the value after applying all setters</span>\n</li></ul>\n</div>\n\n<h3 id=\"virtualtype_VirtualType-get\">VirtualType#get(fn)</h3>\n<p>Defines a getter.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>fn</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#virtualtype_VirtualType\">VirtualType</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> virtual = schema.virtual(<span class=\"string\">'fullname'</span>);\nvirtual.get(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name.first + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.name.last;\n});</pre>\n</div>\n<h3 id=\"virtualtype_VirtualType-set\">VirtualType#set(fn)</h3>\n<p>Defines a setter.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>fn</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#virtualtype_VirtualType\">VirtualType</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> virtual = schema.virtual(<span class=\"string\">'fullname'</span>);\nvirtual.set(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(v)</span> {</span>\n  <span class=\"keyword\">var</span> parts = v.split(<span class=\"string\">' '</span>);\n  <span class=\"keyword\">this</span>.name.first = parts[<span class=\"number\">0</span>];\n  <span class=\"keyword\">this</span>.name.last = parts[<span class=\"number\">1</span>];\n});</pre>\n</div>\n<h3 id=\"virtualtype_VirtualType\">VirtualType()</h3>\n<p>VirtualType constructor</p>\n<div class=\"description\">\n<p>This is what mongoose uses to define virtual attributes via <code>Schema.prototype.virtual</code>.</p> <h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> fullname = schema.virtual(<span class=\"string\">'fullname'</span>);\nfullname <span class=\"keyword\">instanceof</span> mongoose.VirtualType <span class=\"comment\">// true</span></pre>\n</div>\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/schema.js\" id=\"schema-js\">schema.js</a></h2>\n<h3 id=\"schema_Schema-add\">Schema#add(obj, prefix)</h3>\n<p>Adds key path / schema type pairs to this schema.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>obj</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>prefix</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> ToySchema = <span class=\"keyword\">new</span> Schema;\nToySchema.add({ name: <span class=\"string\">'string'</span>, color: <span class=\"string\">'string'</span>, price: <span class=\"string\">'number'</span> });</pre>\n</div>\n<h3 id=\"schema_Schema-eachPath\">Schema#eachPath(fn)</h3>\n<p>Iterates the schemas paths similar to Array#forEach.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>fn</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span><span>callback function</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#schema_Schema\">Schema</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"description\"><p>The callback is passed the pathname and schemaType as arguments on each iteration.</p></div>\n<h3 id=\"schema_Schema-get\">Schema#get(key)</h3>\n<p>Gets a schema option.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>key</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>option name</span>\n</li></ul>\n</div>\n\n<h3 id=\"schema_Schema-index\">Schema#index(fields, [options], [options.expires=null])</h3>\n<p>Defines an index (most likely compound) for this schema.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>fields</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>[options]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>Options to pass to <a href=\"http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#createIndex\">MongoDB driver's <code>createIndex()</code> function</a></span>\n</li>\n<li>\n<code>[options.expires=null]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>Mongoose-specific syntactic sugar, uses <a href=\"https://www.npmjs.com/package/ms\">ms</a> to convert <code>expires</code> option into seconds for the <code>expireAfterSeconds</code> in the above link.</span>\n</li>\n</ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\">schema.index({ first: <span class=\"number\">1</span>, last: -<span class=\"number\">1</span> })</pre>\n</div>\n<h3 id=\"schema_Schema-indexes\">Schema#indexes()</h3>\n<p>Compiles indexes from fields and schema-level indexes</p>\n\n<h3 id=\"schema_Schema-method\">Schema#method(method, [fn])</h3>\n<p>Adds an instance method to documents constructed from Models compiled from this schema.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>method</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>name</span>\n</li>\n<li>\n<code>[fn]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> schema = kittySchema = <span class=\"keyword\">new</span> Schema(..);\n\nschema.method(<span class=\"string\">'meow'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n  console.log(<span class=\"string\">'meeeeeoooooooooooow'</span>);\n})\n\n<span class=\"keyword\">var</span> Kitty = mongoose.model(<span class=\"string\">'Kitty'</span>, schema);\n\n<span class=\"keyword\">var</span> fizz = <span class=\"keyword\">new</span> Kitty;\nfizz.meow(); <span class=\"comment\">// meeeeeooooooooooooow</span></pre> <p>If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as methods.</p> <pre data-language=\"javascript\">schema.method({\n    purr: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>}\n  , scratch: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>}\n});\n\n<span class=\"comment\">// later</span>\nfizz.purr();\nfizz.scratch();</pre>\n</div>\n<h3 id=\"schema_Schema-path\">Schema#path(path, constructor)</h3>\n<p>Gets/sets schema paths.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>path</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>constructor</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"description\">\n<p>Sets a path (if arity 2)<br>Gets a path (if arity 1)</p> <h4>Example</h4> <pre data-language=\"javascript\">schema.path(<span class=\"string\">'name'</span>) <span class=\"comment\">// returns a SchemaType</span>\nschema.path(<span class=\"string\">'name'</span>, Number) <span class=\"comment\">// changes the schemaType of `name` to Number</span></pre>\n</div>\n<h3 id=\"schema_Schema-pathType\">Schema#pathType(path)</h3>\n<p>Returns the pathType of <code>path</code> for this schema.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>path</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"description\"><p>Given a path, returns whether it is a real, virtual, nested, or ad-hoc/undefined path.</p></div>\n<h3 id=\"schema_Schema-plugin\">Schema#plugin(plugin, [opts])</h3>\n<p>Registers a plugin for this schema.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>plugin</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span><span>callback</span>\n</li>\n<li>\n<code>[opts]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://mongoosejs.com/docs/plugins\" title=\"plugins\">plugins</a></li></ul>\n</div>\n\n<h3 id=\"schema_Schema-post\">Schema#post(method, fn)</h3>\n<p>Defines a post hook for the document</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>method</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>name of the method to hook</span>\n</li>\n<li>\n<code>fn</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span><span>callback</span>\n</li>\n</ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"middleware\" title=\"middleware\">middleware</a></li>\n<li><a href=\"https://www.npmjs.com/package/hooks-fixed\" title=\"hooks.js\">hooks.js</a></li>\n<li><a href=\"http://npmjs.org/package/kareem\" title=\"kareem\">kareem</a></li>\n</ul>\n</div>\n<div class=\"description\"><pre data-language=\"javascript\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema(..);\nschema.post(<span class=\"string\">'save'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(doc)</span> {</span>\n  console.log(<span class=\"string\">'this fired after a document was saved'</span>);\n});\n\nshema.post(<span class=\"string\">'find'</span>, <span class=\"keyword\">function</span>(docs) {\n  console.log(<span class=\"string\">'this fired after you run a find query'</span>);\n});\n\n<span class=\"keyword\">var</span> Model = mongoose.model(<span class=\"string\">'Model'</span>, schema);\n\n<span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> Model(..);\nm.save(<span class=\"keyword\">function</span>(err) {\n  console.log(<span class=\"string\">'this fires after the `post` hook'</span>);\n});\n\nm.find(<span class=\"keyword\">function</span>(err, docs) {\n  console.log(<span class=\"string\">'this fires after the post find hook'</span>);\n});</pre></div>\n<h3 id=\"schema_Schema-pre\">Schema#pre(method, callback)</h3>\n<p>Defines a pre hook for the document.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>method</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>callback</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"https://github.com/bnoguchi/hooks-js/tree/31ec571cef0332e21121ee7157e0cf9728572cc3\" title=\"hooks.js\">hooks.js</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> toySchema = <span class=\"keyword\">new</span> Schema(..);\n\ntoySchema.pre(<span class=\"string\">'save'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(next)</span> {</span>\n  <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.created) <span class=\"keyword\">this</span>.created = <span class=\"keyword\">new</span> Date;\n  next();\n})\n\ntoySchema.pre(<span class=\"string\">'validate'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(next)</span> {</span>\n  <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.name !== <span class=\"string\">'Woody'</span>) <span class=\"keyword\">this</span>.name = <span class=\"string\">'Woody'</span>;\n  next();\n})</pre>\n</div>\n<h3 id=\"schema_Schema-queue\">Schema#queue(name, args)</h3>\n<p>Adds a method call to the queue.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>name</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>name of the document method to call later</span>\n</li>\n<li>\n<code>args</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array\">Array</a>&gt; </span><span>arguments to pass to the method</span>\n</li>\n</ul>\n</div>\n\n<h3 id=\"schema_Schema-remove\">Schema#remove(path)</h3>\n<p>Removes the given <code>path</code> (or [<code>paths</code>]).</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>path</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array\">Array</a>&gt; </span>\n</li></ul>\n</div>\n\n<h3 id=\"schema_Schema-requiredPaths\">Schema#requiredPaths(invalidate)</h3>\n<p>Returns an Array of path strings that are required by this schema.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>invalidate</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span><span>refresh the cache</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array\">Array</a>&gt; </span>\n</li></ul>\n</div>\n\n<h3 id=\"schema_Schema\">Schema(definition, [options])</h3>\n<p>Schema constructor.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>definition</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>[options]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"inherits\">\n<h4>Inherits:</h4>\n<ul><li><a href=\"http://nodejs.org/api/events.html#events_class_events_eventemitter\" title=\"NodeJS EventEmitter\">NodeJS EventEmitter</a></li></ul>\n</div>\n<div class=\"events\">\n<h4>Events:</h4>\n<ul><li><p><code>init</code>: Emitted after the schema is compiled into a <code>Model</code>.</p></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> child = <span class=\"keyword\">new</span> Schema({ name: String });\n<span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({ name: String, age: Number, children: [child] });\n<span class=\"keyword\">var</span> Tree = mongoose.model(<span class=\"string\">'Tree'</span>, schema);\n\n<span class=\"comment\">// setting schema options</span>\n<span class=\"keyword\">new</span> Schema({ name: String }, { _id: <span class=\"literal\">false</span>, autoIndex: <span class=\"literal\">false</span> })</pre> <h4>Options:</h4> <ul> <li>\n<a href=\"guide#autoIndex\">autoIndex</a>: bool - defaults to null (which means use the connection's autoIndex option)</li> <li>\n<a href=\"guide#bufferCommands\">bufferCommands</a>: bool - defaults to true</li> <li>\n<a href=\"guide#capped\">capped</a>: bool - defaults to false</li> <li>\n<a href=\"guide#collection\">collection</a>: string - no default</li> <li>\n<a href=\"guide#emitIndexErrors\">emitIndexErrors</a>: bool - defaults to false.</li> <li>\n<a href=\"guide#id\">id</a>: bool - defaults to true</li> <li>\n<a href=\"guide#_id\">_id</a>: bool - defaults to true</li> <li>\n<code>minimize</code>: bool - controls <a href=\"#document_Document-toObject\">document#toObject</a> behavior when called manually - defaults to true</li> <li>\n<a href=\"guide#read\">read</a>: string</li> <li>\n<a href=\"guide#safe\">safe</a>: bool - defaults to true.</li> <li>\n<a href=\"guide#shardKey\">shardKey</a>: bool - defaults to <code>null</code>\n</li> <li>\n<a href=\"guide#strict\">strict</a>: bool - defaults to true</li> <li>\n<a href=\"guide#toJSON\">toJSON</a> - object - no default</li> <li>\n<a href=\"guide#toObject\">toObject</a> - object - no default</li> <li>\n<a href=\"guide#typeKey\">typeKey</a> - string - defaults to 'type'</li> <li>\n<a href=\"guide#useNestedStrict\">useNestedStrict</a> - boolean - defaults to false</li> <li>\n<a href=\"guide#validateBeforeSave\">validateBeforeSave</a> - bool - defaults to <code>true</code>\n</li> <li>\n<a href=\"guide#versionKey\">versionKey</a>: string - defaults to \"__v\"</li> </ul> <h4>Note:</h4> <p><em>When nesting schemas, (<code>children</code> in the example above), always declare the child schema first before passing it into its parent.</em></p>\n</div>\n<h3 id=\"schema_Schema-set\">Schema#set(key, [value])</h3>\n<p>Sets/gets a schema option.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>key</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>option name</span>\n</li>\n<li>\n<code>[value]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>if not passed, the current option value is returned</span>\n</li>\n</ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://mongoosejs.com/docs/\" title=\"Schema\">Schema</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\">schema.set(<span class=\"string\">'strict'</span>); <span class=\"comment\">// 'true' by default</span>\nschema.set(<span class=\"string\">'strict'</span>, <span class=\"literal\">false</span>); <span class=\"comment\">// Sets 'strict' to false</span>\nschema.set(<span class=\"string\">'strict'</span>); <span class=\"comment\">// 'false'</span></pre>\n</div>\n<h3 id=\"schema_Schema-static\">Schema#static(name, [fn])</h3>\n<p>Adds static \"class\" methods to Models compiled from this schema.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>name</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>[fn]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema(..);\nschema.static(<span class=\"string\">'findByName'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(name, callback)</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.find({ name: name }, callback);\n});\n\n<span class=\"keyword\">var</span> Drink = mongoose.model(<span class=\"string\">'Drink'</span>, schema);\nDrink.findByName(<span class=\"string\">'sanpellegrino'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, drinks)</span> {</span>\n  <span class=\"comment\">//</span>\n});</pre> <p>If a hash of name/fn pairs is passed as the only argument, each name/fn pair will be added as statics.</p>\n</div>\n<h3 id=\"schema_Schema-virtual\">Schema#virtual(name, [options])</h3>\n<p>Creates a virtual type with the given name.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>name</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>[options]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#virtualtype_VirtualType\">VirtualType</a>&gt; </span>\n</li></ul>\n</div>\n\n<h3 id=\"schema_Schema-virtualpath\">Schema#virtualpath(name)</h3>\n<p>Returns the virtual type with the given <code>name</code>.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>name</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#virtualtype_VirtualType\">VirtualType</a>&gt; </span>\n</li></ul>\n</div>\n\n<h3 id=\"schema_Schema.indexTypes\">Schema.indexTypes()</h3>\n<p>The allowed index types</p>\n<h3 id=\"schema_Schema.reserved\">Schema.reserved</h3>\n<p>Reserved document keys.</p>\n<p>Keys in this object are names that are rejected in schema declarations b/c they conflict with mongoose functionality. Using these key name will throw an error.</p> <pre data-language=\"javascript\">on, emit, _events, db, get, set, init, isNew, errors, schema, options, modelName, collection, _pres, _posts, toObject</pre> <p><em>NOTE:</em> Use of these terms as method names is permitted, but play at your own risk, as they may be existing mongoose document methods you are stomping on.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema(..);\n schema.methods.init = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>} <span class=\"comment\">// potentially breaking</span></pre>\n<h3 id=\"schema_Schema.Types\">Schema.Types</h3>\n<p>The various built-in Mongoose Schema Types.</p>\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> mongoose = require(<span class=\"string\">'mongoose'</span>);\n<span class=\"keyword\">var</span> ObjectId = mongoose.Schema.Types.ObjectId;</pre> <h4>Types:</h4> <ul> <li><a href=\"#schema-string-js\">String</a></li> <li><a href=\"#schema-number-js\">Number</a></li> <li>\n<a href=\"#schema-boolean-js\">Boolean</a> | Bool</li> <li><a href=\"#schema-array-js\">Array</a></li> <li><a href=\"#schema-buffer-js\">Buffer</a></li> <li><a href=\"#schema-date-js\">Date</a></li> <li>\n<a href=\"#schema-objectid-js\">ObjectId</a> | Oid</li> <li><a href=\"#schema-mixed-js\">Mixed</a></li> </ul> <p>Using this exposed access to the <code>Mixed</code> SchemaType, we can use them in our schema.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> Mixed = mongoose.Schema.Types.Mixed;\n<span class=\"keyword\">new</span> mongoose.Schema({ _user: Mixed })</pre>\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/document.js\" id=\"document-js\">document.js</a></h2>\n<h3 id=\"document_function%20Object()%20%7B%20%5Bnative%20code%5D%20%7D-$isDefault\">function Object() { [native code] }#$isDefault([path])</h3>\n<p>Checks if a path is set to its default.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>[path]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\">MyModel = mongoose.model(<span class=\"string\">'test'</span>, { name: { type: String, <span class=\"keyword\">default</span>: <span class=\"string\">'Val '</span>} });\n<span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> MyModel();\nm.$isDefault(<span class=\"string\">'name'</span>);               <span class=\"comment\">// true</span></pre>\n</div>\n<h3 id=\"document_Document-depopulate\">Document#depopulate(path)</h3>\n<p>Takes a populated field and returns it to its unpopulated state.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>path</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"#document_Document-populate\" title=\"Document.populate\">Document.populate</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\">Model.findOne().populate(<span class=\"string\">'author'</span>).exec(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, doc)</span> {</span>\n  console.log(doc.author.name); <span class=\"comment\">// Dr.Seuss</span>\n  console.log(doc.depopulate(<span class=\"string\">'author'</span>));\n  console.log(doc.author); <span class=\"comment\">// '5144cf8050f071d979c118a7'</span>\n})</pre> <p>If the path was not populated, this is a no-op.</p>\n</div>\n<h3 id=\"document_Document-equals\">Document#equals(doc)</h3>\n<p>Returns true if the Document stores the same data as doc.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>doc</code><span class=\"types\"> &lt;<a href=\"#document_Document\">Document</a>&gt; </span><span>a document to compare</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"description\"><p>Documents are considered equal when they have matching <code>_id</code>s, unless neither<br>document has an <code>_id</code>, in which case this function falls back to using<br><code>deepEqual()</code>.</p></div>\n<h3 id=\"document_Document-execPopulate\">Document#execPopulate()</h3>\n<p>Explicitly executes population and returns a promise. Useful for ES2015<br>integration.</p>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#promise_Promise\">Promise</a>&gt; </span><span>promise that resolves to the document when population is done</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"#document_Document-populate\" title=\"Document.populate\">Document.populate</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> promise = doc.\n  populate(<span class=\"string\">'company'</span>).\n  populate({\n    path: <span class=\"string\">'notes'</span>,\n    match: <span class=\"regexp\">/airline/</span>,\n    select: <span class=\"string\">'text'</span>,\n    model: <span class=\"string\">'modelName'</span>\n    options: opts\n  }).\n  execPopulate();\n\n<span class=\"comment\">// summary</span>\ndoc.execPopulate().then(resolve, reject);</pre>\n</div>\n<h3 id=\"document_Document-get\">Document#get(path, [type])</h3>\n<p>Returns the value of a path.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>path</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>[type]</code><span class=\"types\"> &lt;<a href=\"#schema_Schema\">Schema</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>, <a href=\"http://nodejs.org/api/buffer.html\">Buffer</a>, <a href=\"#*\">*</a>&gt; </span><span>optionally specify a type for on-the-fly attributes</span>\n</li>\n</ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\"><span class=\"comment\">// path</span>\ndoc.get(<span class=\"string\">'age'</span>) <span class=\"comment\">// 47</span>\n\n<span class=\"comment\">// dynamic casting to a string</span>\ndoc.get(<span class=\"string\">'age'</span>, String) <span class=\"comment\">// \"47\"</span></pre>\n</div>\n<h3 id=\"document_Document-init\">Document#init(doc, fn)</h3>\n<p>Initializes the document without setters or marking anything modified.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>doc</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>document returned by mongo</span>\n</li>\n<li>\n<code>fn</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span><span>callback</span>\n</li>\n</ul>\n</div>\n<div class=\"description\"><p>Called internally after a document is returned from mongodb.</p></div>\n<h3 id=\"document_Document-inspect\">Document#inspect()</h3>\n<p>Helper for console.log</p>\n\n<h3 id=\"document_Document-invalidate\">Document#invalidate(path, errorMsg, value, [kind])</h3>\n<p>Marks a path as invalid, causing validation to fail.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>path</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>the field to invalidate</span>\n</li>\n<li>\n<code>errorMsg</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error\">Error</a>&gt; </span><span>the error which states the reason <code>path</code> was invalid</span>\n</li>\n<li>\n<code>value</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>, T&gt; </span><span>optional invalid value</span>\n</li>\n<li>\n<code>[kind]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>optional <code>kind</code> property for the error</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#ValidationError\">ValidationError</a>&gt; </span><span>the current ValidationError, with all currently invalidated paths</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<p>The <code>errorMsg</code> argument will become the message of the <code>ValidationError</code>.</p> <p>The <code>value</code> argument (if passed) will be available through the <code>ValidationError.value</code> property.</p> <pre data-language=\"javascript\">doc.invalidate(<span class=\"string\">'size'</span>, <span class=\"string\">'must be less than 20'</span>, <span class=\"number\">14</span>);\n\ndoc.validate(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n  console.log(err)\n  <span class=\"comment\">// prints</span>\n  { message: <span class=\"string\">'Validation failed'</span>,\n    name: <span class=\"string\">'ValidationError'</span>,\n    errors:\n     { size:\n        { message: <span class=\"string\">'must be less than 20'</span>,\n          name: <span class=\"string\">'ValidatorError'</span>,\n          path: <span class=\"string\">'size'</span>,\n          type: <span class=\"string\">'user defined'</span>,\n          value: <span class=\"number\">14</span> } } }\n})</pre>\n</div>\n<h3 id=\"document_Document-isDirectModified\">Document#isDirectModified(path)</h3>\n<p>Returns true if <code>path</code> was directly set and modified, else false.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>path</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\">doc.set(<span class=\"string\">'documents.0.title'</span>, <span class=\"string\">'changed'</span>);\ndoc.isDirectModified(<span class=\"string\">'documents.0.title'</span>) <span class=\"comment\">// true</span>\ndoc.isDirectModified(<span class=\"string\">'documents'</span>) <span class=\"comment\">// false</span></pre>\n</div>\n<h3 id=\"document_Document-isInit\">Document#isInit(path)</h3>\n<p>Checks if <code>path</code> was initialized.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>path</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span>\n</li></ul>\n</div>\n\n<h3 id=\"document_Document-isModified\">Document#isModified([path])</h3>\n<p>Returns true if this document was modified, else false.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>[path]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>optional</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"description\">\n<p>If <code>path</code> is given, checks if a path or any full path containing <code>path</code> as part of its path chain has been modified.</p> <h4>Example</h4> <pre data-language=\"javascript\">doc.set(<span class=\"string\">'documents.0.title'</span>, <span class=\"string\">'changed'</span>);\ndoc.isModified()                      <span class=\"comment\">// true</span>\ndoc.isModified(<span class=\"string\">'documents'</span>)           <span class=\"comment\">// true</span>\ndoc.isModified(<span class=\"string\">'documents.0.title'</span>)   <span class=\"comment\">// true</span>\ndoc.isModified(<span class=\"string\">'documents otherProp'</span>) <span class=\"comment\">// true</span>\ndoc.isDirectModified(<span class=\"string\">'documents'</span>)     <span class=\"comment\">// false</span></pre>\n</div>\n<h3 id=\"document_Document-isSelected\">Document#isSelected(path)</h3>\n<p>Checks if <code>path</code> was selected in the source query which initialized this document.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>path</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\">Thing.findOne().select(<span class=\"string\">'name'</span>).exec(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, doc)</span> {</span>\n   doc.isSelected(<span class=\"string\">'name'</span>) <span class=\"comment\">// true</span>\n   doc.isSelected(<span class=\"string\">'age'</span>)  <span class=\"comment\">// false</span>\n})</pre>\n</div>\n<h3 id=\"document_Document-markModified\">Document#markModified(path)</h3>\n<p>Marks the path as having pending changes to write to the db.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>path</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>the path to mark modified</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<p><em>Very helpful when using <a href=\"schematypes#mixed\">Mixed</a> types.</em></p> <h4>Example:</h4> <pre data-language=\"javascript\">doc.mixed.type = <span class=\"string\">'changed'</span>;\ndoc.markModified(<span class=\"string\">'mixed.type'</span>);\ndoc.save() <span class=\"comment\">// changes to mixed.type are now persisted</span></pre>\n</div>\n<h3 id=\"document_Document-modifiedPaths\">Document#modifiedPaths()</h3>\n<p>Returns the list of paths that have been modified.</p>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array\">Array</a>&gt; </span>\n</li></ul>\n</div>\n\n<h3 id=\"document_Document-populate\">Document#populate([path], [callback])</h3>\n<p>Populates document references, executing the <code>callback</code> when complete.<br>If you want to use promises instead, use this function with<br><a href=\"#document_Document-execPopulate\"><code>execPopulate()</code></a></p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[path]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>The path to populate or an options object</span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span><span>When passed, population is invoked</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#document_Document\">Document</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"#model_Model.populate\" title=\"Model.populate\">Model.populate</a></li>\n<li><a href=\"#document_Document-execPopulate\" title=\"Document.execPopulate\">Document.execPopulate</a></li>\n</ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\">doc\n.populate(<span class=\"string\">'company'</span>)\n.populate({\n  path: <span class=\"string\">'notes'</span>,\n  match: <span class=\"regexp\">/airline/</span>,\n  select: <span class=\"string\">'text'</span>,\n  model: <span class=\"string\">'modelName'</span>\n  options: opts\n}, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, user)</span> {</span>\n  assert(doc._id === user._id) <span class=\"comment\">// the document itself is passed</span>\n})\n\n<span class=\"comment\">// summary</span>\ndoc.populate(path)                   <span class=\"comment\">// not executed</span>\ndoc.populate(options);               <span class=\"comment\">// not executed</span>\ndoc.populate(path, callback)         <span class=\"comment\">// executed</span>\ndoc.populate(options, callback);     <span class=\"comment\">// executed</span>\ndoc.populate(callback);              <span class=\"comment\">// executed</span>\ndoc.populate(options).execPopulate() <span class=\"comment\">// executed, returns promise</span></pre> <h4>NOTE:</h4> <p>Population does not occur unless a <code>callback</code> is passed <em>or</em> you explicitly<br>call <code>execPopulate()</code>.<br>Passing the same path a second time will overwrite the previous path options.<br>See <a href=\"#model_Model.populate\">Model.populate()</a> for explaination of options.</p>\n</div>\n<h3 id=\"document_Document-populated\">Document#populated(path)</h3>\n<p>Gets _id(s) used during population of the given <code>path</code>.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>path</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array\">Array</a>, <a href=\"#types_objectid_ObjectId\">ObjectId</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>, <a href=\"http://nodejs.org/api/buffer.html\">Buffer</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/undefined\">undefined</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\">Model.findOne().populate(<span class=\"string\">'author'</span>).exec(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, doc)</span> {</span>\n  console.log(doc.author.name)         <span class=\"comment\">// Dr.Seuss</span>\n  console.log(doc.populated(<span class=\"string\">'author'</span>)) <span class=\"comment\">// '5144cf8050f071d979c118a7'</span>\n})</pre> <p>If the path was not populated, undefined is returned.</p>\n</div>\n<h3 id=\"document_Document-set\">Document#set(path, val, [type], [options])</h3>\n<p>Sets the value of a path, or many paths.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>path</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>path or object of key/vals to set</span>\n</li>\n<li>\n<code>val</code><span class=\"types\"> &lt;<a href=\"#Any\">Any</a>&gt; </span><span>the value to set</span>\n</li>\n<li>\n<code>[type]</code><span class=\"types\"> &lt;<a href=\"#schema_Schema\">Schema</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>, <a href=\"http://nodejs.org/api/buffer.html\">Buffer</a>, <a href=\"#*\">*</a>&gt; </span><span>optionally specify a type for \"on-the-fly\" attributes</span>\n</li>\n<li>\n<code>[options]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>optionally specify options that modify the behavior of the set</span>\n</li>\n</ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"comment\">// path, value</span>\ndoc.set(path, value)\n\n<span class=\"comment\">// object</span>\ndoc.set({\n    path  : value\n  , path2 : {\n       path  : value\n    }\n})\n\n<span class=\"comment\">// on-the-fly cast to number</span>\ndoc.set(path, value, Number)\n\n<span class=\"comment\">// on-the-fly cast to string</span>\ndoc.set(path, value, String)\n\n<span class=\"comment\">// changing strict mode behavior</span>\ndoc.set(path, value, { strict: <span class=\"literal\">false</span> });</pre>\n</div>\n<h3 id=\"document_Document-toJSON\">Document#toJSON(options)</h3>\n<p>The return value of this method is used in calls to JSON.stringify(doc).</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>options</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"#document_Document-toObject\" title=\"Document#toObject\">Document#toObject</a></li></ul>\n</div>\n<div class=\"description\">\n<p>This method accepts the same options as <a href=\"#document_Document-toObject\">Document#toObject</a>. To apply the options to every document of your schema by default, set your <a href=\"#schema_Schema\">schemas</a> <code>toJSON</code> option to the same argument.</p> <pre data-language=\"javascript\">schema.set(<span class=\"string\">'toJSON'</span>, { virtuals: <span class=\"literal\">true</span> })</pre> <p>See <a href=\"guide#toJSON\">schema options</a> for details.</p>\n</div>\n<h3 id=\"document_Document-toObject\">Document#toObject([options])</h3>\n<p>Converts this document into a plain javascript object, ready for storage in MongoDB.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>[options]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>js object</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://mongodb.github.com/node-mongodb-native/api-bson-generated/binary.html\" title=\"mongodb.Binary\">mongodb.Binary</a></li></ul>\n</div>\n<div class=\"description\">\n<p>Buffers are converted to instances of <a href=\"http://mongodb.github.com/node-mongodb-native/api-bson-generated/binary.html\">mongodb.Binary</a> for proper storage.</p> <h4>Options:</h4> <ul> <li>\n<code>getters</code> apply all getters (path and virtual getters)</li> <li>\n<code>virtuals</code> apply virtual getters (can override <code>getters</code> option)</li> <li>\n<code>minimize</code> remove empty objects (defaults to true)</li> <li>\n<code>transform</code> a transform function to apply to the resulting document before returning</li> <li>\n<code>depopulate</code> depopulate any populated paths, replacing them with their original refs (defaults to false)</li> <li>\n<code>versionKey</code> whether to include the version key (defaults to true)</li> <li>\n<code>retainKeyOrder</code> keep the order of object keys. If this is set to true, <code>Object.keys(new Doc({ a: 1, b: 2}).toObject())</code> will always produce <code>['a', 'b']</code> (defaults to false)</li> </ul> <h4>Getters/Virtuals</h4> <p>Example of only applying path getters</p> <pre data-language=\"javascript\">doc.toObject({ getters: <span class=\"literal\">true</span>, virtuals: <span class=\"literal\">false</span> })</pre> <p>Example of only applying virtual getters</p> <pre data-language=\"javascript\">doc.toObject({ virtuals: <span class=\"literal\">true</span> })</pre> <p>Example of applying both path and virtual getters</p> <pre data-language=\"javascript\">doc.toObject({ getters: <span class=\"literal\">true</span> })</pre> <p>To apply these options to every document of your schema by default, set your <a href=\"#schema_Schema\">schemas</a> <code>toObject</code> option to the same argument.</p> <pre data-language=\"javascript\">schema.set(<span class=\"string\">'toObject'</span>, { virtuals: <span class=\"literal\">true</span> })</pre> <h4>Transform</h4> <p>We may need to perform a transformation of the resulting object based on some criteria, say to remove some sensitive information or return a custom object. In this case we set the optional <code>transform</code> function.</p> <p>Transform functions receive three arguments</p> <pre data-language=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(doc, ret, options)</span> {</span>}</pre> <ul> <li>\n<code>doc</code> The mongoose document which is being converted</li> <li>\n<code>ret</code> The plain object representation which has been converted</li> <li>\n<code>options</code> The options in use (either schema options or the options passed inline)</li> </ul> <h4>Example</h4> <pre data-language=\"javascript\"><span class=\"comment\">// specify the transform schema option</span>\n<span class=\"keyword\">if</span> (!schema.options.toObject) schema.options.toObject = {};\nschema.options.toObject.transform = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(doc, ret, options)</span> {</span>\n  <span class=\"comment\">// remove the _id of every document before returning the result</span>\n  <span class=\"keyword\">delete</span> ret._id;\n  <span class=\"keyword\">return</span> ret;\n}\n\n<span class=\"comment\">// without the transformation in the schema</span>\ndoc.toObject(); <span class=\"comment\">// { _id: 'anId', name: 'Wreck-it Ralph' }</span>\n\n<span class=\"comment\">// with the transformation</span>\ndoc.toObject(); <span class=\"comment\">// { name: 'Wreck-it Ralph' }</span></pre> <p>With transformations we can do a lot more than remove properties. We can even return completely new customized objects:</p> <pre data-language=\"javascript\"><span class=\"keyword\">if</span> (!schema.options.toObject) schema.options.toObject = {};\nschema.options.toObject.transform = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(doc, ret, options)</span> {</span>\n  <span class=\"keyword\">return</span> { movie: ret.name }\n}\n\n<span class=\"comment\">// without the transformation in the schema</span>\ndoc.toObject(); <span class=\"comment\">// { _id: 'anId', name: 'Wreck-it Ralph' }</span>\n\n<span class=\"comment\">// with the transformation</span>\ndoc.toObject(); <span class=\"comment\">// { movie: 'Wreck-it Ralph' }</span></pre> <p><em>Note: if a transform function returns <code>undefined</code>, the return value will be ignored.</em></p> <p>Transformations may also be applied inline, overridding any transform set in the options:</p> <pre data-language=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">xform</span> <span class=\"params\">(doc, ret, options)</span> {</span>\n  <span class=\"keyword\">return</span> { inline: ret.name, custom: <span class=\"literal\">true</span> }\n}\n\n<span class=\"comment\">// pass the transform as an inline option</span>\ndoc.toObject({ transform: xform }); <span class=\"comment\">// { inline: 'Wreck-it Ralph', custom: true }</span></pre> <p><em>Note: if you call <code>toObject</code> and pass any options, the transform declared in your schema options will <strong>not</strong> be applied. To force its application pass <code>transform: true</code></em></p> <pre data-language=\"javascript\"><span class=\"keyword\">if</span> (!schema.options.toObject) schema.options.toObject = {};\nschema.options.toObject.hide = <span class=\"string\">'_id'</span>;\nschema.options.toObject.transform = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(doc, ret, options)</span> {</span>\n  <span class=\"keyword\">if</span> (options.hide) {\n    options.hide.split(<span class=\"string\">' '</span>).forEach(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(prop)</span> {</span>\n      <span class=\"keyword\">delete</span> ret[prop];\n    });\n  }\n  <span class=\"keyword\">return</span> ret;\n}\n\n<span class=\"keyword\">var</span> doc = <span class=\"keyword\">new</span> Doc({ _id: <span class=\"string\">'anId'</span>, secret: <span class=\"number\">47</span>, name: <span class=\"string\">'Wreck-it Ralph'</span> });\ndoc.toObject();                                        <span class=\"comment\">// { secret: 47, name: 'Wreck-it Ralph' }</span>\ndoc.toObject({ hide: <span class=\"string\">'secret _id'</span> });                  <span class=\"comment\">// { _id: 'anId', secret: 47, name: 'Wreck-it Ralph' }</span>\ndoc.toObject({ hide: <span class=\"string\">'secret _id'</span>, transform: <span class=\"literal\">true</span> }); <span class=\"comment\">// { name: 'Wreck-it Ralph' }</span></pre> <p>Transforms are applied <em>only to the document and are not applied to sub-documents</em>.</p> <p>Transforms, like all of these options, are also available for <code>toJSON</code>.</p> <p>See <a href=\"guide#toObject\">schema options</a> for some more details.</p> <p><em>During save, no custom options are applied to the document before being sent to the database.</em></p>\n</div>\n<h3 id=\"document_Document-toString\">Document#toString()</h3>\n<p>Helper for console.log</p>\n\n<h3 id=\"document_Document-unmarkModified\">Document#unmarkModified(path)</h3>\n<p>Clears the modified state on the specified path.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>path</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>the path to unmark modified</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\">doc.foo = <span class=\"string\">'bar'</span>;\ndoc.unmarkModified(<span class=\"string\">'foo'</span>);\ndoc.save() <span class=\"comment\">// changes to foo will not be persisted</span></pre>\n</div>\n<h3 id=\"document_Document-update\">Document#update(doc, options, callback)</h3>\n<p>Sends an update command with this document <code>_id</code> as the query selector.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>doc</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>options</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>callback</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"#model_Model.update\" title=\"Model.update\">Model.update</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\">weirdCar.update({$inc: {wheels:<span class=\"number\">1</span>}}, { w: <span class=\"number\">1</span> }, callback);</pre> <h4>Valid options:</h4> <ul> <li>same as in <a href=\"#model_Model.update\">Model.update</a>\n</li> </ul>\n</div>\n<h3 id=\"document_Document-validate\">Document#validate(optional, callback)</h3>\n<p>Executes registered validation rules for this document.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>optional</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>options internal options</span>\n</li>\n<li>\n<code>callback</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span><span>optional callback called after validation completes, passing an error if one occurred</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#promise_Promise\">Promise</a>&gt; </span><span>Promise</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Note:</h4> <p>This method is called <code>pre</code> save and if a validation rule is violated, <a href=\"#model_Model-save\">save</a> is aborted and the error is returned to your <code>callback</code>.</p> <h4>Example:</h4> <pre data-language=\"javascript\">doc.validate(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n  <span class=\"keyword\">if</span> (err) handleError(err);\n  <span class=\"keyword\">else</span> <span class=\"comment\">// validation passed</span>\n});</pre>\n</div>\n<h3 id=\"document_Document-validateSync\">Document#validateSync(pathsToValidate)</h3>\n<p>Executes registered validation rules (skipping asynchronous validators) for this document.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>pathsToValidate</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array\">Array</a>, <a href=\"#string\">string</a>&gt; </span><span>only validate the given paths</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#error_MongooseError\">MongooseError</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/undefined\">undefined</a>&gt; </span><span>MongooseError if there are errors during validation, or undefined if there is no error.</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Note:</h4> <p>This method is useful if you need synchronous validation.</p> <h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> err = doc.validateSync();\n<span class=\"keyword\">if</span> ( err ){\n  handleError( err );\n} <span class=\"keyword\">else</span> {\n  <span class=\"comment\">// validation passed</span>\n}</pre>\n</div>\n<h3 id=\"document_Document-errors\">Document#<span>errors</span>\n</h3>\n<p>Hash containing current validation errors.</p>\n<h3 id=\"document_Document-id\">Document#<span>id</span>\n</h3>\n<p>The string version of this documents _id.</p> <h4>Note:</h4> <p>This getter exists on all documents by default. The getter can be disabled by setting the <code>id</code> <a href=\"guide#id\">option</a> of its <code>Schema</code> to false at construction time.</p> <pre data-language=\"javascript\"><span class=\"keyword\">new</span> Schema({ name: String }, { id: <span class=\"literal\">false</span> });</pre>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"guide#options\" title=\"Schema options\">Schema options</a></li></ul>\n</div>\n<h3 id=\"document_Document-isNew\">Document#<span>isNew</span>\n</h3>\n<p>Boolean flag specifying if the document is new.</p>\n<h3 id=\"document_Document-schema\">Document#<span>schema</span>\n</h3>\n<p>The documents schema.</p>\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/types/subdocument.js\" id=\"types-subdocument-js\">types/subdocument.js</a></h2>\n<h3 id=\"types_subdocument_Subdocument-ownerDocument\">Subdocument#ownerDocument()</h3>\n<p>Returns the top level document of this sub-document.</p>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#document_Document\">Document</a>&gt; </span>\n</li></ul>\n</div>\n\n<h3 id=\"types_subdocument_Subdocument-remove\">Subdocument#remove([options], [callback])</h3>\n<p>Null-out this subdoc</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[options]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span><span>optional callback for compatibility with Document.prototype.remove</span>\n</li>\n</ul>\n</div>\n\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/types/array.js\" id=\"types-array-js\">types/array.js</a></h2>\n<h3 id=\"types_array_MongooseArray-$shift\">MongooseArray#$shift()</h3>\n<p>Atomically shifts the array at most one time per document <code>save()</code>.</p>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop\" title=\"mongodb\">mongodb</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>NOTE:</h4> <p><em>Calling this mulitple times on an array before saving sends the same command as calling it once.</em><br><em>This update is implemented using the MongoDB <a href=\"http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop\">$pop</a> method which enforces this restriction.</em></p> <pre data-language=\"javascript\">doc.array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];\n\n <span class=\"keyword\">var</span> shifted = doc.array.$shift();\n console.log(shifted); <span class=\"comment\">// 1</span>\n console.log(doc.array); <span class=\"comment\">// [2,3]</span>\n\n <span class=\"comment\">// no affect</span>\n shifted = doc.array.$shift();\n console.log(doc.array); <span class=\"comment\">// [2,3]</span>\n\n doc.save(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n   <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err);\n\n   <span class=\"comment\">// we saved, now $shift works again</span>\n   shifted = doc.array.$shift();\n   console.log(shifted ); <span class=\"comment\">// 2</span>\n   console.log(doc.array); <span class=\"comment\">// [3]</span>\n })</pre>\n</div>\n<h3 id=\"types_array_MongooseArray-remove\">MongooseArray#remove()</h3>\n<p>Alias of <a href=\"#types_array_MongooseArray-pull\">pull</a></p>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"#types_array_MongooseArray-pull\" title=\"MongooseArray#pull\">MongooseArray#pull</a></li>\n<li><a href=\"http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pull\" title=\"mongodb\">mongodb</a></li>\n</ul>\n</div>\n\n<h3 id=\"types_array_MongooseArray.$pop\">MongooseArray.$pop()</h3>\n<p>Pops the array atomically at most one time per document <code>save()</code>.</p>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop\" title=\"mongodb\">mongodb</a></li></ul>\n</div>\n<h4>NOTE:</h4> <p><em>Calling this mulitple times on an array before saving sends the same command as calling it once.</em><br><em>This update is implemented using the MongoDB <a href=\"http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pop\">$pop</a> method which enforces this restriction.</em></p> <pre data-language=\"javascript\">doc.array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];\n\n <span class=\"keyword\">var</span> popped = doc.array.$pop();\n console.log(popped); <span class=\"comment\">// 3</span>\n console.log(doc.array); <span class=\"comment\">// [1,2]</span>\n\n <span class=\"comment\">// no affect</span>\n popped = doc.array.$pop();\n console.log(doc.array); <span class=\"comment\">// [1,2]</span>\n\n doc.save(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n   <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err);\n\n   <span class=\"comment\">// we saved, now $pop works again</span>\n   popped = doc.array.$pop();\n   console.log(popped); <span class=\"comment\">// 2</span>\n   console.log(doc.array); <span class=\"comment\">// [1]</span>\n })</pre>\n<h3 id=\"types_array_MongooseArray.addToSet\">MongooseArray.addToSet([args...])</h3>\n<p>Adds values to the array if not already present.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>[args...]</code><span class=\"types\"> &lt;T&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array\">Array</a>&gt; </span><span>the values that were added</span>\n</li></ul>\n</div>\n<h4>Example:</h4> <pre data-language=\"javascript\">console.log(doc.array) <span class=\"comment\">// [2,3,4]</span>\n<span class=\"keyword\">var</span> added = doc.array.addToSet(<span class=\"number\">4</span>,<span class=\"number\">5</span>);\nconsole.log(doc.array) <span class=\"comment\">// [2,3,4,5]</span>\nconsole.log(added)     <span class=\"comment\">// [5]</span></pre>\n<h3 id=\"types_array_MongooseArray.indexOf\">MongooseArray.indexOf(obj)</h3>\n<p>Return the index of <code>obj</code> or <code>-1</code> if not found.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>obj</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>the item to look for</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span>\n</li></ul>\n</div>\n<h3 id=\"types_array_MongooseArray.inspect\">MongooseArray.inspect()</h3>\n<p>Helper for console.log</p>\n<h3 id=\"types_array_MongooseArray.nonAtomicPush\">MongooseArray.nonAtomicPush([args...])</h3>\n<p>Pushes items to the array non-atomically.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>[args...]</code><span class=\"types\"> &lt;T&gt; </span>\n</li></ul>\n</div>\n<h4>NOTE:</h4> <p><em>marks the entire array as modified, which if saved, will store it as a <code>$set</code> operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it.</em></p>\n<h3 id=\"types_array_MongooseArray.pop\">MongooseArray.pop()</h3>\n<p>Wraps <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/pop\"><code>Array#pop</code></a> with proper change tracking.</p>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"#types_array_MongooseArray-%24pop\" title=\"MongooseArray#$pop\">MongooseArray#$pop</a></li></ul>\n</div>\n<h4>Note:</h4> <p><em>marks the entire array as modified which will pass the entire thing to $set potentially overwritting any changes that happen between when you retrieved the object and when you save it.</em></p>\n<h3 id=\"types_array_MongooseArray.pull\">MongooseArray.pull([args...])</h3>\n<p>Pulls items from the array atomically. Equality is determined by casting<br>the provided value to an embedded document and comparing using<br><a href=\"api#document_Document-equals\">the <code>Document.equals()</code> function.</a></p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>[args...]</code><span class=\"types\"> &lt;T&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://www.mongodb.org/display/DOCS/Updating/#Updating-%24pull\" title=\"mongodb\">mongodb</a></li></ul>\n</div>\n<h4>Examples:</h4> <pre data-language=\"javascript\">doc.array.pull(ObjectId)\ndoc.array.pull({ _id: <span class=\"string\">'someId'</span> })\ndoc.array.pull(<span class=\"number\">36</span>)\ndoc.array.pull(<span class=\"string\">'tag 1'</span>, <span class=\"string\">'tag 2'</span>)</pre> <p>To remove a document from a subdocument array we may pass an object with a matching <code>_id</code>.</p> <pre data-language=\"javascript\">doc.subdocs.push({ _id: <span class=\"number\">4815162342</span> })\ndoc.subdocs.pull({ _id: <span class=\"number\">4815162342</span> }) <span class=\"comment\">// removed</span></pre> <p>Or we may passing the _id directly and let mongoose take care of it.</p> <pre data-language=\"javascript\">doc.subdocs.push({ _id: <span class=\"number\">4815162342</span> })\ndoc.subdocs.pull(<span class=\"number\">4815162342</span>); <span class=\"comment\">// works</span></pre> <p>The first pull call will result in a atomic operation on the database, if pull is called repeatedly without saving the document, a $set operation is used on the complete array instead, overwriting possible changes that happened on the database in the meantime.</p>\n<h3 id=\"types_array_MongooseArray.push\">MongooseArray.push([args...])</h3>\n<p>Wraps <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/push\"><code>Array#push</code></a> with proper change tracking.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>[args...]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li></ul>\n</div>\n<h3 id=\"types_array_MongooseArray.set\">MongooseArray.set()</h3>\n<p>Sets the casted <code>val</code> at index <code>i</code> and marks the array modified.</p>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array\">Array</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"comment\">// given documents based on the following</span>\n<span class=\"keyword\">var</span> Doc = mongoose.model(<span class=\"string\">'Doc'</span>, <span class=\"keyword\">new</span> Schema({ array: [Number] }));\n\n<span class=\"keyword\">var</span> doc = <span class=\"keyword\">new</span> Doc({ array: [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>] })\n\nconsole.log(doc.array) <span class=\"comment\">// [2,3,4]</span>\n\ndoc.array.set(<span class=\"number\">1</span>,<span class=\"string\">\"5\"</span>);\nconsole.log(doc.array); <span class=\"comment\">// [2,5,4] // properly cast to number</span>\ndoc.save() <span class=\"comment\">// the change is saved</span>\n\n<span class=\"comment\">// VS not using array#set</span>\ndoc.array[<span class=\"number\">1</span>] = <span class=\"string\">\"5\"</span>;\nconsole.log(doc.array); <span class=\"comment\">// [2,\"5\",4] // no casting</span>\ndoc.save() <span class=\"comment\">// change is not saved</span></pre>\n<h3 id=\"types_array_MongooseArray.shift\">MongooseArray.shift()</h3>\n<p>Wraps <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift\"><code>Array#shift</code></a> with proper change tracking.</p>\n<h4>Example:</h4> <pre data-language=\"javascript\">doc.array = [<span class=\"number\">2</span>,<span class=\"number\">3</span>];\n<span class=\"keyword\">var</span> res = doc.array.shift();\nconsole.log(res) <span class=\"comment\">// 2</span>\nconsole.log(doc.array) <span class=\"comment\">// [3]</span></pre> <h4>Note:</h4> <p><em>marks the entire array as modified, which if saved, will store it as a <code>$set</code> operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it.</em></p>\n<h3 id=\"types_array_MongooseArray.sort\">MongooseArray.sort()</h3>\n<p>Wraps <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort\"><code>Array#sort</code></a> with proper change tracking.</p>\n<h4>NOTE:</h4> <p><em>marks the entire array as modified, which if saved, will store it as a <code>$set</code> operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it.</em></p>\n<h3 id=\"types_array_MongooseArray.splice\">MongooseArray.splice()</h3>\n<p>Wraps <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice\"><code>Array#splice</code></a> with proper change tracking and casting.</p>\n<h4>Note:</h4> <p><em>marks the entire array as modified, which if saved, will store it as a <code>$set</code> operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it.</em></p>\n<h3 id=\"types_array_MongooseArray.toObject\">MongooseArray.toObject(options)</h3>\n<p>Returns a native js Array.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>options</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array\">Array</a>&gt; </span>\n</li></ul>\n</div>\n<h3 id=\"types_array_MongooseArray.unshift\">MongooseArray.unshift()</h3>\n<p>Wraps <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/unshift\"><code>Array#unshift</code></a> with proper change tracking.</p>\n<h4>Note:</h4> <p><em>marks the entire array as modified, which if saved, will store it as a <code>$set</code> operation, potentially overwritting any changes that happen between when you retrieved the object and when you save it.</em></p>\n<a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/types/documentarray.js\" id=\"types-documentarray-js\">types/documentarray.js</a><h3 id=\"types_documentarray_MongooseDocumentArray.create\">MongooseDocumentArray.create(obj)</h3>\n<p>Creates a subdocument casted to this schema.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>obj</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>the value to cast to this arrays SubDocument schema</span>\n</li></ul>\n</div>\n<p>This is the same subdocument constructor used for casting.</p>\n<h3 id=\"types_documentarray_MongooseDocumentArray.id\">MongooseDocumentArray.id(id)</h3>\n<p>Searches array items for the first document with a matching _id.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>id</code><span class=\"types\"> &lt;<a href=\"#types_objectid_ObjectId\">ObjectId</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>, <a href=\"http://nodejs.org/api/buffer.html\">Buffer</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#types_embedded_EmbeddedDocument\">EmbeddedDocument</a>, <a href=\"#null\">null</a>&gt; </span><span>the subdocument or null if not found.</span>\n</li></ul>\n</div>\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> embeddedDoc = m.array.id(some_id);</pre>\n<h3 id=\"types_documentarray_MongooseDocumentArray.inspect\">MongooseDocumentArray.inspect()</h3>\n<p>Helper for console.log</p>\n<h3 id=\"types_documentarray_MongooseDocumentArray.toObject\">MongooseDocumentArray.toObject([options])</h3>\n<p>Returns a native js Array of plain js objects</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>[options]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>optional options to pass to each documents &lt;code&gt;toObject&lt;/code&gt; method call during conversion</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array\">Array</a>&gt; </span>\n</li></ul>\n</div>\n<h4>NOTE:</h4> <p><em>Each sub-document is converted to a plain object by calling its <code>#toObject</code> method.</em></p>\n<a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/types/buffer.js\" id=\"types-buffer-js\">types/buffer.js</a><h3 id=\"types_buffer_MongooseBuffer.copy\">MongooseBuffer.copy(target)</h3>\n<p>Copies the buffer.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>target</code><span class=\"types\"> &lt;<a href=\"http://nodejs.org/api/buffer.html\">Buffer</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span><span>The number of bytes copied.</span>\n</li></ul>\n</div>\n<h4>Note:</h4> <p><code>Buffer#copy</code> does not mark <code>target</code> as modified so you must copy from a <code>MongooseBuffer</code> for it to work as expected. This is a work around since <code>copy</code> modifies the target, not this.</p>\n<h3 id=\"types_buffer_MongooseBuffer.equals\">MongooseBuffer.equals(other)</h3>\n<p>Determines if this buffer is equals to <code>other</code> buffer</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>other</code><span class=\"types\"> &lt;<a href=\"http://nodejs.org/api/buffer.html\">Buffer</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span>\n</li></ul>\n</div>\n<h3 id=\"types_buffer_MongooseBuffer.subtype\">MongooseBuffer.subtype(subtype)</h3>\n<p>Sets the subtype option and marks the buffer modified.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>subtype</code><span class=\"types\"> &lt;<a href=\"#Hex\">Hex</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://bsonspec.org/#/specification\">http://bsonspec.org/#/specification</a></li></ul>\n</div>\n<h4>SubTypes:</h4> <p>var bson = require('bson')<br> bson.BSON_BINARY_SUBTYPE_DEFAULT<br> bson.BSON_BINARY_SUBTYPE_FUNCTION<br> bson.BSON_BINARY_SUBTYPE_BYTE_ARRAY<br> bson.BSON_BINARY_SUBTYPE_UUID<br> bson.BSON_BINARY_SUBTYPE_MD5<br> bson.BSON_BINARY_SUBTYPE_USER_DEFINED</p> <p>doc.buffer.subtype(bson.BSON_BINARY_SUBTYPE_UUID);</p>\n<h3 id=\"types_buffer_MongooseBuffer.toObject\">MongooseBuffer.toObject([subtype])</h3>\n<p>Converts this buffer to its Binary type representation.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>[subtype]</code><span class=\"types\"> &lt;<a href=\"#Hex\">Hex</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://github.com/mongodb/js-bson/blob/master/lib/bson/binary.js\">Binary</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://bsonspec.org/#/specification\">http://bsonspec.org/#/specification</a></li></ul>\n</div>\n<h4>SubTypes:</h4> <p>var bson = require('bson')<br> bson.BSON_BINARY_SUBTYPE_DEFAULT<br> bson.BSON_BINARY_SUBTYPE_FUNCTION<br> bson.BSON_BINARY_SUBTYPE_BYTE_ARRAY<br> bson.BSON_BINARY_SUBTYPE_UUID<br> bson.BSON_BINARY_SUBTYPE_MD5<br> bson.BSON_BINARY_SUBTYPE_USER_DEFINED</p> <p>doc.buffer.toObject(bson.BSON_BINARY_SUBTYPE_USER_DEFINED);</p>\n<h3 id=\"types_buffer_MongooseBuffer.write\">MongooseBuffer.write()</h3>\n<p>Writes the buffer.</p>\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/types/objectid.js\" id=\"types-objectid-js\">types/objectid.js</a></h2>\n<h3 id=\"types_objectid_ObjectId\">ObjectId()</h3>\n<p>ObjectId type constructor</p>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> id = <span class=\"keyword\">new</span> mongoose.Types.ObjectId;</pre>\n</div>\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/types/embedded.js\" id=\"types-embedded-js\">types/embedded.js</a></h2>\n<h3 id=\"types_embedded_EmbeddedDocument-inspect\">EmbeddedDocument#inspect()</h3>\n<p>Helper for console.log</p>\n\n<h3 id=\"types_embedded_EmbeddedDocument-invalidate\">EmbeddedDocument#invalidate(path, err)</h3>\n<p>Marks a path as invalid, causing validation to fail.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>path</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>the field to invalidate</span>\n</li>\n<li>\n<code>err</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error\">Error</a>&gt; </span><span>error which states the reason <code>path</code> was invalid</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span>\n</li></ul>\n</div>\n\n<h3 id=\"types_embedded_EmbeddedDocument-ownerDocument\">EmbeddedDocument#ownerDocument()</h3>\n<p>Returns the top level document of this sub-document.</p>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#document_Document\">Document</a>&gt; </span>\n</li></ul>\n</div>\n\n<h3 id=\"types_embedded_EmbeddedDocument-parent\">EmbeddedDocument#parent()</h3>\n<p>Returns this sub-documents parent document.</p>\n\n<h3 id=\"types_embedded_EmbeddedDocument-parentArray\">EmbeddedDocument#parentArray()</h3>\n<p>Returns this sub-documents parent array.</p>\n\n<h3 id=\"types_embedded_EmbeddedDocument-remove\">EmbeddedDocument#remove([options], [fn])</h3>\n<p>Removes the subdocument from its parent array.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[options]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>[fn]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n\n<h3 id=\"types_embedded_EmbeddedDocument.markModified\">EmbeddedDocument.markModified(path)</h3>\n<p>Marks the embedded doc modified.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>path</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>the path which changed</span>\n</li></ul>\n</div>\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> doc = blogpost.comments.id(hexstring);\ndoc.mixed.type = <span class=\"string\">'changed'</span>;\ndoc.markModified(<span class=\"string\">'mixed.type'</span>);</pre>\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/query.js\" id=\"query-js\">query.js</a></h2>\n<h3 id=\"query_Query-$where\">Query#$where(js)</h3>\n<p>Specifies a javascript function or expression to pass to MongoDBs query system.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>js</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span><span>javascript string or function</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/operator/where/\" title=\"$where\">$where</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\">query.$where(<span class=\"string\">'this.comments.length === 10 || this.name.length === 5'</span>)\n\n<span class=\"comment\">// or</span>\n\nquery.$where(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.comments.length === <span class=\"number\">10</span> || <span class=\"keyword\">this</span>.name.length === <span class=\"number\">5</span>;\n})</pre> <h4>NOTE:</h4> <p>Only use <code>$where</code> when you have a condition that cannot be met using other MongoDB operators like <code>$lt</code>.<br><strong>Be sure to read about all of <a href=\"http://docs.mongodb.org/manual/reference/operator/where/\">its caveats</a> before using.</strong></p>\n</div>\n<h3 id=\"query_Query-all\">Query#all([path], val)</h3>\n<p>Specifies an $all query condition.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[path]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>val</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/operator/all/\" title=\"$all\">$all</a></li></ul>\n</div>\n<div class=\"description\"><p>When called with one argument, the most recent path passed to <code>where()</code> is used.</p></div>\n<h3 id=\"query_Query-and\">Query#and(array)</h3>\n<p>Specifies arguments for a <code>$and</code> condition.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>array</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array\">Array</a>&gt; </span><span>array of conditions</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/operator/and/\" title=\"$and\">$and</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\">query.and([{ color: <span class=\"string\">'green'</span> }, { status: <span class=\"string\">'ok'</span> }])</pre>\n</div>\n<h3 id=\"query_Query-batchSize\">Query#batchSize(val)</h3>\n<p>Specifies the batchSize option.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>val</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/method/cursor.batchSize/\" title=\"batchSize\">batchSize</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\">query.batchSize(<span class=\"number\">100</span>)</pre> <h4>Note</h4> <p>Cannot be used with <code>distinct()</code></p>\n</div>\n<h3 id=\"query_Query-box\">Query#box(val, Upper)</h3>\n<p>Specifies a $box condition</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>val</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>Upper</code><span class=\"types\"> &lt;<a href=\"#%5BArray%5D\">[Array]</a>&gt; </span><span>Right Coords</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"http://docs.mongodb.org/manual/reference/operator/box/\" title=\"$box\">$box</a></li>\n<li><a href=\"#query_Query-within\" title=\"within() Query#within\">within() Query#within</a></li>\n<li><a href=\"http://www.mongodb.org/display/DOCS/Geospatial+Indexing\">http://www.mongodb.org/display/DOCS/Geospatial+Indexing</a></li>\n</ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> lowerLeft = [<span class=\"number\">40.73083</span>, -<span class=\"number\">73.99756</span>]\n<span class=\"keyword\">var</span> upperRight= [<span class=\"number\">40.741404</span>,  -<span class=\"number\">73.988135</span>]\n\nquery.where(<span class=\"string\">'loc'</span>).within().box(lowerLeft, upperRight)\nquery.box({ ll : lowerLeft, ur : upperRight })</pre>\n</div>\n<h3 id=\"query_Query-cast\">Query#cast(model, [obj])</h3>\n<p>Casts this query to the schema of <code>model</code></p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>model</code><span class=\"types\"> &lt;<a href=\"#model_Model\">Model</a>&gt; </span>\n</li>\n<li>\n<code>[obj]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Note</h4> <p>If <code>obj</code> is present, it is cast instead of this query.</p>\n</div>\n<h3 id=\"query_Query-catch\">Query#catch([reject])</h3>\n<p>Executes the query returning a <code>Promise</code> which will be<br>resolved with either the doc(s) or rejected with the error.<br>Like <code>.then()</code>, but only takes a rejection handler.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>[reject]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#promise_Promise\">Promise</a>&gt; </span>\n</li></ul>\n</div>\n\n<h3 id=\"query_Query-center\">Query#center()</h3>\n<p><em>DEPRECATED</em> Alias for <a href=\"#query_Query-circle\">circle</a></p>\n<div class=\"description\"><p><strong>Deprecated.</strong> Use <a href=\"#query_Query-circle\">circle</a> instead.</p></div>\n<h3 id=\"query_Query-centerSphere\">Query#centerSphere([path], val)</h3>\n<p><em>DEPRECATED</em> Specifies a $centerSphere condition</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[path]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>val</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"http://www.mongodb.org/display/DOCS/Geospatial+Indexing\">http://www.mongodb.org/display/DOCS/Geospatial+Indexing</a></li>\n<li><a href=\"http://docs.mongodb.org/manual/reference/operator/centerSphere/\" title=\"$centerSphere\">$centerSphere</a></li>\n</ul>\n</div>\n<div class=\"description\">\n<p><strong>Deprecated.</strong> Use <a href=\"#query_Query-circle\">circle</a> instead.</p> <h4>Example</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> area = { center: [<span class=\"number\">50</span>, <span class=\"number\">50</span>], radius: <span class=\"number\">10</span> };\nquery.where(<span class=\"string\">'loc'</span>).within().centerSphere(area);</pre>\n</div>\n<h3 id=\"query_Query-circle\">Query#circle([path], area)</h3>\n<p>Specifies a $center or $centerSphere condition.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[path]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>area</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"http://docs.mongodb.org/manual/reference/operator/center/\" title=\"$center\">$center</a></li>\n<li><a href=\"http://docs.mongodb.org/manual/reference/operator/centerSphere/\" title=\"$centerSphere\">$centerSphere</a></li>\n<li><a href=\"http://docs.mongodb.org/manual/reference/operator/geoWithin/\" title=\"$geoWithin\">$geoWithin</a></li>\n<li><a href=\"http://www.mongodb.org/display/DOCS/Geospatial+Indexing\">http://www.mongodb.org/display/DOCS/Geospatial+Indexing</a></li>\n</ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> area = { center: [<span class=\"number\">50</span>, <span class=\"number\">50</span>], radius: <span class=\"number\">10</span>, unique: <span class=\"literal\">true</span> }\nquery.where(<span class=\"string\">'loc'</span>).within().circle(area)\n<span class=\"comment\">// alternatively</span>\nquery.circle(<span class=\"string\">'loc'</span>, area);\n\n<span class=\"comment\">// spherical calculations</span>\n<span class=\"keyword\">var</span> area = { center: [<span class=\"number\">50</span>, <span class=\"number\">50</span>], radius: <span class=\"number\">10</span>, unique: <span class=\"literal\">true</span>, spherical: <span class=\"literal\">true</span> }\nquery.where(<span class=\"string\">'loc'</span>).within().circle(area)\n<span class=\"comment\">// alternatively</span>\nquery.circle(<span class=\"string\">'loc'</span>, area);</pre> <p>New in 3.7.0</p>\n</div>\n<h3 id=\"query_Query-comment\">Query#comment(val)</h3>\n<p>Specifies the <code>comment</code> option.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>val</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/operator/comment/\" title=\"comment\">comment</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\">query.comment(<span class=\"string\">'login query'</span>)</pre> <h4>Note</h4> <p>Cannot be used with <code>distinct()</code></p>\n</div>\n<h3 id=\"query_Query-count\">Query#count([criteria], [callback])</h3>\n<p>Specifying this query as a <code>count</code> query.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[criteria]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>mongodb selector</span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/method/db.collection.count/\" title=\"count\">count</a></li></ul>\n</div>\n<div class=\"description\">\n<p>Passing a <code>callback</code> executes the query.</p> <h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> countQuery = model.where({ <span class=\"string\">'color'</span>: <span class=\"string\">'black'</span> }).count();\n\nquery.count({ color: <span class=\"string\">'black'</span> }).count(callback)\n\nquery.count({ color: <span class=\"string\">'black'</span> }, callback)\n\nquery.where(<span class=\"string\">'color'</span>, <span class=\"string\">'black'</span>).count(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, count)</span> {</span>\n  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err);\n  console.log(<span class=\"string\">'there are %d kittens'</span>, count);\n})</pre>\n</div>\n<h3 id=\"query_Query-cursor\">Query#cursor([options])</h3>\n<p>Returns a wrapper around a <a href=\"http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html\">mongodb driver cursor</a>.<br>A QueryCursor exposes a <a href=\"https://strongloop.com/strongblog/whats-new-io-js-beta-streams3/\">Streams3</a>-compatible<br>interface, as well as a <code>.next()</code> function.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>[options]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#QueryCursor\">QueryCursor</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"querycursor\" title=\"QueryCursor\">QueryCursor</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\"><span class=\"comment\">// There are 2 ways to use a cursor. First, as a stream:</span>\nThing.\n  find({ name: <span class=\"regexp\">/^hello/</span> }).\n  cursor().\n  on(<span class=\"string\">'data'</span>, <span class=\"keyword\">function</span>(doc) { console.log(doc); }).\n  on(<span class=\"string\">'end'</span>, <span class=\"keyword\">function</span>() { console.log(<span class=\"string\">'Done!'</span>); });\n\n<span class=\"comment\">// Or you can use `.next()` to manually get the next doc in the stream.</span>\n<span class=\"comment\">// `.next()` returns a promise, so you can use promises or callbacks.</span>\n<span class=\"keyword\">var</span> cursor = Thing.find({ name: <span class=\"regexp\">/^hello/</span> }).cursor();\ncursor.next(<span class=\"keyword\">function</span>(error, doc) {\n  console.log(doc);\n});\n\n<span class=\"comment\">// Because `.next()` returns a promise, you can use co</span>\n<span class=\"comment\">// to easily iterate through all documents without loading them</span>\n<span class=\"comment\">// all into memory.</span>\nco(<span class=\"keyword\">function</span>*() {\n  const cursor = Thing.find({ name: <span class=\"regexp\">/^hello/</span> }).cursor();\n  <span class=\"keyword\">for</span> (let doc = yield cursor.next(); doc != <span class=\"literal\">null</span>; doc = yield cursor.next()) {\n    console.log(doc);\n  }\n});</pre>\n</div>\n<h3 id=\"query_Query-distinct\">Query#distinct([field], [criteria], [callback])</h3>\n<p>Declares or executes a distict() operation.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[field]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>[criteria]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>, <a href=\"#query-js\">Query</a>&gt; </span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/method/db.collection.distinct/\" title=\"distinct\">distinct</a></li></ul>\n</div>\n<div class=\"description\">\n<p>Passing a <code>callback</code> executes the query.</p> <h4>Example</h4> <pre data-language=\"javascript\">distinct(field, conditions, callback)\ndistinct(field, conditions)\ndistinct(field, callback)\ndistinct(field)\ndistinct(callback)\ndistinct()</pre>\n</div>\n<h3 id=\"query_Query-elemMatch\">Query#elemMatch(path, criteria)</h3>\n<p>Specifies an <code>$elemMatch</code> condition</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>path</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n<li>\n<code>criteria</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/operator/elemMatch/\" title=\"$elemMatch\">$elemMatch</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\">query.elemMatch(<span class=\"string\">'comment'</span>, { author: <span class=\"string\">'autobot'</span>, votes: {$gte: <span class=\"number\">5</span>}})\n\nquery.where(<span class=\"string\">'comment'</span>).elemMatch({ author: <span class=\"string\">'autobot'</span>, votes: {$gte: <span class=\"number\">5</span>}})\n\nquery.elemMatch(<span class=\"string\">'comment'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(elem)</span> {</span>\n  elem.where(<span class=\"string\">'author'</span>).equals(<span class=\"string\">'autobot'</span>);\n  elem.where(<span class=\"string\">'votes'</span>).gte(<span class=\"number\">5</span>);\n})\n\nquery.where(<span class=\"string\">'comment'</span>).elemMatch(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(elem)</span> {</span>\n  elem.where({ author: <span class=\"string\">'autobot'</span> });\n  elem.where(<span class=\"string\">'votes'</span>).gte(<span class=\"number\">5</span>);\n})</pre>\n</div>\n<h3 id=\"query_Query-equals\">Query#equals(val)</h3>\n<p>Specifies the complementary comparison value for paths specified with <code>where()</code></p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>val</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\">User.where(<span class=\"string\">'age'</span>).equals(<span class=\"number\">49</span>);\n\n<span class=\"comment\">// is the same as</span>\n\nUser.where(<span class=\"string\">'age'</span>, <span class=\"number\">49</span>);</pre>\n</div>\n<h3 id=\"query_Query-exec\">Query#exec([operation], [callback])</h3>\n<p>Executes the query</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[operation]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#promise_Promise\">Promise</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Examples:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> promise = query.exec();\n<span class=\"keyword\">var</span> promise = query.exec(<span class=\"string\">'update'</span>);\n\nquery.exec(callback);\nquery.exec(<span class=\"string\">'find'</span>, callback);</pre>\n</div>\n<h3 id=\"query_Query-exists\">Query#exists([path], val)</h3>\n<p>Specifies an <code>$exists</code> condition</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[path]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>val</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/operator/exists/\" title=\"$exists\">$exists</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\"><span class=\"comment\">// { name: { $exists: true }}</span>\nThing.where(<span class=\"string\">'name'</span>).exists()\nThing.where(<span class=\"string\">'name'</span>).exists(<span class=\"literal\">true</span>)\nThing.find().exists(<span class=\"string\">'name'</span>)\n\n<span class=\"comment\">// { name: { $exists: false }}</span>\nThing.where(<span class=\"string\">'name'</span>).exists(<span class=\"literal\">false</span>);\nThing.find().exists(<span class=\"string\">'name'</span>, <span class=\"literal\">false</span>);</pre>\n</div>\n<h3 id=\"query_Query-find\">Query#find([criteria], [callback])</h3>\n<p>Finds documents.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[criteria]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>mongodb selector</span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<p>When no <code>callback</code> is passed, the query is not executed. When the query is executed, the result will be an array of documents.</p> <h4>Example</h4> <pre data-language=\"javascript\">query.find({ name: <span class=\"string\">'Los Pollos Hermanos'</span> }).find(callback)</pre>\n</div>\n<h3 id=\"query_Query-findOne\">Query#findOne([criteria], [projection], [callback])</h3>\n<p>Declares the query a findOne operation. When executed, the first found document is passed to the callback.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[criteria]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>, <a href=\"#query-js\">Query</a>&gt; </span><span>mongodb selector</span>\n</li>\n<li>\n<code>[projection]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>optional fields to return</span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"http://docs.mongodb.org/manual/reference/method/db.collection.findOne/\" title=\"findOne\">findOne</a></li>\n<li><a href=\"#query_Query-select\" title=\"Query.select\">Query.select</a></li>\n</ul>\n</div>\n<div class=\"description\">\n<p>Passing a <code>callback</code> executes the query. The result of the query is a single document.</p> <h4>Example</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> query  = Kitten.where({ color: <span class=\"string\">'white'</span> });\nquery.findOne(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, kitten)</span> {</span>\n  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err);\n  <span class=\"keyword\">if</span> (kitten) {\n    <span class=\"comment\">// doc may be null if no document matched</span>\n  }\n});</pre>\n</div>\n<h3 id=\"query_Query-findOneAndRemove\">Query#findOneAndRemove([conditions], [options], [callback])</h3>\n<p>Issues a mongodb <a href=\"http://www.mongodb.org/display/DOCS/findAndModify+Command\">findAndModify</a> remove command.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[conditions]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>[options]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://www.mongodb.org/display/DOCS/findAndModify+Command\" title=\"mongodb\">mongodb</a></li></ul>\n</div>\n<div class=\"description\">\n<p>Finds a matching document, removes it, passing the found document (if any) to the callback. Executes immediately if <code>callback</code> is passed.</p> <h4>Available options</h4> <ul> <li>\n<code>sort</code>: if multiple docs are found by the conditions, sets the sort order to choose which doc to update</li> <li>\n<code>maxTimeMS</code>: puts a time limit on the query - requires mongodb &gt;= 2.6.0</li> <li>\n<code>passRawResult</code>: if true, passes the <a href=\"http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify\">raw result from the MongoDB driver as the third callback parameter</a>\n</li> </ul> <h4>Callback Signature</h4> <pre data-language=\"javascript\">function(error, doc, result) {\n  // error: any errors that occurred\n  // doc: the document before updates are applied if `new: false`, or after updates if `new = true`\n  // result: [raw result from the MongoDB driver](<a href=\"http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify\">http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify</a>)\n}\n</pre> <h4>Examples</h4> <pre data-language=\"javascript\">A.where().findOneAndRemove(conditions, options, callback) <span class=\"comment\">// executes</span>\nA.where().findOneAndRemove(conditions, options)  <span class=\"comment\">// return Query</span>\nA.where().findOneAndRemove(conditions, callback) <span class=\"comment\">// executes</span>\nA.where().findOneAndRemove(conditions) <span class=\"comment\">// returns Query</span>\nA.where().findOneAndRemove(callback)   <span class=\"comment\">// executes</span>\nA.where().findOneAndRemove()           <span class=\"comment\">// returns Query</span></pre>\n</div>\n<h3 id=\"query_Query-findOneAndUpdate\">Query#findOneAndUpdate([query], [doc], [options], [callback])</h3>\n<p>Issues a mongodb <a href=\"http://www.mongodb.org/display/DOCS/findAndModify+Command\">findAndModify</a> update command.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[query]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>, <a href=\"#query-js\">Query</a>&gt; </span>\n</li>\n<li>\n<code>[doc]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>[options]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://www.mongodb.org/display/DOCS/findAndModify+Command\" title=\"mongodb\">mongodb</a></li></ul>\n</div>\n<div class=\"description\">\n<p>Finds a matching document, updates it according to the <code>update</code> arg, passing any <code>options</code>, and returns the found document (if any) to the callback. The query executes immediately if <code>callback</code> is passed.</p> <h4>Available options</h4> <ul> <li>\n<code>new</code>: bool - if true, return the modified document rather than the original. defaults to false (changed in 4.0)</li> <li>\n<code>upsert</code>: bool - creates the object if it doesn't exist. defaults to false.</li> <li>\n<code>fields</code>: {Object|String} - Field selection. Equivalent to <code>.select(fields).findOneAndUpdate()</code>\n</li> <li>\n<code>sort</code>: if multiple docs are found by the conditions, sets the sort order to choose which doc to update</li> <li>\n<code>maxTimeMS</code>: puts a time limit on the query - requires mongodb &gt;= 2.6.0</li> <li>\n<code>runValidators</code>: if true, runs <a href=\"validation#update-validators\">update validators</a> on this command. Update validators validate the update operation against the model's schema.</li> <li>\n<code>setDefaultsOnInsert</code>: if this and <code>upsert</code> are true, mongoose will apply the <a href=\"defaults\">defaults</a> specified in the model's schema if a new document is created. This option only works on MongoDB &gt;= 2.4 because it relies on <a href=\"https://docs.mongodb.org/v2.4/reference/operator/update/setOnInsert/\">MongoDB's <code>$setOnInsert</code> operator</a>.</li> <li>\n<code>passRawResult</code>: if true, passes the <a href=\"http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify\">raw result from the MongoDB driver as the third callback parameter</a>\n</li> <li>\n<code>context</code> (string) if set to 'query' and <code>runValidators</code> is on, <code>this</code> will refer to the query in custom validator functions that update validation runs. Does nothing if <code>runValidators</code> is false.</li> </ul> <h4>Callback Signature</h4> <pre data-language=\"javascript\"><span class=\"keyword\">function</span>(error, doc) {\n  <span class=\"comment\">// error: any errors that occurred</span>\n  <span class=\"comment\">// doc: the document before updates are applied if `new: false`, or after updates if `new = true`</span>\n}</pre> <h4>Examples</h4> <pre data-language=\"javascript\">query.findOneAndUpdate(conditions, update, options, callback) <span class=\"comment\">// executes</span>\nquery.findOneAndUpdate(conditions, update, options)  <span class=\"comment\">// returns Query</span>\nquery.findOneAndUpdate(conditions, update, callback) <span class=\"comment\">// executes</span>\nquery.findOneAndUpdate(conditions, update)           <span class=\"comment\">// returns Query</span>\nquery.findOneAndUpdate(update, callback)             <span class=\"comment\">// returns Query</span>\nquery.findOneAndUpdate(update)                       <span class=\"comment\">// returns Query</span>\nquery.findOneAndUpdate(callback)                     <span class=\"comment\">// executes</span>\nquery.findOneAndUpdate()                             <span class=\"comment\">// returns Query</span></pre>\n</div>\n<h3 id=\"query_Query-geometry\">Query#geometry(object)</h3>\n<p>Specifies a <code>$geometry</code> condition</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>object</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>Must contain a <code>type</code> property which is a String and a <code>coordinates</code> property which is an Array. See the examples.</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"http://docs.mongodb.org/manual/reference/operator/geometry/\" title=\"$geometry\">$geometry</a></li>\n<li><a href=\"http://docs.mongodb.org/manual/release-notes/2.4/#new-geospatial-indexes-with-geojson-and-improved-spherical-geometry\">http://docs.mongodb.org/manual/release-notes/2.4/#new-geospatial-indexes-with-geojson-and-improved-spherical-geometry</a></li>\n<li><a href=\"http://www.mongodb.org/display/DOCS/Geospatial+Indexing\">http://www.mongodb.org/display/DOCS/Geospatial+Indexing</a></li>\n</ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> polyA = [[[ <span class=\"number\">10</span>, <span class=\"number\">20</span> ], [ <span class=\"number\">10</span>, <span class=\"number\">40</span> ], [ <span class=\"number\">30</span>, <span class=\"number\">40</span> ], [ <span class=\"number\">30</span>, <span class=\"number\">20</span> ]]]\nquery.where(<span class=\"string\">'loc'</span>).within().geometry({ type: <span class=\"string\">'Polygon'</span>, coordinates: polyA })\n\n<span class=\"comment\">// or</span>\n<span class=\"keyword\">var</span> polyB = [[ <span class=\"number\">0</span>, <span class=\"number\">0</span> ], [ <span class=\"number\">1</span>, <span class=\"number\">1</span> ]]\nquery.where(<span class=\"string\">'loc'</span>).within().geometry({ type: <span class=\"string\">'LineString'</span>, coordinates: polyB })\n\n<span class=\"comment\">// or</span>\n<span class=\"keyword\">var</span> polyC = [ <span class=\"number\">0</span>, <span class=\"number\">0</span> ]\nquery.where(<span class=\"string\">'loc'</span>).within().geometry({ type: <span class=\"string\">'Point'</span>, coordinates: polyC })\n\n<span class=\"comment\">// or</span>\nquery.where(<span class=\"string\">'loc'</span>).intersects().geometry({ type: <span class=\"string\">'Point'</span>, coordinates: polyC })</pre> <p>The argument is assigned to the most recent path passed to <code>where()</code>.</p> <h4>NOTE:</h4> <p><code>geometry()</code> <strong>must</strong> come after either <code>intersects()</code> or <code>within()</code>.</p> <p>The <code>object</code> argument must contain <code>type</code> and <code>coordinates</code> properties.<br>- type {String}<br>- coordinates {Array}</p>\n</div>\n<h3 id=\"query_Query-getQuery\">Query#getQuery()</h3>\n<p>Returns the current query conditions as a JSON object.</p>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>current query conditions</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> query = <span class=\"keyword\">new</span> Query();\nquery.find({ a: <span class=\"number\">1</span> }).where(<span class=\"string\">'b'</span>).gt(<span class=\"number\">2</span>);\nquery.getQuery(); <span class=\"comment\">// { a: 1, b: { $gt: 2 } }</span></pre>\n</div>\n<h3 id=\"query_Query-getUpdate\">Query#getUpdate()</h3>\n<p>Returns the current update operations as a JSON object.</p>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>current update operations</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> query = <span class=\"keyword\">new</span> Query();\nquery.update({}, { $set: { a: <span class=\"number\">5</span> } });\nquery.getUpdate(); <span class=\"comment\">// { $set: { a: 5 } }</span></pre>\n</div>\n<h3 id=\"query_Query-gt\">Query#gt([path], val)</h3>\n<p>Specifies a $gt query condition.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[path]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>val</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/operator/gt/\" title=\"$gt\">$gt</a></li></ul>\n</div>\n<div class=\"description\">\n<p>When called with one argument, the most recent path passed to <code>where()</code> is used.</p> <h4>Example</h4> <pre data-language=\"javascript\">Thing.find().where(<span class=\"string\">'age'</span>).gt(<span class=\"number\">21</span>)\n\n<span class=\"comment\">// or</span>\nThing.find().gt(<span class=\"string\">'age'</span>, <span class=\"number\">21</span>)</pre>\n</div>\n<h3 id=\"query_Query-gte\">Query#gte([path], val)</h3>\n<p>Specifies a $gte query condition.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[path]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>val</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/operator/gte/\" title=\"$gte\">$gte</a></li></ul>\n</div>\n<div class=\"description\"><p>When called with one argument, the most recent path passed to <code>where()</code> is used.</p></div>\n<h3 id=\"query_Query-hint\">Query#hint(val)</h3>\n<p>Sets query hints.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>val</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>a hint object</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/operator/hint/\" title=\"$hint\">$hint</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\">query.hint({ indexA: <span class=\"number\">1</span>, indexB: -<span class=\"number\">1</span>})</pre> <h4>Note</h4> <p>Cannot be used with <code>distinct()</code></p>\n</div>\n<h3 id=\"query_Query-in\">Query#in([path], val)</h3>\n<p>Specifies an $in query condition.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[path]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>val</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/operator/in/\" title=\"$in\">$in</a></li></ul>\n</div>\n<div class=\"description\"><p>When called with one argument, the most recent path passed to <code>where()</code> is used.</p></div>\n<h3 id=\"query_Query-intersects\">Query#intersects([arg])</h3>\n<p>Declares an intersects query for <code>geometry()</code>.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>[arg]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"http://docs.mongodb.org/manual/reference/operator/geometry/\" title=\"$geometry\">$geometry</a></li>\n<li><a href=\"http://docs.mongodb.org/manual/reference/operator/geoIntersects/\" title=\"geoIntersects\">geoIntersects</a></li>\n</ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\">query.where(<span class=\"string\">'path'</span>).intersects().geometry({\n    type: <span class=\"string\">'LineString'</span>\n  , coordinates: [[<span class=\"number\">180.0</span>, <span class=\"number\">11.0</span>], [<span class=\"number\">180</span>, <span class=\"number\">9.0</span>]]\n})\n\nquery.where(<span class=\"string\">'path'</span>).intersects({\n    type: <span class=\"string\">'LineString'</span>\n  , coordinates: [[<span class=\"number\">180.0</span>, <span class=\"number\">11.0</span>], [<span class=\"number\">180</span>, <span class=\"number\">9.0</span>]]\n})</pre> <h4>NOTE:</h4> <p><strong>MUST</strong> be used after <code>where()</code>.</p> <h4>NOTE:</h4> <p>In Mongoose 3.7, <code>intersects</code> changed from a getter to a function. If you need the old syntax, use <a href=\"https://github.com/ebensing/mongoose-within\">this</a>.</p>\n</div>\n<h3 id=\"query_Query-lean\">Query#lean(bool)</h3>\n<p>Sets the lean option.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>bool</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span><span>defaults to true</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<p>Documents returned from queries with the <code>lean</code> option enabled are plain javascript objects, not <a href=\"#document-js\">MongooseDocuments</a>. They have no <code>save</code> method, getters/setters or other Mongoose magic applied.</p> <h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">new</span> Query().lean() <span class=\"comment\">// true</span>\n<span class=\"keyword\">new</span> Query().lean(<span class=\"literal\">true</span>)\n<span class=\"keyword\">new</span> Query().lean(<span class=\"literal\">false</span>)\n\nModel.find().lean().exec(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, docs)</span> {</span>\n  docs[<span class=\"number\">0</span>] <span class=\"keyword\">instanceof</span> mongoose.Document <span class=\"comment\">// false</span>\n});</pre> <p>This is a <a href=\"https://groups.google.com/forum/#!topic/mongoose-orm/u2_DzDydcnA/discussion\">great</a> option in high-performance read-only scenarios, especially when combined with <a href=\"#query_Query-stream\">stream</a>.</p>\n</div>\n<h3 id=\"query_Query-limit\">Query#limit(val)</h3>\n<p>Specifies the maximum number of documents the query will return.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>val</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\">query.limit(<span class=\"number\">20</span>)</pre> <h4>Note</h4> <p>Cannot be used with <code>distinct()</code></p>\n</div>\n<h3 id=\"query_Query-lt\">Query#lt([path], val)</h3>\n<p>Specifies a $lt query condition.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[path]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>val</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/operator/lt/\" title=\"$lt\">$lt</a></li></ul>\n</div>\n<div class=\"description\"><p>When called with one argument, the most recent path passed to <code>where()</code> is used.</p></div>\n<h3 id=\"query_Query-lte\">Query#lte([path], val)</h3>\n<p>Specifies a $lte query condition.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[path]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>val</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/operator/lte/\" title=\"$lte\">$lte</a></li></ul>\n</div>\n<div class=\"description\"><p>When called with one argument, the most recent path passed to <code>where()</code> is used.</p></div>\n<h3 id=\"query_Query-maxDistance\">Query#maxDistance([path], val)</h3>\n<p>Specifies a $maxDistance query condition.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[path]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>val</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/operator/maxDistance/\" title=\"$maxDistance\">$maxDistance</a></li></ul>\n</div>\n<div class=\"description\"><p>When called with one argument, the most recent path passed to <code>where()</code> is used.</p></div>\n<h3 id=\"query_Query-maxscan\">Query#maxscan()</h3>\n<p><em>DEPRECATED</em> Alias of <code>maxScan</code></p>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"#query_Query-maxScan\" title=\"maxScan\">maxScan</a></li></ul>\n</div>\n\n<h3 id=\"query_Query-maxScan\">Query#maxScan(val)</h3>\n<p>Specifies the maxScan option.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>val</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/operator/maxScan/\" title=\"maxScan\">maxScan</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\">query.maxScan(<span class=\"number\">100</span>)</pre> <h4>Note</h4> <p>Cannot be used with <code>distinct()</code></p>\n</div>\n<h3 id=\"query_Query-merge\">Query#merge(source)</h3>\n<p>Merges another Query or conditions object into this one.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>source</code><span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<p>When a Query is passed, conditions, field selection and options are merged.</p> <p>New in 3.7.0</p>\n</div>\n<h3 id=\"query_Query-mod\">Query#mod([path], val)</h3>\n<p>Specifies a <code>$mod</code> condition</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[path]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>val</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/operator/mod/\" title=\"$mod\">$mod</a></li></ul>\n</div>\n\n<h3 id=\"query_Query-ne\">Query#ne([path], val)</h3>\n<p>Specifies a $ne query condition.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[path]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>val</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/operator/ne/\" title=\"$ne\">$ne</a></li></ul>\n</div>\n<div class=\"description\"><p>When called with one argument, the most recent path passed to <code>where()</code> is used.</p></div>\n<h3 id=\"query_Query-near\">Query#near([path], val)</h3>\n<p>Specifies a <code>$near</code> or <code>$nearSphere</code> condition</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[path]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>val</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"http://docs.mongodb.org/manual/reference/operator/near/\" title=\"$near\">$near</a></li>\n<li><a href=\"http://docs.mongodb.org/manual/reference/operator/nearSphere/\" title=\"$nearSphere\">$nearSphere</a></li>\n<li><a href=\"http://docs.mongodb.org/manual/reference/operator/maxDistance/\" title=\"$maxDistance\">$maxDistance</a></li>\n<li><a href=\"http://www.mongodb.org/display/DOCS/Geospatial+Indexing\">http://www.mongodb.org/display/DOCS/Geospatial+Indexing</a></li>\n</ul>\n</div>\n<div class=\"description\">\n<p>These operators return documents sorted by distance.</p> <h4>Example</h4> <pre data-language=\"javascript\">query.where(<span class=\"string\">'loc'</span>).near({ center: [<span class=\"number\">10</span>, <span class=\"number\">10</span>] });\nquery.where(<span class=\"string\">'loc'</span>).near({ center: [<span class=\"number\">10</span>, <span class=\"number\">10</span>], maxDistance: <span class=\"number\">5</span> });\nquery.where(<span class=\"string\">'loc'</span>).near({ center: [<span class=\"number\">10</span>, <span class=\"number\">10</span>], maxDistance: <span class=\"number\">5</span>, spherical: <span class=\"literal\">true</span> });\nquery.near(<span class=\"string\">'loc'</span>, { center: [<span class=\"number\">10</span>, <span class=\"number\">10</span>], maxDistance: <span class=\"number\">5</span> });</pre>\n</div>\n<h3 id=\"query_Query-nearSphere\">Query#nearSphere()</h3>\n<p><em>DEPRECATED</em> Specifies a <code>$nearSphere</code> condition</p>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"#query_Query-near\" title=\"near()\">near()</a></li>\n<li><a href=\"http://docs.mongodb.org/manual/reference/operator/near/\" title=\"$near\">$near</a></li>\n<li><a href=\"http://docs.mongodb.org/manual/reference/operator/nearSphere/\" title=\"$nearSphere\">$nearSphere</a></li>\n<li><a href=\"http://docs.mongodb.org/manual/reference/operator/maxDistance/\" title=\"$maxDistance\">$maxDistance</a></li>\n</ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\">query.where(<span class=\"string\">'loc'</span>).nearSphere({ center: [<span class=\"number\">10</span>, <span class=\"number\">10</span>], maxDistance: <span class=\"number\">5</span> });</pre> <p><strong>Deprecated.</strong> Use <code>query.near()</code> instead with the <code>spherical</code> option set to <code>true</code>.</p> <h4>Example</h4> <pre data-language=\"javascript\">query.where(<span class=\"string\">'loc'</span>).near({ center: [<span class=\"number\">10</span>, <span class=\"number\">10</span>], spherical: <span class=\"literal\">true</span> });</pre>\n</div>\n<h3 id=\"query_Query-nin\">Query#nin([path], val)</h3>\n<p>Specifies an $nin query condition.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[path]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>val</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/operator/nin/\" title=\"$nin\">$nin</a></li></ul>\n</div>\n<div class=\"description\"><p>When called with one argument, the most recent path passed to <code>where()</code> is used.</p></div>\n<h3 id=\"query_Query-nor\">Query#nor(array)</h3>\n<p>Specifies arguments for a <code>$nor</code> condition.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>array</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array\">Array</a>&gt; </span><span>array of conditions</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/operator/nor/\" title=\"$nor\">$nor</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\">query.nor([{ color: <span class=\"string\">'green'</span> }, { status: <span class=\"string\">'ok'</span> }])</pre>\n</div>\n<h3 id=\"query_Query-or\">Query#or(array)</h3>\n<p>Specifies arguments for an <code>$or</code> condition.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>array</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array\">Array</a>&gt; </span><span>array of conditions</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/operator/or/\" title=\"$or\">$or</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\">query.or([{ color: <span class=\"string\">'red'</span> }, { status: <span class=\"string\">'emergency'</span> }])</pre>\n</div>\n<h3 id=\"query_Query-polygon\">Query#polygon([path], [coordinatePairs...])</h3>\n<p>Specifies a $polygon condition</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[path]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array\">Array</a>&gt; </span>\n</li>\n<li>\n<code>[coordinatePairs...]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array\">Array</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"http://docs.mongodb.org/manual/reference/operator/polygon/\" title=\"$polygon\">$polygon</a></li>\n<li><a href=\"http://www.mongodb.org/display/DOCS/Geospatial+Indexing\">http://www.mongodb.org/display/DOCS/Geospatial+Indexing</a></li>\n</ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\">query.where(<span class=\"string\">'loc'</span>).within().polygon([<span class=\"number\">10</span>,<span class=\"number\">20</span>], [<span class=\"number\">13</span>, <span class=\"number\">25</span>], [<span class=\"number\">7</span>,<span class=\"number\">15</span>])\nquery.polygon(<span class=\"string\">'loc'</span>, [<span class=\"number\">10</span>,<span class=\"number\">20</span>], [<span class=\"number\">13</span>, <span class=\"number\">25</span>], [<span class=\"number\">7</span>,<span class=\"number\">15</span>])</pre>\n</div>\n<h3 id=\"query_Query-populate\">Query#populate(path, [select], [model], [match], [options])</h3>\n<p>Specifies paths which should be populated with other documents.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>path</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>either the path to populate or an object specifying all parameters</span>\n</li>\n<li>\n<code>[select]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>Field selection for the population query</span>\n</li>\n<li>\n<code>[model]</code><span class=\"types\"> &lt;<a href=\"#model_Model\">Model</a>&gt; </span><span>The model you wish to use for population. If not specified, populate will look up the model by the name in the Schema's <code>ref</code> field.</span>\n</li>\n<li>\n<code>[match]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>Conditions for the population query</span>\n</li>\n<li>\n<code>[options]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>Options for the population query (sort, etc)</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"populate\" title=\"population\">population</a></li>\n<li><a href=\"#query_Query-select\" title=\"Query#select\">Query#select</a></li>\n<li><a href=\"#model_Model.populate\" title=\"Model.populate\">Model.populate</a></li>\n</ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\">Kitten.findOne().populate(<span class=\"string\">'owner'</span>).exec(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, kitten)</span> {</span>\n  console.log(kitten.owner.name) <span class=\"comment\">// Max</span>\n})\n\nKitten.find().populate({\n    path: <span class=\"string\">'owner'</span>\n  , select: <span class=\"string\">'name'</span>\n  , match: { color: <span class=\"string\">'black'</span> }\n  , options: { sort: { name: -<span class=\"number\">1</span> }}\n}).exec(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, kittens)</span> {</span>\n  console.log(kittens[<span class=\"number\">0</span>].owner.name) <span class=\"comment\">// Zoopa</span>\n})\n\n<span class=\"comment\">// alternatively</span>\nKitten.find().populate(<span class=\"string\">'owner'</span>, <span class=\"string\">'name'</span>, <span class=\"literal\">null</span>, {sort: { name: -<span class=\"number\">1</span> }}).exec(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, kittens)</span> {</span>\n  console.log(kittens[<span class=\"number\">0</span>].owner.name) <span class=\"comment\">// Zoopa</span>\n})</pre> <p>Paths are populated after the query executes and a response is received. A separate query is then executed for each path specified for population. After a response for each query has also been returned, the results are passed to the callback.</p>\n</div>\n<h3 id=\"query_Query-read\">Query#read(pref, [tags])</h3>\n<p>Determines the MongoDB nodes from which to read.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>pref</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>one of the listed preference options or aliases</span>\n</li>\n<li>\n<code>[tags]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array\">Array</a>&gt; </span><span>optional tags for this query</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"http://docs.mongodb.org/manual/applications/replication/#read-preference\" title=\"mongodb\">mongodb</a></li>\n<li><a href=\"http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences\" title=\"driver\">driver</a></li>\n</ul>\n</div>\n<div class=\"description\">\n<h4>Preferences:</h4> <pre data-language=\"javascript\">primary - (<span class=\"keyword\">default</span>) Read from primary only. Operations will produce an error <span class=\"keyword\">if</span> primary is unavailable. Cannot be combined <span class=\"keyword\">with</span> tags.\nsecondary            Read from secondary <span class=\"keyword\">if</span> available, otherwise error.\nprimaryPreferred     Read from primary <span class=\"keyword\">if</span> available, otherwise a secondary.\nsecondaryPreferred   Read from a secondary <span class=\"keyword\">if</span> available, otherwise read from the primary.\nnearest              All operations read from among the nearest candidates, but unlike other modes, <span class=\"keyword\">this</span> option will include both the primary and all secondaries <span class=\"keyword\">in</span> the random selection.</pre> <p>Aliases</p> <pre data-language=\"javascript\">p   primary\npp  primaryPreferred\ns   secondary\nsp  secondaryPreferred\nn   nearest</pre> <h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">new</span> Query().read(<span class=\"string\">'primary'</span>)\n<span class=\"keyword\">new</span> Query().read(<span class=\"string\">'p'</span>)  <span class=\"comment\">// same as primary</span>\n\n<span class=\"keyword\">new</span> Query().read(<span class=\"string\">'primaryPreferred'</span>)\n<span class=\"keyword\">new</span> Query().read(<span class=\"string\">'pp'</span>) <span class=\"comment\">// same as primaryPreferred</span>\n\n<span class=\"keyword\">new</span> Query().read(<span class=\"string\">'secondary'</span>)\n<span class=\"keyword\">new</span> Query().read(<span class=\"string\">'s'</span>)  <span class=\"comment\">// same as secondary</span>\n\n<span class=\"keyword\">new</span> Query().read(<span class=\"string\">'secondaryPreferred'</span>)\n<span class=\"keyword\">new</span> Query().read(<span class=\"string\">'sp'</span>) <span class=\"comment\">// same as secondaryPreferred</span>\n\n<span class=\"keyword\">new</span> Query().read(<span class=\"string\">'nearest'</span>)\n<span class=\"keyword\">new</span> Query().read(<span class=\"string\">'n'</span>)  <span class=\"comment\">// same as nearest</span>\n\n<span class=\"comment\">// read from secondaries with matching tags</span>\n<span class=\"keyword\">new</span> Query().read(<span class=\"string\">'s'</span>, [{ dc:<span class=\"string\">'sf'</span>, s: <span class=\"number\">1</span> },{ dc:<span class=\"string\">'ma'</span>, s: <span class=\"number\">2</span> }])</pre> <p>Read more about how to use read preferrences <a href=\"http://docs.mongodb.org/manual/applications/replication/#read-preference\">here</a> and <a href=\"http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences\">here</a>.</p>\n</div>\n<h3 id=\"query_Query-regex\">Query#regex([path], val)</h3>\n<p>Specifies a $regex query condition.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[path]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>val</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/operator/regex/\" title=\"$regex\">$regex</a></li></ul>\n</div>\n<div class=\"description\"><p>When called with one argument, the most recent path passed to <code>where()</code> is used.</p></div>\n<h3 id=\"query_Query-remove\">Query#remove([criteria], [callback])</h3>\n<p>Declare and/or execute this query as a remove() operation.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[criteria]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>, <a href=\"#query-js\">Query</a>&gt; </span><span>mongodb selector</span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/method/db.collection.remove/\" title=\"remove\">remove</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\">Model.remove({ artist: <span class=\"string\">'Anne Murray'</span> }, callback)</pre> <h4>Note</h4> <p>The operation is only executed when a callback is passed. To force execution without a callback, you must first call <code>remove()</code> and then execute it by using the <code>exec()</code> method.</p> <pre data-language=\"javascript\"><span class=\"comment\">// not executed</span>\n<span class=\"keyword\">var</span> query = Model.find().remove({ name: <span class=\"string\">'Anne Murray'</span> })\n\n<span class=\"comment\">// executed</span>\nquery.remove({ name: <span class=\"string\">'Anne Murray'</span> }, callback)\nquery.remove({ name: <span class=\"string\">'Anne Murray'</span> }).remove(callback)\n\n<span class=\"comment\">// executed without a callback</span>\nquery.exec()\n\n<span class=\"comment\">// summary</span>\nquery.remove(conds, fn); <span class=\"comment\">// executes</span>\nquery.remove(conds)\nquery.remove(fn) <span class=\"comment\">// executes</span>\nquery.remove()</pre>\n</div>\n<h3 id=\"query_Query-select\">Query#select(arg)</h3>\n<p>Specifies which document fields to include or exclude (also known as the query \"projection\")</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>arg</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"#schematype_SchemaType\" title=\"SchemaType\">SchemaType</a></li></ul>\n</div>\n<div class=\"description\">\n<p>When using string syntax, prefixing a path with <code>-</code> will flag that path as excluded. When a path does not have the <code>-</code> prefix, it is included. Lastly, if a path is prefixed with <code>+</code>, it forces inclusion of the path, which is useful for paths excluded at the <a href=\"api#schematype_SchemaType-select\">schema level</a>.</p> <h4>Example</h4> <pre data-language=\"javascript\"><span class=\"comment\">// include a and b, exclude other fields</span>\nquery.select(<span class=\"string\">'a b'</span>);\n\n<span class=\"comment\">// exclude c and d, include other fields</span>\nquery.select(<span class=\"string\">'-c -d'</span>);\n\n<span class=\"comment\">// or you may use object notation, useful when</span>\n<span class=\"comment\">// you have keys already prefixed with a \"-\"</span>\nquery.select({ a: <span class=\"number\">1</span>, b: <span class=\"number\">1</span> });\nquery.select({ c: <span class=\"number\">0</span>, d: <span class=\"number\">0</span> });\n\n<span class=\"comment\">// force inclusion of field excluded at schema level</span>\nquery.select(<span class=\"string\">'+path'</span>)</pre> <h4>NOTE:</h4> <p>Cannot be used with <code>distinct()</code>.</p> <p><em>v2 had slightly different syntax such as allowing arrays of field names. This support was removed in v3.</em></p>\n</div>\n<h3 id=\"query_Query-selected\">Query#selected()</h3>\n<p>Determines if field selection has been made.</p>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span>\n</li></ul>\n</div>\n\n<h3 id=\"query_Query-selectedExclusively\">Query#selectedExclusively()</h3>\n<p>Determines if exclusive field selection has been made.</p>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"description\"><pre data-language=\"javascript\">query.selectedExclusively() <span class=\"comment\">// false</span>\nquery.select(<span class=\"string\">'-name'</span>)\nquery.selectedExclusively() <span class=\"comment\">// true</span>\nquery.selectedInclusively() <span class=\"comment\">// false</span></pre></div>\n<h3 id=\"query_Query-selectedInclusively\">Query#selectedInclusively()</h3>\n<p>Determines if inclusive field selection has been made.</p>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"description\"><pre data-language=\"javascript\">query.selectedInclusively() <span class=\"comment\">// false</span>\nquery.select(<span class=\"string\">'name'</span>)\nquery.selectedInclusively() <span class=\"comment\">// true</span></pre></div>\n<h3 id=\"query_Query-setOptions\">Query#setOptions(options)</h3>\n<p>Sets query options.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>options</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Options:</h4> <ul> <li>\n<a href=\"http://www.mongodb.org/display/DOCS/Tailable+Cursors\">tailable</a> *</li> <li>\n<a href=\"http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsort()%7D%7D\">sort</a> *</li> <li>\n<a href=\"http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Blimit%28%29%7D%7D\">limit</a> *</li> <li>\n<a href=\"http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bskip%28%29%7D%7D\">skip</a> *</li> <li>\n<a href=\"https://docs.mongodb.org/v3.2/reference/operator/meta/maxScan/#metaOp._S_maxScan\">maxscan</a> *</li> <li>\n<a href=\"http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7BbatchSize%28%29%7D%7D\">batchSize</a> *</li> <li>\n<a href=\"http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24comment\">comment</a> *</li> <li>\n<a href=\"http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%7B%7Bsnapshot%28%29%7D%7D\">snapshot</a> *</li> <li>\n<a href=\"http://www.mongodb.org/display/DOCS/Advanced+Queries#AdvancedQueries-%24hint\">hint</a> *</li> <li>\n<a href=\"http://docs.mongodb.org/manual/applications/replication/#read-preference\">readPreference</a> **</li> <li>\n<a href=\"api#query_Query-lean\">lean</a> *</li> <li><a href=\"http://www.mongodb.org/display/DOCS/getLastError+Command\">safe</a></li> </ul> <p><em>* denotes a query helper method is also available</em><br><em>** query helper method to set <code>readPreference</code> is <code>read()</code></em></p>\n</div>\n<h3 id=\"query_Query-size\">Query#size([path], val)</h3>\n<p>Specifies a $size query condition.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[path]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>val</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/operator/size/\" title=\"$size\">$size</a></li></ul>\n</div>\n<div class=\"description\">\n<p>When called with one argument, the most recent path passed to <code>where()</code> is used.</p> <h4>Example</h4> <pre data-language=\"javascript\">MyModel.where(<span class=\"string\">'tags'</span>).size(<span class=\"number\">0</span>).exec(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, docs)</span> {</span>\n  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err);\n\n  assert(Array.isArray(docs));\n  console.log(<span class=\"string\">'documents with 0 tags'</span>, docs);\n})</pre>\n</div>\n<h3 id=\"query_Query-skip\">Query#skip(val)</h3>\n<p>Specifies the number of documents to skip.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>val</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/method/cursor.skip/\" title=\"cursor.skip\">cursor.skip</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\">query.skip(<span class=\"number\">100</span>).limit(<span class=\"number\">20</span>)</pre> <h4>Note</h4> <p>Cannot be used with <code>distinct()</code></p>\n</div>\n<h3 id=\"query_Query-slaveOk\">Query#slaveOk(v)</h3>\n<p><em>DEPRECATED</em> Sets the slaveOk option.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>v</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span><span>defaults to true</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"http://docs.mongodb.org/manual/applications/replication/#read-preference\" title=\"mongodb\">mongodb</a></li>\n<li><a href=\"http://docs.mongodb.org/manual/reference/method/rs.slaveOk/\" title=\"slaveOk\">slaveOk</a></li>\n<li><a href=\"#query_Query-read\" title=\"read()\">read()</a></li>\n</ul>\n</div>\n<div class=\"description\">\n<p><strong>Deprecated</strong> in MongoDB 2.2 in favor of <a href=\"#query_Query-read\">read preferences</a>.</p> <h4>Example:</h4> <pre data-language=\"javascript\">query.slaveOk() <span class=\"comment\">// true</span>\nquery.slaveOk(<span class=\"literal\">true</span>)\nquery.slaveOk(<span class=\"literal\">false</span>)</pre>\n</div>\n<h3 id=\"query_Query-slice\">Query#slice([path], val)</h3>\n<p>Specifies a $slice projection for an array.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[path]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>val</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span><span>number/range of elements to slice</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"http://www.mongodb.org/display/DOCS/Retrieving+a+Subset+of+Fields#RetrievingaSubsetofFields-RetrievingaSubrangeofArrayElements\" title=\"mongodb\">mongodb</a></li>\n<li><a href=\"http://docs.mongodb.org/manual/reference/projection/slice/#prj._S_slice\" title=\"$slice\">$slice</a></li>\n</ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\">query.slice(<span class=\"string\">'comments'</span>, <span class=\"number\">5</span>)\nquery.slice(<span class=\"string\">'comments'</span>, -<span class=\"number\">5</span>)\nquery.slice(<span class=\"string\">'comments'</span>, [<span class=\"number\">10</span>, <span class=\"number\">5</span>])\nquery.where(<span class=\"string\">'comments'</span>).slice(<span class=\"number\">5</span>)\nquery.where(<span class=\"string\">'comments'</span>).slice([-<span class=\"number\">10</span>, <span class=\"number\">5</span>])</pre>\n</div>\n<h3 id=\"query_Query-snapshot\">Query#snapshot()</h3>\n<p>Specifies this query as a <code>snapshot</code> query.</p>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/operator/snapshot/\" title=\"snapshot\">snapshot</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\">query.snapshot() <span class=\"comment\">// true</span>\nquery.snapshot(<span class=\"literal\">true</span>)\nquery.snapshot(<span class=\"literal\">false</span>)</pre> <h4>Note</h4> <p>Cannot be used with <code>distinct()</code></p>\n</div>\n<h3 id=\"query_Query-sort\">Query#sort(arg)</h3>\n<p>Sets the sort order</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>arg</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/method/cursor.sort/\" title=\"cursor.sort\">cursor.sort</a></li></ul>\n</div>\n<div class=\"description\">\n<p>If an object is passed, values allowed are <code>asc</code>, <code>desc</code>, <code>ascending</code>, <code>descending</code>, <code>1</code>, and <code>-1</code>.</p> <p>If a string is passed, it must be a space delimited list of path names. The<br>sort order of each path is ascending unless the path name is prefixed with <code>-</code><br>which will be treated as descending.</p> <h4>Example</h4> <pre data-language=\"javascript\"><span class=\"comment\">// sort by \"field\" ascending and \"test\" descending</span>\nquery.sort({ field: <span class=\"string\">'asc'</span>, test: -<span class=\"number\">1</span> });\n\n<span class=\"comment\">// equivalent</span>\nquery.sort(<span class=\"string\">'field -test'</span>);</pre> <h4>Note</h4> <p>Cannot be used with <code>distinct()</code></p>\n</div>\n<h3 id=\"query_Query-stream\">Query#stream([options])</h3>\n<p>Returns a Node.js 0.8 style <a href=\"http://nodejs.org/docs/v0.8.21/api/stream.html#stream_readable_stream\">read stream</a> interface.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>[options]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#querystream_QueryStream\">QueryStream</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"#querystream_QueryStream\" title=\"QueryStream\">QueryStream</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\"><span class=\"comment\">// follows the nodejs 0.8 stream api</span>\nThing.find({ name: <span class=\"regexp\">/^hello/</span> }).stream().pipe(res)\n\n<span class=\"comment\">// manual streaming</span>\n<span class=\"keyword\">var</span> stream = Thing.find({ name: <span class=\"regexp\">/^hello/</span> }).stream();\n\nstream.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(doc)</span> {</span>\n  <span class=\"comment\">// do something with the mongoose document</span>\n}).on(<span class=\"string\">'error'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n  <span class=\"comment\">// handle the error</span>\n}).on(<span class=\"string\">'close'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n  <span class=\"comment\">// the stream is closed</span>\n});</pre> <h4>Valid options</h4> <ul> <li>\n<code>transform</code>: optional function which accepts a mongoose document. The return value of the function will be emitted on <code>data</code>.</li> </ul> <h4>Example</h4> <pre data-language=\"javascript\"><span class=\"comment\">// JSON.stringify all documents before emitting</span>\n<span class=\"keyword\">var</span> stream = Thing.find().stream({ transform: JSON.stringify });\nstream.pipe(writeStream);</pre>\n</div>\n<h3 id=\"query_Query-tailable\">Query#tailable(bool, [opts], [opts.numberOfRetries], [opts.tailableRetryInterval])</h3>\n<p>Sets the tailable option (for use with capped collections).</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>bool</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span><span>defaults to true</span>\n</li>\n<li>\n<code>[opts]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>options to set</span>\n</li>\n<li>\n<code>[opts.numberOfRetries]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span><span>if cursor is exhausted, retry this many times before giving up</span>\n</li>\n<li>\n<code>[opts.tailableRetryInterval]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span><span>if cursor is exhausted, wait this many milliseconds before retrying</span>\n</li>\n</ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/tutorial/create-tailable-cursor/\" title=\"tailable\">tailable</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\">query.tailable() <span class=\"comment\">// true</span>\nquery.tailable(<span class=\"literal\">true</span>)\nquery.tailable(<span class=\"literal\">false</span>)</pre> <h4>Note</h4> <p>Cannot be used with <code>distinct()</code></p>\n</div>\n<h3 id=\"query_Query-then\">Query#then([resolve], [reject])</h3>\n<p>Executes the query returning a <code>Promise</code> which will be<br>resolved with either the doc(s) or rejected with the error.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[resolve]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n<li>\n<code>[reject]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#promise_Promise\">Promise</a>&gt; </span>\n</li></ul>\n</div>\n\n<h3 id=\"query_Query-toConstructor\">Query#toConstructor()</h3>\n<p>Converts this query to a customized, reusable query constructor with all arguments and options retained.</p>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>subclass-of-Query</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\"><span class=\"comment\">// Create a query for adventure movies and read from the primary</span>\n<span class=\"comment\">// node in the replica-set unless it is down, in which case we'll</span>\n<span class=\"comment\">// read from a secondary node.</span>\n<span class=\"keyword\">var</span> query = Movie.find({ tags: <span class=\"string\">'adventure'</span> }).read(<span class=\"string\">'primaryPreferred'</span>);\n\n<span class=\"comment\">// create a custom Query constructor based off these settings</span>\n<span class=\"keyword\">var</span> Adventure = query.toConstructor();\n\n<span class=\"comment\">// Adventure is now a subclass of mongoose.Query and works the same way but with the</span>\n<span class=\"comment\">// default query parameters and options set.</span>\nAdventure().exec(callback)\n\n<span class=\"comment\">// further narrow down our query results while still using the previous settings</span>\nAdventure().where({ name: <span class=\"regexp\">/^Life/</span> }).exec(callback);\n\n<span class=\"comment\">// since Adventure is a stand-alone constructor we can also add our own</span>\n<span class=\"comment\">// helper methods and getters without impacting global queries</span>\nAdventure.prototype.startsWith = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(prefix)</span> {</span>\n  <span class=\"keyword\">this</span>.where({ name: <span class=\"keyword\">new</span> RegExp(<span class=\"string\">'^'</span> + prefix) })\n  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;\n}\nObject.defineProperty(Adventure.prototype, <span class=\"string\">'highlyRated'</span>, {\n  get: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n    <span class=\"keyword\">this</span>.where({ rating: { $gt: <span class=\"number\">4.5</span> }});\n    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;\n  }\n})\nAdventure().highlyRated.startsWith(<span class=\"string\">'Life'</span>).exec(callback)</pre> <p>New in 3.7.3</p>\n</div>\n<h3 id=\"query_Query-update\">Query#update([criteria], [doc], [options], [callback])</h3>\n<p>Declare and/or execute this query as an update() operation.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[criteria]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>[doc]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>the update command</span>\n</li>\n<li>\n<code>[options]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"#model_Model.update\" title=\"Model.update\">Model.update</a></li>\n<li><a href=\"http://docs.mongodb.org/manual/reference/method/db.collection.update/\" title=\"update\">update</a></li>\n</ul>\n</div>\n<div class=\"description\">\n<p><em>All paths passed that are not $atomic operations will become $set ops.</em></p> <h4>Example</h4> <pre data-language=\"javascript\">Model.where({ _id: id }).update({ title: <span class=\"string\">'words'</span> })\n\n<span class=\"comment\">// becomes</span>\n\nModel.where({ _id: id }).update({ $set: { title: <span class=\"string\">'words'</span> }})</pre> <h4>Valid options:</h4> <ul> <li>\n<code>safe</code> (boolean) safe mode (defaults to value set in schema (true))</li> <li>\n<code>upsert</code> (boolean) whether to create the doc if it doesn't match (false)</li> <li>\n<code>multi</code> (boolean) whether multiple documents should be updated (false)</li> <li>\n<code>runValidators</code>: if true, runs <a href=\"validation#update-validators\">update validators</a> on this command. Update validators validate the update operation against the model's schema.</li> <li>\n<code>setDefaultsOnInsert</code>: if this and <code>upsert</code> are true, mongoose will apply the <a href=\"defaults\">defaults</a> specified in the model's schema if a new document is created. This option only works on MongoDB &gt;= 2.4 because it relies on <a href=\"https://docs.mongodb.org/v2.4/reference/operator/update/setOnInsert/\">MongoDB's <code>$setOnInsert</code> operator</a>.</li> <li>\n<code>strict</code> (boolean) overrides the <code>strict</code> option for this update</li> <li>\n<code>overwrite</code> (boolean) disables update-only mode, allowing you to overwrite the doc (false)</li> <li>\n<code>context</code> (string) if set to 'query' and <code>runValidators</code> is on, <code>this</code> will refer to the query in custom validator functions that update validation runs. Does nothing if <code>runValidators</code> is false.</li> </ul> <h4>Note</h4> <p>Passing an empty object <code>{}</code> as the doc will result in a no-op unless the <code>overwrite</code> option is passed. Without the <code>overwrite</code> option set, the update operation will be ignored and the callback executed without sending the command to MongoDB so as to prevent accidently overwritting documents in the collection.</p> <h4>Note</h4> <p>The operation is only executed when a callback is passed. To force execution without a callback, we must first call update() and then execute it by using the <code>exec()</code> method.</p> <pre data-language=\"javascript\">var q = Model.where({ _id: id });\nq.update({ $set: { name: 'bob' }}).update(); // not executed\n\nq.update({ $set: { name: 'bob' }}).exec(); // executed\n\n// keys that are not $atomic ops become $set.\n// this executes the same command as the previous example.\nq.update({ name: 'bob' }).exec();\n\n// overwriting with empty docs\nvar q = Model.where({ _id: id }).setOptions({ overwrite: true })\nq.update({ }, callback); // executes\n\n// multi update with overwrite to empty doc\nvar q = Model.where({ _id: id });\nq.setOptions({ multi: true, overwrite: true })\nq.update({ });\nq.update(callback); // executed\n\n// multi updates\nModel.where()\n     .update({ name: /^match/ }, { $set: { arr: [] }}, { multi: true }, callback)\n\n// more multi updates\nModel.where()\n     .setOptions({ multi: true })\n     .update({ $set: { arr: [] }}, callback)\n\n// single update by default\nModel.where({ email: '<a href=\"mailto:address@example.com\">address@example.com</a>' })\n     .update({ $inc: { counter: 1 }}, callback)\n</pre> <p>API summary</p> <pre data-language=\"javascript\">update(criteria, doc, options, cb) <span class=\"comment\">// executes</span>\nupdate(criteria, doc, options)\nupdate(criteria, doc, cb) <span class=\"comment\">// executes</span>\nupdate(criteria, doc)\nupdate(doc, cb) <span class=\"comment\">// executes</span>\nupdate(doc)\nupdate(cb) <span class=\"comment\">// executes</span>\nupdate(<span class=\"literal\">true</span>) <span class=\"comment\">// executes</span>\nupdate()</pre>\n</div>\n<h3 id=\"query_Query-where\">Query#where([path], [val])</h3>\n<p>Specifies a <code>path</code> for use with chaining.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[path]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>[val]</code><span class=\"types\"> &lt;T&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\"><span class=\"comment\">// instead of writing:</span>\nUser.find({age: {$gte: <span class=\"number\">21</span>, $lte: <span class=\"number\">65</span>}}, callback);\n\n<span class=\"comment\">// we can instead write:</span>\nUser.where(<span class=\"string\">'age'</span>).gte(<span class=\"number\">21</span>).lte(<span class=\"number\">65</span>);\n\n<span class=\"comment\">// passing query conditions is permitted</span>\nUser.find().where({ name: <span class=\"string\">'vonderful'</span> })\n\n<span class=\"comment\">// chaining</span>\nUser\n.where(<span class=\"string\">'age'</span>).gte(<span class=\"number\">21</span>).lte(<span class=\"number\">65</span>)\n.where(<span class=\"string\">'name'</span>, <span class=\"regexp\">/^vonderful/i</span>)\n.where(<span class=\"string\">'friends'</span>).slice(<span class=\"number\">10</span>)\n.exec(callback)</pre>\n</div>\n<h3 id=\"query_Query-within\">Query#within()</h3>\n<p>Defines a <code>$within</code> or <code>$geoWithin</code> argument for geo-spatial queries.</p>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"http://docs.mongodb.org/manual/reference/operator/polygon/\" title=\"$polygon\">$polygon</a></li>\n<li><a href=\"http://docs.mongodb.org/manual/reference/operator/box/\" title=\"$box\">$box</a></li>\n<li><a href=\"http://docs.mongodb.org/manual/reference/operator/geometry/\" title=\"$geometry\">$geometry</a></li>\n<li><a href=\"http://docs.mongodb.org/manual/reference/operator/center/\" title=\"$center\">$center</a></li>\n<li><a href=\"http://docs.mongodb.org/manual/reference/operator/centerSphere/\" title=\"$centerSphere\">$centerSphere</a></li>\n</ul>\n</div>\n<div class=\"description\">\n<h4>Example</h4> <pre data-language=\"javascript\">query.where(path).within().box()\nquery.where(path).within().circle()\nquery.where(path).within().geometry()\n\nquery.where(<span class=\"string\">'loc'</span>).within({ center: [<span class=\"number\">50</span>,<span class=\"number\">50</span>], radius: <span class=\"number\">10</span>, unique: <span class=\"literal\">true</span>, spherical: <span class=\"literal\">true</span> });\nquery.where(<span class=\"string\">'loc'</span>).within({ box: [[<span class=\"number\">40.73</span>, -<span class=\"number\">73.9</span>], [<span class=\"number\">40.7</span>, -<span class=\"number\">73.988</span>]] });\nquery.where(<span class=\"string\">'loc'</span>).within({ polygon: [[],[],[],[]] });\n\nquery.where(<span class=\"string\">'loc'</span>).within([], [], []) <span class=\"comment\">// polygon</span>\nquery.where(<span class=\"string\">'loc'</span>).within([], []) <span class=\"comment\">// box</span>\nquery.where(<span class=\"string\">'loc'</span>).within({ type: <span class=\"string\">'LineString'</span>, coordinates: [...] }); <span class=\"comment\">// geometry</span></pre> <p><strong>MUST</strong> be used after <code>where()</code>.</p> <h4>NOTE:</h4> <p>As of Mongoose 3.7, <code>$geoWithin</code> is always used for queries. To change this behavior, see <a href=\"#query_Query-use%2524geoWithin\">Query.use$geoWithin</a>.</p> <h4>NOTE:</h4> <p>In Mongoose 3.7, <code>within</code> changed from a getter to a function. If you need the old syntax, use <a href=\"https://github.com/ebensing/mongoose-within\">this</a>.</p>\n</div>\n<h3 id=\"query_Query-use%2524geoWithin\">Query#<span>use$geoWithin</span>\n</h3>\n<p>Flag to opt out of using <code>$geoWithin</code>.</p> <pre data-language=\"javascript\">mongoose.Query.use$geoWithin = <span class=\"literal\">false</span>;</pre> <p>MongoDB 2.4 deprecated the use of <code>$within</code>, replacing it with <code>$geoWithin</code>. Mongoose uses <code>$geoWithin</code> by default (which is 100% backward compatible with $within). If you are running an older version of MongoDB, set this flag to <code>false</code> so your <code>within()</code> queries continue to work.</p>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/operator/geoWithin/\">http://docs.mongodb.org/manual/reference/operator/geoWithin/</a></li></ul>\n</div>\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/schema/array.js\" id=\"schema-array-js\">schema/array.js</a></h2>\n<h3 id=\"schema_array_SchemaArray-checkRequired\">SchemaArray#checkRequired(value)</h3>\n<p>Check if the given value satisfies a required validator. The given value<br>must be not null nor undefined, and have a non-zero length.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>value</code><span class=\"types\"> &lt;<a href=\"#Any\">Any</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span>\n</li></ul>\n</div>\n\n<h3 id=\"schema_array_SchemaArray\">SchemaArray(key, cast, options)</h3>\n<p>Array SchemaType constructor</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>key</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>cast</code><span class=\"types\"> &lt;<a href=\"#schematype_SchemaType\">SchemaType</a>&gt; </span>\n</li>\n<li>\n<code>options</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"inherits\">\n<h4>Inherits:</h4>\n<ul><li><a href=\"#schematype_SchemaType\">SchemaType</a></li></ul>\n</div>\n\n<h3 id=\"schema_array_SchemaArray.schemaName\">SchemaArray.schemaName</h3>\n<p>This schema type's name, to defend against minifiers that mangle<br>function names.</p>\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/schema/string.js\" id=\"schema-string-js\">schema/string.js</a></h2>\n<h3 id=\"schema_string_SchemaString-checkRequired\">SchemaString#checkRequired(value, doc)</h3>\n<p>Check if the given value satisfies a required validator.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>value</code><span class=\"types\"> &lt;<a href=\"#Any\">Any</a>&gt; </span>\n</li>\n<li>\n<code>doc</code><span class=\"types\"> &lt;<a href=\"#document_Document\">Document</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span>\n</li></ul>\n</div>\n\n<h3 id=\"schema_string_SchemaString-enum\">SchemaString#enum([args...])</h3>\n<p>Adds an enum validator</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>[args...]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>enumeration values</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#schematype_SchemaType\">SchemaType</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"#error_messages_MongooseError-messages\" title=\"Customized Error Messages\">Customized Error Messages</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> states = <span class=\"string\">'opening open closing closed'</span>.split(<span class=\"string\">' '</span>)\n<span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Schema({ state: { type: String, enum: states }})\n<span class=\"keyword\">var</span> M = db.model(<span class=\"string\">'M'</span>, s)\n<span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> M({ state: <span class=\"string\">'invalid'</span> })\nm.save(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n  console.error(String(err)) <span class=\"comment\">// ValidationError: `invalid` is not a valid enum value for path `state`.</span>\n  m.state = <span class=\"string\">'open'</span>\n  m.save(callback) <span class=\"comment\">// success</span>\n})\n\n<span class=\"comment\">// or with custom error messages</span>\n<span class=\"keyword\">var</span> enu = {\n  values: <span class=\"string\">'opening open closing closed'</span>.split(<span class=\"string\">' '</span>),\n  message: <span class=\"string\">'enum validator failed for path `{PATH}` with value `{VALUE}`'</span>\n}\n<span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Schema({ state: { type: String, enum: enu })\n<span class=\"keyword\">var</span> M = db.model(<span class=\"string\">'M'</span>, s)\n<span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> M({ state: <span class=\"string\">'invalid'</span> })\nm.save(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n  console.error(String(err)) <span class=\"comment\">// ValidationError: enum validator failed for path `state` with value `invalid`</span>\n  m.state = <span class=\"string\">'open'</span>\n  m.save(callback) <span class=\"comment\">// success</span>\n})</pre>\n</div>\n<h3 id=\"schema_string_SchemaString-lowercase\">SchemaString#lowercase()</h3>\n<p>Adds a lowercase setter.</p>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#schematype_SchemaType\">SchemaType</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\">var s = new Schema({ email: { type: String, lowercase: true }})\nvar M = db.model('M', s);\nvar m = new M({ email: '<a href=\"mailto:SomeEmail@example.COM\">SomeEmail@example.COM</a>' });\nconsole.log(m.email) // <a href=\"mailto:someemail@example.com\">someemail@example.com</a>\n</pre>\n</div>\n<h3 id=\"schema_string_SchemaString-match\">SchemaString#match(regExp, [message])</h3>\n<p>Sets a regexp validator.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>regExp</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a>&gt; </span><span>regular expression to test against</span>\n</li>\n<li>\n<code>[message]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>optional custom error message</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#schematype_SchemaType\">SchemaType</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"#error_messages_MongooseError-messages\" title=\"Customized Error Messages\">Customized Error Messages</a></li></ul>\n</div>\n<div class=\"description\">\n<p>Any value that does not pass <code>regExp</code>.test(val) will fail validation.</p> <h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Schema({ name: { type: String, match: <span class=\"regexp\">/^a/</span> }})\n<span class=\"keyword\">var</span> M = db.model(<span class=\"string\">'M'</span>, s)\n<span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> M({ name: <span class=\"string\">'I am invalid'</span> })\nm.validate(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n  console.error(String(err)) <span class=\"comment\">// \"ValidationError: Path `name` is invalid (I am invalid).\"</span>\n  m.name = <span class=\"string\">'apples'</span>\n  m.validate(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n    assert.ok(err) <span class=\"comment\">// success</span>\n  })\n})\n\n<span class=\"comment\">// using a custom error message</span>\n<span class=\"keyword\">var</span> match = [ <span class=\"regexp\">/\\.html$/</span>, <span class=\"string\">\"That file doesn't end in .html ({VALUE})\"</span> ];\n<span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Schema({ file: { type: String, match: match }})\n<span class=\"keyword\">var</span> M = db.model(<span class=\"string\">'M'</span>, s);\n<span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> M({ file: <span class=\"string\">'invalid'</span> });\nm.validate(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n  console.log(String(err)) <span class=\"comment\">// \"ValidationError: That file doesn't end in .html (invalid)\"</span>\n})</pre> <p>Empty strings, <code>undefined</code>, and <code>null</code> values always pass the match validator. If you require these values, enable the <code>required</code> validator also.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Schema({ name: { type: String, match: <span class=\"regexp\">/^a/</span>, required: <span class=\"literal\">true</span> }})</pre>\n</div>\n<h3 id=\"schema_string_SchemaString-maxlength\">SchemaString#maxlength(value, [message])</h3>\n<p>Sets a maximum length validator.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>value</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span><span>maximum string length</span>\n</li>\n<li>\n<code>[message]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>optional custom error message</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#schematype_SchemaType\">SchemaType</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"#error_messages_MongooseError-messages\" title=\"Customized Error Messages\">Customized Error Messages</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({ postalCode: { type: String, maxlength: <span class=\"number\">9</span> })\n<span class=\"keyword\">var</span> Address = db.model(<span class=\"string\">'Address'</span>, schema)\n<span class=\"keyword\">var</span> address = <span class=\"keyword\">new</span> Address({ postalCode: <span class=\"string\">'9512512345'</span> })\naddress.save(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n  console.error(err) <span class=\"comment\">// validator error</span>\n  address.postalCode = <span class=\"string\">'95125'</span>;\n  address.save() <span class=\"comment\">// success</span>\n})\n\n<span class=\"comment\">// custom error messages</span>\n<span class=\"comment\">// We can also use the special {MAXLENGTH} token which will be replaced with the maximum allowed length</span>\n<span class=\"keyword\">var</span> maxlength = [<span class=\"number\">9</span>, <span class=\"string\">'The value of path `{PATH}` (`{VALUE}`) exceeds the maximum allowed length ({MAXLENGTH}).'</span>];\n<span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({ postalCode: { type: String, maxlength: maxlength })\n<span class=\"keyword\">var</span> Address = mongoose.model(<span class=\"string\">'Address'</span>, schema);\n<span class=\"keyword\">var</span> address = <span class=\"keyword\">new</span> Address({ postalCode: <span class=\"string\">'9512512345'</span> });\naddress.validate(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n  console.log(String(err)) <span class=\"comment\">// ValidationError: The value of path `postalCode` (`9512512345`) exceeds the maximum allowed length (9).</span>\n})</pre>\n</div>\n<h3 id=\"schema_string_SchemaString-minlength\">SchemaString#minlength(value, [message])</h3>\n<p>Sets a minimum length validator.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>value</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span><span>minimum string length</span>\n</li>\n<li>\n<code>[message]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>optional custom error message</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#schematype_SchemaType\">SchemaType</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"#error_messages_MongooseError-messages\" title=\"Customized Error Messages\">Customized Error Messages</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({ postalCode: { type: String, minlength: <span class=\"number\">5</span> })\n<span class=\"keyword\">var</span> Address = db.model(<span class=\"string\">'Address'</span>, schema)\n<span class=\"keyword\">var</span> address = <span class=\"keyword\">new</span> Address({ postalCode: <span class=\"string\">'9512'</span> })\naddress.save(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n  console.error(err) <span class=\"comment\">// validator error</span>\n  address.postalCode = <span class=\"string\">'95125'</span>;\n  address.save() <span class=\"comment\">// success</span>\n})\n\n<span class=\"comment\">// custom error messages</span>\n<span class=\"comment\">// We can also use the special {MINLENGTH} token which will be replaced with the minimum allowed length</span>\n<span class=\"keyword\">var</span> minlength = [<span class=\"number\">5</span>, <span class=\"string\">'The value of path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length ({MINLENGTH}).'</span>];\n<span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({ postalCode: { type: String, minlength: minlength })\n<span class=\"keyword\">var</span> Address = mongoose.model(<span class=\"string\">'Address'</span>, schema);\n<span class=\"keyword\">var</span> address = <span class=\"keyword\">new</span> Address({ postalCode: <span class=\"string\">'9512'</span> });\naddress.validate(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n  console.log(String(err)) <span class=\"comment\">// ValidationError: The value of path `postalCode` (`9512`) is shorter than the minimum length (5).</span>\n})</pre>\n</div>\n<h3 id=\"schema_string_SchemaString\">SchemaString(key, options)</h3>\n<p>String SchemaType constructor.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>key</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>options</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"inherits\">\n<h4>Inherits:</h4>\n<ul><li><a href=\"#schematype_SchemaType\">SchemaType</a></li></ul>\n</div>\n\n<h3 id=\"schema_string_SchemaString-trim\">SchemaString#trim()</h3>\n<p>Adds a trim setter.</p>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#schematype_SchemaType\">SchemaType</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<p>The string value will be trimmed when set.</p> <h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Schema({ name: { type: String, trim: <span class=\"literal\">true</span> }})\n<span class=\"keyword\">var</span> M = db.model(<span class=\"string\">'M'</span>, s)\n<span class=\"keyword\">var</span> string = <span class=\"string\">' some name '</span>\nconsole.log(string.length) <span class=\"comment\">// 11</span>\n<span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> M({ name: string })\nconsole.log(m.name.length) <span class=\"comment\">// 9</span></pre>\n</div>\n<h3 id=\"schema_string_SchemaString-uppercase\">SchemaString#uppercase()</h3>\n<p>Adds an uppercase setter.</p>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#schematype_SchemaType\">SchemaType</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Schema({ caps: { type: String, uppercase: <span class=\"literal\">true</span> }})\n<span class=\"keyword\">var</span> M = db.model(<span class=\"string\">'M'</span>, s);\n<span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> M({ caps: <span class=\"string\">'an example'</span> });\nconsole.log(m.caps) <span class=\"comment\">// AN EXAMPLE</span></pre>\n</div>\n<h3 id=\"schema_string_SchemaString.schemaName\">SchemaString.schemaName</h3>\n<p>This schema type's name, to defend against minifiers that mangle<br>function names.</p>\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/schema/documentarray.js\" id=\"schema-documentarray-js\">schema/documentarray.js</a></h2>\n<h3 id=\"schema_documentarray_DocumentArray\">DocumentArray(key, schema, options)</h3>\n<p>SubdocsArray SchemaType constructor</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>key</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>schema</code><span class=\"types\"> &lt;<a href=\"#schema_Schema\">Schema</a>&gt; </span>\n</li>\n<li>\n<code>options</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"inherits\">\n<h4>Inherits:</h4>\n<ul><li><a href=\"#schema_array_SchemaArray\">SchemaArray</a></li></ul>\n</div>\n\n<h3 id=\"schema_documentarray_DocumentArray.schemaName\">DocumentArray.schemaName</h3>\n<p>This schema type's name, to defend against minifiers that mangle<br>function names.</p>\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/schema/number.js\" id=\"schema-number-js\">schema/number.js</a></h2>\n<h3 id=\"schema_number_SchemaNumber-checkRequired\">SchemaNumber#checkRequired(value, doc)</h3>\n<p>Check if the given value satisfies a required validator.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>value</code><span class=\"types\"> &lt;<a href=\"#Any\">Any</a>&gt; </span>\n</li>\n<li>\n<code>doc</code><span class=\"types\"> &lt;<a href=\"#document_Document\">Document</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span>\n</li></ul>\n</div>\n\n<h3 id=\"schema_number_SchemaNumber-max\">SchemaNumber#max(maximum, [message])</h3>\n<p>Sets a maximum number validator.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>maximum</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span><span>number</span>\n</li>\n<li>\n<code>[message]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>optional custom error message</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#schematype_SchemaType\">SchemaType</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"#error_messages_MongooseError-messages\" title=\"Customized Error Messages\">Customized Error Messages</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Schema({ n: { type: Number, max: <span class=\"number\">10</span> })\n<span class=\"keyword\">var</span> M = db.model(<span class=\"string\">'M'</span>, s)\n<span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> M({ n: <span class=\"number\">11</span> })\nm.save(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n  console.error(err) <span class=\"comment\">// validator error</span>\n  m.n = <span class=\"number\">10</span>;\n  m.save() <span class=\"comment\">// success</span>\n})\n\n<span class=\"comment\">// custom error messages</span>\n<span class=\"comment\">// We can also use the special {MAX} token which will be replaced with the invalid value</span>\n<span class=\"keyword\">var</span> max = [<span class=\"number\">10</span>, <span class=\"string\">'The value of path `{PATH}` ({VALUE}) exceeds the limit ({MAX}).'</span>];\n<span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({ n: { type: Number, max: max })\n<span class=\"keyword\">var</span> M = mongoose.model(<span class=\"string\">'Measurement'</span>, schema);\n<span class=\"keyword\">var</span> s= <span class=\"keyword\">new</span> M({ n: <span class=\"number\">4</span> });\ns.validate(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n  console.log(String(err)) <span class=\"comment\">// ValidationError: The value of path `n` (4) exceeds the limit (10).</span>\n})</pre>\n</div>\n<h3 id=\"schema_number_SchemaNumber-min\">SchemaNumber#min(value, [message])</h3>\n<p>Sets a minimum number validator.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>value</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span><span>minimum number</span>\n</li>\n<li>\n<code>[message]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>optional custom error message</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#schematype_SchemaType\">SchemaType</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"#error_messages_MongooseError-messages\" title=\"Customized Error Messages\">Customized Error Messages</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Schema({ n: { type: Number, min: <span class=\"number\">10</span> })\n<span class=\"keyword\">var</span> M = db.model(<span class=\"string\">'M'</span>, s)\n<span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> M({ n: <span class=\"number\">9</span> })\nm.save(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n  console.error(err) <span class=\"comment\">// validator error</span>\n  m.n = <span class=\"number\">10</span>;\n  m.save() <span class=\"comment\">// success</span>\n})\n\n<span class=\"comment\">// custom error messages</span>\n<span class=\"comment\">// We can also use the special {MIN} token which will be replaced with the invalid value</span>\n<span class=\"keyword\">var</span> min = [<span class=\"number\">10</span>, <span class=\"string\">'The value of path `{PATH}` ({VALUE}) is beneath the limit ({MIN}).'</span>];\n<span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({ n: { type: Number, min: min })\n<span class=\"keyword\">var</span> M = mongoose.model(<span class=\"string\">'Measurement'</span>, schema);\n<span class=\"keyword\">var</span> s= <span class=\"keyword\">new</span> M({ n: <span class=\"number\">4</span> });\ns.validate(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n  console.log(String(err)) <span class=\"comment\">// ValidationError: The value of path `n` (4) is beneath the limit (10).</span>\n})</pre>\n</div>\n<h3 id=\"schema_number_SchemaNumber\">SchemaNumber(key, options)</h3>\n<p>Number SchemaType constructor.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>key</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>options</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"inherits\">\n<h4>Inherits:</h4>\n<ul><li><a href=\"#schematype_SchemaType\">SchemaType</a></li></ul>\n</div>\n\n<h3 id=\"schema_number_SchemaNumber.schemaName\">SchemaNumber.schemaName</h3>\n<p>This schema type's name, to defend against minifiers that mangle<br>function names.</p>\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/schema/date.js\" id=\"schema-date-js\">schema/date.js</a></h2>\n<h3 id=\"schema_date_SchemaDate-checkRequired\">SchemaDate#checkRequired(value, doc)</h3>\n<p>Check if the given value satisfies a required validator. To satisfy<br>a required validator, the given value must be an instance of <code>Date</code>.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>value</code><span class=\"types\"> &lt;<a href=\"#Any\">Any</a>&gt; </span>\n</li>\n<li>\n<code>doc</code><span class=\"types\"> &lt;<a href=\"#document_Document\">Document</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span>\n</li></ul>\n</div>\n\n<h3 id=\"schema_date_SchemaDate-expires\">SchemaDate#expires(when)</h3>\n<p>Declares a TTL index (rounded to the nearest second) for <em>Date</em> types only.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>when</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#schematype_SchemaType\">SchemaType</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<p>This sets the <code>expireAfterSeconds</code> index option available in MongoDB &gt;= 2.1.2.<br>This index type is only compatible with Date types.</p> <h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"comment\">// expire in 24 hours</span>\n<span class=\"keyword\">new</span> Schema({ createdAt: { type: Date, expires: <span class=\"number\">60</span>*<span class=\"number\">60</span>*<span class=\"number\">24</span> }});</pre> <p><code>expires</code> utilizes the <code>ms</code> module from <a href=\"https://github.com/guille/\">guille</a> allowing us to use a friendlier syntax:</p> <h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"comment\">// expire in 24 hours</span>\n<span class=\"keyword\">new</span> Schema({ createdAt: { type: Date, expires: <span class=\"string\">'24h'</span> }});\n\n<span class=\"comment\">// expire in 1.5 hours</span>\n<span class=\"keyword\">new</span> Schema({ createdAt: { type: Date, expires: <span class=\"string\">'1.5h'</span> }});\n\n<span class=\"comment\">// expire in 7 days</span>\n<span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({ createdAt: Date });\nschema.path(<span class=\"string\">'createdAt'</span>).expires(<span class=\"string\">'7d'</span>);</pre>\n</div>\n<h3 id=\"schema_date_SchemaDate-max\">SchemaDate#max(maximum, [message])</h3>\n<p>Sets a maximum date validator.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>maximum</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date\">Date</a>&gt; </span><span>date</span>\n</li>\n<li>\n<code>[message]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>optional custom error message</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#schematype_SchemaType\">SchemaType</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"#error_messages_MongooseError-messages\" title=\"Customized Error Messages\">Customized Error Messages</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Schema({ d: { type: Date, max: Date(<span class=\"string\">'2014-01-01'</span>) })\n<span class=\"keyword\">var</span> M = db.model(<span class=\"string\">'M'</span>, s)\n<span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> M({ d: Date(<span class=\"string\">'2014-12-08'</span>) })\nm.save(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n  console.error(err) <span class=\"comment\">// validator error</span>\n  m.d = Date(<span class=\"string\">'2013-12-31'</span>);\n  m.save() <span class=\"comment\">// success</span>\n})\n\n<span class=\"comment\">// custom error messages</span>\n<span class=\"comment\">// We can also use the special {MAX} token which will be replaced with the invalid value</span>\n<span class=\"keyword\">var</span> max = [Date(<span class=\"string\">'2014-01-01'</span>), <span class=\"string\">'The value of path `{PATH}` ({VALUE}) exceeds the limit ({MAX}).'</span>];\n<span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({ d: { type: Date, max: max })\n<span class=\"keyword\">var</span> M = mongoose.model(<span class=\"string\">'M'</span>, schema);\n<span class=\"keyword\">var</span> s= <span class=\"keyword\">new</span> M({ d: Date(<span class=\"string\">'2014-12-08'</span>) });\ns.validate(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n  console.log(String(err)) <span class=\"comment\">// ValidationError: The value of path `d` (2014-12-08) exceeds the limit (2014-01-01).</span>\n})</pre>\n</div>\n<h3 id=\"schema_date_SchemaDate-min\">SchemaDate#min(value, [message])</h3>\n<p>Sets a minimum date validator.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>value</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date\">Date</a>&gt; </span><span>minimum date</span>\n</li>\n<li>\n<code>[message]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>optional custom error message</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#schematype_SchemaType\">SchemaType</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"#error_messages_MongooseError-messages\" title=\"Customized Error Messages\">Customized Error Messages</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Schema({ d: { type: Date, min: Date(<span class=\"string\">'1970-01-01'</span>) })\n<span class=\"keyword\">var</span> M = db.model(<span class=\"string\">'M'</span>, s)\n<span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> M({ d: Date(<span class=\"string\">'1969-12-31'</span>) })\nm.save(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n  console.error(err) <span class=\"comment\">// validator error</span>\n  m.d = Date(<span class=\"string\">'2014-12-08'</span>);\n  m.save() <span class=\"comment\">// success</span>\n})\n\n<span class=\"comment\">// custom error messages</span>\n<span class=\"comment\">// We can also use the special {MIN} token which will be replaced with the invalid value</span>\n<span class=\"keyword\">var</span> min = [Date(<span class=\"string\">'1970-01-01'</span>), <span class=\"string\">'The value of path `{PATH}` ({VALUE}) is beneath the limit ({MIN}).'</span>];\n<span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({ d: { type: Date, min: min })\n<span class=\"keyword\">var</span> M = mongoose.model(<span class=\"string\">'M'</span>, schema);\n<span class=\"keyword\">var</span> s= <span class=\"keyword\">new</span> M({ d: Date(<span class=\"string\">'1969-12-31'</span>) });\ns.validate(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n  console.log(String(err)) <span class=\"comment\">// ValidationError: The value of path `d` (1969-12-31) is before the limit (1970-01-01).</span>\n})</pre>\n</div>\n<h3 id=\"schema_date_SchemaDate\">SchemaDate(key, options)</h3>\n<p>Date SchemaType constructor.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>key</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>options</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"inherits\">\n<h4>Inherits:</h4>\n<ul><li><a href=\"#schematype_SchemaType\">SchemaType</a></li></ul>\n</div>\n\n<h3 id=\"schema_date_SchemaDate.schemaName\">SchemaDate.schemaName</h3>\n<p>This schema type's name, to defend against minifiers that mangle<br>function names.</p>\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/schema/buffer.js\" id=\"schema-buffer-js\">schema/buffer.js</a></h2>\n<h3 id=\"schema_buffer_SchemaBuffer-checkRequired\">SchemaBuffer#checkRequired(value, doc)</h3>\n<p>Check if the given value satisfies a required validator. To satisfy a<br>required validator, a buffer must not be null or undefined and have<br>non-zero length.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>value</code><span class=\"types\"> &lt;<a href=\"#Any\">Any</a>&gt; </span>\n</li>\n<li>\n<code>doc</code><span class=\"types\"> &lt;<a href=\"#document_Document\">Document</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span>\n</li></ul>\n</div>\n\n<h3 id=\"schema_buffer_SchemaBuffer\">SchemaBuffer(key, options)</h3>\n<p>Buffer SchemaType constructor</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>key</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>options</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"inherits\">\n<h4>Inherits:</h4>\n<ul><li><a href=\"#schematype_SchemaType\">SchemaType</a></li></ul>\n</div>\n\n<h3 id=\"schema_buffer_SchemaBuffer.schemaName\">SchemaBuffer.schemaName</h3>\n<p>This schema type's name, to defend against minifiers that mangle<br>function names.</p>\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/schema/boolean.js\" id=\"schema-boolean-js\">schema/boolean.js</a></h2>\n<h3 id=\"schema_boolean_SchemaBoolean-checkRequired\">SchemaBoolean#checkRequired(value)</h3>\n<p>Check if the given value satisfies a required validator. For a boolean<br>to satisfy a required validator, it must be strictly equal to true or to<br>false.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>value</code><span class=\"types\"> &lt;<a href=\"#Any\">Any</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span>\n</li></ul>\n</div>\n\n<h3 id=\"schema_boolean_SchemaBoolean\">SchemaBoolean(path, options)</h3>\n<p>Boolean SchemaType constructor.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>path</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>options</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"inherits\">\n<h4>Inherits:</h4>\n<ul><li><a href=\"#schematype_SchemaType\">SchemaType</a></li></ul>\n</div>\n\n<h3 id=\"schema_boolean_SchemaBoolean.schemaName\">SchemaBoolean.schemaName</h3>\n<p>This schema type's name, to defend against minifiers that mangle<br>function names.</p>\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/schema/objectid.js\" id=\"schema-objectid-js\">schema/objectid.js</a></h2>\n<h3 id=\"schema_objectid_ObjectId-auto\">ObjectId#auto(turnOn)</h3>\n<p>Adds an auto-generated ObjectId default if turnOn is true.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>turnOn</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span><span>auto generated ObjectId defaults</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#schematype_SchemaType\">SchemaType</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n\n<h3 id=\"schema_objectid_ObjectId-checkRequired\">ObjectId#checkRequired(value, doc)</h3>\n<p>Check if the given value satisfies a required validator.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>value</code><span class=\"types\"> &lt;<a href=\"#Any\">Any</a>&gt; </span>\n</li>\n<li>\n<code>doc</code><span class=\"types\"> &lt;<a href=\"#document_Document\">Document</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span>\n</li></ul>\n</div>\n\n<h3 id=\"schema_objectid_ObjectId\">ObjectId(key, options)</h3>\n<p>ObjectId SchemaType constructor.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>key</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>options</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"inherits\">\n<h4>Inherits:</h4>\n<ul><li><a href=\"#schematype_SchemaType\">SchemaType</a></li></ul>\n</div>\n\n<h3 id=\"schema_objectid_ObjectId.schemaName\">ObjectId.schemaName</h3>\n<p>This schema type's name, to defend against minifiers that mangle<br>function names.</p>\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/schema/mixed.js\" id=\"schema-mixed-js\">schema/mixed.js</a></h2>\n<h3 id=\"schema_mixed_Mixed\">Mixed(path, options)</h3>\n<p>Mixed SchemaType constructor.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>path</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>options</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"inherits\">\n<h4>Inherits:</h4>\n<ul><li><a href=\"#schematype_SchemaType\">SchemaType</a></li></ul>\n</div>\n\n<h3 id=\"schema_mixed_Mixed.schemaName\">Mixed.schemaName</h3>\n<p>This schema type's name, to defend against minifiers that mangle<br>function names.</p>\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/schema/embedded.js\" id=\"schema-embedded-js\">schema/embedded.js</a></h2>\n<h3 id=\"schema_embedded_Embedded\">Embedded(schema, key, options)</h3>\n<p>Sub-schema schematype constructor</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>schema</code><span class=\"types\"> &lt;<a href=\"#schema_Schema\">Schema</a>&gt; </span>\n</li>\n<li>\n<code>key</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>options</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"inherits\">\n<h4>Inherits:</h4>\n<ul><li><a href=\"#schematype_SchemaType\">SchemaType</a></li></ul>\n</div>\n\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/aggregate.js\" id=\"aggregate-js\">aggregate.js</a></h2>\n<h3 id=\"aggregate_Aggregate-addCursorFlag\">Aggregate#addCursorFlag(flag, value)</h3>\n<p>Adds a <a href=\"http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#addCursorFlag\">cursor flag</a></p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>flag</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>value</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://mongodb.github.io/node-mongodb-native/2.1/api/Cursor.html#addCursorFlag\" title=\"mongodb\">mongodb</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> cursor = Model.aggregate(..).cursor({ batchSize: <span class=\"number\">1000</span> }).exec();\ncursor.each(<span class=\"keyword\">function</span>(error, doc) {\n  <span class=\"comment\">// use doc</span>\n});</pre>\n</div>\n<h3 id=\"aggregate_Aggregate\">Aggregate([ops])</h3>\n<p>Aggregate constructor used for building aggregation pipelines.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>[ops]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array\">Array</a>&gt; </span><span>aggregation operator(s) or operator array</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"http://docs.mongodb.org/manual/applications/aggregation/\" title=\"MongoDB\">MongoDB</a></li>\n<li><a href=\"http://mongodb.github.com/node-mongodb-native/api-generated/collection.html#aggregate\" title=\"driver\">driver</a></li>\n</ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">new</span> Aggregate();\n<span class=\"keyword\">new</span> Aggregate({ $project: { a: <span class=\"number\">1</span>, b: <span class=\"number\">1</span> } });\n<span class=\"keyword\">new</span> Aggregate({ $project: { a: <span class=\"number\">1</span>, b: <span class=\"number\">1</span> } }, { $skip: <span class=\"number\">5</span> });\n<span class=\"keyword\">new</span> Aggregate([{ $project: { a: <span class=\"number\">1</span>, b: <span class=\"number\">1</span> } }, { $skip: <span class=\"number\">5</span> }]);</pre> <p>Returned when calling Model.aggregate().</p> <h4>Example:</h4> <pre data-language=\"javascript\">Model\n.aggregate({ $match: { age: { $gte: <span class=\"number\">21</span> }}})\n.unwind(<span class=\"string\">'tags'</span>)\n.exec(callback)</pre> <h4>Note:</h4> <ul> <li>The documents returned are plain javascript objects, not mongoose documents (since any shape of document can be returned).</li> <li>Requires MongoDB &gt;= 2.1</li> <li>Mongoose does <strong>not</strong> cast pipeline stages. <code>new Aggregate({ $match: { _id: '00000000000000000000000a' } });</code> will not work unless <code>_id</code> is a string in the database. Use <code>new Aggregate({ $match: { _id: mongoose.Types.ObjectId('00000000000000000000000a') } });</code> instead.</li> </ul>\n</div>\n<h3 id=\"aggregate_Aggregate-allowDiskUse\">Aggregate#allowDiskUse(value, [tags])</h3>\n<p>Sets the allowDiskUse option for the aggregation query (ignored for &lt; 2.6.0)</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>value</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span><span>Should tell server it can use hard drive to store data during aggregation.</span>\n</li>\n<li>\n<code>[tags]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array\">Array</a>&gt; </span><span>optional tags for this query</span>\n</li>\n</ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/command/aggregate/\" title=\"mongodb\">mongodb</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\">Model.aggregate(..).allowDiskUse(<span class=\"literal\">true</span>).exec(callback)</pre>\n</div>\n<h3 id=\"aggregate_Aggregate-append\">Aggregate#append(ops)</h3>\n<p>Appends new operators to this aggregate pipeline</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>ops</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>operator(s) to append</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#aggregate_Aggregate\">Aggregate</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Examples:</h4> <pre data-language=\"javascript\">aggregate.append({ $project: { field: <span class=\"number\">1</span> }}, { $limit: <span class=\"number\">2</span> });\n\n<span class=\"comment\">// or pass an array</span>\n<span class=\"keyword\">var</span> pipeline = [{ $match: { daw: <span class=\"string\">'Logic Audio X'</span> }} ];\naggregate.append(pipeline);</pre>\n</div>\n<h3 id=\"aggregate_Aggregate-cursor\">Aggregate#cursor(options)</h3>\n<p>Sets the cursor option option for the aggregation query (ignored for &lt; 2.6.0).<br>Note the different syntax below: .exec() returns a cursor object, and no callback<br>is necessary.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>options</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>set the cursor batch size</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://mongodb.github.io/node-mongodb-native/2.0/api/AggregationCursor.html\" title=\"mongodb\">mongodb</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> cursor = Model.aggregate(..).cursor({ batchSize: <span class=\"number\">1000</span> }).exec();\ncursor.each(<span class=\"keyword\">function</span>(error, doc) {\n  <span class=\"comment\">// use doc</span>\n});</pre>\n</div>\n<h3 id=\"aggregate_Aggregate-exec\">Aggregate#exec([callback])</h3>\n<p>Executes the aggregate pipeline on the currently bound Model.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#promise_Promise\">Promise</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"#promise_Promise\" title=\"Promise\">Promise</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\">aggregate.exec(callback);\n\n<span class=\"comment\">// Because a promise is returned, the `callback` is optional.</span>\n<span class=\"keyword\">var</span> promise = aggregate.exec();\npromise.then(..);</pre>\n</div>\n<h3 id=\"aggregate_Aggregate-explain\">Aggregate#explain(callback)</h3>\n<p>Execute the aggregation with explain</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>callback</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#promise_Promise\">Promise</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\">Model.aggregate(..).explain(callback)</pre>\n</div>\n<h3 id=\"aggregate_Aggregate-group\">Aggregate#group(arg)</h3>\n<p>Appends a new custom $group operator to this aggregate pipeline.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>arg</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>$group operator contents</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#aggregate_Aggregate\">Aggregate</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/aggregation/group/\" title=\"$group\">$group</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Examples:</h4> <pre data-language=\"javascript\">aggregate.group({ _id: <span class=\"string\">\"$department\"</span> });</pre>\n</div>\n<h3 id=\"aggregate_Aggregate-limit\">Aggregate#limit(num)</h3>\n<p>Appends a new $limit operator to this aggregate pipeline.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>num</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span><span>maximum number of records to pass to the next stage</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#aggregate_Aggregate\">Aggregate</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/aggregation/limit/\" title=\"$limit\">$limit</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Examples:</h4> <pre data-language=\"javascript\">aggregate.limit(<span class=\"number\">10</span>);</pre>\n</div>\n<h3 id=\"aggregate_Aggregate-lookup\">Aggregate#lookup(options)</h3>\n<p>Appends new custom $lookup operator(s) to this aggregate pipeline.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>options</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>to $lookup as described in the above link</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#aggregate_Aggregate\">Aggregate</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"https://docs.mongodb.org/manual/reference/operator/aggregation/lookup/#pipe._S_lookup\" title=\"$lookup\">$lookup</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Examples:</h4> <pre data-language=\"javascript\">aggregate.lookup({ from: <span class=\"string\">'users'</span>, localField: <span class=\"string\">'userId'</span>, foreignField: <span class=\"string\">'_id'</span>, as: <span class=\"string\">'users'</span> });</pre>\n</div>\n<h3 id=\"aggregate_Aggregate-match\">Aggregate#match(arg)</h3>\n<p>Appends a new custom $match operator to this aggregate pipeline.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>arg</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>$match operator contents</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#aggregate_Aggregate\">Aggregate</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/aggregation/match/\" title=\"$match\">$match</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Examples:</h4> <pre data-language=\"javascript\">aggregate.match({ department: { $<span class=\"keyword\">in</span>: [ <span class=\"string\">\"sales\"</span>, <span class=\"string\">\"engineering\"</span> } } });</pre>\n</div>\n<h3 id=\"aggregate_Aggregate-model\">Aggregate#model(model)</h3>\n<p>Binds this aggregate to a model.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>model</code><span class=\"types\"> &lt;<a href=\"#model_Model\">Model</a>&gt; </span><span>the model to which the aggregate is to be bound</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#aggregate_Aggregate\">Aggregate</a>&gt; </span>\n</li></ul>\n</div>\n\n<h3 id=\"aggregate_Aggregate-near\">Aggregate#near(parameters)</h3>\n<p>Appends a new $geoNear operator to this aggregate pipeline.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>parameters</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#aggregate_Aggregate\">Aggregate</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/aggregation/geoNear/\" title=\"$geoNear\">$geoNear</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>NOTE:</h4> <p><strong>MUST</strong> be used as the first operator in the pipeline.</p> <h4>Examples:</h4> <pre data-language=\"javascript\">aggregate.near({\n  near: [<span class=\"number\">40.724</span>, -<span class=\"number\">73.997</span>],\n  distanceField: <span class=\"string\">\"dist.calculated\"</span>, <span class=\"comment\">// required</span>\n  maxDistance: <span class=\"number\">0.008</span>,\n  query: { type: <span class=\"string\">\"public\"</span> },\n  includeLocs: <span class=\"string\">\"dist.location\"</span>,\n  uniqueDocs: <span class=\"literal\">true</span>,\n  num: <span class=\"number\">5</span>\n});</pre>\n</div>\n<h3 id=\"aggregate_Aggregate-project\">Aggregate#project(arg)</h3>\n<p>Appends a new $project operator to this aggregate pipeline.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>arg</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>field specification</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#aggregate_Aggregate\">Aggregate</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/aggregation/project/\" title=\"projection\">projection</a></li></ul>\n</div>\n<div class=\"description\">\n<p>Mongoose query <a href=\"#query_Query-select\">selection syntax</a> is also supported.</p> <h4>Examples:</h4> <pre data-language=\"javascript\"><span class=\"comment\">// include a, include b, exclude _id</span>\naggregate.project(<span class=\"string\">\"a b -_id\"</span>);\n\n<span class=\"comment\">// or you may use object notation, useful when</span>\n<span class=\"comment\">// you have keys already prefixed with a \"-\"</span>\naggregate.project({a: <span class=\"number\">1</span>, b: <span class=\"number\">1</span>, _id: <span class=\"number\">0</span>});\n\n<span class=\"comment\">// reshaping documents</span>\naggregate.project({\n    newField: <span class=\"string\">'$b.nested'</span>\n  , plusTen: { $add: [<span class=\"string\">'$val'</span>, <span class=\"number\">10</span>]}\n  , sub: {\n       name: <span class=\"string\">'$a'</span>\n    }\n})\n\n<span class=\"comment\">// etc</span>\naggregate.project({ salary_k: { $divide: [ <span class=\"string\">\"$salary\"</span>, <span class=\"number\">1000</span> ] } });</pre>\n</div>\n<h3 id=\"aggregate_Aggregate-read\">Aggregate#read(pref, [tags])</h3>\n<p>Sets the readPreference option for the aggregation query.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>pref</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>one of the listed preference options or their aliases</span>\n</li>\n<li>\n<code>[tags]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array\">Array</a>&gt; </span><span>optional tags for this query</span>\n</li>\n</ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"http://docs.mongodb.org/manual/applications/replication/#read-preference\" title=\"mongodb\">mongodb</a></li>\n<li><a href=\"http://mongodb.github.com/node-mongodb-native/driver-articles/anintroductionto1_1and2_2.html#read-preferences\" title=\"driver\">driver</a></li>\n</ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\">Model.aggregate(..).read(<span class=\"string\">'primaryPreferred'</span>).exec(callback)</pre>\n</div>\n<h3 id=\"aggregate_Aggregate-sample\">Aggregate#sample(size)</h3>\n<p>Appends new custom $sample operator(s) to this aggregate pipeline.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>size</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span><span>number of random documents to pick</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#aggregate_Aggregate\">Aggregate</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"https://docs.mongodb.org/manual/reference/operator/aggregation/sample/#pipe._S_sample\" title=\"$sample\">$sample</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Examples:</h4> <pre data-language=\"javascript\">aggregate.sample(<span class=\"number\">3</span>); <span class=\"comment\">// Add a pipeline that picks 3 random documents</span></pre>\n</div>\n<h3 id=\"aggregate_Aggregate-skip\">Aggregate#skip(num)</h3>\n<p>Appends a new $skip operator to this aggregate pipeline.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>num</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span><span>number of records to skip before next stage</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#aggregate_Aggregate\">Aggregate</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/aggregation/skip/\" title=\"$skip\">$skip</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Examples:</h4> <pre data-language=\"javascript\">aggregate.skip(<span class=\"number\">10</span>);</pre>\n</div>\n<h3 id=\"aggregate_Aggregate-sort\">Aggregate#sort(arg)</h3>\n<p>Appends a new $sort operator to this aggregate pipeline.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>arg</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#aggregate_Aggregate\">Aggregate</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/aggregation/sort/\" title=\"$sort\">$sort</a></li></ul>\n</div>\n<div class=\"description\">\n<p>If an object is passed, values allowed are <code>asc</code>, <code>desc</code>, <code>ascending</code>, <code>descending</code>, <code>1</code>, and <code>-1</code>.</p> <p>If a string is passed, it must be a space delimited list of path names. The sort order of each path is ascending unless the path name is prefixed with <code>-</code> which will be treated as descending.</p> <h4>Examples:</h4> <pre data-language=\"javascript\"><span class=\"comment\">// these are equivalent</span>\naggregate.sort({ field: <span class=\"string\">'asc'</span>, test: -<span class=\"number\">1</span> });\naggregate.sort(<span class=\"string\">'field -test'</span>);</pre>\n</div>\n<h3 id=\"aggregate_Aggregate-then\">Aggregate#then([resolve], [reject])</h3>\n<p>Provides promise for aggregate.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[resolve]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span><span>successCallback</span>\n</li>\n<li>\n<code>[reject]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span><span>errorCallback</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#promise_Promise\">Promise</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"#promise_Promise\" title=\"Promise\">Promise</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\">Model.aggregate(..).then(successCallback, errorCallback);</pre>\n</div>\n<h3 id=\"aggregate_Aggregate-unwind\">Aggregate#unwind(fields)</h3>\n<p>Appends new custom $unwind operator(s) to this aggregate pipeline.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>fields</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>the field(s) to unwind</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#aggregate_Aggregate\">Aggregate</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://docs.mongodb.org/manual/reference/aggregation/unwind/\" title=\"$unwind\">$unwind</a></li></ul>\n</div>\n<div class=\"description\">\n<p>Note that the <code>$unwind</code> operator requires the path name to start with '$'.<br>Mongoose will prepend '$' if the specified field doesn't start '$'.</p> <h4>Examples:</h4> <pre data-language=\"javascript\">aggregate.unwind(<span class=\"string\">\"tags\"</span>);\naggregate.unwind(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>);</pre>\n</div>\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/schematype.js\" id=\"schematype-js\">schematype.js</a></h2>\n<h3 id=\"schematype_SchemaType-default\">SchemaType#default(val)</h3>\n<p>Sets a default value for this SchemaType.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>val</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>, T&gt; </span><span>the default value</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#defaultValue\">defaultValue</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({ n: { type: Number, <span class=\"keyword\">default</span>: <span class=\"number\">10</span> })\n<span class=\"keyword\">var</span> M = db.model(<span class=\"string\">'M'</span>, schema)\n<span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> M;\nconsole.log(m.n) <span class=\"comment\">// 10</span></pre> <p>Defaults can be either <code>functions</code> which return the value to use as the default or the literal value itself. Either way, the value will be cast based on its schema type before being set during document creation.</p> <h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"comment\">// values are cast:</span>\n<span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({ aNumber: { type: Number, <span class=\"keyword\">default</span>: <span class=\"number\">4.815162342</span> }})\n<span class=\"keyword\">var</span> M = db.model(<span class=\"string\">'M'</span>, schema)\n<span class=\"keyword\">var</span> m = <span class=\"keyword\">new</span> M;\nconsole.log(m.aNumber) <span class=\"comment\">// 4.815162342</span>\n\n<span class=\"comment\">// default unique objects for Mixed types:</span>\n<span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({ mixed: Schema.Types.Mixed });\nschema.path(<span class=\"string\">'mixed'</span>).<span class=\"keyword\">default</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n  <span class=\"keyword\">return</span> {};\n});\n\n<span class=\"comment\">// if we don't use a function to return object literals for Mixed defaults,</span>\n<span class=\"comment\">// each document will receive a reference to the same object literal creating</span>\n<span class=\"comment\">// a \"shared\" object instance:</span>\n<span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({ mixed: Schema.Types.Mixed });\nschema.path(<span class=\"string\">'mixed'</span>).<span class=\"keyword\">default</span>({});\n<span class=\"keyword\">var</span> M = db.model(<span class=\"string\">'M'</span>, schema);\n<span class=\"keyword\">var</span> m1 = <span class=\"keyword\">new</span> M;\nm1.mixed.added = <span class=\"number\">1</span>;\nconsole.log(m1.mixed); <span class=\"comment\">// { added: 1 }</span>\n<span class=\"keyword\">var</span> m2 = <span class=\"keyword\">new</span> M;\nconsole.log(m2.mixed); <span class=\"comment\">// { added: 1 }</span></pre>\n</div>\n<h3 id=\"schematype_SchemaType-get\">SchemaType#get(fn)</h3>\n<p>Adds a getter to this schematype.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>fn</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#schematype_SchemaType\">SchemaType</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dob</span> <span class=\"params\">(val)</span> {</span>\n  <span class=\"keyword\">if</span> (!val) <span class=\"keyword\">return</span> val;\n  <span class=\"keyword\">return</span> (val.getMonth() + <span class=\"number\">1</span>) + <span class=\"string\">\"/\"</span> + val.getDate() + <span class=\"string\">\"/\"</span> + val.getFullYear();\n}\n\n<span class=\"comment\">// defining within the schema</span>\n<span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Schema({ born: { type: Date, get: dob })\n\n<span class=\"comment\">// or by retreiving its SchemaType</span>\n<span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Schema({ born: Date })\ns.path(<span class=\"string\">'born'</span>).get(dob)</pre> <p>Getters allow you to transform the representation of the data as it travels from the raw mongodb document to the value that you see.</p> <p>Suppose you are storing credit card numbers and you want to hide everything except the last 4 digits to the mongoose user. You can do so by defining a getter in the following way:</p> <pre data-language=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">obfuscate</span> <span class=\"params\">(cc)</span> {</span>\n  <span class=\"keyword\">return</span> <span class=\"string\">'****-****-****-'</span> + cc.slice(cc.length-<span class=\"number\">4</span>, cc.length);\n}\n\n<span class=\"keyword\">var</span> AccountSchema = <span class=\"keyword\">new</span> Schema({\n  creditCardNumber: { type: String, get: obfuscate }\n});\n\n<span class=\"keyword\">var</span> Account = db.model(<span class=\"string\">'Account'</span>, AccountSchema);\n\nAccount.findById(id, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, found)</span> {</span>\n  console.log(found.creditCardNumber); <span class=\"comment\">// '****-****-****-1234'</span>\n});</pre> <p>Getters are also passed a second argument, the schematype on which the getter was defined. This allows for tailored behavior based on options passed in the schema.</p> <pre data-language=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inspector</span> <span class=\"params\">(val, schematype)</span> {</span>\n  <span class=\"keyword\">if</span> (schematype.options.required) {\n    <span class=\"keyword\">return</span> schematype.path + <span class=\"string\">' is required'</span>;\n  } <span class=\"keyword\">else</span> {\n    <span class=\"keyword\">return</span> schematype.path + <span class=\"string\">' is not'</span>;\n  }\n}\n\n<span class=\"keyword\">var</span> VirusSchema = <span class=\"keyword\">new</span> Schema({\n  name: { type: String, required: <span class=\"literal\">true</span>, get: inspector },\n  taxonomy: { type: String, get: inspector }\n})\n\n<span class=\"keyword\">var</span> Virus = db.model(<span class=\"string\">'Virus'</span>, VirusSchema);\n\nVirus.findById(id, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, virus)</span> {</span>\n  console.log(virus.name);     <span class=\"comment\">// name is required</span>\n  console.log(virus.taxonomy); <span class=\"comment\">// taxonomy is not</span>\n})</pre>\n</div>\n<h3 id=\"schematype_SchemaType-index\">SchemaType#index(options)</h3>\n<p>Declares the index options for this schematype.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>options</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#schematype_SchemaType\">SchemaType</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Schema({ name: { type: String, index: <span class=\"literal\">true</span> })\n<span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Schema({ loc: { type: [Number], index: <span class=\"string\">'hashed'</span> })\n<span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Schema({ loc: { type: [Number], index: <span class=\"string\">'2d'</span>, sparse: <span class=\"literal\">true</span> })\n<span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Schema({ loc: { type: [Number], index: { type: <span class=\"string\">'2dsphere'</span>, sparse: <span class=\"literal\">true</span> }})\n<span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Schema({ date: { type: Date, index: { unique: <span class=\"literal\">true</span>, expires: <span class=\"string\">'1d'</span> }})\nSchema.path(<span class=\"string\">'my.path'</span>).index(<span class=\"literal\">true</span>);\nSchema.path(<span class=\"string\">'my.date'</span>).index({ expires: <span class=\"number\">60</span> });\nSchema.path(<span class=\"string\">'my.path'</span>).index({ unique: <span class=\"literal\">true</span>, sparse: <span class=\"literal\">true</span> });</pre> <h4>NOTE:</h4> <p><em>Indexes are created in the background by default. Specify <code>background: false</code> to override.</em></p> <p><a href=\"http://www.mongodb.org/display/DOCS/Indexes#Indexes-CompoundKeysIndexes\">Direction doesn't matter for single key indexes</a></p>\n</div>\n<h3 id=\"schematype_SchemaType-required\">SchemaType#required(required, [message])</h3>\n<p>Adds a required validator to this SchemaType. The validator gets added<br>to the front of this SchemaType's validators array using <code>unshift()</code>.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>required</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span><span>enable/disable the validator</span>\n</li>\n<li>\n<code>[message]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>optional custom error message</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#schematype_SchemaType\">SchemaType</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"#error_messages_MongooseError-messages\" title=\"Customized Error Messages\">Customized Error Messages</a></li>\n<li><a href=\"#schema_array_SchemaArray.checkRequired\" title=\"SchemaArray#checkRequired\">SchemaArray#checkRequired</a></li>\n<li><a href=\"#schema_boolean_SchemaBoolean-checkRequired\" title=\"SchemaBoolean#checkRequired\">SchemaBoolean#checkRequired</a></li>\n<li><a href=\"#schema_buffer_SchemaBuffer.schemaName\" title=\"SchemaBuffer#checkRequired\">SchemaBuffer#checkRequired</a></li>\n<li><a href=\"#schema_number_SchemaNumber-min\" title=\"SchemaNumber#checkRequired\">SchemaNumber#checkRequired</a></li>\n<li><a href=\"#schema_objectid_ObjectId-auto\" title=\"SchemaObjectId#checkRequired\">SchemaObjectId#checkRequired</a></li>\n<li><a href=\"#schema_string_SchemaString-checkRequired\" title=\"SchemaString#checkRequired\">SchemaString#checkRequired</a></li>\n</ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Schema({ born: { type: Date, required: <span class=\"literal\">true</span> })\n\n<span class=\"comment\">// or with custom error message</span>\n\n<span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Schema({ born: { type: Date, required: <span class=\"string\">'{PATH} is required!'</span> })\n\n<span class=\"comment\">// or through the path API</span>\n\nSchema.path(<span class=\"string\">'name'</span>).required(<span class=\"literal\">true</span>);\n\n<span class=\"comment\">// with custom error messaging</span>\n\nSchema.path(<span class=\"string\">'name'</span>).required(<span class=\"literal\">true</span>, <span class=\"string\">'grrr :( '</span>);\n\n<span class=\"comment\">// or make a path conditionally required based on a function</span>\n<span class=\"keyword\">var</span> isOver18 = <span class=\"keyword\">function</span>() { <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.age &amp;gt;= <span class=\"number\">18</span>; };\nSchema.path(<span class=\"string\">'voterRegistrationId'</span>).required(isOver18);</pre> <p>The required validator uses the SchemaType's <code>checkRequired</code> function to<br>determine whether a given value satisfies the required validator. By default,<br>a value satisfies the required validator if <code>val != null</code> (that is, if<br>the value is not null nor undefined). However, most built-in mongoose schema<br>types override the default <code>checkRequired</code> function:</p>\n</div>\n<h3 id=\"schematype_SchemaType\">SchemaType(path, [options], [instance])</h3>\n<p>SchemaType constructor</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>path</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>[options]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>[instance]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n</ul>\n</div>\n\n<h3 id=\"schematype_SchemaType-select\">SchemaType#select(val)</h3>\n<p>Sets default <code>select()</code> behavior for this path.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>val</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#schematype_SchemaType\">SchemaType</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<p>Set to <code>true</code> if this path should always be included in the results, <code>false</code> if it should be excluded by default. This setting can be overridden at the query level.</p> <h4>Example:</h4> <pre data-language=\"javascript\">T = db.model(<span class=\"string\">'T'</span>, <span class=\"keyword\">new</span> Schema({ x: { type: String, select: <span class=\"literal\">true</span> }}));\nT.find(..); <span class=\"comment\">// field x will always be selected ..</span>\n<span class=\"comment\">// .. unless overridden;</span>\nT.find().select(<span class=\"string\">'-x'</span>).exec(callback);</pre>\n</div>\n<h3 id=\"schematype_SchemaType-set\">SchemaType#set(fn)</h3>\n<p>Adds a setter to this schematype.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>fn</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#schematype_SchemaType\">SchemaType</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">capitalize</span> <span class=\"params\">(val)</span> {</span>\n  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> val !== <span class=\"string\">'string'</span>) val = <span class=\"string\">''</span>;\n  <span class=\"keyword\">return</span> val.charAt(<span class=\"number\">0</span>).toUpperCase() + val.substring(<span class=\"number\">1</span>);\n}\n\n<span class=\"comment\">// defining within the schema</span>\n<span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Schema({ name: { type: String, set: capitalize }})\n\n<span class=\"comment\">// or by retreiving its SchemaType</span>\n<span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Schema({ name: String })\ns.path(<span class=\"string\">'name'</span>).set(capitalize)</pre> <p>Setters allow you to transform the data before it gets to the raw mongodb document and is set as a value on an actual key.</p> <p>Suppose you are implementing user registration for a website. Users provide an email and password, which gets saved to mongodb. The email is a string that you will want to normalize to lower case, in order to avoid one email having more than one account -- e.g., otherwise, <a href=\"mailto:avenue@q.com\">avenue@q.com</a> can be registered for 2 accounts via <a href=\"mailto:avenue@q.com\">avenue@q.com</a> and <a href=\"mailto:AvEnUe@Q.CoM\">AvEnUe@Q.CoM</a>.</p> <p>You can set up email lower case normalization easily via a Mongoose setter.</p> <pre data-language=\"javascript\">function toLower (v) {\n  return v.toLowerCase();\n}\n\nvar UserSchema = new Schema({\n  email: { type: String, set: toLower }\n})\n\nvar User = db.model('User', UserSchema)\n\nvar user = new User({email: '<a href=\"mailto:AVENUE@Q.COM\">AVENUE@Q.COM</a>'})\nconsole.log(user.email); // '<a href=\"mailto:avenue@q.com\">avenue@q.com</a>'\n\n// or\nvar user = new User\nuser.email = '<a href=\"mailto:Avenue@Q.com\">Avenue@Q.com</a>'\nconsole.log(user.email) // '<a href=\"mailto:avenue@q.com\">avenue@q.com</a>'\n</pre> <p>As you can see above, setters allow you to transform the data before it gets to the raw mongodb document and is set as a value on an actual key.</p> <p><em>NOTE: we could have also just used the built-in <code>lowercase: true</code> SchemaType option instead of defining our own function.</em></p> <pre data-language=\"javascript\"><span class=\"keyword\">new</span> Schema({ email: { type: String, lowercase: <span class=\"literal\">true</span> }})</pre> <p>Setters are also passed a second argument, the schematype on which the setter was defined. This allows for tailored behavior based on options passed in the schema.</p> <pre data-language=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inspector</span> <span class=\"params\">(val, schematype)</span> {</span>\n  <span class=\"keyword\">if</span> (schematype.options.required) {\n    <span class=\"keyword\">return</span> schematype.path + <span class=\"string\">' is required'</span>;\n  } <span class=\"keyword\">else</span> {\n    <span class=\"keyword\">return</span> val;\n  }\n}\n\n<span class=\"keyword\">var</span> VirusSchema = <span class=\"keyword\">new</span> Schema({\n  name: { type: String, required: <span class=\"literal\">true</span>, set: inspector },\n  taxonomy: { type: String, set: inspector }\n})\n\n<span class=\"keyword\">var</span> Virus = db.model(<span class=\"string\">'Virus'</span>, VirusSchema);\n<span class=\"keyword\">var</span> v = <span class=\"keyword\">new</span> Virus({ name: <span class=\"string\">'Parvoviridae'</span>, taxonomy: <span class=\"string\">'Parvovirinae'</span> });\n\nconsole.log(v.name);     <span class=\"comment\">// name is required</span>\nconsole.log(v.taxonomy); <span class=\"comment\">// Parvovirinae</span></pre>\n</div>\n<h3 id=\"schematype_SchemaType-sparse\">SchemaType#sparse(bool)</h3>\n<p>Declares a sparse index.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>bool</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#schematype_SchemaType\">SchemaType</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Schema({ name: { type: String, sparse: <span class=\"literal\">true</span> })\nSchema.path(<span class=\"string\">'name'</span>).index({ sparse: <span class=\"literal\">true</span> });</pre>\n</div>\n<h3 id=\"schematype_SchemaType-text\">SchemaType#text(bool)</h3>\n<p>Declares a full text index.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>bool</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#schematype_SchemaType\">SchemaType</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h3>Example:</h3> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Schema({name : {type: String, text : <span class=\"literal\">true</span> })\n Schema.path(<span class=\"string\">'name'</span>).index({text : <span class=\"literal\">true</span>});</pre>\n</div>\n<h3 id=\"schematype_SchemaType-unique\">SchemaType#unique(bool)</h3>\n<p>Declares an unique index.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>bool</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#schematype_SchemaType\">SchemaType</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> s = <span class=\"keyword\">new</span> Schema({ name: { type: String, unique: <span class=\"literal\">true</span> }});\nSchema.path(<span class=\"string\">'name'</span>).index({ unique: <span class=\"literal\">true</span> });</pre> <p><em>NOTE: violating the constraint returns an <code>E11000</code> error from MongoDB when saving, not a Mongoose validation error.</em></p>\n</div>\n<h3 id=\"schematype_SchemaType-validate\">SchemaType#validate(obj, [errorMsg], [type])</h3>\n<p>Adds validator(s) for this document path.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>obj</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/RegExp\">RegExp</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>validator</span>\n</li>\n<li>\n<code>[errorMsg]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>optional error message</span>\n</li>\n<li>\n<code>[type]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>optional validator type</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#schematype_SchemaType\">SchemaType</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<p>Validators always receive the value to validate as their first argument and must return <code>Boolean</code>. Returning <code>false</code> means validation failed.</p> <p>The error message argument is optional. If not passed, the <a href=\"#error_messages_MongooseError-messages\">default generic error message template</a> will be used.</p> <h4>Examples:</h4> <pre data-language=\"javascript\"><span class=\"comment\">// make sure every value is equal to \"something\"</span>\n<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">validator</span> <span class=\"params\">(val)</span> {</span>\n  <span class=\"keyword\">return</span> val == <span class=\"string\">'something'</span>;\n}\n<span class=\"keyword\">new</span> Schema({ name: { type: String, validate: validator }});\n\n<span class=\"comment\">// with a custom error message</span>\n\n<span class=\"keyword\">var</span> custom = [validator, <span class=\"string\">'Uh oh, {PATH} does not equal \"something\".'</span>]\n<span class=\"keyword\">new</span> Schema({ name: { type: String, validate: custom }});\n\n<span class=\"comment\">// adding many validators at a time</span>\n\n<span class=\"keyword\">var</span> many = [\n    { validator: validator, msg: <span class=\"string\">'uh oh'</span> }\n  , { validator: anotherValidator, msg: <span class=\"string\">'failed'</span> }\n]\n<span class=\"keyword\">new</span> Schema({ name: { type: String, validate: many }});\n\n<span class=\"comment\">// or utilizing SchemaType methods directly:</span>\n\n<span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({ name: <span class=\"string\">'string'</span> });\nschema.path(<span class=\"string\">'name'</span>).validate(validator, <span class=\"string\">'validation of `{PATH}` failed with value `{VALUE}`'</span>);</pre> <h4>Error message templates:</h4> <p>From the examples above, you may have noticed that error messages support basic templating. There are a few other template keywords besides <code>{PATH}</code> and <code>{VALUE}</code> too. To find out more, details are available <a href=\"#error_messages_MongooseError-messages\">here</a></p> <h4>Asynchronous validation:</h4> <p>Passing a validator function that receives two arguments tells mongoose that the validator is an asynchronous validator. The first argument passed to the validator function is the value being validated. The second argument is a callback function that must called when you finish validating the value and passed either <code>true</code> or <code>false</code> to communicate either success or failure respectively.</p> <pre data-language=\"javascript\">schema.path(<span class=\"string\">'name'</span>).validate(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(value, respond)</span> {</span>\n  doStuff(value, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n    ...\n    respond(<span class=\"literal\">false</span>); <span class=\"comment\">// validation failed</span>\n  })\n}, <span class=\"string\">'{PATH} failed validation.'</span>);\n\n<span class=\"comment\">// or with dynamic message</span>\n\nschema.path(<span class=\"string\">'name'</span>).validate(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(value, respond)</span> {</span>\n  doStuff(value, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n    ...\n    respond(<span class=\"literal\">false</span>, <span class=\"string\">'this message gets to the validation error'</span>);\n  });\n}, <span class=\"string\">'this message does not matter'</span>);</pre> <p>You might use asynchronous validators to retreive other documents from the database to validate against or to meet other I/O bound validation needs.</p> <p>Validation occurs <code>pre('save')</code> or whenever you manually execute <a href=\"#document_Document-validate\">document#validate</a>.</p> <p>If validation fails during <code>pre('save')</code> and no callback was passed to receive the error, an <code>error</code> event will be emitted on your Models associated db <a href=\"#connection_Connection\">connection</a>, passing the validation error object along.</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> conn = mongoose.createConnection(..);\nconn.on(<span class=\"string\">'error'</span>, handleError);\n\n<span class=\"keyword\">var</span> Product = conn.model(<span class=\"string\">'Product'</span>, yourSchema);\n<span class=\"keyword\">var</span> dvd = <span class=\"keyword\">new</span> Product(..);\ndvd.save(); <span class=\"comment\">// emits error on the `conn` above</span></pre> <p>If you desire handling these errors at the Model level, attach an <code>error</code> listener to your Model and the event will instead be emitted there.</p> <pre data-language=\"javascript\"><span class=\"comment\">// registering an error listener on the Model lets us handle errors more locally</span>\nProduct.on(<span class=\"string\">'error'</span>, handleError);</pre>\n</div>\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/promise.js\" id=\"promise-js\">promise.js</a></h2>\n<h3 id=\"promise_Promise-addBack\">Promise#addBack(listener)</h3>\n<p>Adds a single function as a listener to both err and complete.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>listener</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#promise_Promise\">Promise</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<p>It will be executed with traditional node.js argument position when the promise is resolved.</p> <pre data-language=\"javascript\">promise.addBack(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, args...)</span> {</span>\n  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err);\n  console.log(<span class=\"string\">'success'</span>);\n})</pre> <p>Alias of <a href=\"https://github.com/aheckmann/mpromise#onresolve\">mpromise#onResolve</a>.</p> <p><em>Deprecated. Use <code>onResolve</code> instead.</em></p>\n</div>\n<h3 id=\"promise_Promise-addCallback\">Promise#addCallback(listener)</h3>\n<p>Adds a listener to the <code>complete</code> (success) event.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>listener</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#promise_Promise\">Promise</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<p>Alias of <a href=\"https://github.com/aheckmann/mpromise#onfulfill\">mpromise#onFulfill</a>.</p> <p><em>Deprecated. Use <code>onFulfill</code> instead.</em></p>\n</div>\n<h3 id=\"promise_Promise-addErrback\">Promise#addErrback(listener)</h3>\n<p>Adds a listener to the <code>err</code> (rejected) event.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>listener</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#promise_Promise\">Promise</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<p>Alias of <a href=\"https://github.com/aheckmann/mpromise#onreject\">mpromise#onReject</a>.</p> <p><em>Deprecated. Use <code>onReject</code> instead.</em></p>\n</div>\n<h3 id=\"promise_Promise-catch\">Promise#catch(onReject)</h3>\n<p>ES6-style <code>.catch()</code> shorthand</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>onReject</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#promise_Promise\">Promise</a>&gt; </span>\n</li></ul>\n</div>\n\n<h3 id=\"promise_Promise-end\">Promise#end()</h3>\n<p>Signifies that this promise was the last in a chain of <code>then()s</code>: if a handler passed to the call to <code>then</code> which produced this promise throws, the exception will go uncaught.</p>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"https://github.com/aheckmann/mpromise#end\" title=\"mpromise#end\">mpromise#end</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Promise;\np.then(<span class=\"keyword\">function</span>(){ <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">'shucks'</span>) });\nsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n  p.fulfill();\n  <span class=\"comment\">// error was caught and swallowed by the promise returned from</span>\n  <span class=\"comment\">// p.then(). we either have to always register handlers on</span>\n  <span class=\"comment\">// the returned promises or we can do the following...</span>\n}, <span class=\"number\">10</span>);\n\n<span class=\"comment\">// this time we use .end() which prevents catching thrown errors</span>\n<span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Promise;\n<span class=\"keyword\">var</span> p2 = p.then(<span class=\"keyword\">function</span>(){ <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">'shucks'</span>) }).end(); <span class=\"comment\">// &amp;lt;--</span>\nsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span>\n  p.fulfill(); <span class=\"comment\">// throws \"shucks\"</span>\n}, <span class=\"number\">10</span>);</pre>\n</div>\n<h3 id=\"promise_Promise-error\">Promise#error(err)</h3>\n<p>Rejects this promise with <code>err</code>.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>err</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error\">Error</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#promise_Promise\">Promise</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<p>If the promise has already been fulfilled or rejected, not action is taken.</p> <p>Differs from <a href=\"#promise_Promise-reject\">#reject</a> by first casting <code>err</code> to an <code>Error</code> if it is not <code>instanceof Error</code>.</p>\n</div>\n<h3 id=\"promise_Promise-on\">Promise#on(event, listener)</h3>\n<p>Adds <code>listener</code> to the <code>event</code>.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>event</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>listener</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#promise_Promise\">Promise</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"https://github.com/aheckmann/mpromise#on\" title=\"mpromise#on\">mpromise#on</a></li></ul>\n</div>\n<div class=\"description\"><p>If <code>event</code> is either the success or failure event and the event has already been emitted, the<code>listener</code> is called immediately and passed the results of the original emitted event.</p></div>\n<h3 id=\"promise_Promise\">Promise(fn)</h3>\n<p>Promise constructor.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>fn</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span><span>a function which will be called when the promise is resolved that accepts <code>fn(err, ...){}</code> as signature</span>\n</li></ul>\n</div>\n<div class=\"inherits\">\n<h4>Inherits:</h4>\n<ul><li><a href=\"https://github.com/aheckmann/mpromise\" title=\"mpromise\">mpromise</a></li></ul>\n</div>\n<div class=\"events\">\n<h4>Events:</h4>\n<ul>\n<li><p><code>err</code>: Emits when the promise is rejected</p></li>\n<li><p><code>complete</code>: Emits when the promise is fulfilled</p></li>\n</ul>\n</div>\n<div class=\"description\">\n<p>Promises are returned from executed queries. Example:</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> query = Candy.find({ bar: <span class=\"literal\">true</span> });\n<span class=\"keyword\">var</span> promise = query.exec();</pre> <p>DEPRECATED. Mongoose 5.0 will use native promises by default (or bluebird,<br>if native promises are not present) but still<br>support plugging in your own ES6-compatible promises library. Mongoose 5.0<br>will <strong>not</strong> support mpromise.</p>\n</div>\n<h3 id=\"promise_Promise-reject\">Promise#reject(reason)</h3>\n<p>Rejects this promise with <code>reason</code>.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>reason</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error\">Error</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#promise_Promise\">Promise</a>&gt; </span><span>this</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"https://github.com/aheckmann/mpromise#reject\" title=\"mpromise#reject\">mpromise#reject</a></li></ul>\n</div>\n<div class=\"description\"><p>If the promise has already been fulfilled or rejected, not action is taken.</p></div>\n<h3 id=\"promise_Promise-resolve\">Promise#resolve([err], [val])</h3>\n<p>Resolves this promise to a rejected state if <code>err</code> is passed or a fulfilled state if no <code>err</code> is passed.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[err]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error\">Error</a>&gt; </span><span>error or null</span>\n</li>\n<li>\n<code>[val]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>value to fulfill the promise with</span>\n</li>\n</ul>\n</div>\n<div class=\"description\">\n<p>If the promise has already been fulfilled or rejected, not action is taken.</p> <p><code>err</code> will be cast to an Error if not already instanceof Error.</p> <p><em>NOTE: overrides <a href=\"https://github.com/aheckmann/mpromise#resolve\">mpromise#resolve</a> to provide error casting.</em></p>\n</div>\n<h3 id=\"promise_Promise-then\">Promise#then(onFulFill, onReject)</h3>\n<p>Creates a new promise and returns it. If <code>onFulfill</code> or <code>onReject</code> are passed, they are added as SUCCESS/ERROR callbacks to this promise after the nextTick.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>onFulFill</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n<li>\n<code>onReject</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#promise_Promise\">Promise</a>&gt; </span><span>newPromise</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"https://github.com/promises-aplus/promises-spec\" title=\"promises-A+\">promises-A+</a></li>\n<li><a href=\"https://github.com/aheckmann/mpromise#then\" title=\"mpromise#then\">mpromise#then</a></li>\n</ul>\n</div>\n<div class=\"description\">\n<p>Conforms to <a href=\"https://github.com/promises-aplus/promises-spec\">promises/A+</a> specification.</p> <h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> promise = Meetups.find({ tags: <span class=\"string\">'javascript'</span> }).select(<span class=\"string\">'_id'</span>).exec();\npromise.then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(meetups)</span> {</span>\n  <span class=\"keyword\">var</span> ids = meetups.map(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(m)</span> {</span>\n    <span class=\"keyword\">return</span> m._id;\n  });\n  <span class=\"keyword\">return</span> People.find({ meetups: { $<span class=\"keyword\">in</span>: ids }).exec();\n}).then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(people)</span> {</span>\n  <span class=\"keyword\">if</span> (people.length &amp;lt; <span class=\"number\">10000</span>) {\n    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">'Too few people!!!'</span>);\n  } <span class=\"keyword\">else</span> {\n    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">'Still need more people!!!'</span>);\n  }\n}).then(<span class=\"literal\">null</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n  assert.ok(err <span class=\"keyword\">instanceof</span> Error);\n});</pre>\n</div>\n<h3 id=\"promise_Promise.complete\">Promise.complete(args)</h3>\n<p>Fulfills this promise with passed arguments.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>args</code><span class=\"types\"> &lt;T&gt; </span>\n</li></ul>\n</div>\n<p>Alias of <a href=\"https://github.com/aheckmann/mpromise#fulfill\">mpromise#fulfill</a>.</p> <p><em>Deprecated. Use <code>fulfill</code> instead.</em></p>\n<h3 id=\"promise_Promise.ES6\">Promise.ES6(resolver)</h3>\n<p>ES6-style promise constructor wrapper around mpromise.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>resolver</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#promise_Promise\">Promise</a>&gt; </span><span>new promise</span>\n</li></ul>\n</div>\n<h3 id=\"promise_Promise.fulfill\">Promise.fulfill(args)</h3>\n<p>Fulfills this promise with passed arguments.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>args</code><span class=\"types\"> &lt;T&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"https://github.com/aheckmann/mpromise#fulfill\">https://github.com/aheckmann/mpromise#fulfill</a></li></ul>\n</div>\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/ES6Promise.js\" id=\"ES6Promise-js\">ES6Promise.js</a></h2>\n<h3 id=\"ES6Promise_ES6Promise\">ES6Promise(fn)</h3>\n<p>ES6 Promise wrapper constructor.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>fn</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span><span>a function which will be called when the promise is resolved that accepts <code>fn(err, ...){}</code> as signature</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<p>Promises are returned from executed queries. Example:</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> query = Candy.find({ bar: <span class=\"literal\">true</span> });\n<span class=\"keyword\">var</span> promise = query.exec();</pre> <p>DEPRECATED. Mongoose 5.0 will use native promises by default (or bluebird,<br>if native promises are not present) but still<br>support plugging in your own ES6-compatible promises library. Mongoose 5.0<br>will <strong>not</strong> support mpromise.</p>\n</div>\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/model.js\" id=\"model-js\">model.js</a></h2>\n<h3 id=\"model_Model-$where\">Model#$where(argument)</h3>\n<p>Creates a <code>Query</code> and specifies a <code>$where</code> condition.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>argument</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span><span>is a javascript string or anonymous function</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"#query_Query-%24where\" title=\"Query.$where\">Query.$where</a></li></ul>\n</div>\n<div class=\"description\">\n<p>Sometimes you need to query for things in mongodb using a JavaScript expression. You can do so via <code>find({ $where: javascript })</code>, or you can use the mongoose shortcut method $where via a Query chain or from your mongoose Model.</p> <pre data-language=\"javascript\">Blog.$where(<span class=\"string\">'this.username.indexOf(\"val\") !== -1'</span>).exec(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, docs)</span> {</span>});</pre>\n</div>\n<h3 id=\"model_Model-increment\">Model#increment()</h3>\n<p>Signal that we desire an increment of this documents version.</p>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"guide#versionKey\" title=\"versionKeys\">versionKeys</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\">Model.findById(id, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, doc)</span> {</span>\n  doc.increment();\n  doc.save(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span> .. })\n})</pre>\n</div>\n<h3 id=\"model_Model-model\">Model#model(name)</h3>\n<p>Returns another Model instance.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>name</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>model name</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> doc = <span class=\"keyword\">new</span> Tank;\ndoc.model(<span class=\"string\">'User'</span>).findById(id, callback);</pre>\n</div>\n<h3 id=\"model_Model\">Model(doc)</h3>\n<p>Model constructor</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>doc</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>values with which to create the document</span>\n</li></ul>\n</div>\n<div class=\"inherits\">\n<h4>Inherits:</h4>\n<ul><li><a href=\"api#document-js\" title=\"Document\">Document</a></li></ul>\n</div>\n<div class=\"events\">\n<h4>Events:</h4>\n<ul>\n<li><p><code>error</code>: If listening to this event, it is emitted when a document was saved without passing a callback and an <code>error</code> occurred. If not listening, the event bubbles to the connection used to create this Model.</p></li>\n<li><p><code>index</code>: Emitted after <code>Model#ensureIndexes</code> completes. If an error occurred it is passed with the event.</p></li>\n<li><p><code>index-single-start</code>: Emitted when an individual index starts within <code>Model#ensureIndexes</code>. The fields and options being used to build the index are also passed with the event.</p></li>\n<li><p><code>index-single-done</code>: Emitted when an individual index finishes within <code>Model#ensureIndexes</code>. If an error occurred it is passed with the event. The fields, options, and index name are also passed.</p></li>\n</ul>\n</div>\n<div class=\"description\"><p>Provides the interface to MongoDB collections as well as creates document instances.</p></div>\n<h3 id=\"model_Model-remove\">Model#remove([fn])</h3>\n<p>Removes this document from the db.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>[fn]</code><span class=\"types\"> &lt;<a href=\"#function(err\">function(err</a>, <a href=\"#product)\">product)</a>&gt; </span><span>optional callback</span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#promise_Promise\">Promise</a>&gt; </span><span>Promise</span>\n</li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\">product.remove(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, product)</span> {</span>\n  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err);\n  Product.findById(product._id, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, product)</span> {</span>\n    console.log(product) <span class=\"comment\">// null</span>\n  })\n})</pre> <p>As an extra measure of flow control, remove will return a Promise (bound to <code>fn</code> if passed) so it could be chained, or hooked to recive errors</p> <h4>Example:</h4> <pre data-language=\"javascript\">product.remove().then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(product)</span> {</span>\n   ...\n}).onRejected(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n   assert.ok(err)\n})</pre>\n</div>\n<h3 id=\"model_Model-save\">Model#save([options], [options.safe], [options.validateBeforeSave], [fn])</h3>\n<p>Saves this document.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[options]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>options optional options</span>\n</li>\n<li>\n<code>[options.safe]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>overrides <a href=\"http://mongoosejs.com//docs/guide.html#safe\">schema's safe option</a></span>\n</li>\n<li>\n<code>[options.validateBeforeSave]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Boolean\">Boolean</a>&gt; </span><span>set to false to save without validating.</span>\n</li>\n<li>\n<code>[fn]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span><span>optional callback</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#promise_Promise\">Promise</a>&gt; </span><span>Promise</span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"middleware\" title=\"middleware\">middleware</a></li></ul>\n</div>\n<div class=\"description\">\n<h4>Example:</h4> <pre data-language=\"javascript\">product.sold = Date.now();\nproduct.save(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, product, numAffected)</span> {</span>\n  <span class=\"keyword\">if</span> (err) ..\n})</pre> <p>The callback will receive three parameters</p> <ol> <li>\n<code>err</code> if an error occurred</li> <li>\n<code>product</code> which is the saved <code>product</code>\n</li> <li>\n<code>numAffected</code> will be 1 when the document was successfully persisted to MongoDB, otherwise 0. Unless you tweak mongoose's internals, you don't need to worry about checking this parameter for errors - checking <code>err</code> is sufficient to make sure your document was properly saved.</li> </ol> <p>As an extra measure of flow control, save will return a Promise.</p> <h4>Example:</h4> <pre data-language=\"javascript\">product.save().then(<span class=\"keyword\">function</span>(product) {\n   ...\n});</pre> <p>For legacy reasons, mongoose stores object keys in reverse order on initial<br>save. That is, <code>{ a: 1, b: 2 }</code> will be saved as <code>{ b: 2, a: 1 }</code> in<br>MongoDB. To override this behavior, set<br><a href=\"api#document_Document-toObject\">the <code>toObject.retainKeyOrder</code> option</a><br>to true on your schema.</p>\n</div>\n<h3 id=\"model_Model.aggregate\">Model.aggregate([...], [callback])</h3>\n<p>Performs <a href=\"http://docs.mongodb.org/manual/applications/aggregation/\">aggregations</a> on the models collection.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[...]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array\">Array</a>&gt; </span><span>aggregation pipeline operator(s) or operator array</span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#aggregate_Aggregate\">Aggregate</a>, <a href=\"#promise_Promise\">Promise</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"#aggregate_Aggregate\" title=\"Aggregate\">Aggregate</a></li>\n<li><a href=\"http://docs.mongodb.org/manual/applications/aggregation/\" title=\"MongoDB\">MongoDB</a></li>\n</ul>\n</div>\n<p>If a <code>callback</code> is passed, the <code>aggregate</code> is executed and a <code>Promise</code> is returned. If a callback is not passed, the <code>aggregate</code> itself is returned.</p> <h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"comment\">// Find the max balance of all accounts</span>\nUsers.aggregate(\n    { $group: { _id: <span class=\"literal\">null</span>, maxBalance: { $max: <span class=\"string\">'$balance'</span> }}}\n  , { $project: { _id: <span class=\"number\">0</span>, maxBalance: <span class=\"number\">1</span> }}\n  , <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, res)</span> {</span>\n  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err);\n  console.log(res); <span class=\"comment\">// [ { maxBalance: 98000 } ]</span>\n});\n\n<span class=\"comment\">// Or use the aggregation pipeline builder.</span>\nUsers.aggregate()\n  .group({ _id: <span class=\"literal\">null</span>, maxBalance: { $max: <span class=\"string\">'$balance'</span> } })\n  .select(<span class=\"string\">'-id maxBalance'</span>)\n  .exec(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, res)</span> {</span>\n    <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err);\n    console.log(res); <span class=\"comment\">// [ { maxBalance: 98 } ]</span>\n});</pre> <h4>NOTE:</h4> <ul> <li>Arguments are not cast to the model's schema because <code>$project</code> operators allow redefining the \"shape\" of the documents at any stage of the pipeline, which may leave documents in an incompatible format.</li> <li>The documents returned are plain javascript objects, not mongoose documents (since any shape of document can be returned).</li> <li>Requires MongoDB &gt;= 2.1</li> </ul>\n<h3 id=\"model_Model.count\">Model.count(conditions, [callback])</h3>\n<p>Counts number of matching documents in a database collection.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>conditions</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span>\n</li></ul>\n</div>\n<h4>Example:</h4> <pre data-language=\"javascript\">Adventure.count({ type: <span class=\"string\">'jungle'</span> }, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, count)</span> {</span>\n  <span class=\"keyword\">if</span> (err) ..\n  console.log(<span class=\"string\">'there are %d jungle adventures'</span>, count);\n});</pre>\n<h3 id=\"model_Model.create\">Model.create(doc(s), [callback])</h3>\n<p>Shortcut for saving one or more documents to the database.<br><code>MyModel.create(docs)</code> does <code>new MyModel(doc).save()</code> for every doc in<br>docs.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>doc(s)</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array\">Array</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>, <a href=\"#*\">*</a>&gt; </span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span><span>callback</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#promise_Promise\">Promise</a>&gt; </span>\n</li></ul>\n</div>\n<h2>Hooks Triggered</h2> <ul> <li><code>save()</code></li> </ul> <h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"comment\">// pass individual docs</span>\nCandy.create({ type: <span class=\"string\">'jelly bean'</span> }, { type: <span class=\"string\">'snickers'</span> }, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, jellybean, snickers)</span> {</span>\n  <span class=\"keyword\">if</span> (err) <span class=\"comment\">// ...</span>\n});\n\n<span class=\"comment\">// pass an array</span>\n<span class=\"keyword\">var</span> array = [{ type: <span class=\"string\">'jelly bean'</span> }, { type: <span class=\"string\">'snickers'</span> }];\nCandy.create(array, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, candies)</span> {</span>\n  <span class=\"keyword\">if</span> (err) <span class=\"comment\">// ...</span>\n\n  <span class=\"keyword\">var</span> jellybean = candies[<span class=\"number\">0</span>];\n  <span class=\"keyword\">var</span> snickers = candies[<span class=\"number\">1</span>];\n  <span class=\"comment\">// ...</span>\n});\n\n<span class=\"comment\">// callback is optional; use the returned promise if you like:</span>\n<span class=\"keyword\">var</span> promise = Candy.create({ type: <span class=\"string\">'jawbreaker'</span> });\npromise.then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(jawbreaker)</span> {</span>\n  <span class=\"comment\">// ...</span>\n})</pre>\n<h3 id=\"model_Model.discriminator\">Model.discriminator(name, schema)</h3>\n<p>Adds a discriminator type.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>name</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>discriminator model name</span>\n</li>\n<li>\n<code>schema</code><span class=\"types\"> &lt;<a href=\"#schema_Schema\">Schema</a>&gt; </span><span>discriminator model schema</span>\n</li>\n</ul>\n</div>\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">BaseSchema</span><span class=\"params\">()</span> {</span>\n  Schema.apply(<span class=\"keyword\">this</span>, arguments);\n\n  <span class=\"keyword\">this</span>.add({\n    name: String,\n    createdAt: Date\n  });\n}\nutil.inherits(BaseSchema, Schema);\n\n<span class=\"keyword\">var</span> PersonSchema = <span class=\"keyword\">new</span> BaseSchema();\n<span class=\"keyword\">var</span> BossSchema = <span class=\"keyword\">new</span> BaseSchema({ department: String });\n\n<span class=\"keyword\">var</span> Person = mongoose.model(<span class=\"string\">'Person'</span>, PersonSchema);\n<span class=\"keyword\">var</span> Boss = Person.discriminator(<span class=\"string\">'Boss'</span>, BossSchema);</pre>\n<h3 id=\"model_Model.distinct\">Model.distinct(field, [conditions], [callback])</h3>\n<p>Creates a Query for a <code>distinct</code> operation.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>field</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>[conditions]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>optional</span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span>\n</li></ul>\n</div>\n<p>Passing a <code>callback</code> immediately executes the query.</p> <h4>Example</h4> <pre data-language=\"javascript\">Link.distinct(<span class=\"string\">'url'</span>, { clicks: {$gt: <span class=\"number\">100</span>}}, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, result)</span> {</span>\n  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err);\n\n  assert(Array.isArray(result));\n  console.log(<span class=\"string\">'unique urls with more than 100 clicks'</span>, result);\n})\n\n<span class=\"keyword\">var</span> query = Link.distinct(<span class=\"string\">'url'</span>);\nquery.exec(callback);</pre>\n<h3 id=\"model_Model.ensureIndexes\">Model.ensureIndexes([options], [cb])</h3>\n<p>Sends <code>ensureIndex</code> commands to mongo for each index declared in the schema.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[options]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>internal options</span>\n</li>\n<li>\n<code>[cb]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span><span>optional callback</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#promise_Promise\">Promise</a>&gt; </span>\n</li></ul>\n</div>\n<h4>Example:</h4> <pre data-language=\"javascript\">Event.ensureIndexes(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err);\n});</pre> <p>After completion, an <code>index</code> event is emitted on this <code>Model</code> passing an error if one occurred.</p> <h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> eventSchema = <span class=\"keyword\">new</span> Schema({ thing: { type: <span class=\"string\">'string'</span>, unique: <span class=\"literal\">true</span> }})\n<span class=\"keyword\">var</span> Event = mongoose.model(<span class=\"string\">'Event'</span>, eventSchema);\n\nEvent.on(<span class=\"string\">'index'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n  <span class=\"keyword\">if</span> (err) console.error(err); <span class=\"comment\">// error occurred during index creation</span>\n})</pre> <p><em>NOTE: It is not recommended that you run this in production. Index creation may impact database performance depending on your load. Use with caution.</em></p> <p>The <code>ensureIndex</code> commands are not sent in parallel. This is to avoid the <code>MongoError: cannot add index with a background operation in progress</code> error. See <a href=\"https://github.com/Automattic/mongoose/issues/1365\">this ticket</a> for more information.</p>\n<h3 id=\"model_Model.find\">Model.find(conditions, [projection], [options], [callback])</h3>\n<p>Finds documents</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>conditions</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>[projection]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>optional fields to return (http://bit.ly/1HotzBo)</span>\n</li>\n<li>\n<code>[options]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>optional</span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"#query_Query-select\" title=\"field selection\">field selection</a></li>\n<li><a href=\"#promise-js\" title=\"promise\">promise</a></li>\n</ul>\n</div>\n<p>The <code>conditions</code> are cast to their respective SchemaTypes before the command is sent.</p> <h4>Examples:</h4> <pre data-language=\"javascript\"><span class=\"comment\">// named john and at least 18</span>\nMyModel.find({ name: <span class=\"string\">'john'</span>, age: { $gte: <span class=\"number\">18</span> }});\n\n<span class=\"comment\">// executes immediately, passing results to callback</span>\nMyModel.find({ name: <span class=\"string\">'john'</span>, age: { $gte: <span class=\"number\">18</span> }}, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, docs)</span> {</span>});\n\n<span class=\"comment\">// name LIKE john and only selecting the \"name\" and \"friends\" fields, executing immediately</span>\nMyModel.find({ name: <span class=\"regexp\">/john/i</span> }, <span class=\"string\">'name friends'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, docs)</span> {</span> })\n\n<span class=\"comment\">// passing options</span>\nMyModel.find({ name: <span class=\"regexp\">/john/i</span> }, <span class=\"literal\">null</span>, { skip: <span class=\"number\">10</span> })\n\n<span class=\"comment\">// passing options and executing immediately</span>\nMyModel.find({ name: <span class=\"regexp\">/john/i</span> }, <span class=\"literal\">null</span>, { skip: <span class=\"number\">10</span> }, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, docs)</span> {</span>});\n\n<span class=\"comment\">// executing a query explicitly</span>\n<span class=\"keyword\">var</span> query = MyModel.find({ name: <span class=\"regexp\">/john/i</span> }, <span class=\"literal\">null</span>, { skip: <span class=\"number\">10</span> })\nquery.exec(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, docs)</span> {</span>});\n\n<span class=\"comment\">// using the promise returned from executing a query</span>\n<span class=\"keyword\">var</span> query = MyModel.find({ name: <span class=\"regexp\">/john/i</span> }, <span class=\"literal\">null</span>, { skip: <span class=\"number\">10</span> });\n<span class=\"keyword\">var</span> promise = query.exec();\npromise.addBack(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, docs)</span> {</span>});</pre>\n<h3 id=\"model_Model.findById\">Model.findById(id, [projection], [options], [callback])</h3>\n<p>Finds a single document by its _id field. <code>findById(id)</code> is almost*<br>equivalent to <code>findOne({ _id: id })</code>.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>id</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>&gt; </span><span>value of &lt;code&gt;_id&lt;/code&gt; to query by</span>\n</li>\n<li>\n<code>[projection]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>optional fields to return (http://bit.ly/1HotzBo)</span>\n</li>\n<li>\n<code>[options]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>optional</span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"#query_Query-select\" title=\"field selection\">field selection</a></li>\n<li><a href=\"#query_Query-lean\" title=\"lean queries\">lean queries</a></li>\n</ul>\n</div>\n<p>The <code>id</code> is cast based on the Schema before sending the command.</p> <p>Note: <code>findById()</code> triggers <code>findOne</code> hooks.</p> <ul> <li>Except for how it treats <code>undefined</code>. Because the MongoDB driver deletes keys that have value <code>undefined</code>, <code>findById(undefined)</code> gets translated to <code>findById({ _id: null })</code>.</li> </ul> <h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"comment\">// find adventure by id and execute immediately</span>\nAdventure.findById(id, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, adventure)</span> {</span>});\n\n<span class=\"comment\">// same as above</span>\nAdventure.findById(id).exec(callback);\n\n<span class=\"comment\">// select only the adventures name and length</span>\nAdventure.findById(id, <span class=\"string\">'name length'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, adventure)</span> {</span>});\n\n<span class=\"comment\">// same as above</span>\nAdventure.findById(id, <span class=\"string\">'name length'</span>).exec(callback);\n\n<span class=\"comment\">// include all properties except for `length`</span>\nAdventure.findById(id, <span class=\"string\">'-length'</span>).exec(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, adventure)</span> {</span>});\n\n<span class=\"comment\">// passing options (in this case return the raw js objects, not mongoose documents by passing `lean`</span>\nAdventure.findById(id, <span class=\"string\">'name'</span>, { lean: <span class=\"literal\">true</span> }, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, doc)</span> {</span>});\n\n<span class=\"comment\">// same as above</span>\nAdventure.findById(id, <span class=\"string\">'name'</span>).lean().exec(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, doc)</span> {</span>});</pre>\n<h3 id=\"model_Model.findByIdAndRemove\">Model.findByIdAndRemove(id, [options], [callback])</h3>\n<p>Issue a mongodb findAndModify remove command by a document's _id field. <code>findByIdAndRemove(id, ...)</code> is equivalent to <code>findOneAndRemove({ _id: id }, ...)</code>.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>id</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>value of &lt;code&gt;_id&lt;/code&gt; to query by</span>\n</li>\n<li>\n<code>[options]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"#model_Model.findOneAndRemove\" title=\"Model.findOneAndRemove\">Model.findOneAndRemove</a></li>\n<li><a href=\"http://www.mongodb.org/display/DOCS/findAndModify+Command\" title=\"mongodb\">mongodb</a></li>\n</ul>\n</div>\n<p>Finds a matching document, removes it, passing the found document (if any) to the callback.</p> <p>Executes immediately if <code>callback</code> is passed, else a <code>Query</code> object is returned.</p> <h4>Options:</h4> <ul> <li>\n<code>sort</code>: if multiple docs are found by the conditions, sets the sort order to choose which doc to update</li> <li>\n<code>select</code>: sets the document fields to return</li> </ul> <h4>Examples:</h4> <pre data-language=\"javascript\">A.findByIdAndRemove(id, options, callback) <span class=\"comment\">// executes</span>\nA.findByIdAndRemove(id, options)  <span class=\"comment\">// return Query</span>\nA.findByIdAndRemove(id, callback) <span class=\"comment\">// executes</span>\nA.findByIdAndRemove(id) <span class=\"comment\">// returns Query</span>\nA.findByIdAndRemove()           <span class=\"comment\">// returns Query</span></pre>\n<h3 id=\"model_Model.findByIdAndUpdate\">Model.findByIdAndUpdate(id, [update], [options], [callback])</h3>\n<p>Issues a mongodb findAndModify update command by a document's _id field.<br><code>findByIdAndUpdate(id, ...)</code> is equivalent to <code>findOneAndUpdate({ _id: id }, ...)</code>.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>id</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Number\">Number</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>value of &lt;code&gt;_id&lt;/code&gt; to query by</span>\n</li>\n<li>\n<code>[update]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>[options]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"#model_Model.findOneAndUpdate\" title=\"Model.findOneAndUpdate\">Model.findOneAndUpdate</a></li>\n<li><a href=\"http://www.mongodb.org/display/DOCS/findAndModify+Command\" title=\"mongodb\">mongodb</a></li>\n</ul>\n</div>\n<p>Finds a matching document, updates it according to the <code>update</code> arg,<br>passing any <code>options</code>, and returns the found document (if any) to the<br>callback. The query executes immediately if <code>callback</code> is passed else a<br>Query object is returned.</p> <p>This function triggers <code>findOneAndUpdate</code> middleware.</p> <h4>Options:</h4> <ul> <li>\n<code>new</code>: bool - true to return the modified document rather than the original. defaults to false</li> <li>\n<code>upsert</code>: bool - creates the object if it doesn't exist. defaults to false.</li> <li>\n<code>runValidators</code>: if true, runs <a href=\"validation#update-validators\">update validators</a> on this command. Update validators validate the update operation against the model's schema.</li> <li>\n<code>setDefaultsOnInsert</code>: if this and <code>upsert</code> are true, mongoose will apply the <a href=\"defaults\">defaults</a> specified in the model's schema if a new document is created. This option only works on MongoDB &gt;= 2.4 because it relies on <a href=\"https://docs.mongodb.org/v2.4/reference/operator/update/setOnInsert/\">MongoDB's <code>$setOnInsert</code> operator</a>.</li> <li>\n<code>sort</code>: if multiple docs are found by the conditions, sets the sort order to choose which doc to update</li> <li>\n<code>select</code>: sets the document fields to return</li> </ul> <h4>Examples:</h4> <pre data-language=\"javascript\">A.findByIdAndUpdate(id, update, options, callback) <span class=\"comment\">// executes</span>\nA.findByIdAndUpdate(id, update, options)  <span class=\"comment\">// returns Query</span>\nA.findByIdAndUpdate(id, update, callback) <span class=\"comment\">// executes</span>\nA.findByIdAndUpdate(id, update)           <span class=\"comment\">// returns Query</span>\nA.findByIdAndUpdate()                     <span class=\"comment\">// returns Query</span></pre> <h4>Note:</h4> <p>All top level update keys which are not <code>atomic</code> operation names are treated as set operations:</p> <h4>Example:</h4> <pre data-language=\"javascript\">Model.findByIdAndUpdate(id, { name: <span class=\"string\">'jason borne'</span> }, options, callback)\n\n<span class=\"comment\">// is sent as</span>\nModel.findByIdAndUpdate(id, { $set: { name: <span class=\"string\">'jason borne'</span> }}, options, callback)</pre> <p>This helps prevent accidentally overwriting your document with <code>{ name: 'jason borne' }</code>.</p> <h4>Note:</h4> <p>Values are cast to their appropriate types when using the findAndModify helpers.<br>However, the below are never executed.</p> <ul> <li>defaults</li> <li>setters</li> </ul> <p><code>findAndModify</code> helpers support limited defaults and validation. You can<br>enable these by setting the <code>setDefaultsOnInsert</code> and <code>runValidators</code> options,<br>respectively.</p> <p>If you need full-fledged validation, use the traditional approach of first<br>retrieving the document.</p> <pre data-language=\"javascript\">Model.findById(id, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, doc)</span> {</span>\n  <span class=\"keyword\">if</span> (err) ..\n  doc.name = <span class=\"string\">'jason borne'</span>;\n  doc.save(callback);\n});</pre>\n<h3 id=\"model_Model.findOne\">Model.findOne([conditions], [projection], [options], [callback])</h3>\n<p>Finds one document.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[conditions]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>[projection]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>optional fields to return (http://bit.ly/1HotzBo)</span>\n</li>\n<li>\n<code>[options]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>optional</span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"#query_Query-select\" title=\"field selection\">field selection</a></li>\n<li><a href=\"#query_Query-lean\" title=\"lean queries\">lean queries</a></li>\n</ul>\n</div>\n<p>The <code>conditions</code> are cast to their respective SchemaTypes before the command is sent.</p> <h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"comment\">// find one iphone adventures - iphone adventures??</span>\nAdventure.findOne({ type: <span class=\"string\">'iphone'</span> }, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, adventure)</span> {</span>});\n\n<span class=\"comment\">// same as above</span>\nAdventure.findOne({ type: <span class=\"string\">'iphone'</span> }).exec(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, adventure)</span> {</span>});\n\n<span class=\"comment\">// select only the adventures name</span>\nAdventure.findOne({ type: <span class=\"string\">'iphone'</span> }, <span class=\"string\">'name'</span>, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, adventure)</span> {</span>});\n\n<span class=\"comment\">// same as above</span>\nAdventure.findOne({ type: <span class=\"string\">'iphone'</span> }, <span class=\"string\">'name'</span>).exec(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, adventure)</span> {</span>});\n\n<span class=\"comment\">// specify options, in this case lean</span>\nAdventure.findOne({ type: <span class=\"string\">'iphone'</span> }, <span class=\"string\">'name'</span>, { lean: <span class=\"literal\">true</span> }, callback);\n\n<span class=\"comment\">// same as above</span>\nAdventure.findOne({ type: <span class=\"string\">'iphone'</span> }, <span class=\"string\">'name'</span>, { lean: <span class=\"literal\">true</span> }).exec(callback);\n\n<span class=\"comment\">// chaining findOne queries (same as above)</span>\nAdventure.findOne({ type: <span class=\"string\">'iphone'</span> }).select(<span class=\"string\">'name'</span>).lean().exec(callback);</pre>\n<h3 id=\"model_Model.findOneAndRemove\">Model.findOneAndRemove(conditions, [options], [callback])</h3>\n<p>Issue a mongodb findAndModify remove command.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>conditions</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>[options]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://www.mongodb.org/display/DOCS/findAndModify+Command\" title=\"mongodb\">mongodb</a></li></ul>\n</div>\n<p>Finds a matching document, removes it, passing the found document (if any) to the callback.</p> <p>Executes immediately if <code>callback</code> is passed else a Query object is returned.</p> <h4>Options:</h4> <ul> <li>\n<code>sort</code>: if multiple docs are found by the conditions, sets the sort order to choose which doc to update</li> <li>\n<code>maxTimeMS</code>: puts a time limit on the query - requires mongodb &gt;= 2.6.0</li> <li>\n<code>select</code>: sets the document fields to return</li> </ul> <h4>Examples:</h4> <pre data-language=\"javascript\">A.findOneAndRemove(conditions, options, callback) <span class=\"comment\">// executes</span>\nA.findOneAndRemove(conditions, options)  <span class=\"comment\">// return Query</span>\nA.findOneAndRemove(conditions, callback) <span class=\"comment\">// executes</span>\nA.findOneAndRemove(conditions) <span class=\"comment\">// returns Query</span>\nA.findOneAndRemove()           <span class=\"comment\">// returns Query</span></pre> <p>Values are cast to their appropriate types when using the findAndModify helpers.<br>However, the below are never executed.</p> <ul> <li>defaults</li> <li>setters</li> </ul> <p><code>findAndModify</code> helpers support limited defaults and validation. You can<br>enable these by setting the <code>setDefaultsOnInsert</code> and <code>runValidators</code> options,<br>respectively.</p> <p>If you need full-fledged validation, use the traditional approach of first<br>retrieving the document.</p> <pre data-language=\"javascript\">Model.findById(id, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, doc)</span> {</span>\n  <span class=\"keyword\">if</span> (err) ..\n  doc.name = <span class=\"string\">'jason borne'</span>;\n  doc.save(callback);\n});</pre>\n<h3 id=\"model_Model.findOneAndUpdate\">Model.findOneAndUpdate([conditions], [update], [options], [callback])</h3>\n<p>Issues a mongodb findAndModify update command.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>[conditions]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>[update]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>[options]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://www.mongodb.org/display/DOCS/findAndModify+Command\" title=\"mongodb\">mongodb</a></li></ul>\n</div>\n<p>Finds a matching document, updates it according to the <code>update</code> arg, passing any <code>options</code>, and returns the found document (if any) to the callback. The query executes immediately if <code>callback</code> is passed else a Query object is returned.</p> <h4>Options:</h4> <ul> <li>\n<code>new</code>: bool - if true, return the modified document rather than the original. defaults to false (changed in 4.0)</li> <li>\n<code>upsert</code>: bool - creates the object if it doesn't exist. defaults to false.</li> <li>\n<code>fields</code>: {Object|String} - Field selection. Equivalent to <code>.select(fields).findOneAndUpdate()</code>\n</li> <li>\n<code>maxTimeMS</code>: puts a time limit on the query - requires mongodb &gt;= 2.6.0</li> <li>\n<code>sort</code>: if multiple docs are found by the conditions, sets the sort order to choose which doc to update</li> <li>\n<code>runValidators</code>: if true, runs <a href=\"validation#update-validators\">update validators</a> on this command. Update validators validate the update operation against the model's schema.</li> <li>\n<code>setDefaultsOnInsert</code>: if this and <code>upsert</code> are true, mongoose will apply the <a href=\"defaults\">defaults</a> specified in the model's schema if a new document is created. This option only works on MongoDB &gt;= 2.4 because it relies on <a href=\"https://docs.mongodb.org/v2.4/reference/operator/update/setOnInsert/\">MongoDB's <code>$setOnInsert</code> operator</a>.</li> <li>\n<code>passRawResult</code>: if true, passes the <a href=\"http://mongodb.github.io/node-mongodb-native/2.0/api/Collection.html#findAndModify\">raw result from the MongoDB driver as the third callback parameter</a>\n</li> </ul> <h4>Examples:</h4> <pre data-language=\"javascript\">A.findOneAndUpdate(conditions, update, options, callback) <span class=\"comment\">// executes</span>\nA.findOneAndUpdate(conditions, update, options)  <span class=\"comment\">// returns Query</span>\nA.findOneAndUpdate(conditions, update, callback) <span class=\"comment\">// executes</span>\nA.findOneAndUpdate(conditions, update)           <span class=\"comment\">// returns Query</span>\nA.findOneAndUpdate()                             <span class=\"comment\">// returns Query</span></pre> <h4>Note:</h4> <p>All top level update keys which are not <code>atomic</code> operation names are treated as set operations:</p> <h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> query = { name: <span class=\"string\">'borne'</span> };\nModel.findOneAndUpdate(query, { name: <span class=\"string\">'jason borne'</span> }, options, callback)\n\n<span class=\"comment\">// is sent as</span>\nModel.findOneAndUpdate(query, { $set: { name: <span class=\"string\">'jason borne'</span> }}, options, callback)</pre> <p>This helps prevent accidentally overwriting your document with <code>{ name: 'jason borne' }</code>.</p> <h4>Note:</h4> <p>Values are cast to their appropriate types when using the findAndModify helpers.<br>However, the below are never executed.</p> <ul> <li>defaults</li> <li>setters</li> </ul> <p><code>findAndModify</code> helpers support limited defaults and validation. You can<br>enable these by setting the <code>setDefaultsOnInsert</code> and <code>runValidators</code> options,<br>respectively.</p> <p>If you need full-fledged validation, use the traditional approach of first<br>retrieving the document.</p> <pre data-language=\"javascript\">Model.findById(id, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, doc)</span> {</span>\n  <span class=\"keyword\">if</span> (err) ..\n  doc.name = <span class=\"string\">'jason borne'</span>;\n  doc.save(callback);\n});</pre>\n<h3 id=\"model_Model.geoNear\">Model.geoNear(GeoJSON, options, [callback])</h3>\n<p>geoNear support for Mongoose</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>GeoJSON</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array\">Array</a>&gt; </span><span>point or legacy coordinate pair [x,y] to search near</span>\n</li>\n<li>\n<code>options</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>for the qurery</span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span><span>optional callback for the query</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#promise_Promise\">Promise</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"http://docs.mongodb.org/manual/core/2dsphere/\">http://docs.mongodb.org/manual/core/2dsphere/</a></li>\n<li><a href=\"http://mongodb.github.io/node-mongodb-native/api-generated/collection.html?highlight=geonear#geoNear\">http://mongodb.github.io/node-mongodb-native/api-generated/collection.html?highlight=geonear#geoNear</a></li>\n</ul>\n</div>\n<h4>Options:</h4> <ul> <li>\n<code>lean</code> {Boolean} return the raw object</li> <li>All options supported by the driver are also supported</li> </ul> <h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"comment\">// Legacy point</span>\nModel.geoNear([<span class=\"number\">1</span>,<span class=\"number\">3</span>], { maxDistance : <span class=\"number\">5</span>, spherical : <span class=\"literal\">true</span> }, <span class=\"keyword\">function</span>(err, results, stats) {\n   console.log(results);\n});\n\n<span class=\"comment\">// geoJson</span>\n<span class=\"keyword\">var</span> point = { type : <span class=\"string\">\"Point\"</span>, coordinates : [<span class=\"number\">9</span>,<span class=\"number\">9</span>] };\nModel.geoNear(point, { maxDistance : <span class=\"number\">5</span>, spherical : <span class=\"literal\">true</span> }, <span class=\"keyword\">function</span>(err, results, stats) {\n   console.log(results);\n});</pre>\n<h3 id=\"model_Model.geoSearch\">Model.geoSearch(conditions, options, [callback])</h3>\n<p>Implements <code>$geoSearch</code> functionality for Mongoose</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>conditions</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>an object that specifies the match condition (required)</span>\n</li>\n<li>\n<code>options</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>for the geoSearch, some (near, maxDistance) are required</span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span><span>optional callback</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#promise_Promise\">Promise</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"http://docs.mongodb.org/manual/reference/command/geoSearch/\">http://docs.mongodb.org/manual/reference/command/geoSearch/</a></li>\n<li><a href=\"http://docs.mongodb.org/manual/core/geohaystack/\">http://docs.mongodb.org/manual/core/geohaystack/</a></li>\n</ul>\n</div>\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> options = { near: [<span class=\"number\">10</span>, <span class=\"number\">10</span>], maxDistance: <span class=\"number\">5</span> };\nLocations.geoSearch({ type : <span class=\"string\">\"house\"</span> }, options, <span class=\"keyword\">function</span>(err, res) {\n  console.log(res);\n});</pre> <h4>Options:</h4> <ul> <li>\n<code>near</code> {Array} x,y point to search for</li> <li>\n<code>maxDistance</code> {Number} the maximum distance from the point near that a result can be</li> <li>\n<code>limit</code> {Number} The maximum number of results to return</li> <li>\n<code>lean</code> {Boolean} return the raw object instead of the Mongoose Model</li> </ul>\n<h3 id=\"model_Model.hydrate\">Model.hydrate(obj)</h3>\n<p>Shortcut for creating a new Document from existing raw data, pre-saved in the DB.<br>The document returned has no paths marked as modified initially.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul><li>\n<code>obj</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#document_Document\">Document</a>&gt; </span>\n</li></ul>\n</div>\n<h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"comment\">// hydrate previous data into a Mongoose document</span>\n<span class=\"keyword\">var</span> mongooseCandy = Candy.hydrate({ _id: <span class=\"string\">'54108337212ffb6d459f854c'</span>, type: <span class=\"string\">'jelly bean'</span> });</pre>\n<h3 id=\"model_Model.insertMany\">Model.insertMany(doc(s), [callback])</h3>\n<p>Shortcut for validating an array of documents and inserting them into<br>MongoDB if they're all valid. This function is faster than <code>.create()</code><br>because it only sends one operation to the server, rather than one for each<br>document.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>doc(s)</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array\">Array</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>, <a href=\"#*\">*</a>&gt; </span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span><span>callback</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#promise_Promise\">Promise</a>&gt; </span>\n</li></ul>\n</div>\n<p>This function does <strong>not</strong> trigger save middleware.</p> <h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> arr = [{ name: <span class=\"string\">'Star Wars'</span> }, { name: <span class=\"string\">'The Empire Strikes Back'</span> }];\nMovies.insertMany(arr, <span class=\"keyword\">function</span>(error, docs) {});</pre>\n<h3 id=\"model_Model.mapReduce\">Model.mapReduce(o, [callback])</h3>\n<p>Executes a mapReduce command.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>o</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>an object specifying map-reduce options</span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span><span>optional callback</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#promise_Promise\">Promise</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\"><li><a href=\"http://www.mongodb.org/display/DOCS/MapReduce\">http://www.mongodb.org/display/DOCS/MapReduce</a></li></ul>\n</div>\n<p><code>o</code> is an object specifying all mapReduce options as well as the map and reduce functions. All options are delegated to the driver implementation. See <a href=\"http://mongodb.github.io/node-mongodb-native/api-generated/collection.html#mapreduce\">node-mongodb-native mapReduce() documentation</a> for more detail about options.</p> <h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> o = {};\no.map = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span> emit(<span class=\"keyword\">this</span>.name, <span class=\"number\">1</span>) }\no.reduce = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(k, vals)</span> {</span> <span class=\"keyword\">return</span> vals.length }\nUser.mapReduce(o, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, results)</span> {</span>\n  console.log(results)\n})</pre> <h4>Other options:</h4> <ul> <li>\n<code>query</code> {Object} query filter object.</li> <li>\n<code>sort</code> {Object} sort input objects using this key</li> <li>\n<code>limit</code> {Number} max number of documents</li> <li>\n<code>keeptemp</code> {Boolean, default:false} keep temporary data</li> <li>\n<code>finalize</code> {Function} finalize function</li> <li>\n<code>scope</code> {Object} scope variables exposed to map/reduce/finalize during execution</li> <li>\n<code>jsMode</code> {Boolean, default:false} it is possible to make the execution stay in JS. Provided in MongoDB &gt; 2.0.X</li> <li>\n<code>verbose</code> {Boolean, default:false} provide statistics on job execution time.</li> <li>\n<code>readPreference</code> {String}</li> <li>\n<code>out*</code> {Object, default: {inline:1}} sets the output target for the map reduce job.</li> </ul> <h4>* out options:</h4> <ul> <li>\n<code>{inline:1}</code> the results are returned in an array</li> <li>\n<code>{replace: 'collectionName'}</code> add the results to collectionName: the results replace the collection</li> <li>\n<code>{reduce: 'collectionName'}</code> add the results to collectionName: if dups are detected, uses the reducer / finalize functions</li> <li>\n<code>{merge: 'collectionName'}</code> add the results to collectionName: if dups exist the new docs overwrite the old</li> </ul> <p>If <code>options.out</code> is set to <code>replace</code>, <code>merge</code>, or <code>reduce</code>, a Model instance is returned that can be used for further querying. Queries run against this model are all executed with the <code>lean</code> option; meaning only the js object is returned and no Mongoose magic is applied (getters, setters, etc).</p> <h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> o = {};\no.map = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span> emit(<span class=\"keyword\">this</span>.name, <span class=\"number\">1</span>) }\no.reduce = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(k, vals)</span> {</span> <span class=\"keyword\">return</span> vals.length }\no.out = { replace: <span class=\"string\">'createdCollectionNameForResults'</span> }\no.verbose = <span class=\"literal\">true</span>;\n\nUser.mapReduce(o, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, model, stats)</span> {</span>\n  console.log(<span class=\"string\">'map reduce took %d ms'</span>, stats.processtime)\n  model.find().where(<span class=\"string\">'value'</span>).gt(<span class=\"number\">10</span>).exec(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, docs)</span> {</span>\n    console.log(docs);\n  });\n})\n\n<span class=\"comment\">// a promise is returned so you may instead write</span>\n<span class=\"keyword\">var</span> promise = User.mapReduce(o);\npromise.then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(model, stats)</span> {</span>\n  console.log(<span class=\"string\">'map reduce took %d ms'</span>, stats.processtime)\n  <span class=\"keyword\">return</span> model.find().where(<span class=\"string\">'value'</span>).gt(<span class=\"number\">10</span>).exec();\n}).then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(docs)</span> {</span>\n   console.log(docs);\n}).then(<span class=\"literal\">null</span>, handleError).end()</pre>\n<h3 id=\"model_Model.populate\">Model.populate(docs, options, [callback(err,doc)])</h3>\n<p>Populates document references.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>docs</code><span class=\"types\"> &lt;<a href=\"#document_Document\">Document</a>, <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array\">Array</a>&gt; </span><span>Either a single document or array of documents to populate.</span>\n</li>\n<li>\n<code>options</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>A hash of key/val (path, options) used for population.</span>\n</li>\n<li>\n<code>[callback(err,doc)]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span><span>Optional callback, executed upon completion. Receives &lt;code&gt;err&lt;/code&gt; and the &lt;code&gt;doc(s)&lt;/code&gt;.</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#promise_Promise\">Promise</a>&gt; </span>\n</li></ul>\n</div>\n<h4>Available options:</h4> <ul> <li>path: space delimited path(s) to populate</li> <li>select: optional fields to select</li> <li>match: optional query conditions to match</li> <li>model: optional name of the model to use for population</li> <li>options: optional query options like sort, limit, etc</li> </ul> <h4>Examples:</h4> <pre data-language=\"javascript\"><span class=\"comment\">// populates a single object</span>\nUser.findById(id, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, user)</span> {</span>\n  <span class=\"keyword\">var</span> opts = [\n      { path: <span class=\"string\">'company'</span>, match: { x: <span class=\"number\">1</span> }, select: <span class=\"string\">'name'</span> }\n    , { path: <span class=\"string\">'notes'</span>, options: { limit: <span class=\"number\">10</span> }, model: <span class=\"string\">'override'</span> }\n  ]\n\n  User.populate(user, opts, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, user)</span> {</span>\n    console.log(user);\n  })\n})\n\n<span class=\"comment\">// populates an array of objects</span>\nUser.find(match, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, users)</span> {</span>\n  <span class=\"keyword\">var</span> opts = [{ path: <span class=\"string\">'company'</span>, match: { x: <span class=\"number\">1</span> }, select: <span class=\"string\">'name'</span> }]\n\n  <span class=\"keyword\">var</span> promise = User.populate(users, opts);\n  promise.then(console.log).end();\n})\n\n<span class=\"comment\">// imagine a Weapon model exists with two saved documents:</span>\n<span class=\"comment\">//   { _id: 389, name: 'whip' }</span>\n<span class=\"comment\">//   { _id: 8921, name: 'boomerang' }</span>\n\n<span class=\"keyword\">var</span> user = { name: <span class=\"string\">'Indiana Jones'</span>, weapon: <span class=\"number\">389</span> }\nWeapon.populate(user, { path: <span class=\"string\">'weapon'</span>, model: <span class=\"string\">'Weapon'</span> }, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, user)</span> {</span>\n  console.log(user.weapon.name) <span class=\"comment\">// whip</span>\n})\n\n<span class=\"comment\">// populate many plain objects</span>\n<span class=\"keyword\">var</span> users = [{ name: <span class=\"string\">'Indiana Jones'</span>, weapon: <span class=\"number\">389</span> }]\nusers.push({ name: <span class=\"string\">'Batman'</span>, weapon: <span class=\"number\">8921</span> })\nWeapon.populate(users, { path: <span class=\"string\">'weapon'</span> }, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, users)</span> {</span>\n  users.forEach(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(user)</span> {</span>\n    console.log(<span class=\"string\">'%s uses a %s'</span>, users.name, user.weapon.name)\n    <span class=\"comment\">// Indiana Jones uses a whip</span>\n    <span class=\"comment\">// Batman uses a boomerang</span>\n  })\n})\n<span class=\"comment\">// Note that we didn't need to specify the Weapon model because</span>\n<span class=\"comment\">// we were already using it's populate() method.</span></pre>\n<h3 id=\"model_Model.remove\">Model.remove(conditions, [callback])</h3>\n<p>Removes documents from the collection.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>conditions</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span>\n</li></ul>\n</div>\n<h4>Example:</h4> <pre data-language=\"javascript\">Comment.remove({ title: <span class=\"string\">'baby born from alien father'</span> }, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err)</span> {</span>\n\n});</pre> <h4>Note:</h4> <p>To remove documents without waiting for a response from MongoDB, do not pass a <code>callback</code>, then call <code>exec</code> on the returned <a href=\"#query-js\">Query</a>:</p> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> query = Comment.remove({ _id: id });\nquery.exec();</pre> <h4>Note:</h4> <p>This method sends a remove command directly to MongoDB, no Mongoose documents are involved. Because no Mongoose documents are involved, <em>no middleware (hooks) are executed</em>.</p>\n<h3 id=\"model_Model.update\">Model.update(conditions, doc, [options], [callback])</h3>\n<p>Updates documents in the database without returning them.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>conditions</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>doc</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>[options]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span>\n</li>\n<li>\n<code>[callback]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function\">Function</a>&gt; </span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span>\n</li></ul>\n</div>\n<div class=\"see\">\n<h4>See:</h4>\n<ul class=\"see\">\n<li><a href=\"guide#strict\" title=\"strict\">strict</a></li>\n<li><a href=\"http://docs.mongodb.org/v2.6/reference/command/update/#output\" title=\"response\">response</a></li>\n</ul>\n</div>\n<h4>Examples:</h4> <pre data-language=\"javascript\">MyModel.update({ age: { $gt: <span class=\"number\">18</span> } }, { oldEnough: <span class=\"literal\">true</span> }, fn);\nMyModel.update({ name: <span class=\"string\">'Tobi'</span> }, { ferret: <span class=\"literal\">true</span> }, { multi: <span class=\"literal\">true</span> }, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, raw)</span> {</span>\n  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">return</span> handleError(err);\n  console.log(<span class=\"string\">'The raw response from Mongo was '</span>, raw);\n});</pre> <h4>Valid options:</h4> <ul> <li>\n<code>safe</code> (boolean) safe mode (defaults to value set in schema (true))</li> <li>\n<code>upsert</code> (boolean) whether to create the doc if it doesn't match (false)</li> <li>\n<code>multi</code> (boolean) whether multiple documents should be updated (false)</li> <li>\n<code>runValidators</code>: if true, runs <a href=\"validation#update-validators\">update validators</a> on this command. Update validators validate the update operation against the model's schema.</li> <li>\n<code>setDefaultsOnInsert</code>: if this and <code>upsert</code> are true, mongoose will apply the <a href=\"defaults\">defaults</a> specified in the model's schema if a new document is created. This option only works on MongoDB &gt;= 2.4 because it relies on <a href=\"https://docs.mongodb.org/v2.4/reference/operator/update/setOnInsert/\">MongoDB's <code>$setOnInsert</code> operator</a>.</li> <li>\n<code>strict</code> (boolean) overrides the <code>strict</code> option for this update</li> <li>\n<code>overwrite</code> (boolean) disables update-only mode, allowing you to overwrite the doc (false)</li> </ul> <p>All <code>update</code> values are cast to their appropriate SchemaTypes before being sent.</p> <p>The <code>callback</code> function receives <code>(err, rawResponse)</code>.</p> <ul> <li>\n<code>err</code> is the error if any occurred</li> <li>\n<code>rawResponse</code> is the full response from Mongo</li> </ul> <h4>Note:</h4> <p>All top level keys which are not <code>atomic</code> operation names are treated as set operations:</p> <h4>Example:</h4> <pre data-language=\"javascript\"><span class=\"keyword\">var</span> query = { name: <span class=\"string\">'borne'</span> };\nModel.update(query, { name: <span class=\"string\">'jason borne'</span> }, options, callback)\n\n<span class=\"comment\">// is sent as</span>\nModel.update(query, { $set: { name: <span class=\"string\">'jason borne'</span> }}, options, callback)\n<span class=\"comment\">// if overwrite option is false. If overwrite is true, sent without the $set wrapper.</span></pre> <p>This helps prevent accidentally overwriting all documents in your collection with <code>{ name: 'jason borne' }</code>.</p> <h4>Note:</h4> <p>Be careful to not use an existing model instance for the update clause (this won't work and can cause weird behavior like infinite loops). Also, ensure that the update clause does not have an _id property, which causes Mongo to return a \"Mod on _id not allowed\" error.</p> <h4>Note:</h4> <p>To update documents without waiting for a response from MongoDB, do not pass a <code>callback</code>, then call <code>exec</code> on the returned <a href=\"#query-js\">Query</a>:</p> <pre data-language=\"javascript\">Comment.update({ _id: id }, { $set: { text: <span class=\"string\">'changed'</span> }}).exec();</pre> <h4>Note:</h4> <p>Although values are casted to their appropriate types when using update, the following are <em>not</em> applied:</p> <ul> <li>defaults</li> <li>setters</li> <li>validators</li> <li>middleware</li> </ul> <p>If you need those features, use the traditional approach of first retrieving the document.</p> <pre data-language=\"javascript\">Model.findOne({ name: <span class=\"string\">'borne'</span> }, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, doc)</span> {</span>\n  <span class=\"keyword\">if</span> (err) ..\n  doc.name = <span class=\"string\">'jason borne'</span>;\n  doc.save(callback);\n})</pre>\n<h3 id=\"model_Model.where\">Model.where(path, [val])</h3>\n<p>Creates a Query, applies the passed conditions, and returns the Query.</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>path</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span>\n</li>\n<li>\n<code>[val]</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>optional value</span>\n</li>\n</ul>\n</div>\n<div class=\"returns\">\n<h4>Returns:</h4>\n<ul><li>\n<span class=\"types\"> &lt;<a href=\"#query-js\">Query</a>&gt; </span>\n</li></ul>\n</div>\n<p>For example, instead of writing:</p> <pre data-language=\"javascript\">User.find({age: {$gte: <span class=\"number\">21</span>, $lte: <span class=\"number\">65</span>}}, callback);</pre> <p>we can instead write:</p> <pre data-language=\"javascript\">User.where(<span class=\"string\">'age'</span>).gte(<span class=\"number\">21</span>).lte(<span class=\"number\">65</span>).exec(callback);</pre> <p>Since the Query class also supports <code>where</code> you can continue chaining</p> <pre data-language=\"javascript\">User\n.where(<span class=\"string\">'age'</span>).gte(<span class=\"number\">21</span>).lte(<span class=\"number\">65</span>)\n.where(<span class=\"string\">'name'</span>, <span class=\"regexp\">/^b/i</span>)\n... etc</pre>\n<h3 id=\"model_Model-base\">Model#<span>base</span>\n</h3>\n<p>Base Mongoose instance the model uses.</p>\n<h3 id=\"model_Model-baseModelName\">Model#<span>baseModelName</span>\n</h3>\n<p>If this is a discriminator model, <code>baseModelName</code> is the name of<br>the base model.</p>\n<h3 id=\"model_Model-collection\">Model#<span>collection</span>\n</h3>\n<p>Collection the model uses.</p>\n<h3 id=\"model_Model-db\">Model#<span>db</span>\n</h3>\n<p>Connection the model uses.</p>\n<h3 id=\"model_Model-discriminators\">Model#<span>discriminators</span>\n</h3>\n<p>Registered discriminators for this model.</p>\n<h3 id=\"model_Model-modelName\">Model#<span>modelName</span>\n</h3>\n<p>The name of the model</p>\n<h3 id=\"model_Model-schema\">Model#<span>schema</span>\n</h3>\n<p>Schema the model uses.</p>\n<h2><a href=\"https://github.com/Automattic/mongoose/blob/4.5.9/lib/collection.js\" id=\"collection-js\">collection.js</a></h2>\n<h3 id=\"collection_Collection\">Collection(name, conn, opts)</h3>\n<p>Abstract Collection constructor</p>\n<div class=\"params\">\n<h4>Parameters:</h4>\n<ul>\n<li>\n<code>name</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String\">String</a>&gt; </span><span>name of the collection</span>\n</li>\n<li>\n<code>conn</code><span class=\"types\"> &lt;<a href=\"#connection_Connection\">Connection</a>&gt; </span><span>A MongooseConnection instance</span>\n</li>\n<li>\n<code>opts</code><span class=\"types\"> &lt;<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object\">Object</a>&gt; </span><span>optional collection options</span>\n</li>\n</ul>\n</div>\n<div class=\"description\"><p>This is the base class that drivers inherit from and implement.</p></div>\n<h3 id=\"collection_Collection-ensureIndex\">Collection#ensureIndex()</h3>\n<p>Abstract method that drivers must implement.</p>\n\n<h3 id=\"collection_Collection-find\">Collection#find()</h3>\n<p>Abstract method that drivers must implement.</p>\n\n<h3 id=\"collection_Collection-findAndModify\">Collection#findAndModify()</h3>\n<p>Abstract method that drivers must implement.</p>\n\n<h3 id=\"collection_Collection-findOne\">Collection#findOne()</h3>\n<p>Abstract method that drivers must implement.</p>\n\n<h3 id=\"collection_Collection-getIndexes\">Collection#getIndexes()</h3>\n<p>Abstract method that drivers must implement.</p>\n\n<h3 id=\"collection_Collection-insert\">Collection#insert()</h3>\n<p>Abstract method that drivers must implement.</p>\n\n<h3 id=\"collection_Collection-mapReduce\">Collection#mapReduce()</h3>\n<p>Abstract method that drivers must implement.</p>\n\n<h3 id=\"collection_Collection-save\">Collection#save()</h3>\n<p>Abstract method that drivers must implement.</p>\n\n<h3 id=\"collection_Collection-update\">Collection#update()</h3>\n<p>Abstract method that drivers must implement.</p>\n\n<h3 id=\"collection_Collection-collectionName\">Collection#<span>collectionName</span>\n</h3>\n<p>The collection name</p>\n<h3 id=\"collection_Collection-conn\">Collection#<span>conn</span>\n</h3>\n<p>The Connection instance</p>\n<h3 id=\"collection_Collection-name\">Collection#<span>name</span>\n</h3>\n<p>The collection name</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010 LearnBoost<br>Licensed under the MIT License.<br>\n    <a href=\"http://mongoosejs.com/docs/api.html\" class=\"_attribution-link\">http://mongoosejs.com/docs/api.html</a>\n  </p>\n</div>\n","defaults":"<h1 id=\"declaring-defaults-in-your-schema\">Declaring defaults in your schema</h1> <p>Your schemas can define default values for certain paths. If you create a new document without that path set, the default will kick in.</p> <pre data-language=\"javascript\">\n    <span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({\n      name: String,\n      role: { type: String, <span class=\"keyword\">default</span>: <span class=\"string\">'guitarist'</span> }\n    });\n\n    <span class=\"keyword\">var</span> Person = db.model(<span class=\"string\">'Person'</span>, schema);\n\n    <span class=\"keyword\">var</span> axl = <span class=\"keyword\">new</span> Person({ name: <span class=\"string\">'Axl Rose'</span>, role: <span class=\"string\">'singer'</span> });\n    assert.equal(axl.role, <span class=\"string\">'singer'</span>);\n\n    <span class=\"keyword\">var</span> slash = <span class=\"keyword\">new</span> Person({ name: <span class=\"string\">'Slash'</span> });\n    assert.equal(slash.role, <span class=\"string\">'guitarist'</span>);\n\n    <span class=\"keyword\">var</span> izzy = <span class=\"keyword\">new</span> Person({ name: <span class=\"string\">'Izzy'</span>, role: <span class=\"literal\">undefined</span> });\n    assert.equal(izzy.role, <span class=\"string\">'guitarist'</span>);\n\n    Person.create(axl, slash, <span class=\"keyword\">function</span>(error) {\n      assert.ifError(error);\n      Person.find({ role: <span class=\"string\">'guitarist'</span> }, <span class=\"keyword\">function</span>(error, docs) {\n        assert.ifError(error);\n        assert.equal(docs.length, <span class=\"number\">1</span>);\n        assert.equal(docs[<span class=\"number\">0</span>].name, <span class=\"string\">'Slash'</span>);\n      });\n    });\n  </pre>\n<h2 id=\"default-functions\">Default functions</h2> <p>You can also set the <code>default</code> schema option to a function. Mongoose will execute that function and use the return value as the default.</p> <pre data-language=\"javascript\">\n    <span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({\n      title: String,\n      date: {\n        type: Date,\n        <span class=\"comment\">// `Date.now()` returns the current unix timestamp as a number</span>\n        <span class=\"keyword\">default</span>: Date.now\n      }\n    });\n\n    <span class=\"keyword\">var</span> BlogPost = db.model(<span class=\"string\">'BlogPost'</span>, schema);\n\n    <span class=\"keyword\">var</span> post = <span class=\"keyword\">new</span> BlogPost({title: <span class=\"string\">'5 Best Arnold Schwarzenegger Movies'</span>});\n\n    <span class=\"comment\">// The post has a default Date set to now</span>\n    assert.ok(post.date.getTime() &gt;= Date.now() - <span class=\"number\">1000</span>);\n    assert.ok(post.date.getTime() &lt;= Date.now());\n  </pre>\n<h2 id=\"the-setdefaultsoninsert-option\">The setDefaultsOnInsert option</h2> <p>By default, mongoose only applies defaults when you create a new document. It will <strong>not</strong> set defaults if you use <code>update()</code> and <code>findOneAndUpdate()</code>. However, mongoose 4.x lets you opt-in to this behavior using the <code>setDefaultsOnInsert</code> option.</p> <h2 id=\"important\">Important</h2> <p>The <code>setDefaultsOnInsert</code> option relies on the <a href=\"https://docs.mongodb.org/manual/reference/operator/update/setOnInsert/\">MongoDB <code>$setOnInsert</code> operator</a>. The <code>$setOnInsert</code> operator was introduced in MongoDB 2.4. If you're using MongoDB server &lt; 2.4.0, do <strong>not</strong> use <code>setDefaultsOnInsert</code>.</p> <pre data-language=\"javascript\">\n    <span class=\"keyword\">var</span> schema = <span class=\"keyword\">new</span> Schema({\n      title: String,\n      genre: {type: String, <span class=\"keyword\">default</span>: <span class=\"string\">'Action'</span>}\n    });\n\n    <span class=\"keyword\">var</span> Movie = db.model(<span class=\"string\">'Movie'</span>, schema);\n\n    <span class=\"keyword\">var</span> query = {};\n    <span class=\"keyword\">var</span> update = {title: <span class=\"string\">'The Terminator'</span>};\n    <span class=\"keyword\">var</span> options = {\n      <span class=\"comment\">// Return the document after updates are applied</span>\n      <span class=\"keyword\">new</span>: <span class=\"literal\">true</span>,\n      <span class=\"comment\">// Create a document if one isn't found. Required</span>\n      <span class=\"comment\">// for `setDefaultsOnInsert`</span>\n      upsert: <span class=\"literal\">true</span>,\n      setDefaultsOnInsert: <span class=\"literal\">true</span>\n    };\n\n    Movie.\n      findOneAndUpdate(query, update, options, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(error, doc)</span> {</span>\n        assert.ifError(error);\n        assert.equal(doc.title, <span class=\"string\">'The Terminator'</span>);\n        assert.equal(doc.genre, <span class=\"string\">'Action'</span>);\n      });\n  </pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010 LearnBoost<br>Licensed under the MIT License.<br>\n    <a href=\"http://mongoosejs.com/docs/defaults.html\" class=\"_attribution-link\">http://mongoosejs.com/docs/defaults.html</a>\n  </p>\n</div>\n"}