{"index":"<h1>npm</h1>  <h2 title=\"Getting Started\"> Getting Started </h2> <ul class=\"pageColumns\"> <li> <a href=\"getting-started/what-is-npm\">01 - What is npm?</a> </li> <li> <a href=\"getting-started/installing-node\">02 - Installing Node.js and updating npm</a> </li> <li> <a href=\"getting-started/fixing-npm-permissions\">03 - Fixing npm permissions</a> </li> <li> <a href=\"getting-started/installing-npm-packages-locally\">04 - Installing npm packages locally</a> </li> <li> <a href=\"getting-started/using-a-package.json\">05 - Using a `package.json`</a> </li> <li> <a href=\"getting-started/updating-local-packages\">06 - Updating local packages</a> </li> <li> <a href=\"getting-started/uninstalling-local-packages\">07 - Uninstalling local packages</a> </li> <li> <a href=\"getting-started/installing-npm-packages-globally\">08 - Installing npm packages globally</a> </li> <li> <a href=\"getting-started/updating-global-packages\">09 - Updating global packages</a> </li> <li> <a href=\"getting-started/uninstalling-global-packages\">10 - Uninstalling global packages</a> </li> <li> <a href=\"getting-started/creating-node-modules\">11 - Creating Node.js modules</a> </li> <li> <a href=\"getting-started/publishing-npm-packages\">12 - Publishing npm packages</a> </li> <li> <a href=\"getting-started/semantic-versioning\">13 - Semantic versioning and npm</a> </li> <li> <a href=\"getting-started/scoped-packages\">14 - Working with scoped packages</a> </li> <li> <a href=\"getting-started/using-tags\">15 - Using tags</a> </li> </ul>   <h2 title=\"How npm works\"> How npm works </h2> <ul class=\"pageColumns\"> <li> <a href=\"how-npm-works/packages\">01 - Packages</a> </li> <li> <a href=\"how-npm-works/npm2\">02 - npm v2</a> </li> <li> <a href=\"how-npm-works/npm3\">03 - npm v3</a> </li> <li> <a href=\"how-npm-works/npm3-dupe\">04 - npm v3 Duplication</a> </li> <li> <a href=\"how-npm-works/npm3-nondet\">05 - npm v3 Non-determinism</a> </li> </ul>   <h2 title=\"Private Modules\"> Private Modules </h2> <ul class=\"pageColumns\"> <li> <a href=\"private-modules/intro\">01 - Working with private modules</a> </li> <li> <a href=\"private-modules/ci-server-config\">02 - Downloading modules to CI/deployment servers</a> </li> <li> <a href=\"private-modules/docker-and-private-modules\">03 - Docker and private modules</a> </li> </ul>   <h2 title=\"Organizations\"> Organizations </h2> <ul class=\"pageColumns\"> <li> <a href=\"orgs/what-are-orgs\">01 - What are Organizations?</a> </li> <li> <a href=\"orgs/setup\">02 - Setup</a> </li> <li> <a href=\"orgs/roles\">03 - Roles</a> </li> <li> <a href=\"orgs/developers-team\">04 - The Developers Team</a> </li> <li> <a href=\"orgs/teams\">05 - Teams</a> </li> <li> <a href=\"orgs/sponsorship\">06 - Sponsorship</a> </li> <li> <a href=\"orgs/scoping-packages\">07 - Scoping New Packages</a> </li> <li> <a href=\"orgs/package-access\">08 - Package Access</a> </li> <li> <a href=\"orgs/preexisting-packages\">09 - Pre-Existing Packages</a> </li> </ul>   <h2 title=\"Using npm\"> Using npm </h2> <ul class=\"pageColumns\"> <li> <a href=\"misc/coding-style\">coding-style</a> <span class=\"faint heading\">npm's \"funny\" coding style</span> </li> <li> <a href=\"misc/config\">config</a> <span class=\"faint heading\">More than you probably want to know about npm configuration</span> </li> <li> <a href=\"misc/developers\">developers</a> <span class=\"faint heading\">Developer Guide</span> </li> <li> <a href=\"misc/disputes\">disputes</a> <span class=\"faint heading\">Handling Module Name Disputes</span> </li> <li> <a href=\"misc/orgs\">orgs</a> <span class=\"faint heading\">Working with Teams &amp; Orgs</span> </li> <li> <a href=\"misc/registry\">registry</a> <span class=\"faint heading\">The JavaScript Package Registry</span> </li> <li> <a href=\"misc/removing-npm\">removing-npm</a> <span class=\"faint heading\">Cleaning the Slate</span> </li> <li> <a href=\"misc/scope\">scope</a> <span class=\"faint heading\">Scoped packages</span> </li> <li> <a href=\"misc/scripts\">scripts</a> <span class=\"faint heading\">How npm handles the \"scripts\" field</span> </li> <li> <a href=\"misc/semver\">semver</a> <span class=\"faint heading\">The semantic versioner for npm</span> </li> </ul>    <h2 title=\"CLI Commands\"> CLI Commands </h2> <ul class=\"pageColumns\"> <li> <a href=\"cli/access\">access</a> <span class=\"faint heading\">Set access level on published packages</span> </li> <li> <a href=\"cli/adduser\">adduser</a> <span class=\"faint heading\">Add a registry user account</span> </li> <li> <a href=\"cli/bin\">bin</a> <span class=\"faint heading\">Display npm bin folder</span> </li> <li> <a href=\"cli/bugs\">bugs</a> <span class=\"faint heading\">Bugs for a package in a web browser maybe</span> </li> <li> <a href=\"cli/build\">build</a> <span class=\"faint heading\">Build a package</span> </li> <li> <a href=\"cli/bundle\">bundle</a> <span class=\"faint heading\">REMOVED</span> </li> <li> <a href=\"cli/cache\">cache</a> <span class=\"faint heading\">Manipulates packages cache</span> </li> <li> <a href=\"cli/completion\">completion</a> <span class=\"faint heading\">Tab Completion for npm</span> </li> <li> <a href=\"cli/config\">config</a> <span class=\"faint heading\">Manage the npm configuration files</span> </li> <li> <a href=\"cli/dedupe\">dedupe</a> <span class=\"faint heading\">Reduce duplication</span> </li> <li> <a href=\"cli/deprecate\">deprecate</a> <span class=\"faint heading\">Deprecate a version of a package</span> </li> <li> <a href=\"cli/dist-tag\">dist-tag</a> <span class=\"faint heading\">Modify package distribution tags</span> </li> <li> <a href=\"cli/docs\">docs</a> <span class=\"faint heading\">Docs for a package in a web browser maybe</span> </li> <li> <a href=\"cli/edit\">edit</a> <span class=\"faint heading\">Edit an installed package</span> </li> <li> <a href=\"cli/explore\">explore</a> <span class=\"faint heading\">Browse an installed package</span> </li> <li> <a href=\"cli/help\">help</a> <span class=\"faint heading\">Get help on npm</span> </li> <li> <a href=\"cli/help-search\">help-search</a> <span class=\"faint heading\">Search npm help documentation</span> </li> <li> <a href=\"cli/init\">init</a> <span class=\"faint heading\">Interactively create a package.json file</span> </li> <li> <a href=\"cli/install\">install</a> <span class=\"faint heading\">Install a package</span> </li> <li> <a href=\"cli/install-test\">install-test</a> </li> <li> <a href=\"cli/link\">link</a> <span class=\"faint heading\">Symlink a package folder</span> </li> <li> <a href=\"cli/logout\">logout</a> <span class=\"faint heading\">Log out of the registry</span> </li> <li> <a href=\"cli/ls\">ls</a> <span class=\"faint heading\">List installed packages</span> </li> <li> <a href=\"cli/npm\">npm</a> <span class=\"faint heading\">javascript package manager</span> </li> <li> <a href=\"cli/outdated\">outdated</a> <span class=\"faint heading\">Check for outdated packages</span> </li> <li> <a href=\"cli/owner\">owner</a> <span class=\"faint heading\">Manage package owners</span> </li> <li> <a href=\"cli/pack\">pack</a> <span class=\"faint heading\">Create a tarball from a package</span> </li> <li> <a href=\"cli/ping\">ping</a> <span class=\"faint heading\">Ping npm registry</span> </li> <li> <a href=\"cli/prefix\">prefix</a> <span class=\"faint heading\">Display prefix</span> </li> <li> <a href=\"cli/prune\">prune</a> <span class=\"faint heading\">Remove extraneous packages</span> </li> <li> <a href=\"cli/publish\">publish</a> <span class=\"faint heading\">Publish a package</span> </li> <li> <a href=\"cli/rebuild\">rebuild</a> <span class=\"faint heading\">Rebuild a package</span> </li> <li> <a href=\"cli/repo\">repo</a> <span class=\"faint heading\">Open package repository page in the browser</span> </li> <li> <a href=\"cli/restart\">restart</a> <span class=\"faint heading\">Restart a package</span> </li> <li> <a href=\"cli/root\">root</a> <span class=\"faint heading\">Display npm root</span> </li> <li> <a href=\"cli/run-script\">run-script</a> <span class=\"faint heading\">Run arbitrary package scripts</span> </li> <li> <a href=\"cli/search\">search</a> <span class=\"faint heading\">Search for packages</span> </li> <li> <a href=\"cli/shrinkwrap\">shrinkwrap</a> <span class=\"faint heading\">Lock down dependency versions</span> </li> <li> <a href=\"cli/star\">star</a> <span class=\"faint heading\">Mark your favorite packages</span> </li> <li> <a href=\"cli/stars\">stars</a> <span class=\"faint heading\">View packages marked as favorites</span> </li> <li> <a href=\"cli/start\">start</a> <span class=\"faint heading\">Start a package</span> </li> <li> <a href=\"cli/stop\">stop</a> <span class=\"faint heading\">Stop a package</span> </li> <li> <a href=\"cli/tag\">tag</a> <span class=\"faint heading\">Tag a published version</span> </li> <li> <a href=\"cli/team\">team</a> <span class=\"faint heading\">Manage organization teams and team memberships</span> </li> <li> <a href=\"cli/test\">test</a> <span class=\"faint heading\">Test a package</span> </li> <li> <a href=\"cli/uninstall\">uninstall</a> <span class=\"faint heading\">Remove a package</span> </li> <li> <a href=\"cli/unpublish\">unpublish</a> <span class=\"faint heading\">Remove a package from the registry</span> </li> <li> <a href=\"cli/update\">update</a> <span class=\"faint heading\">Update a package</span> </li> <li> <a href=\"cli/version\">version</a> <span class=\"faint heading\">Bump a package version</span> </li> <li> <a href=\"cli/view\">view</a> <span class=\"faint heading\">View registry info</span> </li> <li> <a href=\"cli/whoami\">whoami</a> <span class=\"faint heading\">Display npm username</span> </li> </ul>   <h2 title=\"Configuring npm\"> Configuring npm </h2> <ul class=\"pageColumns\"> <li> <a href=\"files/folders\">folders</a> <span class=\"faint heading\">Folder Structures Used by npm</span> </li> <li> <a href=\"files/npmrc\">npmrc</a> <span class=\"faint heading\">The npm config files</span> </li> <li> <a href=\"files/package.json\">package.json</a> <span class=\"faint heading\">Specifics of npm's package.json handling</span> </li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/\" class=\"_attribution-link\">https://docs.npmjs.com/</a>\n  </p>\n</div>\n","getting-started/what-is-npm":"<h1 id=\"what-is-npm\" class=\"deep-link\">What is npm?</h1> <p>npm makes it easy for JavaScript developers to share and reuse code, and it makes it easy to update the code that you're sharing.</p> <div class=\"youtube-video\"><iframe width=\"670\" height=\"480\" src=\"https://www.youtube.com/embed/x03fjb2VlGY\" frameborder=\"0\" allowfullscreen></iframe></div> <p>If you've been working with Javascript for awhile, you might have heard of npm: npm makes it easy for Javascript developers to share the code that they've created to solve particular problems, and for other developers to reuse that code in their own applications.</p> <p>Once you're depending on this code from other developers, npm makes it really easy to check to see if they've made any updates to it, and to download those updates when they're made.</p> <p>These bits of reusable code are called packages, or sometimes modules. A package is just a directory with one or more files in it, that also has a file called \"package.json\" with some meta data about this package. A typical application, such as a website, will depend on dozens or hundreds of packages. These packages are often small. The general idea is that you create a small building block which solves one problem and solves it well. This makes it possible for you to compose larger, custom solutions out of these small, shared building blocks.</p> <p>There's lots of benefits to this. It makes it possible for your team to draw on expertise outside of your organization by bringing in packages from people who have focused on particular problem areas. But even if you don't reuse code from people outside of your organization, using this kind of module based approach can actually help your team work together better, and can also make it possible to reuse code across projects.</p> <p>You can find packages to help you build your application by browsing the npm website. When you're browsing the website, you'll find different kinds of packages. You'll find lots of node modules. npm started as the node package manager, so you'll find lots of modules which can be used on the server side. There are also lots of packages which add commands for you to use in the command line. And at this point you can find a number of packages which can be used in the browser, on the front end.</p> <p>So now that you have an idea of what npm can do, let's talk about how it works. When people talk about npm, they can be talking about one of three things. They could be talking about the website, which we've just been looking at. Or they could be talking about the registry, which is a big database of information about packages that people are sharing. Or the third thing they could be talking about is the client: when a developer decides to share their code, they use the npm client which is installed on their computer to publish that code up to the registry. And once there's an entry for this package in the registry, then other developers can use their npm clients to install the package from the registry. The entry in the registry for this package is also reflected on the website, where there's a page dedicated to this new package.</p> <p>So that's what npm is. It's a way to reuse code from other developers, and also a way to share your code with them, and it makes it easy to manage the different versions of code.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/getting-started/what-is-npm\" class=\"_attribution-link\">https://docs.npmjs.com/getting-started/what-is-npm</a>\n  </p>\n</div>\n","getting-started/installing-node":"<h1 id=\"installing-nodejs-and-updating-npm\" class=\"deep-link\">Installing Node.js and updating npm</h1> <div class=\"youtube-video\"><iframe src=\"https://www.youtube.com/embed/wREima9e6vk\" frameborder=\"0\" allowfullscreen></iframe></div> <h2 id=\"installing-nodejs\" class=\"deep-link\">Installing Node.js</h2> <p>If you're using OS X or Windows, the best way to install Node.js is to use one of the installers from <a href=\"https://nodejs.org\">nodejs.org</a>. If you're using Linux, you can use the installer, or you can check <a href=\"https://github.com/nodesource/distributions\">NodeSource's binary distributions</a> to see whether or not there's a more recent version that works with your system.</p> <p>Test: Run <code>node -v</code>. The version should be higher than v0.10.32.</p> <h2 id=\"updating-npm\" class=\"deep-link\">Updating npm</h2> <p>Node comes with npm installed so you should have a version of npm. However, npm gets updated more frequently than Node does, so you'll want to make sure it's the latest version.</p> <p><code>npm install npm -g</code></p> <p>Test: Run <code>npm -v</code>. The version should be higher than 2.1.8.</p> <h2 id=\"installing-npm-manually\" class=\"deep-link\">Installing npm manually</h2> <blockquote> <p>For more advanced users.</p> </blockquote> <p>The npm module is available for download at <code>https://registry.npmjs.org/npm/-/npm-{VERSION}.tgz</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/getting-started/installing-node\" class=\"_attribution-link\">https://docs.npmjs.com/getting-started/installing-node</a>\n  </p>\n</div>\n","getting-started/updating-local-packages":"<h1 id=\"updating-local-packages\" class=\"deep-link\">Updating local packages</h1> <div class=\"youtube-video\"><iframe src=\"https://www.youtube.com/embed/HRudtPGcOt4\" frameborder=\"0\" allowfullscreen></iframe></div> <p>Every so often, you should update the packages you depend on so you can get any changes that have been made to code upstream.</p> <p>To do this, run <code>npm update</code> in the same directory as your <code>package.json</code> file.</p> <p>Test: Run <code>npm outdated</code>. There should not be any results.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/getting-started/updating-local-packages\" class=\"_attribution-link\">https://docs.npmjs.com/getting-started/updating-local-packages</a>\n  </p>\n</div>\n","getting-started/uninstalling-local-packages":"<h1 id=\"uninstalling-local-packages\" class=\"deep-link\">Uninstalling local packages</h1> <div class=\"youtube-video\"><iframe src=\"https://www.youtube.com/embed/Z-BpYj6cSoQ\" frameborder=\"0\" allowfullscreen></iframe></div> <p>You can remove a package from your node_modules directory using <code>npm uninstall &lt;package&gt;</code>:</p> <pre>npm uninstall lodash</pre> <p>To remove it from the dependencies in <code>package.json</code>, you will need to use the save flag:</p> <pre>npm uninstall --save lodash</pre> <p>Note: if you installed the package as a \"devDependency\" (i.e. with <code>--save-dev</code>) then <code>--save</code> won't remove it from <code>package.json</code> You have use <code>--save-dev</code> to uninstall it.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/getting-started/uninstalling-local-packages\" class=\"_attribution-link\">https://docs.npmjs.com/getting-started/uninstalling-local-packages</a>\n  </p>\n</div>\n","getting-started/uninstalling-global-packages":"<h1 id=\"uninstalling-global-packages\" class=\"deep-link\">Uninstalling global packages</h1> <div class=\"youtube-video\"><iframe src=\"https://www.youtube.com/embed/XbvjZxUZJGg\" frameborder=\"0\" allowfullscreen></iframe></div> <p>Global packages can be uninstalled with <code>npm uninstall -g &lt;package&gt;</code>:</p> <pre>npm uninstall -g jshint</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/getting-started/uninstalling-global-packages\" class=\"_attribution-link\">https://docs.npmjs.com/getting-started/uninstalling-global-packages</a>\n  </p>\n</div>\n","getting-started/installing-npm-packages-locally":"<h1 id=\"installing-npm-packages-locally\" class=\"deep-link\">Installing npm packages locally</h1> <div class=\"youtube-video\"><iframe src=\"https://www.youtube.com/embed/JDSfqFFbNYQ\" frameborder=\"0\" allowfullscreen></iframe></div> <p>There are two ways to install npm packages: locally or globally. You choose which kind of installation to use based on how you want to use the package.</p> <p>If you want to depend on the package from your own module using something like Node.js' <code>require</code>, then you want to install locally, which is <code>npm install</code>'s default behavior. On the other hand, if you want to use it as a command line tool, something like the grunt CLI, then you want to <a href=\"installing-npm-packages-globally\">install it globally</a>.</p> <p>To learn more about the <code>install</code> command's behavior, check out the <a href=\"../cli/install\">CLI doc page</a>.</p> <h2 id=\"installing\" class=\"deep-link\">Installing</h2> <p>A package can be downloaded with the command</p> <pre>&gt; npm install &lt;package_name&gt;</pre> <p>This will create the <code>node_modules</code> directory in your current directory(if one doesn't exist yet), and will download the package to that directory.</p> <h4 id=\"test\" class=\"deep-link\">Test:</h4> <p>To confirm that <code>npm install</code> worked correctly, check to see that a <code>node_modules</code> directory exists and that it contains a directory for the package(s) you installed. You can do this by running <code>ls node_modules</code> on Unix systems, e.g. \"OSX\", \"Debian\", or <code>dir node_modules</code> on Windows.</p> <h4 id=\"example\" class=\"deep-link\">Example:</h4> <p>Install a package called <code>lodash</code>. Confirm that it ran successfully by listing the contents of the <code>node_modules</code> directory and seeing a directory called <code>lodash</code>.</p> <pre>&gt; npm install lodash\n&gt; ls node_modules               # use `dir` for Windows\n \n#=&gt; lodash</pre> <h2 id=\"which-version-of-the-package-is-installed\" class=\"deep-link\">Which version of the package is installed?</h2> <p>If there is no <code>package.json</code> file in the local directory, the latest version of the package is installed.</p> <p>If there is <code>package.json</code> file, the latest version satisfying the <a href=\"semantic-versioning\">semver rule</a> declared in <code>package.json</code> for that package (if there is any) is installed.</p> <h2 id=\"using-the-installed-package\" class=\"deep-link\">Using the installed package</h2> <p>Once the package is in <code>node_modules</code>, you can use it in your code. For example, if you are creating a Node.js module, you can <code>require</code> it.</p> <h4 id=\"example-1\" class=\"deep-link\">Example:</h4> <p>Create a file named <code>index.js</code>, with the following code:</p> <pre>// index.js \nvar lodash = require('lodash');\n \nvar output = lodash.without([1, 2, 3], 1);\nconsole.log(output);</pre> <p>Run the code using <code>node index.js</code>. It should output <code>[2, 3]</code>.</p> <p>If you had not properly installed <code>lodash</code>, you would receive this error:</p> <pre>module.js:340\n    throw err;\n          ^\nError: Cannot find module 'lodash'</pre> <p>To fix this, run <code>npm install lodash</code> in the same directory as your <code>index.js</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/getting-started/installing-npm-packages-locally\" class=\"_attribution-link\">https://docs.npmjs.com/getting-started/installing-npm-packages-locally</a>\n  </p>\n</div>\n","getting-started/fixing-npm-permissions":"<h1 id=\"fixing-npm-permissions\" class=\"deep-link\">Fixing npm permissions</h1> <div class=\"youtube-video\"><iframe src=\"https://www.youtube.com/embed/bxvybxYFq2o\" frameborder=\"0\" allowfullscreen></iframe></div> <p>You may receive an <code>EACCES</code> error when you try to install a package globally. This indicates that you do not have permission to write to the directories that npm uses to store global packages and commands.</p> <p>You can fix this problem using one of three options:</p> <ol> <li>Change the permission to npm's default directory.</li> <li>Change npm's default directory to another directory.</li> <li>Install node with a package manager that takes care of this for you.</li> </ol> <p>You should back-up your computer before moving forward.</p> <h2 id=\"option-1-change-the-permission-to-npms-default-directory\" class=\"deep-link\">Option 1: Change the permission to npm's default directory</h2> <ol> <li> <p>Find the path to npm's directory:</p> <pre> npm config get prefix\n</pre> <p>For many systems, this will be <code>/usr/local</code>.</p> <blockquote> <p><strong>WARNING</strong>: If the displayed path is <em>just</em> <code>/usr</code>, <strong>switch to <a href=\"#option-2-change-npms-default-directory-to-another-directory\">Option 2</a></strong> or you will mess up your permissions.</p> </blockquote> </li> <li> <p>Change the owner of npm's directories to the name of the current user (your username!):</p> <pre> sudo chown -R $(whoami) $(npm config get prefix)/{lib/node_modules,bin,share}\n</pre> <p>This changes the permissions of the sub-folders used by npm and some other tools (<code>lib/node_modules</code>, <code>bin</code>, and <code>share</code>).</p> </li> </ol> <h2 id=\"option-2-change-npms-default-directory-to-another-directory\" class=\"deep-link\">Option 2: Change npm's default directory to another directory</h2> <p>There are times when you do not want to change ownership of the default directory that npm uses (i.e. <code>/usr</code>) as this could cause some problems, for example if you are sharing the system with other users.</p> <p>Instead, you can configure npm to use a different directory altogether. In our case, this will be a hidden directory in our home folder.</p> <ol> <li> <p>Make a directory for global installations:</p> <pre> mkdir ~/.npm-global\n</pre> </li> <li> <p>Configure npm to use the new directory path:</p> <pre> npm config set prefix '~/.npm-global'\n</pre> </li> <li> <p>Open or create a <code>~/.profile</code> file and add this line:</p> <pre> export PATH=~/.npm-global/bin:$PATH\n</pre> </li> <li> <p>Back on the command line, update your system variables:</p> <pre> source ~/.profile\n</pre> </li> </ol> <p>Test: Download a package globally without using <code>sudo</code>.</p> <pre>    npm install -g jshint\n</pre> <p>Instead of steps 2-4 you can also use the corresponding ENV variable (e.g. if you don't want to modify <code>~/.profile</code>):</p> <pre>    NPM_CONFIG_PREFIX=~/.npm-global\n</pre> <h2 id=\"option-3-use-a-package-manager-that-takes-care-of-this-for-you\" class=\"deep-link\">Option 3: Use a package manager that takes care of this for you.</h2> <p>If you're doing a fresh install of node on Mac OS you can avoid this problem altogether by using the <a href=\"http://brew.sh\">Homebrew</a> package manager. Homebrew sets things up out of the box with the correct permissions.</p> <pre>brew install node\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/getting-started/fixing-npm-permissions\" class=\"_attribution-link\">https://docs.npmjs.com/getting-started/fixing-npm-permissions</a>\n  </p>\n</div>\n","getting-started/installing-npm-packages-globally":"<h1 id=\"installing-npm-packages-globally\" class=\"deep-link\">Installing npm packages globally</h1> <div class=\"youtube-video\"><iframe src=\"https://www.youtube.com/embed/JXi9pg5fsao\" frameborder=\"0\" allowfullscreen></iframe></div> <p>There are two ways to install npm packages: locally or globally. You choose which kind of installation to use based on how you want to use the package.</p> <p>If you want to use it as a command line tool, something like the grunt CLI, then you want to install it globally. On the other hand, if you want to depend on the package from your own module using something like Node's <code>require</code>, then you want to install locally.</p> <p>To download packages globally, you simply use the command <code>npm install -g &lt;package&gt;</code>, e.g.:</p> <pre>npm install -g jshint</pre> <p>If you get an EACCES error, you <em>should</em> <a href=\"fixing-npm-permissions\">fix your permissions</a>. You could also try using <code>sudo</code>, but this <strong>should be avoided</strong>:</p> <pre>sudo npm install -g jshint</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/getting-started/installing-npm-packages-globally\" class=\"_attribution-link\">https://docs.npmjs.com/getting-started/installing-npm-packages-globally</a>\n  </p>\n</div>\n","getting-started/updating-global-packages":"<h1 id=\"updating-global-packages\" class=\"deep-link\">Updating global packages</h1> <p>To update global packages, you can use <code>npm install -g &lt;package&gt;</code>:</p> <pre>npm install -g jshint</pre> <p>To find out which packages need to be updated, you can use <code>npm outdated -g --depth=0</code>.</p> <p>To update all global packages, you can use <code>npm update -g</code>. However, for npm versions less than 2.6.1, <a href=\"https://gist.github.com/othiym23/4ac31155da23962afd0e\">this script</a> is recommended to update all outdated global packages.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/getting-started/updating-global-packages\" class=\"_attribution-link\">https://docs.npmjs.com/getting-started/updating-global-packages</a>\n  </p>\n</div>\n","getting-started/creating-node-modules":"<h1 id=\"creating-nodejs-modules\" class=\"deep-link\">Creating Node.js modules</h1> <div class=\"youtube-video\"><iframe src=\"https://www.youtube.com/embed/3I78ELjTzlQ\" frameborder=\"0\" allowfullscreen></iframe></div> <p>Node.js modules are one kind of package which can be published to npm. When you create a new module, you want to start with the <code>package.json</code> file.</p> <p>You can use <code>npm init</code> to create the <code>package.json</code>. It will prompt you for values for the <code>package.json</code> fields. The two required fields are name and version. You'll also want to have a value for main. You can use the default, <code>index.js</code>.</p> <p>If you want to add information for the author field, you can use the following format (email and web site are both optional):</p> <pre>Your Name &lt;email@example.com&gt; (http://example.com)</pre> <p>Once your <code>package.json</code> file is created, you'll want to create the file that will be loaded when your module is required. If you used the default, this is <code>index.js</code>.</p> <p>In that file, add a function as a property of the <code>exports</code> object. This will make the function available to other code.</p> <pre>exports.printMsg = function() {\n  console.log(\"This is a message from the demo package\");\n}</pre> <p>Test:</p> <ol> <li>Publish your package to npm</li> <li>Make a new directory outside of your project and cd into it</li> <li>Run <code>npm install &lt;package&gt;</code>\n</li> <li>Create a test.js file which requires the package and calls the method</li> <li>Run <code>node test.js</code>. The message should be output.</li> </ol><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/getting-started/creating-node-modules\" class=\"_attribution-link\">https://docs.npmjs.com/getting-started/creating-node-modules</a>\n  </p>\n</div>\n","getting-started/semantic-versioning":"<h1 id=\"semantic-versioning-and-npm\" class=\"deep-link\">Semantic versioning and npm</h1> <div class=\"youtube-video\"><iframe src=\"https://www.youtube.com/embed/kK4Meix58R4\" frameborder=\"0\" allowfullscreen></iframe></div> <p>Semantic versioning is a standard that a lot of projects use to communicate what kinds of changes are in this release. It's important to communicate what kinds of changes are in a release because sometimes those changes will break the code that depends on the package.</p> <h2 id=\"semver-for-publishers\" class=\"deep-link\">Semver for publishers</h2> <p>If a project is going to be shared with others, it should start at <code>1.0.0</code>, though some projects on npm don't follow this rule.</p> <p>After this, changes should be handled as follows:</p> <ul> <li>Bug fixes and other minor changes: Patch release, increment the last number, e.g. 1.0.1</li> <li>New features which don't break existing features: Minor release, increment the middle number, e.g. 1.1.0</li> <li>Changes which break backwards compatibility: Major release, increment the first number, e.g. 2.0.0</li> </ul> <h2 id=\"semver-for-consumers\" class=\"deep-link\">Semver for consumers</h2> <p>As a consumer, you can specify which kinds of updates your app can accept in the <code>package.json</code> file.</p> <p>If you were starting with a package 1.0.4, this is how you would specify the ranges:</p> <ul> <li>Patch releases: <code>1.0</code> or <code>1.0.x</code> or <code>~1.0.4</code>\n</li> <li>Minor releases: <code>1</code> or <code>1.x</code> or <code>^1.0.4</code>\n</li> <li>Major releases: <code>*</code> or <code>x</code>\n</li> </ul> <p>You can also specify more <a href=\"../misc/semver\">granular semver ranges</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/getting-started/semantic-versioning\" class=\"_attribution-link\">https://docs.npmjs.com/getting-started/semantic-versioning</a>\n  </p>\n</div>\n","getting-started/scoped-packages":"<h1 id=\"working-with-scoped-packages\" class=\"deep-link\">Working with scoped packages</h1> <p>Scopes are like namespaces for npm modules. If a package's name begins with <code>@</code>, then it is a scoped package. The scope is everything in between the <code>@</code> and the slash.</p> <pre>@scope/project-name</pre> <p>Each npm user has their own scope.</p> <pre>@username/project-name</pre> <p>You can find more in depth information about scopes in the <a href=\"../misc/scope#publishing-public-scoped-packages-to-the-public-npm-registry\">CLI documentation</a>.</p> <h2 id=\"update-npm-and-log-in\" class=\"deep-link\">Update npm and log in</h2> <p>You need a version of npm greater than <code>2.7.0</code>, and you'll need to log in to npm again on the command line if this is your first time using scoped modules.</p> <pre>sudo npm install -g npm\nnpm login</pre> <h2 id=\"initializing-a-scoped-package\" class=\"deep-link\">Initializing a scoped package</h2> <p>To create a scoped package, you simply use a package name that starts with your scope.</p> <pre>{\n  \"name\": \"@username/project-name\"\n}</pre> <p>If you use <code>npm init</code>, you can add your scope as an option to that command.</p> <pre>npm init --scope=username</pre> <p>If you use the same scope all the time, you will probably want to set this option in your <a href=\"../files/npmrc\"><code>.npmrc</code></a> file.</p> <pre>npm config set scope username</pre> <h2 id=\"publishing-a-scoped-package\" class=\"deep-link\">Publishing a scoped package</h2> <p>Scoped packages are private by default. To publish private modules, you need to be a paid <a href=\"https://www.npmjs.com/private-modules\">private modules</a> user.</p> <p>However, public scoped modules are free and don't require a paid subscription. To publish a public scoped module, set the access option when publishing it. This option will remain set for all subsequent publishes.</p> <pre>npm publish --access=public</pre> <h2 id=\"using-a-scoped-package\" class=\"deep-link\">Using a scoped package</h2> <p>To use a scoped package, you simply include the scope wherever you use the package name.</p> <p>In <code>package.json</code>:</p> <pre>{\n  \"dependencies\": {\n    \"@username/project-name\": \"^1.0.0\"\n  }\n}</pre> <p>On the command line:</p> <pre>npm install @username/project-name --save</pre> <p>In a <code>require</code> statement:</p> <pre>var projectName = require(\"@username/project-name\")</pre> <p>For information about using scoped private modules, visit <a href=\"https://www.npmjs.com/private-modules\">npmjs.com/private-modules</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/getting-started/scoped-packages\" class=\"_attribution-link\">https://docs.npmjs.com/getting-started/scoped-packages</a>\n  </p>\n</div>\n","getting-started/using-tags":"<h1 id=\"using-dist-tags\" class=\"deep-link\">Using dist-tags</h1> <p>Tags are a supplement to <a href=\"http://semver.org/\">semver</a> (e.g., v0.12) for organizing and labeling different versions of packages. In addition to being more human-readable, tags allow publishers to distribute their packages more effectively.</p> <h2 id=\"adding-tags\" class=\"deep-link\">Adding tags</h2> <p>To add a tag to a specific version of your package, use <code>npm dist-tag add &lt;pkg&gt;@&lt;version&gt; [&lt;tag&gt;]</code>. See <a href=\"../cli/dist-tag\">the CLI docs</a> for more information.</p> <h2 id=\"publishing-with-tags\" class=\"deep-link\">Publishing with tags</h2> <p>By default, <code>npm publish</code> will tag your package with the <code>latest</code> tag. If you use the <code>--tag</code> flag, you can specify another tag to use. For example, the following will publish your package with the <code>beta</code> tag:</p> <pre>npm publish --tag beta</pre> <h2 id=\"installing-with-tags\" class=\"deep-link\">Installing with tags</h2> <p>Like <code>npm publish</code>, <code>npm install &lt;pkg&gt;</code> will use the <code>latest</code> tag by default. To override this behavior, use <code>npm install &lt;pkg&gt;@&lt;tag&gt;</code>. The following example will install the <code>somepkg</code> at the version that has been tagged with <code>beta</code>.</p> <pre>npm install somepkg@beta</pre> <h2 id=\"caveats\" class=\"deep-link\">Caveats</h2> <p>Because dist-tags share the same namespace with semver, avoid using any tag names that may cause a conflict. The best practice is to avoid using tags beginning with a number or the letter \"v\".</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/getting-started/using-tags\" class=\"_attribution-link\">https://docs.npmjs.com/getting-started/using-tags</a>\n  </p>\n</div>\n","how-npm-works/npm2":"<h1 id=\"npm-v2-dependency-resolution\" class=\"deep-link\">npm v2 Dependency Resolution</h1> <h2>Example - <a class=\"button\" href=\"https://github.com/ashleygwilliams/npm-sandbox/tree/master/npm2/example1\">Explore on Github</a>\n</h2> <p>Imagine there are three modules: A, B, and C. A requires B at v1.0, and C also requires B, but at v2.0. We can visualize this like so:</p> <p><img src=\"https://docs.npmjs.com/images/how-npm-works/deps1.png\" alt=\"2 modules need B\"></p> <p>Now, let's create an application that requires both module A and module C.</p> <p><img src=\"https://docs.npmjs.com/images/how-npm-works/deps2.png\" alt=\"My app needs both A and C\"></p> <h2 id=\"dependency-hell\" class=\"deep-link\">Dependency Hell</h2> <p>A package manager would need to provide a version of module B. In all other runtimes prior to Node.js, this is what a package manager would try to do. This is dependency hell:</p> <p><img src=\"https://docs.npmjs.com/images/how-npm-works/deps3.png\" alt=\"Dependency Hell\"></p> <p>Instead of attempting to resolve module B to a single version, npm puts both versions of module B into the tree, each version nested under the module that requires it.</p> <p><img src=\"https://docs.npmjs.com/images/how-npm-works/deps4.png\" alt=\"what npm does\"></p> <p>In the terminal, this looks like this:</p> <p><img src=\"https://docs.npmjs.com/images/how-npm-works/tree.png\" alt=\"tree\"></p> <p>You can list the dependencies and still see their relationships using <code>npm ls</code>:</p> <p><img src=\"https://docs.npmjs.com/images/how-npm-works/npmls.png\" alt=\"npmls\"></p> <p>If you want to just see your primary dependencies, you can use:</p> <pre>npm ls --depth=0</pre> <p><img src=\"https://docs.npmjs.com/images/how-npm-works/npmlsdepth0.png\" alt=\"npmlsdepth0\"></p> <h2 id=\"npm-and-the-nodejs-module-loader\" class=\"deep-link\">npm and the Node.js Module Loader</h2> <p>However, npm doing this is <em>not enough</em>. Despite the fact that their nested locations allow for the coexistence of two versions of the same module, most module loaders are unable to load two different versions of the same module into memory. Luckily, the Node.js module loader is written for exactly this situation, and can easily load both versions of the module in a way that they do not conflict with each other.</p> <p>How is it that npm and the node module loader are so wonderfully symbiotic? They were both written in large part by the same person, npm, Inc. CEO, Isaac Z. Schlueter. Like 2 sides of the same piece of paper, npm and the Node.js module loader are what make Node.js a uniquely well-suited runtime for dependency management.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/how-npm-works/npm2\" class=\"_attribution-link\">https://docs.npmjs.com/how-npm-works/npm2</a>\n  </p>\n</div>\n","how-npm-works/npm3":"<h1 id=\"npm-v3-dependency-resolution\" class=\"deep-link\">npm v3 Dependency Resolution</h1> <p>npm3 resolves dependencies differently than npm2.</p> <p>While npm2 installs all dependencies in a nested way, npm3 tries to mitigate the deep trees and redundancy that such nesting causes. npm3 attempts this by installing some secondary dependencies (dependencies of dependencies) in a flat way, in the same directory as the primary dependency that requires it.</p> <p>The key major differences are:</p> <ul> <li>position in the directory structure no longer predicts the type (primary, secondary, etc) a dependency is</li> <li>dependency resolution depends on <em>install order</em>, or the order in which things are installed will change the <code>node_modules</code> directory tree structure</li> </ul> <h2>Example - <a class=\"button\" href=\"https://github.com/ashleygwilliams/npm-sandbox/tree/master/npm3/example1\">Explore on Github</a>\n</h2> <p>Imagine we have a module, A. A requires B.</p> <p><img src=\"https://docs.npmjs.com/images/npm3deps1.png\" alt=\"A depends on B\"></p> <p>Now, let's create an application that requires module A.</p> <p>On <code>npm install</code>, npm v3 will install both module A and its dependency, module B, inside the <code>/node_modules</code> directory, flat.</p> <p>In npm v2 this would have happened in a nested way.</p> <p><img src=\"https://docs.npmjs.com/images/npm3deps2.png\" alt=\"npm2 vs 3\"></p> <p>Now, let's say we want to require another module, C. C requires B, but at another version than A.</p> <p><img src=\"https://docs.npmjs.com/images/npm3deps3.png\" alt=\"new module dep, C\"></p> <p>However, since B v1.0 is already a top-level dep, we cannot install B v2.0 as a top level dependency. npm v3 handles this by defaulting to npm v2 behavior and nesting the new, different, module B version dependency under the module that requires it -- in this case, module C.</p> <p><img src=\"https://docs.npmjs.com/images/npm3deps4.png\" alt=\"nested dep\"></p> <p>In the terminal, this looks like this:</p> <p><img src=\"https://docs.npmjs.com/images/tree.png\" alt=\"tree\"></p> <p>You can list the dependencies and still see their relationships using <code>npm ls</code>:</p> <p><img src=\"https://docs.npmjs.com/images/npmls.png\" alt=\"npmls\"></p> <p>If you want to just see your primary dependencies, you can use:</p> <pre>npm ls --depth=0</pre> <p><img src=\"https://docs.npmjs.com/images/npmlsdepth0.png\" alt=\"npmlsdepth0\"></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/how-npm-works/npm3\" class=\"_attribution-link\">https://docs.npmjs.com/how-npm-works/npm3</a>\n  </p>\n</div>\n","how-npm-works/npm3-dupe":"<h1 id=\"npm3-duplication-and-deduplication\" class=\"deep-link\">npm3 Duplication and Deduplication</h1> <p>Let's continue with our example before. Currently we have an application that depends on 2 modules:</p> <ul> <li>Module-A, depends on Module B v1.0</li> <li>Module-C, depends on Module B v2.0</li> </ul> <p><img src=\"https://docs.npmjs.com/images/appsofar.png\" alt=\"our app so far\"></p> <p>Now we ask ourselves, what happens if we install another module that depends on Module B v1.0? or Module B v2.0?</p> <h2 id=\"example\" class=\"deep-link\">Example</h2> <p>Ok, so let's say we want to depend on another package, module D. Module D depends on Module B v2.0, just like Module C.</p> <p><img src=\"https://docs.npmjs.com/images/npm3deps5.png\" alt=\"new module dep, D\"></p> <p>Because B v1.0 is already a top-level dependency, we cannot install B v2.0 as a top level dependency. Therefore Module B v2.0 is installed as a nested dependency of Module D, even though we already have a copy installed, nested beneath Module C.</p> <p><img src=\"https://docs.npmjs.com/images/npm3deps6.png\" alt=\"no dedupe\"></p> <p>If a secondary dependency is required by 2+ modules, but was not installed as a top-level dependency in the directory hierarchy, it will be duplicated and nested beneath the primary dependency.</p> <p>However, if a secondary dependency is required by 2+ modules, but <em>is</em> installed as a top-level dependency in the directory hierarchy, it will <em>not</em> be duplicated, and will be shared by the primary dependencies that require it.</p> <p>For example, let's say we now want to depend on Module E. Module E, like Module A, depends on Module B v1.0.</p> <p><img src=\"https://docs.npmjs.com/images/npm3deps7.png\" alt=\"new module dep, E\"></p> <p>Because B v1.0 is already a top-level dependency, we do not need to duplicate and nest it. We simply install Module E and it shares Module B v1.0 with Module A.</p> <p><img src=\"https://docs.npmjs.com/images/npm3deps8.png\" alt=\"dedupe\"></p> <p>This appears like this in the terminal:</p> <p><img src=\"https://docs.npmjs.com/images/tree2.png\" alt=\"tree2\"></p> <p>Now-- what happens if we update Module A to v2.0, which depends on Module B v2.0, <em>not</em> Module B v1.0?</p> <p><img src=\"https://docs.npmjs.com/images/npm3deps9.png\" alt=\"bump Module A to version 2, deps on Bv2\"></p> <p><strong>The key is to remember that install order matters.</strong></p> <p>Even though Module A was installed first (as v1.0) via our <code>package.json</code> (because it is ordered alphabetically), using the interactive <code>npm install</code> command means that Module A v2.0 is the last package installed.</p> <p>As a result, npm3 does the following things when we run <code>npm install mod-a@2 --save</code>:</p> <ul> <li>it removes Module A v1.0</li> <li>it installs Modules A v2.0</li> <li>it leaves Module Bv1.0 because Module E v1.0 still depends on it</li> <li>it installs Module Bv2.0 as a nested dependency under Module A v2.0, since Module B v1.0 is already occupying the top level in the directory hierarchy</li> </ul> <p><img src=\"https://docs.npmjs.com/images/npm3deps10.png\" alt=\"bv1.0 stays even though a doesn't dep on it anymore\"></p> <p>This looks like this in the terminal:</p> <p><img src=\"https://docs.npmjs.com/images/tree3.png\" alt=\"tree3\"></p> <p>Finally, let's also update Module E to v2.0, which also depends on Module B v2.0 instead of Module B v1.0, just like the Module A update.</p> <p><img src=\"https://docs.npmjs.com/images/npm3deps11.png\" alt=\"bump Module E to version 2, deps on Bv2\"></p> <p>npm3 performs the following things:</p> <ul> <li>it removes Module E v1.0</li> <li>it installs Module E v2.0</li> <li>it removes Module B v1.0 because nothing depends on it anymore</li> <li>it installs Module B v2.0 in the top level of the directory because there is no other version of Module B there</li> </ul> <p><img src=\"https://docs.npmjs.com/images/npm3deps12.png\" alt=\"now we have Bv2.0 everywhere\"></p> <p>This looks like this in the terminal:</p> <p><img src=\"https://docs.npmjs.com/images/tree4.png\" alt=\"tree4\"></p> <p>Now, this is clearly not ideal. We have Module B v2.0 in nearly every directory. To get rid of duplication, we can run:</p> <pre>npm dedupe</pre> <p>This command resolves all of the packages dependencies on Module B v2.0 by redirecting them to the top level copy of Module B v2.0 and removes all the nested copies.</p> <p><img src=\"https://docs.npmjs.com/images/npm3deps13.png\" alt=\"deduped\"></p> <p>This looks like this in the terminal:</p> <p><img src=\"https://docs.npmjs.com/images/tree5.png\" alt=\"tree5\"></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/how-npm-works/npm3-dupe\" class=\"_attribution-link\">https://docs.npmjs.com/how-npm-works/npm3-dupe</a>\n  </p>\n</div>\n","getting-started/using-a-package.json":"<h1 id=\"using-a-packagejson\" class=\"deep-link\">Using a <code>package.json</code>\n</h1> <p>The best way to manage locally installed npm packages is to create a <code>package.json</code> file.</p> <p>A <code>package.json</code> file affords you a lot of great things:</p> <ol> <li>It serves as documentation for what packages your project depends on.</li> <li>It allows you to specify the versions of a package that your project can use using <a href=\"semantic-versioning\">semantic versioning rules</a>.</li> <li>Makes your build reproducable which means that its <em>way</em> easier to share with other developers.</li> </ol> <h2 id=\"requirements\" class=\"deep-link\">Requirements</h2> <p>As a bare minimum, a <code>package.json</code> must have:</p> <ul> <li>\n<code>\"name\"</code> <ul> <li>all lowercase</li> <li>one word, no spaces</li> <li>dashes and underscores allowed</li> </ul> </li> <li>\n<code>\"version\"</code> <ul> <li>in the form of <code>x.x.x</code>\n</li> <li>follows (semver spec)[<a href=\"semantic-versioning\">https://docs.npmjs.com/getting-started/semantic-versioning</a>]</li> </ul> </li> </ul> <p>For example:</p> <pre>{\n  \"name\": \"my-awesome-package\",\n  \"version\": \"1.0.0\"\n}</pre> <h2 id=\"creating-a-packagejson\" class=\"deep-link\">Creating a <code>package.json</code>\n</h2> <p>To create a <code>package.json</code> run:</p> <pre>&gt; npm init</pre> <p>This will initate a command line questionnaire that will conclude with the creation of a <code>package.json</code> in the directory you initiated the command.</p> <h3 id=\"the---yes-init-flag\" class=\"deep-link\">The <code>--yes</code> init flag</h3> <p>The extended CLI Q&amp;A experience is not for everyone, and often if you are comfortable with using a <code>package.json</code> you'd like a more expedited experience.</p> <p>You can get a default <code>package.json</code> by running <code>npm init</code> with the <code>--yes</code> or <code>-y</code> flag:</p> <pre>&gt; npm init --yes</pre> <p>This will ask you only one question, <code>author</code>. Otherwise it will fill in default values:</p> <pre>&gt; npm init --yes\nWrote to /home/ag_dubs/my_package/package.json:\n \n{\n  \"name\": \"my_package\",\n  \"version\": \"1.0.0\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"ag_dubs\",\n  \"license\": \"ISC\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/ashleygwilliams/my_package.git\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/ashleygwilliams/my_package/issues\"\n  },\n  \"homepage\": \"https://github.com/ashleygwilliams/my_package\"\n}</pre> <ul> <li>\n<code>name</code>: defaults to author name unless in a <code>git</code> directory, in which case it will be the name of the repository</li> <li>\n<code>version</code>: always <code>1.0.0</code>\n</li> <li>\n<code>main</code>: always <code>index.js</code>\n</li> <li>\n<code>scripts</code>: by default creates a empty <code>test</code> script</li> <li>\n<code>keywords</code>: empty</li> <li>\n<code>author</code>: whatever you provided the CLI</li> <li>\n<code>license</code>: <a href=\"https://opensource.org/licenses/ISC\"><code>ISC</code></a>\n</li> <li>\n<code>repository</code>: will pull in info from the current directory, if present</li> <li>\n<code>bugs</code>: will pull in info from the current directory, if present</li> <li>\n<code>homepage</code>: will pull in info from the current directory, if present</li> </ul> <p>You can also set several config options for the init command. Some useful ones:</p> <pre>&gt; npm set init.author.email \"wombat@npmjs.com\"\n&gt; npm set init.author.name \"ag_dubs\"\n&gt; npm set init.license \"MIT\"</pre> <h4 id=\"note\" class=\"deep-link\">NOTE:</h4> <p>If there is no description field in the <code>package.json</code>, npm uses the first line of the <code>README.md</code> or README instead. The description helps people find your package on npm search, so it's definitely useful to make a custom description in the <code>package.json</code> to make your package more discoverable.</p> <h2 id=\"specifying-packages\" class=\"deep-link\">Specifying Packages</h2> <p>To specify the packages your project depends on, you need to list the packages you'd like to use in your <code>package.json</code> file. There are 2 types of packages you can list:</p> <ul> <li>\n<code>\"dependencies\"</code>: these packages are required by your application in production</li> <li>\n<code>\"devDependencies\"</code>: these packages are only needed for development and testing</li> </ul> <h3 id=\"manually-editing-your-packagejson\" class=\"deep-link\">Manually editing your <code>package.json</code>\n</h3> <p>You can manually edit your <code>package.json</code>. You'll need to create an attribute in the package object called <code>dependencies</code> that points to an object. This object will hold attributes named after the packages you'd like to use, that point to a <a href=\"semantic-versioning\">semver</a> expression that specifies what versions of that project are compatible with your project.</p> <p>If you have dependencies you only need to use during local development, you will follow the same instructions as above but in an attribute called <code>devDependencies</code>.</p> <p>For example: The project below uses any version of the package <code>my_dep</code> that matches major version 1 in production, and requires any version of the package <code>my_test_framework</code> that matches major version 3, but only for development:</p> <pre>{\n  \"name\": \"my_package\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"my_dep\": \"^1.0.0\"\n  },\n  \"devDependencies\" : {\n    \"my_test_framework\": \"^3.1.0\"\n  }\n}</pre> <h3 id=\"the---save-and---save-dev-install-flags\" class=\"deep-link\">The <code>--save</code> and <code>--save-dev</code> install flags</h3> <p>The easier (and more awesome) way to add dependencies to your <code>package.json</code> is to do so from the command line, flagging the <code>npm install</code> command with either <code>--save</code> or <code>--save-dev</code>, depending on how you'd like to use that dependency.</p> <p>To add an entry to your <code>package.json</code>'s <code>dependencies</code>:</p> <pre>npm install &lt;package_name&gt; --save</pre> <p>To add an entry to your <code>package.json</code>'s <code>devDependencies</code>:</p> <pre>npm install &lt;package_name&gt; --save-dev</pre> <h2 id=\"managing-dependency-versions\" class=\"deep-link\">Managing dependency versions</h2> <p>npm uses Semantic Versioning, or, as we often refer to it, SemVer, to manage versions and ranges of versions of packages.</p> <p>If you have a <code>package.json</code> file in your directory and you run <code>npm install</code>, then npm will look at the dependencies that are listed in that file and download the latest versions satisfying <a href=\"semantic-versioning\">semver rules</a> for all of those.</p> <p>To learn more about semantic versioning, check out our <a href=\"semantic-versioning\">Getting Started \"Semver\" page</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/getting-started/using-a-package.json\" class=\"_attribution-link\">https://docs.npmjs.com/getting-started/using-a-package.json</a>\n  </p>\n</div>\n","how-npm-works/packages":"<h1 id=\"packages-and-modules\" class=\"deep-link\">Packages and Modules</h1> <p>One of the key steps in becoming immersed in an ecosystem is learning its vocabulary. Node.js and npm have very specific definitions of packages and modules, which are easy to mix up. We'll discuss those definitions here, make them distinct, and explain why certain default files are named the way they are.</p> <h2 id=\"tldr\" class=\"deep-link\">tl;dr</h2> <ul> <li>A <strong>package</strong> is a file or directory that is described by a <code>package.json</code>. This can happen in a bunch of different ways! For more info, see <a href=\"#what-is-a-package\">\"What is a <code>package</code>?</a>, below.</li> <li>A <strong>module</strong> is any file or directory that can be loaded by Node.js' <code>require()</code>. Again, there are several configurations that allow this to happen. For more info, see <a href=\"#what-is-a-module\">\"What is a <code>module</code>?\"</a>, below.</li> </ul> <h2 id=\"what-is-a-package\" class=\"deep-link\">What is a <code>package</code>?</h2> <p>A package is any of:</p> <ul> <li>a) a folder containing a program described by a <code>package.json</code> file</li> <li>b) a gzipped tarball containing (a)</li> <li>c) a url that resolves to (b)</li> <li>d) a <code>&lt;name&gt;@&lt;version&gt;</code> that is published on the registry with (c)</li> <li>e) a <code>&lt;name&gt;@&lt;tag&gt;</code> that points to (d)</li> <li>f) a <code>&lt;name&gt;</code> that has a <code>latest</code> tag satisfying (e)</li> <li>g) a <code>git</code> url that, when cloned, results in (a).</li> </ul> <p>Noting all these <code>package</code> possibilities, it follows that even if you never publish your package to the public registry, you can still get a lot of benefits of using npm:</p> <ul> <li>if you just want to write a node program, and/or</li> <li>if you also want to be able to easily install it elsewhere after packing it up into a tarball</li> </ul> <p>Git urls can be of the form:</p> <pre>git://github.com/user/project.git#commit-ish\ngit+ssh://user@hostname:project.git#commit-ish\ngit+http://user@hostname/project/blah.git#commit-ish\ngit+https://user@hostname/project/blah.git#commit-ish</pre> <p>The <code>commit-ish</code> can be any tag, sha, or branch which can be supplied as an argument to <code>git checkout</code>. The default is <code>master</code>.</p> <h2 id=\"what-is-a-module\" class=\"deep-link\">What is a <code>module</code>?</h2> <p>A module is anything that can be loaded with <code>require()</code> in a Node.js program. The following are all examples of things that can be loaded as modules:</p> <ul> <li>A folder with a <code>package.json</code> file containing a <code>main</code> field.</li> <li>A folder with an <code>index.js</code> file in it.</li> <li>A JavaScript file.</li> </ul> <h3 id=\"most-npm-packages-are-modules\" class=\"deep-link\">Most npm packages are modules</h3> <p>Generally, npm packages that are used in Node.js program are loaded with <code>require</code>, making them modules. However, there's no requirement that an npm package be a module!</p> <p>Some packages, e.g., <code>cli</code> packages only contain an executable command-line interface, and don't provide a <code>main</code> field for use in Node.js programs. These packages are <em>not</em> modules.</p> <p>Almost all npm packages (at least, those that are Node programs) <em>contain</em> many modules within them (because every file they load with <code>require()</code> is a module).</p> <p>In the context of a Node program, the <code>module</code> is also the thing that was loaded <em>from</em> a file. For example, in the following program:</p> <pre>var req = require('request')\n</pre> <p>we might say that \"The variable <code>req</code> refers to the <code>request</code> module\".</p> <h2 id=\"file-and-directory-names-in-the-nodejs-and-npm-ecosystem\" class=\"deep-link\">File and Directory Names in the Node.js and npm Ecosystem</h2> <ul> <li>So, why is it the <code>node_modules</code> folder, but <code>package.json</code> file?</li> <li>Why not <code>node_packages</code> or <code>module.json</code>?</li> </ul> <p>The <code>package.json</code> file defines the package. (See <a href=\"#what-is-a-package\">\"What is a <code>package</code>?\"</a>, above.)</p> <p>The <code>node_modules</code> folder is the place Node.js looks for modules. (See <a href=\"#what-is-a-module\">\"What is a <code>module</code>?\"</a>, above.)</p> <p>For example, if you create a file at <code>node_modules/foo.js</code> and then had a program that did <code>var f = require('foo.js')</code>, it would load the module. However, <code>foo.js</code> is not a \"package\" in this case, because it does not have a package.json.</p> <p>Alternatively, if you create a package which does not have an <code>index.js</code> or a <code>\"main\"</code> field in the <code>package.json</code> file, then it is not a module. Even if it's installed in <code>node_modules</code>, it can't be an argument to <code>require()</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/how-npm-works/packages\" class=\"_attribution-link\">https://docs.npmjs.com/how-npm-works/packages</a>\n  </p>\n</div>\n","private-modules/intro":"<h1 id=\"working-with-private-modules\" class=\"deep-link\">Working with private modules</h1> <p>With npm private modules, you can use the npm registry to host your own private code and the npm command line to manage it. This makes it easy to use public modules like Express and Browserify side-by-side with your own private code.</p> <div class=\"youtube-video\"><iframe src=\"https://www.youtube.com/embed/O6JoXGnHK_Y\" frameborder=\"0\" allowfullscreen></iframe></div> <h2 id=\"before-we-start\" class=\"deep-link\">Before we start</h2> <p>You need a version of npm greater than <code>2.7.0</code>, and you'll need to log in to npm again.</p> <pre>sudo npm install -g npm\nnpm login</pre> <h2 id=\"setting-up-your-package\" class=\"deep-link\">Setting up your package</h2> <p>All private packages are scoped.</p> <p>Scopes are a new feature of npm. If a package's name begins with <code>@</code>, then it is a scoped package. The scope is everything in between the <code>@</code> and the slash.</p> <pre>@scope/project-name</pre> <p>When you sign up for private modules as an individual user, your scope is your username.</p> <pre>@username/project-name</pre> <p>If you use <code>npm init</code> to initialize your packages, you can pass in your scope like this:</p> <pre>npm init --scope=&lt;your_scope&gt;</pre> <p>If you use the same scope most of the time, you'll probably want to set it in your default configuration instead.</p> <pre>npm config set scope &lt;your_scope&gt;</pre> <h2 id=\"publishing-your-package\" class=\"deep-link\">Publishing your package</h2> <p>Publishing your package is easy.</p> <pre>npm publish</pre> <p>By default, scoped packages are published as private. You can read more about this in the <a href=\"../getting-started/scoped-packages\">scopes documentation</a>.</p> <p>Once it's published, you should see it on the website with a private flag.</p> <p class=\"centered\"> <img src=\"https://docs.npmjs.com/images/private-modules/private-flag.png\" class=\"bordered\"> </p> <h2 id=\"giving-access-to-others\" class=\"deep-link\">Giving access to others</h2> <p>If you want to give access to someone, they need to be subscribed to private modules as well. Once they are, you can give them read or read-write access.</p> <p>You can control access to the package on the access page. To get to the page, click on the Collaborators link or the plus button.</p> <p class=\"centered\"> <img src=\"http://npmblog-images.surge.sh/static-pages/collaborators-page.png\" class=\"bordered\"> </p> <p>Add collaborators by entering the username and hitting enter.</p> <p class=\"centered\"> <img src=\"http://npmblog-images.surge.sh/static-pages/add-collaborator.gif\" class=\"bordered\"> </p> <p>You can also add collaborators on the command line:</p> <pre>npm owner add &lt;user&gt; &lt;package name&gt;</pre> <h2 id=\"installing-private-modules\" class=\"deep-link\">Installing private modules</h2> <p>To install a private module, you must have access to the package. Then you can use install with the scoped package name.</p> <pre>npm install @scope/project-name</pre> <p>You also use the scoped package name when requiring it.</p> <pre>var project = require('@scope/project-name')</pre> <h2 id=\"switching-from-private-to-public\" class=\"deep-link\">Switching from private to public</h2> <p>All scoped packages default to private. This ensures that you don't make something public by accident. You can change this on the access page.</p> <p class=\"centered\"> <img src=\"http://npmblog-images.surge.sh/static-pages/make-private-ui.gif\" class=\"bordered\"> </p> <p>You can also manage package access via the command:</p> <pre>npm access restricted &lt;package_name&gt;</pre> <p>The package will be removed from listings on the site within a few minutes of making it private.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/private-modules/intro\" class=\"_attribution-link\">https://docs.npmjs.com/private-modules/intro</a>\n  </p>\n</div>\n","how-npm-works/npm3-nondet":"<h1 id=\"npm3-non-determinism\" class=\"deep-link\">npm3 Non-determinism</h1> <p>As stated a few pages back in our example:</p> <p><img src=\"https://docs.npmjs.com/images/install-order.png\" alt=\"install order\"></p> <p>If you, and your development team, use a <code>package.json</code>, as well as the interactive <code>npm install</code> command to add pkgs (like most teams using npm do), it is likely that you will run into a situation where your local <code>node_modules</code> directory will differ from both your coworkers' <code>node_modules</code> directories, as well as the <code>node_modules</code> directories on your staging, testing, or production servers.</p> <p>In short? <strong>npm3 does not install dependencies in a deterministic way.</strong></p> <p>That's probably not a comforting statement to read, but in this article we'll discuss why this happens, as well as assure you that it has no implications for your application, as well as explain the steps to reliably (re)create a single, consistent, <code>node_modules</code> directory, should you want to do that.</p> <h2 id=\"example\" class=\"deep-link\">Example</h2> <p>Let's jump back to an example application from a few examples ago:</p> <p><img src=\"https://docs.npmjs.com/images/npm3deps8.png\" alt=\"app\"></p> <p>In this example, our app has the following <code>package.json</code>:</p> <pre>{\n  \"name\": \"example3\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"mod-a\": \"^1.0.0\",\n    \"mod-c\": \"^1.0.0\",\n    \"mod-d\": \"^1.0.0\",\n    \"mod-e\": \"^1.0.0\"\n  }\n}</pre> <p>On an <code>npm install</code> we will see this in our terminal:</p> <p><img src=\"https://docs.npmjs.com/images/npm3deps14.png\" alt=\"npm install\"></p> <p>Now, let's say a developer on our team decides to complete a feature that requires that they update Module A to v2.0, which now has a dependency on Module B v2.0, instead of, as previously, Module B v1.0.</p> <p><img src=\"https://docs.npmjs.com/images/npm3deps9.png\" alt=\"module a v2\"></p> <p>Our developer uses the interactive <code>npm install</code> command to install the new version of Module A, and save it to the <code>package.json</code>:</p> <pre>npm install mod-a@2 --save</pre> <p>The terminal outputs this:</p> <p><img src=\"https://docs.npmjs.com/images/npm3deps15.png\" alt=\"interactive install mod a\"></p> <p>We now have something that looks like this:</p> <p><img src=\"https://docs.npmjs.com/images/npm3deps10.png\" alt=\"tree with mod a v2 interactive\"></p> <p>Now let's say that our developer finished the feature requiring the new version of Module A and pushes the application to a testing server that runs <code>npm install</code> on the new <code>package.json</code>:</p> <pre>{\n  \"name\": \"example3\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"mod-a\": \"^2.0.0\",\n    \"mod-c\": \"^1.0.0\",\n    \"mod-d\": \"^1.0.0\",\n    \"mod-e\": \"^1.0.0\"\n  }\n}</pre> <p>The testing server's log shows this:</p> <p><img src=\"https://docs.npmjs.com/images/npm3deps16.png\" alt=\"tree with mod a v2 packagejson\"></p> <p>Which, when visualized, looks like this:</p> <p><img src=\"https://docs.npmjs.com/images/npm3deps17.png\" alt=\"totally diff dep tree\"></p> <p>Whoa, what?! This tree is completely different than the tree that exists on our developer's local machine. What happened?</p> <p><strong>Remember: install order matters.</strong></p> <p>When our developer updated Module A using the interactive <code>npm install</code> Module A v2.0 was functionally the <strong>last</strong> package installed. Because our developer had done an <code>npm install</code> when they first started working on the project, all modules listed in the <code>package.json</code> were already installed in the <code>node_modules</code> folder. <strong>Then</strong> Module A v2.0 was installed.</p> <p>It follows, then, that Module Bv1.0, a top level dependency because of Module A v1.0, then anchored by Module E v1.0, remains a top level dependency. Because Module Bv1.0 occupies the top-level, no other version of Module B can-- therefore, Module Bv2.0 remains a nested dependency under Module C v1.0 and Module D v1.0, and becomes a nested dependency for the new Module A v2.0 dependency.</p> <p>Let's consider what happened on the testing server. The project was pulled into a fresh directory, i.e. does not have a pre-existing <code>node_modules</code> directory. Then <code>npm install</code> is run, perhaps by a deploy script, to install dependencies from the <code>package.json</code>.</p> <p>This <code>package.json</code> now has Module A v2.0 listed in it, and thanks to alphabetical order (enforced by the <code>npm install</code> command), is now installed <strong>first</strong>, instead of <strong>last</strong>.</p> <p>When Module A v2.0 is installed first, in a clear <code>node_modules</code> directory, its dependencies are the <strong>first candidates</strong> for the top-level position. As a result, Module B v2.0 is installed in the top-level of the <code>node_modules</code> directory.</p> <p>Now, when it is time to install Module E v1.0, its dependency, Module B v1.0, cannot occupy the top-level of the <code>node_modules</code> directory, because Module B v2.0 is already there. Therefore, it is nested under Module E v1.0.</p> <h2 id=\"do-different-dependency-tree-structures-affect-my-app\" class=\"deep-link\">Do different dependency tree structures affect my app?</h2> <p>No! Even though the trees are different, both sufficiently install and point all your dependencies at all their dependencies, and so on, down the tree. You still have everything you need, it just happens to be in a different configuration.</p> <h2 id=\"i-want-my-node_modules-directory-to-be-the-same-how-can-i-do-that\" class=\"deep-link\">I want my <code>node_modules</code> directory to be the same. How can I do that?</h2> <p>The <code>npm install</code> command, when used exclusively to install packages from a <code>package.json</code>, will <strong>always produce the same tree</strong>. This is because install order from a <code>package.json</code> is <strong>always</strong> alphabetical. Same install order means that you will get the same tree.</p> <p>You can reliably get the same dependency tree by removing your <code>node_modules</code> directory and running <code>npm install</code> whenever you make a change to your <code>package.json</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/how-npm-works/npm3-nondet\" class=\"_attribution-link\">https://docs.npmjs.com/how-npm-works/npm3-nondet</a>\n  </p>\n</div>\n","private-modules/ci-server-config":"<h1 id=\"downloading-modules-to-cideployment-servers\" class=\"deep-link\">Downloading modules to CI/deployment servers</h1> <p>If you are using deployment servers or testing with CI servers, you'll need a way to download your private modules to those servers. To do this, you can set up an <a href=\"../files/npmrc\"><code>.npmrc</code></a> file which will authenticate your server with npm.</p> <h2 id=\"getting-an-authentication-token\" class=\"deep-link\">Getting an authentication token</h2> <p>One of the things that has changed in npm is that we now use auth tokens to authenticate in the CLI. To generate an auth token, you can log in on any machine. You'll end up with a line in your <a href=\"../files/npmrc\"><code>.npmrc</code></a> file that looks like this:</p> <pre>//registry.npmjs.org/:_authToken=00000000-0000-0000-0000-000000000000</pre> <p>The token is not derived from your password, but changing your password will invalidate all tokens. The token will be valid until the password is changed. You can also invalidate a single token by logging out on a machine that is logged in with that token.</p> <h2 id=\"setting-up-environment-variables\" class=\"deep-link\">Setting up environment variables</h2> <p>To make this more secure when pushing it up to the server, you can set this token as an environment variable on the server. For example, in Heroku you would do this:</p> <pre>heroku config:set NPM_TOKEN=00000000-0000-0000-0000-000000000000 --app=application_name</pre> <p>You will also need to add this to your environment variables on your development machine. In OSX or Linux, you would add this line to your <code>~/.profile</code>:</p> <pre>export NPM_TOKEN=\"00000000-0000-0000-0000-000000000000\"</pre> <p>and then refresh your environment variables:</p> <pre>source ~/.profile</pre> <h2 id=\"checking-in-your-npmrc\" class=\"deep-link\">Checking in your <code>.npmrc</code>\n</h2> <p>Then you can check in the <a href=\"../files/npmrc\"><code>.npmrc</code></a> file, replacing your token with the environment variable.</p> <pre>//registry.npmjs.org/:_authToken=${NPM_TOKEN}</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/private-modules/ci-server-config\" class=\"_attribution-link\">https://docs.npmjs.com/private-modules/ci-server-config</a>\n  </p>\n</div>\n","private-modules/docker-and-private-modules":"<h1 id=\"docker-and-private-modules\" class=\"deep-link\">Docker and private modules</h1> <p>If you've read through <a href=\"intro\">Working with private modules</a>, you'll know that in order to use private modules, you need to be <a href=\"../cli/adduser\">logged in</a> to npm via the npm CLI.</p> <p>If you're using npm private modules in an environment where you're not directly able to log in, such as inside a <a href=\"ci-server-config\">CI Server</a> or a <a href=\"https://www.docker.com/\">Docker</a> container, you'll need to get and export an npm token as an environment variable. That token should look like <code>NPM_TOKEN=00000000-0000-0000-0000-000000000000</code>.</p> <p>The <a href=\"ci-server-config#getting-an-authentication-token\">Getting an Authentication Token</a> should help you generate that token.</p> <p>If this is the workflow you need, please read the <a href=\"ci-server-config\">CI Server Config doc</a>. If that works with your system then perfect.</p> <p>If it doesn't, here we'll look at the problems with this workflow when running <code>npm install</code> inside a Docker container.</p> <h2 id=\"runtime-variables\" class=\"deep-link\">Runtime Variables</h2> <p>If you had the following Dockerfile:</p> <pre>FROM risingstack/alpine:3.3-v4.3.1-3.0.1\n \nCOPY package.json package.json  \nRUN npm install\n \n# Add your source files\nCOPY . .  \nCMD npm start  </pre> <p>Which will use the RisingStack <a href=\"https://hub.docker.com/r/risingstack/alpine/\">Alpine Node.JS Docker image</a>, copy the <code>package.json</code> into our container, installs dependencies, copies the source files and runs the start command as specified in the <code>package.json</code>.</p> <p>In order to install private packages, you may think that we could just add a line before we run <code>npm install</code>, using the <a href=\"https://docs.docker.com/engine/reference/builder/#env\">ENV parameter</a>:</p> <pre>ENV NPM_TOKEN=00000000-0000-0000-0000-000000000000</pre> <p>However this doesn't work as you would expect, because you want the npm install to occur when you run <code>docker build</code>, and in this instance, <code>ENV</code> variables aren't used, they are set for runtime only.</p> <h2 id=\"build-time-variables\" class=\"deep-link\">Build-time variables</h2> <p>We have to take advantage of a different way of passing environment variables to Docker, available since Docker 1.9. We'll use the slightly confusingly named <a href=\"https://docs.docker.com/engine/reference/builder/#arg\">ARG parameter</a>.</p> <p>A complete example that will allow us to use <code>--build-arg</code> to pass in our NPM_TOKEN requires adding a <code>.npmrc</code> file to the project. That file should contain the following content:</p> <pre>//registry.npmjs.org/:_authToken=${NPM_TOKEN}</pre> <p>The Dockerfile that takes advantage of this has a few more lines in it than our example earlier that allows us to use the <code>.npmrc</code> file and the <code>ARG</code> parameter.</p> <pre>FROM risingstack/alpine:3.3-v4.3.1-3.0.1\n \nARG NPM_TOKEN  \nCOPY .npmrc .npmrc  \nCOPY package.json package.json  \nRUN npm install  \nRUN rm -f .npmrc\n \n# Add your source files\nCOPY . .  \nCMD npm start</pre> <p>This adds the expected <code>ARG NPM_TOKEN</code>, but also copies the <code>.npmrc</code> file, and removes it when npm install completes.</p> <p>To build the image using this Dockerfile and the token, you can run the following (note the <code>.</code> at the end to give docker build the current directory as an argument):</p> <pre>docker build --build-arg NPM_TOKEN=${NPM_TOKEN} .</pre> <p>This will take your current <code>NPM_TOKEN</code> environment variable, and will build the docker image using it, so you can run <code>npm install</code> inside your container as the current logged in user!</p> <p>Note: Even if you delete the <code>.npmrc</code> file, it'll be kept in the commit history - to clean your secret up entirely make sure to squash them.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/private-modules/docker-and-private-modules\" class=\"_attribution-link\">https://docs.npmjs.com/private-modules/docker-and-private-modules</a>\n  </p>\n</div>\n","orgs/what-are-orgs":"<h1 id=\"what-are-organizations\" class=\"deep-link\">What are Organizations?</h1> <p>npm Organizations allow you to manage and monitor access to both new and pre-existing public and private packages through the use of teams.</p> <p>A great way to think about Organizations is that they are the umbrella structure that allows you to create teams and then grant package access to those teams.</p> <p>These docs can be seen as being separated into 2 sections: people and packages.</p> <h2>Managing People (<a href=\"../cli/team\"><code>npm team</code></a>)</h2> <ul> <li><a href=\"setup\">Creating an Organization</a></li> <li><a href=\"roles\">Definition of Organizational Roles</a></li> <li><a href=\"teams\">Teams and Team Member Access</a></li> </ul> <h2>Managing Package Access (<a href=\"../cli/access\"><code>npm access</code></a>)</h2> <p>An Organization can collaborate on 2 types of packages:</p> <ul> <li><a href=\"scoping-packages\">New packages scoped to the Organization</a></li> <li><a href=\"preexisting-packages\">Pre-existing public and private packages</a></li> </ul> <p>Additionally, all team members have the ability to <a href=\"package-access\">monitor access to packages</a>.</p> <h2 id=\"cli-documentation\" class=\"deep-link\">CLI Documentation</h2> <p>For full documentation on the CLI commands associated with this feature:</p> <ul> <li><a href=\"../cli/team\"><code>npm team</code></a></li> <li><a href=\"../cli/access\"><code>npm access</code></a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/orgs/what-are-orgs\" class=\"_attribution-link\">https://docs.npmjs.com/orgs/what-are-orgs</a>\n  </p>\n</div>\n","orgs/setup":"<h1 id=\"setting-up-an-organization\" class=\"deep-link\">Setting up an Organization</h1> <p><a href=\"#creating-an-organization\">Organizations</a> and <a href=\"#adding-members-to-an-organization\">Organization membership</a> are created in the <a href=\"https://www.npmjs.com/org/create\">npm web interface</a>.</p> <h2 id=\"creating-an-organization\" class=\"deep-link\">Creating an Organization</h2> <p>In order to create an Organization, you must be logged in as a npm user with a verified email address. To create an npm user, <a href=\"https://www.npmjs.com/signup\">click here</a>. There are 2 ways to create an organization:</p> <ul> <li><a href=\"#create-an-organization-with-a-new-scope\">New Scope</a></li> <li><a href=\"#migrating-an-existing-username-to-an-org\">Pre-existing User Scope</a></li> </ul> <h3 id=\"create-an-organization-with-a-new-scope\" class=\"deep-link\">Create an Organization with a new scope:</h3> <ol> <li>Log in to <a href=\"https://www.npmjs.com/login\">http://www.npmjs.com/</a>\n</li> <li>Visit <a href=\"https://www.npmjs.com/org/create\">https://www.npmjs.com/org/create</a>\n</li> <li>Click the big red button \"Create an Organization\"</li> </ol> <h2 id=\"organization-dashboard\" class=\"deep-link\">Organization Dashboard</h2> <p>Once you've created an Organization, you can perform a wide variety of tasks on your Organization Dashboard.</p> <p>Your Organization Dashboard is located:</p> <pre>https://www.npmjs.com/org/&lt;org&gt;</pre> <p>...where <code>&lt;org&gt;</code> is the name of your Organization.</p> <h2 id=\"adding-members-to-an-organization\" class=\"deep-link\">Adding Members to an Organization</h2> <p>By default, your Organization is set up with a <a href=\"developers-team\">developers team</a>. Whenever you add a new member to your Organization, they are automatically added to the developers team.</p> <p>You may delete the developers team. If you do, newly added Organization members will not be added to any teams by default.</p> <p>For more information about the developers team, see <a href=\"developers-team\">Developers Team</a></p> <p>To add a member to your organization, you add them by their npm username via the <a href=\"#organization-dashboard\">Organization Dashboard</a>.</p> <h2 id=\"creating-team-admins\" class=\"deep-link\">Creating Team Admins</h2> <p>As the creator of the Organization you are granted the role of <a href=\"roles#super-admin\">Super Admin</a>.</p> <p>For more information about the <a href=\"roles#super-admin\">Super Admin</a> and <a href=\"roles#team-admin\">Team Admin</a> roles, checkout the <a href=\"roles\">Roles</a> documentation.</p> <h2 id=\"migrating-an-existing-username-to-an-org\" class=\"deep-link\">Migrating an existing username to an Org</h2> <p>Many users have already registered an npm user with the @scope they want to use for their org. If you attempt to register an org with a scope already in use, and you are already logged in as that user, you will be prompted to automatically migrate that user to an org.</p> <p>Once your @scope is owned by an org, <strong>you can no longer log in as your former username</strong>. Orgs are not users and do not have usernames and passwords. During migration, you will be prompted to pick a new username. This new user will have the same password as your old user, but all packages that belonged to your old user will now belong to the org. Your new user will have Super-Admin privileges to the org.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/orgs/setup\" class=\"_attribution-link\">https://docs.npmjs.com/orgs/setup</a>\n  </p>\n</div>\n","orgs/roles":"<h1 id=\"roles\" class=\"deep-link\">Roles</h1> <p>Organizations are first and foremost a way to manage access, roles and resposibilities. Organizations offer 3 types of roles, and also have an interface with the general public:</p> <ul> <li> <h2 id=\"super-admin\" class=\"deep-link\">Super-Admin</h2> <p>The user who creates the Organization is automatically set as the Super Admin.</p> <ul> <li>can see/do everything regarding their org</li> <li>can pay for the org</li> <li>can <a href=\"setup#adding-members-to-an-organization\">add users to the org (team-admin or developer)</a>\n</li> </ul> <p><strong>Currently, only one Super Admin is allowed and the Super Admin User cannot be changed. New versions of our Orgs product will make this possible.</strong></p> </li> <li> <h2 id=\"team-admin\" class=\"deep-link\">Team-Admin</h2> <p>Team Admins are set by the Super Admin in the <a href=\"setup#creating-team-admins\">website interface</a>. There can be &gt;=0 Team Admins.</p> <ul> <li>can <a href=\"teams#list-an-organization-s-teams\">see teams</a>\n</li> <li>can add a <a href=\"scoping-packages\">new org-scoped package</a>\n</li> <li>can add a <a href=\"preexisting-packages\">pre-existing package</a>\n</li> <li>cannot pay</li> <li>cannot add/remove users to/from org</li> <li>can <a href=\"teams#adding-users-to-a-team\">add/remove users to/from teams</a>\n</li> </ul> </li> <li> <h2 id=\"member\" class=\"deep-link\">Member</h2> <p>Members are added to teams by the Organizations Super Admin or Team Admin.</p> <ul> <li>can <a href=\"teams#list-teams-a-member-belongs-to\">see the teams they're on</a>\n</li> <li>can <a href=\"package-access#view-a-team-s-package-access\">see the packages associated with those teams</a>\n</li> <li>can <a href=\"scoping-packages\">add a new org-scoped package</a>\n</li> <li>cannot pay</li> <li>cannot add users</li> </ul> </li> <li> <h2 id=\"general-public\" class=\"deep-link\">General Public</h2> <p>While not associated with the Organization, the general public has some ability to interact with Organizations.</p> <ul> <li>can see the org exists</li> <li>can see public packages in the org's domain</li> <li>cannot see private packages</li> <li>cannot see members</li> <li>cannot do anything for the org (manage members, teams, packages, billing, etc)</li> </ul> </li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/orgs/roles\" class=\"_attribution-link\">https://docs.npmjs.com/orgs/roles</a>\n  </p>\n</div>\n","orgs/developers-team":"<h1 id=\"the-developers-team\" class=\"deep-link\">The Developers Team</h1> <p>When you first create an Organization, a team called <code>developers</code> is created.</p> <p>The <code>developers</code> team is a <strong>special team</strong>. While it can be deleted <a href=\"#removing-the-developers-team\">if you so choose</a>, by default it acts as a \"catch-all\" team. This means:</p> <ul> <li>new Organization members will be added to the <code>developers</code> team by default</li> <li>the <code>developers</code> team has write access to all new Organization-scope package publishes</li> </ul> <p>The effects of deleting the team are <a href=\"#removing-the-developers-team\">covered below</a>.</p> <h2 id=\"removing-the-developers-team\" class=\"deep-link\">Removing the <code>developers</code> team</h2> <p>You may delete the developers team. If you do, newly added Organization members will not be added to any teams by default. Additionally, you will not be able to see all users in your org from the CLI, as one can only view the members of a team via the CLI.</p> <p>You should also note that upon publish, in the absence of a <code>developers</code> team, it is difficult to determine who should be set as maintainers of that package. npm will do its best to fallback to another Organization team that the publisher is a member of. This is not predictable.</p> <h2 id=\"reinstating-the-developers-team\" class=\"deep-link\">Reinstating the <code>developers</code> team</h2> <p>If you've removed the developers team, but now want it back, you can reinstate it by creating a new team called <code>developers</code> (case sensitive!). You will need to add all current members of the Organization to the new <code>developers</code> team, but, going forward all newly added Organization members will be automatically added to the new <code>developers</code> team.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/orgs/developers-team\" class=\"_attribution-link\">https://docs.npmjs.com/orgs/developers-team</a>\n  </p>\n</div>\n","orgs/sponsorship":"<h1 id=\"sponsorship\" class=\"deep-link\">Sponsorship</h1> <h2 id=\"sponsorship-types\" class=\"deep-link\">Sponsorship Types</h2> <p><img src=\"https://docs.npmjs.com/images/orgs/ships-dashboard.png\" alt=\"org-sponsorship levels\"></p> <p>Let's say we have an Organization, <code>@ag_org</code>. This Organization was created by user <code>@ag_dubs</code>, and therefore she is the <a href=\"roles#Super-Admin\"><code>Super Admin</code></a>.</p> <p><img src=\"https://docs.npmjs.com/images/orgs/ships-superadmin.png\" alt=\"super admin\"></p> <p>Being a Super Admin, she adds 3 members to her team:</p> <ul> <li>Jacques Derrida</li> <li>Carl Sagan</li> <li>Emma Goldman</li> </ul> <p>There are three types of Sponsorship that can occur:</p> <ul> <li>Paid by Current Organization</li> <li>Paid by Self or Another Organization</li> <li>Not Paid</li> </ul> <h3 id=\"paid-by-current-organization\" class=\"deep-link\">Paid by Current Organization</h3> <p>When Super Admin, <code>@ag_dubs</code>, added <code>JacquesDerrida</code> to the Organization, <code>JacquesDerrida</code> did not already belong to an organization nor did they have a subscription to private packages.</p> <p>By default, when the Super Admin added him to the Organization, <code>JacquesDerrida</code> was set as a member of the Organization, <strong>paid by the current organization</strong>. This appears in the UI like this:</p> <p><img src=\"https://docs.npmjs.com/images/orgs/ships-paidcurrent.png\" alt=\"paid by current org\"></p> <ul> <li>Because <code>JacquesDerrida</code> is a <code>developer</code> in the org, they can: <ul> <li>Be added to any/all of the Organization's teams,</li> <li>See the teams they are on,</li> <li>See the other members of the team,</li> <li>\n<em>See</em> the packages (both public and private) those teams grant access to,</li> </ul> </li> <li>Because <code>JacquesDerrida</code> is sponsored, they can: <ul> <li>Install, publish, and unpublish the private packages to which they have access</li> </ul> </li> </ul> <p><code>JacquesDerrida</code> cannot:</p> <ul> <li>See all of the Organization's teams</li> <li>See all members of the Organization</li> </ul> <h3 id=\"paid-by-self-or-another-organization\" class=\"deep-link\">Paid by Self or Another Organization</h3> <ul> <li> <h4 id=\"paid-for-by-another-organization\" class=\"deep-link\">Paid for by Another Organization</h4> <p>When Super Admin, <code>@ag_dubs</code>, added <code>CarlSagan</code> to the Organization, <code>CarlSagan</code> already belonged to another Organization (<code>@nasa-org</code>, duh).</p> <p>By default, when <code>CarlSagan</code> was added to the Organization, he was set as a member of the Organization, <strong>paid by another scope</strong>. This appears in the UI like this:</p> <p><img src=\"https://docs.npmjs.com/images/orgs/ships-paidother.png\" alt=\"paid, but not by the org\"></p> <p>As a result, <code>CarlSagan</code> has the same permissions as <code>JacquesDerrida</code>, above.</p> <ul> <li> <h4 id=\"paid-for-by-self\" class=\"deep-link\">Paid for by Self</h4> <p>As a subscriber to Private Packages, you can understand your sponsorship as \"sponsoring yourself\". As a result, a subscriber to private packages would have had the same default behavior as occured for <code>CarlSagan</code>, i.e., the previous sponsorship would trump the possibility of a new Organization sponsorship. A subscriber to private packages will appear in the Organization dashboard as someone who is <code>paid</code> but <code>not by the current org</code>. This appears in the UI the same as above:</p> <p><img src=\"https://docs.npmjs.com/images/orgs/ships-paidother.png\" alt=\"paid, but not by the org\"></p> </li> <li> <h4 id=\"changing-sponsorship\" class=\"deep-link\">Changing Sponsorship</h4> <p>If a user is a subscriber to private packages, this sponsorship scope will trump all other potential sponsorships. If you would like to change this, i.e., offer sponsorship to a user who already has another sponsorship (org or private pkgs), please contact <a href=\"mailto:support@npmjs.com\">support@npmjs.com</a>.</p> </li> </ul> </li> <li> <h3 id=\"not-paid\" class=\"deep-link\">Not Paid</h3> <p><code>EmmaGoldman</code>, at the time that <code>@ag_dubs</code> added them to the <code>@ag_org</code> Organization, did not subscribe to private packages nor did they belong to another Organization. This means that they did not have any previous sponsorships.</p> <p>Like <code>JacquesDerrida</code>, <code>EmmaGoldman</code> was set as <strong>paid by the current organization, <code>@ag-org</code></strong> by default. However, Super Admin <code>@ag_dubs</code> opted to cancel <code>@ag-org</code>'s sponsorship of <code>EmmaGoldman</code>. This status appears in the UI like this:</p> <p><img src=\"https://docs.npmjs.com/images/orgs/ships-notpaid.png\" alt=\"not paid\"></p> <ul> <li>Because <code>EmmaGoldman</code> is a <code>developer</code> in the org, they can: <ul> <li>Be added to any/all of the Organization's teams,</li> <li>See the teams they are on,</li> <li>See the other members of the team,</li> <li>\n<em>See</em> the packages (both public and private) those teams grant access to,</li> </ul> </li> <li>Because <code>EmmaGoldman</code> is <em>not</em> sponsored, they <em>cannot</em>: <ul> <li>Install, publish, and unpublish the private packages to which they have access</li> </ul> </li> </ul> <p><code>EmmaGoldman</code> can:</p> <ul> <li>Collaborate on and publish public, scoped or unscoped packages, that their team membership grants them access to</li> </ul> <p><code>EmmaGoldman</code> cannot:</p> <ul> <li>See all of the Organization's teams</li> <li>See all members of the Organization</li> <li>Collaborate on and publish any private packages, even if their team membership would otherwise grant them access</li> </ul> </li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/orgs/sponsorship\" class=\"_attribution-link\">https://docs.npmjs.com/orgs/sponsorship</a>\n  </p>\n</div>\n","orgs/scoping-packages":"<h1 id=\"scoping-a-package-to-your-organization\" class=\"deep-link\">Scoping a Package to your Organization</h1> <p>Once you have an Organization set up, you'll want to scope packages to that Organization.</p> <p>Users with <a href=\"roles#super-admin\">Super Admin</a>, <a href=\"roles#team-admin\">Team Admin</a>, and <a href=\"roles#member\">Member</a> roles can perform this action.</p> <h2 id=\"scoping-a-new-package\" class=\"deep-link\">Scoping a New Package</h2> <p>To do this, run these commands in the root directory of your package:</p> <pre>&gt; npm init --scope=&lt;org&gt;\n&gt; npm publish</pre> <p>... where <code>&lt;org&gt;</code> is the name of your Organization.</p> <h2 id=\"setting-your-organization-as-default-scope\" class=\"deep-link\">Setting your Organization as Default Scope</h2> <p>If you are using Organizations, there is a good chance that you'll be using the Organization scope regularly.</p> <p>To save yourself some typing, you can set your Organization as your default scope:</p> <pre>npm config set scope &lt;org&gt;</pre> <p>... where <code>&lt;org&gt;</code> is the name of your Organization.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/orgs/scoping-packages\" class=\"_attribution-link\">https://docs.npmjs.com/orgs/scoping-packages</a>\n  </p>\n</div>\n","misc/coding-style":"<h1>npm-coding-style</h1> <h1 class=\"subtitle\">npm's \"funny\" coding style</h1> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>npm's coding style is a bit unconventional. It is not different for difference's sake, but rather a carefully crafted style that is designed to reduce visual clutter and make bugs more apparent.</p> <p>If you want to contribute to npm (which is very encouraged), you should make your code conform to npm's style.</p> <p>Note: this concerns npm's code not the specific packages that you can download from the npm registry.</p> <h2 id=\"line-length\" class=\"deep-link\">Line Length</h2> <p>Keep lines shorter than 80 characters. It's better for lines to be too short than to be too long. Break up long lists, objects, and other statements onto multiple lines.</p> <h2 id=\"indentation\" class=\"deep-link\">Indentation</h2> <p>Two-spaces. Tabs are better, but they look like hell in web browsers (and on GitHub), and node uses 2 spaces, so that's that.</p> <p>Configure your editor appropriately.</p> <h2 id=\"curly-braces\" class=\"deep-link\">Curly braces</h2> <p>Curly braces belong on the same line as the thing that necessitates them.</p> <p>Bad:</p> <pre>function ()\n{\n</pre> <p>Good:</p> <pre>function () {\n</pre> <p>If a block needs to wrap to the next line, use a curly brace. Don't use it if it doesn't.</p> <p>Bad:</p> <pre>if (foo) { bar() }\nwhile (foo)\n  bar()\n</pre> <p>Good:</p> <pre>if (foo) bar()\nwhile (foo) {\n  bar()\n}\n</pre> <h2 id=\"semicolons\" class=\"deep-link\">Semicolons</h2> <p>Don't use them except in four situations:</p> <ul> <li>\n<code>for (;;)</code> loops. They're actually required.</li> <li>null loops like: <code>while (something) ;</code> (But you'd better have a good reason for doing that.)</li> <li><code>case 'foo': doSomething(); break</code></li> <li>In front of a leading <code>(</code> or <code>[</code> at the start of the line. This prevents the expression from being interpreted as a function call or property access, respectively.</li> </ul> <p>Some examples of good semicolon usage:</p> <pre>;(x || y).doSomething()\n;[a, b, c].forEach(doSomething)\nfor (var i = 0; i &lt; 10; i ++) {\n  switch (state) {\n    case 'begin': start(); continue\n    case 'end': finish(); break\n    default: throw new Error('unknown state')\n  }\n  end()\n}\n</pre> <p>Note that starting lines with <code>-</code> and <code>+</code> also should be prefixed with a semicolon, but this is much less common.</p> <h2 id=\"comma-first\" class=\"deep-link\">Comma First</h2> <p>If there is a list of things separated by commas, and it wraps across multiple lines, put the comma at the start of the next line, directly below the token that starts the list. Put the final token in the list on a line by itself. For example:</p> <pre>var magicWords = [ 'abracadabra'\n                 , 'gesundheit'\n                 , 'ventrilo'\n                 ]\n  , spells = { 'fireball' : function () { setOnFire() }\n             , 'water' : function () { putOut() }\n             }\n  , a = 1\n  , b = 'abc'\n  , etc\n  , somethingElse\n</pre> <h2 id=\"quotes\" class=\"deep-link\">Quotes</h2> <p>Use single quotes for strings except to avoid escaping.</p> <p>Bad:</p> <pre>var notOk = \"Just double quotes\"\n</pre> <p>Good:</p> <pre>var ok = 'String contains \"double\" quotes'\nvar alsoOk = \"String contains 'single' quotes or apostrophe\"\n</pre> <h2 id=\"whitespace\" class=\"deep-link\">Whitespace</h2> <p>Put a single space in front of ( for anything other than a function call. Also use a single space wherever it makes things more readable.</p> <p>Don't leave trailing whitespace at the end of lines. Don't indent empty lines. Don't use more spaces than are helpful.</p> <h2 id=\"functions\" class=\"deep-link\">Functions</h2> <p>Use named functions. They make stack traces a lot easier to read.</p> <h2 id=\"callbacks-syncasync-style\" class=\"deep-link\">Callbacks, Sync/async Style</h2> <p>Use the asynchronous/non-blocking versions of things as much as possible. It might make more sense for npm to use the synchronous fs APIs, but this way, the fs and http and child process stuff all uses the same callback-passing methodology.</p> <p>The callback should always be the last argument in the list. Its first argument is the Error or null.</p> <p>Be very careful never to ever ever throw anything. It's worse than useless. Just send the error message back as the first argument to the callback.</p> <h2 id=\"errors\" class=\"deep-link\">Errors</h2> <p>Always create a new Error object with your message. Don't just return a string message to the callback. Stack traces are handy.</p> <h2 id=\"logging\" class=\"deep-link\">Logging</h2> <p>Logging is done using the <a href=\"https://github.com/npm/npmlog\">npmlog</a> utility.</p> <p>Please clean up logs when they are no longer helpful. In particular, logging the same object over and over again is not helpful. Logs should report what's happening so that it's easier to track down where a fault occurs.</p> <p>Use appropriate log levels. See <code><a href=\"config\">npm-config</a></code> and search for \"loglevel\".</p> <h2 id=\"case-naming-etc\" class=\"deep-link\">Case, naming, etc.</h2> <p>Use <code>lowerCamelCase</code> for multiword identifiers when they refer to objects, functions, methods, properties, or anything not specified in this section.</p> <p>Use <code>UpperCamelCase</code> for class names (things that you'd pass to \"new\").</p> <p>Use <code>all-lower-hyphen-css-case</code> for multiword filenames and config keys.</p> <p>Use named functions. They make stack traces easier to follow.</p> <p>Use <code>CAPS_SNAKE_CASE</code> for constants, things that should never change and are rarely used.</p> <p>Use a single uppercase letter for function names where the function would normally be anonymous, but needs to call itself recursively. It makes it clear that it's a \"throwaway\" function.</p> <h2 id=\"null-undefined-false-0\" class=\"deep-link\">null, undefined, false, 0</h2> <p>Boolean variables and functions should always be either <code>true</code> or <code>false</code>. Don't set it to 0 unless it's supposed to be a number.</p> <p>When something is intentionally missing or removed, set it to <code>null</code>.</p> <p>Don't set things to <code>undefined</code>. Reserve that value to mean \"not yet set to anything.\"</p> <p>Boolean objects are verboten.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"developers\">npm-developers</a></li> <li><a href=\"faq\">npm-faq</a></li> <li><a href=\"../cli/npm\">npm</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/misc/coding-style\" class=\"_attribution-link\">https://docs.npmjs.com/misc/coding-style</a>\n  </p>\n</div>\n","misc/developers":"<h1>npm-developers</h1> <h1 class=\"subtitle\">Developer Guide</h1> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>So, you've decided to use npm to develop (and maybe publish/deploy) your project.</p> <p>Fantastic!</p> <p>There are a few things that you need to do above the simple steps that your users will do to install your program.</p> <h2 id=\"about-these-documents\" class=\"deep-link\">About These Documents</h2> <p>These are man pages. If you install npm, you should be able to then do <code>man npm-thing</code> to get the documentation on a particular topic, or <code>npm help thing</code> to see the same information.</p> <h2 id=\"what-is-a-package\" class=\"deep-link\">What is a <code>package</code>\n</h2> <p>A package is:</p> <ul> <li>a) a folder containing a program described by a package.json file</li> <li>b) a gzipped tarball containing (a)</li> <li>c) a url that resolves to (b)</li> <li>d) a <code>&lt;name&gt;@&lt;version&gt;</code> that is published on the registry with (c)</li> <li>e) a <code>&lt;name&gt;@&lt;tag&gt;</code> that points to (d)</li> <li>f) a <code>&lt;name&gt;</code> that has a \"latest\" tag satisfying (e)</li> <li>g) a <code>git</code> url that, when cloned, results in (a).</li> </ul> <p>Even if you never publish your package, you can still get a lot of benefits of using npm if you just want to write a node program (a), and perhaps if you also want to be able to easily install it elsewhere after packing it up into a tarball (b).</p> <p>Git urls can be of the form:</p> <pre>git://github.com/user/project.git#commit-ish\ngit+ssh://user@hostname:project.git#commit-ish\ngit+http://user@hostname/project/blah.git#commit-ish\ngit+https://user@hostname/project/blah.git#commit-ish\n</pre> <p>The <code>commit-ish</code> can be any tag, sha, or branch which can be supplied as an argument to <code>git checkout</code>. The default is <code>master</code>.</p> <h2 id=\"the-packagejson-file\" class=\"deep-link\">The package.json File</h2> <p>You need to have a <code>package.json</code> file in the root of your project to do much of anything with npm. That is basically the whole interface.</p> <p>See <code><a href=\"../files/package.json\">package.json</a></code> for details about what goes in that file. At the very least, you need:</p> <ul> <li> <p>name: This should be a string that identifies your project. Please do not use the name to specify that it runs on node, or is in JavaScript. You can use the \"engines\" field to explicitly state the versions of node (or whatever else) that your program requires, and it's pretty well assumed that it's javascript.</p> <p>It does not necessarily need to match your github repository name.</p> <p>So, <code>node-foo</code> and <code>bar-js</code> are bad names. <code>foo</code> or <code>bar</code> are better.</p> </li> <li> <p>version: A semver-compatible version.</p> </li> <li> <p>engines: Specify the versions of node (or whatever else) that your program runs on. The node API changes a lot, and there may be bugs or new functionality that you depend on. Be explicit.</p> </li> <li> <p>author: Take some credit.</p> </li> <li> <p>scripts: If you have a special compilation or installation script, then you should put it in the <code>scripts</code> object. You should definitely have at least a basic smoke-test command as the \"scripts.test\" field. See <a href=\"scripts\">npm-scripts</a>.</p> </li> <li> <p>main: If you have a single module that serves as the entry point to your program (like what the \"foo\" package gives you at require(\"foo\")), then you need to specify that in the \"main\" field.</p> </li> <li> <p>directories: This is an object mapping names to folders. The best ones to include are \"lib\" and \"doc\", but if you use \"man\" to specify a folder full of man pages, they'll get installed just like these ones.</p> </li> </ul> <p>You can use <code>npm init</code> in the root of your package in order to get you started with a pretty basic package.json file. See <code><a href=\"../cli/init\">npm-init</a></code> for more info.</p> <h2 id=\"keeping-files-out-of-your-package\" class=\"deep-link\">Keeping files <em>out</em> of your package</h2> <p>Use a <code>.npmignore</code> file to keep stuff out of your package. If there's no <code>.npmignore</code> file, but there <em>is</em> a <code>.gitignore</code> file, then npm will ignore the stuff matched by the <code>.gitignore</code> file. If you <em>want</em> to include something that is excluded by your <code>.gitignore</code> file, you can create an empty <code>.npmignore</code> file to override it. Like <code>git</code>, <code>npm</code> looks for <code>.npmignore</code> and <code>.gitignore</code> files in all subdirectories of your package, not only the root directory.</p> <p><code>.npmignore</code> files follow the <a href=\"https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository#Ignoring-Files\">same pattern rules</a> as <code>.gitignore</code> files:</p> <ul> <li>Blank lines or lines starting with <code>#</code> are ignored.</li> <li>Standard glob patterns work.</li> <li>You can end patterns with a forward slash <code>/</code> to specify a directory.</li> <li>You can negate a pattern by starting it with an exclamation point <code>!</code>.</li> </ul> <p>By default, the following paths and files are ignored, so there's no need to add them to <code>.npmignore</code> explicitly:</p> <ul> <li><code>.*.swp</code></li> <li><code>._*</code></li> <li><code>.DS_Store</code></li> <li><code>.git</code></li> <li><code>.hg</code></li> <li><code>.npmrc</code></li> <li><code>.lock-wscript</code></li> <li><code>.svn</code></li> <li><code>.wafpickle-*</code></li> <li><code>config.gypi</code></li> <li><code>CVS</code></li> <li><code>npm-debug.log</code></li> </ul> <p>Additionally, everything in <code>node_modules</code> is ignored, except for bundled dependencies. npm automatically handles this for you, so don't bother adding <code>node_modules</code> to <code>.npmignore</code>.</p> <p>The following paths and files are never ignored, so adding them to <code>.npmignore</code> is pointless:</p> <ul> <li><code>package.json</code></li> <li>\n<code>README</code> (and its variants)</li> <li>\n<code>CHANGELOG</code> (and its variants)</li> <li>\n<code>LICENSE</code> / <code>LICENCE</code>\n</li> </ul> <h2 id=\"link-packages\" class=\"deep-link\">Link Packages</h2> <p><code>npm link</code> is designed to install a development package and see the changes in real time without having to keep re-installing it. (You do need to either re-link or <code>npm rebuild -g</code> to update compiled packages, of course.)</p> <p>More info at <code><a href=\"../cli/link\">npm-link</a></code>.</p> <h2 id=\"before-publishing-make-sure-your-package-installs-and-works\" class=\"deep-link\">Before Publishing: Make Sure Your Package Installs and Works</h2> <p><strong>This is important.</strong></p> <p>If you can not install it locally, you'll have problems trying to publish it. Or, worse yet, you'll be able to publish it, but you'll be publishing a broken or pointless package. So don't do that.</p> <p>In the root of your package, do this:</p> <pre>npm install . -g\n</pre> <p>That'll show you that it's working. If you'd rather just create a symlink package that points to your working directory, then do this:</p> <pre>npm link\n</pre> <p>Use <code>npm ls -g</code> to see if it's there.</p> <p>To test a local install, go into some other folder, and then do:</p> <pre>cd ../some-other-folder\nnpm install ../my-package\n</pre> <p>to install it locally into the node_modules folder in that other place.</p> <p>Then go into the node-repl, and try using require(\"my-thing\") to bring in your module's main module.</p> <h2 id=\"create-a-user-account\" class=\"deep-link\">Create a User Account</h2> <p>Create a user with the adduser command. It works like this:</p> <pre>npm adduser\n</pre> <p>and then follow the prompts.</p> <p>This is documented better in <a href=\"../cli/adduser\">npm-adduser</a>.</p> <h2 id=\"publish-your-package\" class=\"deep-link\">Publish your package</h2> <p>This part's easy. In the root of your folder, do this:</p> <pre>npm publish\n</pre> <p>You can give publish a url to a tarball, or a filename of a tarball, or a path to a folder.</p> <p>Note that pretty much <strong>everything in that folder will be exposed</strong> by default. So, if you have secret stuff in there, use a <code>.npmignore</code> file to list out the globs to ignore, or publish from a fresh checkout.</p> <h2 id=\"brag-about-it\" class=\"deep-link\">Brag about it</h2> <p>Send emails, write blogs, blab in IRC.</p> <p>Tell the world how easy it is to install your program!</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"faq\">npm-faq</a></li> <li><a href=\"../cli/npm\">npm</a></li> <li><a href=\"../cli/init\">npm-init</a></li> <li><a href=\"../files/package.json\">package.json</a></li> <li><a href=\"scripts\">npm-scripts</a></li> <li><a href=\"../cli/publish\">npm-publish</a></li> <li><a href=\"../cli/adduser\">npm-adduser</a></li> <li><a href=\"registry\">npm-registry</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/misc/developers\" class=\"_attribution-link\">https://docs.npmjs.com/misc/developers</a>\n  </p>\n</div>\n","misc/disputes":"<h1>npm-disputes</h1> <h1 class=\"subtitle\">Handling Module Name Disputes</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <ol> <li>Get the author email with <code>npm owner ls &lt;pkgname&gt;</code>\n</li> <li>Email the author, CC <a href=\"mailto:support@npmjs.com\">support@npmjs.com</a>\n</li> <li>After a few weeks, if there's no resolution, we'll sort it out.</li> </ol> <p>Don't squat on package names. Publish code or move out of the way.</p> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>There sometimes arise cases where a user publishes a module, and then later, some other user wants to use that name. Here are some common ways that happens (each of these is based on actual events.)</p> <ol> <li>Joe writes a JavaScript module <code>foo</code>, which is not node-specific. Joe doesn't use node at all. Bob wants to use <code>foo</code> in node, so he wraps it in an npm module. Some time later, Joe starts using node, and wants to take over management of his program.</li> <li>Bob writes an npm module <code>foo</code>, and publishes it. Perhaps much later, Joe finds a bug in <code>foo</code>, and fixes it. He sends a pull request to Bob, but Bob doesn't have the time to deal with it, because he has a new job and a new baby and is focused on his new erlang project, and kind of not involved with node any more. Joe would like to publish a new <code>foo</code>, but can't, because the name is taken.</li> <li>Bob writes a 10-line flow-control library, and calls it <code>foo</code>, and publishes it to the npm registry. Being a simple little thing, it never really has to be updated. Joe works for Foo Inc, the makers of the critically acclaimed and widely-marketed <code>foo</code> JavaScript toolkit framework. They publish it to npm as <code>foojs</code>, but people are routinely confused when <code>npm install foo</code> is some different thing.</li> <li>Bob writes a parser for the widely-known <code>foo</code> file format, because he needs it for work. Then, he gets a new job, and never updates the prototype. Later on, Joe writes a much more complete <code>foo</code> parser, but can't publish, because Bob's <code>foo</code> is in the way.</li> </ol> <p>The validity of Joe's claim in each situation can be debated. However, Joe's appropriate course of action in each case is the same.</p> <ol> <li>\n<code>npm owner ls foo</code>. This will tell Joe the email address of the owner (Bob).</li> <li>Joe emails Bob, explaining the situation <strong>as respectfully as possible</strong>, and what he would like to do with the module name. He adds the npm support staff <a href=\"mailto:support@npmjs.com\">support@npmjs.com</a> to the CC list of the email. Mention in the email that Bob can run <code>npm owner add joe foo</code> to add Joe as an owner of the <code>foo</code> package.</li> <li>After a reasonable amount of time, if Bob has not responded, or if Bob and Joe can't come to any sort of resolution, email support <a href=\"mailto:support@npmjs.com\">support@npmjs.com</a> and we'll sort it out. (\"Reasonable\" is usually at least 4 weeks, but extra time is allowed around common holidays.)</li> </ol> <h2 id=\"reasoning\" class=\"deep-link\">REASONING</h2> <p>In almost every case so far, the parties involved have been able to reach an amicable resolution without any major intervention. Most people really do want to be reasonable, and are probably not even aware that they're in your way.</p> <p>Module ecosystems are most vibrant and powerful when they are as self-directed as possible. If an admin one day deletes something you had worked on, then that is going to make most people quite upset, regardless of the justification. When humans solve their problems by talking to other humans with respect, everyone has the chance to end up feeling good about the interaction.</p> <h2 id=\"exceptions\" class=\"deep-link\">EXCEPTIONS</h2> <p>Some things are not allowed, and will be removed without discussion if they are brought to the attention of the npm registry admins, including but not limited to:</p> <ol> <li>Malware (that is, a package designed to exploit or harm the machine on which it is installed).</li> <li>Violations of copyright or licenses (for example, cloning an MIT-licensed program, and then removing or changing the copyright and license statement).</li> <li>Illegal content.</li> <li>\"Squatting\" on a package name that you <em>plan</em> to use, but aren't actually using. Sorry, I don't care how great the name is, or how perfect a fit it is for the thing that someday might happen. If someone wants to use it today, and you're just taking up space with an empty tarball, you're going to be evicted.</li> <li>Putting empty packages in the registry. Packages must have SOME functionality. It can be silly, but it can't be <em>nothing</em>. (See also: squatting.)</li> <li>Doing weird things with the registry, like using it as your own personal application database or otherwise putting non-packagey things into it.</li> </ol> <p>If you see bad behavior like this, please report it right away.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"registry\">npm-registry</a></li> <li><a href=\"../cli/owner\">npm-owner</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/misc/disputes\" class=\"_attribution-link\">https://docs.npmjs.com/misc/disputes</a>\n  </p>\n</div>\n","orgs/teams":"<h1 id=\"teams\" class=\"deep-link\">Teams</h1> <p>The key to managing access to packages via Organizations is Teams.</p> <h2 id=\"what-are-teams\" class=\"deep-link\">What are Teams?</h2> <p>Teams are sets of users that have access to a certain scope within the Organization.</p> <p>In order to create teams and manage team membership, you must be a <a href=\"roles#super-admin\">Super Admin</a> or <a href=\"roles#team-admin\">Team Admin</a> under the given organization. Listing teams and team memberships may be done by any member of the organization.</p> <p>Organization creation and management of <a href=\"roles#team-admin\">Team Admin</a> and <a href=\"roles#member\">Team Member</a> roles is done through the web interface.</p> <h2 id=\"creating-teams\" class=\"deep-link\">Creating Teams</h2> <p>A <a href=\"roles#super-admin\">Super Admin</a> or <a href=\"roles#team-admin\">Team Admin</a> has the ability to create a team. To create a team one can type:</p> <pre>&gt; npm team create &lt;org:team&gt;</pre> <p>...where <code>&lt;org:team&gt;</code> is the name of the Organization, followed by the name of the new team.</p> <p>For example, to create a team called <code>wombats</code> in the <code>@npminc</code> Organization, a <a href=\"roles#super-admin\">Super Admin</a> or <a href=\"roles#team-admin\">Team Admin</a> would type:</p> <pre>&gt; npm team create npminc:wombats</pre> <p>You can check that you created the team successfully by listing the teams in your Organization. You can do that by typing:</p> <pre>&gt; npm team ls &lt;org&gt;</pre> <p>or by visiting the <a href=\"setup#organization-dashboard\">Organization Dashboard</a> in the [web interface].</p> <h2 id=\"adding-users-to-a-team\" class=\"deep-link\">Adding Users to a Team</h2> <p>Once you've created a team you'll want to add users to it. To do so a <a href=\"roles#super-admin\">Super Admin</a> or <a href=\"roles#team-admin\">Team Admin</a> can type:</p> <pre>&gt; npm team add &lt;org:team&gt; &lt;user&gt;</pre> <p>...where &lt;org:team&gt; is the name of the Organization, followed by the name of the team and <user> is the npm username of the user you'd like to make a member of the team.</user></p> <p>For example, to make the npm user <code>ag_dubs</code> a member of the <code>@npminc</code> organization's <code>wombats</code> team:</p> <pre>&gt; npm team add npminc:wombats ag_dubs</pre> <p>To check if you've added a user successfully, you can list all the users on a particular team. To do so, type:</p> <pre>&gt; npm team ls &lt;org:team&gt;</pre> <h2 id=\"removing-a-user-from-a-team\" class=\"deep-link\">Removing a User from a Team</h2> <pre>&gt; npm team rm &lt;org:team&gt; &lt;user&gt;</pre> <h2 id=\"listing-teams-and-team-members\" class=\"deep-link\">Listing Teams and Team Members</h2> <h3 id=\"list-an-organizations-teams\" class=\"deep-link\">List an Organization's Teams</h3> <pre>&gt; npm team ls &lt;org&gt;</pre> <h3 id=\"list-a-teams-members\" class=\"deep-link\">List a Team's Members</h3> <pre>&gt; npm team ls &lt;org:team&gt;</pre> <h2 id=\"cli-documentation\" class=\"deep-link\">CLI Documentation</h2> <p>For detailed information on the <code>team</code> command, check out the CLI documentation <a href=\"cli/team\">here</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/orgs/teams\" class=\"_attribution-link\">https://docs.npmjs.com/orgs/teams</a>\n  </p>\n</div>\n","orgs/package-access":"<h1 id=\"managing-organization-package-access\" class=\"deep-link\">Managing Organization Package Access</h1> <p>Once you have scoped a package to your Organization, users with <a href=\"roles#super-admin\">Super Admin</a> or <a href=\"roles#team-admin\">Team Admin</a> roles in your Organization can <a href=\"#granting-access\">grant</a>, <a href=\"#revoking-access\">revoke</a>, and <a href=\"#monitor-access\">monitor</a> team access to that package.</p> <h2 id=\"access-levels\" class=\"deep-link\">Access Levels</h2> <p>There are two levels of access you can provide:</p> <ul> <li>read-only: can use the package, e.g. <code>npm install</code>\n</li> <li>read-write: can update the package, e.g. <code>npm publish</code>\n</li> </ul> <h2 id=\"granting-access\" class=\"deep-link\">Granting Access</h2> <p>To grant access to a team, a <a href=\"roles#team-admin\">Team Admin</a> can type:</p> <pre>&gt; npm access grant &lt;read-only|read-write&gt; &lt;org:team&gt; [&lt;package&gt;]</pre> <p>The <code>grant</code> command takes 3 arguments, in order:</p> <ul> <li>access level: <code>read-only</code> or <code>read-write</code>\n</li> <li>scope: <code>&lt;org:team&gt;</code>, e.g. <code>npminc:wombats</code>\n</li> <li>package: the name of a package The package must be: <ul> <li>\n<a href=\"scoping-packages\">scoped to the Organization</a>, or</li> <li>be scoped package that a <a href=\"roles#super-admin\">Super Admin</a> or <a href=\"roles#team-admin\">Team Admin</a> has write-access to <strong>Package name is optional if you are executing the command in a directory with a <a href=\"../files/package.json\"><code>package.json</code></a>.</strong>\n</li> </ul> </li> </ul> <p>For example, to grant read-write access the <code>npm-docs</code> package to the <code>@npminc</code> org's <code>wombats</code> team, a user who:</p> <ul> <li>is a <a href=\"roles#super-admin\">Super Admin</a> or <a href=\"roles#team-admin\">Team Admin</a> for the Organization</li> <li>has write access to the <code>npm-docs</code> package</li> </ul> <p>...would do the following:</p> <pre>&gt; npm access grant read-write npminc:wombats npm-docs</pre> <h2 id=\"revoking-access\" class=\"deep-link\">Revoking Access</h2> <p>To revoke team access to a package, a <a href=\"roles#team-admin\">Team Admin</a> can type:</p> <pre>&gt; npm access revoke &lt;org:team&gt; [&lt;package&gt;]</pre> <p>Again, the <code>package</code> argument is optional if this command is executed in a directory containing a <a href=\"../files/package.json\"><code>package.json</code></a>.</p> <h2 id=\"monitor-access\" class=\"deep-link\">Monitor Access</h2> <p>You can check whether you have successfully granted or revoked team access to a package using the <code>npm access ls-packages</code> and <code>npm access ls-collaborators</code> command.</p> <h3 id=\"view-a-team-members-package-access\" class=\"deep-link\">View a Team Member's Package Access</h3> <pre>npm access ls-packages &lt;org&gt; &lt;user&gt;</pre> <h3 id=\"view-a-teams-package-access\" class=\"deep-link\">View a Team's Package Access</h3> <pre>npm access ls-packages &lt;org:team&gt;</pre> <h3 id=\"list-teams-with-access-to-a-package\" class=\"deep-link\">List Teams with Access to a Package</h3> <pre>npm access ls-collaborators &lt;pkg&gt;</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/orgs/package-access\" class=\"_attribution-link\">https://docs.npmjs.com/orgs/package-access</a>\n  </p>\n</div>\n","orgs/preexisting-packages":"<h1 id=\"manage-team-access-to-previously-existing-packages\" class=\"deep-link\">Manage Team Access To Previously Existing Packages</h1> <h2 id=\"restrictions\" class=\"deep-link\">Restrictions</h2> <p>Currently, it is not possible to change the scope of a pre-existing public or private, scoped or not, package to an Organization.</p> <p>Specifically, given a private, scoped package <code>@ag_dubs/foo</code>, there is currently no way to make that exact package scoped to the Organization, <code>@ag_org</code>, i.e. <code>@ag_org/foo</code> without creating a new package.</p> <p>However, Organization members who are either a</p> <ul> <li>\n<a href=\"roles#super-admin\">Super Admin</a>, or</li> <li><a href=\"roles#team-admin\">Team Admin</a></li> </ul> <p>that are also:</p> <ul> <li>an admin member of the package's org, for org-scoped packages</li> <li>the user, for user-scoped packages</li> </ul> <p>and, as of <code>npm@3.5.0/npm@2.14.12</code>:</p> <ul> <li>the last publisher on a public package</li> </ul> <p>... are able to grant Organization team access to packages that are not scoped within the Organization.</p> <h3 id=\"examples\" class=\"deep-link\">Examples</h3> <ul> <li> <p><code>meow-org</code> Super Admin, Irina, is also a Team Admin for <code>pizza-org</code>. Irina can grant the <code>meow-org/cyborgs</code> team access to the <code>pizza-org/pepperoni</code> package.</p> </li> <li> <p><code>puppyco/corgis</code> Team Admin, Lewis, has a personal private package, <code>@lewis/corgis</code>. Lewis can grant the <code>puppyco/corgis</code> team access to his <code>@lewis/corgis</code> package.</p> </li> <li> <p><code>cactus-inc</code> Super Admin, Corey, was also the last person to publish the public package, <code>bdaypresent</code>. Corey can grant the <code>cactus-inc/friends</code> team access to the <code>bdaypresent</code> package.</p> </li> </ul> <p>(*yup. this is weird. we know.)</p> <p>Note: It is possible to migrate a User scope to an Organization scope. For more information on that check out the <a href=\"setup#migrating-an-existing-username-to-an-org\">Migrating a Current User Scope to an Org</a> in the <a href=\"setup\">Creating an Org documentation</a>.</p> <h2 id=\"granting-team-access-to-a-package\" class=\"deep-link\">Granting Team Access to a Package</h2> <p>So, let's say you have a package <code>@ag_dubs/foo</code> that you would like to collaborate on within the Organization <code>@ag_org</code>.</p> <p>First, ensure that you have the correct permissions. The user must:</p> <ul> <li>Be a <a href=\"roles#super-admin\">Super Admin</a> or <a href=\"roles#team-admin\">Team Admin</a> in the Organization</li> <li>Be an admin of the package, <code>@ag_dubs/foo</code>\n</li> </ul> <p>Then, you can <a href=\"package-access#granting-access\">grant team access to a package</a>, as though it were scoped to the Organization:</p> <pre>&gt; &gt; npm access grant &lt;read-only|read-write&gt; &lt;org:team&gt; @ag_dubs/foo</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/orgs/preexisting-packages\" class=\"_attribution-link\">https://docs.npmjs.com/orgs/preexisting-packages</a>\n  </p>\n</div>\n","misc/orgs":"<h1>npm-orgs</h1> <h1 class=\"subtitle\">Working with Teams &amp; Orgs</h1> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>There are three levels of org users:</p> <ol> <li>Super admin, controls billing &amp; adding people to the org.</li> <li>Team admin, manages team membership &amp; package access.</li> <li>Developer, works on packages they are given access to.</li> </ol> <p>The super admin is the only person who can add users to the org because it impacts the monthly bill. The super admin will use the website to manage membership. Every org has a <code>developers</code> team that all users are automatically added to.</p> <p>The team admin is the person who manages team creation, team membership, and package access for teams. The team admin grants package access to teams, not individuals.</p> <p>The developer will be able to access packages based on the teams they are on. Access is either read-write or read-only.</p> <p>There are two main commands:</p> <ol> <li>\n<code>npm team</code> see <a href=\"../cli/access\">npm-access</a> for more details</li> <li>\n<code>npm access</code> see <a href=\"../cli/team\">npm-team</a> for more details</li> </ol> <h2 id=\"team-admins-create-teams\" class=\"deep-link\">Team Admins create teams</h2> <ul> <li>Check who you’ve added to your org:</li> </ul> <pre>npm team ls &lt;org&gt;:developers</pre> <ul> <li> <p>Each org is automatically given a <code>developers</code> team, so you can see the whole list of team members in your org. This team automatically gets read-write access to all packages, but you can change that with the <code>access</code> command.</p> </li> <li> <p>Create a new team:</p> </li> </ul> <pre>npm team create &lt;org:team&gt;</pre> <ul> <li>Add members to that team:</li> </ul> <pre>npm team add &lt;org:team&gt; &lt;user&gt;</pre> <h2 id=\"publish-a-package-and-adjust-package-access\" class=\"deep-link\">Publish a package and adjust package access</h2> <ul> <li>In package directory, run</li> </ul> <pre>npm init --scope=&lt;org&gt;</pre> <p>to scope it for your org &amp; publish as usual</p> <ul> <li>Grant access:</li> </ul> <pre>npm access grant &lt;read-only|read-write&gt; &lt;org:team&gt; [&lt;package&gt;]</pre> <ul> <li>Revoke access:</li> </ul> <pre>npm access revoke &lt;org:team&gt; [&lt;package&gt;]</pre> <h2 id=\"monitor-your-package-access\" class=\"deep-link\">Monitor your package access</h2> <ul> <li>See what org packages a team member can access:</li> </ul> <pre>npm access ls-packages &lt;org&gt; &lt;user&gt;</pre> <ul> <li>See packages available to a specific team:</li> </ul> <pre>npm access ls-packages &lt;org:team&gt;</pre> <ul> <li>Check which teams are collaborating on a package:</li> </ul> <pre>npm access ls-collaborators &lt;pkg&gt;</pre> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"../cli/team\">npm-team</a></li> <li><a href=\"../cli/access\">npm-access</a></li> <li><a href=\"scope\">npm-scope</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/misc/orgs\" class=\"_attribution-link\">https://docs.npmjs.com/misc/orgs</a>\n  </p>\n</div>\n","misc/registry":"<h1>npm-registry</h1> <h1 class=\"subtitle\">The JavaScript Package Registry</h1> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>To resolve packages by name and version, npm talks to a registry website that implements the CommonJS Package Registry specification for reading package info.</p> <p>Additionally, npm's package registry implementation supports several write APIs as well, to allow for publishing packages and managing user account information.</p> <p>The official public npm registry is at <a href=\"https://registry.npmjs.org/\">https://registry.npmjs.org/</a>. It is powered by a CouchDB database, of which there is a public mirror at <a href=\"https://skimdb.npmjs.com/registry\">https://skimdb.npmjs.com/registry</a>. The code for the couchapp is available at <a href=\"https://github.com/npm/npm-registry-couchapp\">https://github.com/npm/npm-registry-couchapp</a>.</p> <p>The registry URL used is determined by the scope of the package (see <code><a href=\"scope\">npm-scope</a></code>). If no scope is specified, the default registry is used, which is supplied by the <code>registry</code> config parameter. See <code><a href=\"../cli/config\">npm-config</a></code>, <code><a href=\"../files/npmrc\">npmrc</a></code>, and <code><a href=\"config\">npm-config</a></code> for more on managing npm's configuration.</p> <h2 id=\"can-i-run-my-own-private-registry\" class=\"deep-link\">Can I run my own private registry?</h2> <p>Yes!</p> <p>The easiest way is to replicate the couch database, and use the same (or similar) design doc to implement the APIs.</p> <p>If you set up continuous replication from the official CouchDB, and then set your internal CouchDB as the registry config, then you'll be able to read any published packages, in addition to your private ones, and by default will only publish internally.</p> <p>If you then want to publish a package for the whole world to see, you can simply override the <code>--registry</code> option for that <code>publish</code> command.</p> <h2 id=\"i-dont-want-my-package-published-in-the-official-registry-its-private\" class=\"deep-link\">I don't want my package published in the official registry. It's private.</h2> <p>Set <code>\"private\": true</code> in your package.json to prevent it from being published at all, or <code>\"publishConfig\":{\"registry\":\"http://my-internal-registry.local\"}</code> to force it to be published only to your internal registry.</p> <p>See <code><a href=\"../files/package.json\">package.json</a></code> for more info on what goes in the package.json file.</p> <h2 id=\"will-you-replicate-from-my-registry-into-the-public-one\" class=\"deep-link\">Will you replicate from my registry into the public one?</h2> <p>No. If you want things to be public, then publish them into the public registry using npm. What little security there is would be for nought otherwise.</p> <h2 id=\"do-i-have-to-use-couchdb-to-build-a-registry-that-npm-can-talk-to\" class=\"deep-link\">Do I have to use couchdb to build a registry that npm can talk to?</h2> <p>No, but it's way easier. Basically, yes, you do, or you have to effectively implement the entire CouchDB API anyway.</p> <h2 id=\"is-there-a-website-or-something-to-see-package-docs-and-such\" class=\"deep-link\">Is there a website or something to see package docs and such?</h2> <p>Yes, head over to <a href=\"https://npmjs.com/\">https://npmjs.com/</a></p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"../cli/config\">npm-config</a></li> <li><a href=\"config\">npm-config</a></li> <li><a href=\"../files/npmrc\">npmrc</a></li> <li><a href=\"developers\">npm-developers</a></li> <li><a href=\"disputes\">npm-disputes</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/misc/registry\" class=\"_attribution-link\">https://docs.npmjs.com/misc/registry</a>\n  </p>\n</div>\n","misc/removing-npm":"<h1>npm-removal</h1> <h1 class=\"subtitle\">Cleaning the Slate</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <p>So sad to see you go.</p> <pre>sudo npm uninstall npm -g\n</pre> <p>Or, if that fails, get the npm source code, and do:</p> <pre>sudo make uninstall\n</pre> <h2 id=\"more-severe-uninstalling\" class=\"deep-link\">More Severe Uninstalling</h2> <p>Usually, the above instructions are sufficient. That will remove npm, but leave behind anything you've installed.</p> <p>If that doesn't work, or if you require more drastic measures, continue reading.</p> <p>Note that this is only necessary for globally-installed packages. Local installs are completely contained within a project's <code>node_modules</code> folder. Delete that folder, and everything is gone (unless a package's install script is particularly ill-behaved).</p> <p>This assumes that you installed node and npm in the default place. If you configured node with a different <code>--prefix</code>, or installed npm with a different prefix setting, then adjust the paths accordingly, replacing <code>/usr/local</code> with your install prefix.</p> <p>To remove everything npm-related manually:</p> <pre>rm -rf /usr/local/{lib/node{,/.npm,_modules},bin,share/man}/npm*\n</pre> <p>If you installed things <em>with</em> npm, then your best bet is to uninstall them with npm first, and then install them again once you have a proper install. This can help find any symlinks that are lying around:</p> <pre>ls -laF /usr/local/{lib/node{,/.npm},bin,share/man} | grep npm\n</pre> <p>Prior to version 0.3, npm used shim files for executables and node modules. To track those down, you can do the following:</p> <pre>find /usr/local/{lib/node,bin} -exec grep -l npm \\{\\} \\; ;\n</pre> <p>(This is also in the README file.)</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li>README</li> <li><a href=\"../cli/uninstall\">npm-uninstall</a></li> <li><a href=\"../cli/prune\">npm-prune</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/misc/removing-npm\" class=\"_attribution-link\">https://docs.npmjs.com/misc/removing-npm</a>\n  </p>\n</div>\n","misc/scope":"<h1>npm-scope</h1> <h1 class=\"subtitle\">Scoped packages</h1> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>All npm packages have a name. Some package names also have a scope. A scope follows the usual rules for package names (url-safe characters, no leading dots or underscores). When used in package names, preceded by an @-symbol and followed by a slash, e.g.</p> <pre>@somescope/somepackagename\n</pre> <p>Scopes are a way of grouping related packages together, and also affect a few things about the way npm treats the package.</p> <p>Scoped packages are supported by the public npm registry. The npm client is backwards-compatible with un-scoped registries, so it can be used to work with scoped and un-scoped registries at the same time.</p> <h2 id=\"installing-scoped-packages\" class=\"deep-link\">Installing scoped packages</h2> <p>Scoped packages are installed to a sub-folder of the regular installation folder, e.g. if your other packages are installed in <code>node_modules/packagename</code>, scoped modules will be in <code>node_modules/@myorg/packagename</code>. The scope folder (<code>@myorg</code>) is simply the name of the scope preceded by an @-symbol, and can contain any number of scoped packages.</p> <p>A scoped package is installed by referencing it by name, preceded by an @-symbol, in <code>npm install</code>:</p> <pre>npm install @myorg/mypackage\n</pre> <p>Or in <code>package.json</code>:</p> <pre>\"dependencies\": {\n  \"@myorg/mypackage\": \"^1.3.0\"\n}\n</pre> <p>Note that if the @-symbol is omitted in either case npm will instead attempt to install from GitHub; see <code><a href=\"../cli/install\">npm-install</a></code>.</p> <h2 id=\"requiring-scoped-packages\" class=\"deep-link\">Requiring scoped packages</h2> <p>Because scoped packages are installed into a scope folder, you have to include the name of the scope when requiring them in your code, e.g.</p> <pre>require('@myorg/mypackage')\n</pre> <p>There is nothing special about the way Node treats scope folders, this is just specifying to require the module <code>mypackage</code> in the folder called <code>@myorg</code>.</p> <h2 id=\"publishing-scoped-packages\" class=\"deep-link\">Publishing scoped packages</h2> <p>Scoped packages can be published to any registry that supports them, including the public npm registry.</p> <p>(As of 2015-04-19, the public npm registry <strong>does</strong> support scoped packages)</p> <p>If you wish, you may associate a scope with a registry; see below.</p> <h3 id=\"publishing-public-scoped-packages-to-the-public-npm-registry\" class=\"deep-link\">Publishing public scoped packages to the public npm registry</h3> <p>To publish a public scoped package, you must specify <code>--access public</code> with the initial publication. This will publish the package and set access to <code>public</code> as if you had run <code>npm access public</code> after publishing.</p> <h3 id=\"publishing-private-scoped-packages-to-the-npm-registry\" class=\"deep-link\">Publishing private scoped packages to the npm registry</h3> <p>To publish a private scoped package to the npm registry, you must have an <a href=\"https://www.npmjs.com/private-modules\">npm Private Modules</a> account.</p> <p>You can then publish the module with <code>npm publish</code> or <code>npm publish --access restricted</code>, and it will be present in the npm registry, with restricted access. You can then change the access permissions, if desired, with <code>npm access</code> or on the <a href=\"http://npmjs.com\">npmjs.com</a> website.</p> <h2 id=\"associating-a-scope-with-a-registry\" class=\"deep-link\">Associating a scope with a registry</h2> <p>Scopes can be associated with a separate registry. This allows you to seamlessly use a mix of packages from the public npm registry and one or more private registries, such as npm Enterprise.</p> <p>You can associate a scope with a registry at login, e.g.</p> <pre>npm login --registry=http://reg.example.com --scope=@myco\n</pre> <p>Scopes have a many-to-one relationship with registries: one registry can host multiple scopes, but a scope only ever points to one registry.</p> <p>You can also associate a scope with a registry using <code>npm config</code>:</p> <pre>npm config set @myco:registry http://reg.example.com\n</pre> <p>Once a scope is associated with a registry, any <code>npm install</code> for a package with that scope will request packages from that registry instead. Any <code>npm publish</code> for a package name that contains the scope will be published to that registry instead.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"../cli/install\">npm-install</a></li> <li><a href=\"../cli/publish\">npm-publish</a></li> <li><a href=\"../cli/access\">npm-access</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/misc/scope\" class=\"_attribution-link\">https://docs.npmjs.com/misc/scope</a>\n  </p>\n</div>\n","cli/adduser":"<h1>npm-adduser</h1> <h1 class=\"subtitle\">Add a registry user account</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm adduser [--registry=url] [--scope=@orgname] [--always-auth]\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>Create or verify a user named <code>&lt;username&gt;</code> in the specified registry, and save the credentials to the <code>.npmrc</code> file. If no registry is specified, the default registry will be used (see <code><a href=\"../misc/config\">npm-config</a></code>).</p> <p>The username, password, and email are read in from prompts.</p> <p>To reset your password, go to <a href=\"https://www.npmjs.com/forgot\">https://www.npmjs.com/forgot</a></p> <p>To change your email address, go to <a href=\"https://www.npmjs.com/email-edit\">https://www.npmjs.com/email-edit</a></p> <p>You may use this command multiple times with the same user account to authorize on a new machine. When authenticating on a new machine, the username, password and email address must all match with your existing record.</p> <p><code>npm login</code> is an alias to <code>adduser</code> and behaves exactly the same way.</p> <h2 id=\"configuration\" class=\"deep-link\">Configuration</h2> <h3 id=\"registry\" class=\"deep-link\">registry</h3> <p>Default: <a href=\"https://registry.npmjs.org/\">https://registry.npmjs.org/</a></p> <p>The base URL of the npm package registry. If <code>scope</code> is also specified, this registry will only be used for packages with that scope. See <code><a href=\"../misc/scope\">npm-scope</a></code>.</p> <h3 id=\"scope\" class=\"deep-link\">scope</h3> <p>Default: none</p> <p>If specified, the user and login credentials given will be associated with the specified scope. See <code><a href=\"../misc/scope\">npm-scope</a></code>. You can use both at the same time, e.g.</p> <pre>npm adduser --registry=http://myregistry.example.com --scope=@myco\n</pre> <p>This will set a registry for the given scope and login or create a user for that registry at the same time.</p> <h3 id=\"always-auth\" class=\"deep-link\">always-auth</h3> <p>Default: false</p> <p>If specified, save configuration indicating that all requests to the given registry should include authorization information. Useful for private registries. Can be used with <code>--registry</code> and / or <code>--scope</code>, e.g.</p> <pre>npm adduser --registry=http://private-registry.example.com --always-auth\n</pre> <p>This will ensure that all requests to that registry (including for tarballs) include an authorization header. See <code>always-auth</code> in <code><a href=\"../misc/config\">npm-config</a></code> for more details on always-auth. Registry-specific configuration of <code>always-auth</code> takes precedence over any global configuration.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"../misc/registry\">npm-registry</a></li> <li><a href=\"config\">npm-config</a></li> <li><a href=\"../misc/config\">npm-config</a></li> <li><a href=\"../files/npmrc\">npmrc</a></li> <li><a href=\"owner\">npm-owner</a></li> <li><a href=\"whoami\">npm-whoami</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/adduser\" class=\"_attribution-link\">https://docs.npmjs.com/cli/adduser</a>\n  </p>\n</div>\n","cli/bin":"<h1>npm-bin</h1> <h1 class=\"subtitle\">Display npm bin folder</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm bin [-g|--global]\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>Print the folder where npm will install executables.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"prefix\">npm-prefix</a></li> <li><a href=\"root\">npm-root</a></li> <li><a href=\"../files/folders\">npm-folders</a></li> <li><a href=\"config\">npm-config</a></li> <li><a href=\"../misc/config\">npm-config</a></li> <li><a href=\"../files/npmrc\">npmrc</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/bin\" class=\"_attribution-link\">https://docs.npmjs.com/cli/bin</a>\n  </p>\n</div>\n","cli/access":"<h1>npm-access</h1> <h1 class=\"subtitle\">Set access level on published packages</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm access public [&lt;package&gt;]\nnpm access restricted [&lt;package&gt;]\n\nnpm access grant &lt;read-only|read-write&gt; &lt;scope:team&gt; [&lt;package&gt;]\nnpm access revoke &lt;scope:team&gt; [&lt;package&gt;]\n\nnpm access ls-packages [&lt;user&gt;|&lt;scope&gt;|&lt;scope:team&gt;]\nnpm access ls-collaborators [&lt;package&gt; [&lt;user&gt;]]\nnpm access edit [&lt;package&gt;]\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>Used to set access controls on private packages.</p> <p>For all of the subcommands, <code>npm access</code> will perform actions on the packages in the current working directory if no package name is passed to the subcommand.</p> <ul> <li> <p>public / restricted: Set a package to be either publicly accessible or restricted.</p> </li> <li> <p>grant / revoke: Add or remove the ability of users and teams to have read-only or read-write access to a package.</p> </li> <li> <p>ls-packages:</p> <p>Show all of the packages a user or a team is able to access, along with the access level, except for read-only public packages (it won't print the whole registry listing)</p> </li> <li> <p>ls-collaborators: Show all of the access privileges for a package. Will only show permissions for packages to which you have at least read access. If <code>&lt;user&gt;</code> is passed in, the list is filtered only to teams <em>that</em> user happens to belong to.</p> </li> <li> <p>edit: Set the access privileges for a package at once using <code>$EDITOR</code>.</p> </li> </ul> <h2 id=\"details\" class=\"deep-link\">DETAILS</h2> <p><code>npm access</code> always operates directly on the current registry, configurable from the command line using <code>--registry=&lt;registry url&gt;</code>.</p> <p>Unscoped packages are <em>always public</em>.</p> <p>Scoped packages <em>default to restricted</em>, but you can either publish them as public using <code>npm publish --access=public</code>, or set their access as public using <code>npm access public</code> after the initial publish.</p> <p>You must have privileges to set the access of a package:</p> <ul> <li>You are an owner of an unscoped or scoped package.</li> <li>You are a member of the team that owns a scope.</li> <li>You have been given read-write privileges for a package, either as a member of a team or directly as an owner.</li> </ul> <p>If your account is not paid, then attempts to publish scoped packages will fail with an HTTP 402 status code (logically enough), unless you use <code>--access=public</code>.</p> <p>Management of teams and team memberships is done with the <code>npm team</code> command.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"team\">npm-team</a></li> <li><a href=\"publish\">npm-publish</a></li> <li><a href=\"../misc/config\">npm-config</a></li> <li><a href=\"../misc/registry\">npm-registry</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/access\" class=\"_attribution-link\">https://docs.npmjs.com/cli/access</a>\n  </p>\n</div>\n","cli/bugs":"<h1>npm-bugs</h1> <h1 class=\"subtitle\">Bugs for a package in a web browser maybe</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm bugs [&lt;pkgname&gt;]\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>This command tries to guess at the likely location of a package's bug tracker URL, and then tries to open it using the <code>--browser</code> config param. If no package name is provided, it will search for a <code>package.json</code> in the current folder and use the <code>name</code> property.</p> <h2 id=\"configuration\" class=\"deep-link\">Configuration</h2> <h3 id=\"browser\" class=\"deep-link\">browser</h3> <ul> <li>Default: OS X: <code>\"open\"</code>, Windows: <code>\"start\"</code>, Others: <code>\"xdg-open\"</code>\n</li> <li>Type: String</li> </ul> <p>The browser that is called by the <code>npm bugs</code> command to open websites.</p> <h3 id=\"registry\" class=\"deep-link\">registry</h3> <ul> <li>Default: <a href=\"https://registry.npmjs.org/\">https://registry.npmjs.org/</a>\n</li> <li>Type: url</li> </ul> <p>The base URL of the npm package registry.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"docs\">npm-docs</a></li> <li><a href=\"view\">npm-view</a></li> <li><a href=\"publish\">npm-publish</a></li> <li><a href=\"../misc/registry\">npm-registry</a></li> <li><a href=\"config\">npm-config</a></li> <li><a href=\"../misc/config\">npm-config</a></li> <li><a href=\"../files/npmrc\">npmrc</a></li> <li><a href=\"../files/package.json\">package.json</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/bugs\" class=\"_attribution-link\">https://docs.npmjs.com/cli/bugs</a>\n  </p>\n</div>\n","cli/build":"<h1>npm-build</h1> <h1 class=\"subtitle\">Build a package</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm build [&lt;package-folder&gt;]\n</pre> <ul> <li>\n<code>&lt;package-folder&gt;</code>: A folder containing a <code>package.json</code> file in its root.</li> </ul> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>This is the plumbing command called by <code>npm link</code> and <code>npm install</code>.</p> <p>It should generally be called during installation, but if you need to run it directly, run:</p> <pre>npm run-script build\n</pre> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"install\">npm-install</a></li> <li><a href=\"link\">npm-link</a></li> <li><a href=\"../misc/scripts\">npm-scripts</a></li> <li><a href=\"../files/package.json\">package.json</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/build\" class=\"_attribution-link\">https://docs.npmjs.com/cli/build</a>\n  </p>\n</div>\n","misc/config":"<h1>npm-config</h1> <h1 class=\"subtitle\">More than you probably want to know about npm configuration</h1> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>npm gets its configuration values from the following sources, sorted by priority:</p> <h3 id=\"command-line-flags\" class=\"deep-link\">Command Line Flags</h3> <p>Putting <code>--foo bar</code> on the command line sets the <code>foo</code> configuration parameter to <code>\"bar\"</code>. A <code>--</code> argument tells the cli parser to stop reading flags. A <code>--flag</code> parameter that is at the <em>end</em> of the command will be given the value of <code>true</code>.</p> <h3 id=\"environment-variables\" class=\"deep-link\">Environment Variables</h3> <p>Any environment variables that start with <code>npm_config_</code> will be interpreted as a configuration parameter. For example, putting <code>npm_config_foo=bar</code> in your environment will set the <code>foo</code> configuration parameter to <code>bar</code>. Any environment configurations that are not given a value will be given the value of <code>true</code>. Config values are case-insensitive, so <code>NPM_CONFIG_FOO=bar</code> will work the same.</p> <h3 id=\"npmrc-files\" class=\"deep-link\">npmrc Files</h3> <p>The four relevant files are:</p> <ul> <li>per-project config file (/path/to/my/project/.npmrc)</li> <li>per-user config file (~/.npmrc)</li> <li>global config file ($PREFIX/etc/npmrc)</li> <li>npm builtin config file (/path/to/npm/npmrc)</li> </ul> <p>See <a href=\"../files/npmrc\">npmrc</a> for more details.</p> <h3 id=\"default-configs\" class=\"deep-link\">Default Configs</h3> <p>Run <code>npm config ls -l</code> to see a set of configuration parameters that are internal to npm, and are defaults if nothing else is specified.</p> <h2 id=\"shorthands-and-other-cli-niceties\" class=\"deep-link\">Shorthands and Other CLI Niceties</h2> <p>The following shorthands are parsed on the command-line:</p> <ul> <li>\n<code>-v</code>: <code>--version</code>\n</li> <li>\n<code>-h</code>, <code>-?</code>, <code>--help</code>, <code>-H</code>: <code>--usage</code>\n</li> <li>\n<code>-s</code>, <code>--silent</code>: <code>--loglevel silent</code>\n</li> <li>\n<code>-q</code>, <code>--quiet</code>: <code>--loglevel warn</code>\n</li> <li>\n<code>-d</code>: <code>--loglevel info</code>\n</li> <li>\n<code>-dd</code>, <code>--verbose</code>: <code>--loglevel verbose</code>\n</li> <li>\n<code>-ddd</code>: <code>--loglevel silly</code>\n</li> <li>\n<code>-g</code>: <code>--global</code>\n</li> <li>\n<code>-C</code>: <code>--prefix</code>\n</li> <li>\n<code>-l</code>: <code>--long</code>\n</li> <li>\n<code>-m</code>: <code>--message</code>\n</li> <li>\n<code>-p</code>, <code>--porcelain</code>: <code>--parseable</code>\n</li> <li>\n<code>-reg</code>: <code>--registry</code>\n</li> <li>\n<code>-f</code>: <code>--force</code>\n</li> <li>\n<code>-desc</code>: <code>--description</code>\n</li> <li>\n<code>-S</code>: <code>--save</code>\n</li> <li>\n<code>-D</code>: <code>--save-dev</code>\n</li> <li>\n<code>-O</code>: <code>--save-optional</code>\n</li> <li>\n<code>-B</code>: <code>--save-bundle</code>\n</li> <li>\n<code>-E</code>: <code>--save-exact</code>\n</li> <li>\n<code>-y</code>: <code>--yes</code>\n</li> <li>\n<code>-n</code>: <code>--yes false</code>\n</li> <li>\n<code>ll</code> and <code>la</code> commands: <code>ls --long</code>\n</li> </ul> <p>If the specified configuration param resolves unambiguously to a known configuration parameter, then it is expanded to that configuration parameter. For example:</p> <pre>npm ls --par\n# same as:\nnpm ls --parseable\n</pre> <p>If multiple single-character shorthands are strung together, and the resulting combination is unambiguously not some other configuration param, then it is expanded to its various component pieces. For example:</p> <pre>npm ls -gpld\n# same as:\nnpm ls --global --parseable --long --loglevel info\n</pre> <h2 id=\"per-package-config-settings\" class=\"deep-link\">Per-Package Config Settings</h2> <p>When running scripts (see <code><a href=\"scripts\">npm-scripts</a></code>) the package.json \"config\" keys are overwritten in the environment if there is a config param of <code>&lt;name&gt;[@&lt;version&gt;]:&lt;key&gt;</code>. For example, if the package.json has this:</p> <pre>{ \"name\" : \"foo\"\n, \"config\" : { \"port\" : \"8080\" }\n, \"scripts\" : { \"start\" : \"node server.js\" } }\n</pre> <p>and the server.js is this:</p> <pre>http.createServer(...).listen(process.env.npm_package_config_port)\n</pre> <p>then the user could change the behavior by doing:</p> <pre>npm config set foo:port 80\n</pre> <p>See <a href=\"../files/package.json\">package.json</a> for more information.</p> <h2 id=\"config-settings\" class=\"deep-link\">Config Settings</h2> <h3 id=\"access\" class=\"deep-link\">access</h3> <ul> <li>Default: <code>restricted</code>\n</li> <li>Type: Access</li> </ul> <p>When publishing scoped packages, the access level defaults to <code>restricted</code>. If you want your scoped package to be publicly viewable (and installable) set <code>--access=public</code>. The only valid values for <code>access</code> are <code>public</code> and <code>restricted</code>. Unscoped packages <em>always</em> have an access level of <code>public</code>.</p> <h3 id=\"always-auth\" class=\"deep-link\">always-auth</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>Force npm to always require authentication when accessing the registry, even for <code>GET</code> requests.</p> <h3 id=\"also\" class=\"deep-link\">also</h3> <ul> <li>Default: null</li> <li>Type: String</li> </ul> <p>When \"dev\" or \"development\" and running local <code>npm shrinkwrap</code>, <code>npm outdated</code>, or <code>npm update</code>, is an alias for <code>--dev</code>.</p> <h3 id=\"bin-links\" class=\"deep-link\">bin-links</h3> <ul> <li>Default: <code>true</code>\n</li> <li>Type: Boolean</li> </ul> <p>Tells npm to create symlinks (or <code>.cmd</code> shims on Windows) for package executables.</p> <p>Set to false to have it not do this. This can be used to work around the fact that some file systems don't support symlinks, even on ostensibly Unix systems.</p> <h3 id=\"browser\" class=\"deep-link\">browser</h3> <ul> <li>Default: OS X: <code>\"open\"</code>, Windows: <code>\"start\"</code>, Others: <code>\"xdg-open\"</code>\n</li> <li>Type: String</li> </ul> <p>The browser that is called by the <code>npm docs</code> command to open websites.</p> <h3 id=\"ca\" class=\"deep-link\">ca</h3> <ul> <li>Default: The npm CA certificate</li> <li>Type: String, Array or null</li> </ul> <p>The Certificate Authority signing certificate that is trusted for SSL connections to the registry. Values should be in PEM format with newlines replaced by the string \"\\n\". For example:</p> <pre>ca=\"-----BEGIN CERTIFICATE-----\\nXXXX\\nXXXX\\n-----END CERTIFICATE-----\"\n</pre> <p>Set to <code>null</code> to only allow \"known\" registrars, or to a specific CA cert to trust only that specific signing authority.</p> <p>Multiple CAs can be trusted by specifying an array of certificates:</p> <pre>ca[]=\"...\"\nca[]=\"...\"\n</pre> <p>See also the <code>strict-ssl</code> config.</p> <h3 id=\"cafile\" class=\"deep-link\">cafile</h3> <ul> <li>Default: <code>null</code>\n</li> <li>Type: path</li> </ul> <p>A path to a file containing one or multiple Certificate Authority signing certificates. Similar to the <code>ca</code> setting, but allows for multiple CA's, as well as for the CA information to be stored in a file on disk.</p> <h3 id=\"cache\" class=\"deep-link\">cache</h3> <ul> <li>Default: Windows: <code>%AppData%\\npm-cache</code>, Posix: <code>~/.npm</code>\n</li> <li>Type: path</li> </ul> <p>The location of npm's cache directory. See <code><a href=\"../cli/cache\">npm-cache</a></code></p> <h3 id=\"cache-lock-stale\" class=\"deep-link\">cache-lock-stale</h3> <ul> <li>Default: 60000 (1 minute)</li> <li>Type: Number</li> </ul> <p>The number of ms before cache folder lockfiles are considered stale.</p> <h3 id=\"cache-lock-retries\" class=\"deep-link\">cache-lock-retries</h3> <ul> <li>Default: 10</li> <li>Type: Number</li> </ul> <p>Number of times to retry to acquire a lock on cache folder lockfiles.</p> <h3 id=\"cache-lock-wait\" class=\"deep-link\">cache-lock-wait</h3> <ul> <li>Default: 10000 (10 seconds)</li> <li>Type: Number</li> </ul> <p>Number of ms to wait for cache lock files to expire.</p> <h3 id=\"cache-max\" class=\"deep-link\">cache-max</h3> <ul> <li>Default: Infinity</li> <li>Type: Number</li> </ul> <p>The maximum time (in seconds) to keep items in the registry cache before re-checking against the registry.</p> <p>Note that no purging is done unless the <code>npm cache clean</code> command is explicitly used, and that only GET requests use the cache.</p> <h3 id=\"cache-min\" class=\"deep-link\">cache-min</h3> <ul> <li>Default: 10</li> <li>Type: Number</li> </ul> <p>The minimum time (in seconds) to keep items in the registry cache before re-checking against the registry.</p> <p>Note that no purging is done unless the <code>npm cache clean</code> command is explicitly used, and that only GET requests use the cache.</p> <h3 id=\"cert\" class=\"deep-link\">cert</h3> <ul> <li>Default: <code>null</code>\n</li> <li>Type: String</li> </ul> <p>A client certificate to pass when accessing the registry.</p> <h3 id=\"color\" class=\"deep-link\">color</h3> <ul> <li>Default: true</li> <li>Type: Boolean or <code>\"always\"</code>\n</li> </ul> <p>If false, never shows colors. If <code>\"always\"</code> then always shows colors. If true, then only prints color codes for tty file descriptors.</p> <h3 id=\"depth\" class=\"deep-link\">depth</h3> <ul> <li>Default: Infinity</li> <li>Type: Number</li> </ul> <p>The depth to go when recursing directories for <code>npm ls</code>, <code>npm cache ls</code>, and <code>npm outdated</code>.</p> <p>For <code>npm outdated</code>, a setting of <code>Infinity</code> will be treated as <code>0</code> since that gives more useful information. To show the outdated status of all packages and dependents, use a large integer value, e.g., <code>npm outdated --depth 9999</code></p> <h3 id=\"description-1\" class=\"deep-link\">description</h3> <ul> <li>Default: true</li> <li>Type: Boolean</li> </ul> <p>Show the description in <code>npm search</code></p> <h3 id=\"dev\" class=\"deep-link\">dev</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>Install <code>dev-dependencies</code> along with packages.</p> <p>Note that <code>dev-dependencies</code> are also installed if the <code>npat</code> flag is set.</p> <h3 id=\"dry-run\" class=\"deep-link\">dry-run</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>Indicates that you don't want npm to make any changes and that it should only report what it would have done. This can be passed into any of the commands that modify your local installation, eg, <code>install</code>, <code>update</code>, <code>dedupe</code>, <code>uninstall</code>. This is NOT currently honored by network related commands, eg <code>dist-tags</code>, <code>owner</code>, <code>publish</code>, etc.</p> <h3 id=\"editor\" class=\"deep-link\">editor</h3> <ul> <li>Default: <code>EDITOR</code> environment variable if set, or <code>\"vi\"</code> on Posix, or <code>\"notepad\"</code> on Windows.</li> <li>Type: path</li> </ul> <p>The command to run for <code>npm edit</code> or <code>npm config edit</code>.</p> <h3 id=\"engine-strict\" class=\"deep-link\">engine-strict</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>If set to true, then npm will stubbornly refuse to install (or even consider installing) any package that claims to not be compatible with the current Node.js version.</p> <h3 id=\"force\" class=\"deep-link\">force</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>Makes various commands more forceful.</p> <ul> <li>lifecycle script failure does not block progress.</li> <li>publishing clobbers previously published versions.</li> <li>skips cache when requesting from the registry.</li> <li>prevents checks against clobbering non-npm files.</li> </ul> <h3 id=\"fetch-retries\" class=\"deep-link\">fetch-retries</h3> <ul> <li>Default: 2</li> <li>Type: Number</li> </ul> <p>The \"retries\" config for the <code>retry</code> module to use when fetching packages from the registry.</p> <h3 id=\"fetch-retry-factor\" class=\"deep-link\">fetch-retry-factor</h3> <ul> <li>Default: 10</li> <li>Type: Number</li> </ul> <p>The \"factor\" config for the <code>retry</code> module to use when fetching packages.</p> <h3 id=\"fetch-retry-mintimeout\" class=\"deep-link\">fetch-retry-mintimeout</h3> <ul> <li>Default: 10000 (10 seconds)</li> <li>Type: Number</li> </ul> <p>The \"minTimeout\" config for the <code>retry</code> module to use when fetching packages.</p> <h3 id=\"fetch-retry-maxtimeout\" class=\"deep-link\">fetch-retry-maxtimeout</h3> <ul> <li>Default: 60000 (1 minute)</li> <li>Type: Number</li> </ul> <p>The \"maxTimeout\" config for the <code>retry</code> module to use when fetching packages.</p> <h3 id=\"git\" class=\"deep-link\">git</h3> <ul> <li>Default: <code>\"git\"</code>\n</li> <li>Type: String</li> </ul> <p>The command to use for git commands. If git is installed on the computer, but is not in the <code>PATH</code>, then set this to the full path to the git binary.</p> <h3 id=\"git-tag-version\" class=\"deep-link\">git-tag-version</h3> <ul> <li>Default: <code>true</code>\n</li> <li>Type: Boolean</li> </ul> <p>Tag the commit when using the <code>npm version</code> command.</p> <h3 id=\"global\" class=\"deep-link\">global</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>Operates in \"global\" mode, so that packages are installed into the <code>prefix</code> folder instead of the current working directory. See <code><a href=\"../files/folders\">npm-folders</a></code> for more on the differences in behavior.</p> <ul> <li>packages are installed into the <code>{prefix}/lib/node_modules</code> folder, instead of the current working directory.</li> <li>bin files are linked to <code>{prefix}/bin</code>\n</li> <li>man pages are linked to <code>{prefix}/share/man</code>\n</li> </ul> <h3 id=\"globalconfig\" class=\"deep-link\">globalconfig</h3> <ul> <li>Default: {prefix}/etc/npmrc</li> <li>Type: path</li> </ul> <p>The config file to read for global config options.</p> <h3 id=\"global-style\" class=\"deep-link\">global-style</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>Causes npm to install the package into your local <code>node_modules</code> folder with the same layout it uses with the global <code>node_modules</code> folder. Only your direct dependencies will show in <code>node_modules</code> and everything they depend on will be flattened in their <code>node_modules</code> folders. This obviously will elminate some deduping. If used with <code>legacy-bundling</code>, <code>legacy-bundling</code> will be preferred.</p> <h3 id=\"group\" class=\"deep-link\">group</h3> <ul> <li>Default: GID of the current process</li> <li>Type: String or Number</li> </ul> <p>The group to use when running package scripts in global mode as the root user.</p> <h3 id=\"heading\" class=\"deep-link\">heading</h3> <ul> <li>Default: <code>\"npm\"</code>\n</li> <li>Type: String</li> </ul> <p>The string that starts all the debugging log output.</p> <h3 id=\"https-proxy\" class=\"deep-link\">https-proxy</h3> <ul> <li>Default: null</li> <li>Type: url</li> </ul> <p>A proxy to use for outgoing https requests. If the <code>HTTPS_PROXY</code> or <code>https_proxy</code> or <code>HTTP_PROXY</code> or <code>http_proxy</code> environment variables are set, proxy settings will be honored by the underlying <code>request</code> library.</p> <h3 id=\"if-present\" class=\"deep-link\">if-present</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>If true, npm will not exit with an error code when <code>run-script</code> is invoked for a script that isn't defined in the <code>scripts</code> section of <code>package.json</code>. This option can be used when it's desirable to optionally run a script when it's present and fail if the script fails. This is useful, for example, when running scripts that may only apply for some builds in an otherwise generic CI setup.</p> <h3 id=\"ignore-scripts\" class=\"deep-link\">ignore-scripts</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>If true, npm does not run scripts specified in package.json files.</p> <h3 id=\"init-module\" class=\"deep-link\">init-module</h3> <ul> <li>Default: ~/.npm-init.js</li> <li>Type: path</li> </ul> <p>A module that will be loaded by the <code>npm init</code> command. See the documentation for the <a href=\"https://github.com/isaacs/init-package-json\">init-package-json</a> module for more information, or <a href=\"../cli/init\">npm-init</a>.</p> <h3 id=\"init-author-name\" class=\"deep-link\">init-author-name</h3> <ul> <li>Default: \"\"</li> <li>Type: String</li> </ul> <p>The value <code>npm init</code> should use by default for the package author's name.</p> <h3 id=\"init-author-email\" class=\"deep-link\">init-author-email</h3> <ul> <li>Default: \"\"</li> <li>Type: String</li> </ul> <p>The value <code>npm init</code> should use by default for the package author's email.</p> <h3 id=\"init-author-url\" class=\"deep-link\">init-author-url</h3> <ul> <li>Default: \"\"</li> <li>Type: String</li> </ul> <p>The value <code>npm init</code> should use by default for the package author's homepage.</p> <h3 id=\"init-license\" class=\"deep-link\">init-license</h3> <ul> <li>Default: \"ISC\"</li> <li>Type: String</li> </ul> <p>The value <code>npm init</code> should use by default for the package license.</p> <h3 id=\"init-version\" class=\"deep-link\">init-version</h3> <ul> <li>Default: \"1.0.0\"</li> <li>Type: semver</li> </ul> <p>The value that <code>npm init</code> should use by default for the package version number, if not already set in package.json.</p> <h3 id=\"json\" class=\"deep-link\">json</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>Whether or not to output JSON data, rather than the normal output.</p> <p>This feature is currently experimental, and the output data structures for many commands is either not implemented in JSON yet, or subject to change. Only the output from <code>npm ls --json</code> is currently valid.</p> <h3 id=\"key\" class=\"deep-link\">key</h3> <ul> <li>Default: <code>null</code>\n</li> <li>Type: String</li> </ul> <p>A client key to pass when accessing the registry.</p> <h3 id=\"legacy-bundling\" class=\"deep-link\">legacy-bundling</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>Causes npm to install the package such that versions of npm prior to 1.4, such as the one included with node 0.8, can install the package. This eliminates all automatic deduping. If used with <code>global-style</code> this option will be preferred.</p> <h3 id=\"link\" class=\"deep-link\">link</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>If true, then local installs will link if there is a suitable globally installed package.</p> <p>Note that this means that local installs can cause things to be installed into the global space at the same time. The link is only done if one of the two conditions are met:</p> <ul> <li>The package is not already installed globally, or</li> <li>the globally installed version is identical to the version that is being installed locally.</li> </ul> <h3 id=\"local-address\" class=\"deep-link\">local-address</h3> <ul> <li>Default: undefined</li> <li>Type: IP Address</li> </ul> <p>The IP address of the local interface to use when making connections to the npm registry. Must be IPv4 in versions of Node prior to 0.12.</p> <h3 id=\"loglevel\" class=\"deep-link\">loglevel</h3> <ul> <li>Default: \"warn\"</li> <li>Type: String</li> <li>Values: \"silent\", \"error\", \"warn\", \"http\", \"info\", \"verbose\", \"silly\"</li> </ul> <p>What level of logs to report. On failure, <em>all</em> logs are written to <code>npm-debug.log</code> in the current working directory.</p> <p>Any logs of a higher level than the setting are shown. The default is \"warn\", which shows warn and error output.</p> <h3 id=\"logstream\" class=\"deep-link\">logstream</h3> <ul> <li>Default: process.stderr</li> <li>Type: Stream</li> </ul> <p>This is the stream that is passed to the <a href=\"https://github.com/npm/npmlog\">npmlog</a> module at run time.</p> <p>It cannot be set from the command line, but if you are using npm programmatically, you may wish to send logs to somewhere other than stderr.</p> <p>If the <code>color</code> config is set to true, then this stream will receive colored output if it is a TTY.</p> <h3 id=\"long\" class=\"deep-link\">long</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>Show extended information in <code>npm ls</code> and <code>npm search</code>.</p> <h3 id=\"message\" class=\"deep-link\">message</h3> <ul> <li>Default: \"%s\"</li> <li>Type: String</li> </ul> <p>Commit message which is used by <code>npm version</code> when creating version commit.</p> <p>Any \"%s\" in the message will be replaced with the version number.</p> <h3 id=\"node-version\" class=\"deep-link\">node-version</h3> <ul> <li>Default: process.version</li> <li>Type: semver or false</li> </ul> <p>The node version to use when checking a package's <code>engines</code> map.</p> <h3 id=\"npat\" class=\"deep-link\">npat</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>Run tests on installation.</p> <h3 id=\"onload-script\" class=\"deep-link\">onload-script</h3> <ul> <li>Default: false</li> <li>Type: path</li> </ul> <p>A node module to <code>require()</code> when npm loads. Useful for programmatic usage.</p> <h3 id=\"only\" class=\"deep-link\">only</h3> <ul> <li>Default: null</li> <li>Type: String</li> </ul> <p>When \"dev\" or \"development\" and running local <code>npm install</code> without any arguments, only devDependencies (and their dependencies) are installed.</p> <p>When \"dev\" or \"development\" and running local <code>npm ls</code>, <code>npm outdated</code>, or <code>npm update</code>, is an alias for <code>--dev</code>.</p> <p>When \"prod\" or \"production\" and running local <code>npm install</code> without any arguments, only non-devDependencies (and their dependencies) are installed.</p> <p>When \"prod\" or \"production\" and running local <code>npm ls</code>, <code>npm outdated</code>, or <code>npm update</code>, is an alias for <code>--production</code>.</p> <h3 id=\"optional\" class=\"deep-link\">optional</h3> <ul> <li>Default: true</li> <li>Type: Boolean</li> </ul> <p>Attempt to install packages in the <code>optionalDependencies</code> object. Note that if these packages fail to install, the overall installation process is not aborted.</p> <h3 id=\"parseable\" class=\"deep-link\">parseable</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>Output parseable results from commands that write to standard output.</p> <h3 id=\"prefix\" class=\"deep-link\">prefix</h3> <ul> <li>Default: see <a href=\"../files/folders\">npm-folders</a>\n</li> <li>Type: path</li> </ul> <p>The location to install global items. If set on the command line, then it forces non-global commands to run in the specified folder.</p> <h3 id=\"production\" class=\"deep-link\">production</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>Set to true to run in \"production\" mode.</p> <ol> <li>devDependencies are not installed at the topmost level when running local <code>npm install</code> without any arguments.</li> <li>Set the NODE_ENV=\"production\" for lifecycle scripts.</li> </ol> <h3 id=\"progress\" class=\"deep-link\">progress</h3> <ul> <li>Default: true</li> <li>Type: Boolean</li> </ul> <p>When set to <code>true</code>, npm will display a progress bar during time intensive operations, if <code>process.stderr</code> is a TTY.</p> <p>Set to <code>false</code> to suppress the progress bar.</p> <h3 id=\"proprietary-attribs\" class=\"deep-link\">proprietary-attribs</h3> <ul> <li>Default: true</li> <li>Type: Boolean</li> </ul> <p>Whether or not to include proprietary extended attributes in the tarballs created by npm.</p> <p>Unless you are expecting to unpack package tarballs with something other than npm -- particularly a very outdated tar implementation -- leave this as true.</p> <h3 id=\"proxy\" class=\"deep-link\">proxy</h3> <ul> <li>Default: null</li> <li>Type: url</li> </ul> <p>A proxy to use for outgoing http requests. If the <code>HTTP_PROXY</code> or <code>http_proxy</code> environment variables are set, proxy settings will be honored by the underlying <code>request</code> library.</p> <h3 id=\"rebuild-bundle\" class=\"deep-link\">rebuild-bundle</h3> <ul> <li>Default: true</li> <li>Type: Boolean</li> </ul> <p>Rebuild bundled dependencies after installation.</p> <h3 id=\"registry\" class=\"deep-link\">registry</h3> <ul> <li>Default: <a href=\"https://registry.npmjs.org/\">https://registry.npmjs.org/</a>\n</li> <li>Type: url</li> </ul> <p>The base URL of the npm package registry.</p> <h3 id=\"rollback\" class=\"deep-link\">rollback</h3> <ul> <li>Default: true</li> <li>Type: Boolean</li> </ul> <p>Remove failed installs.</p> <h3 id=\"save\" class=\"deep-link\">save</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>Save installed packages to a package.json file as dependencies.</p> <p>When used with the <code>npm rm</code> command, it removes it from the <code>dependencies</code> object.</p> <p>Only works if there is already a package.json file present.</p> <h3 id=\"save-bundle\" class=\"deep-link\">save-bundle</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>If a package would be saved at install time by the use of <code>--save</code>, <code>--save-dev</code>, or <code>--save-optional</code>, then also put it in the <code>bundleDependencies</code> list.</p> <p>When used with the <code>npm rm</code> command, it removes it from the bundledDependencies list.</p> <h3 id=\"save-dev\" class=\"deep-link\">save-dev</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>Save installed packages to a package.json file as <code>devDependencies</code>.</p> <p>When used with the <code>npm rm</code> command, it removes it from the <code>devDependencies</code> object.</p> <p>Only works if there is already a package.json file present.</p> <h3 id=\"save-exact\" class=\"deep-link\">save-exact</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>Dependencies saved to package.json using <code>--save</code>, <code>--save-dev</code> or <code>--save-optional</code> will be configured with an exact version rather than using npm's default semver range operator.</p> <h3 id=\"save-optional\" class=\"deep-link\">save-optional</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>Save installed packages to a package.json file as optionalDependencies.</p> <p>When used with the <code>npm rm</code> command, it removes it from the <code>devDependencies</code> object.</p> <p>Only works if there is already a package.json file present.</p> <h3 id=\"save-prefix\" class=\"deep-link\">save-prefix</h3> <ul> <li>Default: '^'</li> <li>Type: String</li> </ul> <p>Configure how versions of packages installed to a package.json file via <code>--save</code> or <code>--save-dev</code> get prefixed.</p> <p>For example if a package has version <code>1.2.3</code>, by default its version is set to <code>^1.2.3</code> which allows minor upgrades for that package, but after <code>npm config set save-prefix='~'</code> it would be set to <code>~1.2.3</code> which only allows patch upgrades.</p> <h3 id=\"scope\" class=\"deep-link\">scope</h3> <ul> <li>Default: \"\"</li> <li>Type: String</li> </ul> <p>Associate an operation with a scope for a scoped registry. Useful when logging in to a private registry for the first time: <code>npm login --scope=@organization --registry=registry.organization.com</code>, which will cause <code>@organization</code> to be mapped to the registry for future installation of packages specified according to the pattern <code>@organization/package</code>.</p> <h3 id=\"searchopts\" class=\"deep-link\">searchopts</h3> <ul> <li>Default: \"\"</li> <li>Type: String</li> </ul> <p>Space-separated options that are always passed to search.</p> <h3 id=\"searchexclude\" class=\"deep-link\">searchexclude</h3> <ul> <li>Default: \"\"</li> <li>Type: String</li> </ul> <p>Space-separated options that limit the results from search.</p> <h3 id=\"searchsort\" class=\"deep-link\">searchsort</h3> <ul> <li>Default: \"name\"</li> <li>Type: String</li> <li>Values: \"name\", \"-name\", \"date\", \"-date\", \"description\", \"-description\", \"keywords\", \"-keywords\"</li> </ul> <p>Indication of which field to sort search results by. Prefix with a <code>-</code> character to indicate reverse sort.</p> <h3 id=\"shell\" class=\"deep-link\">shell</h3> <ul> <li>Default: SHELL environment variable, or \"bash\" on Posix, or \"cmd\" on Windows</li> <li>Type: path</li> </ul> <p>The shell to run for the <code>npm explore</code> command.</p> <h3 id=\"shrinkwrap\" class=\"deep-link\">shrinkwrap</h3> <ul> <li>Default: true</li> <li>Type: Boolean</li> </ul> <p>If set to false, then ignore <code>npm-shrinkwrap.json</code> files when installing.</p> <h3 id=\"sign-git-tag\" class=\"deep-link\">sign-git-tag</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>If set to true, then the <code>npm version</code> command will tag the version using <code>-s</code> to add a signature.</p> <p>Note that git requires you to have set up GPG keys in your git configs for this to work properly.</p> <h3 id=\"strict-ssl\" class=\"deep-link\">strict-ssl</h3> <ul> <li>Default: true</li> <li>Type: Boolean</li> </ul> <p>Whether or not to do SSL key validation when making requests to the registry via https.</p> <p>See also the <code>ca</code> config.</p> <h3 id=\"tag\" class=\"deep-link\">tag</h3> <ul> <li>Default: latest</li> <li>Type: String</li> </ul> <p>If you ask npm to install a package and don't tell it a specific version, then it will install the specified tag.</p> <p>Also the tag that is added to the package@version specified by the <code>npm tag</code> command, if no explicit tag is given.</p> <h3 id=\"tag-version-prefix\" class=\"deep-link\">tag-version-prefix</h3> <ul> <li>Default: <code>\"v\"</code>\n</li> <li>Type: String</li> </ul> <p>If set, alters the prefix used when tagging a new version when performing a version increment using <code>npm-version</code>. To remove the prefix altogether, set it to the empty string: <code>\"\"</code>.</p> <p>Because other tools may rely on the convention that npm version tags look like <code>v1.0.0</code>, <em>only use this property if it is absolutely necessary</em>. In particular, use care when overriding this setting for public packages.</p> <h3 id=\"tmp\" class=\"deep-link\">tmp</h3> <ul> <li>Default: TMPDIR environment variable, or \"/tmp\"</li> <li>Type: path</li> </ul> <p>Where to store temporary files and folders. All temp files are deleted on success, but left behind on failure for forensic purposes.</p> <h3 id=\"unicode\" class=\"deep-link\">unicode</h3> <ul> <li>Default: false on windows, true on mac/unix systems with a unicode locale</li> <li>Type: Boolean</li> </ul> <p>When set to true, npm uses unicode characters in the tree output. When false, it uses ascii characters to draw trees.</p> <h3 id=\"unsafe-perm\" class=\"deep-link\">unsafe-perm</h3> <ul> <li>Default: false if running as root, true otherwise</li> <li>Type: Boolean</li> </ul> <p>Set to true to suppress the UID/GID switching when running package scripts. If set explicitly to false, then installing as a non-root user will fail.</p> <h3 id=\"usage\" class=\"deep-link\">usage</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>Set to show short usage output (like the -H output) instead of complete help when doing <code><a href=\"../cli/help\">npm-help</a></code>.</p> <h3 id=\"user\" class=\"deep-link\">user</h3> <ul> <li>Default: \"nobody\"</li> <li>Type: String or Number</li> </ul> <p>The UID to set to when running package scripts as root.</p> <h3 id=\"userconfig\" class=\"deep-link\">userconfig</h3> <ul> <li>Default: ~/.npmrc</li> <li>Type: path</li> </ul> <p>The location of user-level configuration settings.</p> <h3 id=\"umask\" class=\"deep-link\">umask</h3> <ul> <li>Default: 022</li> <li>Type: Octal numeric string in range 0000..0777 (0..511)</li> </ul> <p>The \"umask\" value to use when setting the file creation mode on files and folders.</p> <p>Folders and executables are given a mode which is <code>0777</code> masked against this value. Other files are given a mode which is <code>0666</code> masked against this value. Thus, the defaults are <code>0755</code> and <code>0644</code> respectively.</p> <h3 id=\"user-agent\" class=\"deep-link\">user-agent</h3> <ul> <li>Default: node/{process.version} {process.platform} {process.arch}</li> <li>Type: String</li> </ul> <p>Sets a User-Agent to the request header</p> <h3 id=\"version\" class=\"deep-link\">version</h3> <ul> <li>Default: false</li> <li>Type: boolean</li> </ul> <p>If true, output the npm version and exit successfully.</p> <p>Only relevant when specified explicitly on the command line.</p> <h3 id=\"versions\" class=\"deep-link\">versions</h3> <ul> <li>Default: false</li> <li>Type: boolean</li> </ul> <p>If true, output the npm version as well as node's <code>process.versions</code> map, and exit successfully.</p> <p>Only relevant when specified explicitly on the command line.</p> <h3 id=\"viewer\" class=\"deep-link\">viewer</h3> <ul> <li>Default: \"man\" on Posix, \"browser\" on Windows</li> <li>Type: path</li> </ul> <p>The program to use to view help content.</p> <p>Set to <code>\"browser\"</code> to view html help content in the default web browser.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"../cli/config\">npm-config</a></li> <li><a href=\"../files/npmrc\">npmrc</a></li> <li><a href=\"scripts\">npm-scripts</a></li> <li><a href=\"../files/folders\">npm-folders</a></li> <li><a href=\"../cli/npm\">npm</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/misc/config\" class=\"_attribution-link\">https://docs.npmjs.com/misc/config</a>\n  </p>\n</div>\n","misc/scripts":"<h1>npm-scripts</h1> <h1 class=\"subtitle\">How npm handles the \"scripts\" field</h1> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>npm supports the \"scripts\" property of the package.json script, for the following scripts:</p> <ul> <li>prepublish: Run BEFORE the package is published. (Also run on local <code>npm install</code> without any arguments.)</li> <li>publish, postpublish: Run AFTER the package is published.</li> <li>preinstall: Run BEFORE the package is installed</li> <li>install, postinstall: Run AFTER the package is installed.</li> <li>preuninstall, uninstall: Run BEFORE the package is uninstalled.</li> <li>postuninstall: Run AFTER the package is uninstalled.</li> <li>preversion, version: Run BEFORE bump the package version.</li> <li>postversion: Run AFTER bump the package version.</li> <li>pretest, test, posttest: Run by the <code>npm test</code> command.</li> <li>prestop, stop, poststop: Run by the <code>npm stop</code> command.</li> <li>prestart, start, poststart: Run by the <code>npm start</code> command.</li> <li>prerestart, restart, postrestart: Run by the <code>npm restart</code> command. Note: <code>npm restart</code> will run the stop and start scripts if no <code>restart</code> script is provided.</li> </ul> <p>Additionally, arbitrary scripts can be executed by running <code>npm run-script &lt;pkg&gt; &lt;stage&gt;</code>. <em>Pre</em> and <em>post</em> commands with matching names will be run for those as well (e.g. <code>premyscript</code>, <code>myscript</code>, <code>postmyscript</code>).</p> <h2 id=\"common-uses\" class=\"deep-link\">COMMON USES</h2> <p>If you need to perform operations on your package before it is used, in a way that is not dependent on the operating system or architecture of the target system, use a <code>prepublish</code> script. This includes tasks such as:</p> <ul> <li>Compiling CoffeeScript source code into JavaScript.</li> <li>Creating minified versions of JavaScript source code.</li> <li>Fetching remote resources that your package will use.</li> </ul> <p>The advantage of doing these things at <code>prepublish</code> time is that they can be done once, in a single place, thus reducing complexity and variability. Additionally, this means that:</p> <ul> <li>You can depend on <code>coffee-script</code> as a <code>devDependency</code>, and thus your users don't need to have it installed.</li> <li>You don't need to include minifiers in your package, reducing the size for your users.</li> <li>You don't need to rely on your users having <code>curl</code> or <code>wget</code> or other system tools on the target machines.</li> </ul> <h2 id=\"default-values\" class=\"deep-link\">DEFAULT VALUES</h2> <p>npm will default some script values based on package contents.</p> <ul> <li> <p><code>\"start\": \"node server.js\"</code>:</p> <p>If there is a <code>server.js</code> file in the root of your package, then npm will default the <code>start</code> command to <code>node server.js</code>.</p> </li> <li> <p><code>\"install\": \"node-gyp rebuild\"</code>:</p> <p>If there is a <code>binding.gyp</code> file in the root of your package, npm will default the <code>install</code> command to compile using node-gyp.</p> </li> </ul> <h2 id=\"user\" class=\"deep-link\">USER</h2> <p>If npm was invoked with root privileges, then it will change the uid to the user account or uid specified by the <code>user</code> config, which defaults to <code>nobody</code>. Set the <code>unsafe-perm</code> flag to run scripts with root privileges.</p> <h2 id=\"environment\" class=\"deep-link\">ENVIRONMENT</h2> <p>Package scripts run in an environment where many pieces of information are made available regarding the setup of npm and the current state of the process.</p> <h3 id=\"path\" class=\"deep-link\">path</h3> <p>If you depend on modules that define executable scripts, like test suites, then those executables will be added to the <code>PATH</code> for executing the scripts. So, if your package.json has this:</p> <pre>{ \"name\" : \"foo\"\n, \"dependencies\" : { \"bar\" : \"0.1.x\" }\n, \"scripts\": { \"start\" : \"bar ./test\" } }\n</pre> <p>then you could run <code>npm start</code> to execute the <code>bar</code> script, which is exported into the <code>node_modules/.bin</code> directory on <code>npm install</code>.</p> <h3 id=\"packagejson-vars\" class=\"deep-link\">package.json vars</h3> <p>The package.json fields are tacked onto the <code>npm_package_</code> prefix. So, for instance, if you had <code>{\"name\":\"foo\", \"version\":\"1.2.5\"}</code> in your package.json file, then your package scripts would have the <code>npm_package_name</code> environment variable set to \"foo\", and the <code>npm_package_version</code> set to \"1.2.5\"</p> <h3 id=\"configuration\" class=\"deep-link\">configuration</h3> <p>Configuration parameters are put in the environment with the <code>npm_config_</code> prefix. For instance, you can view the effective <code>root</code> config by checking the <code>npm_config_root</code> environment variable.</p> <h3 id=\"special-packagejson-config-object\" class=\"deep-link\">Special: package.json \"config\" object</h3> <p>The package.json \"config\" keys are overwritten in the environment if there is a config param of <code>&lt;name&gt;[@&lt;version&gt;]:&lt;key&gt;</code>. For example, if the package.json has this:</p> <pre>{ \"name\" : \"foo\"\n, \"config\" : { \"port\" : \"8080\" }\n, \"scripts\" : { \"start\" : \"node server.js\" } }\n</pre> <p>and the server.js is this:</p> <pre>http.createServer(...).listen(process.env.npm_package_config_port)\n</pre> <p>then the user could change the behavior by doing:</p> <pre>npm config set foo:port 80\n</pre> <h3 id=\"current-lifecycle-event\" class=\"deep-link\">current lifecycle event</h3> <p>Lastly, the <code>npm_lifecycle_event</code> environment variable is set to whichever stage of the cycle is being executed. So, you could have a single script used for different parts of the process which switches based on what's currently happening.</p> <p>Objects are flattened following this format, so if you had <code>{\"scripts\":{\"install\":\"foo.js\"}}</code> in your package.json, then you'd see this in the script:</p> <pre>process.env.npm_package_scripts_install === \"foo.js\"\n</pre> <h2 id=\"examples\" class=\"deep-link\">EXAMPLES</h2> <p>For example, if your package.json contains this:</p> <pre>{ \"scripts\" :\n  { \"install\" : \"scripts/install.js\"\n  , \"postinstall\" : \"scripts/install.js\"\n  , \"uninstall\" : \"scripts/uninstall.js\"\n  }\n}\n</pre> <p>then <code>scripts/install.js</code> will be called for the install and post-install stages of the lifecycle, and <code>scripts/uninstall.js</code> will be called when the package is uninstalled. Since <code>scripts/install.js</code> is running for two different phases, it would be wise in this case to look at the <code>npm_lifecycle_event</code> environment variable.</p> <p>If you want to run a make command, you can do so. This works just fine:</p> <pre>{ \"scripts\" :\n  { \"preinstall\" : \"./configure\"\n  , \"install\" : \"make &amp;&amp; make install\"\n  , \"test\" : \"make test\"\n  }\n}\n</pre> <h2 id=\"exiting\" class=\"deep-link\">EXITING</h2> <p>Scripts are run by passing the line as a script argument to <code>sh</code>.</p> <p>If the script exits with a code other than 0, then this will abort the process.</p> <p>Note that these script files don't have to be nodejs or even javascript programs. They just have to be some kind of executable file.</p> <h2 id=\"hook-scripts\" class=\"deep-link\">HOOK SCRIPTS</h2> <p>If you want to run a specific script at a specific lifecycle event for ALL packages, then you can use a hook script.</p> <p>Place an executable file at <code>node_modules/.hooks/{eventname}</code>, and it'll get run for all packages when they are going through that point in the package lifecycle for any packages installed in that root.</p> <p>Hook scripts are run exactly the same way as package.json scripts. That is, they are in a separate child process, with the env described above.</p> <h2 id=\"best-practices\" class=\"deep-link\">BEST PRACTICES</h2> <ul> <li>Don't exit with a non-zero error code unless you <em>really</em> mean it. Except for uninstall scripts, this will cause the npm action to fail, and potentially be rolled back. If the failure is minor or only will prevent some optional features, then it's better to just print a warning and exit successfully.</li> <li>Try not to use scripts to do what npm can do for you. Read through <code><a href=\"../files/package.json\">package.json</a></code> to see all the things that you can specify and enable by simply describing your package appropriately. In general, this will lead to a more robust and consistent state.</li> <li>Inspect the env to determine where to put things. For instance, if the <code>npm_config_binroot</code> environment variable is set to <code>/home/user/bin</code>, then don't try to install executables into <code>/usr/local/bin</code>. The user probably set it up that way for a reason.</li> <li>Don't prefix your script commands with \"sudo\". If root permissions are required for some reason, then it'll fail with that error, and the user will sudo the npm command in question.</li> <li>Don't use <code>install</code>. Use a <code>.gyp</code> file for compilation, and <code>prepublish</code> for anything else. You should almost never have to explicitly set a preinstall or install script. If you are doing this, please consider if there is another option. The only valid use of <code>install</code> or <code>preinstall</code> scripts is for compilation which must be done on the target architecture.</li> </ul> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"../cli/run-script\">npm-run-script</a></li> <li><a href=\"../files/package.json\">package.json</a></li> <li><a href=\"developers\">npm-developers</a></li> <li><a href=\"../cli/install\">npm-install</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/misc/scripts\" class=\"_attribution-link\">https://docs.npmjs.com/misc/scripts</a>\n  </p>\n</div>\n","misc/semver":"<h1>semver</h1> <h1 class=\"subtitle\">The semantic versioner for npm</h1> <h2 id=\"usage\" class=\"deep-link\">Usage</h2> <pre>$ npm install semver\n\nsemver.valid('1.2.3') // '1.2.3'\nsemver.valid('a.b.c') // null\nsemver.clean('  =v1.2.3   ') // '1.2.3'\nsemver.satisfies('1.2.3', '1.x || &gt;=2.5.0 || 5.0.0 - 7.2.3') // true\nsemver.gt('1.2.3', '9.8.7') // false\nsemver.lt('1.2.3', '9.8.7') // true\n</pre> <p>As a command-line utility:</p> <pre>$ semver -h\n\nUsage: semver &lt;version&gt; [&lt;version&gt; [...]] [-r &lt;range&gt; | -i &lt;inc&gt; | --preid &lt;identifier&gt; | -l | -rv]\nTest if version(s) satisfy the supplied range(s), and sort them.\n\nMultiple versions or ranges may be supplied, unless increment\noption is specified.  In that case, only a single version may\nbe used, and it is incremented by the specified level\n\nProgram exits successfully if any valid version satisfies\nall supplied ranges, and prints all satisfying versions.\n\nIf no versions are valid, or ranges are not satisfied,\nthen exits failure.\n\nVersions are printed in ascending order, so supplying\nmultiple versions to the utility will just sort them.\n</pre> <h2 id=\"versions\" class=\"deep-link\">Versions</h2> <p>A \"version\" is described by the <code>v2.0.0</code> specification found at <a href=\"http://semver.org/\">http://semver.org/</a>.</p> <p>A leading <code>\"=\"</code> or <code>\"v\"</code> character is stripped off and ignored.</p> <h2 id=\"ranges\" class=\"deep-link\">Ranges</h2> <p>A <code>version range</code> is a set of <code>comparators</code> which specify versions that satisfy the range.</p> <p>A <code>comparator</code> is composed of an <code>operator</code> and a <code>version</code>. The set of primitive <code>operators</code> is:</p> <ul> <li>\n<code>&lt;</code> Less than</li> <li>\n<code>&lt;=</code> Less than or equal to</li> <li>\n<code>&gt;</code> Greater than</li> <li>\n<code>&gt;=</code> Greater than or equal to</li> <li>\n<code>=</code> Equal. If no operator is specified, then equality is assumed, so this operator is optional, but MAY be included.</li> </ul> <p>For example, the comparator <code>&gt;=1.2.7</code> would match the versions <code>1.2.7</code>, <code>1.2.8</code>, <code>2.5.3</code>, and <code>1.3.9</code>, but not the versions <code>1.2.6</code> or <code>1.1.0</code>.</p> <p>Comparators can be joined by whitespace to form a <code>comparator set</code>, which is satisfied by the <strong>intersection</strong> of all of the comparators it includes.</p> <p>A range is composed of one or more comparator sets, joined by <code>||</code>. A version matches a range if and only if every comparator in at least one of the <code>||</code>-separated comparator sets is satisfied by the version.</p> <p>For example, the range <code>&gt;=1.2.7 &lt;1.3.0</code> would match the versions <code>1.2.7</code>, <code>1.2.8</code>, and <code>1.2.99</code>, but not the versions <code>1.2.6</code>, <code>1.3.0</code>, or <code>1.1.0</code>.</p> <p>The range <code>1.2.7 || &gt;=1.2.9 &lt;2.0.0</code> would match the versions <code>1.2.7</code>, <code>1.2.9</code>, and <code>1.4.6</code>, but not the versions <code>1.2.8</code> or <code>2.0.0</code>.</p> <h3 id=\"prerelease-tags\" class=\"deep-link\">Prerelease Tags</h3> <p>If a version has a prerelease tag (for example, <code>1.2.3-alpha.3</code>) then it will only be allowed to satisfy comparator sets if at least one comparator with the same <code>[major, minor, patch]</code> tuple also has a prerelease tag.</p> <p>For example, the range <code>&gt;1.2.3-alpha.3</code> would be allowed to match the version <code>1.2.3-alpha.7</code>, but it would <em>not</em> be satisfied by <code>3.4.5-alpha.9</code>, even though <code>3.4.5-alpha.9</code> is technically \"greater than\" <code>1.2.3-alpha.3</code> according to the SemVer sort rules. The version range only accepts prerelease tags on the <code>1.2.3</code> version. The version <code>3.4.5</code> <em>would</em> satisfy the range, because it does not have a prerelease flag, and <code>3.4.5</code> is greater than <code>1.2.3-alpha.7</code>.</p> <p>The purpose for this behavior is twofold. First, prerelease versions frequently are updated very quickly, and contain many breaking changes that are (by the author's design) not yet fit for public consumption. Therefore, by default, they are excluded from range matching semantics.</p> <p>Second, a user who has opted into using a prerelease version has clearly indicated the intent to use <em>that specific</em> set of alpha/beta/rc versions. By including a prerelease tag in the range, the user is indicating that they are aware of the risk. However, it is still not appropriate to assume that they have opted into taking a similar risk on the <em>next</em> set of prerelease versions.</p> <h4 id=\"prerelease-identifiers\" class=\"deep-link\">Prerelease Identifiers</h4> <p>The method <code>.inc</code> takes an additional <code>identifier</code> string argument that will append the value of the string as a prerelease identifier:</p> <pre>&gt; semver.inc('1.2.3', 'prerelease', 'beta')\n'1.2.4-beta.0'</pre> <p>command-line example:</p> <pre>$ semver 1.2.3 -i prerelease --preid beta\n1.2.4-beta.0</pre> <p>Which then can be used to increment further:</p> <pre>$ semver 1.2.4-beta.0 -i prerelease\n1.2.4-beta.1</pre> <h3 id=\"advanced-range-syntax\" class=\"deep-link\">Advanced Range Syntax</h3> <p>Advanced range syntax desugars to primitive comparators in deterministic ways.</p> <p>Advanced ranges may be combined in the same way as primitive comparators using white space or <code>||</code>.</p> <h4 id=\"hyphen-ranges-xyz---abc\" class=\"deep-link\">Hyphen Ranges <code>X.Y.Z - A.B.C</code>\n</h4> <p>Specifies an inclusive set.</p> <ul> <li>\n<code>1.2.3 - 2.3.4</code> := <code>&gt;=1.2.3 &lt;=2.3.4</code>\n</li> </ul> <p>If a partial version is provided as the first version in the inclusive range, then the missing pieces are replaced with zeroes.</p> <ul> <li>\n<code>1.2 - 2.3.4</code> := <code>&gt;=1.2.0 &lt;=2.3.4</code>\n</li> </ul> <p>If a partial version is provided as the second version in the inclusive range, then all versions that start with the supplied parts of the tuple are accepted, but nothing that would be greater than the provided tuple parts.</p> <ul> <li>\n<code>1.2.3 - 2.3</code> := <code>&gt;=1.2.3 &lt;2.4.0</code>\n</li> <li>\n<code>1.2.3 - 2</code> := <code>&gt;=1.2.3 &lt;3.0.0</code>\n</li> </ul> <h4 id=\"x-ranges-12x-1x-12-\" class=\"deep-link\">X-Ranges <code>1.2.x</code> <code>1.X</code> <code>1.2.*</code> <code>*</code>\n</h4> <p>Any of <code>X</code>, <code>x</code>, or <code>*</code> may be used to \"stand in\" for one of the numeric values in the <code>[major, minor, patch]</code> tuple.</p> <ul> <li>\n<code>*</code> := <code>&gt;=0.0.0</code> (Any version satisfies)</li> <li>\n<code>1.x</code> := <code>&gt;=1.0.0 &lt;2.0.0</code> (Matching major version)</li> <li>\n<code>1.2.x</code> := <code>&gt;=1.2.0 &lt;1.3.0</code> (Matching major and minor versions)</li> </ul> <p>A partial version range is treated as an X-Range, so the special character is in fact optional.</p> <ul> <li>\n<code>\"\"</code> (empty string) := <code>*</code> := <code>&gt;=0.0.0</code>\n</li> <li>\n<code>1</code> := <code>1.x.x</code> := <code>&gt;=1.0.0 &lt;2.0.0</code>\n</li> <li>\n<code>1.2</code> := <code>1.2.x</code> := <code>&gt;=1.2.0 &lt;1.3.0</code>\n</li> </ul> <h4 id=\"tilde-ranges-123-12-1\" class=\"deep-link\">Tilde Ranges <code>~1.2.3</code> <code>~1.2</code> <code>~1</code>\n</h4> <p>Allows patch-level changes if a minor version is specified on the comparator. Allows minor-level changes if not.</p> <ul> <li>\n<code>~1.2.3</code> := <code>&gt;=1.2.3 &lt;1.(2+1).0</code> := <code>&gt;=1.2.3 &lt;1.3.0</code>\n</li> <li>\n<code>~1.2</code> := <code>&gt;=1.2.0 &lt;1.(2+1).0</code> := <code>&gt;=1.2.0 &lt;1.3.0</code> (Same as <code>1.2.x</code>)</li> <li>\n<code>~1</code> := <code>&gt;=1.0.0 &lt;(1+1).0.0</code> := <code>&gt;=1.0.0 &lt;2.0.0</code> (Same as <code>1.x</code>)</li> <li>\n<code>~0.2.3</code> := <code>&gt;=0.2.3 &lt;0.(2+1).0</code> := <code>&gt;=0.2.3 &lt;0.3.0</code>\n</li> <li>\n<code>~0.2</code> := <code>&gt;=0.2.0 &lt;0.(2+1).0</code> := <code>&gt;=0.2.0 &lt;0.3.0</code> (Same as <code>0.2.x</code>)</li> <li>\n<code>~0</code> := <code>&gt;=0.0.0 &lt;(0+1).0.0</code> := <code>&gt;=0.0.0 &lt;1.0.0</code> (Same as <code>0.x</code>)</li> <li>\n<code>~1.2.3-beta.2</code> := <code>&gt;=1.2.3-beta.2 &lt;1.3.0</code> Note that prereleases in the <code>1.2.3</code> version will be allowed, if they are greater than or equal to <code>beta.2</code>. So, <code>1.2.3-beta.4</code> would be allowed, but <code>1.2.4-beta.2</code> would not, because it is a prerelease of a different <code>[major, minor, patch]</code> tuple.</li> </ul> <h4 id=\"caret-ranges-123-025-004\" class=\"deep-link\">Caret Ranges <code>^1.2.3</code> <code>^0.2.5</code> <code>^0.0.4</code>\n</h4> <p>Allows changes that do not modify the left-most non-zero digit in the <code>[major, minor, patch]</code> tuple. In other words, this allows patch and minor updates for versions <code>1.0.0</code> and above, patch updates for versions <code>0.X &gt;=0.1.0</code>, and <em>no</em> updates for versions <code>0.0.X</code>.</p> <p>Many authors treat a <code>0.x</code> version as if the <code>x</code> were the major \"breaking-change\" indicator.</p> <p>Caret ranges are ideal when an author may make breaking changes between <code>0.2.4</code> and <code>0.3.0</code> releases, which is a common practice. However, it presumes that there will <em>not</em> be breaking changes between <code>0.2.4</code> and <code>0.2.5</code>. It allows for changes that are presumed to be additive (but non-breaking), according to commonly observed practices.</p> <ul> <li>\n<code>^1.2.3</code> := <code>&gt;=1.2.3 &lt;2.0.0</code>\n</li> <li>\n<code>^0.2.3</code> := <code>&gt;=0.2.3 &lt;0.3.0</code>\n</li> <li>\n<code>^0.0.3</code> := <code>&gt;=0.0.3 &lt;0.0.4</code>\n</li> <li>\n<code>^1.2.3-beta.2</code> := <code>&gt;=1.2.3-beta.2 &lt;2.0.0</code> Note that prereleases in the <code>1.2.3</code> version will be allowed, if they are greater than or equal to <code>beta.2</code>. So, <code>1.2.3-beta.4</code> would be allowed, but <code>1.2.4-beta.2</code> would not, because it is a prerelease of a different <code>[major, minor, patch]</code> tuple.</li> <li>\n<code>^0.0.3-beta</code> := <code>&gt;=0.0.3-beta &lt;0.0.4</code> Note that prereleases in the <code>0.0.3</code> version <em>only</em> will be allowed, if they are greater than or equal to <code>beta</code>. So, <code>0.0.3-pr.2</code> would be allowed.</li> </ul> <p>When parsing caret ranges, a missing <code>patch</code> value desugars to the number <code>0</code>, but will allow flexibility within that value, even if the major and minor versions are both <code>0</code>.</p> <ul> <li>\n<code>^1.2.x</code> := <code>&gt;=1.2.0 &lt;2.0.0</code>\n</li> <li>\n<code>^0.0.x</code> := <code>&gt;=0.0.0 &lt;0.1.0</code>\n</li> <li>\n<code>^0.0</code> := <code>&gt;=0.0.0 &lt;0.1.0</code>\n</li> </ul> <p>A missing <code>minor</code> and <code>patch</code> values will desugar to zero, but also allow flexibility within those values, even if the major version is zero.</p> <ul> <li>\n<code>^1.x</code> := <code>&gt;=1.0.0 &lt;2.0.0</code>\n</li> <li>\n<code>^0.x</code> := <code>&gt;=0.0.0 &lt;1.0.0</code>\n</li> </ul> <h3 id=\"range-grammar\" class=\"deep-link\">Range Grammar</h3> <p>Putting all this together, here is a Backus-Naur grammar for ranges, for the benefit of parser authors:</p> <pre>range-set  ::= range ( logical-or range ) *\nlogical-or ::= ( ' ' ) * '||' ( ' ' ) *\nrange      ::= hyphen | simple ( ' ' simple ) * | ''\nhyphen     ::= partial ' - ' partial\nsimple     ::= primitive | partial | tilde | caret\nprimitive  ::= ( '&lt;' | '&gt;' | '&gt;=' | '&lt;=' | '=' | ) partial\npartial    ::= xr ( '.' xr ( '.' xr qualifier ? )? )?\nxr         ::= 'x' | 'X' | '*' | nr\nnr         ::= '0' | ['1'-'9']['0'-'9']+\ntilde      ::= '~' partial\ncaret      ::= '^' partial\nqualifier  ::= ( '-' pre )? ( '+' build )?\npre        ::= parts\nbuild      ::= parts\nparts      ::= part ( '.' part ) *\npart       ::= nr | [-0-9A-Za-z]+</pre> <h2 id=\"functions\" class=\"deep-link\">Functions</h2> <p>All methods and classes take a final <code>loose</code> boolean argument that, if true, will be more forgiving about not-quite-valid semver strings. The resulting output will always be 100% strict, of course.</p> <p>Strict-mode Comparators and Ranges will be strict about the SemVer strings that they parse.</p> <ul> <li>\n<code>valid(v)</code>: Return the parsed version, or null if it's not valid.</li> <li>\n<code>inc(v, release)</code>: Return the version incremented by the release type (<code>major</code>, <code>premajor</code>, <code>minor</code>, <code>preminor</code>, <code>patch</code>, <code>prepatch</code>, or <code>prerelease</code>), or null if it's not valid <ul> <li>\n<code>premajor</code> in one call will bump the version up to the next major version and down to a prerelease of that major version. <code>preminor</code>, and <code>prepatch</code> work the same way.</li> <li>If called from a non-prerelease version, the <code>prerelease</code> will work the same as <code>prepatch</code>. It increments the patch version, then makes a prerelease. If the input version is already a prerelease it simply increments it.</li> </ul> </li> <li>\n<code>major(v)</code>: Return the major version number.</li> <li>\n<code>minor(v)</code>: Return the minor version number.</li> <li>\n<code>patch(v)</code>: Return the patch version number.</li> </ul> <h3 id=\"comparison\" class=\"deep-link\">Comparison</h3> <ul> <li>\n<code>gt(v1, v2)</code>: <code>v1 &gt; v2</code>\n</li> <li>\n<code>gte(v1, v2)</code>: <code>v1 &gt;= v2</code>\n</li> <li>\n<code>lt(v1, v2)</code>: <code>v1 &lt; v2</code>\n</li> <li>\n<code>lte(v1, v2)</code>: <code>v1 &lt;= v2</code>\n</li> <li>\n<code>eq(v1, v2)</code>: <code>v1 == v2</code> This is true if they're logically equivalent, even if they're not the exact same string. You already know how to compare strings.</li> <li>\n<code>neq(v1, v2)</code>: <code>v1 != v2</code> The opposite of <code>eq</code>.</li> <li>\n<code>cmp(v1, comparator, v2)</code>: Pass in a comparison string, and it'll call the corresponding function above. <code>\"===\"</code> and <code>\"!==\"</code> do simple string comparison, but are included for completeness. Throws if an invalid comparison string is provided.</li> <li>\n<code>compare(v1, v2)</code>: Return <code>0</code> if <code>v1 == v2</code>, or <code>1</code> if <code>v1</code> is greater, or <code>-1</code> if <code>v2</code> is greater. Sorts in ascending order if passed to <code>Array.sort()</code>.</li> <li>\n<code>rcompare(v1, v2)</code>: The reverse of compare. Sorts an array of versions in descending order when passed to <code>Array.sort()</code>.</li> <li>\n<code>diff(v1, v2)</code>: Returns difference between two versions by the release type (<code>major</code>, <code>premajor</code>, <code>minor</code>, <code>preminor</code>, <code>patch</code>, <code>prepatch</code>, or <code>prerelease</code>), or null if the versions are the same.</li> </ul> <h3 id=\"ranges-1\" class=\"deep-link\">Ranges</h3> <ul> <li>\n<code>validRange(range)</code>: Return the valid range or null if it's not valid</li> <li>\n<code>satisfies(version, range)</code>: Return true if the version satisfies the range.</li> <li>\n<code>maxSatisfying(versions, range)</code>: Return the highest version in the list that satisfies the range, or <code>null</code> if none of them do.</li> <li>\n<code>gtr(version, range)</code>: Return <code>true</code> if version is greater than all the versions possible in the range.</li> <li>\n<code>ltr(version, range)</code>: Return <code>true</code> if version is less than all the versions possible in the range.</li> <li>\n<code>outside(version, range, hilo)</code>: Return true if the version is outside the bounds of the range in either the high or low direction. The <code>hilo</code> argument must be either the string <code>'&gt;'</code> or <code>'&lt;'</code>. (This is the function called by <code>gtr</code> and <code>ltr</code>.)</li> </ul> <p>Note that, since ranges may be non-contiguous, a version might not be greater than a range, less than a range, <em>or</em> satisfy a range! For example, the range <code>1.2 &lt;1.2.9 || &gt;2.0.0</code> would have a hole from <code>1.2.9</code> until <code>2.0.0</code>, so the version <code>1.2.10</code> would not be greater than the range (because <code>2.0.1</code> satisfies, which is higher), nor less than the range (since <code>1.2.8</code> satisfies, which is lower), and it also does not satisfy the range.</p> <p>If you want to know if a version satisfies or does not satisfy a range, use the <code>satisfies(version, range)</code> function.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/misc/semver\" class=\"_attribution-link\">https://docs.npmjs.com/misc/semver</a>\n  </p>\n</div>\n","cli/bundle":"<h1>npm-bundle</h1> <h1 class=\"subtitle\">REMOVED</h1> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>The <code>npm bundle</code> command has been removed in 1.0, for the simple reason that it is no longer necessary, as the default behavior is now to install packages into the local space.</p> <p>Just use <code>npm install</code> now to do what <code>npm bundle</code> used to do.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"install\">npm-install</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/bundle\" class=\"_attribution-link\">https://docs.npmjs.com/cli/bundle</a>\n  </p>\n</div>\n","cli/cache":"<h1>npm-cache</h1> <h1 class=\"subtitle\">Manipulates packages cache</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm cache add &lt;tarball file&gt;\nnpm cache add &lt;folder&gt;\nnpm cache add &lt;tarball url&gt;\nnpm cache add &lt;name&gt;@&lt;version&gt;\n\nnpm cache ls [&lt;path&gt;]\n\nnpm cache clean [&lt;path&gt;]\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>Used to add, list, or clear the npm cache folder.</p> <ul> <li> <p>add: Add the specified package to the local cache. This command is primarily intended to be used internally by npm, but it can provide a way to add data to the local installation cache explicitly.</p> </li> <li> <p>ls: Show the data in the cache. Argument is a path to show in the cache folder. Works a bit like the <code>find</code> program, but limited by the <code>depth</code> config.</p> </li> <li> <p>clean: Delete data out of the cache folder. If an argument is provided, then it specifies a subpath to delete. If no argument is provided, then the entire cache is cleared.</p> </li> </ul> <h2 id=\"details\" class=\"deep-link\">DETAILS</h2> <p>npm stores cache data in the directory specified in <code>npm config get cache</code>. For each package that is added to the cache, three pieces of information are stored in <code>{cache}/{name}/{version}</code>:</p> <ul> <li>.../package/package.json: The package.json file, as npm sees it.</li> <li>.../package.tgz: The tarball for that version.</li> </ul> <p>Additionally, whenever a registry request is made, a <code>.cache.json</code> file is placed at the corresponding URI, to store the ETag and the requested data. This is stored in <code>{cache}/{hostname}/{path}/.cache.json</code>.</p> <p>Commands that make non-essential registry requests (such as <code>search</code> and <code>view</code>, or the completion scripts) generally specify a minimum timeout. If the <code>.cache.json</code> file is younger than the specified timeout, then they do not make an HTTP request to the registry.</p> <h2 id=\"configuration\" class=\"deep-link\">Configuration</h2> <h3 id=\"cache\" class=\"deep-link\">cache</h3> <p>Default: <code>~/.npm</code> on Posix, or <code>%AppData%/npm-cache</code> on Windows.</p> <p>The root cache folder.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"../files/folders\">npm-folders</a></li> <li><a href=\"config\">npm-config</a></li> <li><a href=\"../misc/config\">npm-config</a></li> <li><a href=\"../files/npmrc\">npmrc</a></li> <li><a href=\"install\">npm-install</a></li> <li><a href=\"publish\">npm-publish</a></li> <li><a href=\"pack\">npm-pack</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/cache\" class=\"_attribution-link\">https://docs.npmjs.com/cli/cache</a>\n  </p>\n</div>\n","cli/completion":"<h1>npm-completion</h1> <h1 class=\"subtitle\">Tab Completion for npm</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>source &lt;(npm completion)\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>Enables tab-completion in all npm commands.</p> <p>The synopsis above loads the completions into your current shell. Adding it to your ~/.bashrc or ~/.zshrc will make the completions available everywhere:</p> <pre>npm completion &gt;&gt; ~/.bashrc\nnpm completion &gt;&gt; ~/.zshrc\n</pre> <p>You may of course also pipe the output of npm completion to a file such as <code>/usr/local/etc/bash_completion.d/npm</code> if you have a system that will read that file for you.</p> <p>When <code>COMP_CWORD</code>, <code>COMP_LINE</code>, and <code>COMP_POINT</code> are defined in the environment, <code>npm completion</code> acts in \"plumbing mode\", and outputs completions based on the arguments.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"../misc/developers\">npm-developers</a></li> <li><a href=\"../misc/faq\">npm-faq</a></li> <li><a href=\"npm\">npm</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/completion\" class=\"_attribution-link\">https://docs.npmjs.com/cli/completion</a>\n  </p>\n</div>\n","cli/config":"<h1>npm-config</h1> <h1 class=\"subtitle\">Manage the npm configuration files</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm config set &lt;key&gt; &lt;value&gt; [-g|--global]\nnpm config get &lt;key&gt;\nnpm config delete &lt;key&gt;\nnpm config list\nnpm config edit\nnpm get &lt;key&gt;\nnpm set &lt;key&gt; &lt;value&gt; [-g|--global]\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>npm gets its config settings from the command line, environment variables, <code>npmrc</code> files, and in some cases, the <code>package.json</code> file.</p> <p>See <a href=\"../files/npmrc\">npmrc</a> for more information about the npmrc files.</p> <p>See <code><a href=\"../misc/config\">npm-config</a></code> for a more thorough discussion of the mechanisms involved.</p> <p>The <code>npm config</code> command can be used to update and edit the contents of the user and global npmrc files.</p> <h2 id=\"sub-commands\" class=\"deep-link\">Sub-commands</h2> <p>Config supports the following sub-commands:</p> <h3 id=\"set\" class=\"deep-link\">set</h3> <pre>npm config set key value\n</pre> <p>Sets the config key to the value.</p> <p>If value is omitted, then it sets it to \"true\".</p> <h3 id=\"get\" class=\"deep-link\">get</h3> <pre>npm config get key\n</pre> <p>Echo the config value to stdout.</p> <h3 id=\"list\" class=\"deep-link\">list</h3> <pre>npm config list\n</pre> <p>Show all the config settings.</p> <h3 id=\"delete\" class=\"deep-link\">delete</h3> <pre>npm config delete key\n</pre> <p>Deletes the key from all configuration files.</p> <h3 id=\"edit\" class=\"deep-link\">edit</h3> <pre>npm config edit\n</pre> <p>Opens the config file in an editor. Use the <code>--global</code> flag to edit the global config.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"../files/folders\">npm-folders</a></li> <li><a href=\"../misc/config\">npm-config</a></li> <li><a href=\"../files/package.json\">package.json</a></li> <li><a href=\"../files/npmrc\">npmrc</a></li> <li><a href=\"npm\">npm</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/config\" class=\"_attribution-link\">https://docs.npmjs.com/cli/config</a>\n  </p>\n</div>\n","cli/docs":"<h1>npm-docs</h1> <h1 class=\"subtitle\">Docs for a package in a web browser maybe</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm docs [&lt;pkgname&gt; [&lt;pkgname&gt; ...]]\nnpm docs .\nnpm home [&lt;pkgname&gt; [&lt;pkgname&gt; ...]]\nnpm home .\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>This command tries to guess at the likely location of a package's documentation URL, and then tries to open it using the <code>--browser</code> config param. You can pass multiple package names at once. If no package name is provided, it will search for a <code>package.json</code> in the current folder and use the <code>name</code> property.</p> <h2 id=\"configuration\" class=\"deep-link\">Configuration</h2> <h3 id=\"browser\" class=\"deep-link\">browser</h3> <ul> <li>Default: OS X: <code>\"open\"</code>, Windows: <code>\"start\"</code>, Others: <code>\"xdg-open\"</code>\n</li> <li>Type: String</li> </ul> <p>The browser that is called by the <code>npm docs</code> command to open websites.</p> <h3 id=\"registry\" class=\"deep-link\">registry</h3> <ul> <li>Default: <a href=\"https://registry.npmjs.org/\">https://registry.npmjs.org/</a>\n</li> <li>Type: url</li> </ul> <p>The base URL of the npm package registry.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"view\">npm-view</a></li> <li><a href=\"publish\">npm-publish</a></li> <li><a href=\"../misc/registry\">npm-registry</a></li> <li><a href=\"config\">npm-config</a></li> <li><a href=\"../misc/config\">npm-config</a></li> <li><a href=\"../files/npmrc\">npmrc</a></li> <li><a href=\"../files/package.json\">package.json</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/docs\" class=\"_attribution-link\">https://docs.npmjs.com/cli/docs</a>\n  </p>\n</div>\n","cli/explore":"<h1>npm-explore</h1> <h1 class=\"subtitle\">Browse an installed package</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm explore &lt;pkg&gt; [ -- &lt;cmd&gt;]\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>Spawn a subshell in the directory of the installed package specified.</p> <p>If a command is specified, then it is run in the subshell, which then immediately terminates.</p> <p>This is particularly handy in the case of git submodules in the <code>node_modules</code> folder:</p> <pre>npm explore some-dependency -- git pull origin master\n</pre> <p>Note that the package is <em>not</em> automatically rebuilt afterwards, so be sure to use <code>npm rebuild &lt;pkg&gt;</code> if you make any changes.</p> <h2 id=\"configuration\" class=\"deep-link\">Configuration</h2> <h3 id=\"shell\" class=\"deep-link\">shell</h3> <ul> <li>Default: SHELL environment variable, or \"bash\" on Posix, or \"cmd\" on Windows</li> <li>Type: path</li> </ul> <p>The shell to run for the <code>npm explore</code> command.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"../files/folders\">npm-folders</a></li> <li><a href=\"edit\">npm-edit</a></li> <li><a href=\"rebuild\">npm-rebuild</a></li> <li><a href=\"build\">npm-build</a></li> <li><a href=\"install\">npm-install</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/explore\" class=\"_attribution-link\">https://docs.npmjs.com/cli/explore</a>\n  </p>\n</div>\n","getting-started/publishing-npm-packages":"<h1 id=\"publishing-npm-packages\" class=\"deep-link\">Publishing npm packages</h1> <div class=\"youtube-video\"><iframe src=\"https://www.youtube.com/embed/BkotrAFtBM0\" frameborder=\"0\" allowfullscreen></iframe></div> <p>You can publish any directory that has a <code>package.json</code> file, e.g. a <a href=\"creating-node-modules\">node module</a>.</p> <h2 id=\"creating-a-user\" class=\"deep-link\">Creating a user</h2> <p>To publish, you must have a user on the npm registry. If you don't have one, create it with <code>npm adduser</code>. If you created one on the site, use <code>npm login</code> to store the credentials on the client.</p> <p>Test: Use <code>npm config ls</code> to ensure that the credentials are stored on your client. Check that it has been added to the registry by going to <a href=\"https://npmjs.com/~\">https://npmjs.com/~</a><username>.</username></p> <h2 id=\"publishing-the-package\" class=\"deep-link\">Publishing the package</h2> <p>Use <code>npm publish</code> to publish the package.</p> <p>Note that everything in the directory will be included unless it is ignored by a local <code>.gitignore</code> or <code>.npmignore</code> file as described in <a href=\"../misc/developers\"><code>npm-developers</code></a>.</p> <p>Test: Go to <code>https://npmjs.com/package/&lt;package&gt;</code>. You should see the information for your new package.</p> <h2 id=\"updating-the-package\" class=\"deep-link\">Updating the package</h2> <p>When you make changes, you can update the package using <code>npm version &lt;update_type&gt;</code>, where update_type is one of the semantic versioning release types, patch, minor, or major. This command will change the version number in <code>package.json</code>. Note that this will also add a tag with this release number to your git repository if you have one.</p> <p>After updating the version number, you can <code>npm publish</code> again.</p> <p>Test: Go to <code>https://npmjs.com/package/&lt;package&gt;</code>. The package number should be updated.</p> <p>The README displayed on the site will not be updated unless a new version of your package is published, so you would need to run <code>npm version patch</code> and <code>npm publish</code> to have a documentation fix displayed on the site.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/getting-started/publishing-npm-packages\" class=\"_attribution-link\">https://docs.npmjs.com/getting-started/publishing-npm-packages</a>\n  </p>\n</div>\n","cli/deprecate":"<h1>npm-deprecate</h1> <h1 class=\"subtitle\">Deprecate a version of a package</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm deprecate &lt;pkg&gt;[@&lt;version&gt;] &lt;message&gt;\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>This command will update the npm registry entry for a package, providing a deprecation warning to all who attempt to install it.</p> <p>It works on version ranges as well as specific versions, so you can do something like this:</p> <pre>npm deprecate my-thing@\"&lt; 0.2.3\" \"critical bug fixed in v0.2.3\"\n</pre> <p>Note that you must be the package owner to deprecate something. See the <code>owner</code> and <code>adduser</code> help topics.</p> <p>To un-deprecate a package, specify an empty string (<code>\"\"</code>) for the <code>message</code> argument.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"publish\">npm-publish</a></li> <li><a href=\"../misc/registry\">npm-registry</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/deprecate\" class=\"_attribution-link\">https://docs.npmjs.com/cli/deprecate</a>\n  </p>\n</div>\n","cli/dist-tag":"<h1>npm-dist-tag</h1> <h1 class=\"subtitle\">Modify package distribution tags</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm dist-tag add &lt;pkg&gt;@&lt;version&gt; [&lt;tag&gt;]\nnpm dist-tag rm &lt;pkg&gt; &lt;tag&gt;\nnpm dist-tag ls [&lt;pkg&gt;]\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>Add, remove, and enumerate distribution tags on a package:</p> <ul> <li> <p>add: Tags the specified version of the package with the specified tag, or the <code>--tag</code> config if not specified.</p> </li> <li> <p>rm: Clear a tag that is no longer in use from the package.</p> </li> <li> <p>ls: Show all of the dist-tags for a package, defaulting to the package in the current prefix.</p> </li> </ul> <p>A tag can be used when installing packages as a reference to a version instead of using a specific version number:</p> <pre>npm install &lt;name&gt;@&lt;tag&gt;\n</pre> <p>When installing dependencies, a preferred tagged version may be specified:</p> <pre>npm install --tag &lt;tag&gt;\n</pre> <p>This also applies to <code>npm dedupe</code>.</p> <p>Publishing a package sets the <code>latest</code> tag to the published version unless the <code>--tag</code> option is used. For example, <code>npm publish --tag=beta</code>.</p> <p>By default, <code>npm install &lt;pkg&gt;</code> (without any <code>@&lt;version&gt;</code> or <code>@&lt;tag&gt;</code> specifier) installs the <code>latest</code> tag.</p> <h2 id=\"purpose\" class=\"deep-link\">PURPOSE</h2> <p>Tags can be used to provide an alias instead of version numbers.</p> <p>For example, a project might choose to have multiple streams of development and use a different tag for each stream, e.g., <code>stable</code>, <code>beta</code>, <code>dev</code>, <code>canary</code>.</p> <p>By default, the <code>latest</code> tag is used by npm to identify the current version of a package, and <code>npm install &lt;pkg&gt;</code> (without any <code>@&lt;version&gt;</code> or <code>@&lt;tag&gt;</code> specifier) installs the <code>latest</code> tag. Typically, projects only use the <code>latest</code> tag for stable release versions, and use other tags for unstable versions such as prereleases.</p> <p>The <code>next</code> tag is used by some projects to identify the upcoming version.</p> <p>By default, other than <code>latest</code>, no tag has any special significance to npm itself.</p> <h2 id=\"caveats\" class=\"deep-link\">CAVEATS</h2> <p>This command used to be known as <code>npm tag</code>, which only created new tags, and so had a different syntax.</p> <p>Tags must share a namespace with version numbers, because they are specified in the same slot: <code>npm install &lt;pkg&gt;@&lt;version&gt;</code> vs <code>npm install &lt;pkg&gt;@&lt;tag&gt;</code>.</p> <p>Tags that can be interpreted as valid semver ranges will be rejected. For example, <code>v1.4</code> cannot be used as a tag, because it is interpreted by semver as <code>&gt;=1.4.0 &lt;1.5.0</code>. See <a href=\"https://github.com/npm/npm/issues/6082\">https://github.com/npm/npm/issues/6082</a>.</p> <p>The simplest way to avoid semver problems with tags is to use tags that do not begin with a number or the letter <code>v</code>.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"tag\">npm-tag</a></li> <li><a href=\"publish\">npm-publish</a></li> <li><a href=\"install\">npm-install</a></li> <li><a href=\"dedupe\">npm-dedupe</a></li> <li><a href=\"../misc/registry\">npm-registry</a></li> <li><a href=\"config\">npm-config</a></li> <li><a href=\"../misc/config\">npm-config</a></li> <li><a href=\"../files/npmrc\">npmrc</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/dist-tag\" class=\"_attribution-link\">https://docs.npmjs.com/cli/dist-tag</a>\n  </p>\n</div>\n","cli/help":"<h1>npm-help</h1> <h1 class=\"subtitle\">Get help on npm</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm help &lt;term&gt; [&lt;terms..&gt;]\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>If supplied a topic, then show the appropriate documentation page.</p> <p>If the topic does not exist, or if multiple terms are provided, then run the <code>help-search</code> command to find a match. Note that, if <code>help-search</code> finds a single subject, then it will run <code>help</code> on that topic, so unique matches are equivalent to specifying a topic name.</p> <h2 id=\"configuration\" class=\"deep-link\">Configuration</h2> <h3 id=\"viewer\" class=\"deep-link\">viewer</h3> <ul> <li>Default: \"man\" on Posix, \"browser\" on Windows</li> <li>Type: path</li> </ul> <p>The program to use to view help content.</p> <p>Set to <code>\"browser\"</code> to view html help content in the default web browser.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"npm\">npm</a></li> <li>README</li> <li><a href=\"../misc/faq\">npm-faq</a></li> <li><a href=\"../files/folders\">npm-folders</a></li> <li><a href=\"config\">npm-config</a></li> <li><a href=\"../misc/config\">npm-config</a></li> <li><a href=\"../files/npmrc\">npmrc</a></li> <li><a href=\"../files/package.json\">package.json</a></li> <li><a href=\"help-search\">npm-help-search</a></li> <li><a href=\"https://docs.npmjs.com/misc/index\">npm-index</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/help\" class=\"_attribution-link\">https://docs.npmjs.com/cli/help</a>\n  </p>\n</div>\n","cli/help-search":"<h1>npm-help-search</h1> <h1 class=\"subtitle\">Search npm help documentation</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm help-search &lt;text&gt;\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>This command will search the npm markdown documentation files for the terms provided, and then list the results, sorted by relevance.</p> <p>If only one result is found, then it will show that help topic.</p> <p>If the argument to <code>npm help</code> is not a known help topic, then it will call <code>help-search</code>. It is rarely if ever necessary to call this command directly.</p> <h2 id=\"configuration\" class=\"deep-link\">Configuration</h2> <h3 id=\"long\" class=\"deep-link\">long</h3> <ul> <li>Type: Boolean</li> <li>Default false</li> </ul> <p>If true, the \"long\" flag will cause help-search to output context around where the terms were found in the documentation.</p> <p>If false, then help-search will just list out the help topics found.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"npm\">npm</a></li> <li><a href=\"../misc/faq\">npm-faq</a></li> <li><a href=\"help\">npm-help</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/help-search\" class=\"_attribution-link\">https://docs.npmjs.com/cli/help-search</a>\n  </p>\n</div>\n","cli/init":"<h1>npm-init</h1> <h1 class=\"subtitle\">Interactively create a package.json file</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm init [-f|--force|-y|--yes]\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>This will ask you a bunch of questions, and then write a package.json for you.</p> <p>It attempts to make reasonable guesses about what you want things to be set to, and then writes a package.json file with the options you've selected.</p> <p>If you already have a package.json file, it'll read that first, and default to the options in there.</p> <p>It is strictly additive, so it does not delete options from your package.json without a really good reason to do so.</p> <p>If you invoke it with <code>-f</code>, <code>--force</code>, <code>-y</code>, or <code>--yes</code>, it will use only defaults and not prompt you for any options.</p> <h2 id=\"configuration\" class=\"deep-link\">Configuration</h2> <h3 id=\"scope\" class=\"deep-link\">scope</h3> <ul> <li>Default: none</li> <li>Type: String</li> </ul> <p>The scope under which the new module should be created.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"https://github.com/isaacs/init-package-json\">https://github.com/isaacs/init-package-json</a></li> <li><a href=\"../files/package.json\">package.json</a></li> <li><a href=\"version\">npm-version</a></li> <li><a href=\"../misc/scope\">npm-scope</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/init\" class=\"_attribution-link\">https://docs.npmjs.com/cli/init</a>\n  </p>\n</div>\n","cli/dedupe":"<h1>npm-dedupe</h1> <h1 class=\"subtitle\">Reduce duplication</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm dedupe\nnpm ddp\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>Searches the local package tree and attempts to simplify the overall structure by moving dependencies further up the tree, where they can be more effectively shared by multiple dependent packages.</p> <p>For example, consider this dependency graph:</p> <pre>a\n+-- b &lt;-- depends on c@1.0.x\n|   `-- c@1.0.3\n`-- d &lt;-- depends on c@~1.0.9\n    `-- c@1.0.10\n</pre> <p>In this case, <code><a href=\"dedupe\">npm-dedupe</a></code> will transform the tree to:</p> <pre>a\n+-- b\n+-- d\n`-- c@1.0.10\n</pre> <p>Because of the hierarchical nature of node's module lookup, b and d will both get their dependency met by the single c package at the root level of the tree.</p> <p>The deduplication algorithm walks the tree, moving each dependency as far up in the tree as possible, even if duplicates are not found. This will result in both a flat and deduplicated tree.</p> <p>If a suitable version exists at the target location in the tree already, then it will be left untouched, but the other duplicates will be deleted.</p> <p>Arguments are ignored. Dedupe always acts on the entire tree.</p> <p>Modules</p> <p>Note that this operation transforms the dependency tree, but will never result in new modules being installed.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"ls\">npm-ls</a></li> <li><a href=\"update\">npm-update</a></li> <li><a href=\"install\">npm-install</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/dedupe\" class=\"_attribution-link\">https://docs.npmjs.com/cli/dedupe</a>\n  </p>\n</div>\n","cli/edit":"<h1>npm-edit</h1> <h1 class=\"subtitle\">Edit an installed package</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm edit &lt;pkg&gt;[@&lt;version&gt;]\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>Opens the package folder in the default editor (or whatever you've configured as the npm <code>editor</code> config -- see <code><a href=\"../misc/config\">npm-config</a></code>.)</p> <p>After it has been edited, the package is rebuilt so as to pick up any changes in compiled packages.</p> <p>For instance, you can do <code>npm install connect</code> to install connect into your package, and then <code>npm edit connect</code> to make a few changes to your locally installed copy.</p> <h2 id=\"configuration\" class=\"deep-link\">Configuration</h2> <h3 id=\"editor\" class=\"deep-link\">editor</h3> <ul> <li>Default: <code>EDITOR</code> environment variable if set, or <code>\"vi\"</code> on Posix, or <code>\"notepad\"</code> on Windows.</li> <li>Type: path</li> </ul> <p>The command to run for <code>npm edit</code> or <code>npm config edit</code>.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"../files/folders\">npm-folders</a></li> <li><a href=\"explore\">npm-explore</a></li> <li><a href=\"install\">npm-install</a></li> <li><a href=\"config\">npm-config</a></li> <li><a href=\"../misc/config\">npm-config</a></li> <li><a href=\"../files/npmrc\">npmrc</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/edit\" class=\"_attribution-link\">https://docs.npmjs.com/cli/edit</a>\n  </p>\n</div>\n","cli/install-test":"<h1 id=\"npm-install-test1----install-packages-and-run-tests\" class=\"deep-link\">npm install-test -- Install package(s) and run tests</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm install-test (with no args, in package dir)\nnpm install-test [&lt;@scope&gt;/]&lt;name&gt;\nnpm install-test [&lt;@scope&gt;/]&lt;name&gt;@&lt;tag&gt;\nnpm install-test [&lt;@scope&gt;/]&lt;name&gt;@&lt;version&gt;\nnpm install-test [&lt;@scope&gt;/]&lt;name&gt;@&lt;version range&gt;\nnpm install-test &lt;tarball file&gt;\nnpm install-test &lt;tarball url&gt;\nnpm install-test &lt;folder&gt;\n\nalias: npm it\ncommon options: [--save|--save-dev|--save-optional] [--save-exact] [--dry-run]\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>This command runs an <code>npm install</code> followed immediately by an <code>npm test</code>. It takes exactly the same arguments as <code>npm install</code>.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"install\">npm-install</a></li> <li><a href=\"test\">npm-test</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/install-test\" class=\"_attribution-link\">https://docs.npmjs.com/cli/install-test</a>\n  </p>\n</div>\n","cli/link":"<h1>npm-link</h1> <h1 class=\"subtitle\">Symlink a package folder</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm link (in package dir)\nnpm link [&lt;@scope&gt;/]&lt;pkg&gt;[@&lt;version&gt;]\n\nalias: npm ln\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>Package linking is a two-step process.</p> <p>First, <code>npm link</code> in a package folder will create a globally-installed symbolic link from <code>prefix/package-name</code> to the current folder (see <code><a href=\"../misc/config\">npm-config</a></code> for the value of <code>prefix</code>).</p> <p>Next, in some other location, <code>npm link package-name</code> will create a symlink from the local <code>node_modules</code> folder to the global symlink.</p> <p>Note that <code>package-name</code> is taken from <code>package.json</code>, not from directory name.</p> <p>The package name can be optionally prefixed with a scope. See <code><a href=\"../misc/scope\">npm-scope</a></code>. The scope must be preceded by an @-symbol and followed by a slash.</p> <p>When creating tarballs for <code>npm publish</code>, the linked packages are \"snapshotted\" to their current state by resolving the symbolic links.</p> <p>This is handy for installing your own stuff, so that you can work on it and test it iteratively without having to continually rebuild.</p> <p>For example:</p> <pre>cd ~/projects/node-redis    # go into the package directory\nnpm link                    # creates global link\ncd ~/projects/node-bloggy   # go into some other package directory.\nnpm link redis              # link-install the package\n</pre> <p>Now, any changes to ~/projects/node-redis will be reflected in ~/projects/node-bloggy/node_modules/node-redis/. Note that the link should be to the package name, not the directory name for that package.</p> <p>You may also shortcut the two steps in one. For example, to do the above use-case in a shorter way:</p> <pre>cd ~/projects/node-bloggy  # go into the dir of your main project\nnpm link ../node-redis     # link the dir of your dependency\n</pre> <p>The second line is the equivalent of doing:</p> <pre>(cd ../node-redis; npm link)\nnpm link node-redis\n</pre> <p>That is, it first creates a global link, and then links the global installation target into your project's <code>node_modules</code> folder.</p> <p>If your linked package is scoped (see <code><a href=\"../misc/scope\">npm-scope</a></code>) your link command must include that scope, e.g.</p> <pre>npm link @myorg/privatepackage\n</pre> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"../misc/developers\">npm-developers</a></li> <li><a href=\"../misc/faq\">npm-faq</a></li> <li><a href=\"../files/package.json\">package.json</a></li> <li><a href=\"install\">npm-install</a></li> <li><a href=\"../files/folders\">npm-folders</a></li> <li><a href=\"config\">npm-config</a></li> <li><a href=\"../misc/config\">npm-config</a></li> <li><a href=\"../files/npmrc\">npmrc</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/link\" class=\"_attribution-link\">https://docs.npmjs.com/cli/link</a>\n  </p>\n</div>\n","cli/install":"<h1>npm-install</h1> <h1 class=\"subtitle\">Install a package</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm install (with no args, in package dir)\nnpm install [&lt;@scope&gt;/]&lt;name&gt;\nnpm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;tag&gt;\nnpm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;version&gt;\nnpm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;version range&gt;\nnpm install &lt;tarball file&gt;\nnpm install &lt;tarball url&gt;\nnpm install &lt;folder&gt;\n\nalias: npm i\ncommon options: [-S|--save|-D|--save-dev|-O|--save-optional] [-E|--save-exact] [--dry-run]\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>This command installs a package, and any packages that it depends on. If the package has a shrinkwrap file, the installation of dependencies will be driven by that. See <a href=\"shrinkwrap\">npm-shrinkwrap</a>.</p> <p>A <code>package</code> is:</p> <ul> <li>a) a folder containing a program described by a <code><a href=\"../files/package.json\">package.json</a></code> file</li> <li>b) a gzipped tarball containing (a)</li> <li>c) a url that resolves to (b)</li> <li>d) a <code>&lt;name&gt;@&lt;version&gt;</code> that is published on the registry (see <code><a href=\"../misc/registry\">npm-registry</a></code>) with (c)</li> <li>e) a <code>&lt;name&gt;@&lt;tag&gt;</code> (see <code><a href=\"dist-tag\">npm-dist-tag</a></code>) that points to (d)</li> <li>f) a <code>&lt;name&gt;</code> that has a \"latest\" tag satisfying (e)</li> <li>g) a <code>&lt;git remote url&gt;</code> that resolves to (a)</li> </ul> <p>Even if you never publish your package, you can still get a lot of benefits of using npm if you just want to write a node program (a), and perhaps if you also want to be able to easily install it elsewhere after packing it up into a tarball (b).</p> <ul> <li> <p><code>npm install</code> (in package directory, no arguments):</p> <p>Install the dependencies in the local node_modules folder.</p> <p>In global mode (ie, with <code>-g</code> or <code>--global</code> appended to the command), it installs the current package context (ie, the current working directory) as a global package.</p> <p>By default, <code>npm install</code> will install all modules listed as dependencies in <code><a href=\"../files/package.json\">package.json</a></code>.</p> <p>With the <code>--production</code> flag (or when the <code>NODE_ENV</code> environment variable is set to <code>production</code>), npm will not install modules listed in <code>devDependencies</code>.</p> </li> <li> <p><code>npm install &lt;folder&gt;</code>:</p> <p>Install a package that is sitting in a folder on the filesystem.</p> </li> <li> <p><code>npm install &lt;tarball file&gt;</code>:</p> <p>Install a package that is sitting on the filesystem. Note: if you just want to link a dev directory into your npm root, you can do this more easily by using <code>npm link</code>.</p> <p>Example:</p> <pre>    npm install ./package.tgz\n</pre> </li> <li> <p><code>npm install &lt;tarball url&gt;</code>:</p> <p>Fetch the tarball url, and then install it. In order to distinguish between this and other options, the argument must start with \"http://\" or \"https://\"</p> <p>Example:</p> <pre>    npm install https://github.com/indexzero/forever/tarball/v0.5.6\n</pre> </li> <li> <p><code>npm install [&lt;@scope&gt;/]&lt;name&gt; [-S|--save|-D|--save-dev|-O|--save-optional]</code>:</p> <p>Do a <code>&lt;name&gt;@&lt;tag&gt;</code> install, where <code>&lt;tag&gt;</code> is the \"tag\" config. (See <code><a href=\"../misc/config\">npm-config</a></code>. The config's default value is <code>latest</code>.)</p> <p>In most cases, this will install the latest version of the module published on npm.</p> <p>Example:</p> <pre>    npm install sax\n</pre> <p><code>npm install</code> takes 3 exclusive, optional flags which save or update the package version in your main package.json:</p> <ul> <li> <p><code>-S, --save</code>: Package will appear in your <code>dependencies</code>.</p> </li> <li> <p><code>-D, --save-dev</code>: Package will appear in your <code>devDependencies</code>.</p> </li> <li> <p><code>-O, --save-optional</code>: Package will appear in your <code>optionalDependencies</code>.</p> </li> </ul> <p>When using any of the above options to save dependencies to your package.json, there is an additional, optional flag:</p> <ul> <li>\n<code>-E, --save-exact</code>: Saved dependencies will be configured with an exact version rather than using npm's default semver range operator.</li> </ul> <p>Further, if you have an <code>npm-shrinkwrap.json</code> then it will be updated as well.</p> <p><code>&lt;scope&gt;</code> is optional. The package will be downloaded from the registry associated with the specified scope. If no registry is associated with the given scope the default registry is assumed. See <code><a href=\"../misc/scope\">npm-scope</a></code>.</p> <p>Note: if you do not include the @-symbol on your scope name, npm will interpret this as a GitHub repository instead, see below. Scopes names must also be followed by a slash.</p> <p>Examples:</p> <pre>    npm install sax --save\n    npm install githubname/reponame\n    npm install @myorg/privatepackage\n    npm install node-tap --save-dev\n    npm install dtrace-provider --save-optional\n    npm install readable-stream --save --save-exact\n</pre> <p><strong>Note</strong>: If there is a file or folder named <code>&lt;name&gt;</code> in the current working directory, then it will try to install that, and only try to fetch the package by name if it is not valid.</p> </li> <li> <p><code>npm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;tag&gt;</code>:</p> <p>Install the version of the package that is referenced by the specified tag. If the tag does not exist in the registry data for that package, then this will fail.</p> <p>Example:</p> <pre>    npm install sax@latest\n    npm install @myorg/mypackage@latest\n</pre> </li> <li> <p><code>npm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;version&gt;</code>:</p> <p>Install the specified version of the package. This will fail if the version has not been published to the registry.</p> <p>Example:</p> <pre>    npm install sax@0.1.1\n    npm install @myorg/privatepackage@1.5.0\n</pre> </li> <li> <p><code>npm install [&lt;@scope&gt;/]&lt;name&gt;@&lt;version range&gt;</code>:</p> <p>Install a version of the package matching the specified version range. This will follow the same rules for resolving dependencies described in <code><a href=\"../files/package.json\">package.json</a></code>.</p> <p>Note that most version ranges must be put in quotes so that your shell will treat it as a single argument.</p> <p>Example:</p> <pre>    npm install sax@\"&gt;=0.1.0 &lt;0.2.0\"\n    npm install @myorg/privatepackage@\"&gt;=0.1.0 &lt;0.2.0\"\n</pre> </li> <li> <p><code>npm install &lt;git remote url&gt;</code>:</p> <p>Installs the package from the hosted git provider, cloning it with <code>git</code>. First it tries via the https (git with github) and if that fails, via ssh.</p> <pre>    &lt;protocol&gt;://[&lt;user&gt;[:&lt;password&gt;]@]&lt;hostname&gt;[:&lt;port&gt;][:][/]&lt;path&gt;[#&lt;commit-ish&gt;]\n</pre> <p><code>&lt;protocol&gt;</code> is one of <code>git</code>, <code>git+ssh</code>, <code>git+http</code>, <code>git+https</code>, or <code>git+file</code>. If no <code>&lt;commit-ish&gt;</code> is specified, then <code>master</code> is used.</p> <p>If the repository makes use of submodules, those submodules will be cloned as well.</p> <p>The following git environment variables are recognized by npm and will be added to the environment when running git:</p> <ul> <li><code>GIT_ASKPASS</code></li> <li><code>GIT_PROXY_COMMAND</code></li> <li><code>GIT_SSH</code></li> <li><code>GIT_SSH_COMMAND</code></li> <li><code>GIT_SSL_CAINFO</code></li> <li><code>GIT_SSL_NO_VERIFY</code></li> </ul> <p>See the git man page for details.</p> <p>Examples:</p> <pre>    npm install git+ssh://git@github.com:npm/npm.git#v1.0.27\n    npm install git+https://isaacs@github.com/npm/npm.git\n    npm install git://github.com/npm/npm.git#v1.0.27\n    GIT_SSH_COMMAND='ssh -i ~/.ssh/custom_ident' npm install git+ssh://git@github.com:npm/npm.git\n</pre> </li> <li> <p><code>npm install &lt;githubname&gt;/&lt;githubrepo&gt;[#&lt;commit-ish&gt;]</code>:</p> </li> <li> <p><code>npm install github:&lt;githubname&gt;/&lt;githubrepo&gt;[#&lt;commit-ish&gt;]</code>:</p> <p>Install the package at <code>https://github.com/githubname/githubrepo</code> by attempting to clone it using <code>git</code>.</p> <p>If you don't specify a <em>commit-ish</em> then <code>master</code> will be used.</p> <p>Examples:</p> <pre>    npm install mygithubuser/myproject\n    npm install github:mygithubuser/myproject\n</pre> </li> <li> <p><code>npm install gist:[&lt;githubname&gt;/]&lt;gistID&gt;[#&lt;commit-ish&gt;]</code>:</p> <p>Install the package at <code>https://gist.github.com/gistID</code> by attempting to clone it using <code>git</code>. The GitHub username associated with the gist is optional and will not be saved in <code>package.json</code> if <code>-S</code> or <code>--save</code> is used.</p> <p>If you don't specify a <em>commit-ish</em> then <code>master</code> will be used.</p> <p>Example:</p> <pre>    npm install gist:101a11beef\n</pre> </li> <li> <p><code>npm install bitbucket:&lt;bitbucketname&gt;/&lt;bitbucketrepo&gt;[#&lt;commit-ish&gt;]</code>:</p> <p>Install the package at <code>https://bitbucket.org/bitbucketname/bitbucketrepo</code> by attempting to clone it using <code>git</code>.</p> <p>If you don't specify a <em>commit-ish</em> then <code>master</code> will be used.</p> <p>Example:</p> <pre>    npm install bitbucket:mybitbucketuser/myproject\n</pre> </li> <li> <p><code>npm install gitlab:&lt;gitlabname&gt;/&lt;gitlabrepo&gt;[#&lt;commit-ish&gt;]</code>:</p> <p>Install the package at <code>https://gitlab.com/gitlabname/gitlabrepo</code> by attempting to clone it using <code>git</code>.</p> <p>If you don't specify a <em>commit-ish</em> then <code>master</code> will be used.</p> <p>Example:</p> <pre>    npm install gitlab:mygitlabuser/myproject\n</pre> </li> </ul> <p>You may combine multiple arguments, and even multiple types of arguments. For example:</p> <pre>npm install sax@\"&gt;=0.1.0 &lt;0.2.0\" bench supervisor\n</pre> <p>The <code>--tag</code> argument will apply to all of the specified install targets. If a tag with the given name exists, the tagged version is preferred over newer versions.</p> <p>The <code>--dry-run</code> argument will report in the usual way what the install would have done without actually installing anything.</p> <p>The <code>-f</code> or <code>--force</code> argument will force npm to fetch remote resources even if a local copy exists on disk.</p> <pre>npm install sax --force\n</pre> <p>The <code>-g</code> or <code>--global</code> argument will cause npm to install the package globally rather than locally. See <code><a href=\"../files/folders\">npm-folders</a></code>.</p> <p>The <code>--global-style</code> argument will cause npm to install the package into your local <code>node_modules</code> folder with the same layout it uses with the global <code>node_modules</code> folder. Only your direct dependencies will show in <code>node_modules</code> and everything they depend on will be flattened in their <code>node_modules</code> folders. This obviously will elminate some deduping.</p> <p>The <code>--legacy-bundling</code> argument will cause npm to install the package such that versions of npm prior to 1.4, such as the one included with node 0.8, can install the package. This eliminates all automatic deduping.</p> <p>The <code>--link</code> argument will cause npm to link global installs into the local space in some cases.</p> <p>The <code>--no-bin-links</code> argument will prevent npm from creating symlinks for any binaries the package might contain.</p> <p>The <code>--no-optional</code> argument will prevent optional dependencies from being installed.</p> <p>The <code>--no-shrinkwrap</code> argument, which will ignore an available shrinkwrap file and use the package.json instead.</p> <p>The <code>--nodedir=/path/to/node/source</code> argument will allow npm to find the node source code so that npm can compile native modules.</p> <p>The <code>--only={prod[uction]|dev[elopment]}</code> argument will cause either only <code>devDependencies</code> or only non-<code>devDependencies</code> to be installed regardless of the <code>NODE_ENV</code>.</p> <p>See <code><a href=\"../misc/config\">npm-config</a></code>. Many of the configuration params have some effect on installation, since that's most of what npm does.</p> <h2 id=\"algorithm\" class=\"deep-link\">ALGORITHM</h2> <p>To install a package, npm uses the following algorithm:</p> <pre>load the existing node_modules tree from disk\nclone the tree\nfetch the package.json and assorted metadata and add it to the clone\nwalk the clone and add any missing dependencies\n  dependencies will be added as close to the top as is possible\n  without breaking any other modules\ncompare the original tree with the cloned tree and make a list of\nactions to take to convert one to the other\nexecute all of the actions, deepest first\n  kinds of actions are install, update, remove and move\n</pre> <p>For this <code>package{dep}</code> structure: <code>A{B,C}, B{C}, C{D}</code>, this algorithm produces:</p> <pre>A\n+-- B\n+-- C\n+-- D\n</pre> <p>That is, the dependency from B to C is satisfied by the fact that A already caused C to be installed at a higher level. D is still installed at the top level because nothing conflicts with it.</p> <p>For <code>A{B,C}, B{C,D@1}, C{D@2}</code>, this algorithm produces:</p> <pre>A\n+-- B\n+-- C\n   `-- D@2\n+-- D@1\n</pre> <p>Because B's D@1 will be installed in the top level, C now has to install D@2 privately for itself.</p> <p>See <a href=\"../files/folders\">npm-folders</a> for a more detailed description of the specific folder structures that npm creates.</p> <h3 id=\"limitations-of-npms-install-algorithm\" class=\"deep-link\">Limitations of npm's Install Algorithm</h3> <p>There are some very rare and pathological edge-cases where a cycle can cause npm to try to install a never-ending tree of packages. Here is the simplest case:</p> <pre>A -&gt; B -&gt; A' -&gt; B' -&gt; A -&gt; B -&gt; A' -&gt; B' -&gt; A -&gt; ...\n</pre> <p>where <code>A</code> is some version of a package, and <code>A'</code> is a different version of the same package. Because <code>B</code> depends on a different version of <code>A</code> than the one that is already in the tree, it must install a separate copy. The same is true of <code>A'</code>, which must install <code>B'</code>. Because <code>B'</code> depends on the original version of <code>A</code>, which has been overridden, the cycle falls into infinite regress.</p> <p>To avoid this situation, npm flat-out refuses to install any <code>name@version</code> that is already present anywhere in the tree of package folder ancestors. A more correct, but more complex, solution would be to symlink the existing version into the new location. If this ever affects a real use-case, it will be investigated.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"../files/folders\">npm-folders</a></li> <li><a href=\"update\">npm-update</a></li> <li><a href=\"link\">npm-link</a></li> <li><a href=\"rebuild\">npm-rebuild</a></li> <li><a href=\"../misc/scripts\">npm-scripts</a></li> <li><a href=\"build\">npm-build</a></li> <li><a href=\"config\">npm-config</a></li> <li><a href=\"../misc/config\">npm-config</a></li> <li><a href=\"../files/npmrc\">npmrc</a></li> <li><a href=\"../misc/registry\">npm-registry</a></li> <li><a href=\"tag\">npm-tag</a></li> <li><a href=\"uninstall\">npm-uninstall</a></li> <li><a href=\"shrinkwrap\">npm-shrinkwrap</a></li> <li><a href=\"../files/package.json\">package.json</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/install\" class=\"_attribution-link\">https://docs.npmjs.com/cli/install</a>\n  </p>\n</div>\n","cli/logout":"<h1>npm-logout</h1> <h1 class=\"subtitle\">Log out of the registry</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm logout [--registry=&lt;url&gt;] [--scope=&lt;@scope&gt;]\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>When logged into a registry that supports token-based authentication, tell the server to end this token's session. This will invalidate the token everywhere you're using it, not just for the current environment.</p> <p>When logged into a legacy registry that uses username and password authentication, this will clear the credentials in your user configuration. In this case, it will <em>only</em> affect the current environment.</p> <p>If <code>--scope</code> is provided, this will find the credentials for the registry connected to that scope, if set.</p> <h2 id=\"configuration\" class=\"deep-link\">Configuration</h2> <h3 id=\"registry\" class=\"deep-link\">registry</h3> <p>Default: <a href=\"https://registry.npmjs.org/\">https://registry.npmjs.org/</a></p> <p>The base URL of the npm package registry. If <code>scope</code> is also specified, it takes precedence.</p> <h3 id=\"scope\" class=\"deep-link\">scope</h3> <p>Default: none</p> <p>If specified, the user and login credentials given will be associated with the specified scope. See <code><a href=\"../misc/scope\">npm-scope</a></code>. You can use both at the same time, e.g.</p> <pre>npm adduser --registry=http://myregistry.example.com --scope=@myco\n</pre> <p>This will set a registry for the given scope and login or create a user for that registry at the same time.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"adduser\">npm-adduser</a></li> <li><a href=\"../misc/registry\">npm-registry</a></li> <li><a href=\"config\">npm-config</a></li> <li><a href=\"../misc/config\">npm-config</a></li> <li><a href=\"../files/npmrc\">npmrc</a></li> <li><a href=\"whoami\">npm-whoami</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/logout\" class=\"_attribution-link\">https://docs.npmjs.com/cli/logout</a>\n  </p>\n</div>\n","cli/ls":"<h1>npm-ls</h1> <h1 class=\"subtitle\">List installed packages</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm ls [[&lt;@scope&gt;/]&lt;pkg&gt; ...]\n\naliases: list, la, ll\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>This command will print to stdout all the versions of packages that are installed, as well as their dependencies, in a tree-structure.</p> <p>Positional arguments are <code>name@version-range</code> identifiers, which will limit the results to only the paths to the packages named. Note that nested packages will <em>also</em> show the paths to the specified packages. For example, running <code>npm ls promzard</code> in npm's source tree will show:</p> <pre>npm@@VERSION@ /path/to/npm\n└─┬ init-package-json@0.0.4\n  └── promzard@0.1.5\n</pre> <p>It will print out extraneous, missing, and invalid packages.</p> <p>If a project specifies git urls for dependencies these are shown in parentheses after the name@version to make it easier for users to recognize potential forks of a project.</p> <p>The tree shown is the logical dependency tree, based on package dependencies, not the physical layout of your node_modules folder.</p> <p>When run as <code>ll</code> or <code>la</code>, it shows extended information by default.</p> <h2 id=\"configuration\" class=\"deep-link\">Configuration</h2> <h3 id=\"json\" class=\"deep-link\">json</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>Show information in JSON format.</p> <h3 id=\"long\" class=\"deep-link\">long</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>Show extended information.</p> <h3 id=\"parseable\" class=\"deep-link\">parseable</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>Show parseable output instead of tree view.</p> <h3 id=\"global\" class=\"deep-link\">global</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>List packages in the global install prefix instead of in the current project.</p> <h3 id=\"depth\" class=\"deep-link\">depth</h3> <ul> <li>Type: Int</li> </ul> <p>Max display depth of the dependency tree.</p> <h3 id=\"prod--production\" class=\"deep-link\">prod / production</h3> <ul> <li>Type: Boolean</li> <li>Default: false</li> </ul> <p>Display only the dependency tree for packages in <code>dependencies</code>.</p> <h3 id=\"dev\" class=\"deep-link\">dev</h3> <ul> <li>Type: Boolean</li> <li>Default: false</li> </ul> <p>Display only the dependency tree for packages in <code>devDependencies</code>.</p> <h3 id=\"only\" class=\"deep-link\">only</h3> <ul> <li>Type: String</li> </ul> <p>When \"dev\" or \"development\", is an alias to <code>dev</code>.</p> <p>When \"prod\" or \"production\", is an alias to <code>production</code>.`</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"config\">npm-config</a></li> <li><a href=\"../misc/config\">npm-config</a></li> <li><a href=\"../files/npmrc\">npmrc</a></li> <li><a href=\"../files/folders\">npm-folders</a></li> <li><a href=\"install\">npm-install</a></li> <li><a href=\"link\">npm-link</a></li> <li><a href=\"prune\">npm-prune</a></li> <li><a href=\"outdated\">npm-outdated</a></li> <li><a href=\"update\">npm-update</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/ls\" class=\"_attribution-link\">https://docs.npmjs.com/cli/ls</a>\n  </p>\n</div>\n","cli/owner":"<h1>npm-owner</h1> <h1 class=\"subtitle\">Manage package owners</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm owner add &lt;user&gt; [&lt;@scope&gt;/]&lt;pkg&gt;\nnpm owner rm &lt;user&gt; [&lt;@scope&gt;/]&lt;pkg&gt;\nnpm owner ls [&lt;@scope&gt;/]&lt;pkg&gt;\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>Manage ownership of published packages.</p> <ul> <li>ls: List all the users who have access to modify a package and push new versions. Handy when you need to know who to bug for help.</li> <li>add: Add a new user as a maintainer of a package. This user is enabled to modify metadata, publish new versions, and add other owners.</li> <li>rm: Remove a user from the package owner list. This immediately revokes their privileges.</li> </ul> <p>Note that there is only one level of access. Either you can modify a package, or you can't. Future versions may contain more fine-grained access levels, but that is not implemented at this time.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"publish\">npm-publish</a></li> <li><a href=\"../misc/registry\">npm-registry</a></li> <li><a href=\"adduser\">npm-adduser</a></li> <li><a href=\"../misc/disputes\">npm-disputes</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/owner\" class=\"_attribution-link\">https://docs.npmjs.com/cli/owner</a>\n  </p>\n</div>\n","cli/pack":"<h1>npm-pack</h1> <h1 class=\"subtitle\">Create a tarball from a package</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm pack [[&lt;@scope&gt;/]&lt;pkg&gt;...]\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>For anything that's installable (that is, a package folder, tarball, tarball url, name@tag, name@version, name, or scoped name), this command will fetch it to the cache, and then copy the tarball to the current working directory as <code>&lt;name&gt;-&lt;version&gt;.tgz</code>, and then write the filenames out to stdout.</p> <p>If the same package is specified multiple times, then the file will be overwritten the second time.</p> <p>If no arguments are supplied, then npm packs the current package folder.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"cache\">npm-cache</a></li> <li><a href=\"publish\">npm-publish</a></li> <li><a href=\"config\">npm-config</a></li> <li><a href=\"../misc/config\">npm-config</a></li> <li><a href=\"../files/npmrc\">npmrc</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/pack\" class=\"_attribution-link\">https://docs.npmjs.com/cli/pack</a>\n  </p>\n</div>\n","cli/ping":"<h1>npm-ping</h1> <h1 class=\"subtitle\">Ping npm registry</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm ping [--registry &lt;registry&gt;]\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>Ping the configured or given npm registry and verify authentication.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"config\">npm-config</a></li> <li><a href=\"../misc/config\">npm-config</a></li> <li><a href=\"../files/npmrc\">npmrc</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/ping\" class=\"_attribution-link\">https://docs.npmjs.com/cli/ping</a>\n  </p>\n</div>\n","cli/prefix":"<h1>npm-prefix</h1> <h1 class=\"subtitle\">Display prefix</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm prefix [-g]\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>Print the local prefix to standard out. This is the closest parent directory to contain a package.json file unless <code>-g</code> is also specified.</p> <p>If <code>-g</code> is specified, this will be the value of the global prefix. See <code><a href=\"../misc/config\">npm-config</a></code> for more detail.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"root\">npm-root</a></li> <li><a href=\"bin\">npm-bin</a></li> <li><a href=\"../files/folders\">npm-folders</a></li> <li><a href=\"config\">npm-config</a></li> <li><a href=\"../misc/config\">npm-config</a></li> <li><a href=\"../files/npmrc\">npmrc</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/prefix\" class=\"_attribution-link\">https://docs.npmjs.com/cli/prefix</a>\n  </p>\n</div>\n","cli/prune":"<h1>npm-prune</h1> <h1 class=\"subtitle\">Remove extraneous packages</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm prune [[&lt;@scope&gt;/]&lt;pkg&gt;...] [--production]\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>This command removes \"extraneous\" packages. If a package name is provided, then only packages matching one of the supplied names are removed.</p> <p>Extraneous packages are packages that are not listed on the parent package's dependencies list.</p> <p>If the <code>--production</code> flag is specified or the <code>NODE_ENV</code> environment variable is set to <code>production</code>, this command will remove the packages specified in your <code>devDependencies</code>. Setting <code>--production=false</code> will negate <code>NODE_ENV</code> being set to <code>production</code>.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"uninstall\">npm-uninstall</a></li> <li><a href=\"../files/folders\">npm-folders</a></li> <li><a href=\"ls\">npm-ls</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/prune\" class=\"_attribution-link\">https://docs.npmjs.com/cli/prune</a>\n  </p>\n</div>\n","cli/npm":"<h1>npm</h1> <h1 class=\"subtitle\">javascript package manager</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm &lt;command&gt; [args]\n</pre> <h2 id=\"version\" class=\"deep-link\">VERSION</h2> <p>@VERSION@</p> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>npm is the package manager for the Node JavaScript platform. It puts modules in place so that node can find them, and manages dependency conflicts intelligently.</p> <p>It is extremely configurable to support a wide variety of use cases. Most commonly, it is used to publish, discover, install, and develop node programs.</p> <p>Run <code>npm help</code> to get a list of available commands.</p> <h2 id=\"introduction\" class=\"deep-link\">INTRODUCTION</h2> <p>You probably got npm because you want to install stuff.</p> <p>Use <code>npm install blerg</code> to install the latest version of \"blerg\". Check out <code><a href=\"install\">npm-install</a></code> for more info. It can do a lot of stuff.</p> <p>Use the <code>npm search</code> command to show everything that's available. Use <code>npm ls</code> to show everything you've installed.</p> <h2 id=\"dependencies\" class=\"deep-link\">DEPENDENCIES</h2> <p>If a package references to another package with a git URL, npm depends on a preinstalled git.</p> <p>If one of the packages npm tries to install is a native node module and requires compiling of C++ Code, npm will use <a href=\"https://github.com/TooTallNate/node-gyp\">node-gyp</a> for that task. For a Unix system, <a href=\"https://github.com/TooTallNate/node-gyp\">node-gyp</a> needs Python, make and a buildchain like GCC. On Windows, Python and Microsoft Visual Studio C++ is needed. Python 3 is not supported by <a href=\"https://github.com/TooTallNate/node-gyp\">node-gyp</a>. For more information visit <a href=\"https://github.com/TooTallNate/node-gyp\">the node-gyp repository</a> and the <a href=\"https://github.com/TooTallNate/node-gyp/wiki\">node-gyp Wiki</a>.</p> <h2 id=\"directories\" class=\"deep-link\">DIRECTORIES</h2> <p>See <code><a href=\"../files/folders\">npm-folders</a></code> to learn about where npm puts stuff.</p> <p>In particular, npm has two modes of operation:</p> <ul> <li>global mode:<br> npm installs packages into the install prefix at <code>prefix/lib/node_modules</code> and bins are installed in <code>prefix/bin</code>.</li> <li>local mode:<br> npm installs packages into the current project directory, which defaults to the current working directory. Packages are installed to <code>./node_modules</code>, and bins are installed to <code>./node_modules/.bin</code>.</li> </ul> <p>Local mode is the default. Use <code>-g</code> or <code>--global</code> on any command to operate in global mode instead.</p> <h2 id=\"developer-usage\" class=\"deep-link\">DEVELOPER USAGE</h2> <p>If you're using npm to develop and publish your code, check out the following help topics:</p> <ul> <li>json: Make a package.json file. See <code><a href=\"../files/package.json\">package.json</a></code>.</li> <li>link: For linking your current working code into Node's path, so that you don't have to reinstall every time you make a change. Use <code>npm link</code> to do this.</li> <li>install: It's a good idea to install things if you don't need the symbolic link. Especially, installing other peoples code from the registry is done via <code>npm install</code>\n</li> <li>adduser: Create an account or log in. Credentials are stored in the user config file.</li> <li>publish: Use the <code>npm publish</code> command to upload your code to the registry.</li> </ul> <h2 id=\"configuration\" class=\"deep-link\">Configuration</h2> <p>npm is extremely configurable. It reads its configuration options from 5 places.</p> <ul> <li>Command line switches:<br> Set a config with <code>--key val</code>. All keys take a value, even if they are booleans (the config parser doesn't know what the options are at the time of parsing.) If no value is provided, then the option is set to boolean <code>true</code>.</li> <li>Environment Variables:<br> Set any config by prefixing the name in an environment variable with <code>npm_config_</code>. For example, <code>export npm_config_key=val</code>.</li> <li>User Configs:<br> The file at $HOME/.npmrc is an ini-formatted list of configs. If present, it is parsed. If the <code>userconfig</code> option is set in the cli or env, then that will be used instead.</li> <li>Global Configs:<br> The file found at ../etc/npmrc (from the node executable, by default this resolves to /usr/local/etc/npmrc) will be parsed if it is found. If the <code>globalconfig</code> option is set in the cli, env, or user config, then that file is parsed instead.</li> <li>Defaults:<br> npm's default configuration options are defined in lib/utils/config-defs.js. These must not be changed.</li> </ul> <p>See <code><a href=\"../misc/config\">npm-config</a></code> for much much more information.</p> <h2 id=\"contributions\" class=\"deep-link\">CONTRIBUTIONS</h2> <p>Patches welcome!</p> <ul> <li>code: Read through <code><a href=\"../misc/coding-style\">npm-coding-style</a></code> if you plan to submit code. You don't have to agree with it, but you do have to follow it.</li> <li>docs: If you find an error in the documentation, edit the appropriate markdown file in the \"doc\" folder. (Don't worry about generating the man page.)</li> </ul> <p>Contributors are listed in npm's <code>package.json</code> file. You can view them easily by doing <code>npm view npm contributors</code>.</p> <p>If you would like to contribute, but don't know what to work on, check the issues list or ask on the mailing list.</p> <ul> <li><a href=\"https://github.com/npm/npm/issues\">https://github.com/npm/npm/issues</a></li> <li><a href=\"mailto:npm-@googlegroups.com\">npm-@googlegroups.com</a></li> </ul> <h2 id=\"bugs\" class=\"deep-link\">BUGS</h2> <p>When you find issues, please report them:</p> <ul> <li>web: <a href=\"https://github.com/npm/npm/issues\">https://github.com/npm/npm/issues</a>\n</li> <li>email: <a href=\"mailto:npm-@googlegroups.com\">npm-@googlegroups.com</a>\n</li> </ul> <p>Be sure to include <em>all</em> of the output from the npm command that didn't work as expected. The <code>npm-debug.log</code> file is also helpful to provide.</p> <p>You can also look for isaacs in #node.js on irc://irc.freenode.net. He will no doubt tell you to put the output in a gist or email.</p> <h2 id=\"author\" class=\"deep-link\">AUTHOR</h2> <p><a href=\"http://blog.izs.me/\">Isaac Z. Schlueter</a> :: <a href=\"https://github.com/isaacs/\">isaacs</a> :: <a href=\"http://twitter.com/izs\">@izs</a> :: <a href=\"mailto:i@izs.me\">i@izs.me</a></p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"help\">npm-help</a></li> <li><a href=\"../misc/faq\">npm-faq</a></li> <li>README</li> <li><a href=\"../files/package.json\">package.json</a></li> <li><a href=\"install\">npm-install</a></li> <li><a href=\"config\">npm-config</a></li> <li><a href=\"../misc/config\">npm-config</a></li> <li><a href=\"../files/npmrc\">npmrc</a></li> <li><a href=\"https://docs.npmjs.com/misc/index\">npm-index</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/npm\" class=\"_attribution-link\">https://docs.npmjs.com/cli/npm</a>\n  </p>\n</div>\n","cli/outdated":"<h1>npm-outdated</h1> <h1 class=\"subtitle\">Check for outdated packages</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm outdated [[&lt;@scope&gt;/]&lt;pkg&gt; ...]\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>This command will check the registry to see if any (or, specific) installed packages are currently outdated.</p> <p>In the output:</p> <ul> <li>\n<code>wanted</code> is the maximum version of the package that satisfies the semver range specified in <code>package.json</code>. If there's no available semver range (i.e. you're running <code>npm outdated --global</code>, or the package isn't included in <code>package.json</code>), then <code>wanted</code> shows the currently-installed version.</li> <li>\n<code>latest</code> is the version of the package tagged as latest in the registry. Running <code>npm publish</code> with no special configuration will publish the package with a dist-tag of <code>latest</code>. This may or may not be the maximum version of the package, or the most-recently published version of the package, depending on how the package's developer manages the latest <a href=\"dist-tag\">dist-tag</a>.</li> <li>\n<code>location</code> is where in the dependency tree the package is located. Note that <code>npm outdated</code> defaults to a depth of 0, so unless you override that, you'll always be seeing only top-level dependencies that are outdated.</li> <li>\n<code>package type</code> (when using <code>--long</code> / <code>-l</code>) tells you whether this package is a <code>dependency</code> or a <code>devDependency</code>. Packages not included in <code>package.json</code> are always marked <code>dependencies</code>.</li> </ul> <h3 id=\"an-example\" class=\"deep-link\">An example</h3> <pre>$ npm outdated\nPackage      Current   Wanted   Latest  Location\nglob          5.0.15   5.0.15    6.0.1  test-outdated-output\nnothingness    0.0.3      git      git  test-outdated-output\nnpm            3.5.1    3.5.2    3.5.1  test-outdated-output\nlocal-dev      0.0.3   linked   linked  test-outdated-output\nonce           1.3.2    1.3.3    1.3.3  test-outdated-output</pre> <p>With these <code>dependencies</code>:</p> <pre>{\n  \"glob\": \"^5.0.15\",\n  \"nothingness\": \"github:othiym23/nothingness#master\",\n  \"npm\": \"^3.5.1\",\n  \"once\": \"^1.3.1\"\n}</pre> <p>A few things to note:</p> <ul> <li>\n<code>glob</code> requires <code>^5</code>, which prevents npm from installing <code>glob@6</code>, which is outside the semver range.</li> <li>Git dependencies will always be reinstalled, because of how they're specified. The installed committish might satisfy the dependency specifier (if it's something immutable, like a commit SHA), or it might not, so <code>npm outdated</code> and <code>npm update</code> have to fetch Git repos to check. This is why currently doing a reinstall of a Git dependency always forces a new clone and install.</li> <li>\n<code>npm@3.5.2</code> is marked as \"wanted\", but \"latest\" is <code>npm@3.5.1</code> because npm uses dist-tags to manage its <code>latest</code> and <code>next</code> release channels. <code>npm update</code> will install the <em>newest</em> version, but <code>npm install npm</code> (with no semver range) will install whatever's tagged as <code>latest</code>.</li> <li>\n<code>once</code> is just plain out of date. Reinstalling <code>node_modules</code> from scratch or running <code>npm update</code> will bring it up to spec.</li> </ul> <h2 id=\"configuration\" class=\"deep-link\">Configuration</h2> <h3 id=\"json\" class=\"deep-link\">json</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>Show information in JSON format.</p> <h3 id=\"long\" class=\"deep-link\">long</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>Show extended information.</p> <h3 id=\"parseable\" class=\"deep-link\">parseable</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>Show parseable output instead of tree view.</p> <h3 id=\"global\" class=\"deep-link\">global</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>Check packages in the global install prefix instead of in the current project.</p> <h3 id=\"depth\" class=\"deep-link\">depth</h3> <ul> <li>Default: 0</li> <li>Type: Int</li> </ul> <p>Max depth for checking dependency tree.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"update\">npm-update</a></li> <li><a href=\"dist-tag\">npm-dist-tag</a></li> <li><a href=\"../misc/registry\">npm-registry</a></li> <li><a href=\"../files/folders\">npm-folders</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/outdated\" class=\"_attribution-link\">https://docs.npmjs.com/cli/outdated</a>\n  </p>\n</div>\n","cli/publish":"<h1>npm-publish</h1> <h1 class=\"subtitle\">Publish a package</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm publish [&lt;tarball&gt;|&lt;folder&gt;] [--tag &lt;tag&gt;] [--access &lt;public|restricted&gt;]\n\nPublishes '.' if no argument supplied\nSets tag 'latest' if no --tag specified\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>Publishes a package to the registry so that it can be installed by name. All files in the package directory are included if no local <code>.gitignore</code> or <code>.npmignore</code> file exists. If both files exist and a file is ignored by <code>.gitignore</code> but not by <code>.npmignore</code> then it will be included. See <code><a href=\"../misc/developers\">npm-developers</a></code> for full details on what's included in the published package, as well as details on how the package is built.</p> <p>By default npm will publish to the public registry. This can be overridden by specifying a different default registry or using a <code><a href=\"../misc/scope\">npm-scope</a></code> in the name (see <code><a href=\"../files/package.json\">package.json</a></code>).</p> <ul> <li> <p><code>&lt;folder&gt;</code>: A folder containing a package.json file</p> </li> <li> <p><code>&lt;tarball&gt;</code>: A url or file path to a gzipped tar archive containing a single folder with a package.json file inside.</p> </li> <li> <p><code>[--tag &lt;tag&gt;]</code> Registers the published package with the given tag, such that <code>npm install &lt;name&gt;@&lt;tag&gt;</code> will install this version. By default, <code>npm publish</code> updates and <code>npm install</code> installs the <code>latest</code> tag. See <code><a href=\"dist-tag\">npm-dist-tag</a></code> for details about tags.</p> </li> <li> <p><code>[--access &lt;public|restricted&gt;]</code> Tells the registry whether this package should be published as public or restricted. Only applies to scoped packages, which default to <code>restricted</code>. If you don't have a paid account, you must publish with <code>--access public</code> to publish scoped packages.</p> </li> </ul> <p>Fails if the package name and version combination already exists in the specified registry.</p> <p>Once a package is published with a given name and version, that specific name and version combination can never be used again, even if it is removed with <a href=\"unpublish\">npm-unpublish</a>.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"../misc/registry\">npm-registry</a></li> <li><a href=\"../misc/scope\">npm-scope</a></li> <li><a href=\"adduser\">npm-adduser</a></li> <li><a href=\"owner\">npm-owner</a></li> <li><a href=\"deprecate\">npm-deprecate</a></li> <li><a href=\"tag\">npm-tag</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/publish\" class=\"_attribution-link\">https://docs.npmjs.com/cli/publish</a>\n  </p>\n</div>\n","cli/rebuild":"<h1>npm-rebuild</h1> <h1 class=\"subtitle\">Rebuild a package</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm rebuild [[&lt;@scope&gt;/&lt;name&gt;]...]\n\nalias: npm rb\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>This command runs the <code>npm build</code> command on the matched folders. This is useful when you install a new version of node, and must recompile all your C++ addons with the new binary.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"build\">npm-build</a></li> <li><a href=\"install\">npm-install</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/rebuild\" class=\"_attribution-link\">https://docs.npmjs.com/cli/rebuild</a>\n  </p>\n</div>\n","cli/repo":"<h1>npm-repo</h1> <h1 class=\"subtitle\">Open package repository page in the browser</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm repo [&lt;pkg&gt;]\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>This command tries to guess at the likely location of a package's repository URL, and then tries to open it using the <code>--browser</code> config param. If no package name is provided, it will search for a <code>package.json</code> in the current folder and use the <code>name</code> property.</p> <h2 id=\"configuration\" class=\"deep-link\">Configuration</h2> <h3 id=\"browser\" class=\"deep-link\">browser</h3> <ul> <li>Default: OS X: <code>\"open\"</code>, Windows: <code>\"start\"</code>, Others: <code>\"xdg-open\"</code>\n</li> <li>Type: String</li> </ul> <p>The browser that is called by the <code>npm repo</code> command to open websites.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"docs\">npm-docs</a></li> <li><a href=\"config\">npm-config</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/repo\" class=\"_attribution-link\">https://docs.npmjs.com/cli/repo</a>\n  </p>\n</div>\n","cli/run-script":"<h1>npm-run-script</h1> <h1 class=\"subtitle\">Run arbitrary package scripts</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm run-script &lt;command&gt; [-- &lt;args&gt;...]\n\nalias: npm run\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>This runs an arbitrary command from a package's <code>\"scripts\"</code> object. If no <code>\"command\"</code> is provided, it will list the available scripts. <code>run[-script]</code> is used by the test, start, restart, and stop commands, but can be called directly, as well. When the scripts in the package are printed out, they're separated into lifecycle (test, start, restart) and directly-run scripts.</p> <p>As of <a href=\"http://blog.npmjs.org/post/98131109725/npm-2-0-0\"><code>npm@2.0.0</code></a>, you can use custom arguments when executing scripts. The special option <code>--</code> is used by <a href=\"http://goo.gl/KxMmtG\">getopt</a> to delimit the end of the options. npm will pass all the arguments after the <code>--</code> directly to your script:</p> <pre>npm run test -- --grep=\"pattern\"\n</pre> <p>The arguments will only be passed to the script specified after <code>npm run</code> and not to any pre or post script.</p> <p>The <code>env</code> script is a special built-in command that can be used to list environment variables that will be available to the script at runtime. If an \"env\" command is defined in your package it will take precedence over the built-in.</p> <p>In addition to the shell's pre-existing <code>PATH</code>, <code>npm run</code> adds <code>node_modules/.bin</code> to the <code>PATH</code> provided to scripts. Any binaries provided by locally-installed dependencies can be used without the <code>node_modules/.bin</code> prefix. For example, if there is a <code>devDependency</code> on <code>tap</code> in your package, you should write:</p> <pre>\"scripts\": {\"test\": \"tap test/\\*.js\"}\n</pre> <p>instead of <code>\"scripts\": {\"test\": \"node_modules/.bin/tap test/\\*.js\"}</code> to run your tests.</p> <p>If you try to run a script without having a <code>node_modules</code> directory and it fails, you will be given a warning to run <code>npm install</code>, just in case you've forgotten.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"../misc/scripts\">npm-scripts</a></li> <li><a href=\"test\">npm-test</a></li> <li><a href=\"start\">npm-start</a></li> <li><a href=\"restart\">npm-restart</a></li> <li><a href=\"stop\">npm-stop</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/run-script\" class=\"_attribution-link\">https://docs.npmjs.com/cli/run-script</a>\n  </p>\n</div>\n","cli/restart":"<h1>npm-restart</h1> <h1 class=\"subtitle\">Restart a package</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm restart [-- &lt;args&gt;]\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>This restarts a package.</p> <p>This runs a package's \"stop\", \"restart\", and \"start\" scripts, and associated pre- and post- scripts, in the order given below:</p> <ol> <li>prerestart</li> <li>prestop</li> <li>stop</li> <li>poststop</li> <li>restart</li> <li>prestart</li> <li>start</li> <li>poststart</li> <li>postrestart</li> </ol> <h2 id=\"note\" class=\"deep-link\">NOTE</h2> <p>Note that the \"restart\" script is run <strong>in addition to</strong> the \"stop\" and \"start\" scripts, not instead of them.</p> <p>This is the behavior as of <code>npm</code> major version 2. A change in this behavior will be accompanied by an increase in major version number</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"run-script\">npm-run-script</a></li> <li><a href=\"../misc/scripts\">npm-scripts</a></li> <li><a href=\"test\">npm-test</a></li> <li><a href=\"start\">npm-start</a></li> <li><a href=\"stop\">npm-stop</a></li> <li><a href=\"../undefined/restart\">npm-restart</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/restart\" class=\"_attribution-link\">https://docs.npmjs.com/cli/restart</a>\n  </p>\n</div>\n","cli/root":"<h1>npm-root</h1> <h1 class=\"subtitle\">Display npm root</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm root [-g]\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>Print the effective <code>node_modules</code> folder to standard out.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"prefix\">npm-prefix</a></li> <li><a href=\"bin\">npm-bin</a></li> <li><a href=\"../files/folders\">npm-folders</a></li> <li><a href=\"config\">npm-config</a></li> <li><a href=\"../misc/config\">npm-config</a></li> <li><a href=\"../files/npmrc\">npmrc</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/root\" class=\"_attribution-link\">https://docs.npmjs.com/cli/root</a>\n  </p>\n</div>\n","cli/search":"<h1>npm-search</h1> <h1 class=\"subtitle\">Search for packages</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm search [-l|--long] [search terms ...]\n\naliases: s, se\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>Search the registry for packages matching the search terms.</p> <p>If a term starts with <code>/</code>, then it's interpreted as a regular expression. A trailing <code>/</code> will be ignored in this case. (Note that many regular expression characters must be escaped or quoted in most shells.)</p> <h2 id=\"configuration\" class=\"deep-link\">Configuration</h2> <h3 id=\"long\" class=\"deep-link\">long</h3> <ul> <li>Default: false</li> <li>Type: Boolean</li> </ul> <p>Display full package descriptions and other long text across multiple lines. When disabled (default) search results are truncated to fit neatly on a single line. Modules with extremely long names will fall on multiple lines.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"../misc/registry\">npm-registry</a></li> <li><a href=\"config\">npm-config</a></li> <li><a href=\"../misc/config\">npm-config</a></li> <li><a href=\"../files/npmrc\">npmrc</a></li> <li><a href=\"view\">npm-view</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/search\" class=\"_attribution-link\">https://docs.npmjs.com/cli/search</a>\n  </p>\n</div>\n","cli/star":"<h1>npm-star</h1> <h1 class=\"subtitle\">Mark your favorite packages</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm star [&lt;pkg&gt;...]\nnpm unstar [&lt;pkg&gt;...]\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>\"Starring\" a package means that you have some interest in it. It's a vaguely positive way to show that you care.</p> <p>\"Unstarring\" is the same thing, but in reverse.</p> <p>It's a boolean thing. Starring repeatedly has no additional effect.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"view\">npm-view</a></li> <li><a href=\"whoami\">npm-whoami</a></li> <li><a href=\"adduser\">npm-adduser</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/star\" class=\"_attribution-link\">https://docs.npmjs.com/cli/star</a>\n  </p>\n</div>\n","cli/stars":"<h1>npm-stars</h1> <h1 class=\"subtitle\">View packages marked as favorites</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm stars [&lt;user&gt;]\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>If you have starred a lot of neat things and want to find them again quickly this command lets you do just that.</p> <p>You may also want to see your friend's favorite packages, in this case you will most certainly enjoy this command.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"star\">npm-star</a></li> <li><a href=\"view\">npm-view</a></li> <li><a href=\"whoami\">npm-whoami</a></li> <li><a href=\"adduser\">npm-adduser</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/stars\" class=\"_attribution-link\">https://docs.npmjs.com/cli/stars</a>\n  </p>\n</div>\n","cli/shrinkwrap":"<h1>npm-shrinkwrap</h1> <h1 class=\"subtitle\">Lock down dependency versions</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm shrinkwrap\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>This command locks down the versions of a package's dependencies so that you can control exactly which versions of each dependency will be used when your package is installed. The <code>package.json</code> file is still required if you want to use <code>npm install</code>.</p> <p>By default, <code>npm install</code> recursively installs the target's dependencies (as specified in <code>package.json</code>), choosing the latest available version that satisfies the dependency's semver pattern. In some situations, particularly when shipping software where each change is tightly managed, it's desirable to fully specify each version of each dependency recursively so that subsequent builds and deploys do not inadvertently pick up newer versions of a dependency that satisfy the semver pattern. Specifying specific semver patterns in each dependency's <code>package.json</code> would facilitate this, but that's not always possible or desirable, as when another author owns the npm package. It's also possible to check dependencies directly into source control, but that may be undesirable for other reasons.</p> <p>As an example, consider package A:</p> <pre>{\n  \"name\": \"A\",\n  \"version\": \"0.1.0\",\n  \"dependencies\": {\n    \"B\": \"&lt;0.1.0\"\n  }\n}\n</pre> <p>package B:</p> <pre>{\n  \"name\": \"B\",\n  \"version\": \"0.0.1\",\n  \"dependencies\": {\n    \"C\": \"&lt;0.1.0\"\n  }\n}\n</pre> <p>and package C:</p> <pre>{\n  \"name\": \"C\",\n  \"version\": \"0.0.1\"\n}\n</pre> <p>If these are the only versions of A, B, and C available in the registry, then a normal <code>npm install A</code> will install:</p> <pre>A@0.1.0\n`-- B@0.0.1\n    `-- C@0.0.1\n</pre> <p>However, if B@0.0.2 is published, then a fresh <code>npm install A</code> will install:</p> <pre>A@0.1.0\n`-- B@0.0.2\n    `-- C@0.0.1\n</pre> <p>assuming the new version did not modify B's dependencies. Of course, the new version of B could include a new version of C and any number of new dependencies. If such changes are undesirable, the author of A could specify a dependency on B@0.0.1. However, if A's author and B's author are not the same person, there's no way for A's author to say that he or she does not want to pull in newly published versions of C when B hasn't changed at all.</p> <p>In this case, A's author can run</p> <pre>npm shrinkwrap\n</pre> <p>This generates <code>npm-shrinkwrap.json</code>, which will look something like this:</p> <pre>{\n  \"name\": \"A\",\n  \"version\": \"1.1.0\",\n  \"dependencies\": {\n    \"B\": {\n      \"version\": \"1.0.1\",\n      \"from\": \"B@^1.0.0\",\n      \"resolved\": \"https://registry.npmjs.org/B/-/B-1.0.1.tgz\",\n      \"dependencies\": {\n        \"C\": {\n          \"version\": \"1.0.1\",\n          \"from\": \"org/C#v1.0.1\",\n          \"resolved\": \"git://github.com/org/C.git#5c380ae319fc4efe9e7f2d9c78b0faa588fd99b4\"\n        }\n      }\n    }\n  }\n}\n</pre> <p>The shrinkwrap command has locked down the dependencies based on what's currently installed in <code>node_modules</code>. The installation behavior is changed to:</p> <ol> <li> <p>The module tree described by the shrinkwrap is reproduced. This means reproducing the structure described in the file, using the specific files referenced in \"resolved\" if available, falling back to normal package resolution using \"version\" if one isn't.</p> </li> <li> <p>The tree is walked and any missing dependencies are installed in the usual fashion.</p> </li> </ol> <h3 id=\"using-shrinkwrapped-packages\" class=\"deep-link\">Using shrinkwrapped packages</h3> <p>Using a shrinkwrapped package is no different than using any other package: you can <code>npm install</code> it by hand, or add a dependency to your <code>package.json</code> file and <code>npm install</code> it.</p> <h3 id=\"building-shrinkwrapped-packages\" class=\"deep-link\">Building shrinkwrapped packages</h3> <p>To shrinkwrap an existing package:</p> <ol> <li>Run <code>npm install</code> in the package root to install the current versions of all dependencies.</li> <li>Validate that the package works as expected with these versions.</li> <li>Run <code>npm shrinkwrap</code>, add <code>npm-shrinkwrap.json</code> to git, and publish your package.</li> </ol> <p>To add or update a dependency in a shrinkwrapped package:</p> <ol> <li>Run <code>npm install</code> in the package root to install the current versions of all dependencies.</li> <li>Add or update dependencies. <code>npm install --save</code> each new or updated package individually to update the <code>package.json</code> and the shrinkwrap. Note that they must be explicitly named in order to be installed: running <code>npm install</code> with no arguments will merely reproduce the existing shrinkwrap.</li> <li>Validate that the package works as expected with the new dependencies.</li> <li>Commit the new <code>npm-shrinkwrap.json</code>, and publish your package.</li> </ol> <p>You can use <a href=\"outdated\">npm-outdated</a> to view dependencies with newer versions available.</p> <h3 id=\"other-notes\" class=\"deep-link\">Other Notes</h3> <p>A shrinkwrap file must be consistent with the package's <code>package.json</code> file. <code>npm shrinkwrap</code> will fail if required dependencies are not already installed, since that would result in a shrinkwrap that wouldn't actually work. Similarly, the command will fail if there are extraneous packages (not referenced by <code>package.json</code>), since that would indicate that <code>package.json</code> is not correct.</p> <p>Since <code>npm shrinkwrap</code> is intended to lock down your dependencies for production use, <code>devDependencies</code> will not be included unless you explicitly set the <code>--dev</code> flag when you run <code>npm shrinkwrap</code>. If installed <code>devDependencies</code> are excluded, then npm will print a warning. If you want them to be installed with your module by default, please consider adding them to <code>dependencies</code> instead.</p> <p>If shrinkwrapped package A depends on shrinkwrapped package B, B's shrinkwrap will not be used as part of the installation of A. However, because A's shrinkwrap is constructed from a valid installation of B and recursively specifies all dependencies, the contents of B's shrinkwrap will implicitly be included in A's shrinkwrap.</p> <h3 id=\"caveats\" class=\"deep-link\">Caveats</h3> <p>If you wish to lock down the specific bytes included in a package, for example to have 100% confidence in being able to reproduce a deployment or build, then you ought to check your dependencies into source control, or pursue some other mechanism that can verify contents rather than versions.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"install\">npm-install</a></li> <li><a href=\"../files/package.json\">package.json</a></li> <li><a href=\"ls\">npm-ls</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/shrinkwrap\" class=\"_attribution-link\">https://docs.npmjs.com/cli/shrinkwrap</a>\n  </p>\n</div>\n","cli/start":"<h1>npm-start</h1> <h1 class=\"subtitle\">Start a package</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm start [-- &lt;args&gt;]\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>This runs an arbitrary command specified in the package's <code>\"start\"</code> property of its <code>\"scripts\"</code> object. If no <code>\"start\"</code> property is specified on the <code>\"scripts\"</code> object, it will run <code>node server.js</code>.</p> <p>As of <a href=\"http://blog.npmjs.org/post/98131109725/npm-2-0-0\"><code>npm@2.0.0</code></a>, you can use custom arguments when executing scripts. Refer to <a href=\"run-script\">npm-run-script</a> for more details.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"run-script\">npm-run-script</a></li> <li><a href=\"../misc/scripts\">npm-scripts</a></li> <li><a href=\"test\">npm-test</a></li> <li><a href=\"restart\">npm-restart</a></li> <li><a href=\"stop\">npm-stop</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/start\" class=\"_attribution-link\">https://docs.npmjs.com/cli/start</a>\n  </p>\n</div>\n","cli/tag":"<h1>npm-tag</h1> <h1 class=\"subtitle\">Tag a published version</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>[DEPRECATED] npm tag &lt;name&gt;@&lt;version&gt; [&lt;tag&gt;]\nSee `dist-tag`\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>THIS COMMAND IS DEPRECATED. See <a href=\"dist-tag\">npm-dist-tag</a> for details.</p> <p>Tags the specified version of the package with the specified tag, or the <code>--tag</code> config if not specified.</p> <p>A tag can be used when installing packages as a reference to a version instead of using a specific version number:</p> <pre>npm install &lt;name&gt;@&lt;tag&gt;\n</pre> <p>When installing dependencies, a preferred tagged version may be specified:</p> <pre>npm install --tag &lt;tag&gt;\n</pre> <p>This also applies to <code>npm dedupe</code>.</p> <p>Publishing a package always sets the \"latest\" tag to the published version.</p> <h2 id=\"purpose\" class=\"deep-link\">PURPOSE</h2> <p>Tags can be used to provide an alias instead of version numbers. For example, <code>npm</code> currently uses the tag \"next\" to identify the upcoming version, and the tag \"latest\" to identify the current version.</p> <p>A project might choose to have multiple streams of development, e.g., \"stable\", \"canary\".</p> <h2 id=\"caveats\" class=\"deep-link\">CAVEATS</h2> <p>Tags must share a namespace with version numbers, because they are specified in the same slot: <code>npm install &lt;pkg&gt;@&lt;version&gt;</code> vs <code>npm install &lt;pkg&gt;@&lt;tag&gt;</code>.</p> <p>Tags that can be interpreted as valid semver ranges will be rejected. For example, <code>v1.4</code> cannot be used as a tag, because it is interpreted by semver as <code>&gt;=1.4.0 &lt;1.5.0</code>. See <a href=\"https://github.com/npm/npm/issues/6082\">https://github.com/npm/npm/issues/6082</a>.</p> <p>The simplest way to avoid semver problems with tags is to use tags that do not begin with a number or the letter <code>v</code>.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"publish\">npm-publish</a></li> <li><a href=\"install\">npm-install</a></li> <li><a href=\"dedupe\">npm-dedupe</a></li> <li><a href=\"../misc/registry\">npm-registry</a></li> <li><a href=\"config\">npm-config</a></li> <li><a href=\"../misc/config\">npm-config</a></li> <li><a href=\"../undefined/tag\">npm-tag</a></li> <li><a href=\"../files/npmrc\">npmrc</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/tag\" class=\"_attribution-link\">https://docs.npmjs.com/cli/tag</a>\n  </p>\n</div>\n","cli/uninstall":"<h1>npm-uninstall</h1> <h1 class=\"subtitle\">Remove a package</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm uninstall [&lt;@scope&gt;/]&lt;pkg&gt;[@&lt;version&gt;]... [-S|--save|-D|--save-dev|-O|--save-optional]\n\naliases: remove, rm, r, un, unlink\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>This uninstalls a package, completely removing everything npm installed on its behalf.</p> <p>Example:</p> <pre>npm uninstall sax\n</pre> <p>In global mode (ie, with <code>-g</code> or <code>--global</code> appended to the command), it uninstalls the current package context as a global package.</p> <p><code>npm uninstall</code> takes 3 exclusive, optional flags which save or update the package version in your main package.json:</p> <ul> <li> <p><code>-S, --save</code>: Package will be removed from your <code>dependencies</code>.</p> </li> <li> <p><code>-D, --save-dev</code>: Package will be removed from your <code>devDependencies</code>.</p> </li> <li> <p><code>-O, --save-optional</code>: Package will be removed from your <code>optionalDependencies</code>.</p> </li> </ul> <p>Further, if you have an <code>npm-shrinkwrap.json</code> then it will be updated as well.</p> <p>Scope is optional and follows the usual rules for <code><a href=\"../misc/scope\">npm-scope</a></code>.</p> <p>Examples:</p> <pre>npm uninstall sax --save\nnpm uninstall @myorg/privatepackage --save\nnpm uninstall node-tap --save-dev\nnpm uninstall dtrace-provider --save-optional\n</pre> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"prune\">npm-prune</a></li> <li><a href=\"install\">npm-install</a></li> <li><a href=\"../files/folders\">npm-folders</a></li> <li><a href=\"config\">npm-config</a></li> <li><a href=\"../misc/config\">npm-config</a></li> <li><a href=\"../files/npmrc\">npmrc</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/uninstall\" class=\"_attribution-link\">https://docs.npmjs.com/cli/uninstall</a>\n  </p>\n</div>\n","cli/update":"<h1>npm-update</h1> <h1 class=\"subtitle\">Update a package</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm update [-g] [&lt;pkg&gt;...]\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>This command will update all the packages listed to the latest version (specified by the <code>tag</code> config), respecting semver.</p> <p>It will also install missing packages. As with all commands that install packages, the <code>--dev</code> flag will cause <code>devDependencies</code> to be processed as well.</p> <p>If the <code>-g</code> flag is specified, this command will update globally installed packages.</p> <p>If no package name is specified, all packages in the specified location (global or local) will be updated.</p> <p>As of <code>npm@2.6.1</code>, the <code>npm update</code> will only inspect top-level packages. Prior versions of <code>npm</code> would also recursively inspect all dependencies. To get the old behavior, use <code>npm --depth Infinity update</code>, but be warned that simultaneous asynchronous update of all packages, including <code>npm</code> itself and packages that <code>npm</code> depends on, often causes problems up to and including the uninstallation of <code>npm</code> itself.</p> <p>To restore a missing <code>npm</code>, use the command:</p> <pre>curl -L https://npmjs.com/install.sh | sh</pre> <h2 id=\"examples\" class=\"deep-link\">EXAMPLES</h2> <p>IMPORTANT VERSION NOTE: these examples assume <code>npm@2.6.1</code> or later. For older versions of <code>npm</code>, you must specify <code>--depth 0</code> to get the behavior described below.</p> <p>For the examples below, assume that the current package is <code>app</code> and it depends on dependencies, <code>dep1</code> (<code>dep2</code>, .. etc.). The published versions of <code>dep1</code> are:</p> <pre>{\n  \"dist-tags\": { \"latest\": \"1.2.2\" },\n  \"versions\": {\n    \"1.2.2\",\n    \"1.2.1\",\n    \"1.2.0\",\n    \"1.1.2\",\n    \"1.1.1\",\n    \"1.0.0\",\n    \"0.4.1\",\n    \"0.4.0\",\n    \"0.2.0\"\n  }\n}</pre> <h3 id=\"caret-dependencies\" class=\"deep-link\">Caret Dependencies</h3> <p>If <code>app</code>'s <code>package.json</code> contains:</p> <pre>\"dependencies\": {\n  \"dep1\": \"^1.1.1\"\n}</pre> <p>Then <code>npm update</code> will install <code>dep1@1.2.2</code>, because <code>1.2.2</code> is <code>latest</code> and <code>1.2.2</code> satisfies <code>^1.1.1</code>.</p> <h3 id=\"tilde-dependencies\" class=\"deep-link\">Tilde Dependencies</h3> <p>However, if <code>app</code>'s <code>package.json</code> contains:</p> <pre>\"dependencies\": {\n  \"dep1\": \"~1.1.1\"\n}</pre> <p>In this case, running <code>npm update</code> will install <code>dep1@1.1.2</code>. Even though the <code>latest</code> tag points to <code>1.2.2</code>, this version does not satisfy <code>~1.1.1</code>, which is equivalent to <code>&gt;=1.1.1 &lt;1.2.0</code>. So the highest-sorting version that satisfies <code>~1.1.1</code> is used, which is <code>1.1.2</code>.</p> <h3 id=\"caret-dependencies-below-100\" class=\"deep-link\">Caret Dependencies below 1.0.0</h3> <p>Suppose <code>app</code> has a caret dependency on a version below <code>1.0.0</code>, for example:</p> <pre>\"dependencies\": {\n  \"dep1\": \"^0.2.0\"\n}</pre> <p><code>npm update</code> will install <code>dep1@0.2.0</code>, because there are no other versions which satisfy <code>^0.2.0</code>.</p> <p>If the dependence were on <code>^0.4.0</code>:</p> <pre>\"dependencies\": {\n  \"dep1\": \"^0.4.0\"\n}</pre> <p>Then <code>npm update</code> will install <code>dep1@0.4.1</code>, because that is the highest-sorting version that satisfies <code>^0.4.0</code> (<code>&gt;= 0.4.0 &lt;0.5.0</code>)</p> <h3 id=\"recording-updates-with---save\" class=\"deep-link\">Recording Updates with <code>--save</code>\n</h3> <p>When you want to update a package and save the new version as the minimum required dependency in <code>package.json</code>, you can use <code>npm update -S</code> or <code>npm update --save</code>. For example if <code>package.json</code> contains:</p> <pre>\"dependencies\": {\n  \"dep1\": \"^1.1.1\"\n}</pre> <p>Then <code>npm update --save</code> will install <code>dep1@1.2.2</code> (i.e., <code>latest</code>), and <code>package.json</code> will be modified:</p> <pre>\"dependencies\": {\n  \"dep1\": \"^1.2.2\"\n}</pre> <p>Note that <code>npm</code> will only write an updated version to <code>package.json</code> if it installs a new package.</p> <h3 id=\"updating-globally-installed-packages\" class=\"deep-link\">Updating Globally-Installed Packages</h3> <p><code>npm update -g</code> will apply the <code>update</code> action to each globally installed package that is <code>outdated</code> -- that is, has a version that is different from <code>latest</code>.</p> <p>NOTE: If a package has been upgraded to a version newer than <code>latest</code>, it will be <em>downgraded</em>.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"install\">npm-install</a></li> <li><a href=\"outdated\">npm-outdated</a></li> <li><a href=\"shrinkwrap\">npm-shrinkwrap</a></li> <li><a href=\"../misc/registry\">npm-registry</a></li> <li><a href=\"../files/folders\">npm-folders</a></li> <li><a href=\"ls\">npm-ls</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/update\" class=\"_attribution-link\">https://docs.npmjs.com/cli/update</a>\n  </p>\n</div>\n","cli/stop":"<h1>npm-stop</h1> <h1 class=\"subtitle\">Stop a package</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm stop [-- &lt;args&gt;]\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>This runs a package's \"stop\" script, if one was provided.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"run-script\">npm-run-script</a></li> <li><a href=\"../misc/scripts\">npm-scripts</a></li> <li><a href=\"test\">npm-test</a></li> <li><a href=\"start\">npm-start</a></li> <li><a href=\"restart\">npm-restart</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/stop\" class=\"_attribution-link\">https://docs.npmjs.com/cli/stop</a>\n  </p>\n</div>\n","cli/team":"<h1>npm-team</h1> <h1 class=\"subtitle\">Manage organization teams and team memberships</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm team create &lt;scope:team&gt;\nnpm team destroy &lt;scope:team&gt;\n\nnpm team add &lt;scope:team&gt; &lt;user&gt;\nnpm team rm &lt;scope:team&gt; &lt;user&gt;\n\nnpm team ls &lt;scope&gt;|&lt;scope:team&gt;\n\nnpm team edit &lt;scope:team&gt;\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>Used to manage teams in organizations, and change team memberships. Does not handle permissions for packages.</p> <p>Teams must always be fully qualified with the organization/scope they belong to when operating on them, separated by a colon (<code>:</code>). That is, if you have a <code>developers</code> team on a <code>foo</code> organization, you must always refer to that team as <code>foo:developers</code> in these commands.</p> <ul> <li> <p>create / destroy: Create a new team, or destroy an existing one.</p> </li> <li> <p>add / rm: Add a user to an existing team, or remove a user from a team they belong to.</p> </li> <li> <p>ls: If performed on an organization name, will return a list of existing teams under that organization. If performed on a team, it will instead return a list of all users belonging to that particular team.</p> </li> </ul> <h2 id=\"details\" class=\"deep-link\">DETAILS</h2> <p><code>npm team</code> always operates directly on the current registry, configurable from the command line using <code>--registry=&lt;registry url&gt;</code>.</p> <p>In order to create teams and manage team membership, you must be a <em>team admin</em> under the given organization. Listing teams and team memberships may be done by any member of the organizations.</p> <p>Organization creation and management of team admins and <em>organization</em> members is done through the website, not the npm CLI.</p> <p>To use teams to manage permissions on packages belonging to your organization, use the <code>npm access</code> command to grant or revoke the appropriate permissions.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"access\">npm-access</a></li> <li><a href=\"../misc/registry\">npm-registry</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/team\" class=\"_attribution-link\">https://docs.npmjs.com/cli/team</a>\n  </p>\n</div>\n","cli/test":"<h1>npm-test</h1> <h1 class=\"subtitle\">Test a package</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>  npm test [-- &lt;args&gt;]\n  npm tst [-- &lt;args&gt;]\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>This runs a package's \"test\" script, if one was provided.</p> <p>To run tests as a condition of installation, set the <code>npat</code> config to true.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"run-script\">npm-run-script</a></li> <li><a href=\"../misc/scripts\">npm-scripts</a></li> <li><a href=\"start\">npm-start</a></li> <li><a href=\"restart\">npm-restart</a></li> <li><a href=\"stop\">npm-stop</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/test\" class=\"_attribution-link\">https://docs.npmjs.com/cli/test</a>\n  </p>\n</div>\n","cli/unpublish":"<h1>npm-unpublish</h1> <h1 class=\"subtitle\">Remove a package from the registry</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm unpublish [&lt;@scope&gt;/]&lt;pkg&gt;[@&lt;version&gt;]\n</pre> <h2 id=\"warning\" class=\"deep-link\">WARNING</h2> <p><strong>It is generally considered bad behavior to remove versions of a library that others are depending on!</strong></p> <p>Consider using the <code>deprecate</code> command instead, if your intent is to encourage users to upgrade.</p> <p>There is plenty of room on the registry.</p> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>This removes a package version from the registry, deleting its entry and removing the tarball.</p> <p>If no version is specified, or if all versions are removed then the root package entry is removed from the registry entirely.</p> <p>Even if a package version is unpublished, that specific name and version combination can never be reused. In order to publish the package again, a new version number must be used.</p> <p>The scope is optional and follows the usual rules for <code><a href=\"../misc/scope\">npm-scope</a></code>.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"deprecate\">npm-deprecate</a></li> <li><a href=\"publish\">npm-publish</a></li> <li><a href=\"../misc/registry\">npm-registry</a></li> <li><a href=\"adduser\">npm-adduser</a></li> <li><a href=\"owner\">npm-owner</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/unpublish\" class=\"_attribution-link\">https://docs.npmjs.com/cli/unpublish</a>\n  </p>\n</div>\n","cli/view":"<h1>npm-view</h1> <h1 class=\"subtitle\">View registry info</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm view [&lt;@scope&gt;/]&lt;name&gt;[@&lt;version&gt;] [&lt;field&gt;[.&lt;subfield&gt;]...]\n\naliases: info, show, v\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>This command shows data about a package and prints it to the stream referenced by the <code>outfd</code> config, which defaults to stdout.</p> <p>To show the package registry entry for the <code>connect</code> package, you can do this:</p> <pre>npm view connect\n</pre> <p>The default version is \"latest\" if unspecified.</p> <p>Field names can be specified after the package descriptor. For example, to show the dependencies of the <code>ronn</code> package at version 0.3.5, you could do the following:</p> <pre>npm view ronn@0.3.5 dependencies\n</pre> <p>You can view child fields by separating them with a period. To view the git repository URL for the latest version of npm, you could do this:</p> <pre>npm view npm repository.url\n</pre> <p>This makes it easy to view information about a dependency with a bit of shell scripting. For example, to view all the data about the version of opts that ronn depends on, you can do this:</p> <pre>npm view opts@$(npm view ronn dependencies.opts)\n</pre> <p>For fields that are arrays, requesting a non-numeric field will return all of the values from the objects in the list. For example, to get all the contributor names for the \"express\" project, you can do this:</p> <pre>npm view express contributors.email\n</pre> <p>You may also use numeric indices in square braces to specifically select an item in an array field. To just get the email address of the first contributor in the list, you can do this:</p> <pre>npm view express contributors[0].email\n</pre> <p>Multiple fields may be specified, and will be printed one after another. For example, to get all the contributor names and email addresses, you can do this:</p> <pre>npm view express contributors.name contributors.email\n</pre> <p>\"Person\" fields are shown as a string if they would be shown as an object. So, for example, this will show the list of npm contributors in the shortened string format. (See <code><a href=\"../files/package.json\">package.json</a></code> for more on this.)</p> <pre>npm view npm contributors\n</pre> <p>If a version range is provided, then data will be printed for every matching version of the package. This will show which version of jsdom was required by each matching version of yui3:</p> <pre>npm view yui3@'&gt;0.5.4' dependencies.jsdom\n</pre> <p>To show the <code>connect</code> package version history, you can do this:</p> <pre>npm view connect versions\n</pre> <h2 id=\"output\" class=\"deep-link\">OUTPUT</h2> <p>If only a single string field for a single version is output, then it will not be colorized or quoted, so as to enable piping the output to another command. If the field is an object, it will be output as a JavaScript object literal.</p> <p>If the --json flag is given, the outputted fields will be JSON.</p> <p>If the version range matches multiple versions, than each printed value will be prefixed with the version it applies to.</p> <p>If multiple fields are requested, than each of them are prefixed with the field name.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"search\">npm-search</a></li> <li><a href=\"../misc/registry\">npm-registry</a></li> <li><a href=\"config\">npm-config</a></li> <li><a href=\"../misc/config\">npm-config</a></li> <li><a href=\"../files/npmrc\">npmrc</a></li> <li><a href=\"docs\">npm-docs</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/view\" class=\"_attribution-link\">https://docs.npmjs.com/cli/view</a>\n  </p>\n</div>\n","cli/whoami":"<h1>npm-whoami</h1> <h1 class=\"subtitle\">Display npm username</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm whoami [--registry &lt;registry&gt;]\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>Print the <code>username</code> config to standard output.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"config\">npm-config</a></li> <li><a href=\"../misc/config\">npm-config</a></li> <li><a href=\"../files/npmrc\">npmrc</a></li> <li><a href=\"adduser\">npm-adduser</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/whoami\" class=\"_attribution-link\">https://docs.npmjs.com/cli/whoami</a>\n  </p>\n</div>\n","files/npmrc":"<h1>npmrc</h1> <h1 class=\"subtitle\">The npm config files</h1> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>npm gets its config settings from the command line, environment variables, and <code>npmrc</code> files.</p> <p>The <code>npm config</code> command can be used to update and edit the contents of the user and global npmrc files.</p> <p>For a list of available configuration options, see <a href=\"../misc/config\">npm-config</a>.</p> <h2 id=\"files\" class=\"deep-link\">FILES</h2> <p>The four relevant files are:</p> <ul> <li>per-project config file (/path/to/my/project/.npmrc)</li> <li>per-user config file (~/.npmrc)</li> <li>global config file ($PREFIX/etc/npmrc)</li> <li>npm builtin config file (/path/to/npm/npmrc)</li> </ul> <p>All npm config files are an ini-formatted list of <code>key = value</code> parameters. Environment variables can be replaced using <code>${VARIABLE_NAME}</code>. For example:</p> <pre>prefix = ${HOME}/.npm-packages\n</pre> <p>Each of these files is loaded, and config options are resolved in priority order. For example, a setting in the userconfig file would override the setting in the globalconfig file.</p> <p>Array values are specified by adding \"[]\" after the key name. For example:</p> <pre>key[] = \"first value\"\nkey[] = \"second value\"\n</pre> <p><strong>NOTE:</strong> Because local (per-project or per-user) <code>.npmrc</code> files can contain sensitive credentials, they must be readable and writable <em>only</em> by your user account (i.e. must have a mode of <code>0600</code>), otherwise they <em>will be ignored by npm!</em></p> <h3 id=\"per-project-config-file\" class=\"deep-link\">Per-project config file</h3> <p>When working locally in a project, a <code>.npmrc</code> file in the root of the project (ie, a sibling of <code>node_modules</code> and <code>package.json</code>) will set config values specific to this project.</p> <p>Note that this only applies to the root of the project that you're running npm in. It has no effect when your module is published. For example, you can't publish a module that forces itself to install globally, or in a different location.</p> <p>Additionally, this file is not read in global mode, such as when running <code>npm install -g</code>.</p> <h3 id=\"per-user-config-file\" class=\"deep-link\">Per-user config file</h3> <p><code>$HOME/.npmrc</code> (or the <code>userconfig</code> param, if set in the environment or on the command line)</p> <h3 id=\"global-config-file\" class=\"deep-link\">Global config file</h3> <p><code>$PREFIX/etc/npmrc</code> (or the <code>globalconfig</code> param, if set above): This file is an ini-file formatted list of <code>key = value</code> parameters. Environment variables can be replaced as above.</p> <h3 id=\"built-in-config-file\" class=\"deep-link\">Built-in config file</h3> <p><code>path/to/npm/itself/npmrc</code></p> <p>This is an unchangeable \"builtin\" configuration file that npm keeps consistent across updates. Set fields in here using the <code>./configure</code> script that comes with npm. This is primarily for distribution maintainers to override default configs in a standard and consistent manner.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"folders\">npm-folders</a></li> <li><a href=\"../cli/config\">npm-config</a></li> <li><a href=\"../misc/config\">npm-config</a></li> <li><a href=\"package.json\">package.json</a></li> <li><a href=\"../cli/npm\">npm</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/files/npmrc\" class=\"_attribution-link\">https://docs.npmjs.com/files/npmrc</a>\n  </p>\n</div>\n","cli/version":"<h1>npm-version</h1> <h1 class=\"subtitle\">Bump a package version</h1> <h2 id=\"synopsis\" class=\"deep-link\">Synopsis</h2> <pre>npm version [&lt;newversion&gt; | major | minor | patch | premajor | preminor | prepatch | prerelease | from-git]\n\n'npm [-v | --version]' to print npm version\n'npm view &lt;pkg&gt; version' to view a package's published version\n'npm ls' to inspect current package/dependency versions\n</pre> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>Run this in a package directory to bump the version and write the new data back to <code>package.json</code> and, if present, <code>npm-shrinkwrap.json</code>.</p> <p>The <code>newversion</code> argument should be a valid semver string, a valid second argument to <a href=\"https://github.com/npm/node-semver#functions\">semver.inc</a> (one of <code>patch</code>, <code>minor</code>, <code>major</code>, <code>prepatch</code>, <code>preminor</code>, <code>premajor</code>, <code>prerelease</code>), or <code>from-git</code>. In the second case, the existing version will be incremented by 1 in the specified field. <code>from-git</code> will try to read the latest git tag, and use that as the new npm version.</p> <p>If run in a git repo, it will also create a version commit and tag. This behavior is controlled by <code>git-tag-version</code> (see below), and can be disabled on the command line by running <code>npm --no-git-tag-version version</code>. It will fail if the working directory is not clean, unless the <code>-f</code> or <code>--force</code> flag is set.</p> <p>If supplied with <code>-m</code> or <code>--message</code> config option, npm will use it as a commit message when creating a version commit. If the <code>message</code> config contains <code>%s</code> then that will be replaced with the resulting version number. For example:</p> <pre>npm version patch -m \"Upgrade to %s for reasons\"\n</pre> <p>If the <code>sign-git-tag</code> config is set, then the tag will be signed using the <code>-s</code> flag to git. Note that you must have a default GPG key set up in your git config for this to work properly. For example:</p> <pre>$ npm config set sign-git-tag true\n$ npm version patch\n\nYou need a passphrase to unlock the secret key for\nuser: \"isaacs (http://blog.izs.me/) &lt;i@izs.me&gt;\"\n2048-bit RSA key, ID 6C481CF6, created 2010-08-31\n\nEnter passphrase:\n</pre> <p>If <code>preversion</code>, <code>version</code>, or <code>postversion</code> are in the <code>scripts</code> property of the package.json, they will be executed as part of running <code>npm version</code>.</p> <p>The exact order of execution is as follows:</p> <ol> <li>Check to make sure the git working directory is clean before we get started. Your scripts may add files to the commit in future steps. This step is skipped if the <code>--force</code> flag is set.</li> <li>Run the <code>preversion</code> script. These scripts have access to the old <code>version</code> in package.json. A typical use would be running your full test suite before deploying. Any files you want added to the commit should be explicitly added using <code>git add</code>.</li> <li>Bump <code>version</code> in <code>package.json</code> as requested (<code>patch</code>, <code>minor</code>, <code>major</code>, etc).</li> <li>Run the <code>version</code> script. These scripts have access to the new <code>version</code> in package.json (so they can incorporate it into file headers in generated files for example). Again, scripts should explicitly add generated files to the commit using <code>git add</code>.</li> <li>Commit and tag.</li> <li>Run the <code>postversion</code> script. Use it to clean up the file system or automatically push the commit and/or tag.</li> </ol> <p>Take the following example:</p> <pre>\"scripts\": {\n  \"preversion\": \"npm test\",\n  \"version\": \"npm run build &amp;&amp; git add -A dist\",\n  \"postversion\": \"git push &amp;&amp; git push --tags &amp;&amp; rm -rf build/temp\"\n}\n</pre> <p>This runs all your tests, and proceeds only if they pass. Then runs your <code>build</code> script, and adds everything in the <code>dist</code> directory to the commit. After the commit, it pushes the new commit and tag up to the server, and deletes the <code>build/temp</code> directory.</p> <h2 id=\"configuration\" class=\"deep-link\">Configuration</h2> <h3 id=\"git-tag-version\" class=\"deep-link\">git-tag-version</h3> <ul> <li>Default: true</li> <li>Type: Boolean</li> </ul> <p>Commit and tag the version change.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"init\">npm-init</a></li> <li><a href=\"run-script\">npm-run-script</a></li> <li><a href=\"../misc/scripts\">npm-scripts</a></li> <li><a href=\"../files/package.json\">package.json</a></li> <li><a href=\"../misc/semver\">semver</a></li> <li><a href=\"../misc/config\">config</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/cli/version\" class=\"_attribution-link\">https://docs.npmjs.com/cli/version</a>\n  </p>\n</div>\n","files/folders":"<h1>npm-folders</h1> <h1 class=\"subtitle\">Folder Structures Used by npm</h1> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>npm puts various things on your computer. That's its job.</p> <p>This document will tell you what it puts where.</p> <h3 id=\"tldr\" class=\"deep-link\">tl;dr</h3> <ul> <li>Local install (default): puts stuff in <code>./node_modules</code> of the current package root.</li> <li>Global install (with <code>-g</code>): puts stuff in /usr/local or wherever node is installed.</li> <li>Install it <strong>locally</strong> if you're going to <code>require()</code> it.</li> <li>Install it <strong>globally</strong> if you're going to run it on the command line.</li> <li>If you need both, then install it in both places, or use <code>npm link</code>.</li> </ul> <h3 id=\"prefix-configuration\" class=\"deep-link\">prefix Configuration</h3> <p>The <code>prefix</code> config defaults to the location where node is installed. On most systems, this is <code>/usr/local</code>. On windows, this is the exact location of the node.exe binary. On Unix systems, it's one level up, since node is typically installed at <code>{prefix}/bin/node</code> rather than <code>{prefix}/node.exe</code>.</p> <p>When the <code>global</code> flag is set, npm installs things into this prefix. When it is not set, it uses the root of the current package, or the current working directory if not in a package already.</p> <h3 id=\"node-modules\" class=\"deep-link\">Node Modules</h3> <p>Packages are dropped into the <code>node_modules</code> folder under the <code>prefix</code>. When installing locally, this means that you can <code>require(\"packagename\")</code> to load its main module, or <code>require(\"packagename/lib/path/to/sub/module\")</code> to load other modules.</p> <p>Global installs on Unix systems go to <code>{prefix}/lib/node_modules</code>. Global installs on Windows go to <code>{prefix}/node_modules</code> (that is, no <code>lib</code> folder.)</p> <p>Scoped packages are installed the same way, except they are grouped together in a sub-folder of the relevant <code>node_modules</code> folder with the name of that scope prefix by the @ symbol, e.g. <code>npm install @myorg/package</code> would place the package in <code>{prefix}/node_modules/@myorg/package</code>. See <code><a href=\"../misc/scope\">scope</a></code> for more details.</p> <p>If you wish to <code>require()</code> a package, then install it locally.</p> <h3 id=\"executables\" class=\"deep-link\">Executables</h3> <p>When in global mode, executables are linked into <code>{prefix}/bin</code> on Unix, or directly into <code>{prefix}</code> on Windows.</p> <p>When in local mode, executables are linked into <code>./node_modules/.bin</code> so that they can be made available to scripts run through npm. (For example, so that a test runner will be in the path when you run <code>npm test</code>.)</p> <h3 id=\"man-pages\" class=\"deep-link\">Man Pages</h3> <p>When in global mode, man pages are linked into <code>{prefix}/share/man</code>.</p> <p>When in local mode, man pages are not installed.</p> <p>Man pages are not installed on Windows systems.</p> <h3 id=\"cache\" class=\"deep-link\">Cache</h3> <p>See <code><a href=\"../cli/cache\">npm-cache</a></code>. Cache files are stored in <code>~/.npm</code> on Posix, or <code>~/npm-cache</code> on Windows.</p> <p>This is controlled by the <code>cache</code> configuration param.</p> <h3 id=\"temp-files\" class=\"deep-link\">Temp Files</h3> <p>Temporary files are stored by default in the folder specified by the <code>tmp</code> config, which defaults to the TMPDIR, TMP, or TEMP environment variables, or <code>/tmp</code> on Unix and <code>c:\\windows\\temp</code> on Windows.</p> <p>Temp files are given a unique folder under this root for each run of the program, and are deleted upon successful exit.</p> <h2 id=\"more-information\" class=\"deep-link\">More Information</h2> <p>When installing locally, npm first tries to find an appropriate <code>prefix</code> folder. This is so that <code>npm install foo@1.2.3</code> will install to the sensible root of your package, even if you happen to have <code>cd</code>ed into some other folder.</p> <p>Starting at the $PWD, npm will walk up the folder tree checking for a folder that contains either a <code>package.json</code> file, or a <code>node_modules</code> folder. If such a thing is found, then that is treated as the effective \"current directory\" for the purpose of running npm commands. (This behavior is inspired by and similar to git's .git-folder seeking logic when running git commands in a working dir.)</p> <p>If no package root is found, then the current folder is used.</p> <p>When you run <code>npm install foo@1.2.3</code>, then the package is loaded into the cache, and then unpacked into <code>./node_modules/foo</code>. Then, any of foo's dependencies are similarly unpacked into <code>./node_modules/foo/node_modules/...</code>.</p> <p>Any bin files are symlinked to <code>./node_modules/.bin/</code>, so that they may be found by npm scripts when necessary.</p> <h3 id=\"global-installation\" class=\"deep-link\">Global Installation</h3> <p>If the <code>global</code> configuration is set to true, then npm will install packages \"globally\".</p> <p>For global installation, packages are installed roughly the same way, but using the folders described above.</p> <h3 id=\"cycles-conflicts-and-folder-parsimony\" class=\"deep-link\">Cycles, Conflicts, and Folder Parsimony</h3> <p>Cycles are handled using the property of node's module system that it walks up the directories looking for <code>node_modules</code> folders. So, at every stage, if a package is already installed in an ancestor <code>node_modules</code> folder, then it is not installed at the current location.</p> <p>Consider the case above, where <code>foo -&gt; bar -&gt; baz</code>. Imagine if, in addition to that, baz depended on bar, so you'd have: <code>foo -&gt; bar -&gt; baz -&gt; bar -&gt; baz ...</code>. However, since the folder structure is: <code>foo/node_modules/bar/node_modules/baz</code>, there's no need to put another copy of bar into <code>.../baz/node_modules</code>, since when it calls require(\"bar\"), it will get the copy that is installed in <code>foo/node_modules/bar</code>.</p> <p>This shortcut is only used if the exact same version would be installed in multiple nested <code>node_modules</code> folders. It is still possible to have <code>a/node_modules/b/node_modules/a</code> if the two \"a\" packages are different versions. However, without repeating the exact same package multiple times, an infinite regress will always be prevented.</p> <p>Another optimization can be made by installing dependencies at the highest level possible, below the localized \"target\" folder.</p> <h4 id=\"example\" class=\"deep-link\">Example</h4> <p>Consider this dependency graph:</p> <pre>foo\n+-- blerg@1.2.5\n+-- bar@1.2.3\n|   +-- blerg@1.x (latest=1.3.7)\n|   +-- baz@2.x\n|   |   `-- quux@3.x\n|   |       `-- bar@1.2.3 (cycle)\n|   `-- asdf@*\n`-- baz@1.2.3\n    `-- quux@3.x\n        `-- bar\n</pre> <p>In this case, we might expect a folder structure like this:</p> <pre>foo\n+-- node_modules\n    +-- blerg (1.2.5) &lt;---[A]\n    +-- bar (1.2.3) &lt;---[B]\n    |   `-- node_modules\n    |       +-- baz (2.0.2) &lt;---[C]\n    |       |   `-- node_modules\n    |       |       `-- quux (3.2.0)\n    |       `-- asdf (2.3.4)\n    `-- baz (1.2.3) &lt;---[D]\n        `-- node_modules\n            `-- quux (3.2.0) &lt;---[E]\n</pre> <p>Since foo depends directly on <code>bar@1.2.3</code> and <code>baz@1.2.3</code>, those are installed in foo's <code>node_modules</code> folder.</p> <p>Even though the latest copy of blerg is 1.3.7, foo has a specific dependency on version 1.2.5. So, that gets installed at [A]. Since the parent installation of blerg satisfies bar's dependency on <code>blerg@1.x</code>, it does not install another copy under [B].</p> <p>Bar [B] also has dependencies on baz and asdf, so those are installed in bar's <code>node_modules</code> folder. Because it depends on <code>baz@2.x</code>, it cannot re-use the <code>baz@1.2.3</code> installed in the parent <code>node_modules</code> folder [D], and must install its own copy [C].</p> <p>Underneath bar, the <code>baz -&gt; quux -&gt; bar</code> dependency creates a cycle. However, because bar is already in quux's ancestry [B], it does not unpack another copy of bar into that folder.</p> <p>Underneath <code>foo -&gt; baz</code> [D], quux's [E] folder tree is empty, because its dependency on bar is satisfied by the parent folder copy installed at [B].</p> <p>For a graphical breakdown of what is installed where, use <code>npm ls</code>.</p> <h3 id=\"publishing\" class=\"deep-link\">Publishing</h3> <p>Upon publishing, npm will look in the <code>node_modules</code> folder. If any of the items there are not in the <code>bundledDependencies</code> array, then they will not be included in the package tarball.</p> <p>This allows a package maintainer to install all of their dependencies (and dev dependencies) locally, but only re-publish those items that cannot be found elsewhere. See <code><a href=\"package.json\">package.json</a></code> for more information.</p> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"../misc/faq\">npm-faq</a></li> <li><a href=\"package.json\">package.json</a></li> <li><a href=\"../cli/install\">npm-install</a></li> <li><a href=\"../cli/pack\">npm-pack</a></li> <li><a href=\"../cli/cache\">npm-cache</a></li> <li><a href=\"../cli/config\">npm-config</a></li> <li><a href=\"npmrc\">npmrc</a></li> <li><a href=\"../misc/config\">npm-config</a></li> <li><a href=\"../cli/publish\">npm-publish</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/files/folders\" class=\"_attribution-link\">https://docs.npmjs.com/files/folders</a>\n  </p>\n</div>\n","files/package.json":"<h1>package.json</h1> <h1 class=\"subtitle\">Specifics of npm's package.json handling</h1> <h2 id=\"description\" class=\"deep-link\">Description</h2> <p>This document is all you need to know about what's required in your package.json file. It must be actual JSON, not just a JavaScript object literal.</p> <p>A lot of the behavior described in this document is affected by the config settings described in <code><a href=\"../misc/config\">npm-config</a></code>.</p> <h2 id=\"name\" class=\"deep-link\">name</h2> <p>The <em>most</em> important things in your package.json are the name and version fields. Those are actually required, and your package won't install without them. The name and version together form an identifier that is assumed to be completely unique. Changes to the package should come along with changes to the version.</p> <p>The name is what your thing is called.</p> <p>Some rules:</p> <ul> <li>The name must be less than or equal to 214 characters. This includes the scope for scoped packages.</li> <li>The name can't start with a dot or an underscore.</li> <li>New packages must not have uppercase letters in the name.</li> <li>The name ends up being part of a URL, an argument on the command line, and a folder name. Therefore, the name can't contain any non-URL-safe characters.</li> </ul> <p>Some tips:</p> <ul> <li>Don't use the same name as a core Node module.</li> <li>Don't put \"js\" or \"node\" in the name. It's assumed that it's js, since you're writing a package.json file, and you can specify the engine using the \"engines\" field. (See below.)</li> <li>The name will probably be passed as an argument to require(), so it should be something short, but also reasonably descriptive.</li> <li>You may want to check the npm registry to see if there's something by that name already, before you get too attached to it. <a href=\"https://www.npmjs.com/\">https://www.npmjs.com/</a>\n</li> </ul> <p>A name can be optionally prefixed by a scope, e.g. <code>@myorg/mypackage</code>. See <code><a href=\"../misc/scope\">npm-scope</a></code> for more detail.</p> <h2 id=\"version\" class=\"deep-link\">version</h2> <p>The <em>most</em> important things in your package.json are the name and version fields. Those are actually required, and your package won't install without them. The name and version together form an identifier that is assumed to be completely unique. Changes to the package should come along with changes to the version.</p> <p>Version must be parseable by <a href=\"https://github.com/isaacs/node-semver\">node-semver</a>, which is bundled with npm as a dependency. (<code>npm install semver</code> to use it yourself.)</p> <p>More on version numbers and ranges at <a href=\"../misc/semver\">semver</a>.</p> <h2 id=\"description-1\" class=\"deep-link\">description</h2> <p>Put a description in it. It's a string. This helps people discover your package, as it's listed in <code>npm search</code>.</p> <h2 id=\"keywords\" class=\"deep-link\">keywords</h2> <p>Put keywords in it. It's an array of strings. This helps people discover your package as it's listed in <code>npm search</code>.</p> <h2 id=\"homepage\" class=\"deep-link\">homepage</h2> <p>The url to the project homepage.</p> <p><strong>NOTE</strong>: This is <em>not</em> the same as \"url\". If you put a \"url\" field, then the registry will think it's a redirection to your package that has been published somewhere else, and spit at you.</p> <p>Literally. Spit. I'm so not kidding.</p> <h2 id=\"bugs\" class=\"deep-link\">bugs</h2> <p>The url to your project's issue tracker and / or the email address to which issues should be reported. These are helpful for people who encounter issues with your package.</p> <p>It should look like this:</p> <pre>{ \"url\" : \"https://github.com/owner/project/issues\"\n, \"email\" : \"project@hostname.com\"\n}\n</pre> <p>You can specify either one or both values. If you want to provide only a url, you can specify the value for \"bugs\" as a simple string instead of an object.</p> <p>If a url is provided, it will be used by the <code>npm bugs</code> command.</p> <h2 id=\"license\" class=\"deep-link\">license</h2> <p>You should specify a license for your package so that people know how they are permitted to use it, and any restrictions you're placing on it.</p> <p>If you're using a common license such as BSD-2-Clause or MIT, add a current SPDX license identifier for the license you're using, like this:</p> <pre>{ \"license\" : \"BSD-3-Clause\" }\n</pre> <p>You can check <a href=\"https://spdx.org/licenses/\">the full list of SPDX license IDs</a>. Ideally you should pick one that is <a href=\"https://opensource.org/licenses/alphabetical\">OSI</a> approved.</p> <p>If your package is licensed under multiple common licenses, use an <a href=\"https://npmjs.com/package/spdx\">SPDX license expression syntax version 2.0 string</a>, like this:</p> <pre>{ \"license\" : \"(ISC OR GPL-3.0)\" }\n</pre> <p>If you are using a license that hasn't been assigned an SPDX identifier, or if you are using a custom license, use a string value like this one:</p> <pre>{ \"license\" : \"SEE LICENSE IN &lt;filename&gt;\" }\n</pre> <p>Then include a file named <code>&lt;filename&gt;</code> at the top level of the package.</p> <p>Some old packages used license objects or a \"licenses\" property containing an array of license objects:</p> <pre>// Not valid metadata\n{ \"license\" :\n  { \"type\" : \"ISC\"\n  , \"url\" : \"http://opensource.org/licenses/ISC\"\n  }\n}\n\n// Not valid metadata\n{ \"licenses\" :\n  [\n    { \"type\": \"MIT\"\n    , \"url\": \"http://www.opensource.org/licenses/mit-license.php\"\n    }\n  , { \"type\": \"Apache-2.0\"\n    , \"url\": \"http://opensource.org/licenses/apache2.0.php\"\n    }\n  ]\n}\n</pre> <p>Those styles are now deprecated. Instead, use SPDX expressions, like this:</p> <pre>{ \"license\": \"ISC\" }\n\n{ \"license\": \"(MIT OR Apache-2.0)\" }\n</pre> <p>Finally, if you do not wish to grant others the right to use a private or unpublished package under any terms:</p> <pre>{ \"license\": \"UNLICENSED\"}\n</pre> <p>Consider also setting <code>\"private\": true</code> to prevent accidental publication.</p> <h2 id=\"people-fields-author-contributors\" class=\"deep-link\">people fields: author, contributors</h2> <p>The \"author\" is one person. \"contributors\" is an array of people. A \"person\" is an object with a \"name\" field and optionally \"url\" and \"email\", like this:</p> <pre>{ \"name\" : \"Barney Rubble\"\n, \"email\" : \"b@rubble.com\"\n, \"url\" : \"http://barnyrubble.tumblr.com/\"\n}\n</pre> <p>Or you can shorten that all into a single string, and npm will parse it for you:</p> <pre>\"Barney Rubble &lt;b@rubble.com&gt; (http://barnyrubble.tumblr.com/)\"\n</pre> <p>Both email and url are optional either way.</p> <p>npm also sets a top-level \"maintainers\" field with your npm user info.</p> <h2 id=\"files\" class=\"deep-link\">files</h2> <p>The \"files\" field is an array of files to include in your project. If you name a folder in the array, then it will also include the files inside that folder. (Unless they would be ignored by another rule.)</p> <p>You can also provide a \".npmignore\" file in the root of your package or in subdirectories, which will keep files from being included, even if they would be picked up by the files array. The <code>.npmignore</code> file works just like a <code>.gitignore</code>.</p> <p>Certain files are always included, regardless of settings:</p> <ul> <li><code>package.json</code></li> <li>\n<code>README</code> (and its variants)</li> <li>\n<code>CHANGELOG</code> (and its variants)</li> <li>\n<code>LICENSE</code> / <code>LICENCE</code>\n</li> </ul> <p>Conversely, some files are always ignored:</p> <ul> <li><code>.git</code></li> <li><code>CVS</code></li> <li><code>.svn</code></li> <li><code>.hg</code></li> <li><code>.lock-wscript</code></li> <li><code>.wafpickle-N</code></li> <li><code>*.swp</code></li> <li><code>.DS_Store</code></li> <li><code>._*</code></li> <li><code>npm-debug.log</code></li> </ul> <h2 id=\"main\" class=\"deep-link\">main</h2> <p>The main field is a module ID that is the primary entry point to your program. That is, if your package is named <code>foo</code>, and a user installs it, and then does <code>require(\"foo\")</code>, then your main module's exports object will be returned.</p> <p>This should be a module ID relative to the root of your package folder.</p> <p>For most modules, it makes the most sense to have a main script and often not much else.</p> <h2 id=\"bin\" class=\"deep-link\">bin</h2> <p>A lot of packages have one or more executable files that they'd like to install into the PATH. npm makes this pretty easy (in fact, it uses this feature to install the \"npm\" executable.)</p> <p>To use this, supply a <code>bin</code> field in your package.json which is a map of command name to local file name. On install, npm will symlink that file into <code>prefix/bin</code> for global installs, or <code>./node_modules/.bin/</code> for local installs.</p> <p>For example, myapp could have this:</p> <pre>{ \"bin\" : { \"myapp\" : \"./cli.js\" } }\n</pre> <p>So, when you install myapp, it'll create a symlink from the <code>cli.js</code> script to <code>/usr/local/bin/myapp</code>.</p> <p>If you have a single executable, and its name should be the name of the package, then you can just supply it as a string. For example:</p> <pre>{ \"name\": \"my-program\"\n, \"version\": \"1.2.5\"\n, \"bin\": \"./path/to/program\" }\n</pre> <p>would be the same as this:</p> <pre>{ \"name\": \"my-program\"\n, \"version\": \"1.2.5\"\n, \"bin\" : { \"my-program\" : \"./path/to/program\" } }\n</pre> <h2 id=\"man\" class=\"deep-link\">man</h2> <p>Specify either a single file or an array of filenames to put in place for the <code>man</code> program to find.</p> <p>If only a single file is provided, then it's installed such that it is the result from <code>man &lt;pkgname&gt;</code>, regardless of its actual filename. For example:</p> <pre>{ \"name\" : \"foo\"\n, \"version\" : \"1.2.3\"\n, \"description\" : \"A packaged foo fooer for fooing foos\"\n, \"main\" : \"foo.js\"\n, \"man\" : \"./man/doc.1\"\n}\n</pre> <p>would link the <code>./man/doc.1</code> file in such that it is the target for <code>man foo</code></p> <p>If the filename doesn't start with the package name, then it's prefixed. So, this:</p> <pre>{ \"name\" : \"foo\"\n, \"version\" : \"1.2.3\"\n, \"description\" : \"A packaged foo fooer for fooing foos\"\n, \"main\" : \"foo.js\"\n, \"man\" : [ \"./man/foo.1\", \"./man/bar.1\" ]\n}\n</pre> <p>will create files to do <code>man foo</code> and <code>man foo-bar</code>.</p> <p>Man files must end with a number, and optionally a <code>.gz</code> suffix if they are compressed. The number dictates which man section the file is installed into.</p> <pre>{ \"name\" : \"foo\"\n, \"version\" : \"1.2.3\"\n, \"description\" : \"A packaged foo fooer for fooing foos\"\n, \"main\" : \"foo.js\"\n, \"man\" : [ \"./man/foo.1\", \"./man/foo.2\" ]\n}\n</pre> <p>will create entries for <code>man foo</code> and <code>man 2 foo</code></p> <h2 id=\"directories\" class=\"deep-link\">directories</h2> <p>The CommonJS <a href=\"http://wiki.commonjs.org/wiki/Packages/1.0\">Packages</a> spec details a few ways that you can indicate the structure of your package using a <code>directories</code> object. If you look at <a href=\"https://registry.npmjs.org/npm/latest\">npm's package.json</a>, you'll see that it has directories for doc, lib, and man.</p> <p>In the future, this information may be used in other creative ways.</p> <h3 id=\"directorieslib\" class=\"deep-link\">directories.lib</h3> <p>Tell people where the bulk of your library is. Nothing special is done with the lib folder in any way, but it's useful meta info.</p> <h3 id=\"directoriesbin\" class=\"deep-link\">directories.bin</h3> <p>If you specify a <code>bin</code> directory in <code>directories.bin</code>, all the files in that folder will be added.</p> <p>Because of the way the <code>bin</code> directive works, specifying both a <code>bin</code> path and setting <code>directories.bin</code> is an error. If you want to specify individual files, use <code>bin</code>, and for all the files in an existing <code>bin</code> directory, use <code>directories.bin</code>.</p> <h3 id=\"directoriesman\" class=\"deep-link\">directories.man</h3> <p>A folder that is full of man pages. Sugar to generate a \"man\" array by walking the folder.</p> <h3 id=\"directoriesdoc\" class=\"deep-link\">directories.doc</h3> <p>Put markdown files in here. Eventually, these will be displayed nicely, maybe, someday.</p> <h3 id=\"directoriesexample\" class=\"deep-link\">directories.example</h3> <p>Put example scripts in here. Someday, it might be exposed in some clever way.</p> <h2 id=\"repository\" class=\"deep-link\">repository</h2> <p>Specify the place where your code lives. This is helpful for people who want to contribute. If the git repo is on GitHub, then the <code>npm docs</code> command will be able to find you.</p> <p>Do it like this:</p> <pre>\"repository\" :\n  { \"type\" : \"git\"\n  , \"url\" : \"https://github.com/npm/npm.git\"\n  }\n\n\"repository\" :\n  { \"type\" : \"svn\"\n  , \"url\" : \"https://v8.googlecode.com/svn/trunk/\"\n  }\n</pre> <p>The URL should be a publicly available (perhaps read-only) url that can be handed directly to a VCS program without any modification. It should not be a url to an html project page that you put in your browser. It's for computers.</p> <p>For GitHub, GitHub gist, Bitbucket, or GitLab repositories you can use the same shortcut syntax you use for <code>npm install</code>:</p> <pre>\"repository\": \"npm/npm\"\n\n\"repository\": \"gist:11081aaa281\"\n\n\"repository\": \"bitbucket:example/repo\"\n\n\"repository\": \"gitlab:another/repo\"\n</pre> <h2 id=\"scripts\" class=\"deep-link\">scripts</h2> <p>The \"scripts\" property is a dictionary containing script commands that are run at various times in the lifecycle of your package. The key is the lifecycle event, and the value is the command to run at that point.</p> <p>See <code><a href=\"../misc/scripts\">npm-scripts</a></code> to find out more about writing package scripts.</p> <h2 id=\"config\" class=\"deep-link\">config</h2> <p>A \"config\" object can be used to set configuration parameters used in package scripts that persist across upgrades. For instance, if a package had the following:</p> <pre>{ \"name\" : \"foo\"\n, \"config\" : { \"port\" : \"8080\" } }\n</pre> <p>and then had a \"start\" command that then referenced the <code>npm_package_config_port</code> environment variable, then the user could override that by doing <code>npm config set foo:port 8001</code>.</p> <p>See <code><a href=\"../misc/config\">npm-config</a></code> and <code><a href=\"../misc/scripts\">npm-scripts</a></code> for more on package configs.</p> <h2 id=\"dependencies\" class=\"deep-link\">dependencies</h2> <p>Dependencies are specified in a simple object that maps a package name to a version range. The version range is a string which has one or more space-separated descriptors. Dependencies can also be identified with a tarball or git URL.</p> <p><strong>Please do not put test harnesses or transpilers in your <code>dependencies</code> object.</strong> See <code>devDependencies</code>, below.</p> <p>See <a href=\"../misc/semver\">semver</a> for more details about specifying version ranges.</p> <ul> <li>\n<code>version</code> Must match <code>version</code> exactly</li> <li>\n<code>&gt;version</code> Must be greater than <code>version</code>\n</li> <li>\n<code>&gt;=version</code> etc</li> <li><code>&lt;version</code></li> <li><code>&lt;=version</code></li> <li>\n<code>~version</code> \"Approximately equivalent to version\" See <a href=\"../misc/semver\">semver</a>\n</li> <li>\n<code>^version</code> \"Compatible with version\" See <a href=\"../misc/semver\">semver</a>\n</li> <li>\n<code>1.2.x</code> 1.2.0, 1.2.1, etc., but not 1.3.0</li> <li>\n<code>http://...</code> See 'URLs as Dependencies' below</li> <li>\n<code>*</code> Matches any version</li> <li>\n<code>\"\"</code> (just an empty string) Same as <code>*</code>\n</li> <li>\n<code>version1 - version2</code> Same as <code>&gt;=version1 &lt;=version2</code>.</li> <li>\n<code>range1 || range2</code> Passes if either range1 or range2 are satisfied.</li> <li>\n<code>git...</code> See 'Git URLs as Dependencies' below</li> <li>\n<code>user/repo</code> See 'GitHub URLs' below</li> <li>\n<code>tag</code> A specific version tagged and published as <code>tag</code> See <code><a href=\"../cli/tag\">npm-tag</a></code>\n</li> <li>\n<code>path/path/path</code> See <a href=\"#local-paths\">Local Paths</a> below</li> </ul> <p>For example, these are all valid:</p> <pre>{ \"dependencies\" :\n  { \"foo\" : \"1.0.0 - 2.9999.9999\"\n  , \"bar\" : \"&gt;=1.0.2 &lt;2.1.2\"\n  , \"baz\" : \"&gt;1.0.2 &lt;=2.3.4\"\n  , \"boo\" : \"2.0.1\"\n  , \"qux\" : \"&lt;1.0.0 || &gt;=2.3.1 &lt;2.4.5 || &gt;=2.5.2 &lt;3.0.0\"\n  , \"asd\" : \"http://asdf.com/asdf.tar.gz\"\n  , \"til\" : \"~1.2\"\n  , \"elf\" : \"~1.2.3\"\n  , \"two\" : \"2.x\"\n  , \"thr\" : \"3.3.x\"\n  , \"lat\" : \"latest\"\n  , \"dyl\" : \"file:../dyl\"\n  }\n}\n</pre> <h3 id=\"urls-as-dependencies\" class=\"deep-link\">URLs as Dependencies</h3> <p>You may specify a tarball URL in place of a version range.</p> <p>This tarball will be downloaded and installed locally to your package at install time.</p> <h3 id=\"git-urls-as-dependencies\" class=\"deep-link\">Git URLs as Dependencies</h3> <p>Git urls can be of the form:</p> <pre>git://github.com/user/project.git#commit-ish\ngit+ssh://user@hostname:project.git#commit-ish\ngit+ssh://user@hostname/project.git#commit-ish\ngit+http://user@hostname/project/blah.git#commit-ish\ngit+https://user@hostname/project/blah.git#commit-ish\n</pre> <p>The <code>commit-ish</code> can be any tag, sha, or branch which can be supplied as an argument to <code>git checkout</code>. The default is <code>master</code>.</p> <h2 id=\"github-urls\" class=\"deep-link\">GitHub URLs</h2> <p>As of version 1.1.65, you can refer to GitHub urls as just \"foo\": \"user/foo-project\". Just as with git URLs, a <code>commit-ish</code> suffix can be included. For example:</p> <pre>{\n  \"name\": \"foo\",\n  \"version\": \"0.0.0\",\n  \"dependencies\": {\n    \"express\": \"visionmedia/express\",\n    \"mocha\": \"visionmedia/mocha#4727d357ea\"\n  }\n}\n</pre> <h2 id=\"local-paths\" class=\"deep-link\">Local Paths</h2> <p>As of version 2.0.0 you can provide a path to a local directory that contains a package. Local paths can be saved using <code>npm install -S</code> or <code>npm install --save</code>, using any of these forms:</p> <pre>../foo/bar\n~/foo/bar\n./foo/bar\n/foo/bar\n</pre> <p>in which case they will be normalized to a relative path and added to your <code>package.json</code>. For example:</p> <pre>{\n  \"name\": \"baz\",\n  \"dependencies\": {\n    \"bar\": \"file:../foo/bar\"\n  }\n}\n</pre> <p>This feature is helpful for local offline development and creating tests that require npm installing where you don't want to hit an external server, but should not be used when publishing packages to the public registry.</p> <h2 id=\"devdependencies\" class=\"deep-link\">devDependencies</h2> <p>If someone is planning on downloading and using your module in their program, then they probably don't want or need to download and build the external test or documentation framework that you use.</p> <p>In this case, it's best to map these additional items in a <code>devDependencies</code> object.</p> <p>These things will be installed when doing <code>npm link</code> or <code>npm install</code> from the root of a package, and can be managed like any other npm configuration param. See <code><a href=\"../misc/config\">npm-config</a></code> for more on the topic.</p> <p>For build steps that are not platform-specific, such as compiling CoffeeScript or other languages to JavaScript, use the <code>prepublish</code> script to do this, and make the required package a devDependency.</p> <p>For example:</p> <pre>{ \"name\": \"ethopia-waza\",\n  \"description\": \"a delightfully fruity coffee varietal\",\n  \"version\": \"1.2.3\",\n  \"devDependencies\": {\n    \"coffee-script\": \"~1.6.3\"\n  },\n  \"scripts\": {\n    \"prepublish\": \"coffee -o lib/ -c src/waza.coffee\"\n  },\n  \"main\": \"lib/waza.js\"\n}\n</pre> <p>The <code>prepublish</code> script will be run before publishing, so that users can consume the functionality without requiring them to compile it themselves. In dev mode (ie, locally running <code>npm install</code>), it'll run this script as well, so that you can test it easily.</p> <h2 id=\"peerdependencies\" class=\"deep-link\">peerDependencies</h2> <p>In some cases, you want to express the compatibility of your package with a host tool or library, while not necessarily doing a <code>require</code> of this host. This is usually referred to as a <em>plugin</em>. Notably, your module may be exposing a specific interface, expected and specified by the host documentation.</p> <p>For example:</p> <pre>{\n  \"name\": \"tea-latte\",\n  \"version\": \"1.3.5\",\n  \"peerDependencies\": {\n    \"tea\": \"2.x\"\n  }\n}\n</pre> <p>This ensures your package <code>tea-latte</code> can be installed <em>along</em> with the second major version of the host package <code>tea</code> only. <code>npm install tea-latte</code> could possibly yield the following dependency graph:</p> <pre>├── tea-latte@1.3.5\n└── tea@2.2.0\n</pre> <p><strong>NOTE: npm versions 1 and 2 will automatically install <code>peerDependencies</code> if they are not explicitly depended upon higher in the dependency tree. In the next major version of npm (npm@3), this will no longer be the case. You will receive a warning that the peerDependency is not installed instead.</strong> The behavior in npms 1 &amp; 2 was frequently confusing and could easily put you into dependency hell, a situation that npm is designed to avoid as much as possible.</p> <p>Trying to install another plugin with a conflicting requirement will cause an error. For this reason, make sure your plugin requirement is as broad as possible, and not to lock it down to specific patch versions.</p> <p>Assuming the host complies with <a href=\"http://semver.org/\">semver</a>, only changes in the host package's major version will break your plugin. Thus, if you've worked with every 1.x version of the host package, use <code>\"^1.0\"</code> or <code>\"1.x\"</code> to express this. If you depend on features introduced in 1.5.2, use <code>\"&gt;= 1.5.2 &lt; 2\"</code>.</p> <h2 id=\"bundleddependencies\" class=\"deep-link\">bundledDependencies</h2> <p>Array of package names that will be bundled when publishing the package.</p> <p>If this is spelled <code>\"bundleDependencies\"</code>, then that is also honored.</p> <h2 id=\"optionaldependencies\" class=\"deep-link\">optionalDependencies</h2> <p>If a dependency can be used, but you would like npm to proceed if it cannot be found or fails to install, then you may put it in the <code>optionalDependencies</code> object. This is a map of package name to version or url, just like the <code>dependencies</code> object. The difference is that build failures do not cause installation to fail.</p> <p>It is still your program's responsibility to handle the lack of the dependency. For example, something like this:</p> <pre>try {\n  var foo = require('foo')\n  var fooVersion = require('foo/package.json').version\n} catch (er) {\n  foo = null\n}\nif ( notGoodFooVersion(fooVersion) ) {\n  foo = null\n}\n\n// .. then later in your program ..\n\nif (foo) {\n  foo.doFooThings()\n}\n</pre> <p>Entries in <code>optionalDependencies</code> will override entries of the same name in <code>dependencies</code>, so it's usually best to only put in one place.</p> <h2 id=\"engines\" class=\"deep-link\">engines</h2> <p>You can specify the version of node that your stuff works on:</p> <pre>{ \"engines\" : { \"node\" : \"&gt;=0.10.3 &lt;0.12\" } }\n</pre> <p>And, like with dependencies, if you don't specify the version (or if you specify \"*\" as the version), then any version of node will do.</p> <p>If you specify an \"engines\" field, then npm will require that \"node\" be somewhere on that list. If \"engines\" is omitted, then npm will just assume that it works on node.</p> <p>You can also use the \"engines\" field to specify which versions of npm are capable of properly installing your program. For example:</p> <pre>{ \"engines\" : { \"npm\" : \"~1.0.20\" } }\n</pre> <p>Note that, unless the user has set the <code>engine-strict</code> config flag, this field is advisory only.</p> <h2 id=\"enginestrict\" class=\"deep-link\">engineStrict</h2> <p><strong>This feature was deprecated with npm 3.0.0</strong></p> <p>Prior to npm 3.0.0, this feature was used to treat this package as if the user had set <code>engine-strict</code>.</p> <h2 id=\"os\" class=\"deep-link\">os</h2> <p>You can specify which operating systems your module will run on:</p> <pre>\"os\" : [ \"darwin\", \"linux\" ]\n</pre> <p>You can also blacklist instead of whitelist operating systems, just prepend the blacklisted os with a '!':</p> <pre>\"os\" : [ \"!win32\" ]\n</pre> <p>The host operating system is determined by <code>process.platform</code></p> <p>It is allowed to both blacklist, and whitelist, although there isn't any good reason to do this.</p> <h2 id=\"cpu\" class=\"deep-link\">cpu</h2> <p>If your code only runs on certain cpu architectures, you can specify which ones.</p> <pre>\"cpu\" : [ \"x64\", \"ia32\" ]\n</pre> <p>Like the <code>os</code> option, you can also blacklist architectures:</p> <pre>\"cpu\" : [ \"!arm\", \"!mips\" ]\n</pre> <p>The host architecture is determined by <code>process.arch</code></p> <h2 id=\"preferglobal\" class=\"deep-link\">preferGlobal</h2> <p>If your package is primarily a command-line application that should be installed globally, then set this value to <code>true</code> to provide a warning if it is installed locally.</p> <p>It doesn't actually prevent users from installing it locally, but it does help prevent some confusion if it doesn't work as expected.</p> <h2 id=\"private\" class=\"deep-link\">private</h2> <p>If you set <code>\"private\": true</code> in your package.json, then npm will refuse to publish it.</p> <p>This is a way to prevent accidental publication of private repositories. If you would like to ensure that a given package is only ever published to a specific registry (for example, an internal registry), then use the <code>publishConfig</code> dictionary described below to override the <code>registry</code> config param at publish-time.</p> <h2 id=\"publishconfig\" class=\"deep-link\">publishConfig</h2> <p>This is a set of config values that will be used at publish-time. It's especially handy if you want to set the tag, registry or access, so that you can ensure that a given package is not tagged with \"latest\", published to the global public registry or that a scoped module is private by default.</p> <p>Any config values can be overridden, but of course only \"tag\", \"registry\" and \"access\" probably matter for the purposes of publishing.</p> <p>See <code><a href=\"../misc/config\">npm-config</a></code> to see the list of config options that can be overridden.</p> <h2 id=\"default-values\" class=\"deep-link\">DEFAULT VALUES</h2> <p>npm will default some values based on package contents.</p> <ul> <li> <p><code>\"scripts\": {\"start\": \"node server.js\"}</code></p> <p>If there is a <code>server.js</code> file in the root of your package, then npm will default the <code>start</code> command to <code>node server.js</code>.</p> </li> <li> <p><code>\"scripts\":{\"preinstall\": \"node-gyp rebuild\"}</code></p> <p>If there is a <code>binding.gyp</code> file in the root of your package, npm will default the <code>preinstall</code> command to compile using node-gyp.</p> </li> <li> <p><code>\"contributors\": [...]</code></p> <p>If there is an <code>AUTHORS</code> file in the root of your package, npm will treat each line as a <code>Name &lt;email&gt; (url)</code> format, where email and url are optional. Lines which start with a <code>#</code> or are blank, will be ignored.</p> </li> </ul> <h2 id=\"see-also\" class=\"deep-link\">See Also</h2> <ul> <li><a href=\"../misc/semver\">semver</a></li> <li><a href=\"../cli/init\">npm-init</a></li> <li><a href=\"../cli/version\">npm-version</a></li> <li><a href=\"../cli/config\">npm-config</a></li> <li><a href=\"../misc/config\">npm-config</a></li> <li><a href=\"../cli/help\">npm-help</a></li> <li><a href=\"../misc/faq\">npm-faq</a></li> <li><a href=\"../cli/install\">npm-install</a></li> <li><a href=\"../cli/publish\">npm-publish</a></li> <li><a href=\"../cli/uninstall\">npm-uninstall</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; npm, Inc. and Contributors<br>Licensed under the npm License.<br>npm is a trademark of npm, Inc.<br>\n    <a href=\"https://docs.npmjs.com/files/package.json\" class=\"_attribution-link\">https://docs.npmjs.com/files/package.json</a>\n  </p>\n</div>\n"}