{"index":"<h1>Padrino</h1> <p>Padrino is the godfather of Sinatra. Follow us on <a href=\"http://padrinorb.com\">www.padrinorb.com</a> and on twitter <a href=\"http://twitter.com/padrinorb\">@padrinorb</a>. Join us on </p>  <h2>Preface</h2> <p>Padrino is a ruby framework built upon the excellent <a href=\"http://www.sinatrarb.com\">Sinatra Web Library</a>. Sinatra is a DSL for creating simple web applications in Ruby quickly and with minimal effort. This framework tries to make it as fun and easy as possible to code more advanced web applications by building upon the Sinatra philosophies and foundations.</p> <h2>Introduction</h2> <p>Many people love that Sinatra is simple and lightweight but soon begin to miss the great deal of functionality provided by other web frameworks such as Django or Rails when building non-trivial applications.</p> <p>Our goal with this framework is to adhere to the essence of Sinatra and at the same time create a standard library of tools, helpers and components that will make Sinatra suitable for increasingly complex applications.</p> <p>Here is a brief overview of functionality provided by the Padrino framework:</p> <table class=\"rdoc-list\">\n<tr>\n<td class=\"rdoc-term\"><p>Agnostic</p></td> <td> <p>Full support for many popular testing, templating, mocking, and data storage choices.</p> </td>\n</tr>\n<tr>\n<td class=\"rdoc-term\"><p>Generators</p></td> <td> <p>Create Padrino applications, models, controllers i.e: padrino-gen project.</p> </td>\n</tr>\n<tr>\n<td class=\"rdoc-term\"><p>Mountable</p></td> <td> <p>Unlike other ruby frameworks, principally designed for mounting multiple apps.</p> </td>\n</tr>\n<tr>\n<td class=\"rdoc-term\"><p>Routing</p></td> <td> <p>Full url named routes, named params, before/after filter support.</p> </td>\n</tr>\n<tr>\n<td class=\"rdoc-term\"><p>Tag Helpers</p></td> <td> <p>View helpers such as: tag, content_tag, input_tag.</p> </td>\n</tr>\n<tr>\n<td class=\"rdoc-term\"><p>Asset Helpers</p></td> <td> <p>View helpers such as: link_to, image_tag, javascript_include_tag.</p> </td>\n</tr>\n<tr>\n<td class=\"rdoc-term\"><p>Form Helpers</p></td> <td> <p>Builder support such as: form_tag, form_for, field_set_tag, text_field.</p> </td>\n</tr>\n<tr>\n<td class=\"rdoc-term\"><p>Text Helpers</p></td> <td> <p>Useful formatting like: time_ago_in_words, js_escape_html, sanitize_html.</p> </td>\n</tr>\n<tr>\n<td class=\"rdoc-term\"><p>Mailer</p></td> <td> <p>Fast and simple delivery support for sending emails (akin to ActionMailer).</p> </td>\n</tr>\n<tr>\n<td class=\"rdoc-term\"><p>Caching</p></td> <td> <p>Simple route and fragment caching to easily speed up your web requests.</p> </td>\n</tr>\n<tr>\n<td class=\"rdoc-term\"><p>Admin</p></td> <td> <p>Built-in Admin interface (like Django)</p> </td>\n</tr>\n<tr>\n<td class=\"rdoc-term\"><p>Logging</p></td> <td> <p>Provide a unified logger that can interact with your ORM or any library.</p> </td>\n</tr>\n<tr>\n<td class=\"rdoc-term\"><p>Reloading</p></td> <td> <p>Automatically reloads server code during development.</p> </td>\n</tr>\n<tr>\n<td class=\"rdoc-term\"><p>Localization</p></td> <td> <p>Full support of I18n language localization and can auto-set user's locale.</p> </td>\n</tr>\n</table> <p>Keep in mind, developers are able to individually pull in these modular components <a href=\"http://padrinorb.com/guides/advanced-usage/standalone-usage-in-sinatra/\">into existing Sinatra applications</a> or use them altogether for a full-stack Padrino application.</p> <h2>Installation</h2> <p>To install the padrino framework, simply grab the latest version from <a href=\"https://rubygems.org\">RubyGems</a>:</p> <pre class=\"code ruby\" data-language=\"ruby\">$ gem install padrino</pre> <p>This will install the necessary padrino gems to get you started. Now you are ready to use this gem to enhance your Sinatra projects or to create new Padrino applications.</p> <p>For a more detailed look at installing Padrino, check out the <a href=\"http://padrinorb.com/guides/getting-started/installation/\">Installation Guide</a>.</p> <h2>Usage</h2> <p>Padrino is a framework which builds on the existing functionality of Sinatra and provides a variety of additional tools and helpers to build upon that foundation. This README and Padrino documentation in general will focus on the enhancements to the core Sinatra functionality. To use Padrino, one should be familiar with the basic usage of Sinatra itself.</p> <p>You can also check out the <a href=\"http://padrinorb.com/guides/introduction/why-learn-padrino/\">Why Learn Padrino?</a> introduction to learn more about how Sinatra and Padrino work together.</p> <p>For information on how to use a specific gem in isolation within an existing Sinatra project, checkout the guide for <a href=\"http://www.padrinorb.com/guides/standalone-usage-in-sinatra\">Using Padrino within Sinatra</a>.</p> <h2>Getting Started</h2> <p>Once a developer understands Sinatra, Padrino is quite easy to get comfortable with since Padrino is simply a superset of existing Sinatra functionality!</p> <p>First, be sure to read over the <a href=\"http://www.padrinorb.com/guides/getting-started\">Getting Started</a> guide to learn more about how Sinatra and Padrino work together.</p> <p>Best way to learn more about building Padrino applications is to read following resources:</p> <ul>\n<li> <p><a href=\"http://www.padrinorb.com/guides\">Padrino Guides</a> - Guides outlining the major functionality within Padrino.</p> </li>\n<li> <p><a href=\"http://padrinorb.com/guides/getting-started/blog-tutorial/\">Blog Tutorial</a> - Step-by-step guide to building a blog application with Padrino.</p> </li>\n<li> <p><a href=\"http://www.rubydoc.info/github/padrino/padrino-framework\">Padrino API</a> - YARD documentation for the Padrino framework.</p> </li>\n<li> <p><a href=\"http://padrinorb.com/guides/getting-started/basic-projects/\">Quick Overview</a> - Outlines basic generation commands.</p> </li>\n</ul> <p>The individual Padrino sub-gems also contain README's which outlines their functionality.</p> <h2>Further Questions</h2> <p>Can't find an answer in the resources above?</p> <ul><li> <p>Ask any questions on the .</p> </li></ul> <h2>Bug reporting</h2> <p>Log it onto Github by <a href=\"http://github.com/padrino/padrino-framework/issues\">creating a new issue</a>.</p> <p>Be sure to include all relevant information, like the versions of Padrino, Rack, Sinatra, Ruby and operating system you are using.</p> <p>A minimal project showing the issue published on Github with Gemfile.lock is also extremely helpful.</p> <h2>Copyright</h2> <p>Copyright © 2010-2016 Padrino. See LICENSE for details.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/file/README.rdoc\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/file/README.rdoc</a>\n  </p>\n</div>\n","toplevel":"<h1>Top Level Namespace </h1>  <h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"modules\">Modules:</strong> <span class=\"object_link\"><a href=\"fileset\" title=\"FileSet (module)\">FileSet</a></span>, <span class=\"object_link\"><a href=\"haml\" title=\"Haml (module)\">Haml</a></span>, <span class=\"object_link\"><a href=\"kernel\" title=\"Kernel (module)\">Kernel</a></span>, <span class=\"object_link\"><a href=\"objectspace\" title=\"ObjectSpace (module)\">ObjectSpace</a></span>, <span class=\"object_link\"><a href=\"padrino\" title=\"Padrino (module)\">Padrino</a></span> <strong class=\"classes\">Classes:</strong> <span class=\"object_link\"><a href=\"module\" title=\"Module (class)\">Module</a></span>, <span class=\"object_link\"><a href=\"string\" title=\"String (class)\">String</a></span> </p> <h2>Constant Summary</h2> <dl class=\"constants\"> <dt id=\"RACK_ENV-constant\" class=\"\">RACK_ENV = </dt> <dd><pre class=\"code\" data-language=\"ruby\">ENV['RACK_ENV'] ||= 'development'</pre></dd> <dt id=\"PADRINO_ROOT-constant\" class=\"\">PADRINO_ROOT = </dt> <dd><pre class=\"code\" data-language=\"ruby\">File.expand_path('../..', __FILE__)</pre></dd> <dt id=\"PADRINO_I18N_LOCALE-constant\" class=\"\">PADRINO_I18N_LOCALE = </dt> <dd><pre class=\"code\" data-language=\"ruby\">true</pre></dd> <dt id=\"PADRINO_LOG_LEVEL-constant\" class=\"\">PADRINO_LOG_LEVEL = </dt> <dd><pre class=\"code\" data-language=\"ruby\">ENV['PADRINO_LOG_LEVEL']</pre></dd> <dt id=\"PADRINO_LOGGER-constant\" class=\"\">PADRINO_LOGGER = </dt> <dd><pre class=\"code\" data-language=\"ruby\">ENV['PADRINO_LOGGER']</pre></dd> </dl> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"toplevel#root-instance_method\" title=\"#root (instance method)\">#<strong>root</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Require initializers before all other dependencies. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"root-instance_method\"> #root ⇒ Object </h3>   <p>Require initializers before all other dependencies. Dependencies from 'config' folder are NOT re-required on reload.</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/toplevel\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/toplevel</a>\n  </p>\n</div>\n","padrino/admin/accesscontrol":"<h1>Module: Padrino::Admin::AccessControl </h1>  <h2>Overview</h2>  <p>This module enables access control functionality within a Padrino application.</p>   \n<h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"classes\">Classes:</strong> <span class=\"object_link\"><a href=\"accesscontrol/authorization\" title=\"Padrino::Admin::AccessControl::Authorization (class)\">Authorization</a></span>, <span class=\"object_link\"><a href=\"accesscontrol/base\" title=\"Padrino::Admin::AccessControl::Base (class)\">Base</a></span>, <span class=\"object_link\"><a href=\"accesscontrol/projectmodule\" title=\"Padrino::Admin::AccessControl::ProjectModule (class)\">ProjectModule</a></span> </p> <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"accesscontrol#registered-class_method\" title=\"registered (class method)\">.<strong>registered</strong>(app) ⇒ Object</a> (also: included)</code> <span class=\"summary_desc\"> Method used by Padrino::Application when we register the extension. </span> </li> </ul>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"registered-class_method\"> .registered(app) ⇒ Object Also known as: included  </h3>   <p>Method used by Padrino::Application when we register the extension.</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/AccessControl\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/AccessControl</a>\n  </p>\n</div>\n","padrino/admin/accesscontrolerror":"<h1>Exception: Padrino::Admin::AccessControlError </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">StandardError</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">StandardError</li> <li class=\"next\">Padrino::Admin::AccessControlError</li> </ul>  </dd> </dl>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/AccessControlError\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/AccessControlError</a>\n  </p>\n</div>\n","padrino/generators/admin":"<h1>Module: Padrino::Generators::Admin </h1>  <h2>Overview</h2>  <p>Generator action definitions for the admin panel.</p>   \n<h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"modules\">Modules:</strong> <span class=\"object_link\"><a href=\"admin/actions\" title=\"Padrino::Generators::Admin::Actions (module)\">Actions</a></span> </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Admin\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Admin</a>\n  </p>\n</div>\n","padrino/admin":"<h1>Module: Padrino::Admin </h1>  <h2>Overview</h2>  <p>Padrino::Admin is beautiful Ajax Admin, with these features:</p> <table class=\"rdoc-list\">\n<tr>\n<td class=\"rdoc-term\"><p>Orm Agnostic</p></td> <td> <p>Adapters for datamapper, activerecord, mongomapper, couchdb (now only: datamapper and activerecord), ohm</p> </td>\n</tr>\n<tr>\n<td class=\"rdoc-term\"><p>Authentication</p></td> <td> <p>Support for Account authentication, Account Permission management</p> </td>\n</tr>\n<tr>\n<td class=\"rdoc-term\"><p>Scaffold</p></td> <td> <p>You can simply create a new “admin interface” simply providing a Model</p> </td>\n</tr>\n<tr>\n<td class=\"rdoc-term\"><p>Ajax Uploads</p></td> <td> <p>You can upload file, manage them and attach them to any model in a quick and simple way (coming soon)</p> </td>\n</tr>\n</table>   \n<h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"modules\">Modules:</strong> <span class=\"object_link\"><a href=\"admin/accesscontrol\" title=\"Padrino::Admin::AccessControl (module)\">AccessControl</a></span>, <span class=\"object_link\"><a href=\"admin/generators\" title=\"Padrino::Admin::Generators (module)\">Generators</a></span>, <span class=\"object_link\"><a href=\"admin/helpers\" title=\"Padrino::Admin::Helpers (module)\">Helpers</a></span> <strong class=\"classes\">Classes:</strong> <span class=\"object_link\"><a href=\"admin/accesscontrolerror\" title=\"Padrino::Admin::AccessControlError (class)\">AccessControlError</a></span> </p> <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"admin#registered-class_method\" title=\"registered (class method)\">.<strong>registered</strong>(app) ⇒ Object</a> (also: included)</code>  </li> </ul>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"registered-class_method\"> .registered(app) ⇒ Object Also known as: included  </h3>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin</a>\n  </p>\n</div>\n","padrino/generators/approotnotfound":"<h1>Exception: Padrino::Generators::AppRootNotFound </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">RuntimeError</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">RuntimeError</li> <li class=\"next\">Padrino::Generators::AppRootNotFound</li> </ul>  </dd> </dl>  </div> <h2>Overview</h2>  <p>Raised when an application does not have a resolved root path.</p>   <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/AppRootNotFound\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/AppRootNotFound</a>\n  </p>\n</div>\n","padrino/helpers/outputhelpers/abstracthandler":"<h1>Class: Padrino::Helpers::OutputHelpers::AbstractHandler </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Object</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Padrino::Helpers::OutputHelpers::AbstractHandler</li> </ul>  </dd> </dl>  </div> <div id=\"subclasses\"> <h2>Direct Known Subclasses</h2> <p class=\"children\"><span class=\"object_link\"><a href=\"erbhandler\" title=\"Padrino::Helpers::OutputHelpers::ErbHandler (class)\">ErbHandler</a></span>, <span class=\"object_link\"><a href=\"hamlhandler\" title=\"Padrino::Helpers::OutputHelpers::HamlHandler (class)\">HamlHandler</a></span>, <span class=\"object_link\"><a href=\"slimhandler\" title=\"Padrino::Helpers::OutputHelpers::SlimHandler (class)\">SlimHandler</a></span></p> </div> <h2>Instance Attribute Summary \n</h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstracthandler#output_buffer-instance_method\" title=\"#output_buffer (instance method)\">#<strong>output_buffer</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute output_buffer. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstracthandler#template-instance_method\" title=\"#template (instance method)\">#<strong>template</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute template. </span> </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstracthandler#capture_from_template-instance_method\" title=\"#capture_from_template (instance method)\">#<strong>capture_from_template</strong>(*args, &amp;block) ⇒ Object</a></code> <span class=\"summary_desc\"> Captures the html from a block of template code for this handler. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstracthandler#concat_to_template-instance_method\" title=\"#concat_to_template (instance method)\">#<strong>concat_to_template</strong>(text = \"\") ⇒ Object</a></code> <span class=\"summary_desc\"> Outputs the given text to the template. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstracthandler#engine_matches%3F-instance_method\" title=\"#engine_matches? (instance method)\">#<strong>engine_matches?</strong>(block) ⇒ Boolean</a></code> <span class=\"summary_desc\"> Returns true if the block given is of the handler's template type; false otherwise. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstracthandler#initialize-instance_method\" title=\"#initialize (instance method)\">#<strong>initialize</strong>(template) ⇒ AbstractHandler</a></code> <span class=\"note title constructor\">constructor</span> <span class=\"summary_desc\"> A new instance of AbstractHandler. </span> </li> </ul>  <h2>Constructor Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"initialize-instance_method\"> #initialize(template) ⇒ AbstractHandler </h3>   <p>Returns a new instance of AbstractHandler</p>    </div>   <h2>Instance Attribute Details</h2>  <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"output_buffer-instance_method\"> #output_buffer ⇒ Object </h3>   <p>Returns the value of attribute output_buffer</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"template-instance_method\"> #template ⇒ Object (readonly) </h3>   <p>Returns the value of attribute template</p>    </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"capture_from_template-instance_method\"> #capture_from_template(*args, &amp;block) ⇒ Object </h3>   <p>Captures the html from a block of template code for this handler.</p> <p>This method is called to capture content of a block-loving helpers in templates. Haml has a special method to do this, for Erb and Slim we save original buffer, call the block and then restore the buffer.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">@handler.capture_from_template(&amp;block) =&gt; \"...html...\"</pre> </div> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"concat_to_template-instance_method\"> #concat_to_template(text = \"\") ⇒ Object </h3>   <p>Outputs the given text to the template.</p> <p>This method is called when template uses block-aware helpers. For Slim and Haml such helpers just return output to use with `=`. For Erb this method is implemented in ErbHandler by concatenating given text to output buffer.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">@handler.concat_to_template(\"This will be output to the template buffer\")</pre> </div> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"engine_matches?-instance_method\"> #engine_matches?(block) ⇒ Boolean </h3>   <p>Returns true if the block given is of the handler's template type; false otherwise.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">@handler.engine_matches?(block) =&gt; true</pre> </div> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/AbstractHandler\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/AbstractHandler</a>\n  </p>\n</div>\n","padrino/generators/admin/actions":"<h1>Module: Padrino::Generators::Admin::Actions </h1> <div class=\"box_info\"> <dl> <dt>Included in:</dt> <dd>\n<span class=\"object_link\"><a href=\"../adminapp\" title=\"Padrino::Generators::AdminApp (class)\">Padrino::Generators::AdminApp</a></span>, <span class=\"object_link\"><a href=\"../adminpage\" title=\"Padrino::Generators::AdminPage (class)\">Padrino::Generators::AdminPage</a></span>\n</dd> </dl>  </div> <h2>Overview</h2>  <p>Important tasks for setting up or configuring the admin application.</p>    <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#add_project_module-instance_method\" title=\"#add_project_module (instance method)\">#<strong>add_project_module</strong>(controller) ⇒ Object</a></code> <span class=\"summary_desc\"> Add access_control permission in our app.rb. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#ext-instance_method\" title=\"#ext (instance method)\">#<strong>ext</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Tell us which rendering engine you are using. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#fetch_app_name-instance_method\" title=\"#fetch_app_name (instance method)\">#<strong>fetch_app_name</strong>(app = 'app') ⇒ String</a></code> <span class=\"summary_desc\"> Returns the app_name for the application at root. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#orm-instance_method\" title=\"#orm (instance method)\">#<strong>orm</strong> ⇒ Object</a> (also: #adapter)</code> <span class=\"summary_desc\"> Tell us which orm we are using. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#remove_project_module-instance_method\" title=\"#remove_project_module (instance method)\">#<strong>remove_project_module</strong>(controller) ⇒ Object</a></code> <span class=\"summary_desc\"> Remove from access_control permissions. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#supported_ext-instance_method\" title=\"#supported_ext (instance method)\">#<strong>supported_ext</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Tell us for now which rendering engine we support. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#supported_orm-instance_method\" title=\"#supported_orm (instance method)\">#<strong>supported_orm</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Tell us for now which orm we support. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"add_project_module-instance_method\"> #add_project_module(controller) ⇒ Object </h3>   <p>Add access_control permission in our app.rb.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"ext-instance_method\"> #ext ⇒ Object </h3>   <p>Tell us which rendering engine you are using.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"fetch_app_name-instance_method\"> #fetch_app_name(app = 'app') ⇒ String </h3>   <p>Returns the app_name for the application at root.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">fetch_app_name('subapp')</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">app</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../../string\" title=\"String (class)\">String</a></span></code>)</span> <em class=\"default\">(defaults to: <code>'app'</code>)</em> —  folder name of application.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../../string\" title=\"String (class)\">String</a></span></code>)</span> —  module name for application.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"orm-instance_method\"> #orm ⇒ Object Also known as: adapter  </h3>   <p>Tell us which orm we are using.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"remove_project_module-instance_method\"> #remove_project_module(controller) ⇒ Object </h3>   <p>Remove from access_control permissions.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"supported_ext-instance_method\"> #supported_ext ⇒ Object </h3>   <p>Tell us for now which rendering engine we support.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"supported_orm-instance_method\"> #supported_orm ⇒ Object </h3>   <p>Tell us for now which orm we support</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Admin/Actions\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Admin/Actions</a>\n  </p>\n</div>\n","padrino/generators/app":"<h1>Class: Padrino::Generators::App </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Thor::Group</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Thor::Group</li> <li class=\"next\">Padrino::Generators::App</li> </ul>  </dd> </dl> <dl> <dt>Includes:</dt> <dd>\n<span class=\"object_link\"><a href=\"actions\" title=\"Padrino::Generators::Actions (module)\">Actions</a></span>, Thor::Actions</dd> </dl>  </div> <h2>Overview</h2>  <p>Responsible for applications within a Padrino project. Creates and mounts the application and gives the user related information.</p>    <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"app#banner-class_method\" title=\"banner (class method)\">.<strong>banner</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"app#source_root-class_method\" title=\"source_root (class method)\">.<strong>source_root</strong> ⇒ Object</a></code>  </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"app#create_app-instance_method\" title=\"#create_app (instance method)\">#<strong>create_app</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Copies over the Padrino base admin application. </span> </li> </ul> <h3 class=\"inherited\">Methods included from Actions</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"actions#already_exists%3F-instance_method\" title=\"Padrino::Generators::Actions#already_exists? (method)\">#already_exists?</a></span>, <span class=\"object_link\"><a href=\"actions#app_skeleton-instance_method\" title=\"Padrino::Generators::Actions#app_skeleton (method)\">#app_skeleton</a></span>, <span class=\"object_link\"><a href=\"actions#apply_component_for-instance_method\" title=\"Padrino::Generators::Actions#apply_component_for (method)\">#apply_component_for</a></span>, <span class=\"object_link\"><a href=\"actions#apply_default_fields-instance_method\" title=\"Padrino::Generators::Actions#apply_default_fields (method)\">#apply_default_fields</a></span>, <span class=\"object_link\"><a href=\"actions#ask-instance_method\" title=\"Padrino::Generators::Actions#ask (method)\">#ask</a></span>, <span class=\"object_link\"><a href=\"actions#check_app_existence-instance_method\" title=\"Padrino::Generators::Actions#check_app_existence (method)\">#check_app_existence</a></span>, <span class=\"object_link\"><a href=\"actions#destination_root-instance_method\" title=\"Padrino::Generators::Actions#destination_root (method)\">#destination_root</a></span>, <span class=\"object_link\"><a href=\"actions#empty_directory_with_keep_file-instance_method\" title=\"Padrino::Generators::Actions#empty_directory_with_keep_file (method)\">#empty_directory_with_keep_file</a></span>, <span class=\"object_link\"><a href=\"actions#execute_component_setup-instance_method\" title=\"Padrino::Generators::Actions#execute_component_setup (method)\">#execute_component_setup</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_app_name-instance_method\" title=\"Padrino::Generators::Actions#fetch_app_name (method)\">#fetch_app_name</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_component_choice-instance_method\" title=\"Padrino::Generators::Actions#fetch_component_choice (method)\">#fetch_component_choice</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_project_name-instance_method\" title=\"Padrino::Generators::Actions#fetch_project_name (method)\">#fetch_project_name</a></span>, <span class=\"object_link\"><a href=\"actions#in_app_root%3F-instance_method\" title=\"Padrino::Generators::Actions#in_app_root? (method)\">#in_app_root?</a></span>, <span class=\"object_link\"><a href=\"actions#include_component_module_for-instance_method\" title=\"Padrino::Generators::Actions#include_component_module_for (method)\">#include_component_module_for</a></span>, <span class=\"object_link\"><a href=\"actions#initializer-instance_method\" title=\"Padrino::Generators::Actions#initializer (method)\">#initializer</a></span>, <span class=\"object_link\"><a href=\"actions#inject_into_file-instance_method\" title=\"Padrino::Generators::Actions#inject_into_file (method)\">#inject_into_file</a></span>, <span class=\"object_link\"><a href=\"actions#insert_hook-instance_method\" title=\"Padrino::Generators::Actions#insert_hook (method)\">#insert_hook</a></span>, <span class=\"object_link\"><a href=\"actions#insert_into_gemfile-instance_method\" title=\"Padrino::Generators::Actions#insert_into_gemfile (method)\">#insert_into_gemfile</a></span>, <span class=\"object_link\"><a href=\"actions#insert_middleware-instance_method\" title=\"Padrino::Generators::Actions#insert_middleware (method)\">#insert_middleware</a></span>, <span class=\"object_link\"><a href=\"actions#invalid_fields-instance_method\" title=\"Padrino::Generators::Actions#invalid_fields (method)\">#invalid_fields</a></span>, <span class=\"object_link\"><a href=\"actions#keep_file-instance_method\" title=\"Padrino::Generators::Actions#keep_file (method)\">#keep_file</a></span>, <span class=\"object_link\"><a href=\"actions#middleware-instance_method\" title=\"Padrino::Generators::Actions#middleware (method)\">#middleware</a></span>, <span class=\"object_link\"><a href=\"actions#recognize_path-instance_method\" title=\"Padrino::Generators::Actions#recognize_path (method)\">#recognize_path</a></span>, <span class=\"object_link\"><a href=\"actions#require_contrib-instance_method\" title=\"Padrino::Generators::Actions#require_contrib (method)\">#require_contrib</a></span>, <span class=\"object_link\"><a href=\"actions#require_dependencies-instance_method\" title=\"Padrino::Generators::Actions#require_dependencies (method)\">#require_dependencies</a></span>, <span class=\"object_link\"><a href=\"actions#resolve_valid_choice-instance_method\" title=\"Padrino::Generators::Actions#resolve_valid_choice (method)\">#resolve_valid_choice</a></span>, <span class=\"object_link\"><a href=\"actions#retrieve_component_config-instance_method\" title=\"Padrino::Generators::Actions#retrieve_component_config (method)\">#retrieve_component_config</a></span>, <span class=\"object_link\"><a href=\"actions#run_bundler-instance_method\" title=\"Padrino::Generators::Actions#run_bundler (method)\">#run_bundler</a></span>, <span class=\"object_link\"><a href=\"actions#store_component_choice-instance_method\" title=\"Padrino::Generators::Actions#store_component_choice (method)\">#store_component_choice</a></span>, <span class=\"object_link\"><a href=\"actions#store_component_config-instance_method\" title=\"Padrino::Generators::Actions#store_component_config (method)\">#store_component_config</a></span>, <span class=\"object_link\"><a href=\"actions#test%3F-instance_method\" title=\"Padrino::Generators::Actions#test? (method)\">#test?</a></span>, <span class=\"object_link\"><a href=\"actions#tiny%3F-instance_method\" title=\"Padrino::Generators::Actions#tiny? (method)\">#tiny?</a></span>, <span class=\"object_link\"><a href=\"actions#valid_choice%3F-instance_method\" title=\"Padrino::Generators::Actions#valid_choice? (method)\">#valid_choice?</a></span>, <span class=\"object_link\"><a href=\"actions#valid_constant%3F-instance_method\" title=\"Padrino::Generators::Actions#valid_constant? (method)\">#valid_constant?</a></span>, <span class=\"object_link\"><a href=\"actions#validate_namespace-instance_method\" title=\"Padrino::Generators::Actions#validate_namespace (method)\">#validate_namespace</a></span></p>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"banner-class_method\"> .banner ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"source_root-class_method\"> .source_root ⇒ Object </h3>  </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"create_app-instance_method\"> #create_app ⇒ Object </h3>   <p>Copies over the Padrino base admin application.</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/App\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/App</a>\n  </p>\n</div>\n","padrino/applicationsetup":"<h1>Module: Padrino::ApplicationSetup </h1>  <h2>Overview</h2>  <p>Holds setup-oriented methods for Padrino::Application.</p>   \n<h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"modules\">Modules:</strong> <span class=\"object_link\"><a href=\"applicationsetup/classmethods\" title=\"Padrino::ApplicationSetup::ClassMethods (module)\">ClassMethods</a></span> </p> <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"applicationsetup#registered-class_method\" title=\"registered (class method)\">.<strong>registered</strong>(app) ⇒ Object</a></code>  </li> </ul>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"registered-class_method\"> .registered(app) ⇒ Object </h3>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/ApplicationSetup\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/ApplicationSetup</a>\n  </p>\n</div>\n","padrino/authenticitytoken":"<h1>Class: Padrino::AuthenticityToken </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Rack::Protection::AuthenticityToken</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Rack::Protection::AuthenticityToken</li> <li class=\"next\">Padrino::AuthenticityToken</li> </ul>  </dd> </dl>  </div> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"authenticitytoken#call-instance_method\" title=\"#call (instance method)\">#<strong>call</strong>(env) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"authenticitytoken#except%3F-instance_method\" title=\"#except? (instance method)\">#<strong>except?</strong>(env) ⇒ Boolean</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"authenticitytoken#initialize-instance_method\" title=\"#initialize (instance method)\">#<strong>initialize</strong>(app, options = {}) ⇒ AuthenticityToken</a></code> <span class=\"note title constructor\">constructor</span> <span class=\"summary_desc\"> A new instance of AuthenticityToken. </span> </li> </ul>  <h2>Constructor Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"initialize-instance_method\"> #initialize(app, options = {}) ⇒ AuthenticityToken </h3>   <p>Returns a new instance of AuthenticityToken</p>    </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"call-instance_method\"> #call(env) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"except?-instance_method\"> #except?(env) ⇒ Boolean </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/AuthenticityToken\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/AuthenticityToken</a>\n  </p>\n</div>\n","padrino/generators/adminpage":"<h1>Class: Padrino::Generators::AdminPage </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Thor::Group</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Thor::Group</li> <li class=\"next\">Padrino::Generators::AdminPage</li> </ul>  </dd> </dl> <dl> <dt>Includes:</dt> <dd>\n<span class=\"object_link\"><a href=\"actions\" title=\"Padrino::Generators::Actions (module)\">Actions</a></span>, <span class=\"object_link\"><a href=\"admin/actions\" title=\"Padrino::Generators::Admin::Actions (module)\">Padrino::Generators::Admin::Actions</a></span>, Thor::Actions</dd> </dl>  </div> <h2>Overview</h2>  <p>Defines the generator for creating a new admin page.</p>    <h2>Instance Attribute Summary \n</h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"adminpage#default_orm-instance_method\" title=\"#default_orm (instance method)\">#<strong>default_orm</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the value of attribute default_orm. </span> </li> </ul> <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"adminpage#banner-class_method\" title=\"banner (class method)\">.<strong>banner</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Defines the “banner” text for the CLI. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"adminpage#source_root-class_method\" title=\"source_root (class method)\">.<strong>source_root</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Define the source template root. </span> </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"adminpage#create_controller-instance_method\" title=\"#create_controller (instance method)\">#<strong>create_controller</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Create controller for admin. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"adminpage#source_paths-instance_method\" title=\"#source_paths (instance method)\">#<strong>source_paths</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Look for custom template files in a generators folder under the project root. </span> </li> </ul> <h3 class=\"inherited\">Methods included from Padrino::Generators::Admin::Actions</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"admin/actions#add_project_module-instance_method\" title=\"Padrino::Generators::Admin::Actions#add_project_module (method)\">#add_project_module</a></span>, <span class=\"object_link\"><a href=\"admin/actions#ext-instance_method\" title=\"Padrino::Generators::Admin::Actions#ext (method)\">#ext</a></span>, <span class=\"object_link\"><a href=\"admin/actions#fetch_app_name-instance_method\" title=\"Padrino::Generators::Admin::Actions#fetch_app_name (method)\">#fetch_app_name</a></span>, <span class=\"object_link\"><a href=\"admin/actions#orm-instance_method\" title=\"Padrino::Generators::Admin::Actions#orm (method)\">#orm</a></span>, <span class=\"object_link\"><a href=\"admin/actions#remove_project_module-instance_method\" title=\"Padrino::Generators::Admin::Actions#remove_project_module (method)\">#remove_project_module</a></span>, <span class=\"object_link\"><a href=\"admin/actions#supported_ext-instance_method\" title=\"Padrino::Generators::Admin::Actions#supported_ext (method)\">#supported_ext</a></span>, <span class=\"object_link\"><a href=\"admin/actions#supported_orm-instance_method\" title=\"Padrino::Generators::Admin::Actions#supported_orm (method)\">#supported_orm</a></span></p> <h3 class=\"inherited\">Methods included from Actions</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"actions#already_exists%3F-instance_method\" title=\"Padrino::Generators::Actions#already_exists? (method)\">#already_exists?</a></span>, <span class=\"object_link\"><a href=\"actions#app_skeleton-instance_method\" title=\"Padrino::Generators::Actions#app_skeleton (method)\">#app_skeleton</a></span>, <span class=\"object_link\"><a href=\"actions#apply_component_for-instance_method\" title=\"Padrino::Generators::Actions#apply_component_for (method)\">#apply_component_for</a></span>, <span class=\"object_link\"><a href=\"actions#apply_default_fields-instance_method\" title=\"Padrino::Generators::Actions#apply_default_fields (method)\">#apply_default_fields</a></span>, <span class=\"object_link\"><a href=\"actions#ask-instance_method\" title=\"Padrino::Generators::Actions#ask (method)\">#ask</a></span>, <span class=\"object_link\"><a href=\"actions#check_app_existence-instance_method\" title=\"Padrino::Generators::Actions#check_app_existence (method)\">#check_app_existence</a></span>, <span class=\"object_link\"><a href=\"actions#destination_root-instance_method\" title=\"Padrino::Generators::Actions#destination_root (method)\">#destination_root</a></span>, <span class=\"object_link\"><a href=\"actions#empty_directory_with_keep_file-instance_method\" title=\"Padrino::Generators::Actions#empty_directory_with_keep_file (method)\">#empty_directory_with_keep_file</a></span>, <span class=\"object_link\"><a href=\"actions#execute_component_setup-instance_method\" title=\"Padrino::Generators::Actions#execute_component_setup (method)\">#execute_component_setup</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_app_name-instance_method\" title=\"Padrino::Generators::Actions#fetch_app_name (method)\">#fetch_app_name</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_component_choice-instance_method\" title=\"Padrino::Generators::Actions#fetch_component_choice (method)\">#fetch_component_choice</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_project_name-instance_method\" title=\"Padrino::Generators::Actions#fetch_project_name (method)\">#fetch_project_name</a></span>, <span class=\"object_link\"><a href=\"actions#in_app_root%3F-instance_method\" title=\"Padrino::Generators::Actions#in_app_root? (method)\">#in_app_root?</a></span>, <span class=\"object_link\"><a href=\"actions#include_component_module_for-instance_method\" title=\"Padrino::Generators::Actions#include_component_module_for (method)\">#include_component_module_for</a></span>, <span class=\"object_link\"><a href=\"actions#initializer-instance_method\" title=\"Padrino::Generators::Actions#initializer (method)\">#initializer</a></span>, <span class=\"object_link\"><a href=\"actions#inject_into_file-instance_method\" title=\"Padrino::Generators::Actions#inject_into_file (method)\">#inject_into_file</a></span>, <span class=\"object_link\"><a href=\"actions#insert_hook-instance_method\" title=\"Padrino::Generators::Actions#insert_hook (method)\">#insert_hook</a></span>, <span class=\"object_link\"><a href=\"actions#insert_into_gemfile-instance_method\" title=\"Padrino::Generators::Actions#insert_into_gemfile (method)\">#insert_into_gemfile</a></span>, <span class=\"object_link\"><a href=\"actions#insert_middleware-instance_method\" title=\"Padrino::Generators::Actions#insert_middleware (method)\">#insert_middleware</a></span>, <span class=\"object_link\"><a href=\"actions#invalid_fields-instance_method\" title=\"Padrino::Generators::Actions#invalid_fields (method)\">#invalid_fields</a></span>, <span class=\"object_link\"><a href=\"actions#keep_file-instance_method\" title=\"Padrino::Generators::Actions#keep_file (method)\">#keep_file</a></span>, <span class=\"object_link\"><a href=\"actions#middleware-instance_method\" title=\"Padrino::Generators::Actions#middleware (method)\">#middleware</a></span>, <span class=\"object_link\"><a href=\"actions#recognize_path-instance_method\" title=\"Padrino::Generators::Actions#recognize_path (method)\">#recognize_path</a></span>, <span class=\"object_link\"><a href=\"actions#require_contrib-instance_method\" title=\"Padrino::Generators::Actions#require_contrib (method)\">#require_contrib</a></span>, <span class=\"object_link\"><a href=\"actions#require_dependencies-instance_method\" title=\"Padrino::Generators::Actions#require_dependencies (method)\">#require_dependencies</a></span>, <span class=\"object_link\"><a href=\"actions#resolve_valid_choice-instance_method\" title=\"Padrino::Generators::Actions#resolve_valid_choice (method)\">#resolve_valid_choice</a></span>, <span class=\"object_link\"><a href=\"actions#retrieve_component_config-instance_method\" title=\"Padrino::Generators::Actions#retrieve_component_config (method)\">#retrieve_component_config</a></span>, <span class=\"object_link\"><a href=\"actions#run_bundler-instance_method\" title=\"Padrino::Generators::Actions#run_bundler (method)\">#run_bundler</a></span>, <span class=\"object_link\"><a href=\"actions#store_component_choice-instance_method\" title=\"Padrino::Generators::Actions#store_component_choice (method)\">#store_component_choice</a></span>, <span class=\"object_link\"><a href=\"actions#store_component_config-instance_method\" title=\"Padrino::Generators::Actions#store_component_config (method)\">#store_component_config</a></span>, <span class=\"object_link\"><a href=\"actions#test%3F-instance_method\" title=\"Padrino::Generators::Actions#test? (method)\">#test?</a></span>, <span class=\"object_link\"><a href=\"actions#tiny%3F-instance_method\" title=\"Padrino::Generators::Actions#tiny? (method)\">#tiny?</a></span>, <span class=\"object_link\"><a href=\"actions#valid_choice%3F-instance_method\" title=\"Padrino::Generators::Actions#valid_choice? (method)\">#valid_choice?</a></span>, <span class=\"object_link\"><a href=\"actions#valid_constant%3F-instance_method\" title=\"Padrino::Generators::Actions#valid_constant? (method)\">#valid_constant?</a></span>, <span class=\"object_link\"><a href=\"actions#validate_namespace-instance_method\" title=\"Padrino::Generators::Actions#validate_namespace (method)\">#validate_namespace</a></span></p>  <h2>Instance Attribute Details</h2>  <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"default_orm-instance_method\"> #default_orm ⇒ Object </h3>   <p>Returns the value of attribute default_orm</p>    </div>   <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"banner-class_method\"> .banner ⇒ Object </h3>   <p>Defines the “banner” text for the CLI.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"source_root-class_method\"> .source_root ⇒ Object </h3>   <p>Define the source template root.</p>    </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"create_controller-instance_method\"> #create_controller ⇒ Object </h3>   <p>Create controller for admin.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"source_paths-instance_method\"> #source_paths ⇒ Object </h3>   <p>Look for custom template files in a generators folder under the project root.</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/AdminPage\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/AdminPage</a>\n  </p>\n</div>\n","padrino/mounter/applicationextension":"<h1>Module: Padrino::Mounter::ApplicationExtension </h1>  <h2>Instance Attribute Summary \n</h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"applicationextension#mounter_options-instance_method\" title=\"#mounter_options (instance method)\">#<strong>mounter_options</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the value of attribute mounter_options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"applicationextension#public_folder-instance_method\" title=\"#public_folder (instance method)\">#<strong>public_folder</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"applicationextension#uri_root-instance_method\" title=\"#uri_root (instance method)\">#<strong>uri_root</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the value of attribute uri_root. </span> </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"applicationextension#app_file-instance_method\" title=\"#app_file (instance method)\">#<strong>app_file</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"applicationextension#app_name-instance_method\" title=\"#app_name (instance method)\">#<strong>app_name</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"applicationextension#dependencies-instance_method\" title=\"#dependencies (instance method)\">#<strong>dependencies</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"applicationextension#prerequisites-instance_method\" title=\"#prerequisites (instance method)\">#<strong>prerequisites</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"applicationextension#root-instance_method\" title=\"#root (instance method)\">#<strong>root</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"applicationextension#setup_application%21-instance_method\" title=\"#setup_application! (instance method)\">#<strong>setup_application!</strong> ⇒ Object</a></code>  </li> </ul>  <h2>Instance Attribute Details</h2>  <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"mounter_options-instance_method\"> #mounter_options ⇒ Object </h3>   <p>Returns the value of attribute mounter_options</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"public_folder-instance_method\"> #public_folder ⇒ Object </h3>  </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"uri_root-instance_method\"> #uri_root ⇒ Object </h3>   <p>Returns the value of attribute uri_root</p>    </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"app_file-instance_method\"> #app_file ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"app_name-instance_method\"> #app_name ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"dependencies-instance_method\"> #dependencies ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"prerequisites-instance_method\"> #prerequisites ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"root-instance_method\"> #root ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"setup_application!-instance_method\"> #setup_application! ⇒ Object </h3>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mounter/ApplicationExtension\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mounter/ApplicationExtension</a>\n  </p>\n</div>\n","padrino/admin/helpers/authenticationhelpers":"<h1>Module: Padrino::Admin::Helpers::AuthenticationHelpers </h1>  <h2>Overview</h2>  <p>Common helpers used for authorization within an application.</p>    <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"authenticationhelpers#allowed%3F-instance_method\" title=\"#allowed? (instance method)\">#<strong>allowed?</strong> ⇒ Boolean</a></code> <span class=\"summary_desc\"> Returns true if the <code>current_account</code> is allowed to see the requested path. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"authenticationhelpers#current_account-instance_method\" title=\"#current_account (instance method)\">#<strong>current_account</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the current_account, it's an instance of Account model. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"authenticationhelpers#logged_in%3F-instance_method\" title=\"#logged_in? (instance method)\">#<strong>logged_in?</strong> ⇒ Boolean</a></code> <span class=\"summary_desc\"> Returns true if <code>current_account</code> is logged and active. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"authenticationhelpers#login_required-instance_method\" title=\"#login_required (instance method)\">#<strong>login_required</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns a helper useful in a <code>before_filter</code> for check if an account are: <code>logged_in?</code> and <code>allowed?</code>. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"authenticationhelpers#project_modules-instance_method\" title=\"#project_modules (instance method)\">#<strong>project_modules</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns project modules for the current account. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"authenticationhelpers#redirect_back_or_default-instance_method\" title=\"#redirect_back_or_default (instance method)\">#<strong>redirect_back_or_default</strong>(default) ⇒ Object</a></code> <span class=\"summary_desc\"> Redirect the account to the page that requested an authentication or if the account is not allowed/logged return it to a default page. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"authenticationhelpers#set_current_account-instance_method\" title=\"#set_current_account (instance method)\">#<strong>set_current_account</strong>(account = nil) ⇒ Object</a></code> <span class=\"summary_desc\"> Override the current_account, you must provide an instance of Account model. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"authenticationhelpers#store_location%21-instance_method\" title=\"#store_location! (instance method)\">#<strong>store_location!</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Store in <a href=\"#\">session</a> the <a href=\"#\">env</a>. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"allowed?-instance_method\"> #allowed? ⇒ Boolean </h3>   <p>Returns true if the <code>current_account</code> is allowed to see the requested path.</p> <p>For configure this role please refer to: <code>Padrino::Admin::AccessControl::Base</code></p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"current_account-instance_method\"> #current_account ⇒ Object </h3>   <p>Returns the current_account, it's an instance of Account model.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"logged_in?-instance_method\"> #logged_in? ⇒ Boolean </h3>   <p>Returns true if <code>current_account</code> is logged and active.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"login_required-instance_method\"> #login_required ⇒ Object </h3>   <p>Returns a helper useful in a <code>before_filter</code> for check if an account are: <code>logged_in?</code> and <code>allowed?</code></p> <p>By default this method is used in Admin Apps.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"project_modules-instance_method\"> #project_modules ⇒ Object </h3>   <p>Returns project modules for the current account.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"redirect_back_or_default-instance_method\"> #redirect_back_or_default(default) ⇒ Object </h3>   <p>Redirect the account to the page that requested an authentication or if the account is not allowed/logged return it to a default page.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"set_current_account-instance_method\"> #set_current_account(account = nil) ⇒ Object </h3>   <p>Override the current_account, you must provide an instance of Account model.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">set_current_account(Account.authenticate(params[:email], params[:password])</pre> </div> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"store_location!-instance_method\"> #store_location! ⇒ Object </h3>   <p>Store in <a href=\"#\">session</a> the <a href=\"#\">env</a>.</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Helpers/AuthenticationHelpers\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Helpers/AuthenticationHelpers</a>\n  </p>\n</div>\n","padrino/admin/accesscontrol/authorization":"<h1>Class: Padrino::Admin::AccessControl::Authorization </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Object</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Padrino::Admin::AccessControl::Authorization</li> </ul>  </dd> </dl>  </div> <h2>Overview</h2>  <p>Project Authorization Class.</p>    <h2>Instance Attribute Summary \n</h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"authorization#allowed-instance_method\" title=\"#allowed (instance method)\">#<strong>allowed</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute allowed. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"authorization#denied-instance_method\" title=\"#denied (instance method)\">#<strong>denied</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute denied. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"authorization#project_modules-instance_method\" title=\"#project_modules (instance method)\">#<strong>project_modules</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute project_modules. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"authorization#roles-instance_method\" title=\"#roles (instance method)\">#<strong>roles</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute roles. </span> </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"authorization#allow-instance_method\" title=\"#allow (instance method)\">#<strong>allow</strong>(path) ⇒ Object</a></code> <span class=\"summary_desc\"> Allow a specified path. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"authorization#initialize-instance_method\" title=\"#initialize (instance method)\">#<strong>initialize</strong>(*roles) {|_self| ... } ⇒ Authorization</a></code> <span class=\"note title constructor\">constructor</span> <span class=\"summary_desc\"> A new instance of Authorization. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"authorization#project_module-instance_method\" title=\"#project_module (instance method)\">#<strong>project_module</strong>(name, path, options = {}) ⇒ Object</a></code> <span class=\"summary_desc\"> Create a project module. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"authorization#protect-instance_method\" title=\"#protect (instance method)\">#<strong>protect</strong>(path) ⇒ Object</a></code> <span class=\"summary_desc\"> Protect access from. </span> </li> </ul>  <h2>Constructor Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"initialize-instance_method\"> #initialize(*roles) {|_self| ... } ⇒ Authorization </h3>   <p>Returns a new instance of Authorization</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Yields:</h4> <ul class=\"yield\"> <li> <span class=\"type\">(<code>_self</code>)</span> </li> </ul> <h4 class=\"tag_title\">Yield Parameters:</h4> <ul class=\"yieldparam\"> <li> <code class=\"name\">_self</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"authorization\" title=\"Padrino::Admin::AccessControl::Authorization (class)\">Padrino::Admin::AccessControl::Authorization</a></span></code>)</span> —  the object that the method was called on  </li> </ul> </div> </div>   <h2>Instance Attribute Details</h2>  <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"allowed-instance_method\"> #allowed ⇒ Object (readonly) </h3>   <p>Returns the value of attribute allowed</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"denied-instance_method\"> #denied ⇒ Object (readonly) </h3>   <p>Returns the value of attribute denied</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"project_modules-instance_method\"> #project_modules ⇒ Object (readonly) </h3>   <p>Returns the value of attribute project_modules</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"roles-instance_method\"> #roles ⇒ Object (readonly) </h3>   <p>Returns the value of attribute roles</p>    </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"allow-instance_method\"> #allow(path) ⇒ Object </h3>   <p>Allow a specified path.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"project_module-instance_method\"> #project_module(name, path, options = {}) ⇒ Object </h3>   <p>Create a project module.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"protect-instance_method\"> #protect(path) ⇒ Object </h3>   <p>Protect access from.</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/AccessControl/Authorization\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/AccessControl/Authorization</a>\n  </p>\n</div>\n","padrino/routing/blockarityerror":"<h1>Exception: Padrino::Routing::BlockArityError </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">ArgumentError</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">ArgumentError</li> <li class=\"next\">Padrino::Routing::BlockArityError</li> </ul>  </dd> </dl>  </div> <h2>Overview</h2>  <p>Raised when block arity was nonzero and was not same with captured parameter length.</p>    <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"blockarityerror#initialize-instance_method\" title=\"#initialize (instance method)\">#<strong>initialize</strong>(path, block_arity, required_arity) ⇒ BlockArityError</a></code> <span class=\"note title constructor\">constructor</span> <span class=\"summary_desc\"> A new instance of BlockArityError. </span> </li> </ul>  <h2>Constructor Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"initialize-instance_method\"> #initialize(path, block_arity, required_arity) ⇒ BlockArityError </h3>   <p>Returns a new instance of BlockArityError</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing/BlockArityError\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing/BlockArityError</a>\n  </p>\n</div>\n","padrino/cache/helpers/cachestore":"<h1>Module: Padrino::Cache::Helpers::CacheStore </h1>  <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"cachestore#expire-instance_method\" title=\"#expire (instance method)\">#<strong>expire</strong>(*key) ⇒ Object</a></code>  </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"expire-instance_method\"> #expire(*key) ⇒ Object </h3>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers/CacheStore\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers/CacheStore</a>\n  </p>\n</div>\n","padrino/cache/helpers/page/classmethods":"<h1>Module: Padrino::Cache::Helpers::Page::ClassMethods </h1>  <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#expires-instance_method\" title=\"#expires (instance method)\">#<strong>expires</strong>(time) ⇒ Object</a></code> <span class=\"summary_desc\"> A method to set `expires` time inside `controller` blocks. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"expires-instance_method\"> #expires(time) ⇒ Object </h3>   <p>A method to set `expires` time inside `controller` blocks.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">controller :users do\n  expires 15\n\n  get :show do\n    'shown'\n  end\nend</pre> </div> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers/Page/ClassMethods\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers/Page/ClassMethods</a>\n  </p>\n</div>\n","padrino/application":"<h1>Class: Padrino::Application </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Sinatra::Base</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Sinatra::Base</li> <li class=\"next\">Padrino::Application</li> </ul>  </dd> </dl>  </div> <h2>Overview</h2>  <p>Subclasses of this become independent Padrino applications (stemming from Sinatra::Application). These subclassed applications can be easily mounted into other Padrino applications as well.</p>    <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"application#default-class_method\" title=\"default (class method)\">.<strong>default</strong>(option, *args, &amp;block) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"application#dependencies-class_method\" title=\"dependencies (class method)\">.<strong>dependencies</strong> ⇒ Array</a></code> <span class=\"summary_desc\"> Returns default list of path globs to load as dependencies. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"application#layout_path-class_method\" title=\"layout_path (class method)\">.<strong>layout_path</strong>(layout) ⇒ Object</a></code> <span class=\"summary_desc\"> Returns an absolute path of application layout. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"application#prerequisites-class_method\" title=\"prerequisites (class method)\">.<strong>prerequisites</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> An array of file to load before your app.rb, basically are files which our app depends on. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"application#reload%21-class_method\" title=\"reload! (class method)\">.<strong>reload!</strong> ⇒ TrueClass</a></code> <span class=\"summary_desc\"> Reloads the application files from all defined load paths. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"application#reset_routes%21-class_method\" title=\"reset_routes! (class method)\">.<strong>reset_routes!</strong> ⇒ TrueClass</a></code> <span class=\"summary_desc\"> Resets application routes to only routes not defined by the user. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"application#routes-class_method\" title=\"routes (class method)\">.<strong>routes</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the routes of our app. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"application#run%21-class_method\" title=\"run! (class method)\">.<strong>run!</strong>(options = {}) ⇒ Object</a></code> <span class=\"summary_desc\"> Run the Padrino app as a self-hosted server using Thin, Mongrel or WEBrick (in that order). </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"application#view_path-class_method\" title=\"view_path (class method)\">.<strong>view_path</strong>(view) ⇒ Object</a></code> <span class=\"summary_desc\"> Returns an absolute path of view in application views folder. </span> </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"application#logger-instance_method\" title=\"#logger (instance method)\">#<strong>logger</strong> ⇒ Padrino::Logger</a></code> <span class=\"summary_desc\"> Returns the logger for this application. </span> </li> </ul>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"default-class_method\"> .default(option, *args, &amp;block) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"dependencies-class_method\"> .dependencies ⇒ Array </h3>   <p>Returns default list of path globs to load as dependencies. Appends custom dependency patterns to the be loaded for your Application.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">MyApp.dependencies &lt;&lt; \"#{Padrino.root}/uploaders/**/*.rb\"\nMyApp.dependencies &lt;&lt; Padrino.root('other_app', 'controllers.rb')</pre> </div> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Array</code>)</span> —  list of path globs to load as dependencies  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"layout_path-class_method\"> .layout_path(layout) ⇒ Object </h3>   <p>Returns an absolute path of application layout.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">Admin.layout_path :application #=&gt; \"/home/user/test/admin/views/layouts/application\"</pre> </div> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"prerequisites-class_method\"> .prerequisites ⇒ Object </h3>   <p>An array of file to load before your app.rb, basically are files which our app depends on.</p> <p>By default we look for files:</p> <pre class=\"code ruby\" data-language=\"ruby\"># List of default files that we are looking for:\nyourapp/models.rb\nyourapp/models/**/*.rb\nyourapp/lib.rb\nyourapp/lib/**/*.rb</pre>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4>  Adding a custom prerequisite  <pre class=\"example code\" data-language=\"ruby\">MyApp.prerequisites &lt;&lt; Padrino.root('my_app', 'custom_model.rb')</pre> </div> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"reload!-class_method\"> .reload! ⇒ TrueClass </h3>   <p>Reloads the application files from all defined load paths.</p> <p>This method is used from our Padrino Reloader during development mode in order to reload the source files.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">MyApp.reload!</pre> </div> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>TrueClass</code>)</span> </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"reset_routes!-class_method\"> .reset_routes! ⇒ TrueClass </h3>   <p>Resets application routes to only routes not defined by the user.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">MyApp.reset_routes!</pre> </div> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>TrueClass</code>)</span> </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"routes-class_method\"> .routes ⇒ Object </h3>   <p>Returns the routes of our app.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">MyApp.routes</pre> </div> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"run!-class_method\"> .run!(options = {}) ⇒ Object </h3>   <p>Run the Padrino app as a self-hosted server using Thin, Mongrel or WEBrick (in that order).</p>   <div class=\"tags\"> <h4 class=\"tag_title\">See Also:</h4> <ul class=\"see\"> <li><span class=\"object_link\"><a href=\"server#start-instance_method\" title=\"Padrino::Server#start (method)\">Server#start</a></span></li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"view_path-class_method\"> .view_path(view) ⇒ Object </h3>   <p>Returns an absolute path of view in application views folder.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">Admin.view_path 'users/index' #=&gt; \"/home/user/test/admin/views/users/index\"</pre> </div> </div> </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"logger-instance_method\"> #logger ⇒ Padrino::Logger </h3>   <p>Returns the logger for this application.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"logger\" title=\"Padrino::Logger (class)\">Padrino::Logger</a></span></code>)</span> —  Logger associated with this app.  </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Application\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Application</a>\n  </p>\n</div>\n","padrino/admin/accesscontrol/base":"<h1>Class: Padrino::Admin::AccessControl::Base </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Object</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Padrino::Admin::AccessControl::Base</li> </ul>  </dd> </dl>  </div> <h2>Overview</h2>  <p>This base access control class where roles are defined as are authorizations.</p>    <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"base#allowed%3F-instance_method\" title=\"#allowed? (instance method)\">#<strong>allowed?</strong>(account = nil, path = nil) ⇒ Boolean</a></code> <span class=\"summary_desc\"> Return true if the given account is allowed to see the given path. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"base#initialize-instance_method\" title=\"#initialize (instance method)\">#<strong>initialize</strong> ⇒ Base</a></code> <span class=\"note title constructor\">constructor</span> <span class=\"summary_desc\"> A new instance of Base. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"base#project_modules-instance_method\" title=\"#project_modules (instance method)\">#<strong>project_modules</strong>(account) ⇒ Object</a></code> <span class=\"summary_desc\"> Return an array of project_modules. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"base#roles-instance_method\" title=\"#roles (instance method)\">#<strong>roles</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Return an array of roles. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"base#roles_for-instance_method\" title=\"#roles_for (instance method)\">#<strong>roles_for</strong>(*roles, &amp;block) ⇒ Object</a></code> <span class=\"summary_desc\"> We map project modules for a given role or roles. </span> </li> </ul>  <h2>Constructor Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"initialize-instance_method\"> #initialize ⇒ Base </h3>   <p>Returns a new instance of Base</p>    </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"allowed?-instance_method\"> #allowed?(account = nil, path = nil) ⇒ Boolean </h3>   <p>Return true if the given account is allowed to see the given path.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4>  Hiding a disallowed link from a user.  <pre class=\"example code\" data-language=\"ruby\">\n# File: config/apps.rb\n# [...]\nPadrino.mount('Admin').to('/admin')\n\n# File: admin/app.rb\nclass Admin &lt; Padrino::Application\n  # [...]\n  register Padrino::Admin::AccessControl\n  # [...]\n\n  # Goals:\n  # * Admins can manage widgets and accounts.\n  # * Workers can only manage widgets.\n\n  access_control.roles_for :admin do |role|\n    role.project_module :accounts, '/accounts'\n    role.project_module :widgets, '/widgets'\n  end\n\n  access_control.roles_for :worker do |role|\n    role.project_module :widgets, '/widgets'\n  end\nend\n\n# File: admin/views/layouts/application.haml\n# NOTE The un-mounted path is used ('/accounts' instead of '/admin/accounts')\n- if access_control.allowed?(current_account, '/accounts')\n  # Admins see the \"Profile\" link, but Workers do not\n  = link_to 'Profile', url(:accounts, :edit, :id =&gt; current_account.id)</pre> </div> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"project_modules-instance_method\"> #project_modules(account) ⇒ Object </h3>   <p>Return an array of project_modules.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"roles-instance_method\"> #roles ⇒ Object </h3>   <p>Return an array of roles.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"roles_for-instance_method\"> #roles_for(*roles, &amp;block) ⇒ Object </h3>   <p>We map project modules for a given role or roles.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Raises:</h4> <ul class=\"raise\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../accesscontrolerror\" title=\"Padrino::Admin::AccessControlError (class)\">Padrino::Admin::AccessControlError</a></span></code>)</span> </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/AccessControl/Base\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/AccessControl/Base</a>\n  </p>\n</div>\n","padrino/mailer/base":"<h1>Class: Padrino::Mailer::Base </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Object</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Padrino::Mailer::Base</li> </ul>  </dd> </dl>  </div> <h2>Overview</h2>  <p>This is the abstract class that other mailers will inherit from in order to send mail.</p> <p>You can set the default delivery settings from your app through:</p> <pre class=\"code ruby\" data-language=\"ruby\">set :delivery_method, :smtp =&gt; {\n  :address         =&gt; 'smtp.yourserver.com',\n  :port            =&gt; '25',\n  :user_name       =&gt; 'user',\n  :password        =&gt; 'pass',\n  :authentication  =&gt; :plain\n}</pre> <p>or sendmail:</p> <pre class=\"code ruby\" data-language=\"ruby\">set :delivery_method, :sendmail</pre> <p>or for tests:</p> <pre class=\"code ruby\" data-language=\"ruby\">set :delivery_method, :test</pre> <p>and all delivered mail will use these settings unless otherwise specified.</p> <p>Define a mailer in your application:</p> <pre class=\"code ruby\" data-language=\"ruby\"># app/mailers/sample_mailer.rb\nMyAppName.mailers :sample do\n  defaults :content_type =&gt; 'html'\n  email :registration do |name, age|\n    to      'user@domain.com'\n    from    'admin@site.com'\n    subject 'Welcome to the site!'\n    locals  :name =&gt; name\n    render  'registration'\n  end\nend</pre> <p>Use the mailer to deliver messages:</p> <pre class=\"code ruby\" data-language=\"ruby\">deliver(:sample, :registration, \"Bob\", \"21\")</pre>    <h2>Instance Attribute Summary \n</h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"base#app-instance_method\" title=\"#app (instance method)\">#<strong>app</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the value of attribute app. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"base#delivery_settings-instance_method\" title=\"#delivery_settings (instance method)\">#<strong>delivery_settings</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the value of attribute delivery_settings. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"base#mailer_name-instance_method\" title=\"#mailer_name (instance method)\">#<strong>mailer_name</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the value of attribute mailer_name. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"base#messages-instance_method\" title=\"#messages (instance method)\">#<strong>messages</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the value of attribute messages. </span> </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"base#defaults-instance_method\" title=\"#defaults (instance method)\">#<strong>defaults</strong>(attributes = nil) ⇒ Object</a></code> <span class=\"summary_desc\"> Defines the default attributes for a message in this mailer (including app-wide defaults). </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"base#email-instance_method\" title=\"#email (instance method)\">#<strong>email</strong>(name, &amp;block) ⇒ Object</a> (also: #message)</code> <span class=\"summary_desc\"> Defines a mailer object allowing the definition of various email messages that can be delivered. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"base#initialize-instance_method\" title=\"#initialize (instance method)\">#<strong>initialize</strong>(app, name, &amp;block) ⇒ Base</a></code> <span class=\"note title constructor\">constructor</span> <span class=\"summary_desc\"> Constructs a <code>Mailer</code> base object with specified options. </span> </li> </ul>  <h2>Constructor Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"initialize-instance_method\"> #initialize(app, name, &amp;block) ⇒ Base </h3>   <p>Constructs a <code>Mailer</code> base object with specified options.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">app</code> <span class=\"type\">(<code>Sinatra::Application</code>)</span> —  The application tied to this mailer.  </li> <li> <code class=\"name\">name</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The name of this mailer.  </li> <li> <code class=\"name\">block</code> <span class=\"type\">(<code>Proc</code>)</span> —  The <code>email</code> definitions block.  </li> </ul> <h4 class=\"tag_title\">See Also:</h4> <ul class=\"see\"> <li><span class=\"object_link\"><a href=\"helpers/classmethods#mailer-instance_method\" title=\"Padrino::Mailer::Helpers::ClassMethods#mailer (method)\">Helpers::ClassMethods#mailer</a></span></li> </ul> </div> </div>   <h2>Instance Attribute Details</h2>  <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"app-instance_method\"> #app ⇒ Object </h3>   <p>Returns the value of attribute app</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"delivery_settings-instance_method\"> #delivery_settings ⇒ Object </h3>   <p>Returns the value of attribute delivery_settings</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"mailer_name-instance_method\"> #mailer_name ⇒ Object </h3>   <p>Returns the value of attribute mailer_name</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"messages-instance_method\"> #messages ⇒ Object </h3>   <p>Returns the value of attribute messages</p>    </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"defaults-instance_method\"> #defaults(attributes = nil) ⇒ Object </h3>   <p>Defines the default attributes for a message in this mailer (including app-wide defaults).</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">mailer :alternate do\n  defaults :from =&gt; 'padrino@from.com', :to =&gt; 'padrino@to.com'\n  email(:foo) do; end\nend</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">attributes</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>nil</code>)</em> —  The hash of message options to use as default.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"email-instance_method\"> #email(name, &amp;block) ⇒ Object Also known as: message  </h3>   <p>Defines a mailer object allowing the definition of various email messages that can be delivered.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">email :birthday do |name, age|\n  subject \"Happy Birthday!\"\n  to   'john@fake.com'\n  from 'noreply@birthday.com'\n  locals 'name' =&gt; name, 'age' =&gt; age\n  render 'birthday'\nend</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The name of this email message.  </li> <li> <code class=\"name\">block</code> <span class=\"type\">(<code>Proc</code>)</span> —  The message definition (i.e subject, to, from, locals).  </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mailer/Base\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mailer/Base</a>\n  </p>\n</div>\n","padrino/cache":"<h1>Module: Padrino::Cache </h1>  <h2>Overview</h2>  <p>This component enables caching of an application's response contents on both page- and fragment-levels. Output cached in this manner is persisted, until it expires or is actively expired, in a configurable store of your choosing. Several common caching stores are supported out of the box.</p>   \n<h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"modules\">Modules:</strong> <span class=\"object_link\"><a href=\"cache/helpers\" title=\"Padrino::Cache::Helpers (module)\">Helpers</a></span> </p> <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"cache#new-class_method\" title=\"new (class method)\">.<strong>new</strong>(name, options = {}) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"cache#padrino_route_added-class_method\" title=\"padrino_route_added (class method)\">.<strong>padrino_route_added</strong>(route, verb, path, args, options, block) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"cache#registered-class_method\" title=\"registered (class method)\">.<strong>registered</strong>(app) ⇒ Object</a></code> <span class=\"summary_desc\"> Register these helpers:. </span> </li> </ul>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"new-class_method\"> .new(name, options = {}) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"padrino_route_added-class_method\"> .padrino_route_added(route, verb, path, args, options, block) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"registered-class_method\"> .registered(app) ⇒ Object </h3>   <p>Register these helpers:</p> <pre class=\"code ruby\" data-language=\"ruby\">Padrino::Cache::Helpers::ObjectCache\nPadrino::Cache::Helpers::CacheStore\nPadrino::Cache::Helpers::Fragment\nPadrino::Cache::Helpers::Page</pre> <p>for Padrino::Application.</p> <p>By default we use FileStore as showed below:</p> <pre class=\"code ruby\" data-language=\"ruby\">set :cache, Padrino::Cache.new(:File, :dir =&gt; Padrino.root('tmp', app_name.to_s, 'cache'))</pre> <p>However, you can also change the file store easily in your app.rb:</p> <pre class=\"code ruby\" data-language=\"ruby\">set :cache, Padrino::Cache.new(:LRUHash) # Keeps cached values in memory\nset :cache, Padrino::Cache.new(:Memcached) # Uses default server at localhost\nset :cache, Padrino::Cache.new(:Memcached, '127.0.0.1:11211', :exception_retry_limit =&gt; 1)\nset :cache, Padrino::Cache.new(:Memcached, :backend =&gt; memcached_or_dalli_instance)\nset :cache, Padrino::Cache.new(:Redis) # Uses default server at localhost\nset :cache, Padrino::Cache.new(:Redis, :host =&gt; '127.0.0.1', :port =&gt; 6379, :db =&gt; 0)\nset :cache, Padrino::Cache.new(:Redis, :backend =&gt; redis_instance)\nset :cache, Padrino::Cache.new(:Mongo) # Uses default server at localhost\nset :cache, Padrino::Cache.new(:Mongo, :backend =&gt; mongo_client_instance)\nset :cache, Padrino::Cache.new(:File, :dir =&gt; Padrino.root('tmp', app_name.to_s, 'cache')) # default choice</pre> <p>You can manage your cache from anywhere in your app:</p> <pre class=\"code ruby\" data-language=\"ruby\">MyApp.cache['val'] = 'test'\nMyApp.cache['val'] # =&gt; 'test'\nMyApp.cache.delete('val')\nMyApp.cache.clear</pre>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache</a>\n  </p>\n</div>\n","padrino/applicationsetup/classmethods":"<h1>Module: Padrino::ApplicationSetup::ClassMethods </h1>  <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#default_configuration%21-instance_method\" title=\"#default_configuration! (instance method)\">#<strong>default_configuration!</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Defines default settings for Padrino application. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#precompile_routes%21-instance_method\" title=\"#precompile_routes! (instance method)\">#<strong>precompile_routes!</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#precompile_routes%3F-instance_method\" title=\"#precompile_routes? (instance method)\">#<strong>precompile_routes?</strong> ⇒ Boolean</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#setup_application%21-instance_method\" title=\"#setup_application! (instance method)\">#<strong>setup_application!</strong> ⇒ TrueClass</a></code> <span class=\"summary_desc\"> Setup the application by registering initializers, load paths and logger. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"default_configuration!-instance_method\"> #default_configuration! ⇒ Object </h3>   <p>Defines default settings for Padrino application.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"precompile_routes!-instance_method\"> #precompile_routes! ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"precompile_routes?-instance_method\"> #precompile_routes? ⇒ Boolean </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"setup_application!-instance_method\"> #setup_application! ⇒ TrueClass </h3>   <p>Setup the application by registering initializers, load paths and logger. Invoked automatically when an application is first instantiated.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>TrueClass</code>)</span> </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/ApplicationSetup/ClassMethods\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/ApplicationSetup/ClassMethods</a>\n  </p>\n</div>\n","padrino/paramsprotection/classmethods":"<h1>Module: Padrino::ParamsProtection::ClassMethods </h1>  <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#params-instance_method\" title=\"#params (instance method)\">#<strong>params</strong>(*allowed_params) ⇒ Object</a></code> <span class=\"summary_desc\"> Implements filtering of url query params. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"params-instance_method\"> #params(*allowed_params) ⇒ Object </h3>   <p>Implements filtering of url query params. Can prevent mass-assignment.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">post :update, :params =&gt; [:name, :email]\npost :update, :params =&gt; [:name, :id =&gt; Integer]\npost :update, :params =&gt; [:name =&gt; proc{ |v| v.reverse }]\npost :update, :params =&gt; [:name, :parent =&gt; [:name, :position]]\npost :update, :params =&gt; false\npost :update, :params =&gt; true</pre> <pre class=\"example code\" data-language=\"ruby\">params :name, :email, :password =&gt; prox{ |v| v.reverse }\npost :update</pre> <pre class=\"example code\" data-language=\"ruby\">App.controller :accounts, :params =&gt; [:name, :position] do\n  post :create\n  post :update, :with =&gt; [ :id ], :params =&gt; [:name, :position, :addition]\n  get :show, :with =&gt; :id, :params =&gt; false\n  get :search, :params =&gt; true\nend</pre> </div> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/ParamsProtection/ClassMethods\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/ParamsProtection/ClassMethods</a>\n  </p>\n</div>\n","padrino/generators/actions/classmethods":"<h1>Module: Padrino::Generators::Actions::ClassMethods </h1>  <h2>Overview</h2>  <p>Class methods for Thor generators to support the generators and component choices.</p>    <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#available_choices_for-instance_method\" title=\"#available_choices_for (instance method)\">#<strong>available_choices_for</strong>(component) ⇒ Array&lt;Symbol&gt;</a></code> <span class=\"summary_desc\"> Returns the list of available choices for the given component (including none). </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#component_option-instance_method\" title=\"#component_option (instance method)\">#<strong>component_option</strong>(name, caption, options = {}) ⇒ Object</a></code> <span class=\"summary_desc\"> Defines a class option to allow a component to be chosen and add to component type list. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#component_types-instance_method\" title=\"#component_types (instance method)\">#<strong>component_types</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the compiled list of component types which can be specified. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#defines_component_options-instance_method\" title=\"#defines_component_options (instance method)\">#<strong>defines_component_options</strong>(options = {}) ⇒ Object</a></code> <span class=\"summary_desc\"> Definitions for the available customizable components. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#require_arguments%21-instance_method\" title=\"#require_arguments! (instance method)\">#<strong>require_arguments!</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Tell Padrino that for this Thor::Group it is a necessary task to run. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#require_arguments%3F-instance_method\" title=\"#require_arguments? (instance method)\">#<strong>require_arguments?</strong> ⇒ Boolean</a></code> <span class=\"summary_desc\"> Return true if we need an arguments for our Thor::Group. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"available_choices_for-instance_method\"> #available_choices_for(component) ⇒ Array&lt;Symbol&gt; </h3>   <p>Returns the list of available choices for the given component (including none).</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">available_choices_for :test\n=&gt; [:shoulda, :bacon, :minitest]</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">component</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The type of the component module.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Array&lt;Symbol&gt;</code>)</span> —  Array of component choices.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"component_option-instance_method\"> #component_option(name, caption, options = {}) ⇒ Object </h3>   <p>Defines a class option to allow a component to be chosen and add to component type list. Also builds the available_choices hash of which component choices are supported.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">component_option :test, \"Testing framework\", :aliases =&gt; '-t', :choices =&gt; [:bacon, :shoulda]</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code>Symbol</code>)</span> —  Name of component.  </li> <li> <code class=\"name\">caption</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Description of the component.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  Additional parameters for component choice.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"component_types-instance_method\"> #component_types ⇒ Object </h3>   <p>Returns the compiled list of component types which can be specified.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"defines_component_options-instance_method\"> #defines_component_options(options = {}) ⇒ Object </h3>   <p>Definitions for the available customizable components.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"require_arguments!-instance_method\"> #require_arguments! ⇒ Object </h3>   <p>Tell Padrino that for this Thor::Group it is a necessary task to run.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"require_arguments?-instance_method\"> #require_arguments? ⇒ Boolean </h3>   <p>Return true if we need an arguments for our Thor::Group.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Actions/ClassMethods\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Actions/ClassMethods</a>\n  </p>\n</div>\n","padrino/mailer/helpers/classmethods":"<h1>Module: Padrino::Mailer::Helpers::ClassMethods </h1>  <h2>Overview</h2>  <p>Class methods responsible for registering mailers, configuring settings and delivering messages.</p>    <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#deliver-instance_method\" title=\"#deliver (instance method)\">#<strong>deliver</strong>(mailer_name, message_name, *attributes) ⇒ Object</a></code> <span class=\"summary_desc\"> Delivers a mailer message email with the given attributes. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#email-instance_method\" title=\"#email (instance method)\">#<strong>email</strong>(mail_attributes = {}, &amp;block) ⇒ Object</a></code> <span class=\"summary_desc\"> Delivers an email with the given mail attributes with specified and default settings. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#inherited-instance_method\" title=\"#inherited (instance method)\">#<strong>inherited</strong>(subclass) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#mailer-instance_method\" title=\"#mailer (instance method)\">#<strong>mailer</strong>(name, &amp;block) ⇒ Object</a> (also: #mailers)</code> <span class=\"summary_desc\"> Defines a mailer object allowing the definition of various email messages that can be delivered. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#registered_mailers-instance_method\" title=\"#registered_mailers (instance method)\">#<strong>registered_mailers</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns all registered mailers for this application. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"deliver-instance_method\"> #deliver(mailer_name, message_name, *attributes) ⇒ Object </h3>   <p>Delivers a mailer message email with the given attributes.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">deliver(:sample, :birthday, \"Joey\", 21)\ndeliver(:example, :message, \"John\")</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">mailer_name</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The name of the mailer.  </li> <li> <code class=\"name\">message_name</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The name of the message to deliver.  </li> <li> <code class=\"name\">attributes</code>  —  The parameters to pass to the mailer.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"email-instance_method\"> #email(mail_attributes = {}, &amp;block) ⇒ Object </h3>   <p>Delivers an email with the given mail attributes with specified and default settings.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">MyApp.email(:to =&gt; 'to@ma.il', :from =&gt; 'from@ma.il', :subject =&gt; 'Welcome!', :body =&gt; 'Welcome Here!')\n\n# or if you prefer blocks\n\nMyApp.email do\n  to @user.email\n  from \"awesomeness@example.com\"\n  subject \"Welcome to Awesomeness!\"\n  body 'path/to/my/template', :locals =&gt; { :a =&gt; a, :b =&gt; b }\nend</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">mail_attributes</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The attributes for this message (to, from, subject, cc, bcc, body, etc.).  </li> <li> <code class=\"name\">block</code> <span class=\"type\">(<code>Proc</code>)</span> —  The block mail attributes for this message.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"inherited-instance_method\"> #inherited(subclass) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"mailer-instance_method\"> #mailer(name, &amp;block) ⇒ Object Also known as: mailers  </h3>   <p>Defines a mailer object allowing the definition of various email messages that can be delivered.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">mailer :sample do\n  email :birthday do |name, age|\n    subject 'Happy Birthday!'\n    to      'john@fake.com'\n    from    'noreply@birthday.com'\n    locals  :name =&gt; name, :age =&gt; age\n    render  'sample/birthday'\n  end\nend</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The name of the mailer to initialize.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"registered_mailers-instance_method\"> #registered_mailers ⇒ Object </h3>   <p>Returns all registered mailers for this application.</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mailer/Helpers/ClassMethods\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mailer/Helpers/ClassMethods</a>\n  </p>\n</div>\n","padrino/rendering/classmethods":"<h1>Module: Padrino::Rendering::ClassMethods </h1>  <h2>Overview</h2>  <p>Class methods responsible for rendering templates as part of a request.</p>    <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#cache_layout_path-instance_method\" title=\"#cache_layout_path (instance method)\">#<strong>cache_layout_path</strong>(name) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#cache_template_path-instance_method\" title=\"#cache_template_path (instance method)\">#<strong>cache_template_path</strong>(options) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#fetch_layout_path-instance_method\" title=\"#fetch_layout_path (instance method)\">#<strong>fetch_layout_path</strong>(given_layout, layouts_path = views) ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the cached layout path. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#layout-instance_method\" title=\"#layout (instance method)\">#<strong>layout</strong>(name = :layout) { ... } ⇒ Object</a></code> <span class=\"summary_desc\"> Use layout like rails does or if a block given then like sinatra. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"cache_layout_path-instance_method\"> #cache_layout_path(name) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"cache_template_path-instance_method\"> #cache_template_path(options) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"fetch_layout_path-instance_method\"> #fetch_layout_path(given_layout, layouts_path = views) ⇒ Object </h3>   <p>Returns the cached layout path.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">given_layout</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>, <code>nil</code>)</span> —  The requested layout.  </li> <li> <code class=\"name\">layouts_path</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>, <code>nil</code>)</span> <em class=\"default\">(defaults to: <code>views</code>)</em> —  The directory where the layouts are located. Defaults to #views.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"layout-instance_method\"> #layout(name = :layout) { ... } ⇒ Object </h3>   <p>Use layout like rails does or if a block given then like sinatra. If used without a block, sets the current layout for the route.</p> <p>By default, searches in your:</p> <p><code>app</code>/<code>views</code>/<code>layouts</code>/<code>application</code>.(<code>haml</code>|<code>erb</code>|<code>xxx</code>) <code>app</code>/<code>views</code>/<code>layout_name</code>.(<code>haml</code>|<code>erb</code>|<code>xxx</code>)</p> <p>If you define <code>layout</code> :<code>custom</code> then searches for your layouts in <code>app</code>/<code>views</code>/<code>layouts</code>/<code>custom</code>.(<code>haml</code>|<code>erb</code>|<code>xxx</code>) <code>app</code>/<code>views</code>/<code>custom</code>.(<code>haml</code>|<code>erb</code>|<code>xxx</code>)</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code>Symbol</code>)</span> <em class=\"default\">(defaults to: <code>:layout</code>)</em> —  (:layout) The layout to use.  </li> </ul> <h4 class=\"tag_title\">Yields:</h4>  </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/ClassMethods\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/ClassMethods</a>\n  </p>\n</div>\n","padrino/logger/colorize":"<h1>Module: Padrino::Logger::Colorize </h1>  <h2>Constant Summary</h2> <dl class=\"constants\"> <dt id=\"ColoredLevels-constant\" class=\"\">ColoredLevels = </dt> <dd><pre class=\"code\" data-language=\"ruby\">{\n  :fatal =&gt; [:bold, :red],\n  :error =&gt; [:default, :red],\n  :warn  =&gt; [:default, :yellow],\n  :info  =&gt; [:default, :green],\n  :debug =&gt; [:default, :cyan],\n  :devel =&gt; [:default, :magenta]\n}</pre></dd> </dl> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"colorize#colorize-instance_method\" title=\"#colorize (instance method)\">#<strong>colorize</strong>(string, *colors) ⇒ Object</a></code> <span class=\"summary_desc\"> Colorize our level. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"colorize#stylized_level-instance_method\" title=\"#stylized_level (instance method)\">#<strong>stylized_level</strong>(level) ⇒ Object</a></code>  </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"colorize-instance_method\"> #colorize(string, *colors) ⇒ Object </h3>   <p>Colorize our level.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">level</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>, <code>Symbol</code>)</span> </li> </ul> <h4 class=\"tag_title\">See Also:</h4> <ul class=\"see\"> <li>Padrino::Logging::ColorizedLogger::ColoredLevels</li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"stylized_level-instance_method\"> #stylized_level(level) ⇒ Object </h3>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Logger/Colorize\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Logger/Colorize</a>\n  </p>\n</div>\n","string/colorizer":"<h1>Class: String::Colorizer </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Object</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">String::Colorizer</li> </ul>  </dd> </dl>  </div> <h2>Overview</h2>  <p>Used to colorize strings for the shell</p>    <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"colorizer#colors-class_method\" title=\"colors (class method)\">.<strong>colors</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns colors integer mapping. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"colorizer#modes-class_method\" title=\"modes (class method)\">.<strong>modes</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns modes integer mapping. </span> </li> </ul>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"colors-class_method\"> .colors ⇒ Object </h3>   <p>Returns colors integer mapping</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"modes-class_method\"> .modes ⇒ Object </h3>   <p>Returns modes integer mapping</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/String/Colorizer\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/String/Colorizer</a>\n  </p>\n</div>\n","padrino/admin/generators/orm/column":"<h1>Class: Padrino::Admin::Generators::Orm::Column </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Struct</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Struct</li> <li class=\"next\">Padrino::Admin::Generators::Orm::Column</li> </ul>  </dd> </dl>  </div> <h2>Overview</h2>  <p>for compatibility</p>    <h2>Instance Attribute Summary \n</h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"column#name-instance_method\" title=\"#name (instance method)\">#<strong>name</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the value of attribute name. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"column#type-instance_method\" title=\"#type (instance method)\">#<strong>type</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the value of attribute type. </span> </li> </ul>  <h2>Instance Attribute Details</h2>  <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"name-instance_method\"> #name ⇒ Object </h3>   <p>Returns the value of attribute name</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Object</code>)</span> —  the current value of name  </li> </ul> </div> </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"type-instance_method\"> #type ⇒ Object </h3>   <p>Returns the value of attribute type</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Object</code>)</span> —  the current value of type  </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Generators/Orm/Column\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Generators/Orm/Column</a>\n  </p>\n</div>\n","padrino/helpers/formbuilder/abstractformbuilder":"<h1>Class: Padrino::Helpers::FormBuilder::AbstractFormBuilder </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Object</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Padrino::Helpers::FormBuilder::AbstractFormBuilder</li> </ul>  </dd> </dl>  </div> <h2>Overview</h2>  <p>Base class for Padrino Form Builder</p>   \n<div id=\"subclasses\"> <h2>Direct Known Subclasses</h2> <p class=\"children\"><span class=\"object_link\"><a href=\"standardformbuilder\" title=\"Padrino::Helpers::FormBuilder::StandardFormBuilder (class)\">StandardFormBuilder</a></span></p> </div> <h2>Instance Attribute Summary \n</h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#attributes_name-instance_method\" title=\"#attributes_name (instance method)\">#<strong>attributes_name</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute attributes_name. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#is_nested-instance_method\" title=\"#is_nested (instance method)\">#<strong>is_nested</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute is_nested. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#model_name-instance_method\" title=\"#model_name (instance method)\">#<strong>model_name</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute model_name. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#multipart-instance_method\" title=\"#multipart (instance method)\">#<strong>multipart</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the value of attribute multipart. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#namespace-instance_method\" title=\"#namespace (instance method)\">#<strong>namespace</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute namespace. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#nested_index-instance_method\" title=\"#nested_index (instance method)\">#<strong>nested_index</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute nested_index. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#object-instance_method\" title=\"#object (instance method)\">#<strong>object</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the value of attribute object. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#parent_form-instance_method\" title=\"#parent_form (instance method)\">#<strong>parent_form</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute parent_form. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#template-instance_method\" title=\"#template (instance method)\">#<strong>template</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the value of attribute template. </span> </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#check_box-instance_method\" title=\"#check_box (instance method)\">#<strong>check_box</strong>(field, options = {}) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#check_box_group-instance_method\" title=\"#check_box_group (instance method)\">#<strong>check_box_group</strong>(field, options = {}) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#color_field-instance_method\" title=\"#color_field (instance method)\">#<strong>color_field</strong>(field, options = {}) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#csrf_token_field-instance_method\" title=\"#csrf_token_field (instance method)\">#<strong>csrf_token_field</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#date_field-instance_method\" title=\"#date_field (instance method)\">#<strong>date_field</strong>(field, options = {}) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#datetime_field-instance_method\" title=\"#datetime_field (instance method)\">#<strong>datetime_field</strong>(field, options = {}) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#datetime_local_field-instance_method\" title=\"#datetime_local_field (instance method)\">#<strong>datetime_local_field</strong>(field, options = {}) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#email_field-instance_method\" title=\"#email_field (instance method)\">#<strong>email_field</strong>(field, options = {}) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#error_message_on-instance_method\" title=\"#error_message_on (instance method)\">#<strong>error_message_on</strong>(field, options = {}) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#error_messages-instance_method\" title=\"#error_messages (instance method)\">#<strong>error_messages</strong>(*params) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#fields_for-instance_method\" title=\"#fields_for (instance method)\">#<strong>fields_for</strong>(child_association, collection = nil, options = {}, &amp;block) ⇒ Object</a></code> <span class=\"summary_desc\"> Supports nested fields for a child model within a form. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#file_field-instance_method\" title=\"#file_field (instance method)\">#<strong>file_field</strong>(field, options = {}) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#hidden_field-instance_method\" title=\"#hidden_field (instance method)\">#<strong>hidden_field</strong>(field, options = {}) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#image_submit-instance_method\" title=\"#image_submit (instance method)\">#<strong>image_submit</strong>(source, options = {}) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#initialize-instance_method\" title=\"#initialize (instance method)\">#<strong>initialize</strong>(template, object, options = {}) ⇒ AbstractFormBuilder</a></code> <span class=\"note title constructor\">constructor</span> <span class=\"summary_desc\"> A new instance of AbstractFormBuilder. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#label-instance_method\" title=\"#label (instance method)\">#<strong>label</strong>(field, options = {}, &amp;block) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#month_field-instance_method\" title=\"#month_field (instance method)\">#<strong>month_field</strong>(field, options = {}) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#number_field-instance_method\" title=\"#number_field (instance method)\">#<strong>number_field</strong>(field, options = {}) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#password_field-instance_method\" title=\"#password_field (instance method)\">#<strong>password_field</strong>(field, options = {}) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#radio_button-instance_method\" title=\"#radio_button (instance method)\">#<strong>radio_button</strong>(field, options = {}) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#radio_button_group-instance_method\" title=\"#radio_button_group (instance method)\">#<strong>radio_button_group</strong>(field, options = {}) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#search_field-instance_method\" title=\"#search_field (instance method)\">#<strong>search_field</strong>(field, options = {}) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#select-instance_method\" title=\"#select (instance method)\">#<strong>select</strong>(field, options = {}) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#submit-instance_method\" title=\"#submit (instance method)\">#<strong>submit</strong>(*args) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#telephone_field-instance_method\" title=\"#telephone_field (instance method)\">#<strong>telephone_field</strong>(field, options = {}) ⇒ Object</a> (also: #phone_field)</code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#text_area-instance_method\" title=\"#text_area (instance method)\">#<strong>text_area</strong>(field, options = {}) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#text_field-instance_method\" title=\"#text_field (instance method)\">#<strong>text_field</strong>(field, options = {}) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#time_field-instance_method\" title=\"#time_field (instance method)\">#<strong>time_field</strong>(field, options = {}) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#url_field-instance_method\" title=\"#url_field (instance method)\">#<strong>url_field</strong>(field, options = {}) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"abstractformbuilder#week_field-instance_method\" title=\"#week_field (instance method)\">#<strong>week_field</strong>(field, options = {}) ⇒ Object</a></code>  </li> </ul>  <h2>Constructor Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"initialize-instance_method\"> #initialize(template, object, options = {}) ⇒ AbstractFormBuilder </h3>   <p>Returns a new instance of AbstractFormBuilder</p>    </div>   <h2>Instance Attribute Details</h2>  <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"attributes_name-instance_method\"> #attributes_name ⇒ Object (readonly) </h3>   <p>Returns the value of attribute attributes_name</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"is_nested-instance_method\"> #is_nested ⇒ Object (readonly) </h3>   <p>Returns the value of attribute is_nested</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"model_name-instance_method\"> #model_name ⇒ Object (readonly) </h3>   <p>Returns the value of attribute model_name</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"multipart-instance_method\"> #multipart ⇒ Object </h3>   <p>Returns the value of attribute multipart</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"namespace-instance_method\"> #namespace ⇒ Object (readonly) </h3>   <p>Returns the value of attribute namespace</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"nested_index-instance_method\"> #nested_index ⇒ Object (readonly) </h3>   <p>Returns the value of attribute nested_index</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"object-instance_method\"> #object ⇒ Object </h3>   <p>Returns the value of attribute object</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"parent_form-instance_method\"> #parent_form ⇒ Object (readonly) </h3>   <p>Returns the value of attribute parent_form</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"template-instance_method\"> #template ⇒ Object </h3>   <p>Returns the value of attribute template</p>    </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"check_box-instance_method\"> #check_box(field, options = {}) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"check_box_group-instance_method\"> #check_box_group(field, options = {}) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"color_field-instance_method\"> #color_field(field, options = {}) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"csrf_token_field-instance_method\"> #csrf_token_field ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"date_field-instance_method\"> #date_field(field, options = {}) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"datetime_field-instance_method\"> #datetime_field(field, options = {}) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"datetime_local_field-instance_method\"> #datetime_local_field(field, options = {}) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"email_field-instance_method\"> #email_field(field, options = {}) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"error_message_on-instance_method\"> #error_message_on(field, options = {}) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"error_messages-instance_method\"> #error_messages(*params) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"fields_for-instance_method\"> #fields_for(child_association, collection = nil, options = {}, &amp;block) ⇒ Object </h3>   <p>Supports nested fields for a child model within a form. f.fields_for :addresses f.fields_for :addresses, address f.fields_for :addresses, @addresses f.fields_for :addresses, address, index: i</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"file_field-instance_method\"> #file_field(field, options = {}) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"hidden_field-instance_method\"> #hidden_field(field, options = {}) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"image_submit-instance_method\"> #image_submit(source, options = {}) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"label-instance_method\"> #label(field, options = {}, &amp;block) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"month_field-instance_method\"> #month_field(field, options = {}) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"number_field-instance_method\"> #number_field(field, options = {}) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"password_field-instance_method\"> #password_field(field, options = {}) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"radio_button-instance_method\"> #radio_button(field, options = {}) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"radio_button_group-instance_method\"> #radio_button_group(field, options = {}) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"search_field-instance_method\"> #search_field(field, options = {}) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"select-instance_method\"> #select(field, options = {}) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"submit-instance_method\"> #submit(*args) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"telephone_field-instance_method\"> #telephone_field(field, options = {}) ⇒ Object Also known as: phone_field  </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"text_area-instance_method\"> #text_area(field, options = {}) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"text_field-instance_method\"> #text_field(field, options = {}) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"time_field-instance_method\"> #time_field(field, options = {}) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"url_field-instance_method\"> #url_field(field, options = {}) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"week_field-instance_method\"> #week_field(field, options = {}) ⇒ Object </h3>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormBuilder/AbstractFormBuilder\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormBuilder/AbstractFormBuilder</a>\n  </p>\n</div>\n","padrino/generators/adminapp":"<h1>Class: Padrino::Generators::AdminApp </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Thor::Group</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Thor::Group</li> <li class=\"next\">Padrino::Generators::AdminApp</li> </ul>  </dd> </dl> <dl> <dt>Includes:</dt> <dd>\n<span class=\"object_link\"><a href=\"actions\" title=\"Padrino::Generators::Actions (module)\">Actions</a></span>, <span class=\"object_link\"><a href=\"admin/actions\" title=\"Padrino::Generators::Admin::Actions (module)\">Padrino::Generators::Admin::Actions</a></span>, Thor::Actions</dd> </dl>  </div> <h2>Overview</h2>  <p>Defines the generator for creating a new admin app.</p>    <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"adminapp#banner-class_method\" title=\"banner (class method)\">.<strong>banner</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Defines the “banner” text for the CLI. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"adminapp#source_root-class_method\" title=\"source_root (class method)\">.<strong>source_root</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Define the source template root. </span> </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"adminapp#create_admin-instance_method\" title=\"#create_admin (instance method)\">#<strong>create_admin</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Copies over the Padrino base admin application. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"adminapp#source_paths-instance_method\" title=\"#source_paths (instance method)\">#<strong>source_paths</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Look for custom template files in a generators folder under the project root. </span> </li> </ul> <h3 class=\"inherited\">Methods included from Padrino::Generators::Admin::Actions</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"admin/actions#add_project_module-instance_method\" title=\"Padrino::Generators::Admin::Actions#add_project_module (method)\">#add_project_module</a></span>, <span class=\"object_link\"><a href=\"admin/actions#ext-instance_method\" title=\"Padrino::Generators::Admin::Actions#ext (method)\">#ext</a></span>, <span class=\"object_link\"><a href=\"admin/actions#fetch_app_name-instance_method\" title=\"Padrino::Generators::Admin::Actions#fetch_app_name (method)\">#fetch_app_name</a></span>, <span class=\"object_link\"><a href=\"admin/actions#orm-instance_method\" title=\"Padrino::Generators::Admin::Actions#orm (method)\">#orm</a></span>, <span class=\"object_link\"><a href=\"admin/actions#remove_project_module-instance_method\" title=\"Padrino::Generators::Admin::Actions#remove_project_module (method)\">#remove_project_module</a></span>, <span class=\"object_link\"><a href=\"admin/actions#supported_ext-instance_method\" title=\"Padrino::Generators::Admin::Actions#supported_ext (method)\">#supported_ext</a></span>, <span class=\"object_link\"><a href=\"admin/actions#supported_orm-instance_method\" title=\"Padrino::Generators::Admin::Actions#supported_orm (method)\">#supported_orm</a></span></p> <h3 class=\"inherited\">Methods included from Actions</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"actions#already_exists%3F-instance_method\" title=\"Padrino::Generators::Actions#already_exists? (method)\">#already_exists?</a></span>, <span class=\"object_link\"><a href=\"actions#app_skeleton-instance_method\" title=\"Padrino::Generators::Actions#app_skeleton (method)\">#app_skeleton</a></span>, <span class=\"object_link\"><a href=\"actions#apply_component_for-instance_method\" title=\"Padrino::Generators::Actions#apply_component_for (method)\">#apply_component_for</a></span>, <span class=\"object_link\"><a href=\"actions#apply_default_fields-instance_method\" title=\"Padrino::Generators::Actions#apply_default_fields (method)\">#apply_default_fields</a></span>, <span class=\"object_link\"><a href=\"actions#ask-instance_method\" title=\"Padrino::Generators::Actions#ask (method)\">#ask</a></span>, <span class=\"object_link\"><a href=\"actions#check_app_existence-instance_method\" title=\"Padrino::Generators::Actions#check_app_existence (method)\">#check_app_existence</a></span>, <span class=\"object_link\"><a href=\"actions#destination_root-instance_method\" title=\"Padrino::Generators::Actions#destination_root (method)\">#destination_root</a></span>, <span class=\"object_link\"><a href=\"actions#empty_directory_with_keep_file-instance_method\" title=\"Padrino::Generators::Actions#empty_directory_with_keep_file (method)\">#empty_directory_with_keep_file</a></span>, <span class=\"object_link\"><a href=\"actions#execute_component_setup-instance_method\" title=\"Padrino::Generators::Actions#execute_component_setup (method)\">#execute_component_setup</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_app_name-instance_method\" title=\"Padrino::Generators::Actions#fetch_app_name (method)\">#fetch_app_name</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_component_choice-instance_method\" title=\"Padrino::Generators::Actions#fetch_component_choice (method)\">#fetch_component_choice</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_project_name-instance_method\" title=\"Padrino::Generators::Actions#fetch_project_name (method)\">#fetch_project_name</a></span>, <span class=\"object_link\"><a href=\"actions#in_app_root%3F-instance_method\" title=\"Padrino::Generators::Actions#in_app_root? (method)\">#in_app_root?</a></span>, <span class=\"object_link\"><a href=\"actions#include_component_module_for-instance_method\" title=\"Padrino::Generators::Actions#include_component_module_for (method)\">#include_component_module_for</a></span>, <span class=\"object_link\"><a href=\"actions#initializer-instance_method\" title=\"Padrino::Generators::Actions#initializer (method)\">#initializer</a></span>, <span class=\"object_link\"><a href=\"actions#inject_into_file-instance_method\" title=\"Padrino::Generators::Actions#inject_into_file (method)\">#inject_into_file</a></span>, <span class=\"object_link\"><a href=\"actions#insert_hook-instance_method\" title=\"Padrino::Generators::Actions#insert_hook (method)\">#insert_hook</a></span>, <span class=\"object_link\"><a href=\"actions#insert_into_gemfile-instance_method\" title=\"Padrino::Generators::Actions#insert_into_gemfile (method)\">#insert_into_gemfile</a></span>, <span class=\"object_link\"><a href=\"actions#insert_middleware-instance_method\" title=\"Padrino::Generators::Actions#insert_middleware (method)\">#insert_middleware</a></span>, <span class=\"object_link\"><a href=\"actions#invalid_fields-instance_method\" title=\"Padrino::Generators::Actions#invalid_fields (method)\">#invalid_fields</a></span>, <span class=\"object_link\"><a href=\"actions#keep_file-instance_method\" title=\"Padrino::Generators::Actions#keep_file (method)\">#keep_file</a></span>, <span class=\"object_link\"><a href=\"actions#middleware-instance_method\" title=\"Padrino::Generators::Actions#middleware (method)\">#middleware</a></span>, <span class=\"object_link\"><a href=\"actions#recognize_path-instance_method\" title=\"Padrino::Generators::Actions#recognize_path (method)\">#recognize_path</a></span>, <span class=\"object_link\"><a href=\"actions#require_contrib-instance_method\" title=\"Padrino::Generators::Actions#require_contrib (method)\">#require_contrib</a></span>, <span class=\"object_link\"><a href=\"actions#require_dependencies-instance_method\" title=\"Padrino::Generators::Actions#require_dependencies (method)\">#require_dependencies</a></span>, <span class=\"object_link\"><a href=\"actions#resolve_valid_choice-instance_method\" title=\"Padrino::Generators::Actions#resolve_valid_choice (method)\">#resolve_valid_choice</a></span>, <span class=\"object_link\"><a href=\"actions#retrieve_component_config-instance_method\" title=\"Padrino::Generators::Actions#retrieve_component_config (method)\">#retrieve_component_config</a></span>, <span class=\"object_link\"><a href=\"actions#run_bundler-instance_method\" title=\"Padrino::Generators::Actions#run_bundler (method)\">#run_bundler</a></span>, <span class=\"object_link\"><a href=\"actions#store_component_choice-instance_method\" title=\"Padrino::Generators::Actions#store_component_choice (method)\">#store_component_choice</a></span>, <span class=\"object_link\"><a href=\"actions#store_component_config-instance_method\" title=\"Padrino::Generators::Actions#store_component_config (method)\">#store_component_config</a></span>, <span class=\"object_link\"><a href=\"actions#test%3F-instance_method\" title=\"Padrino::Generators::Actions#test? (method)\">#test?</a></span>, <span class=\"object_link\"><a href=\"actions#tiny%3F-instance_method\" title=\"Padrino::Generators::Actions#tiny? (method)\">#tiny?</a></span>, <span class=\"object_link\"><a href=\"actions#valid_choice%3F-instance_method\" title=\"Padrino::Generators::Actions#valid_choice? (method)\">#valid_choice?</a></span>, <span class=\"object_link\"><a href=\"actions#valid_constant%3F-instance_method\" title=\"Padrino::Generators::Actions#valid_constant? (method)\">#valid_constant?</a></span>, <span class=\"object_link\"><a href=\"actions#validate_namespace-instance_method\" title=\"Padrino::Generators::Actions#validate_namespace (method)\">#validate_namespace</a></span></p>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"banner-class_method\"> .banner ⇒ Object </h3>   <p>Defines the “banner” text for the CLI.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"source_root-class_method\"> .source_root ⇒ Object </h3>   <p>Define the source template root</p>    </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"create_admin-instance_method\"> #create_admin ⇒ Object </h3>   <p>Copies over the Padrino base admin application.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"source_paths-instance_method\"> #source_paths ⇒ Object </h3>   <p>Look for custom template files in a generators folder under the project root.</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/AdminApp\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/AdminApp</a>\n  </p>\n</div>\n","padrino/generators/cli":"<h1>Class: Padrino::Generators::Cli </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Thor::Group</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Thor::Group</li> <li class=\"next\">Padrino::Generators::Cli</li> </ul>  </dd> </dl> <dl> <dt>Includes:</dt> <dd>Thor::Actions</dd> </dl>  </div> <h2>Overview</h2>  <p>This class bootstrap <code>config/boot</code> and perform <code>Padrino::Generators.load_components!</code> for handle 3rd party generators.</p>    <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"cli#load_boot-instance_method\" title=\"#load_boot (instance method)\">#<strong>load_boot</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> We need to try to load boot because some of our app dependencies maybe have custom generators, so is necessary know who are. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"cli#setup-instance_method\" title=\"#setup (instance method)\">#<strong>setup</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Loads the components available for all generators. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"load_boot-instance_method\"> #load_boot ⇒ Object </h3>   <p>We need to try to load boot because some of our app dependencies maybe have custom generators, so is necessary know who are.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"setup-instance_method\"> #setup ⇒ Object </h3>   <p>Loads the components available for all generators.</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Cli\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Cli</a>\n  </p>\n</div>\n","padrino/pathrouter/compiler":"<h1>Class: Padrino::PathRouter::Compiler </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Object</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Padrino::PathRouter::Compiler</li> </ul>  </dd> </dl>  </div> <h2>Overview</h2>  <p>High performance engine for finding all routes which are matched with pattern</p>    <h2>Instance Attribute Summary \n</h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"compiler#routes-instance_method\" title=\"#routes (instance method)\">#<strong>routes</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the value of attribute routes. </span> </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"compiler#call_by_request-instance_method\" title=\"#call_by_request (instance method)\">#<strong>call_by_request</strong>(request) ⇒ Object</a></code> <span class=\"summary_desc\"> Calls routes by using request. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"compiler#compile%21-instance_method\" title=\"#compile! (instance method)\">#<strong>compile!</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Compiles all routes into regexps. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"compiler#compiled%3F-instance_method\" title=\"#compiled? (instance method)\">#<strong>compiled?</strong> ⇒ Boolean</a></code> <span class=\"summary_desc\"> Returns true if all routes has been compiled. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"compiler#find_by-instance_method\" title=\"#find_by (instance method)\">#<strong>find_by</strong>(request_or_env) ⇒ Object</a></code> <span class=\"summary_desc\"> Finds routes by using request or env. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"compiler#find_by_pattern-instance_method\" title=\"#find_by_pattern (instance method)\">#<strong>find_by_pattern</strong>(pattern) ⇒ Object</a></code> <span class=\"summary_desc\"> Finds routes by using PATH_INFO. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"compiler#initialize-instance_method\" title=\"#initialize (instance method)\">#<strong>initialize</strong>(routes) ⇒ Compiler</a></code> <span class=\"note title constructor\">constructor</span> <span class=\"summary_desc\"> Constructs an instance of Padrino::PathRouter::Compiler. </span> </li> </ul>  <h2>Constructor Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"initialize-instance_method\"> #initialize(routes) ⇒ Compiler </h3>   <p>Constructs an instance of Padrino::PathRouter::Compiler</p>    </div>   <h2>Instance Attribute Details</h2>  <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"routes-instance_method\"> #routes ⇒ Object </h3>   <p>Returns the value of attribute routes</p>    </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"call_by_request-instance_method\"> #call_by_request(request) ⇒ Object </h3>   <p>Calls routes by using request.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"compile!-instance_method\"> #compile! ⇒ Object </h3>   <p>Compiles all routes into regexps.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"compiled?-instance_method\"> #compiled? ⇒ Boolean </h3>   <p>Returns true if all routes has been compiled.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"find_by-instance_method\"> #find_by(request_or_env) ⇒ Object </h3>   <p>Finds routes by using request or env.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"find_by_pattern-instance_method\"> #find_by_pattern(pattern) ⇒ Object </h3>   <p>Finds routes by using PATH_INFO.</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/PathRouter/Compiler\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/PathRouter/Compiler</a>\n  </p>\n</div>\n","padrino/generators/component":"<h1>Class: Padrino::Generators::Component </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Thor::Group</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Thor::Group</li> <li class=\"next\">Padrino::Generators::Component</li> </ul>  </dd> </dl> <dl> <dt>Includes:</dt> <dd>\n<span class=\"object_link\"><a href=\"actions\" title=\"Padrino::Generators::Actions (module)\">Actions</a></span>, Padrino::Generators::Components::Actions, Thor::Actions</dd> </dl>  </div> <h2>Overview</h2>  <p>Responsible for add components within a Padrino project.</p>    <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"component#banner-class_method\" title=\"banner (class method)\">.<strong>banner</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"component#source_root-class_method\" title=\"source_root (class method)\">.<strong>source_root</strong> ⇒ Object</a></code>  </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"component#setup_components-instance_method\" title=\"#setup_components (instance method)\">#<strong>setup_components</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> For each component, retrieve a valid choice and then execute the associated generator. </span> </li> </ul> <h3 class=\"inherited\">Methods included from Actions</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"actions#already_exists%3F-instance_method\" title=\"Padrino::Generators::Actions#already_exists? (method)\">#already_exists?</a></span>, <span class=\"object_link\"><a href=\"actions#app_skeleton-instance_method\" title=\"Padrino::Generators::Actions#app_skeleton (method)\">#app_skeleton</a></span>, <span class=\"object_link\"><a href=\"actions#apply_component_for-instance_method\" title=\"Padrino::Generators::Actions#apply_component_for (method)\">#apply_component_for</a></span>, <span class=\"object_link\"><a href=\"actions#apply_default_fields-instance_method\" title=\"Padrino::Generators::Actions#apply_default_fields (method)\">#apply_default_fields</a></span>, <span class=\"object_link\"><a href=\"actions#ask-instance_method\" title=\"Padrino::Generators::Actions#ask (method)\">#ask</a></span>, <span class=\"object_link\"><a href=\"actions#check_app_existence-instance_method\" title=\"Padrino::Generators::Actions#check_app_existence (method)\">#check_app_existence</a></span>, <span class=\"object_link\"><a href=\"actions#destination_root-instance_method\" title=\"Padrino::Generators::Actions#destination_root (method)\">#destination_root</a></span>, <span class=\"object_link\"><a href=\"actions#empty_directory_with_keep_file-instance_method\" title=\"Padrino::Generators::Actions#empty_directory_with_keep_file (method)\">#empty_directory_with_keep_file</a></span>, <span class=\"object_link\"><a href=\"actions#execute_component_setup-instance_method\" title=\"Padrino::Generators::Actions#execute_component_setup (method)\">#execute_component_setup</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_app_name-instance_method\" title=\"Padrino::Generators::Actions#fetch_app_name (method)\">#fetch_app_name</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_component_choice-instance_method\" title=\"Padrino::Generators::Actions#fetch_component_choice (method)\">#fetch_component_choice</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_project_name-instance_method\" title=\"Padrino::Generators::Actions#fetch_project_name (method)\">#fetch_project_name</a></span>, <span class=\"object_link\"><a href=\"actions#in_app_root%3F-instance_method\" title=\"Padrino::Generators::Actions#in_app_root? (method)\">#in_app_root?</a></span>, <span class=\"object_link\"><a href=\"actions#include_component_module_for-instance_method\" title=\"Padrino::Generators::Actions#include_component_module_for (method)\">#include_component_module_for</a></span>, <span class=\"object_link\"><a href=\"actions#initializer-instance_method\" title=\"Padrino::Generators::Actions#initializer (method)\">#initializer</a></span>, <span class=\"object_link\"><a href=\"actions#inject_into_file-instance_method\" title=\"Padrino::Generators::Actions#inject_into_file (method)\">#inject_into_file</a></span>, <span class=\"object_link\"><a href=\"actions#insert_hook-instance_method\" title=\"Padrino::Generators::Actions#insert_hook (method)\">#insert_hook</a></span>, <span class=\"object_link\"><a href=\"actions#insert_into_gemfile-instance_method\" title=\"Padrino::Generators::Actions#insert_into_gemfile (method)\">#insert_into_gemfile</a></span>, <span class=\"object_link\"><a href=\"actions#insert_middleware-instance_method\" title=\"Padrino::Generators::Actions#insert_middleware (method)\">#insert_middleware</a></span>, <span class=\"object_link\"><a href=\"actions#invalid_fields-instance_method\" title=\"Padrino::Generators::Actions#invalid_fields (method)\">#invalid_fields</a></span>, <span class=\"object_link\"><a href=\"actions#keep_file-instance_method\" title=\"Padrino::Generators::Actions#keep_file (method)\">#keep_file</a></span>, <span class=\"object_link\"><a href=\"actions#middleware-instance_method\" title=\"Padrino::Generators::Actions#middleware (method)\">#middleware</a></span>, <span class=\"object_link\"><a href=\"actions#recognize_path-instance_method\" title=\"Padrino::Generators::Actions#recognize_path (method)\">#recognize_path</a></span>, <span class=\"object_link\"><a href=\"actions#require_contrib-instance_method\" title=\"Padrino::Generators::Actions#require_contrib (method)\">#require_contrib</a></span>, <span class=\"object_link\"><a href=\"actions#require_dependencies-instance_method\" title=\"Padrino::Generators::Actions#require_dependencies (method)\">#require_dependencies</a></span>, <span class=\"object_link\"><a href=\"actions#resolve_valid_choice-instance_method\" title=\"Padrino::Generators::Actions#resolve_valid_choice (method)\">#resolve_valid_choice</a></span>, <span class=\"object_link\"><a href=\"actions#retrieve_component_config-instance_method\" title=\"Padrino::Generators::Actions#retrieve_component_config (method)\">#retrieve_component_config</a></span>, <span class=\"object_link\"><a href=\"actions#run_bundler-instance_method\" title=\"Padrino::Generators::Actions#run_bundler (method)\">#run_bundler</a></span>, <span class=\"object_link\"><a href=\"actions#store_component_choice-instance_method\" title=\"Padrino::Generators::Actions#store_component_choice (method)\">#store_component_choice</a></span>, <span class=\"object_link\"><a href=\"actions#store_component_config-instance_method\" title=\"Padrino::Generators::Actions#store_component_config (method)\">#store_component_config</a></span>, <span class=\"object_link\"><a href=\"actions#test%3F-instance_method\" title=\"Padrino::Generators::Actions#test? (method)\">#test?</a></span>, <span class=\"object_link\"><a href=\"actions#tiny%3F-instance_method\" title=\"Padrino::Generators::Actions#tiny? (method)\">#tiny?</a></span>, <span class=\"object_link\"><a href=\"actions#valid_choice%3F-instance_method\" title=\"Padrino::Generators::Actions#valid_choice? (method)\">#valid_choice?</a></span>, <span class=\"object_link\"><a href=\"actions#valid_constant%3F-instance_method\" title=\"Padrino::Generators::Actions#valid_constant? (method)\">#valid_constant?</a></span>, <span class=\"object_link\"><a href=\"actions#validate_namespace-instance_method\" title=\"Padrino::Generators::Actions#validate_namespace (method)\">#validate_namespace</a></span></p>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"banner-class_method\"> .banner ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"source_root-class_method\"> .source_root ⇒ Object </h3>  </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"setup_components-instance_method\"> #setup_components ⇒ Object </h3>   <p>For each component, retrieve a valid choice and then execute the associated generator.</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Component\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Component</a>\n  </p>\n</div>\n","padrino/configuration":"<h1>Module: Padrino::Configuration </h1> <div class=\"box_info\"> <dl> <dt>Included in:</dt> <dd><span class=\"object_link\"><a href=\"../padrino\" title=\"Padrino (module)\">Padrino</a></span></dd> </dl>  </div> <h2>Overview</h2>  <p>Padrino simple configuration module</p>    <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"configuration#config-instance_method\" title=\"#config (instance method)\">#<strong>config</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the configuration structure allowing to get and set it's values. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"configuration#configure-instance_method\" title=\"#configure (instance method)\">#<strong>configure</strong>(*environments) {|config| ... } ⇒ Object</a></code> <span class=\"summary_desc\"> Allows to configure different environments differently. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"config-instance_method\"> #config ⇒ Object </h3>   <p>Returns the configuration structure allowing to get and set it's values. Padrino.config is a simple Ruby OpenStruct object with no additional magic.</p> <p>Example:</p> <pre class=\"code ruby\" data-language=\"ruby\">Padrino.config.value1 = 42\nexit if Padrino.config.exiting</pre>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"configure-instance_method\"> #configure(*environments) {|config| ... } ⇒ Object </h3>   <p>Allows to configure different environments differently. Requires a block.</p> <p>Example:</p> <pre class=\"code ruby\" data-language=\"ruby\">Padrino.configure :development do |config|\n  config.value2 = 'only development'\nend\nPadrino.configure :development, :production do |config|\n  config.value2 = 'both development and production'\nend\nPadrino.configure do |config|\n  config.value2 = 'any environment'\nend</pre>   <div class=\"tags\"> <h4 class=\"tag_title\">Yields:</h4> <ul class=\"yield\"> <li> <span class=\"type\">(<code>config</code>)</span> </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Configuration\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Configuration</a>\n  </p>\n</div>\n","padrino/rendering/erbtemplate":"<h1>Class: Padrino::Rendering::ERBTemplate </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Tilt::ERBTemplate</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Tilt::ERBTemplate</li> <li class=\"next\">Padrino::Rendering::ERBTemplate</li> </ul>  </dd> </dl>  </div> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"erbtemplate#precompiled_preamble-instance_method\" title=\"#precompiled_preamble (instance method)\">#<strong>precompiled_preamble</strong>(locals) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"erbtemplate#prepare-instance_method\" title=\"#prepare (instance method)\">#<strong>prepare</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"erbtemplate#render-instance_method\" title=\"#render (instance method)\">#<strong>render</strong>(*args) ⇒ Object</a></code>  </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"precompiled_preamble-instance_method\"> #precompiled_preamble(locals) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"prepare-instance_method\"> #prepare ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"render-instance_method\"> #render(*args) ⇒ Object </h3>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/ERBTemplate\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/ERBTemplate</a>\n  </p>\n</div>\n","padrino/helpers/outputhelpers/erbhandler":"<h1>Class: Padrino::Helpers::OutputHelpers::ErbHandler </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\"><span class=\"object_link\"><a href=\"abstracthandler\" title=\"Padrino::Helpers::OutputHelpers::AbstractHandler (class)\">AbstractHandler</a></span></span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\"><span class=\"object_link\"><a href=\"abstracthandler\" title=\"Padrino::Helpers::OutputHelpers::AbstractHandler (class)\">AbstractHandler</a></span></li> <li class=\"next\">Padrino::Helpers::OutputHelpers::ErbHandler</li> </ul>  </dd> </dl>  </div> <h2>Overview</h2>  <p>Handler for Erb template.</p>    <h2>Instance Attribute Summary</h2> <h3 class=\"inherited\">Attributes inherited from AbstractHandler</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"abstracthandler#output_buffer-instance_method\" title=\"Padrino::Helpers::OutputHelpers::AbstractHandler#output_buffer (method)\">#output_buffer</a></span>, <span class=\"object_link\"><a href=\"abstracthandler#template-instance_method\" title=\"Padrino::Helpers::OutputHelpers::AbstractHandler#template (method)\">#template</a></span></p> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"erbhandler#concat_to_template-instance_method\" title=\"#concat_to_template (instance method)\">#<strong>concat_to_template</strong>(text = \"\") ⇒ Object</a></code> <span class=\"summary_desc\"> Outputs the given text to the templates buffer directly. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"erbhandler#engine_matches%3F-instance_method\" title=\"#engine_matches? (instance method)\">#<strong>engine_matches?</strong>(block) ⇒ Boolean</a></code> <span class=\"summary_desc\"> Returns true if the block is Erb. </span> </li> </ul> <h3 class=\"inherited\">Methods inherited from AbstractHandler</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"abstracthandler#capture_from_template-instance_method\" title=\"Padrino::Helpers::OutputHelpers::AbstractHandler#capture_from_template (method)\">#capture_from_template</a></span>, <span class=\"object_link\"><a href=\"abstracthandler#initialize-instance_method\" title=\"Padrino::Helpers::OutputHelpers::AbstractHandler#initialize (method)\">#initialize</a></span></p>  <h2>Constructor Details</h2> <p class=\"notice\">This class inherits a constructor from <span class=\"object_link\"><a href=\"abstracthandler#initialize-instance_method\" title=\"Padrino::Helpers::OutputHelpers::AbstractHandler#initialize (method)\">Padrino::Helpers::OutputHelpers::AbstractHandler</a></span></p>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"concat_to_template-instance_method\"> #concat_to_template(text = \"\") ⇒ Object </h3>   <p>Outputs the given text to the templates buffer directly.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"engine_matches?-instance_method\"> #engine_matches?(block) ⇒ Boolean </h3>   <p>Returns true if the block is Erb.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/ErbHandler\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/ErbHandler</a>\n  </p>\n</div>\n","padrino/rendering/erubistemplate":"<h1>Class: Padrino::Rendering::ErubisTemplate  </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Tilt::ErubisTemplate</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Tilt::ErubisTemplate</li> <li class=\"next\">Padrino::Rendering::ErubisTemplate</li> </ul>  </dd> </dl>  </div> <h2>Overview</h2>  <p class=\"note private\"> <strong>This class is part of a private API.</strong> You should avoid using this class if possible, as it may be removed or be changed in the future. </p> <p>Modded ErubisTemplate that doesn't insist in an String as output buffer.</p>    <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"erubistemplate#precompiled_preamble-instance_method\" title=\"#precompiled_preamble (instance method)\">#<strong>precompiled_preamble</strong>(locals) ⇒ Object</a></code> <span class=\"private note title\">private</span> <span class=\"summary_desc\"> In preamble we need a flag `__in_erb_template` and SafeBuffer for padrino apps. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"erubistemplate#render-instance_method\" title=\"#render (instance method)\">#<strong>render</strong>(*args) ⇒ Object</a></code> <span class=\"private note title\">private</span>  </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"precompiled_preamble-instance_method\"> #precompiled_preamble(locals) ⇒ Object </h3>   <p class=\"note private\"> <strong>This method is part of a private API.</strong> You should avoid using this method if possible, as it may be removed or be changed in the future. </p> <p>In preamble we need a flag `__in_erb_template` and SafeBuffer for padrino apps.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"render-instance_method\"> #render(*args) ⇒ Object </h3>   <p class=\"note private\"> <strong>This method is part of a private API.</strong> You should avoid using this method if possible, as it may be removed or be changed in the future. </p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/ErubisTemplate\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/ErubisTemplate</a>\n  </p>\n</div>\n","padrino/helpers/assettaghelpers":"<h1>Module: Padrino::Helpers::AssetTagHelpers </h1>  <h2>Overview</h2>  <p>Helpers related to producing assets (images, stylesheets, js, etc) within templates.</p>    <h2>Constant Summary</h2> <dl class=\"constants\"> <dt id=\"APPEND_ASSET_EXTENSIONS-constant\" class=\"\">APPEND_ASSET_EXTENSIONS = </dt> <dd><pre class=\"code\" data-language=\"ruby\">[\"js\", \"css\"]</pre></dd> <dt id=\"ABSOLUTE_URL_PATTERN-constant\" class=\"\">ABSOLUTE_URL_PATTERN = </dt> <dd><pre class=\"code\" data-language=\"ruby\">%r{^(https?://)}</pre></dd> <dt id=\"ASSET_FOLDERS-constant\" class=\"\">ASSET_FOLDERS = </dt> <dd><pre class=\"code\" data-language=\"ruby\">{\n  :js =&gt; 'javascripts',\n  :css =&gt; 'stylesheets',\n}</pre></dd> </dl> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"assettaghelpers#asset_path-instance_method\" title=\"#asset_path (instance method)\">#<strong>asset_path</strong>(kind, source = nil) ⇒ String</a></code> <span class=\"summary_desc\"> Returns the path to the specified asset (css or javascript). </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"assettaghelpers#favicon_tag-instance_method\" title=\"#favicon_tag (instance method)\">#<strong>favicon_tag</strong>(source, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Generates a favicon link. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"assettaghelpers#feed_tag-instance_method\" title=\"#feed_tag (instance method)\">#<strong>feed_tag</strong>(mime, url, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Creates a link tag that browsers and news readers can use to auto-detect an RSS or ATOM feed. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"assettaghelpers#flash_tag-instance_method\" title=\"#flash_tag (instance method)\">#<strong>flash_tag</strong>(*args) ⇒ String</a></code> <span class=\"summary_desc\"> Creates a div to display the flash of given type if it exists. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"assettaghelpers#image_alt-instance_method\" title=\"#image_alt (instance method)\">#<strong>image_alt</strong>(src) ⇒ String</a></code> <span class=\"summary_desc\"> Returns a string suitable for an alt attribute of img element. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"assettaghelpers#image_path-instance_method\" title=\"#image_path (instance method)\">#<strong>image_path</strong>(src) ⇒ String</a></code> <span class=\"summary_desc\"> Returns the path to the image, either relative or absolute. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"assettaghelpers#image_tag-instance_method\" title=\"#image_tag (instance method)\">#<strong>image_tag</strong>(url, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Creates an image element with given url and options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"assettaghelpers#javascript_include_tag-instance_method\" title=\"#javascript_include_tag (instance method)\">#<strong>javascript_include_tag</strong>(*sources, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Returns a html script tag for each of the sources provided. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"assettaghelpers#link_to-instance_method\" title=\"#link_to (instance method)\">#<strong>link_to</strong>(*args, &amp;block) ⇒ String</a></code> <span class=\"summary_desc\"> Creates a link element with given name, url and options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"assettaghelpers#mail_to-instance_method\" title=\"#mail_to (instance method)\">#<strong>mail_to</strong>(email, caption = nil, mail_options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Creates a mail link element with given name and caption. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"assettaghelpers#meta_tag-instance_method\" title=\"#meta_tag (instance method)\">#<strong>meta_tag</strong>(content, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Creates a meta element with the content and given options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"assettaghelpers#stylesheet_link_tag-instance_method\" title=\"#stylesheet_link_tag (instance method)\">#<strong>stylesheet_link_tag</strong>(*sources, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Returns a html link tag for each of the sources provided. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"asset_path-instance_method\"> #asset_path(kind, source = nil) ⇒ String </h3>   <p>Returns the path to the specified asset (css or javascript).</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\"># Generates: /javascripts/application.js?1269008689\nasset_path :js, :application\n\n# Generates: /stylesheets/application.css?1269008689\nasset_path :css, :application\n\n# Generates: /images/example.jpg?1269008689\nasset_path :images, 'example.jpg'\n\n# Generates: /uploads/file.ext?1269008689\nasset_path 'uploads/file.ext'</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">kind</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The kind of asset (i.e :images, :js, :css).  </li> <li> <code class=\"name\">source</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <em class=\"default\">(defaults to: <code>nil</code>)</em> —  The path to the asset (relative or absolute).  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Path for the asset given the <code>kind</code> and <code>source</code>.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"favicon_tag-instance_method\"> #favicon_tag(source, options = {}) ⇒ String </h3>   <p>Generates a favicon link. Looks inside images folder</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">favicon_tag 'favicon.png'\nfavicon_tag 'icons/favicon.png'\n# or override some options\nfavicon_tag 'favicon.png', :type =&gt; 'image/ico'</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">source</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The source image path for the favicon link tag.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The html options for the favicon link tag.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The favicon link html tag with specified <code>options</code>.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"feed_tag-instance_method\"> #feed_tag(mime, url, options = {}) ⇒ String </h3>   <p>Creates a link tag that browsers and news readers can use to auto-detect an RSS or ATOM feed.</p> <p>@<a href=\"http://Hash\">param</a> options</p> <pre class=\"code ruby\" data-language=\"ruby\">The options for the feed tag.</pre>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">feed_tag :atom, url(:blog, :posts, :format =&gt; :atom), :title =&gt; \"ATOM\"\n# Generates: &lt;link type=\"application/atom+xml\" rel=\"alternate\" href=\"/blog/posts.atom\" title=\"ATOM\" /&gt;\nfeed_tag :rss, url(:blog, :posts, :format =&gt; :rss)\n# Generates: &lt;link type=\"application/rss+xml\" rel=\"alternate\" href=\"/blog/posts.rss\" title=\"rss\" /&gt;</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">mime</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The mime type of the feed (i.e :atom or :rss).  </li> <li> <code class=\"name\">url</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The url for the feed tag to reference.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  a customizable set of options  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:rel</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <span class=\"default\"> — default: <code>\"alternate\"</code> </span> —  Specify the relation of this link.  </li> <li> <code class=\"name\">:type</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Override the auto-generated mime type.  </li> <li> <code class=\"name\">:title</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specify the title of the link, defaults to the type.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Feed link html tag with specified <code>options</code>.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"flash_tag-instance_method\"> #flash_tag(*args) ⇒ String </h3>   <p>Creates a div to display the flash of given type if it exists.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">flash_tag(:notice, :id =&gt; 'flash-notice')\n# Generates: &lt;div class=\"notice\" id=\"flash-notice\"&gt;flash-notice&lt;/div&gt;\nflash_tag(:error, :success)\n# Generates: &lt;div class=\"error\"&gt;flash-error&lt;/div&gt;\n# &lt;div class=\"success\"&gt;flash-success&lt;/div&gt;</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">kind</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The type of flash to display in the tag.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> —  The html options for this section. use :bootstrap =&gt; true to support Twitter's bootstrap dismiss alert button.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Flash tag html with specified <code>options</code>.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"image_alt-instance_method\"> #image_alt(src) ⇒ String </h3>   <p>Returns a string suitable for an alt attribute of img element.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">src</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The source path for the image tag.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The alt attribute value.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"image_path-instance_method\"> #image_path(src) ⇒ String </h3>   <p>Returns the path to the image, either relative or absolute. We search it in your <code>appname.public_folder</code> like app/public/images for inclusion. You can provide also a full path.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\"># Generates: /images/foo.jpg?1269008689\nimage_path(\"foo.jpg\")</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">src</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The path to the image file (relative or absolute).  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Path to an image given the <code>kind</code> and <code>source</code>.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"image_tag-instance_method\"> #image_tag(url, options = {}) ⇒ String </h3>   <p>Creates an image element with given url and options.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">image_tag('icons/avatar.png')</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">url</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The source path for the image tag.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The html options for the image tag.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Image html tag with <code>url</code> and specified <code>options</code>.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"javascript_include_tag-instance_method\"> #javascript_include_tag(*sources, options = {}) ⇒ String </h3>   <p>Returns a html script tag for each of the sources provided. You can pass in the filename without extension or a symbol and we search it in your <code>appname.public_folder</code> like app/public/javascript for inclusion. You can provide also a full path.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">javascript_include_tag 'application', :extjs</pre> </div>     <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">sources</code> <span class=\"type\">(<code>Array&lt;<span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span>&gt;</code>)</span> —  Splat of js source paths  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The html options for the script tag  </li> </ul> </div> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Script tag for <code>sources</code> with specified <code>options</code>.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"link_to-instance_method\"> #link_to(caption, url, options = {}) ⇒ String  #link_to(url, options = {}, &amp;block) ⇒ String  </h3>   <p>Creates a link element with given name, url and options.</p> <p>Note that you can pass :<code>if</code> or :<code>unless</code> conditions, but if you provide :current as condition padrino return true/false if the request.path_info match the given url.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">link_to('click me', '/dashboard', :class =&gt; 'linky')\n# Generates &lt;a class=\"linky\" href=\"/dashboard\"&gt;click me&lt;/a&gt;\n\nlink_to('click me', '/dashboard', :remote =&gt; true)\n# Generates &lt;a href=\"/dashboard\" data-remote=\"true\"&gt;click me&lt;/a&gt;\n\nlink_to('click me', '/dashboard', :method =&gt; :delete)\n# Generates &lt;a href=\"/dashboard\" data-method=\"delete\" rel=\"nofollow\"&gt;click me&lt;/a&gt;\n\nlink_to('click me', :class =&gt; 'blocky') do; end\n# Generates &lt;a class=\"blocky\" href=\"#\"&gt;click me&lt;/a&gt;</pre> </div> <h4 class=\"tag_title\">Overloads:</h4> <ul class=\"overload\"> <li class=\"overload_item\"> <h3 class=\"signature\">#link_to(caption, url, options = {}) ⇒ String </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">caption</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The text caption.  </li> <li> <code class=\"name\">url</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The url href.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The html options.  </li> </ul> </div> </li> <li class=\"overload_item\"> <h3 class=\"signature\">#link_to(url, options = {}, &amp;block) ⇒ String </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">url</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The url href.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The html options.  </li> <li> <code class=\"name\">block</code> <span class=\"type\">(<code>Proc</code>)</span> —  The link content.  </li> </ul> </div> </li> </ul> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> —  a customizable set of options  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Link tag html with specified <code>options</code>.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"mail_to-instance_method\"> #mail_to(email, caption = nil, mail_options = {}) ⇒ String </h3>   <p>Creates a mail link element with given name and caption.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">mail_to \"me@demo.com\"\n# Generates: &lt;a href=\"mailto:me@demo.com\"&gt;me@demo.com&lt;/a&gt;\n\nmail_to \"me@demo.com\", \"My Email\"\n# Generates: &lt;a href=\"mailto:me@demo.com\"&gt;My Email&lt;/a&gt;</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">email</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The email address for the link.  </li> <li> <code class=\"name\">caption</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <em class=\"default\">(defaults to: <code>nil</code>)</em> —  The caption for the link.  </li> <li> <code class=\"name\">mail_options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The options for the mail link. Accepts html options.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>mail_options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">cc</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  The cc recipients.  </li> <li> <code class=\"name\">bcc</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  The bcc recipients.  </li> <li> <code class=\"name\">subject</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  The subject line.  </li> <li> <code class=\"name\">body</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  The email body.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Mail link html tag with specified <code>options</code>.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"meta_tag-instance_method\"> #meta_tag(content, options = {}) ⇒ String </h3>   <p>Creates a meta element with the content and given options.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">meta_tag \"weblog,news\", :name =&gt; \"keywords\"\n# Generates: &lt;meta name=\"keywords\" content=\"weblog,news\" /&gt;\n\nmeta_tag \"text/html; charset=UTF-8\", 'http-equiv' =&gt; \"Content-Type\"\n# Generates: &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt;</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">content</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The content for the meta tag.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The html options for the meta tag.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Meta html tag with specified <code>options</code>.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"stylesheet_link_tag-instance_method\"> #stylesheet_link_tag(*sources, options = {}) ⇒ String </h3>   <p>Returns a html link tag for each of the sources provided. You can pass in the filename without extension or a symbol and we search it in your <code>appname.public_folder</code> like app/public/stylesheets for inclusion. You can provide also a full path.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">stylesheet_link_tag 'style', 'application', 'layout'</pre> </div>     <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">sources</code> <span class=\"type\">(<code>Array&lt;<span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span>&gt;</code>)</span> —  Splat of css source paths  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The html options for the link tag  </li> </ul> </div> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Stylesheet link html tag for <code>sources</code> with specified <code>options</code>.  </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/AssetTagHelpers\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/AssetTagHelpers</a>\n  </p>\n</div>\n","padrino/generators/controller":"<h1>Class: Padrino::Generators::Controller </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Thor::Group</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Thor::Group</li> <li class=\"next\">Padrino::Generators::Controller</li> </ul>  </dd> </dl> <dl> <dt>Includes:</dt> <dd>\n<span class=\"object_link\"><a href=\"actions\" title=\"Padrino::Generators::Actions (module)\">Actions</a></span>, Padrino::Generators::Components::Actions, Thor::Actions</dd> </dl>  </div> <h2>Overview</h2>  <p>Responsible for generating route controllers and associated tests within a Padrino application.</p>    <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"controller#banner-class_method\" title=\"banner (class method)\">.<strong>banner</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"controller#source_root-class_method\" title=\"source_root (class method)\">.<strong>source_root</strong> ⇒ Object</a></code>  </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"controller#create_controller-instance_method\" title=\"#create_controller (instance method)\">#<strong>create_controller</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Execute controller generation. </span> </li> </ul> <h3 class=\"inherited\">Methods included from Actions</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"actions#already_exists%3F-instance_method\" title=\"Padrino::Generators::Actions#already_exists? (method)\">#already_exists?</a></span>, <span class=\"object_link\"><a href=\"actions#app_skeleton-instance_method\" title=\"Padrino::Generators::Actions#app_skeleton (method)\">#app_skeleton</a></span>, <span class=\"object_link\"><a href=\"actions#apply_component_for-instance_method\" title=\"Padrino::Generators::Actions#apply_component_for (method)\">#apply_component_for</a></span>, <span class=\"object_link\"><a href=\"actions#apply_default_fields-instance_method\" title=\"Padrino::Generators::Actions#apply_default_fields (method)\">#apply_default_fields</a></span>, <span class=\"object_link\"><a href=\"actions#ask-instance_method\" title=\"Padrino::Generators::Actions#ask (method)\">#ask</a></span>, <span class=\"object_link\"><a href=\"actions#check_app_existence-instance_method\" title=\"Padrino::Generators::Actions#check_app_existence (method)\">#check_app_existence</a></span>, <span class=\"object_link\"><a href=\"actions#destination_root-instance_method\" title=\"Padrino::Generators::Actions#destination_root (method)\">#destination_root</a></span>, <span class=\"object_link\"><a href=\"actions#empty_directory_with_keep_file-instance_method\" title=\"Padrino::Generators::Actions#empty_directory_with_keep_file (method)\">#empty_directory_with_keep_file</a></span>, <span class=\"object_link\"><a href=\"actions#execute_component_setup-instance_method\" title=\"Padrino::Generators::Actions#execute_component_setup (method)\">#execute_component_setup</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_app_name-instance_method\" title=\"Padrino::Generators::Actions#fetch_app_name (method)\">#fetch_app_name</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_component_choice-instance_method\" title=\"Padrino::Generators::Actions#fetch_component_choice (method)\">#fetch_component_choice</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_project_name-instance_method\" title=\"Padrino::Generators::Actions#fetch_project_name (method)\">#fetch_project_name</a></span>, <span class=\"object_link\"><a href=\"actions#in_app_root%3F-instance_method\" title=\"Padrino::Generators::Actions#in_app_root? (method)\">#in_app_root?</a></span>, <span class=\"object_link\"><a href=\"actions#include_component_module_for-instance_method\" title=\"Padrino::Generators::Actions#include_component_module_for (method)\">#include_component_module_for</a></span>, <span class=\"object_link\"><a href=\"actions#initializer-instance_method\" title=\"Padrino::Generators::Actions#initializer (method)\">#initializer</a></span>, <span class=\"object_link\"><a href=\"actions#inject_into_file-instance_method\" title=\"Padrino::Generators::Actions#inject_into_file (method)\">#inject_into_file</a></span>, <span class=\"object_link\"><a href=\"actions#insert_hook-instance_method\" title=\"Padrino::Generators::Actions#insert_hook (method)\">#insert_hook</a></span>, <span class=\"object_link\"><a href=\"actions#insert_into_gemfile-instance_method\" title=\"Padrino::Generators::Actions#insert_into_gemfile (method)\">#insert_into_gemfile</a></span>, <span class=\"object_link\"><a href=\"actions#insert_middleware-instance_method\" title=\"Padrino::Generators::Actions#insert_middleware (method)\">#insert_middleware</a></span>, <span class=\"object_link\"><a href=\"actions#invalid_fields-instance_method\" title=\"Padrino::Generators::Actions#invalid_fields (method)\">#invalid_fields</a></span>, <span class=\"object_link\"><a href=\"actions#keep_file-instance_method\" title=\"Padrino::Generators::Actions#keep_file (method)\">#keep_file</a></span>, <span class=\"object_link\"><a href=\"actions#middleware-instance_method\" title=\"Padrino::Generators::Actions#middleware (method)\">#middleware</a></span>, <span class=\"object_link\"><a href=\"actions#recognize_path-instance_method\" title=\"Padrino::Generators::Actions#recognize_path (method)\">#recognize_path</a></span>, <span class=\"object_link\"><a href=\"actions#require_contrib-instance_method\" title=\"Padrino::Generators::Actions#require_contrib (method)\">#require_contrib</a></span>, <span class=\"object_link\"><a href=\"actions#require_dependencies-instance_method\" title=\"Padrino::Generators::Actions#require_dependencies (method)\">#require_dependencies</a></span>, <span class=\"object_link\"><a href=\"actions#resolve_valid_choice-instance_method\" title=\"Padrino::Generators::Actions#resolve_valid_choice (method)\">#resolve_valid_choice</a></span>, <span class=\"object_link\"><a href=\"actions#retrieve_component_config-instance_method\" title=\"Padrino::Generators::Actions#retrieve_component_config (method)\">#retrieve_component_config</a></span>, <span class=\"object_link\"><a href=\"actions#run_bundler-instance_method\" title=\"Padrino::Generators::Actions#run_bundler (method)\">#run_bundler</a></span>, <span class=\"object_link\"><a href=\"actions#store_component_choice-instance_method\" title=\"Padrino::Generators::Actions#store_component_choice (method)\">#store_component_choice</a></span>, <span class=\"object_link\"><a href=\"actions#store_component_config-instance_method\" title=\"Padrino::Generators::Actions#store_component_config (method)\">#store_component_config</a></span>, <span class=\"object_link\"><a href=\"actions#test%3F-instance_method\" title=\"Padrino::Generators::Actions#test? (method)\">#test?</a></span>, <span class=\"object_link\"><a href=\"actions#tiny%3F-instance_method\" title=\"Padrino::Generators::Actions#tiny? (method)\">#tiny?</a></span>, <span class=\"object_link\"><a href=\"actions#valid_choice%3F-instance_method\" title=\"Padrino::Generators::Actions#valid_choice? (method)\">#valid_choice?</a></span>, <span class=\"object_link\"><a href=\"actions#valid_constant%3F-instance_method\" title=\"Padrino::Generators::Actions#valid_constant? (method)\">#valid_constant?</a></span>, <span class=\"object_link\"><a href=\"actions#validate_namespace-instance_method\" title=\"Padrino::Generators::Actions#validate_namespace (method)\">#validate_namespace</a></span></p>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"banner-class_method\"> .banner ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"source_root-class_method\"> .source_root ⇒ Object </h3>  </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"create_controller-instance_method\"> #create_controller ⇒ Object </h3>   <p>Execute controller generation</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Controller\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Controller</a>\n  </p>\n</div>\n","padrino/helpers/formhelpers/errors":"<h1>Module: Padrino::Helpers::FormHelpers::Errors </h1>  <h2>Overview</h2>  <p>Helpers to generate form errors.</p>    <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"errors#error_message_on-instance_method\" title=\"#error_message_on (instance method)\">#<strong>error_message_on</strong>(object, field, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Returns a string containing the error message attached to the <code>method</code> on the <code>object</code> if one exists. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"errors#error_messages_for-instance_method\" title=\"#error_messages_for (instance method)\">#<strong>error_messages_for</strong>(*objects, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Constructs list HTML for the errors for a given symbol. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"error_message_on-instance_method\"> #error_message_on(object, field, options = {}) ⇒ String </h3>   <p>Returns a string containing the error message attached to the <code>method</code> on the <code>object</code> if one exists.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\"># =&gt; &lt;span class=\"error\"&gt;can't be blank&lt;/div&gt;\nerror_message_on :post, :title\nerror_message_on @post, :title\n\n# =&gt; &lt;div class=\"custom\" style=\"border:1px solid red\"&gt;can't be blank&lt;/div&gt;\nerror_message_on :post, :title, :tag =&gt; :id, :class =&gt; :custom, :style =&gt; \"border:1px solid red\"\n\n# =&gt; &lt;div class=\"error\"&gt;This title can't be blank (or it won't work)&lt;/div&gt;\nerror_message_on :post, :title, :prepend =&gt; \"This title\", :append =&gt; \"(or it won't work)\"</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">object</code> <span class=\"type\">(<code>Object</code>)</span> —  The object to display the error for.  </li> <li> <code class=\"name\">field</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The field on the <code>object</code> to display the error for.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The options to control the error display.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:tag</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../../string\" title=\"String (class)\">String</a></span></code>)</span> <span class=\"default\"> — default: <code>\"span\"</code> </span> —  The tag that encloses the error.  </li> <li> <code class=\"name\">:prepend</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../../string\" title=\"String (class)\">String</a></span></code>)</span> <span class=\"default\"> — default: <code>\"\"</code> </span> —  The text to prepend before the field error.  </li> <li> <code class=\"name\">:append</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../../string\" title=\"String (class)\">String</a></span></code>)</span> <span class=\"default\"> — default: <code>\"\"</code> </span> —  The text to append after the field error.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The html display of an error for a particular <code>object</code> and <code>field</code>.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"error_messages_for-instance_method\"> #error_messages_for(*objects, options = {}) ⇒ String </h3>   <p>Constructs list HTML for the errors for a given symbol.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">error_messages_for :user</pre> </div>     <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">object</code> <span class=\"type\">(<code>Array&lt;Object&gt;</code>)</span> —  Splat of objects to display errors for.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  Error message display options.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:header_tag</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../../string\" title=\"String (class)\">String</a></span></code>)</span> <span class=\"default\"> — default: <code>\"h2\"</code> </span> —  Used for the header of the error div.  </li> <li> <code class=\"name\">:id</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../../string\" title=\"String (class)\">String</a></span></code>)</span> <span class=\"default\"> — default: <code>\"field-errors\"</code> </span> —  The id of the error div.  </li> <li> <code class=\"name\">:class</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../../string\" title=\"String (class)\">String</a></span></code>)</span> <span class=\"default\"> — default: <code>\"field-errors\"</code> </span> —  The class of the error div.  </li> <li> <code class=\"name\">:object</code> <span class=\"type\">(<code>Array&lt;Object&gt;</code>)</span>  —  The object (or array of objects) for which to display errors, if you need to escape the instance variable convention.  </li> <li> <code class=\"name\">:object_name</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  The object name to use in the header, or any text that you prefer. If <code>:object_name</code> is not set, the name of the first object will be used.  </li> <li> <code class=\"name\">:header_message</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../../string\" title=\"String (class)\">String</a></span></code>)</span> <span class=\"default\"> — default: <code>\"X errors prohibited this object from being saved\"</code> </span> —  The message in the header of the error div. Pass <code>nil</code> or an empty string to avoid the header message altogether.  </li> <li> <code class=\"name\">:message</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../../string\" title=\"String (class)\">String</a></span></code>)</span> <span class=\"default\"> — default: <code>\"There were problems with the following fields:\"</code> </span> —  The explanation message after the header message and before the error list. Pass <code>nil</code> or an empty string to avoid the explanation message altogether.  </li> </ul> </div> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The html section with all errors for the specified <code>objects</code>  </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormHelpers/Errors\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormHelpers/Errors</a>\n  </p>\n</div>\n","fileset":"<h1>Module: FileSet </h1> <div class=\"box_info\"> <dl> <dt>Extended by:</dt> <dd><span class=\"object_link\"><a href=\"fileset\" title=\"FileSet (module)\">FileSet</a></span></dd> </dl> <dl> <dt>Included in:</dt> <dd><span class=\"object_link\"><a href=\"fileset\" title=\"FileSet (module)\">FileSet</a></span></dd> </dl>  </div> <h2>Overview</h2>  <p>FileSet helper method for iterating and interacting with files inside a directory</p>    <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"fileset#glob-instance_method\" title=\"#glob (instance method)\">#<strong>glob</strong>(glob_pattern, file_path = nil) ⇒ Object</a></code> <span class=\"summary_desc\"> Iterates over every file in the glob pattern and yields to a block Returns the list of files matching the glob pattern FileSet.glob('padrino-core/application/*.rb', __FILE__) { |file| load file }. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"fileset#glob_require-instance_method\" title=\"#glob_require (instance method)\">#<strong>glob_require</strong>(glob_pattern, file_path = nil) ⇒ Object</a></code> <span class=\"summary_desc\"> Requires each file matched in the glob pattern into the application FileSet.glob_require('padrino-core/application/*.rb', __FILE__). </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"glob-instance_method\"> #glob(glob_pattern, file_path = nil) ⇒ Object </h3>   <p>Iterates over every file in the glob pattern and yields to a block Returns the list of files matching the glob pattern FileSet.glob('padrino-core/application/*.rb', __FILE__) { |file| load file }</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"glob_require-instance_method\"> #glob_require(glob_pattern, file_path = nil) ⇒ Object </h3>   <p>Requires each file matched in the glob pattern into the application FileSet.glob_require('padrino-core/application/*.rb', __FILE__)</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/FileSet\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/FileSet</a>\n  </p>\n</div>\n","padrino/filter":"<h1>Class: Padrino::Filter </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Object</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Padrino::Filter</li> </ul>  </dd> </dl>  </div> <h2>Instance Attribute Summary \n</h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"filter#block-instance_method\" title=\"#block (instance method)\">#<strong>block</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute block. </span> </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"filter#apply%3F-instance_method\" title=\"#apply? (instance method)\">#<strong>apply?</strong>(request) ⇒ Boolean</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"filter#initialize-instance_method\" title=\"#initialize (instance method)\">#<strong>initialize</strong>(mode, scoped_controller, options, args, &amp;block) ⇒ Filter</a></code> <span class=\"note title constructor\">constructor</span> <span class=\"summary_desc\"> A new instance of Filter. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"filter#to_proc-instance_method\" title=\"#to_proc (instance method)\">#<strong>to_proc</strong> ⇒ Object</a></code>  </li> </ul>  <h2>Constructor Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"initialize-instance_method\"> #initialize(mode, scoped_controller, options, args, &amp;block) ⇒ Filter </h3>   <p>Returns a new instance of Filter</p>    </div>   <h2>Instance Attribute Details</h2>  <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"block-instance_method\"> #block ⇒ Object (readonly) </h3>   <p>Returns the value of attribute block</p>    </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"apply?-instance_method\"> #apply?(request) ⇒ Boolean </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"to_proc-instance_method\"> #to_proc ⇒ Object </h3>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Filter\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Filter</a>\n  </p>\n</div>\n","padrino/flash":"<h1>Module: Padrino::Flash </h1>  <h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"modules\">Modules:</strong> <span class=\"object_link\"><a href=\"flash/helpers\" title=\"Padrino::Flash::Helpers (module)\">Helpers</a></span> <strong class=\"classes\">Classes:</strong> <span class=\"object_link\"><a href=\"flash/storage\" title=\"Padrino::Flash::Storage (class)\">Storage</a></span> </p> <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"flash#registered-class_method\" title=\"registered (class method)\">.<strong>registered</strong>(app) ⇒ Object</a></code>  </li> </ul>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"registered-class_method\"> .registered(app) ⇒ Object </h3>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Flash\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Flash</a>\n  </p>\n</div>\n","padrino/helpers/formbuilder":"<h1>Module: Padrino::Helpers::FormBuilder </h1>  <h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"classes\">Classes:</strong> <span class=\"object_link\"><a href=\"formbuilder/abstractformbuilder\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder (class)\">AbstractFormBuilder</a></span>, <span class=\"object_link\"><a href=\"formbuilder/standardformbuilder\" title=\"Padrino::Helpers::FormBuilder::StandardFormBuilder (class)\">StandardFormBuilder</a></span> </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormBuilder\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormBuilder</a>\n  </p>\n</div>\n","padrino/admin/generators":"<h1>Module: Padrino::Admin::Generators </h1>  <h2>Overview</h2>  <p>Contains all admin related generator functionality.</p>   \n<h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"classes\">Classes:</strong> <span class=\"object_link\"><a href=\"generators/orm\" title=\"Padrino::Admin::Generators::Orm (class)\">Orm</a></span>, <span class=\"object_link\"><a href=\"generators/ormerror\" title=\"Padrino::Admin::Generators::OrmError (class)\">OrmError</a></span> </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Generators\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Generators</a>\n  </p>\n</div>\n","haml":"<h1>Module: Haml </h1>  <h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"modules\">Modules:</strong> <span class=\"object_link\"><a href=\"haml/helpers\" title=\"Haml::Helpers (module)\">Helpers</a></span>, <span class=\"object_link\"><a href=\"haml/util\" title=\"Haml::Util (module)\">Util</a></span> </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Haml\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Haml</a>\n  </p>\n</div>\n","padrino/helpers/outputhelpers/hamlhandler":"<h1>Class: Padrino::Helpers::OutputHelpers::HamlHandler </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\"><span class=\"object_link\"><a href=\"abstracthandler\" title=\"Padrino::Helpers::OutputHelpers::AbstractHandler (class)\">AbstractHandler</a></span></span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\"><span class=\"object_link\"><a href=\"abstracthandler\" title=\"Padrino::Helpers::OutputHelpers::AbstractHandler (class)\">AbstractHandler</a></span></li> <li class=\"next\">Padrino::Helpers::OutputHelpers::HamlHandler</li> </ul>  </dd> </dl>  </div> <h2>Overview</h2>  <p>Handler for Haml templates.</p>    <h2>Instance Attribute Summary</h2> <h3 class=\"inherited\">Attributes inherited from AbstractHandler</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"abstracthandler#output_buffer-instance_method\" title=\"Padrino::Helpers::OutputHelpers::AbstractHandler#output_buffer (method)\">#output_buffer</a></span>, <span class=\"object_link\"><a href=\"abstracthandler#template-instance_method\" title=\"Padrino::Helpers::OutputHelpers::AbstractHandler#template (method)\">#template</a></span></p> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"hamlhandler#capture_from_template-instance_method\" title=\"#capture_from_template (instance method)\">#<strong>capture_from_template</strong>(*args, &amp;block) ⇒ Object</a></code> <span class=\"summary_desc\"> Captures the html from a block of template code for this handler. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"hamlhandler#engine_matches%3F-instance_method\" title=\"#engine_matches? (instance method)\">#<strong>engine_matches?</strong>(block) ⇒ Boolean</a></code> <span class=\"summary_desc\"> Returns true if the block is for Haml. </span> </li> </ul> <h3 class=\"inherited\">Methods inherited from AbstractHandler</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"abstracthandler#concat_to_template-instance_method\" title=\"Padrino::Helpers::OutputHelpers::AbstractHandler#concat_to_template (method)\">#concat_to_template</a></span>, <span class=\"object_link\"><a href=\"abstracthandler#initialize-instance_method\" title=\"Padrino::Helpers::OutputHelpers::AbstractHandler#initialize (method)\">#initialize</a></span></p>  <h2>Constructor Details</h2> <p class=\"notice\">This class inherits a constructor from <span class=\"object_link\"><a href=\"abstracthandler#initialize-instance_method\" title=\"Padrino::Helpers::OutputHelpers::AbstractHandler#initialize (method)\">Padrino::Helpers::OutputHelpers::AbstractHandler</a></span></p>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"capture_from_template-instance_method\"> #capture_from_template(*args, &amp;block) ⇒ Object </h3>   <p>Captures the html from a block of template code for this handler.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"engine_matches?-instance_method\"> #engine_matches?(block) ⇒ Boolean </h3>   <p>Returns true if the block is for Haml</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/HamlHandler\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/HamlHandler</a>\n  </p>\n</div>\n","padrino/rendering/hamltemplate":"<h1>Class: Padrino::Rendering::HamlTemplate </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Tilt::HamlTemplate</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Tilt::HamlTemplate</li> <li class=\"next\">Padrino::Rendering::HamlTemplate</li> </ul>  </dd> </dl> <dl> <dt>Includes:</dt> <dd><span class=\"object_link\"><a href=\"safetemplate\" title=\"Padrino::Rendering::SafeTemplate (module)\">SafeTemplate</a></span></dd> </dl>  </div> <h2>Method Summary</h2> <h3 class=\"inherited\">Methods included from SafeTemplate</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"safetemplate#render-instance_method\" title=\"Padrino::Rendering::SafeTemplate#render (method)\">#render</a></span></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/HamlTemplate\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/HamlTemplate</a>\n  </p>\n</div>\n","padrino/cache/helpers":"<h1>Module: Padrino::Cache::Helpers </h1>  <h2>Overview</h2>  <p>Helpers supporting page or fragment caching within a request route.</p>   \n<h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"modules\">Modules:</strong> <span class=\"object_link\"><a href=\"helpers/cachestore\" title=\"Padrino::Cache::Helpers::CacheStore (module)\">CacheStore</a></span>, <span class=\"object_link\"><a href=\"helpers/fragment\" title=\"Padrino::Cache::Helpers::Fragment (module)\">Fragment</a></span>, <span class=\"object_link\"><a href=\"helpers/objectcache\" title=\"Padrino::Cache::Helpers::ObjectCache (module)\">ObjectCache</a></span>, <span class=\"object_link\"><a href=\"helpers/page\" title=\"Padrino::Cache::Helpers::Page (module)\">Page</a></span> </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers</a>\n  </p>\n</div>\n","padrino/logger/extensions":"<h1>Module: Padrino::Logger::Extensions </h1> <div class=\"box_info\"> <dl> <dt>Included in:</dt> <dd><span class=\"object_link\"><a href=\"../logger\" title=\"Padrino::Logger (class)\">Padrino::Logger</a></span></dd> </dl>  </div> <h2>Constant Summary</h2> <dl class=\"constants\"> <dt id=\"SOURCE_LOCATION_REGEXP-constant\" class=\"\">SOURCE_LOCATION_REGEXP = </dt> <dd><pre class=\"code\" data-language=\"ruby\">/^(.*?):(\\d+?)(?::in `.+?')?$/.freeze</pre></dd> </dl> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"extensions#bench-instance_method\" title=\"#bench (instance method)\">#<strong>bench</strong>(action, began_at, message, level = :debug, color = :yellow) ⇒ Object</a></code> <span class=\"summary_desc\"> Append a to development logger a given action with time. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"extensions#colorize-instance_method\" title=\"#colorize (instance method)\">#<strong>colorize</strong>(string, *colors) ⇒ Object</a></code> <span class=\"summary_desc\"> Colorizes a string for colored console output. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"extensions#colorize%21-instance_method\" title=\"#colorize! (instance method)\">#<strong>colorize!</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Turns a logger with LoggingExtensions into a logger with colorized output. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"extensions#enable_source_location%3F-instance_method\" title=\"#enable_source_location? (instance method)\">#<strong>enable_source_location?</strong> ⇒ Boolean</a></code> <span class=\"summary_desc\"> Returns true if :source_location is set to true. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"extensions#exception-instance_method\" title=\"#exception (instance method)\">#<strong>exception</strong>(boom, verbosity = :long, level = :error) ⇒ Object</a></code> <span class=\"summary_desc\"> Logs an exception. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"extensions#format-instance_method\" title=\"#format (instance method)\">#<strong>format</strong>(message, level) ⇒ Object</a></code> <span class=\"summary_desc\"> Formats the log message. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"extensions#name-instance_method\" title=\"#name (instance method)\">#<strong>name</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Generate the logging methods for <span class=\"object_link\"><a href=\"../../padrino#logger-class_method\" title=\"Padrino.logger (method)\">Padrino.logger</a></span> for each log level. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"extensions#push-instance_method\" title=\"#push (instance method)\">#<strong>push</strong>(message = nil, level = nil) ⇒ Object</a></code> <span class=\"summary_desc\"> Appends a message to the log. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"extensions#resolve_source_location-instance_method\" title=\"#resolve_source_location (instance method)\">#<strong>resolve_source_location</strong>(message) ⇒ Object</a></code> <span class=\"summary_desc\"> Resolves a filename and line-number from caller. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"extensions#stylized_level-instance_method\" title=\"#stylized_level (instance method)\">#<strong>stylized_level</strong>(level) ⇒ Object</a></code> <span class=\"summary_desc\"> The debug level, with some style added. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"bench-instance_method\"> #bench(action, began_at, message, level = :debug, color = :yellow) ⇒ Object </h3>   <p>Append a to development logger a given action with time.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">logger.bench 'GET', started_at, '/blog/categories'\n# =&gt; DEBUG - GET (0.0056s) - /blog/categories</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">action</code> <span class=\"type\">(<code>string</code>)</span> —  The action.  </li> <li> <code class=\"name\">time</code> <span class=\"type\">(<code>float</code>)</span> —  Time duration for the given action.  </li> <li> <code class=\"name\">string</code> <span class=\"type\">(<code>message</code>)</span> —  The message that you want to log.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"colorize-instance_method\"> #colorize(string, *colors) ⇒ Object </h3>   <p>Colorizes a string for colored console output. This is a noop and can be reimplemented to colorize the string as needed.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">The</code> <span class=\"type\">(<code>string</code>)</span> —  string to be colorized.  </li> <li> <code class=\"name\">The</code> <span class=\"type\">(<code>Array&lt;Symbol&gt;</code>)</span> —  colors to use. Should be applied in the order given.  </li> </ul> <h4 class=\"tag_title\">See Also:</h4> <ul class=\"see\"> <li>ColorizedLogger</li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"colorize!-instance_method\"> #colorize! ⇒ Object </h3>   <p>Turns a logger with LoggingExtensions into a logger with colorized output.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">Padrino.logger = Logger.new($stdout)\nPadrino.logger.colorize!\nPadrino.logger.debug(\"Fancy Padrino debug string\")</pre> </div> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"enable_source_location?-instance_method\"> #enable_source_location? ⇒ Boolean </h3>   <p>Returns true if :source_location is set to true.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"exception-instance_method\"> #exception(boom, verbosity = :long, level = :error) ⇒ Object </h3>   <p>Logs an exception.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">Padrino.logger.exception e\nPadrino.logger.exception(e, :short)</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">exception</code> <span class=\"type\">(<code>Exception</code>)</span> —  The exception to log  </li> <li> <code class=\"name\">verbosity</code> <span class=\"type\">(<code>Symbol</code>)</span> <em class=\"default\">(defaults to: <code>:long</code>)</em> —  :short or :long, default is :long  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"format-instance_method\"> #format(message, level) ⇒ Object </h3>   <p>Formats the log message. This method is a noop and should be implemented by other logger components such as <span class=\"object_link\"><a href=\"../logger\" title=\"Padrino::Logger (class)\">Padrino::Logger</a></span>.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">message</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The message to format.  </li> <li> <code class=\"name\">level</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>, <code>Symbol</code>)</span> —  The log level, one of :debug, :warn …  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"name-instance_method\"> #name ⇒ Object </h3>   <p>Generate the logging methods for <span class=\"object_link\"><a href=\"../../padrino#logger-class_method\" title=\"Padrino.logger (method)\">Padrino.logger</a></span> for each log level.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"push-instance_method\"> #push(message = nil, level = nil) ⇒ Object </h3>   <p>Appends a message to the log. The methods yield to an optional block and the output of this block will be appended to the message.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">message</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <em class=\"default\">(defaults to: <code>nil</code>)</em> —  The message that you want write to your stream.  </li> <li> <code class=\"name\">level</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <em class=\"default\">(defaults to: <code>nil</code>)</em> —  The level one of :debug, :warn etc. …  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"resolve_source_location-instance_method\"> #resolve_source_location(message) ⇒ Object </h3>   <p>Resolves a filename and line-number from caller.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"stylized_level-instance_method\"> #stylized_level(level) ⇒ Object </h3>   <p>The debug level, with some style added. May be reimplemented.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">stylized_level(:debug) =&gt; DEBUG</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">level</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>, <code>Symbol</code>)</span> —  The log level.  </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Logger/Extensions\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Logger/Extensions</a>\n  </p>\n</div>\n","padrino/cache/helpers/fragment":"<h1>Module: Padrino::Cache::Helpers::Fragment </h1> <div class=\"box_info\"> <dl> <dt>Includes:</dt> <dd><span class=\"object_link\"><a href=\"../../helpers/outputhelpers\" title=\"Padrino::Helpers::OutputHelpers (module)\">Helpers::OutputHelpers</a></span></dd> </dl>  </div> <h2>Overview</h2>  <p>Whereas page-level caching, described in the first section of this document, works by grabbing the entire output of a route, fragment caching gives the developer fine-grained control of what gets cached. This type of caching occurs at whatever level you choose.</p> <p>Possible uses for fragment caching might include:</p> <ul>\n<li> <p>a 'feed' of some items on a page</p> </li>\n<li> <p>output fetched (by proxy) from an API on a third-party site</p> </li>\n<li> <p>parts of your page which are largely static/do not need re-rendering every request</p> </li>\n<li> <p>any output which is expensive to render</p> </li>\n</ul>    <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"fragment#cache-instance_method\" title=\"#cache (instance method)\">#<strong>cache</strong>(key, opts = {}, &amp;block) ⇒ Object</a></code> <span class=\"summary_desc\"> This helper is used anywhere in your application you would like to associate a fragment to be cached. </span> </li> </ul> <h3 class=\"inherited\">Methods included from Helpers::OutputHelpers</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"../../helpers/outputhelpers#block_is_template%3F-instance_method\" title=\"Padrino::Helpers::OutputHelpers#block_is_template? (method)\">#block_is_template?</a></span>, <span class=\"object_link\"><a href=\"../../helpers/outputhelpers#capture_html-instance_method\" title=\"Padrino::Helpers::OutputHelpers#capture_html (method)\">#capture_html</a></span>, <span class=\"object_link\"><a href=\"../../helpers/outputhelpers#concat_content-instance_method\" title=\"Padrino::Helpers::OutputHelpers#concat_content (method)\">#concat_content</a></span>, <span class=\"object_link\"><a href=\"../../helpers/outputhelpers#concat_safe_content-instance_method\" title=\"Padrino::Helpers::OutputHelpers#concat_safe_content (method)\">#concat_safe_content</a></span>, <span class=\"object_link\"><a href=\"../../helpers/outputhelpers#content_for-instance_method\" title=\"Padrino::Helpers::OutputHelpers#content_for (method)\">#content_for</a></span>, <span class=\"object_link\"><a href=\"../../helpers/outputhelpers#content_for%3F-instance_method\" title=\"Padrino::Helpers::OutputHelpers#content_for? (method)\">#content_for?</a></span>, <span class=\"object_link\"><a href=\"../../helpers/outputhelpers#handlers-class_method\" title=\"Padrino::Helpers::OutputHelpers.handlers (method)\">handlers</a></span>, <span class=\"object_link\"><a href=\"../../helpers/outputhelpers#register-class_method\" title=\"Padrino::Helpers::OutputHelpers.register (method)\">register</a></span>, <span class=\"object_link\"><a href=\"../../helpers/outputhelpers#yield_content-instance_method\" title=\"Padrino::Helpers::OutputHelpers#yield_content (method)\">#yield_content</a></span></p>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"cache-instance_method\"> #cache(key, opts = {}, &amp;block) ⇒ Object </h3>   <p>This helper is used anywhere in your application you would like to associate a fragment to be cached. It can be used in within a route:</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\"># Caching a fragment\nclass MyTweets &lt; Padrino::Application\n  enable :caching          # turns on caching mechanism\n\n  controller '/tweets' do\n    get :feed, :map =&gt; '/:username' do\n      username = params[:username]\n\n      @feed = cache( \"feed_for_#{username}\", :expires =&gt; 3 ) do\n        @tweets = Tweet.all( :username =&gt; username )\n        render 'partials/feedcontent'\n      end\n\n      # Below outputs @feed somewhere in its markup.\n      render 'feeds/show'\n    end\n  end\nend</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">key</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../../string\" title=\"String (class)\">String</a></span></code>)</span> —  cache key  </li> <li> <code class=\"name\">opts</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  cache options, e.g :expires  </li> <li> <code class=\"name\">Execution</code> <span class=\"type\">(<code>Proc</code>)</span> —  result to store in the cache  </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers/Fragment\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers/Fragment</a>\n  </p>\n</div>\n","padrino/generators":"<h1>Module: Padrino::Generators </h1>  <h2>Overview</h2>  <p>This module it's used for register generators.</p> <p>Can be useful for 3rd party generators:</p> <pre class=\"code ruby\" data-language=\"ruby\"># custom_generator.rb\nclass CustomGenerator &lt; Thor::Group\n  Padrino::Generators.add_generator(:custom_generator, self)\nend</pre> <p>Now for handle generators in padrino you need to add it to into <code>load_paths</code>.</p> <p>Padrino::Generators.load_paths &lt;&lt; “custom_generator.rb”</p>   \n<h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"modules\">Modules:</strong> <span class=\"object_link\"><a href=\"generators/actions\" title=\"Padrino::Generators::Actions (module)\">Actions</a></span>, <span class=\"object_link\"><a href=\"generators/admin\" title=\"Padrino::Generators::Admin (module)\">Admin</a></span>, <span class=\"object_link\"><a href=\"generators/runner\" title=\"Padrino::Generators::Runner (module)\">Runner</a></span> <strong class=\"classes\">Classes:</strong> <span class=\"object_link\"><a href=\"generators/adminapp\" title=\"Padrino::Generators::AdminApp (class)\">AdminApp</a></span>, <span class=\"object_link\"><a href=\"generators/adminpage\" title=\"Padrino::Generators::AdminPage (class)\">AdminPage</a></span>, <span class=\"object_link\"><a href=\"generators/app\" title=\"Padrino::Generators::App (class)\">App</a></span>, <span class=\"object_link\"><a href=\"generators/approotnotfound\" title=\"Padrino::Generators::AppRootNotFound (class)\">AppRootNotFound</a></span>, <span class=\"object_link\"><a href=\"generators/cli\" title=\"Padrino::Generators::Cli (class)\">Cli</a></span>, <span class=\"object_link\"><a href=\"generators/component\" title=\"Padrino::Generators::Component (class)\">Component</a></span>, <span class=\"object_link\"><a href=\"generators/controller\" title=\"Padrino::Generators::Controller (class)\">Controller</a></span>, <span class=\"object_link\"><a href=\"generators/helper\" title=\"Padrino::Generators::Helper (class)\">Helper</a></span>, <span class=\"object_link\"><a href=\"generators/mailer\" title=\"Padrino::Generators::Mailer (class)\">Mailer</a></span>, <span class=\"object_link\"><a href=\"generators/migration\" title=\"Padrino::Generators::Migration (class)\">Migration</a></span>, <span class=\"object_link\"><a href=\"generators/model\" title=\"Padrino::Generators::Model (class)\">Model</a></span>, <span class=\"object_link\"><a href=\"generators/plugin\" title=\"Padrino::Generators::Plugin (class)\">Plugin</a></span>, <span class=\"object_link\"><a href=\"generators/project\" title=\"Padrino::Generators::Project (class)\">Project</a></span>, <span class=\"object_link\"><a href=\"generators/task\" title=\"Padrino::Generators::Task (class)\">Task</a></span> </p> <h2>Constant Summary</h2> <dl class=\"constants\"> <dt id=\"DEV_PATH-constant\" class=\"\">DEV_PATH =   <p>Defines the absolute path to the padrino source folder.</p>    </dt> <dd><pre class=\"code\" data-language=\"ruby\">File.expand_path(\"../../\", File.dirname(__FILE__))</pre></dd> <dt id=\"DEFAULT_HELPER_NAME-constant\" class=\"\">DEFAULT_HELPER_NAME =   <p>Default helper name for use in tiny app skeleton generator.</p>    </dt> <dd><pre class=\"code\" data-language=\"ruby\">\"Helper\".freeze</pre></dd> </dl> <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"generators#add_generator-class_method\" title=\"add_generator (class method)\">.<strong>add_generator</strong>(name, klass) ⇒ Hash</a></code> <span class=\"summary_desc\"> Global add a new generator class to <code>padrino-gen</code>. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"generators#load_components%21-class_method\" title=\"load_components! (class method)\">.<strong>load_components!</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Load Global Actions and Component Actions then all files in <code>load_path</code>. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"generators#load_paths-class_method\" title=\"load_paths (class method)\">.<strong>load_paths</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Store our generators paths. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"generators#mappings-class_method\" title=\"mappings (class method)\">.<strong>mappings</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Return an ordered list of task with their class. </span> </li> </ul>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"add_generator-class_method\"> .add_generator(name, klass) ⇒ Hash </h3>   <p>Global add a new generator class to <code>padrino-gen</code>.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">Padrino::Generators.add_generator(:controller, Controller)</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code>Symbol</code>)</span> —  Key name for generator mapping.  </li> <li> <code class=\"name\">klass</code> <span class=\"type\">(<code>Class</code>)</span> —  Class of generator.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Hash</code>)</span> —  generator mappings  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"load_components!-class_method\"> .load_components! ⇒ Object </h3>   <p>Load Global Actions and Component Actions then all files in <code>load_path</code>.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"load_paths-class_method\"> .load_paths ⇒ Object </h3>   <p>Store our generators paths.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"mappings-class_method\"> .mappings ⇒ Object </h3>   <p>Return an ordered list of task with their class.</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators</a>\n  </p>\n</div>\n","padrino/generators/helper":"<h1>Class: Padrino::Generators::Helper </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Thor::Group</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Thor::Group</li> <li class=\"next\">Padrino::Generators::Helper</li> </ul>  </dd> </dl> <dl> <dt>Includes:</dt> <dd>\n<span class=\"object_link\"><a href=\"actions\" title=\"Padrino::Generators::Actions (module)\">Actions</a></span>, Components::Actions, Thor::Actions</dd> </dl>  </div> <h2>Overview</h2>  <p>Responsible for generating route helpers and associated tests within a Padrino application.</p>    <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"helper#banner-class_method\" title=\"banner (class method)\">.<strong>banner</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"helper#source_root-class_method\" title=\"source_root (class method)\">.<strong>source_root</strong> ⇒ Object</a></code>  </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"helper#create_helper-instance_method\" title=\"#create_helper (instance method)\">#<strong>create_helper</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Execute helper generation. </span> </li> </ul> <h3 class=\"inherited\">Methods included from Actions</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"actions#already_exists%3F-instance_method\" title=\"Padrino::Generators::Actions#already_exists? (method)\">#already_exists?</a></span>, <span class=\"object_link\"><a href=\"actions#app_skeleton-instance_method\" title=\"Padrino::Generators::Actions#app_skeleton (method)\">#app_skeleton</a></span>, <span class=\"object_link\"><a href=\"actions#apply_component_for-instance_method\" title=\"Padrino::Generators::Actions#apply_component_for (method)\">#apply_component_for</a></span>, <span class=\"object_link\"><a href=\"actions#apply_default_fields-instance_method\" title=\"Padrino::Generators::Actions#apply_default_fields (method)\">#apply_default_fields</a></span>, <span class=\"object_link\"><a href=\"actions#ask-instance_method\" title=\"Padrino::Generators::Actions#ask (method)\">#ask</a></span>, <span class=\"object_link\"><a href=\"actions#check_app_existence-instance_method\" title=\"Padrino::Generators::Actions#check_app_existence (method)\">#check_app_existence</a></span>, <span class=\"object_link\"><a href=\"actions#destination_root-instance_method\" title=\"Padrino::Generators::Actions#destination_root (method)\">#destination_root</a></span>, <span class=\"object_link\"><a href=\"actions#empty_directory_with_keep_file-instance_method\" title=\"Padrino::Generators::Actions#empty_directory_with_keep_file (method)\">#empty_directory_with_keep_file</a></span>, <span class=\"object_link\"><a href=\"actions#execute_component_setup-instance_method\" title=\"Padrino::Generators::Actions#execute_component_setup (method)\">#execute_component_setup</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_app_name-instance_method\" title=\"Padrino::Generators::Actions#fetch_app_name (method)\">#fetch_app_name</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_component_choice-instance_method\" title=\"Padrino::Generators::Actions#fetch_component_choice (method)\">#fetch_component_choice</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_project_name-instance_method\" title=\"Padrino::Generators::Actions#fetch_project_name (method)\">#fetch_project_name</a></span>, <span class=\"object_link\"><a href=\"actions#in_app_root%3F-instance_method\" title=\"Padrino::Generators::Actions#in_app_root? (method)\">#in_app_root?</a></span>, <span class=\"object_link\"><a href=\"actions#include_component_module_for-instance_method\" title=\"Padrino::Generators::Actions#include_component_module_for (method)\">#include_component_module_for</a></span>, <span class=\"object_link\"><a href=\"actions#initializer-instance_method\" title=\"Padrino::Generators::Actions#initializer (method)\">#initializer</a></span>, <span class=\"object_link\"><a href=\"actions#inject_into_file-instance_method\" title=\"Padrino::Generators::Actions#inject_into_file (method)\">#inject_into_file</a></span>, <span class=\"object_link\"><a href=\"actions#insert_hook-instance_method\" title=\"Padrino::Generators::Actions#insert_hook (method)\">#insert_hook</a></span>, <span class=\"object_link\"><a href=\"actions#insert_into_gemfile-instance_method\" title=\"Padrino::Generators::Actions#insert_into_gemfile (method)\">#insert_into_gemfile</a></span>, <span class=\"object_link\"><a href=\"actions#insert_middleware-instance_method\" title=\"Padrino::Generators::Actions#insert_middleware (method)\">#insert_middleware</a></span>, <span class=\"object_link\"><a href=\"actions#invalid_fields-instance_method\" title=\"Padrino::Generators::Actions#invalid_fields (method)\">#invalid_fields</a></span>, <span class=\"object_link\"><a href=\"actions#keep_file-instance_method\" title=\"Padrino::Generators::Actions#keep_file (method)\">#keep_file</a></span>, <span class=\"object_link\"><a href=\"actions#middleware-instance_method\" title=\"Padrino::Generators::Actions#middleware (method)\">#middleware</a></span>, <span class=\"object_link\"><a href=\"actions#recognize_path-instance_method\" title=\"Padrino::Generators::Actions#recognize_path (method)\">#recognize_path</a></span>, <span class=\"object_link\"><a href=\"actions#require_contrib-instance_method\" title=\"Padrino::Generators::Actions#require_contrib (method)\">#require_contrib</a></span>, <span class=\"object_link\"><a href=\"actions#require_dependencies-instance_method\" title=\"Padrino::Generators::Actions#require_dependencies (method)\">#require_dependencies</a></span>, <span class=\"object_link\"><a href=\"actions#resolve_valid_choice-instance_method\" title=\"Padrino::Generators::Actions#resolve_valid_choice (method)\">#resolve_valid_choice</a></span>, <span class=\"object_link\"><a href=\"actions#retrieve_component_config-instance_method\" title=\"Padrino::Generators::Actions#retrieve_component_config (method)\">#retrieve_component_config</a></span>, <span class=\"object_link\"><a href=\"actions#run_bundler-instance_method\" title=\"Padrino::Generators::Actions#run_bundler (method)\">#run_bundler</a></span>, <span class=\"object_link\"><a href=\"actions#store_component_choice-instance_method\" title=\"Padrino::Generators::Actions#store_component_choice (method)\">#store_component_choice</a></span>, <span class=\"object_link\"><a href=\"actions#store_component_config-instance_method\" title=\"Padrino::Generators::Actions#store_component_config (method)\">#store_component_config</a></span>, <span class=\"object_link\"><a href=\"actions#test%3F-instance_method\" title=\"Padrino::Generators::Actions#test? (method)\">#test?</a></span>, <span class=\"object_link\"><a href=\"actions#tiny%3F-instance_method\" title=\"Padrino::Generators::Actions#tiny? (method)\">#tiny?</a></span>, <span class=\"object_link\"><a href=\"actions#valid_choice%3F-instance_method\" title=\"Padrino::Generators::Actions#valid_choice? (method)\">#valid_choice?</a></span>, <span class=\"object_link\"><a href=\"actions#valid_constant%3F-instance_method\" title=\"Padrino::Generators::Actions#valid_constant? (method)\">#valid_constant?</a></span>, <span class=\"object_link\"><a href=\"actions#validate_namespace-instance_method\" title=\"Padrino::Generators::Actions#validate_namespace (method)\">#validate_namespace</a></span></p>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"banner-class_method\"> .banner ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"source_root-class_method\"> .source_root ⇒ Object </h3>  </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"create_helper-instance_method\"> #create_helper ⇒ Object </h3>   <p>Execute helper generation</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Helper\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Helper</a>\n  </p>\n</div>\n","haml/helpers":"<h1>Module: Haml::Helpers </h1> <div class=\"box_info\"> <dl> <dt>Includes:</dt> <dd>ActionViewExtensions, XssMods</dd> </dl>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Haml/Helpers\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Haml/Helpers</a>\n  </p>\n</div>\n","padrino/helpers":"<h1>Module: Padrino::Helpers </h1>  <h2>Overview</h2>  <p>This component provides a variety of view helpers related to html markup generation. There are helpers for generating tags, forms, links, images, and more. Most of the basic methods should be very familiar to anyone who has used rails view helpers.</p>   \n<h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"modules\">Modules:</strong> <span class=\"object_link\"><a href=\"helpers/assettaghelpers\" title=\"Padrino::Helpers::AssetTagHelpers (module)\">AssetTagHelpers</a></span>, <span class=\"object_link\"><a href=\"helpers/formbuilder\" title=\"Padrino::Helpers::FormBuilder (module)\">FormBuilder</a></span>, <span class=\"object_link\"><a href=\"helpers/formhelpers\" title=\"Padrino::Helpers::FormHelpers (module)\">FormHelpers</a></span>, <span class=\"object_link\"><a href=\"helpers/formathelpers\" title=\"Padrino::Helpers::FormatHelpers (module)\">FormatHelpers</a></span>, <span class=\"object_link\"><a href=\"helpers/numberhelpers\" title=\"Padrino::Helpers::NumberHelpers (module)\">NumberHelpers</a></span>, <span class=\"object_link\"><a href=\"helpers/outputhelpers\" title=\"Padrino::Helpers::OutputHelpers (module)\">OutputHelpers</a></span>, <span class=\"object_link\"><a href=\"helpers/renderhelpers\" title=\"Padrino::Helpers::RenderHelpers (module)\">RenderHelpers</a></span>, <span class=\"object_link\"><a href=\"helpers/taghelpers\" title=\"Padrino::Helpers::TagHelpers (module)\">TagHelpers</a></span>, <span class=\"object_link\"><a href=\"helpers/translationhelpers\" title=\"Padrino::Helpers::TranslationHelpers (module)\">TranslationHelpers</a></span> </p> <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"helpers#registered-class_method\" title=\"registered (class method)\">.<strong>registered</strong>(app) ⇒ Object</a></code> <span class=\"summary_desc\"> Registers these helpers into your application:. </span> </li> </ul>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"registered-class_method\"> .registered(app) ⇒ Object </h3>   <p>Registers these helpers into your application:</p> <pre class=\"code ruby\" data-language=\"ruby\">Padrino::Helpers::OutputHelpers\nPadrino::Helpers::TagHelpers\nPadrino::Helpers::AssetTagHelpers\nPadrino::Helpers::FormHelpers\nPadrino::Helpers::FormatHelpers\nPadrino::Helpers::RenderHelpers\nPadrino::Helpers::NumberHelpers</pre>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4>  Register the helper module  <pre class=\"example code\" data-language=\"ruby\">require 'padrino-helpers'\nclass Padrino::Application\n  register Padrino::Helpers\nend</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">app</code> <span class=\"type\">(<code>Sinatra::Application</code>)</span> —  The specified Padrino application.  </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers</a>\n  </p>\n</div>\n","padrino/mailer/helpers":"<h1>Module: Padrino::Mailer::Helpers </h1>  <h2>Overview</h2>  <p>Helpers for defining and delivering email messages.</p>   \n<h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"modules\">Modules:</strong> <span class=\"object_link\"><a href=\"helpers/classmethods\" title=\"Padrino::Mailer::Helpers::ClassMethods (module)\">ClassMethods</a></span> </p> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"helpers#deliver-instance_method\" title=\"#deliver (instance method)\">#<strong>deliver</strong>(mailer_name, message_name, *attributes) ⇒ Object</a></code> <span class=\"summary_desc\"> Delivers a mailer message email with the given attributes. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"helpers#email-instance_method\" title=\"#email (instance method)\">#<strong>email</strong>(mail_attributes = {}, &amp;block) ⇒ Object</a></code> <span class=\"summary_desc\"> Delivers an email with the given mail attributes. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"deliver-instance_method\"> #deliver(mailer_name, message_name, *attributes) ⇒ Object </h3>   <p>Delivers a mailer message email with the given attributes.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">deliver(:sample, :birthday, \"Joey\", 21)\ndeliver(:example, :message, \"John\")</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">mailer_name</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The name of the mailer.  </li> <li> <code class=\"name\">message_name</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The name of the message to deliver.  </li> <li> <code class=\"name\">attributes</code>  —  The parameters to pass to the mailer.  </li> </ul> <h4 class=\"tag_title\">See Also:</h4> <ul class=\"see\"> <li><span class=\"object_link\"><a href=\"helpers/classmethods#deliver-instance_method\" title=\"Padrino::Mailer::Helpers::ClassMethods#deliver (method)\">Padrino::Mailer::Helpers::ClassMethods#deliver</a></span></li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"email-instance_method\"> #email(mail_attributes = {}, &amp;block) ⇒ Object </h3>   <p>Delivers an email with the given mail attributes.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">email do\n  to      @user.email\n  from    \"awesomeness@example.com\"\n  subject \"Welcome to Awesomeness!\"\n  locals  :a =&gt; a, :b =&gt; b\n  render  'path/to/my/template'\nend</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">mail_attributes</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The attributes for this message (to, from, subject, cc, bcc, body, etc).  </li> <li> <code class=\"name\">block</code> <span class=\"type\">(<code>Proc</code>)</span> —  The block mail attributes for this message.  </li> </ul> <h4 class=\"tag_title\">See Also:</h4> <ul class=\"see\"> <li><span class=\"object_link\"><a href=\"helpers/classmethods#email-instance_method\" title=\"Padrino::Mailer::Helpers::ClassMethods#email (method)\">Padrino::Mailer::Helpers::ClassMethods#email</a></span></li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mailer/Helpers\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mailer/Helpers</a>\n  </p>\n</div>\n","padrino/admin/helpers":"<h1>Module: Padrino::Admin::Helpers </h1>  <h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"modules\">Modules:</strong> <span class=\"object_link\"><a href=\"helpers/authenticationhelpers\" title=\"Padrino::Admin::Helpers::AuthenticationHelpers (module)\">AuthenticationHelpers</a></span>, <span class=\"object_link\"><a href=\"helpers/viewhelpers\" title=\"Padrino::Admin::Helpers::ViewHelpers (module)\">ViewHelpers</a></span> </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Helpers\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Helpers</a>\n  </p>\n</div>\n","padrino/performance/json/infectedrequire":"<h1>Module: Padrino::Performance::JSON::InfectedRequire </h1>  <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"infectedrequire#require-instance_method\" title=\"#require (instance method)\">#<strong>require</strong>(*args) ⇒ Object</a></code>  </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"require-instance_method\"> #require(*args) ⇒ Object </h3>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Performance/JSON/InfectedRequire\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Performance/JSON/InfectedRequire</a>\n  </p>\n</div>\n","padrino/generators/actions":"<h1>Module: Padrino::Generators::Actions </h1> <div class=\"box_info\"> <dl> <dt>Included in:</dt> <dd>\n<span class=\"object_link\"><a href=\"adminapp\" title=\"Padrino::Generators::AdminApp (class)\">AdminApp</a></span>, <span class=\"object_link\"><a href=\"adminpage\" title=\"Padrino::Generators::AdminPage (class)\">AdminPage</a></span>, <span class=\"object_link\"><a href=\"app\" title=\"Padrino::Generators::App (class)\">App</a></span>, <span class=\"object_link\"><a href=\"component\" title=\"Padrino::Generators::Component (class)\">Component</a></span>, <span class=\"object_link\"><a href=\"controller\" title=\"Padrino::Generators::Controller (class)\">Controller</a></span>, <span class=\"object_link\"><a href=\"helper\" title=\"Padrino::Generators::Helper (class)\">Helper</a></span>, <span class=\"object_link\"><a href=\"mailer\" title=\"Padrino::Generators::Mailer (class)\">Mailer</a></span>, <span class=\"object_link\"><a href=\"migration\" title=\"Padrino::Generators::Migration (class)\">Migration</a></span>, <span class=\"object_link\"><a href=\"model\" title=\"Padrino::Generators::Model (class)\">Model</a></span>, <span class=\"object_link\"><a href=\"plugin\" title=\"Padrino::Generators::Plugin (class)\">Plugin</a></span>, <span class=\"object_link\"><a href=\"project\" title=\"Padrino::Generators::Project (class)\">Project</a></span>, <span class=\"object_link\"><a href=\"task\" title=\"Padrino::Generators::Task (class)\">Task</a></span>\n</dd> </dl>  </div> <h2>Overview</h2>  <p>Common actions needed to support project and component generation.</p>   \n<h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"modules\">Modules:</strong> <span class=\"object_link\"><a href=\"actions/classmethods\" title=\"Padrino::Generators::Actions::ClassMethods (module)\">ClassMethods</a></span> </p> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#already_exists%3F-instance_method\" title=\"#already_exists? (instance method)\">#<strong>already_exists?</strong>(name, project_name = nil) ⇒ Boolean</a></code> <span class=\"summary_desc\"> Returns true if constant name already exists. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#app_skeleton-instance_method\" title=\"#app_skeleton (instance method)\">#<strong>app_skeleton</strong>(app, tiny = false) ⇒ Object</a></code> <span class=\"summary_desc\"> Generates standard and tiny applications within a project. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#apply_component_for-instance_method\" title=\"#apply_component_for (instance method)\">#<strong>apply_component_for</strong>(choice, component) ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the related module for a given component and option. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#apply_default_fields-instance_method\" title=\"#apply_default_fields (instance method)\">#<strong>apply_default_fields</strong>(fields) ⇒ Array&lt;String&gt;</a></code> <span class=\"summary_desc\"> Apply default field types. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#ask-instance_method\" title=\"#ask (instance method)\">#<strong>ask</strong>(statement, default = nil, color = nil) ⇒ String</a></code> <span class=\"summary_desc\"> Ask something to the user and receives a response. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#check_app_existence-instance_method\" title=\"#check_app_existence (instance method)\">#<strong>check_app_existence</strong>(app) ⇒ Object</a></code> <span class=\"summary_desc\"> Raise SystemExit if the app does not exist. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#destination_root-instance_method\" title=\"#destination_root (instance method)\">#<strong>destination_root</strong>(*paths) ⇒ String</a></code> <span class=\"summary_desc\"> Returns the root for this Thor class (also aliased as destination root). </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#empty_directory_with_keep_file-instance_method\" title=\"#empty_directory_with_keep_file (instance method)\">#<strong>empty_directory_with_keep_file</strong>(destination, config = {}) ⇒ Object</a></code> <span class=\"summary_desc\"> Creates an empty directory with .keep file. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#execute_component_setup-instance_method\" title=\"#execute_component_setup (instance method)\">#<strong>execute_component_setup</strong>(component, choice) ⇒ Object</a></code> <span class=\"summary_desc\"> Performs the necessary generator for a given component choice. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#fetch_app_name-instance_method\" title=\"#fetch_app_name (instance method)\">#<strong>fetch_app_name</strong>(app = 'app') ⇒ String</a></code> <span class=\"summary_desc\"> Returns the app_name for the application at root. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#fetch_component_choice-instance_method\" title=\"#fetch_component_choice (instance method)\">#<strong>fetch_component_choice</strong>(component) ⇒ String</a></code> <span class=\"summary_desc\"> Returns the component choice stored within the .component file of an application. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#fetch_project_name-instance_method\" title=\"#fetch_project_name (instance method)\">#<strong>fetch_project_name</strong>(app = 'app') ⇒ String</a></code> <span class=\"summary_desc\"> Returns the namespace for the project. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#in_app_root%3F-instance_method\" title=\"#in_app_root? (instance method)\">#<strong>in_app_root?</strong> ⇒ Boolean</a></code> <span class=\"summary_desc\"> Returns true if inside a Padrino application. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#include_component_module_for-instance_method\" title=\"#include_component_module_for (instance method)\">#<strong>include_component_module_for</strong>(component, choice = nil) ⇒ Object</a></code> <span class=\"summary_desc\"> Includes the component module for the given component and choice. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#initializer-instance_method\" title=\"#initializer (instance method)\">#<strong>initializer</strong>(name, data = nil) ⇒ Object</a></code> <span class=\"summary_desc\"> Registers and creates initializer. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#inject_into_file-instance_method\" title=\"#inject_into_file (instance method)\">#<strong>inject_into_file</strong>(destination, *args, &amp;block) ⇒ Object</a></code> <span class=\"summary_desc\"> Avoids editing destination file if it does not exist. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#insert_hook-instance_method\" title=\"#insert_hook (instance method)\">#<strong>insert_hook</strong>(include_text, where) ⇒ Object</a></code> <span class=\"summary_desc\"> Inserts an hook before or after load in our boot.rb. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#insert_into_gemfile-instance_method\" title=\"#insert_into_gemfile (instance method)\">#<strong>insert_into_gemfile</strong>(name, options = {}) ⇒ Object</a></code> <span class=\"summary_desc\"> Inserts a required gem into the Gemfile to add the bundler dependency. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#insert_middleware-instance_method\" title=\"#insert_middleware (instance method)\">#<strong>insert_middleware</strong>(include_text, app = nil) ⇒ Object</a></code> <span class=\"summary_desc\"> Inserts a middleware inside app.rb. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#invalid_fields-instance_method\" title=\"#invalid_fields (instance method)\">#<strong>invalid_fields</strong>(fields) ⇒ Array&lt;String&gt;</a></code> <span class=\"summary_desc\"> Returns the field with an unacceptable name(for symbol) else returns nil. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#keep_file-instance_method\" title=\"#keep_file (instance method)\">#<strong>keep_file</strong>(destination) ⇒ Object</a></code> <span class=\"summary_desc\"> Creates an empty .keep file. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#middleware-instance_method\" title=\"#middleware (instance method)\">#<strong>middleware</strong>(name, source) ⇒ Object</a></code> <span class=\"summary_desc\"> Creates and inserts middleware. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#recognize_path-instance_method\" title=\"#recognize_path (instance method)\">#<strong>recognize_path</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Recognizes the path of application. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#require_contrib-instance_method\" title=\"#require_contrib (instance method)\">#<strong>require_contrib</strong>(contrib) ⇒ Object</a></code> <span class=\"summary_desc\"> Insert the regired gem and add in boot.rb custom contribs. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#require_dependencies-instance_method\" title=\"#require_dependencies (instance method)\">#<strong>require_dependencies</strong>(*gem_names) ⇒ Object</a></code> <span class=\"summary_desc\"> Adds all the specified gems into the Gemfile for bundler. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#resolve_valid_choice-instance_method\" title=\"#resolve_valid_choice (instance method)\">#<strong>resolve_valid_choice</strong>(component) ⇒ String</a></code> <span class=\"summary_desc\"> Prompts the user if necessary until a valid choice is returned for the component. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#retrieve_component_config-instance_method\" title=\"#retrieve_component_config (instance method)\">#<strong>retrieve_component_config</strong>(target) ⇒ Hash</a></code> <span class=\"summary_desc\"> Loads the component config back into a hash. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#run_bundler-instance_method\" title=\"#run_bundler (instance method)\">#<strong>run_bundler</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Run the bundler. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#store_component_choice-instance_method\" title=\"#store_component_choice (instance method)\">#<strong>store_component_choice</strong>(key, value) ⇒ Symbol</a></code> <span class=\"summary_desc\"> Set the component choice in the .component file of the application. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#store_component_config-instance_method\" title=\"#store_component_config (instance method)\">#<strong>store_component_config</strong>(destination) ⇒ Object</a></code> <span class=\"summary_desc\"> Creates a component_config file at the destination containing all component options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#test%3F-instance_method\" title=\"#test? (instance method)\">#<strong>test?</strong> ⇒ Boolean</a></code> <span class=\"summary_desc\"> Return true if our project has test component. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#tiny%3F-instance_method\" title=\"#tiny? (instance method)\">#<strong>tiny?</strong> ⇒ Boolean</a></code> <span class=\"summary_desc\"> Return true if we have a tiny skeleton. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#valid_choice%3F-instance_method\" title=\"#valid_choice? (instance method)\">#<strong>valid_choice?</strong>(component, choice) ⇒ Boolean</a></code> <span class=\"summary_desc\"> Returns true if the option passed is a valid choice for component. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#valid_constant%3F-instance_method\" title=\"#valid_constant? (instance method)\">#<strong>valid_constant?</strong>(name) ⇒ Exception</a></code> <span class=\"summary_desc\"> Ensure that project name is valid, else raise an NameError. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"actions#validate_namespace-instance_method\" title=\"#validate_namespace (instance method)\">#<strong>validate_namespace</strong>(name) ⇒ Object</a></code> <span class=\"summary_desc\"> Validates namespace name (controller name, etc.) or fails with an error. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"already_exists?-instance_method\"> #already_exists?(name, project_name = nil) ⇒ Boolean </h3>   <p>Returns true if constant name already exists.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"app_skeleton-instance_method\"> #app_skeleton(app, tiny = false) ⇒ Object </h3>   <p>Generates standard and tiny applications within a project.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">app_skeleton 'some_app'\napp_skeleton 'sub_app', true</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">app</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Name of application.  </li> <li> <code class=\"name\">tiny</code> <span class=\"type\">(<code>Boolean</code>)</span> <em class=\"default\">(defaults to: <code>false</code>)</em> —  Boolean to generate a tiny structure.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"apply_component_for-instance_method\"> #apply_component_for(choice, component) ⇒ Object </h3>   <p>Returns the related module for a given component and option.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">apply_component_for('rr', :mock)</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">choice</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The name of the component module.  </li> <li> <code class=\"name\">component</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The type of the component module.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"apply_default_fields-instance_method\"> #apply_default_fields(fields) ⇒ Array&lt;String&gt; </h3>   <p>Apply default field types.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">fields</code> <span class=\"type\">(<code>Array&lt;<span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span>&gt;</code>)</span> —  Field names for generators.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Array&lt;<span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span>&gt;</code>)</span> —  fields with default types  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"ask-instance_method\"> #ask(statement, default = nil, color = nil) ⇒ String </h3>   <p>Ask something to the user and receives a response.</p> <p>auto_locale</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">ask(\"What is your name?\")\nask(\"Path for ruby\", \"/usr/local/bin/ruby\") =&gt; \"Path for ruby (leave blank for /usr/local/bin/ruby):\"</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">statement</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  String of statement to display for input.  </li> <li> <code class=\"name\">default</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <em class=\"default\">(defaults to: <code>nil</code>)</em> —  Default value for input.  </li> <li> <code class=\"name\">color</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <em class=\"default\">(defaults to: <code>nil</code>)</em> —  Name of color to display input.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Input value  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"check_app_existence-instance_method\"> #check_app_existence(app) ⇒ Object </h3>   <p>Raise SystemExit if the app does not exist.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">check_app_existence 'app'</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">app</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Directory name of application.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"destination_root-instance_method\"> #destination_root(*paths) ⇒ String </h3>   <p>Returns the root for this Thor class (also aliased as destination root).</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">destination_root('config/boot.rb')</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">paths</code> <span class=\"type\">(<code>Array&lt;<span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span>&gt;</code>)</span> —  The relative path from destination root.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The full path  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"empty_directory_with_keep_file-instance_method\"> #empty_directory_with_keep_file(destination, config = {}) ⇒ Object </h3>   <p>Creates an empty directory with .keep file</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"execute_component_setup-instance_method\"> #execute_component_setup(component, choice) ⇒ Object </h3>   <p>Performs the necessary generator for a given component choice.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">execute_component_setup(:mock, 'rr')</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">component</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The type of component module.  </li> <li> <code class=\"name\">choice</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The name of the component module choice.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"fetch_app_name-instance_method\"> #fetch_app_name(app = 'app') ⇒ String </h3>   <p>Returns the app_name for the application at root.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">fetch_app_name('subapp')</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">app</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <em class=\"default\">(defaults to: <code>'app'</code>)</em> —  folder name of application.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  class name for application.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"fetch_component_choice-instance_method\"> #fetch_component_choice(component) ⇒ String </h3>   <p>Returns the component choice stored within the .component file of an application.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">fetch_component_choice(:mock)</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">component</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The type of component module.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Name of the component module.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"fetch_project_name-instance_method\"> #fetch_project_name(app = 'app') ⇒ String </h3>   <p>Returns the namespace for the project.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">fetch_project_name</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">app</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <em class=\"default\">(defaults to: <code>'app'</code>)</em> —  folder name of application.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  namespace for application.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"in_app_root?-instance_method\"> #in_app_root? ⇒ Boolean </h3>   <p>Returns true if inside a Padrino application.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"include_component_module_for-instance_method\"> #include_component_module_for(component, choice = nil) ⇒ Object </h3>   <p>Includes the component module for the given component and choice. It determines the choice using .components file.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">include_component_module_for(:mock)\ninclude_component_module_for(:mock, 'rr')</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">component</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The type of component module.  </li> <li> <code class=\"name\">choice</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <em class=\"default\">(defaults to: <code>nil</code>)</em> —  The name of the component module.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"initializer-instance_method\"> #initializer(name, data = nil) ⇒ Object </h3>   <p>Registers and creates initializer.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">initializer(:test, \"some stuff here\")\n#=&gt; generates 'lib/test_init.rb'</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code>Symbol</code>)</span> —  Name of the initializer.  </li> <li> <code class=\"name\">data</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <em class=\"default\">(defaults to: <code>nil</code>)</em> —  Text to generate into the initializer file.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"inject_into_file-instance_method\"> #inject_into_file(destination, *args, &amp;block) ⇒ Object </h3>   <p>Avoids editing destination file if it does not exist.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"insert_hook-instance_method\"> #insert_hook(include_text, where) ⇒ Object </h3>   <p>Inserts an hook before or after load in our boot.rb.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">insert_hook(\"DataMapper.finalize\", :after_load)</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">include_text</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Text to include into hooks in boot.rb.  </li> <li> <code class=\"name\">where</code> <span class=\"type\">(<code>Symbol</code>)</span> —  method hook to call from Padrino, i.e :after_load, :before_load.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"insert_into_gemfile-instance_method\"> #insert_into_gemfile(name, options = {}) ⇒ Object </h3>   <p>Inserts a required gem into the Gemfile to add the bundler dependency.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">insert_into_gemfile(name)\ninsert_into_gemfile(name, :group =&gt; 'test', :require =&gt; 'foo')\ninsert_into_gemfile(name, :group =&gt; 'test', :version =&gt; \"&gt;1.2.3\")</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Name of gem to insert into Gemfile.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  Options to generate into Gemfile for gem.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"insert_middleware-instance_method\"> #insert_middleware(include_text, app = nil) ⇒ Object </h3>   <p>Inserts a middleware inside app.rb.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">insert_middleware(ActiveRecord::ConnectionAdapters::ConnectionManagement)</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">include_text</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Text to include into hooks in boot.rb.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"invalid_fields-instance_method\"> #invalid_fields(fields) ⇒ Array&lt;String&gt; </h3>   <p>Returns the field with an unacceptable name(for symbol) else returns nil.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">invalid_fields ['foo:bar', 'hello:world']</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">fields</code> <span class=\"type\">(<code>Array&lt;<span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span>&gt;</code>)</span> —  Field names for generators.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Array&lt;<span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span>&gt;</code>)</span> —  array of invalid fields  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"keep_file-instance_method\"> #keep_file(destination) ⇒ Object </h3>   <p>Creates an empty .keep file</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"middleware-instance_method\"> #middleware(name, source) ⇒ Object </h3>   <p>Creates and inserts middleware.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">middleware(:hello, \"class Hello\\nend\")\n#=&gt; generates 'lib/hello_middleware.rb'</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code>Symbol</code>, <code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Name of the middleware.  </li> <li> <code class=\"name\">source</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Text to generate into the middleware file.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"recognize_path-instance_method\"> #recognize_path ⇒ Object </h3>   <p>Recognizes the path of application.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"require_contrib-instance_method\"> #require_contrib(contrib) ⇒ Object </h3>   <p>Insert the regired gem and add in boot.rb custom contribs.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">require_contrib('auto_locale')</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">contrib</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  name of library from padrino-contrib  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"require_dependencies-instance_method\"> #require_dependencies(*gem_names) ⇒ Object </h3>   <p>Adds all the specified gems into the Gemfile for bundler.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">require_dependencies('active_record')\nrequire_dependencies('mocha', 'bacon', :group =&gt; 'test')\nrequire_dependencies('json', :version =&gt; \"&gt;=1.2.3\")</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">gem_names</code> <span class=\"type\">(<code>Array&lt;<span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span>&gt;</code>)</span> —  Splat of gems to require in Gemfile.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> —  The options to pass to gem in Gemfile.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"resolve_valid_choice-instance_method\"> #resolve_valid_choice(component) ⇒ String </h3>   <p>Prompts the user if necessary until a valid choice is returned for the component.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">resolve_valid_choice(:mock)</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">component</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The type of component module.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Name of component if valid, otherwise ask for valid choice.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"retrieve_component_config-instance_method\"> #retrieve_component_config(target) ⇒ Hash </h3>   <p>Loads the component config back into a hash.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">retrieve_component_config(...)\n# =&gt; { :mock =&gt; 'rr', :test =&gt; 'rspec', ... }</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">target</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Path to component config file.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Hash</code>)</span> —  Loaded YAML file.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"run_bundler-instance_method\"> #run_bundler ⇒ Object </h3>   <p>Run the bundler.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"store_component_choice-instance_method\"> #store_component_choice(key, value) ⇒ Symbol </h3>   <p>Set the component choice in the .component file of the application.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">store_component_choice(:renderer, :haml)</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">key</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The type of component module.  </li> <li> <code class=\"name\">value</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The name of the component module.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Symbol</code>)</span> —  The name of the component module.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"store_component_config-instance_method\"> #store_component_config(destination) ⇒ Object </h3>   <p>Creates a component_config file at the destination containing all component options. Content is a YAMLized version of a hash containing component name mapping to chosen value.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">store_component_config('/foo/bar')</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">destination</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The file path to store the component config.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"test?-instance_method\"> #test? ⇒ Boolean </h3>   <p>Return true if our project has test component.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"tiny?-instance_method\"> #tiny? ⇒ Boolean </h3>   <p>Return true if we have a tiny skeleton.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"valid_choice?-instance_method\"> #valid_choice?(component, choice) ⇒ Boolean </h3>   <p>Returns true if the option passed is a valid choice for component.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">valid_choice?(:mock, 'rr')</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">component</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The type of component module.  </li> <li> <code class=\"name\">choice</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The name of the component module.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> —  Boolean of whether the choice is valid.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"valid_constant?-instance_method\"> #valid_constant?(name) ⇒ Exception </h3>   <p>Ensure that project name is valid, else raise an NameError.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">valid_constant '1235Stuff'\nvalid_constant '#Abc'</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Name of project.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Exception</code>)</span> —  Exception with error message if not valid.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"validate_namespace-instance_method\"> #validate_namespace(name) ⇒ Object </h3>   <p>Validates namespace name (controller name, etc.) or fails with an error.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">validate_namespace 'Project_One1' #=&gt; pass\nvalidate_namespace 'Erroneous/name' #=&gt; fail</pre> </div> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Actions\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Actions</a>\n  </p>\n</div>\n","padrino/routing/classmethods":"<h1>Module: Padrino::Routing::ClassMethods </h1>  <h2>Overview</h2>  <p>Class methods responsible for enhanced routing for controllers.</p>    <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#absolute_url-instance_method\" title=\"#absolute_url (instance method)\">#<strong>absolute_url</strong>(*args) ⇒ Object</a></code> <span class=\"summary_desc\"> Returns absolute url. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#add_filter-instance_method\" title=\"#add_filter (instance method)\">#<strong>add_filter</strong>(type, &amp;block) ⇒ Object</a></code> <span class=\"summary_desc\"> Adds a filter hook to a request. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#after-instance_method\" title=\"#after (instance method)\">#<strong>after</strong>(*args, &amp;block) ⇒ Object</a></code> <span class=\"summary_desc\"> Add an after filter hook. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#before-instance_method\" title=\"#before (instance method)\">#<strong>before</strong>(*args, &amp;block) ⇒ Object</a></code> <span class=\"summary_desc\"> Add a before filter hook. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#compiled_router-instance_method\" title=\"#compiled_router (instance method)\">#<strong>compiled_router</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#construct_filter-instance_method\" title=\"#construct_filter (instance method)\">#<strong>construct_filter</strong>(*args, &amp;block) ⇒ Object</a></code> <span class=\"summary_desc\"> Creates a filter to process before/after the matching route. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#controller-instance_method\" title=\"#controller (instance method)\">#<strong>controller</strong>(*args) { ... } ⇒ Object</a> (also: #controllers)</code> <span class=\"summary_desc\"> Method to organize our routes in a better way. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#deferred_routes-instance_method\" title=\"#deferred_routes (instance method)\">#<strong>deferred_routes</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#delete-instance_method\" title=\"#delete (instance method)\">#<strong>delete</strong>(path, *args, &amp;block) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#get-instance_method\" title=\"#get (instance method)\">#<strong>get</strong>(path, *args, &amp;block) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#head-instance_method\" title=\"#head (instance method)\">#<strong>head</strong>(path, *args, &amp;block) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#link-instance_method\" title=\"#link (instance method)\">#<strong>link</strong>(path, *args, &amp;block) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#options-instance_method\" title=\"#options (instance method)\">#<strong>options</strong>(path, *args, &amp;block) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#parent-instance_method\" title=\"#parent (instance method)\">#<strong>parent</strong>(name = nil, options = {}) ⇒ Object</a></code> <span class=\"summary_desc\"> Provides many parents with shallowing. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#patch-instance_method\" title=\"#patch (instance method)\">#<strong>patch</strong>(path, *args, &amp;block) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#post-instance_method\" title=\"#post (instance method)\">#<strong>post</strong>(path, *args, &amp;block) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#process_path_for_parent_params-instance_method\" title=\"#process_path_for_parent_params (instance method)\">#<strong>process_path_for_parent_params</strong>(path, parent_params) ⇒ Object</a></code> <span class=\"summary_desc\"> Processes the existing path and prepends the 'parent' parameters onto the route Used for calculating path in route method. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#put-instance_method\" title=\"#put (instance method)\">#<strong>put</strong>(path, *args, &amp;block) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#rebase_url-instance_method\" title=\"#rebase_url (instance method)\">#<strong>rebase_url</strong>(url) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#recognize_path-instance_method\" title=\"#recognize_path (instance method)\">#<strong>recognize_path</strong>(path) ⇒ Symbol, Hash</a></code> <span class=\"summary_desc\"> Recognize a given path. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#reset_router%21-instance_method\" title=\"#reset_router! (instance method)\">#<strong>reset_router!</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#router-instance_method\" title=\"#router (instance method)\">#<strong>router</strong> ⇒ Object</a> (also: #urls)</code> <span class=\"summary_desc\"> Using PathRouter, for features and configurations. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#unlink-instance_method\" title=\"#unlink (instance method)\">#<strong>unlink</strong>(path, *args, &amp;block) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"classmethods#url-instance_method\" title=\"#url (instance method)\">#<strong>url</strong>(*args) ⇒ Object</a> (also: #url_for)</code> <span class=\"summary_desc\"> Instance method for url generation. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"absolute_url-instance_method\"> #absolute_url(*args) ⇒ Object </h3>   <p>Returns absolute url. By default adds '<a href=\"http://localhost\">localhost</a>' before generated url. To change that `set :base_url, '<a href=\"http://example.com\">example.com</a>'` in your app.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"add_filter-instance_method\"> #add_filter(type, &amp;block) ⇒ Object </h3>   <p>Adds a filter hook to a request.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"after-instance_method\"> #after(*args, &amp;block) ⇒ Object </h3>   <p>Add an after filter hook.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">See Also:</h4> <ul class=\"see\"> <li><span class=\"object_link\"><a href=\"classmethods#construct_filter-instance_method\" title=\"Padrino::Routing::ClassMethods#construct_filter (method)\">#construct_filter</a></span></li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"before-instance_method\"> #before(*args, &amp;block) ⇒ Object </h3>   <p>Add a before filter hook.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">See Also:</h4> <ul class=\"see\"> <li><span class=\"object_link\"><a href=\"classmethods#construct_filter-instance_method\" title=\"Padrino::Routing::ClassMethods#construct_filter (method)\">#construct_filter</a></span></li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"compiled_router-instance_method\"> #compiled_router ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"construct_filter-instance_method\"> #construct_filter(*args, &amp;block) ⇒ Object </h3>   <p>Creates a filter to process before/after the matching route.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4>  We are be able to filter with String path  <pre class=\"example code\" data-language=\"ruby\">before('/') { 'only to :index' }\nget(:index} { 'foo' } # =&gt; filter match only before this.\nget(:main) { 'bar' }</pre>  is the same of  <pre class=\"example code\" data-language=\"ruby\">before(:index) { 'only to :index' }\nget(:index} { 'foo' } # =&gt; filter match only before this.\nget(:main) { 'bar' }</pre>  it works only for the given controller  <pre class=\"example code\" data-language=\"ruby\">controller :foo do\n  before(:index) { 'only to for :foo_index' }\n  get(:index} { 'foo' } # =&gt; filter match only before this.\n  get(:main) { 'bar' }\nend\n\ncontroller :bar do\n  before(:index) { 'only to for :bar_index' }\n  get(:index} { 'foo' } # =&gt; filter match only before this.\n  get(:main) { 'bar' }\nend</pre>  if filters based on a symbol or regexp  <pre class=\"example code\" data-language=\"ruby\">before :index, /main/ do; ... end\n# =&gt; match only path that are  +/+ or contains +main+</pre>  filtering everything except an occurrence  <pre class=\"example code\" data-language=\"ruby\">before :except =&gt; :index do; ...; end</pre>  you can also filter using a request param  <pre class=\"example code\" data-language=\"ruby\">before :agent =&gt; /IE/ do; ...; end\n# =&gt; match +HTTP_USER_AGENT+ containing +IE+</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">args</code> <span class=\"type\">(<code>Array</code>)</span> </li> </ul> <h4 class=\"tag_title\">See Also:</h4> <ul class=\"see\"> <li><a href=\"http://www.padrinorb.com/guides/controllers#route-filters\" target=\"_parent\" title=\"http://www.padrinorb.com/guides/controllers#route-filters\">http://www.padrinorb.com/guides/controllers#route-filters</a></li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"controller-instance_method\"> #controller(*args) { ... } ⇒ Object Also known as: controllers  </h3>   <p>Method to organize our routes in a better way.</p> <p>In a controller, before and after filters are scoped and don't</p> <pre class=\"code ruby\" data-language=\"ruby\">affect other controllers or the main app.</pre> <p>In a controller, layouts are scoped and don't affect other</p> <pre class=\"code ruby\" data-language=\"ruby\">controllers or the main app.</pre>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">controller :admin do\n  get :index do; ...; end\n  get :show, :with =&gt; :id  do; ...; end\nend\n\nurl(:admin_index) # =&gt; \"/admin\"\nurl(:admin_show, :id =&gt; 1) # \"/admin/show/1\"</pre>  Using named routes follow the sinatra way:  <pre class=\"example code\" data-language=\"ruby\">controller \"/admin\" do\n  get \"/index\" do; ...; end\n  get \"/show/:id\" do; ...; end\nend</pre>  Supply <code>:provides</code> to all controller routes:  <pre class=\"example code\" data-language=\"ruby\">controller :provides =&gt; [:html, :xml, :json] do\n  get :index do; \"respond to html, xml and json\"; end\n  post :index do; \"respond to html, xml and json\"; end\n  get :foo do; \"respond to html, xml and json\"; end\nend</pre>  Specify parent resources in padrino with the <code>:parent</code> option on the controller:  <pre class=\"example code\" data-language=\"ruby\">controllers :product, :parent =&gt; :user do\n  get :index do\n    # url is generated as \"/user/#{params[:user_id]}/product\"\n    # url_for(:product, :index, :user_id =&gt; 5) =&gt; \"/user/5/product\"\n  end\n  get :show, :with =&gt; :id do\n    # url is generated as \"/user/#{params[:user_id]}/product/show/#{params[:id]}\"\n    # url_for(:product, :show, :user_id =&gt; 5, :id =&gt; 10) =&gt; \"/user/5/product/show/10\"\n  end\nend</pre>  Specify conditions to run for all routes:  <pre class=\"example code\" data-language=\"ruby\">controller :conditions =&gt; {:protect =&gt; true} do\n  def self.protect(protected)\n    condition do\n      halt 403, \"No secrets for you!\" unless params[:key] == \"s3cr3t\"\n    end if protected\n  end\n\n  # This route will only return \"secret stuff\" if the user goes to\n  # `/private?key=s3cr3t`.\n  get(\"/private\") { \"secret stuff\" }\n\n  # And this one, too!\n  get(\"/also-private\") { \"secret stuff\" }\n\n  # But you can override the conditions for each route as needed.\n  # This route will be publicly accessible without providing the\n  # secret key.\n  get :index, :protect =&gt; false do\n    \"Welcome!\"\n  end\nend</pre>  Supply default values:  <pre class=\"example code\" data-language=\"ruby\">controller :lang =&gt; :de do\n  get :index, :map =&gt; \"/:lang\" do; \"params[:lang] == :de\"; end\nend</pre> <pre class=\"example code\" data-language=\"ruby\">controller :posts do\n  layout :post\n  before { foo }\n  after  { bar }\nend</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">args</code> <span class=\"type\">(<code>Array</code>)</span> —  Controller arguments.  </li> </ul> <h4 class=\"tag_title\">Yields:</h4> <ul class=\"yield\"> <li>  <dl class=\"rdoc-list\">\n <dd> The given block will be used to define the routes within the Controller. </dd>\n</dl>  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"deferred_routes-instance_method\"> #deferred_routes ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"delete-instance_method\"> #delete(path, *args, &amp;block) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"get-instance_method\"> #get(path, *args, &amp;block) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"head-instance_method\"> #head(path, *args, &amp;block) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"link-instance_method\"> #link(path, *args, &amp;block) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"options-instance_method\"> #options(path, *args, &amp;block) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"parent-instance_method\"> #parent(name = nil, options = {}) ⇒ Object </h3>   <p>Provides many parents with shallowing.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">controllers :product do\n  parent :shop, :optional =&gt; true, :map =&gt; \"/my/stand\"\n  parent :category, :optional =&gt; true\n  get :show, :with =&gt; :id do\n    # generated urls:\n    #   \"/product/show/#{params[:id]}\"\n    #   \"/my/stand/#{params[:shop_id]}/product/show/#{params[:id]}\"\n    #   \"/my/stand/#{params[:shop_id]}/category/#{params[:category_id]}/product/show/#{params[:id]}\"\n    # url_for(:product, :show, :id =&gt; 10) =&gt; \"/product/show/10\"\n    # url_for(:product, :show, :shop_id =&gt; 5, :id =&gt; 10) =&gt; \"/my/stand/5/product/show/10\"\n    # url_for(:product, :show, :shop_id =&gt; 5, :category_id =&gt; 1, :id =&gt; 10) =&gt; \"/my/stand/5/category/1/product/show/10\"\n  end\nend</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code>Symbol</code>)</span> <em class=\"default\">(defaults to: <code>nil</code>)</em> —  The parent name.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  Additional options.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"patch-instance_method\"> #patch(path, *args, &amp;block) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"post-instance_method\"> #post(path, *args, &amp;block) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"process_path_for_parent_params-instance_method\"> #process_path_for_parent_params(path, parent_params) ⇒ Object </h3>   <p>Processes the existing path and prepends the 'parent' parameters onto the route Used for calculating path in route method.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"put-instance_method\"> #put(path, *args, &amp;block) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"rebase_url-instance_method\"> #rebase_url(url) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"recognize_path-instance_method\"> #recognize_path(path) ⇒ Symbol, Hash </h3>   <p>Recognize a given path.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4>  Giving a controller like:  <pre class=\"example code\" data-language=\"ruby\">controller :foo do\n  get :bar, :map =&gt; 'foo-bar-:id'; ...; end\nend</pre>  You should be able to reverse:  <pre class=\"example code\" data-language=\"ruby\">MyApp.url(:foo_bar, :id =&gt; :mine)\n# =&gt; /foo-bar-mine</pre>  Into this:  <pre class=\"example code\" data-language=\"ruby\">MyApp.recognize_path('foo-bar-mine')\n# =&gt; [:foo_bar, :id =&gt; :mine]</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">path</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Path+Query to parse  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Symbol</code>, <code>Hash</code>)</span> —  Returns controller and query params.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"reset_router!-instance_method\"> #reset_router! ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"router-instance_method\"> #router ⇒ Object Also known as: urls  </h3>   <p>Using PathRouter, for features and configurations.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">router.add('/greedy/:greed')\nrouter.recognize('/simple')</pre> </div> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"unlink-instance_method\"> #unlink(path, *args, &amp;block) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"url-instance_method\"> #url(*args) ⇒ Object Also known as: url_for  </h3>   <p>Instance method for url generation.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">url(:show, :id =&gt; 1)\nurl(:show, :name =&gt; 'test', :id =&gt; 24)\nurl(:show, 1)\nurl(:controller_name, :show, :id =&gt; 21)\nurl(:controller_show, :id =&gt; 29)\nurl(:index, :fragment =&gt; 'comments')</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> —  a customizable set of options  </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing/ClassMethods\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing/ClassMethods</a>\n  </p>\n</div>\n","padrino/flash/helpers":"<h1>Module: Padrino::Flash::Helpers </h1>  <h2>Overview</h2>  <p>Storage</p>    <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"helpers#flash-instance_method\" title=\"#flash (instance method)\">#<strong>flash</strong> ⇒ Storage</a></code> <span class=\"summary_desc\"> Returns the flash storage object. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"helpers#redirect-instance_method\" title=\"#redirect (instance method)\">#<strong>redirect</strong>(url, *args) ⇒ Object</a> (also: #redirect_to)</code> <span class=\"summary_desc\"> Overloads the existing redirect helper in-order to provide support for flash messages. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"flash-instance_method\"> #flash ⇒ Storage </h3>   <p>Returns the flash storage object.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"storage\" title=\"Padrino::Flash::Storage (class)\">Storage</a></span></code>)</span> </li> </ul> <h4 class=\"tag_title\">Since:</h4> <ul class=\"since\"> <li>  0.10.8  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"redirect-instance_method\"> #redirect(url) ⇒ Object  #redirect(url, status_code) ⇒ Object  #redirect(url, status_code, flash_messages) ⇒ Object  #redirect(url, flash_messages) ⇒ Object  Also known as: redirect_to  </h3>   <p>Overloads the existing redirect helper in-order to provide support for flash messages.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">redirect(dashboard, success: :user_created)\nredirect(new_location, 301, notice: 'This page has moved. Please update your bookmarks!!')</pre> </div> <h4 class=\"tag_title\">Overloads:</h4> <ul class=\"overload\"> <li class=\"overload_item\"> <h3 class=\"signature\">#redirect(url) ⇒ Object </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">url</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> </li> </ul> </div> </li> <li class=\"overload_item\"> <h3 class=\"signature\">#redirect(url, status_code) ⇒ Object </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">url</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> </li> <li> <code class=\"name\">status_code</code> <span class=\"type\">(<code>Fixnum</code>)</span> </li> </ul> </div> </li> <li class=\"overload_item\"> <h3 class=\"signature\">#redirect(url, status_code, flash_messages) ⇒ Object </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">url</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> </li> <li> <code class=\"name\">status_code</code> <span class=\"type\">(<code>Fixnum</code>)</span> </li> <li> <code class=\"name\">flash_messages</code> <span class=\"type\">(<code>Hash</code>)</span> </li> </ul> </div> </li> <li class=\"overload_item\"> <h3 class=\"signature\">#redirect(url, flash_messages) ⇒ Object </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">url</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> </li> <li> <code class=\"name\">flash_messages</code> <span class=\"type\">(<code>Hash</code>)</span> </li> </ul> </div> </li> </ul> <h4 class=\"tag_title\">Since:</h4> <ul class=\"since\"> <li>  0.10.8  </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Flash/Helpers\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Flash/Helpers</a>\n  </p>\n</div>\n","padrino/rendering/instancemethods":"<h1>Module: Padrino::Rendering::InstanceMethods </h1>  <h2>Overview</h2>  <p>Instance methods that allow enhanced rendering to function properly in Padrino.</p>    <h2>Instance Attribute Summary \n</h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"instancemethods#current_engine-instance_method\" title=\"#current_engine (instance method)\">#<strong>current_engine</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute current_engine. </span> </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"instancemethods#content_type-instance_method\" title=\"#content_type (instance method)\">#<strong>content_type</strong>(type = nil, params = {}) ⇒ Object</a></code> <span class=\"summary_desc\"> Get/Set the content_type. </span> </li> </ul>  <h2>Instance Attribute Details</h2>  <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"current_engine-instance_method\"> #current_engine ⇒ Object (readonly) </h3>   <p>Returns the value of attribute current_engine</p>    </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"content_type-instance_method\"> #content_type(type = nil, params = {}) ⇒ Object </h3>   <p>Get/Set the content_type</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">case content_type\n  when :js then do_some\n  when :css then do_another\nend\n\ncontent_type :js\n# =&gt; set the response with 'application/javascript' Content-Type\ncontent_type 'text/html'\n\n# =&gt; set directly the Content-Type to 'text/html'</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">type</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>, <code>nil</code>)</span> <em class=\"default\">(defaults to: <code>nil</code>)</em> —  The Content-Type to use.  </li> <li> <code class=\"name\">type.</code> <span class=\"type\">(<code>Symbol</code>, <code>nil</code>)</span> —  Look and parse the given symbol to the matched Content-Type.  </li> <li> <code class=\"name\">params</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  Additional params to append to the Content-Type.  </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/InstanceMethods\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/InstanceMethods</a>\n  </p>\n</div>\n","padrino/performance/json":"<h1>Module: Padrino::Performance::JSON </h1>  <h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"modules\">Modules:</strong> <span class=\"object_link\"><a href=\"json/infectedrequire\" title=\"Padrino::Performance::JSON::InfectedRequire (module)\">InfectedRequire</a></span> </p> <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"json#infect_require%21-class_method\" title=\"infect_require! (class method)\">.<strong>infect_require!</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"json#loaded_lib%21-class_method\" title=\"loaded_lib! (class method)\">.<strong>loaded_lib!</strong>(lib) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"json#loaded_libs-class_method\" title=\"loaded_libs (class method)\">.<strong>loaded_libs</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"json#registered_libs-class_method\" title=\"registered_libs (class method)\">.<strong>registered_libs</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> InfectedRequire. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"json#setup_captures%21-class_method\" title=\"setup_captures! (class method)\">.<strong>setup_captures!</strong>(*libs) ⇒ Object</a></code>  </li> </ul>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"infect_require!-class_method\"> .infect_require! ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"loaded_lib!-class_method\"> .loaded_lib!(lib) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"loaded_libs-class_method\"> .loaded_libs ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"registered_libs-class_method\"> .registered_libs ⇒ Object </h3>   <p>InfectedRequire</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"setup_captures!-class_method\"> .setup_captures!(*libs) ⇒ Object </h3>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Performance/JSON\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Performance/JSON</a>\n  </p>\n</div>\n","kernel":"<h1>Module: Kernel </h1>  <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"kernel#logger-instance_method\" title=\"#logger (instance method)\">#<strong>logger</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Define a logger available every where in our app. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"logger-instance_method\"> #logger ⇒ Object </h3>   <p>Define a logger available every where in our app</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Kernel\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Kernel</a>\n  </p>\n</div>\n","padrino/routing/instancemethods":"<h1>Module: Padrino::Routing::InstanceMethods </h1>  <h2>Overview</h2>  <p>Instance methods related to recognizing and processing routes and serving static files.</p>    <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"instancemethods#absolute_url-instance_method\" title=\"#absolute_url (instance method)\">#<strong>absolute_url</strong>(*args) ⇒ Object</a></code> <span class=\"summary_desc\"> Returns absolute url. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"instancemethods#content_type-instance_method\" title=\"#content_type (instance method)\">#<strong>content_type</strong>(type = nil, params = {}) ⇒ Object</a></code> <span class=\"summary_desc\"> Return the request format, this is useful when we need to respond to a given Content-Type. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"instancemethods#current_path-instance_method\" title=\"#current_path (instance method)\">#<strong>current_path</strong>(*path_params) ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the current path within a route from specified <code>path_params</code>. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"instancemethods#recognize_path-instance_method\" title=\"#recognize_path (instance method)\">#<strong>recognize_path</strong>(path) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"instancemethods#route-instance_method\" title=\"#route (instance method)\">#<strong>route</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the current route. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"instancemethods#static%21-instance_method\" title=\"#static! (instance method)\">#<strong>static!</strong>(options = {}) ⇒ Object</a></code> <span class=\"summary_desc\"> Method for deliver static files. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"instancemethods#static_file%3F-instance_method\" title=\"#static_file? (instance method)\">#<strong>static_file?</strong>(path_info) ⇒ Boolean</a></code> <span class=\"summary_desc\"> This is mostly just a helper so request.path_info isn't changed when serving files from the public directory. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"instancemethods#url-instance_method\" title=\"#url (instance method)\">#<strong>url</strong>(*args) ⇒ Object</a> (also: #url_for)</code> <span class=\"summary_desc\"> Instance method for URL generation. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"absolute_url-instance_method\"> #absolute_url(*args) ⇒ Object </h3>   <p>Returns absolute url. Calls Sinatra::Helpers#uri to generate protocol version, hostname and port.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">absolute_url(:show, :id =&gt; 1)  # =&gt; http://example.com/show?id=1\nabsolute_url(:show, 24)        # =&gt; https://example.com/admin/show/24\nabsolute_url('/foo/bar')       # =&gt; https://example.com/admin/foo/bar\nabsolute_url('baz')            # =&gt; https://example.com/admin/foo/baz</pre> </div> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"content_type-instance_method\"> #content_type(type = nil, params = {}) ⇒ Object </h3>   <p>Return the request format, this is useful when we need to respond to a given Content-Type.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">get :index, :provides =&gt; :any do\n  case content_type\n    when :js    then ...\n    when :json  then ...\n    when :html  then ...\n  end\nend</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">type</code> <span class=\"type\">(<code>Symbol</code>, <code>nil</code>)</span> <em class=\"default\">(defaults to: <code>nil</code>)</em> </li> <li> <code class=\"name\">params</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"current_path-instance_method\"> #current_path(*path_params) ⇒ Object </h3>   <p>Returns the current path within a route from specified <code>path_params</code>.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"recognize_path-instance_method\"> #recognize_path(path) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"route-instance_method\"> #route ⇒ Object </h3>   <p>Returns the current route</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">-if route.controller == :press\n  %li=show_article</pre> </div> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"static!-instance_method\"> #static!(options = {}) ⇒ Object </h3>   <p>Method for deliver static files.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"static_file?-instance_method\"> #static_file?(path_info) ⇒ Boolean </h3>   <p>This is mostly just a helper so request.path_info isn't changed when serving files from the public directory.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"url-instance_method\"> #url(*args) ⇒ Object Also known as: url_for  </h3>   <p>Instance method for URL generation.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">url(:show, :id =&gt; 1)\nurl(:show, :name =&gt; :test)\nurl(:show, 1)\nurl(\"/foo\", false, false)</pre> </div> <h4 class=\"tag_title\">See Also:</h4> <ul class=\"see\"> <li><span class=\"object_link\"><a href=\"classmethods#url-instance_method\" title=\"Padrino::Routing::ClassMethods#url (method)\">ClassMethods#url</a></span></li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing/InstanceMethods\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing/InstanceMethods</a>\n  </p>\n</div>\n","padrino/paramsprotection/instancemethods":"<h1>Module: Padrino::ParamsProtection::InstanceMethods </h1>  <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"instancemethods#filter_params%21-instance_method\" title=\"#filter_params! (instance method)\">#<strong>filter_params!</strong>(params, allowed_params) ⇒ Object</a></code> <span class=\"summary_desc\"> Filters a hash of parameters leaving only allowed ones and possibly typecasting and processing the others. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"instancemethods#original_params-instance_method\" title=\"#original_params (instance method)\">#<strong>original_params</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the original unfiltered query parameters hash. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"filter_params!-instance_method\"> #filter_params!(params, allowed_params) ⇒ Object </h3>   <p>Filters a hash of parameters leaving only allowed ones and possibly typecasting and processing the others.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">filter_params!( { \"a\" =&gt; \"1\", \"b\" =&gt; \"abc\", \"d\" =&gt; \"drop\" },\n                { \"a\" =&gt; Integer, \"b\" =&gt; true } )\n# =&gt; { \"a\" =&gt; 1, \"b\" =&gt; \"abc\" }\nfilter_params!( { \"id\" =&gt; \"\", \"child\" =&gt; { \"name\" =&gt; \"manny\" } },\n                { \"id\" =&gt; Integer, \"child\" =&gt; { \"name\" =&gt; proc{ |v| v.camelize } } } )\n# =&gt; { \"id\" =&gt; nil, \"child\" =&gt; { \"name\" =&gt; \"Manny\" } }\nfilter_params!( { \"a\" =&gt; [\"1\", \"2\", \"3\"] },\n                { \"a\" =&gt; true } )\n# =&gt; { \"a\" =&gt; [\"1\", \"2\", \"3\"] }\nfilter_params!( { \"persons\" =&gt; {\"p-1\" =&gt; { \"name\" =&gt; \"manny\", \"age\" =&gt; \"50\" }, \"p-2\" =&gt; { \"name\" =&gt; \"richard\", \"age\" =&gt; \"50\" } } },\n                { \"persons\" =&gt; { \"name\" =&gt; true } } )\n# =&gt; { \"persons\" =&gt; {\"p-1\" =&gt; { \"name\" =&gt; \"manny\" }, \"p-2\" =&gt; { \"name\" =&gt; \"richard\" } } }</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">params</code> <span class=\"type\">(<code>Hash</code>)</span> —  Parameters to filter. Warning: this hash will be changed by deleting or replacing its values.  </li> <li> <code class=\"name\">allowed_params</code> <span class=\"type\">(<code>Hash</code>)</span> —  A hash of allowed keys and value classes or processing procs. Supported scalar classes are: Integer (empty string is cast to nil).  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"original_params-instance_method\"> #original_params ⇒ Object </h3>   <p>Returns the original unfiltered query parameters hash.</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/ParamsProtection/InstanceMethods\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/ParamsProtection/InstanceMethods</a>\n  </p>\n</div>\n","padrino/mailer":"<h1>Module: Padrino::Mailer </h1>  <h2>Overview</h2>  <p>This component uses the <code>mail</code> library to create a powerful but simple mailer within Padrino (and Sinatra). There is full support for using plain or html content-types as well as for file attachments.</p> <p>Using the mailer in Padrino has two forms. The 'quick' method requires only use of the <code>email</code> method directly in the controller:</p> <pre class=\"code ruby\" data-language=\"ruby\"># app/controllers/session.rb\npost :create do\n  email do\n    from \"tony@reyes.com\"\n    to \"john@smith.com\"\n    subject \"Welcome!\"\n    body render('email/registered')\n  end\nend</pre>   \n<h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"modules\">Modules:</strong> <span class=\"object_link\"><a href=\"mailer/helpers\" title=\"Padrino::Mailer::Helpers (module)\">Helpers</a></span>, <span class=\"object_link\"><a href=\"mailer/mime\" title=\"Padrino::Mailer::Mime (module)\">Mime</a></span> <strong class=\"classes\">Classes:</strong> <span class=\"object_link\"><a href=\"mailer/base\" title=\"Padrino::Mailer::Base (class)\">Base</a></span> </p> <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"mailer#registered-class_method\" title=\"registered (class method)\">.<strong>registered</strong>(app) ⇒ Object</a> (also: included)</code> <span class=\"summary_desc\"> Registers the Padrino::Mailer helpers with the application. </span> </li> </ul>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"registered-class_method\"> .registered(app) ⇒ Object Also known as: included  </h3>   <p>Registers the Padrino::Mailer helpers with the application.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">require 'padrino-mailer'\nclass Demo &lt; Padrino::Application\n  register Padrino::Mailer::Helpers\nend</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">app</code> <span class=\"type\">(<code>Sinatra::Application</code>)</span> —  The application that needs mailers.  </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mailer\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mailer</a>\n  </p>\n</div>\n","padrino/mailer/mime":"<h1>Module: Padrino::Mailer::Mime </h1>  <h2>Overview</h2>  <p>Handles MIME type declarations for mail delivery.</p>    <h2>Constant Summary</h2> <dl class=\"constants\"> <dt id=\"MIME_TYPES-constant\" class=\"\">MIME_TYPES =   <p>List of common mime-types, selected from various sources according to their usefulness for an email scope.</p> <p>You can add your own mime types like:</p> <pre class=\"code ruby\" data-language=\"ruby\">Padrino::Mailer::Mime::MIME_TYPES.merge!(\"text/xml\" =&gt; :xml)</pre>    </dt> <dd><pre class=\"code\" data-language=\"ruby\">{\n  \"text/html\"  =&gt; :html,\n  \"text/plain\" =&gt; :plain,\n  \"text/xml\"   =&gt; :xml\n}</pre></dd> </dl> <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"mime#mime_type-class_method\" title=\"mime_type (class method)\">.<strong>mime_type</strong>(mime, fallback = :plain) ⇒ Object</a></code> <span class=\"summary_desc\"> Returns Symbol with mime type if found, otherwise use <code>fallback</code>. </span> </li> </ul>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"mime_type-class_method\"> .mime_type(mime, fallback = :plain) ⇒ Object </h3>   <p>Returns Symbol with mime type if found, otherwise use <code>fallback</code>. <code>mime</code> should be the content type like “text/plain” <code>fallback</code> may be any symbol.</p> <p>Also see the documentation for <span class=\"object_link\"><a href=\"mime#MIME_TYPES-constant\" title=\"Padrino::Mailer::Mime::MIME_TYPES (constant)\">MIME_TYPES</a></span>.</p> <p>This is a shortcut for:</p> <pre class=\"code ruby\" data-language=\"ruby\">Padrino::Mailer::Mime::MIME_TYPES.fetch('text/plain', :plain)</pre>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">Padrino::Mailer::Mime.mime_type('text/plain')\n# =&gt; :plain\nPadrino::Mailer::Mime.mime_type('text/html')\n# =&gt; :html</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">mime</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The mime alias to fetch (i.e 'text/plain').  </li> <li> <code class=\"name\">fallback</code> <span class=\"type\">(<code>Symbol</code>)</span> <em class=\"default\">(defaults to: <code>:plain</code>)</em> —  The fallback mime to use if <code>mime</code> doesn't exist.  </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mailer/Mime\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mailer/Mime</a>\n  </p>\n</div>\n","padrino/module":"<h1>Module: Padrino::Module </h1>  <h2>Instance Attribute Summary \n</h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"module#root-instance_method\" title=\"#root (instance method)\">#<strong>root</strong>(*args) ⇒ String</a></code> <span class=\"summary_desc\"> Helper method for file references within a Padrino module. </span> </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"module#dependency_paths-instance_method\" title=\"#dependency_paths (instance method)\">#<strong>dependency_paths</strong> ⇒ Array&lt;String&gt;</a></code> <span class=\"summary_desc\"> Returns the list of path globs to load as dependencies. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"module#gem%21-instance_method\" title=\"#gem! (instance method)\">#<strong>gem!</strong>(name) ⇒ Object</a></code> <span class=\"summary_desc\"> Register this module as being loaded from a gem. </span> </li> </ul>  <h2>Instance Attribute Details</h2>  <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"root-instance_method\"> #root(*args) ⇒ String </h3>   <p>Helper method for file references within a Padrino module.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">module MyModule\n  extend Padrino::Module\n  gem! 'my_gem'\nend\nModule.root!</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">args</code> <span class=\"type\">(<code>Array&lt;<span class=\"object_link\"><a href=\"../string\" title=\"String (class)\">String</a></span>&gt;</code>)</span> —  The directories to join to <span class=\"object_link\"><a href=\"../padrino#root-class_method\" title=\"Padrino.root (method)\">Padrino.root</a></span>.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../string\" title=\"String (class)\">String</a></span></code>)</span> —  The absolute path.  </li> </ul> </div> </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"dependency_paths-instance_method\"> #dependency_paths ⇒ Array&lt;String&gt; </h3>   <p>Returns the list of path globs to load as dependencies. Appends custom dependency patterns to the be loaded for Padrino.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">module MyModule\n  extend Padrino::Module\n  gem! 'my_gem'\nend\n\nModule.dependency_paths &lt;&lt; \"#{MyModule.root}/uploaders/*.rb\"</pre> </div> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Array&lt;<span class=\"object_link\"><a href=\"../string\" title=\"String (class)\">String</a></span>&gt;</code>)</span> —  The dependency paths.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"gem!-instance_method\"> #gem!(name) ⇒ Object </h3>   <p>Register this module as being loaded from a gem. This automatically sets the root and therefore the dependency paths correctly.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../string\" title=\"String (class)\">String</a></span></code>)</span> —  The name of the gem. Has to be the name as stated in the gemspec.  </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Module\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Module</a>\n  </p>\n</div>\n","module":"<h1>Class: Module </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Object</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Module</li> </ul>  </dd> </dl>  </div> <h2>Overview</h2>  <p>Make sure we can always use the class name In reloader for accessing class_name Foo._orig_klass_name</p>   <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Module\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Module</a>\n  </p>\n</div>\n","padrino/loader":"<h1>Module: Padrino::Loader </h1> <div class=\"box_info\"> <dl> <dt>Included in:</dt> <dd><span class=\"object_link\"><a href=\"../padrino\" title=\"Padrino (module)\">Padrino</a></span></dd> </dl>  </div> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"loader#after_load-instance_method\" title=\"#after_load (instance method)\">#<strong>after_load</strong> { ... } ⇒ Array&lt;Proc&gt;</a></code> <span class=\"summary_desc\"> Hooks to be called after a load/reload. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"loader#before_load-instance_method\" title=\"#before_load (instance method)\">#<strong>before_load</strong> { ... } ⇒ Array&lt;Proc&gt;</a></code> <span class=\"summary_desc\"> Hooks to be called before a load/reload. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"loader#called_from-instance_method\" title=\"#called_from (instance method)\">#<strong>called_from</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> This adds the ability to instantiate load! after <span class=\"object_link\"><a href=\"application\" title=\"Padrino::Application (class)\">Application</a></span> definition. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"loader#clear%21-instance_method\" title=\"#clear! (instance method)\">#<strong>clear!</strong> ⇒ NilClass</a></code> <span class=\"summary_desc\"> Clear the padrino env. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"loader#dependency_paths-instance_method\" title=\"#dependency_paths (instance method)\">#<strong>dependency_paths</strong> ⇒ Array&lt;String&gt;</a></code> <span class=\"summary_desc\"> Returns default list of path globs to load as dependencies. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"loader#load%21-instance_method\" title=\"#load! (instance method)\">#<strong>load!</strong> ⇒ Boolean</a></code> <span class=\"summary_desc\"> Requires necessary dependencies as well as application files from root lib and models. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"loader#loaded%3F-instance_method\" title=\"#loaded? (instance method)\">#<strong>loaded?</strong> ⇒ Boolean</a></code> <span class=\"summary_desc\"> Determines whether Padrino was loaded with load!. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"loader#precompile_all_routes%21-instance_method\" title=\"#precompile_all_routes! (instance method)\">#<strong>precompile_all_routes!</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Precompiles all routes if :precompile_routes is set to true. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"loader#reload%21-instance_method\" title=\"#reload! (instance method)\">#<strong>reload!</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Method for reloading required applications and their files. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"loader#require_dependencies-instance_method\" title=\"#require_dependencies (instance method)\">#<strong>require_dependencies</strong>(*paths) ⇒ Object</a></code> <span class=\"summary_desc\"> Attempts to require all dependency libs that we need. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"after_load-instance_method\"> #after_load { ... } ⇒ Array&lt;Proc&gt; </h3>   <p>Hooks to be called after a load/reload.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">after_load do\n  DataMapper.finalize\nend</pre> </div> <h4 class=\"tag_title\">Yields:</h4> <ul class=\"yield\"> <li>  <dl class=\"rdoc-list\">\n <dd> The given block will be called after Padrino was loaded/reloaded. </dd>\n</dl>  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Array&lt;Proc&gt;</code>)</span> —  The load/reload hooks.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"before_load-instance_method\"> #before_load { ... } ⇒ Array&lt;Proc&gt; </h3>   <p>Hooks to be called before a load/reload.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">before_load do\n  pre_initialize_something\nend</pre> </div> <h4 class=\"tag_title\">Yields:</h4> <ul class=\"yield\"> <li>  <dl class=\"rdoc-list\">\n <dd> The given block will be called before Padrino was loaded/reloaded. </dd>\n</dl>  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Array&lt;Proc&gt;</code>)</span> —  The load/reload before hooks.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"called_from-instance_method\"> #called_from ⇒ Object </h3>   <p>This adds the ability to instantiate Padrino.load! after <span class=\"object_link\"><a href=\"application\" title=\"Padrino::Application (class)\">Application</a></span> definition.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"clear!-instance_method\"> #clear! ⇒ NilClass </h3>   <p>Clear the padrino env.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>NilClass</code>)</span> </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"dependency_paths-instance_method\"> #dependency_paths ⇒ Array&lt;String&gt; </h3>   <p>Returns default list of path globs to load as dependencies. Appends custom dependency patterns to the be loaded for Padrino.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">Padrino.dependency_paths &lt;&lt; \"#{Padrino.root}/uploaders/*.rb\"</pre> </div> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Array&lt;<span class=\"object_link\"><a href=\"../string\" title=\"String (class)\">String</a></span>&gt;</code>)</span> —  The dependencey paths.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"load!-instance_method\"> #load! ⇒ Boolean </h3>   <p>Requires necessary dependencies as well as application files from root lib and models.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> —  returns true if Padrino is not already bootstraped otherwise else.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"loaded?-instance_method\"> #loaded? ⇒ Boolean </h3>   <p>Determines whether Padrino was loaded with Padrino.load!.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> —  Specifies whether Padrino was loaded.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"precompile_all_routes!-instance_method\"> #precompile_all_routes! ⇒ Object </h3>   <p>Precompiles all routes if :precompile_routes is set to true</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"reload!-instance_method\"> #reload! ⇒ Object </h3>   <p>Method for reloading required applications and their files.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"require_dependencies-instance_method\"> #require_dependencies(*paths) ⇒ Object </h3>   <p>Attempts to require all dependency libs that we need. If you use this method we can perform correctly a Padrino.reload! Another good thing that this method are dependency check, for example:</p> <pre class=\"code ruby\" data-language=\"ruby\"># models\n#  \\-- a.rb =&gt; require something of b.rb\n#  \\-- b.rb</pre> <p>In the example above if we do:</p> <pre class=\"code ruby\" data-language=\"ruby\">Dir[\"/models/*.rb\"].each { |r| require r }</pre> <p>We get an error, because we try to require first <code>a.rb</code> that need <em>something</em> of <code>b.rb</code>.</p> <p>With this method we don't have this problem.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4>  For require all our app libs we need to do:  <pre class=\"example code\" data-language=\"ruby\">require_dependencies(\"#{Padrino.root}/lib/**/*.rb\")</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">paths</code> <span class=\"type\">(<code>Array&lt;<span class=\"object_link\"><a href=\"../string\" title=\"String (class)\">String</a></span>&gt;</code>)</span> —  The paths to require.  </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Loader\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Loader</a>\n  </p>\n</div>\n","padrino/generators/mailer":"<h1>Class: Padrino::Generators::Mailer </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Thor::Group</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Thor::Group</li> <li class=\"next\">Padrino::Generators::Mailer</li> </ul>  </dd> </dl> <dl> <dt>Includes:</dt> <dd>\n<span class=\"object_link\"><a href=\"actions\" title=\"Padrino::Generators::Actions (module)\">Actions</a></span>, Components::Actions, Thor::Actions</dd> </dl>  </div> <h2>Overview</h2>  <p>Responsible for the generating mailers and message definitions.</p>    <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"mailer#banner-class_method\" title=\"banner (class method)\">.<strong>banner</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"mailer#source_root-class_method\" title=\"source_root (class method)\">.<strong>source_root</strong> ⇒ Object</a></code>  </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"mailer#create_mailer-instance_method\" title=\"#create_mailer (instance method)\">#<strong>create_mailer</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Execute mailer generation. </span> </li> </ul> <h3 class=\"inherited\">Methods included from Actions</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"actions#already_exists%3F-instance_method\" title=\"Padrino::Generators::Actions#already_exists? (method)\">#already_exists?</a></span>, <span class=\"object_link\"><a href=\"actions#app_skeleton-instance_method\" title=\"Padrino::Generators::Actions#app_skeleton (method)\">#app_skeleton</a></span>, <span class=\"object_link\"><a href=\"actions#apply_component_for-instance_method\" title=\"Padrino::Generators::Actions#apply_component_for (method)\">#apply_component_for</a></span>, <span class=\"object_link\"><a href=\"actions#apply_default_fields-instance_method\" title=\"Padrino::Generators::Actions#apply_default_fields (method)\">#apply_default_fields</a></span>, <span class=\"object_link\"><a href=\"actions#ask-instance_method\" title=\"Padrino::Generators::Actions#ask (method)\">#ask</a></span>, <span class=\"object_link\"><a href=\"actions#check_app_existence-instance_method\" title=\"Padrino::Generators::Actions#check_app_existence (method)\">#check_app_existence</a></span>, <span class=\"object_link\"><a href=\"actions#destination_root-instance_method\" title=\"Padrino::Generators::Actions#destination_root (method)\">#destination_root</a></span>, <span class=\"object_link\"><a href=\"actions#empty_directory_with_keep_file-instance_method\" title=\"Padrino::Generators::Actions#empty_directory_with_keep_file (method)\">#empty_directory_with_keep_file</a></span>, <span class=\"object_link\"><a href=\"actions#execute_component_setup-instance_method\" title=\"Padrino::Generators::Actions#execute_component_setup (method)\">#execute_component_setup</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_app_name-instance_method\" title=\"Padrino::Generators::Actions#fetch_app_name (method)\">#fetch_app_name</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_component_choice-instance_method\" title=\"Padrino::Generators::Actions#fetch_component_choice (method)\">#fetch_component_choice</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_project_name-instance_method\" title=\"Padrino::Generators::Actions#fetch_project_name (method)\">#fetch_project_name</a></span>, <span class=\"object_link\"><a href=\"actions#in_app_root%3F-instance_method\" title=\"Padrino::Generators::Actions#in_app_root? (method)\">#in_app_root?</a></span>, <span class=\"object_link\"><a href=\"actions#include_component_module_for-instance_method\" title=\"Padrino::Generators::Actions#include_component_module_for (method)\">#include_component_module_for</a></span>, <span class=\"object_link\"><a href=\"actions#initializer-instance_method\" title=\"Padrino::Generators::Actions#initializer (method)\">#initializer</a></span>, <span class=\"object_link\"><a href=\"actions#inject_into_file-instance_method\" title=\"Padrino::Generators::Actions#inject_into_file (method)\">#inject_into_file</a></span>, <span class=\"object_link\"><a href=\"actions#insert_hook-instance_method\" title=\"Padrino::Generators::Actions#insert_hook (method)\">#insert_hook</a></span>, <span class=\"object_link\"><a href=\"actions#insert_into_gemfile-instance_method\" title=\"Padrino::Generators::Actions#insert_into_gemfile (method)\">#insert_into_gemfile</a></span>, <span class=\"object_link\"><a href=\"actions#insert_middleware-instance_method\" title=\"Padrino::Generators::Actions#insert_middleware (method)\">#insert_middleware</a></span>, <span class=\"object_link\"><a href=\"actions#invalid_fields-instance_method\" title=\"Padrino::Generators::Actions#invalid_fields (method)\">#invalid_fields</a></span>, <span class=\"object_link\"><a href=\"actions#keep_file-instance_method\" title=\"Padrino::Generators::Actions#keep_file (method)\">#keep_file</a></span>, <span class=\"object_link\"><a href=\"actions#middleware-instance_method\" title=\"Padrino::Generators::Actions#middleware (method)\">#middleware</a></span>, <span class=\"object_link\"><a href=\"actions#recognize_path-instance_method\" title=\"Padrino::Generators::Actions#recognize_path (method)\">#recognize_path</a></span>, <span class=\"object_link\"><a href=\"actions#require_contrib-instance_method\" title=\"Padrino::Generators::Actions#require_contrib (method)\">#require_contrib</a></span>, <span class=\"object_link\"><a href=\"actions#require_dependencies-instance_method\" title=\"Padrino::Generators::Actions#require_dependencies (method)\">#require_dependencies</a></span>, <span class=\"object_link\"><a href=\"actions#resolve_valid_choice-instance_method\" title=\"Padrino::Generators::Actions#resolve_valid_choice (method)\">#resolve_valid_choice</a></span>, <span class=\"object_link\"><a href=\"actions#retrieve_component_config-instance_method\" title=\"Padrino::Generators::Actions#retrieve_component_config (method)\">#retrieve_component_config</a></span>, <span class=\"object_link\"><a href=\"actions#run_bundler-instance_method\" title=\"Padrino::Generators::Actions#run_bundler (method)\">#run_bundler</a></span>, <span class=\"object_link\"><a href=\"actions#store_component_choice-instance_method\" title=\"Padrino::Generators::Actions#store_component_choice (method)\">#store_component_choice</a></span>, <span class=\"object_link\"><a href=\"actions#store_component_config-instance_method\" title=\"Padrino::Generators::Actions#store_component_config (method)\">#store_component_config</a></span>, <span class=\"object_link\"><a href=\"actions#test%3F-instance_method\" title=\"Padrino::Generators::Actions#test? (method)\">#test?</a></span>, <span class=\"object_link\"><a href=\"actions#tiny%3F-instance_method\" title=\"Padrino::Generators::Actions#tiny? (method)\">#tiny?</a></span>, <span class=\"object_link\"><a href=\"actions#valid_choice%3F-instance_method\" title=\"Padrino::Generators::Actions#valid_choice? (method)\">#valid_choice?</a></span>, <span class=\"object_link\"><a href=\"actions#valid_constant%3F-instance_method\" title=\"Padrino::Generators::Actions#valid_constant? (method)\">#valid_constant?</a></span>, <span class=\"object_link\"><a href=\"actions#validate_namespace-instance_method\" title=\"Padrino::Generators::Actions#validate_namespace (method)\">#validate_namespace</a></span></p>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"banner-class_method\"> .banner ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"source_root-class_method\"> .source_root ⇒ Object </h3>  </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"create_mailer-instance_method\"> #create_mailer ⇒ Object </h3>   <p>Execute mailer generation.</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Mailer\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Mailer</a>\n  </p>\n</div>\n","padrino/generators/migration":"<h1>Class: Padrino::Generators::Migration </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Thor::Group</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Thor::Group</li> <li class=\"next\">Padrino::Generators::Migration</li> </ul>  </dd> </dl> <dl> <dt>Includes:</dt> <dd>\n<span class=\"object_link\"><a href=\"actions\" title=\"Padrino::Generators::Actions (module)\">Actions</a></span>, Components::Actions, Thor::Actions</dd> </dl>  </div> <h2>Overview</h2>  <p>Responsible for generating migration files for the appropriate ORM component.</p>    <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"migration#banner-class_method\" title=\"banner (class method)\">.<strong>banner</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"migration#source_root-class_method\" title=\"source_root (class method)\">.<strong>source_root</strong> ⇒ Object</a></code>  </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"migration#create_migration-instance_method\" title=\"#create_migration (instance method)\">#<strong>create_migration</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Creates the migration file within a Padrino project. </span> </li> </ul> <h3 class=\"inherited\">Methods included from Actions</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"actions#already_exists%3F-instance_method\" title=\"Padrino::Generators::Actions#already_exists? (method)\">#already_exists?</a></span>, <span class=\"object_link\"><a href=\"actions#app_skeleton-instance_method\" title=\"Padrino::Generators::Actions#app_skeleton (method)\">#app_skeleton</a></span>, <span class=\"object_link\"><a href=\"actions#apply_component_for-instance_method\" title=\"Padrino::Generators::Actions#apply_component_for (method)\">#apply_component_for</a></span>, <span class=\"object_link\"><a href=\"actions#apply_default_fields-instance_method\" title=\"Padrino::Generators::Actions#apply_default_fields (method)\">#apply_default_fields</a></span>, <span class=\"object_link\"><a href=\"actions#ask-instance_method\" title=\"Padrino::Generators::Actions#ask (method)\">#ask</a></span>, <span class=\"object_link\"><a href=\"actions#check_app_existence-instance_method\" title=\"Padrino::Generators::Actions#check_app_existence (method)\">#check_app_existence</a></span>, <span class=\"object_link\"><a href=\"actions#destination_root-instance_method\" title=\"Padrino::Generators::Actions#destination_root (method)\">#destination_root</a></span>, <span class=\"object_link\"><a href=\"actions#empty_directory_with_keep_file-instance_method\" title=\"Padrino::Generators::Actions#empty_directory_with_keep_file (method)\">#empty_directory_with_keep_file</a></span>, <span class=\"object_link\"><a href=\"actions#execute_component_setup-instance_method\" title=\"Padrino::Generators::Actions#execute_component_setup (method)\">#execute_component_setup</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_app_name-instance_method\" title=\"Padrino::Generators::Actions#fetch_app_name (method)\">#fetch_app_name</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_component_choice-instance_method\" title=\"Padrino::Generators::Actions#fetch_component_choice (method)\">#fetch_component_choice</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_project_name-instance_method\" title=\"Padrino::Generators::Actions#fetch_project_name (method)\">#fetch_project_name</a></span>, <span class=\"object_link\"><a href=\"actions#in_app_root%3F-instance_method\" title=\"Padrino::Generators::Actions#in_app_root? (method)\">#in_app_root?</a></span>, <span class=\"object_link\"><a href=\"actions#include_component_module_for-instance_method\" title=\"Padrino::Generators::Actions#include_component_module_for (method)\">#include_component_module_for</a></span>, <span class=\"object_link\"><a href=\"actions#initializer-instance_method\" title=\"Padrino::Generators::Actions#initializer (method)\">#initializer</a></span>, <span class=\"object_link\"><a href=\"actions#inject_into_file-instance_method\" title=\"Padrino::Generators::Actions#inject_into_file (method)\">#inject_into_file</a></span>, <span class=\"object_link\"><a href=\"actions#insert_hook-instance_method\" title=\"Padrino::Generators::Actions#insert_hook (method)\">#insert_hook</a></span>, <span class=\"object_link\"><a href=\"actions#insert_into_gemfile-instance_method\" title=\"Padrino::Generators::Actions#insert_into_gemfile (method)\">#insert_into_gemfile</a></span>, <span class=\"object_link\"><a href=\"actions#insert_middleware-instance_method\" title=\"Padrino::Generators::Actions#insert_middleware (method)\">#insert_middleware</a></span>, <span class=\"object_link\"><a href=\"actions#invalid_fields-instance_method\" title=\"Padrino::Generators::Actions#invalid_fields (method)\">#invalid_fields</a></span>, <span class=\"object_link\"><a href=\"actions#keep_file-instance_method\" title=\"Padrino::Generators::Actions#keep_file (method)\">#keep_file</a></span>, <span class=\"object_link\"><a href=\"actions#middleware-instance_method\" title=\"Padrino::Generators::Actions#middleware (method)\">#middleware</a></span>, <span class=\"object_link\"><a href=\"actions#recognize_path-instance_method\" title=\"Padrino::Generators::Actions#recognize_path (method)\">#recognize_path</a></span>, <span class=\"object_link\"><a href=\"actions#require_contrib-instance_method\" title=\"Padrino::Generators::Actions#require_contrib (method)\">#require_contrib</a></span>, <span class=\"object_link\"><a href=\"actions#require_dependencies-instance_method\" title=\"Padrino::Generators::Actions#require_dependencies (method)\">#require_dependencies</a></span>, <span class=\"object_link\"><a href=\"actions#resolve_valid_choice-instance_method\" title=\"Padrino::Generators::Actions#resolve_valid_choice (method)\">#resolve_valid_choice</a></span>, <span class=\"object_link\"><a href=\"actions#retrieve_component_config-instance_method\" title=\"Padrino::Generators::Actions#retrieve_component_config (method)\">#retrieve_component_config</a></span>, <span class=\"object_link\"><a href=\"actions#run_bundler-instance_method\" title=\"Padrino::Generators::Actions#run_bundler (method)\">#run_bundler</a></span>, <span class=\"object_link\"><a href=\"actions#store_component_choice-instance_method\" title=\"Padrino::Generators::Actions#store_component_choice (method)\">#store_component_choice</a></span>, <span class=\"object_link\"><a href=\"actions#store_component_config-instance_method\" title=\"Padrino::Generators::Actions#store_component_config (method)\">#store_component_config</a></span>, <span class=\"object_link\"><a href=\"actions#test%3F-instance_method\" title=\"Padrino::Generators::Actions#test? (method)\">#test?</a></span>, <span class=\"object_link\"><a href=\"actions#tiny%3F-instance_method\" title=\"Padrino::Generators::Actions#tiny? (method)\">#tiny?</a></span>, <span class=\"object_link\"><a href=\"actions#valid_choice%3F-instance_method\" title=\"Padrino::Generators::Actions#valid_choice? (method)\">#valid_choice?</a></span>, <span class=\"object_link\"><a href=\"actions#valid_constant%3F-instance_method\" title=\"Padrino::Generators::Actions#valid_constant? (method)\">#valid_constant?</a></span>, <span class=\"object_link\"><a href=\"actions#validate_namespace-instance_method\" title=\"Padrino::Generators::Actions#validate_namespace (method)\">#validate_namespace</a></span></p>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"banner-class_method\"> .banner ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"source_root-class_method\"> .source_root ⇒ Object </h3>  </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"create_migration-instance_method\"> #create_migration ⇒ Object </h3>   <p>Creates the migration file within a Padrino project.</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Migration\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Migration</a>\n  </p>\n</div>\n","padrino/generators/model":"<h1>Class: Padrino::Generators::Model </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Thor::Group</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Thor::Group</li> <li class=\"next\">Padrino::Generators::Model</li> </ul>  </dd> </dl> <dl> <dt>Includes:</dt> <dd>\n<span class=\"object_link\"><a href=\"actions\" title=\"Padrino::Generators::Actions (module)\">Actions</a></span>, Components::Actions, Thor::Actions</dd> </dl>  </div> <h2>Overview</h2>  <p>Responsible for generating new models for the specified ORM component.</p>    <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"model#banner-class_method\" title=\"banner (class method)\">.<strong>banner</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"model#source_root-class_method\" title=\"source_root (class method)\">.<strong>source_root</strong> ⇒ Object</a></code>  </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"model#create_model-instance_method\" title=\"#create_model (instance method)\">#<strong>create_model</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Execute the model generation. </span> </li> </ul> <h3 class=\"inherited\">Methods included from Actions</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"actions#already_exists%3F-instance_method\" title=\"Padrino::Generators::Actions#already_exists? (method)\">#already_exists?</a></span>, <span class=\"object_link\"><a href=\"actions#app_skeleton-instance_method\" title=\"Padrino::Generators::Actions#app_skeleton (method)\">#app_skeleton</a></span>, <span class=\"object_link\"><a href=\"actions#apply_component_for-instance_method\" title=\"Padrino::Generators::Actions#apply_component_for (method)\">#apply_component_for</a></span>, <span class=\"object_link\"><a href=\"actions#apply_default_fields-instance_method\" title=\"Padrino::Generators::Actions#apply_default_fields (method)\">#apply_default_fields</a></span>, <span class=\"object_link\"><a href=\"actions#ask-instance_method\" title=\"Padrino::Generators::Actions#ask (method)\">#ask</a></span>, <span class=\"object_link\"><a href=\"actions#check_app_existence-instance_method\" title=\"Padrino::Generators::Actions#check_app_existence (method)\">#check_app_existence</a></span>, <span class=\"object_link\"><a href=\"actions#destination_root-instance_method\" title=\"Padrino::Generators::Actions#destination_root (method)\">#destination_root</a></span>, <span class=\"object_link\"><a href=\"actions#empty_directory_with_keep_file-instance_method\" title=\"Padrino::Generators::Actions#empty_directory_with_keep_file (method)\">#empty_directory_with_keep_file</a></span>, <span class=\"object_link\"><a href=\"actions#execute_component_setup-instance_method\" title=\"Padrino::Generators::Actions#execute_component_setup (method)\">#execute_component_setup</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_app_name-instance_method\" title=\"Padrino::Generators::Actions#fetch_app_name (method)\">#fetch_app_name</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_component_choice-instance_method\" title=\"Padrino::Generators::Actions#fetch_component_choice (method)\">#fetch_component_choice</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_project_name-instance_method\" title=\"Padrino::Generators::Actions#fetch_project_name (method)\">#fetch_project_name</a></span>, <span class=\"object_link\"><a href=\"actions#in_app_root%3F-instance_method\" title=\"Padrino::Generators::Actions#in_app_root? (method)\">#in_app_root?</a></span>, <span class=\"object_link\"><a href=\"actions#include_component_module_for-instance_method\" title=\"Padrino::Generators::Actions#include_component_module_for (method)\">#include_component_module_for</a></span>, <span class=\"object_link\"><a href=\"actions#initializer-instance_method\" title=\"Padrino::Generators::Actions#initializer (method)\">#initializer</a></span>, <span class=\"object_link\"><a href=\"actions#inject_into_file-instance_method\" title=\"Padrino::Generators::Actions#inject_into_file (method)\">#inject_into_file</a></span>, <span class=\"object_link\"><a href=\"actions#insert_hook-instance_method\" title=\"Padrino::Generators::Actions#insert_hook (method)\">#insert_hook</a></span>, <span class=\"object_link\"><a href=\"actions#insert_into_gemfile-instance_method\" title=\"Padrino::Generators::Actions#insert_into_gemfile (method)\">#insert_into_gemfile</a></span>, <span class=\"object_link\"><a href=\"actions#insert_middleware-instance_method\" title=\"Padrino::Generators::Actions#insert_middleware (method)\">#insert_middleware</a></span>, <span class=\"object_link\"><a href=\"actions#invalid_fields-instance_method\" title=\"Padrino::Generators::Actions#invalid_fields (method)\">#invalid_fields</a></span>, <span class=\"object_link\"><a href=\"actions#keep_file-instance_method\" title=\"Padrino::Generators::Actions#keep_file (method)\">#keep_file</a></span>, <span class=\"object_link\"><a href=\"actions#middleware-instance_method\" title=\"Padrino::Generators::Actions#middleware (method)\">#middleware</a></span>, <span class=\"object_link\"><a href=\"actions#recognize_path-instance_method\" title=\"Padrino::Generators::Actions#recognize_path (method)\">#recognize_path</a></span>, <span class=\"object_link\"><a href=\"actions#require_contrib-instance_method\" title=\"Padrino::Generators::Actions#require_contrib (method)\">#require_contrib</a></span>, <span class=\"object_link\"><a href=\"actions#require_dependencies-instance_method\" title=\"Padrino::Generators::Actions#require_dependencies (method)\">#require_dependencies</a></span>, <span class=\"object_link\"><a href=\"actions#resolve_valid_choice-instance_method\" title=\"Padrino::Generators::Actions#resolve_valid_choice (method)\">#resolve_valid_choice</a></span>, <span class=\"object_link\"><a href=\"actions#retrieve_component_config-instance_method\" title=\"Padrino::Generators::Actions#retrieve_component_config (method)\">#retrieve_component_config</a></span>, <span class=\"object_link\"><a href=\"actions#run_bundler-instance_method\" title=\"Padrino::Generators::Actions#run_bundler (method)\">#run_bundler</a></span>, <span class=\"object_link\"><a href=\"actions#store_component_choice-instance_method\" title=\"Padrino::Generators::Actions#store_component_choice (method)\">#store_component_choice</a></span>, <span class=\"object_link\"><a href=\"actions#store_component_config-instance_method\" title=\"Padrino::Generators::Actions#store_component_config (method)\">#store_component_config</a></span>, <span class=\"object_link\"><a href=\"actions#test%3F-instance_method\" title=\"Padrino::Generators::Actions#test? (method)\">#test?</a></span>, <span class=\"object_link\"><a href=\"actions#tiny%3F-instance_method\" title=\"Padrino::Generators::Actions#tiny? (method)\">#tiny?</a></span>, <span class=\"object_link\"><a href=\"actions#valid_choice%3F-instance_method\" title=\"Padrino::Generators::Actions#valid_choice? (method)\">#valid_choice?</a></span>, <span class=\"object_link\"><a href=\"actions#valid_constant%3F-instance_method\" title=\"Padrino::Generators::Actions#valid_constant? (method)\">#valid_constant?</a></span>, <span class=\"object_link\"><a href=\"actions#validate_namespace-instance_method\" title=\"Padrino::Generators::Actions#validate_namespace (method)\">#validate_namespace</a></span></p>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"banner-class_method\"> .banner ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"source_root-class_method\"> .source_root ⇒ Object </h3>  </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"create_model-instance_method\"> #create_model ⇒ Object </h3>   <p>Execute the model generation.</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Model\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Model</a>\n  </p>\n</div>\n","padrino/mounter/mounterexception":"<h1>Exception: Padrino::Mounter::MounterException </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">RuntimeError</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">RuntimeError</li> <li class=\"next\">Padrino::Mounter::MounterException</li> </ul>  </dd> </dl>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mounter/MounterException\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mounter/MounterException</a>\n  </p>\n</div>\n","padrino/performance/os":"<h1>Module: Padrino::Performance::OS </h1>  <h2>Overview</h2>  <p>OS detection useful for targeting CLI commands. Source: <a href=\"http://stackoverflow.com/questions/170956/how-can-i-find-which-operating-system-my-ruby-program-is-running-on\">stackoverflow.com/questions/170956/how-can-i-find-which-operating-system-my-ruby-program-is-running-on</a></p>    <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"os#linux%3F-class_method\" title=\"linux? (class method)\">.<strong>linux?</strong> ⇒ Boolean</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"os#mac%3F-class_method\" title=\"mac? (class method)\">.<strong>mac?</strong> ⇒ Boolean</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"os#unix%3F-class_method\" title=\"unix? (class method)\">.<strong>unix?</strong> ⇒ Boolean</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"os#windows%3F-class_method\" title=\"windows? (class method)\">.<strong>windows?</strong> ⇒ Boolean</a></code>  </li> </ul>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"linux?-class_method\"> .linux? ⇒ Boolean </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"mac?-class_method\"> .mac? ⇒ Boolean </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"unix?-class_method\"> .unix? ⇒ Boolean </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"windows?-class_method\"> .windows? ⇒ Boolean </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Performance/OS\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Performance/OS</a>\n  </p>\n</div>\n","padrino/cache/helpers/objectcache":"<h1>Module: Padrino::Cache::Helpers::ObjectCache </h1>  <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"objectcache#cache_object-instance_method\" title=\"#cache_object (instance method)\">#<strong>cache_object</strong>(key, opts = {}) ⇒ Object</a></code>  </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"cache_object-instance_method\"> #cache_object(key, opts = {}) ⇒ Object </h3>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers/ObjectCache\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers/ObjectCache</a>\n  </p>\n</div>\n","objectspace":"<h1>Module: ObjectSpace </h1>  <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"objectspace#classes-class_method\" title=\"classes (class method)\">.<strong>classes</strong>(&amp;block) ⇒ Object</a></code> <span class=\"summary_desc\"> Returns all the classes in the object space. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"objectspace#new_classes-class_method\" title=\"new_classes (class method)\">.<strong>new_classes</strong>(snapshot) ⇒ Object</a></code> <span class=\"summary_desc\"> Returns a list of existing classes that are not included in “snapshot” This method is useful to get the list of new classes that were loaded after an event like requiring a file. </span> </li> </ul>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"classes-class_method\"> .classes(&amp;block) ⇒ Object </h3>   <p>Returns all the classes in the object space. Optionally, a block can be passed, for example the following code would return the classes that start with the character “A”:</p> <pre class=\"code ruby\" data-language=\"ruby\">ObjectSpace.classes do |klass|\n  if klass.to_s[0] == \"A\"\n    klass\n  end\nend</pre>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"new_classes-class_method\"> .new_classes(snapshot) ⇒ Object </h3>   <p>Returns a list of existing classes that are not included in “snapshot” This method is useful to get the list of new classes that were loaded after an event like requiring a file. Usage:</p> <pre class=\"code ruby\" data-language=\"ruby\">snapshot = ObjectSpace.classes\n# require a file\nObjectSpace.new_classes(snapshot)</pre>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/ObjectSpace\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/ObjectSpace</a>\n  </p>\n</div>\n","padrino/pathrouter/matcher":"<h1>Class: Padrino::PathRouter::Matcher </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Object</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Padrino::PathRouter::Matcher</li> </ul>  </dd> </dl>  </div> <h2>Constant Summary</h2> <dl class=\"constants\"> <dt id=\"GROUP_REGEXP-constant\" class=\"\">GROUP_REGEXP =   <p>To count group of regexp</p>    </dt> <dd><pre class=\"code\" data-language=\"ruby\">%r{\\((?!\\?:|\\?!|\\?&lt;=|\\?&lt;!|\\?=).+?\\)}.freeze</pre></dd> </dl> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"matcher#capture_length-instance_method\" title=\"#capture_length (instance method)\">#<strong>capture_length</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns captures parameter length. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"matcher#expand-instance_method\" title=\"#expand (instance method)\">#<strong>expand</strong>(params) ⇒ Object</a></code> <span class=\"summary_desc\"> Expands the path by using parameters. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"matcher#handler-instance_method\" title=\"#handler (instance method)\">#<strong>handler</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the handler which is an instance of Mustermann or Regexp. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"matcher#initialize-instance_method\" title=\"#initialize (instance method)\">#<strong>initialize</strong>(path, options = {}) ⇒ Matcher</a></code> <span class=\"note title constructor\">constructor</span> <span class=\"summary_desc\"> Constructs an instance of PathRouter::Matcher. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"matcher#match-instance_method\" title=\"#match (instance method)\">#<strong>match</strong>(pattern) ⇒ Object</a></code> <span class=\"summary_desc\"> Matches a pattern with the route matcher. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"matcher#mustermann%3F-instance_method\" title=\"#mustermann? (instance method)\">#<strong>mustermann?</strong> ⇒ Boolean</a></code> <span class=\"summary_desc\"> Returns true if handler is an instance of Mustermann. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"matcher#names-instance_method\" title=\"#names (instance method)\">#<strong>names</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns names of the handler. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"matcher#params_for-instance_method\" title=\"#params_for (instance method)\">#<strong>params_for</strong>(pattern, others) ⇒ Object</a></code> <span class=\"summary_desc\"> Builds a parameters, and returns them. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"matcher#to_regexp-instance_method\" title=\"#to_regexp (instance method)\">#<strong>to_regexp</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns a regexp from handler. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"matcher#to_s-instance_method\" title=\"#to_s (instance method)\">#<strong>to_s</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Converts the handler into string. </span> </li> </ul>  <h2>Constructor Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"initialize-instance_method\"> #initialize(path, options = {}) ⇒ Matcher </h3>   <p>Constructs an instance of PathRouter::Matcher.</p>    </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"capture_length-instance_method\"> #capture_length ⇒ Object </h3>   <p>Returns captures parameter length.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"expand-instance_method\"> #expand(params) ⇒ Object </h3>   <p>Expands the path by using parameters.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"handler-instance_method\"> #handler ⇒ Object </h3>   <p>Returns the handler which is an instance of Mustermann or Regexp.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"match-instance_method\"> #match(pattern) ⇒ Object </h3>   <p>Matches a pattern with the route matcher.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"mustermann?-instance_method\"> #mustermann? ⇒ Boolean </h3>   <p>Returns true if handler is an instance of Mustermann.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"names-instance_method\"> #names ⇒ Object </h3>   <p>Returns names of the handler.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">See Also:</h4> <ul class=\"see\"> <li>Regexp#names</li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"params_for-instance_method\"> #params_for(pattern, others) ⇒ Object </h3>   <p>Builds a parameters, and returns them.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"to_regexp-instance_method\"> #to_regexp ⇒ Object </h3>   <p>Returns a regexp from handler.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"to_s-instance_method\"> #to_s ⇒ Object </h3>   <p>Converts the handler into string.</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/PathRouter/Matcher\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/PathRouter/Matcher</a>\n  </p>\n</div>\n","padrino/helpers/formhelpers/options":"<h1>Module: Padrino::Helpers::FormHelpers::Options </h1>  <h2>Overview</h2>  <p>Helpers to generate options list for select tag.</p>    <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"options#extract_option_tags%21-instance_method\" title=\"#extract_option_tags! (instance method)\">#<strong>extract_option_tags!</strong>(options) ⇒ Object</a></code>  </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"extract_option_tags!-instance_method\"> #extract_option_tags!(options) ⇒ Object </h3>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormHelpers/Options\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormHelpers/Options</a>\n  </p>\n</div>\n","padrino/admin/generators/ormerror":"<h1>Exception: Padrino::Admin::Generators::OrmError </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">StandardError</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">StandardError</li> <li class=\"next\">Padrino::Admin::Generators::OrmError</li> </ul>  </dd> </dl>  </div> <h2>Overview</h2>  <p>Defines a generic exception for the admin ORM handler.</p>   <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Generators/OrmError\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Generators/OrmError</a>\n  </p>\n</div>\n","padrino/helpers/formathelpers":"<h1>Module: Padrino::Helpers::FormatHelpers </h1>  <h2>Overview</h2>  <p>Helpers related to formatting or manipulating text within templates.</p>    <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formathelpers#distance_of_time_in_words-instance_method\" title=\"#distance_of_time_in_words (instance method)\">#<strong>distance_of_time_in_words</strong>(from_time, to_time = 0, include_seconds = false, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Reports the approximate distance in time between two Time or Date objects or integers as seconds. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formathelpers#escape_html-instance_method\" title=\"#escape_html (instance method)\">#<strong>escape_html</strong>(text) ⇒ String</a> (also: #h, #sanitize_html)</code> <span class=\"summary_desc\"> Returns escaped text to protect against malicious content. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formathelpers#h%21-instance_method\" title=\"#h! (instance method)\">#<strong>h!</strong>(text, blank_text = '&amp;nbsp;') ⇒ String</a></code> <span class=\"summary_desc\"> Returns escaped text to protect against malicious content. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formathelpers#highlight-instance_method\" title=\"#highlight (instance method)\">#<strong>highlight</strong>(text, words, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Highlights one or more words everywhere in text by inserting it into a :highlighter string. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formathelpers#js_escape_html-instance_method\" title=\"#js_escape_html (instance method)\">#<strong>js_escape_html</strong>(html_content) ⇒ String</a> (also: #escape_javascript)</code> <span class=\"summary_desc\"> Used in xxxx.js.erb files to escape html so that it can be passed to javascript from Padrino. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formathelpers#pluralize-instance_method\" title=\"#pluralize (instance method)\">#<strong>pluralize</strong>(count, singular, plural = nil) ⇒ String</a></code> <span class=\"summary_desc\"> Attempts to pluralize the singular word unless count is 1. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formathelpers#simple_format-instance_method\" title=\"#simple_format (instance method)\">#<strong>simple_format</strong>(text, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Returns text transformed into HTML using simple formatting rules. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formathelpers#strip_tags-instance_method\" title=\"#strip_tags (instance method)\">#<strong>strip_tags</strong>(html) ⇒ String</a></code> <span class=\"summary_desc\"> Strips all HTML tags from the html. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formathelpers#time_ago_in_words-instance_method\" title=\"#time_ago_in_words (instance method)\">#<strong>time_ago_in_words</strong>(from_time, include_seconds = false) ⇒ String</a></code> <span class=\"summary_desc\"> Like distance_of_time_in_words, but where to_time is fixed to Time.now. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formathelpers#truncate-instance_method\" title=\"#truncate (instance method)\">#<strong>truncate</strong>(text, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Truncates a given text after a given :length if text is longer than :length (defaults to 30). </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formathelpers#truncate_words-instance_method\" title=\"#truncate_words (instance method)\">#<strong>truncate_words</strong>(text, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Truncates words of a given text after a given :length if number of words in text is more than :length (defaults to 30). </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formathelpers#word_wrap-instance_method\" title=\"#word_wrap (instance method)\">#<strong>word_wrap</strong>(text, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Wraps the text into lines no longer than line_width width. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"distance_of_time_in_words-instance_method\"> #distance_of_time_in_words(from_time, to_time = 0, include_seconds = false, options = {}) ⇒ String </h3>   <p>Reports the approximate distance in time between two Time or Date objects or integers as seconds. Set <code>include_seconds</code> to true if you want more detailed approximations when distance &lt; 1 min, 29 secs Distances are reported based on the following table:</p> <pre class=\"code ruby\" data-language=\"ruby\">0 &lt;-&gt; 29 secs                                                           # =&gt; less than a minute\n30 secs &lt;-&gt; 1 min, 29 secs                                              # =&gt; 1 minute\n1 min, 30 secs &lt;-&gt; 44 mins, 29 secs                                     # =&gt; [2..44] minutes\n44 mins, 30 secs &lt;-&gt; 89 mins, 29 secs                                   # =&gt; about 1 hour\n89 mins, 29 secs &lt;-&gt; 23 hrs, 59 mins, 29 secs                           # =&gt; about [2..24] hours\n23 hrs, 59 mins, 29 secs &lt;-&gt; 47 hrs, 59 mins, 29 secs                   # =&gt; 1 day\n47 hrs, 59 mins, 29 secs &lt;-&gt; 29 days, 23 hrs, 59 mins, 29 secs          # =&gt; [2..29] days\n29 days, 23 hrs, 59 mins, 30 secs &lt;-&gt; 59 days, 23 hrs, 59 mins, 29 secs # =&gt; about 1 month\n59 days, 23 hrs, 59 mins, 30 secs &lt;-&gt; 1 yr minus 1 sec                  # =&gt; [2..12] months\n1 yr &lt;-&gt; 1 yr, 3 months                                                 # =&gt; about 1 year\n1 yr, 3 months &lt;-&gt; 1 yr, 9 months                                       # =&gt; over 1 year\n1 yr, 9 months &lt;-&gt; 2 yr minus 1 sec                                     # =&gt; almost 2 years\n2 yrs &lt;-&gt; max time or date                                              # =&gt; (same rules as 1 yr)</pre> <p>With <code>include_seconds</code> = true and the difference &lt; 1 minute 29 seconds:</p> <pre class=\"code ruby\" data-language=\"ruby\">0-4   secs      # =&gt; less than 5 seconds\n5-9   secs      # =&gt; less than 10 seconds\n10-19 secs      # =&gt; less than 20 seconds\n20-39 secs      # =&gt; half a minute\n40-59 secs      # =&gt; less than a minute\n60-89 secs      # =&gt; 1 minute</pre>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">from_time = Time.now\ndistance_of_time_in_words(from_time, from_time + 50.minutes)        # =&gt; about 1 hour\ndistance_of_time_in_words(from_time, 50.minutes.from_now)           # =&gt; about 1 hour\ndistance_of_time_in_words(from_time, from_time + 15.seconds)        # =&gt; less than a minute\ndistance_of_time_in_words(from_time, from_time + 15.seconds, true)  # =&gt; less than 20 seconds\ndistance_of_time_in_words(from_time, 3.years.from_now)              # =&gt; about 3 years\ndistance_of_time_in_words(from_time, from_time + 60.hours)          # =&gt; about 3 days\ndistance_of_time_in_words(from_time, from_time + 45.seconds, true)  # =&gt; less than a minute\ndistance_of_time_in_words(from_time, from_time - 45.seconds, true)  # =&gt; less than a minute\ndistance_of_time_in_words(from_time, 76.seconds.from_now)           # =&gt; 1 minute\ndistance_of_time_in_words(from_time, from_time + 1.year + 3.days)   # =&gt; about 1 year\ndistance_of_time_in_words(from_time, from_time + 3.years + 6.months) # =&gt; over 3 years\ndistance_of_time_in_words(from_time, from_time + 4.years + 9.days + 30.minutes + 5.seconds) # =&gt; about 4 years\nto_time = Time.now + 6.years + 19.days\ndistance_of_time_in_words(from_time, to_time, true)     # =&gt; about 6 years\ndistance_of_time_in_words(to_time, from_time, true)     # =&gt; about 6 years\ndistance_of_time_in_words(Time.now, Time.now)           # =&gt; less than a minute</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">from_time</code> <span class=\"type\">(<code>Time</code>)</span> —  The time to be compared against <code>to_time</code> in order to approximate the distance.  </li> <li> <code class=\"name\">to_time</code> <span class=\"type\">(<code>Time</code>)</span> <em class=\"default\">(defaults to: <code>0</code>)</em> —  The time to be compared against <code>from_time</code> in order to approximate the distance.  </li> <li> <code class=\"name\">include_seconds</code> <span class=\"type\">(<code>Boolean</code>)</span> <em class=\"default\">(defaults to: <code>false</code>)</em> —  Set true for more detailed approximations.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  Flags for the approximation.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:locale</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  The translation locale to be used for approximating the time.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The time formatted as a relative string.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"escape_html-instance_method\"> #escape_html(text) ⇒ String Also known as: h, sanitize_html  </h3>   <p>Returns escaped text to protect against malicious content.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">escape_html(\"&lt;b&gt;Hey&lt;b&gt;\") =&gt; \"&amp;lt;b&amp;gt;Hey&amp;lt;b;gt;\"\nh(\"Me &amp; Bob\") =&gt; \"Me &amp;amp; Bob\"</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">text</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Unsanitized HTML string that needs to be escaped.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  HTML with escaped characters.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"h!-instance_method\"> #h!(text, blank_text = '&amp;nbsp;') ⇒ String </h3>   <p>Returns escaped text to protect against malicious content.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">h!(\"Me &amp; Bob\") =&gt; \"Me &amp;amp; Bob\"\nh!(\"\", \"Whoops\") =&gt; \"Whoops\"</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">text</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Unsanitized HTML string that needs to be escaped.  </li> <li> <code class=\"name\">blank_text</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <em class=\"default\">(defaults to: <code>'&amp;nbsp;'</code>)</em> —  Text to return if escaped text is blank.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  HTML with escaped characters or the value specified if blank.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"highlight-instance_method\"> #highlight(text, words, options = {}) ⇒ String </h3>   <p>Highlights one or more words everywhere in text by inserting it into a :highlighter string.</p> <p>The highlighter can be customized by passing :<code>highlighter</code> as a single-quoted string with 1 where the phrase is to be inserted.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">highlight('Lorem ipsum dolor sit amet', 'dolor')\n# =&gt; Lorem ipsum &lt;strong class=\"highlight\"&gt;dolor&lt;/strong&gt; sit amet\n\nhighlight('Lorem ipsum dolor sit amet', 'dolor', :highlighter =&gt; '&lt;span class=\"custom\"&gt;\\1&lt;/span&gt;')\n# =&gt; Lorem ipsum &lt;strong class=\"custom\"&gt;dolor&lt;/strong&gt; sit amet</pre> </div>     <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">text</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The text that will be searched.  </li> <li> <code class=\"name\">words</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The words to be highlighted in the <code>text</code>.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  Formatting options for the highlight.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:highlighter</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <span class=\"default\"> — default: <code>'&lt;strong class=\"highlight\"&gt;\\1&lt;/strong&gt;'</code> </span> —  The html pattern for wrapping the highlighted words.  </li> </ul> </div> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The text with the words specified wrapped with highlighted spans.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"js_escape_html-instance_method\"> #js_escape_html(html_content) ⇒ String Also known as: escape_javascript  </h3>   <p>Used in xxxx.js.erb files to escape html so that it can be passed to javascript from Padrino.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">js_escape_html(\"&lt;h1&gt;Hey&lt;/h1&gt;\")</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">html</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The HTML content to be escaped into javascript compatible format.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The html escaped for javascript passing.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"pluralize-instance_method\"> #pluralize(count, singular, plural = nil) ⇒ String </h3>   <p>Attempts to pluralize the singular word unless count is 1. If plural is supplied, it will use that when count is &gt; 1, otherwise it will use inflector to determine the plural form.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">pluralize(2, 'person') =&gt; '2 people'</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">count</code> <span class=\"type\">(<code>Fixnum</code>)</span> —  The count which determines pluralization.  </li> <li> <code class=\"name\">singular</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The word to be pluralized if appropriate based on <code>count</code>.  </li> <li> <code class=\"name\">plural</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <em class=\"default\">(defaults to: <code>nil</code>)</em> —  Explicit pluralized word to be used; if not specified uses inflector.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The properly pluralized word.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"simple_format-instance_method\"> #simple_format(text, options = {}) ⇒ String </h3>   <p>Returns text transformed into HTML using simple formatting rules. Two or more consecutive newlines(nn) are considered as a paragraph and wrapped in &lt;p&gt; or your own tags. One newline (n) is considered as a linebreak and a &lt;br /&gt; tag is appended. This method does not remove the newlines from the text.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">simple_format(\"hello\\nworld\") # =&gt; \"&lt;p&gt;hello&lt;br/&gt;world&lt;/p&gt;\"\nsimple_format(\"hello\\nworld\", :tag =&gt; :div, :class =&gt; :foo) # =&gt; \"&lt;div class=\"foo\"&gt;hello&lt;br/&gt;world&lt;/div&gt;\"</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">text</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The simple text to be formatted.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  Formatting options for the text. Can accept html options for the wrapper tag.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:tag</code> <span class=\"type\">(<code>Symbol</code>)</span> <span class=\"default\"> — default: <code>p</code> </span> —  The html tag to use for formatting newlines.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The text formatted as simple HTML.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"strip_tags-instance_method\"> #strip_tags(html) ⇒ String </h3>   <p>Strips all HTML tags from the html.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">strip_tags(\"&lt;b&gt;Hey&lt;/b&gt;\") =&gt; \"Hey\"</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">html</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The HTML for which to strip tags.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  HTML with tags stripped.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"time_ago_in_words-instance_method\"> #time_ago_in_words(from_time, include_seconds = false) ⇒ String </h3>   <p>Like distance_of_time_in_words, but where <code>to_time</code> is fixed to <code>Time.now</code>.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">time_ago_in_words(3.minutes.from_now)  # =&gt; 3 minutes\ntime_ago_in_words(Time.now - 15.hours) # =&gt; 15 hours\ntime_ago_in_words(Time.now)            # =&gt; less than a minute</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">from_time</code> <span class=\"type\">(<code>Time</code>)</span> —  The time to be compared against now in order to approximate the distance.  </li> <li> <code class=\"name\">include_seconds</code> <span class=\"type\">(<code>Boolean</code>)</span> <em class=\"default\">(defaults to: <code>false</code>)</em> —  Set true for more detailed approximations.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The time formatted as a relative string.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"truncate-instance_method\"> #truncate(text, options = {}) ⇒ String </h3>   <p>Truncates a given text after a given :length if text is longer than :length (defaults to 30). The last characters will be replaced with the :omission (defaults to “…”) for a total length not exceeding :length.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">truncate(\"Once upon a time in a world far far away\", :length =&gt; 8) =&gt; \"Once upon...\"</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">text</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The text to be truncated.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  Formatting options for the truncation.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:length</code> <span class=\"type\">(<code>Fixnum</code>)</span> <span class=\"default\"> — default: <code>30</code> </span> —  The number of characters before truncation occurs.  </li> <li> <code class=\"name\">:omission</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <span class=\"default\"> — default: <code>\"...\"</code> </span> —  The characters that are placed after the truncated text.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The text truncated after the given number of characters.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"truncate_words-instance_method\"> #truncate_words(text, options = {}) ⇒ String </h3>   <p>Truncates words of a given text after a given :length if number of words in text is more than :length (defaults to 30). The last words will be replaced with the :omission (defaults to “…”) for a total number of words not exceeding :length.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">truncate_words(\"Once upon a time in a world far far away\", :length =&gt; 8) =&gt; \"Once upon a time in a world far...\"</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">text</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The text to be truncated.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  Formatting options for the truncation.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:length</code> <span class=\"type\">(<code>Fixnum</code>)</span> <span class=\"default\"> — default: <code>30</code> </span> —  The number of words before truncation occurs.  </li> <li> <code class=\"name\">:omission</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <span class=\"default\"> — default: <code>\"...\"</code> </span> —  The characters that are placed after the truncated text.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The text truncated after the given number of words.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"word_wrap-instance_method\"> #word_wrap(text, options = {}) ⇒ String </h3>   <p>Wraps the text into lines no longer than line_width width. This method breaks on the first whitespace character that does not exceed line_width (which is 80 by default).</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">word_wrap('Once upon a time', :line_width =&gt; 8) =&gt; \"Once upon\\na time\"</pre> </div>     <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">text</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The text to be wrapped.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  Formatting options for the wrapping.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:line_width</code> <span class=\"type\">(<code>Fixnum</code>)</span> <span class=\"default\"> — default: <code>80</code> </span> —  The line width before a wrap should occur.  </li> </ul> </div> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The text with line wraps for lines longer then <code>line_width</code>.  </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormatHelpers\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormatHelpers</a>\n  </p>\n</div>\n","padrino/cache/helpers/page":"<h1>Module: Padrino::Cache::Helpers::Page </h1>  <h2>Overview</h2>  <p>Page caching is easy to integrate into your application. To turn it on, simply provide the <code>:cache =&gt; true</code> option on either a controller or one of its routes. By default, cached content is persisted with a “file store” –that is, in a subdirectory of your application root.</p> <p>You can manually expire cache with CachedApp.cache.delete(:my_name)</p> <p>Note that the “latest” method call to <code>expires</code> determines its value: if called within a route, as opposed to a controller definition, the route's value will be assumed.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\"># Setting content expiry time.\nclass CachedApp &lt; Padrino::Application\n  enable :caching          # turns on caching mechanism\n\n  controller '/blog', :cache =&gt; true do\n    expires 15\n\n    get '/entries' do\n      # expires 15 =&gt; can also be defined inside a single route\n      'Just broke up eating twinkies, lol'\n    end\n\n    get '/post/:id' do\n      cache_key :my_name\n      @post = Post.find(params[:id])\n    end\n  end\nend</pre> </div> </div>\n<h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"modules\">Modules:</strong> <span class=\"object_link\"><a href=\"page/classmethods\" title=\"Padrino::Cache::Helpers::Page::ClassMethods (module)\">ClassMethods</a></span> </p> <h2>Constant Summary</h2> <dl class=\"constants\"> <dt id=\"CACHED_VERBS-constant\" class=\"\">CACHED_VERBS = </dt> <dd><pre class=\"code\" data-language=\"ruby\">{ 'GET' =&gt; true, 'HEAD' =&gt; true }.freeze</pre></dd> </dl> <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"page#padrino_route_added-class_method\" title=\"padrino_route_added (class method)\">.<strong>padrino_route_added</strong>(route, verb) ⇒ Object</a></code>  </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"page#cache_key-instance_method\" title=\"#cache_key (instance method)\">#<strong>cache_key</strong>(name = nil, &amp;block) ⇒ Object</a></code> <span class=\"summary_desc\"> This helper is used within a route or route to indicate the name in the cache. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"page#expires-instance_method\" title=\"#expires (instance method)\">#<strong>expires</strong>(time) ⇒ Object</a></code> <span class=\"summary_desc\"> This helper is used within a controller or route to indicate how often content should persist in the cache. </span> </li> </ul>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"padrino_route_added-class_method\"> .padrino_route_added(route, verb) ⇒ Object </h3>  </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"cache_key-instance_method\"> #cache_key(name = nil, &amp;block) ⇒ Object </h3>   <p>This helper is used within a route or route to indicate the name in the cache.</p> <pre class=\"code ruby\" data-language=\"ruby\">end</pre>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">controller '/blog', :cache =&gt; true do\n\n  get '/post/:id' do\n    cache_key :my_name\n    @post = Post.find(params[:id])\n  end\nend</pre> <pre class=\"example code\" data-language=\"ruby\">get '/foo', :cache =&gt; true do\n  cache_key { param[:id] }\n  \"My id is #{param[:id}\"\nend</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code>Symbol</code>)</span> <em class=\"default\">(defaults to: <code>nil</code>)</em> —  cache key  </li> <li> <code class=\"name\">block</code> <span class=\"type\">(<code>Proc</code>)</span> —  block to be evaluated to cache key  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"expires-instance_method\"> #expires(time) ⇒ Object </h3>   <p>This helper is used within a controller or route to indicate how often content should persist in the cache.</p> <p>After <code>seconds</code> seconds have passed, content previously cached will be discarded and re-rendered. Code associated with that route will <em>not</em> be executed; rather, its previous output will be sent to the client with a 200 OK status code.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">controller '/blog', :cache =&gt; true do\n  expires 15\n\n  get '/entries' do\n    'Just broke up eating twinkies, lol'\n  end\nend</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">time</code> <span class=\"type\">(<code>Integer</code>)</span> —  Time til expiration (seconds)  </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers/Page\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Cache/Helpers/Page</a>\n  </p>\n</div>\n","padrino/paramsprotection":"<h1>Module: Padrino::ParamsProtection </h1>  <h2>Overview</h2>  <p>Padrino application module providing means for mass-assignment protection.</p>   \n<h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"modules\">Modules:</strong> <span class=\"object_link\"><a href=\"paramsprotection/classmethods\" title=\"Padrino::ParamsProtection::ClassMethods (module)\">ClassMethods</a></span>, <span class=\"object_link\"><a href=\"paramsprotection/instancemethods\" title=\"Padrino::ParamsProtection::InstanceMethods (module)\">InstanceMethods</a></span> </p> <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"paramsprotection#registered-class_method\" title=\"registered (class method)\">.<strong>registered</strong>(app) ⇒ Object</a></code>  </li> </ul>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"registered-class_method\"> .registered(app) ⇒ Object </h3>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/ParamsProtection\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/ParamsProtection</a>\n  </p>\n</div>\n","padrino/routing/parent":"<h1>Class: Padrino::Routing::Parent </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\"><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\"><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></li> <li class=\"next\">Padrino::Routing::Parent</li> </ul>  </dd> </dl>  </div> <h2>Instance Attribute Summary \n</h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"parent#map-instance_method\" title=\"#map (instance method)\">#<strong>map</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute map. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"parent#optional-instance_method\" title=\"#optional (instance method)\">#<strong>optional</strong> ⇒ Object</a> (also: #optional?)</code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute optional. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"parent#options-instance_method\" title=\"#options (instance method)\">#<strong>options</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute options. </span> </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"parent#initialize-instance_method\" title=\"#initialize (instance method)\">#<strong>initialize</strong>(value, options = {}) ⇒ Parent</a></code> <span class=\"note title constructor\">constructor</span> <span class=\"summary_desc\"> A new instance of Parent. </span> </li> </ul> <h3 class=\"inherited\">Methods inherited from String</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"../../string#camelize-instance_method\" title=\"String#camelize (method)\">#camelize</a></span>, <span class=\"object_link\"><a href=\"../../string#classify-instance_method\" title=\"String#classify (method)\">#classify</a></span>, <span class=\"object_link\"><a href=\"../../string#colorize-instance_method\" title=\"String#colorize (method)\">#colorize</a></span>, <span class=\"object_link\"><a href=\"../../string#constantize-instance_method\" title=\"String#constantize (method)\">#constantize</a></span>, <span class=\"object_link\"><a href=\"../../string#dasherize-instance_method\" title=\"String#dasherize (method)\">#dasherize</a></span>, <span class=\"object_link\"><a href=\"../../string#humanize-instance_method\" title=\"String#humanize (method)\">#humanize</a></span>, <span class=\"object_link\"><a href=\"../../string#pluralize-instance_method\" title=\"String#pluralize (method)\">#pluralize</a></span>, <span class=\"object_link\"><a href=\"../../string#singularize-instance_method\" title=\"String#singularize (method)\">#singularize</a></span>, <span class=\"object_link\"><a href=\"../../string#underscore-instance_method\" title=\"String#underscore (method)\">#underscore</a></span></p>  <h2>Constructor Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"initialize-instance_method\"> #initialize(value, options = {}) ⇒ Parent </h3>   <p>Returns a new instance of Parent</p>    </div>   <h2>Instance Attribute Details</h2>  <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"map-instance_method\"> #map ⇒ Object (readonly) </h3>   <p>Returns the value of attribute map</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"optional-instance_method\"> #optional ⇒ Object (readonly) Also known as: optional?  </h3>   <p>Returns the value of attribute optional</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"options-instance_method\"> #options ⇒ Object (readonly) </h3>   <p>Returns the value of attribute options</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing/Parent\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing/Parent</a>\n  </p>\n</div>\n","padrino/pathrouter":"<h1>Module: Padrino::PathRouter </h1>  <h2>Overview</h2>  <p>Provides an HTTP router for use in path routing.</p>   \n<h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"classes\">Classes:</strong> <span class=\"object_link\"><a href=\"pathrouter/compiler\" title=\"Padrino::PathRouter::Compiler (class)\">Compiler</a></span>, <span class=\"object_link\"><a href=\"pathrouter/matcher\" title=\"Padrino::PathRouter::Matcher (class)\">Matcher</a></span>, <span class=\"object_link\"><a href=\"pathrouter/route\" title=\"Padrino::PathRouter::Route (class)\">Route</a></span>, <span class=\"object_link\"><a href=\"pathrouter/router\" title=\"Padrino::PathRouter::Router (class)\">Router</a></span> </p> <h2>Constant Summary</h2> <dl class=\"constants\"> <dt id=\"InvalidRouteException-constant\" class=\"\">InvalidRouteException =     <div class=\"tags\"> <h4 class=\"tag_title\">See Also:</h4> <ul class=\"see\"> <li><span class=\"object_link\"><a href=\"pathrouter/router#path-instance_method\" title=\"Padrino::PathRouter::Router#path (method)\">Router#path</a></span></li> </ul> </div> </dt> <dd><pre class=\"code\" data-language=\"ruby\">Class.new(ArgumentError)</pre></dd> </dl> <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"pathrouter#new-class_method\" title=\"new (class method)\">.<strong>new</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Constructs an instance of PathRouter::Router. </span> </li> </ul>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"new-class_method\"> .new ⇒ Object </h3>   <p>Constructs an instance of PathRouter::Router.</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/PathRouter\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/PathRouter</a>\n  </p>\n</div>\n","padrino/performance":"<h1>Module: Padrino::Performance </h1>  <h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"modules\">Modules:</strong> <span class=\"object_link\"><a href=\"performance/json\" title=\"Padrino::Performance::JSON (module)\">JSON</a></span>, <span class=\"object_link\"><a href=\"performance/os\" title=\"Padrino::Performance::OS (module)\">OS</a></span> </p> <h2>Constant Summary</h2> <dl class=\"constants\"> <dt id=\"VERSION-constant\" class=\"\">VERSION = </dt> <dd><pre class=\"code\" data-language=\"ruby\">'0.13.2'</pre></dd> </dl> <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"performance#version-class_method\" title=\"version (class method)\">.<strong>version</strong> ⇒ String</a></code> <span class=\"summary_desc\"> The current Padrino version. </span> </li> </ul>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"version-class_method\"> .version ⇒ String </h3>   <p>The current Padrino version.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../string\" title=\"String (class)\">String</a></span></code>)</span> —  The version number.  </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Performance\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Performance</a>\n  </p>\n</div>\n","padrino/logger":"<h1>Class: Padrino::Logger </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Object</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Padrino::Logger</li> </ul>  </dd> </dl> <dl> <dt>Includes:</dt> <dd><span class=\"object_link\"><a href=\"logger/extensions\" title=\"Padrino::Logger::Extensions (module)\">Extensions</a></span></dd> </dl>  </div> <h2>Overview</h2>  <p>Padrinos internal logger, using all of Padrino log extensions.</p>   \n<h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"modules\">Modules:</strong> <span class=\"object_link\"><a href=\"logger/colorize\" title=\"Padrino::Logger::Colorize (module)\">Colorize</a></span>, <span class=\"object_link\"><a href=\"logger/extensions\" title=\"Padrino::Logger::Extensions (module)\">Extensions</a></span> <strong class=\"classes\">Classes:</strong> <span class=\"object_link\"><a href=\"logger/rack\" title=\"Padrino::Logger::Rack (class)\">Rack</a></span> </p> <h2>Constant Summary</h2> <dl class=\"constants\"> <dt id=\"Levels-constant\" class=\"\">Levels = </dt> <dd><pre class=\"code\" data-language=\"ruby\">{\n  :fatal =&gt;  4,\n  :error =&gt;  3,\n  :warn  =&gt;  2,\n  :info  =&gt;  1,\n  :debug =&gt;  0,\n  :devel =&gt; -1,\n}</pre></dd> <dt id=\"Config-constant\" class=\"\">Config =   <p>Configuration for a given environment, possible options are:</p> <table class=\"rdoc-list\">\n<tr>\n<td class=\"rdoc-term\"><p>:log_level</p></td> <td> <p>Once of [:fatal, :error, :warn, :info, :debug]</p> </td>\n</tr>\n<tr>\n<td class=\"rdoc-term\"><p>:stream</p></td> <td> <p>Once of [:to_file, :null, :stdout, :stderr] our your custom stream</p> </td>\n</tr>\n<tr>\n<td class=\"rdoc-term\"><p>:log_path</p></td> <td> <p>Defines log file path or directory if :stream is :to_file</p> </td>\n</tr>\n</table> <pre class=\"code ruby\" data-language=\"ruby\">If it's a file, its location is created by mkdir_p.\nIf it's a directory, it must exist. In this case log name is '&lt;env&gt;.log'</pre> <table class=\"rdoc-list\">\n<tr>\n<td class=\"rdoc-term\"><p>:log_level</p></td> <td> <p>The log level from, e.g. :fatal or :info. Defaults to :warn in the production environment and :debug otherwise.</p> </td>\n</tr>\n<tr>\n<td class=\"rdoc-term\"><p>:auto_flush</p></td> <td> <p>Whether the log should automatically flush after new messages are added. Defaults to true.</p> </td>\n</tr>\n<tr>\n<td class=\"rdoc-term\"><p>:format_datetime</p></td> <td> <p>Format of datetime. Defaults to: “%d/%b/%Y %H:%M:%S”</p> </td>\n</tr>\n<tr>\n<td class=\"rdoc-term\"><p>:format_message</p></td> <td> <p>Format of message. Defaults to: “”%s - - [%s] \"%s\"“”</p> </td>\n</tr>\n<tr>\n<td class=\"rdoc-term\"><p>:log_static</p></td> <td> <p>Whether or not to show log messages for static files. Defaults to: false</p> </td>\n</tr>\n<tr>\n<td class=\"rdoc-term\"><p>:colorize_logging</p></td> <td> <p>Whether or not to colorize log messages. Defaults to: true</p> </td>\n</tr>\n</table> <p>Defaults are:</p> <pre class=\"code ruby\" data-language=\"ruby\">:production  =&gt; { :log_level =&gt; :warn, :stream =&gt; :to_file }\n:development =&gt; { :log_level =&gt; :debug, :stream =&gt; :stdout }\n:test        =&gt; { :log_level =&gt; :fatal, :stream =&gt; :null }</pre> <p>In some cases, configuring the loggers before loading the framework is necessary. You can do so by setting PADRINO_LOGGER:</p> <pre class=\"code ruby\" data-language=\"ruby\">PADRINO_LOGGER = { :staging =&gt; { :log_level =&gt; :debug, :stream =&gt; :to_file }}</pre>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">Padrino::Logger::Config[:development] = { :log_level =&gt; :debug, :stream =&gt; :to_file }\n# or you can edit our defaults\nPadrino::Logger::Config[:development][:log_level] = :error\n# or change log file path\nPadrino::Logger::Config[:development][:log_path] = 'logs/app-development.txt'\n# or change log file directory\nPadrino::Logger::Config[:development][:log_path] = '/var/logs/padrino'\n# or you can use your stream\nPadrino::Logger::Config[:development][:stream] = StringIO.new</pre> </div> </div> </dt> <dd><pre class=\"code\" data-language=\"ruby\">{\n  :production  =&gt; { :log_level =&gt; :warn,  :stream =&gt; :to_file },\n  :development =&gt; { :log_level =&gt; :debug, :stream =&gt; :stdout, :format_datetime =&gt; '' },\n  :test        =&gt; { :log_level =&gt; :debug, :stream =&gt; :null }\n}</pre></dd> <dt id=\"mutex-classvariable\" class=\"\">@@mutex = </dt> <dd><pre class=\"code\" data-language=\"ruby\">Mutex.new</pre></dd> </dl> <h3 class=\"inherited\">Constants included from Extensions</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"logger/extensions#SOURCE_LOCATION_REGEXP-constant\" title=\"Padrino::Logger::Extensions::SOURCE_LOCATION_REGEXP (constant)\">Extensions::SOURCE_LOCATION_REGEXP</a></span></p> <h2>Instance Attribute Summary \n</h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"logger#auto_flush-instance_method\" title=\"#auto_flush (instance method)\">#<strong>auto_flush</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the value of attribute auto_flush. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"logger#buffer-instance_method\" title=\"#buffer (instance method)\">#<strong>buffer</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute buffer. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"logger#colorize_logging-instance_method\" title=\"#colorize_logging (instance method)\">#<strong>colorize_logging</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute colorize_logging. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"logger#init_args-instance_method\" title=\"#init_args (instance method)\">#<strong>init_args</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute init_args. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"logger#level-instance_method\" title=\"#level (instance method)\">#<strong>level</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the value of attribute level. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"logger#log-instance_method\" title=\"#log (instance method)\">#<strong>log</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute log. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"logger#log_static-instance_method\" title=\"#log_static (instance method)\">#<strong>log_static</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the value of attribute log_static. </span> </li> </ul> <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"logger#logger-class_method\" title=\"logger (class method)\">.<strong>logger</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"logger#logger%3D-class_method\" title=\"logger= (class method)\">.<strong>logger=</strong>(logger) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"logger#setup%21-class_method\" title=\"setup! (class method)\">.<strong>setup!</strong> ⇒ Padrino::Logger</a></code> <span class=\"summary_desc\"> Setup a new logger. </span> </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"logger#%3C%3C-instance_method\" title=\"#&lt;&lt; (instance method)\">#<strong>&lt;&lt;</strong>(message = nil) ⇒ Object</a> (also: #write)</code> <span class=\"summary_desc\"> Directly append message to the log. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"logger#add-instance_method\" title=\"#add (instance method)\">#<strong>add</strong>(level, message = nil) ⇒ Object</a></code> <span class=\"summary_desc\"> Adds a message to the log - for compatibility with other loggers. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"logger#close-instance_method\" title=\"#close (instance method)\">#<strong>close</strong> ⇒ NilClass</a></code> <span class=\"summary_desc\"> Close and remove the current log object. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"logger#flush-instance_method\" title=\"#flush (instance method)\">#<strong>flush</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Flush the entire buffer to the log object. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"logger#format-instance_method\" title=\"#format (instance method)\">#<strong>format</strong>(message, level) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"logger#initialize-instance_method\" title=\"#initialize (instance method)\">#<strong>initialize</strong>(options = {}) ⇒ Logger</a></code> <span class=\"note title constructor\">constructor</span> <span class=\"summary_desc\"> To initialize the logger you create a new object, proxies to set_log. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"logger#source_location%3F-instance_method\" title=\"#source_location? (instance method)\">#<strong>source_location?</strong> ⇒ Boolean</a></code>  </li> </ul> <h3 class=\"inherited\">Methods included from Extensions</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"logger/extensions#bench-instance_method\" title=\"Padrino::Logger::Extensions#bench (method)\">#bench</a></span>, <span class=\"object_link\"><a href=\"logger/extensions#colorize-instance_method\" title=\"Padrino::Logger::Extensions#colorize (method)\">#colorize</a></span>, <span class=\"object_link\"><a href=\"logger/extensions#colorize%21-instance_method\" title=\"Padrino::Logger::Extensions#colorize! (method)\">#colorize!</a></span>, <span class=\"object_link\"><a href=\"logger/extensions#enable_source_location%3F-instance_method\" title=\"Padrino::Logger::Extensions#enable_source_location? (method)\">#enable_source_location?</a></span>, <span class=\"object_link\"><a href=\"logger/extensions#exception-instance_method\" title=\"Padrino::Logger::Extensions#exception (method)\">#exception</a></span>, <span class=\"object_link\"><a href=\"logger/extensions#name-instance_method\" title=\"Padrino::Logger::Extensions#name (method)\">#name</a></span>, <span class=\"object_link\"><a href=\"logger/extensions#push-instance_method\" title=\"Padrino::Logger::Extensions#push (method)\">#push</a></span>, <span class=\"object_link\"><a href=\"logger/extensions#resolve_source_location-instance_method\" title=\"Padrino::Logger::Extensions#resolve_source_location (method)\">#resolve_source_location</a></span>, <span class=\"object_link\"><a href=\"logger/extensions#stylized_level-instance_method\" title=\"Padrino::Logger::Extensions#stylized_level (method)\">#stylized_level</a></span></p>  <h2>Constructor Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"initialize-instance_method\"> #initialize(options = {}) ⇒ Logger </h3>   <p>To initialize the logger you create a new object, proxies to set_log.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:stream</code> <span class=\"type\">(<code>Symbol</code>)</span> <span class=\"default\"> — default: <code>$stdout</code> </span> —  Either an IO object or a name of a logfile. Defaults to $stdout  </li> <li> <code class=\"name\">:log_level</code> <span class=\"type\">(<code>Symbol</code>)</span> <span class=\"default\"> — default: <code>:production in the production environment and :debug otherwise</code> </span> —  The log level from, e.g. :fatal or :info.  </li> <li> <code class=\"name\">:auto_flush</code> <span class=\"type\">(<code>Symbol</code>)</span> <span class=\"default\"> — default: <code>true</code> </span> —  Whether the log should automatically flush after new messages are added. Defaults to true.  </li> <li> <code class=\"name\">:format_datetime</code> <span class=\"type\">(<code>Symbol</code>)</span> <span class=\"default\"> — default: <code>\" [%d/%b/%Y %H:%M:%S] \"</code> </span> —  Format of datetime.  </li> <li> <code class=\"name\">:format_message</code> <span class=\"type\">(<code>Symbol</code>)</span> <span class=\"default\"> — default: <code>\"%s -%s%s\"</code> </span> —  Format of message.  </li> <li> <code class=\"name\">:log_static</code> <span class=\"type\">(<code>Symbol</code>)</span> <span class=\"default\"> — default: <code>false</code> </span> —  Whether or not to show log messages for static files.  </li> <li> <code class=\"name\">:colorize_logging</code> <span class=\"type\">(<code>Symbol</code>)</span> <span class=\"default\"> — default: <code>true</code> </span> —  Whether or not to colorize log messages. Defaults to: true.  </li> <li> <code class=\"name\">:sanitize_encoding</code> <span class=\"type\">(<code>Symbol</code>)</span> <span class=\"default\"> — default: <code>false</code> </span> —  Logger will replace undefined or broken characters with “uFFFD” for Unicode and “?” otherwise. Can be an encoding, false or true. If it's true, logger sanitizes to Encoding.default_external.  </li> </ul> </div> </div>   <h2>Instance Attribute Details</h2>  <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"auto_flush-instance_method\"> #auto_flush ⇒ Object </h3>   <p>Returns the value of attribute auto_flush</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"buffer-instance_method\"> #buffer ⇒ Object (readonly) </h3>   <p>Returns the value of attribute buffer</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"colorize_logging-instance_method\"> #colorize_logging ⇒ Object (readonly) </h3>   <p>Returns the value of attribute colorize_logging</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"init_args-instance_method\"> #init_args ⇒ Object (readonly) </h3>   <p>Returns the value of attribute init_args</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"level-instance_method\"> #level ⇒ Object </h3>   <p>Returns the value of attribute level</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"log-instance_method\"> #log ⇒ Object (readonly) </h3>   <p>Returns the value of attribute log</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"log_static-instance_method\"> #log_static ⇒ Object </h3>   <p>Returns the value of attribute log_static</p>    </div>   <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"logger-class_method\"> .logger ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"logger=-class_method\"> .logger=(logger) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"setup!-class_method\"> .setup! ⇒ Padrino::Logger </h3>   <p>Setup a new logger.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"logger\" title=\"Padrino::Logger (class)\">Padrino::Logger</a></span></code>)</span> —  A <span class=\"object_link\"><a href=\"logger\" title=\"Padrino::Logger (class)\">Padrino::Logger</a></span> instance  </li> </ul> </div> </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"&lt;&lt;-instance_method\"> #&lt;&lt;(message = nil) ⇒ Object Also known as: write  </h3>   <p>Directly append message to the log.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">message</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../string\" title=\"String (class)\">String</a></span></code>)</span> <em class=\"default\">(defaults to: <code>nil</code>)</em> —  The message  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"add-instance_method\"> #add(level, message = nil) ⇒ Object </h3>   <p>Adds a message to the log - for compatibility with other loggers.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"close-instance_method\"> #close ⇒ NilClass </h3>   <p>Close and remove the current log object.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>NilClass</code>)</span> </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"flush-instance_method\"> #flush ⇒ Object </h3>   <p>Flush the entire buffer to the log object.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"format-instance_method\"> #format(message, level) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"source_location?-instance_method\"> #source_location? ⇒ Boolean </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Logger\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Logger</a>\n  </p>\n</div>\n","padrino/mounter":"<h1>Class: Padrino::Mounter </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Object</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Padrino::Mounter</li> </ul>  </dd> </dl>  </div> <h2>Overview</h2>  <p>Represents a particular mounted Padrino application. Stores the name of the application (app folder name) and url mount path.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">Mounter.new(\"blog_app\", :app_class =&gt; \"Blog\").to(\"/blog\")\nMounter.new(\"blog_app\", :app_file =&gt; \"/path/to/blog/app.rb\").to(\"/blog\")</pre> </div> </div>\n<h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"modules\">Modules:</strong> <span class=\"object_link\"><a href=\"mounter/applicationextension\" title=\"Padrino::Mounter::ApplicationExtension (module)\">ApplicationExtension</a></span> <strong class=\"classes\">Classes:</strong> <span class=\"object_link\"><a href=\"mounter/mounterexception\" title=\"Padrino::Mounter::MounterException (class)\">MounterException</a></span> </p> <h2>Constant Summary</h2> <dl class=\"constants\"> <dt id=\"DEFAULT_CASCADE-constant\" class=\"\">DEFAULT_CASCADE = </dt> <dd><pre class=\"code\" data-language=\"ruby\">[404, 405]</pre></dd> </dl> <h2>Instance Attribute Summary \n</h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"mounter#app_class-instance_method\" title=\"#app_class (instance method)\">#<strong>app_class</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the value of attribute app_class. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"mounter#app_file-instance_method\" title=\"#app_file (instance method)\">#<strong>app_file</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the value of attribute app_file. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"mounter#app_host-instance_method\" title=\"#app_host (instance method)\">#<strong>app_host</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the value of attribute app_host. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"mounter#app_obj-instance_method\" title=\"#app_obj (instance method)\">#<strong>app_obj</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the value of attribute app_obj. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"mounter#app_root-instance_method\" title=\"#app_root (instance method)\">#<strong>app_root</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the value of attribute app_root. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"mounter#cascade-instance_method\" title=\"#cascade (instance method)\">#<strong>cascade</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the value of attribute cascade. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"mounter#name-instance_method\" title=\"#name (instance method)\">#<strong>name</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the value of attribute name. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"mounter#uri_root-instance_method\" title=\"#uri_root (instance method)\">#<strong>uri_root</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the value of attribute uri_root. </span> </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"mounter#%3D%3D-instance_method\" title=\"#== (instance method)\">#<strong>==</strong>(other) ⇒ Object</a></code> <span class=\"summary_desc\"> Makes two Mounters equal if they have the same name and uri_root. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"mounter#app_constant-instance_method\" title=\"#app_constant (instance method)\">#<strong>app_constant</strong> ⇒ Padrino::Application</a></code> <span class=\"summary_desc\"> The class object for the app if defined, nil otherwise. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"mounter#host-instance_method\" title=\"#host (instance method)\">#<strong>host</strong>(mount_host) ⇒ Object</a></code> <span class=\"summary_desc\"> Registers the mounted application onto Padrino for the given host. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"mounter#initialize-instance_method\" title=\"#initialize (instance method)\">#<strong>initialize</strong>(name, options = {}) ⇒ Mounter</a></code> <span class=\"note title constructor\">constructor</span> <span class=\"summary_desc\"> A new instance of Mounter. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"mounter#map_onto-instance_method\" title=\"#map_onto (instance method)\">#<strong>map_onto</strong>(router) ⇒ Padrino::Router</a></code> <span class=\"summary_desc\"> Maps Padrino application onto a Padrino::Router. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"mounter#named_routes-instance_method\" title=\"#named_routes (instance method)\">#<strong>named_routes</strong> ⇒ Array</a></code> <span class=\"summary_desc\"> Returns the basic route information for each named route. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"mounter#padrino_application%3F-instance_method\" title=\"#padrino_application? (instance method)\">#<strong>padrino_application?</strong> ⇒ Boolean</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"mounter#routes-instance_method\" title=\"#routes (instance method)\">#<strong>routes</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the route objects for the mounted application. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"mounter#to-instance_method\" title=\"#to (instance method)\">#<strong>to</strong>(mount_url) ⇒ Object</a></code> <span class=\"summary_desc\"> Registers the mounted application onto Padrino. </span> </li> </ul>  <h2>Constructor Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"initialize-instance_method\"> #initialize(name, options = {}) ⇒ Mounter </h3>   <p>Returns a new instance of Mounter</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../string\" title=\"String (class)\">String</a></span></code>, <code><span class=\"object_link\"><a href=\"application\" title=\"Padrino::Application (class)\">Padrino::Application</a></span></code>)</span> —  The app name or the <span class=\"object_link\"><a href=\"application\" title=\"Padrino::Application (class)\">Application</a></span> class.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:app_class</code> <span class=\"type\">(<code>Symbol</code>)</span> <span class=\"default\"> — default: <code>Detected from name</code> </span> </li> <li> <code class=\"name\">:app_file</code> <span class=\"type\">(<code>Symbol</code>)</span> <span class=\"default\"> — default: <code>Automatically detected</code> </span> </li> <li> <code class=\"name\">:app_obj</code> <span class=\"type\">(<code>Symbol</code>)</span> <span class=\"default\"> — default: <code>Detected</code> </span> </li> <li> <code class=\"name\">:app_root</code> <span class=\"type\">(<code>Symbol</code>)</span> <span class=\"default\"> — default: <code>Directory of :app_file</code> </span> </li> <li> <code class=\"name\">:gem</code> <span class=\"type\">(<code>Symbol</code>)</span>  —  The gem to load the app from (Detected from name)  </li> </ul> </div> </div>   <h2>Instance Attribute Details</h2>  <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"app_class-instance_method\"> #app_class ⇒ Object </h3>   <p>Returns the value of attribute app_class</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"app_file-instance_method\"> #app_file ⇒ Object </h3>   <p>Returns the value of attribute app_file</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"app_host-instance_method\"> #app_host ⇒ Object </h3>   <p>Returns the value of attribute app_host</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"app_obj-instance_method\"> #app_obj ⇒ Object </h3>   <p>Returns the value of attribute app_obj</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"app_root-instance_method\"> #app_root ⇒ Object </h3>   <p>Returns the value of attribute app_root</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"cascade-instance_method\"> #cascade ⇒ Object </h3>   <p>Returns the value of attribute cascade</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"name-instance_method\"> #name ⇒ Object </h3>   <p>Returns the value of attribute name</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"uri_root-instance_method\"> #uri_root ⇒ Object </h3>   <p>Returns the value of attribute uri_root</p>    </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"==-instance_method\"> #==(other) ⇒ Object </h3>   <p>Makes two Mounters equal if they have the same name and uri_root.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">other</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"mounter\" title=\"Padrino::Mounter (class)\">Padrino::Mounter</a></span></code>)</span> </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"app_constant-instance_method\"> #app_constant ⇒ Padrino::Application </h3>   <p>Returns the class object for the app if defined, nil otherwise.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"application\" title=\"Padrino::Application (class)\">Padrino::Application</a></span></code>)</span> —  the class object for the app if defined, nil otherwise.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"host-instance_method\"> #host(mount_host) ⇒ Object </h3>   <p>Registers the mounted application onto Padrino for the given host.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">Mounter.new(\"blog_app\").to(\"/blog\").host(\"blog.padrino.org\")\nMounter.new(\"blog_app\").host(\"blog.padrino.org\")\nMounter.new(\"catch_all\").host(/.*\\.padrino.org/)</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">mount_host</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../string\" title=\"String (class)\">String</a></span></code>)</span> —  Host name.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"map_onto-instance_method\"> #map_onto(router) ⇒ Padrino::Router </h3>   <p>Maps Padrino application onto a Padrino::Router. For use in constructing a Rack application.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">@app.map_onto(router)</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li>  <span class=\"type\">(<code><span class=\"object_link\"><a href=\"router\" title=\"Padrino::Router (class)\">Padrino::Router</a></span></code>)</span> </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"router\" title=\"Padrino::Router (class)\">Padrino::Router</a></span></code>)</span> </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"named_routes-instance_method\"> #named_routes ⇒ Array </h3>   <p>Returns the basic route information for each named route.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Array</code>)</span> —  Array of routes.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"padrino_application?-instance_method\"> #padrino_application? ⇒ Boolean </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"routes-instance_method\"> #routes ⇒ Object </h3>   <p>Returns the route objects for the mounted application.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"to-instance_method\"> #to(mount_url) ⇒ Object </h3>   <p>Registers the mounted application onto Padrino.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">Mounter.new(\"blog_app\").to(\"/blog\")</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">mount_url</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../string\" title=\"String (class)\">String</a></span></code>)</span> —  Path where we mount the app.  </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mounter\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Mounter</a>\n  </p>\n</div>\n","padrino/helpers/outputhelpers":"<h1>Module: Padrino::Helpers::OutputHelpers </h1> <div class=\"box_info\"> <dl> <dt>Included in:</dt> <dd><span class=\"object_link\"><a href=\"../cache/helpers/fragment\" title=\"Padrino::Cache::Helpers::Fragment (module)\">Cache::Helpers::Fragment</a></span></dd> </dl>  </div> <h2>Overview</h2>  <p>Helpers related to buffer output for various template engines.</p>   \n<h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"modules\">Modules:</strong> <span class=\"object_link\"><a href=\"outputhelpers/sinatracurrentengine\" title=\"Padrino::Helpers::OutputHelpers::SinatraCurrentEngine (module)\">SinatraCurrentEngine</a></span> <strong class=\"classes\">Classes:</strong> <span class=\"object_link\"><a href=\"outputhelpers/abstracthandler\" title=\"Padrino::Helpers::OutputHelpers::AbstractHandler (class)\">AbstractHandler</a></span>, <span class=\"object_link\"><a href=\"outputhelpers/erbhandler\" title=\"Padrino::Helpers::OutputHelpers::ErbHandler (class)\">ErbHandler</a></span>, <span class=\"object_link\"><a href=\"outputhelpers/hamlhandler\" title=\"Padrino::Helpers::OutputHelpers::HamlHandler (class)\">HamlHandler</a></span>, <span class=\"object_link\"><a href=\"outputhelpers/slimhandler\" title=\"Padrino::Helpers::OutputHelpers::SlimHandler (class)\">SlimHandler</a></span> </p> <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"outputhelpers#handlers-class_method\" title=\"handlers (class method)\">.<strong>handlers</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the list of all available template handlers. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"outputhelpers#register-class_method\" title=\"register (class method)\">.<strong>register</strong>(engine, handler) ⇒ Object</a></code> <span class=\"summary_desc\"> Registers a new handler as available to the output helpers. </span> </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"outputhelpers#block_is_template%3F-instance_method\" title=\"#block_is_template? (instance method)\">#<strong>block_is_template?</strong>(block) ⇒ Boolean</a></code> <span class=\"summary_desc\"> Returns true if the block is from a supported template type; false otherwise. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"outputhelpers#capture_html-instance_method\" title=\"#capture_html (instance method)\">#<strong>capture_html</strong>(*args, &amp;block) ⇒ String</a> (also: #capture)</code> <span class=\"summary_desc\"> Captures the html from a block of template code for any available handler. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"outputhelpers#concat_content-instance_method\" title=\"#concat_content (instance method)\">#<strong>concat_content</strong>(text = \"\") ⇒ Object</a> (also: #concat)</code> <span class=\"summary_desc\"> Outputs the given text to the templates buffer directly. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"outputhelpers#concat_safe_content-instance_method\" title=\"#concat_safe_content (instance method)\">#<strong>concat_safe_content</strong>(text = \"\") ⇒ Object</a></code> <span class=\"summary_desc\"> Outputs the given text to the templates buffer directly, assuming that it is safe. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"outputhelpers#content_for-instance_method\" title=\"#content_for (instance method)\">#<strong>content_for</strong>(key, content = nil, options = {}, &amp;block) ⇒ Object</a></code> <span class=\"summary_desc\"> Capture a block or text of content to be rendered at a later time. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"outputhelpers#content_for%3F-instance_method\" title=\"#content_for? (instance method)\">#<strong>content_for?</strong>(key) ⇒ TrueClass, FalseClass</a></code> <span class=\"summary_desc\"> Is there a content block for a given key?. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"outputhelpers#yield_content-instance_method\" title=\"#yield_content (instance method)\">#<strong>yield_content</strong>(key, *args) ⇒ String</a></code> <span class=\"summary_desc\"> Render the captured content blocks for a given key. </span> </li> </ul>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"handlers-class_method\"> .handlers ⇒ Object </h3>   <p>Returns the list of all available template handlers.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"register-class_method\"> .register(engine, handler) ⇒ Object </h3>   <p>Registers a new handler as available to the output helpers.</p>    </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"block_is_template?-instance_method\"> #block_is_template?(block) ⇒ Boolean </h3>   <p>Returns true if the block is from a supported template type; false otherwise. Used to determine if html should be returned or concatenated to the view.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">block_is_template?(block) =&gt; true</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">block</code> <span class=\"type\">(<code>Block</code>)</span> —  Determine if this block is a view template.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> —  True if the block is a template; false otherwise.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"capture_html-instance_method\"> #capture_html(*args, &amp;block) ⇒ String Also known as: capture  </h3>   <p>Captures the html from a block of template code for any available handler.</p> <p>Be aware that trusting the html is up to the caller.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">capture_html(&amp;block) =&gt; \"...html...\"\ncapture_html(object_for_block, &amp;block) =&gt; \"...html...\"</pre> <pre class=\"example code\" data-language=\"ruby\">ActiveSupport::SafeBuffer.new + capture_html { \"&lt;foo&gt;\" }\n# =&gt; \"&amp;lt;foo&amp;gt;\"\nActiveSupport::SafeBuffer.new.safe_concat(capture_html { \"&lt;foo&gt;\" })\n# =&gt; \"&lt;foo&gt;\"</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">*args</code> <span class=\"type\">(<code>Object</code>)</span> —  Objects yield to the captured block.  </li> <li> <code class=\"name\">&amp;block</code> <span class=\"type\">(<code>Proc</code>)</span> —  Template code to capture as HTML.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Captured HTML resulting from the block.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"concat_content-instance_method\"> #concat_content(text = \"\") ⇒ Object Also known as: concat  </h3>   <p>Outputs the given text to the templates buffer directly.</p> <p>The output might be subject to escaping, if it is not marked as safe.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">concat_content(\"This will be output to the template buffer\")</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">text</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>, <code>SafeBuffer</code>)</span> <em class=\"default\">(defaults to: <code>\"\"</code>)</em> —  Text to concatenate to the buffer.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"concat_safe_content-instance_method\"> #concat_safe_content(text = \"\") ⇒ Object </h3>   <p>Outputs the given text to the templates buffer directly, assuming that it is safe.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">concat_safe_content(\"This will be output to the template buffer\")</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">text</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <em class=\"default\">(defaults to: <code>\"\"</code>)</em> —  Text to concatenate to the buffer.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"content_for-instance_method\"> #content_for(key, content) ⇒ Object  #content_for(key, &amp;block) ⇒ Object  </h3>   <p>Capture a block or text of content to be rendered at a later time. Your blocks can also receive values, which are passed to them by <code>yield_content</code>.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">content_for(:name) { ...content... }\ncontent_for(:name) { |name| ...content... }\ncontent_for(:name, \"I'm Jeff\")\ncontent_for(:name, :flush =&gt; true) { ...new content... }</pre> </div> <h4 class=\"tag_title\">Overloads:</h4> <ul class=\"overload\"> <li class=\"overload_item\"> <h3 class=\"signature\">#content_for(key, content) ⇒ Object </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">key</code> <span class=\"type\">(<code>Symbol</code>)</span> —  Name of your key for the content yield.  </li> <li> <code class=\"name\">content</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Text to be stored for this key.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> —  Options associated with this method.  </li> </ul> </div> </li> <li class=\"overload_item\"> <h3 class=\"signature\">#content_for(key, &amp;block) ⇒ Object </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">key</code> <span class=\"type\">(<code>Symbol</code>)</span> —  Name of your key for the content yield.  </li> <li> <code class=\"name\">block</code> <span class=\"type\">(<code>Proc</code>)</span> —  Block to be stored as content for this key.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> —  Options associated with this method.  </li> </ul> </div> </li> </ul> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  a customizable set of options  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:flush</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether to replace the content.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"content_for?-instance_method\"> #content_for?(key) ⇒ TrueClass, FalseClass </h3>   <p>Is there a content block for a given key?</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">content_for? :header =&gt; true</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">key</code> <span class=\"type\">(<code>Symbol</code>)</span> —  Name of content to yield.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>TrueClass</code>, <code>FalseClass</code>)</span> —  Result html for the given <code>key</code>  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"yield_content-instance_method\"> #yield_content(key, *args) ⇒ String </h3>   <p>Render the captured content blocks for a given key. You can also pass values to the content blocks by passing them as arguments after the key.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">yield_content :include\nyield_content :head, \"param1\", \"param2\"\nyield_content(:title) || \"My page title\"</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">key</code> <span class=\"type\">(<code>Symbol</code>)</span> —  Name of content to yield.  </li> <li> <code class=\"name\">*args</code>  —  Values to pass to the content block.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Result HTML for the given <code>key</code>.  </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers</a>\n  </p>\n</div>\n","padrino/generators/plugin":"<h1>Class: Padrino::Generators::Plugin </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Thor::Group</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Thor::Group</li> <li class=\"next\">Padrino::Generators::Plugin</li> </ul>  </dd> </dl> <dl> <dt>Includes:</dt> <dd>\n<span class=\"object_link\"><a href=\"actions\" title=\"Padrino::Generators::Actions (module)\">Actions</a></span>, <span class=\"object_link\"><a href=\"runner\" title=\"Padrino::Generators::Runner (module)\">Runner</a></span>, Thor::Actions</dd> </dl>  </div> <h2>Overview</h2>  <p>Responsible for executing plugins instructions within a Padrino project.</p>    <h2>Constant Summary</h2> <dl class=\"constants\"> <dt id=\"PLUGIN_URL-constant\" class=\"\">PLUGIN_URL =   <p>Defines the default URL for official padrino recipe plugins.</p>    </dt> <dd><pre class=\"code\" data-language=\"ruby\">'https://github.com/padrino/padrino-recipes/tree/master/plugins'</pre></dd> </dl> <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"plugin#banner-class_method\" title=\"banner (class method)\">.<strong>banner</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"plugin#source_root-class_method\" title=\"source_root (class method)\">.<strong>source_root</strong> ⇒ Object</a></code>  </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"plugin#setup_plugin-instance_method\" title=\"#setup_plugin (instance method)\">#<strong>setup_plugin</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Create the Padrino Plugin. </span> </li> </ul> <h3 class=\"inherited\">Methods included from Runner</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"runner#app-instance_method\" title=\"Padrino::Generators::Runner#app (method)\">#app</a></span>, <span class=\"object_link\"><a href=\"runner#generate-instance_method\" title=\"Padrino::Generators::Runner#generate (method)\">#generate</a></span>, <span class=\"object_link\"><a href=\"runner#git-instance_method\" title=\"Padrino::Generators::Runner#git (method)\">#git</a></span>, <span class=\"object_link\"><a href=\"runner#project-instance_method\" title=\"Padrino::Generators::Runner#project (method)\">#project</a></span>, <span class=\"object_link\"><a href=\"runner#rake-instance_method\" title=\"Padrino::Generators::Runner#rake (method)\">#rake</a></span></p> <h3 class=\"inherited\">Methods included from Actions</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"actions#already_exists%3F-instance_method\" title=\"Padrino::Generators::Actions#already_exists? (method)\">#already_exists?</a></span>, <span class=\"object_link\"><a href=\"actions#app_skeleton-instance_method\" title=\"Padrino::Generators::Actions#app_skeleton (method)\">#app_skeleton</a></span>, <span class=\"object_link\"><a href=\"actions#apply_component_for-instance_method\" title=\"Padrino::Generators::Actions#apply_component_for (method)\">#apply_component_for</a></span>, <span class=\"object_link\"><a href=\"actions#apply_default_fields-instance_method\" title=\"Padrino::Generators::Actions#apply_default_fields (method)\">#apply_default_fields</a></span>, <span class=\"object_link\"><a href=\"actions#ask-instance_method\" title=\"Padrino::Generators::Actions#ask (method)\">#ask</a></span>, <span class=\"object_link\"><a href=\"actions#check_app_existence-instance_method\" title=\"Padrino::Generators::Actions#check_app_existence (method)\">#check_app_existence</a></span>, <span class=\"object_link\"><a href=\"actions#destination_root-instance_method\" title=\"Padrino::Generators::Actions#destination_root (method)\">#destination_root</a></span>, <span class=\"object_link\"><a href=\"actions#empty_directory_with_keep_file-instance_method\" title=\"Padrino::Generators::Actions#empty_directory_with_keep_file (method)\">#empty_directory_with_keep_file</a></span>, <span class=\"object_link\"><a href=\"actions#execute_component_setup-instance_method\" title=\"Padrino::Generators::Actions#execute_component_setup (method)\">#execute_component_setup</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_app_name-instance_method\" title=\"Padrino::Generators::Actions#fetch_app_name (method)\">#fetch_app_name</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_component_choice-instance_method\" title=\"Padrino::Generators::Actions#fetch_component_choice (method)\">#fetch_component_choice</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_project_name-instance_method\" title=\"Padrino::Generators::Actions#fetch_project_name (method)\">#fetch_project_name</a></span>, <span class=\"object_link\"><a href=\"actions#in_app_root%3F-instance_method\" title=\"Padrino::Generators::Actions#in_app_root? (method)\">#in_app_root?</a></span>, <span class=\"object_link\"><a href=\"actions#include_component_module_for-instance_method\" title=\"Padrino::Generators::Actions#include_component_module_for (method)\">#include_component_module_for</a></span>, <span class=\"object_link\"><a href=\"actions#initializer-instance_method\" title=\"Padrino::Generators::Actions#initializer (method)\">#initializer</a></span>, <span class=\"object_link\"><a href=\"actions#inject_into_file-instance_method\" title=\"Padrino::Generators::Actions#inject_into_file (method)\">#inject_into_file</a></span>, <span class=\"object_link\"><a href=\"actions#insert_hook-instance_method\" title=\"Padrino::Generators::Actions#insert_hook (method)\">#insert_hook</a></span>, <span class=\"object_link\"><a href=\"actions#insert_into_gemfile-instance_method\" title=\"Padrino::Generators::Actions#insert_into_gemfile (method)\">#insert_into_gemfile</a></span>, <span class=\"object_link\"><a href=\"actions#insert_middleware-instance_method\" title=\"Padrino::Generators::Actions#insert_middleware (method)\">#insert_middleware</a></span>, <span class=\"object_link\"><a href=\"actions#invalid_fields-instance_method\" title=\"Padrino::Generators::Actions#invalid_fields (method)\">#invalid_fields</a></span>, <span class=\"object_link\"><a href=\"actions#keep_file-instance_method\" title=\"Padrino::Generators::Actions#keep_file (method)\">#keep_file</a></span>, <span class=\"object_link\"><a href=\"actions#middleware-instance_method\" title=\"Padrino::Generators::Actions#middleware (method)\">#middleware</a></span>, <span class=\"object_link\"><a href=\"actions#recognize_path-instance_method\" title=\"Padrino::Generators::Actions#recognize_path (method)\">#recognize_path</a></span>, <span class=\"object_link\"><a href=\"actions#require_contrib-instance_method\" title=\"Padrino::Generators::Actions#require_contrib (method)\">#require_contrib</a></span>, <span class=\"object_link\"><a href=\"actions#require_dependencies-instance_method\" title=\"Padrino::Generators::Actions#require_dependencies (method)\">#require_dependencies</a></span>, <span class=\"object_link\"><a href=\"actions#resolve_valid_choice-instance_method\" title=\"Padrino::Generators::Actions#resolve_valid_choice (method)\">#resolve_valid_choice</a></span>, <span class=\"object_link\"><a href=\"actions#retrieve_component_config-instance_method\" title=\"Padrino::Generators::Actions#retrieve_component_config (method)\">#retrieve_component_config</a></span>, <span class=\"object_link\"><a href=\"actions#run_bundler-instance_method\" title=\"Padrino::Generators::Actions#run_bundler (method)\">#run_bundler</a></span>, <span class=\"object_link\"><a href=\"actions#store_component_choice-instance_method\" title=\"Padrino::Generators::Actions#store_component_choice (method)\">#store_component_choice</a></span>, <span class=\"object_link\"><a href=\"actions#store_component_config-instance_method\" title=\"Padrino::Generators::Actions#store_component_config (method)\">#store_component_config</a></span>, <span class=\"object_link\"><a href=\"actions#test%3F-instance_method\" title=\"Padrino::Generators::Actions#test? (method)\">#test?</a></span>, <span class=\"object_link\"><a href=\"actions#tiny%3F-instance_method\" title=\"Padrino::Generators::Actions#tiny? (method)\">#tiny?</a></span>, <span class=\"object_link\"><a href=\"actions#valid_choice%3F-instance_method\" title=\"Padrino::Generators::Actions#valid_choice? (method)\">#valid_choice?</a></span>, <span class=\"object_link\"><a href=\"actions#valid_constant%3F-instance_method\" title=\"Padrino::Generators::Actions#valid_constant? (method)\">#valid_constant?</a></span>, <span class=\"object_link\"><a href=\"actions#validate_namespace-instance_method\" title=\"Padrino::Generators::Actions#validate_namespace (method)\">#validate_namespace</a></span></p>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"banner-class_method\"> .banner ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"source_root-class_method\"> .source_root ⇒ Object </h3>  </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"setup_plugin-instance_method\"> #setup_plugin ⇒ Object </h3>   <p>Create the Padrino Plugin.</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Plugin\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Plugin</a>\n  </p>\n</div>\n","padrino/logger/rack":"<h1>Class: Padrino::Logger::Rack </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Object</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Padrino::Logger::Rack</li> </ul>  </dd> </dl>  </div> <h2>Overview</h2>  <p>Padrino::Logger::Rack forwards every request to an <code>app</code> given, and logs a line in the Apache common log format to the <code>logger</code>, or rack.errors by default.</p>    <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"rack#call-instance_method\" title=\"#call (instance method)\">#<strong>call</strong>(env) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"rack#initialize-instance_method\" title=\"#initialize (instance method)\">#<strong>initialize</strong>(app, uri_root) ⇒ Rack</a></code> <span class=\"note title constructor\">constructor</span> <span class=\"summary_desc\"> A new instance of Rack. </span> </li> </ul>  <h2>Constructor Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"initialize-instance_method\"> #initialize(app, uri_root) ⇒ Rack </h3>   <p>Returns a new instance of Rack</p>    </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"call-instance_method\"> #call(env) ⇒ Object </h3>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Logger/Rack\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Logger/Rack</a>\n  </p>\n</div>\n","padrino/reloader/rack":"<h1>Class: Padrino::Reloader::Rack </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Object</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Padrino::Reloader::Rack</li> </ul>  </dd> </dl>  </div> <h2>Overview</h2>  <p>This class acts as a Rack middleware to be added to the application stack. This middleware performs a check and reload for source files at the start of each request, but also respects a specified cool down time during which no further action will be taken.</p>    <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"rack#call-instance_method\" title=\"#call (instance method)\">#<strong>call</strong>(env) ⇒ Object</a></code> <span class=\"summary_desc\"> Invoked in order to perform the reload as part of the request stack. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"rack#initialize-instance_method\" title=\"#initialize (instance method)\">#<strong>initialize</strong>(app, cooldown = 1) ⇒ Rack</a></code> <span class=\"note title constructor\">constructor</span> <span class=\"summary_desc\"> A new instance of Rack. </span> </li> </ul>  <h2>Constructor Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"initialize-instance_method\"> #initialize(app, cooldown = 1) ⇒ Rack </h3>   <p>Returns a new instance of Rack</p>    </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"call-instance_method\"> #call(env) ⇒ Object </h3>   <p>Invoked in order to perform the reload as part of the request stack.</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Reloader/Rack\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Reloader/Rack</a>\n  </p>\n</div>\n","padrino/helpers/numberhelpers":"<h1>Module: Padrino::Helpers::NumberHelpers </h1>  <h2>Overview</h2>  <p>Provides methods for converting numbers into formatted strings. Methods are provided for phone numbers, currency, percentage, precision, positional notation, and file size.</p> <p>Adapted from Rails Number Helpers.</p>    <h2>Constant Summary</h2> <dl class=\"constants\"> <dt id=\"STORAGE_UNITS-constant\" class=\"\">STORAGE_UNITS =   <p>The units available for storage formatting.</p>    </dt> <dd><pre class=\"code\" data-language=\"ruby\">[:byte, :kb, :mb, :gb, :tb].freeze</pre></dd> </dl> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"numberhelpers#number_to_currency-instance_method\" title=\"#number_to_currency (instance method)\">#<strong>number_to_currency</strong>(number, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Formats a <code>number</code> into a currency string (e.g., $13.65). </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"numberhelpers#number_to_human_size-instance_method\" title=\"#number_to_human_size (instance method)\">#<strong>number_to_human_size</strong>(number, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Formats the bytes in <code>size</code> into a more understandable representation (e.g., giving it 1500 yields 1.5 KB). </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"numberhelpers#number_to_percentage-instance_method\" title=\"#number_to_percentage (instance method)\">#<strong>number_to_percentage</strong>(number, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Formats a <code>number</code> as a percentage string (e.g., 65%). </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"numberhelpers#number_with_delimiter-instance_method\" title=\"#number_with_delimiter (instance method)\">#<strong>number_with_delimiter</strong>(number, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Formats a <code>number</code> with grouped thousands using <code>delimiter</code> (e.g., 12,324). </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"numberhelpers#number_with_precision-instance_method\" title=\"#number_with_precision (instance method)\">#<strong>number_with_precision</strong>(number, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Formats a <code>number</code> with the specified level of :precision (e.g., 112.32 has a precision of 2). </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"number_to_currency-instance_method\"> #number_to_currency(number, options = {}) ⇒ String </h3>   <p>Formats a <code>number</code> into a currency string (e.g., $13.65). You can customize the format in the <code>options</code> hash.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">number_to_currency(1234567890.50)                    # =&gt; $1,234,567,890.50\nnumber_to_currency(1234567890.506)                   # =&gt; $1,234,567,890.51\nnumber_to_currency(1234567890.506, :precision =&gt; 3)  # =&gt; $1,234,567,890.506\nnumber_to_currency(1234567890.50, :unit =&gt; \"&amp;pound;\", :separator =&gt; \",\", :delimiter =&gt; \"\")\n# =&gt; &amp;pound;1234567890,50\nnumber_to_currency(1234567890.50, :unit =&gt; \"&amp;pound;\", :separator =&gt; \",\", :delimiter =&gt; \"\", :format =&gt; \"%n %u\")\n# =&gt; 1234567890,50 &amp;pound;</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">number</code> <span class=\"type\">(<code>Float</code>)</span> —  Currency value to format.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  Options for currency conversion.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:precision</code> <span class=\"type\">(<code>Fixnum</code>)</span> <span class=\"default\"> — default: <code>2</code> </span> —  Sets the level of precision.  </li> <li> <code class=\"name\">:unit</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <span class=\"default\"> — default: <code>\"$\"</code> </span> —  Sets the denomination of the currency.  </li> <li> <code class=\"name\">:separator</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <span class=\"default\"> — default: <code>\".\"</code> </span> —  Sets the separator between the units.  </li> <li> <code class=\"name\">:delimiter</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <span class=\"default\"> — default: <code>\",\"</code> </span> —  Sets the thousands delimiter.  </li> <li> <code class=\"name\">:format</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <span class=\"default\"> — default: <code>\"%u%n\"</code> </span> —  Sets the format of the output string. The field types are: <pre class=\"code ruby\" data-language=\"ruby\">%u  The currency unit\n%n  The number</pre>  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The formatted representation of the currency.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"number_to_human_size-instance_method\"> #number_to_human_size(number, options = {}) ⇒ String </h3>   <p>Formats the bytes in <code>size</code> into a more understandable representation (e.g., giving it 1500 yields 1.5 KB). This method is useful for reporting file sizes to users. This method returns nil if <code>size</code> cannot be converted into a number. You can customize the format in the <code>options</code> hash.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">number_to_human_size(123)                                          # =&gt; 123 Bytes\nnumber_to_human_size(1234)                                         # =&gt; 1.2 KB\nnumber_to_human_size(12345)                                        # =&gt; 12.1 KB\nnumber_to_human_size(1234567)                                      # =&gt; 1.2 MB\nnumber_to_human_size(1234567890)                                   # =&gt; 1.1 GB\nnumber_to_human_size(1234567890123)                                # =&gt; 1.1 TB\nnumber_to_human_size(1234567, :precision =&gt; 2)                     # =&gt; 1.18 MB\nnumber_to_human_size(483989, :precision =&gt; 0)                      # =&gt; 473 KB\nnumber_to_human_size(1234567, :precision =&gt; 2, :separator =&gt; ',')  # =&gt; 1,18 MB</pre> </div>     <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">number</code> <span class=\"type\">(<code>Fixnum</code>)</span> —  Number value to format.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  Options for formatter.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:precision</code> <span class=\"type\">(<code>Fixnum</code>)</span> <span class=\"default\"> — default: <code>1</code> </span> —  Sets the level of precision.  </li> <li> <code class=\"name\">:separator</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <span class=\"default\"> — default: <code>\".\"</code> </span> —  Sets the separator between the units.  </li> <li> <code class=\"name\">:delimiter</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <span class=\"default\"> — default: <code>\"\"</code> </span> —  Sets the thousands delimiter.  </li> </ul> </div> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The formatted representation of bytes  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"number_to_percentage-instance_method\"> #number_to_percentage(number, options = {}) ⇒ String </h3>   <p>Formats a <code>number</code> as a percentage string (e.g., 65%). You can customize the format in the <code>options</code> hash.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">number_to_percentage(100)                                        # =&gt; 100.000%\nnumber_to_percentage(100, :precision =&gt; 0)                       # =&gt; 100%\nnumber_to_percentage(1000, :delimiter =&gt; '.', :separator =&gt; ',') # =&gt; 1.000,000%\nnumber_to_percentage(302.24398923423, :precision =&gt; 5)           # =&gt; 302.24399%</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">number</code> <span class=\"type\">(<code>Fixnum</code>, <code>Float</code>)</span> —  Percentage value to format.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  Options for percentage conversion.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:precision</code> <span class=\"type\">(<code>Fixnum</code>)</span> <span class=\"default\"> — default: <code>3</code> </span> —  Sets the level of precision.  </li> <li> <code class=\"name\">:separator</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <span class=\"default\"> — default: <code>\".\"</code> </span> —  Sets the separator between the units.  </li> <li> <code class=\"name\">:delimiter</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <span class=\"default\"> — default: <code>\"\"</code> </span> —  Sets the thousands delimiter.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The formatted representation of the percentage  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"number_with_delimiter-instance_method\"> #number_with_delimiter(number, options = {}) ⇒ String </h3>   <p>Formats a <code>number</code> with grouped thousands using <code>delimiter</code> (e.g., 12,324). You can customize the format in the <code>options</code> hash.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">number_with_delimiter(12345678)                        # =&gt; 12,345,678\nnumber_with_delimiter(12345678.05)                     # =&gt; 12,345,678.05\nnumber_with_delimiter(12345678, :delimiter =&gt; \".\")     # =&gt; 12.345.678\nnumber_with_delimiter(12345678, :separator =&gt; \",\")     # =&gt; 12,345,678\nnumber_with_delimiter(98765432.98, :delimiter =&gt; \" \", :separator =&gt; \",\")\n# =&gt; 98 765 432,98</pre> </div>     <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">number</code> <span class=\"type\">(<code>Fixnum</code>, <code>Float</code>)</span> —  Number value to format.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  Options for formatter.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:delimiter</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <span class=\"default\"> — default: <code>\", \"</code> </span> —  Sets the thousands delimiter.  </li> <li> <code class=\"name\">:separator</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <span class=\"default\"> — default: <code>\".\"</code> </span> —  Sets the separator between the units.  </li> </ul> </div> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The formatted representation of the number.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"number_with_precision-instance_method\"> #number_with_precision(number, options = {}) ⇒ String </h3>   <p>Formats a <code>number</code> with the specified level of <code>:precision</code> (e.g., 112.32 has a precision of 2). You can customize the format in the <code>options</code> hash.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">number_with_precision(111.2345)                    # =&gt; 111.235\nnumber_with_precision(111.2345, :precision =&gt; 2)   # =&gt; 111.23\nnumber_with_precision(13, :precision =&gt; 5)         # =&gt; 13.00000\nnumber_with_precision(389.32314, :precision =&gt; 0)  # =&gt; 389\nnumber_with_precision(1111.2345, :precision =&gt; 2, :separator =&gt; ',', :delimiter =&gt; '.')\n# =&gt; 1.111,23</pre> </div>     <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">number</code> <span class=\"type\">(<code>Fixnum</code>, <code>Float</code>)</span> —  Number value to format.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  Options for formatter.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:precision</code> <span class=\"type\">(<code>Fixnum</code>)</span> <span class=\"default\"> — default: <code>3</code> </span> —  Sets the level of precision.  </li> <li> <code class=\"name\">:separator</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <span class=\"default\"> — default: <code>\".\"</code> </span> —  Sets the separator between the units.  </li> <li> <code class=\"name\">:delimiter</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <span class=\"default\"> — default: <code>\"\"</code> </span> —  Sets the thousands delimiter.  </li> </ul> </div> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The formatted representation of the number.  </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/NumberHelpers\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/NumberHelpers</a>\n  </p>\n</div>\n","padrino/admin/accesscontrol/projectmodule":"<h1>Class: Padrino::Admin::AccessControl::ProjectModule </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Object</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Padrino::Admin::AccessControl::ProjectModule</li> </ul>  </dd> </dl>  </div> <h2>Overview</h2>  <p>Project Module class.</p>    <h2>Instance Attribute Summary \n</h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"projectmodule#name-instance_method\" title=\"#name (instance method)\">#<strong>name</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute name. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"projectmodule#options-instance_method\" title=\"#options (instance method)\">#<strong>options</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute options. </span> </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"projectmodule#human_name-instance_method\" title=\"#human_name (instance method)\">#<strong>human_name</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the name of the project module humanize them for you. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"projectmodule#initialize-instance_method\" title=\"#initialize (instance method)\">#<strong>initialize</strong>(name, path, options = {}) ⇒ ProjectModule</a></code> <span class=\"note title constructor\">constructor</span> <span class=\"summary_desc\"> A new instance of ProjectModule. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"projectmodule#path-instance_method\" title=\"#path (instance method)\">#<strong>path</strong>(prefix = nil) ⇒ Object</a></code> <span class=\"summary_desc\"> Return the path of the project module. </span> </li> </ul>  <h2>Constructor Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"initialize-instance_method\"> #initialize(name, path, options = {}) ⇒ ProjectModule </h3>   <p>Returns a new instance of ProjectModule</p>    </div>   <h2>Instance Attribute Details</h2>  <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"name-instance_method\"> #name ⇒ Object (readonly) </h3>   <p>Returns the value of attribute name</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"options-instance_method\"> #options ⇒ Object (readonly) </h3>   <p>Returns the value of attribute options</p>    </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"human_name-instance_method\"> #human_name ⇒ Object </h3>   <p>Returns the name of the project module humanize them for you.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"path-instance_method\"> #path(prefix = nil) ⇒ Object </h3>   <p>Return the path of the project module. If a prefix given will be pre pended.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\"># =&gt; /accounts/new\nproject_module.path\n# =&gt; /admin/accounts\nproject_module.path(\"/admin\")</pre> </div> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/AccessControl/ProjectModule\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/AccessControl/ProjectModule</a>\n  </p>\n</div>\n","padrino/helpers/renderhelpers":"<h1>Module: Padrino::Helpers::RenderHelpers </h1>  <h2>Overview</h2>  <p>Helpers related to rendering within templates (i.e partials).</p>    <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"renderhelpers#partial-instance_method\" title=\"#partial (instance method)\">#<strong>partial</strong>(template, options = {}, &amp;block) ⇒ String</a> (also: #render_partial)</code> <span class=\"summary_desc\"> Render a partials with collections support. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"partial-instance_method\"> #partial(template, options = {}, &amp;block) ⇒ String Also known as: render_partial  </h3>   <div class=\"note notetag\"> <strong>Note:</strong>  If using this from Sinatra, pass explicit <code>:engine</code> option  </div> <p>Render a partials with collections support.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">partial 'photo/item', :object =&gt; @photo\npartial 'photo/item', :collection =&gt; @photos\npartial 'photo/item', :locals =&gt; { :foo =&gt; :bar }\npartial 'photo/item', :engine =&gt; :erb</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">template</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Relative path to partial template.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  Options hash for rendering options.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:object</code> <span class=\"type\">(<code>Object</code>)</span>  —  Object rendered in partial.  </li> <li> <code class=\"name\">:collection</code> <span class=\"type\">(<code>Array&lt;Object&gt;</code>)</span>  —  Partial is rendered for each object in this collection.  </li> <li> <code class=\"name\">:locals</code> <span class=\"type\">(<code>Hash</code>)</span> <span class=\"default\"> — default: <code>{}</code> </span> —  Local variables accessible in the partial.  </li> <li> <code class=\"name\">:engine</code> <span class=\"type\">(<code>Symbol</code>)</span>  —  Explicit rendering engine to use for this partial.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The html generated from this partial.  </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/RenderHelpers\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/RenderHelpers</a>\n  </p>\n</div>\n","padrino/rendering":"<h1>Module: Padrino::Rendering </h1>  <h2>Overview</h2>  <p>Padrino enhances the Sinatra 'render' method to have support for automatic template engine detection, enhanced layout functionality, locale enabled rendering, among other features.</p>   \n<h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"modules\">Modules:</strong> <span class=\"object_link\"><a href=\"rendering/classmethods\" title=\"Padrino::Rendering::ClassMethods (module)\">ClassMethods</a></span>, <span class=\"object_link\"><a href=\"rendering/instancemethods\" title=\"Padrino::Rendering::InstanceMethods (module)\">InstanceMethods</a></span>, <span class=\"object_link\"><a href=\"rendering/safebufferenhancer\" title=\"Padrino::Rendering::SafeBufferEnhancer (module)\">SafeBufferEnhancer</a></span>, <span class=\"object_link\"><a href=\"rendering/safetemplate\" title=\"Padrino::Rendering::SafeTemplate (module)\">SafeTemplate</a></span> <strong class=\"classes\">Classes:</strong> <span class=\"object_link\"><a href=\"rendering/erbtemplate\" title=\"Padrino::Rendering::ERBTemplate (class)\">ERBTemplate</a></span>, <span class=\"object_link\"><a href=\"rendering/erubistemplate\" title=\"Padrino::Rendering::ErubisTemplate (class)\">ErubisTemplate</a></span>, <span class=\"object_link\"><a href=\"rendering/hamltemplate\" title=\"Padrino::Rendering::HamlTemplate (class)\">HamlTemplate</a></span>, <span class=\"object_link\"><a href=\"rendering/safeerb\" title=\"Padrino::Rendering::SafeERB (class)\">SafeERB</a></span>, <span class=\"object_link\"><a href=\"rendering/safeeruby\" title=\"Padrino::Rendering::SafeEruby (class)\">SafeEruby</a></span>, <span class=\"object_link\"><a href=\"rendering/slimtemplate\" title=\"Padrino::Rendering::SlimTemplate (class)\">SlimTemplate</a></span>, <span class=\"object_link\"><a href=\"rendering/templatenotfound\" title=\"Padrino::Rendering::TemplateNotFound (class)\">TemplateNotFound</a></span> </p> <h2>Constant Summary</h2> <dl class=\"constants\"> <dt id=\"IGNORE_FILE_PATTERN-constant\" class=\"\">IGNORE_FILE_PATTERN = </dt> <dd><pre class=\"code\" data-language=\"ruby\">[\n  /~$/ # This is for Gedit\n]</pre></dd> <dt id=\"CONTENT_TYPE_ALIASES-constant\" class=\"\">CONTENT_TYPE_ALIASES =   <p>Defines common content-type alias mappings.</p>    </dt> <dd><pre class=\"code\" data-language=\"ruby\">{ :htm =&gt; :html }</pre></dd> <dt id=\"DEFAULT_RENDERING_OPTIONS-constant\" class=\"\">DEFAULT_RENDERING_OPTIONS = </dt> <dd><pre class=\"code\" data-language=\"ruby\">{ :strict_format =&gt; false, :raise_exceptions =&gt; true }</pre></dd> </dl> <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"rendering#engine_configurations-class_method\" title=\"engine_configurations (class method)\">.<strong>engine_configurations</strong> ⇒ Hash&lt;Symbol,Hash&gt;</a></code> <span class=\"summary_desc\"> Default engine configurations for Padrino::Rendering. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"rendering#registered-class_method\" title=\"registered (class method)\">.<strong>registered</strong>(app) ⇒ Object</a></code>  </li> </ul>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"engine_configurations-class_method\"> .engine_configurations ⇒ Hash&lt;Symbol,Hash&gt; </h3>   <p>Default engine configurations for Padrino::Rendering.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Hash&lt;Symbol,Hash&gt;</code>)</span> —  The configurations, keyed by engine.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"registered-class_method\"> .registered(app) ⇒ Object </h3>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering</a>\n  </p>\n</div>\n","sinatra/request":"<h1>Class: Sinatra::Request </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Object</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Sinatra::Request</li> </ul>  </dd> </dl>  </div> <h2>Overview</h2>  <p>Adds to Sinatra <code>controller</code> informations</p>    <h2>Instance Attribute Summary \n</h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"request#route_obj-instance_method\" title=\"#route_obj (instance method)\">#<strong>route_obj</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the value of attribute route_obj. </span> </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"request#action-instance_method\" title=\"#action (instance method)\">#<strong>action</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"request#controller-instance_method\" title=\"#controller (instance method)\">#<strong>controller</strong> ⇒ Object</a></code>  </li> </ul>  <h2>Instance Attribute Details</h2>  <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"route_obj-instance_method\"> #route_obj ⇒ Object </h3>   <p>Returns the value of attribute route_obj</p>    </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"action-instance_method\"> #action ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"controller-instance_method\"> #controller ⇒ Object </h3>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Sinatra/Request\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Sinatra/Request</a>\n  </p>\n</div>\n","padrino/routing":"<h1>Module: Padrino::Routing </h1>  <h2>Overview</h2>  <p>Padrino provides advanced routing definition support to make routes and url generation much easier. This routing system supports named route aliases and easy access to url paths. The benefits of this is that instead of having to hard-code route urls into every area of your application, now we can just define the urls in a single spot and then attach an alias which can be used to refer to the url throughout the application.</p>   \n<h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"modules\">Modules:</strong> <span class=\"object_link\"><a href=\"routing/classmethods\" title=\"Padrino::Routing::ClassMethods (module)\">ClassMethods</a></span>, <span class=\"object_link\"><a href=\"routing/instancemethods\" title=\"Padrino::Routing::InstanceMethods (module)\">InstanceMethods</a></span> <strong class=\"classes\">Classes:</strong> <span class=\"object_link\"><a href=\"routing/blockarityerror\" title=\"Padrino::Routing::BlockArityError (class)\">BlockArityError</a></span>, <span class=\"object_link\"><a href=\"routing/parent\" title=\"Padrino::Routing::Parent (class)\">Parent</a></span>, <span class=\"object_link\"><a href=\"routing/unrecognizedexception\" title=\"Padrino::Routing::UnrecognizedException (class)\">UnrecognizedException</a></span> </p> <h2>Constant Summary</h2> <dl class=\"constants\"> <dt id=\"CONTENT_TYPE_ALIASES-constant\" class=\"\">CONTENT_TYPE_ALIASES = </dt> <dd><pre class=\"code\" data-language=\"ruby\">{ :htm =&gt; :html }</pre></dd> <dt id=\"ROUTE_PRIORITY-constant\" class=\"\">ROUTE_PRIORITY = </dt> <dd><pre class=\"code\" data-language=\"ruby\">{:high =&gt; 0, :normal =&gt; 1, :low =&gt; 2}</pre></dd> </dl> <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"routing#registered-class_method\" title=\"registered (class method)\">.<strong>registered</strong>(app) ⇒ Object</a> (also: included)</code> <span class=\"summary_desc\"> Main class that register this extension. </span> </li> </ul>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"registered-class_method\"> .registered(app) ⇒ Object Also known as: included  </h3>   <p>Main class that register this extension.</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing</a>\n  </p>\n</div>\n","padrino/admin/generators/orm":"<h1>Class: Padrino::Admin::Generators::Orm </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Object</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Padrino::Admin::Generators::Orm</li> </ul>  </dd> </dl>  </div> <h2>Overview</h2>  <p>Defines the generic ORM management functions used to manipulate data for admin.</p>   \n<h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"classes\">Classes:</strong> <span class=\"object_link\"><a href=\"orm/column\" title=\"Padrino::Admin::Generators::Orm::Column (class)\">Column</a></span> </p> <h2>Instance Attribute Summary \n</h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"orm#klass-instance_method\" title=\"#klass (instance method)\">#<strong>klass</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute klass. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"orm#klass_name-instance_method\" title=\"#klass_name (instance method)\">#<strong>klass_name</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute klass_name. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"orm#name_param-instance_method\" title=\"#name_param (instance method)\">#<strong>name_param</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute name_param. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"orm#name_plural-instance_method\" title=\"#name_plural (instance method)\">#<strong>name_plural</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute name_plural. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"orm#name_singular-instance_method\" title=\"#name_singular (instance method)\">#<strong>name_singular</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute name_singular. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"orm#orm-instance_method\" title=\"#orm (instance method)\">#<strong>orm</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute orm. </span> </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"orm#activerecord%3F-instance_method\" title=\"#activerecord? (instance method)\">#<strong>activerecord?</strong> ⇒ Boolean</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"orm#all-instance_method\" title=\"#all (instance method)\">#<strong>all</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"orm#build-instance_method\" title=\"#build (instance method)\">#<strong>build</strong>(params = nil) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"orm#column_fields-instance_method\" title=\"#column_fields (instance method)\">#<strong>column_fields</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"orm#columns-instance_method\" title=\"#columns (instance method)\">#<strong>columns</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"orm#destroy-instance_method\" title=\"#destroy (instance method)\">#<strong>destroy</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"orm#dm_column-instance_method\" title=\"#dm_column (instance method)\">#<strong>dm_column</strong>(p) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"orm#field_type-instance_method\" title=\"#field_type (instance method)\">#<strong>field_type</strong>(type) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"orm#find-instance_method\" title=\"#find (instance method)\">#<strong>find</strong>(params = nil) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"orm#find_by_ids-instance_method\" title=\"#find_by_ids (instance method)\">#<strong>find_by_ids</strong>(params = nil) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"orm#has_error-instance_method\" title=\"#has_error (instance method)\">#<strong>has_error</strong>(field) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"orm#initialize-instance_method\" title=\"#initialize (instance method)\">#<strong>initialize</strong>(name, orm, columns = nil, column_fields = nil) ⇒ Orm</a></code> <span class=\"note title constructor\">constructor</span> <span class=\"summary_desc\"> A new instance of Orm. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"orm#multiple_destroy-instance_method\" title=\"#multiple_destroy (instance method)\">#<strong>multiple_destroy</strong>(params = nil) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"orm#save-instance_method\" title=\"#save (instance method)\">#<strong>save</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"orm#update_attributes-instance_method\" title=\"#update_attributes (instance method)\">#<strong>update_attributes</strong>(params = nil) ⇒ Object</a></code>  </li> </ul>  <h2>Constructor Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"initialize-instance_method\"> #initialize(name, orm, columns = nil, column_fields = nil) ⇒ Orm </h3>   <p>Returns a new instance of Orm</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Raises:</h4> <ul class=\"raise\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"ormerror\" title=\"Padrino::Admin::Generators::OrmError (class)\">OrmError</a></span></code>)</span> </li> </ul> </div> </div>   <h2>Instance Attribute Details</h2>  <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"klass-instance_method\"> #klass ⇒ Object (readonly) </h3>   <p>Returns the value of attribute klass</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"klass_name-instance_method\"> #klass_name ⇒ Object (readonly) </h3>   <p>Returns the value of attribute klass_name</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"name_param-instance_method\"> #name_param ⇒ Object (readonly) </h3>   <p>Returns the value of attribute name_param</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"name_plural-instance_method\"> #name_plural ⇒ Object (readonly) </h3>   <p>Returns the value of attribute name_plural</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"name_singular-instance_method\"> #name_singular ⇒ Object (readonly) </h3>   <p>Returns the value of attribute name_singular</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"orm-instance_method\"> #orm ⇒ Object (readonly) </h3>   <p>Returns the value of attribute orm</p>    </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"activerecord?-instance_method\"> #activerecord? ⇒ Boolean </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"all-instance_method\"> #all ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"build-instance_method\"> #build(params = nil) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"column_fields-instance_method\"> #column_fields ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"columns-instance_method\"> #columns ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"destroy-instance_method\"> #destroy ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"dm_column-instance_method\"> #dm_column(p) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"field_type-instance_method\"> #field_type(type) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"find-instance_method\"> #find(params = nil) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"find_by_ids-instance_method\"> #find_by_ids(params = nil) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"has_error-instance_method\"> #has_error(field) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"multiple_destroy-instance_method\"> #multiple_destroy(params = nil) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"save-instance_method\"> #save ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"update_attributes-instance_method\"> #update_attributes(params = nil) ⇒ Object </h3>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Generators/Orm\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Generators/Orm</a>\n  </p>\n</div>\n","padrino/generators/project":"<h1>Class: Padrino::Generators::Project </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Thor::Group</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Thor::Group</li> <li class=\"next\">Padrino::Generators::Project</li> </ul>  </dd> </dl> <dl> <dt>Includes:</dt> <dd>\n<span class=\"object_link\"><a href=\"actions\" title=\"Padrino::Generators::Actions (module)\">Actions</a></span>, Components::Actions, <span class=\"object_link\"><a href=\"runner\" title=\"Padrino::Generators::Runner (module)\">Runner</a></span>, Thor::Actions</dd> </dl>  </div> <h2>Overview</h2>  <p>Responsible for generating new Padrino projects based on the specified project components.</p>    <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"project#banner-class_method\" title=\"banner (class method)\">.<strong>banner</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"project#source_root-class_method\" title=\"source_root (class method)\">.<strong>source_root</strong> ⇒ Object</a></code>  </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"project#bundle_dependencies-instance_method\" title=\"#bundle_dependencies (instance method)\">#<strong>bundle_dependencies</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Bundle all required components using bundler and Gemfile. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"project#finish_message-instance_method\" title=\"#finish_message (instance method)\">#<strong>finish_message</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Finish message. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"project#git_author_email-instance_method\" title=\"#git_author_email (instance method)\">#<strong>git_author_email</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the git author email config or a fill-in value. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"project#git_author_name-instance_method\" title=\"#git_author_name (instance method)\">#<strong>git_author_name</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the git author name config or a fill-in value. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"project#setup_components-instance_method\" title=\"#setup_components (instance method)\">#<strong>setup_components</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> For each component, retrieve a valid choice and then execute the associated generator. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"project#setup_project-instance_method\" title=\"#setup_project (instance method)\">#<strong>setup_project</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Copies over the Padrino base application app. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"project#setup_test_files-instance_method\" title=\"#setup_test_files (instance method)\">#<strong>setup_test_files</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Generates test files for tiny app skeleton. </span> </li> </ul> <h3 class=\"inherited\">Methods included from Runner</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"runner#app-instance_method\" title=\"Padrino::Generators::Runner#app (method)\">#app</a></span>, <span class=\"object_link\"><a href=\"runner#generate-instance_method\" title=\"Padrino::Generators::Runner#generate (method)\">#generate</a></span>, <span class=\"object_link\"><a href=\"runner#git-instance_method\" title=\"Padrino::Generators::Runner#git (method)\">#git</a></span>, <span class=\"object_link\"><a href=\"runner#project-instance_method\" title=\"Padrino::Generators::Runner#project (method)\">#project</a></span>, <span class=\"object_link\"><a href=\"runner#rake-instance_method\" title=\"Padrino::Generators::Runner#rake (method)\">#rake</a></span></p> <h3 class=\"inherited\">Methods included from Actions</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"actions#already_exists%3F-instance_method\" title=\"Padrino::Generators::Actions#already_exists? (method)\">#already_exists?</a></span>, <span class=\"object_link\"><a href=\"actions#app_skeleton-instance_method\" title=\"Padrino::Generators::Actions#app_skeleton (method)\">#app_skeleton</a></span>, <span class=\"object_link\"><a href=\"actions#apply_component_for-instance_method\" title=\"Padrino::Generators::Actions#apply_component_for (method)\">#apply_component_for</a></span>, <span class=\"object_link\"><a href=\"actions#apply_default_fields-instance_method\" title=\"Padrino::Generators::Actions#apply_default_fields (method)\">#apply_default_fields</a></span>, <span class=\"object_link\"><a href=\"actions#ask-instance_method\" title=\"Padrino::Generators::Actions#ask (method)\">#ask</a></span>, <span class=\"object_link\"><a href=\"actions#check_app_existence-instance_method\" title=\"Padrino::Generators::Actions#check_app_existence (method)\">#check_app_existence</a></span>, <span class=\"object_link\"><a href=\"actions#destination_root-instance_method\" title=\"Padrino::Generators::Actions#destination_root (method)\">#destination_root</a></span>, <span class=\"object_link\"><a href=\"actions#empty_directory_with_keep_file-instance_method\" title=\"Padrino::Generators::Actions#empty_directory_with_keep_file (method)\">#empty_directory_with_keep_file</a></span>, <span class=\"object_link\"><a href=\"actions#execute_component_setup-instance_method\" title=\"Padrino::Generators::Actions#execute_component_setup (method)\">#execute_component_setup</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_app_name-instance_method\" title=\"Padrino::Generators::Actions#fetch_app_name (method)\">#fetch_app_name</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_component_choice-instance_method\" title=\"Padrino::Generators::Actions#fetch_component_choice (method)\">#fetch_component_choice</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_project_name-instance_method\" title=\"Padrino::Generators::Actions#fetch_project_name (method)\">#fetch_project_name</a></span>, <span class=\"object_link\"><a href=\"actions#in_app_root%3F-instance_method\" title=\"Padrino::Generators::Actions#in_app_root? (method)\">#in_app_root?</a></span>, <span class=\"object_link\"><a href=\"actions#include_component_module_for-instance_method\" title=\"Padrino::Generators::Actions#include_component_module_for (method)\">#include_component_module_for</a></span>, <span class=\"object_link\"><a href=\"actions#initializer-instance_method\" title=\"Padrino::Generators::Actions#initializer (method)\">#initializer</a></span>, <span class=\"object_link\"><a href=\"actions#inject_into_file-instance_method\" title=\"Padrino::Generators::Actions#inject_into_file (method)\">#inject_into_file</a></span>, <span class=\"object_link\"><a href=\"actions#insert_hook-instance_method\" title=\"Padrino::Generators::Actions#insert_hook (method)\">#insert_hook</a></span>, <span class=\"object_link\"><a href=\"actions#insert_into_gemfile-instance_method\" title=\"Padrino::Generators::Actions#insert_into_gemfile (method)\">#insert_into_gemfile</a></span>, <span class=\"object_link\"><a href=\"actions#insert_middleware-instance_method\" title=\"Padrino::Generators::Actions#insert_middleware (method)\">#insert_middleware</a></span>, <span class=\"object_link\"><a href=\"actions#invalid_fields-instance_method\" title=\"Padrino::Generators::Actions#invalid_fields (method)\">#invalid_fields</a></span>, <span class=\"object_link\"><a href=\"actions#keep_file-instance_method\" title=\"Padrino::Generators::Actions#keep_file (method)\">#keep_file</a></span>, <span class=\"object_link\"><a href=\"actions#middleware-instance_method\" title=\"Padrino::Generators::Actions#middleware (method)\">#middleware</a></span>, <span class=\"object_link\"><a href=\"actions#recognize_path-instance_method\" title=\"Padrino::Generators::Actions#recognize_path (method)\">#recognize_path</a></span>, <span class=\"object_link\"><a href=\"actions#require_contrib-instance_method\" title=\"Padrino::Generators::Actions#require_contrib (method)\">#require_contrib</a></span>, <span class=\"object_link\"><a href=\"actions#require_dependencies-instance_method\" title=\"Padrino::Generators::Actions#require_dependencies (method)\">#require_dependencies</a></span>, <span class=\"object_link\"><a href=\"actions#resolve_valid_choice-instance_method\" title=\"Padrino::Generators::Actions#resolve_valid_choice (method)\">#resolve_valid_choice</a></span>, <span class=\"object_link\"><a href=\"actions#retrieve_component_config-instance_method\" title=\"Padrino::Generators::Actions#retrieve_component_config (method)\">#retrieve_component_config</a></span>, <span class=\"object_link\"><a href=\"actions#run_bundler-instance_method\" title=\"Padrino::Generators::Actions#run_bundler (method)\">#run_bundler</a></span>, <span class=\"object_link\"><a href=\"actions#store_component_choice-instance_method\" title=\"Padrino::Generators::Actions#store_component_choice (method)\">#store_component_choice</a></span>, <span class=\"object_link\"><a href=\"actions#store_component_config-instance_method\" title=\"Padrino::Generators::Actions#store_component_config (method)\">#store_component_config</a></span>, <span class=\"object_link\"><a href=\"actions#test%3F-instance_method\" title=\"Padrino::Generators::Actions#test? (method)\">#test?</a></span>, <span class=\"object_link\"><a href=\"actions#tiny%3F-instance_method\" title=\"Padrino::Generators::Actions#tiny? (method)\">#tiny?</a></span>, <span class=\"object_link\"><a href=\"actions#valid_choice%3F-instance_method\" title=\"Padrino::Generators::Actions#valid_choice? (method)\">#valid_choice?</a></span>, <span class=\"object_link\"><a href=\"actions#valid_constant%3F-instance_method\" title=\"Padrino::Generators::Actions#valid_constant? (method)\">#valid_constant?</a></span>, <span class=\"object_link\"><a href=\"actions#validate_namespace-instance_method\" title=\"Padrino::Generators::Actions#validate_namespace (method)\">#validate_namespace</a></span></p>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"banner-class_method\"> .banner ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"source_root-class_method\"> .source_root ⇒ Object </h3>  </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"bundle_dependencies-instance_method\"> #bundle_dependencies ⇒ Object </h3>   <p>Bundle all required components using bundler and Gemfile.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"finish_message-instance_method\"> #finish_message ⇒ Object </h3>   <p>Finish message.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"git_author_email-instance_method\"> #git_author_email ⇒ Object </h3>   <p>Returns the git author email config or a fill-in value.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"git_author_name-instance_method\"> #git_author_name ⇒ Object </h3>   <p>Returns the git author name config or a fill-in value.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"setup_components-instance_method\"> #setup_components ⇒ Object </h3>   <p>For each component, retrieve a valid choice and then execute the associated generator.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"setup_project-instance_method\"> #setup_project ⇒ Object </h3>   <p>Copies over the Padrino base application app.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"setup_test_files-instance_method\"> #setup_test_files ⇒ Object </h3>   <p>Generates test files for tiny app skeleton.</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Project\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Project</a>\n  </p>\n</div>\n","padrino/reloader":"<h1>Module: Padrino::Reloader </h1> <div class=\"box_info\"> <dl> <dt>Extended by:</dt> <dd><span class=\"object_link\"><a href=\"reloader\" title=\"Padrino::Reloader (module)\">Reloader</a></span></dd> </dl> <dl> <dt>Included in:</dt> <dd><span class=\"object_link\"><a href=\"reloader\" title=\"Padrino::Reloader (module)\">Reloader</a></span></dd> </dl>  </div> <h2>Overview</h2>  <p>High performance source code reloader middleware</p>   \n<h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"modules\">Modules:</strong> <span class=\"object_link\"><a href=\"reloader/storage\" title=\"Padrino::Reloader::Storage (module)\">Storage</a></span> <strong class=\"classes\">Classes:</strong> <span class=\"object_link\"><a href=\"reloader/rack\" title=\"Padrino::Reloader::Rack (class)\">Rack</a></span> </p> <h2>Constant Summary</h2> <dl class=\"constants\"> <dt id=\"MTIMES-constant\" class=\"\">MTIMES =   <p>The modification times for every file in a project.</p>    </dt> <dd><pre class=\"code\" data-language=\"ruby\">{}</pre></dd> </dl> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"reloader#changed%3F-instance_method\" title=\"#changed? (instance method)\">#<strong>changed?</strong> ⇒ Boolean</a></code> <span class=\"summary_desc\"> Returns true if any file changes are detected. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"reloader#clear%21-instance_method\" title=\"#clear! (instance method)\">#<strong>clear!</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Remove files and classes loaded with stat. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"reloader#exclude-instance_method\" title=\"#exclude (instance method)\">#<strong>exclude</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Specified folders can be excluded from the code reload detection process. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"reloader#exclude_constants-instance_method\" title=\"#exclude_constants (instance method)\">#<strong>exclude_constants</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Specified constants can be excluded from the code unloading process. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"reloader#include_constants-instance_method\" title=\"#include_constants (instance method)\">#<strong>include_constants</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Specified constants can be configured to be reloaded on every request. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"reloader#lock%21-instance_method\" title=\"#lock! (instance method)\">#<strong>lock!</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> We lock dependencies sets to prevent reloading of protected constants. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"reloader#reload%21-instance_method\" title=\"#reload! (instance method)\">#<strong>reload!</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Reload apps and files with changes detected. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"reloader#remove_constant-instance_method\" title=\"#remove_constant (instance method)\">#<strong>remove_constant</strong>(const) ⇒ Object</a></code> <span class=\"summary_desc\"> Removes the specified class and constant. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"reloader#remove_feature-instance_method\" title=\"#remove_feature (instance method)\">#<strong>remove_feature</strong>(file) ⇒ Object</a></code> <span class=\"summary_desc\"> Remove a feature from $LOADED_FEATURES so it can be required again. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"reloader#safe_load-instance_method\" title=\"#safe_load (instance method)\">#<strong>safe_load</strong>(file, options = {}) ⇒ Object</a></code> <span class=\"summary_desc\"> A safe Kernel::require which issues the necessary hooks depending on results. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"reloader#special_files-instance_method\" title=\"#special_files (instance method)\">#<strong>special_files</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the list of special tracked files for Reloader. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"reloader#special_files%3D-instance_method\" title=\"#special_files= (instance method)\">#<strong>special_files=</strong>(files) ⇒ Object</a></code> <span class=\"summary_desc\"> Sets the list of special tracked files for Reloader. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"changed?-instance_method\"> #changed? ⇒ Boolean </h3>   <p>Returns true if any file changes are detected.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"clear!-instance_method\"> #clear! ⇒ Object </h3>   <p>Remove files and classes loaded with stat</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"exclude-instance_method\"> #exclude ⇒ Object </h3>   <p>Specified folders can be excluded from the code reload detection process. Default excluded directories at Padrino.root are: test, spec, features, tmp, config, db and public</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"exclude_constants-instance_method\"> #exclude_constants ⇒ Object </h3>   <p>Specified constants can be excluded from the code unloading process.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"include_constants-instance_method\"> #include_constants ⇒ Object </h3>   <p>Specified constants can be configured to be reloaded on every request. Default included constants are: [none]</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"lock!-instance_method\"> #lock! ⇒ Object </h3>   <p>We lock dependencies sets to prevent reloading of protected constants</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"reload!-instance_method\"> #reload! ⇒ Object </h3>   <p>Reload apps and files with changes detected.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"remove_constant-instance_method\"> #remove_constant(const) ⇒ Object </h3>   <p>Removes the specified class and constant.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"remove_feature-instance_method\"> #remove_feature(file) ⇒ Object </h3>   <p>Remove a feature from $LOADED_FEATURES so it can be required again.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"safe_load-instance_method\"> #safe_load(file, options = {}) ⇒ Object </h3>   <p>A safe Kernel::require which issues the necessary hooks depending on results</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"special_files-instance_method\"> #special_files ⇒ Object </h3>   <p>Returns the list of special tracked files for Reloader.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"special_files=-instance_method\"> #special_files=(files) ⇒ Object </h3>   <p>Sets the list of special tracked files for Reloader.</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Reloader\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Reloader</a>\n  </p>\n</div>\n","padrino/rendering/safeerb":"<h1>Class: Padrino::Rendering::SafeERB </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">ERB</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">ERB</li> <li class=\"next\">Padrino::Rendering::SafeERB</li> </ul>  </dd> </dl>  </div> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"safeerb#set_eoutvar-instance_method\" title=\"#set_eoutvar (instance method)\">#<strong>set_eoutvar</strong>(compiler, eoutvar = '_erbout') ⇒ Object</a></code>  </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"set_eoutvar-instance_method\"> #set_eoutvar(compiler, eoutvar = '_erbout') ⇒ Object </h3>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SafeERB\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SafeERB</a>\n  </p>\n</div>\n","padrino/rendering/safeeruby":"<h1>Class: Padrino::Rendering::SafeEruby  </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Erubis::Eruby</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Erubis::Eruby</li> <li class=\"next\">Padrino::Rendering::SafeEruby</li> </ul>  </dd> </dl> <dl> <dt>Includes:</dt> <dd><span class=\"object_link\"><a href=\"safebufferenhancer\" title=\"Padrino::Rendering::SafeBufferEnhancer (module)\">SafeBufferEnhancer</a></span></dd> </dl>  </div> <h2>Overview</h2>  <p class=\"note private\"> <strong>This class is part of a private API.</strong> You should avoid using this class if possible, as it may be removed or be changed in the future. </p> <p>SafeBufferTemplate is the Eruby engine, augmented with SafeBufferEnhancer.</p>    <h2>Method Summary</h2> <h3 class=\"inherited\">Methods included from SafeBufferEnhancer</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"safebufferenhancer#add_expr_escaped-instance_method\" title=\"Padrino::Rendering::SafeBufferEnhancer#add_expr_escaped (method)\">#add_expr_escaped</a></span>, <span class=\"object_link\"><a href=\"safebufferenhancer#add_expr_literal-instance_method\" title=\"Padrino::Rendering::SafeBufferEnhancer#add_expr_literal (method)\">#add_expr_literal</a></span>, <span class=\"object_link\"><a href=\"safebufferenhancer#add_stmt-instance_method\" title=\"Padrino::Rendering::SafeBufferEnhancer#add_stmt (method)\">#add_stmt</a></span>, <span class=\"object_link\"><a href=\"safebufferenhancer#add_text-instance_method\" title=\"Padrino::Rendering::SafeBufferEnhancer#add_text (method)\">#add_text</a></span></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SafeEruby\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SafeEruby</a>\n  </p>\n</div>\n","padrino/rendering/safetemplate":"<h1>Module: Padrino::Rendering::SafeTemplate </h1> <div class=\"box_info\"> <dl> <dt>Included in:</dt> <dd>\n<span class=\"object_link\"><a href=\"hamltemplate\" title=\"Padrino::Rendering::HamlTemplate (class)\">HamlTemplate</a></span>, <span class=\"object_link\"><a href=\"slimtemplate\" title=\"Padrino::Rendering::SlimTemplate (class)\">SlimTemplate</a></span>\n</dd> </dl>  </div> <h2>Overview</h2>  <p>A SafeTemplate assumes that its output is safe.</p>    <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"safetemplate#render-instance_method\" title=\"#render (instance method)\">#<strong>render</strong> ⇒ Object</a></code>  </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"render-instance_method\"> #render ⇒ Object </h3>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SafeTemplate\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SafeTemplate</a>\n  </p>\n</div>\n","padrino/helpers/formhelpers/security":"<h1>Module: Padrino::Helpers::FormHelpers::Security </h1>  <h2>Overview</h2>  <p>Helpers to generate form security tags for csrf protection.</p>    <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"security#csrf_meta_tags-instance_method\" title=\"#csrf_meta_tags (instance method)\">#<strong>csrf_meta_tags</strong> ⇒ String</a></code> <span class=\"summary_desc\"> Constructs meta tags `csrf-param` and `csrf-token` with the name of the cross-site request forgery protection parameter and token, respectively. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"security#csrf_token_field-instance_method\" title=\"#csrf_token_field (instance method)\">#<strong>csrf_token_field</strong> ⇒ String</a></code> <span class=\"summary_desc\"> Constructs a hidden field containing a CSRF token. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"csrf_meta_tags-instance_method\"> #csrf_meta_tags ⇒ String </h3>   <p>Constructs meta tags `csrf-param` and `csrf-token` with the name of the cross-site request forgery protection parameter and token, respectively.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">csrf_meta_tags</pre> </div> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The meta tags with the CSRF token and the param your app expects it in.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"csrf_token_field-instance_method\"> #csrf_token_field ⇒ String </h3>   <p>Constructs a hidden field containing a CSRF token.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">csrf_token_field</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">token</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The token to use. Will be read from the session by default.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The hidden field with CSRF token as value.  </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormHelpers/Security\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormHelpers/Security</a>\n  </p>\n</div>\n","padrino/router":"<h1>Class: Padrino::Router </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Object</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Padrino::Router</li> </ul>  </dd> </dl>  </div> <h2>Overview</h2>  <p>This class is an extended version of Rack::URLMap.</p> <p>Padrino::Router like Rack::URLMap dispatches in such a way that the longest paths are tried first, since they are most specific.</p> <p>Features:</p> <ul>\n<li> <p>Map a path to the specified App</p> </li>\n<li> <p>Ignore server names (this solve issues with vhost and domain aliases)</p> </li>\n<li> <p>Use hosts instead of server name for mappings (this help us with our vhost and domain aliases)</p> </li>\n</ul>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">\nroutes = Padrino::Router.new do\n  map(:path =&gt; \"/\", :to =&gt; PadrinoWeb, :host =&gt; \"padrino.local\")\n  map(:path =&gt; \"/\", :to =&gt; Admin, :host =&gt; \"admin.padrino.local\")\nend\nrun routes\n\nroutes = Padrino::Router.new do\n  map(:path =&gt; \"/\", :to =&gt; PadrinoWeb, :host =&gt; /*.padrino.local/)\nend\nrun routes</pre> </div> </div> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"router#call-instance_method\" title=\"#call (instance method)\">#<strong>call</strong>(env) ⇒ Object</a></code> <span class=\"summary_desc\"> The call handler setup to route a request given the mappings specified. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"router#initialize-instance_method\" title=\"#initialize (instance method)\">#<strong>initialize</strong>(*mapping, &amp;block) ⇒ Router</a></code> <span class=\"note title constructor\">constructor</span> <span class=\"summary_desc\"> A new instance of Router. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"router#map-instance_method\" title=\"#map (instance method)\">#<strong>map</strong>(options = {}) ⇒ Array</a></code> <span class=\"summary_desc\"> Map a route path and host to a specified application. </span> </li> </ul>  <h2>Constructor Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"initialize-instance_method\"> #initialize(*mapping, &amp;block) ⇒ Router </h3>   <p>Returns a new instance of Router</p>    </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"call-instance_method\"> #call(env) ⇒ Object </h3>   <p>The call handler setup to route a request given the mappings specified.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"map-instance_method\"> #map(options = {}) ⇒ Array </h3>   <p>Map a route path and host to a specified application.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">map(:path =&gt; \"/\", :to =&gt; PadrinoWeb, :host =&gt; \"padrino.local\")</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The options to map.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:to</code> <span class=\"type\">(<code>Sinatra::Application</code>)</span>  —  The class of the application to mount.  </li> <li> <code class=\"name\">:path</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../string\" title=\"String (class)\">String</a></span></code>)</span> <span class=\"default\"> — default: <code>\"/\"</code> </span> —  The path to map the specified application.  </li> <li> <code class=\"name\">:host</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../string\" title=\"String (class)\">String</a></span></code>)</span>  —  The host to map the specified application.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Array</code>)</span> —  The sorted route mappings.  </li> </ul> <h4 class=\"tag_title\">Raises:</h4> <ul class=\"raise\"> <li> <span class=\"type\">(<code>ArgumentError</code>)</span> </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Router\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Router</a>\n  </p>\n</div>\n","padrino/pathrouter/router":"<h1>Class: Padrino::PathRouter::Router </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Object</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Padrino::PathRouter::Router</li> </ul>  </dd> </dl>  </div> <h2>Instance Attribute Summary \n</h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"router#current_order-instance_method\" title=\"#current_order (instance method)\">#<strong>current_order</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute current_order. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"router#engine-instance_method\" title=\"#engine (instance method)\">#<strong>engine</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute engine. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"router#routes-instance_method\" title=\"#routes (instance method)\">#<strong>routes</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute routes. </span> </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"router#add-instance_method\" title=\"#add (instance method)\">#<strong>add</strong>(verb, path, options = {}, &amp;block) ⇒ Object</a></code> <span class=\"summary_desc\"> Adds a new route to routes. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"router#call-instance_method\" title=\"#call (instance method)\">#<strong>call</strong>(request, &amp;block) ⇒ Object</a></code> <span class=\"summary_desc\"> Returns all routes which are matched with the condition. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"router#increment_order-instance_method\" title=\"#increment_order (instance method)\">#<strong>increment_order</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Increments the order. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"router#initialize-instance_method\" title=\"#initialize (instance method)\">#<strong>initialize</strong> ⇒ Router</a></code> <span class=\"note title constructor\">constructor</span> <span class=\"summary_desc\"> Constructs an instance of PathRouter::Router. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"router#path-instance_method\" title=\"#path (instance method)\">#<strong>path</strong>(name, *args) ⇒ Object</a></code> <span class=\"summary_desc\"> Finds a path which is matched with conditions from arguments. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"router#prepare%21-instance_method\" title=\"#prepare! (instance method)\">#<strong>prepare!</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Constructs an instance of PathRouter::Compiler, and sorts all routes by using the order. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"router#recognize-instance_method\" title=\"#recognize (instance method)\">#<strong>recognize</strong>(request_or_env) ⇒ Object</a></code> <span class=\"summary_desc\"> Returns all routes which are matched with the condition without block. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"router#recognize_path-instance_method\" title=\"#recognize_path (instance method)\">#<strong>recognize_path</strong>(path_info) ⇒ Object</a></code> <span class=\"summary_desc\"> Recognizes route and expanded params from a path. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"router#reset%21-instance_method\" title=\"#reset! (instance method)\">#<strong>reset!</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Resets all routes, current order and preparation. </span> </li> </ul>  <h2>Constructor Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"initialize-instance_method\"> #initialize ⇒ Router </h3>   <p>Constructs an instance of PathRouter::Router.</p>    </div>   <h2>Instance Attribute Details</h2>  <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"current_order-instance_method\"> #current_order ⇒ Object (readonly) </h3>   <p>Returns the value of attribute current_order</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"engine-instance_method\"> #engine ⇒ Object (readonly) </h3>   <p>Returns the value of attribute engine</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"routes-instance_method\"> #routes ⇒ Object (readonly) </h3>   <p>Returns the value of attribute routes</p>    </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"add-instance_method\"> #add(verb, path, options = {}, &amp;block) ⇒ Object </h3>   <p>Adds a new route to routes.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"call-instance_method\"> #call(request, &amp;block) ⇒ Object </h3>   <p>Returns all routes which are matched with the condition</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"increment_order-instance_method\"> #increment_order ⇒ Object </h3>   <p>Increments the order.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"path-instance_method\"> #path(name, *args) ⇒ Object </h3>   <p>Finds a path which is matched with conditions from arguments</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"prepare!-instance_method\"> #prepare! ⇒ Object </h3>   <p>Constructs an instance of PathRouter::Compiler, and sorts all routes by using the order.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"recognize-instance_method\"> #recognize(request_or_env) ⇒ Object </h3>   <p>Returns all routes which are matched with the condition without block</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"recognize_path-instance_method\"> #recognize_path(path_info) ⇒ Object </h3>   <p>Recognizes route and expanded params from a path.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"reset!-instance_method\"> #reset! ⇒ Object </h3>   <p>Resets all routes, current order and preparation.</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/PathRouter/Router\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/PathRouter/Router</a>\n  </p>\n</div>\n","padrino/generators/runner":"<h1>Module: Padrino::Generators::Runner </h1> <div class=\"box_info\"> <dl> <dt>Included in:</dt> <dd>\n<span class=\"object_link\"><a href=\"plugin\" title=\"Padrino::Generators::Plugin (class)\">Plugin</a></span>, <span class=\"object_link\"><a href=\"project\" title=\"Padrino::Generators::Project (class)\">Project</a></span>\n</dd> </dl>  </div> <h2>Overview</h2>  <p>Responsible for executing plugin and template instructions including common actions for modifying a project or application.</p>    <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"runner#app-instance_method\" title=\"#app (instance method)\">#<strong>app</strong>(name) ⇒ Object</a></code> <span class=\"summary_desc\"> Executes App generator. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"runner#generate-instance_method\" title=\"#generate (instance method)\">#<strong>generate</strong>(type, arguments = \"\") ⇒ Object</a></code> <span class=\"summary_desc\"> Executes generator command for specified type with given arguments. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"runner#git-instance_method\" title=\"#git (instance method)\">#<strong>git</strong>(*args) ⇒ Object</a></code> <span class=\"summary_desc\"> Executes git commmands in project. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"runner#project-instance_method\" title=\"#project (instance method)\">#<strong>project</strong>(options = {}) ⇒ Object</a></code> <span class=\"summary_desc\"> Generates project scaffold based on a given template file. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"runner#rake-instance_method\" title=\"#rake (instance method)\">#<strong>rake</strong>(command) ⇒ Object</a></code> <span class=\"summary_desc\"> Executes rake command with given arguments. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"app-instance_method\"> #app(name) ⇒ Object </h3>   <p>Executes App generator. Accepts an optional block allowing generation inside subapp.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">app :name\napp :name do\n generate :model, \"posts title:string\" # generate a model inside of subapp\nend</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code>Symbol</code>)</span> —  Name of (sub)application to generate.  </li> <li> <code class=\"name\">block</code> <span class=\"type\">(<code>Proc</code>)</span> —  Commands to execute in context of (sub)appliation directory.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"generate-instance_method\"> #generate(type, arguments = \"\") ⇒ Object </h3>   <p>Executes generator command for specified type with given arguments.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">generate :model, \"post title:string body:text\"\ngenerate :controller, \"posts get:index get:new post:new\"\ngenerate :migration, \"AddEmailToUser email:string\"</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">type</code> <span class=\"type\">(<code>Symbol</code>)</span> —  Type of component module.  </li> <li> <code class=\"name\">arguments</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <em class=\"default\">(defaults to: <code>\"\"</code>)</em> —  Arguments to send to component generator.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"git-instance_method\"> #git(*args) ⇒ Object </h3>   <p>Executes git commmands in project.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">git :init\ngit :add, \".\"\ngit :commit, \"hello world\"</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">action</code> <span class=\"type\">(<code>Symbol</code>)</span> —  Git command to execute.  </li> <li> <code class=\"name\">arguments</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Arguments to invoke on git command.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"project-instance_method\"> #project(options = {}) ⇒ Object </h3>   <p>Generates project scaffold based on a given template file.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">project :test =&gt; :shoulda, :orm =&gt; :activerecord, :renderer =&gt; \"haml\"</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  Options to use to generate the project.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"rake-instance_method\"> #rake(command) ⇒ Object </h3>   <p>Executes rake command with given arguments.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">rake \"custom task1 task2\"</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">command</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Rake tasks to execute.  </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Runner\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Runner</a>\n  </p>\n</div>\n","padrino/rendering/safebufferenhancer":"<h1>Module: Padrino::Rendering::SafeBufferEnhancer  </h1> <div class=\"box_info\"> <dl> <dt>Included in:</dt> <dd><span class=\"object_link\"><a href=\"safeeruby\" title=\"Padrino::Rendering::SafeEruby (class)\">SafeEruby</a></span></dd> </dl>  </div> <h2>Overview</h2>  <p class=\"note private\"> <strong>This module is part of a private API.</strong> You should avoid using this module if possible, as it may be removed or be changed in the future. </p> <p>SafeBufferEnhancer is an Erubis Enhancer that compiles templates that are fit for using ActiveSupport::SafeBuffer as a Buffer.</p>    <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"safebufferenhancer#add_expr_escaped-instance_method\" title=\"#add_expr_escaped (instance method)\">#<strong>add_expr_escaped</strong>(src, code) ⇒ Object</a></code> <span class=\"private note title\">private</span>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"safebufferenhancer#add_expr_literal-instance_method\" title=\"#add_expr_literal (instance method)\">#<strong>add_expr_literal</strong>(src, code) ⇒ Object</a></code> <span class=\"private note title\">private</span>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"safebufferenhancer#add_stmt-instance_method\" title=\"#add_stmt (instance method)\">#<strong>add_stmt</strong>(src, code) ⇒ Object</a></code> <span class=\"private note title\">private</span>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"safebufferenhancer#add_text-instance_method\" title=\"#add_text (instance method)\">#<strong>add_text</strong>(src, text) ⇒ Object</a></code> <span class=\"private note title\">private</span>  </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"add_expr_escaped-instance_method\"> #add_expr_escaped(src, code) ⇒ Object </h3>   <p class=\"note private\"> <strong>This method is part of a private API.</strong> You should avoid using this method if possible, as it may be removed or be changed in the future. </p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"add_expr_literal-instance_method\"> #add_expr_literal(src, code) ⇒ Object </h3>   <p class=\"note private\"> <strong>This method is part of a private API.</strong> You should avoid using this method if possible, as it may be removed or be changed in the future. </p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"add_stmt-instance_method\"> #add_stmt(src, code) ⇒ Object </h3>   <p class=\"note private\"> <strong>This method is part of a private API.</strong> You should avoid using this method if possible, as it may be removed or be changed in the future. </p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"add_text-instance_method\"> #add_text(src, text) ⇒ Object </h3>   <p class=\"note private\"> <strong>This method is part of a private API.</strong> You should avoid using this method if possible, as it may be removed or be changed in the future. </p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SafeBufferEnhancer\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SafeBufferEnhancer</a>\n  </p>\n</div>\n","padrino/helpers/outputhelpers/sinatracurrentengine":"<h1>Module: Padrino::Helpers::OutputHelpers::SinatraCurrentEngine </h1>  <h2>Overview</h2>  <p>Module used to detect the current engine in vanilla Sinatra apps.</p>    <h2>Instance Attribute Summary \n</h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"sinatracurrentengine#current_engine-instance_method\" title=\"#current_engine (instance method)\">#<strong>current_engine</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> Returns the value of attribute current_engine. </span> </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"sinatracurrentengine#render-instance_method\" title=\"#render (instance method)\">#<strong>render</strong>(engine) ⇒ Object</a></code>  </li> </ul>  <h2>Instance Attribute Details</h2>  <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"current_engine-instance_method\"> #current_engine ⇒ Object (readonly) </h3>   <p>Returns the value of attribute current_engine</p>    </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"render-instance_method\"> #render(engine) ⇒ Object </h3>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/SinatraCurrentEngine\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/SinatraCurrentEngine</a>\n  </p>\n</div>\n","padrino/helpers/outputhelpers/slimhandler":"<h1>Class: Padrino::Helpers::OutputHelpers::SlimHandler </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\"><span class=\"object_link\"><a href=\"abstracthandler\" title=\"Padrino::Helpers::OutputHelpers::AbstractHandler (class)\">AbstractHandler</a></span></span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\"><span class=\"object_link\"><a href=\"abstracthandler\" title=\"Padrino::Helpers::OutputHelpers::AbstractHandler (class)\">AbstractHandler</a></span></li> <li class=\"next\">Padrino::Helpers::OutputHelpers::SlimHandler</li> </ul>  </dd> </dl>  </div> <h2>Overview</h2>  <p>Handler for Slim templates.</p>    <h2>Instance Attribute Summary</h2> <h3 class=\"inherited\">Attributes inherited from AbstractHandler</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"abstracthandler#output_buffer-instance_method\" title=\"Padrino::Helpers::OutputHelpers::AbstractHandler#output_buffer (method)\">#output_buffer</a></span>, <span class=\"object_link\"><a href=\"abstracthandler#template-instance_method\" title=\"Padrino::Helpers::OutputHelpers::AbstractHandler#template (method)\">#template</a></span></p> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"slimhandler#engine_matches%3F-instance_method\" title=\"#engine_matches? (instance method)\">#<strong>engine_matches?</strong>(block) ⇒ Boolean</a></code> <span class=\"summary_desc\"> Returns true if the block is for Slim. </span> </li> </ul> <h3 class=\"inherited\">Methods inherited from AbstractHandler</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"abstracthandler#capture_from_template-instance_method\" title=\"Padrino::Helpers::OutputHelpers::AbstractHandler#capture_from_template (method)\">#capture_from_template</a></span>, <span class=\"object_link\"><a href=\"abstracthandler#concat_to_template-instance_method\" title=\"Padrino::Helpers::OutputHelpers::AbstractHandler#concat_to_template (method)\">#concat_to_template</a></span>, <span class=\"object_link\"><a href=\"abstracthandler#initialize-instance_method\" title=\"Padrino::Helpers::OutputHelpers::AbstractHandler#initialize (method)\">#initialize</a></span></p>  <h2>Constructor Details</h2> <p class=\"notice\">This class inherits a constructor from <span class=\"object_link\"><a href=\"abstracthandler#initialize-instance_method\" title=\"Padrino::Helpers::OutputHelpers::AbstractHandler#initialize (method)\">Padrino::Helpers::OutputHelpers::AbstractHandler</a></span></p>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"engine_matches?-instance_method\"> #engine_matches?(block) ⇒ Boolean </h3>   <p>Returns true if the block is for Slim.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/SlimHandler\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/OutputHelpers/SlimHandler</a>\n  </p>\n</div>\n","padrino/rendering/slimtemplate":"<h1>Class: Padrino::Rendering::SlimTemplate </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Slim::Template</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Slim::Template</li> <li class=\"next\">Padrino::Rendering::SlimTemplate</li> </ul>  </dd> </dl> <dl> <dt>Includes:</dt> <dd><span class=\"object_link\"><a href=\"safetemplate\" title=\"Padrino::Rendering::SafeTemplate (module)\">SafeTemplate</a></span></dd> </dl>  </div> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"slimtemplate#precompiled_preamble-instance_method\" title=\"#precompiled_preamble (instance method)\">#<strong>precompiled_preamble</strong>(locals) ⇒ Object</a></code>  </li> </ul> <h3 class=\"inherited\">Methods included from SafeTemplate</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"safetemplate#render-instance_method\" title=\"Padrino::Rendering::SafeTemplate#render (method)\">#render</a></span></p>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"precompiled_preamble-instance_method\"> #precompiled_preamble(locals) ⇒ Object </h3>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SlimTemplate\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/SlimTemplate</a>\n  </p>\n</div>\n","padrino":"<h1>Module: Padrino </h1> <div class=\"box_info\"> <dl> <dt>Extended by:</dt> <dd>\n<span class=\"object_link\"><a href=\"padrino/configuration\" title=\"Padrino::Configuration (module)\">Configuration</a></span>, <span class=\"object_link\"><a href=\"padrino/loader\" title=\"Padrino::Loader (module)\">Loader</a></span>\n</dd> </dl>  </div> <h2>Overview</h2>  <p>Manages current Padrino version for use in gem generation.</p> <p>We put this in a separate file so you can get padrino version without include full padrino core.</p>   \n<h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"modules\">Modules:</strong> <span class=\"object_link\"><a href=\"padrino/admin\" title=\"Padrino::Admin (module)\">Admin</a></span>, <span class=\"object_link\"><a href=\"padrino/applicationsetup\" title=\"Padrino::ApplicationSetup (module)\">ApplicationSetup</a></span>, <span class=\"object_link\"><a href=\"padrino/cache\" title=\"Padrino::Cache (module)\">Cache</a></span>, <span class=\"object_link\"><a href=\"padrino/configuration\" title=\"Padrino::Configuration (module)\">Configuration</a></span>, <span class=\"object_link\"><a href=\"padrino/flash\" title=\"Padrino::Flash (module)\">Flash</a></span>, <span class=\"object_link\"><a href=\"padrino/generators\" title=\"Padrino::Generators (module)\">Generators</a></span>, <span class=\"object_link\"><a href=\"padrino/helpers\" title=\"Padrino::Helpers (module)\">Helpers</a></span>, <span class=\"object_link\"><a href=\"padrino/loader\" title=\"Padrino::Loader (module)\">Loader</a></span>, <span class=\"object_link\"><a href=\"padrino/mailer\" title=\"Padrino::Mailer (module)\">Mailer</a></span>, <span class=\"object_link\"><a href=\"padrino/module\" title=\"Padrino::Module (module)\">Module</a></span>, <span class=\"object_link\"><a href=\"padrino/paramsprotection\" title=\"Padrino::ParamsProtection (module)\">ParamsProtection</a></span>, <span class=\"object_link\"><a href=\"padrino/pathrouter\" title=\"Padrino::PathRouter (module)\">PathRouter</a></span>, <span class=\"object_link\"><a href=\"padrino/performance\" title=\"Padrino::Performance (module)\">Performance</a></span>, <span class=\"object_link\"><a href=\"padrino/reloader\" title=\"Padrino::Reloader (module)\">Reloader</a></span>, <span class=\"object_link\"><a href=\"padrino/rendering\" title=\"Padrino::Rendering (module)\">Rendering</a></span>, <span class=\"object_link\"><a href=\"padrino/routing\" title=\"Padrino::Routing (module)\">Routing</a></span>, <span class=\"object_link\"><a href=\"padrino/tasks\" title=\"Padrino::Tasks (module)\">Tasks</a></span>, <span class=\"object_link\"><a href=\"padrino/utils\" title=\"Padrino::Utils (module)\">Utils</a></span> <strong class=\"classes\">Classes:</strong> <span class=\"object_link\"><a href=\"padrino/application\" title=\"Padrino::Application (class)\">Application</a></span>, <span class=\"object_link\"><a href=\"padrino/authenticitytoken\" title=\"Padrino::AuthenticityToken (class)\">AuthenticityToken</a></span>, <span class=\"object_link\"><a href=\"padrino/filter\" title=\"Padrino::Filter (class)\">Filter</a></span>, <span class=\"object_link\"><a href=\"padrino/logger\" title=\"Padrino::Logger (class)\">Logger</a></span>, <span class=\"object_link\"><a href=\"padrino/mounter\" title=\"Padrino::Mounter (class)\">Mounter</a></span>, <span class=\"object_link\"><a href=\"padrino/router\" title=\"Padrino::Router (class)\">Router</a></span>, <span class=\"object_link\"><a href=\"padrino/server\" title=\"Padrino::Server (class)\">Server</a></span> </p> <h2>Constant Summary</h2> <dl class=\"constants\"> <dt id=\"PADRINO_IGNORE_CALLERS-constant\" class=\"\">PADRINO_IGNORE_CALLERS = </dt> <dd><pre class=\"code\" data-language=\"ruby\">[\n  %r{lib/padrino-.*$},\n  %r{/padrino-.*/(lib|bin)},\n  %r{/bin/padrino$},\n  %r{/sinatra(/(base|main|show_?exceptions))?\\.rb$},\n  %r{lib/tilt.*\\.rb$},\n  %r{lib/rack.*\\.rb$},\n  %r{lib/mongrel.*\\.rb$},\n  %r{lib/shotgun.*\\.rb$},\n  %r{bin/shotgun$},\n  %r{\\(.*\\)},\n  %r{shoulda/context\\.rb$},\n  %r{mocha/integration},\n  %r{test/unit},\n  %r{rake_test_loader\\.rb},\n  %r{custom_require\\.rb$},\n  %r{active_support},\n  %r{/thor},\n  %r{/lib/bundler},\n]</pre></dd> <dt id=\"VERSION-constant\" class=\"\">VERSION = </dt> <dd><pre class=\"code\" data-language=\"ruby\">'0.13.2'</pre></dd> </dl> <h2>Class Attribute Summary \n</h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"padrino#mounted_root-class_method\" title=\"mounted_root (class method)\">.<strong>mounted_root</strong>(*args) ⇒ String</a></code> <span class=\"summary_desc\"> The root to the mounted apps base directory. </span> </li> </ul> <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"padrino#add_middleware-class_method\" title=\"add_middleware (class method)\">.<strong>add_middleware</strong>(router) ⇒ Object</a></code> <span class=\"summary_desc\"> Creates Rack stack with the router added to the middleware chain. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"padrino#after_load-class_method\" title=\"after_load (class method)\">.<strong>after_load</strong>(&amp;block) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"padrino#application-class_method\" title=\"application (class method)\">.<strong>application</strong> ⇒ Padrino::Router</a></code> <span class=\"summary_desc\"> The resulting rack builder mapping each 'mounted' application. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"padrino#before_load-class_method\" title=\"before_load (class method)\">.<strong>before_load</strong>(&amp;block) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"padrino#bin-class_method\" title=\"bin (class method)\">.<strong>bin</strong>(*args) ⇒ Boolean</a></code> <span class=\"summary_desc\"> This method return the correct location of padrino bin or exec it using Kernel#system with the given args. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"padrino#bin_gen-class_method\" title=\"bin_gen (class method)\">.<strong>bin_gen</strong>(*args) ⇒ Object</a></code> <span class=\"summary_desc\"> This method return the correct location of padrino-gen bin or exec it using Kernel#system with the given args. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"padrino#cache-class_method\" title=\"cache (class method)\">.<strong>cache</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the caching engine. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"padrino#cache%3D-class_method\" title=\"cache= (class method)\">.<strong>cache=</strong>(value) ⇒ Object</a></code> <span class=\"summary_desc\"> Set the caching engine. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"padrino#clear_middleware%21-class_method\" title=\"clear_middleware! (class method)\">.<strong>clear_middleware!</strong> ⇒ Array</a></code> <span class=\"summary_desc\"> Clears all previously configured middlewares. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"padrino#configure_apps-class_method\" title=\"configure_apps (class method)\">.<strong>configure_apps</strong> { ... } ⇒ Object</a></code> <span class=\"summary_desc\"> Configure Global Project Settings for mounted apps. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"padrino#env-class_method\" title=\"env (class method)\">.<strong>env</strong> ⇒ Symbol</a></code> <span class=\"summary_desc\"> Helper method that return <span class=\"object_link\"><a href=\"toplevel#RACK_ENV-constant\" title=\"RACK_ENV (constant)\">RACK_ENV</a></span>. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"padrino#gem-class_method\" title=\"gem (class method)\">.<strong>gem</strong>(name, main_module) ⇒ Object</a></code> <span class=\"summary_desc\"> Registers a gem with padrino. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"padrino#gems-class_method\" title=\"gems (class method)\">.<strong>gems</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"padrino#global_configurations-class_method\" title=\"global_configurations (class method)\">.<strong>global_configurations</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Stores global configuration blocks. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"padrino#insert_mounted_app-class_method\" title=\"insert_mounted_app (class method)\">.<strong>insert_mounted_app</strong>(mounter) ⇒ Object</a></code> <span class=\"summary_desc\"> Inserts a Mounter object into the mounted applications (avoids duplicates). </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"padrino#logger-class_method\" title=\"logger (class method)\">.<strong>logger</strong> ⇒ Padrino::Logger</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"padrino#logger%3D-class_method\" title=\"logger= (class method)\">.<strong>logger=</strong>(value) ⇒ Object</a></code> <span class=\"summary_desc\"> Set the padrino logger. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"padrino#middleware-class_method\" title=\"middleware (class method)\">.<strong>middleware</strong> ⇒ Array&lt;Array&lt;Class, Array, Proc&gt;&gt;</a></code> <span class=\"summary_desc\"> A Rack::Builder object that allows to add middlewares in front of all Padrino applications. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"padrino#modules-class_method\" title=\"modules (class method)\">.<strong>modules</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"padrino#mount-class_method\" title=\"mount (class method)\">.<strong>mount</strong>(name, options = {}) ⇒ Object</a></code> <span class=\"summary_desc\"> Mounts a new sub-application onto Padrino project. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"padrino#mounted_apps-class_method\" title=\"mounted_apps (class method)\">.<strong>mounted_apps</strong> ⇒ Array</a></code> <span class=\"summary_desc\"> The mounted padrino applications (MountedApp objects). </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"padrino#perf_memusage_command-class_method\" title=\"perf_memusage_command (class method)\">.<strong>perf_memusage_command</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"padrino#root-class_method\" title=\"root (class method)\">.<strong>root</strong>(*args) ⇒ String</a></code> <span class=\"summary_desc\"> Helper method for file references. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"padrino#ruby_command-class_method\" title=\"ruby_command (class method)\">.<strong>ruby_command</strong> ⇒ String</a></code> <span class=\"summary_desc\"> Return the path to the ruby interpreter taking into account multiple installations and windows extensions. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"padrino#run%21-class_method\" title=\"run! (class method)\">.<strong>run!</strong>(options = {}) ⇒ Object</a></code> <span class=\"summary_desc\"> Runs the Padrino apps as a self-hosted server using: thin, mongrel, or WEBrick in that order. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"padrino#set_encoding-class_method\" title=\"set_encoding (class method)\">.<strong>set_encoding</strong> ⇒ NilClass</a></code> <span class=\"summary_desc\"> Set <code>Encoding.default_internal</code> and <code>Encoding.default_external</code> to <code>Encoding::UFT_8</code>. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"padrino#use-class_method\" title=\"use (class method)\">.<strong>use</strong>(mw, *args) { ... } ⇒ Object</a></code> <span class=\"summary_desc\"> Convenience method for adding a Middleware to the whole padrino app. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"padrino#version-class_method\" title=\"version (class method)\">.<strong>version</strong> ⇒ String</a></code> <span class=\"summary_desc\"> The current Padrino version. </span> </li> </ul> <h3 class=\"inherited\">Methods included from Loader</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"padrino/loader#after_load-instance_method\" title=\"Padrino::Loader#after_load (method)\">after_load</a></span>, <span class=\"object_link\"><a href=\"padrino/loader#before_load-instance_method\" title=\"Padrino::Loader#before_load (method)\">before_load</a></span>, <span class=\"object_link\"><a href=\"padrino/loader#called_from-instance_method\" title=\"Padrino::Loader#called_from (method)\">called_from</a></span>, <span class=\"object_link\"><a href=\"padrino/loader#clear%21-instance_method\" title=\"Padrino::Loader#clear! (method)\">clear!</a></span>, <span class=\"object_link\"><a href=\"padrino/loader#dependency_paths-instance_method\" title=\"Padrino::Loader#dependency_paths (method)\">dependency_paths</a></span>, <span class=\"object_link\"><a href=\"padrino/loader#load%21-instance_method\" title=\"Padrino::Loader#load! (method)\">load!</a></span>, <span class=\"object_link\"><a href=\"padrino/loader#loaded%3F-instance_method\" title=\"Padrino::Loader#loaded? (method)\">loaded?</a></span>, <span class=\"object_link\"><a href=\"padrino/loader#precompile_all_routes%21-instance_method\" title=\"Padrino::Loader#precompile_all_routes! (method)\">precompile_all_routes!</a></span>, <span class=\"object_link\"><a href=\"padrino/loader#reload%21-instance_method\" title=\"Padrino::Loader#reload! (method)\">reload!</a></span>, <span class=\"object_link\"><a href=\"padrino/loader#require_dependencies-instance_method\" title=\"Padrino::Loader#require_dependencies (method)\">require_dependencies</a></span></p> <h3 class=\"inherited\">Methods included from Configuration</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"padrino/configuration#config-instance_method\" title=\"Padrino::Configuration#config (method)\">config</a></span>, <span class=\"object_link\"><a href=\"padrino/configuration#configure-instance_method\" title=\"Padrino::Configuration#configure (method)\">configure</a></span></p>  <h2>Class Attribute Details</h2>  <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"mounted_root-class_method\"> .mounted_root(*args) ⇒ String </h3>   <p>Returns the root to the mounted apps base directory.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">args</code> <span class=\"type\">(<code>Array</code>)</span> </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"string\" title=\"String (class)\">String</a></span></code>)</span> —  the root to the mounted apps base directory.  </li> </ul> </div> </div>   <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"add_middleware-class_method\"> .add_middleware(router) ⇒ Object </h3>   <p>Creates Rack stack with the router added to the middleware chain.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"after_load-class_method\"> .after_load(&amp;block) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"application-class_method\"> .application ⇒ Padrino::Router </h3>   <p>The resulting rack builder mapping each 'mounted' application.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"padrino/router\" title=\"Padrino::Router (class)\">Padrino::Router</a></span></code>)</span> —  The router for the application.  </li> </ul> <h4 class=\"tag_title\">Raises:</h4> <ul class=\"raise\"> <li> <span class=\"type\">(<code><span class=\"object_link\">ApplicationLoadError</span></code>)</span> —  No applications were mounted.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"before_load-class_method\"> .before_load(&amp;block) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"bin-class_method\"> .bin(*args) ⇒ Boolean </h3>   <p>This method return the correct location of padrino bin or exec it using Kernel#system with the given args.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">Padrino.bin('start', '-e production')</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">args</code> <span class=\"type\">(<code>Array</code>)</span> —  command or commands to execute  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"bin_gen-class_method\"> .bin_gen(*args) ⇒ Object </h3>   <p>This method return the correct location of padrino-gen bin or exec it using Kernel#system with the given args.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">Padrino.bin_gen(:app, name.to_s, \"-r=#{destination_root}\")</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">args.</code> <span class=\"type\">(<code>Array&lt;<span class=\"object_link\"><a href=\"string\" title=\"String (class)\">String</a></span>&gt;</code>)</span> —  Splat of arguments to pass to padrino-gen.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"cache-class_method\"> .cache ⇒ Object </h3>   <p>Returns the caching engine.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\"># with: Padrino.cache = Padrino::Cache.new(:File, :dir =&gt; /my/cache/path)\nPadrino.cache['val'] = 'test'\nPadrino.cache['val'] # =&gt; 'test'\nPadrino.cache.delete('val')\nPadrino.cache.clear</pre> </div> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"cache=-class_method\"> .cache=(value) ⇒ Object </h3>   <p>Set the caching engine.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">Padrino.cache = Padrino::Cache.new(:LRUHash) # default choice\nPadrino.cache = Padrino::Cache.new(:File, :dir =&gt; Padrino.root('tmp', app_name.to_s, 'cache')) # Keeps cached values in file\nPadrino.cache = Padrino::Cache.new(:Memcached) # Uses default server at localhost\nPadrino.cache = Padrino::Cache.new(:Memcached, :server =&gt; '127.0.0.1:11211', :exception_retry_limit =&gt; 1)\nPadrino.cache = Padrino::Cache.new(:Memcached, :backend =&gt; memcached_or_dalli_instance)\nPadrino.cache = Padrino::Cache.new(:Redis) # Uses default server at localhost\nPadrino.cache = Padrino::Cache.new(:Redis, :host =&gt; '127.0.0.1', :port =&gt; 6379, :db =&gt; 0)\nPadrino.cache = Padrino::Cache.new(:Redis, :backend =&gt; redis_instance)\nPadrino.cache = Padrino::Cache.new(:Mongo) # Uses default server at localhost\nPadrino.cache = Padrino::Cache.new(:Mongo, :backend =&gt; mongo_client_instance)\n\n# You can manage your cache from anywhere in your app:\n\nPadrino.cache['val'] = 'test'\nPadrino.cache['val'] # =&gt; 'test'\nPadrino.cache.delete('val')\nPadrino.cache.clear</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">value</code>  —  Instance of Moneta store  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"clear_middleware!-class_method\"> .clear_middleware! ⇒ Array </h3>   <p>Clears all previously configured middlewares.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Array</code>)</span> —  An empty array  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"configure_apps-class_method\"> .configure_apps { ... } ⇒ Object </h3>   <p>Configure Global Project Settings for mounted apps. These can be overloaded in each individual app's own personal configuration. This can be used like:</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">Padrino.configure_apps do\n  enable  :sessions\n  disable :raise_errors\nend</pre> </div> <h4 class=\"tag_title\">Yields:</h4> <ul class=\"yield\"> <li>  <dl class=\"rdoc-list\">\n <dd> The given block will be called to configure each application. </dd>\n</dl>  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"env-class_method\"> .env ⇒ Symbol </h3>   <p>Helper method that return <span class=\"object_link\"><a href=\"toplevel#RACK_ENV-constant\" title=\"RACK_ENV (constant)\">RACK_ENV</a></span>.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Symbol</code>)</span> —  The Padrino Environment.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"gem-class_method\"> .gem(name, main_module) ⇒ Object </h3>   <p>Registers a gem with padrino. This relieves the caller from setting up loadpaths by itself and enables Padrino to look up apps in gem folder.</p> <p>The name given has to be the proper gem name as given in the gemspec.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"string\" title=\"String (class)\">String</a></span></code>)</span> —  The name of the gem being registered.  </li> <li> <code class=\"name\">main_module</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"padrino/module\" title=\"Padrino::Module (module)\">Module</a></span></code>)</span> —  The main module of the gem.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"gems-class_method\"> .gems ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"global_configurations-class_method\"> .global_configurations ⇒ Object </h3>   <p>Stores global configuration blocks.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"insert_mounted_app-class_method\"> .insert_mounted_app(mounter) ⇒ Object </h3>   <p>Inserts a Mounter object into the mounted applications (avoids duplicates).</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">mounter</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"padrino/mounter\" title=\"Padrino::Mounter (class)\">Padrino::Mounter</a></span></code>)</span> </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"logger-class_method\"> .logger ⇒ Padrino::Logger </h3>     <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">logger.debug \"foo\"\nlogger.warn \"bar\"</pre> </div> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"padrino/logger\" title=\"Padrino::Logger (class)\">Padrino::Logger</a></span></code>)</span> </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"logger=-class_method\"> .logger=(value) ⇒ Object </h3>   <p>Set the padrino logger.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4>  using ruby default logger  <pre class=\"example code\" data-language=\"ruby\">require 'logger'\nPadrino.logger = Logger.new(STDOUT)</pre>  using ActiveSupport  <pre class=\"example code\" data-language=\"ruby\">require 'active_support/buffered_logger'\nPadrino.logger = Buffered.new(STDOUT)</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">value</code> <span class=\"type\">(<code>Object</code>)</span> —  an object that respond to &lt;&lt;, write, puts, debug, warn etc..  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Object</code>)</span> —  The given value.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"middleware-class_method\"> .middleware ⇒ Array&lt;Array&lt;Class, Array, Proc&gt;&gt; </h3>   <p>A Rack::Builder object that allows to add middlewares in front of all Padrino applications.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Array&lt;Array&lt;Class, Array, Proc&gt;&gt;</code>)</span> —  The middleware classes.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"modules-class_method\"> .modules ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"mount-class_method\"> .mount(name, options = {}) ⇒ Object </h3>   <p>Mounts a new sub-application onto Padrino project.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">Padrino.mount(\"blog_app\").to(\"/blog\")</pre> </div> <h4 class=\"tag_title\">See Also:</h4> <ul class=\"see\"> <li>Padrino::Mounter#new</li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"mounted_apps-class_method\"> .mounted_apps ⇒ Array </h3>   <p>Returns the mounted padrino applications (MountedApp objects)</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Array</code>)</span> —  the mounted padrino applications (MountedApp objects)  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"perf_memusage_command-class_method\"> .perf_memusage_command ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"root-class_method\"> .root(*args) ⇒ String </h3>   <p>Helper method for file references.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\"># Referencing a file in config called settings.yml\nPadrino.root(\"config\", \"settings.yml\")\n# returns PADRINO_ROOT + \"/config/setting.yml\"</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">args</code> <span class=\"type\">(<code>Array&lt;<span class=\"object_link\"><a href=\"string\" title=\"String (class)\">String</a></span>&gt;</code>)</span> —  The directories to join to <span class=\"object_link\"><a href=\"toplevel#PADRINO_ROOT-constant\" title=\"PADRINO_ROOT (constant)\">PADRINO_ROOT</a></span>.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"string\" title=\"String (class)\">String</a></span></code>)</span> —  The absolute path.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"ruby_command-class_method\"> .ruby_command ⇒ String </h3>   <p>Return the path to the ruby interpreter taking into account multiple installations and windows extensions.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"string\" title=\"String (class)\">String</a></span></code>)</span> —  path to ruby bin executable  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"run!-class_method\"> .run!(options = {}) ⇒ Object </h3>   <p>Runs the Padrino apps as a self-hosted server using: thin, mongrel, or WEBrick in that order.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">Padrino.run! # with these defaults =&gt; host: \"127.0.0.1\", port: \"3000\", adapter: the first found\nPadrino.run!(\"0.0.0.0\", \"4000\", \"mongrel\") # use =&gt; host: \"0.0.0.0\", port: \"4000\", adapter: \"mongrel\"</pre> </div> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"set_encoding-class_method\"> .set_encoding ⇒ NilClass </h3>   <p>Set <code>Encoding.default_internal</code> and <code>Encoding.default_external</code> to <code>Encoding::UFT_8</code>.</p> <p>Please note that in <code>1.9.2</code> with some template engines like <code>haml</code> you should turn off Encoding.default_internal to prevent problems.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>NilClass</code>)</span> </li> </ul> <h4 class=\"tag_title\">See Also:</h4> <ul class=\"see\"> <li><a href=\"https://github.com/rtomayko/tilt/issues/75\" target=\"_parent\" title=\"https://github.com/rtomayko/tilt/issues/75\">https://github.com/rtomayko/tilt/issues/75</a></li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"use-class_method\"> .use(mw, *args) { ... } ⇒ Object </h3>   <p>Convenience method for adding a Middleware to the whole padrino app.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">m</code> <span class=\"type\">(<code>Class</code>)</span> —  The middleware class.  </li> <li> <code class=\"name\">args</code> <span class=\"type\">(<code>Array</code>)</span> —  The arguments for the middleware.  </li> </ul> <h4 class=\"tag_title\">Yields:</h4> <ul class=\"yield\"> <li>  <dl class=\"rdoc-list\">\n <dd> The given block will be passed to the initialized middleware. </dd>\n</dl>  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"version-class_method\"> .version ⇒ String </h3>   <p>The current Padrino version.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"string\" title=\"String (class)\">String</a></span></code>)</span> —  The version number.  </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino</a>\n  </p>\n</div>\n","padrino/server":"<h1>Class: Padrino::Server </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Rack::Server</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Rack::Server</li> <li class=\"next\">Padrino::Server</li> </ul>  </dd> </dl>  </div> <h2>Overview</h2>  <p>This module builds a Padrino server to run the project based on available handlers.</p>    <h2>Constant Summary</h2> <dl class=\"constants\"> <dt id=\"DEFAULT_ADDRESS-constant\" class=\"\">DEFAULT_ADDRESS = </dt> <dd><pre class=\"code\" data-language=\"ruby\">{ :Host =&gt; '127.0.0.1', :Port =&gt; 3000 }</pre></dd> <dt id=\"Handlers-constant\" class=\"\">Handlers =   <p>Server Handlers</p>    </dt> <dd><pre class=\"code\" data-language=\"ruby\">[:thin, :puma, :spider-gazelle', :mongrel, :trinidad, :webrick]</pre></dd> </dl> <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"server#start-class_method\" title=\"start (class method)\">.<strong>start</strong>(app, options = {}) ⇒ Object</a></code> <span class=\"summary_desc\"> Starts the application on the available server with specified options. </span> </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"server#app-instance_method\" title=\"#app (instance method)\">#<strong>app</strong> ⇒ Object</a> (also: #wrapped_app)</code> <span class=\"summary_desc\"> The application the server will run. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"server#initialize-instance_method\" title=\"#initialize (instance method)\">#<strong>initialize</strong>(options, app) ⇒ Server</a></code> <span class=\"note title constructor\">constructor</span> <span class=\"summary_desc\"> A new instance of Server. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"server#options-instance_method\" title=\"#options (instance method)\">#<strong>options</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"server#start-instance_method\" title=\"#start (instance method)\">#<strong>start</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Starts the application on the available server with specified options. </span> </li> </ul>  <h2>Constructor Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"initialize-instance_method\"> #initialize(options, app) ⇒ Server </h3>   <p>Returns a new instance of Server</p>    </div>   <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"start-class_method\"> .start(app, options = {}) ⇒ Object </h3>   <p>Starts the application on the available server with specified options.</p>    </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"app-instance_method\"> #app ⇒ Object Also known as: wrapped_app  </h3>   <p>The application the server will run.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"options-instance_method\"> #options ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"start-instance_method\"> #start ⇒ Object </h3>   <p>Starts the application on the available server with specified options.</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Server\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Server</a>\n  </p>\n</div>\n","padrino/helpers/formbuilder/standardformbuilder":"<h1>Class: Padrino::Helpers::FormBuilder::StandardFormBuilder </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\"><span class=\"object_link\"><a href=\"abstractformbuilder\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder (class)\">AbstractFormBuilder</a></span></span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\"><span class=\"object_link\"><a href=\"abstractformbuilder\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder (class)\">AbstractFormBuilder</a></span></li> <li class=\"next\">Padrino::Helpers::FormBuilder::StandardFormBuilder</li> </ul>  </dd> </dl>  </div> <h2>Instance Attribute Summary</h2> <h3 class=\"inherited\">Attributes inherited from AbstractFormBuilder</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"abstractformbuilder#attributes_name-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#attributes_name (method)\">#attributes_name</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#is_nested-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#is_nested (method)\">#is_nested</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#model_name-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#model_name (method)\">#model_name</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#multipart-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#multipart (method)\">#multipart</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#namespace-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#namespace (method)\">#namespace</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#nested_index-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#nested_index (method)\">#nested_index</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#object-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#object (method)\">#object</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#parent_form-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#parent_form (method)\">#parent_form</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#template-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#template (method)\">#template</a></span></p> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"standardformbuilder#field_type-instance_method\" title=\"#field_type (instance method)\">#<strong>field_type</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> StandardFormBuilder. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"standardformbuilder#image_submit_block-instance_method\" title=\"#image_submit_block (instance method)\">#<strong>image_submit_block</strong>(source, options = {}) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"standardformbuilder#submit_block-instance_method\" title=\"#submit_block (instance method)\">#<strong>submit_block</strong>(caption, options = {}) ⇒ Object</a></code>  </li> </ul> <h3 class=\"inherited\">Methods inherited from AbstractFormBuilder</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"abstractformbuilder#check_box-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#check_box (method)\">#check_box</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#check_box_group-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#check_box_group (method)\">#check_box_group</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#color_field-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#color_field (method)\">#color_field</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#csrf_token_field-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#csrf_token_field (method)\">#csrf_token_field</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#date_field-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#date_field (method)\">#date_field</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#datetime_field-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#datetime_field (method)\">#datetime_field</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#datetime_local_field-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#datetime_local_field (method)\">#datetime_local_field</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#email_field-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#email_field (method)\">#email_field</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#error_message_on-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#error_message_on (method)\">#error_message_on</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#error_messages-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#error_messages (method)\">#error_messages</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#fields_for-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#fields_for (method)\">#fields_for</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#file_field-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#file_field (method)\">#file_field</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#hidden_field-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#hidden_field (method)\">#hidden_field</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#image_submit-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#image_submit (method)\">#image_submit</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#initialize-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#initialize (method)\">#initialize</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#label-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#label (method)\">#label</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#month_field-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#month_field (method)\">#month_field</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#number_field-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#number_field (method)\">#number_field</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#password_field-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#password_field (method)\">#password_field</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#radio_button-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#radio_button (method)\">#radio_button</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#radio_button_group-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#radio_button_group (method)\">#radio_button_group</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#search_field-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#search_field (method)\">#search_field</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#select-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#select (method)\">#select</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#submit-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#submit (method)\">#submit</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#telephone_field-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#telephone_field (method)\">#telephone_field</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#text_area-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#text_area (method)\">#text_area</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#text_field-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#text_field (method)\">#text_field</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#time_field-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#time_field (method)\">#time_field</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#url_field-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#url_field (method)\">#url_field</a></span>, <span class=\"object_link\"><a href=\"abstractformbuilder#week_field-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#week_field (method)\">#week_field</a></span></p>  <h2>Constructor Details</h2> <p class=\"notice\">This class inherits a constructor from <span class=\"object_link\"><a href=\"abstractformbuilder#initialize-instance_method\" title=\"Padrino::Helpers::FormBuilder::AbstractFormBuilder#initialize (method)\">Padrino::Helpers::FormBuilder::AbstractFormBuilder</a></span></p>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"field_type-instance_method\"> #field_type ⇒ Object </h3>   <p>StandardFormBuilder</p> <pre class=\"code ruby\" data-language=\"ruby\">text_field_block(:username, { :class =&gt; 'long' }, { :class =&gt; 'wide-label' })\ntext_area_block(:summary, { :class =&gt; 'long' }, { :class =&gt; 'wide-label' })\npassword_field_block(:password, { :class =&gt; 'long' }, { :class =&gt; 'wide-label' })\nfile_field_block(:photo, { :class =&gt; 'long' }, { :class =&gt; 'wide-label' })\ncheck_box_block(:remember_me, { :class =&gt; 'long' }, { :class =&gt; 'wide-label' })\nselect_block(:color, :options =&gt; ['green', 'black'])</pre>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"image_submit_block-instance_method\"> #image_submit_block(source, options = {}) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"submit_block-instance_method\"> #submit_block(caption, options = {}) ⇒ Object </h3>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormBuilder/StandardFormBuilder\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormBuilder/StandardFormBuilder</a>\n  </p>\n</div>\n","padrino/tasks":"<h1>Module: Padrino::Tasks </h1>  <h2>Overview</h2>  <p>This module it's used for bootstrap with padrino rake third party tasks, in your gem/plugin/extension you need only do this:</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">Padrino::Tasks.files &lt;&lt; yourtask.rb\nPadrino::Tasks.files.concat(Dir[\"/path/to/all/my/tasks/*.rb\"])\nPadrino::Tasks.files.unshift(\"yourtask.rb\")</pre> </div> </div> <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"tasks#files-class_method\" title=\"files (class method)\">.<strong>files</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns a list of files to handle with padrino rake. </span> </li> </ul>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"files-class_method\"> .files ⇒ Object </h3>   <p>Returns a list of files to handle with padrino rake</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Tasks\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Tasks</a>\n  </p>\n</div>\n","padrino/rendering/templatenotfound":"<h1>Exception: Padrino::Rendering::TemplateNotFound </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">RuntimeError</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">RuntimeError</li> <li class=\"next\">Padrino::Rendering::TemplateNotFound</li> </ul>  </dd> </dl>  </div> <h2>Overview</h2>  <p>Exception responsible for when an expected template did not exist.</p>   <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/TemplateNotFound\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Rendering/TemplateNotFound</a>\n  </p>\n</div>\n","padrino/helpers/translationhelpers":"<h1>Module: Padrino::Helpers::TranslationHelpers </h1>  <h2>Overview</h2>  <p>Helpers related to locale i18n translation within templates.</p>    <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"translationhelpers#localize-instance_method\" title=\"#localize (instance method)\">#<strong>localize</strong>(*args) ⇒ String</a> (also: #l)</code> <span class=\"summary_desc\"> Delegates to I18n.localize with no additional functionality. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"translationhelpers#translate-instance_method\" title=\"#translate (instance method)\">#<strong>translate</strong>(*args) ⇒ String</a> (also: #t)</code> <span class=\"summary_desc\"> Delegates to I18n.translate with no additional functionality. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"localize-instance_method\"> #localize(*args) ⇒ String Also known as: l  </h3>   <p>Delegates to I18n.localize with no additional functionality.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">*args</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The keys to retrieve.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The translation for the specified keys.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"translate-instance_method\"> #translate(*args) ⇒ String Also known as: t  </h3>   <p>Delegates to I18n.translate with no additional functionality.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">*args</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The keys to retrieve.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The translation for the specified keys.  </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/TranslationHelpers\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/TranslationHelpers</a>\n  </p>\n</div>\n","padrino/pathrouter/route":"<h1>Class: Padrino::PathRouter::Route </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Object</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Padrino::PathRouter::Route</li> </ul>  </dd> </dl>  </div> <h2>Constant Summary</h2> <dl class=\"constants\"> <dt id=\"SIGNIFICANT_VARIABLES_REGEX-constant\" class=\"\">SIGNIFICANT_VARIABLES_REGEX = </dt> <dd><pre class=\"code\" data-language=\"ruby\">/(^|[^\\\\])[:\\*]([a-zA-Z0-9_]+)/.freeze</pre></dd> </dl> <h2>Instance Attribute Summary \n</h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#action-instance_method\" title=\"#action (instance method)\">#<strong>action</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> The accessors will be used in other classes. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#block-instance_method\" title=\"#block (instance method)\">#<strong>block</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> A reader for compile option. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#cache-instance_method\" title=\"#cache (instance method)\">#<strong>cache</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> The accessors will be used in other classes. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#cache_expires-instance_method\" title=\"#cache_expires (instance method)\">#<strong>cache_expires</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> The accessors will be used in other classes. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#cache_key-instance_method\" title=\"#cache_key (instance method)\">#<strong>cache_key</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> The accessors will be used in other classes. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#capture-instance_method\" title=\"#capture (instance method)\">#<strong>capture</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> The accessors are useful to access from PathRouter::Router. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#controller-instance_method\" title=\"#controller (instance method)\">#<strong>controller</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> The accessors will be used in other classes. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#default_values-instance_method\" title=\"#default_values (instance method)\">#<strong>default_values</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> The accessors will be used in other classes. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#index-instance_method\" title=\"#index (instance method)\">#<strong>index</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> The accessors are useful to access from PathRouter::Router. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#name-instance_method\" title=\"#name (instance method)\">#<strong>name</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> The accessors are useful to access from PathRouter::Router. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#options-instance_method\" title=\"#options (instance method)\">#<strong>options</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> The accessors are useful to access from PathRouter::Router. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#order-instance_method\" title=\"#order (instance method)\">#<strong>order</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> The accessors are useful to access from PathRouter::Router. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#parent-instance_method\" title=\"#parent (instance method)\">#<strong>parent</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> The accessors will be used in other classes. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#path_for_generation-instance_method\" title=\"#path_for_generation (instance method)\">#<strong>path_for_generation</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> The accessors will be used in other classes. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#regexp-instance_method\" title=\"#regexp (instance method)\">#<strong>regexp</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> The accessors are useful to access from PathRouter::Router. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#router%3D-instance_method\" title=\"#router= (instance method)\">#<strong>router</strong> ⇒ Object</a></code> <span class=\"note title writeonly\">writeonly</span> <span class=\"summary_desc\"> The router will be treated in this class. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#use_layout-instance_method\" title=\"#use_layout (instance method)\">#<strong>use_layout</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> The accessors will be used in other classes. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#user_agent-instance_method\" title=\"#user_agent (instance method)\">#<strong>user_agent</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> The accessors will be used in other classes. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#verb-instance_method\" title=\"#verb (instance method)\">#<strong>verb</strong> ⇒ Object</a></code> <span class=\"note title readonly\">readonly</span> <span class=\"summary_desc\"> A reader for compile option. </span> </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#after_filters-instance_method\" title=\"#after_filters (instance method)\">#<strong>after_filters</strong>(&amp;block) ⇒ Object</a></code> <span class=\"summary_desc\"> Returns after_filters as an array. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#before_filters-instance_method\" title=\"#before_filters (instance method)\">#<strong>before_filters</strong>(&amp;block) ⇒ Object</a></code> <span class=\"summary_desc\"> Returns before_filters as an array. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#block_parameter_length-instance_method\" title=\"#block_parameter_length (instance method)\">#<strong>block_parameter_length</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns block parameter length. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#call-instance_method\" title=\"#call (instance method)\">#<strong>call</strong>(app, *args) ⇒ Object</a></code> <span class=\"summary_desc\"> Calls the route block with arguments. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#custom_conditions-instance_method\" title=\"#custom_conditions (instance method)\">#<strong>custom_conditions</strong>(&amp;block) ⇒ Object</a></code> <span class=\"summary_desc\"> Returns custom_conditions as an array. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#initialize-instance_method\" title=\"#initialize (instance method)\">#<strong>initialize</strong>(path, verb, options = {}, &amp;block) ⇒ Route</a></code> <span class=\"note title constructor\">constructor</span> <span class=\"summary_desc\"> Constructs an instance of PathRouter::Route. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#match-instance_method\" title=\"#match (instance method)\">#<strong>match</strong>(pattern) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#matcher-instance_method\" title=\"#matcher (instance method)\">#<strong>matcher</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns an instance of PathRouter::Matcher that is associated with the route. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#original_path-instance_method\" title=\"#original_path (instance method)\">#<strong>original_path</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the original path. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#params_for-instance_method\" title=\"#params_for (instance method)\">#<strong>params_for</strong>(pattern, others = {}) ⇒ Object</a></code> <span class=\"summary_desc\"> Returns parameters which is created by the matcher. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#path-instance_method\" title=\"#path (instance method)\">#<strong>path</strong>(*args) ⇒ Object</a></code> <span class=\"summary_desc\"> Expands the path by using parameters. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#path%3D-instance_method\" title=\"#path= (instance method)\">#<strong>path=</strong>(pattern) ⇒ Object</a></code> <span class=\"summary_desc\"> Overwrites path value by passing new path string. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#request_methods-instance_method\" title=\"#request_methods (instance method)\">#<strong>request_methods</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the route's verb as an array. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#significant_variable_names-instance_method\" title=\"#significant_variable_names (instance method)\">#<strong>significant_variable_names</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns signficant variable names. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"route#to-instance_method\" title=\"#to (instance method)\">#<strong>to</strong>(&amp;block) ⇒ Object</a></code> <span class=\"summary_desc\"> Associates a block with the route, and increments current order of the router. </span> </li> </ul>  <h2>Constructor Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"initialize-instance_method\"> #initialize(path, verb, options = {}, &amp;block) ⇒ Route </h3>   <p>Constructs an instance of PathRouter::Route.</p>    </div>   <h2>Instance Attribute Details</h2>  <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"action-instance_method\"> #action ⇒ Object </h3>   <p>The accessors will be used in other classes</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"block-instance_method\"> #block ⇒ Object (readonly) </h3>   <p>A reader for compile option</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"cache-instance_method\"> #cache ⇒ Object </h3>   <p>The accessors will be used in other classes</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"cache_expires-instance_method\"> #cache_expires ⇒ Object </h3>   <p>The accessors will be used in other classes</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"cache_key-instance_method\"> #cache_key ⇒ Object </h3>   <p>The accessors will be used in other classes</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"capture-instance_method\"> #capture ⇒ Object </h3>   <p>The accessors are useful to access from PathRouter::Router</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"controller-instance_method\"> #controller ⇒ Object </h3>   <p>The accessors will be used in other classes</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"default_values-instance_method\"> #default_values ⇒ Object </h3>   <p>The accessors will be used in other classes</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"index-instance_method\"> #index ⇒ Object </h3>   <p>The accessors are useful to access from PathRouter::Router</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"name-instance_method\"> #name ⇒ Object </h3>   <p>The accessors are useful to access from PathRouter::Router</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"options-instance_method\"> #options ⇒ Object </h3>   <p>The accessors are useful to access from PathRouter::Router</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"order-instance_method\"> #order ⇒ Object </h3>   <p>The accessors are useful to access from PathRouter::Router</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"parent-instance_method\"> #parent ⇒ Object </h3>   <p>The accessors will be used in other classes</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"path_for_generation-instance_method\"> #path_for_generation ⇒ Object </h3>   <p>The accessors will be used in other classes</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"regexp-instance_method\"> #regexp ⇒ Object </h3>   <p>The accessors are useful to access from PathRouter::Router</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"router=-instance_method\"> #router=(value) ⇒ Object (writeonly) </h3>   <p>The router will be treated in this class</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"use_layout-instance_method\"> #use_layout ⇒ Object </h3>   <p>The accessors will be used in other classes</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"user_agent-instance_method\"> #user_agent ⇒ Object </h3>   <p>The accessors will be used in other classes</p>    </div>  <div class=\"method_details \"> <h3 class=\"signature \" id=\"verb-instance_method\"> #verb ⇒ Object (readonly) </h3>   <p>A reader for compile option</p>    </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"after_filters-instance_method\"> #after_filters(&amp;block) ⇒ Object </h3>   <p>Returns after_filters as an array.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"before_filters-instance_method\"> #before_filters(&amp;block) ⇒ Object </h3>   <p>Returns before_filters as an array.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"block_parameter_length-instance_method\"> #block_parameter_length ⇒ Object </h3>   <p>Returns block parameter length.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"call-instance_method\"> #call(app, *args) ⇒ Object </h3>   <p>Calls the route block with arguments.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"custom_conditions-instance_method\"> #custom_conditions(&amp;block) ⇒ Object </h3>   <p>Returns custom_conditions as an array.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"match-instance_method\"> #match(pattern) ⇒ Object </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">See Also:</h4> <ul class=\"see\"> <li><span class=\"object_link\"><a href=\"matcher#match-instance_method\" title=\"Padrino::PathRouter::Matcher#match (method)\">Matcher#match</a></span></li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"matcher-instance_method\"> #matcher ⇒ Object </h3>   <p>Returns an instance of PathRouter::Matcher that is associated with the route.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"original_path-instance_method\"> #original_path ⇒ Object </h3>   <p>Returns the original path.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"params_for-instance_method\"> #params_for(pattern, others = {}) ⇒ Object </h3>   <p>Returns parameters which is created by the matcher.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"path-instance_method\"> #path(*args) ⇒ Object </h3>   <p>Expands the path by using parameters.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">See Also:</h4> <ul class=\"see\"> <li><span class=\"object_link\"><a href=\"matcher#expand-instance_method\" title=\"Padrino::PathRouter::Matcher#expand (method)\">Matcher#expand</a></span></li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"path=-instance_method\"> #path=(pattern) ⇒ Object </h3>   <p>Overwrites path value by passing new path string.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"request_methods-instance_method\"> #request_methods ⇒ Object </h3>   <p>Returns the route's verb as an array.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"significant_variable_names-instance_method\"> #significant_variable_names ⇒ Object </h3>   <p>Returns signficant variable names.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"to-instance_method\"> #to(&amp;block) ⇒ Object </h3>   <p>Associates a block with the route, and increments current order of the router.</p>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/PathRouter/Route\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/PathRouter/Route</a>\n  </p>\n</div>\n","padrino/flash/storage":"<h1>Class: Padrino::Flash::Storage </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Object</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Padrino::Flash::Storage</li> </ul>  </dd> </dl> <dl> <dt>Includes:</dt> <dd>Enumerable</dd> </dl>  </div> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"storage#%5B%5D-instance_method\" title=\"#[] (instance method)\">#<strong>[]</strong>(type) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"storage#%5B%5D%3D-instance_method\" title=\"#[]= (instance method)\">#<strong>[]=</strong>(type, message) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"storage#clear-instance_method\" title=\"#clear (instance method)\">#<strong>clear</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"storage#delete-instance_method\" title=\"#delete (instance method)\">#<strong>delete</strong>(type) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"storage#discard-instance_method\" title=\"#discard (instance method)\">#<strong>discard</strong>(key = nil) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"storage#each-instance_method\" title=\"#each (instance method)\">#<strong>each</strong>(&amp;block) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"storage#empty%3F-instance_method\" title=\"#empty? (instance method)\">#<strong>empty?</strong> ⇒ Boolean</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"storage#error-instance_method\" title=\"#error (instance method)\">#<strong>error</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"storage#error%3D-instance_method\" title=\"#error= (instance method)\">#<strong>error=</strong>(message) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"storage#keep-instance_method\" title=\"#keep (instance method)\">#<strong>keep</strong>(key = nil) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"storage#key%3F-instance_method\" title=\"#key? (instance method)\">#<strong>key?</strong>(type) ⇒ Boolean</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"storage#keys-instance_method\" title=\"#keys (instance method)\">#<strong>keys</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"storage#length-instance_method\" title=\"#length (instance method)\">#<strong>length</strong> ⇒ Object</a> (also: #size)</code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"storage#next-instance_method\" title=\"#next (instance method)\">#<strong>next</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"storage#notice-instance_method\" title=\"#notice (instance method)\">#<strong>notice</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"storage#notice%3D-instance_method\" title=\"#notice= (instance method)\">#<strong>notice=</strong>(message) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"storage#now-instance_method\" title=\"#now (instance method)\">#<strong>now</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"storage#replace-instance_method\" title=\"#replace (instance method)\">#<strong>replace</strong>(hash) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"storage#success-instance_method\" title=\"#success (instance method)\">#<strong>success</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"storage#success%3D-instance_method\" title=\"#success= (instance method)\">#<strong>success=</strong>(message) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"storage#sweep-instance_method\" title=\"#sweep (instance method)\">#<strong>sweep</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"storage#to_hash-instance_method\" title=\"#to_hash (instance method)\">#<strong>to_hash</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"storage#to_s-instance_method\" title=\"#to_s (instance method)\">#<strong>to_s</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"storage#update-instance_method\" title=\"#update (instance method)\">#<strong>update</strong>(hash) ⇒ Object</a> (also: #merge!)</code>  </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"[]-instance_method\"> #[](type) ⇒ Object </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Since:</h4> <ul class=\"since\"> <li>  0.10.8  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"[]=-instance_method\"> #[]=(type, message) ⇒ Object </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Since:</h4> <ul class=\"since\"> <li>  0.10.8  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"clear-instance_method\"> #clear ⇒ Object </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Since:</h4> <ul class=\"since\"> <li>  0.10.8  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"delete-instance_method\"> #delete(type) ⇒ Object </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Since:</h4> <ul class=\"since\"> <li>  0.10.8  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"discard-instance_method\"> #discard(key = nil) ⇒ Object </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Since:</h4> <ul class=\"since\"> <li>  0.10.8  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"each-instance_method\"> #each(&amp;block) ⇒ Object </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Since:</h4> <ul class=\"since\"> <li>  0.10.8  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"empty?-instance_method\"> #empty? ⇒ Boolean </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> </li> </ul> <h4 class=\"tag_title\">Since:</h4> <ul class=\"since\"> <li>  0.10.8  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"error-instance_method\"> #error ⇒ Object </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Since:</h4> <ul class=\"since\"> <li>  0.10.8  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"error=-instance_method\"> #error=(message) ⇒ Object </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Since:</h4> <ul class=\"since\"> <li>  0.10.8  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"keep-instance_method\"> #keep(key = nil) ⇒ Object </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Since:</h4> <ul class=\"since\"> <li>  0.10.8  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"key?-instance_method\"> #key?(type) ⇒ Boolean </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> </li> </ul> <h4 class=\"tag_title\">Since:</h4> <ul class=\"since\"> <li>  0.10.8  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"keys-instance_method\"> #keys ⇒ Object </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Since:</h4> <ul class=\"since\"> <li>  0.10.8  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"length-instance_method\"> #length ⇒ Object Also known as: size  </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"next-instance_method\"> #next ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"notice-instance_method\"> #notice ⇒ Object </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Since:</h4> <ul class=\"since\"> <li>  0.10.8  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"notice=-instance_method\"> #notice=(message) ⇒ Object </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Since:</h4> <ul class=\"since\"> <li>  0.10.8  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"now-instance_method\"> #now ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"replace-instance_method\"> #replace(hash) ⇒ Object </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Since:</h4> <ul class=\"since\"> <li>  0.10.8  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"success-instance_method\"> #success ⇒ Object </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Since:</h4> <ul class=\"since\"> <li>  0.10.8  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"success=-instance_method\"> #success=(message) ⇒ Object </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Since:</h4> <ul class=\"since\"> <li>  0.10.8  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"sweep-instance_method\"> #sweep ⇒ Object </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Since:</h4> <ul class=\"since\"> <li>  0.10.8  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"to_hash-instance_method\"> #to_hash ⇒ Object </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Since:</h4> <ul class=\"since\"> <li>  0.10.8  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"to_s-instance_method\"> #to_s ⇒ Object </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Since:</h4> <ul class=\"since\"> <li>  0.10.8  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"update-instance_method\"> #update(hash) ⇒ Object Also known as: merge!  </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Since:</h4> <ul class=\"since\"> <li>  0.10.8  </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Flash/Storage\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Flash/Storage</a>\n  </p>\n</div>\n","padrino/reloader/storage":"<h1>Module: Padrino::Reloader::Storage </h1> <div class=\"box_info\"> <dl> <dt>Extended by:</dt> <dd><span class=\"object_link\"><a href=\"storage\" title=\"Padrino::Reloader::Storage (module)\">Storage</a></span></dd> </dl> <dl> <dt>Included in:</dt> <dd><span class=\"object_link\"><a href=\"storage\" title=\"Padrino::Reloader::Storage (module)\">Storage</a></span></dd> </dl>  </div> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"storage#clear%21-instance_method\" title=\"#clear! (instance method)\">#<strong>clear!</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"storage#commit-instance_method\" title=\"#commit (instance method)\">#<strong>commit</strong>(name) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"storage#prepare-instance_method\" title=\"#prepare (instance method)\">#<strong>prepare</strong>(name) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"storage#remove-instance_method\" title=\"#remove (instance method)\">#<strong>remove</strong>(name) ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"storage#rollback-instance_method\" title=\"#rollback (instance method)\">#<strong>rollback</strong>(name) ⇒ Object</a></code>  </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"clear!-instance_method\"> #clear! ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"commit-instance_method\"> #commit(name) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"prepare-instance_method\"> #prepare(name) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"remove-instance_method\"> #remove(name) ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"rollback-instance_method\"> #rollback(name) ⇒ Object </h3>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Reloader/Storage\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Reloader/Storage</a>\n  </p>\n</div>\n","string":"<h1>Class: String </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Object</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">String</li> </ul>  </dd> </dl>  </div> <h2>Overview</h2>  <p>This is an adapted version of active_support/core_ext/string/inflections.rb to prevent loading several dependencies including I18n gem.</p> <p>Issue: <a href=\"https://github.com/rails/rails/issues/1526\">github.com/rails/rails/issues/1526</a></p>   \n<div id=\"subclasses\"> <h2>Direct Known Subclasses</h2> <p class=\"children\"><span class=\"object_link\"><a href=\"padrino/routing/parent\" title=\"Padrino::Routing::Parent (class)\">Padrino::Routing::Parent</a></span></p> </div> <h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"classes\">Classes:</strong> <span class=\"object_link\"><a href=\"string/colorizer\" title=\"String::Colorizer (class)\">Colorizer</a></span> </p> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"string#camelize-instance_method\" title=\"#camelize (instance method)\">#<strong>camelize</strong>(first_letter = :upper) ⇒ Object</a> (also: #camelcase)</code> <span class=\"summary_desc\"> By default, <code>camelize</code> converts strings to UpperCamelCase. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"string#classify-instance_method\" title=\"#classify (instance method)\">#<strong>classify</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Create a class name from a plural table name like Rails does for table names to models. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"string#colorize-instance_method\" title=\"#colorize (instance method)\">#<strong>colorize</strong>(args) ⇒ Object</a></code> <span class=\"summary_desc\"> colorize(:red). </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"string#constantize-instance_method\" title=\"#constantize (instance method)\">#<strong>constantize</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> <code>constantize</code> tries to find a declared constant with the name specified in the string. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"string#dasherize-instance_method\" title=\"#dasherize (instance method)\">#<strong>dasherize</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Replaces underscores with dashes in the string. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"string#humanize-instance_method\" title=\"#humanize (instance method)\">#<strong>humanize</strong>(options = {}) ⇒ Object</a></code> <span class=\"summary_desc\"> Capitalizes the first word, turns underscores into spaces, and strips a trailing '_id' if present. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"string#pluralize-instance_method\" title=\"#pluralize (instance method)\">#<strong>pluralize</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the plural form of the word in the string. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"string#singularize-instance_method\" title=\"#singularize (instance method)\">#<strong>singularize</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> Returns the singular form of the word in the string. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"string#underscore-instance_method\" title=\"#underscore (instance method)\">#<strong>underscore</strong> ⇒ Object</a></code> <span class=\"summary_desc\"> The reverse of <code>camelize</code>. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"camelize-instance_method\"> #camelize(first_letter = :upper) ⇒ Object Also known as: camelcase  </h3>   <p>By default, <code>camelize</code> converts strings to UpperCamelCase. If the argument to camelize is set to <code>:lower</code> then camelize produces lowerCamelCase.</p> <p><code>camelize</code> will also convert '/' to '::' which is useful for converting paths to namespaces.</p> <pre class=\"code ruby\" data-language=\"ruby\">\"active_record\".camelize                # =&gt; \"ActiveRecord\"\n\"active_record\".camelize(:lower)        # =&gt; \"activeRecord\"\n\"active_record/errors\".camelize         # =&gt; \"ActiveRecord::Errors\"\n\"active_record/errors\".camelize(:lower) # =&gt; \"activeRecord::Errors\"</pre>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"classify-instance_method\"> #classify ⇒ Object </h3>   <p>Create a class name from a plural table name like Rails does for table names to models. Note that this returns a string and not a class. (To convert to an actual class follow <code>classify</code> with <code>constantize</code>.)</p> <pre class=\"code ruby\" data-language=\"ruby\">\"egg_and_hams\".classify # =&gt; \"EggAndHam\"\n\"posts\".classify        # =&gt; \"Post\"</pre> <p>Singular names are not handled correctly.</p> <pre class=\"code ruby\" data-language=\"ruby\">\"business\".classify # =&gt; \"Busines\"</pre>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"colorize-instance_method\"> #colorize(args) ⇒ Object </h3>   <p>colorize(:red)</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"constantize-instance_method\"> #constantize ⇒ Object </h3>   <p><code>constantize</code> tries to find a declared constant with the name specified in the string. It raises a NameError when the name is not in CamelCase or is not initialized.</p> <pre class=\"code ruby\" data-language=\"ruby\">\"Module\".constantize # =&gt; Module\n\"Class\".constantize  # =&gt; Class</pre>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"dasherize-instance_method\"> #dasherize ⇒ Object </h3>   <p>Replaces underscores with dashes in the string.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"humanize-instance_method\"> #humanize(options = {}) ⇒ Object </h3>   <p>Capitalizes the first word, turns underscores into spaces, and strips a trailing '_id' if present.</p>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"pluralize-instance_method\"> #pluralize ⇒ Object </h3>   <p>Returns the plural form of the word in the string.</p> <pre class=\"code ruby\" data-language=\"ruby\">\"post\".pluralize             # =&gt; \"posts\"\n\"octopus\".pluralize          # =&gt; \"octopi\"\n\"sheep\".pluralize            # =&gt; \"sheep\"\n\"words\".pluralize            # =&gt; \"words\"\n\"the blue mailman\".pluralize # =&gt; \"the blue mailmen\"\n\"CamelOctopus\".pluralize     # =&gt; \"CamelOctopi\"</pre>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"singularize-instance_method\"> #singularize ⇒ Object </h3>   <p>Returns the singular form of the word in the string.</p> <pre class=\"code ruby\" data-language=\"ruby\">\"posts\".singularize            # =&gt; \"post\"\n\"octopi\".singularize           # =&gt; \"octopus\"\n\"sheep\".singularize            # =&gt; \"sheep\"\n\"words\".singularize            # =&gt; \"word\"\n\"the blue mailmen\".singularize # =&gt; \"the blue mailman\"\n\"CamelOctopi\".singularize      # =&gt; \"CamelOctopus\"</pre>    </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"underscore-instance_method\"> #underscore ⇒ Object </h3>   <p>The reverse of <code>camelize</code>. Makes an underscored, lowercase form from the expression in the string.</p> <p><code>underscore</code> will also change '::' to '/' to convert namespaces to paths.</p> <pre class=\"code ruby\" data-language=\"ruby\">\"ActiveRecord\".underscore         # =&gt; \"active_record\"\n\"ActiveRecord::Errors\".underscore # =&gt; active_record/errors</pre>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/String\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/String</a>\n  </p>\n</div>\n","padrino/generators/task":"<h1>Class: Padrino::Generators::Task </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">Thor::Group</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">Thor::Group</li> <li class=\"next\">Padrino::Generators::Task</li> </ul>  </dd> </dl> <dl> <dt>Includes:</dt> <dd>\n<span class=\"object_link\"><a href=\"actions\" title=\"Padrino::Generators::Actions (module)\">Actions</a></span>, Components::Actions, Thor::Actions</dd> </dl>  </div> <h2>Overview</h2>  <p>Responsible for generating new task file for Padrino application.</p>    <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"task#banner-class_method\" title=\"banner (class method)\">.<strong>banner</strong> ⇒ Object</a></code>  </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"task#source_root-class_method\" title=\"source_root (class method)\">.<strong>source_root</strong> ⇒ Object</a></code>  </li> </ul> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"task#create_task-instance_method\" title=\"#create_task (instance method)\">#<strong>create_task</strong> ⇒ Object</a></code>  </li> </ul> <h3 class=\"inherited\">Methods included from Actions</h3> <p class=\"inherited\"><span class=\"object_link\"><a href=\"actions#already_exists%3F-instance_method\" title=\"Padrino::Generators::Actions#already_exists? (method)\">#already_exists?</a></span>, <span class=\"object_link\"><a href=\"actions#app_skeleton-instance_method\" title=\"Padrino::Generators::Actions#app_skeleton (method)\">#app_skeleton</a></span>, <span class=\"object_link\"><a href=\"actions#apply_component_for-instance_method\" title=\"Padrino::Generators::Actions#apply_component_for (method)\">#apply_component_for</a></span>, <span class=\"object_link\"><a href=\"actions#apply_default_fields-instance_method\" title=\"Padrino::Generators::Actions#apply_default_fields (method)\">#apply_default_fields</a></span>, <span class=\"object_link\"><a href=\"actions#ask-instance_method\" title=\"Padrino::Generators::Actions#ask (method)\">#ask</a></span>, <span class=\"object_link\"><a href=\"actions#check_app_existence-instance_method\" title=\"Padrino::Generators::Actions#check_app_existence (method)\">#check_app_existence</a></span>, <span class=\"object_link\"><a href=\"actions#destination_root-instance_method\" title=\"Padrino::Generators::Actions#destination_root (method)\">#destination_root</a></span>, <span class=\"object_link\"><a href=\"actions#empty_directory_with_keep_file-instance_method\" title=\"Padrino::Generators::Actions#empty_directory_with_keep_file (method)\">#empty_directory_with_keep_file</a></span>, <span class=\"object_link\"><a href=\"actions#execute_component_setup-instance_method\" title=\"Padrino::Generators::Actions#execute_component_setup (method)\">#execute_component_setup</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_app_name-instance_method\" title=\"Padrino::Generators::Actions#fetch_app_name (method)\">#fetch_app_name</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_component_choice-instance_method\" title=\"Padrino::Generators::Actions#fetch_component_choice (method)\">#fetch_component_choice</a></span>, <span class=\"object_link\"><a href=\"actions#fetch_project_name-instance_method\" title=\"Padrino::Generators::Actions#fetch_project_name (method)\">#fetch_project_name</a></span>, <span class=\"object_link\"><a href=\"actions#in_app_root%3F-instance_method\" title=\"Padrino::Generators::Actions#in_app_root? (method)\">#in_app_root?</a></span>, <span class=\"object_link\"><a href=\"actions#include_component_module_for-instance_method\" title=\"Padrino::Generators::Actions#include_component_module_for (method)\">#include_component_module_for</a></span>, <span class=\"object_link\"><a href=\"actions#initializer-instance_method\" title=\"Padrino::Generators::Actions#initializer (method)\">#initializer</a></span>, <span class=\"object_link\"><a href=\"actions#inject_into_file-instance_method\" title=\"Padrino::Generators::Actions#inject_into_file (method)\">#inject_into_file</a></span>, <span class=\"object_link\"><a href=\"actions#insert_hook-instance_method\" title=\"Padrino::Generators::Actions#insert_hook (method)\">#insert_hook</a></span>, <span class=\"object_link\"><a href=\"actions#insert_into_gemfile-instance_method\" title=\"Padrino::Generators::Actions#insert_into_gemfile (method)\">#insert_into_gemfile</a></span>, <span class=\"object_link\"><a href=\"actions#insert_middleware-instance_method\" title=\"Padrino::Generators::Actions#insert_middleware (method)\">#insert_middleware</a></span>, <span class=\"object_link\"><a href=\"actions#invalid_fields-instance_method\" title=\"Padrino::Generators::Actions#invalid_fields (method)\">#invalid_fields</a></span>, <span class=\"object_link\"><a href=\"actions#keep_file-instance_method\" title=\"Padrino::Generators::Actions#keep_file (method)\">#keep_file</a></span>, <span class=\"object_link\"><a href=\"actions#middleware-instance_method\" title=\"Padrino::Generators::Actions#middleware (method)\">#middleware</a></span>, <span class=\"object_link\"><a href=\"actions#recognize_path-instance_method\" title=\"Padrino::Generators::Actions#recognize_path (method)\">#recognize_path</a></span>, <span class=\"object_link\"><a href=\"actions#require_contrib-instance_method\" title=\"Padrino::Generators::Actions#require_contrib (method)\">#require_contrib</a></span>, <span class=\"object_link\"><a href=\"actions#require_dependencies-instance_method\" title=\"Padrino::Generators::Actions#require_dependencies (method)\">#require_dependencies</a></span>, <span class=\"object_link\"><a href=\"actions#resolve_valid_choice-instance_method\" title=\"Padrino::Generators::Actions#resolve_valid_choice (method)\">#resolve_valid_choice</a></span>, <span class=\"object_link\"><a href=\"actions#retrieve_component_config-instance_method\" title=\"Padrino::Generators::Actions#retrieve_component_config (method)\">#retrieve_component_config</a></span>, <span class=\"object_link\"><a href=\"actions#run_bundler-instance_method\" title=\"Padrino::Generators::Actions#run_bundler (method)\">#run_bundler</a></span>, <span class=\"object_link\"><a href=\"actions#store_component_choice-instance_method\" title=\"Padrino::Generators::Actions#store_component_choice (method)\">#store_component_choice</a></span>, <span class=\"object_link\"><a href=\"actions#store_component_config-instance_method\" title=\"Padrino::Generators::Actions#store_component_config (method)\">#store_component_config</a></span>, <span class=\"object_link\"><a href=\"actions#test%3F-instance_method\" title=\"Padrino::Generators::Actions#test? (method)\">#test?</a></span>, <span class=\"object_link\"><a href=\"actions#tiny%3F-instance_method\" title=\"Padrino::Generators::Actions#tiny? (method)\">#tiny?</a></span>, <span class=\"object_link\"><a href=\"actions#valid_choice%3F-instance_method\" title=\"Padrino::Generators::Actions#valid_choice? (method)\">#valid_choice?</a></span>, <span class=\"object_link\"><a href=\"actions#valid_constant%3F-instance_method\" title=\"Padrino::Generators::Actions#valid_constant? (method)\">#valid_constant?</a></span>, <span class=\"object_link\"><a href=\"actions#validate_namespace-instance_method\" title=\"Padrino::Generators::Actions#validate_namespace (method)\">#validate_namespace</a></span></p>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"banner-class_method\"> .banner ⇒ Object </h3>  </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"source_root-class_method\"> .source_root ⇒ Object </h3>  </div>   <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"create_task-instance_method\"> #create_task ⇒ Object </h3>  </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Task\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Generators/Task</a>\n  </p>\n</div>\n","padrino/routing/unrecognizedexception":"<h1>Exception: Padrino::Routing::UnrecognizedException </h1> <div class=\"box_info\"> <dl> <dt>Inherits:</dt> <dd> <span class=\"inheritName\">RuntimeError</span> <ul class=\"fullTree\"> <li>Object</li> <li class=\"next\">RuntimeError</li> <li class=\"next\">Padrino::Routing::UnrecognizedException</li> </ul>  </dd> </dl>  </div> <h2>Overview</h2>  <p>Raised when a route was invalid or cannot be processed.</p>   <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing/UnrecognizedException\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Routing/UnrecognizedException</a>\n  </p>\n</div>\n","haml/util":"<h1>Module: Haml::Util </h1>  <h2> Class Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"util#rails_xss_safe%3F-class_method\" title=\"rails_xss_safe? (class method)\">.<strong>rails_xss_safe?</strong> ⇒ Boolean</a></code>  </li> </ul>  <h2>Class Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"rails_xss_safe?-class_method\"> .rails_xss_safe? ⇒ Boolean </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code>Boolean</code>)</span> </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Haml/Util\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Haml/Util</a>\n  </p>\n</div>\n","padrino/utils":"<h1>Module: Padrino::Utils </h1> <div class=\"box_info\"> <dl> <dt>Extended by:</dt> <dd><span class=\"object_link\"><a href=\"utils\" title=\"Padrino::Utils (module)\">Utils</a></span></dd> </dl> <dl> <dt>Included in:</dt> <dd><span class=\"object_link\"><a href=\"utils\" title=\"Padrino::Utils (module)\">Utils</a></span></dd> </dl>  </div> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"utils#build_uri_query-instance_method\" title=\"#build_uri_query (instance method)\">#<strong>build_uri_query</strong>(object, namespace = nil) ⇒ Object</a></code> <span class=\"summary_desc\"> Builds an URI query from a Hash or any Object. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"build_uri_query-instance_method\"> #build_uri_query(object, namespace = nil) ⇒ Object </h3>   <p>Builds an URI query from a Hash or any Object.</p> <p>Examples (~ marks here that output is actually escaped by CGI):</p> <pre class=\"code ruby\" data-language=\"ruby\">Utils.build_uri_query(:a =&gt; 1, :b =&gt; 2)           #=&gt; \"a=1&amp;b=2\"\nUtils.build_uri_query(:a =&gt; [1, 2])               #=&gt; ~\"a[]=1&amp;a[]=2\"\nUtils.build_uri_query([1, 2], 'namespace')        #=&gt; ~\"namespace[]=1&amp;namespace[]=2\"\nUtils.build_uri_query(:a =&gt; { :d =&gt; 2 }, :b =&gt; 3) #=&gt; ~\"a[d]=2&amp;b=3\"</pre>    </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Utils\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Utils</a>\n  </p>\n</div>\n","padrino/helpers/formhelpers":"<h1>Module: Padrino::Helpers::FormHelpers </h1>  <h2>Overview</h2>  <p>Helpers related to producing form related tags and inputs into templates.</p>   \n<h2>Defined Under Namespace</h2> <p class=\"children\"> <strong class=\"modules\">Modules:</strong> <span class=\"object_link\"><a href=\"formhelpers/errors\" title=\"Padrino::Helpers::FormHelpers::Errors (module)\">Errors</a></span>, <span class=\"object_link\"><a href=\"formhelpers/options\" title=\"Padrino::Helpers::FormHelpers::Options (module)\">Options</a></span>, <span class=\"object_link\"><a href=\"formhelpers/security\" title=\"Padrino::Helpers::FormHelpers::Security (module)\">Security</a></span> </p> <h2>Constant Summary</h2> <dl class=\"constants\"> <dt id=\"DATETIME_ATTRIBUTES-constant\" class=\"\">DATETIME_ATTRIBUTES = </dt> <dd><pre class=\"code\" data-language=\"ruby\">[:value, :max, :min].freeze</pre></dd> <dt id=\"COLOR_CODE_REGEXP-constant\" class=\"\">COLOR_CODE_REGEXP = </dt> <dd><pre class=\"code\" data-language=\"ruby\">/\\A#([0-9a-fA-F]{3}){1,2}\\z/.freeze</pre></dd> </dl> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formhelpers#button_tag-instance_method\" title=\"#button_tag (instance method)\">#<strong>button_tag</strong>(caption, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Constructs a button input from the given options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formhelpers#button_to-instance_method\" title=\"#button_to (instance method)\">#<strong>button_to</strong>(*args, &amp;block) ⇒ String</a></code> <span class=\"summary_desc\"> Creates a form containing a single button that submits to the URL. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formhelpers#check_box_tag-instance_method\" title=\"#check_box_tag (instance method)\">#<strong>check_box_tag</strong>(name, options = {}) ⇒ Object</a></code> <span class=\"summary_desc\"> Constructs a check_box from the given options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formhelpers#color_field_tag-instance_method\" title=\"#color_field_tag (instance method)\">#<strong>color_field_tag</strong>(name, options = {}) ⇒ Object</a></code> <span class=\"summary_desc\"> Constructs a color tag from the given options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formhelpers#date_field_tag-instance_method\" title=\"#date_field_tag (instance method)\">#<strong>date_field_tag</strong>(name, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Constructs a date tag from the given options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formhelpers#datetime_field_tag-instance_method\" title=\"#datetime_field_tag (instance method)\">#<strong>datetime_field_tag</strong>(name, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Constructs a datetime tag from the given options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formhelpers#datetime_local_field_tag-instance_method\" title=\"#datetime_local_field_tag (instance method)\">#<strong>datetime_local_field_tag</strong>(name, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Constructs a datetime-local tag from the given options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formhelpers#email_field_tag-instance_method\" title=\"#email_field_tag (instance method)\">#<strong>email_field_tag</strong>(name, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Creates an email field input with the given name and options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formhelpers#field_set_tag-instance_method\" title=\"#field_set_tag (instance method)\">#<strong>field_set_tag</strong>(*args, &amp;block) ⇒ String</a></code> <span class=\"summary_desc\"> Constructs a field_set to group fields with given options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formhelpers#fields_for-instance_method\" title=\"#fields_for (instance method)\">#<strong>fields_for</strong>(object, options = {}, &amp;block) ⇒ String</a></code> <span class=\"summary_desc\"> Constructs form fields for an object using given or default form_builder. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formhelpers#file_field_tag-instance_method\" title=\"#file_field_tag (instance method)\">#<strong>file_field_tag</strong>(name, options = {}) ⇒ Object</a></code> <span class=\"summary_desc\"> Constructs a file field input from the given options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formhelpers#form_for-instance_method\" title=\"#form_for (instance method)\">#<strong>form_for</strong>(object, url, options = {}, &amp;block) {|AbstractFormBuilder| ... } ⇒ String</a></code> <span class=\"summary_desc\"> Constructs a form for object using given or default form_builder. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formhelpers#form_tag-instance_method\" title=\"#form_tag (instance method)\">#<strong>form_tag</strong>(url, options = {}, &amp;block) ⇒ String</a></code> <span class=\"summary_desc\"> Constructs a form without object based on options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formhelpers#hidden_field_tag-instance_method\" title=\"#hidden_field_tag (instance method)\">#<strong>hidden_field_tag</strong>(name, options = {}) ⇒ Object</a></code> <span class=\"summary_desc\"> Constructs a hidden field input from the given options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formhelpers#hidden_form_method_field-instance_method\" title=\"#hidden_form_method_field (instance method)\">#<strong>hidden_form_method_field</strong>(desired_method) ⇒ String</a></code> <span class=\"summary_desc\"> Returns the hidden method field for 'put' and 'delete' forms. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formhelpers#image_submit_tag-instance_method\" title=\"#image_submit_tag (instance method)\">#<strong>image_submit_tag</strong>(source, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Constructs a submit button from the given options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formhelpers#label_tag-instance_method\" title=\"#label_tag (instance method)\">#<strong>label_tag</strong>(name, options = {}, &amp;block) ⇒ String</a></code> <span class=\"summary_desc\"> Constructs a label tag from the given options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formhelpers#month_field_tag-instance_method\" title=\"#month_field_tag (instance method)\">#<strong>month_field_tag</strong>(name, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Constructs a month tag from the given options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formhelpers#number_field_tag-instance_method\" title=\"#number_field_tag (instance method)\">#<strong>number_field_tag</strong>(name, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Creates a number field input with the given name and options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formhelpers#password_field_tag-instance_method\" title=\"#password_field_tag (instance method)\">#<strong>password_field_tag</strong>(name, options = {}) ⇒ Object</a></code> <span class=\"summary_desc\"> Constructs a password field input from the given options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formhelpers#radio_button_tag-instance_method\" title=\"#radio_button_tag (instance method)\">#<strong>radio_button_tag</strong>(name, options = {}) ⇒ Object</a></code> <span class=\"summary_desc\"> Constructs a radio_button from the given options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formhelpers#range_field_tag-instance_method\" title=\"#range_field_tag (instance method)\">#<strong>range_field_tag</strong>(name, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Constructs a range tag from the given options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formhelpers#search_field_tag-instance_method\" title=\"#search_field_tag (instance method)\">#<strong>search_field_tag</strong>(name, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Creates a search field input with the given name and options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formhelpers#select_tag-instance_method\" title=\"#select_tag (instance method)\">#<strong>select_tag</strong>(name, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Constructs a select from the given options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formhelpers#submit_tag-instance_method\" title=\"#submit_tag (instance method)\">#<strong>submit_tag</strong>(*args) ⇒ String</a></code> <span class=\"summary_desc\"> Constructs a submit button from the given options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formhelpers#telephone_field_tag-instance_method\" title=\"#telephone_field_tag (instance method)\">#<strong>telephone_field_tag</strong>(name, options = {}) ⇒ String</a> (also: #phone_field_tag)</code> <span class=\"summary_desc\"> Creates a telephone field input with the given name and options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formhelpers#text_area_tag-instance_method\" title=\"#text_area_tag (instance method)\">#<strong>text_area_tag</strong>(name, options = {}) ⇒ Object</a></code> <span class=\"summary_desc\"> Constructs a text area input from the given options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formhelpers#text_field_tag-instance_method\" title=\"#text_field_tag (instance method)\">#<strong>text_field_tag</strong>(name, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Creates a text field input with the given name and options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formhelpers#time_field_tag-instance_method\" title=\"#time_field_tag (instance method)\">#<strong>time_field_tag</strong>(name, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Constructs a time tag from the given options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formhelpers#url_field_tag-instance_method\" title=\"#url_field_tag (instance method)\">#<strong>url_field_tag</strong>(name, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Creates a URL field input with the given name and options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"formhelpers#week_field_tag-instance_method\" title=\"#week_field_tag (instance method)\">#<strong>week_field_tag</strong>(name, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Constructs a week tag from the given options. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"button_tag-instance_method\"> #button_tag(caption, options = {}) ⇒ String </h3>   <p>Constructs a button input from the given options.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">button_tag \"Cancel\", :class =&gt; 'clear'</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">caption</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The caption for the button.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The html options for the input field.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The html button based on the <code>options</code> specified.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"button_to-instance_method\"> #button_to(caption, url, options = {}) ⇒ String  #button_to(url, options = {}, &amp;block) ⇒ String  </h3>   <p>Creates a form containing a single button that submits to the URL.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">button_to 'Delete', url(:accounts_destroy, :id =&gt; account), :method =&gt; :delete, :class =&gt; :form\n# Generates:\n# &lt;form class=\"form\" action=\"/admin/accounts/destroy/2\" method=\"post\"&gt;\n#   &lt;input type=\"hidden\" value=\"delete\" name=\"_method\" /&gt;\n#   &lt;input type=\"submit\" value=\"Delete\" /&gt;\n# &lt;/form&gt;</pre> </div> <h4 class=\"tag_title\">Overloads:</h4> <ul class=\"overload\"> <li class=\"overload_item\"> <h3 class=\"signature\">#button_to(caption, url, options = {}) ⇒ String </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">caption</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The text caption.  </li> <li> <code class=\"name\">url</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The url href.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The html options.  </li> </ul> </div> </li> <li class=\"overload_item\"> <h3 class=\"signature\">#button_to(url, options = {}, &amp;block) ⇒ String </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">url</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The url href.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The html options.  </li> <li> <code class=\"name\">block</code> <span class=\"type\">(<code>Proc</code>)</span> —  The button content.  </li> </ul> </div> </li> </ul> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> —  a customizable set of options  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Form and button html with specified <code>options</code>.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"check_box_tag-instance_method\"> #check_box_tag(name, options = {}) ⇒ Object </h3>   <p>Constructs a check_box from the given options.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">check_box_tag :remember_me, :value =&gt; 'Yes'</pre> </div> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"color_field_tag-instance_method\"> #color_field_tag(name, options = {}) ⇒ Object </h3>   <p>Constructs a color tag from the given options.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">color_field_tag('color', :value =&gt; \"#ff0000\")\ncolor_field_tag('color', :value =&gt; \"#f00\")</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The name of the color field.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The html options for the color field.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:value</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  The value of the color field. See examples for details.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"date_field_tag-instance_method\"> #date_field_tag(name, options = {}) ⇒ String </h3>   <p>Constructs a date tag from the given options.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">date_field_tag('date_with_min_max', :min =&gt; DateTime.new(1993, 2, 24),\n                                    :max =&gt; DateTime.new(2000, 4, 1))\ndate_field_tag('date_with_value', :value =&gt; DateTime.new(2000, 4, 1))</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The name of the date field.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The html options for the date field.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:min</code> <span class=\"type\">(<code>DateTime</code>, <code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  The min date time of the date field.  </li> <li> <code class=\"name\">:max</code> <span class=\"type\">(<code>DateTime</code>, <code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  The max date time of the date field.  </li> <li> <code class=\"name\">:value</code> <span class=\"type\">(<code>DateTime</code>, <code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  The value of the date field. See examples for details.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The html date field  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"datetime_field_tag-instance_method\"> #datetime_field_tag(name, options = {}) ⇒ String </h3>   <p>Constructs a datetime tag from the given options.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">datetime_field_tag('datetime_with_min_max', :min =&gt; DateTime.new(1993, 2, 24, 12, 30, 45),\n                                            :max =&gt; DateTime.new(2000, 4, 1, 12, 0, 0))\ndatetime_field_tag('datetime_with_value', :value =&gt; DateTime.new(2000, 4, 1, 12, 0, 0))</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The name of the datetime field.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The html options for the datetime field.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:min</code> <span class=\"type\">(<code>DateTime</code>, <code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  The min date time of the datetime field.  </li> <li> <code class=\"name\">:max</code> <span class=\"type\">(<code>DateTime</code>, <code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  The max date time of the datetime field.  </li> <li> <code class=\"name\">:value</code> <span class=\"type\">(<code>DateTime</code>, <code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  The value of the datetime field. See examples for details.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The html datetime field  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"datetime_local_field_tag-instance_method\"> #datetime_local_field_tag(name, options = {}) ⇒ String </h3>   <p>Constructs a datetime-local tag from the given options.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">datetime_local_field_tag('datetime_local_with_min_max', :min =&gt; DateTime.new(1993, 2, 24, 12, 30, 45),\n                                                        :max =&gt; DateTime.new(2000, 4, 1, 12, 0, 0))\ndatetime_local_field_tag('datetime_local_with_value', :value =&gt; DateTime.new(2000, 4, 1, 12, 0, 0))</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The name of the datetime local field.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The html options for the datetime-local field.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:min</code> <span class=\"type\">(<code>DateTime</code>, <code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  The min date time of the datetime-local field.  </li> <li> <code class=\"name\">:max</code> <span class=\"type\">(<code>DateTime</code>, <code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  The max date time of the datetime-local field.  </li> <li> <code class=\"name\">:value</code> <span class=\"type\">(<code>DateTime</code>, <code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  The value of the datetime field. See examples for details.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The html datetime-local field  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"email_field_tag-instance_method\"> #email_field_tag(name, options = {}) ⇒ String </h3>   <p>Creates an email field input with the given name and options.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">email_field_tag :email, :placeholder =&gt; 'you@example.com'\n# =&gt; &lt;input name=\"email\" placeholder=\"you@example.com\" type=\"email\" /&gt;\n\nemail_field_tag :email, :value =&gt; 'padrinorb@gmail.com', :readonly =&gt; true\n# =&gt; &lt;input name=\"email\" value=\"padrinorb@gmail.com\" readonly type=\"email\" /&gt;</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The name of the input to create.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The HTML options to include in this field.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:id</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies a unique identifier for the field.  </li> <li> <code class=\"name\">:class</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies the stylesheet class of the field.  </li> <li> <code class=\"name\">:name</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies the name of the field.  </li> <li> <code class=\"name\">:accesskey</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies a shortcut key to access the field.  </li> <li> <code class=\"name\">:tabindex</code> <span class=\"type\">(<code>Integer</code>)</span>  —  Specifies the tab order of the field.  </li> <li> <code class=\"name\">:maxlength</code> <span class=\"type\">(<code>Integer</code>)</span>  —  Specifies the maximum length, in characters, of the field.  </li> <li> <code class=\"name\">:size</code> <span class=\"type\">(<code>Integer</code>)</span>  —  Specifies the width, in characters, of the field.  </li> <li> <code class=\"name\">:placeholder</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies a short hint that describes the expected value of the field.  </li> <li> <code class=\"name\">:hidden</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field is hidden from view.  </li> <li> <code class=\"name\">:spellcheck</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field should have it's spelling and grammar checked for errors.  </li> <li> <code class=\"name\">:draggable</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field is draggable. (true, false, :auto).  </li> <li> <code class=\"name\">:pattern</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies the regular expression pattern that the field's value is checked against.  </li> <li> <code class=\"name\">:autocomplete</code> <span class=\"type\">(<code>Symbol</code>)</span>  —  Specifies whether or not the field should have autocomplete enabled. (:on, :off).  </li> <li> <code class=\"name\">:autofocus</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field should automatically get focus when the page loads.  </li> <li> <code class=\"name\">:required</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field is required to be completed before the form is submitted.  </li> <li> <code class=\"name\">:readonly</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field is read only.  </li> <li> <code class=\"name\">:disabled</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field is disabled.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Generated HTML with specified <code>options</code>.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"field_set_tag-instance_method\"> #field_set_tag(legend = nil, options = {}, &amp;block) ⇒ String  #field_set_tag(options = {}, &amp;block) ⇒ String  </h3>   <p>Constructs a field_set to group fields with given options.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">field_set_tag(:class =&gt; \"office-set\") { }\nfield_set_tag(\"Office\", :class =&gt; 'office-set') { }</pre> </div> <h4 class=\"tag_title\">Overloads:</h4> <ul class=\"overload\"> <li class=\"overload_item\"> <h3 class=\"signature\">#field_set_tag(legend = nil, options = {}, &amp;block) ⇒ String </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">legend</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <em class=\"default\">(defaults to: <code>nil</code>)</em> —  The legend caption for the fieldset  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The html options for the fieldset.  </li> <li> <code class=\"name\">block</code> <span class=\"type\">(<code>Proc</code>)</span> —  The content inside the fieldset.  </li> </ul> </div> </li> <li class=\"overload_item\"> <h3 class=\"signature\">#field_set_tag(options = {}, &amp;block) ⇒ String </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The html options for the fieldset.  </li> <li> <code class=\"name\">block</code> <span class=\"type\">(<code>Proc</code>)</span> —  The content inside the fieldset.  </li> </ul> </div> </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The html for the fieldset tag based on given <code>options</code>.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"fields_for-instance_method\"> #fields_for(object, options = {}, &amp;block) ⇒ String </h3>   <p>Constructs form fields for an object using given or default form_builder. Used within an existing form to allow alternate objects within one form.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">fields_for @user.assignment do |assignment| ... end\nfields_for :assignment do |assigment| ... end</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">object</code> <span class=\"type\">(<code>Object</code>)</span> —  The object for which the fields are being built.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The settings associated with these fields. Accepts HTML options.  </li> <li> <code class=\"name\">block</code> <span class=\"type\">(<code>Proc</code>)</span> —  The content inside this set of fields.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The html fields with the specified options.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"file_field_tag-instance_method\"> #file_field_tag(name, options = {}) ⇒ Object </h3>   <p>Constructs a file field input from the given options.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">file_field_tag :photo, :class =&gt; 'long'</pre> </div> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"form_for-instance_method\"> #form_for(object, url, options = {}, &amp;block) {|AbstractFormBuilder| ... } ⇒ String </h3>   <p>Constructs a form for object using given or default form_builder.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">form_for :user, '/register' do |f| ... end\nform_for @user, '/register', :id =&gt; 'register' do |f| ... end\nform_for @user, '/register', :as =&gt; :customer do |f| ... end</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">object</code> <span class=\"type\">(<code>Object</code>)</span> —  The object for which the form is being built.  </li> <li> <code class=\"name\">URL</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The url this form will submit to.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The settings associated with this form. Accepts a :namespace option that will be prepended to the id attributes of the form's elements. Also accepts HTML options.  </li> <li> <code class=\"name\">block</code> <span class=\"type\">(<code>Proc</code>)</span> —  The fields and content inside this form.  </li> <li> <code class=\"name\">settings</code> <span class=\"type\">(<code>Hash</code>)</span> —  a customizable set of options  </li> </ul> <h4 class=\"tag_title\">Yields:</h4> <ul class=\"yield\"> <li> <span class=\"type\">(<code>AbstractFormBuilder</code>)</span> —  The form builder used to compose fields.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The html object-backed form with the specified options and input fields.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"form_tag-instance_method\"> #form_tag(url, options = {}, &amp;block) ⇒ String </h3>   <p>Constructs a form without object based on options.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">form_tag '/register', :class =&gt; \"registration_form\" do ... end</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">url</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The URL this form will submit to.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The html options associated with this form.  </li> <li> <code class=\"name\">block</code> <span class=\"type\">(<code>Proc</code>)</span> —  The fields and content inside this form.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The HTML form with the specified options and input fields.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"hidden_field_tag-instance_method\"> #hidden_field_tag(name, options = {}) ⇒ Object </h3>   <p>Constructs a hidden field input from the given options.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">hidden_field_tag :session_key, :value =&gt; \"__secret__\"</pre> </div> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"hidden_form_method_field-instance_method\"> #hidden_form_method_field(desired_method) ⇒ String </h3>   <p>Returns the hidden method field for 'put' and 'delete' forms. Only 'get' and 'post' are allowed within browsers; 'put' and 'delete' are just specified using hidden fields with form action still 'put'.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\"># Generate: &lt;input name=\"_method\" value=\"delete\" /&gt;\nhidden_form_method_field('delete')</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">desired_method</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The method this hidden field represents (i.e put or delete).  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The hidden field representing the <code>desired_method</code> for the form.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"image_submit_tag-instance_method\"> #image_submit_tag(source, options = {}) ⇒ String </h3>   <p>Constructs a submit button from the given options.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">image_submit_tag 'form/submit.png'</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">source</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The source image path for the button.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The html options for the input field.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The html image button based on the <code>options</code> specified.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"label_tag-instance_method\"> #label_tag(name, options = {}, &amp;block) ⇒ String </h3>   <p>Constructs a label tag from the given options.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">label_tag :username, :class =&gt; 'long-label'\nlabel_tag :username, :class =&gt; 'long-label' do ... end</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The name of the field to label.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The html options for this label.  </li> <li> <code class=\"name\">block</code> <span class=\"type\">(<code>Proc</code>)</span> —  The content to be inserted into the label.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:caption</code> <span class=\"type\">(<code>Object</code>)</span>  —  The caption for this label.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The html for this label with the given <code>options</code>.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"month_field_tag-instance_method\"> #month_field_tag(name, options = {}) ⇒ String </h3>   <p>Constructs a month tag from the given options.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">month_field_tag('month_with_min_max', :min =&gt; DateTime.new(1993, 2, 24),\n                                      :max =&gt; DateTime.new(2000, 4, 1))\nmonth_field_tag('month_with_value', :value =&gt; DateTime.new(2000, 4, 1))</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The name of the month field.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The html options for the month field.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:min</code> <span class=\"type\">(<code>DateTime</code>, <code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  The min month time of the month field.  </li> <li> <code class=\"name\">:max</code> <span class=\"type\">(<code>DateTime</code>, <code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  The max month time of the month field.  </li> <li> <code class=\"name\">:value</code> <span class=\"type\">(<code>DateTime</code>, <code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  The value of the month field. See examples for details.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The html month field  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"number_field_tag-instance_method\"> #number_field_tag(name, options = {}) ⇒ String </h3>   <p>Creates a number field input with the given name and options.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">number_field_tag :quantity, :class =&gt; 'numeric'\n# =&gt; &lt;input name=\"quantity\" class=\"numeric\" type=\"number\" /&gt;\n\nnumber_field_tag :zip_code, :pattern =&gt; /[0-9]{5}/\n# =&gt; &lt;input name=\"zip_code\" pattern=\"[0-9]{5}\" type=\"number\" /&gt;\n\nnumber_field_tag :credit_card, :autocomplete =&gt; :off\n# =&gt; &lt;input name=\"credit_card\" autocomplete=\"off\" type=\"number\" /&gt;\n\nnumber_field_tag :age, :min =&gt; 18, :max =&gt; 120, :step =&gt; 1\n# =&gt; &lt;input name=\"age\" min=\"18\" max=\"120\" step=\"1\" type=\"number\" /&gt;</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The name of the input to create.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The HTML options to include in this field.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:id</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies a unique identifier for the field.  </li> <li> <code class=\"name\">:class</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies the stylesheet class of the field.  </li> <li> <code class=\"name\">:name</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies the name of the field.  </li> <li> <code class=\"name\">:accesskey</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies a shortcut key to access the field.  </li> <li> <code class=\"name\">:tabindex</code> <span class=\"type\">(<code>Integer</code>)</span>  —  Specifies the tab order of the field.  </li> <li> <code class=\"name\">:min</code> <span class=\"type\">(<code>Integer</code>)</span>  —  Specifies the minimum value of the field.  </li> <li> <code class=\"name\">:max</code> <span class=\"type\">(<code>Integer</code>)</span>  —  Specifies the maximum value of the field.  </li> <li> <code class=\"name\">:step</code> <span class=\"type\">(<code>Integer</code>)</span>  —  Specifies the legal number intervals of the field.  </li> <li> <code class=\"name\">:hidden</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field is hidden from view.  </li> <li> <code class=\"name\">:spellcheck</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field should have it's spelling and grammar checked for errors.  </li> <li> <code class=\"name\">:draggable</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field is draggable. (true, false, :auto).  </li> <li> <code class=\"name\">:pattern</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies the regular expression pattern that the field's value is checked against.  </li> <li> <code class=\"name\">:autocomplete</code> <span class=\"type\">(<code>Symbol</code>)</span>  —  Specifies whether or not the field should have autocomplete enabled. (:on, :off).  </li> <li> <code class=\"name\">:autofocus</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field should automatically get focus when the page loads.  </li> <li> <code class=\"name\">:required</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field is required to be completeled before the form is submitted.  </li> <li> <code class=\"name\">:readonly</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field is read only.  </li> <li> <code class=\"name\">:disabled</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field is disabled.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Generated HTML with specified <code>options</code>.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"password_field_tag-instance_method\"> #password_field_tag(name, options = {}) ⇒ Object </h3>   <p>Constructs a password field input from the given options.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">password_field_tag :password, :class =&gt; 'long'</pre> </div> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"radio_button_tag-instance_method\"> #radio_button_tag(name, options = {}) ⇒ Object </h3>   <p>Constructs a radio_button from the given options.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">radio_button_tag :remember_me, :value =&gt; 'true'</pre> </div> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"range_field_tag-instance_method\"> #range_field_tag(name, options = {}) ⇒ String </h3>   <p>Constructs a range tag from the given options.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">range_field_tag('ranger_with_min_max', :min =&gt; 1, :max =&gt; 50)\nrange_field_tag('ranger_with_range', :range =&gt; 1..5)</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The name of the range field.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The html options for the range field.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:min</code> <span class=\"type\">(<code>Integer</code>)</span>  —  The min range of the range field.  </li> <li> <code class=\"name\">:max</code> <span class=\"type\">(<code>Integer</code>)</span>  —  The max range of the range field.  </li> <li> <code class=\"name\">:range</code> <span class=\"type\">(<code>range</code>)</span>  —  The range, in lieu of :min and :max. See examples for details.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The html range field  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"search_field_tag-instance_method\"> #search_field_tag(name, options = {}) ⇒ String </h3>   <p>Creates a search field input with the given name and options.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">search_field_tag :search, :placeholder =&gt; 'Search this website...'\n# =&gt; &lt;input name=\"search\" placeholder=\"Search this website...\" type=\"search\" /&gt;\n\nsearch_field_tag :search, :maxlength =&gt; 15, :class =&gt; ['search', 'string']\n# =&gt; &lt;input name=\"search\" maxlength=\"15\" class=\"search string\" /&gt;\n\nsearch_field_tag :search, :id =&gt; 'search'\n# =&gt; &lt;input name=\"search\" id=\"search\" type=\"search\" /&gt;\n\nsearch_field_tag :search, :autofocus =&gt; true\n# =&gt; &lt;input name=\"search\" autofocus type=\"search\" /&gt;</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The name of the input to create.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The HTML options to include in this field.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:id</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies a unique identifier for the field.  </li> <li> <code class=\"name\">:class</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies the stylesheet class of the field.  </li> <li> <code class=\"name\">:name</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies the name of the field.  </li> <li> <code class=\"name\">:accesskey</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies a shortcut key to access the field.  </li> <li> <code class=\"name\">:tabindex</code> <span class=\"type\">(<code>Integer</code>)</span>  —  Specifies the tab order of the field.  </li> <li> <code class=\"name\">:maxlength</code> <span class=\"type\">(<code>Integer</code>)</span>  —  Specifies the maximum length, in characters, of the field.  </li> <li> <code class=\"name\">:size</code> <span class=\"type\">(<code>Integer</code>)</span>  —  Specifies the width, in characters, of the field.  </li> <li> <code class=\"name\">:placeholder</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies a short hint that describes the expected value of the field.  </li> <li> <code class=\"name\">:hidden</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field is hidden from view.  </li> <li> <code class=\"name\">:spellcheck</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field should have it's spelling and grammar checked for errors.  </li> <li> <code class=\"name\">:draggable</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field is draggable. (true, false, :auto).  </li> <li> <code class=\"name\">:pattern</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies the regular expression pattern that the field's value is checked against.  </li> <li> <code class=\"name\">:autocomplete</code> <span class=\"type\">(<code>Symbol</code>)</span>  —  Specifies whether or not the field should have autocomplete enabled. (:on, :off).  </li> <li> <code class=\"name\">:autofocus</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field should automatically get focus when the page loads.  </li> <li> <code class=\"name\">:required</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field is required to be completed before the form is submitted.  </li> <li> <code class=\"name\">:readonly</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field is read only.  </li> <li> <code class=\"name\">:disabled</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field is disabled.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Generated HTML with specified <code>options</code>.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"select_tag-instance_method\"> #select_tag(name, options = {}) ⇒ String </h3>   <p>Constructs a select from the given options.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">options = [['caption', 'value'], ['Green', 'green1'], ['Blue', 'blue1'], ['Black', \"black1\"]]\noptions = ['option', 'red', 'yellow' ]\nselect_tag(:favorite_color, :options =&gt; ['red', 'yellow'], :selected =&gt; 'green1')\nselect_tag(:country, :collection =&gt; @countries, :fields =&gt; [:name, :code], :include_blank =&gt; 'None')\n\n# Optgroups can be generated using :grouped_options =&gt; (Hash or nested Array)\ngrouped_options = [['Friends',['Yoda',['Obiwan',1]]],['Enemies',['Palpatine',['Darth Vader',3]]]]\ngrouped_options = {'Friends' =&gt; ['Yoda',['Obiwan',1]],'Enemies' =&gt; ['Palpatine',['Darth Vader',3]]}\nselect_tag(:color, :grouped_options =&gt; [['warm',['red','yellow']],['cool',['blue', 'purple']]])\n\n# Optgroups can be generated using the rails-style attribute hash.\ngrouped_options = {\n  \"Friends\" =&gt; [\"Yoda\", [\"Obiwan\", 2, {:magister =&gt; 'no'}], {:lame =&gt; 'yes'}],\n  \"Enemies\" =&gt; [[\"Palpatine\", \"Palpatine\", {:scary =&gt; 'yes', :old =&gt; 'yes'}], [\"Darth Vader\", 3, {:disabled =&gt; true}]]\n}\nselect_tag(:name, :grouped_options =&gt; grouped_options)</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The name of the input field.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The html options for the input field.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:options</code> <span class=\"type\">(<code>Array&lt;<span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span>, Array&gt;</code>)</span>  —  Explicit options to display in the select. Can be strings or string tuples.  </li> <li> <code class=\"name\">:grouped_options</code> <span class=\"type\">(<code>Array&lt;Array&gt;</code>)</span>  —  List of options for each group in the select. See examples for details.  </li> <li> <code class=\"name\">:collection</code> <span class=\"type\">(<code>Array&lt;Object&gt;</code>)</span>  —  Collection of objects used as options in the select.  </li> <li> <code class=\"name\">:fields</code> <span class=\"type\">(<code>Array&lt;Symbol&gt;</code>)</span>  —  The attributes used as “label” and “value” for each <code>collection</code> object.  </li> <li> <code class=\"name\">:selected</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> <span class=\"default\"> — default: <code>nil</code> </span> —  The option value initially selected.  </li> <li> <code class=\"name\">:include_blank</code> <span class=\"type\">(<code>Boolean</code>)</span> <span class=\"default\"> — default: <code>false</code> </span> —  Include a blank option in the select.  </li> <li> <code class=\"name\">:multiple</code> <span class=\"type\">(<code>Boolean</code>)</span> <span class=\"default\"> — default: <code>false</code> </span> —  Allow multiple options to be selected at once.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The HTML input field based on the <code>options</code> specified.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"submit_tag-instance_method\"> #submit_tag(options = {}) ⇒ String  #submit_tag(caption, options = {}) ⇒ String  </h3>   <p>Constructs a submit button from the given options.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">submit_tag \"Create\", :class =&gt; 'success'\nsubmit_tag :class =&gt; 'btn'</pre> </div> <h4 class=\"tag_title\">Overloads:</h4> <ul class=\"overload\"> <li class=\"overload_item\"> <h3 class=\"signature\">#submit_tag(options = {}) ⇒ String </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The html options for the input field.  </li> </ul> </div> </li> <li class=\"overload_item\"> <h3 class=\"signature\">#submit_tag(caption, options = {}) ⇒ String </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">caption</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The caption for the submit button.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The html options for the input field.  </li> </ul> </div> </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The html submit button based on the <code>options</code> specified.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"telephone_field_tag-instance_method\"> #telephone_field_tag(name, options = {}) ⇒ String Also known as: phone_field_tag  </h3>   <p>Creates a telephone field input with the given name and options.</p> <pre class=\"code ruby\" data-language=\"ruby\">telephone_field_tag :cell_phone, :tabindex =&gt; 1\ntelephone_field_tag :work_phone, :tabindex =&gt; 2\ntelephone_field_tag :home_phone, :tabindex =&gt; 3\n\n# =&gt; &lt;input name=\"cell_phone\" tabindex=\"1\" type=\"tel\" /&gt;\n# =&gt; &lt;input name=\"work_phone\" tabindex=\"2\" type=\"tel\" /&gt;\n# =&gt; &lt;input name=\"home_phone\" tabindex=\"3\" type=\"tel\" /&gt;</pre>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">telephone_field_tag :phone_number, :class =&gt; 'string'\n# =&gt; &lt;input name=\"phone_number\" class=\"string\" type=\"tel\" /&gt;</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The name of the input to create.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The HTML options to include in this field.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:id</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies a unique identifier for the field.  </li> <li> <code class=\"name\">:class</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies the stylesheet class of the field.  </li> <li> <code class=\"name\">:name</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies the name of the field.  </li> <li> <code class=\"name\">:accesskey</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies a shortcut key to access the field.  </li> <li> <code class=\"name\">:tabindex</code> <span class=\"type\">(<code>Integer</code>)</span>  —  Specifies the tab order of the field.  </li> <li> <code class=\"name\">:maxlength</code> <span class=\"type\">(<code>Integer</code>)</span>  —  Specifies the maximum length, in characters, of the field.  </li> <li> <code class=\"name\">:size</code> <span class=\"type\">(<code>Integer</code>)</span>  —  Specifies the width, in characters, of the field.  </li> <li> <code class=\"name\">:placeholder</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies a short hint that describes the expected value of the field.  </li> <li> <code class=\"name\">:hidden</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field is hidden from view.  </li> <li> <code class=\"name\">:spellcheck</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field should have it's spelling and grammar checked for errors.  </li> <li> <code class=\"name\">:draggable</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field is draggable. (true, false, :auto).  </li> <li> <code class=\"name\">:pattern</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies the regular expression pattern that the field's value is checked against.  </li> <li> <code class=\"name\">:autocomplete</code> <span class=\"type\">(<code>Symbol</code>)</span>  —  Specifies whether or not the field should have autocomplete enabled. (:on, :off).  </li> <li> <code class=\"name\">:autofocus</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field should automatically get focus when the page loads.  </li> <li> <code class=\"name\">:required</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field is required to be completed before the form is submitted.  </li> <li> <code class=\"name\">:readonly</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field is read only.  </li> <li> <code class=\"name\">:disabled</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field is disabled.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Generated HTML with specified <code>options</code>.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"text_area_tag-instance_method\"> #text_area_tag(name, options = {}) ⇒ Object </h3>   <p>Constructs a text area input from the given options.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">text_area_tag :username, :class =&gt; 'long', :value =&gt; \"Demo?\"</pre> </div> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"text_field_tag-instance_method\"> #text_field_tag(name, options = {}) ⇒ String </h3>   <p>Creates a text field input with the given name and options.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">text_field_tag :first_name, :maxlength =&gt; 40, :required =&gt; true\n# =&gt; &lt;input name=\"first_name\" maxlength=\"40\" required type=\"text\" /&gt;\n\ntext_field_tag :last_name, :class =&gt; 'string', :size =&gt; 40\n# =&gt; &lt;input name=\"last_name\" class=\"string\" size=\"40\" type=\"text\" /&gt;\n\ntext_field_tag :username, :placeholder =&gt; 'Your Username'\n# =&gt; &lt;input name=\"username\" placeholder=\"Your Username\" type=\"text\" /&gt;</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The name of the input to create.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The HTML options to include in this field.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:id</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies a unique identifier for the field.  </li> <li> <code class=\"name\">:class</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies the stylesheet class of the field.  </li> <li> <code class=\"name\">:name</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies the name of the field.  </li> <li> <code class=\"name\">:accesskey</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies a shortcut key to access the field.  </li> <li> <code class=\"name\">:tabindex</code> <span class=\"type\">(<code>Integer</code>)</span>  —  Specifies the tab order of the field.  </li> <li> <code class=\"name\">:maxlength</code> <span class=\"type\">(<code>Integer</code>)</span>  —  Specifies the maximum length, in characters, of the field.  </li> <li> <code class=\"name\">:size</code> <span class=\"type\">(<code>Integer</code>)</span>  —  Specifies the width, in characters, of the field.  </li> <li> <code class=\"name\">:placeholder</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies a short hint that describes the expected value of the field.  </li> <li> <code class=\"name\">:hidden</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field is hidden from view.  </li> <li> <code class=\"name\">:spellcheck</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field should have it's spelling and grammar checked for errors.  </li> <li> <code class=\"name\">:draggable</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field is draggable. (true, false, :auto).  </li> <li> <code class=\"name\">:pattern</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies the regular expression pattern that the field's value is checked against.  </li> <li> <code class=\"name\">:autocomplete</code> <span class=\"type\">(<code>Symbol</code>)</span>  —  Specifies whether or not the field should have autocomplete enabled. (:on, :off).  </li> <li> <code class=\"name\">:autofocus</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field should automatically get focus when the page loads.  </li> <li> <code class=\"name\">:required</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field is required to be completed before the form is submitted.  </li> <li> <code class=\"name\">:readonly</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field is read only.  </li> <li> <code class=\"name\">:disabled</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field is disabled.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Generated HTML with specified <code>options</code>.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"time_field_tag-instance_method\"> #time_field_tag(name, options = {}) ⇒ String </h3>   <p>Constructs a time tag from the given options.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">time_field_tag('time_with_min_max', :max =&gt; Time.new(1993, 2, 24, 1, 19, 12),\n                                    :min =&gt; Time.new(2008, 6, 21, 13, 30, 0))\ntime_field_tag('time_with_value', :value =&gt; Time.new(2008, 6, 21, 13, 30, 0))</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The name of the time field.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The html options for the time field.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:min</code> <span class=\"type\">(<code>Time</code>, <code>DateTime</code>, <code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  The min time of the time field.  </li> <li> <code class=\"name\">:max</code> <span class=\"type\">(<code>Time</code>, <code>DateTime</code>, <code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  The max time of the time field.  </li> <li> <code class=\"name\">:value</code> <span class=\"type\">(<code>Time</code>, <code>DateTime</code>, <code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  The value of the time field. See examples for details.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The html time field  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"url_field_tag-instance_method\"> #url_field_tag(name, options = {}) ⇒ String </h3>   <p>Creates a URL field input with the given name and options.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">url_field_tag :favorite_website, :placeholder =&gt; 'http://padrinorb.com'\n&lt;input name=\"favorite_website\" placeholder=\"http://padrinorb.com.\" type=\"url\" /&gt;\n\nurl_field_tag :home_page, :class =&gt; 'string url'\n&lt;input name=\"home_page\" class=\"string url\", type=\"url\" /&gt;</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The name of the input to create.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The HTML options to include in this field.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:id</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies a unique identifier for the field.  </li> <li> <code class=\"name\">:class</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies the stylesheet class of the field.  </li> <li> <code class=\"name\">:name</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies the name of the field.  </li> <li> <code class=\"name\">:accesskey</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies a shortcut key to access the field.  </li> <li> <code class=\"name\">:tabindex</code> <span class=\"type\">(<code>Integer</code>)</span>  —  Specifies the tab order of the field.  </li> <li> <code class=\"name\">:maxlength</code> <span class=\"type\">(<code>Integer</code>)</span>  —  Specifies the maximum length, in characters, of the field.  </li> <li> <code class=\"name\">:size</code> <span class=\"type\">(<code>Integer</code>)</span>  —  Specifies the width, in characters, of the field.  </li> <li> <code class=\"name\">:placeholder</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies a short hint that describes the expected value of the field.  </li> <li> <code class=\"name\">:hidden</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field is hidden from view.  </li> <li> <code class=\"name\">:spellcheck</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field should have it's spelling and grammar checked for errors.  </li> <li> <code class=\"name\">:draggable</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field is draggable. (true, false, :auto).  </li> <li> <code class=\"name\">:pattern</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies the regular expression pattern that the field's value is checked against.  </li> <li> <code class=\"name\">:autocomplete</code> <span class=\"type\">(<code>Symbol</code>)</span>  —  Specifies whether or not the field should have autocomplete enabled. (:on, :off).  </li> <li> <code class=\"name\">:autofocus</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field should automatically get focus when the page loads.  </li> <li> <code class=\"name\">:required</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field is required to be completed before the form is submitted.  </li> <li> <code class=\"name\">:readonly</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field is read only.  </li> <li> <code class=\"name\">:disabled</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the field is disabled.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Generated HTML with specified <code>options</code>.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"week_field_tag-instance_method\"> #week_field_tag(name, options = {}) ⇒ String </h3>   <p>Constructs a week tag from the given options.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">week_field_tag('week_with_min_max', :min =&gt; DateTime.new(1993, 2, 24),\n                                    :max =&gt; DateTime.new(2000, 4, 1))\nweek_field_tag('week_with_value', :value =&gt; DateTime.new(2000, 4, 1))</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The name of the week field.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The html options for the week field.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:min</code> <span class=\"type\">(<code>DateTime</code>, <code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  The min week time of the week field.  </li> <li> <code class=\"name\">:max</code> <span class=\"type\">(<code>DateTime</code>, <code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  The max week time of the week field.  </li> <li> <code class=\"name\">:value</code> <span class=\"type\">(<code>DateTime</code>, <code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  The value of the week field. See examples for details.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The html week field  </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormHelpers\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/FormHelpers</a>\n  </p>\n</div>\n","padrino/admin/helpers/viewhelpers":"<h1>Module: Padrino::Admin::Helpers::ViewHelpers </h1>  <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"viewhelpers#model_attribute_translate-instance_method\" title=\"#model_attribute_translate (instance method)\">#<strong>model_attribute_translate</strong>(model, attribute) ⇒ String</a> (also: #t_attr)</code> <span class=\"summary_desc\"> Translates attribute name for the given model. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"viewhelpers#model_translate-instance_method\" title=\"#model_translate (instance method)\">#<strong>model_translate</strong>(model) ⇒ String</a> (also: #mt)</code> <span class=\"summary_desc\"> Translates model name. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"viewhelpers#padrino_admin_translate-instance_method\" title=\"#padrino_admin_translate (instance method)\">#<strong>padrino_admin_translate</strong>(word, *args) ⇒ String</a> (also: #pat)</code> <span class=\"summary_desc\"> Translates a given word for padrino admin. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"viewhelpers#tag_icon-instance_method\" title=\"#tag_icon (instance method)\">#<strong>tag_icon</strong>(icon, tag = nil) ⇒ String</a></code> <span class=\"summary_desc\"> Icon's Bootstrap helper. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"model_attribute_translate-instance_method\"> #model_attribute_translate(model, attribute) ⇒ String Also known as: t_attr  </h3>   <p>Translates attribute name for the given model.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\"># =&gt; t(\"models.account.attributes.email\", :default =&gt; \"Email\")\nmat(:account, :email)</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">model</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The model name for the translation.  </li> <li> <code class=\"name\">attribute</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The attribute name in the model to translate.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The translated attribute name for the current locale.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"model_translate-instance_method\"> #model_translate(model) ⇒ String Also known as: mt  </h3>   <p>Translates model name.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\"># =&gt; t(\"models.account.name\", :default =&gt; \"Account\")\nmt(:account)</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">attribute</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The attribute name in the model to translate.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The translated model name for the current locale.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"padrino_admin_translate-instance_method\"> #padrino_admin_translate(word, *args) ⇒ String Also known as: pat  </h3>   <p>Translates a given word for padrino admin.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\"># =&gt; t(\"padrino.admin.profile\",  :default =&gt; \"Profile\")\npat(:profile)\n\n# =&gt; t(\"padrino.admin.profile\",  :default =&gt; \"My Profile\")\npat(:profile, \"My Profile\")</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">word</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The specified word to admin translate.  </li> <li> <code class=\"name\">default</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The default fallback if no word is available for the locale.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The translated word for the current locale.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"tag_icon-instance_method\"> #tag_icon(icon, tag = nil) ⇒ String </h3>   <p>Icon's Bootstrap helper.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">tag_icon(:edit, :list)</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">icon</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The specified icon type.  </li> <li> <code class=\"name\">tag</code> <span class=\"type\">(<code>Symbol</code>)</span> <em class=\"default\">(defaults to: <code>nil</code>)</em> —  The HTML tag.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../../string\" title=\"String (class)\">String</a></span></code>)</span> —  HTML tag with prepend icon  </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Helpers/ViewHelpers\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Admin/Helpers/ViewHelpers</a>\n  </p>\n</div>\n","padrino/helpers/taghelpers":"<h1>Module: Padrino::Helpers::TagHelpers </h1>  <h2>Overview</h2>  <p>Helpers related to producing html tags within templates.</p>    <h2>Constant Summary</h2> <dl class=\"constants\"> <dt id=\"ESCAPE_VALUES-constant\" class=\"\">ESCAPE_VALUES =   <p>Tag values escaped to html entities.</p>    </dt> <dd><pre class=\"code\" data-language=\"ruby\">{\n  \"&amp;\" =&gt; \"&amp;amp;\",\n  \"&lt;\" =&gt; \"&amp;lt;\",\n  \"&gt;\" =&gt; \"&amp;gt;\",\n  '\"' =&gt; \"&amp;quot;\"\n}.freeze</pre></dd> <dt id=\"ESCAPE_REGEXP-constant\" class=\"\">ESCAPE_REGEXP =   <p>Cached Regexp for escaping values to avoid rebuilding one on every escape operation.</p>    </dt> <dd><pre class=\"code\" data-language=\"ruby\">Regexp.union(*ESCAPE_VALUES.keys).freeze</pre></dd> <dt id=\"BOOLEAN_ATTRIBUTES-constant\" class=\"\">BOOLEAN_ATTRIBUTES = </dt> <dd><pre class=\"code\" data-language=\"ruby\">[\n  :autoplay,\n  :autofocus,\n  :formnovalidate,\n  :checked,\n  :disabled,\n  :hidden,\n  :loop,\n  :multiple,\n  :muted,\n  :readonly,\n  :required,\n  :selected,\n  :declare,\n  :defer,\n  :ismap,\n  :itemscope,\n  :noresize,\n  :novalidate\n].freeze</pre></dd> <dt id=\"DATA_ATTRIBUTES-constant\" class=\"\">DATA_ATTRIBUTES =   <p>Custom data attributes, feel free to update with yours:</p> <pre class=\"code ruby\" data-language=\"ruby\">Padrino::Helpers::TagHelpers::DATA_ATTRIBUTES.push(:dialog)\ntext_field :foo, :dialog =&gt; true\n# Generates: &lt;input type=\"text\" data-dialog=\"true\" name=\"foo\" /&gt;</pre>    </dt> <dd><pre class=\"code\" data-language=\"ruby\">[\n  :method,\n  :remote,\n  :confirm\n]</pre></dd> <dt id=\"NEWLINE-constant\" class=\"\">NEWLINE =   <p>A html_safe newline string to avoid allocating a new on each concatenation.</p>    </dt> <dd><pre class=\"code\" data-language=\"ruby\">\"\\n\".html_safe.freeze</pre></dd> </dl> <h2> Instance Method Summary  </h2> <ul class=\"summary\"> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"taghelpers#content_tag-instance_method\" title=\"#content_tag (instance method)\">#<strong>content_tag</strong>(name, content = nil, options = nil, &amp;block) ⇒ String</a></code> <span class=\"summary_desc\"> Creates an HTML tag with given name, content, and options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"taghelpers#input_tag-instance_method\" title=\"#input_tag (instance method)\">#<strong>input_tag</strong>(type, options = {}) ⇒ String</a></code> <span class=\"summary_desc\"> Creates an HTML input field with the given type and options. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"taghelpers#safe_content_tag-instance_method\" title=\"#safe_content_tag (instance method)\">#<strong>safe_content_tag</strong>(name, content = nil, options = nil, &amp;block) ⇒ Object</a></code> <span class=\"summary_desc\"> Like #content_tag, but assumes its input to be safe and doesn't escape. </span> </li> <li class=\"public \"> <code class=\"summary_signature\"><a href=\"taghelpers#tag-instance_method\" title=\"#tag (instance method)\">#<strong>tag</strong>(name, options = nil, open = false) ⇒ String</a></code> <span class=\"summary_desc\"> Creates an HTML tag with the given name and options. </span> </li> </ul>  <h2>Instance Method Details</h2> <div class=\"method_details first\"> <h3 class=\"signature first\" id=\"content_tag-instance_method\"> #content_tag(name, content, options = nil) ⇒ String  #content_tag(name, options = nil, &amp;block) ⇒ String  </h3>   <p>Creates an HTML tag with given name, content, and options.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">content_tag(:p, 'Hello World', :class =&gt; 'light')\n\n# =&gt; &lt;p class=\"light\"&gt;\n# =&gt;   Hello World\n# =&gt; &lt;/p&gt;\n\ncontent_tag(:p, :class =&gt; 'dark') do\n  link_to 'Padrino', 'http://www.padrinorb.com'\nend\n\n# =&gt; &lt;p class=\"dark\"&gt;\n# =&gt;   &lt;a href=\"http://www.padrinorb.com\"&gt;Padrino&lt;/a&gt;\n# =&gt; &lt;/p&gt;</pre> </div> <h4 class=\"tag_title\">Overloads:</h4> <ul class=\"overload\"> <li class=\"overload_item\"> <h3 class=\"signature\">#content_tag(name, content, options = nil) ⇒ String </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The name of the HTML tag to create.  </li> <li> <code class=\"name\">content</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  The content inside of the tag.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>nil</code>)</em> —  The HTML options to include in this tag.  </li> </ul> </div> </li> <li class=\"overload_item\"> <h3 class=\"signature\">#content_tag(name, options = nil, &amp;block) ⇒ String </h3>     <div class=\"tags\"> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The name of the HTML tag to create.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>nil</code>)</em> —  The HTML options to include in this tag.  </li> <li> <code class=\"name\">block</code> <span class=\"type\">(<code>Proc</code>)</span> —  The block returning HTML content.  </li> </ul> </div> </li> </ul> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>nil</code>)</em> —  a customizable set of options  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:id</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies a unique identifier for the element.  </li> <li> <code class=\"name\">:class</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies the stylesheet class of the element.  </li> <li> <code class=\"name\">:title</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies the title for the element.  </li> <li> <code class=\"name\">:accesskey</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies a shortcut key to access the element.  </li> <li> <code class=\"name\">:dropzone</code> <span class=\"type\">(<code>Symbol</code>)</span>  —  Specifies what happens when dragged items are dropped on the element. (:copy, :link, :move)  </li> <li> <code class=\"name\">:hidden</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the element is hidden from view.  </li> <li> <code class=\"name\">:draggable</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the element is draggable. (true, false, :auto)  </li> <li> <code class=\"name\">:contenteditable</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the element is editable.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Generated HTML with specified <code>options</code>.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"input_tag-instance_method\"> #input_tag(type, options = {}) ⇒ String </h3>   <p>Creates an HTML input field with the given type and options.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">input_tag :text, :name =&gt; 'handle'\n# =&gt; &lt;input type=\"test\" name=\"handle\" /&gt;\n\ninput_tag :password, :name =&gt; 'password', :size =&gt; 20\n# =&gt; &lt;input type=\"password\" name=\"password\" size=\"20\" /&gt;\n\ninput_tag :text, :name =&gt; 'username', :required =&gt; true, :autofocus =&gt; true\n# =&gt; &lt;input type=\"text\" name=\"username\" required autofocus /&gt;\n\ninput_tag :number, :name =&gt; 'credit_card', :autocomplete =&gt; :off\n# =&gt; &lt;input type=\"number\" name=\"credit_card\" autocomplete=\"off\" /&gt;  </pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">type</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The type of input to create.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>{}</code>)</em> —  The HTML options to include in this input.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:id</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies a unique identifier for the input.  </li> <li> <code class=\"name\">:class</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies the stylesheet class of the input.  </li> <li> <code class=\"name\">:name</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies the name of the input.  </li> <li> <code class=\"name\">:accesskey</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies a shortcut key to access the input.  </li> <li> <code class=\"name\">:tabindex</code> <span class=\"type\">(<code>Integer</code>)</span>  —  Specifies the tab order of the input.  </li> <li> <code class=\"name\">:hidden</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the input is hidden from view.  </li> <li> <code class=\"name\">:spellcheck</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the input should have it's spelling and grammar checked for errors.  </li> <li> <code class=\"name\">:draggable</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the input is draggable. (true, false, :auto)  </li> <li> <code class=\"name\">:pattern</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies the regular expression pattern that the input's value is checked against.  </li> <li> <code class=\"name\">:autocomplete</code> <span class=\"type\">(<code>Symbol</code>)</span>  —  Specifies whether or not the input should have autocomplete enabled. (:on, :off)  </li> <li> <code class=\"name\">:autofocus</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the input should automatically get focus when the page loads.  </li> <li> <code class=\"name\">:required</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the input is required to be completed before the form is submitted.  </li> <li> <code class=\"name\">:readonly</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the input is read only.  </li> <li> <code class=\"name\">:disabled</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the input is disabled.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Generated HTML with specified <code>options</code>.  </li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"safe_content_tag-instance_method\"> #safe_content_tag(name, content = nil, options = nil, &amp;block) ⇒ Object </h3>   <p>Like #content_tag, but assumes its input to be safe and doesn't escape. It also returns safe HTML.</p>   <div class=\"tags\"> <h4 class=\"tag_title\">See Also:</h4> <ul class=\"see\"> <li><span class=\"object_link\"><a href=\"taghelpers#content_tag-instance_method\" title=\"Padrino::Helpers::TagHelpers#content_tag (method)\">#content_tag</a></span></li> </ul> </div> </div> <div class=\"method_details \"> <h3 class=\"signature \" id=\"tag-instance_method\"> #tag(name, options = nil, open = false) ⇒ String </h3>   <p>Creates an HTML tag with the given name and options.</p>   <div class=\"tags\"> <div class=\"examples\"> <h4 class=\"tag_title\">Examples:</h4> <pre class=\"example code\" data-language=\"ruby\">tag :hr, :class =&gt; 'dotted'\n# =&gt; &lt;hr class=\"dotted\" /&gt;\n\ntag :input, :name =&gt; 'username', :type =&gt; :text\n# =&gt; &lt;input name=\"username\" type=\"text\" /&gt;\n\ntag :img, :src =&gt; 'images/pony.jpg', :alt =&gt; 'My Little Pony'\n# =&gt; &lt;img src=\"images/pony.jpg\" alt=\"My Little Pony\" /&gt;\n\ntag :img, :src =&gt; 'sinatra.jpg', :data =&gt; { :nsfw =&gt; false, :geo =&gt; [34.087, -118.407] }\n# =&gt; &lt;img src=\"sinatra.jpg\" data-nsfw=\"false\" data-geo=\"34.087 -118.407\" /&gt;</pre> </div> <h4 class=\"tag_title\">Parameters:</h4> <ul class=\"param\"> <li> <code class=\"name\">name</code> <span class=\"type\">(<code>Symbol</code>)</span> —  The name of the HTML tag to create.  </li> <li> <code class=\"name\">options</code> <span class=\"type\">(<code>Hash</code>)</span> <em class=\"default\">(defaults to: <code>nil</code>)</em> —  The HTML options to include in this tag.  </li> </ul> <h4 class=\"tag_title\">Options Hash (<code>options</code>):</h4> <ul class=\"option\"> <li> <code class=\"name\">:id</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies a unique identifier for the element.  </li> <li> <code class=\"name\">:class</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies the stylesheet class of the element.  </li> <li> <code class=\"name\">:title</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies the title for the element.  </li> <li> <code class=\"name\">:accesskey</code> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span>  —  Specifies a shortcut key to access the element.  </li> <li> <code class=\"name\">:dropzone</code> <span class=\"type\">(<code>Symbol</code>)</span>  —  Specifies what happens when dragged items are dropped on the element. (:copy, :link, :move)  </li> <li> <code class=\"name\">:hidden</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the element is hidden from view.  </li> <li> <code class=\"name\">:draggable</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the element is draggable. (true, false, :auto)  </li> <li> <code class=\"name\">:contenteditable</code> <span class=\"type\">(<code>Boolean</code>)</span>  —  Specifies whether or not the element is editable.  </li> </ul> <h4 class=\"tag_title\">Returns:</h4> <ul class=\"return\"> <li> <span class=\"type\">(<code><span class=\"object_link\"><a href=\"../../string\" title=\"String (class)\">String</a></span></code>)</span> —  Generated HTML with specified <code>options</code>.  </li> </ul> </div> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Padrino<br>Licensed under the MIT License.<br>\n    <a href=\"http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/TagHelpers\" class=\"_attribution-link\">http://www.rubydoc.info/github/padrino/padrino-framework/Padrino/Helpers/TagHelpers</a>\n  </p>\n</div>\n"}