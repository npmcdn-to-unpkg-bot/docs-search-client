{"index":"<h1>jQuery</h1>  <p>jQuery is a fast, small, and feature-rich JavaScript library. It makes things like HTML document traversal and manipulation, event handling, animation, and Ajax much simpler with an easy-to-use API that works across a multitude of browsers. If you're new to jQuery, we recommend that you check out the <a href=\"http://learn.jquery.com/\">jQuery Learning Center</a>.</p> <p>If you're updating to a newer version of jQuery, be sure to read the release notes published on <a href=\"http://blog.jquery.com/\">our blog</a>. If you're coming from a version prior 1.9, you should check out the <a href=\"http://jquery.com/upgrade-guide/1.9/\">1.9 Upgrade Guide</a> as well.</p> <p>Note that this is the API documentation for jQuery core. Other projects have API docs in other locations:</p> <ul> <li><a href=\"http://api.jqueryui.com/\">jQuery UI API docs</a></li> <li><a href=\"http://api.jquerymobile.com\">jQuery Mobile API docs</a></li> <li><a href=\"http://api.qunitjs.com\">QUnit API docs</a></li> </ul>  <article id=\"post-5\" class=\"post-5 post type-post status-publish format-standard hentry category-miscellaneous-traversal category-65 category-75\"> <h2 class=\"entry-title\"> <a href=\"add\" title=\"Permalink to .add()\" rel=\"bookmark\">.add()</a> </h2> <div class=\"entry-summary\"> <p>Create a new jQuery object with elements added to the set of matched elements.</p> </div> </article> <article id=\"post-7\" class=\"post-7 post type-post status-publish format-standard hentry category-miscellaneous-traversal category-84\"> <h2 class=\"entry-title\"> <a href=\"addback\" title=\"Permalink to .addBack()\" rel=\"bookmark\">.addBack()</a> </h2> <div class=\"entry-summary\"> <p>Add the previous set of elements on the stack to the current set, optionally filtered by a selector.</p> </div> </article> <article id=\"post-9\" class=\"post-9 post type-post status-publish format-standard hentry category-attributes category-class-attribute category-css category-65 category-75\"> <h2 class=\"entry-title\"> <a href=\"addclass\" title=\"Permalink to .addClass()\" rel=\"bookmark\">.addClass()</a> </h2> <div class=\"entry-summary\"> <p>Adds the specified class(es) to each element in the set of matched elements.</p> </div> </article> <article id=\"post-11\" class=\"post-11 post type-post status-publish format-standard hentry category-dom-insertion-outside category-65 category-75\"> <h2 class=\"entry-title\"> <a href=\"after\" title=\"Permalink to .after()\" rel=\"bookmark\">.after()</a> </h2> <div class=\"entry-summary\"> <p>Insert content, specified by the parameter, after each element in the set of matched elements.</p> </div> </article> <article id=\"post-13\" class=\"post-13 post type-post status-publish format-standard hentry category-global-ajax-event-handlers category-65\"> <h2 class=\"entry-title\"> <a href=\"ajaxcomplete\" title=\"Permalink to .ajaxComplete()\" rel=\"bookmark\">.ajaxComplete()</a> </h2> <div class=\"entry-summary\"> <p>Register a handler to be called when Ajax requests complete. This is an AjaxEvent.</p> </div> </article> <article id=\"post-15\" class=\"post-15 post type-post status-publish format-standard hentry category-global-ajax-event-handlers category-65\"> <h2 class=\"entry-title\"> <a href=\"ajaxerror\" title=\"Permalink to .ajaxError()\" rel=\"bookmark\">.ajaxError()</a> </h2> <div class=\"entry-summary\"> <p>Register a handler to be called when Ajax requests complete with an error. This is an Ajax Event.</p> </div> </article> <article id=\"post-17\" class=\"post-17 post type-post status-publish format-standard hentry category-global-ajax-event-handlers category-65\"> <h2 class=\"entry-title\"> <a href=\"ajaxsend\" title=\"Permalink to .ajaxSend()\" rel=\"bookmark\">.ajaxSend()</a> </h2> <div class=\"entry-summary\"> <p>Attach a function to be executed before an Ajax request is sent. This is an Ajax Event.</p> </div> </article> <article id=\"post-19\" class=\"post-19 post type-post status-publish format-standard hentry category-global-ajax-event-handlers category-65\"> <h2 class=\"entry-title\"> <a href=\"ajaxstart\" title=\"Permalink to .ajaxStart()\" rel=\"bookmark\">.ajaxStart()</a> </h2> <div class=\"entry-summary\"> <p>Register a handler to be called when the first Ajax request begins. This is an Ajax Event.</p> </div> </article> <article id=\"post-21\" class=\"post-21 post type-post status-publish format-standard hentry category-global-ajax-event-handlers category-65\"> <h2 class=\"entry-title\"> <a href=\"ajaxstop\" title=\"Permalink to .ajaxStop()\" rel=\"bookmark\">.ajaxStop()</a> </h2> <div class=\"entry-summary\"> <p>Register a handler to be called when all Ajax requests have completed. This is an Ajax Event.</p> </div> </article> <article id=\"post-23\" class=\"post-23 post type-post status-publish format-standard hentry category-global-ajax-event-handlers category-65\"> <h2 class=\"entry-title\"> <a href=\"ajaxsuccess\" title=\"Permalink to .ajaxSuccess()\" rel=\"bookmark\">.ajaxSuccess()</a> </h2> <div class=\"entry-summary\"> <p>Attach a function to be executed whenever an Ajax request completes successfully. This is an Ajax Event.</p> </div> </article> <article id=\"post-25\" class=\"post-25 post type-post status-publish format-standard hentry category-basic-css-selectors category-65\"> <h2 class=\"entry-title\"> <a href=\"all-selector\" title=\"Permalink to All Selector (“*”)\" rel=\"bookmark\">All Selector (“*”)</a> </h2> <div class=\"entry-summary\"> <p>Selects all elements.</p> </div> </article> <article id=\"post-27\" class=\"post-27 post type-post status-publish format-standard hentry category-deprecated-18 category-miscellaneous-traversal category-71\"> <h2 class=\"entry-title\"> <a href=\"andself\" title=\"Permalink to .andSelf()\" rel=\"bookmark\">.andSelf()</a> </h2> <div class=\"entry-summary\"> <p>Add the previous set of elements on the stack to the current set.</p> </div> </article> <article id=\"post-29\" class=\"post-29 post type-post status-publish format-standard hentry category-custom-effects category-65\"> <h2 class=\"entry-title\"> <a href=\"animate\" title=\"Permalink to .animate()\" rel=\"bookmark\">.animate()</a> </h2> <div class=\"entry-summary\"> <p>Perform a custom animation of a set of CSS properties.</p> </div> </article> <article id=\"post-31\" class=\"post-31 post type-post status-publish format-standard hentry category-basic-filter-selectors category-jquery-selector-extensions category-71\"> <h2 class=\"entry-title\"> <a href=\"animated-selector\" title=\"Permalink to :animated Selector\" rel=\"bookmark\">:animated Selector</a> </h2> <div class=\"entry-summary\"> <p>Select all elements that are in the progress of an animation at the time the selector is run.</p> </div> </article> <article id=\"post-33\" class=\"post-33 post type-post status-publish format-standard hentry category-dom-insertion-inside category-65 category-75\"> <h2 class=\"entry-title\"> <a href=\"append\" title=\"Permalink to .append()\" rel=\"bookmark\">.append()</a> </h2> <div class=\"entry-summary\"> <p>Insert content, specified by the parameter, to the end of each element in the set of matched elements.</p> </div> </article> <article id=\"post-35\" class=\"post-35 post type-post status-publish format-standard hentry category-dom-insertion-inside category-65\"> <h2 class=\"entry-title\"> <a href=\"appendto\" title=\"Permalink to .appendTo()\" rel=\"bookmark\">.appendTo()</a> </h2> <div class=\"entry-summary\"> <p>Insert every element in the set of matched elements to the end of the target.</p> </div> </article> <article id=\"post-37\" class=\"post-37 post type-post status-publish format-standard hentry category-attributes category-general-attributes category-65 category-67 category-82\"> <h2 class=\"entry-title\"> <a href=\"attr\" title=\"Permalink to .attr()\" rel=\"bookmark\">.attr()</a> </h2> <div class=\"entry-summary\"> <p>Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element.</p> </div> </article> <article id=\"post-39\" class=\"post-39 post type-post status-publish format-standard hentry category-attribute-selectors category-65\"> <h2 class=\"entry-title\"> <a href=\"attribute-contains-prefix-selector\" title=\"Permalink to Attribute Contains Prefix Selector [name|=”value”]\" rel=\"bookmark\">Attribute Contains Prefix Selector [name|=”value”]</a> </h2> <div class=\"entry-summary\"> <p>Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-).</p> </div> </article> <article id=\"post-41\" class=\"post-41 post type-post status-publish format-standard hentry category-attribute-selectors category-65\"> <h2 class=\"entry-title\"> <a href=\"attribute-contains-selector\" title=\"Permalink to Attribute Contains Selector [name*=”value”]\" rel=\"bookmark\">Attribute Contains Selector [name*=”value”]</a> </h2> <div class=\"entry-summary\"> <p>Selects elements that have the specified attribute with a value containing a given substring.</p> </div> </article> <article id=\"post-43\" class=\"post-43 post type-post status-publish format-standard hentry category-attribute-selectors category-65\"> <h2 class=\"entry-title\"> <a href=\"attribute-contains-word-selector\" title=\"Permalink to Attribute Contains Word Selector [name~=”value”]\" rel=\"bookmark\">Attribute Contains Word Selector [name~=”value”]</a> </h2> <div class=\"entry-summary\"> <p>Selects elements that have the specified attribute with a value containing a given word, delimited by spaces.</p> </div> </article> <article id=\"post-45\" class=\"post-45 post type-post status-publish format-standard hentry category-attribute-selectors category-65\"> <h2 class=\"entry-title\"> <a href=\"attribute-ends-with-selector\" title=\"Permalink to Attribute Ends With Selector [name$=”value”]\" rel=\"bookmark\">Attribute Ends With Selector [name$=”value”]</a> </h2> <div class=\"entry-summary\"> <p>Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive.</p> </div> </article> <article id=\"post-47\" class=\"post-47 post type-post status-publish format-standard hentry category-attribute-selectors category-65\"> <h2 class=\"entry-title\"> <a href=\"attribute-equals-selector\" title=\"Permalink to Attribute Equals Selector [name=”value”]\" rel=\"bookmark\">Attribute Equals Selector [name=”value”]</a> </h2> <div class=\"entry-summary\"> <p>Selects elements that have the specified attribute with a value exactly equal to a certain value.</p> </div> </article> <article id=\"post-49\" class=\"post-49 post type-post status-publish format-standard hentry category-attribute-selectors category-jquery-selector-extensions category-65\"> <h2 class=\"entry-title\"> <a href=\"attribute-not-equal-selector\" title=\"Permalink to Attribute Not Equal Selector [name!=”value”]\" rel=\"bookmark\">Attribute Not Equal Selector [name!=”value”]</a> </h2> <div class=\"entry-summary\"> <p>Select elements that either don’t have the specified attribute, or do have the specified attribute but not with a certain value.</p> </div> </article> <article id=\"post-51\" class=\"post-51 post type-post status-publish format-standard hentry category-attribute-selectors category-65\"> <h2 class=\"entry-title\"> <a href=\"attribute-starts-with-selector\" title=\"Permalink to Attribute Starts With Selector [name^=”value”]\" rel=\"bookmark\">Attribute Starts With Selector [name^=”value”]</a> </h2> <div class=\"entry-summary\"> <p>Selects elements that have the specified attribute with a value beginning exactly with a given string.</p> </div> </article> <article id=\"post-53\" class=\"post-53 post type-post status-publish format-standard hentry category-dom-insertion-outside category-65 category-75\"> <h2 class=\"entry-title\"> <a href=\"before\" title=\"Permalink to .before()\" rel=\"bookmark\">.before()</a> </h2> <div class=\"entry-summary\"> <p>Insert content, specified by the parameter, before each element in the set of matched elements.</p> </div> </article> <article id=\"post-55\" class=\"post-55 post type-post status-publish format-standard hentry category-event-handler-attachment category-65 category-75 category-78\"> <h2 class=\"entry-title\"> <a href=\"bind\" title=\"Permalink to .bind()\" rel=\"bookmark\">.bind()</a> </h2> <div class=\"entry-summary\"> <p>Attach a handler to an event for the elements.</p> </div> </article> <article id=\"post-57\" class=\"post-57 post type-post status-publish format-standard hentry category-form-events category-forms category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"blur\" title=\"Permalink to .blur()\" rel=\"bookmark\">.blur()</a> </h2> <div class=\"entry-summary\"> <p>Bind an event handler to the “blur” JavaScript event, or trigger that event on an element.</p> </div> </article> <article id=\"post-59\" class=\"post-59 post type-post status-publish format-standard hentry category-form-selectors category-jquery-selector-extensions category-65\"> <h2 class=\"entry-title\"> <a href=\"button-selector\" title=\"Permalink to :button Selector\" rel=\"bookmark\">:button Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects all button elements and elements of type button.</p> </div> </article> <article id=\"post-61\" class=\"post-61 post type-post status-publish format-standard hentry category-callbacks-object category-83\"> <h2 class=\"entry-title\"> <a href=\"callbacks.add\" title=\"Permalink to callbacks.add()\" rel=\"bookmark\">callbacks.add()</a> </h2> <div class=\"entry-summary\"> <p>Add a callback or a collection of callbacks to a callback list.</p> </div> </article> <article id=\"post-63\" class=\"post-63 post type-post status-publish format-standard hentry category-callbacks-object category-83\"> <h2 class=\"entry-title\"> <a href=\"callbacks.disable\" title=\"Permalink to callbacks.disable()\" rel=\"bookmark\">callbacks.disable()</a> </h2> <div class=\"entry-summary\"> <p>Disable a callback list from doing anything more.</p> </div> </article> <article id=\"post-65\" class=\"post-65 post type-post status-publish format-standard hentry category-callbacks-object category-83\"> <h2 class=\"entry-title\"> <a href=\"callbacks.disabled\" title=\"Permalink to callbacks.disabled()\" rel=\"bookmark\">callbacks.disabled()</a> </h2> <div class=\"entry-summary\"> <p>Determine if the callbacks list has been disabled.</p> </div> </article> <article id=\"post-67\" class=\"post-67 post type-post status-publish format-standard hentry category-callbacks-object category-83\"> <h2 class=\"entry-title\"> <a href=\"callbacks.empty\" title=\"Permalink to callbacks.empty()\" rel=\"bookmark\">callbacks.empty()</a> </h2> <div class=\"entry-summary\"> <p>Remove all of the callbacks from a list.</p> </div> </article> <article id=\"post-69\" class=\"post-69 post type-post status-publish format-standard hentry category-callbacks-object category-83\"> <h2 class=\"entry-title\"> <a href=\"callbacks.fire\" title=\"Permalink to callbacks.fire()\" rel=\"bookmark\">callbacks.fire()</a> </h2> <div class=\"entry-summary\"> <p>Call all of the callbacks with the given arguments.</p> </div> </article> <article id=\"post-71\" class=\"post-71 post type-post status-publish format-standard hentry category-callbacks-object category-83\"> <h2 class=\"entry-title\"> <a href=\"callbacks.fired\" title=\"Permalink to callbacks.fired()\" rel=\"bookmark\">callbacks.fired()</a> </h2> <div class=\"entry-summary\"> <p>Determine if the callbacks have already been called at least once.</p> </div> </article> <article id=\"post-73\" class=\"post-73 post type-post status-publish format-standard hentry category-callbacks-object category-83\"> <h2 class=\"entry-title\"> <a href=\"callbacks.firewith\" title=\"Permalink to callbacks.fireWith()\" rel=\"bookmark\">callbacks.fireWith()</a> </h2> <div class=\"entry-summary\"> <p>Call all callbacks in a list with the given context and arguments.</p> </div> </article> <article id=\"post-75\" class=\"post-75 post type-post status-publish format-standard hentry category-callbacks-object category-83\"> <h2 class=\"entry-title\"> <a href=\"callbacks.has\" title=\"Permalink to callbacks.has()\" rel=\"bookmark\">callbacks.has()</a> </h2> <div class=\"entry-summary\"> <p>Determine whether or not the list has any callbacks attached. If a callback is provided as an argument, determine whether it is in a list.</p> </div> </article> <article id=\"post-77\" class=\"post-77 post type-post status-publish format-standard hentry category-callbacks-object category-83\"> <h2 class=\"entry-title\"> <a href=\"callbacks.lock\" title=\"Permalink to callbacks.lock()\" rel=\"bookmark\">callbacks.lock()</a> </h2> <div class=\"entry-summary\"> <p>Lock a callback list in its current state.</p> </div> </article> <article id=\"post-79\" class=\"post-79 post type-post status-publish format-standard hentry category-callbacks-object category-83\"> <h2 class=\"entry-title\"> <a href=\"callbacks.locked\" title=\"Permalink to callbacks.locked()\" rel=\"bookmark\">callbacks.locked()</a> </h2> <div class=\"entry-summary\"> <p>Determine if the callbacks list has been locked.</p> </div> </article> <article id=\"post-81\" class=\"post-81 post type-post status-publish format-standard hentry category-callbacks-object category-83\"> <h2 class=\"entry-title\"> <a href=\"callbacks.remove\" title=\"Permalink to callbacks.remove()\" rel=\"bookmark\">callbacks.remove()</a> </h2> <div class=\"entry-summary\"> <p>Remove a callback or a collection of callbacks from a callback list.</p> </div> </article> <article id=\"post-83\" class=\"post-83 post type-post status-publish format-standard hentry category-form-events category-forms category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"change\" title=\"Permalink to .change()\" rel=\"bookmark\">.change()</a> </h2> <div class=\"entry-summary\"> <p>Bind an event handler to the “change” JavaScript event, or trigger that event on an element.</p> </div> </article> <article id=\"post-85\" class=\"post-85 post type-post status-publish format-standard hentry category-form-selectors category-jquery-selector-extensions category-65\"> <h2 class=\"entry-title\"> <a href=\"checkbox-selector\" title=\"Permalink to :checkbox Selector\" rel=\"bookmark\">:checkbox Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects all elements of type checkbox.</p> </div> </article> <article id=\"post-87\" class=\"post-87 post type-post status-publish format-standard hentry category-form-selectors category-65\"> <h2 class=\"entry-title\"> <a href=\"checked-selector\" title=\"Permalink to :checked Selector\" rel=\"bookmark\">:checked Selector</a> </h2> <div class=\"entry-summary\"> <p>Matches all elements that are checked or selected.</p> </div> </article> <article id=\"post-89\" class=\"post-89 post type-post status-publish format-standard hentry category-hierarchy-selectors category-65\"> <h2 class=\"entry-title\"> <a href=\"child-selector\" title=\"Permalink to Child Selector (“parent &gt; child”)\" rel=\"bookmark\">Child Selector (“parent &gt; child”)</a> </h2> <div class=\"entry-summary\"> <p>Selects all direct child elements specified by “child” of elements specified by “parent”.</p> </div> </article> <article id=\"post-91\" class=\"post-91 post type-post status-publish format-standard hentry category-tree-traversal category-65\"> <h2 class=\"entry-title\"> <a href=\"children\" title=\"Permalink to .children()\" rel=\"bookmark\">.children()</a> </h2> <div class=\"entry-summary\"> <p>Get the children of each element in the set of matched elements, optionally filtered by a selector.</p> </div> </article> <article id=\"post-93\" class=\"post-93 post type-post status-publish format-standard hentry category-basic-css-selectors category-65\"> <h2 class=\"entry-title\"> <a href=\"class-selector\" title=\"Permalink to Class Selector (“.class”)\" rel=\"bookmark\">Class Selector (“.class”)</a> </h2> <div class=\"entry-summary\"> <p>Selects all elements with the given class.</p> </div> </article> <article id=\"post-95\" class=\"post-95 post type-post status-publish format-standard hentry category-custom-effects category-data category-utilities category-75\"> <h2 class=\"entry-title\"> <a href=\"clearqueue\" title=\"Permalink to .clearQueue()\" rel=\"bookmark\">.clearQueue()</a> </h2> <div class=\"entry-summary\"> <p>Remove from the queue all items that have not yet been run.</p> </div> </article> <article id=\"post-97\" class=\"post-97 post type-post status-publish format-standard hentry category-mouse-events category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"click\" title=\"Permalink to .click()\" rel=\"bookmark\">.click()</a> </h2> <div class=\"entry-summary\"> <p>Bind an event handler to the “click” JavaScript event, or trigger that event on an element.</p> </div> </article> <article id=\"post-99\" class=\"post-99 post type-post status-publish format-standard hentry category-copying category-65 category-80\"> <h2 class=\"entry-title\"> <a href=\"clone\" title=\"Permalink to .clone()\" rel=\"bookmark\">.clone()</a> </h2> <div class=\"entry-summary\"> <p>Create a deep copy of the set of matched elements.</p> </div> </article> <article id=\"post-101\" class=\"post-101 post type-post status-publish format-standard hentry category-tree-traversal category-74 category-75 category-82\"> <h2 class=\"entry-title\"> <a href=\"closest\" title=\"Permalink to .closest()\" rel=\"bookmark\">.closest()</a> </h2> <div class=\"entry-summary\"> <p>For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.</p> </div> </article> <article id=\"post-103\" class=\"post-103 post type-post status-publish format-standard hentry category-content-filter-selector category-70\"> <h2 class=\"entry-title\"> <a href=\"contains-selector\" title=\"Permalink to :contains() Selector\" rel=\"bookmark\">:contains() Selector</a> </h2> <div class=\"entry-summary\"> <p>Select all elements that contain the specified text.</p> </div> </article> <article id=\"post-105\" class=\"post-105 post type-post status-publish format-standard hentry category-miscellaneous-traversal category-71\"> <h2 class=\"entry-title\"> <a href=\"contents\" title=\"Permalink to .contents()\" rel=\"bookmark\">.contents()</a> </h2> <div class=\"entry-summary\"> <p>Get the children of each element in the set of matched elements, including text and comment nodes.</p> </div> </article> <article id=\"post-107\" class=\"post-107 post type-post status-publish format-standard hentry category-deprecated-110 category-internals category-jquery-object-instance-properties category-74\"> <h2 class=\"entry-title\"> <a href=\"context\" title=\"Permalink to .context\" rel=\"bookmark\">.context</a> </h2> <div class=\"entry-summary\"> <p>The DOM node context originally passed to jQuery(); if none was passed then context will likely be the document.</p> </div> </article> <article id=\"post-4093\" class=\"post-4093 post type-post status-publish format-standard hentry category-mouse-events category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"contextmenu\" title=\"Permalink to .contextmenu()\" rel=\"bookmark\">.contextmenu()</a> </h2> <div class=\"entry-summary\"> <p>Bind an event handler to the “contextmenu” JavaScript event, or trigger that event on an element.</p> </div> </article> <article id=\"post-109\" class=\"post-109 post type-post status-publish format-standard hentry category-css category-style-properties category-65 category-75 category-86\"> <h2 class=\"entry-title\"> <a href=\"css\" title=\"Permalink to .css()\" rel=\"bookmark\">.css()</a> </h2> <div class=\"entry-summary\"> <p>Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element.</p> </div> </article> <article id=\"post-111\" class=\"post-111 post type-post status-publish format-standard hentry category-data category-data-storage category-72 category-75 category-78\"> <h2 class=\"entry-title\"> <a href=\"data\" title=\"Permalink to .data()\" rel=\"bookmark\">.data()</a> </h2> <div class=\"entry-summary\"> <p>Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements.</p> </div> </article> <article id=\"post-113\" class=\"post-113 post type-post status-publish format-standard hentry category-mouse-events category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"dblclick\" title=\"Permalink to .dblclick()\" rel=\"bookmark\">.dblclick()</a> </h2> <div class=\"entry-summary\"> <p>Bind an event handler to the “dblclick” JavaScript event, or trigger that event on an element.</p> </div> </article> <article id=\"post-115\" class=\"post-115 post type-post status-publish format-standard hentry category-deferred-object category-82\"> <h2 class=\"entry-title\"> <a href=\"deferred.always\" title=\"Permalink to deferred.always()\" rel=\"bookmark\">deferred.always()</a> </h2> <div class=\"entry-summary\"> <p>Add handlers to be called when the Deferred object is either resolved or rejected.</p> </div> </article> <article id=\"post-117\" class=\"post-117 post type-post status-publish format-standard hentry category-deferred-object category-80\"> <h2 class=\"entry-title\"> <a href=\"deferred.done\" title=\"Permalink to deferred.done()\" rel=\"bookmark\">deferred.done()</a> </h2> <div class=\"entry-summary\"> <p>Add handlers to be called when the Deferred object is resolved.</p> </div> </article> <article id=\"post-119\" class=\"post-119 post type-post status-publish format-standard hentry category-deferred-object category-80\"> <h2 class=\"entry-title\"> <a href=\"deferred.fail\" title=\"Permalink to deferred.fail()\" rel=\"bookmark\">deferred.fail()</a> </h2> <div class=\"entry-summary\"> <p>Add handlers to be called when the Deferred object is rejected.</p> </div> </article> <article id=\"post-121\" class=\"post-121 post type-post status-publish format-standard hentry category-deferred-object category-deprecated-17 category-removed category-80\"> <h2 class=\"entry-title\"> <a href=\"deferred.isrejected\" title=\"Permalink to deferred.isRejected()\" rel=\"bookmark\">deferred.isRejected()</a> </h2> <div class=\"entry-summary\"> <p>Determine whether a Deferred object has been rejected.</p> </div> </article> <article id=\"post-123\" class=\"post-123 post type-post status-publish format-standard hentry category-deferred-object category-deprecated-17 category-removed category-80\"> <h2 class=\"entry-title\"> <a href=\"deferred.isresolved\" title=\"Permalink to deferred.isResolved()\" rel=\"bookmark\">deferred.isResolved()</a> </h2> <div class=\"entry-summary\"> <p>Determine whether a Deferred object has been resolved.</p> </div> </article> <article id=\"post-125\" class=\"post-125 post type-post status-publish format-standard hentry category-deferred-object category-83\"> <h2 class=\"entry-title\"> <a href=\"deferred.notify\" title=\"Permalink to deferred.notify()\" rel=\"bookmark\">deferred.notify()</a> </h2> <div class=\"entry-summary\"> <p>Call the progressCallbacks on a Deferred object with the given args.</p> </div> </article> <article id=\"post-127\" class=\"post-127 post type-post status-publish format-standard hentry category-deferred-object category-83\"> <h2 class=\"entry-title\"> <a href=\"deferred.notifywith\" title=\"Permalink to deferred.notifyWith()\" rel=\"bookmark\">deferred.notifyWith()</a> </h2> <div class=\"entry-summary\"> <p>Call the progressCallbacks on a Deferred object with the given context and args.</p> </div> </article> <article id=\"post-129\" class=\"post-129 post type-post status-publish format-standard hentry category-deferred-object category-deprecated-18 category-82 category-83 category-84\"> <h2 class=\"entry-title\"> <a href=\"deferred.pipe\" title=\"Permalink to deferred.pipe()\" rel=\"bookmark\">deferred.pipe()</a> </h2> <div class=\"entry-summary\"> <p>Utility method to filter and/or chain Deferreds.</p> </div> </article> <article id=\"post-131\" class=\"post-131 post type-post status-publish format-standard hentry category-deferred-object category-83\"> <h2 class=\"entry-title\"> <a href=\"deferred.progress\" title=\"Permalink to deferred.progress()\" rel=\"bookmark\">deferred.progress()</a> </h2> <div class=\"entry-summary\"> <p>Add handlers to be called when the Deferred object generates progress notifications.</p> </div> </article> <article id=\"post-133\" class=\"post-133 post type-post status-publish format-standard hentry category-deferred-object category-80\"> <h2 class=\"entry-title\"> <a href=\"deferred.promise\" title=\"Permalink to deferred.promise()\" rel=\"bookmark\">deferred.promise()</a> </h2> <div class=\"entry-summary\"> <p>Return a Deferred’s Promise object.</p> </div> </article> <article id=\"post-135\" class=\"post-135 post type-post status-publish format-standard hentry category-deferred-object category-80\"> <h2 class=\"entry-title\"> <a href=\"deferred.reject\" title=\"Permalink to deferred.reject()\" rel=\"bookmark\">deferred.reject()</a> </h2> <div class=\"entry-summary\"> <p>Reject a Deferred object and call any failCallbacks with the given args.</p> </div> </article> <article id=\"post-137\" class=\"post-137 post type-post status-publish format-standard hentry category-deferred-object category-80\"> <h2 class=\"entry-title\"> <a href=\"deferred.rejectwith\" title=\"Permalink to deferred.rejectWith()\" rel=\"bookmark\">deferred.rejectWith()</a> </h2> <div class=\"entry-summary\"> <p>Reject a Deferred object and call any failCallbacks with the given context and args.</p> </div> </article> <article id=\"post-139\" class=\"post-139 post type-post status-publish format-standard hentry category-deferred-object category-80\"> <h2 class=\"entry-title\"> <a href=\"deferred.resolve\" title=\"Permalink to deferred.resolve()\" rel=\"bookmark\">deferred.resolve()</a> </h2> <div class=\"entry-summary\"> <p>Resolve a Deferred object and call any doneCallbacks with the given args.</p> </div> </article> <article id=\"post-141\" class=\"post-141 post type-post status-publish format-standard hentry category-deferred-object category-80\"> <h2 class=\"entry-title\"> <a href=\"deferred.resolvewith\" title=\"Permalink to deferred.resolveWith()\" rel=\"bookmark\">deferred.resolveWith()</a> </h2> <div class=\"entry-summary\"> <p>Resolve a Deferred object and call any doneCallbacks with the given context and args.</p> </div> </article> <article id=\"post-143\" class=\"post-143 post type-post status-publish format-standard hentry category-deferred-object category-83\"> <h2 class=\"entry-title\"> <a href=\"deferred.state\" title=\"Permalink to deferred.state()\" rel=\"bookmark\">deferred.state()</a> </h2> <div class=\"entry-summary\"> <p>Determine the current state of a Deferred object.</p> </div> </article> <article id=\"post-145\" class=\"post-145 post type-post status-publish format-standard hentry category-deferred-object category-80 category-83\"> <h2 class=\"entry-title\"> <a href=\"deferred.then\" title=\"Permalink to deferred.then()\" rel=\"bookmark\">deferred.then()</a> </h2> <div class=\"entry-summary\"> <p>Add handlers to be called when the Deferred object is resolved, rejected, or still in progress.</p> </div> </article> <article id=\"post-147\" class=\"post-147 post type-post status-publish format-standard hentry category-custom-effects category-75\"> <h2 class=\"entry-title\"> <a href=\"delay\" title=\"Permalink to .delay()\" rel=\"bookmark\">.delay()</a> </h2> <div class=\"entry-summary\"> <p>Set a timer to delay execution of subsequent items in the queue.</p> </div> </article> <article id=\"post-149\" class=\"post-149 post type-post status-publish format-standard hentry category-event-handler-attachment category-77 category-78\"> <h2 class=\"entry-title\"> <a href=\"delegate\" title=\"Permalink to .delegate()\" rel=\"bookmark\">.delegate()</a> </h2> <div class=\"entry-summary\"> <p>Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.</p> </div> </article> <article id=\"post-151\" class=\"post-151 post type-post status-publish format-standard hentry category-custom-effects category-data category-utilities category-71\"> <h2 class=\"entry-title\"> <a href=\"dequeue\" title=\"Permalink to .dequeue()\" rel=\"bookmark\">.dequeue()</a> </h2> <div class=\"entry-summary\"> <p>Execute the next function on the queue for the matched elements.</p> </div> </article> <article id=\"post-153\" class=\"post-153 post type-post status-publish format-standard hentry category-hierarchy-selectors category-65\"> <h2 class=\"entry-title\"> <a href=\"descendant-selector\" title=\"Permalink to Descendant Selector (“ancestor descendant”)\" rel=\"bookmark\">Descendant Selector (“ancestor descendant”)</a> </h2> <div class=\"entry-summary\"> <p>Selects all elements that are descendants of a given ancestor.</p> </div> </article> <article id=\"post-155\" class=\"post-155 post type-post status-publish format-standard hentry category-dom-removal category-75\"> <h2 class=\"entry-title\"> <a href=\"detach\" title=\"Permalink to .detach()\" rel=\"bookmark\">.detach()</a> </h2> <div class=\"entry-summary\"> <p>Remove the set of matched elements from the DOM.</p> </div> </article> <article id=\"post-157\" class=\"post-157 post type-post status-publish format-standard hentry category-deprecated-17 category-event-handler-attachment category-removed category-74 category-76 category-78\"> <h2 class=\"entry-title\"> <a href=\"die\" title=\"Permalink to .die()\" rel=\"bookmark\">.die()</a> </h2> <div class=\"entry-summary\"> <p>Remove event handlers previously attached using .live() from the elements.</p> </div> </article> <article id=\"post-159\" class=\"post-159 post type-post status-publish format-standard hentry category-form-selectors category-65\"> <h2 class=\"entry-title\"> <a href=\"disabled-selector\" title=\"Permalink to :disabled Selector\" rel=\"bookmark\">:disabled Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects all elements that are disabled.</p> </div> </article> <article id=\"post-161\" class=\"post-161 post type-post status-publish format-standard hentry category-collection-manipulation category-traversing category-65\"> <h2 class=\"entry-title\"> <a href=\"each\" title=\"Permalink to .each()\" rel=\"bookmark\">.each()</a> </h2> <div class=\"entry-summary\"> <p>Iterate over a jQuery object, executing a function for each matched element.</p> </div> </article> <article id=\"post-163\" class=\"post-163 post type-post status-publish format-standard hentry category-basic-css-selectors category-65\"> <h2 class=\"entry-title\"> <a href=\"element-selector\" title=\"Permalink to Element Selector (“element”)\" rel=\"bookmark\">Element Selector (“element”)</a> </h2> <div class=\"entry-summary\"> <p>Selects all elements with the given tag name.</p> </div> </article> <article id=\"post-167\" class=\"post-167 post type-post status-publish format-standard hentry category-dom-removal category-65\"> <h2 class=\"entry-title\"> <a href=\"empty\" title=\"Permalink to .empty()\" rel=\"bookmark\">.empty()</a> </h2> <div class=\"entry-summary\"> <p>Remove all child nodes of the set of matched elements from the DOM.</p> </div> </article> <article id=\"post-165\" class=\"post-165 post type-post status-publish format-standard hentry category-content-filter-selector category-65\"> <h2 class=\"entry-title\"> <a href=\"empty-selector\" title=\"Permalink to :empty Selector\" rel=\"bookmark\">:empty Selector</a> </h2> <div class=\"entry-summary\"> <p>Select all elements that have no children (including text nodes).</p> </div> </article> <article id=\"post-169\" class=\"post-169 post type-post status-publish format-standard hentry category-form-selectors category-65\"> <h2 class=\"entry-title\"> <a href=\"enabled-selector\" title=\"Permalink to :enabled Selector\" rel=\"bookmark\">:enabled Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects all elements that are enabled.</p> </div> </article> <article id=\"post-171\" class=\"post-171 post type-post status-publish format-standard hentry category-miscellaneous-traversal category-65\"> <h2 class=\"entry-title\"> <a href=\"end\" title=\"Permalink to .end()\" rel=\"bookmark\">.end()</a> </h2> <div class=\"entry-summary\"> <p>End the most recent filtering operation in the current chain and return the set of matched elements to its previous state.</p> </div> </article> <article id=\"post-175\" class=\"post-175 post type-post status-publish format-standard hentry category-filtering category-68\"> <h2 class=\"entry-title\"> <a href=\"eq\" title=\"Permalink to .eq()\" rel=\"bookmark\">.eq()</a> </h2> <div class=\"entry-summary\"> <p>Reduce the set of matched elements to the one at the specified index.</p> </div> </article> <article id=\"post-173\" class=\"post-173 post type-post status-publish format-standard hentry category-basic-filter-selectors category-jquery-selector-extensions category-65 category-84\"> <h2 class=\"entry-title\"> <a href=\"eq-selector\" title=\"Permalink to :eq() Selector\" rel=\"bookmark\">:eq() Selector</a> </h2> <div class=\"entry-summary\"> <p>Select the element at index n within the matched set.</p> </div> </article> <article id=\"post-177\" class=\"post-177 post type-post status-publish format-standard hentry category-browser-events category-deprecated-18 category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"error\" title=\"Permalink to .error()\" rel=\"bookmark\">.error()</a> </h2> <div class=\"entry-summary\"> <p>Bind an event handler to the “error” JavaScript event.</p> </div> </article> <article id=\"post-179\" class=\"post-179 post type-post status-publish format-standard hentry category-basic-filter-selectors category-jquery-selector-extensions category-65\"> <h2 class=\"entry-title\"> <a href=\"even-selector\" title=\"Permalink to :even Selector\" rel=\"bookmark\">:even Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects even elements, zero-indexed. See also odd.</p> </div> </article> <article id=\"post-181\" class=\"post-181 post type-post status-publish format-standard hentry category-event-object category-74\"> <h2 class=\"entry-title\"> <a href=\"event.currenttarget\" title=\"Permalink to event.currentTarget\" rel=\"bookmark\">event.currentTarget</a> </h2> <div class=\"entry-summary\"> <p>The current DOM element within the event bubbling phase.</p> </div> </article> <article id=\"post-183\" class=\"post-183 post type-post status-publish format-standard hentry category-event-object category-67\"> <h2 class=\"entry-title\"> <a href=\"event.data\" title=\"Permalink to event.data\" rel=\"bookmark\">event.data</a> </h2> <div class=\"entry-summary\"> <p>An optional object of data passed to an event method when the current executing handler is bound.</p> </div> </article> <article id=\"post-185\" class=\"post-185 post type-post status-publish format-standard hentry category-event-object category-events category-83\"> <h2 class=\"entry-title\"> <a href=\"event.delegatetarget\" title=\"Permalink to event.delegateTarget\" rel=\"bookmark\">event.delegateTarget</a> </h2> <div class=\"entry-summary\"> <p>The element where the currently-called jQuery event handler was attached.</p> </div> </article> <article id=\"post-187\" class=\"post-187 post type-post status-publish format-standard hentry category-event-object category-74\"> <h2 class=\"entry-title\"> <a href=\"event.isdefaultprevented\" title=\"Permalink to event.isDefaultPrevented()\" rel=\"bookmark\">event.isDefaultPrevented()</a> </h2> <div class=\"entry-summary\"> <p>Returns whether event.preventDefault() was ever called on this event object.</p> </div> </article> <article id=\"post-189\" class=\"post-189 post type-post status-publish format-standard hentry category-event-object category-74\"> <h2 class=\"entry-title\"> <a href=\"event.isimmediatepropagationstopped\" title=\"Permalink to event.isImmediatePropagationStopped()\" rel=\"bookmark\">event.isImmediatePropagationStopped()</a> </h2> <div class=\"entry-summary\"> <p>Returns whether event.stopImmediatePropagation() was ever called on this event object.</p> </div> </article> <article id=\"post-191\" class=\"post-191 post type-post status-publish format-standard hentry category-event-object category-74\"> <h2 class=\"entry-title\"> <a href=\"event.ispropagationstopped\" title=\"Permalink to event.isPropagationStopped()\" rel=\"bookmark\">event.isPropagationStopped()</a> </h2> <div class=\"entry-summary\"> <p>Returns whether event.stopPropagation() was ever called on this event object.</p> </div> </article> <article id=\"post-193\" class=\"post-193 post type-post status-publish format-standard hentry category-event-object category-66\"> <h2 class=\"entry-title\"> <a href=\"event.metakey\" title=\"Permalink to event.metaKey\" rel=\"bookmark\">event.metaKey</a> </h2> <div class=\"entry-summary\"> <p>Indicates whether the META key was pressed when the event fired.</p> </div> </article> <article id=\"post-195\" class=\"post-195 post type-post status-publish format-standard hentry category-event-object category-78\"> <h2 class=\"entry-title\"> <a href=\"event.namespace\" title=\"Permalink to event.namespace\" rel=\"bookmark\">event.namespace</a> </h2> <div class=\"entry-summary\"> <p>The namespace specified when the event was triggered.</p> </div> </article> <article id=\"post-197\" class=\"post-197 post type-post status-publish format-standard hentry category-event-object category-66\"> <h2 class=\"entry-title\"> <a href=\"event.pagex\" title=\"Permalink to event.pageX\" rel=\"bookmark\">event.pageX</a> </h2> <div class=\"entry-summary\"> <p>The mouse position relative to the left edge of the document.</p> </div> </article> <article id=\"post-199\" class=\"post-199 post type-post status-publish format-standard hentry category-event-object category-66\"> <h2 class=\"entry-title\"> <a href=\"event.pagey\" title=\"Permalink to event.pageY\" rel=\"bookmark\">event.pageY</a> </h2> <div class=\"entry-summary\"> <p>The mouse position relative to the top edge of the document.</p> </div> </article> <article id=\"post-201\" class=\"post-201 post type-post status-publish format-standard hentry category-event-object category-65\"> <h2 class=\"entry-title\"> <a href=\"event.preventdefault\" title=\"Permalink to event.preventDefault()\" rel=\"bookmark\">event.preventDefault()</a> </h2> <div class=\"entry-summary\"> <p>If this method is called, the default action of the event will not be triggered.</p> </div> </article> <article id=\"post-203\" class=\"post-203 post type-post status-publish format-standard hentry category-event-object category-70\"> <h2 class=\"entry-title\"> <a href=\"event.relatedtarget\" title=\"Permalink to event.relatedTarget\" rel=\"bookmark\">event.relatedTarget</a> </h2> <div class=\"entry-summary\"> <p>The other DOM element involved in the event, if any.</p> </div> </article> <article id=\"post-205\" class=\"post-205 post type-post status-publish format-standard hentry category-event-object category-74\"> <h2 class=\"entry-title\"> <a href=\"event.result\" title=\"Permalink to event.result\" rel=\"bookmark\">event.result</a> </h2> <div class=\"entry-summary\"> <p>The last value returned by an event handler that was triggered by this event, unless the value was undefined.</p> </div> </article> <article id=\"post-207\" class=\"post-207 post type-post status-publish format-standard hentry category-event-object category-74\"> <h2 class=\"entry-title\"> <a href=\"event.stopimmediatepropagation\" title=\"Permalink to event.stopImmediatePropagation()\" rel=\"bookmark\">event.stopImmediatePropagation()</a> </h2> <div class=\"entry-summary\"> <p>Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree.</p> </div> </article> <article id=\"post-209\" class=\"post-209 post type-post status-publish format-standard hentry category-event-object category-65\"> <h2 class=\"entry-title\"> <a href=\"event.stoppropagation\" title=\"Permalink to event.stopPropagation()\" rel=\"bookmark\">event.stopPropagation()</a> </h2> <div class=\"entry-summary\"> <p>Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event.</p> </div> </article> <article id=\"post-211\" class=\"post-211 post type-post status-publish format-standard hentry category-event-object category-65\"> <h2 class=\"entry-title\"> <a href=\"event.target\" title=\"Permalink to event.target\" rel=\"bookmark\">event.target</a> </h2> <div class=\"entry-summary\"> <p>The DOM element that initiated the event.</p> </div> </article> <article id=\"post-213\" class=\"post-213 post type-post status-publish format-standard hentry category-event-object category-73\"> <h2 class=\"entry-title\"> <a href=\"event.timestamp\" title=\"Permalink to event.timeStamp\" rel=\"bookmark\">event.timeStamp</a> </h2> <div class=\"entry-summary\"> <p>The difference in milliseconds between the time the browser created the event and January 1, 1970.</p> </div> </article> <article id=\"post-215\" class=\"post-215 post type-post status-publish format-standard hentry category-event-object category-65\"> <h2 class=\"entry-title\"> <a href=\"event.type\" title=\"Permalink to event.type\" rel=\"bookmark\">event.type</a> </h2> <div class=\"entry-summary\"> <p>Describes the nature of the event.</p> </div> </article> <article id=\"post-217\" class=\"post-217 post type-post status-publish format-standard hentry category-event-object category-69\"> <h2 class=\"entry-title\"> <a href=\"event.which\" title=\"Permalink to event.which\" rel=\"bookmark\">event.which</a> </h2> <div class=\"entry-summary\"> <p>For key or mouse events, this property indicates the specific key or button that was pressed.</p> </div> </article> <article id=\"post-219\" class=\"post-219 post type-post status-publish format-standard hentry category-fading category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"fadein\" title=\"Permalink to .fadeIn()\" rel=\"bookmark\">.fadeIn()</a> </h2> <div class=\"entry-summary\"> <p>Display the matched elements by fading them to opaque.</p> </div> </article> <article id=\"post-221\" class=\"post-221 post type-post status-publish format-standard hentry category-fading category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"fadeout\" title=\"Permalink to .fadeOut()\" rel=\"bookmark\">.fadeOut()</a> </h2> <div class=\"entry-summary\"> <p>Hide the matched elements by fading them to transparent.</p> </div> </article> <article id=\"post-223\" class=\"post-223 post type-post status-publish format-standard hentry category-fading category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"fadeto\" title=\"Permalink to .fadeTo()\" rel=\"bookmark\">.fadeTo()</a> </h2> <div class=\"entry-summary\"> <p>Adjust the opacity of the matched elements.</p> </div> </article> <article id=\"post-225\" class=\"post-225 post type-post status-publish format-standard hentry category-effects category-fading category-79\"> <h2 class=\"entry-title\"> <a href=\"fadetoggle\" title=\"Permalink to .fadeToggle()\" rel=\"bookmark\">.fadeToggle()</a> </h2> <div class=\"entry-summary\"> <p>Display or hide the matched elements by animating their opacity.</p> </div> </article> <article id=\"post-227\" class=\"post-227 post type-post status-publish format-standard hentry category-form-selectors category-jquery-selector-extensions category-65\"> <h2 class=\"entry-title\"> <a href=\"file-selector\" title=\"Permalink to :file Selector\" rel=\"bookmark\">:file Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects all elements of type file.</p> </div> </article> <article id=\"post-229\" class=\"post-229 post type-post status-publish format-standard hentry category-filtering category-65 category-75\"> <h2 class=\"entry-title\"> <a href=\"filter\" title=\"Permalink to .filter()\" rel=\"bookmark\">.filter()</a> </h2> <div class=\"entry-summary\"> <p>Reduce the set of matched elements to those that match the selector or pass the function’s test.</p> </div> </article> <article id=\"post-231\" class=\"post-231 post type-post status-publish format-standard hentry category-tree-traversal category-65 category-82\"> <h2 class=\"entry-title\"> <a href=\"find\" title=\"Permalink to .find()\" rel=\"bookmark\">.find()</a> </h2> <div class=\"entry-summary\"> <p>Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.</p> </div> </article> <article id=\"post-908\" class=\"post-908 post type-post status-publish format-standard hentry category-custom-effects category-86\"> <h2 class=\"entry-title\"> <a href=\"finish\" title=\"Permalink to .finish()\" rel=\"bookmark\">.finish()</a> </h2> <div class=\"entry-summary\"> <p>Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements.</p> </div> </article> <article id=\"post-237\" class=\"post-237 post type-post status-publish format-standard hentry category-filtering category-75\"> <h2 class=\"entry-title\"> <a href=\"first\" title=\"Permalink to .first()\" rel=\"bookmark\">.first()</a> </h2> <div class=\"entry-summary\"> <p>Reduce the set of matched elements to the first in the set.</p> </div> </article> <article id=\"post-233\" class=\"post-233 post type-post status-publish format-standard hentry category-child-filter-selectors category-70\"> <h2 class=\"entry-title\"> <a href=\"first-child-selector\" title=\"Permalink to :first-child Selector\" rel=\"bookmark\">:first-child Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects all elements that are the first child of their parent.</p> </div> </article> <article id=\"post-919\" class=\"post-919 post type-post status-publish format-standard hentry category-child-filter-selectors category-86\"> <h2 class=\"entry-title\"> <a href=\"first-of-type-selector\" title=\"Permalink to :first-of-type Selector\" rel=\"bookmark\">:first-of-type Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects all elements that are the first among siblings of the same element name.</p> </div> </article> <article id=\"post-235\" class=\"post-235 post type-post status-publish format-standard hentry category-basic-filter-selectors category-jquery-selector-extensions category-65\"> <h2 class=\"entry-title\"> <a href=\"first-selector\" title=\"Permalink to :first Selector\" rel=\"bookmark\">:first Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects the first matched DOM element.</p> </div> </article> <article id=\"post-241\" class=\"post-241 post type-post status-publish format-standard hentry category-form-events category-forms category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"focus\" title=\"Permalink to .focus()\" rel=\"bookmark\">.focus()</a> </h2> <div class=\"entry-summary\"> <p>Bind an event handler to the “focus” JavaScript event, or trigger that event on an element.</p> </div> </article> <article id=\"post-239\" class=\"post-239 post type-post status-publish format-standard hentry category-basic-filter-selectors category-form-selectors category-82\"> <h2 class=\"entry-title\"> <a href=\"focus-selector\" title=\"Permalink to :focus Selector\" rel=\"bookmark\">:focus Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects element if it is currently focused.</p> </div> </article> <article id=\"post-243\" class=\"post-243 post type-post status-publish format-standard hentry category-form-events category-forms category-75 category-78\"> <h2 class=\"entry-title\"> <a href=\"focusin\" title=\"Permalink to .focusin()\" rel=\"bookmark\">.focusin()</a> </h2> <div class=\"entry-summary\"> <p>Bind an event handler to the “focusin” event.</p> </div> </article> <article id=\"post-245\" class=\"post-245 post type-post status-publish format-standard hentry category-form-events category-forms category-75 category-78\"> <h2 class=\"entry-title\"> <a href=\"focusout\" title=\"Permalink to .focusout()\" rel=\"bookmark\">.focusout()</a> </h2> <div class=\"entry-summary\"> <p>Bind an event handler to the “focusout” JavaScript event.</p> </div> </article> <article id=\"post-247\" class=\"post-247 post type-post status-publish format-standard hentry category-dom-element-methods category-65\"> <h2 class=\"entry-title\"> <a href=\"get\" title=\"Permalink to .get()\" rel=\"bookmark\">.get()</a> </h2> <div class=\"entry-summary\"> <p>Retrieve the DOM elements matched by the jQuery object.</p> </div> </article> <article id=\"post-249\" class=\"post-249 post type-post status-publish format-standard hentry category-basic-filter-selectors category-jquery-selector-extensions category-65\"> <h2 class=\"entry-title\"> <a href=\"gt-selector\" title=\"Permalink to :gt() Selector\" rel=\"bookmark\">:gt() Selector</a> </h2> <div class=\"entry-summary\"> <p>Select all elements at an index greater than index within the matched set.</p> </div> </article> <article id=\"post-255\" class=\"post-255 post type-post status-publish format-standard hentry category-filtering category-75\"> <h2 class=\"entry-title\"> <a href=\"has\" title=\"Permalink to .has()\" rel=\"bookmark\">.has()</a> </h2> <div class=\"entry-summary\"> <p>Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.</p> </div> </article> <article id=\"post-251\" class=\"post-251 post type-post status-publish format-standard hentry category-attribute-selectors category-65\"> <h2 class=\"entry-title\"> <a href=\"has-attribute-selector\" title=\"Permalink to Has Attribute Selector [name]\" rel=\"bookmark\">Has Attribute Selector [name]</a> </h2> <div class=\"entry-summary\"> <p>Selects elements that have the specified attribute, with any value.</p> </div> </article> <article id=\"post-253\" class=\"post-253 post type-post status-publish format-standard hentry category-content-filter-selector category-jquery-selector-extensions category-70\"> <h2 class=\"entry-title\"> <a href=\"has-selector\" title=\"Permalink to :has() Selector\" rel=\"bookmark\">:has() Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects elements which contain at least one element that matches the specified selector.</p> </div> </article> <article id=\"post-257\" class=\"post-257 post type-post status-publish format-standard hentry category-attributes category-class-attribute category-css category-71\"> <h2 class=\"entry-title\"> <a href=\"hasclass\" title=\"Permalink to .hasClass()\" rel=\"bookmark\">.hasClass()</a> </h2> <div class=\"entry-summary\"> <p>Determine whether any of the matched elements are assigned the given class.</p> </div> </article> <article id=\"post-259\" class=\"post-259 post type-post status-publish format-standard hentry category-basic-filter-selectors category-jquery-selector-extensions category-71\"> <h2 class=\"entry-title\"> <a href=\"header-selector\" title=\"Permalink to :header Selector\" rel=\"bookmark\">:header Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects all elements that are headers, like h1, h2, h3 and so on.</p> </div> </article> <article id=\"post-261\" class=\"post-261 post type-post status-publish format-standard hentry category-css category-dimensions category-style-properties category-65 category-76\"> <h2 class=\"entry-title\"> <a href=\"height\" title=\"Permalink to .height()\" rel=\"bookmark\">.height()</a> </h2> <div class=\"entry-summary\"> <p>Get the current computed height for the first element in the set of matched elements or set the height of every matched element.</p> </div> </article> <article id=\"post-263\" class=\"post-263 post type-post status-publish format-standard hentry category-jquery-selector-extensions category-65 category-visibility-filter-selectors\"> <h2 class=\"entry-title\"> <a href=\"hidden-selector\" title=\"Permalink to :hidden Selector\" rel=\"bookmark\">:hidden Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects all elements that are hidden.</p> </div> </article> <article id=\"post-265\" class=\"post-265 post type-post status-publish format-standard hentry category-basics category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"hide\" title=\"Permalink to .hide()\" rel=\"bookmark\">.hide()</a> </h2> <div class=\"entry-summary\"> <p>Hide the matched elements.</p> </div> </article> <article id=\"post-267\" class=\"post-267 post type-post status-publish format-standard hentry category-mouse-events category-65\"> <h2 class=\"entry-title\"> <a href=\"hover\" title=\"Permalink to .hover()\" rel=\"bookmark\">.hover()</a> </h2> <div class=\"entry-summary\"> <p>Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements.</p> </div> </article> <article id=\"post-269\" class=\"post-269 post type-post status-publish format-standard hentry category-attributes category-dom-insertion-inside category-65 category-75\"> <h2 class=\"entry-title\"> <a href=\"html\" title=\"Permalink to .html()\" rel=\"bookmark\">.html()</a> </h2> <div class=\"entry-summary\"> <p>Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element.</p> </div> </article> <article id=\"post-271\" class=\"post-271 post type-post status-publish format-standard hentry category-basic-css-selectors category-65\"> <h2 class=\"entry-title\"> <a href=\"id-selector\" title=\"Permalink to ID Selector (“#id”)\" rel=\"bookmark\">ID Selector (“#id”)</a> </h2> <div class=\"entry-summary\"> <p>Selects a single element with the given id attribute.</p> </div> </article> <article id=\"post-273\" class=\"post-273 post type-post status-publish format-standard hentry category-form-selectors category-jquery-selector-extensions category-65\"> <h2 class=\"entry-title\"> <a href=\"image-selector\" title=\"Permalink to :image Selector\" rel=\"bookmark\">:image Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects all elements of type image.</p> </div> </article> <article id=\"post-275\" class=\"post-275 post type-post status-publish format-standard hentry category-dom-element-methods category-65 category-75\"> <h2 class=\"entry-title\"> <a href=\"https://api.jquery.com/index/\" title=\"Permalink to .index()\" rel=\"bookmark\">.index()</a> </h2> <div class=\"entry-summary\"> <p>Search for a given element from among the matched elements.</p> </div> </article> <article id=\"post-277\" class=\"post-277 post type-post status-publish format-standard hentry category-css category-dimensions category-style-properties category-73\"> <h2 class=\"entry-title\"> <a href=\"innerheight\" title=\"Permalink to .innerHeight()\" rel=\"bookmark\">.innerHeight()</a> </h2> <div class=\"entry-summary\"> <p>Get the current computed inner height (including padding but not border) for the first element in the set of matched elements or set the inner height of every matched element.</p> </div> </article> <article id=\"post-279\" class=\"post-279 post type-post status-publish format-standard hentry category-css category-dimensions category-style-properties category-73\"> <h2 class=\"entry-title\"> <a href=\"innerwidth\" title=\"Permalink to .innerWidth()\" rel=\"bookmark\">.innerWidth()</a> </h2> <div class=\"entry-summary\"> <p>Get the current computed inner width (including padding but not border) for the first element in the set of matched elements or set the inner width of every matched element.</p> </div> </article> <article id=\"post-281\" class=\"post-281 post type-post status-publish format-standard hentry category-form-selectors category-jquery-selector-extensions category-65\"> <h2 class=\"entry-title\"> <a href=\"input-selector\" title=\"Permalink to :input Selector\" rel=\"bookmark\">:input Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects all input, textarea, select and button elements.</p> </div> </article> <article id=\"post-283\" class=\"post-283 post type-post status-publish format-standard hentry category-dom-insertion-outside category-65\"> <h2 class=\"entry-title\"> <a href=\"insertafter\" title=\"Permalink to .insertAfter()\" rel=\"bookmark\">.insertAfter()</a> </h2> <div class=\"entry-summary\"> <p>Insert every element in the set of matched elements after the target.</p> </div> </article> <article id=\"post-285\" class=\"post-285 post type-post status-publish format-standard hentry category-dom-insertion-outside category-65\"> <h2 class=\"entry-title\"> <a href=\"insertbefore\" title=\"Permalink to .insertBefore()\" rel=\"bookmark\">.insertBefore()</a> </h2> <div class=\"entry-summary\"> <p>Insert every element in the set of matched elements before the target.</p> </div> </article> <article id=\"post-287\" class=\"post-287 post type-post status-publish format-standard hentry category-filtering category-65 category-82 category-83\"> <h2 class=\"entry-title\"> <a href=\"is\" title=\"Permalink to .is()\" rel=\"bookmark\">.is()</a> </h2> <div class=\"entry-summary\"> <p>Check the current matched set of elements against a selector, element, or jQuery object and return true if at least one of these elements matches the given arguments.</p> </div> </article> <article id=\"post-339\" class=\"post-339 post type-post status-publish format-standard hentry category-core category-65 category-75\"> <h2 class=\"entry-title\"> <a href=\"jquery\" title=\"Permalink to jQuery()\" rel=\"bookmark\">jQuery()</a> </h2> <div class=\"entry-summary\"> <p>Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string.</p> </div> </article> <article id=\"post-289\" class=\"post-289 post type-post status-publish format-standard hentry category-internals category-jquery-object-instance-properties\"> <h2 class=\"entry-title\"> <a href=\"jquery-2\" title=\"Permalink to .jquery\" rel=\"bookmark\">.jquery</a> </h2> <div class=\"entry-summary\"> <p>A string containing the jQuery version number.</p> </div> </article> <article id=\"post-291\" class=\"post-291 post type-post status-publish format-standard hentry category-low-level-interface category-65 category-80 category-81\"> <h2 class=\"entry-title\"> <a href=\"jquery.ajax\" title=\"Permalink to jQuery.ajax()\" rel=\"bookmark\">jQuery.ajax()</a> </h2> <div class=\"entry-summary\"> <p>Perform an asynchronous HTTP (Ajax) request.</p> </div> </article> <article id=\"post-293\" class=\"post-293 post type-post status-publish format-standard hentry category-low-level-interface category-80\"> <h2 class=\"entry-title\"> <a href=\"jquery.ajaxprefilter\" title=\"Permalink to jQuery.ajaxPrefilter()\" rel=\"bookmark\">jQuery.ajaxPrefilter()</a> </h2> <div class=\"entry-summary\"> <p>Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax().</p> </div> </article> <article id=\"post-295\" class=\"post-295 post type-post status-publish format-standard hentry category-low-level-interface category-67\"> <h2 class=\"entry-title\"> <a href=\"jquery.ajaxsetup\" title=\"Permalink to jQuery.ajaxSetup()\" rel=\"bookmark\">jQuery.ajaxSetup()</a> </h2> <div class=\"entry-summary\"> <p>Set default values for future Ajax requests. Its use is not recommended.</p> </div> </article> <article id=\"post-297\" class=\"post-297 post type-post status-publish format-standard hentry category-low-level-interface category-80\"> <h2 class=\"entry-title\"> <a href=\"jquery.ajaxtransport\" title=\"Permalink to jQuery.ajaxTransport()\" rel=\"bookmark\">jQuery.ajaxTransport()</a> </h2> <div class=\"entry-summary\"> <p>Creates an object that handles the actual transmission of Ajax data.</p> </div> </article> <article id=\"post-299\" class=\"post-299 post type-post status-publish format-standard hentry category-deprecated-13 category-removed category-utilities category-65\"> <h2 class=\"entry-title\"> <a href=\"jquery.boxmodel\" title=\"Permalink to jQuery.boxModel\" rel=\"bookmark\">jQuery.boxModel</a> </h2> <div class=\"entry-summary\"> <p>States if the current page, in the user’s browser, is being rendered using the W3C CSS Box Model. This property was removed in jQuery 1.8. Please try to use feature detection instead.</p> </div> </article> <article id=\"post-301\" class=\"post-301 post type-post status-publish format-standard hentry category-deprecated-13 category-global-jquery-object-properties category-removed category-utilities category-65 category-69\"> <h2 class=\"entry-title\"> <a href=\"jquery.browser\" title=\"Permalink to jQuery.browser\" rel=\"bookmark\">jQuery.browser</a> </h2> <div class=\"entry-summary\"> <p>Contains flags for the useragent, read from navigator.userAgent. This property was removed in jQuery 1.9 and is available only through the jQuery.migrate plugin. Please try to use feature detection instead.</p> </div> </article> <article id=\"post-303\" class=\"post-303 post type-post status-publish format-standard hentry category-callbacks-object category-83\"> <h2 class=\"entry-title\"> <a href=\"jquery.callbacks\" title=\"Permalink to jQuery.Callbacks()\" rel=\"bookmark\">jQuery.Callbacks()</a> </h2> <div class=\"entry-summary\"> <p>A multi-purpose callbacks list object that provides a powerful way to manage callback lists.</p> </div> </article> <article id=\"post-305\" class=\"post-305 post type-post status-publish format-standard hentry category-utilities category-75\"> <h2 class=\"entry-title\"> <a href=\"jquery.contains\" title=\"Permalink to jQuery.contains()\" rel=\"bookmark\">jQuery.contains()</a> </h2> <div class=\"entry-summary\"> <p>Check to see if a DOM element is a descendant of another DOM element.</p> </div> </article> <article id=\"post-307\" class=\"post-307 post type-post status-publish format-standard hentry category-css category-78\"> <h2 class=\"entry-title\"> <a href=\"jquery.csshooks\" title=\"Permalink to jQuery.cssHooks\" rel=\"bookmark\">jQuery.cssHooks</a> </h2> <div class=\"entry-summary\"> <p>Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties.</p> </div> </article> <article id=\"post-3704\" class=\"post-3704 post type-post status-publish format-standard hentry category-css category-style-properties category-78\"> <h2 class=\"entry-title\"> <a href=\"jquery.cssnumber\" title=\"Permalink to jQuery.cssNumber\" rel=\"bookmark\">jQuery.cssNumber</a> </h2> <div class=\"entry-summary\"> <p>An object containing all CSS properties that may be used without a unit. The .css() method uses this object to see if it may append px to unitless values.</p> </div> </article> <article id=\"post-309\" class=\"post-309 post type-post status-publish format-standard hentry category-data category-utilities category-72 category-75 category-78\"> <h2 class=\"entry-title\"> <a href=\"jquery.data\" title=\"Permalink to jQuery.data()\" rel=\"bookmark\">jQuery.data()</a> </h2> <div class=\"entry-summary\"> <p>Store arbitrary data associated with the specified element and/or return the value that was set.</p> </div> </article> <article id=\"post-311\" class=\"post-311 post type-post status-publish format-standard hentry category-deferred-object category-80\"> <h2 class=\"entry-title\"> <a href=\"jquery.deferred\" title=\"Permalink to jQuery.Deferred()\" rel=\"bookmark\">jQuery.Deferred()</a> </h2> <div class=\"entry-summary\"> <p>A factory function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function.</p> </div> </article> <article id=\"post-313\" class=\"post-313 post type-post status-publish format-standard hentry category-data category-utilities category-74\"> <h2 class=\"entry-title\"> <a href=\"jquery.dequeue\" title=\"Permalink to jQuery.dequeue()\" rel=\"bookmark\">jQuery.dequeue()</a> </h2> <div class=\"entry-summary\"> <p>Execute the next function on the queue for the matched element.</p> </div> </article> <article id=\"post-315\" class=\"post-315 post type-post status-publish format-standard hentry category-utilities category-65\"> <h2 class=\"entry-title\"> <a href=\"jquery.each\" title=\"Permalink to jQuery.each()\" rel=\"bookmark\">jQuery.each()</a> </h2> <div class=\"entry-summary\"> <p>A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function’s arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.</p> </div> </article> <article id=\"post-317\" class=\"post-317 post type-post status-publish format-standard hentry category-internals category-76\"> <h2 class=\"entry-title\"> <a href=\"jquery.error\" title=\"Permalink to jQuery.error()\" rel=\"bookmark\">jQuery.error()</a> </h2> <div class=\"entry-summary\"> <p>Takes a string and throws an exception containing it.</p> </div> </article> <article id=\"post-4232\" class=\"post-4232 post type-post status-publish format-standard hentry category-css category-95\"> <h2 class=\"entry-title\"> <a href=\"jquery.escapeselector\" title=\"Permalink to jQuery.escapeSelector()\" rel=\"bookmark\">jQuery.escapeSelector()</a> </h2> <div class=\"entry-summary\"> <p>Escapes any character that has a special meaning in a CSS selector.</p> </div> </article> <article id=\"post-319\" class=\"post-319 post type-post status-publish format-standard hentry category-utilities category-65\"> <h2 class=\"entry-title\"> <a href=\"jquery.extend\" title=\"Permalink to jQuery.extend()\" rel=\"bookmark\">jQuery.extend()</a> </h2> <div class=\"entry-summary\"> <p>Merge the contents of two or more objects together into the first object.</p> </div> </article> <article id=\"post-1477\" class=\"post-1477 post type-post status-publish format-standard hentry category-utilities category-65\"> <h2 class=\"entry-title\"> <a href=\"jquery.fn.extend\" title=\"Permalink to jQuery.fn.extend()\" rel=\"bookmark\">jQuery.fn.extend()</a> </h2> <div class=\"entry-summary\"> <p>Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods.</p> </div> </article> <article id=\"post-321\" class=\"post-321 post type-post status-publish format-standard hentry category-custom-effects category-global-jquery-object-properties category-78\"> <h2 class=\"entry-title\"> <a href=\"jquery.fx.interval\" title=\"Permalink to jQuery.fx.interval\" rel=\"bookmark\">jQuery.fx.interval</a> </h2> <div class=\"entry-summary\"> <p>The rate (in milliseconds) at which animations fire.</p> </div> </article> <article id=\"post-323\" class=\"post-323 post type-post status-publish format-standard hentry category-custom-effects category-global-jquery-object-properties category-74\"> <h2 class=\"entry-title\"> <a href=\"jquery.fx.off\" title=\"Permalink to jQuery.fx.off\" rel=\"bookmark\">jQuery.fx.off</a> </h2> <div class=\"entry-summary\"> <p>Globally disable all animations.</p> </div> </article> <article id=\"post-325\" class=\"post-325 post type-post status-publish format-standard hentry category-shorthand-methods category-65 category-80\"> <h2 class=\"entry-title\"> <a href=\"jquery.get\" title=\"Permalink to jQuery.get()\" rel=\"bookmark\">jQuery.get()</a> </h2> <div class=\"entry-summary\"> <p>Load data from the server using a HTTP GET request.</p> </div> </article> <article id=\"post-327\" class=\"post-327 post type-post status-publish format-standard hentry category-shorthand-methods category-65 category-80\"> <h2 class=\"entry-title\"> <a href=\"jquery.getjson\" title=\"Permalink to jQuery.getJSON()\" rel=\"bookmark\">jQuery.getJSON()</a> </h2> <div class=\"entry-summary\"> <p>Load JSON-encoded data from the server using a GET HTTP request.</p> </div> </article> <article id=\"post-329\" class=\"post-329 post type-post status-publish format-standard hentry category-shorthand-methods category-65 category-80\"> <h2 class=\"entry-title\"> <a href=\"jquery.getscript\" title=\"Permalink to jQuery.getScript()\" rel=\"bookmark\">jQuery.getScript()</a> </h2> <div class=\"entry-summary\"> <p>Load a JavaScript file from the server using a GET HTTP request, then execute it.</p> </div> </article> <article id=\"post-331\" class=\"post-331 post type-post status-publish format-standard hentry category-utilities category-66\"> <h2 class=\"entry-title\"> <a href=\"jquery.globaleval\" title=\"Permalink to jQuery.globalEval()\" rel=\"bookmark\">jQuery.globalEval()</a> </h2> <div class=\"entry-summary\"> <p>Execute some JavaScript code globally.</p> </div> </article> <article id=\"post-333\" class=\"post-333 post type-post status-publish format-standard hentry category-utilities category-65\"> <h2 class=\"entry-title\"> <a href=\"jquery.grep\" title=\"Permalink to jQuery.grep()\" rel=\"bookmark\">jQuery.grep()</a> </h2> <div class=\"entry-summary\"> <p>Finds the elements of an array which satisfy a filter function. The original array is not affected.</p> </div> </article> <article id=\"post-335\" class=\"post-335 post type-post status-publish format-standard hentry category-data category-80\"> <h2 class=\"entry-title\"> <a href=\"jquery.hasdata\" title=\"Permalink to jQuery.hasData()\" rel=\"bookmark\">jQuery.hasData()</a> </h2> <div class=\"entry-summary\"> <p>Determine whether an element has any jQuery data associated with it.</p> </div> </article> <article id=\"post-337\" class=\"post-337 post type-post status-publish format-standard hentry category-core category-82\"> <h2 class=\"entry-title\"> <a href=\"jquery.holdready\" title=\"Permalink to jQuery.holdReady()\" rel=\"bookmark\">jQuery.holdReady()</a> </h2> <div class=\"entry-summary\"> <p>Holds or releases the execution of jQuery’s ready event.</p> </div> </article> <article id=\"post-4171\" class=\"post-4171 post type-post status-publish format-standard hentry category-manipulation\"> <h2 class=\"entry-title\"> <a href=\"jquery.htmlprefilter\" title=\"Permalink to jQuery.htmlPrefilter()\" rel=\"bookmark\">jQuery.htmlPrefilter()</a> </h2> <div class=\"entry-summary\"> <p>Modify and filter HTML strings passed through jQuery manipulation methods.</p> </div> </article> <article id=\"post-341\" class=\"post-341 post type-post status-publish format-standard hentry category-utilities category-71\"> <h2 class=\"entry-title\"> <a href=\"jquery.inarray\" title=\"Permalink to jQuery.inArray()\" rel=\"bookmark\">jQuery.inArray()</a> </h2> <div class=\"entry-summary\"> <p>Search for a specified value within an array and return its index (or -1 if not found).</p> </div> </article> <article id=\"post-343\" class=\"post-343 post type-post status-publish format-standard hentry category-utilities category-74\"> <h2 class=\"entry-title\"> <a href=\"jquery.isarray\" title=\"Permalink to jQuery.isArray()\" rel=\"bookmark\">jQuery.isArray()</a> </h2> <div class=\"entry-summary\"> <p>Determine whether the argument is an array.</p> </div> </article> <article id=\"post-345\" class=\"post-345 post type-post status-publish format-standard hentry category-utilities category-75\"> <h2 class=\"entry-title\"> <a href=\"jquery.isemptyobject\" title=\"Permalink to jQuery.isEmptyObject()\" rel=\"bookmark\">jQuery.isEmptyObject()</a> </h2> <div class=\"entry-summary\"> <p>Check to see if an object is empty (contains no enumerable properties).</p> </div> </article> <article id=\"post-347\" class=\"post-347 post type-post status-publish format-standard hentry category-utilities category-71\"> <h2 class=\"entry-title\"> <a href=\"jquery.isfunction\" title=\"Permalink to jQuery.isFunction()\" rel=\"bookmark\">jQuery.isFunction()</a> </h2> <div class=\"entry-summary\"> <p>Determine if the argument passed is a JavaScript function object.</p> </div> </article> <article id=\"post-349\" class=\"post-349 post type-post status-publish format-standard hentry category-utilities category-83\"> <h2 class=\"entry-title\"> <a href=\"jquery.isnumeric\" title=\"Permalink to jQuery.isNumeric()\" rel=\"bookmark\">jQuery.isNumeric()</a> </h2> <div class=\"entry-summary\"> <p>Determines whether its argument represents a JavaScript number.</p> </div> </article> <article id=\"post-351\" class=\"post-351 post type-post status-publish format-standard hentry category-utilities category-75\"> <h2 class=\"entry-title\"> <a href=\"jquery.isplainobject\" title=\"Permalink to jQuery.isPlainObject()\" rel=\"bookmark\">jQuery.isPlainObject()</a> </h2> <div class=\"entry-summary\"> <p>Check to see if an object is a plain object (created using “{}” or “new Object”).</p> </div> </article> <article id=\"post-353\" class=\"post-353 post type-post status-publish format-standard hentry category-utilities category-78\"> <h2 class=\"entry-title\"> <a href=\"jquery.iswindow\" title=\"Permalink to jQuery.isWindow()\" rel=\"bookmark\">jQuery.isWindow()</a> </h2> <div class=\"entry-summary\"> <p>Determine whether the argument is a window.</p> </div> </article> <article id=\"post-355\" class=\"post-355 post type-post status-publish format-standard hentry category-utilities category-70\"> <h2 class=\"entry-title\"> <a href=\"jquery.isxmldoc\" title=\"Permalink to jQuery.isXMLDoc()\" rel=\"bookmark\">jQuery.isXMLDoc()</a> </h2> <div class=\"entry-summary\"> <p>Check to see if a DOM node is within an XML document (or is an XML document).</p> </div> </article> <article id=\"post-357\" class=\"post-357 post type-post status-publish format-standard hentry category-utilities category-71\"> <h2 class=\"entry-title\"> <a href=\"jquery.makearray\" title=\"Permalink to jQuery.makeArray()\" rel=\"bookmark\">jQuery.makeArray()</a> </h2> <div class=\"entry-summary\"> <p>Convert an array-like object into a true JavaScript array.</p> </div> </article> <article id=\"post-359\" class=\"post-359 post type-post status-publish format-standard hentry category-utilities category-65 category-82\"> <h2 class=\"entry-title\"> <a href=\"jquery.map\" title=\"Permalink to jQuery.map()\" rel=\"bookmark\">jQuery.map()</a> </h2> <div class=\"entry-summary\"> <p>Translate all items in an array or object to new array of items.</p> </div> </article> <article id=\"post-361\" class=\"post-361 post type-post status-publish format-standard hentry category-utilities category-65\"> <h2 class=\"entry-title\"> <a href=\"jquery.merge\" title=\"Permalink to jQuery.merge()\" rel=\"bookmark\">jQuery.merge()</a> </h2> <div class=\"entry-summary\"> <p>Merge the contents of two arrays together into the first array.</p> </div> </article> <article id=\"post-363\" class=\"post-363 post type-post status-publish format-standard hentry category-core category-setup-methods category-65\"> <h2 class=\"entry-title\"> <a href=\"jquery.noconflict\" title=\"Permalink to jQuery.noConflict()\" rel=\"bookmark\">jQuery.noConflict()</a> </h2> <div class=\"entry-summary\"> <p>Relinquish jQuery’s control of the $ variable.</p> </div> </article> <article id=\"post-365\" class=\"post-365 post type-post status-publish format-standard hentry category-utilities category-75\"> <h2 class=\"entry-title\"> <a href=\"jquery.noop\" title=\"Permalink to jQuery.noop()\" rel=\"bookmark\">jQuery.noop()</a> </h2> <div class=\"entry-summary\"> <p>An empty function.</p> </div> </article> <article id=\"post-367\" class=\"post-367 post type-post status-publish format-standard hentry category-utilities category-78\"> <h2 class=\"entry-title\"> <a href=\"jquery.now\" title=\"Permalink to jQuery.now()\" rel=\"bookmark\">jQuery.now()</a> </h2> <div class=\"entry-summary\"> <p>Return a number representing the current time.</p> </div> </article> <article id=\"post-369\" class=\"post-369 post type-post status-publish format-standard hentry category-collection-manipulation category-forms category-helper-functions category-71 category-75\"> <h2 class=\"entry-title\"> <a href=\"jquery.param\" title=\"Permalink to jQuery.param()\" rel=\"bookmark\">jQuery.param()</a> </h2> <div class=\"entry-summary\"> <p>Create a serialized representation of an array, a plain object, or a jQuery object suitable for use in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input elements with name/value properties.</p> </div> </article> <article id=\"post-901\" class=\"post-901 post type-post status-publish format-standard hentry category-utilities category-84\"> <h2 class=\"entry-title\"> <a href=\"jquery.parsehtml\" title=\"Permalink to jQuery.parseHTML()\" rel=\"bookmark\">jQuery.parseHTML()</a> </h2> <div class=\"entry-summary\"> <p>Parses a string into an array of DOM nodes.</p> </div> </article> <article id=\"post-371\" class=\"post-371 post type-post status-publish format-standard hentry category-utilities category-76\"> <h2 class=\"entry-title\"> <a href=\"jquery.parsejson\" title=\"Permalink to jQuery.parseJSON()\" rel=\"bookmark\">jQuery.parseJSON()</a> </h2> <div class=\"entry-summary\"> <p>Takes a well-formed JSON string and returns the resulting JavaScript value.</p> </div> </article> <article id=\"post-373\" class=\"post-373 post type-post status-publish format-standard hentry category-utilities category-80\"> <h2 class=\"entry-title\"> <a href=\"jquery.parsexml\" title=\"Permalink to jQuery.parseXML()\" rel=\"bookmark\">jQuery.parseXML()</a> </h2> <div class=\"entry-summary\"> <p>Parses a string into an XML document.</p> </div> </article> <article id=\"post-375\" class=\"post-375 post type-post status-publish format-standard hentry category-shorthand-methods category-65 category-80\"> <h2 class=\"entry-title\"> <a href=\"jquery.post\" title=\"Permalink to jQuery.post()\" rel=\"bookmark\">jQuery.post()</a> </h2> <div class=\"entry-summary\"> <p>Load data from the server using a HTTP POST request.</p> </div> </article> <article id=\"post-377\" class=\"post-377 post type-post status-publish format-standard hentry category-event-handler-attachment category-utilities category-75 category-82\"> <h2 class=\"entry-title\"> <a href=\"jquery.proxy\" title=\"Permalink to jQuery.proxy()\" rel=\"bookmark\">jQuery.proxy()</a> </h2> <div class=\"entry-summary\"> <p>Takes a function and returns a new one that will always have a particular context.</p> </div> </article> <article id=\"post-379\" class=\"post-379 post type-post status-publish format-standard hentry category-data category-utilities category-74\"> <h2 class=\"entry-title\"> <a href=\"jquery.queue\" title=\"Permalink to jQuery.queue()\" rel=\"bookmark\">jQuery.queue()</a> </h2> <div class=\"entry-summary\"> <p>Show or manipulate the queue of functions to be executed on the matched element.</p> </div> </article> <article id=\"post-4250\" class=\"post-4250 post type-post status-publish format-standard hentry category-core category-96\"> <h2 class=\"entry-title\"> <a href=\"jquery.readyexception\" title=\"Permalink to jQuery.readyException()\" rel=\"bookmark\">jQuery.readyException()</a> </h2> <div class=\"entry-summary\"> <p>Handles errors thrown synchronously in functions wrapped in jQuery().</p> </div> </article> <article id=\"post-381\" class=\"post-381 post type-post status-publish format-standard hentry category-data category-utilities category-72\"> <h2 class=\"entry-title\"> <a href=\"jquery.removedata\" title=\"Permalink to jQuery.removeData()\" rel=\"bookmark\">jQuery.removeData()</a> </h2> <div class=\"entry-summary\"> <p>Remove a previously-stored piece of data.</p> </div> </article> <article id=\"post-4175\" class=\"post-4175 post type-post status-publish format-standard hentry category-custom-effects category-65 category-67\"> <h2 class=\"entry-title\"> <a href=\"jquery.speed\" title=\"Permalink to jQuery.speed\" rel=\"bookmark\">jQuery.speed</a> </h2> <div class=\"entry-summary\"> <p>Creates an object containing a set of properties ready to be used in the definition of custom animations.</p> </div> </article> <article id=\"post-383\" class=\"post-383 post type-post status-publish format-standard hentry category-core category-deprecated-17 category-removed category-80\"> <h2 class=\"entry-title\"> <a href=\"jquery.sub\" title=\"Permalink to jQuery.sub()\" rel=\"bookmark\">jQuery.sub()</a> </h2> <div class=\"entry-summary\"> <p>Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object.</p> </div> </article> <article id=\"post-385\" class=\"post-385 post type-post status-publish format-standard hentry category-deprecated-19 category-global-jquery-object-properties category-utilities category-74 category-81\"> <h2 class=\"entry-title\"> <a href=\"jquery.support\" title=\"Permalink to jQuery.support\" rel=\"bookmark\">jQuery.support</a> </h2> <div class=\"entry-summary\"> <p>A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery’s internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project’s feature-detection needs, we strongly recommend the use of an external library such as Modernizr instead of dependency on properties in jQuery.support.</p> </div> </article> <article id=\"post-387\" class=\"post-387 post type-post status-publish format-standard hentry category-utilities category-65\"> <h2 class=\"entry-title\"> <a href=\"jquery.trim\" title=\"Permalink to jQuery.trim()\" rel=\"bookmark\">jQuery.trim()</a> </h2> <div class=\"entry-summary\"> <p>Remove the whitespace from the beginning and end of a string.</p> </div> </article> <article id=\"post-389\" class=\"post-389 post type-post status-publish format-standard hentry category-utilities category-78\"> <h2 class=\"entry-title\"> <a href=\"jquery.type\" title=\"Permalink to jQuery.type()\" rel=\"bookmark\">jQuery.type()</a> </h2> <div class=\"entry-summary\"> <p>Determine the internal JavaScript [[Class]] of an object.</p> </div> </article> <article id=\"post-391\" class=\"post-391 post type-post status-publish format-standard hentry category-utilities category-69\"> <h2 class=\"entry-title\"> <a href=\"jquery.unique\" title=\"Permalink to jQuery.unique()\" rel=\"bookmark\">jQuery.unique()</a> </h2> <div class=\"entry-summary\"> <p>Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers.</p> </div> </article> <article id=\"post-4178\" class=\"post-4178 post type-post status-publish format-standard hentry category-utilities\"> <h2 class=\"entry-title\"> <a href=\"jquery.uniquesort\" title=\"Permalink to jQuery.uniqueSort()\" rel=\"bookmark\">jQuery.uniqueSort()</a> </h2> <div class=\"entry-summary\"> <p>Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers.</p> </div> </article> <article id=\"post-393\" class=\"post-393 post type-post status-publish format-standard hentry category-core category-deferred-object category-80\"> <h2 class=\"entry-title\"> <a href=\"jquery.when\" title=\"Permalink to jQuery.when()\" rel=\"bookmark\">jQuery.when()</a> </h2> <div class=\"entry-summary\"> <p>Provides a way to execute callback functions based on zero or more objects, usually Deferred objects that represent asynchronous events.</p> </div> </article> <article id=\"post-395\" class=\"post-395 post type-post status-publish format-standard hentry category-keyboard-events category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"keydown\" title=\"Permalink to .keydown()\" rel=\"bookmark\">.keydown()</a> </h2> <div class=\"entry-summary\"> <p>Bind an event handler to the “keydown” JavaScript event, or trigger that event on an element.</p> </div> </article> <article id=\"post-397\" class=\"post-397 post type-post status-publish format-standard hentry category-keyboard-events category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"keypress\" title=\"Permalink to .keypress()\" rel=\"bookmark\">.keypress()</a> </h2> <div class=\"entry-summary\"> <p>Bind an event handler to the “keypress” JavaScript event, or trigger that event on an element.</p> </div> </article> <article id=\"post-399\" class=\"post-399 post type-post status-publish format-standard hentry category-keyboard-events category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"keyup\" title=\"Permalink to .keyup()\" rel=\"bookmark\">.keyup()</a> </h2> <div class=\"entry-summary\"> <p>Bind an event handler to the “keyup” JavaScript event, or trigger that event on an element.</p> </div> </article> <article id=\"post-920\" class=\"post-920 post type-post status-publish format-standard hentry category-basic-filter-selectors category-86\"> <h2 class=\"entry-title\"> <a href=\"lang-selector\" title=\"Permalink to :lang() Selector\" rel=\"bookmark\">:lang() Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects all elements of the specified language.</p> </div> </article> <article id=\"post-405\" class=\"post-405 post type-post status-publish format-standard hentry category-filtering category-75\"> <h2 class=\"entry-title\"> <a href=\"last\" title=\"Permalink to .last()\" rel=\"bookmark\">.last()</a> </h2> <div class=\"entry-summary\"> <p>Reduce the set of matched elements to the final one in the set.</p> </div> </article> <article id=\"post-401\" class=\"post-401 post type-post status-publish format-standard hentry category-child-filter-selectors category-70\"> <h2 class=\"entry-title\"> <a href=\"last-child-selector\" title=\"Permalink to :last-child Selector\" rel=\"bookmark\">:last-child Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects all elements that are the last child of their parent.</p> </div> </article> <article id=\"post-909\" class=\"post-909 post type-post status-publish format-standard hentry category-child-filter-selectors category-86\"> <h2 class=\"entry-title\"> <a href=\"last-of-type-selector\" title=\"Permalink to :last-of-type Selector\" rel=\"bookmark\">:last-of-type Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects all elements that are the last among siblings of the same element name.</p> </div> </article> <article id=\"post-403\" class=\"post-403 post type-post status-publish format-standard hentry category-basic-filter-selectors category-jquery-selector-extensions category-65\"> <h2 class=\"entry-title\"> <a href=\"last-selector\" title=\"Permalink to :last Selector\" rel=\"bookmark\">:last Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects the last matched element.</p> </div> </article> <article id=\"post-407\" class=\"post-407 post type-post status-publish format-standard hentry category-jquery-object-instance-properties category-65\"> <h2 class=\"entry-title\"> <a href=\"length\" title=\"Permalink to .length\" rel=\"bookmark\">.length</a> </h2> <div class=\"entry-summary\"> <p>The number of elements in the jQuery object.</p> </div> </article> <article id=\"post-409\" class=\"post-409 post type-post status-publish format-standard hentry category-deprecated-17 category-event-handler-attachment category-removed category-74\"> <h2 class=\"entry-title\"> <a href=\"live\" title=\"Permalink to .live()\" rel=\"bookmark\">.live()</a> </h2> <div class=\"entry-summary\"> <p>Attach an event handler for all elements which match the current selector, now and in the future.</p> </div> </article> <article id=\"post-413\" class=\"post-413 post type-post status-publish format-standard hentry category-shorthand-methods category-65\"> <h2 class=\"entry-title\"> <a href=\"load\" title=\"Permalink to .load()\" rel=\"bookmark\">.load()</a> </h2> <div class=\"entry-summary\"> <p>Load data from the server and place the returned HTML into the matched element.</p> </div> </article> <article id=\"post-411\" class=\"post-411 post type-post status-publish format-standard hentry category-deprecated-18 category-document-loading category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"load-event\" title=\"Permalink to .load()\" rel=\"bookmark\">.load()</a> </h2> <div class=\"entry-summary\"> <p>Bind an event handler to the “load” JavaScript event.</p> </div> </article> <article id=\"post-415\" class=\"post-415 post type-post status-publish format-standard hentry category-basic-filter-selectors category-jquery-selector-extensions category-65\"> <h2 class=\"entry-title\"> <a href=\"lt-selector\" title=\"Permalink to :lt() Selector\" rel=\"bookmark\">:lt() Selector</a> </h2> <div class=\"entry-summary\"> <p>Select all elements at an index less than index within the matched set.</p> </div> </article> <article id=\"post-417\" class=\"post-417 post type-post status-publish format-standard hentry category-filtering category-71\"> <h2 class=\"entry-title\"> <a href=\"map\" title=\"Permalink to .map()\" rel=\"bookmark\">.map()</a> </h2> <div class=\"entry-summary\"> <p>Pass each element in the current matched set through a function, producing a new jQuery object containing the return values.</p> </div> </article> <article id=\"post-419\" class=\"post-419 post type-post status-publish format-standard hentry category-mouse-events category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"mousedown\" title=\"Permalink to .mousedown()\" rel=\"bookmark\">.mousedown()</a> </h2> <div class=\"entry-summary\"> <p>Bind an event handler to the “mousedown” JavaScript event, or trigger that event on an element.</p> </div> </article> <article id=\"post-421\" class=\"post-421 post type-post status-publish format-standard hentry category-mouse-events category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"mouseenter\" title=\"Permalink to .mouseenter()\" rel=\"bookmark\">.mouseenter()</a> </h2> <div class=\"entry-summary\"> <p>Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.</p> </div> </article> <article id=\"post-423\" class=\"post-423 post type-post status-publish format-standard hentry category-mouse-events category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"mouseleave\" title=\"Permalink to .mouseleave()\" rel=\"bookmark\">.mouseleave()</a> </h2> <div class=\"entry-summary\"> <p>Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.</p> </div> </article> <article id=\"post-425\" class=\"post-425 post type-post status-publish format-standard hentry category-mouse-events category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"mousemove\" title=\"Permalink to .mousemove()\" rel=\"bookmark\">.mousemove()</a> </h2> <div class=\"entry-summary\"> <p>Bind an event handler to the “mousemove” JavaScript event, or trigger that event on an element.</p> </div> </article> <article id=\"post-427\" class=\"post-427 post type-post status-publish format-standard hentry category-mouse-events category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"mouseout\" title=\"Permalink to .mouseout()\" rel=\"bookmark\">.mouseout()</a> </h2> <div class=\"entry-summary\"> <p>Bind an event handler to the “mouseout” JavaScript event, or trigger that event on an element.</p> </div> </article> <article id=\"post-429\" class=\"post-429 post type-post status-publish format-standard hentry category-mouse-events category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"mouseover\" title=\"Permalink to .mouseover()\" rel=\"bookmark\">.mouseover()</a> </h2> <div class=\"entry-summary\"> <p>Bind an event handler to the “mouseover” JavaScript event, or trigger that event on an element.</p> </div> </article> <article id=\"post-431\" class=\"post-431 post type-post status-publish format-standard hentry category-mouse-events category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"mouseup\" title=\"Permalink to .mouseup()\" rel=\"bookmark\">.mouseup()</a> </h2> <div class=\"entry-summary\"> <p>Bind an event handler to the “mouseup” JavaScript event, or trigger that event on an element.</p> </div> </article> <article id=\"post-433\" class=\"post-433 post type-post status-publish format-standard hentry category-attribute-selectors category-65\"> <h2 class=\"entry-title\"> <a href=\"multiple-attribute-selector\" title=\"Permalink to Multiple Attribute Selector [name=”value”][name2=”value2″]\" rel=\"bookmark\">Multiple Attribute Selector [name=”value”][name2=”value2″]</a> </h2> <div class=\"entry-summary\"> <p>Matches elements that match all of the specified attribute filters.</p> </div> </article> <article id=\"post-435\" class=\"post-435 post type-post status-publish format-standard hentry category-basic-css-selectors category-65\"> <h2 class=\"entry-title\"> <a href=\"multiple-selector\" title=\"Permalink to Multiple Selector (“selector1, selector2, selectorN”)\" rel=\"bookmark\">Multiple Selector (“selector1, selector2, selectorN”)</a> </h2> <div class=\"entry-summary\"> <p>Selects the combined results of all the specified selectors.</p> </div> </article> <article id=\"post-441\" class=\"post-441 post type-post status-publish format-standard hentry category-tree-traversal category-65\"> <h2 class=\"entry-title\"> <a href=\"next\" title=\"Permalink to .next()\" rel=\"bookmark\">.next()</a> </h2> <div class=\"entry-summary\"> <p>Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector.</p> </div> </article> <article id=\"post-3753\" class=\"post-3753 post type-post status-publish format-standard hentry category-hierarchy-selectors category-65\"> <h2 class=\"entry-title\"> <a href=\"next-adjacent-selector\" title=\"Permalink to Next Adjacent Selector (“prev + next”)\" rel=\"bookmark\">Next Adjacent Selector (“prev + next”)</a> </h2> <div class=\"entry-summary\"> <p>Selects all next elements matching “next” that are immediately preceded by a sibling “prev”.</p> </div> </article> <article id=\"post-439\" class=\"post-439 post type-post status-publish format-standard hentry category-hierarchy-selectors category-65\"> <h2 class=\"entry-title\"> <a href=\"next-siblings-selector\" title=\"Permalink to Next Siblings Selector (“prev ~ siblings”)\" rel=\"bookmark\">Next Siblings Selector (“prev ~ siblings”)</a> </h2> <div class=\"entry-summary\"> <p>Selects all sibling elements that follow after the “prev” element, have the same parent, and match the filtering “siblings” selector.</p> </div> </article> <article id=\"post-443\" class=\"post-443 post type-post status-publish format-standard hentry category-tree-traversal category-71\"> <h2 class=\"entry-title\"> <a href=\"nextall\" title=\"Permalink to .nextAll()\" rel=\"bookmark\">.nextAll()</a> </h2> <div class=\"entry-summary\"> <p>Get all following siblings of each element in the set of matched elements, optionally filtered by a selector.</p> </div> </article> <article id=\"post-445\" class=\"post-445 post type-post status-publish format-standard hentry category-tree-traversal category-75 category-82\"> <h2 class=\"entry-title\"> <a href=\"nextuntil\" title=\"Permalink to .nextUntil()\" rel=\"bookmark\">.nextUntil()</a> </h2> <div class=\"entry-summary\"> <p>Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed.</p> </div> </article> <article id=\"post-449\" class=\"post-449 post type-post status-publish format-standard hentry category-filtering category-miscellaneous-traversal category-65 category-75\"> <h2 class=\"entry-title\"> <a href=\"not\" title=\"Permalink to .not()\" rel=\"bookmark\">.not()</a> </h2> <div class=\"entry-summary\"> <p>Remove elements from the set of matched elements.</p> </div> </article> <article id=\"post-447\" class=\"post-447 post type-post status-publish format-standard hentry category-basic-filter-selectors category-65\"> <h2 class=\"entry-title\"> <a href=\"not-selector\" title=\"Permalink to :not() Selector\" rel=\"bookmark\">:not() Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects all elements that do not match the given selector.</p> </div> </article> <article id=\"post-451\" class=\"post-451 post type-post status-publish format-standard hentry category-child-filter-selectors category-70\"> <h2 class=\"entry-title\"> <a href=\"nth-child-selector\" title=\"Permalink to :nth-child() Selector\" rel=\"bookmark\">:nth-child() Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects all elements that are the nth-child of their parent.</p> </div> </article> <article id=\"post-910\" class=\"post-910 post type-post status-publish format-standard hentry category-child-filter-selectors category-86\"> <h2 class=\"entry-title\"> <a href=\"nth-last-child-selector\" title=\"Permalink to :nth-last-child() Selector\" rel=\"bookmark\">:nth-last-child() Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects all elements that are the nth-child of their parent, counting from the last element to the first.</p> </div> </article> <article id=\"post-921\" class=\"post-921 post type-post status-publish format-standard hentry category-child-filter-selectors category-86\"> <h2 class=\"entry-title\"> <a href=\"nth-last-of-type-selector\" title=\"Permalink to :nth-last-of-type() Selector\" rel=\"bookmark\">:nth-last-of-type() Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first.</p> </div> </article> <article id=\"post-922\" class=\"post-922 post type-post status-publish format-standard hentry category-child-filter-selectors category-86\"> <h2 class=\"entry-title\"> <a href=\"nth-of-type-selector\" title=\"Permalink to :nth-of-type() Selector\" rel=\"bookmark\">:nth-of-type() Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects all elements that are the nth child of their parent in relation to siblings with the same element name.</p> </div> </article> <article id=\"post-453\" class=\"post-453 post type-post status-publish format-standard hentry category-basic-filter-selectors category-jquery-selector-extensions category-65\"> <h2 class=\"entry-title\"> <a href=\"odd-selector\" title=\"Permalink to :odd Selector\" rel=\"bookmark\">:odd Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects odd elements, zero-indexed. See also even.</p> </div> </article> <article id=\"post-455\" class=\"post-455 post type-post status-publish format-standard hentry category-event-handler-attachment category-83\"> <h2 class=\"entry-title\"> <a href=\"off\" title=\"Permalink to .off()\" rel=\"bookmark\">.off()</a> </h2> <div class=\"entry-summary\"> <p>Remove an event handler.</p> </div> </article> <article id=\"post-457\" class=\"post-457 post type-post status-publish format-standard hentry category-css category-offset category-style-properties category-71 category-75\"> <h2 class=\"entry-title\"> <a href=\"offset\" title=\"Permalink to .offset()\" rel=\"bookmark\">.offset()</a> </h2> <div class=\"entry-summary\"> <p>Get the current coordinates of the first element, or set the coordinates of every element, in the set of matched elements, relative to the document.</p> </div> </article> <article id=\"post-459\" class=\"post-459 post type-post status-publish format-standard hentry category-offset category-tree-traversal category-73\"> <h2 class=\"entry-title\"> <a href=\"offsetparent\" title=\"Permalink to .offsetParent()\" rel=\"bookmark\">.offsetParent()</a> </h2> <div class=\"entry-summary\"> <p>Get the closest ancestor element that is positioned.</p> </div> </article> <article id=\"post-461\" class=\"post-461 post type-post status-publish format-standard hentry category-event-handler-attachment category-83\"> <h2 class=\"entry-title\"> <a href=\"on\" title=\"Permalink to .on()\" rel=\"bookmark\">.on()</a> </h2> <div class=\"entry-summary\"> <p>Attach an event handler function for one or more events to the selected elements.</p> </div> </article> <article id=\"post-463\" class=\"post-463 post type-post status-publish format-standard hentry category-event-handler-attachment category-67\"> <h2 class=\"entry-title\"> <a href=\"one\" title=\"Permalink to .one()\" rel=\"bookmark\">.one()</a> </h2> <div class=\"entry-summary\"> <p>Attach a handler to an event for the elements. The handler is executed at most once per element per event type.</p> </div> </article> <article id=\"post-465\" class=\"post-465 post type-post status-publish format-standard hentry category-child-filter-selectors category-70\"> <h2 class=\"entry-title\"> <a href=\"only-child-selector\" title=\"Permalink to :only-child Selector\" rel=\"bookmark\">:only-child Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects all elements that are the only child of their parent.</p> </div> </article> <article id=\"post-911\" class=\"post-911 post type-post status-publish format-standard hentry category-child-filter-selectors category-86\"> <h2 class=\"entry-title\"> <a href=\"only-of-type-selector\" title=\"Permalink to :only-of-type Selector\" rel=\"bookmark\">:only-of-type Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects all elements that have no siblings with the same element name.</p> </div> </article> <article id=\"post-467\" class=\"post-467 post type-post status-publish format-standard hentry category-css category-dimensions category-style-properties category-73\"> <h2 class=\"entry-title\"> <a href=\"outerheight\" title=\"Permalink to .outerHeight()\" rel=\"bookmark\">.outerHeight()</a> </h2> <div class=\"entry-summary\"> <p>Get the current computed height for the first element in the set of matched elements, including padding, border, and optionally margin. Returns a number (without “px”) representation of the value or null if called on an empty set of elements.</p> </div> </article> <article id=\"post-469\" class=\"post-469 post type-post status-publish format-standard hentry category-css category-dimensions category-style-properties category-73\"> <h2 class=\"entry-title\"> <a href=\"outerwidth\" title=\"Permalink to .outerWidth()\" rel=\"bookmark\">.outerWidth()</a> </h2> <div class=\"entry-summary\"> <p>Get the current computed width for the first element in the set of matched elements, including padding and border.</p> </div> </article> <article id=\"post-473\" class=\"post-473 post type-post status-publish format-standard hentry category-tree-traversal category-65\"> <h2 class=\"entry-title\"> <a href=\"parent\" title=\"Permalink to .parent()\" rel=\"bookmark\">.parent()</a> </h2> <div class=\"entry-summary\"> <p>Get the parent of each element in the current set of matched elements, optionally filtered by a selector.</p> </div> </article> <article id=\"post-471\" class=\"post-471 post type-post status-publish format-standard hentry category-content-filter-selector category-jquery-selector-extensions category-65\"> <h2 class=\"entry-title\"> <a href=\"parent-selector\" title=\"Permalink to :parent Selector\" rel=\"bookmark\">:parent Selector</a> </h2> <div class=\"entry-summary\"> <p>Select all elements that have at least one child node (either an element or text).</p> </div> </article> <article id=\"post-475\" class=\"post-475 post type-post status-publish format-standard hentry category-tree-traversal category-65\"> <h2 class=\"entry-title\"> <a href=\"parents\" title=\"Permalink to .parents()\" rel=\"bookmark\">.parents()</a> </h2> <div class=\"entry-summary\"> <p>Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector.</p> </div> </article> <article id=\"post-477\" class=\"post-477 post type-post status-publish format-standard hentry category-tree-traversal category-75 category-82\"> <h2 class=\"entry-title\"> <a href=\"parentsuntil\" title=\"Permalink to .parentsUntil()\" rel=\"bookmark\">.parentsUntil()</a> </h2> <div class=\"entry-summary\"> <p>Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object.</p> </div> </article> <article id=\"post-479\" class=\"post-479 post type-post status-publish format-standard hentry category-form-selectors category-jquery-selector-extensions category-65\"> <h2 class=\"entry-title\"> <a href=\"password-selector\" title=\"Permalink to :password Selector\" rel=\"bookmark\">:password Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects all elements of type password.</p> </div> </article> <article id=\"post-481\" class=\"post-481 post type-post status-publish format-standard hentry category-css category-offset category-style-properties category-71\"> <h2 class=\"entry-title\"> <a href=\"position\" title=\"Permalink to .position()\" rel=\"bookmark\">.position()</a> </h2> <div class=\"entry-summary\"> <p>Get the current coordinates of the first element in the set of matched elements, relative to the offset parent.</p> </div> </article> <article id=\"post-483\" class=\"post-483 post type-post status-publish format-standard hentry category-dom-insertion-inside category-65 category-75\"> <h2 class=\"entry-title\"> <a href=\"prepend\" title=\"Permalink to .prepend()\" rel=\"bookmark\">.prepend()</a> </h2> <div class=\"entry-summary\"> <p>Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.</p> </div> </article> <article id=\"post-485\" class=\"post-485 post type-post status-publish format-standard hentry category-dom-insertion-inside category-65\"> <h2 class=\"entry-title\"> <a href=\"prependto\" title=\"Permalink to .prependTo()\" rel=\"bookmark\">.prependTo()</a> </h2> <div class=\"entry-summary\"> <p>Insert every element in the set of matched elements to the beginning of the target.</p> </div> </article> <article id=\"post-487\" class=\"post-487 post type-post status-publish format-standard hentry category-tree-traversal category-65\"> <h2 class=\"entry-title\"> <a href=\"prev\" title=\"Permalink to .prev()\" rel=\"bookmark\">.prev()</a> </h2> <div class=\"entry-summary\"> <p>Get the immediately preceding sibling of each element in the set of matched elements. If a selector is provided, it retrieves the previous sibling only if it matches that selector.</p> </div> </article> <article id=\"post-489\" class=\"post-489 post type-post status-publish format-standard hentry category-tree-traversal category-71\"> <h2 class=\"entry-title\"> <a href=\"prevall\" title=\"Permalink to .prevAll()\" rel=\"bookmark\">.prevAll()</a> </h2> <div class=\"entry-summary\"> <p>Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.</p> </div> </article> <article id=\"post-491\" class=\"post-491 post type-post status-publish format-standard hentry category-tree-traversal category-75 category-82\"> <h2 class=\"entry-title\"> <a href=\"prevuntil\" title=\"Permalink to .prevUntil()\" rel=\"bookmark\">.prevUntil()</a> </h2> <div class=\"entry-summary\"> <p>Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object.</p> </div> </article> <article id=\"post-493\" class=\"post-493 post type-post status-publish format-standard hentry category-deferred-object category-82\"> <h2 class=\"entry-title\"> <a href=\"promise\" title=\"Permalink to .promise()\" rel=\"bookmark\">.promise()</a> </h2> <div class=\"entry-summary\"> <p>Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished.</p> </div> </article> <article id=\"post-495\" class=\"post-495 post type-post status-publish format-standard hentry category-attributes category-general-attributes category-82\"> <h2 class=\"entry-title\"> <a href=\"prop\" title=\"Permalink to .prop()\" rel=\"bookmark\">.prop()</a> </h2> <div class=\"entry-summary\"> <p>Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element.</p> </div> </article> <article id=\"post-497\" class=\"post-497 post type-post status-publish format-standard hentry category-internals category-65 category-74\"> <h2 class=\"entry-title\"> <a href=\"pushstack\" title=\"Permalink to .pushStack()\" rel=\"bookmark\">.pushStack()</a> </h2> <div class=\"entry-summary\"> <p>Add a collection of DOM elements onto the jQuery stack.</p> </div> </article> <article id=\"post-499\" class=\"post-499 post type-post status-publish format-standard hentry category-custom-effects category-data category-utilities category-71\"> <h2 class=\"entry-title\"> <a href=\"queue\" title=\"Permalink to .queue()\" rel=\"bookmark\">.queue()</a> </h2> <div class=\"entry-summary\"> <p>Show or manipulate the queue of functions to be executed on the matched elements.</p> </div> </article> <article id=\"post-501\" class=\"post-501 post type-post status-publish format-standard hentry category-form-selectors category-jquery-selector-extensions category-65\"> <h2 class=\"entry-title\"> <a href=\"radio-selector\" title=\"Permalink to :radio Selector\" rel=\"bookmark\">:radio Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects all elements of type radio.</p> </div> </article> <article id=\"post-503\" class=\"post-503 post type-post status-publish format-standard hentry category-document-loading category-65\"> <h2 class=\"entry-title\"> <a href=\"ready\" title=\"Permalink to .ready()\" rel=\"bookmark\">.ready()</a> </h2> <div class=\"entry-summary\"> <p>Specify a function to execute when the DOM is fully loaded.</p> </div> </article> <article id=\"post-505\" class=\"post-505 post type-post status-publish format-standard hentry category-dom-removal category-65\"> <h2 class=\"entry-title\"> <a href=\"remove\" title=\"Permalink to .remove()\" rel=\"bookmark\">.remove()</a> </h2> <div class=\"entry-summary\"> <p>Remove the set of matched elements from the DOM.</p> </div> </article> <article id=\"post-507\" class=\"post-507 post type-post status-publish format-standard hentry category-attributes category-general-attributes category-65 category-75 category-83\"> <h2 class=\"entry-title\"> <a href=\"removeattr\" title=\"Permalink to .removeAttr()\" rel=\"bookmark\">.removeAttr()</a> </h2> <div class=\"entry-summary\"> <p>Remove an attribute from each element in the set of matched elements.</p> </div> </article> <article id=\"post-509\" class=\"post-509 post type-post status-publish format-standard hentry category-attributes category-class-attribute category-css category-65 category-75\"> <h2 class=\"entry-title\"> <a href=\"removeclass\" title=\"Permalink to .removeClass()\" rel=\"bookmark\">.removeClass()</a> </h2> <div class=\"entry-summary\"> <p>Remove a single class, multiple classes, or all classes from each element in the set of matched elements.</p> </div> </article> <article id=\"post-511\" class=\"post-511 post type-post status-publish format-standard hentry category-data category-data-storage category-72 category-83\"> <h2 class=\"entry-title\"> <a href=\"removedata\" title=\"Permalink to .removeData()\" rel=\"bookmark\">.removeData()</a> </h2> <div class=\"entry-summary\"> <p>Remove a previously-stored piece of data.</p> </div> </article> <article id=\"post-513\" class=\"post-513 post type-post status-publish format-standard hentry category-attributes category-general-attributes category-82\"> <h2 class=\"entry-title\"> <a href=\"removeprop\" title=\"Permalink to .removeProp()\" rel=\"bookmark\">.removeProp()</a> </h2> <div class=\"entry-summary\"> <p>Remove a property for the set of matched elements.</p> </div> </article> <article id=\"post-515\" class=\"post-515 post type-post status-publish format-standard hentry category-dom-replacement category-71\"> <h2 class=\"entry-title\"> <a href=\"replaceall\" title=\"Permalink to .replaceAll()\" rel=\"bookmark\">.replaceAll()</a> </h2> <div class=\"entry-summary\"> <p>Replace each target element with the set of matched elements.</p> </div> </article> <article id=\"post-517\" class=\"post-517 post type-post status-publish format-standard hentry category-dom-replacement category-71 category-75\"> <h2 class=\"entry-title\"> <a href=\"replacewith\" title=\"Permalink to .replaceWith()\" rel=\"bookmark\">.replaceWith()</a> </h2> <div class=\"entry-summary\"> <p>Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed.</p> </div> </article> <article id=\"post-519\" class=\"post-519 post type-post status-publish format-standard hentry category-form-selectors category-jquery-selector-extensions category-65\"> <h2 class=\"entry-title\"> <a href=\"reset-selector\" title=\"Permalink to :reset Selector\" rel=\"bookmark\">:reset Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects all elements of type reset.</p> </div> </article> <article id=\"post-521\" class=\"post-521 post type-post status-publish format-standard hentry category-browser-events category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"resize\" title=\"Permalink to .resize()\" rel=\"bookmark\">.resize()</a> </h2> <div class=\"entry-summary\"> <p>Bind an event handler to the “resize” JavaScript event, or trigger that event on an element.</p> </div> </article> <article id=\"post-923\" class=\"post-923 post type-post status-publish format-standard hentry category-basic-filter-selectors category-86\"> <h2 class=\"entry-title\"> <a href=\"root-selector\" title=\"Permalink to :root Selector\" rel=\"bookmark\">:root Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects the element that is the root of the document.</p> </div> </article> <article id=\"post-523\" class=\"post-523 post type-post status-publish format-standard hentry category-browser-events category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"scroll\" title=\"Permalink to .scroll()\" rel=\"bookmark\">.scroll()</a> </h2> <div class=\"entry-summary\"> <p>Bind an event handler to the “scroll” JavaScript event, or trigger that event on an element.</p> </div> </article> <article id=\"post-525\" class=\"post-525 post type-post status-publish format-standard hentry category-css category-offset category-style-properties category-73\"> <h2 class=\"entry-title\"> <a href=\"scrollleft\" title=\"Permalink to .scrollLeft()\" rel=\"bookmark\">.scrollLeft()</a> </h2> <div class=\"entry-summary\"> <p>Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element.</p> </div> </article> <article id=\"post-527\" class=\"post-527 post type-post status-publish format-standard hentry category-css category-offset category-style-properties category-73\"> <h2 class=\"entry-title\"> <a href=\"scrolltop\" title=\"Permalink to .scrollTop()\" rel=\"bookmark\">.scrollTop()</a> </h2> <div class=\"entry-summary\"> <p>Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element.</p> </div> </article> <article id=\"post-529\" class=\"post-529 post type-post status-publish format-standard hentry category-form-events category-forms category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"select\" title=\"Permalink to .select()\" rel=\"bookmark\">.select()</a> </h2> <div class=\"entry-summary\"> <p>Bind an event handler to the “select” JavaScript event, or trigger that event on an element.</p> </div> </article> <article id=\"post-531\" class=\"post-531 post type-post status-publish format-standard hentry category-form-selectors category-jquery-selector-extensions category-65\"> <h2 class=\"entry-title\"> <a href=\"selected-selector\" title=\"Permalink to :selected Selector\" rel=\"bookmark\">:selected Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects all elements that are selected.</p> </div> </article> <article id=\"post-533\" class=\"post-533 post type-post status-publish format-standard hentry category-deprecated-17 category-internals category-global-jquery-object-properties category-removed category-74\"> <h2 class=\"entry-title\"> <a href=\"selector\" title=\"Permalink to .selector\" rel=\"bookmark\">.selector</a> </h2> <div class=\"entry-summary\"> <p>A selector representing selector passed to jQuery(), if any, when creating the original set.</p> </div> </article> <article id=\"post-535\" class=\"post-535 post type-post status-publish format-standard hentry category-forms category-helper-functions category-65\"> <h2 class=\"entry-title\"> <a href=\"serialize\" title=\"Permalink to .serialize()\" rel=\"bookmark\">.serialize()</a> </h2> <div class=\"entry-summary\"> <p>Encode a set of form elements as a string for submission.</p> </div> </article> <article id=\"post-537\" class=\"post-537 post type-post status-publish format-standard hentry category-forms category-helper-functions category-71\"> <h2 class=\"entry-title\"> <a href=\"serializearray\" title=\"Permalink to .serializeArray()\" rel=\"bookmark\">.serializeArray()</a> </h2> <div class=\"entry-summary\"> <p>Encode a set of form elements as an array of names and values.</p> </div> </article> <article id=\"post-539\" class=\"post-539 post type-post status-publish format-standard hentry category-basics category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"show\" title=\"Permalink to .show()\" rel=\"bookmark\">.show()</a> </h2> <div class=\"entry-summary\"> <p>Display the matched elements.</p> </div> </article> <article id=\"post-541\" class=\"post-541 post type-post status-publish format-standard hentry category-tree-traversal category-65\"> <h2 class=\"entry-title\"> <a href=\"siblings\" title=\"Permalink to .siblings()\" rel=\"bookmark\">.siblings()</a> </h2> <div class=\"entry-summary\"> <p>Get the siblings of each element in the set of matched elements, optionally filtered by a selector.</p> </div> </article> <article id=\"post-543\" class=\"post-543 post type-post status-publish format-standard hentry category-deprecated-18 category-dom-element-methods category-65\"> <h2 class=\"entry-title\"> <a href=\"size\" title=\"Permalink to .size()\" rel=\"bookmark\">.size()</a> </h2> <div class=\"entry-summary\"> <p>Return the number of elements in the jQuery object.</p> </div> </article> <article id=\"post-545\" class=\"post-545 post type-post status-publish format-standard hentry category-filtering category-70\"> <h2 class=\"entry-title\"> <a href=\"slice\" title=\"Permalink to .slice()\" rel=\"bookmark\">.slice()</a> </h2> <div class=\"entry-summary\"> <p>Reduce the set of matched elements to a subset specified by a range of indices.</p> </div> </article> <article id=\"post-547\" class=\"post-547 post type-post status-publish format-standard hentry category-sliding category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"slidedown\" title=\"Permalink to .slideDown()\" rel=\"bookmark\">.slideDown()</a> </h2> <div class=\"entry-summary\"> <p>Display the matched elements with a sliding motion.</p> </div> </article> <article id=\"post-549\" class=\"post-549 post type-post status-publish format-standard hentry category-sliding category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"slidetoggle\" title=\"Permalink to .slideToggle()\" rel=\"bookmark\">.slideToggle()</a> </h2> <div class=\"entry-summary\"> <p>Display or hide the matched elements with a sliding motion.</p> </div> </article> <article id=\"post-551\" class=\"post-551 post type-post status-publish format-standard hentry category-sliding category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"slideup\" title=\"Permalink to .slideUp()\" rel=\"bookmark\">.slideUp()</a> </h2> <div class=\"entry-summary\"> <p>Hide the matched elements with a sliding motion.</p> </div> </article> <article id=\"post-553\" class=\"post-553 post type-post status-publish format-standard hentry category-custom-effects category-71 category-83\"> <h2 class=\"entry-title\"> <a href=\"stop\" title=\"Permalink to .stop()\" rel=\"bookmark\">.stop()</a> </h2> <div class=\"entry-summary\"> <p>Stop the currently-running animation on the matched elements.</p> </div> </article> <article id=\"post-557\" class=\"post-557 post type-post status-publish format-standard hentry category-form-events category-forms category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"submit\" title=\"Permalink to .submit()\" rel=\"bookmark\">.submit()</a> </h2> <div class=\"entry-summary\"> <p>Bind an event handler to the “submit” JavaScript event, or trigger that event on an element.</p> </div> </article> <article id=\"post-555\" class=\"post-555 post type-post status-publish format-standard hentry category-form-selectors category-jquery-selector-extensions category-65\"> <h2 class=\"entry-title\"> <a href=\"submit-selector\" title=\"Permalink to :submit Selector\" rel=\"bookmark\">:submit Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects all elements of type submit.</p> </div> </article> <article id=\"post-924\" class=\"post-924 post type-post status-publish format-standard hentry category-basic-filter-selectors category-86\"> <h2 class=\"entry-title\"> <a href=\"target-selector\" title=\"Permalink to :target Selector\" rel=\"bookmark\">:target Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects the target element indicated by the fragment identifier of the document’s URI.</p> </div> </article> <article id=\"post-561\" class=\"post-561 post type-post status-publish format-standard hentry category-dom-insertion-inside category-65 category-75\"> <h2 class=\"entry-title\"> <a href=\"text\" title=\"Permalink to .text()\" rel=\"bookmark\">.text()</a> </h2> <div class=\"entry-summary\"> <p>Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements.</p> </div> </article> <article id=\"post-559\" class=\"post-559 post type-post status-publish format-standard hentry category-form-selectors category-jquery-selector-extensions category-65\"> <h2 class=\"entry-title\"> <a href=\"text-selector\" title=\"Permalink to :text Selector\" rel=\"bookmark\">:text Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects all input elements of type text.</p> </div> </article> <article id=\"post-563\" class=\"post-563 post type-post status-publish format-standard hentry category-dom-element-methods category-75\"> <h2 class=\"entry-title\"> <a href=\"toarray\" title=\"Permalink to .toArray()\" rel=\"bookmark\">.toArray()</a> </h2> <div class=\"entry-summary\"> <p>Retrieve all the elements contained in the jQuery set, as an array.</p> </div> </article> <article id=\"post-567\" class=\"post-567 post type-post status-publish format-standard hentry category-basics category-65 category-74 category-78\"> <h2 class=\"entry-title\"> <a href=\"toggle\" title=\"Permalink to .toggle()\" rel=\"bookmark\">.toggle()</a> </h2> <div class=\"entry-summary\"> <p>Display or hide the matched elements.</p> </div> </article> <article id=\"post-565\" class=\"post-565 post type-post status-publish format-standard hentry category-deprecated-18 category-mouse-events category-removed category-65\"> <h2 class=\"entry-title\"> <a href=\"toggle-event\" title=\"Permalink to .toggle()\" rel=\"bookmark\">.toggle()</a> </h2> <div class=\"entry-summary\"> <p>Bind two or more handlers to the matched elements, to be executed on alternate clicks.</p> </div> </article> <article id=\"post-569\" class=\"post-569 post type-post status-publish format-standard hentry category-attributes category-class-attribute category-css category-65 category-74 category-75\"> <h2 class=\"entry-title\"> <a href=\"toggleclass\" title=\"Permalink to .toggleClass()\" rel=\"bookmark\">.toggleClass()</a> </h2> <div class=\"entry-summary\"> <p>Add or remove one or more classes from each element in the set of matched elements, depending on either the class’s presence or the value of the state argument.</p> </div> </article> <article id=\"post-571\" class=\"post-571 post type-post status-publish format-standard hentry category-event-handler-attachment category-65\"> <h2 class=\"entry-title\"> <a href=\"trigger\" title=\"Permalink to .trigger()\" rel=\"bookmark\">.trigger()</a> </h2> <div class=\"entry-summary\"> <p>Execute all handlers and behaviors attached to the matched elements for the given event type.</p> </div> </article> <article id=\"post-573\" class=\"post-573 post type-post status-publish format-standard hentry category-event-handler-attachment category-71\"> <h2 class=\"entry-title\"> <a href=\"triggerhandler\" title=\"Permalink to .triggerHandler()\" rel=\"bookmark\">.triggerHandler()</a> </h2> <div class=\"entry-summary\"> <p>Execute all handlers attached to an element for an event.</p> </div> </article> <article id=\"post-575\" class=\"post-575 post type-post status-publish format-standard hentry category-event-handler-attachment category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"unbind\" title=\"Permalink to .unbind()\" rel=\"bookmark\">.unbind()</a> </h2> <div class=\"entry-summary\"> <p>Remove a previously-attached event handler from the elements.</p> </div> </article> <article id=\"post-577\" class=\"post-577 post type-post status-publish format-standard hentry category-event-handler-attachment category-77 category-78 category-82\"> <h2 class=\"entry-title\"> <a href=\"undelegate\" title=\"Permalink to .undelegate()\" rel=\"bookmark\">.undelegate()</a> </h2> <div class=\"entry-summary\"> <p>Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.</p> </div> </article> <article id=\"post-579\" class=\"post-579 post type-post status-publish format-standard hentry category-deprecated-18 category-document-loading category-65 category-78\"> <h2 class=\"entry-title\"> <a href=\"unload\" title=\"Permalink to .unload()\" rel=\"bookmark\">.unload()</a> </h2> <div class=\"entry-summary\"> <p>Bind an event handler to the “unload” JavaScript event.</p> </div> </article> <article id=\"post-581\" class=\"post-581 post type-post status-publish format-standard hentry category-dom-insertion-around category-dom-removal category-75\"> <h2 class=\"entry-title\"> <a href=\"unwrap\" title=\"Permalink to .unwrap()\" rel=\"bookmark\">.unwrap()</a> </h2> <div class=\"entry-summary\"> <p>Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place.</p> </div> </article> <article id=\"post-583\" class=\"post-583 post type-post status-publish format-standard hentry category-attributes category-forms category-general-attributes category-65 category-75\"> <h2 class=\"entry-title\"> <a href=\"val\" title=\"Permalink to .val()\" rel=\"bookmark\">.val()</a> </h2> <div class=\"entry-summary\"> <p>Get the current value of the first element in the set of matched elements or set the value of every matched element.</p> </div> </article> <article id=\"post-585\" class=\"post-585 post type-post status-publish format-standard hentry category-jquery-selector-extensions category-65 category-visibility-filter-selectors\"> <h2 class=\"entry-title\"> <a href=\"visible-selector\" title=\"Permalink to :visible Selector\" rel=\"bookmark\">:visible Selector</a> </h2> <div class=\"entry-summary\"> <p>Selects all elements that are visible.</p> </div> </article> <article id=\"post-587\" class=\"post-587 post type-post status-publish format-standard hentry category-css category-dimensions category-style-properties category-65 category-76\"> <h2 class=\"entry-title\"> <a href=\"width\" title=\"Permalink to .width()\" rel=\"bookmark\">.width()</a> </h2> <div class=\"entry-summary\"> <p>Get the current computed width for the first element in the set of matched elements or set the width of every matched element.</p> </div> </article> <article id=\"post-589\" class=\"post-589 post type-post status-publish format-standard hentry category-dom-insertion-around category-65 category-75\"> <h2 class=\"entry-title\"> <a href=\"wrap\" title=\"Permalink to .wrap()\" rel=\"bookmark\">.wrap()</a> </h2> <div class=\"entry-summary\"> <p>Wrap an HTML structure around each element in the set of matched elements.</p> </div> </article> <article id=\"post-591\" class=\"post-591 post type-post status-publish format-standard hentry category-dom-insertion-around category-71 category-75\"> <h2 class=\"entry-title\"> <a href=\"wrapall\" title=\"Permalink to .wrapAll()\" rel=\"bookmark\">.wrapAll()</a> </h2> <div class=\"entry-summary\"> <p>Wrap an HTML structure around all elements in the set of matched elements.</p> </div> </article> <article id=\"post-593\" class=\"post-593 post type-post status-publish format-standard hentry category-dom-insertion-around category-71 category-75\"> <h2 class=\"entry-title\"> <a href=\"wrapinner\" title=\"Permalink to .wrapInner()\" rel=\"bookmark\">.wrapInner()</a> </h2> <div class=\"entry-summary\"> <p>Wrap an HTML structure around the content of each element in the set of matched elements.</p> </div> </article><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/\" class=\"_attribution-link\">https://api.jquery.com/</a>\n  </p>\n</div>\n","index/index":"<h1 class=\"entry-title\">.index()</h1> <div class=\"entry-content\"> <article id=\"index1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.index()</span><span class=\"returns\">Returns: <a href=\"../types#Integer\">Integer</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Search for a given element from among the matched elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"index\" href=\"#index\">.index()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"index-selector\" href=\"#index-selector\">.index( selector )</a> </h4> <ul><li> <div><strong>selector</strong></div> <div>Type: <a href=\"../types#Selector\">Selector</a> </div> <div>A selector representing a jQuery collection in which to look for an element.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"index-element\" href=\"#index-element\">.index( element )</a> </h4> <ul><li> <div><strong>element</strong></div> <div>Type: <a href=\"../types#Element\">Element</a> or <a href=\"../types#jQuery\">jQuery</a> </div> <div>The DOM element or first element within the jQuery object to look for.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <h4>Return Values</h4> <p>If no argument is passed to the <code>.index()</code> method, the return value is an integer indicating the position of the first element within the jQuery object relative to its sibling elements.</p> <p>If <code>.index()</code> is called on a collection of elements and a DOM element or jQuery object is passed in, <code>.index()</code> returns an integer indicating the position of the passed element relative to the original collection.</p> <p>If a selector string is passed as an argument, <code>.index()</code> returns an integer indicating the position of the first element within the jQuery object relative to the elements matched by the selector. If the element is not found, <code>.index()</code> will return -1.</p> <h4>Detail</h4> <p>The complementary operation to <code>.get()</code>, which accepts an index and returns a DOM node, <code>.index()</code> can take a DOM node and returns an index. Suppose we have a simple unordered list on the page:</p> <pre class=\"syntaxhighlighter xml\">&lt;ul&gt;\n  &lt;li id=\"foo\"&gt;foo&lt;/li&gt;\n  &lt;li id=\"bar\"&gt;bar&lt;/li&gt;\n  &lt;li id=\"baz\"&gt;baz&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>If we retrieve one of the three list items (for example, through a DOM function or as the context to an event handler), <code>.index()</code> can search for this list item within the set of matched elements:</p> <pre class=\"syntaxhighlighter javascript\">var listItem = document.getElementById( \"bar\" );\nalert( \"Index: \" + $( \"li\" ).index( listItem ) );</pre> <p>We get back the zero-based position of the list item:</p> <p> <samp>Index: 1</samp> </p> <p>Similarly, if we retrieve a jQuery object consisting of one of the three list items, <code>.index()</code> will search for that list item:</p> <pre class=\"syntaxhighlighter javascript\">var listItem = $( \"#bar\" );\nalert( \"Index: \" + $( \"li\" ).index( listItem ) );</pre> <p>We get back the zero-based position of the list item:</p> <p> <samp>Index: 1</samp> </p> <p>Note that if the jQuery collection used as the <code>.index()</code> method's argument contains more than one element, the first element within the matched set of elements will be used.</p> <pre class=\"syntaxhighlighter javascript\">var listItems = $( \"li:gt(0)\" );\nalert( \"Index: \" + $( \"li\" ).index( listItems ) );</pre> <p>We get back the zero-based position of the first list item within the matched set:</p> <p> <samp>Index: 1</samp> </p> <p>If we use a string as the <code>.index()</code> method's argument, it is interpreted as a jQuery selector string. The first element among the object's matched elements which also matches this selector is located.</p> <pre class=\"syntaxhighlighter javascript\">var listItem = $( \"#bar\" );\nalert( \"Index: \" + listItem.index( \"li\" ) );</pre> <p>We get back the zero-based position of the list item:</p> <p> <samp>Index: 1</samp> </p> <p>If we omit the argument, <code>.index()</code> will return the position of the first element within the set of matched elements in relation to its siblings:</p> <pre class=\"syntaxhighlighter javascript\">alert( \"Index: \" + $( \"#bar\" ).index() );</pre> <p>Again, we get back the zero-based position of the list item:</p> <p> <samp>Index: 1</samp> </p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>On click, returns the index (zero-based) of that div in the page.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;index demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    background: yellow;\n    margin: 5px;\n  }\n  span {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;span&gt;Click a div!&lt;/span&gt;\n&lt;div&gt;First div&lt;/div&gt;\n&lt;div&gt;Second div&lt;/div&gt;\n&lt;div&gt;Third div&lt;/div&gt;\n \n&lt;script&gt;\n$( \"div\" ).click(function() {\n  // `this` is the DOM element that was clicked\n  var index = $( \"div\" ).index( this );\n  $( \"span\" ).text( \"That was div index #\" + index );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Returns the index for the element with ID bar.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;index demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    font-weight: bold;\n    color: #090;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;ul&gt;\n  &lt;li id=\"foo\"&gt;foo&lt;/li&gt;\n  &lt;li id=\"bar\"&gt;bar&lt;/li&gt;\n  &lt;li id=\"baz\"&gt;baz&lt;/li&gt;\n&lt;/ul&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar listItem = $( \"#bar\" );\n$( \"div\" ).html( \"Index: \" + $( \"li\" ).index( listItem ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-2\"> <p>Returns the index for the first item in the jQuery collection.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;index demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    font-weight: bold;\n    color: #090;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;ul&gt;\n  &lt;li id=\"foo\"&gt;foo&lt;/li&gt;\n  &lt;li id=\"bar\"&gt;bar&lt;/li&gt;\n  &lt;li id=\"baz\"&gt;baz&lt;/li&gt;\n&lt;/ul&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar listItems = $( \"li:gt(0)\" );\n$( \"div\" ).html( \"Index: \" + $( \"li\" ).index( listItems ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-3\"> <p>Returns the index for the element with ID bar in relation to all &lt;li&gt; elements.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;index demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    font-weight: bold;\n    color: #090;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;ul&gt;\n  &lt;li id=\"foo\"&gt;foo&lt;/li&gt;\n  &lt;li id=\"bar\"&gt;bar&lt;/li&gt;\n  &lt;li id=\"baz\"&gt;baz&lt;/li&gt;\n&lt;/ul&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"div\" ).html( \"Index: \" +  $( \"#bar\" ).index( \"li\" ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-4\"> <p>Returns the index for the element with ID bar in relation to its siblings.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;index demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    font-weight: bold;\n    color: #090;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;ul&gt;\n  &lt;li id=\"foo\"&gt;foo&lt;/li&gt;\n  &lt;li id=\"bar\"&gt;bar&lt;/li&gt;\n  &lt;li id=\"baz\"&gt;baz&lt;/li&gt;\n&lt;/ul&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar barIndex = $( \"#bar\" ).index();\n$( \"div\" ).html( \"Index: \" +  barIndex );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-5\"> <p>Returns -1, as there is no element with ID foobar.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;index demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    font-weight: bold;\n    color: #090;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;ul&gt;\n  &lt;li id=\"foo\"&gt;foo&lt;/li&gt;\n  &lt;li id=\"bar\"&gt;bar&lt;/li&gt;\n  &lt;li id=\"baz\"&gt;baz&lt;/li&gt;\n&lt;/ul&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar foobar = $( \"li\" ).index( $( \"#foobar\" ) );\n$( \"div\" ).html( \"Index: \" + foobar );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/index/index\" class=\"_attribution-link\">https://api.jquery.com/index/index</a>\n  </p>\n</div>\n","appendto":"<h1 class=\"entry-title\">.appendTo()</h1> <div class=\"entry-content\"> <article id=\"appendTo1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.appendTo( target )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Insert every element in the set of matched elements to the end of the target.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"appendTo-target\" href=\"#appendTo-target\">.appendTo( target )</a> </h4> <ul><li> <div><strong>target</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> or <a href=\"types#htmlString\">htmlString</a> or <a href=\"types#Element\">Element</a> or <a href=\"types#Array\">Array</a> or <a href=\"types#jQuery\">jQuery</a> </div> <div>A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements will be inserted at the end of the element(s) specified by this parameter.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code><a href=\"append\">.append()</a></code> and <code>.appendTo()</code> methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With <code>.append()</code>, the selector expression preceding the method is the container into which the content is inserted. With <code>.appendTo()</code>, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.</p> <p>Consider the following HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;h2&gt;Greetings&lt;/h2&gt;\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;/div&gt;\n&lt;/div&gt;</pre> <p>We can create content and insert it into several elements at once:</p> <pre class=\"syntaxhighlighter javascript\">$( \"&lt;p&gt;Test&lt;/p&gt;\" ).appendTo( \".inner\" );</pre> <p>Each inner <code>&lt;div&gt;</code> element gets this new content:</p> <pre class=\"syntaxhighlighter xml\">&lt;h2&gt;Greetings&lt;/h2&gt;\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;\n    Hello\n    &lt;p&gt;Test&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;div class=\"inner\"&gt;\n    Goodbye\n    &lt;p&gt;Test&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</pre> <p>We can also select an element on the page and insert it into another:</p> <pre class=\"syntaxhighlighter javascript\">$( \"h2\" ).appendTo( $( \".container\" ) );</pre> <p>If an element selected this way is inserted into a single location elsewhere in the DOM, it will be moved into the target (not cloned) and a new set consisting of the inserted element is returned:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;/div&gt;\n  &lt;h2&gt;Greetings&lt;/h2&gt;\n&lt;/div&gt;</pre> <p>If there is more than one target element, however, cloned copies of the inserted element will be created for each target except the last, and that new set (the original element plus clones) is returned.</p> <p><strong>Before jQuery 1.9,</strong> the append-to-single-element case did not create a new set, but instead returned the original set which made it difficult to use the <code>.end()</code> method reliably when being used with an unknown number of elements.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> By design, any jQuery constructor or method that accepts an HTML string — <a href=\"jquery\">jQuery()</a>, <a href=\"append\">.append()</a>, <a href=\"after\">.after()</a>, etc. — can potentially execute code. This can occur by injection of script tags or use of HTML attributes that execute code (for example, <code>&lt;img onload=\"\"&gt;</code>). Do not use these methods to insert strings obtained from untrusted sources such as URL query parameters, cookies, or form inputs. Doing so can introduce cross-site-scripting (XSS) vulnerabilities. Remove or escape any user input before adding content to the document. </li> <li> jQuery doesn't officially support SVG. Using jQuery methods on SVG documents, unless explicitly documented for that method, might cause unexpected behaviors. Examples of methods that support SVG as of jQuery 3.0 are <code>addClass</code> and <code>removeClass</code>. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Append all spans to the element with the ID \"foo\" (Check append() documentation for more examples)</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;appendTo demo&lt;/title&gt;\n  &lt;style&gt;\n  #foo {\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;span&gt;I have nothing more to say... &lt;/span&gt;\n \n&lt;div id=\"foo\"&gt;FOO! &lt;/div&gt;\n \n&lt;script&gt;\n$( \"span\" ).appendTo( \"#foo\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/appendTo\" class=\"_attribution-link\">https://api.jquery.com/appendTo</a>\n  </p>\n</div>\n","attribute-contains-selector":"<h1 class=\"entry-title\">Attribute Contains Selector [name*=”value”]</h1> <div class=\"entry-content\"> <article id=\"attributeContains1\" class=\"entry selector\"><h2 class=\"section-title\"><span>attributeContains selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects elements that have the specified attribute with a value containing a given substring.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \"[attribute*='value']\" )</h4> <p class=\"argument\"><strong>attribute: </strong>An attribute name.</p> <p class=\"argument\"><strong>value: </strong>An attribute value. Can be either a <a href=\"https://www.w3.org/TR/css3-selectors/#attribute-selectors\">valid identifier</a> or a quoted string.</p> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This is the most generous of the jQuery attribute selectors that match against a value. It will select an element if the selector's string appears anywhere within the element's attribute value. Compare this selector with the Attribute Contains Word selector (e.g. [attr~=\"word\"]), which is more appropriate in many cases.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds all inputs with a name attribute that contains 'man' and sets the value with some text.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;attributeContains demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;input name=\"man-news\"&gt;\n&lt;input name=\"milkman\"&gt;\n&lt;input name=\"letterman2\"&gt;\n&lt;input name=\"newmilk\"&gt;\n \n&lt;script&gt;\n$( \"input[name*='man']\" ).val( \"has man in it!\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/attribute-contains-selector\" class=\"_attribution-link\">https://api.jquery.com/attribute-contains-selector</a>\n  </p>\n</div>\n","addclass":"<h1 class=\"entry-title\">.addClass()</h1> <div class=\"entry-content\"> <article id=\"addClass1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.addClass( className )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Adds the specified class(es) to each element in the set of matched elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"addClass-className\" href=\"#addClass-className\">.addClass( className )</a> </h4> <ul><li> <div><strong>className</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>One or more space-separated classes to be added to the class attribute of each matched element.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"addClass-function\" href=\"#addClass-function\">.addClass( function )</a> </h4> <ul><li> <div><strong>function</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Integer\">Integer</a> index, <a href=\"types#String\">String</a> currentClassName ) =&gt; <a href=\"types#String\">String</a> </div> <div>A function returning one or more space-separated class names to be added to the existing class name(s). Receives the index position of the element in the set and the existing class name(s) as arguments. Within the function, <code>this</code> refers to the current element in the set.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>It's important to note that this method does not replace a class. It simply adds the class, appending it to any which may already be assigned to the elements.</p> <p>Before jQuery version 1.12/2.2, the <code>.addClass()</code> method manipulated the <code>className</code> <em>property</em> of the selected elements, not the <code>class</code> <em>attribute</em>. Once the property was changed, it was the browser that updated the attribute accordingly. An implication of this behavior was that this method only worked for documents with HTML DOM semantics (e.g., not pure XML documents).</p> <p>As of jQuery 1.12/2.2, this behavior is changed to improve the support for XML documents, including SVG. Starting from this version, the <code>class</code> <em>attribute</em> is used instead. So, <code>.addClass()</code> can be used on XML or SVG documents.</p> <p>More than one class may be added at a time, separated by a space, to the set of matched elements, like so:</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).addClass( \"myClass yourClass\" );</pre> <p>This method is often used with <code>.removeClass()</code> to switch elements' classes from one to another, like so:</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).removeClass( \"myClass noClass\" ).addClass( \"yourClass\" );</pre> <p>Here, the <code>myClass</code> and <code>noClass</code> classes are removed from all paragraphs, while <code>yourClass</code> is added.</p> <p>As of jQuery 1.4, the <code>.addClass()</code> method's argument can receive a function.</p> <pre class=\"syntaxhighlighter javascript\">$( \"ul li\" ).addClass(function( index ) {\n  return \"item-\" + index;\n});</pre> <p>Given an unordered list with two <code>&lt;li&gt;</code> elements, this example adds the class \"item-0\" to the first <code>&lt;li&gt;</code> and \"item-1\" to the second.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Add the class \"selected\" to the matched elements.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;addClass demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    margin: 8px;\n    font-size: 16px;\n  }\n  .selected {\n    color: blue;\n  }\n  .highlight {\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Hello&lt;/p&gt;\n&lt;p&gt;and&lt;/p&gt;\n&lt;p&gt;Goodbye&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).last().addClass( \"selected\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Add the classes \"selected\" and \"highlight\" to the matched elements.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;addClass demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    margin: 8px;\n    font-size: 16px;\n  }\n  .selected {\n    color: red;\n  }\n  .highlight {\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Hello&lt;/p&gt;\n&lt;p&gt;and&lt;/p&gt;\n&lt;p&gt;Goodbye&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p:last\" ).addClass( \"selected highlight\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-2\"> <p>Pass in a function to <code>.addClass()</code> to add the \"green\" class to a div that already has a \"red\" class.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;addClass demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    background: white;\n  }\n  .red {\n    background: red;\n  }\n  .red.green {\n    background: green;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n &lt;div&gt;This div should be white&lt;/div&gt;\n &lt;div class=\"red\"&gt;This div will be green because it now has the \"green\" and \"red\" classes.\n   It would be red if the addClass function failed.&lt;/div&gt;\n &lt;div&gt;This div should be white&lt;/div&gt;\n &lt;p&gt;There are zero green divs&lt;/p&gt;\n \n&lt;script&gt;\n$( \"div\" ).addClass(function( index, currentClass ) {\n  var addedClass;\n \n  if ( currentClass === \"red\" ) {\n    addedClass = \"green\";\n    $( \"p\" ).text( \"There is one green div\" );\n  }\n \n  return addedClass;\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/addClass\" class=\"_attribution-link\">https://api.jquery.com/addClass</a>\n  </p>\n</div>\n","ajaxcomplete":"<h1 class=\"entry-title\">.ajaxComplete()</h1> <div class=\"entry-content\"> <article id=\"ajaxComplete1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.ajaxComplete( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Register a handler to be called when Ajax requests complete. This is an <a href=\"ajax_events\">AjaxEvent</a>.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"ajaxComplete-handler\" href=\"#ajaxComplete-handler\">.ajaxComplete( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> event, <a href=\"types#jqXHR\">jqXHR</a> jqXHR, <a href=\"types#PlainObject\">PlainObject</a> ajaxOptions )</div> <div>The function to be invoked.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Whenever an Ajax request completes, jQuery triggers the <code>ajaxComplete</code> event. Any and all handlers that have been registered with the <code>.ajaxComplete()</code> method are executed at this time.</p> <p>To observe this method in action, set up a basic Ajax load request:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"trigger\"&gt;Trigger&lt;/div&gt;\n&lt;div class=\"result\"&gt;&lt;/div&gt;\n&lt;div class=\"log\"&gt;&lt;/div&gt;</pre> <p>Attach the event handler to the document:</p> <pre class=\"syntaxhighlighter javascript\">$( document ).ajaxComplete(function() {\n  $( \".log\" ).text( \"Triggered ajaxComplete handler.\" );\n});</pre> <p>Now, make an Ajax request using any jQuery method:</p> <pre class=\"syntaxhighlighter javascript\">$( \".trigger\" ).click(function() {\n  $( \".result\" ).load( \"ajax/test.html\" );\n});</pre> <p>When the user clicks the element with class <code>trigger</code> and the Ajax request completes, the log message is displayed.</p> <p>All <code>ajaxComplete</code> handlers are invoked, regardless of what Ajax request was completed. If you must differentiate between the requests, use the parameters passed to the handler. Each time an <code>ajaxComplete</code> handler is executed, it is passed the event object, the <code>XMLHttpRequest</code> object, and the settings object that was used in the creation of the request. For example, you can restrict the callback to only handling events dealing with a particular URL:</p> <pre class=\"syntaxhighlighter javascript\">$( document ).ajaxComplete(function( event, xhr, settings ) {\n  if ( settings.url === \"ajax/test.html\" ) {\n    $( \".log\" ).text( \"Triggered ajaxComplete handler. The result is \" +\n      xhr.responseText );\n  }\n});</pre> <p><strong>Note:</strong> You can get the returned Ajax contents by looking at <code>xhr.responseText</code>.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> As of jQuery 1.9, all the handlers for the <a href=\"https://api.jquery.com/category/ajax/global-ajax-event-handlers/\">jQuery global Ajax events</a>, including those added with the <code>.ajaxComplete()</code> method, <em>must</em> be attached to <code>document</code>. </li> <li> If <code><a href=\"jquery.ajax\">$.ajax()</a></code> or <code><a href=\"jquery.ajaxsetup\">$.ajaxSetup()</a></code> is called with the <code>global</code> option set to <code>false</code>, the <code>.ajaxComplete()</code> method will not fire. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Show a message when an Ajax request completes.</p> <pre class=\"syntaxhighlighter javascript\">$( document ).ajaxComplete(function( event,request, settings ) {\n  $( \"#msg\" ).append( \"&lt;li&gt;Request Complete.&lt;/li&gt;\" );\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/ajaxComplete\" class=\"_attribution-link\">https://api.jquery.com/ajaxComplete</a>\n  </p>\n</div>\n","add":"<h1 class=\"entry-title\">.add()</h1> <div class=\"entry-content\"> <article id=\"add1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.add( selector )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Create a new jQuery object with elements added to the set of matched elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"add-selector\" href=\"#add-selector\">.add( selector )</a> </h4> <ul><li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> </div> <div>A string representing a selector expression to find additional elements to add to the set of matched elements.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"add-elements\" href=\"#add-elements\">.add( elements )</a> </h4> <ul><li> <div><strong>elements</strong></div> <div>Type: <a href=\"types#Element\">Element</a> </div> <div>One or more elements to add to the set of matched elements.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"add-html\" href=\"#add-html\">.add( html )</a> </h4> <ul><li> <div><strong>html</strong></div> <div>Type: <a href=\"types#htmlString\">htmlString</a> </div> <div>An HTML fragment to add to the set of matched elements.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.3.2/\">1.3.2</a></span><a id=\"add-selection\" href=\"#add-selection\">.add( selection )</a> </h4> <ul><li> <div><strong>selection</strong></div> <div>Type: <a href=\"types#jQuery\">jQuery</a> </div> <div>An existing jQuery object to add to the set of matched elements.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"add-selector-context\" href=\"#add-selector-context\">.add( selector, context )</a> </h4> <ul> <li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> </div> <div>A string representing a selector expression to find additional elements to add to the set of matched elements.</div> </li> <li> <div><strong>context</strong></div> <div>Type: <a href=\"types#Element\">Element</a> </div> <div>The point in the document at which the selector should begin matching; similar to the context argument of the <code>$(selector, context)</code> method.</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Given a jQuery object that represents a set of DOM elements, the <code>.add()</code> method constructs a new jQuery object from the union of those elements and the ones passed into the method. The argument to <code>.add()</code> can be pretty much anything that <code>$()</code> accepts, including a jQuery selector expression, references to DOM elements, or an HTML snippet.</p> <p>Do not assume that this method appends the elements to the existing collection in the order they are passed to the <code>.add()</code> method. When all elements are members of the same document, the resulting collection from <code>.add()</code> will be sorted in document order; that is, in order of each element's appearance in the document. If the collection consists of elements from different documents or ones not in any document, the sort order is undefined. To create a jQuery object with elements in a well-defined order and without sorting overhead, use the <code>$(array_of_DOM_elements)</code> signature.</p> <p>The updated set of elements can be used in a following (chained) method, or assigned to a variable for later use. For example:</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).add( \"div\" ).addClass( \"widget\" );\nvar pdiv = $( \"p\" ).add( \"div\" );</pre> <p>The following will <em>not</em> save the added elements, because the <code>.add()</code> method creates a new set and leaves the original set in pdiv unchanged:</p> <pre class=\"syntaxhighlighter javascript\">var pdiv = $( \"p\" );\npdiv.add( \"div\" ); // WRONG, pdiv will not change</pre> <p>Consider a page with a simple list and a paragraph following it:</p> <pre class=\"syntaxhighlighter xml\">&lt;ul&gt;\n  &lt;li&gt;list item 1&lt;/li&gt;\n  &lt;li&gt;list item 2&lt;/li&gt;\n  &lt;li&gt;list item 3&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p&gt;a paragraph&lt;/p&gt;</pre> <p>We can select the list items and then the paragraph by using either a selector or a reference to the DOM element itself as the <code>.add()</code> method's argument:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li\" ).add( \"p\" ).css( \"background-color\", \"red\" );</pre> <p>Or:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li\" ).add( document.getElementsByTagName( \"p\" )[ 0 ] )\n  .css( \"background-color\", \"red\" );</pre> <p>The result of this call is a red background behind all four elements. Using an HTML snippet as the <code>.add()</code> method's argument (as in the third version), we can create additional elements on the fly and add those elements to the matched set of elements. Let's say, for example, that we want to alter the background of the list items along with a newly created paragraph:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li\" ).add( \"&lt;p id='new'&gt;new paragraph&lt;/p&gt;\" )\n  .css( \"background-color\", \"red\" );</pre> <p>Although the new paragraph has been created and its background color changed, it still does not appear on the page. To place it on the page, we could add one of the insertion methods to the chain.</p> <p>As of jQuery 1.4 the results from .add() will always be returned in document order (rather than a simple concatenation).</p> <p><strong>Note:</strong> To reverse the <code>.add()</code> you can use <a href=\"not\"><code>.not( elements | selector )</code></a> to remove elements from the jQuery results, or <a href=\"end\"><code>.end()</code></a> to return to the selection before you added.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds all divs and makes a border. Then adds all paragraphs to the jQuery object to set their backgrounds yellow.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;add demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    width: 60px;\n    height: 60px;\n    margin: 10px;\n    float: left;\n  }\n  p {\n    clear: left;\n    font-weight: bold;\n    font-size: 16px;\n    color: blue;\n    margin: 0 10px;\n    padding: 2px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;p&gt;Added this... (notice no border)&lt;/p&gt;\n \n&lt;script&gt;\n$( \"div\" ).css( \"border\", \"2px solid red\" )\n  .add( \"p\" )\n  .css( \"background\", \"yellow\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Adds more elements, matched by the given expression, to the set of matched elements.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;add demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Hello&lt;/p&gt;\n&lt;span&gt;Hello Again&lt;/span&gt;\n \n&lt;script&gt;\n$( \"p\" ).add( \"span\" ).css( \"background\", \"yellow\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-2\"> <p>Adds more elements, created on the fly, to the set of matched elements.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;add demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Hello&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).clone().add( \"&lt;span&gt;Again&lt;/span&gt;\" ).appendTo( document.body );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-3\"> <p>Adds one or more Elements to the set of matched elements.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;add demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Hello&lt;/p&gt;\n&lt;span id=\"a\"&gt;Hello Again&lt;/span&gt;\n \n&lt;script&gt;\n$( \"p\" ).add( document.getElementById( \"a\" ) ).css( \"background\", \"yellow\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-4\"> <p>Demonstrates how to add (or push) elements to an existing collection</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;add demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Hello&lt;/p&gt;\n&lt;span id=\"a\"&gt;Hello Again&lt;/span&gt;\n \n&lt;script&gt;\nvar collection = $( \"p\" );\n// Capture the new collection\ncollection = collection.add( document.getElementById( \"a\" ) );\ncollection.css( \"background\", \"yellow\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/add\" class=\"_attribution-link\">https://api.jquery.com/add</a>\n  </p>\n</div>\n","ajaxstart":"<h1 class=\"entry-title\">.ajaxStart()</h1> <div class=\"entry-content\"> <article id=\"ajaxStart1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.ajaxStart( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Register a handler to be called when the first Ajax request begins. This is an <a href=\"ajax_events\">Ajax Event</a>.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"ajaxStart-handler\" href=\"#ajaxStart-handler\">.ajaxStart( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>The function to be invoked.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Whenever an Ajax request is about to be sent, jQuery checks whether there are any other outstanding Ajax requests. If none are in progress, jQuery triggers the <code>ajaxStart</code> event. Any and all handlers that have been registered with the <code>.ajaxStart()</code> method are executed at this time.</p> <p>To observe this method in action, set up a basic Ajax load request:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"trigger\"&gt;Trigger&lt;/div&gt;\n&lt;div class=\"result\"&gt;&lt;/div&gt;\n&lt;div class=\"log\"&gt;&lt;/div&gt;</pre> <p>Attach the event handler to any element:</p> <pre class=\"syntaxhighlighter javascript\">$( document ).ajaxStart(function() {\n  $( \".log\" ).text( \"Triggered ajaxStart handler.\" );\n});</pre> <p>Now, make an Ajax request using any jQuery method:</p> <pre class=\"syntaxhighlighter javascript\">$( \".trigger\" ).click(function() {\n  $( \".result\" ).load( \"ajax/test.html\" );\n});</pre> <p>When the user clicks the element with class <code>trigger</code> and the Ajax request is sent, the log message is displayed.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> As of jQuery 1.9, all the handlers for the <a href=\"https://api.jquery.com/category/ajax/global-ajax-event-handlers/\">jQuery global Ajax events</a>, including those added with the <code>.ajaxStart()</code> method, <em>must</em> be attached to <code>document</code>. </li> <li> If <code><a href=\"jquery.ajax\">$.ajax()</a></code> or <code><a href=\"jquery.ajaxsetup\">$.ajaxSetup()</a></code> is called with the <code>global</code> option set to <code>false</code>, the <code>.ajaxStart()</code> method will not fire. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Show a loading message whenever an Ajax request starts (and none is already active).</p> <pre class=\"syntaxhighlighter javascript\">$( document ).ajaxStart(function() {\n  $( \"#loading\" ).show();\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/ajaxStart\" class=\"_attribution-link\">https://api.jquery.com/ajaxStart</a>\n  </p>\n</div>\n","after":"<h1 class=\"entry-title\">.after()</h1> <div class=\"entry-content\"> <article id=\"after1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.after( content [, content ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Insert content, specified by the parameter, after each element in the set of matched elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"after-content-content\" href=\"#after-content-content\">.after( content [, content ] )</a> </h4> <ul> <li> <div><strong>content</strong></div> <div>Type: <a href=\"types#htmlString\">htmlString</a> or <a href=\"types#Element\">Element</a> or <a href=\"types#Text\">Text</a> or <a href=\"types#Array\">Array</a> or <a href=\"types#jQuery\">jQuery</a> </div> <div>HTML string, DOM element, text node, array of elements and text nodes, or jQuery object to insert after each element in the set of matched elements.</div> </li> <li> <div><strong>content</strong></div> <div>Type: <a href=\"types#htmlString\">htmlString</a> or <a href=\"types#Element\">Element</a> or <a href=\"types#Text\">Text</a> or <a href=\"types#Array\">Array</a> or <a href=\"types#jQuery\">jQuery</a> </div> <div>One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or jQuery objects to insert after each element in the set of matched elements.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"after-function\" href=\"#after-function\">.after( function )</a> </h4> <ul><li> <div><strong>function</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Integer\">Integer</a> index ) =&gt; <a href=\"types#htmlString\">htmlString</a> or <a href=\"types#Element\">Element</a> or <a href=\"types#Text\">Text</a> or <a href=\"types#jQuery\">jQuery</a> </div> <div>A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert after each element in the set of matched elements. Receives the index position of the element in the set as an argument. Within the function, <code>this</code> refers to the current element in the set.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.10/\">1.10</a></span><a id=\"after-function-html\" href=\"#after-function-html\">.after( function-html )</a> </h4> <ul><li> <div><strong>function-html</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Integer\">Integer</a> index, <a href=\"types#String\">String</a> html ) =&gt; <a href=\"types#htmlString\">htmlString</a> or <a href=\"types#Element\">Element</a> or <a href=\"types#Text\">Text</a> or <a href=\"types#jQuery\">jQuery</a> </div> <div>A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert after each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments. Within the function, <code>this</code> refers to the current element in the set.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.after()</code> and <code><a href=\"insertafter\">.insertAfter()</a></code> methods perform the same task. The major difference is in the syntax—specifically, in the placement of the content and target. With <code>.after()</code>, the content to be inserted comes from the method's argument: <code>$(target).after(contentToBeInserted)</code>. With <code>.insertAfter()</code>, on the other hand, the content precedes the method and is inserted after the target, which in turn is passed as the <code>.insertAfter()</code> method's argument: <code>$(contentToBeInserted).insertAfter(target)</code>.</p> <p>Using the following HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;h2&gt;Greetings&lt;/h2&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;/div&gt;\n&lt;/div&gt;</pre> <p>Content can be created and then inserted after several elements at once:</p> <pre class=\"syntaxhighlighter javascript\">$( \".inner\" ).after( \"&lt;p&gt;Test&lt;/p&gt;\" );</pre> <p>Each inner <code>&lt;div&gt;</code> element gets this new content:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;h2&gt;Greetings&lt;/h2&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;/div&gt;\n  &lt;p&gt;Test&lt;/p&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;/div&gt;\n  &lt;p&gt;Test&lt;/p&gt;\n&lt;/div&gt;</pre> <p>An element in the DOM can also be selected and inserted after another element:</p> <pre class=\"syntaxhighlighter javascript\">$( \".container\" ).after( $( \"h2\" ) );</pre> <p>If an element selected this way is inserted into a single location elsewhere in the DOM, it will be moved rather than cloned:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;/div&gt;\n&lt;/div&gt;\n&lt;h2&gt;Greetings&lt;/h2&gt;</pre> <p><strong>Important</strong>: If there is more than one target element, however, cloned copies of the inserted element will be created for each target except for the last one.</p> <h4 id=\"passing-a-function\">Passing a Function</h4> <p>As of jQuery 1.4, <code>.after()</code> supports passing a function that returns the elements to insert.</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).after(function() {\n  return \"&lt;div&gt;\" + this.className + \"&lt;/div&gt;\";\n});</pre> <p>This example inserts a <code>&lt;div&gt;</code> after each paragraph, with each new <code>&lt;div&gt;</code> containing the class name(s) of its preceding paragraph.</p> <h4 id=\"additional-arguments\">Additional Arguments</h4> <p>Similar to other content-adding methods such as <code><a href=\"prepend\">.prepend()</a></code> and <code><a href=\"before\">.before()</a></code>, <code>.after()</code> also supports passing in multiple arguments as input. Supported input includes DOM elements, jQuery objects, HTML strings, and arrays of DOM elements.</p> <p>For example, the following will insert two new <code>&lt;div&gt;</code>s and an existing <code>&lt;div&gt;</code> after the first paragraph:</p> <pre class=\"syntaxhighlighter javascript\">var $newdiv1 = $( \"&lt;div id='object1'&gt;&lt;/div&gt;\" ),\n  newdiv2 = document.createElement( \"div\" ),\n  existingdiv1 = document.getElementById( \"foo\" );\n \n$( \"p\" ).first().after( $newdiv1, [ newdiv2, existingdiv1 ] );</pre> <p>Since <code>.after()</code> can accept any number of additional arguments, the same result can be achieved by passing in the three <code>&lt;div&gt;</code>s as three separate arguments, like so: <code>$( \"p\" ).first().after( $newdiv1, newdiv2, existingdiv1 )</code>. The type and number of arguments will largely depend on the elements that are collected in the code.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> Prior to jQuery 1.9, <code>.after()</code> would attempt to add or change nodes in the current jQuery set if the first node in the set was not connected to a document, and in those cases return a new jQuery set rather than the original set. The method might or might not have returned a new result depending on the number or connectedness of its arguments! As of jQuery 1.9, <code>.after()</code>, <code>.before()</code>, and <code>.replaceWith()</code> always return the original unmodified set. Attempting to use these methods on a node without a parent has no effect—that is, neither the set nor the nodes it contains are changed. </li> <li> By design, any jQuery constructor or method that accepts an HTML string — <a href=\"jquery\">jQuery()</a>, <a href=\"append\">.append()</a>, <a href=\"after\">.after()</a>, etc. — can potentially execute code. This can occur by injection of script tags or use of HTML attributes that execute code (for example, <code>&lt;img onload=\"\"&gt;</code>). Do not use these methods to insert strings obtained from untrusted sources such as URL query parameters, cookies, or form inputs. Doing so can introduce cross-site-scripting (XSS) vulnerabilities. Remove or escape any user input before adding content to the document. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Inserts some HTML after all paragraphs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;after demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;I would like to say: &lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).after( \"&lt;b&gt;Hello&lt;/b&gt;\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Inserts a DOM element after all paragraphs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;after demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;I would like to say: &lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).after( document.createTextNode( \"Hello\" ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-2\"> <p>Inserts a jQuery object (similar to an Array of DOM Elements) after all paragraphs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;after demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;b&gt;Hello&lt;/b&gt;\n&lt;p&gt;I would like to say: &lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).after( $( \"b\" ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/after\" class=\"_attribution-link\">https://api.jquery.com/after</a>\n  </p>\n</div>\n","animate":"<h1 class=\"entry-title\">.animate()</h1> <div class=\"entry-content\"> <article id=\"animate1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.animate( properties [, duration ] [, easing ] [, complete ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Perform a custom animation of a set of CSS properties.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"animate-properties-duration-easing-complete\" href=\"#animate-properties-duration-easing-complete\">.animate( properties [, duration ] [, easing ] [, complete ] )</a> </h4> <ul> <li> <div><strong>properties</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>An object of CSS properties and values that the animation will move toward.</div> </li> <li> <div> <strong>duration</strong> (default: <code>400</code>)</div> <div>Type: <a href=\"types#Number\">Number</a> or <a href=\"types#String\">String</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div> <strong>easing</strong> (default: <code>swing</code>)</div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string indicating which easing function to use for the transition.</div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function to call once the animation is complete, called once per matched element.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"animate-properties-options\" href=\"#animate-properties-options\">.animate( properties, options )</a> </h4> <ul> <li> <div><strong>properties</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>An object of CSS properties and values that the animation will move toward.</div> </li> <li> <div><strong>options</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>A map of additional options to pass to the method.</div> <ul> <li> <div> <strong>duration</strong> (default: <code>400</code>)</div> <div>Type: <a href=\"types#Number\">Number</a> or <a href=\"types#String\">String</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div> <strong>easing</strong> (default: <code>swing</code>)</div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string indicating which easing function to use for the transition.</div> </li> <li> <div> <strong>queue</strong> (default: <code>true</code>)</div> <div>Type: <a href=\"types#Boolean\">Boolean</a> or <a href=\"types#String\">String</a> </div> <div>A Boolean indicating whether to place the animation in the effects queue. If false, the animation will begin immediately. <strong>As of jQuery 1.7</strong>, the queue option can also accept a string, in which case the animation is added to the queue represented by that string. When a custom queue name is used the animation does not automatically start; you must call <code>.dequeue(\"queuename\")</code> to start it.</div> </li> <li> <div><strong>specialEasing</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a>)</span> </div> </li> <li> <div><strong>step</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Number\">Number</a> now, <a href=\"types#Tween\">Tween</a> tween )</div> <div>A function to be called for each animated property of each animated element. This function provides an opportunity to modify the Tween object to change the value of the property before it is set.</div> </li> <li> <div><strong>progress</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Number\">Number</a> progress, <a href=\"types#Number\">Number</a> remainingMs )</div> <div>A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function that is called once the animation on an element is complete.</div> </li> <li> <div><strong>start</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation )</div> <div>A function to call when the animation on an element begins.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>done</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Boolean\">Boolean</a> jumpedToEnd )</div> <div>A function to be called when the animation on an element completes (its Promise object is resolved).<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>fail</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Boolean\">Boolean</a> jumpedToEnd )</div> <div>A function to be called when the animation on an element fails to complete (its Promise object is rejected).<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>always</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Boolean\">Boolean</a> jumpedToEnd )</div> <div>A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected).<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> </ul> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.animate()</code> method allows us to create animation effects on any numeric CSS property. The only required parameter is a plain object of CSS properties. This object is similar to the one that can be sent to the <code>.css()</code> method, except that the range of properties is more restrictive.</p> <h4 id=\"animation-properties\">Animation Properties and Values</h4> <p>All animated properties should be animated to a <em>single numeric value</em>, except as noted below; most properties that are non-numeric cannot be animated using basic jQuery functionality (For example, <code>width</code>, <code>height</code>, or <code>left</code> can be animated but <code>background-color</code> cannot be, unless the <a href=\"https://github.com/jquery/jquery-color\">jQuery.Color</a> plugin is used). Property values are treated as a number of pixels unless otherwise specified. The units <code>em</code> and <code>%</code> can be specified where applicable.</p> <p>In addition to style properties, some non-style properties such as <code>scrollTop</code> and <code>scrollLeft</code>, as well as custom properties, can be animated.</p> <p>Shorthand CSS properties (e.g. font, background, border) are not fully supported. For example, if you want to animate the rendered border width, at least a border style and border width other than \"auto\" must be set in advance. Or, if you want to animate font size, you would use <code>fontSize</code> or the CSS equivalent <code>'font-size'</code> rather than simply <code>'font'</code>. </p> <p>In addition to numeric values, each property can take the strings <code>'show'</code>, <code>'hide'</code>, and <code>'toggle'</code>. These shortcuts allow for custom hiding and showing animations that take into account the display type of the element. In order to use jQuery's built-in toggle state tracking, the <code>'toggle'</code> keyword must be consistently given as the value of the property being animated.</p> <p>Animated properties can also be relative. If a value is supplied with a leading <code>+=</code> or <code>-=</code> sequence of characters, then the target value is computed by adding or subtracting the given number from the current value of the property.</p> <div class=\"warning\"> <p><strong>Note:</strong> Unlike shorthand animation methods such as <code>.slideDown()</code> and <code>.fadeIn()</code>, the <code>.animate()</code> method does <em>not</em> make hidden elements visible as part of the effect. For example, given <code>$( \"someElement\" ).hide().animate({height: \"20px\"}, 500)</code>, the animation will run, but <em>the element will remain hidden</em>.</p> </div> <h4 id=\"duration\">Duration</h4> <p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The default duration is <code>400</code> milliseconds. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of <code>200</code> and <code>600</code> milliseconds, respectively.</p> <h4 id=\"callbacks\">Callback Functions</h4> <p>If supplied, the <code>start</code>, <code>step</code>, <code>progress</code>, <code>complete</code>, <code>done</code>, <code>fail</code>, and <code>always</code> callbacks are called on a <em>per-element</em> basis; <code>this</code> is set to the DOM element being animated. If no elements are in the set, no callbacks are called. If multiple elements are animated, the callback is executed once per matched element, not once for the animation as a whole. Use the <code>.promise()</code> method to obtain a promise to which you can attach callbacks that fire once for an animated set of any size, including zero elements.</p> <h4 id=\"basic-usage\">Basic Usage</h4> <p>To animate any element, such as a simple image:</p> <pre class=\"syntaxhighlighter xml\">&lt;div id=\"clickme\"&gt;\n  Click here\n&lt;/div&gt;\n&lt;img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\"\n  style=\"position: relative; left: 10px;\"&gt;</pre> <p>To animate the opacity, left offset, and height of the image simultaneously:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#clickme\" ).click(function() {\n  $( \"#book\" ).animate({\n    opacity: 0.25,\n    left: \"+=50\",\n    height: \"toggle\"\n  }, 5000, function() {\n    // Animation complete.\n  });\n});</pre> <p class=\"image\"> <figure> <img src=\"https://api.jquery.com/resources/animate-1.jpg\" alt=\"\"> <figcaption>Figure 1 - Illustration of the specified animation effect</figcaption> </figure> </p> <p>Note that the target value of the <code>height</code> property is <code>'toggle'</code>. Since the image was visible before, the animation shrinks the height to 0 to hide it. A second click then reverses this transition: </p> <p class=\"image\"> <figure> <img src=\"https://api.jquery.com/resources/animate-2.jpg\" alt=\"\"> <figcaption>Figure 2 - Illustration of the specified animation effect</figcaption> </figure> </p> <p>The <code>opacity</code> of the image is already at its target value, so this property is not animated by the second click. Since the target value for <code>left</code> is a relative value, the image moves even farther to the right during this second animation.</p> <p>Directional properties (<code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code>) have no discernible effect on elements if their <code>position</code> style property is <code>static</code>, which it is by default.</p> <div class=\"warning\"> <p><strong>Note: </strong>The <a href=\"http://jqueryui.com/\">jQuery UI</a> project extends the <code>.animate()</code> method by allowing some non-numeric styles such as colors to be animated. The project also includes mechanisms for specifying animations through CSS classes rather than individual attributes.</p> </div> <div class=\"warning\"> <p><strong>Note:</strong> if attempting to animate an element with a height or width of 0px, where contents of the element are visible due to overflow, jQuery may clip this overflow during animation. By fixing the dimensions of the original element being hidden however, it is possible to ensure that the animation runs smoothly. A <a href=\"http://www.google.com/search?q=clearfix\">clearfix</a> can be used to automatically fix the dimensions of your main element without the need to set this manually.</p> </div> <h4 id=\"step\">Step Function</h4> <p>The second version of <code>.animate()</code> provides a <code>step</code> option — a callback function that is fired at each step of the animation. This function is useful for enabling custom animation types or altering the animation as it is occurring. It accepts two arguments (<code>now</code> and <code>fx</code>), and <code>this</code> is set to the DOM element being animated.</p> <ul> <li> <code>now</code>: the numeric value of the property being animated at each step</li> <li> <code>fx</code>: a reference to the <code>jQuery.fx</code> prototype object, which contains a number of properties such as <code>elem</code> for the animated element, <code>start</code> and <code>end</code> for the first and last value of the animated property, respectively, and <code>prop</code> for the property being animated.</li> </ul> <p>Note that the <code>step</code> function is called for each animated property on each animated element. For example, given two list items, the <code>step</code> function fires four times at each step of the animation: </p> <pre class=\"syntaxhighlighter javascript\">$( \"li\" ).animate({\n  opacity: .5,\n  height: \"50%\"\n}, {\n  step: function( now, fx ) {\n    var data = fx.elem.id + \" \" + fx.prop + \": \" + now;\n    $( \"body\" ).append( \"&lt;div&gt;\" + data + \"&lt;/div&gt;\" );\n  }\n});</pre> <h4 id=\"easing\">Easing</h4> <p>The remaining parameter of <code>.animate()</code> is a string naming an easing function to use. An easing function specifies the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called <code>swing</code>, and one that progresses at a constant pace, called <code>linear</code>. More easing functions are available with the use of plug-ins, most notably the <a href=\"http://jqueryui.com/\">jQuery UI suite</a>.</p> <h4 id=\"per-property-easing\">Per-property Easing</h4> <p>As of jQuery version 1.4, you can set per-property easing functions within a single <code>.animate()</code> call. In the first version of <code>.animate()</code>, each property can take an array as its value: The first member of the array is the CSS property and the second member is an easing function. If a per-property easing function is not defined for a particular property, it uses the value of the <code>.animate()</code> method's optional easing argument. If the easing argument is not defined, the default <code>swing</code> function is used.</p> <p>For example, to simultaneously animate the width and height with the <code>swing</code> easing function and the opacity with the <code>linear</code> easing function:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#clickme\" ).click(function() {\n  $( \"#book\" ).animate({\n    width: [ \"toggle\", \"swing\" ],\n    height: [ \"toggle\", \"swing\" ],\n    opacity: \"toggle\"\n  }, 5000, \"linear\", function() {\n    $( this ).after( \"&lt;div&gt;Animation complete.&lt;/div&gt;\" );\n  });\n});</pre> <p>In the second version of <code>.animate()</code>, the options object can include the <code>specialEasing</code> property, which is itself an object of CSS properties and their corresponding easing functions. For example, to simultaneously animate the width using the <code>linear</code> easing function and the height using the <code>easeOutBounce</code> easing function:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#clickme\" ).click(function() {\n  $( \"#book\" ).animate({\n    width: \"toggle\",\n    height: \"toggle\"\n  }, {\n    duration: 5000,\n    specialEasing: {\n      width: \"linear\",\n      height: \"easeOutBounce\"\n    },\n    complete: function() {\n      $( this ).after( \"&lt;div&gt;Animation complete.&lt;/div&gt;\" );\n    }\n  });\n});</pre> <p>As previously noted, a plugin is required for the <code>easeOutBounce</code> function.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> All jQuery effects, including <code>.animate()</code>, can be turned off globally by setting <code>jQuery.fx.off = true</code>, which effectively sets the duration to 0. For more information, see <a href=\"jquery.fx.off\">jQuery.fx.off</a>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Click the button to animate the div with a number of different properties.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;animate demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    background-color: #bca;\n    width: 100px;\n    border: 1px solid green;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button id=\"go\"&gt;&amp;raquo; Run&lt;/button&gt;\n&lt;div id=\"block\"&gt;Hello!&lt;/div&gt;\n \n&lt;script&gt;\n// Using multiple unit types within one animation.\n \n$( \"#go\" ).click(function() {\n  $( \"#block\" ).animate({\n    width: \"70%\",\n    opacity: 0.4,\n    marginLeft: \"0.6in\",\n    fontSize: \"3em\",\n    borderWidth: \"10px\"\n  }, 1500 );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Animates a div's left property with a relative value. Click several times on the buttons to see the relative animations queued up.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;animate demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    position: absolute;\n    background-color: #abc;\n    left: 50px;\n    width: 90px;\n    height: 90px;\n    margin: 5px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button id=\"left\"&gt;&amp;laquo;&lt;/button&gt;\n&lt;button id=\"right\"&gt;&amp;raquo;&lt;/button&gt;\n&lt;div class=\"block\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"#right\" ).click(function() {\n  $( \".block\" ).animate({ \"left\": \"+=50px\" }, \"slow\" );\n});\n \n$( \"#left\" ).click(function(){\n  $( \".block\" ).animate({ \"left\": \"-=50px\" }, \"slow\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-2\"> <p>The first button shows how an unqueued animation works. It expands the div out to 90% width <strong>while</strong> the font-size is increasing. Once the font-size change is complete, the border animation will begin. The second button starts a traditional chained animation, where each animation will start once the previous animation on the element has completed.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;animate demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    background-color: #bca;\n    width: 200px;\n    height: 1.1em;\n    text-align: center;\n    border: 2px solid green;\n    margin: 3px;\n    font-size: 14px;\n  }\n  button {\n    font-size: 14px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button id=\"go1\"&gt;&amp;raquo; Animate Block1&lt;/button&gt;\n&lt;button id=\"go2\"&gt;&amp;raquo; Animate Block2&lt;/button&gt;\n&lt;button id=\"go3\"&gt;&amp;raquo; Animate Both&lt;/button&gt;\n&lt;button id=\"go4\"&gt;&amp;raquo; Reset&lt;/button&gt;\n&lt;div id=\"block1\"&gt;Block1&lt;/div&gt;\n&lt;div id=\"block2\"&gt;Block2&lt;/div&gt;\n \n&lt;script&gt;\n$( \"#go1\" ).click(function() {\n  $( \"#block1\" )\n    .animate({\n      width: \"90%\"\n    }, {\n      queue: false,\n      duration: 3000\n    })\n    .animate({ fontSize: \"24px\" }, 1500 )\n    .animate({ borderRightWidth: \"15px\" }, 1500 );\n});\n \n$( \"#go2\" ).click(function() {\n  $( \"#block2\" )\n    .animate({ width: \"90%\" }, 1000 )\n    .animate({ fontSize: \"24px\" }, 1000 )\n    .animate({ borderLeftWidth: \"15px\" }, 1000 );\n});\n \n$( \"#go3\" ).click(function() {\n  $( \"#go1\" ).add( \"#go2\" ).click();\n});\n \n$( \"#go4\" ).click(function() {\n  $( \"div\" ).css({\n    width: \"\",\n    fontSize: \"\",\n    borderWidth: \"\"\n  });\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-3\"> <p>Animates the first div's left property and synchronizes the remaining divs, using the step function to set their left properties at each stage of the animation. </p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;animate demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    position: relative;\n    background-color: #abc;\n    width: 40px;\n    height: 40px;\n    float: left;\n    margin: 5px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;&lt;button id=\"go\"&gt;Run »&lt;/button&gt;&lt;/p&gt;\n&lt;div class=\"block\"&gt;&lt;/div&gt;\n&lt;div class=\"block\"&gt;&lt;/div&gt;\n&lt;div class=\"block\"&gt;&lt;/div&gt;\n&lt;div class=\"block\"&gt;&lt;/div&gt;\n&lt;div class=\"block\"&gt;&lt;/div&gt;\n&lt;div class=\"block\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"#go\" ).click(function() {\n  $( \".block:first\" ).animate({\n    left: 100\n  }, {\n    duration: 1000,\n    step: function( now, fx ){\n      $( \".block:gt(0)\" ).css( \"left\", now );\n    }\n  });\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-4\"> <p>Animate all paragraphs to toggle both height and opacity, completing the animation within 600 milliseconds.</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).animate({\n  height: \"toggle\",\n  opacity: \"toggle\"\n}, \"slow\" );</pre> </div> <div class=\"entry-example\" id=\"example-5\"> <p>Animate all paragraphs to a left style of 50 and opacity of 1 (opaque, visible), completing the animation within 500 milliseconds.</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).animate({\n  left: 50,\n  opacity: 1\n}, 500 );</pre> </div> <div class=\"entry-example\" id=\"example-6\"> <p>Animate the left and opacity style properties of all paragraphs; run the animation <em>outside</em> the queue, so that it will automatically start without waiting for its turn.</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).animate({\n  left: \"50px\",\n  opacity: 1\n}, {\n  duration: 500,\n  queue: false\n});</pre> </div> <div class=\"entry-example\" id=\"example-7\"> <p>An example of using an 'easing' function to provide a different style of animation. This will only work if you have a plugin that provides this easing function. Note, this code will do nothing unless the paragraph element is hidden.</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).animate({\n  opacity: \"show\"\n}, \"slow\", \"easein\" );</pre> </div> <div class=\"entry-example\" id=\"example-8\"> <p>Animates all paragraphs to toggle both height and opacity, completing the animation within 600 milliseconds.</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).animate({\n  height: \"toggle\",\n  opacity: \"toggle\"\n}, {\n  duration: \"slow\"\n});</pre> </div> <div class=\"entry-example\" id=\"example-9\"> <p>Use an easing function to provide a different style of animation. This will only work if you have a plugin that provides this easing function.</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).animate({\n  opacity: \"show\"\n}, {\n  duration: \"slow\",\n  easing: \"easein\"\n});</pre> </div> <div class=\"entry-example\" id=\"example-10\"> <p>Animate all paragraphs and execute a callback function when the animation is complete. The first argument is an object of CSS properties, the second specifies that the animation should take 1000 milliseconds to complete, the third states the easing type, and the fourth argument is an anonymous callback function. </p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).animate({\n  height: 200,\n  width: 400,\n  opacity: 0.5\n}, 1000, \"linear\", function() {\n  alert( \"all done\" );\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/animate\" class=\"_attribution-link\">https://api.jquery.com/animate</a>\n  </p>\n</div>\n","ajaxstop":"<h1 class=\"entry-title\">.ajaxStop()</h1> <div class=\"entry-content\"> <article id=\"ajaxStop1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.ajaxStop( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Register a handler to be called when all Ajax requests have completed. This is an <a href=\"ajax_events\">Ajax Event</a>.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"ajaxStop-handler\" href=\"#ajaxStop-handler\">.ajaxStop( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>The function to be invoked.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Whenever an Ajax request completes, jQuery checks whether there are any other outstanding Ajax requests. If none remain, jQuery triggers the <code>ajaxStop</code> event. Any and all handlers that have been registered with the <code>.ajaxStop()</code> method are executed at this time. The <code>ajaxStop</code> event is also triggered if the last outstanding Ajax request is cancelled by returning false within the <code>beforeSend</code> callback function. </p> <p>To observe this method in action, set up a basic Ajax load request:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"trigger\"&gt;Trigger&lt;/div&gt;\n&lt;div class=\"result\"&gt;&lt;/div&gt;\n&lt;div class=\"log\"&gt;&lt;/div&gt;</pre> <p>Attach the event handler to the document:</p> <pre class=\"syntaxhighlighter javascript\">$( document ).ajaxStop(function() {\n  $( \".log\" ).text( \"Triggered ajaxStop handler.\" );\n});</pre> <p>Now, make an Ajax request using any jQuery method:</p> <pre class=\"syntaxhighlighter javascript\">$( \".trigger\" ).click(function() {\n  $( \".result\" ).load( \"ajax/test.html\" );\n});</pre> <p>When the user clicks the element with class <code>trigger</code> and the Ajax request completes, the log message is displayed.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> As of jQuery 1.9, all the handlers for the <a href=\"https://api.jquery.com/category/ajax/global-ajax-event-handlers/\">jQuery global Ajax events</a>, including those added with the <code>.ajaxStop()</code> method, <em>must</em> be attached to <code>document</code>. </li> <li> If <code><a href=\"jquery.ajax\">$.ajax()</a></code> or <code><a href=\"jquery.ajaxsetup\">$.ajaxSetup()</a></code> is called with the <code>global</code> option set to <code>false</code>, the <code>.ajaxStop()</code> method will not fire. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Hide a loading message after all the Ajax requests have stopped.</p> <pre class=\"syntaxhighlighter javascript\">$( document ).ajaxStop(function() {\n  $( \"#loading\" ).hide();\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/ajaxStop\" class=\"_attribution-link\">https://api.jquery.com/ajaxStop</a>\n  </p>\n</div>\n","attribute-contains-prefix-selector":"<h1 class=\"entry-title\">Attribute Contains Prefix Selector [name|=”value”]</h1> <div class=\"entry-content\"> <article id=\"attributeContainsPrefix1\" class=\"entry selector\"><h2 class=\"section-title\"><span>attributeContainsPrefix selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects elements that have the specified attribute with a value either equal to a given string or starting with that string followed by a hyphen (-).</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \"[attribute|='value']\" )</h4> <p class=\"argument\"><strong>attribute: </strong>An attribute name.</p> <p class=\"argument\"><strong>value: </strong>An attribute value. Can be either a <a href=\"https://www.w3.org/TR/css3-selectors/#attribute-selectors\">valid identifier</a> or a quoted string.</p> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This selector was introduced into the CSS specification to handle language attributes.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds all links with an hreflang attribute that is english.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;attributeContainsPrefix demo&lt;/title&gt;\n  &lt;style&gt;\n  a {\n    display: inline-block;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;a href=\"example.html\" hreflang=\"en\"&gt;Some text&lt;/a&gt;\n&lt;a href=\"example.html\" hreflang=\"en-UK\"&gt;Some other text&lt;/a&gt;\n&lt;a href=\"example.html\" hreflang=\"english\"&gt;will not be outlined&lt;/a&gt;\n \n&lt;script&gt;\n$( \"a[hreflang|='en']\" ).css( \"border\", \"3px dotted green\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/attribute-contains-prefix-selector\" class=\"_attribution-link\">https://api.jquery.com/attribute-contains-prefix-selector</a>\n  </p>\n</div>\n","ajaxerror":"<h1 class=\"entry-title\">.ajaxError()</h1> <div class=\"entry-content\"> <article id=\"ajaxError1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.ajaxError( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Register a handler to be called when Ajax requests complete with an error. This is an <a href=\"ajax_events\">Ajax Event</a>.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"ajaxError-handler\" href=\"#ajaxError-handler\">.ajaxError( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> event, <a href=\"types#jqXHR\">jqXHR</a> jqXHR, <a href=\"types#PlainObject\">PlainObject</a> ajaxSettings, <a href=\"types#String\">String</a> thrownError )</div> <div>The function to be invoked.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Whenever an Ajax request completes with an error, jQuery triggers the <code>ajaxError</code> event. Any and all handlers that have been registered with the <code>.ajaxError()</code> method are executed at this time. <strong>Note:</strong> <em>This handler is not called for cross-domain script and cross-domain JSONP requests.</em></p> <p>To observe this method in action, set up a basic Ajax load request.</p> <pre class=\"syntaxhighlighter xml\">&lt;button class=\"trigger\"&gt;Trigger&lt;/button&gt;\n&lt;div class=\"result\"&gt;&lt;/div&gt;\n&lt;div class=\"log\"&gt;&lt;/div&gt;</pre> <p>Attach the event handler to the document:</p> <pre class=\"syntaxhighlighter javascript\">$( document ).ajaxError(function() {\n  $( \".log\" ).text( \"Triggered ajaxError handler.\" );\n});</pre> <p>Now, make an Ajax request using any jQuery method:</p> <pre class=\"syntaxhighlighter javascript\">$( \"button.trigger\" ).on( \"click\", function() {\n  $( \"div.result\" ).load( \"ajax/missing.html\" );\n});</pre> <p>When the user clicks the button and the Ajax request fails, because the requested file is missing, the log message is displayed.</p> <p>All <code>ajaxError</code> handlers are invoked, regardless of what Ajax request was completed. To differentiate between the requests, use the parameters passed to the handler. Each time an <code>ajaxError</code> handler is executed, it is passed the event object, the <code>jqXHR</code> object (prior to jQuery 1.5, the <code><abbr title=\"XMLHttpRequest\">XHR</abbr></code> object), and the settings object that was used in the creation of the request. When an HTTP error occurs, the fourth argument (<code>thrownError</code>) receives the textual portion of the HTTP status, such as \"Not Found\" or \"Internal Server Error.\" For example, to restrict the error callback to only handling events dealing with a particular URL:</p> <pre class=\"syntaxhighlighter javascript\">$( document ).ajaxError(function( event, jqxhr, settings, thrownError ) {\n  if ( settings.url == \"ajax/missing.html\" ) {\n    $( \"div.log\" ).text( \"Triggered ajaxError handler.\" );\n  }\n});</pre> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> As of jQuery 1.9, all the handlers for the <a href=\"https://api.jquery.com/category/ajax/global-ajax-event-handlers/\">jQuery global Ajax events</a>, including those added with the <code>.ajaxError()</code> method, <em>must</em> be attached to <code>document</code>. </li> <li> If <code><a href=\"jquery.ajax\">$.ajax()</a></code> or <code><a href=\"jquery.ajaxsetup\">$.ajaxSetup()</a></code> is called with the <code>global</code> option set to <code>false</code>, the <code>.ajaxError()</code> method will not fire. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Show a message when an Ajax request fails.</p> <pre class=\"syntaxhighlighter javascript\">$( document ).ajaxError(function( event, request, settings ) {\n  $( \"#msg\" ).append( \"&lt;li&gt;Error requesting page \" + settings.url + \"&lt;/li&gt;\" );\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/ajaxError\" class=\"_attribution-link\">https://api.jquery.com/ajaxError</a>\n  </p>\n</div>\n","all-selector":"<h1 class=\"entry-title\">All Selector (“*”)</h1> <div class=\"entry-content\"> <article id=\"all1\" class=\"entry selector\"><h2 class=\"section-title\"><span>all selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all elements.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \"*\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Caution: The all, or universal, selector is extremely slow, except when used by itself.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Find every element (including head, body, etc) in the document. Note that if your browser has an extension/add-on enabled that inserts a <code>&lt;script&gt;</code> or <code>&lt;link&gt;</code> element into the DOM, that element will be counted as well.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;all demo&lt;/title&gt;\n  &lt;style&gt;\n  h3 {\n    margin: 0;\n  }\n  div, span, p {\n    width: 80px;\n    height: 40px;\n    float: left;\n    padding: 10px;\n    margin: 10px;\n    background-color: #EEEEEE;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;DIV&lt;/div&gt;\n&lt;span&gt;SPAN&lt;/span&gt;\n&lt;p&gt;P &lt;button&gt;Button&lt;/button&gt;&lt;/p&gt;\n \n&lt;script&gt;\nvar elementCount = $( \"*\" ).css( \"border\", \"3px solid red\" ).length;\n$( \"body\" ).prepend( \"&lt;h3&gt;\" + elementCount + \" elements found&lt;/h3&gt;\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Find all elements within document.body so elements like head, script, etc. are excluded.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;all demo&lt;/title&gt;\n  &lt;style&gt;\n  h3 {\n    margin: 0;\n  }\n  div, span, p {\n    width: 80px;\n    height: 40px;\n    float: left;\n    padding: 10px;\n    margin: 10px;\n    background-color: #EEEEEE;\n  }\n  #test {\n    width: auto;\n    height: auto;\n    background-color: transparent;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div id=\"test\"&gt;\n  &lt;div&gt;DIV&lt;/div&gt;\n  &lt;span&gt;SPAN&lt;/span&gt;\n  &lt;p&gt;P &lt;button&gt;Button&lt;/button&gt;&lt;/p&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\nvar elementCount = $( \"#test\" ).find( \"*\" ).css( \"border\", \"3px solid red\" ).length;\n$( \"body\" ).prepend( \"&lt;h3&gt;\" + elementCount + \" elements found&lt;/h3&gt;\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/all-selector\" class=\"_attribution-link\">https://api.jquery.com/all-selector</a>\n  </p>\n</div>\n","ajaxsuccess":"<h1 class=\"entry-title\">.ajaxSuccess()</h1> <div class=\"entry-content\"> <article id=\"ajaxSuccess1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.ajaxSuccess( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Attach a function to be executed whenever an Ajax request completes successfully. This is an <a href=\"ajax_events\">Ajax Event</a>.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"ajaxSuccess-handler\" href=\"#ajaxSuccess-handler\">.ajaxSuccess( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> event, <a href=\"types#jqXHR\">jqXHR</a> jqXHR, <a href=\"types#PlainObject\">PlainObject</a> ajaxOptions, <a href=\"types#PlainObject\">PlainObject</a> data )</div> <div>The function to be invoked.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Whenever an Ajax request completes successfully, jQuery triggers the <code>ajaxSuccess</code> event. Any and all handlers that have been registered with the <code>.ajaxSuccess()</code> method are executed at this time.</p> <p>To observe this method in action, set up a basic Ajax load request:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"trigger\"&gt;Trigger&lt;/div&gt;\n&lt;div class=\"result\"&gt;&lt;/div&gt;\n&lt;div class=\"log\"&gt;&lt;/div&gt;</pre> <p>Attach the event handler to any element:</p> <pre class=\"syntaxhighlighter javascript\">$(document).ajaxSuccess(function() {\n  $( \".log\" ).text( \"Triggered ajaxSuccess handler.\" );\n});</pre> <p>Now, make an Ajax request using any jQuery method:</p> <pre class=\"syntaxhighlighter javascript\">$( \".trigger\" ).on( \"click\", function() {\n  $( \".result\" ).load( \"ajax/test.html\" );\n});</pre> <p>When the user clicks the element with class <code>trigger</code> and the Ajax request completes successfully, the log message is displayed.</p> <p>All <code>ajaxSuccess</code> handlers are invoked, regardless of what Ajax request was completed. If you must differentiate between the requests, you can use the parameters passed to the handler. Each time an <code>ajaxSuccess</code> handler is executed, it is passed the event object, the <code>XMLHttpRequest</code> object, and the settings object that was used in the creation of the request. For example, you can restrict the callback to only handling events dealing with a particular URL:</p> <pre class=\"syntaxhighlighter javascript\">$( document ).ajaxSuccess(function( event, xhr, settings ) {\n  if ( settings.url == \"ajax/test.html\" ) {\n    $( \".log\" ).text( \"Triggered ajaxSuccess handler. The Ajax response was: \" +\n      xhr.responseText );\n  }\n});</pre> <p><strong>Note:</strong> You can get the returned Ajax contents by looking at <code>xhr.responseXML</code> or <code>xhr.responseText</code> for xml and html respectively.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> As of jQuery 1.9, all the handlers for the <a href=\"https://api.jquery.com/category/ajax/global-ajax-event-handlers/\">jQuery global Ajax events</a>, including those added with the <code>.ajaxSuccess()</code> method, <em>must</em> be attached to <code>document</code>. </li> <li> If <code><a href=\"jquery.ajax\">$.ajax()</a></code> or <code><a href=\"jquery.ajaxsetup\">$.ajaxSetup()</a></code> is called with the <code>global</code> option set to <code>false</code>, the <code>.ajaxSuccess()</code> method will not fire. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Show a message when an Ajax request completes successfully.</p> <pre class=\"syntaxhighlighter javascript\">$( document ).ajaxSuccess(function( event, request, settings ) {\n  $( \"#msg\" ).append( \"&lt;li&gt;Successful Request!&lt;/li&gt;\" );\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/ajaxSuccess\" class=\"_attribution-link\">https://api.jquery.com/ajaxSuccess</a>\n  </p>\n</div>\n","append":"<h1 class=\"entry-title\">.append()</h1> <div class=\"entry-content\"> <article id=\"append1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.append( content [, content ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Insert content, specified by the parameter, to the end of each element in the set of matched elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"append-content-content\" href=\"#append-content-content\">.append( content [, content ] )</a> </h4> <ul> <li> <div><strong>content</strong></div> <div>Type: <a href=\"types#htmlString\">htmlString</a> or <a href=\"types#Element\">Element</a> or <a href=\"types#Text\">Text</a> or <a href=\"types#Array\">Array</a> or <a href=\"types#jQuery\">jQuery</a> </div> <div>DOM element, text node, array of elements and text nodes, HTML string, or jQuery object to insert at the end of each element in the set of matched elements.</div> </li> <li> <div><strong>content</strong></div> <div>Type: <a href=\"types#htmlString\">htmlString</a> or <a href=\"types#Element\">Element</a> or <a href=\"types#Text\">Text</a> or <a href=\"types#Array\">Array</a> or <a href=\"types#jQuery\">jQuery</a> </div> <div>One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or jQuery objects to insert at the end of each element in the set of matched elements.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"append-function\" href=\"#append-function\">.append( function )</a> </h4> <ul><li> <div><strong>function</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Integer\">Integer</a> index, <a href=\"types#String\">String</a> html ) =&gt; <a href=\"types#htmlString\">htmlString</a> or <a href=\"types#Element\">Element</a> or <a href=\"types#Text\">Text</a> or <a href=\"types#jQuery\">jQuery</a> </div> <div>A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert at the end of each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments. Within the function, <code>this</code> refers to the current element in the set.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.append()</code> method inserts the specified content as the last child of each element in the jQuery collection (To insert it as the <em>first</em> child, use <a href=\"prepend\"><code>.prepend()</code></a>).</p> <p>The <code>.append()</code> and <code><a href=\"appendto\">.appendTo()</a></code> methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With <code>.append()</code>, the selector expression preceding the method is the container into which the content is inserted. With <code>.appendTo()</code>, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.</p> <p>Consider the following HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;h2&gt;Greetings&lt;/h2&gt;\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;/div&gt;\n&lt;/div&gt;</pre> <p>You can create content and insert it into several elements at once:</p> <pre class=\"syntaxhighlighter javascript\">$( \".inner\" ).append( \"&lt;p&gt;Test&lt;/p&gt;\" );</pre> <p>Each inner <code>&lt;div&gt;</code> element gets this new content:</p> <pre class=\"syntaxhighlighter xml\">&lt;h2&gt;Greetings&lt;/h2&gt;\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;\n    Hello\n    &lt;p&gt;Test&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;div class=\"inner\"&gt;\n    Goodbye\n    &lt;p&gt;Test&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</pre> <p>You can also select an element on the page and insert it into another:</p> <pre class=\"syntaxhighlighter javascript\">$( \".container\" ).append( $( \"h2\" ) );</pre> <p>If an element selected this way is inserted into a single location elsewhere in the DOM, it will be moved into the target (not cloned):</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;/div&gt;\n  &lt;h2&gt;Greetings&lt;/h2&gt;\n&lt;/div&gt;</pre> <p><strong>Important</strong>: If there is more than one target element, however, cloned copies of the inserted element will be created for each target except for the last one.</p> <h4 id=\"additional-arguments\">Additional Arguments</h4> <p>Similar to other content-adding methods such as <code><a href=\"prepend\">.prepend()</a></code> and <code><a href=\"before\">.before()</a></code>, <code>.append()</code> also supports passing in multiple arguments as input. Supported input includes DOM elements, jQuery objects, HTML strings, and arrays of DOM elements.</p> <p>For example, the following will insert two new <code>&lt;div&gt;</code>s and an existing <code>&lt;div&gt;</code> as the last three child nodes of the body:</p> <pre class=\"syntaxhighlighter javascript\">var $newdiv1 = $( \"&lt;div id='object1'&gt;&lt;/div&gt;\" ),\n  newdiv2 = document.createElement( \"div\" ),\n  existingdiv1 = document.getElementById( \"foo\" );\n \n$( \"body\" ).append( $newdiv1, [ newdiv2, existingdiv1 ] );</pre> <p>Since <code>.append()</code> can accept any number of additional arguments, the same result can be achieved by passing in the three <code>&lt;div&gt;</code>s as three separate arguments, like so: <code>$('body').append( $newdiv1, newdiv2, existingdiv1 )</code>. The type and number of arguments will largely depend on how you collect the elements in your code.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> By design, any jQuery constructor or method that accepts an HTML string — <a href=\"jquery\">jQuery()</a>, <a href=\"append\">.append()</a>, <a href=\"after\">.after()</a>, etc. — can potentially execute code. This can occur by injection of script tags or use of HTML attributes that execute code (for example, <code>&lt;img onload=\"\"&gt;</code>). Do not use these methods to insert strings obtained from untrusted sources such as URL query parameters, cookies, or form inputs. Doing so can introduce cross-site-scripting (XSS) vulnerabilities. Remove or escape any user input before adding content to the document. </li> <li> jQuery doesn't officially support SVG. Using jQuery methods on SVG documents, unless explicitly documented for that method, might cause unexpected behaviors. Examples of methods that support SVG as of jQuery 3.0 are <code>addClass</code> and <code>removeClass</code>. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Appends some HTML to all paragraphs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;append demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;I would like to say: &lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).append( \"&lt;strong&gt;Hello&lt;/strong&gt;\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Appends an Element to all paragraphs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;append demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;I would like to say: &lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).append( document.createTextNode( \"Hello\" ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-2\"> <p>Appends a jQuery object (similar to an Array of DOM Elements) to all paragraphs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;append demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;strong&gt;Hello world!!!&lt;/strong&gt;\n&lt;p&gt;I would like to say: &lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).append( $( \"strong\" ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/append\" class=\"_attribution-link\">https://api.jquery.com/append</a>\n  </p>\n</div>\n","addback":"<h1 class=\"entry-title\">.addBack()</h1> <div class=\"entry-content\"> <article id=\"addBack1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.addBack( [selector ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Add the previous set of elements on the stack to the current set, optionally filtered by a selector.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a></span><a id=\"addBack-selector\" href=\"#addBack-selector\">.addBack( [selector ] )</a> </h4> <ul><li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> </div> <div>A string containing a selector expression to match the current set of elements against.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>As described in the discussion for <code><a href=\"end\">.end()</a></code>, jQuery objects maintain an internal stack that keeps track of changes to the matched set of elements. When one of the DOM traversal methods is called, the new set of elements is pushed onto the stack. If the previous set of elements is desired as well, <code>.addBack()</code> can help.</p> <p>Consider a page with a simple list on it:</p> <pre class=\"syntaxhighlighter xml\">&lt;ul&gt;\n  &lt;li&gt;list item 1&lt;/li&gt;\n  &lt;li&gt;list item 2&lt;/li&gt;\n  &lt;li class=\"third-item\"&gt;list item 3&lt;/li&gt;\n  &lt;li&gt;list item 4&lt;/li&gt;\n  &lt;li&gt;list item 5&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>The result of the following code is a red background behind items 3, 4 and 5:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li.third-item\" ).nextAll().addBack()\n  .css( \"background-color\", \"red\" );</pre> <p>First, the initial selector locates item 3, initializing the stack with the set containing just this item. The call to <code>.nextAll()</code> then pushes the set of items 4 and 5 onto the stack. Finally, the <code>.addBack()</code> invocation merges these two sets together, creating a jQuery object that points to all three items in document order: <code>{[&lt;li.third-item&gt;,&lt;li&gt;,&lt;li&gt; ]}</code>.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>The <code>.addBack()</code> method causes the previous set of DOM elements in the traversal stack to be added to the current set. In the first example, the top stack contains the set resulting from <code>.find(\"p\")</code>. In the second example, <code>.addBack()</code> adds the previous set of elements on the stack — in this case <code>$(\"div.after-addback\")</code> — to the current set, selecting both the div and its enclosed paragraphs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;addBack demo&lt;/title&gt;\n  &lt;style&gt;\n  p, div {\n    margin: 5px;\n    padding: 5px;\n  }\n  .border {\n    border: 2px solid red;\n  }\n  .background {\n    background: yellow;\n  }\n  .left, .right {\n    width: 45%;\n    float: left;\n  }\n  .right {\n    margin-left: 3%;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div class=\"left\"&gt;\n  &lt;p&gt;&lt;strong&gt;Before &lt;code&gt;addBack()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n  &lt;div class=\"before-addback\"&gt;\n    &lt;p&gt;First Paragraph&lt;/p&gt;\n    &lt;p&gt;Second Paragraph&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=\"right\"&gt;\n  &lt;p&gt;&lt;strong&gt;After &lt;code&gt;addBack()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n  &lt;div class=\"after-addback\"&gt;\n    &lt;p&gt;First Paragraph&lt;/p&gt;\n    &lt;p&gt;Second Paragraph&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\n$( \"div.left, div.right\" ).find( \"div, div &gt; p\" ).addClass( \"border\" );\n \n// First Example\n$( \"div.before-addback\" ).find( \"p\" ).addClass( \"background\" );\n \n// Second Example\n$( \"div.after-addback\" ).find( \"p\" ).addBack().addClass( \"background\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/addBack\" class=\"_attribution-link\">https://api.jquery.com/addBack</a>\n  </p>\n</div>\n","attr":"<h1 class=\"entry-title\">.attr()</h1> <div class=\"entry-content\"> Get the value of an attribute for the first element in the set of matched elements or set one or more attributes for every matched element.<div class=\"toc\"> <h4><span>Contents:</span></h4> <ul class=\"toc-list\"> <li> <a href=\"#attr1\">.attr( attributeName )</a><ul><li><a href=\"#attr-attributeName\">.attr( attributeName )</a></li></ul> </li> <li> <a href=\"#attr2\">.attr( attributeName, value )</a><ul> <li><a href=\"#attr-attributeName-value\">.attr( attributeName, value )</a></li> <li><a href=\"#attr-attributes\">.attr( attributes )</a></li> <li><a href=\"#attr-attributeName-function\">.attr( attributeName, function )</a></li> </ul> </li> </ul> </div>\n<article id=\"attr1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.attr( attributeName )</span><span class=\"returns\">Returns: <a href=\"types#String\">String</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Get the value of an attribute for the first element in the set of matched elements.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"attr-attributeName\" href=\"#attr-attributeName\">.attr( attributeName )</a> </h4> <ul><li> <div><strong>attributeName</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>The name of the attribute to get.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.attr()</code> method gets the attribute value for only the <em>first</em> element in the matched set. To get the value for each element individually, use a looping construct such as jQuery's <code>.each()</code> or <code>.map()</code> method.</p> <p>Using jQuery's <code>.attr()</code> method to get the value of an element's attribute has two main benefits:</p> <ol> <li> <strong>Convenience</strong>: It can be called directly on a jQuery object and chained to other jQuery methods.</li> <li> <strong>Cross-browser consistency</strong>: The values of some attributes are reported inconsistently across browsers, and even across versions of a single browser. The <code>.attr()</code> method reduces such inconsistencies.</li> </ol> <div class=\"warning\"> <p><strong>Note:</strong> Attribute values are strings with the exception of a few attributes such as value and tabindex.</p> </div> <p>As of jQuery 1.6, the <code>.attr()</code> method returns <code>undefined</code> for attributes that have not been set. <strong>To retrieve and change DOM properties such as the <code>checked</code>, <code>selected</code>, or <code>disabled</code> state of form elements, use the <a href=\"prop\">.prop()</a> method.</strong></p>  <h4>Attributes vs. Properties</h4> <p>The difference between <em>attributes</em> and <em>properties</em> can be important in specific situations. <strong>Before jQuery 1.6</strong>, the <code>.attr()</code> method sometimes took property values into account when retrieving some attributes, which could cause inconsistent behavior. <strong>As of jQuery 1.6</strong>, the <code>.prop()</code> method provides a way to explicitly retrieve property values, while <code>.attr()</code> retrieves attributes.</p> <p>For example, <code>selectedIndex</code>, <code>tagName</code>, <code>nodeName</code>, <code>nodeType</code>, <code>ownerDocument</code>, <code>defaultChecked</code>, and <code>defaultSelected</code> should be retrieved and set with the <code><a href=\"prop\">.prop()</a></code> method. Prior to jQuery 1.6, these properties were retrievable with the <code>.attr()</code> method, but this was not within the scope of <code>attr</code>. These do not have corresponding attributes and are only properties.</p> <p>Concerning boolean attributes, consider a DOM element defined by the HTML markup <code>&lt;input type=\"checkbox\" checked=\"checked\" /&gt;</code>, and assume it is in a JavaScript variable named <code>elem</code>:</p> <table> <tr> <th> <code>elem.checked</code> </th> <td> <code>true</code> (Boolean) Will change with checkbox state</td> </tr> <tr> <th> <code>$( elem ).prop( \"checked\" )</code> </th> <td> <code>true</code> (Boolean) Will change with checkbox state</td> </tr> <tr> <th> <code>elem.getAttribute( \"checked\" )</code> </th> <td> <code>\"checked\"</code> (String) Initial state of the checkbox; does not change</td> </tr> <tr> <th> <code>$( elem ).attr( \"checked\" )</code> <em>(1.6)</em> </th> <td> <code>\"checked\"</code> (String) Initial state of the checkbox; does not change</td> </tr> <tr> <th> <code>$( elem ).attr( \"checked\" )</code> <em>(1.6.1+)</em> </th> <td> <code>\"checked\"</code> (String) Will change with checkbox state</td> </tr> <tr> <th> <code>$( elem ).attr( \"checked\" )</code> <em>(pre-1.6)</em> </th> <td> <code>true</code> (Boolean) Changed with checkbox state</td> </tr> </table> <br> <p>According to the <a href=\"http://www.w3.org/TR/html401/interact/forms.html#h-17.4\">W3C forms specification</a>, the <code>checked</code> attribute is a <em><a href=\"http://www.w3.org/TR/html4/intro/sgmltut.html#h-3.3.4.2\">boolean attribute</a></em>, which means the corresponding property is <strong>true</strong> if the attribute is present at all—even if, for example, the attribute has no value or is set to empty string value or even \"false\". This is true of all boolean attributes.</p> <p>Nevertheless, the most important concept to remember about the <code>checked</code> attribute is that it does not correspond to the <code>checked</code> property. The attribute actually corresponds to the <code>defaultChecked</code> property and should be used only to set the <em>initial</em> value of the checkbox. The <code>checked</code> attribute value does not change with the state of the checkbox, while the <code>checked</code> property does. Therefore, the cross-browser-compatible way to determine if a checkbox is checked is to use the property:</p> <ul> <li> <code>if ( elem.checked )</code> </li> <li> <code>if ( $( elem ).prop( \"checked\" ) )</code> </li> <li> <code>if ( $( elem ).is( \":checked\" ) )</code> </li> </ul> <p>The same is true for other dynamic attributes, such as <code>selected</code> and <code>value</code>.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> In Internet Explorer prior to version 9, using <code><a href=\"prop\">.prop()</a></code> to set a DOM element property to anything other than a simple primitive value (number, string, or boolean) can cause memory leaks if the property is not removed (using <a href=\"removeprop\"><code>.removeProp()</code></a>) before the DOM element is removed from the document. To safely set values on DOM objects without memory leaks, use <a href=\"data\"><code>.data()</code></a>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Display the checked attribute and property of a checkbox as it changes.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;attr demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    margin: 20px 0 0;\n  }\n  b {\n    color: blue;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;input id=\"check1\" type=\"checkbox\" checked=\"checked\"&gt;\n&lt;label for=\"check1\"&gt;Check me&lt;/label&gt;\n&lt;p&gt;&lt;/p&gt;\n \n&lt;script&gt;\n$( \"input\" )\n  .change(function() {\n    var $input = $( this );\n    $( \"p\" ).html( \".attr( 'checked' ): &lt;b&gt;\" + $input.attr( \"checked\" ) + \"&lt;/b&gt;&lt;br&gt;\" +\n      \".prop( 'checked' ): &lt;b&gt;\" + $input.prop( \"checked\" ) + \"&lt;/b&gt;&lt;br&gt;\" +\n      \".is( ':checked' ): &lt;b&gt;\" + $input.is( \":checked\" ) + \"&lt;/b&gt;\" );\n  })\n  .change();\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Find the title attribute of the first &lt;em&gt; in the page.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;attr demo&lt;/title&gt;\n  &lt;style&gt;\n  em {\n    color: blue;\n    font-weight: bold;\n  }\n  div {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Once there was a &lt;em title=\"huge, gigantic\"&gt;large&lt;/em&gt; dinosaur...&lt;/p&gt;\n \nThe title of the emphasis is:&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar title = $( \"em\" ).attr( \"title\" );\n$( \"div\" ).text( title );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article><article id=\"attr2\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.attr( attributeName, value )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Set one or more attributes for the set of matched elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"attr-attributeName-value\" href=\"#attr-attributeName-value\">.attr( attributeName, value )</a> </h4> <ul> <li> <div><strong>attributeName</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>The name of the attribute to set.</div> </li> <li> <div><strong>value</strong></div> <div>Type: <a href=\"types#String\">String</a> or <a href=\"types#Number\">Number</a> or <a href=\"types#Null\">Null</a> </div> <div>A value to set for the attribute. If <code>null</code>, the specified attribute will be removed (as in <a href=\"removeattr\"><code>.removeAttr()</code></a>).</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"attr-attributes\" href=\"#attr-attributes\">.attr( attributes )</a> </h4> <ul><li> <div><strong>attributes</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>An object of attribute-value pairs to set.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.1/\">1.1</a></span><a id=\"attr-attributeName-function\" href=\"#attr-attributeName-function\">.attr( attributeName, function )</a> </h4> <ul> <li> <div><strong>attributeName</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>The name of the attribute to set.</div> </li> <li> <div><strong>function</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Integer\">Integer</a> index, <a href=\"types#String\">String</a> attr ) =&gt; <a href=\"types#String\">String</a> or <a href=\"types#Number\">Number</a> </div> <div>A function returning the value to set. <code>this</code> is the current element. Receives the index position of the element in the set and the old attribute value as arguments.</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc-1\"> <p>The <code>.attr()</code> method is a convenient way to set the value of attributes—especially when setting multiple attributes or using values returned by a function. Consider the following image:</p> <pre class=\"syntaxhighlighter xml\">&lt;img id=\"greatphoto\" src=\"brush-seller.jpg\" alt=\"brush seller\"&gt;</pre> <h4 id=\"setting-simple-attr\">Setting a simple attribute</h4> <p>To change the <code>alt</code> attribute, simply pass the name of the attribute and its new value to the <code>.attr()</code> method:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#greatphoto\" ).attr( \"alt\", \"Beijing Brush Seller\" );</pre> <p><em>Add</em> an attribute the same way:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#greatphoto\" ).attr( \"title\", \"Photo by Kelly Clark\" );</pre> <h4 id=\"setting-several-attrs\">Setting several attributes at once</h4> <p>To change the <code>alt</code> attribute and add the <code>title</code> attribute at the same time, pass both sets of names and values into the method at once using a plain JavaScript object. Each key-value pair in the object adds or modifies an attribute:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#greatphoto\" ).attr({\n  alt: \"Beijing Brush Seller\",\n  title: \"photo by Kelly Clark\"\n});</pre> <p>When setting multiple attributes, the quotes around attribute names are optional.</p> <p><strong>WARNING</strong>: When setting the 'class' attribute, you must always use quotes!</p> <div class=\"warning\"> <p><strong>Note:</strong> Attempting to change the <code>type</code> attribute on an <code>input</code> or <code>button</code> element created via <code>document.createElement()</code> will throw an exception on Internet Explorer 8 or older.</p> </div> <h4 id=\"computed-attr-values\">Computed attribute values</h4> <p>By using a function to set attributes, you can compute the value based on other properties of the element. For example, to concatenate a new value with an existing value:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#greatphoto\" ).attr( \"title\", function( i, val ) {\n  return val + \" - photo by Kelly Clark\";\n});</pre> <p>This use of a function to compute attribute values can be particularly useful when modifying the attributes of multiple elements at once.</p> <p><strong>Note: </strong>If nothing is returned in the setter function (ie. <code>function(index, attr){}</code>), or if <code>undefined</code> is returned, the current value is not changed. This is useful for selectively setting values only when certain criteria are met.</p> </div> <section class=\"entry-examples\" id=\"entry-examples-1\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-1-0\"> <p>Set some attributes for all &lt;img&gt;s in the page.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;attr demo&lt;/title&gt;\n  &lt;style&gt;\n  img {\n    padding: 10px;\n  }\n  div {\n    color: red;\n    font-size: 24px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;img&gt;\n&lt;img&gt;\n&lt;img&gt;\n \n&lt;div&gt;&lt;b&gt;Attribute of Ajax&lt;/b&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"img\" ).attr({\n  src: \"/resources/hat.gif\",\n  title: \"jQuery\",\n  alt: \"jQuery Logo\"\n});\n$( \"div\" ).text( $( \"img\" ).attr( \"alt\" ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1-1\"> <p>Set the id for divs based on the position in the page.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;attr demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    color: blue;\n  }\n  span {\n    color: red;\n  }\n  b {\n    font-weight: bolder;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;Zero-th &lt;span&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;First &lt;span&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;Second &lt;span&gt;&lt;/span&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"div\" )\n  .attr( \"id\", function( arr ) {\n    return \"div-id\" + arr;\n  })\n  .each(function() {\n    $( \"span\", this ).html( \"(id = '&lt;b&gt;\" + this.id + \"&lt;/b&gt;')\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1-2\"> <p>Set the src attribute from title attribute on the image.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;attr demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;img title=\"hat.gif\"&gt;\n \n&lt;script&gt;\n$( \"img\" ).attr( \"src\", function() {\n  return \"/resources/\" + this.title;\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/attr\" class=\"_attribution-link\">https://api.jquery.com/attr</a>\n  </p>\n</div>\n","ajaxsend":"<h1 class=\"entry-title\">.ajaxSend()</h1> <div class=\"entry-content\"> <article id=\"ajaxSend1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.ajaxSend( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Attach a function to be executed before an Ajax request is sent. This is an <a href=\"ajax_events\">Ajax Event</a>.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"ajaxSend-handler\" href=\"#ajaxSend-handler\">.ajaxSend( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> event, <a href=\"types#jqXHR\">jqXHR</a> jqXHR, <a href=\"types#PlainObject\">PlainObject</a> ajaxOptions )</div> <div>The function to be invoked.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Whenever an Ajax request is about to be sent, jQuery triggers the <code>ajaxSend</code> event. Any and all handlers that have been registered with the <code>.ajaxSend()</code> method are executed at this time.</p> <p>To observe this method in action, set up a basic Ajax load request:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"trigger\"&gt;Trigger&lt;/div&gt;\n&lt;div class=\"result\"&gt;&lt;/div&gt;\n&lt;div class=\"log\"&gt;&lt;/div&gt;</pre> <p>Attach the event handler to the document:</p> <pre class=\"syntaxhighlighter javascript\">$( document ).ajaxSend(function() {\n  $( \".log\" ).text( \"Triggered ajaxSend handler.\" );\n});</pre> <p>Now, make an Ajax request using any jQuery method:</p> <pre class=\"syntaxhighlighter javascript\">$( \".trigger\" ).click(function() {\n  $( \".result\" ).load( \"ajax/test.html\" );\n});</pre> <p>When the user clicks the element with class <code>trigger</code> and the Ajax request is about to begin, the log message is displayed.</p> <p>All <code>ajaxSend</code> handlers are invoked, regardless of what Ajax request is to be sent. If you must differentiate between the requests, use the parameters passed to the handler. Each time an <code>ajaxSend</code> handler is executed, it is passed the event object, the <code>jqXHR</code> object (in version 1.4, <code>XMLHttpRequest</code>object), and the <a href=\"jquery.ajax\">settings object</a> that was used in the creation of the Ajax request. For example, you can restrict the callback to only handling events dealing with a particular URL:</p> <pre class=\"syntaxhighlighter javascript\">$( document ).ajaxSend(function( event, jqxhr, settings ) {\n  if ( settings.url == \"ajax/test.html\" ) {\n    $( \".log\" ).text( \"Triggered ajaxSend handler.\" );\n  }\n});</pre> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> As of jQuery 1.9, all the handlers for the <a href=\"https://api.jquery.com/category/ajax/global-ajax-event-handlers/\">jQuery global Ajax events</a>, including those added with the <code>.ajaxSend()</code> method, <em>must</em> be attached to <code>document</code>. </li> <li> If <code><a href=\"jquery.ajax\">$.ajax()</a></code> or <code><a href=\"jquery.ajaxsetup\">$.ajaxSetup()</a></code> is called with the <code>global</code> option set to <code>false</code>, the <code>.ajaxSend()</code> method will not fire. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Show a message before an Ajax request is sent.</p> <pre class=\"syntaxhighlighter javascript\">$( document ).ajaxSend(function( event, request, settings ) {\n  $( \"#msg\" ).append( \"&lt;li&gt;Starting request at \" + settings.url + \"&lt;/li&gt;\" );\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/ajaxSend\" class=\"_attribution-link\">https://api.jquery.com/ajaxSend</a>\n  </p>\n</div>\n","attribute-contains-word-selector":"<h1 class=\"entry-title\">Attribute Contains Word Selector [name~=”value”]</h1> <div class=\"entry-content\"> <article id=\"attributeContainsWord1\" class=\"entry selector\"><h2 class=\"section-title\"><span>attributeContainsWord selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects elements that have the specified attribute with a value containing a given word, delimited by spaces.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \"[attribute~='value']\" )</h4> <p class=\"argument\"><strong>attribute: </strong>An attribute name.</p> <p class=\"argument\"><strong>value: </strong>An attribute value. Can be either a <a href=\"https://www.w3.org/TR/css3-selectors/#attribute-selectors\">valid identifier</a> or a quoted string.</p> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This selector matches the test string against each word in the attribute value, where a \"word\" is defined as a string delimited by whitespace. The selector matches if the test string is exactly equal to any of the words.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds all inputs with a name attribute that contains the word 'man' and sets the value with some text.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;attributeContainsWord demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;input name=\"man-news\"&gt;\n&lt;input name=\"milk man\"&gt;\n&lt;input name=\"letterman2\"&gt;\n&lt;input name=\"newmilk\"&gt;\n \n&lt;script&gt;\n$( \"input[name~='man']\" ).val( \"mr. man is in it!\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/attribute-contains-word-selector\" class=\"_attribution-link\">https://api.jquery.com/attribute-contains-word-selector</a>\n  </p>\n</div>\n","andself":"<h1 class=\"entry-title\">.andSelf()</h1> <div class=\"entry-content\"> <article id=\"andSelf1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.andSelf()</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span><span class=\"version-details\">version deprecated: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Add the previous set of elements on the stack to the current set.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2/\">1.2</a></span><a id=\"andSelf\" href=\"#andSelf\">.andSelf()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p><strong>Note:</strong> This function has been deprecated and is now an alias for <a href=\"addback\"><code>.addBack()</code></a>, which should be used with jQuery 1.8 and later.</p> <p>As described in the discussion for <code><a href=\"end\">.end()</a></code>, jQuery objects maintain an internal stack that keeps track of changes to the matched set of elements. When one of the DOM traversal methods is called, the new set of elements is pushed onto the stack. If the previous set of elements is desired as well, <code>.andSelf()</code> can help.</p> <p>Consider a page with a simple list on it:</p> <pre class=\"syntaxhighlighter xml\">&lt;ul&gt;\n  &lt;li&gt;list item 1&lt;/li&gt;\n  &lt;li&gt;list item 2&lt;/li&gt;\n  &lt;li class=\"third-item\"&gt;list item 3&lt;/li&gt;\n  &lt;li&gt;list item 4&lt;/li&gt;\n  &lt;li&gt;list item 5&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>The result of the following code is a red background behind items 3, 4 and 5:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li.third-item\" ).nextAll().andSelf()\n  .css( \"background-color\", \"red\" );</pre> <p>First, the initial selector locates item 3, initializing the stack with the set containing just this item. The call to <code>.nextAll()</code> then pushes the set of items 4 and 5 onto the stack. Finally, the <code>.andSelf()</code> invocation merges these two sets together, creating a jQuery object that points to all three items in document order: <code>[ &lt;li.third-item&gt;, &lt;li&gt;, &lt;li&gt; ]</code>.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>The <code>.andSelf()</code> method causes the previous set of DOM elements in the traversal stack to be added to the current set. In the first example, the top stack contains the set resulting from <code>.find(\"p\")</code>. In the second example, <code>.andSelf()</code> adds the previous set of elements on the stack — in this case <code>$( \"div.after-andself\" )</code> — to the current set, selecting both the div and its enclosed paragraphs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;andSelf demo&lt;/title&gt;\n  &lt;style&gt;\n  p, div {\n    margin: 5px;\n    padding: 5px;\n  }\n  .border {\n    border: 2px solid red;\n  }\n  .background {\n    background: yellow;\n  }\n  .left, .right {\n    width: 45%;\n    float: left;\n  }\n  .right {\n    margin-left: 3%;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div class=\"left\"&gt;\n  &lt;p&gt;&lt;strong&gt;Before &lt;code&gt;andSelf()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n  &lt;div class=\"before-andself\"&gt;\n    &lt;p&gt;First Paragraph&lt;/p&gt;\n    &lt;p&gt;Second Paragraph&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=\"right\"&gt;\n  &lt;p&gt;&lt;strong&gt;After &lt;code&gt;andSelf()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;\n  &lt;div class=\"after-andself\"&gt;\n    &lt;p&gt;First Paragraph&lt;/p&gt;\n    &lt;p&gt;Second Paragraph&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\n$( \"div.left, div.right\" ).find( \"div, div &gt; p\" ).addClass( \"border\" );\n \n// First Example\n$( \"div.before-andself\" ).find( \"p\" ).addClass( \"background\" );\n \n// Second Example\n$( \"div.after-andself\" ).find( \"p\" ).andSelf().addClass( \"background\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/andSelf\" class=\"_attribution-link\">https://api.jquery.com/andSelf</a>\n  </p>\n</div>\n","attribute-equals-selector":"<h1 class=\"entry-title\">Attribute Equals Selector [name=”value”]</h1> <div class=\"entry-content\"> <article id=\"attributeEquals1\" class=\"entry selector\"><h2 class=\"section-title\"><span>attributeEquals selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects elements that have the specified attribute with a value exactly equal to a certain value.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \"[attribute='value']\" )</h4> <p class=\"argument\"><strong>attribute: </strong>An attribute name.</p> <p class=\"argument\"><strong>value: </strong>An attribute value. <strong>Can be either a <a href=\"https://www.w3.org/TR/css3-selectors/#attribute-selectors\">valid identifier</a> or a quoted string.</strong></p> </li></ul> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds all inputs with a value of \"Hot Fuzz\" and changes the text of the next sibling span.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;attributeEquals demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;\n  &lt;label&gt;\n    &lt;input type=\"radio\" name=\"newsletter\" value=\"Hot Fuzz\"&gt;\n    &lt;span&gt;name?&lt;/span&gt;\n  &lt;/label&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;label&gt;\n    &lt;input type=\"radio\" name=\"newsletter\" value=\"Cold Fusion\"&gt;\n    &lt;span&gt;value?&lt;/span&gt;\n  &lt;/label&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;label&gt;\n    &lt;input type=\"radio\" name=\"newsletter\" value=\"Evil Plans\"&gt;\n    &lt;span&gt;value?&lt;/span&gt;\n  &lt;/label&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\n$( \"input[value='Hot Fuzz']\" ).next().text( \"Hot Fuzz\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/attribute-equals-selector\" class=\"_attribution-link\">https://api.jquery.com/attribute-equals-selector</a>\n  </p>\n</div>\n","animated-selector":"<h1 class=\"entry-title\">:animated Selector</h1> <div class=\"entry-content\"> <article id=\"animated1\" class=\"entry selector\"><h2 class=\"section-title\"><span>animated selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Select all elements that are in the progress of an animation at the time the selector is run.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2/\">1.2</a></span>jQuery( \":animated\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p><strong>Note:</strong> If you use a custom jQuery build <em>without the effects module</em>, the <code>:animated</code> selector will throw an error. </p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> Because <code>:animated</code> is a jQuery extension and not part of the CSS specification, queries using <code>:animated</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. To achieve the best performance when using <code>:animated</code> to select elements, first select the elements using a pure CSS selector, then use <a href=\"filter\"><code>.filter(\":animated\")</code></a>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Change the color of any div that is animated.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;animated demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    background: yellow;\n    border: 1px solid #AAA;\n    width: 80px;\n    height: 80px;\n    margin: 0 5px;\n    float: left;\n  }\n  div.colored {\n    background: green;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button id=\"run\"&gt;Run&lt;/button&gt;\n \n&lt;div&gt;&lt;/div&gt;\n&lt;div id=\"mover\"&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"#run\" ).click(function() {\n  $( \"div:animated\" ).toggleClass( \"colored\" );\n});\n \nfunction animateIt() {\n  $( \"#mover\" ).slideToggle( \"slow\", animateIt );\n}\n \nanimateIt();\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/animated-selector\" class=\"_attribution-link\">https://api.jquery.com/animated-selector</a>\n  </p>\n</div>\n","attribute-ends-with-selector":"<h1 class=\"entry-title\">Attribute Ends With Selector [name$=”value”]</h1> <div class=\"entry-content\"> <article id=\"attributeEndsWith1\" class=\"entry selector\"><h2 class=\"section-title\"><span>attributeEndsWith selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects elements that have the specified attribute with a value ending exactly with a given string. The comparison is case sensitive.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \"[attribute$='value']\" )</h4> <p class=\"argument\"><strong>attribute: </strong>An attribute name.</p> <p class=\"argument\"><strong>value: </strong>An attribute value. Can be either a <a href=\"https://www.w3.org/TR/css3-selectors/#attribute-selectors\">valid identifier</a> or a quoted string.</p> </li></ul> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds all inputs with an attribute name that ends with 'letter' and puts text in them.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;attributeEndsWith demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;input name=\"newsletter\"&gt;\n&lt;input name=\"milkman\"&gt;\n&lt;input name=\"jobletter\"&gt;\n \n&lt;script&gt;\n$( \"input[name$='letter']\" ).val( \"a letter\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/attribute-ends-with-selector\" class=\"_attribution-link\">https://api.jquery.com/attribute-ends-with-selector</a>\n  </p>\n</div>\n","attribute-not-equal-selector":"<h1 class=\"entry-title\">Attribute Not Equal Selector [name!=”value”]</h1> <div class=\"entry-content\"> <article id=\"attributeNotEqual1\" class=\"entry selector\"><h2 class=\"section-title\"><span>attributeNotEqual selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Select elements that either don't have the specified attribute, or do have the specified attribute but not with a certain value.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \"[attribute!='value']\" )</h4> <p class=\"argument\"><strong>attribute: </strong>An attribute name.</p> <p class=\"argument\"><strong>value: </strong>An attribute value. Can be either a <a href=\"https://www.w3.org/TR/css3-selectors/#attribute-selectors\">valid identifier</a> or a quoted string.</p> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This selector is equivalent to <code>:not([attr='value'])</code>.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> Because <code>[name!=\"value\"]</code> is a jQuery extension and not part of the CSS specification, queries using <code>[name!=\"value\"]</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. For better performance in modern browsers, use <code>$( \"your-pure-css-selector\" ).not( \"[name='value']\" )</code> instead. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds all inputs that don't have the name 'newsletter' and appends text to the span next to it.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;attributeNotEqual demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;\n  &lt;input type=\"radio\" name=\"newsletter\" value=\"Hot Fuzz\"&gt;\n  &lt;span&gt;name is newsletter&lt;/span&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;input type=\"radio\" value=\"Cold Fusion\"&gt;\n  &lt;span&gt;no name&lt;/span&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;input type=\"radio\" name=\"accept\" value=\"Evil Plans\"&gt;\n  &lt;span&gt;name is accept&lt;/span&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\n$( \"input[name!='newsletter']\" ).next().append( \"&lt;b&gt;; not newsletter&lt;/b&gt;\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/attribute-not-equal-selector\" class=\"_attribution-link\">https://api.jquery.com/attribute-not-equal-selector</a>\n  </p>\n</div>\n","change":"<h1 class=\"entry-title\">.change()</h1> <div class=\"entry-content\"> <article id=\"change1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.change( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Bind an event handler to the \"change\" JavaScript event, or trigger that event on an element.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"change-handler\" href=\"#change-handler\">.change( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"change-eventData-handler\" href=\"#change-eventData-handler\">.change( [eventData ], handler )</a> </h4> <ul> <li> <div><strong>eventData</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>An object containing data that will be passed to the event handler.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"change\" href=\"#change\">.change()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method is a shortcut for <code>.on( \"change\", handler )</code> in the first two variations, and <code>.trigger( \"change\" )</code> in the third.</p> <p>The <code>change</code> event is sent to an element when its value changes. This event is limited to <code>&lt;input&gt;</code> elements, <code>&lt;textarea&gt;</code> boxes and <code>&lt;select&gt;</code> elements. For select boxes, checkboxes, and radio buttons, the event is fired immediately when the user makes a selection with the mouse, but for the other element types the event is deferred until the element loses focus.</p> <p>For example, consider the HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;form&gt;\n  &lt;input class=\"target\" type=\"text\" value=\"Field 1\"&gt;\n  &lt;select class=\"target\"&gt;\n    &lt;option value=\"option1\" selected=\"selected\"&gt;Option 1&lt;/option&gt;\n    &lt;option value=\"option2\"&gt;Option 2&lt;/option&gt;\n  &lt;/select&gt;\n&lt;/form&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;/div&gt;</pre> <p>The event handler can be bound to the text input and the select box:</p> <pre class=\"syntaxhighlighter javascript\">$( \".target\" ).change(function() {\n  alert( \"Handler for .change() called.\" );\n});</pre> <p>Now when the second option is selected from the dropdown, the alert is displayed. It is also displayed if you change the text in the field and then click away. If the field loses focus without the contents having changed, though, the event is not triggered. To trigger the event manually, apply <code>.change()</code> without arguments:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#other\" ).click(function() {\n  $( \".target\" ).change();\n});</pre> <p>After this code executes, clicks on <samp>Trigger the handler</samp> will also alert the message. The message will display twice, because the handler has been bound to the <code>change</code> event on both of the form elements.</p> <p>As of jQuery 1.4, the <code>change</code> event bubbles in Internet Explorer, behaving consistently with the event in other modern browsers.</p> <div class=\"warning\"> <p><strong>Note: </strong>Changing the value of an input element using JavaScript, using <a href=\"val\"><code>.val()</code></a> for example, won't fire the event.</p> </div> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> As the <code>.change()</code> method is just a shorthand for <code>.on( \"change\", handler )</code>, detaching is possible using <code>.off( \"change\" )</code>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Attaches a change event to the select that gets the text for each selected option and writes them in the div. It then triggers the event for the initial text draw.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;change demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;select name=\"sweets\" multiple=\"multiple\"&gt;\n  &lt;option&gt;Chocolate&lt;/option&gt;\n  &lt;option selected=\"selected\"&gt;Candy&lt;/option&gt;\n  &lt;option&gt;Taffy&lt;/option&gt;\n  &lt;option selected=\"selected\"&gt;Caramel&lt;/option&gt;\n  &lt;option&gt;Fudge&lt;/option&gt;\n  &lt;option&gt;Cookie&lt;/option&gt;\n&lt;/select&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"select\" )\n  .change(function () {\n    var str = \"\";\n    $( \"select option:selected\" ).each(function() {\n      str += $( this ).text() + \" \";\n    });\n    $( \"div\" ).text( str );\n  })\n  .change();\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>To add a validity test to all text input elements:</p> <pre class=\"syntaxhighlighter javascript\">$( \"input[type='text']\" ).change(function() {\n  // Check input( $( this ).val() ) for validity here\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/change\" class=\"_attribution-link\">https://api.jquery.com/change</a>\n  </p>\n</div>\n","attribute-starts-with-selector":"<h1 class=\"entry-title\">Attribute Starts With Selector [name^=”value”]</h1> <div class=\"entry-content\"> <article id=\"attributeStartsWith1\" class=\"entry selector\"><h2 class=\"section-title\"><span>attributeStartsWith selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects elements that have the specified attribute with a value beginning exactly with a given string.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \"[attribute^='value']\" )</h4> <p class=\"argument\"><strong>attribute: </strong>An attribute name.</p> <p class=\"argument\"><strong>value: </strong>An attribute value. Can be either a <a href=\"https://www.w3.org/TR/css3-selectors/#attribute-selectors\">valid identifier</a> or a quoted string.</p> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This selector can be useful for identifying elements in pages produced by server-side frameworks that produce HTML with systematic element IDs. However it will be slower than using a class selector so leverage classes, if you can, to group like elements.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds all inputs with an attribute name that starts with 'news' and puts text in them.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;attributeStartsWith demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;input name=\"newsletter\"&gt;\n&lt;input name=\"milkman\"&gt;\n&lt;input name=\"newsboy\"&gt;\n \n&lt;script&gt;\n$( \"input[name^='news']\" ).val( \"news here!\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/attribute-starts-with-selector\" class=\"_attribution-link\">https://api.jquery.com/attribute-starts-with-selector</a>\n  </p>\n</div>\n","checkbox-selector":"<h1 class=\"entry-title\">:checkbox Selector</h1> <div class=\"entry-content\"> <article id=\"checkbox1\" class=\"entry selector\"><h2 class=\"section-title\"><span>checkbox selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all elements of type checkbox.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \":checkbox\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p><code>$( \":checkbox\" )</code> is equivalent to <code>$( \"[type=checkbox]\" )</code>. As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector (\"*\") is implied. In other words, the bare <code>$(':checkbox')</code> is equivalent to <code>$( \"*:checkbox\" )</code>, so <code>$( \"input:checkbox\" )</code> should be used instead. </p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> Because <code>:checkbox</code> is a jQuery extension and not part of the CSS specification, queries using <code>:checkbox</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. For better performance in modern browsers, use <code>[type=\"checkbox\"]</code> instead. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds all checkbox inputs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;checkbox demo&lt;/title&gt;\n  &lt;style&gt;\n  textarea {\n    height: 25px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;form&gt;\n  &lt;input type=\"button\" value=\"Input Button\"&gt;\n  &lt;input type=\"checkbox\"&gt;\n \n  &lt;input type=\"checkbox\"&gt;\n  &lt;input type=\"file\"&gt;\n  &lt;input type=\"hidden\"&gt;\n \n  &lt;input type=\"image\"&gt;\n  &lt;input type=\"password\"&gt;\n  &lt;input type=\"radio\"&gt;\n \n  &lt;input type=\"reset\"&gt;\n  &lt;input type=\"submit\"&gt;\n  &lt;input type=\"text\"&gt;\n \n  &lt;select&gt;\n    &lt;option&gt;Option&lt;/option&gt;\n  &lt;/select&gt;\n \n  &lt;textarea&gt;&lt;/textarea&gt;\n  &lt;button&gt;Button&lt;/button&gt;\n&lt;/form&gt;\n \n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar input = $( \"form input:checkbox\" )\n  .wrap( \"&lt;span&gt;&lt;/span&gt;\" )\n  .parent()\n  .css({\n    background: \"yellow\",\n    border: \"3px red solid\"\n  });\n \n$( \"div\" )\n  .text( \"For this type jQuery found \" + input.length + \".\" )\n  .css( \"color\", \"red\" );\n \n// Prevent the form from submitting\n$( \"form\" ).submit(function( event ) {\n    event.preventDefault();\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/checkbox-selector\" class=\"_attribution-link\">https://api.jquery.com/checkbox-selector</a>\n  </p>\n</div>\n","before":"<h1 class=\"entry-title\">.before()</h1> <div class=\"entry-content\"> <article id=\"before1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.before( content [, content ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Insert content, specified by the parameter, before each element in the set of matched elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"before-content-content\" href=\"#before-content-content\">.before( content [, content ] )</a> </h4> <ul> <li> <div><strong>content</strong></div> <div>Type: <a href=\"types#htmlString\">htmlString</a> or <a href=\"types#Element\">Element</a> or <a href=\"types#Text\">Text</a> or <a href=\"types#Array\">Array</a> or <a href=\"types#jQuery\">jQuery</a> </div> <div>HTML string, DOM element, text node, array of elements and text nodes, or jQuery object to insert before each element in the set of matched elements.</div> </li> <li> <div><strong>content</strong></div> <div>Type: <a href=\"types#htmlString\">htmlString</a> or <a href=\"types#Element\">Element</a> or <a href=\"types#Text\">Text</a> or <a href=\"types#Array\">Array</a> or <a href=\"types#jQuery\">jQuery</a> </div> <div>One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or jQuery objects to insert before each element in the set of matched elements.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"before-function\" href=\"#before-function\">.before( function )</a> </h4> <ul><li> <div><strong>function</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Integer\">Integer</a> index ) =&gt; <a href=\"types#htmlString\">htmlString</a> or <a href=\"types#Element\">Element</a> or <a href=\"types#Text\">Text</a> or <a href=\"types#jQuery\">jQuery</a> </div> <div>A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert before each element in the set of matched elements. Receives the index position of the element in the set as an argument. Within the function, <code>this</code> refers to the current element in the set. </div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.10/\">1.10</a></span><a id=\"before-function-html\" href=\"#before-function-html\">.before( function-html )</a> </h4> <ul><li> <div><strong>function-html</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Integer\">Integer</a> index, <a href=\"types#String\">String</a> html ) =&gt; <a href=\"types#htmlString\">htmlString</a> or <a href=\"types#Element\">Element</a> or <a href=\"types#Text\">Text</a> or <a href=\"types#jQuery\">jQuery</a> </div> <div>A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert before each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments. Within the function, <code>this</code> refers to the current element in the set. </div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.before()</code> and <code><a href=\"insertbefore\">.insertBefore()</a></code> methods perform the same task. The major difference is in the syntax—specifically, in the placement of the content and target. With <code>.before()</code>, the content to be inserted comes from the method's argument: <code>$(target).before(contentToBeInserted)</code>. With <code>.insertBefore()</code>, on the other hand, the content precedes the method and is inserted before the target, which in turn is passed as the <code>.insertBefore()</code> method's argument: <code>$(contentToBeInserted).insertBefore(target)</code>.</p> <p>Consider the following HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;h2&gt;Greetings&lt;/h2&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;/div&gt;\n&lt;/div&gt;</pre> <p>You can create content and insert it before several elements at once:</p> <pre class=\"syntaxhighlighter javascript\">$( \".inner\" ).before( \"&lt;p&gt;Test&lt;/p&gt;\" );</pre> <p>Each inner <code>&lt;div&gt;</code> element gets this new content:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;h2&gt;Greetings&lt;/h2&gt;\n  &lt;p&gt;Test&lt;/p&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;/div&gt;\n  &lt;p&gt;Test&lt;/p&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;/div&gt;\n&lt;/div&gt;</pre> <p>You can also select an element on the page and insert it before another:</p> <pre class=\"syntaxhighlighter javascript\">$( \".container\" ).before( $( \"h2\" ) );</pre> <p>If an element selected this way is inserted into a single location elsewhere in the DOM, it will be moved before the target (not cloned):</p> <pre class=\"syntaxhighlighter xml\">&lt;h2&gt;Greetings&lt;/h2&gt;\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;/div&gt;\n&lt;/div&gt;</pre> <p><strong>Important</strong>: If there is more than one target element, however, cloned copies of the inserted element will be created for each target except for the last one.</p> <h4 id=\"additional-arguments\">Additional Arguments</h4> <p>Similar to other content-adding methods such as <code><a href=\"prepend\">.prepend()</a></code> and <code><a href=\"after\">.after()</a></code>, <code>.before()</code> also supports passing in multiple arguments as input. Supported input includes DOM elements, jQuery objects, HTML strings, and arrays of DOM elements.</p> <p>For example, the following will insert two new <code>&lt;div&gt;</code>s and an existing <code>&lt;div&gt;</code> before the first paragraph:</p> <pre class=\"syntaxhighlighter javascript\">var newdiv1 = $( \"&lt;div id='object1'&gt;&lt;/div&gt;\" ),\n  newdiv2 = document.createElement( \"div\" ),\n  existingdiv1 = document.getElementById( \"foo\" );\n \n$( \"p\" ).first().before( newdiv1, [ newdiv2, existingdiv1 ] );</pre> <p>Since <code>.before()</code> can accept any number of additional arguments, the same result can be achieved by passing in the three <code>&lt;div&gt;</code>s as three separate arguments, like so: <code>$( \"p\" ).first().before( $newdiv1, newdiv2, existingdiv1 )</code>. The type and number of arguments will largely depend on how you collect the elements in your code.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> Prior to jQuery 1.9, <code>.before()</code> would attempt to add or change nodes in the current jQuery set if the first node in the set was not connected to a document, and in those cases return a new jQuery set rather than the original set. The method might or might not have returned a new result depending on the number or connectedness of its arguments! As of jQuery 1.9, <code>.after()</code>, <code>.before()</code>, and <code>.replaceWith()</code> always return the original unmodified set. Attempting to use these methods on a node without a parent has no effect—that is, neither the set nor the nodes it contains are changed. </li> <li> By design, any jQuery constructor or method that accepts an HTML string — <a href=\"jquery\">jQuery()</a>, <a href=\"append\">.append()</a>, <a href=\"after\">.after()</a>, etc. — can potentially execute code. This can occur by injection of script tags or use of HTML attributes that execute code (for example, <code>&lt;img onload=\"\"&gt;</code>). Do not use these methods to insert strings obtained from untrusted sources such as URL query parameters, cookies, or form inputs. Doing so can introduce cross-site-scripting (XSS) vulnerabilities. Remove or escape any user input before adding content to the document. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Inserts some HTML before all paragraphs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;before demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt; is what I said...&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).before( \"&lt;b&gt;Hello&lt;/b&gt;\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Inserts a DOM element before all paragraphs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;before demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt; is what I said...&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).before( document.createTextNode( \"Hello\" ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-2\"> <p>Inserts a jQuery object (similar to an Array of DOM Elements) before all paragraphs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;before demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt; is what I said...&lt;/p&gt;&lt;b&gt;Hello&lt;/b&gt;\n \n&lt;script&gt;\n$( \"p\" ).before( $( \"b\" ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/before\" class=\"_attribution-link\">https://api.jquery.com/before</a>\n  </p>\n</div>\n","blur":"<h1 class=\"entry-title\">.blur()</h1> <div class=\"entry-content\"> <article id=\"blur1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.blur( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Bind an event handler to the \"blur\" JavaScript event, or trigger that event on an element.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"blur-handler\" href=\"#blur-handler\">.blur( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"blur-eventData-handler\" href=\"#blur-eventData-handler\">.blur( [eventData ], handler )</a> </h4> <ul> <li> <div><strong>eventData</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>An object containing data that will be passed to the event handler.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"blur\" href=\"#blur\">.blur()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method is a shortcut for <code>.on( \"blur\", handler )</code> in the first two variations, and <code>.trigger( \"blur\" )</code> in the third.</p> <p>The <code>blur</code> event is sent to an element when it loses focus. Originally, this event was only applicable to form elements, such as <code>&lt;input&gt;</code>. In recent browsers, the domain of the event has been extended to include all element types. An element can lose focus via keyboard commands, such as the Tab key, or by mouse clicks elsewhere on the page.</p> <p>For example, consider the HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;form&gt;\n  &lt;input id=\"target\" type=\"text\" value=\"Field 1\"&gt;\n  &lt;input type=\"text\" value=\"Field 2\"&gt;\n&lt;/form&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;/div&gt;\nThe event handler can be bound to the first input field:\n$( \"#target\" ).blur(function() {\n  alert( \"Handler for .blur() called.\" );\n});</pre> <p>Now if the first field has the focus, clicking elsewhere or tabbing away from it displays the alert:</p> <p> <samp>Handler for .blur() called.</samp> </p> <p>To trigger the event programmatically, apply <code>.blur()</code> without an argument:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#other\" ).click(function() {\n  $( \"#target\" ).blur();\n});</pre> <p>After this code executes, clicks on <samp>Trigger the handler</samp> will also alert the message.</p> <p>The <code>blur</code> event does not bubble in Internet Explorer. Therefore, scripts that rely on event delegation with the <code>blur</code> event will not work consistently across browsers. As of version 1.4.2, however, jQuery works around this limitation by mapping <code>blur</code> to the <code>focusout</code> event in its event delegation methods, <a href=\"live\"><code>.live()</code></a> and <a href=\"delegate\"><code>.delegate()</code></a>.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> As the <code>.blur()</code> method is just a shorthand for <code>.on( \"blur\", handler )</code>, detaching is possible using <code>.off( \"blur\" )</code>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>To trigger the blur event on all paragraphs:</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).blur();</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/blur\" class=\"_attribution-link\">https://api.jquery.com/blur</a>\n  </p>\n</div>\n","button-selector":"<h1 class=\"entry-title\">:button Selector</h1> <div class=\"entry-content\"> <article id=\"button1\" class=\"entry selector\"><h2 class=\"section-title\"><span>button selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all button elements and elements of type button.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \":button\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>An equivalent selector to <code>$( \":button\" )</code> using valid CSS is <code>$( \"button, input[type='button']\" )</code>.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> Because <code>:button</code> is a jQuery extension and not part of the CSS specification, queries using <code>:button</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. To achieve the best performance when using <code>:button</code> to select elements, first select the elements using a pure CSS selector, then use <a href=\"filter\"><code>.filter(\":button\")</code></a>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Find all button inputs and mark them.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;button demo&lt;/title&gt;\n  &lt;style&gt;\n  textarea {\n    height: 35px;\n  }\n  div {\n    color: red;\n  }\n  fieldset {\n    margin: 0;\n    padding: 0;\n    border-width: 0;\n  }\n  .marked {\n    background-color: yellow;\n    border: 3px red solid;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;form&gt;\n  &lt;fieldset&gt;\n    &lt;input type=\"button\" value=\"Input Button\"&gt;\n    &lt;input type=\"checkbox\"&gt;\n \n    &lt;input type=\"file\"&gt;\n    &lt;input type=\"hidden\"&gt;\n    &lt;input type=\"image\"&gt;\n \n    &lt;input type=\"password\"&gt;\n    &lt;input type=\"radio\"&gt;\n    &lt;input type=\"reset\"&gt;\n \n    &lt;input type=\"submit\"&gt;\n    &lt;input type=\"text\"&gt;\n    &lt;select&gt;\n      &lt;option&gt;Option&lt;/option&gt;\n    &lt;/select&gt;\n \n    &lt;textarea&gt;&lt;/textarea&gt;\n    &lt;button&gt;Button&lt;/button&gt;\n  &lt;/fieldset&gt;\n&lt;/form&gt;\n \n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar input = $( \":button\" ).addClass( \"marked\" );\n$( \"div\" ).text( \"For this type jQuery found \" + input.length + \".\" );\n// Prevent the form from submitting\n$( \"form\" ).submit(function( event ) {\n  event.preventDefault();\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/button-selector\" class=\"_attribution-link\">https://api.jquery.com/button-selector</a>\n  </p>\n</div>\n","bind":"<h1 class=\"entry-title\">.bind()</h1> <div class=\"entry-content\"> <article id=\"bind1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.bind( eventType [, eventData ], handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Attach a handler to an event for the elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"bind-eventType-eventData-handler\" href=\"#bind-eventType-eventData-handler\">.bind( eventType [, eventData ], handler )</a> </h4> <ul> <li> <div><strong>eventType</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing one or more DOM event types, such as \"click\" or \"submit,\" or custom event names.</div> </li> <li> <div><strong>eventData</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>An object containing data that will be passed to the event handler.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"bind-eventType-eventData-preventBubble\" href=\"#bind-eventType-eventData-preventBubble\">.bind( eventType [, eventData ] [, preventBubble ] )</a> </h4> <ul> <li> <div><strong>eventType</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing one or more DOM event types, such as \"click\" or \"submit,\" or custom event names.</div> </li> <li> <div><strong>eventData</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>An object containing data that will be passed to the event handler.</div> </li> <li> <div><strong>preventBubble</strong></div> <div>Type: <a href=\"types#Boolean\">Boolean</a> </div> <div>Setting the third argument to false will attach a function that prevents the default action from occurring and stops the event from bubbling. The default is true.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"bind-events\" href=\"#bind-events\">.bind( events )</a> </h4> <ul><li> <div><strong>events</strong></div> <div>Type: <a href=\"types#Object\">Object</a> </div> <div>An object containing one or more DOM event types and functions to execute for them.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>As of jQuery 1.7, the <a href=\"on\"><code>.on()</code></a> method is the preferred method for attaching event handlers to a document. For earlier versions, the <code>.bind()</code> method is used for attaching an event handler directly to elements. Handlers are attached to the currently selected elements in the jQuery object, so those elements <em>must exist</em> at the point the call to <code>.bind()</code> occurs. For more flexible event binding, see the discussion of event delegation in <a href=\"on\"><code>.on()</code></a> or <a href=\"delegate\"><code>.delegate()</code></a>.</p> <p>Any string is legal for <code>eventType</code>; if the string is not the name of a native DOM event, then the handler is bound to a custom event. These events are never called by the browser, but may be triggered manually from other JavaScript code using <code>.trigger()</code> or <code>.triggerHandler()</code>.</p> <p>If the <code>eventType</code> string contains a period (<code>.</code>) character, then the event is namespaced. The period character separates the event from its namespace. For example, in the call <code>.bind( \"click.name\", handler )</code>, the string <code>click</code> is the event type, and the string <code>name</code> is the namespace. Namespacing allows us to unbind or trigger some events of a type without affecting others. See the discussion of <code>.unbind()</code> for more information.</p> <p>There are shorthand methods for some standard browser events such as <a href=\"click\"><code>.click()</code></a> that can be used to attach or trigger event handlers. For a complete list of shorthand methods, see the <a href=\"https://api.jquery.com/category/events/\">events category</a>.</p> <p>When an event reaches an element, all handlers bound to that event type for the element are fired. If there are multiple handlers registered, they will always execute in the order in which they were bound. After all handlers have executed, the event continues along the normal event propagation path.</p> <p>A basic usage of <code>.bind()</code> is:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#foo\" ).bind( \"click\", function() {\n  alert( \"User clicked on 'foo.'\" );\n});</pre> <p>This code will cause the element with an ID of <code>foo</code> to respond to the <code>click</code> event. When a user clicks inside this element thereafter, the alert will be shown.</p> <h4 id=\"multiple-events\">Multiple Events</h4> <p>Multiple event types can be bound at once by including each one separated by a space:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#foo\" ).bind( \"mouseenter mouseleave\", function() {\n  $( this ).toggleClass( \"entered\" );\n});</pre> <p>The effect of this on <code>&lt;div id=\"foo\"&gt;</code> (when it does not initially have the \"entered\" class) is to add the \"entered\" class when the mouse enters the <code>&lt;div&gt;</code> and remove the class when the mouse leaves. </p> <p>As of jQuery 1.4 we can bind multiple event handlers simultaneously by passing an object of event type/handler pairs:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#foo\" ).bind({\n  click: function() {\n    // Do something on click\n  },\n  mouseenter: function() {\n    // Do something on mouseenter\n  }\n});</pre> <h4 id=\"event-handlers\">Event Handlers</h4> <p>The <code>handler</code> parameter takes a callback function, as shown above. Within the handler, the keyword <code>this</code> refers to the DOM element to which the handler is bound. To make use of the element in jQuery, it can be passed to the normal <code>$()</code> function. For example:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#foo\" ).bind( \"click\", function() {\n  alert( $( this ).text() );\n});</pre> <p>After this code is executed, when the user clicks inside the element with an ID of <code>foo</code>, its text contents will be shown as an alert. </p> <p>As of jQuery 1.4.2 duplicate event handlers can be bound to an element instead of being discarded. This is useful when the event data feature is being used, or when other unique data resides in a closure around the event handler function.</p> <p>In jQuery 1.4.3 you can now pass in <code>false</code> in place of an event handler. This will bind an event handler equivalent to: <code>function(){ return false; }</code>. This function can be removed at a later time by calling: <code>.unbind( eventName, false )</code>.</p> <h4 id=\"event-object\"> <a href=\"https://api.jquery.com/category/events/event-object/\">The Event object</a> </h4> <p>The <code>handler</code> callback function can also take parameters. When the function is called, the event object will be passed to the first parameter.</p> <p>The event object is often unnecessary and the parameter omitted, as sufficient context is usually available when the handler is bound to know exactly what needs to be done when the handler is triggered. However, at times it becomes necessary to gather more information about the user's environment at the time the event was initiated. <a href=\"https://api.jquery.com/category/events/event-object/\">View the full Event Object</a>.</p> <p>Returning <code>false</code> from a handler is equivalent to calling both <code>.preventDefault()</code> and <code>.stopPropagation()</code> on the event object.</p> <p>Using the event object in a handler looks like this:</p> <pre class=\"syntaxhighlighter javascript\">$( document ).ready(function() {\n  $( \"#foo\" ).bind( \"click\", function( event ) {\n    alert( \"The mouse cursor is at (\" +\n      event.pageX + \", \" + event.pageY +\n      \")\" );\n  });\n});</pre> <p>Note the parameter added to the anonymous function. This code will cause a click on the element with ID <code>foo</code> to report the page coordinates of the mouse cursor at the time of the click.</p> <h4 id=\"passing-event-data\">Passing Event Data</h4> <p>The optional <code>eventData</code> parameter is not commonly used. When provided, this argument allows us to pass additional information to the handler. One handy use of this parameter is to work around issues caused by closures. For example, suppose we have two event handlers that both refer to the same external variable:</p> <pre class=\"syntaxhighlighter javascript\">var message = \"Spoon!\";\n$( \"#foo\" ).bind( \"click\", function() {\n  alert( message );\n});\nmessage = \"Not in the face!\";\n$( \"#bar\" ).bind( \"click\", function() {\n  alert( message );\n});</pre> <p>Because the handlers are closures that both have <code>message</code> in their environment, both will display the message <samp>Not in the face!</samp> when triggered. The variable's value has changed. To sidestep this, we can pass the message in using <code>eventData</code>: </p> <pre class=\"syntaxhighlighter javascript\">var message = \"Spoon!\";\n$( \"#foo\" ).bind( \"click\", {\n  msg: message\n}, function( event ) {\n  alert( event.data.msg );\n});\nmessage = \"Not in the face!\";\n$( \"#bar\" ).bind( \"click\", {\n  msg: message\n}, function( event ) {\n  alert( event.data.msg );\n});</pre> <p>This time the variable is not referred to directly within the handlers; instead, the variable is passed in <em>by value</em> through <code>eventData</code>, which fixes the value at the time the event is bound. The first handler will now display <samp>Spoon!</samp> while the second will alert <samp>Not in the face!</samp> </p> <div class=\"warning\"> <p>Note that objects are passed to functions <em>by reference</em>, which further complicates this scenario.</p> </div> <p>If <code>eventData</code> is present, it is the second argument to the <code>.bind()</code> method; if no additional data needs to be sent to the handler, then the callback is passed as the second and final argument.</p> <div class=\"warning\"> <p>See the <code>.trigger()</code> method reference for a way to pass data to a handler at the time the event happens rather than when the handler is bound.</p> </div> <p>As of jQuery 1.4 we can no longer attach data (and thus, events) to object, embed, or applet elements because critical errors occur when attaching data to Java applets.</p> <p><strong>Note: </strong>Although demonstrated in the next example, it is inadvisable to bind handlers to both the <code>click</code> and <code>dblclick</code> events for the same element. The sequence of events triggered varies from browser to browser, with some receiving two click events before the <code>dblclick</code> and others only one. Double-click sensitivity (maximum time between clicks that is detected as a double click) can vary by operating system and browser, and is often user-configurable.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Handle click and double-click for the paragraph. Note: the coordinates are window relative, so in this case relative to the demo iframe.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;bind demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    background: yellow;\n    font-weight: bold;\n    cursor: pointer;\n    padding: 5px;\n  }\n  p.over {\n     background: #ccc;\n  }\n  span {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Click or double click here.&lt;/p&gt;\n&lt;span&gt;&lt;/span&gt;\n \n&lt;script&gt;\n$( \"p\" ).bind( \"click\", function( event ) {\n  var str = \"( \" + event.pageX + \", \" + event.pageY + \" )\";\n  $( \"span\" ).text( \"Click happened! \" + str );\n});\n$( \"p\" ).bind( \"dblclick\", function() {\n  $( \"span\" ).text( \"Double-click happened in \" + this.nodeName );\n});\n$( \"p\" ).bind( \"mouseenter mouseleave\", function( event ) {\n  $( this ).toggleClass( \"over\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>To display each paragraph's text in an alert box whenever it is clicked:</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).bind( \"click\", function() {\n  alert( $( this ).text() );\n});</pre> </div> <div class=\"entry-example\" id=\"example-2\"> <p>You can pass some extra data before the event handler:</p> <pre class=\"syntaxhighlighter javascript\">function handler( event ) {\n  alert( event.data.foo );\n}\n$( \"p\" ).bind( \"click\", {\n  foo: \"bar\"\n}, handler );</pre> </div> <div class=\"entry-example\" id=\"example-3\"> <p>Cancel a default action and prevent it from bubbling up by returning <code>false</code>:</p> <pre class=\"syntaxhighlighter javascript\">$( \"form\" ).bind( \"submit\", function() {\n  return false;\n})</pre> </div> <div class=\"entry-example\" id=\"example-4\"> <p>Cancel only the default action by using the .preventDefault() method.</p> <pre class=\"syntaxhighlighter javascript\">$( \"form\" ).bind( \"submit\", function( event ) {\n  event.preventDefault();\n});</pre> </div> <div class=\"entry-example\" id=\"example-5\"> <p>Stop an event from bubbling without preventing the default action by using the .stopPropagation() method.</p> <pre class=\"syntaxhighlighter javascript\">$( \"form\" ).bind( \"submit\", function( event ) {\n  event.stopPropagation();\n});</pre> </div> <div class=\"entry-example\" id=\"example-6\"> <p>Bind custom events.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;bind demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    color: red;\n  }\n  span {\n    color: blue;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Has an attached custom event.&lt;/p&gt;\n&lt;button&gt;Trigger custom event&lt;/button&gt;\n&lt;span style=\"display: none;\"&gt;&lt;/span&gt;\n \n&lt;script&gt;\n$( \"p\" ).bind( \"myCustomEvent\", function( e, myName, myValue ) {\n  $( this ).text( myName + \", hi there!\" );\n  $( \"span\" )\n    .stop()\n    .css( \"opacity\", 1 )\n    .text( \"myName = \" + myName )\n    .fadeIn( 30 )\n    .fadeOut( 1000 );\n  });\n$( \"button\" ).click(function() {\n  $( \"p\" ).trigger( \"myCustomEvent\", [ \"John\" ] );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-7\"> <p>Bind multiple events simultaneously.</p> <pre class=\"syntaxhighlighter javascript\">$( \"div.test\" ).bind({\n  click: function() {\n    $( this ).addClass( \"active\" );\n  },\n  mouseenter: function() {\n    $( this ).addClass( \"inside\" );\n  },\n  mouseleave: function() {\n    $( this ).removeClass( \"inside\" );\n  }\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/bind\" class=\"_attribution-link\">https://api.jquery.com/bind</a>\n  </p>\n</div>\n","callbacks.disabled":"<h1 class=\"entry-title\">callbacks.disabled()</h1> <div class=\"entry-content\"> <article id=\"callbacks-disabled1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">callbacks.disabled()</span><span class=\"returns\">Returns: <a href=\"types#Boolean\">Boolean</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Determine if the callbacks list has been disabled.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a></span><a id=\"callbacks-disabled\" href=\"#callbacks-disabled\">callbacks.disabled()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Use <code>callbacks.disabled()</code> to determine if the callbacks list has been disabled:</p> <pre class=\"syntaxhighlighter javascript\">// A sample logging function to be added to a callbacks list\nvar foo = function( value ) {\n  console.log( \"foo:\" + value );\n};\n \nvar callbacks = $.Callbacks();\n \n// Add the logging function to the callback list\ncallbacks.add( foo );\n \n// Fire the items on the list, passing an argument\ncallbacks.fire( \"hello\" );\n// Outputs \"foo: hello\"\n \n// Disable the callbacks list\ncallbacks.disable();\n \n// Test the disabled state of the list\nconsole.log ( callbacks.disabled() );\n// Outputs: true</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/callbacks.disabled\" class=\"_attribution-link\">https://api.jquery.com/callbacks.disabled</a>\n  </p>\n</div>\n","callbacks.disable":"<h1 class=\"entry-title\">callbacks.disable()</h1> <div class=\"entry-content\"> <article id=\"callbacks-disable1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">callbacks.disable()</span><span class=\"returns\">Returns: <a href=\"types#Callbacks\">Callbacks</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Disable a callback list from doing anything more.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a></span><a id=\"callbacks-disable\" href=\"#callbacks-disable\">callbacks.disable()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method returns the Callbacks object onto which it is attached (<code>this</code>).</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Use <code>callbacks.disable()</code> to disable further calls to a callback list:</p> <pre class=\"syntaxhighlighter javascript\">// A sample logging function to be added to a callbacks list\nvar foo = function( value ) {\n  console.log( value );\n};\n \nvar callbacks = $.Callbacks();\n \n// Add the above function to the list\ncallbacks.add( foo );\n \n// Fire the items on the list\ncallbacks.fire( \"foo\" );\n// Outputs: foo\n \n// Disable further calls being possible\ncallbacks.disable();\n \n// Attempt to fire with \"foobar\" as an argument\ncallbacks.fire( \"foobar\" );\n// foobar isn't output</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/callbacks.disable\" class=\"_attribution-link\">https://api.jquery.com/callbacks.disable</a>\n  </p>\n</div>\n","callbacks.empty":"<h1 class=\"entry-title\">callbacks.empty()</h1> <div class=\"entry-content\"> <article id=\"callbacks-empty1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">callbacks.empty()</span><span class=\"returns\">Returns: <a href=\"types#Callbacks\">Callbacks</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Remove all of the callbacks from a list.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a></span><a id=\"callbacks-empty\" href=\"#callbacks-empty\">callbacks.empty()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method returns the Callbacks object onto which it is attached (<code>this</code>).</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Use <code>callbacks.empty()</code> to empty a list of callbacks:</p> <pre class=\"syntaxhighlighter javascript\">// A sample logging function to be added to a callbacks list\nvar foo = function( value1, value2 ) {\n  console.log( \"foo: \" + value1 + \",\" + value2 );\n};\n \n// Another function to also be added to the list\nvar bar = function( value1, value2 ) {\n  console.log( \"bar: \" + value1 + \",\" + value2 );\n};\n \nvar callbacks = $.Callbacks();\n \n// Add the two functions\ncallbacks.add( foo );\ncallbacks.add( bar );\n \n// Empty the callbacks list\ncallbacks.empty();\n \n// Check to ensure all callbacks have been removed\nconsole.log( callbacks.has( foo ) );\n// false\nconsole.log( callbacks.has( bar ) );\n// false</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/callbacks.empty\" class=\"_attribution-link\">https://api.jquery.com/callbacks.empty</a>\n  </p>\n</div>\n","callbacks.add":"<h1 class=\"entry-title\">callbacks.add()</h1> <div class=\"entry-content\"> <article id=\"callbacks-add1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">callbacks.add( callbacks )</span><span class=\"returns\">Returns: <a href=\"types#Callbacks\">Callbacks</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Add a callback or a collection of callbacks to a callback list.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a></span><a id=\"callbacks-add-callbacks\" href=\"#callbacks-add-callbacks\">callbacks.add( callbacks )</a> </h4> <ul><li> <div><strong>callbacks</strong></div> <div>Type: <a href=\"types#Function\">Function</a>() or <a href=\"types#Array\">Array</a> </div> <div>A function, or array of functions, that are to be added to the callback list.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method returns the Callbacks object onto which it is attached (<code>this</code>).</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Use <code>callbacks.add()</code> to add new callbacks to a callback list:</p> <pre class=\"syntaxhighlighter javascript\">// A sample logging function to be added to a callbacks list\nvar foo = function( value ) {\n  console.log( \"foo: \" + value );\n};\n \n// Another function to also be added to the list\nvar bar = function( value ) {\n  console.log( \"bar: \" + value );\n};\n \nvar callbacks = $.Callbacks();\n \n// Add the function \"foo\" to the list\ncallbacks.add( foo );\n \n// Fire the items on the list\ncallbacks.fire( \"hello\" );\n// Outputs: \"foo: hello\"\n \n// Add the function \"bar\" to the list\ncallbacks.add( bar );\n \n// Fire the items on the list again\ncallbacks.fire( \"world\" );\n \n// Outputs:\n// \"foo: world\"\n// \"bar: world\"</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/callbacks.add\" class=\"_attribution-link\">https://api.jquery.com/callbacks.add</a>\n  </p>\n</div>\n","callbacks.firewith":"<h1 class=\"entry-title\">callbacks.fireWith()</h1> <div class=\"entry-content\"> <article id=\"callbacks-fireWith1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">callbacks.fireWith( [context ] [, args ] )</span><span class=\"returns\">Returns: <a href=\"types#Callbacks\">Callbacks</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Call all callbacks in a list with the given context and arguments.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a></span><a id=\"callbacks-fireWith-context-args\" href=\"#callbacks-fireWith-context-args\">callbacks.fireWith( [context ] [, args ] )</a> </h4> <ul> <li> <div><strong>context</strong></div> <div>Type: </div> <div>A reference to the context in which the callbacks in the list should be fired.</div> </li> <li> <div><strong>args</strong></div> <div>Type: </div> <div>An argument, or array of arguments, to pass to the callbacks in the list.</div> </li> </ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method returns the Callbacks object onto which it is attached (<code>this</code>).</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Use <code>callbacks.fireWith()</code> to fire a list of callbacks with a specific context and an array of arguments:</p> <pre class=\"syntaxhighlighter javascript\">// A sample logging function to be added to a callbacks list\nvar log = function( value1, value2 ) {\n  console.log( \"Received: \" + value1 + \",\" + value2 );\n};\n \nvar callbacks = $.Callbacks();\n \n// Add the log method to the callbacks list\ncallbacks.add( log );\n \n// Fire the callbacks on the list using the context \"window\"\n// and an arguments array\n \ncallbacks.fireWith( window, [ \"foo\",\"bar\" ] );\n// Outputs: \"Received: foo, bar\"</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/callbacks.fireWith\" class=\"_attribution-link\">https://api.jquery.com/callbacks.fireWith</a>\n  </p>\n</div>\n","callbacks.has":"<h1 class=\"entry-title\">callbacks.has()</h1> <div class=\"entry-content\"> <article id=\"callbacks-has1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">callbacks.has( [callback ] )</span><span class=\"returns\">Returns: <a href=\"types#Boolean\">Boolean</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Determine whether or not the list has any callbacks attached. If a callback is provided as an argument, determine whether it is in a list.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a></span><a id=\"callbacks-has-callback\" href=\"#callbacks-has-callback\">callbacks.has( [callback ] )</a> </h4> <ul><li> <div><strong>callback</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>The callback to search for.</div> </li></ul> </li></ul> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Use <code>callbacks.has()</code> to check if a callback list contains a specific callback:</p> <pre class=\"syntaxhighlighter javascript\">// A sample logging function to be added to a callbacks list\nvar foo = function( value1, value2 ) {\n  console.log( \"Received: \" + value1 + \",\" + value2 );\n};\n \n// A second function which will not be added to the list\nvar bar = function( value1, value2 ) {\n  console.log( \"foobar\" );\n};\n \nvar callbacks = $.Callbacks();\n \n// Add the log method to the callbacks list\ncallbacks.add( foo );\n \n// Determine which callbacks are in the list\nconsole.log( callbacks.has( foo ) );\n// true\nconsole.log( callbacks.has( bar ) );\n// false</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/callbacks.has\" class=\"_attribution-link\">https://api.jquery.com/callbacks.has</a>\n  </p>\n</div>\n","callbacks.fired":"<h1 class=\"entry-title\">callbacks.fired()</h1> <div class=\"entry-content\"> <article id=\"callbacks-fired1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">callbacks.fired()</span><span class=\"returns\">Returns: <a href=\"types#Boolean\">Boolean</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Determine if the callbacks have already been called at least once.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a></span><a id=\"callbacks-fired\" href=\"#callbacks-fired\">callbacks.fired()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Use <code>callbacks.fired()</code> to determine if the callbacks in a list have been called at least once:</p> <pre class=\"syntaxhighlighter javascript\">// A sample logging function to be added to a callbacks list\nvar foo = function( value ) {\n  console.log( \"foo:\" + value );\n};\n \nvar callbacks = $.Callbacks();\n \n// Add the function \"foo\" to the list\ncallbacks.add( foo );\n \n// Fire the items on the list\ncallbacks.fire( \"hello\" ); // Outputs: \"foo: hello\"\ncallbacks.fire( \"world\" ); // Outputs: \"foo: world\"\n \n// Test to establish if the callbacks have been called\nconsole.log( callbacks.fired() );</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/callbacks.fired\" class=\"_attribution-link\">https://api.jquery.com/callbacks.fired</a>\n  </p>\n</div>\n","checked-selector":"<h1 class=\"entry-title\">:checked Selector</h1> <div class=\"entry-content\"> <article id=\"checked1\" class=\"entry selector\"><h2 class=\"section-title\"><span>checked selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Matches all elements that are checked or selected.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \":checked\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>:checked</code> selector works for checkboxes, radio buttons, and options of <code>select</code> elements.</p> <p>To retrieve only the selected options of <code>select</code> elements, use the <a href=\"selected-selector\"><code>:selected</code></a> selector.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Determine how many input elements are checked.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;checked demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;form&gt;\n  &lt;p&gt;\n    &lt;input type=\"checkbox\" name=\"newsletter\" value=\"Hourly\" checked=\"checked\"&gt;\n \n    &lt;input type=\"checkbox\" name=\"newsletter\" value=\"Daily\"&gt;\n    &lt;input type=\"checkbox\" name=\"newsletter\" value=\"Weekly\"&gt;\n \n    &lt;input type=\"checkbox\" name=\"newsletter\" value=\"Monthly\" checked&gt;\n    &lt;input type=\"checkbox\" name=\"newsletter\" value=\"Yearly\"&gt;\n  &lt;/p&gt;\n&lt;/form&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar countChecked = function() {\n  var n = $( \"input:checked\" ).length;\n  $( \"div\" ).text( n + (n === 1 ? \" is\" : \" are\") + \" checked!\" );\n};\ncountChecked();\n \n$( \"input[type=checkbox]\" ).on( \"click\", countChecked );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Identify the checked radio input.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;checked demo&lt;/title&gt;\n  &lt;style&gt;\n  input, label {\n    line-height: 1.5em;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;form&gt;\n  &lt;div&gt;\n    &lt;input type=\"radio\" name=\"fruit\" value=\"orange\" id=\"orange\"&gt;\n    &lt;label for=\"orange\"&gt;orange&lt;/label&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;input type=\"radio\" name=\"fruit\" value=\"apple\" id=\"apple\"&gt;\n    &lt;label for=\"apple\"&gt;apple&lt;/label&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;input type=\"radio\" name=\"fruit\" value=\"banana\" id=\"banana\"&gt;\n    &lt;label for=\"banana\"&gt;banana&lt;/label&gt;\n  &lt;/div&gt;\n  &lt;div id=\"log\"&gt;&lt;/div&gt;\n&lt;/form&gt;\n \n&lt;script&gt;\n$( \"input\" ).on( \"click\", function() {\n  $( \"#log\" ).html( $( \"input:checked\" ).val() + \" is checked!\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/checked-selector\" class=\"_attribution-link\">https://api.jquery.com/checked-selector</a>\n  </p>\n</div>\n","callbacks.fire":"<h1 class=\"entry-title\">callbacks.fire()</h1> <div class=\"entry-content\"> <article id=\"callbacks-fire1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">callbacks.fire( arguments )</span><span class=\"returns\">Returns: <a href=\"types#Callbacks\">Callbacks</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Call all of the callbacks with the given arguments.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a></span><a id=\"callbacks-fire-arguments\" href=\"#callbacks-fire-arguments\">callbacks.fire( arguments )</a> </h4> <ul><li> <div><strong>arguments</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>The argument or list of arguments to pass back to the callback list.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method returns the Callbacks object onto which it is attached (<code>this</code>).</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Use <code>callbacks.fire()</code> to invoke the callbacks in a list with any arguments that have been passed:</p> <pre class=\"syntaxhighlighter javascript\">// A sample logging function to be added to a callbacks list\nvar foo = function( value ) {\n  console.log( \"foo:\" + value );\n};\n \nvar callbacks = $.Callbacks();\n \n// Add the function \"foo\" to the list\ncallbacks.add( foo );\n \n// Fire the items on the list\ncallbacks.fire( \"hello\" ); // Outputs: \"foo: hello\"\ncallbacks.fire( \"world\" ); // Outputs: \"foo: world\"\n \n// Add another function to the list\nvar bar = function( value ){\n  console.log( \"bar:\" + value );\n};\n \n// Add this function to the list\ncallbacks.add( bar );\n \n// Fire the items on the list again\ncallbacks.fire( \"hello again\" );\n// Outputs:\n// \"foo: hello again\"\n// \"bar: hello again\"</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/callbacks.fire\" class=\"_attribution-link\">https://api.jquery.com/callbacks.fire</a>\n  </p>\n</div>\n","callbacks.locked":"<h1 class=\"entry-title\">callbacks.locked()</h1> <div class=\"entry-content\"> <article id=\"callbacks-locked1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">callbacks.locked()</span><span class=\"returns\">Returns: <a href=\"types#Boolean\">Boolean</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Determine if the callbacks list has been locked.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a></span><a id=\"callbacks-locked\" href=\"#callbacks-locked\">callbacks.locked()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Use <code>callbacks.locked()</code> to determine the lock-state of a callback list:</p> <pre class=\"syntaxhighlighter javascript\">// A sample logging function to be added to a callbacks list\nvar foo = function( value ) {\n  console.log( \"foo: \" + value );\n};\n \nvar callbacks = $.Callbacks();\n \n// Add the logging function to the callback list\ncallbacks.add( foo );\n \n// Fire the items on the list, passing an argument\ncallbacks.fire( \"hello\" );\n// Outputs \"foo: hello\"\n \n// Lock the callbacks list\ncallbacks.lock();\n \n// Test the lock-state of the list\nconsole.log ( callbacks.locked() );\n// true</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/callbacks.locked\" class=\"_attribution-link\">https://api.jquery.com/callbacks.locked</a>\n  </p>\n</div>\n","callbacks.lock":"<h1 class=\"entry-title\">callbacks.lock()</h1> <div class=\"entry-content\"> <article id=\"callbacks-lock1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">callbacks.lock()</span><span class=\"returns\">Returns: <a href=\"types#Callbacks\">Callbacks</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Lock a callback list in its current state.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a></span><a id=\"callbacks-lock\" href=\"#callbacks-lock\">callbacks.lock()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method returns the Callbacks object onto which it is attached (<code>this</code>).</p> <p>If the Callbacks object is created with the <code>\"memory\"</code> flag as its argument, additional functions may be added and fired after the callback list is locked.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Use <code>callbacks.lock()</code> to lock a callback list to avoid further changes being made to the list state:</p> <pre class=\"syntaxhighlighter javascript\">// A sample logging function to be added to a callbacks list\nvar foo = function( value ) {\n  console.log( \"foo:\" + value );\n};\n \nvar callbacks = $.Callbacks();\n \n// Add the logging function to the callback list\ncallbacks.add( foo );\n \n// Fire the items on the list, passing an argument\ncallbacks.fire( \"hello\" );\n// Outputs \"foo: hello\"\n \n// Lock the callbacks list\ncallbacks.lock();\n \n// Try firing the items again\ncallbacks.fire( \"world\" );\n \n// As the list was locked, no items were called,\n// so \"world\" isn't logged</pre> </div> <div class=\"entry-example\" id=\"example-1\"> <p>Use <code>callbacks.lock()</code> to lock a callback list with \"memory,\" and then resume using the list:</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;callbacks.lock demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div id=\"log\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\n// Simple function for logging results\nvar log = function( value ) {\n  $( \"#log\" ).append( \"&lt;p&gt;\" + value + \"&lt;/p&gt;\" );\n};\n \n// Two sample functions to be added to a callbacks list\nvar foo = function( value ) {\n  log( \"foo: \" + value );\n};\nvar bar = function( value ) {\n  log( \"bar: \" + value );\n};\n \n// Create the callbacks object with the \"memory\" flag\nvar callbacks = $.Callbacks( \"memory\" );\n \n// Add the foo logging function to the callback list\ncallbacks.add( foo );\n \n// Fire the items on the list, passing an argument\ncallbacks.fire( \"hello\" );\n// Outputs \"foo: hello\"\n \n// Lock the callbacks list\ncallbacks.lock();\n \n// Try firing the items again\ncallbacks.fire( \"world\" );\n// As the list was locked, no items were called,\n// so \"foo: world\" isn't logged\n \n// Add the foo function to the callback list again\ncallbacks.add( foo );\n \n// Try firing the items again\ncallbacks.fire( \"silentArgument\" );\n// Outputs \"foo: hello\" because the argument value was stored in memory\n \n// Add the bar function to the callback list\ncallbacks.add( bar );\n \ncallbacks.fire( \"youHadMeAtHello\" );\n// Outputs \"bar: hello\" because the list is still locked,\n// and the argument value is still stored in memory\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/callbacks.lock\" class=\"_attribution-link\">https://api.jquery.com/callbacks.lock</a>\n  </p>\n</div>\n","callbacks.remove":"<h1 class=\"entry-title\">callbacks.remove()</h1> <div class=\"entry-content\"> <article id=\"callbacks-remove1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">callbacks.remove( callbacks )</span><span class=\"returns\">Returns: <a href=\"types#Callbacks\">Callbacks</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Remove a callback or a collection of callbacks from a callback list.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a></span><a id=\"callbacks-remove-callbacks\" href=\"#callbacks-remove-callbacks\">callbacks.remove( callbacks )</a> </h4> <ul><li> <div><strong>callbacks</strong></div> <div>Type: <a href=\"types#Function\">Function</a>() or <a href=\"types#Array\">Array</a> </div> <div>A function, or array of functions, that are to be removed from the callback list.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method returns the Callbacks object onto which it is attached (<code>this</code>).</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Use <code>callbacks.remove()</code> to remove callbacks from a callback list:</p> <pre class=\"syntaxhighlighter javascript\">// A sample logging function to be added to a callbacks list\nvar foo = function( value ) {\n  console.log( \"foo: \" + value );\n};\n \nvar callbacks = $.Callbacks();\n \n// Add the function \"foo\" to the list\ncallbacks.add( foo );\n \n// Fire the items on the list\ncallbacks.fire( \"hello\" );\n// Outputs: \"foo: hello\"\n \n// Remove \"foo\" from the callback list\ncallbacks.remove( foo );\n \n// Fire the items on the list again\ncallbacks.fire( \"world\" );\n \n// Nothing output as \"foo\" is no longer in the list</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/callbacks.remove\" class=\"_attribution-link\">https://api.jquery.com/callbacks.remove</a>\n  </p>\n</div>\n","class-selector":"<h1 class=\"entry-title\">Class Selector (“.class”)</h1> <div class=\"entry-content\"> <article id=\"class1\" class=\"entry selector\"><h2 class=\"section-title\"><span>class selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all elements with the given class. </p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \".class\" )</h4> <p class=\"argument\"><strong>class: </strong>A class to search for. An element can have multiple classes; only one of them must match.</p> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>For class selectors, jQuery uses JavaScript's native <code>getElementsByClassName()</code> function if the browser supports it.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds the element with the class \"myClass\".</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;class demo&lt;/title&gt;\n  &lt;style&gt;\n  div, span {\n    width: 120px;\n    height: 40px;\n    float: left;\n    padding: 10px;\n    margin: 10px;\n    background-color: #EEEEEE;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div class=\"notMe\"&gt;div class=\"notMe\"&lt;/div&gt;\n&lt;div class=\"myClass\"&gt;div class=\"myClass\"&lt;/div&gt;\n&lt;span class=\"myClass\"&gt;span class=\"myClass\"&lt;/span&gt;\n \n&lt;script&gt;\n$( \".myClass\" ).css( \"border\", \"3px solid red\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Finds the element with both \"myclass\" and \"otherclass\" classes.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;class demo&lt;/title&gt;\n  &lt;style&gt;\n  div, span {\n    width: 120px;\n    height: 40px;\n    float: left;\n    padding: 10px;\n    margin: 10px;\n    background-color: #EEEEEE;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div class=\"myclass\"&gt;div class=\"notMe\"&lt;/div&gt;\n&lt;div class=\"myclass otherclass\"&gt;div class=\"myClass\"&lt;/div&gt;\n&lt;span class=\"myclass otherclass\"&gt;span class=\"myClass\"&lt;/span&gt;\n \n&lt;script&gt;\n$( \".myclass.otherclass\" ).css( \"border\", \"13px solid red\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/class-selector\" class=\"_attribution-link\">https://api.jquery.com/class-selector</a>\n  </p>\n</div>\n","click":"<h1 class=\"entry-title\">.click()</h1> <div class=\"entry-content\"> <article id=\"click1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.click( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Bind an event handler to the \"click\" JavaScript event, or trigger that event on an element.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"click-handler\" href=\"#click-handler\">.click( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"click-eventData-handler\" href=\"#click-eventData-handler\">.click( [eventData ], handler )</a> </h4> <ul> <li> <div><strong>eventData</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>An object containing data that will be passed to the event handler.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"click\" href=\"#click\">.click()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method is a shortcut for <code>.on( \"click\", handler )</code> in the first two variations, and <code>.trigger( \"click\" )</code> in the third. The <code>click</code> event is sent to an element when the mouse pointer is over the element, and the mouse button is pressed and released. Any HTML element can receive this event. For example, consider the HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;div id=\"target\"&gt;\n  Click here\n&lt;/div&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;/div&gt;</pre> <figure> <img src=\"https://api.jquery.com/resources/0042_05_03.png\" alt=\"\"> <figcaption>Figure 1 - Illustration of the rendered HTML</figcaption> </figure> <p>The event handler can be bound to any <code>&lt;div&gt;</code>:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#target\" ).click(function() {\n  alert( \"Handler for .click() called.\" );\n});</pre> <p>Now if we click on this element, the alert is displayed:</p> <p> <samp>Handler for .click() called.</samp> </p> <p>We can also trigger the event when a different element is clicked:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#other\" ).click(function() {\n  $( \"#target\" ).click();\n});</pre> <p>After this code executes, clicking on <samp>Trigger the handler</samp> will also alert the message.</p> <p>The <code>click</code> event is only triggered after this exact series of events:</p> <ul> <li>The mouse button is depressed while the pointer is inside the element.</li> <li>The mouse button is released while the pointer is inside the element.</li> </ul> <p>This is usually the desired sequence before taking an action. If this is not required, the <code>mousedown</code> or <code>mouseup</code> event may be more suitable.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> As the <code>.click()</code> method is just a shorthand for <code>.on( \"click\", handler )</code>, detaching is possible using <code>.off( \"click\" )</code>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Hide paragraphs on a page when they are clicked:</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;click demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    color: red;\n    margin: 5px;\n    cursor: pointer;\n  }\n  p:hover {\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;First Paragraph&lt;/p&gt;\n&lt;p&gt;Second Paragraph&lt;/p&gt;\n&lt;p&gt;Yet one more Paragraph&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).click(function() {\n  $( this ).slideUp();\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Trigger the click event on all of the paragraphs on the page:</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).click();</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/click\" class=\"_attribution-link\">https://api.jquery.com/click</a>\n  </p>\n</div>\n","clone":"<h1 class=\"entry-title\">.clone()</h1> <div class=\"entry-content\"> <article id=\"clone1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.clone( [withDataAndEvents ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Create a deep copy of the set of matched elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"clone-withDataAndEvents\" href=\"#clone-withDataAndEvents\">.clone( [withDataAndEvents ] )</a> </h4> <ul><li> <div> <strong>withDataAndEvents</strong> (default: <code>false</code>)</div> <div>Type: <a href=\"types#Boolean\">Boolean</a> </div> <div>A Boolean indicating whether event handlers should be copied along with the elements. As of jQuery 1.4, element data will be copied as well.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.5/\">1.5</a></span><a id=\"clone-withDataAndEvents-deepWithDataAndEvents\" href=\"#clone-withDataAndEvents-deepWithDataAndEvents\">.clone( [withDataAndEvents ] [, deepWithDataAndEvents ] )</a> </h4> <ul> <li> <div> <strong>withDataAndEvents</strong> (default: <code>false</code>)</div> <div>Type: <a href=\"types#Boolean\">Boolean</a> </div> <div>A Boolean indicating whether event handlers and data should be copied along with the elements. The default value is <code>false</code>. <em>*In jQuery 1.5.0 the default value was incorrectly <code>true</code>; it was changed back to <code>false</code> in 1.5.1 and up.</em> </div> </li> <li> <div> <strong>deepWithDataAndEvents</strong> (default: <code>value of withDataAndEvents</code>)</div> <div>Type: <a href=\"types#Boolean\">Boolean</a> </div> <div>A Boolean indicating whether event handlers and data for all children of the cloned element should be copied. By default its value matches the first argument's value (which defaults to <code>false</code>).</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.clone()</code> method performs a <em>deep</em> copy of the set of matched elements, meaning that it copies the matched elements as well as all of their descendant elements and text nodes.</p> <div class=\"warning\"> <p><strong>Note:</strong> For performance reasons, the dynamic state of certain form elements (e.g., user data typed into <code>textarea</code> and user selections made to a <code>select</code>) is not copied to the cloned elements. When cloning <code>input</code> elements, the dynamic state of the element (e.g., user data typed into text inputs and user selections made to a checkbox) is retained in the cloned elements.</p> </div> <p>When used in conjunction with one of the insertion methods, <code>.clone()</code> is a convenient way to duplicate elements on a page. Consider the following HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;div class=\"hello\"&gt;Hello&lt;/div&gt;\n  &lt;div class=\"goodbye\"&gt;Goodbye&lt;/div&gt;\n&lt;/div&gt;</pre> <p>As shown in the discussion for <code><a href=\"append\">.append()</a></code>, normally when an element is inserted somewhere in the DOM, it is moved from its old location. So, given the code:</p> <pre class=\"syntaxhighlighter javascript\">$( \".hello\" ).appendTo( \".goodbye\" );</pre> <p>The resulting DOM structure would be:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;div class=\"goodbye\"&gt;\n    Goodbye\n    &lt;div class=\"hello\"&gt;Hello&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</pre> <p>To prevent this and instead create a copy of the element, you could write the following:</p> <pre class=\"syntaxhighlighter javascript\">$( \".hello\" ).clone().appendTo( \".goodbye\" );</pre> <p>This would produce:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;div class=\"hello\"&gt;Hello&lt;/div&gt;\n  &lt;div class=\"goodbye\"&gt;\n    Goodbye\n    &lt;div class=\"hello\"&gt;Hello&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</pre> <div class=\"warning\"> <p><strong>Note:</strong> When using the <code>.clone()</code> method, you can modify the cloned elements or their contents before (re-)inserting them into the document.</p> </div> <p>Normally, any event handlers bound to the original element are <em>not</em> copied to the clone. The optional <code>withDataAndEvents</code> parameter allows us to change this behavior, and to instead make copies of all of the event handlers as well, bound to the new copy of the element. As of jQuery 1.4, all element data (attached by the <code>.data()</code> method) is also copied to the new copy. </p> <p>However, objects and arrays within element data are not copied and will continue to be shared between the cloned element and the original element. To deep copy all data, copy each one manually:</p> <pre class=\"syntaxhighlighter javascript\">// Original element with attached data\nvar $elem = $( \"#elem\" ).data( \"arr\": [ 1 ] ),\n    $clone = $elem.clone( true )\n      // Deep copy to prevent data sharing\n      .data( \"arr\", $.extend( [], $elem.data( \"arr\" ) ) );</pre> <p>As of jQuery 1.5, <code>withDataAndEvents</code> can be optionally enhanced with <code>deepWithDataAndEvents </code> to copy the events and data for all children of the cloned element.</p> <div class=\"warning\"> <p><strong>Note:</strong> Using <code>.clone()</code> has the side-effect of producing elements with duplicate <code>id</code> attributes, which are supposed to be unique. Where possible, it is recommended to avoid cloning elements with this attribute or using <code>class</code> attributes as identifiers instead.</p> </div> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Clones all b elements (and selects the clones) and prepends them to all paragraphs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;clone demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;b&gt;Hello&lt;/b&gt;&lt;p&gt;, how are you?&lt;/p&gt;\n \n&lt;script&gt;\n$( \"b\" ).clone().prependTo( \"p\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/clone\" class=\"_attribution-link\">https://api.jquery.com/clone</a>\n  </p>\n</div>\n","closest":"<h1 class=\"entry-title\">.closest()</h1> <div class=\"entry-content\"> <div class=\"toc\"> <h4><span>Contents:</span></h4> <ul class=\"toc-list\"> <li> <a href=\"#closest1\">.closest( selector )</a><ul> <li><a href=\"#closest-selector\">.closest( selector )</a></li> <li><a href=\"#closest-selector-context\">.closest( selector [, context ] )</a></li> <li><a href=\"#closest-selection\">.closest( selection )</a></li> <li><a href=\"#closest-element\">.closest( element )</a></li> </ul> </li> <li> <a href=\"#closest2\">.closest( selectors [, context ] )</a><ul><li><a href=\"#closest-selectors-context\">.closest( selectors [, context ] )</a></li></ul> </li> </ul> </div>\n<article id=\"closest1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.closest( selector )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.3/\">1.3</a></span><a id=\"closest-selector\" href=\"#closest-selector\">.closest( selector )</a> </h4> <ul><li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> </div> <div>A string containing a selector expression to match elements against.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"closest-selector-context\" href=\"#closest-selector-context\">.closest( selector [, context ] )</a> </h4> <ul> <li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> </div> <div>A string containing a selector expression to match elements against.</div> </li> <li> <div><strong>context</strong></div> <div>Type: <a href=\"types#Element\">Element</a> </div> <div>A DOM element within which a matching element may be found.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.6/\">1.6</a></span><a id=\"closest-selection\" href=\"#closest-selection\">.closest( selection )</a> </h4> <ul><li> <div><strong>selection</strong></div> <div>Type: <a href=\"types#jQuery\">jQuery</a> </div> <div>A jQuery object to match elements against.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.6/\">1.6</a></span><a id=\"closest-element\" href=\"#closest-element\">.closest( element )</a> </h4> <ul><li> <div><strong>element</strong></div> <div>Type: <a href=\"types#Element\">Element</a> </div> <div>An element to match elements against.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Given a jQuery object that represents a set of DOM elements, the <code>.closest()</code> method searches through these elements and their ancestors in the DOM tree and constructs a new jQuery object from the matching elements. The <a href=\"parents\"><code>.parents()</code></a> and <code>.closest()</code> methods are similar in that they both traverse up the DOM tree. The differences between the two, though subtle, are significant:</p> <table> <thead> <tr> <th> <code>.closest()</code> </th> <th> <a href=\"parents\"> <code>.parents()</code> </a> </th> </tr> </thead> <tbody> <tr> <td>Begins with the current element</td> <td>Begins with the parent element</td> </tr> <tr> <td>Travels up the DOM tree until it finds a match for the supplied selector</td> <td>Travels up the DOM tree to the document's root element, adding each ancestor element to a temporary collection; it then filters that collection based on a selector if one is supplied </td> </tr> <tr> <td>The returned jQuery object contains zero or one element for each element in the original set, in document order</td> <td>The returned jQuery object contains zero or more elements for each element in the original set, in reverse document order</td> </tr> </tbody> </table> <pre class=\"syntaxhighlighter xml\">&lt;ul id=\"one\" class=\"level-1\"&gt;\n  &lt;li class=\"item-i\"&gt;I&lt;/li&gt;\n  &lt;li id=\"ii\" class=\"item-ii\"&gt;II\n    &lt;ul class=\"level-2\"&gt;\n      &lt;li class=\"item-a\"&gt;A&lt;/li&gt;\n      &lt;li class=\"item-b\"&gt;B\n        &lt;ul class=\"level-3\"&gt;\n          &lt;li class=\"item-1\"&gt;1&lt;/li&gt;\n          &lt;li class=\"item-2\"&gt;2&lt;/li&gt;\n          &lt;li class=\"item-3\"&gt;3&lt;/li&gt;\n        &lt;/ul&gt;\n      &lt;/li&gt;\n      &lt;li class=\"item-c\"&gt;C&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n  &lt;li class=\"item-iii\"&gt;III&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>Suppose we perform a search for <code>&lt;ul&gt;</code> elements starting at item A:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li.item-a\" )\n  .closest( \"ul\" )\n  .css( \"background-color\", \"red\" );</pre> <p>This will change the color of the level-2 <code>&lt;ul&gt;</code>, since it is the first encountered when traveling up the DOM tree.</p> <p>Suppose we search for an <code>&lt;li&gt;</code> element instead:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li.item-a\" )\n  .closest( \"li\" )\n  .css( \"background-color\", \"red\" );</pre> <p>This will change the color of list item A. The <code>.closest()</code> method begins its search <em>with the element itself</em> before progressing up the DOM tree, and stops when item A matches the selector.</p> <p>We can pass in a DOM element as the context within which to search for the closest element.</p> <pre class=\"syntaxhighlighter javascript\">var listItemII = document.getElementById( \"ii\" );\n$( \"li.item-a\" )\n  .closest( \"ul\", listItemII )\n  .css( \"background-color\", \"red\" );\n$( \"li.item-a\" )\n  .closest( \"#one\", listItemII )\n  .css( \"background-color\", \"green\" );</pre> <p>This will change the color of the level-2 <code>&lt;ul&gt;</code>, because it is both the first <code>&lt;ul&gt;</code> ancestor of list item A and a descendant of list item II. It will not change the color of the level-1 <code>&lt;ul&gt;</code>, however, because it is not a descendant of list item II.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Show how event delegation can be done with closest. The closest list element toggles a yellow background when it or its descendent is clicked.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;closest demo&lt;/title&gt;\n  &lt;style&gt;\n  li {\n    margin: 3px;\n    padding: 3px;\n    background: #EEEEEE;\n  }\n  li.hilight {\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;ul&gt;\n  &lt;li&gt;&lt;b&gt;Click me!&lt;/b&gt;&lt;/li&gt;\n  &lt;li&gt;You can also &lt;b&gt;Click me!&lt;/b&gt;&lt;/li&gt;\n&lt;/ul&gt;\n \n&lt;script&gt;\n$( document ).on( \"click\", function( event ) {\n  $( event.target ).closest( \"li\" ).toggleClass( \"hilight\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Pass a jQuery object to closest. The closest list element toggles a yellow background when it or its descendent is clicked.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;closest demo&lt;/title&gt;\n  &lt;style&gt;\n  li {\n    margin: 3px;\n    padding: 3px;\n    background: #EEEEEE;\n  }\n  li.hilight {\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;ul&gt;\n  &lt;li&gt;&lt;b&gt;Click me!&lt;/b&gt;&lt;/li&gt;\n  &lt;li&gt;You can also &lt;b&gt;Click me!&lt;/b&gt;&lt;/li&gt;\n&lt;/ul&gt;\n \n&lt;script&gt;\nvar listElements = $( \"li\" ).css( \"color\", \"blue\" );\n$( document ).on( \"click\", function( event ) {\n  $( event.target ).closest( listElements ).toggleClass( \"hilight\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article><article id=\"closest2\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.closest( selectors [, context ] )</span><span class=\"returns\">Returns: <a href=\"types#Array\">Array</a></span><span class=\"version-details\">version deprecated: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a>, removed: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Get an array of all the elements and selectors matched against the current element up through the DOM tree.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"closest-selectors-context\" href=\"#closest-selectors-context\">.closest( selectors [, context ] )</a> </h4> <ul> <li> <div><strong>selectors</strong></div> <div>Type: <a href=\"types#Array\">Array</a> </div> <div>An array or string containing a selector expression to match elements against (can also be a jQuery object).</div> </li> <li> <div><strong>context</strong></div> <div>Type: <a href=\"types#Element\">Element</a> </div> <div>A DOM element within which a matching element may be found.</div> </li> </ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc-1\"> <div class=\"warning\"> <strong>This signature (only!) is deprecated as of jQuery 1.7 and <em>removed</em> in jQuery 1.8</strong>. It was primarily meant to be used internally or by plugin authors.</div> </div> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/closest\" class=\"_attribution-link\">https://api.jquery.com/closest</a>\n  </p>\n</div>\n","child-selector":"<h1 class=\"entry-title\">Child Selector (“parent &gt; child”)</h1> <div class=\"entry-content\"> <article id=\"child1\" class=\"entry selector\"><h2 class=\"section-title\"><span>child selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all direct child elements specified by \"child\" of elements specified by \"parent\".</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \"parent &gt; child\" )</h4> <p class=\"argument\"><strong>parent: </strong>Any valid selector.</p> <p class=\"argument\"><strong>child: </strong>A selector to filter the child elements.</p> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The child combinator (E <strong>&gt;</strong> F) can be thought of as a more specific form of the descendant combinator (E F) in that it selects only first-level descendants.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Places a border around all list items that are children of &lt;ul class=\"topnav\"&gt; .</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;child demo&lt;/title&gt;\n  &lt;style&gt;\n  body {\n    font-size: 14px;\n  }\n  \t&lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;ul class=\"topnav\"&gt;\n  &lt;li&gt;Item 1&lt;/li&gt;\n  &lt;li&gt;Item 2\n    &lt;ul&gt;\n    &lt;li&gt;Nested item 1&lt;/li&gt;\n    &lt;li&gt;Nested item 2&lt;/li&gt;\n    &lt;li&gt;Nested item 3&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n  &lt;li&gt;Item 3&lt;/li&gt;\n&lt;/ul&gt;\n \n&lt;script&gt;\n$( \"ul.topnav &gt; li\" ).css( \"border\", \"3px double red\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/child-selector\" class=\"_attribution-link\">https://api.jquery.com/child-selector</a>\n  </p>\n</div>\n","deferred.fail":"<h1 class=\"entry-title\">deferred.fail()</h1> <div class=\"entry-content\"> <article id=\"deferred-fail1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">deferred.fail( failCallbacks [, failCallbacks ] )</span><span class=\"returns\">Returns: <a href=\"types#Deferred\">Deferred</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong> Add handlers to be called when the Deferred object is rejected. </p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.5/\">1.5</a></span><a id=\"deferred-fail-failCallbacks-failCallbacks\" href=\"#deferred-fail-failCallbacks-failCallbacks\">deferred.fail( failCallbacks [, failCallbacks ] )</a> </h4> <ul> <li> <div><strong>failCallbacks</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div> A function, or array of functions, that are called when the Deferred is rejected. </div> </li> <li> <div><strong>failCallbacks</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div> Optional additional functions, or arrays of functions, that are called when the Deferred is rejected. </div> </li> </ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>deferred.fail()</code> method accepts one or more arguments, all of which can be either a single function or an array of functions. When the Deferred is rejected, the failCallbacks are called. Callbacks are executed in the order they were added. Since <code>deferred.fail()</code> returns the deferred object, other methods of the deferred object can be chained to this one, including additional <code>deferred.fail()</code> methods. The failCallbacks are executed using the arguments provided to the <a href=\"deferred.reject\"><code>deferred.reject()</code></a> or <a href=\"deferred.rejectwith\"><code>deferred.rejectWith()</code></a> method call in the order they were added. For more information, see the documentation for <a href=\"https://api.jquery.com/category/deferred-object/\">Deferred object</a>.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Since the <a href=\"jquery.get\"><code>jQuery.get</code></a> method returns a jqXHR object, which is derived from a Deferred, you can attach a success and failure callback using the <code>deferred.done()</code> and <code>deferred.fail()</code> methods.</p> <pre class=\"syntaxhighlighter javascript\">$.get( \"test.php\" )\n  .done(function() {\n    alert( \"$.get succeeded\" );\n  })\n  .fail(function() {\n    alert( \"$.get failed!\" );\n  });</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/deferred.fail\" class=\"_attribution-link\">https://api.jquery.com/deferred.fail</a>\n  </p>\n</div>\n","children":"<h1 class=\"entry-title\">.children()</h1> <div class=\"entry-content\"> <article id=\"children1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.children( [selector ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Get the children of each element in the set of matched elements, optionally filtered by a selector.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"children-selector\" href=\"#children-selector\">.children( [selector ] )</a> </h4> <ul><li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> </div> <div>A string containing a selector expression to match elements against.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Given a jQuery object that represents a set of DOM elements, the <code>.children()</code> method allows us to search through the children of these elements in the DOM tree and construct a new jQuery object from the matching elements. The <code>.children()</code> method differs from <code><a href=\"find\">.find()</a></code> in that <code>.children()</code> only travels a single level down the DOM tree while <code>.find()</code> can traverse down multiple levels to select descendant elements (grandchildren, etc.) as well. Note also that like most jQuery methods, <code>.children()</code> does not return text nodes; to get <em>all</em> children including text and comment nodes, use <code><a href=\"contents\">.contents()</a></code>.</p> <p>The <code>.children()</code> method optionally accepts a selector expression of the same type that we can pass to the <code>$()</code> function. If the selector is supplied, the elements will be filtered by testing whether they match it.</p> <p>Consider a page with a basic nested list on it:</p> <pre class=\"syntaxhighlighter xml\">&lt;ul class=\"level-1\"&gt;\n  &lt;li class=\"item-i\"&gt;I&lt;/li&gt;\n  &lt;li class=\"item-ii\"&gt;II\n    &lt;ul class=\"level-2\"&gt;\n      &lt;li class=\"item-a\"&gt;A&lt;/li&gt;\n      &lt;li class=\"item-b\"&gt;B\n        &lt;ul class=\"level-3\"&gt;\n          &lt;li class=\"item-1\"&gt;1&lt;/li&gt;\n          &lt;li class=\"item-2\"&gt;2&lt;/li&gt;\n          &lt;li class=\"item-3\"&gt;3&lt;/li&gt;\n        &lt;/ul&gt;\n      &lt;/li&gt;\n      &lt;li class=\"item-c\"&gt;C&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n  &lt;li class=\"item-iii\"&gt;III&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>If we begin at the level-2 list, we can find its children:</p> <pre class=\"syntaxhighlighter javascript\">$( \"ul.level-2\" ).children().css( \"background-color\", \"red\" );</pre> <p>The result of this call is a red background behind items A, B, and C. Since we do not supply a selector expression, all of the children are part of the returned jQuery object. If we had supplied one, only the matching items among these three would be included.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Find all children of the clicked element.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;children demo&lt;/title&gt;\n  &lt;style&gt;\n  body {\n    font-size: 16px;\n    font-weight: bolder;\n  }\n  div {\n    width: 130px;\n    height: 82px;\n    margin: 10px;\n    float: left;\n    border: 1px solid blue;\n    padding: 4px;\n  }\n  #container {\n    width: auto;\n    height: 105px;\n    margin: 0;\n    float: none;\n    border: none;\n  }\n  .hilite {\n    border-color: red;\n  }\n  #results {\n    display: block;\n    color: red;\n  }\n  p, span, em, a, b, button {\n    border: 1px solid transparent;\n  }\n  p {\n    margin: 10px;\n  }\n  span {\n    color: blue;\n  }\n  input {\n    width: 100px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div id=\"container\"&gt;\n  &lt;div&gt;\n    &lt;p&gt;This &lt;span&gt;is the &lt;em&gt;way&lt;/em&gt; we&lt;/span&gt;\n      write &lt;em&gt;the&lt;/em&gt; demo,&lt;/p&gt;\n  &lt;/div&gt;\n \n  &lt;div&gt;\n    &lt;a href=\"#\"&gt;&lt;b&gt;w&lt;/b&gt;rit&lt;b&gt;e&lt;/b&gt;&lt;/a&gt; the &lt;span&gt;demo,&lt;/span&gt; &lt;button&gt;write\n    the&lt;/button&gt; demo,\n  &lt;/div&gt;\n \n  &lt;div&gt;\n    This &lt;span&gt;the way we &lt;em&gt;write&lt;/em&gt; the &lt;em&gt;demo&lt;/em&gt; so&lt;/span&gt;\n    &lt;input type=\"text\" value=\"early\"&gt; in\n  &lt;/div&gt;\n \n  &lt;p&gt;\n    &lt;span&gt;t&lt;/span&gt;he &lt;span&gt;m&lt;/span&gt;orning.\n    &lt;span id=\"results\"&gt;Found &lt;span&gt;0&lt;/span&gt; children in &lt;span&gt;TAG&lt;/span&gt;.&lt;/span&gt;\n  &lt;/p&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\n$( \"#container\" ).click(function ( event ) {\n  $( \"*\" ).removeClass( \"hilite\" );\n  var kids = $( event.target ).children();\n  var len = kids.addClass( \"hilite\" ).length;\n \n  $( \"#results span:first\" ).text( len );\n  $( \"#results span:last\" ).text( event.target.tagName );\n \n  event.preventDefault();\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Find all children of each div.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;children demo&lt;/title&gt;\n  &lt;style&gt;\n  body {\n    font-size: 16px;\n    font-weight: bolder;\n  }\n  span {\n    color: blue;\n  }\n  p {\n    margin: 5px 0;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Hello (this is a paragraph)&lt;/p&gt;\n \n&lt;div&gt;&lt;span&gt;Hello Again (this span is a child of the a div)&lt;/span&gt;&lt;/div&gt;\n&lt;p&gt;And &lt;span&gt;Again&lt;/span&gt; (in another paragraph)&lt;/p&gt;\n \n&lt;div&gt;And One Last &lt;span&gt;Time&lt;/span&gt; (most text directly in a div)&lt;/div&gt;\n \n&lt;script&gt;\n$( \"div\" ).children().css( \"border-bottom\", \"3px double red\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-2\"> <p>Find all children with a class \"selected\" of each div.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;children demo&lt;/title&gt;\n  &lt;style&gt;\n  body {\n    font-size: 16px;\n    font-weight: bolder;\n  }\n  p {\n    margin: 5px 0;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;\n  &lt;span&gt;Hello&lt;/span&gt;\n  &lt;p class=\"selected\"&gt;Hello Again&lt;/p&gt;\n  &lt;div class=\"selected\"&gt;And Again&lt;/div&gt;\n  &lt;p&gt;And One Last Time&lt;/p&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\n$( \"div\" ).children( \".selected\" ).css( \"color\", \"blue\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/children\" class=\"_attribution-link\">https://api.jquery.com/children</a>\n  </p>\n</div>\n","clearqueue":"<h1 class=\"entry-title\">.clearQueue()</h1> <div class=\"entry-content\"> <article id=\"clearQueue1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.clearQueue( [queueName ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Remove from the queue all items that have not yet been run.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"clearQueue-queueName\" href=\"#clearQueue-queueName\">.clearQueue( [queueName ] )</a> </h4> <ul><li> <div><strong>queueName</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>When the <code>.clearQueue()</code> method is called, all functions on the queue that have not been executed are removed from the queue. When used without an argument, <code>.clearQueue()</code> removes the remaining functions from <code>fx</code>, the standard effects queue. In this way it is similar to <code>.stop(true)</code>. However, while the <code>.stop()</code> method is meant to be used only with animations, <code>.clearQueue()</code> can also be used to remove any function that has been added to a generic jQuery queue with the <code>.queue()</code> method. </p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Empty the queue.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;clearQueue demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    margin: 3px;\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    left: 0px;\n    top: 30px;\n    background: green;\n    display: none;\n  }\n  div.newcolor {\n    background: blue;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button id=\"start\"&gt;Start&lt;/button&gt;\n&lt;button id=\"stop\"&gt;Stop&lt;/button&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"#start\" ).click(function() {\n  var myDiv = $( \"div\" );\n  myDiv.show( \"slow\" );\n  myDiv.animate({\n    left:\"+=200\"\n  }, 5000 );\n \n  myDiv.queue(function() {\n    var that = $( this );\n    that.addClass( \"newcolor\" );\n    that.dequeue();\n  });\n \n  myDiv.animate({\n    left:\"-=200\"\n  }, 1500 );\n  myDiv.queue(function() {\n    var that = $( this );\n    that.removeClass( \"newcolor\" );\n    that.dequeue();\n  });\n  myDiv.slideUp();\n});\n \n$( \"#stop\" ).click(function() {\n  var myDiv = $( \"div\" );\n  myDiv.clearQueue();\n  myDiv.stop();\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/clearQueue\" class=\"_attribution-link\">https://api.jquery.com/clearQueue</a>\n  </p>\n</div>\n","contents":"<h1 class=\"entry-title\">.contents()</h1> <div class=\"entry-content\"> <article id=\"contents1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.contents()</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Get the children of each element in the set of matched elements, including text and comment nodes.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2/\">1.2</a></span><a id=\"contents\" href=\"#contents\">.contents()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Given a jQuery object that represents a set of DOM elements, the <code>.contents()</code> method allows us to search through the immediate children of these elements in the DOM tree and construct a new jQuery object from the matching elements. The <code>.contents()</code> and <code>.children()</code> methods are similar, except that the former includes text nodes and comment nodes as well as HTML elements in the resulting jQuery object. Please note that most jQuery operations don't support text nodes and comment nodes. The few that do will have an explicit note on their API documentation page.</p> <p>The <code>.contents()</code> method can also be used to get the content document of an iframe, if the iframe is on the same domain as the main page.</p> <p>Consider a simple <code>&lt;div&gt;</code> with a number of text nodes, each of which is separated by two line break elements (<code>&lt;br&gt;</code>):</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed\n  do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n  &lt;br&gt;&lt;br&gt;\n  Ut enim ad minim veniam, quis nostrud exercitation ullamco\n  laboris nisi ut aliquip ex ea commodo consequat.\n  &lt;br&gt;&lt;br&gt;\n  Duis aute irure dolor in reprehenderit in voluptate velit\n  esse cillum dolore eu fugiat nulla pariatur.\n&lt;/div&gt;</pre> <p>We can employ the <code>.contents()</code> method to help convert this blob of text into three well-formed paragraphs:</p> <pre class=\"syntaxhighlighter javascript\">$( \".container\" )\n  .contents()\n    .filter(function() {\n      return this.nodeType === 3;\n    })\n      .wrap( \"&lt;p&gt;&lt;/p&gt;\" )\n      .end()\n    .filter( \"br\" )\n    .remove();</pre> <p>This code first retrieves the contents of <code>&lt;div class=\"container\"&gt;</code> and then filters it for text nodes, which are wrapped in paragraph tags. This is accomplished by testing the <a href=\"https://developer.mozilla.org/docs/en/DOM/Node.nodeType\"><code>.nodeType</code> property</a> of the element. This DOM property holds a numeric code indicating the node's type; text nodes use the code 3. The contents are again filtered, this time for <code>&lt;br /&gt;</code> elements, and these elements are removed.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Find all the text nodes inside a paragraph and wrap them with a bold tag.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;contents demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Hello &lt;a href=\"http://ejohn.org/\"&gt;John&lt;/a&gt;, how are you doing?&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" )\n  .contents()\n  .filter(function(){\n    return this.nodeType !== 1;\n  })\n  .wrap( \"&lt;b&gt;&lt;/b&gt;\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Change the background color of links inside of an iframe.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;contents demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;iframe src=\"//api.jquery.com/\" width=\"80%\" height=\"600\" id=\"frameDemo\"&gt;&lt;/iframe&gt;\n \n&lt;script&gt;\n$( \"#frameDemo\" ).contents().find( \"a\" ).css( \"background-color\", \"#BADA55\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/contents\" class=\"_attribution-link\">https://api.jquery.com/contents</a>\n  </p>\n</div>\n","context":"<h1 class=\"entry-title\">.context</h1> <div class=\"entry-content\"> <article id=\"context1\" class=\"entry property\"><h2 class=\"section-title\"> <span>context</span><span class=\"returns\">Returns: <a href=\"types#Element\">Element</a></span><span class=\"version-details\">version deprecated: <a href=\"https://api.jquery.com/category/version/1.10/\">1.10</a>, removed: <a href=\"https://api.jquery.com/category/version/3.0/\">3.0</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>The DOM node context originally passed to <code>jQuery()</code>; if none was passed then context will likely be the document.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.3/\">1.3</a></span>context</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.context</code> property was deprecated in jQuery 1.10 and is only maintained to the extent needed for supporting <code>.live()</code> in the jQuery Migrate plugin. It may be removed without notice in a future version.</p> <p>The <code>.live()</code> method for binding event handlers uses this property to determine the root element to use for its event delegation needs.</p> <p>The value of this property is typically equal to <code>document</code>, as this is the default context for jQuery objects if none is supplied. The context may differ if, for example, the object was created by searching within an <code>&lt;iframe&gt;</code> or XML document.</p> <p>Note that the context property may only apply to the elements originally selected by <code>jQuery()</code>, as it is possible for the user to add elements to the collection via methods such as <code>.add()</code> and these may have a different context.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Determine the exact context used.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;context demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \nContext: &lt;ul&gt;&lt;/ul&gt;\n \n&lt;script&gt;\n$( \"ul\" )\n  .append( \"&lt;li&gt;\" + $( \"ul\" ).context + \"&lt;/li&gt;\" )\n  .append( \"&lt;li&gt;\" + $( \"ul\", document.body ).context.nodeName + \"&lt;/li&gt;\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/context\" class=\"_attribution-link\">https://api.jquery.com/context</a>\n  </p>\n</div>\n","contains-selector":"<h1 class=\"entry-title\">:contains() Selector</h1> <div class=\"entry-content\"> <article id=\"contains1\" class=\"entry selector\"><h2 class=\"section-title\"><span>contains selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Select all elements that contain the specified text.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.1.4/\">1.1.4</a></span>jQuery( \":contains(text)\" )</h4> <p class=\"argument\"><strong>text: </strong>A string of text to look for. It's case sensitive.</p> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The matching text can appear directly within the selected element, in any of that element's descendants, or a combination thereof. As with attribute value selectors, text inside the parentheses of <code>:contains()</code> can be written as a bare word or surrounded by quotation marks. The text must have matching case to be selected.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds all divs containing \"John\" and underlines them.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;contains demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;John Resig&lt;/div&gt;\n&lt;div&gt;George Martin&lt;/div&gt;\n&lt;div&gt;Malcom John Sinclair&lt;/div&gt;\n&lt;div&gt;J. Ohn&lt;/div&gt;\n \n&lt;script&gt;\n$( \"div:contains('John')\" ).css( \"text-decoration\", \"underline\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/contains-selector\" class=\"_attribution-link\">https://api.jquery.com/contains-selector</a>\n  </p>\n</div>\n","contextmenu":"<h1 class=\"entry-title\">.contextmenu()</h1> <div class=\"entry-content\"> <article id=\"contextmenu1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.contextmenu( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Bind an event handler to the \"contextmenu\" JavaScript event, or trigger that event on an element.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"contextmenu-handler\" href=\"#contextmenu-handler\">.contextmenu( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"contextmenu-eventData-handler\" href=\"#contextmenu-eventData-handler\">.contextmenu( [eventData ], handler )</a> </h4> <ul> <li> <div><strong>eventData</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>An object containing data that will be passed to the event handler.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"contextmenu\" href=\"#contextmenu\">.contextmenu()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method is a shortcut for <code>.on( \"contextmenu\", handler )</code> in the first two variations, and <code>.trigger( \"contextmenu\" )</code> in the third. The <code>contextmenu</code> event is sent to an element when the right button of the mouse is clicked on it, but before the context menu is displayed. In case the context menu key is pressed, the event is triggered on the <code>html</code> element. Any HTML element can receive this event. For example, consider the HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;div id=\"target\"&gt;\n  Right-click here\n&lt;/div&gt;</pre> <p>The event handler can be bound to the <code>&lt;div&gt;</code> as follows:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#target\" ).contextmenu(function() {\n  alert( \"Handler for .contextmenu() called.\" );\n});</pre> <p>Now right-clicking on this element displays the alert:</p> <p> <samp>Handler for .contextmenu() called.</samp> </p> <p>To trigger the event manually, call <code>.contextmenu()</code> without an argument:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#target\" ).contextmenu();</pre> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> As the <code>.contextmenu()</code> method is just a shorthand for <code>.on( \"contextmenu\", handler )</code>, detaching is possible using <code>.off( \"contextmenu\" )</code>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>To show a \"Hello World!\" alert box when the contextmenu event is triggered on a paragraph on the page:</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).contextmenu(function() {\n  alert( \"Hello World!\" );\n});</pre> </div> <div class=\"entry-example\" id=\"example-1\"> <p>Right click to toggle background color.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;contextmenu demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    background: blue;\n    color: white;\n    height: 100px;\n    width: 150px;\n }\n  div.contextmenu {\n    background: yellow;\n    color: black;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;&lt;/div&gt;\n&lt;span&gt;Right click the block&lt;/span&gt;\n \n&lt;script&gt;\nvar div = $( \"div:first\" );\ndiv.contextmenu(function() {\n  div.toggleClass( \"contextmenu\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/contextmenu\" class=\"_attribution-link\">https://api.jquery.com/contextmenu</a>\n  </p>\n</div>\n","deferred.always":"<h1 class=\"entry-title\">deferred.always()</h1> <div class=\"entry-content\"> <article id=\"deferred-always1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">deferred.always( alwaysCallbacks [, alwaysCallbacks ] )</span><span class=\"returns\">Returns: <a href=\"types#Deferred\">Deferred</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong> Add handlers to be called when the Deferred object is either resolved or rejected. </p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.6/\">1.6</a></span><a id=\"deferred-always-alwaysCallbacks-alwaysCallbacks\" href=\"#deferred-always-alwaysCallbacks-alwaysCallbacks\">deferred.always( alwaysCallbacks [, alwaysCallbacks ] )</a> </h4> <ul> <li> <div><strong>alwaysCallbacks</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div> A function, or array of functions, that is called when the Deferred is resolved or rejected. </div> </li> <li> <div><strong>alwaysCallbacks</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div> Optional additional functions, or arrays of functions, that are called when the Deferred is resolved or rejected. </div> </li> </ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The argument can be either a single function or an array of functions. When the Deferred is resolved or rejected, the <code>alwaysCallbacks</code> are called. Since <code>deferred.always()</code> returns the Deferred object, other methods of the Deferred object can be chained to this one, including additional <code>.always()</code> methods. When the Deferred is resolved or rejected, callbacks are executed in the order they were added, using the arguments provided to the <a href=\"deferred.resolve\"><code>resolve</code></a>, <a href=\"deferred.reject\"><code>reject</code></a>, <a href=\"deferred.resolvewith\"><code>resolveWith</code></a> or <a href=\"deferred.rejectwith\"><code>rejectWith</code></a> method calls. For more information, see the documentation for <a href=\"https://api.jquery.com/category/deferred-object/\">Deferred object</a>.</p> <p><strong>Note:</strong> The <code>deferred.always()</code> method receives the arguments that were used to <code>.resolve()</code> or <code>.reject()</code> the <code>Deferred</code> object, which are often very different. For this reason, it's best to use it only for actions that do not require inspecting the arguments. In all other cases, use explicit <a href=\"deferred.done\"><code>.done()</code></a> or <a href=\"deferred.fail\"><code>.fail()</code></a> handlers since the arguments will have well-known orders.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Since the <a href=\"jquery.get\"><code>jQuery.get()</code></a> method returns a <code>jqXHR</code> object, which is derived from a Deferred object, we can attach a callback for both success and error using the <code>deferred.always()</code> method.</p> <pre class=\"syntaxhighlighter javascript\">$.get( \"test.php\" ).always(function() {\n  alert( \"$.get completed with success or error callback arguments\" );\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/deferred.always\" class=\"_attribution-link\">https://api.jquery.com/deferred.always</a>\n  </p>\n</div>\n","data":"<h1 class=\"entry-title\">.data()</h1> <div class=\"entry-content\"> Store arbitrary data associated with the matched elements or return the value at the named data store for the first element in the set of matched elements.<div class=\"toc\"> <h4><span>Contents:</span></h4> <ul class=\"toc-list\"> <li> <a href=\"#data1\">.data( key, value )</a><ul> <li><a href=\"#data-key-value\">.data( key, value )</a></li> <li><a href=\"#data-obj\">.data( obj )</a></li> </ul> </li> <li> <a href=\"#data2\">.data( key )</a><ul> <li><a href=\"#data-key\">.data( key )</a></li> <li><a href=\"#data\">.data()</a></li> </ul> </li> </ul> </div>\n<article id=\"data1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.data( key, value )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Store arbitrary data associated with the matched elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2.3/\">1.2.3</a></span><a id=\"data-key-value\" href=\"#data-key-value\">.data( key, value )</a> </h4> <ul> <li> <div><strong>key</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string naming the piece of data to set.</div> </li> <li> <div><strong>value</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>The new data value; this can be any Javascript type except <code>undefined</code>.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"data-obj\" href=\"#data-obj\">.data( obj )</a> </h4> <ul><li> <div><strong>obj</strong></div> <div>Type: <a href=\"types#Object\">Object</a> </div> <div>An object of key-value pairs of data to update.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.data()</code> method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks.</p> <p>We can set several distinct values for a single element and retrieve them later:</p> <pre class=\"syntaxhighlighter javascript\">$( \"body\" ).data( \"foo\", 52 );\n$( \"body\" ).data( \"bar\", { myType: \"test\", count: 40 } );\n$( \"body\" ).data( { baz: [ 1, 2, 3 ] } );\n$( \"body\" ).data( \"foo\" ); // 52\n$( \"body\" ).data(); // { foo: 52, bar: { myType: \"test\", count: 40 }, baz: [ 1, 2, 3 ] }</pre> <p>In jQuery 1.4.3 setting an element's data object with <code>.data(obj)</code> extends the data previously stored with that element.</p> <p>Prior to jQuery 1.4.3 (starting in jQuery 1.4) the <code>.data()</code> method completely replaced all data, instead of just extending the data object. If you are using third-party plugins it may not be advisable to completely replace the element's data object, since plugins may have also set data.</p> <p><strong>jQuery 3</strong> changes the behavior of this method to align it to the <a href=\"http://www.w3.org/TR/html5/dom.html#dom-dataset\">Dataset API specifications</a>. Specifically, jQuery 3 transforms every two-character sequence of \"-\" (U+002D) followed by a lowercase ASCII letter by the uppercase version of the letter as per definition of <a href=\"http://www.w3.org/TR/html5/dom.html#dom-dataset\">the algorithm of the Dataset API</a>. Writing a statement like <code>$( \"body\" ).data( { \"my-name\": \"aValue\" } ).data();</code> will return <code>{ myName: \"aValue\" }</code>.</p> <p>Due to the way browsers interact with plugins and external code, the <code>.data()</code> method cannot be used on <code>&lt;object&gt;</code> (unless it's a Flash plugin), <code>&lt;applet&gt;</code> or <code>&lt;embed&gt;</code> elements.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> Note that this method currently does not provide cross-platform support for setting data on XML documents, as Internet Explorer does not allow data to be attached via expando properties. </li> <li> <code>undefined</code> is not recognized as a data value. Calls such as <code>.data( \"name\", undefined )</code> will return the jQuery object that it was called on, allowing for chaining. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Store then retrieve a value from the div element.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;data demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    color: blue;\n  }\n  span {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;\n  The values stored were\n  &lt;span&gt;&lt;/span&gt;\n  and\n  &lt;span&gt;&lt;/span&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\n$( \"div\" ).data( \"test\", { first: 16, last: \"pizza!\" } );\n$( \"span:first\" ).text( $( \"div\" ).data( \"test\" ).first );\n$( \"span:last\" ).text( $( \"div\" ).data( \"test\" ).last );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article><article id=\"data2\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.data( key )</span><span class=\"returns\">Returns: <a href=\"types#Object\">Object</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Return the value at the named data store for the first element in the jQuery collection, as set by data(name, value) or by an HTML5 data-* attribute.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2.3/\">1.2.3</a></span><a id=\"data-key\" href=\"#data-key\">.data( key )</a> </h4> <ul><li> <div><strong>key</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>Name of the data stored.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"data\" href=\"#data\">.data()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc-1\"> <p>The <code>.data()</code> method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks. We can retrieve several distinct values for a single element one at a time, or as a set:</p> <pre class=\"syntaxhighlighter javascript\">alert( $( \"body\" ).data( \"foo\" ) );\nalert( $( \"body\" ).data() );</pre> <p>The above lines alert the data values that were set on the <code>body</code> element. If no data at all was set on that element, <code>undefined</code> is returned.</p> <pre class=\"syntaxhighlighter javascript\">alert( $( \"body\" ).data( \"foo\" ) ); // undefined\n$( \"body\" ).data( \"bar\", \"foobar\" );\nalert( $( \"body\" ).data( \"bar\" ) ); // foobar</pre> <p><strong>jQuery 3</strong> changes the behavior of this method to align it to the <a href=\"http://www.w3.org/TR/html5/dom.html#dom-dataset\">Dataset API specifications</a>. Specifically, jQuery 3 transforms every two-character sequence of \"-\" (U+002D) followed by a lowercase ASCII letter by the uppercase version of the letter as per definition of [the algorithm of the Dataset API](http://www.w3.org/TR/html5/dom.html#dom-dataset). Writing a statement like <code>$( \"body\" ).data( { \"my-name\": \"aValue\" } ).data();</code> will return <code>{ myName: \"aValue\" }</code>.</p> <h4 id=\"data-html5\"> <a href=\"#data-html5\">HTML5 data-* Attributes</a> </h4> <p>As of jQuery 1.4.3 <a href=\"http://ejohn.org/blog/html-5-data-attributes/\">HTML 5 data- attributes</a> will be automatically pulled in to jQuery's data object. The treatment of attributes with embedded dashes was changed in jQuery 1.6 to conform to the <a href=\"http://www.w3.org/TR/html5/dom.html#embedding-custom-non-visible-data-with-the-data-*-attributes\">W3C HTML5 specification</a>.</p> <p>For example, given the following HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;div data-role=\"page\" data-last-value=\"43\" data-hidden=\"true\" data-options='{\"name\":\"John\"}'&gt;&lt;/div&gt;</pre> <p>All of the following jQuery code will work.</p> <pre class=\"syntaxhighlighter javascript\">$( \"div\" ).data( \"role\" ) === \"page\";\n$( \"div\" ).data( \"lastValue\" ) === 43;\n$( \"div\" ).data( \"hidden\" ) === true;\n$( \"div\" ).data( \"options\" ).name === \"John\";</pre> <p>The second statement of the code above correctly refers to the <code>data-last-value</code> attribute of the element. In case no data is stored with the passed key, jQuery searches among the attributes of the element, converting a camel-cased string into a dashed string and then prepending <code>data-</code> to the result. So, the string <code>lastValue</code> is converted to <code>data-last-value</code>.</p> <p>Every attempt is made to convert the string to a JavaScript value (this includes booleans, numbers, objects, arrays, and null). A value is only converted to a number if doing so doesn't change the value's representation. For example, \"1E02\" and \"100.000\" are equivalent as numbers (numeric value 100) but converting them would alter their representation so they are left as strings. The string value \"100\" is converted to the number 100.</p> <p>When the data attribute is an object (starts with '{') or array (starts with '[') then <code>jQuery.parseJSON</code> is used to parse the string; it must follow <a href=\"http://en.wikipedia.org/wiki/JSON#Data_types.2C_syntax_and_example\">valid JSON syntax</a> <em>including quoted property names</em>. If the value isn't parseable as a JavaScript value, it is left as a string.</p> <p>To retrieve the value's attribute as a string without any attempt to convert it, use the <code><a href=\"attr\">attr()</a></code> method.</p> <p>The data- attributes are pulled in the first time the data property is accessed and then are no longer accessed or mutated (all data values are then stored internally in jQuery).</p> <p>Calling <code>.data()</code> with no parameters retrieves all of the values as a JavaScript object. This object can be safely cached in a variable as long as a new object is not set with <code>.data(obj)</code>. Using the object directly to get or set values is faster than making individual calls to <code>.data()</code> to get or set each value:</p> <pre class=\"syntaxhighlighter javascript\">var mydata = $( \"#mydiv\" ).data();\nif ( mydata.count &lt; 9 ) {\n  mydata.count = 43;\n  mydata.status = \"embiggened\";\n}</pre> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> Note that this method currently does not provide cross-platform support for setting data on XML documents, as Internet Explorer does not allow data to be attached via expando properties. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples-1\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-1-0\"> <p>Get the data named \"blah\" stored at for an element.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;data demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    margin: 5px;\n    background: yellow;\n  }\n  button {\n    margin: 5px;\n    font-size: 14px;\n  }\n  p {\n    margin: 5px;\n    color: blue;\n  }\n  span {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;A div&lt;/div&gt;\n&lt;button&gt;Get \"blah\" from the div&lt;/button&gt;\n&lt;button&gt;Set \"blah\" to \"hello\"&lt;/button&gt;\n&lt;button&gt;Set \"blah\" to 86&lt;/button&gt;\n&lt;button&gt;Remove \"blah\" from the div&lt;/button&gt;\n&lt;p&gt;The \"blah\" value of this div is &lt;span&gt;?&lt;/span&gt;&lt;/p&gt;\n \n&lt;script&gt;\n$( \"button\" ).click(function() {\n  var value;\n \n  switch ( $( \"button\" ).index( this ) ) {\n    case 0 :\n      value = $( \"div\" ).data( \"blah\" );\n      break;\n    case 1 :\n      $( \"div\" ).data( \"blah\", \"hello\" );\n      value = \"Stored!\";\n      break;\n    case 2 :\n      $( \"div\" ).data( \"blah\", 86 );\n      value = \"Stored!\";\n      break;\n    case 3 :\n      $( \"div\" ).removeData( \"blah\" );\n      value = \"Removed!\";\n      break;\n  }\n \n  $( \"span\" ).text( \"\" + value );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/data\" class=\"_attribution-link\">https://api.jquery.com/data</a>\n  </p>\n</div>\n","deferred.reject":"<h1 class=\"entry-title\">deferred.reject()</h1> <div class=\"entry-content\"> <article id=\"deferred-reject1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">deferred.reject( [args ] )</span><span class=\"returns\">Returns: <a href=\"types#Deferred\">Deferred</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong> Reject a Deferred object and call any failCallbacks with the given <code>args</code>. </p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.5/\">1.5</a></span><a id=\"deferred-reject-args\" href=\"#deferred-reject-args\">deferred.reject( [args ] )</a> </h4> <ul><li> <div><strong>args</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div> Optional arguments that are passed to the failCallbacks. </div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state by returning a restricted Promise object through <a href=\"deferred.promise\"><code>deferred.promise()</code></a>.</p> <p>When the Deferred is rejected, any failCallbacks added by <a href=\"deferred.then\"><code>deferred.then()</code></a> or <a href=\"deferred.fail\"><code>deferred.fail()</code></a> are called. Callbacks are executed in the order they were added. Each callback is passed the <code>args</code> from the <code>deferred.reject()</code> call. Any failCallbacks added after the Deferred enters the rejected state are executed immediately when they are added, using the arguments that were passed to the <code>deferred.reject()</code> call. For more information, see the documentation for <a href=\"jquery.deferred\">jQuery.Deferred()</a>.</p> </div> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/deferred.reject\" class=\"_attribution-link\">https://api.jquery.com/deferred.reject</a>\n  </p>\n</div>\n","css":"<h1 class=\"entry-title\">.css()</h1> <div class=\"entry-content\"> Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element.<div class=\"toc\"> <h4><span>Contents:</span></h4> <ul class=\"toc-list\"> <li> <a href=\"#css1\">.css( propertyName )</a><ul> <li><a href=\"#css-propertyName\">.css( propertyName )</a></li> <li><a href=\"#css-propertyNames\">.css( propertyNames )</a></li> </ul> </li> <li> <a href=\"#css2\">.css( propertyName, value )</a><ul> <li><a href=\"#css-propertyName-value\">.css( propertyName, value )</a></li> <li><a href=\"#css-propertyName-function\">.css( propertyName, function )</a></li> <li><a href=\"#css-properties\">.css( properties )</a></li> </ul> </li> </ul> </div>\n<article id=\"css1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.css( propertyName )</span><span class=\"returns\">Returns: <a href=\"types#String\">String</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Get the computed style properties for the first element in the set of matched elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"css-propertyName\" href=\"#css-propertyName\">.css( propertyName )</a> </h4> <ul><li> <div><strong>propertyName</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A CSS property.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.9/\">1.9</a></span><a id=\"css-propertyNames\" href=\"#css-propertyNames\">.css( propertyNames )</a> </h4> <ul><li> <div><strong>propertyNames</strong></div> <div>Type: <a href=\"types#Array\">Array</a> </div> <div>An array of one or more CSS properties.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.css()</code> method is a convenient way to get a computed style property from the first matched element, especially in light of the different ways browsers access most of those properties (the <code>getComputedStyle()</code> method in standards-based browsers versus the <code>currentStyle</code> and <code>runtimeStyle</code> properties in Internet Explorer prior to version 9) and the different terms browsers use for certain properties. For example, Internet Explorer's DOM implementation refers to the <code>float</code> property as <code>styleFloat</code>, while W3C standards-compliant browsers refer to it as <code>cssFloat</code>. For consistency, you can simply use <code>\"float\"</code>, and jQuery will translate it to the correct value for each browser.</p> <p>Also, jQuery can equally interpret the CSS and DOM formatting of multiple-word properties. For example, jQuery understands and returns the correct value for both <code>.css( \"background-color\" )</code> and <code>.css( \"backgroundColor\" )</code>. This means mixed case has a special meaning, <code>.css( \"WiDtH\" )</code> won't do the same as <code>.css( \"width\" )</code>, for example.</p> <p>Note that the <em>computed style</em> of an element may not be the same as the value specified for that element in a style sheet. For example, computed styles of dimensions are almost always pixels, but they can be specified as em, ex, px or % in a style sheet. Different browsers may return CSS color values that are logically but not textually equal, e.g., #FFF, #ffffff, and rgb(255,255,255).</p> <p>Retrieval of shorthand CSS properties (e.g., <code>margin</code>, <code>background</code>, <code>border</code>), although functional with some browsers, is not guaranteed. For example, if you want to retrieve the rendered <code>border-width</code>, use: <code>$( elem ).css( \"borderTopWidth\" )</code>, <code>$( elem ).css( \"borderBottomWidth\" )</code>, and so on.</p> <p>An element should be connected to the DOM when calling <code>.css()</code> on it. If it isn't, jQuery may throw an error.</p> <p><strong>As of jQuery 1.9</strong>, passing an array of style properties to <code>.css()</code> will result in an object of property-value pairs. For example, to retrieve all four rendered <code>border-width</code> values, you could use <code>$( elem ).css([ \"borderTopWidth\", \"borderRightWidth\", \"borderBottomWidth\", \"borderLeftWidth\" ])</code>. </p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Get the background color of a clicked div.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;css demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    width: 60px;\n    height: 60px;\n    margin: 5px;\n    float: left;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;span id=\"result\"&gt;&amp;nbsp;&lt;/span&gt;\n&lt;div style=\"background-color:blue;\"&gt;&lt;/div&gt;\n&lt;div style=\"background-color:rgb(15,99,30);\"&gt;&lt;/div&gt;\n&lt;div style=\"background-color:#123456;\"&gt;&lt;/div&gt;\n&lt;div style=\"background-color:#f11;\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"div\" ).click(function() {\n  var color = $( this ).css( \"background-color\" );\n  $( \"#result\" ).html( \"That div is &lt;span style='color:\" +\n    color + \";'&gt;\" + color + \"&lt;/span&gt;.\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Get the width, height, text color, and background color of a clicked div.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;css demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    height: 50px;\n    margin: 5px;\n    padding: 5px;\n    float: left;\n  }\n  #box1 {\n    width: 50px;\n    color: yellow;\n    background-color: blue;\n  }\n  #box2 {\n    width: 80px;\n    color: rgb(255, 255, 255);\n    background-color: rgb(15, 99, 30);\n  }\n  #box3 {\n    width: 40px;\n    color: #fcc;\n    background-color: #123456;\n  }\n  #box4 {\n    width: 70px;\n    background-color: #f11;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p id=\"result\"&gt;&amp;nbsp;&lt;/p&gt;\n&lt;div id=\"box1\"&gt;1&lt;/div&gt;\n&lt;div id=\"box2\"&gt;2&lt;/div&gt;\n&lt;div id=\"box3\"&gt;3&lt;/div&gt;\n&lt;div id=\"box4\"&gt;4&lt;/div&gt;\n \n&lt;script&gt;\n$( \"div\" ).click(function() {\n  var html = [ \"The clicked div has the following styles:\" ];\n \n  var styleProps = $( this ).css([\n    \"width\", \"height\", \"color\", \"background-color\"\n  ]);\n  $.each( styleProps, function( prop, value ) {\n    html.push( prop + \": \" + value );\n  });\n \n  $( \"#result\" ).html( html.join( \"&lt;br&gt;\" ) );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article><article id=\"css2\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.css( propertyName, value )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Set one or more CSS properties for the set of matched elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"css-propertyName-value\" href=\"#css-propertyName-value\">.css( propertyName, value )</a> </h4> <ul> <li> <div><strong>propertyName</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A CSS property name.</div> </li> <li> <div><strong>value</strong></div> <div>Type: <a href=\"types#String\">String</a> or <a href=\"types#Number\">Number</a> </div> <div>A value to set for the property.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"css-propertyName-function\" href=\"#css-propertyName-function\">.css( propertyName, function )</a> </h4> <ul> <li> <div><strong>propertyName</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A CSS property name.</div> </li> <li> <div><strong>function</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Integer\">Integer</a> index, <a href=\"types#String\">String</a> value ) =&gt; <a href=\"types#String\">String</a> or <a href=\"types#Number\">Number</a> </div> <div>A function returning the value to set. <code>this</code> is the current element. Receives the index position of the element in the set and the old value as arguments.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"css-properties\" href=\"#css-properties\">.css( properties )</a> </h4> <ul><li> <div><strong>properties</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>An object of property-value pairs to set.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc-1\"> <p>As with the <code>.prop()</code> method, the <code>.css()</code> method makes setting properties of elements quick and easy. This method can take either a property name and value as separate parameters, or a single object of key-value pairs.</p> <p>Also, jQuery can equally interpret the CSS and DOM formatting of multiple-word properties. For example, jQuery understands and returns the correct value for both <code>.css({ \"background-color\": \"#ffe\", \"border-left\": \"5px solid #ccc\" })</code> and <code>.css({backgroundColor: \"#ffe\", borderLeft: \"5px solid #ccc\" })</code>. Notice that with the DOM notation, quotation marks around the property names are optional, but with CSS notation they're required due to the hyphen in the name.</p> <p>When a number is passed as the value, jQuery will convert it to a string and add <code>px</code> to the end of that string. If the property requires units other than <code>px</code>, convert the value to a string and add the appropriate units before calling the method.</p> <p>When using <code>.css()</code> as a setter, jQuery modifies the element's <code>style</code> property. For example, <code>$( \"#mydiv\" ).css( \"color\", \"green\" )</code> is equivalent to <code>document.getElementById( \"mydiv\" ).style.color = \"green\"</code>. Setting the value of a style property to an empty string — e.g. <code>$( \"#mydiv\" ).css( \"color\", \"\" )</code> — removes that property from an element if it has already been directly applied, whether in the HTML style attribute, through jQuery's <code>.css()</code> method, or through direct DOM manipulation of the <code>style</code> property. As a consequence, the element's style for that property will be restored to whatever value was applied. So, this method can be used to cancel any style modification you have previously performed. It does not, however, remove a style that has been applied with a CSS rule in a stylesheet or <code>&lt;style&gt;</code> element. <strong>Warning:</strong> one notable exception is that, for IE 8 and below, removing a shorthand property such as <code>border</code> or <code>background</code> will remove that style entirely from the element, regardless of what is set in a stylesheet or <code>&lt;style&gt;</code> element.</p> <p><strong>Note:</strong> <code>.css()</code> ignores <code>!important</code> declarations. So, the statement <code>$( \"p\" ).css( \"color\", \"red !important\" )</code> does not turn the color of all paragraphs in the page to red. It's strongly advised to use classes instead; otherwise use a jQuery plugin.</p> <p>As of jQuery 1.8, the <code>.css()</code> setter will automatically take care of prefixing the property name. For example, take <code>.css( \"user-select\", \"none\" )</code> in Chrome/Safari will set it as <code>-webkit-user-select</code>, Firefox will use <code>-moz-user-select</code>, and IE10 will use <code>-ms-user-select</code>.</p> <p>As of jQuery 1.6, <code>.css()</code> accepts relative values similar to <code>.animate()</code>. Relative values are a string starting with <code>+=</code> or <code>-=</code> to increment or decrement the current value. For example, if an element's padding-left was 10px, <code>.css( \"padding-left\", \"+=15\" )</code> would result in a total padding-left of 25px.</p> <p>As of jQuery 1.4, <code>.css()</code> allows us to pass a function as the property value:</p> <pre class=\"syntaxhighlighter javascript\">$( \"div.example\" ).css( \"width\", function( index ) {\n  return index * 50;\n});</pre> <p>This example sets the widths of the matched elements to incrementally larger values.</p> <p><strong>Note: </strong>If nothing is returned in the setter function (ie. <code>function( index, style ){} )</code>, or if <code>undefined</code> is returned, the current value is not changed. This is useful for selectively setting values only when certain criteria are met.</p> </div> <section class=\"entry-examples\" id=\"entry-examples-1\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-1-0\"> <p>Change the color of any paragraph to red on mouseover event.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;css demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    color: blue;\n    width: 200px;\n    font-size: 14px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n  &lt;p&gt;Just roll the mouse over me.&lt;/p&gt;\n \n  &lt;p&gt;Or me to see a color change.&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).on( \"mouseover\", function() {\n  $( this ).css( \"color\", \"red\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1-1\"> <p>Increase the width of #box by 200 pixels the first time it is clicked.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;css demo&lt;/title&gt;\n  &lt;style&gt;\n  #box {\n    background: black;\n    color: snow;\n    width: 100px;\n    padding: 10px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div id=\"box\"&gt;Click me to grow&lt;/div&gt;\n \n&lt;script&gt;\n$( \"#box\" ).one( \"click\", function() {\n  $( this ).css( \"width\", \"+=200\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1-2\"> <p>Highlight a clicked word in the paragraph.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;css demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    color: blue;\n    font-weight: bold;\n    cursor: pointer;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;\n  Once upon a time there was a man\n  who lived in a pizza parlor. This\n  man just loved pizza and ate it all\n  the time.  He went on to be the\n  happiest man in the world.  The end.\n&lt;/p&gt;\n \n&lt;script&gt;\nvar words = $( \"p\" ).first().text().split( /\\s+/ );\nvar text = words.join( \"&lt;/span&gt; &lt;span&gt;\" );\n$( \"p\" ).first().html( \"&lt;span&gt;\" + text + \"&lt;/span&gt;\" );\n$( \"span\" ).on( \"click\", function() {\n  $( this ).css( \"background-color\", \"yellow\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1-3\"> <p>Change the font weight and background color on mouseenter and mouseleave.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;css demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    color: green;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Move the mouse over a paragraph.&lt;/p&gt;\n&lt;p&gt;Like this one or the one above.&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" )\n  .on( \"mouseenter\", function() {\n    $( this ).css({\n      \"background-color\": \"yellow\",\n      \"font-weight\": \"bolder\"\n    });\n  })\n  .on( \"mouseleave\", function() {\n    var styles = {\n      backgroundColor : \"#ddd\",\n      fontWeight: \"\"\n    };\n    $( this ).css( styles );\n  });\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1-4\"> <p>Increase the size of a div when you click it.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;css demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    width: 20px;\n    height: 15px;\n    background-color: #f33;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;click&lt;/div&gt;\n&lt;div&gt;click&lt;/div&gt;\n \n&lt;script&gt;\n$( \"div\" ).on( \"click\", function() {\n  $( this ).css({\n    width: function( index, value ) {\n      return parseFloat( value ) * 1.2;\n    },\n    height: function( index, value ) {\n      return parseFloat( value ) * 1.2;\n    }\n  });\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/css\" class=\"_attribution-link\">https://api.jquery.com/css</a>\n  </p>\n</div>\n","deferred.done":"<h1 class=\"entry-title\">deferred.done()</h1> <div class=\"entry-content\"> <article id=\"deferred-done1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">deferred.done( doneCallbacks [, doneCallbacks ] )</span><span class=\"returns\">Returns: <a href=\"types#Deferred\">Deferred</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong> Add handlers to be called when the Deferred object is resolved. </p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.5/\">1.5</a></span><a id=\"deferred-done-doneCallbacks-doneCallbacks\" href=\"#deferred-done-doneCallbacks-doneCallbacks\">deferred.done( doneCallbacks [, doneCallbacks ] )</a> </h4> <ul> <li> <div><strong>doneCallbacks</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div> A function, or array of functions, that are called when the Deferred is resolved. </div> </li> <li> <div><strong>doneCallbacks</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div> Optional additional functions, or arrays of functions, that are called when the Deferred is resolved. </div> </li> </ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>deferred.done()</code> method accepts one or more arguments, all of which can be either a single function or an array of functions. When the Deferred is resolved, the doneCallbacks are called. Callbacks are executed in the order they were added. Since <code>deferred.done()</code> returns the deferred object, other methods of the deferred object can be chained to this one, including additional <code>.done()</code> methods. When the Deferred is resolved, doneCallbacks are executed using the arguments provided to the <a href=\"deferred.resolve\"><code>resolve</code></a> or <a href=\"deferred.resolvewith\"><code>resolveWith</code></a> method call in the order they were added. For more information, see the documentation for <a href=\"https://api.jquery.com/category/deferred-object/\">Deferred object</a>.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Since the <a href=\"jquery.get\"><code>jQuery.get</code></a> method returns a jqXHR object, which is derived from a Deferred object, we can attach a success callback using the <code>.done()</code> method.</p> <pre class=\"syntaxhighlighter javascript\">$.get( \"test.php\" ).done(function() {\n  alert( \"$.get succeeded\" );\n});</pre> </div> <div class=\"entry-example\" id=\"example-1\"> <p>Resolve a Deferred object when the user clicks a button, triggering a number of callback functions:</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;deferred.done demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button&gt;Go&lt;/button&gt;\n&lt;p&gt;Ready...&lt;/p&gt;\n \n&lt;script&gt;\n// 3 functions to call when the Deferred object is resolved\nfunction fn1() {\n  $( \"p\" ).append( \" 1 \" );\n}\nfunction fn2() {\n  $( \"p\" ).append( \" 2 \" );\n}\nfunction fn3( n ) {\n  $( \"p\" ).append( n + \" 3 \" + n );\n}\n \n// Create a deferred object\nvar dfd = $.Deferred();\n \n// Add handlers to be called when dfd is resolved\ndfd\n// .done() can take any number of functions or arrays of functions\n  .done( [ fn1, fn2 ], fn3, [ fn2, fn1 ] )\n// We can chain done methods, too\n  .done(function( n ) {\n    $( \"p\" ).append( n + \" we're done.\" );\n  });\n \n// Resolve the Deferred object when the button is clicked\n$( \"button\" ).on( \"click\", function() {\n  dfd.resolve( \"and\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/deferred.done\" class=\"_attribution-link\">https://api.jquery.com/deferred.done</a>\n  </p>\n</div>\n","dblclick":"<h1 class=\"entry-title\">.dblclick()</h1> <div class=\"entry-content\"> <article id=\"dblclick1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.dblclick( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Bind an event handler to the \"dblclick\" JavaScript event, or trigger that event on an element.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"dblclick-handler\" href=\"#dblclick-handler\">.dblclick( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"dblclick-eventData-handler\" href=\"#dblclick-eventData-handler\">.dblclick( [eventData ], handler )</a> </h4> <ul> <li> <div><strong>eventData</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>An object containing data that will be passed to the event handler.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"dblclick\" href=\"#dblclick\">.dblclick()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method is a shortcut for <code>.on( \"dblclick\", handler )</code> in the first two variations, and <code>.trigger( \"dblclick\" )</code> in the third. The <code>dblclick</code> event is sent to an element when the element is double-clicked. Any HTML element can receive this event. For example, consider the HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;div id=\"target\"&gt;\n  Double-click here\n&lt;/div&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;/div&gt;</pre> <figure> <img src=\"https://api.jquery.com/resources/0042_05_04.png\" alt=\"\"> <figcaption>Figure 1 - Illustration of the rendered HTML</figcaption> </figure> <p>The event handler can be bound to any <code>&lt;div&gt;</code>:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#target\" ).dblclick(function() {\n  alert( \"Handler for .dblclick() called.\" );\n});</pre> <p>Now double-clicking on this element displays the alert:</p> <p> <samp>Handler for .dblclick() called.</samp> </p> <p>To trigger the event manually, call <code>.dblclick()</code> without an argument:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#other\" ).click(function() {\n  $( \"#target\" ).dblclick();\n});</pre> <p>After this code executes, (single) clicks on <samp>Trigger the handler</samp> will also alert the message.</p> <p>The <code>dblclick</code> event is only triggered after this exact series of events:</p> <ul> <li>The mouse button is depressed while the pointer is inside the element.</li> <li>The mouse button is released while the pointer is inside the element.</li> <li>The mouse button is depressed again while the pointer is inside the element, within a time window that is system-dependent.</li> <li>The mouse button is released while the pointer is inside the element.</li> </ul> <p>It is inadvisable to bind handlers to both the <code>click</code> and <code>dblclick</code> events for the same element. The sequence of events triggered varies from browser to browser, with some receiving two <code>click</code> events before the <code>dblclick</code> and others only one. Double-click sensitivity (maximum time between clicks that is detected as a double click) can vary by operating system and browser, and is often user-configurable. </p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> As the <code>.dblclick()</code> method is just a shorthand for <code>.on( \"dblclick\", handler )</code>, detaching is possible using <code>.off( \"dblclick\" )</code>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>To bind a \"Hello World!\" alert box to the dblclick event on every paragraph on the page:</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).dblclick(function() {\n  alert( \"Hello World!\" );\n});</pre> </div> <div class=\"entry-example\" id=\"example-1\"> <p>Double click to toggle background color.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;dblclick demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    background: blue;\n    color: white;\n    height: 100px;\n    width: 150px;\n }\n  div.dbl {\n    background: yellow;\n    color: black;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;&lt;/div&gt;\n&lt;span&gt;Double click the block&lt;/span&gt;\n \n&lt;script&gt;\nvar divdbl = $( \"div:first\" );\ndivdbl.dblclick(function() {\n  divdbl.toggleClass( \"dbl\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/dblclick\" class=\"_attribution-link\">https://api.jquery.com/dblclick</a>\n  </p>\n</div>\n","deferred.notify":"<h1 class=\"entry-title\">deferred.notify()</h1> <div class=\"entry-content\"> <article id=\"deferred-notify1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">deferred.notify( args )</span><span class=\"returns\">Returns: <a href=\"types#Deferred\">Deferred</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong> Call the progressCallbacks on a Deferred object with the given <code>args</code>. </p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a></span><a id=\"deferred-notify-args\" href=\"#deferred-notify-args\">deferred.notify( args )</a> </h4> <ul><li> <div><strong>args</strong></div> <div>Type: <a href=\"types#Object\">Object</a> </div> <div> Optional arguments that are passed to the progressCallbacks. </div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state or reporting status by returning a restricted Promise object through deferred.promise().</p> <p>When <code>deferred.notify</code> is called, any progressCallbacks added by <a href=\"deferred.then\"><code>deferred.then</code></a> or <a href=\"deferred.progress\"><code>deferred.progress</code></a> are called. Callbacks are executed in the order they were added. Each callback is passed the <code>args</code> from the <code>.notify()</code>. Any calls to <code>.notify()</code> after a Deferred is resolved or rejected (or any progressCallbacks added after that) are ignored. For more information, see the documentation for <a href=\"https://api.jquery.com/category/deferred-object/\">Deferred object</a>.</p> </div> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/deferred.notify\" class=\"_attribution-link\">https://api.jquery.com/deferred.notify</a>\n  </p>\n</div>\n","deferred.isrejected":"<h1 class=\"entry-title\">deferred.isRejected()</h1> <div class=\"entry-content\"> <article id=\"deferred-isRejected1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">deferred.isRejected()</span><span class=\"returns\">Returns: <a href=\"types#Boolean\">Boolean</a></span><span class=\"version-details\">version deprecated: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a>, removed: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong> Determine whether a Deferred object has been rejected. </p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.5/\">1.5</a></span><a id=\"deferred-isRejected\" href=\"#deferred-isRejected\">deferred.isRejected()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>As of jQuery 1.7 this API has been deprecated; please use <a href=\"deferred.state\"><code>deferred.state()</code></a> instead.</p> <p>Returns <code>true</code> if the Deferred object is in the rejected state, meaning that either <a href=\"https://api.jquery.com/h/deferred.reject/\"><code>deferred.reject()</code></a> or <a href=\"deferred.rejectwith\"><code>deferred.rejectWith()</code></a> has been called for the object and the failCallbacks have been called (or are in the process of being called).</p> <p>Note that a Deferred object can be in one of three states: pending, resolved, or rejected; use <a href=\"deferred.isresolved\"><code>deferred.isResolved()</code></a> to determine whether the Deferred object is in the resolved state. These methods are primarily useful for debugging, for example to determine whether a Deferred has already been resolved even though you are inside code that intended to reject it.</p> </div> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/deferred.isRejected\" class=\"_attribution-link\">https://api.jquery.com/deferred.isRejected</a>\n  </p>\n</div>\n","deferred.isresolved":"<h1 class=\"entry-title\">deferred.isResolved()</h1> <div class=\"entry-content\"> <article id=\"deferred-isResolved1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">deferred.isResolved()</span><span class=\"returns\">Returns: <a href=\"types#Boolean\">Boolean</a></span><span class=\"version-details\">version deprecated: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a>, removed: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong> Determine whether a Deferred object has been resolved. </p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.5/\">1.5</a></span><a id=\"deferred-isResolved\" href=\"#deferred-isResolved\">deferred.isResolved()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This API is <code>deprecated</code> as of jQuery 1.7 and <code>removed</code> as of jQuery 1.8; please use <a href=\"deferred.state\"><code>deferred.state()</code></a> instead.</p> <p>Returns <code>true</code> if the Deferred object is in the resolved state, meaning that either <a href=\"deferred.resolve\"><code>deferred.resolve()</code></a> or <a href=\"deferred.resolvewith\"><code>deferred.resolveWith()</code></a> has been called for the object and the doneCallbacks have been called (or are in the process of being called).</p> <p>Note that a Deferred object can be in one of three states: pending, resolved, or rejected; use <a href=\"deferred.isrejected\"><code>deferred.isRejected()</code></a> to determine whether the Deferred object is in the rejected state. These methods are primarily useful for debugging, for example to determine whether a Deferred has already been resolved even though you are inside code that intended to reject it.</p> </div> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/deferred.isResolved\" class=\"_attribution-link\">https://api.jquery.com/deferred.isResolved</a>\n  </p>\n</div>\n","deferred.notifywith":"<h1 class=\"entry-title\">deferred.notifyWith()</h1> <div class=\"entry-content\"> <article id=\"deferred-notifyWith1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">deferred.notifyWith( context [, args ] )</span><span class=\"returns\">Returns: <a href=\"types#Deferred\">Deferred</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong> Call the progressCallbacks on a Deferred object with the given context and <code>args</code>. </p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a></span><a id=\"deferred-notifyWith-context-args\" href=\"#deferred-notifyWith-context-args\">deferred.notifyWith( context [, args ] )</a> </h4> <ul> <li> <div><strong>context</strong></div> <div>Type: <a href=\"types#Object\">Object</a> </div> <div> Context passed to the progressCallbacks as the <code>this</code> object. </div> </li> <li> <div><strong>args</strong></div> <div>Type: <a href=\"types#Array\">Array</a> </div> <div> An optional array of arguments that are passed to the progressCallbacks. </div> </li> </ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state or reporting status by returning a restricted Promise object through deferred.promise().</p> <p>When <code>deferred.notifyWith</code> is called, any progressCallbacks added by <a href=\"deferred.then\"><code>deferred.then</code></a> or <a href=\"deferred.progress\"><code>deferred.progress</code></a> are called. Callbacks are executed in the order they were added. Each callback is passed the <code>args</code> from the <code>.notifyWith()</code>. Any calls to <code>.notifyWith()</code> after a Deferred is resolved or rejected (or any progressCallbacks added after that) are ignored. For more information, see the documentation for <a href=\"https://api.jquery.com/category/deferred-object/\">Deferred object</a>.</p> </div> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/deferred.notifyWith\" class=\"_attribution-link\">https://api.jquery.com/deferred.notifyWith</a>\n  </p>\n</div>\n","deferred.pipe":"<h1 class=\"entry-title\">deferred.pipe()</h1> <div class=\"entry-content\"> <article id=\"deferred-pipe1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">deferred.pipe( [doneFilter ] [, failFilter ] )</span><span class=\"returns\">Returns: <a href=\"types#Promise\">Promise</a></span><span class=\"version-details\">version deprecated: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong> Utility method to filter and/or chain Deferreds. </p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.6/\">1.6</a></span><a id=\"deferred-pipe-doneFilter-failFilter\" href=\"#deferred-pipe-doneFilter-failFilter\">deferred.pipe( [doneFilter ] [, failFilter ] )</a> </h4> <ul> <li> <div><strong>doneFilter</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div> An optional function that is called when the Deferred is resolved. </div> </li> <li> <div><strong>failFilter</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div> An optional function that is called when the Deferred is rejected. </div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a></span><a id=\"deferred-pipe-doneFilter-failFilter-progressFilter\" href=\"#deferred-pipe-doneFilter-failFilter-progressFilter\">deferred.pipe( [doneFilter ] [, failFilter ] [, progressFilter ] )</a> </h4> <ul> <li> <div><strong>doneFilter</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div> An optional function that is called when the Deferred is resolved. </div> </li> <li> <div><strong>failFilter</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div> An optional function that is called when the Deferred is rejected. </div> </li> <li> <div><strong>progressFilter</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div> An optional function that is called when progress notifications are sent to the Deferred. </div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p><strong>Deprecation Notice:</strong>As of jQuery 1.8, the deferred.pipe() method is deprecated. The <code>deferred.then()</code> method, which replaces it, should be used instead.</p> <p>The <code>deferred.pipe()</code> method returns a new promise that filters the status and values of a deferred through a function. The <code>doneFilter</code> and <code>failFilter</code> functions filter the original deferred's resolved / rejected status and values. <strong>As of jQuery 1.7</strong>, the method also accepts a <code>progressFilter</code> function to filter any calls to the original deferred's <code>notify</code> or <code>notifyWith</code> methods. These filter functions can return a new value to be passed along to the piped promise's <code>done()</code> or <code>fail()</code> callbacks, or they can return another observable object (Deferred, Promise, etc) which will pass its resolved / rejected status and values to the piped promise's callbacks. If the filter function used is <code>null</code>, or not specified, the piped promise will be resolved or rejected with the same values as the original.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Filter resolve value:</p> <pre class=\"syntaxhighlighter javascript\">var defer = $.Deferred(),\n  filtered = defer.pipe(function( value ) {\n    return value * 2;\n  });\n \ndefer.resolve( 5 );\nfiltered.done(function( value ) {\n  alert( \"Value is ( 2*5 = ) 10: \" + value );\n});</pre> </div> <div class=\"entry-example\" id=\"example-1\"> <p>Filter reject value:</p> <pre class=\"syntaxhighlighter javascript\">var defer = $.Deferred(),\n  filtered = defer.pipe( null, function( value ) {\n    return value * 3;\n  });\n \ndefer.reject( 6 );\nfiltered.fail(function( value ) {\n  alert( \"Value is ( 3*6 = ) 18: \" + value );\n});</pre> </div> <div class=\"entry-example\" id=\"example-2\"> <p>Chain tasks:</p> <pre class=\"syntaxhighlighter javascript\">var request = $.ajax( url, { dataType: \"json\" } ),\n  chained = request.pipe(function( data ) {\n    return $.ajax( url2, { data: { user: data.userId } } );\n  });\n \nchained.done(function( data ) {\n  // data retrieved from url2 as provided by the first request\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/deferred.pipe\" class=\"_attribution-link\">https://api.jquery.com/deferred.pipe</a>\n  </p>\n</div>\n","deferred.progress":"<h1 class=\"entry-title\">deferred.progress()</h1> <div class=\"entry-content\"> <article id=\"deferred-progress1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">deferred.progress( progressCallbacks [, progressCallbacks ] )</span><span class=\"returns\">Returns: <a href=\"types#Deferred\">Deferred</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong> Add handlers to be called when the Deferred object generates progress notifications.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a></span><a id=\"deferred-progress-progressCallbacks-progressCallbacks\" href=\"#deferred-progress-progressCallbacks-progressCallbacks\">deferred.progress( progressCallbacks [, progressCallbacks ] )</a> </h4> <ul> <li> <div><strong>progressCallbacks</strong></div> <div>Type: <a href=\"types#Function\">Function</a>() or <a href=\"types#Array\">Array</a> </div> <div> A function, or array of functions, to be called when the Deferred generates progress notifications. </div> </li> <li> <div><strong>progressCallbacks</strong></div> <div>Type: <a href=\"types#Function\">Function</a>() or <a href=\"types#Array\">Array</a> </div> <div> Optional additional functions, or arrays of functions, to be called when the Deferred generates progress notifications. </div> </li> </ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>deferred.progress()</code> method accepts one or more arguments, all of which can be either a single function or an array of functions. When the Deferred generates progress notifications by calling <code>notify</code> or <code>notifyWith</code>, the <code>progressCallbacks</code> are called. Since <code>deferred.progress()</code> returns the Deferred object, other methods of the Deferred object can be chained to this one. When the Deferred is resolved or rejected, progress callbacks will no longer be called, with the exception that any <code>progressCallbacks</code> added after the Deferred enters the resolved or rejected state are executed immediately when they are added, using the arguments that were passed to the <code>.notify()</code> or <code>notifyWith()</code> call. For more information, see the documentation for <a href=\"jquery.deferred\">jQuery.Deferred()</a>.</p> </div> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/deferred.progress\" class=\"_attribution-link\">https://api.jquery.com/deferred.progress</a>\n  </p>\n</div>\n","detach":"<h1 class=\"entry-title\">.detach()</h1> <div class=\"entry-content\"> <article id=\"detach1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.detach( [selector ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Remove the set of matched elements from the DOM.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"detach-selector\" href=\"#detach-selector\">.detach( [selector ] )</a> </h4> <ul><li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> </div> <div>A selector expression that filters the set of matched elements to be removed.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.detach()</code> method is the same as <code><a href=\"remove\">.remove()</a></code>, except that <code>.detach()</code> keeps all jQuery data associated with the removed elements. This method is useful when removed elements are to be reinserted into the DOM at a later time.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Detach all paragraphs from the DOM</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;detach demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    background: yellow;\n    margin: 6px 0;\n  }\n  p.off {\n    background: black;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Hello&lt;/p&gt;\nhow are\n&lt;p&gt;you?&lt;/p&gt;\n&lt;button&gt;Attach/detach paragraphs&lt;/button&gt;\n \n&lt;script&gt;\n$( \"p\" ).click(function() {\n  $( this ).toggleClass( \"off\" );\n});\nvar p;\n$( \"button\" ).click(function() {\n  if ( p ) {\n    p.appendTo( \"body\" );\n    p = null;\n  } else {\n    p = $( \"p\" ).detach();\n  }\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/detach\" class=\"_attribution-link\">https://api.jquery.com/detach</a>\n  </p>\n</div>\n","delay":"<h1 class=\"entry-title\">.delay()</h1> <div class=\"entry-content\"> <article id=\"delay1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.delay( duration [, queueName ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Set a timer to delay execution of subsequent items in the queue.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"delay-duration-queueName\" href=\"#delay-duration-queueName\">.delay( duration [, queueName ] )</a> </h4> <ul> <li> <div><strong>duration</strong></div> <div>Type: <a href=\"types#Integer\">Integer</a> </div> <div>An integer indicating the number of milliseconds to delay execution of the next item in the queue.</div> </li> <li> <div><strong>queueName</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue.</div> </li> </ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Added to jQuery in version 1.4, the <code>.delay()</code> method allows us to delay the execution of functions that follow it in the queue. It can be used with the standard effects queue or with a custom queue. Only subsequent events in a queue are delayed; for example this will <em>not</em> delay the no-arguments forms of <code>.show()</code> or <code>.hide()</code> which do not use the effects queue.</p> <p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of 200 and 600 milliseconds, respectively.</p> <p>Using the standard effects queue, we can, for example, set an 800-millisecond delay between the <code>.slideUp()</code> and <code>.fadeIn()</code> of <code>&lt;div id=\"foo\"&gt;</code>:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#foo\" ).slideUp( 300 ).delay( 800 ).fadeIn( 400 );</pre> <p>When this statement is executed, the element slides up for 300 milliseconds and then pauses for 800 milliseconds before fading in for 400 milliseconds.</p> <div class=\"warning\"> <p> <strong>The <code>.delay()</code> method is best for delaying between queued jQuery effects. Because it is limited—it doesn't, for example, offer a way to cancel the delay—<code>.delay()</code> is not a replacement for JavaScript's native <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers.setTimeout\">setTimeout</a> function, which may be more appropriate for certain use cases.</strong> </p> </div> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Animate the hiding and showing of two divs, delaying the first before showing it.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;delay demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    position: absolute;\n    width: 60px;\n    height: 60px;\n    float: left;\n  }\n  .first {\n    background-color: #3f3;\n    left: 0;\n  }\n  .second {\n    background-color: #33f;\n    left: 80px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;&lt;button&gt;Run&lt;/button&gt;&lt;/p&gt;\n&lt;div class=\"first\"&gt;&lt;/div&gt;\n&lt;div class=\"second\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"button\" ).click(function() {\n  $( \"div.first\" ).slideUp( 300 ).delay( 800 ).fadeIn( 400 );\n  $( \"div.second\" ).slideUp( 300 ).fadeIn( 400 );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/delay\" class=\"_attribution-link\">https://api.jquery.com/delay</a>\n  </p>\n</div>\n","deferred.promise":"<h1 class=\"entry-title\">deferred.promise()</h1> <div class=\"entry-content\"> <article id=\"deferred-promise1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">deferred.promise( [target ] )</span><span class=\"returns\">Returns: <a href=\"types#Promise\">Promise</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong> Return a Deferred's Promise object. </p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.5/\">1.5</a></span><a id=\"deferred-promise-target\" href=\"#deferred-promise-target\">deferred.promise( [target ] )</a> </h4> <ul><li> <div><strong>target</strong></div> <div>Type: <a href=\"types#Object\">Object</a> </div> <div>Object onto which the promise methods have to be attached</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>deferred.promise()</code> method allows an asynchronous function to prevent other code from interfering with the progress or status of its internal request. The Promise exposes only the Deferred methods needed to attach additional handlers or determine the state (<code>then</code>, <code>done</code>, <code>fail</code>, <code>always</code>, <code>pipe</code>, <code>progress</code>, <code>state</code> and <code>promise</code>), but not ones that change the state (<code>resolve</code>, <code>reject</code>, <code>notify</code>, <code>resolveWith</code>, <code>rejectWith</code>, and <code>notifyWith</code>).</p> <p>If <code>target</code> is provided, <code>deferred.promise()</code> will attach the methods onto it and then return this object rather than create a new one. This can be useful to attach the Promise behavior to an object that already exists.</p> <p>If you are creating a Deferred, keep a reference to the Deferred so that it can be resolved or rejected at some point. Return <em>only</em> the Promise object via <code>deferred.promise()</code> so other code can register callbacks or inspect the current state.</p> <p>For more information, see the documentation for <a href=\"https://api.jquery.com/category/deferred-object/\">Deferred object</a>.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Create a Deferred and set two timer-based functions to either resolve or reject the Deferred after a random interval. Whichever one fires first \"wins\" and will call one of the callbacks. The second timeout has no effect since the Deferred is already complete (in a resolved or rejected state) from the first timeout action. Also set a timer-based progress notification function, and call a progress handler that adds \"working...\" to the document body.</p> <pre class=\"syntaxhighlighter javascript\">function asyncEvent() {\n  var dfd = jQuery.Deferred();\n \n  // Resolve after a random interval\n  setTimeout(function() {\n    dfd.resolve( \"hurray\" );\n  }, Math.floor( 400 + Math.random() * 2000 ) );\n \n  // Reject after a random interval\n  setTimeout(function() {\n    dfd.reject( \"sorry\" );\n  }, Math.floor( 400 + Math.random() * 2000 ) );\n \n  // Show a \"working...\" message every half-second\n  setTimeout(function working() {\n    if ( dfd.state() === \"pending\" ) {\n      dfd.notify( \"working... \" );\n      setTimeout( working, 500 );\n    }\n  }, 1 );\n \n  // Return the Promise so caller can't change the Deferred\n  return dfd.promise();\n}\n \n// Attach a done, fail, and progress handler for the asyncEvent\n$.when( asyncEvent() ).then(\n  function( status ) {\n    alert( status + \", things are going well\" );\n  },\n  function( status ) {\n    alert( status + \", you fail this time\" );\n  },\n  function( status ) {\n    $( \"body\" ).append( status );\n  }\n);</pre> </div> <div class=\"entry-example\" id=\"example-1\"> <p>Use the target argument to promote an existing object to a Promise:</p> <pre class=\"syntaxhighlighter javascript\">// Existing object\nvar obj = {\n    hello: function( name ) {\n      alert( \"Hello \" + name );\n    }\n  },\n  // Create a Deferred\n  defer = $.Deferred();\n \n// Set object as a promise\ndefer.promise( obj );\n \n// Resolve the deferred\ndefer.resolve( \"John\" );\n \n// Use the object as a Promise\nobj.done(function( name ) {\n  obj.hello( name ); // Will alert \"Hello John\"\n}).hello( \"Karl\" ); // Will alert \"Hello Karl\"</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/deferred.promise\" class=\"_attribution-link\">https://api.jquery.com/deferred.promise</a>\n  </p>\n</div>\n","empty":"<h1 class=\"entry-title\">.empty()</h1> <div class=\"entry-content\"> <article id=\"empty1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.empty()</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Remove all child nodes of the set of matched elements from the DOM.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"empty\" href=\"#empty\">.empty()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method removes not only child (and other descendant) elements, but also any text within the set of matched elements. This is because, according to the DOM specification, any string of text within an element is considered a child node of that element. Consider the following HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;div class=\"hello\"&gt;Hello&lt;/div&gt;\n  &lt;div class=\"goodbye\"&gt;Goodbye&lt;/div&gt;\n&lt;/div&gt;</pre> <p>We can target any element for removal:</p> <pre class=\"syntaxhighlighter javascript\">$( \".hello\" ).empty();</pre> <p>This will result in a DOM structure with the <code>Hello</code> text deleted:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;div class=\"hello\"&gt;&lt;/div&gt;\n  &lt;div class=\"goodbye\"&gt;Goodbye&lt;/div&gt;\n&lt;/div&gt;</pre> <p>If we had any number of nested elements inside <code>&lt;div class=\"hello\"&gt;</code>, they would be removed, too.</p> <p>To avoid memory leaks, jQuery removes other constructs such as data and event handlers from the child elements before removing the elements themselves.</p> <p>If you want to remove elements without destroying their data or event handlers (so they can be re-added later), use <a href=\"detach\"><code>.detach()</code></a> instead.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Removes all child nodes (including text nodes) from all paragraphs</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;empty demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;\n  Hello, &lt;span&gt;Person&lt;/span&gt; &lt;em&gt;and person&lt;/em&gt;.\n&lt;/p&gt;\n \n&lt;button&gt;Call empty() on above paragraph&lt;/button&gt;\n \n&lt;script&gt;\n$( \"button\" ).click(function() {\n  $( \"p\" ).empty();\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/empty\" class=\"_attribution-link\">https://api.jquery.com/empty</a>\n  </p>\n</div>\n","deferred.rejectwith":"<h1 class=\"entry-title\">deferred.rejectWith()</h1> <div class=\"entry-content\"> <article id=\"deferred-rejectWith1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">deferred.rejectWith( context [, args ] )</span><span class=\"returns\">Returns: <a href=\"types#Deferred\">Deferred</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong> Reject a Deferred object and call any failCallbacks with the given <code>context</code> and <code>args</code>. </p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.5/\">1.5</a></span><a id=\"deferred-rejectWith-context-args\" href=\"#deferred-rejectWith-context-args\">deferred.rejectWith( context [, args ] )</a> </h4> <ul> <li> <div><strong>context</strong></div> <div>Type: <a href=\"types#Object\">Object</a> </div> <div> Context passed to the failCallbacks as the <code>this</code> object. </div> </li> <li> <div><strong>args</strong></div> <div>Type: <a href=\"types#Array\">Array</a> </div> <div> An optional array of arguments that are passed to the failCallbacks. </div> </li> </ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state by returning a restricted Promise object through <a href=\"deferred.promise\"><code>deferred.promise()</code></a>.</p> <p>When the Deferred is rejected, any failCallbacks added by <a href=\"deferred.then\"><code>deferred.then</code></a> or <a href=\"deferred.fail\"><code>deferred.fail</code></a> are called. Callbacks are executed in the order they were added. Each callback is passed the <code>args</code> from the <code>deferred.reject()</code> call. Any failCallbacks added after the Deferred enters the rejected state are executed immediately when they are added, using the arguments that were passed to the <code>.reject()</code> call. For more information, see the documentation for <a href=\"https://api.jquery.com/category/deferred-object/\">Deferred object</a>.</p> </div> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/deferred.rejectWith\" class=\"_attribution-link\">https://api.jquery.com/deferred.rejectWith</a>\n  </p>\n</div>\n","deferred.then":"<h1 class=\"entry-title\">deferred.then()</h1> <div class=\"entry-content\"> <article id=\"deferred-then1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">deferred.then( doneFilter [, failFilter ] [, progressFilter ] )</span><span class=\"returns\">Returns: <a href=\"types#Promise\">Promise</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Add handlers to be called when the Deferred object is resolved, rejected, or still in progress. </p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a></span><a id=\"deferred-then-doneFilter-failFilter-progressFilter\" href=\"#deferred-then-doneFilter-failFilter-progressFilter\">deferred.then( doneFilter [, failFilter ] [, progressFilter ] )</a> </h4> <ul> <li> <div><strong>doneFilter</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div> A function that is called when the Deferred is resolved. </div> </li> <li> <div><strong>failFilter</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div> An optional function that is called when the Deferred is rejected. </div> </li> <li> <div><strong>progressFilter</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div> An optional function that is called when progress notifications are sent to the Deferred. </div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.5/\">1.5</a>, removed: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a></span><a id=\"deferred-then-doneCallbacks-failCallbacks\" href=\"#deferred-then-doneCallbacks-failCallbacks\">deferred.then( doneCallbacks, failCallbacks )</a> </h4> <ul> <li> <div><strong>doneCallbacks</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div> A function, or array of functions, called when the Deferred is resolved. </div> </li> <li> <div><strong>failCallbacks</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div> A function, or array of functions, called when the Deferred is rejected. </div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a>, removed: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a></span><a id=\"deferred-then-doneCallbacks-failCallbacks-progressCallbacks\" href=\"#deferred-then-doneCallbacks-failCallbacks-progressCallbacks\">deferred.then( doneCallbacks, failCallbacks [, progressCallbacks ] )</a> </h4> <ul> <li> <div><strong>doneCallbacks</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div> A function, or array of functions, called when the Deferred is resolved. </div> </li> <li> <div><strong>failCallbacks</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div> A function, or array of functions, called when the Deferred is rejected. </div> </li> <li> <div><strong>progressCallbacks</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div> A function, or array of functions, called when the Deferred notifies progress. </div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p><strong>Prior to jQuery 1.8</strong>, the arguments could be a function or an array of functions.</p> <p>For all signatures, the arguments can be <code>null</code> if no callback of that type is desired. Alternatively, use <code>.done()</code>, <code>.fail()</code> or <code>.progress()</code> to set only one type of callback without filtering status or values. </p> <p><strong>As of jQuery 1.8</strong>, the <code>deferred.then()</code> method returns a new promise that can filter the status and values of a deferred through a function, replacing the now-deprecated <code>deferred.pipe()</code> method. The <code>doneFilter</code> and <code>failFilter</code> functions filter the original deferred's resolved / rejected status and values. The <code>progressFilter</code> function filters any calls to the original deferred's <code>notify</code> or <code>notifyWith</code> methods. These filter functions can return a new value to be passed along to the promise's <code>.done()</code> or <code>.fail()</code> callbacks, or they can return another observable object (Deferred, Promise, etc) which will pass its resolved / rejected status and values to the promise's callbacks. If the filter function used is <code>null</code>, or not specified, the promise will be resolved or rejected with the same values as the original.</p> <p>Callbacks are executed in the order they were added. Since <code>deferred.then</code> returns a Promise, other methods of the Promise object can be chained to this one, including additional <code>.then()</code> methods. </p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Since the <a href=\"jquery.get\"><code>jQuery.get</code></a> method returns a jqXHR object, which is derived from a Deferred object, we can attach handlers using the <code>.then</code> method.</p> <pre class=\"syntaxhighlighter javascript\">$.get( \"test.php\" ).then(\n  function() {\n    alert( \"$.get succeeded\" );\n  }, function() {\n    alert( \"$.get failed!\" );\n  }\n);</pre> </div> <div class=\"entry-example\" id=\"example-1\"> <p>Filter the resolve value:</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;deferred.then demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button&gt;Filter Resolve&lt;/button&gt;\n&lt;p&gt;&lt;/p&gt;\n \n&lt;script&gt;\nvar filterResolve = function() {\n  var defer = $.Deferred(),\n    filtered = defer.then(function( value ) {\n      return value * 2;\n    });\n \n  defer.resolve( 5 );\n  filtered.done(function( value ) {\n    $( \"p\" ).html( \"Value is ( 2*5 = ) 10: \" + value );\n  });\n};\n \n$( \"button\" ).on( \"click\", filterResolve );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-2\"> <p>Filter reject value:</p> <pre class=\"syntaxhighlighter javascript\">var defer = $.Deferred(),\n  filtered = defer.then( null, function( value ) {\n    return value * 3;\n  });\n \ndefer.reject( 6 );\nfiltered.fail(function( value ) {\n  alert( \"Value is ( 3*6 = ) 18: \" + value );\n});</pre> </div> <div class=\"entry-example\" id=\"example-3\"> <p>Chain tasks:</p> <pre class=\"syntaxhighlighter javascript\">var request = $.ajax( url, { dataType: \"json\" } ),\n  chained = request.then(function( data ) {\n    return $.ajax( url2, { data: { user: data.userId } } );\n  });\n \nchained.done(function( data ) {\n  // data retrieved from url2 as provided by the first request\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/deferred.then\" class=\"_attribution-link\">https://api.jquery.com/deferred.then</a>\n  </p>\n</div>\n","deferred.resolve":"<h1 class=\"entry-title\">deferred.resolve()</h1> <div class=\"entry-content\"> <article id=\"deferred-resolve1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">deferred.resolve( [args ] )</span><span class=\"returns\">Returns: <a href=\"types#Deferred\">Deferred</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong> Resolve a Deferred object and call any doneCallbacks with the given <code>args</code>. </p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.5/\">1.5</a></span><a id=\"deferred-resolve-args\" href=\"#deferred-resolve-args\">deferred.resolve( [args ] )</a> </h4> <ul><li> <div><strong>args</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div> Optional arguments that are passed to the doneCallbacks. </div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state by returning a restricted Promise object through <a href=\"deferred.promise\"><code>deferred.promise()</code></a>.</p> <p>When the Deferred is resolved, any doneCallbacks added by <a href=\"deferred.then\"><code>deferred.then()</code></a> or <a href=\"deferred.done\"><code>deferred.done()</code></a> are called. Callbacks are executed in the order they were added. Each callback is passed the <code>args</code> from the <code>deferred.resolve()</code>. Any doneCallbacks added after the Deferred enters the resolved state are executed immediately when they are added, using the arguments that were passed to the <code>deferred.resolve()</code> call. For more information, see the documentation for <a href=\"jquery.deferred\">jQuery.Deferred()</a>.</p> </div> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/deferred.resolve\" class=\"_attribution-link\">https://api.jquery.com/deferred.resolve</a>\n  </p>\n</div>\n","deferred.resolvewith":"<h1 class=\"entry-title\">deferred.resolveWith()</h1> <div class=\"entry-content\"> <article id=\"deferred-resolveWith1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">deferred.resolveWith( context [, args ] )</span><span class=\"returns\">Returns: <a href=\"types#Deferred\">Deferred</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong> Resolve a Deferred object and call any doneCallbacks with the given <code>context</code> and <code>args</code>. </p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.5/\">1.5</a></span><a id=\"deferred-resolveWith-context-args\" href=\"#deferred-resolveWith-context-args\">deferred.resolveWith( context [, args ] )</a> </h4> <ul> <li> <div><strong>context</strong></div> <div>Type: <a href=\"types#Object\">Object</a> </div> <div> Context passed to the doneCallbacks as the <code>this</code> object. </div> </li> <li> <div><strong>args</strong></div> <div>Type: <a href=\"types#Array\">Array</a> </div> <div> An optional array of arguments that are passed to the doneCallbacks. </div> </li> </ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Normally, only the creator of a Deferred should call this method; you can prevent other code from changing the Deferred's state by returning a restricted Promise object through <a href=\"deferred.promise\"><code>deferred.promise()</code></a>.</p> <p>When the Deferred is resolved, any doneCallbacks added by <a href=\"deferred.then\"><code>deferred.then</code></a> or <a href=\"deferred.done\"><code>deferred.done</code></a> are called. Callbacks are executed in the order they were added. Each callback is passed the <code>args</code> from the <code>.resolve()</code>. Any doneCallbacks added after the Deferred enters the resolved state are executed immediately when they are added, using the arguments that were passed to the <code>.resolve()</code> call. For more information, see the documentation for <a href=\"https://api.jquery.com/category/deferred-object/\">Deferred object</a>.</p> </div> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/deferred.resolveWith\" class=\"_attribution-link\">https://api.jquery.com/deferred.resolveWith</a>\n  </p>\n</div>\n","deferred.state":"<h1 class=\"entry-title\">deferred.state()</h1> <div class=\"entry-content\"> <article id=\"deferred-state1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">deferred.state()</span><span class=\"returns\">Returns: <a href=\"types#String\">String</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Determine the current state of a Deferred object. </p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a></span><a id=\"deferred-state\" href=\"#deferred-state\">deferred.state()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The deferred.state() method returns a string representing the current state of the Deferred object. The Deferred object can be in one of three states:</p> <ul> <li> <strong>\"pending\"</strong>: The Deferred object is not yet in a completed state (neither \"rejected\" nor \"resolved\").</li> <li> <strong>\"resolved\"</strong>: The Deferred object is in the resolved state, meaning that either <a href=\"deferred.resolve\"><code>deferred.resolve()</code></a> or <a href=\"deferred.resolvewith\"><code>deferred.resolveWith()</code></a> has been called for the object and the doneCallbacks have been called (or are in the process of being called). </li> <li> <strong>\"rejected\"</strong>: The Deferred object is in the rejected state, meaning that either <a href=\"deferred.reject\"><code>deferred.reject()</code></a> or <a href=\"deferred.rejectwith\"><code>deferred.rejectWith()</code></a> has been called for the object and the failCallbacks have been called (or are in the process of being called).</li> </ul> <p>This method is primarily useful for debugging to determine, for example, whether a Deferred has already been resolved even though you are inside code that intended to reject it.</p> </div> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/deferred.state\" class=\"_attribution-link\">https://api.jquery.com/deferred.state</a>\n  </p>\n</div>\n","dequeue":"<h1 class=\"entry-title\">.dequeue()</h1> <div class=\"entry-content\"> <article id=\"dequeue1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.dequeue( [queueName ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Execute the next function on the queue for the matched elements.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2/\">1.2</a></span><a id=\"dequeue-queueName\" href=\"#dequeue-queueName\">.dequeue( [queueName ] )</a> </h4> <ul><li> <div><strong>queueName</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>When <code>.dequeue()</code> is called, the next function on the queue is removed from the queue, and then executed. This function should in turn (directly or indirectly) cause <code>.dequeue()</code> to be called, so that the sequence can continue.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Use dequeue to end a custom queue function which allows the queue to keep going.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;dequeue demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    margin: 3px;\n    width: 50px;\n    position: absolute;\n    height: 50px;\n    left: 10px;\n    top: 30px;\n    background-color: yellow;\n  }\n  div.red {\n    background-color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button&gt;Start&lt;/button&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"button\" ).click(function() {\n  $( \"div\" )\n    .animate({ left:\"+=200px\" }, 2000 )\n    .animate({ top:\"0px\" }, 600 )\n    .queue(function() {\n      $( this ).toggleClass( \"red\" ).dequeue();\n    })\n    .animate({ left:\"10px\", top:\"30px\" }, 700 );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/dequeue\" class=\"_attribution-link\">https://api.jquery.com/dequeue</a>\n  </p>\n</div>\n","eq-selector":"<h1 class=\"entry-title\">:eq() Selector</h1> <div class=\"entry-content\"> <article id=\"eq1\" class=\"entry selector\"><h2 class=\"section-title\"><span>eq selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Select the element at index <code>n</code> within the matched set.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \":eq(index)\" )</h4> <p class=\"argument\"><strong>index: </strong>Zero-based index of the element to match.</p> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a></span>jQuery( \":eq(-index)\" )</h4> <p class=\"argument\"><strong>indexFromEnd: </strong>Zero-based index of the element to match, counting backwards from the last element. </p> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The index-related selectors (<code>:eq()</code>, <code>:lt()</code>, <code>:gt()</code>, <code>:even</code>, <code>:odd</code>) filter the set of elements that have matched the expressions that precede them. They narrow the set down based on the order of the elements within this matched set. For example, if elements are first selected with a class selector (<code>.myclass</code>) and four elements are returned, these elements are given indices <code>0</code> through <code>3</code> for the purposes of these selectors.</p> <p>Note that since JavaScript arrays use <em>0-based indexing</em>, these selectors reflect that fact. This is why <code>$( \".myclass:eq(1)\" )</code> selects the second element in the document with the class myclass, rather than the first. In contrast, <code>:nth-child(n)</code> uses <em>1-based indexing</em> to conform to the CSS specification.</p> <p>Prior to jQuery 1.8, the <code>:eq(index)</code> selector did <em>not</em> accept a negative value for <code>index</code> (though the <a href=\"eq\"><code>.eq(index)</code></a> method did).</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> Because <code>:eq()</code> is a jQuery extension and not part of the CSS specification, queries using <code>:eq()</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. For better performance in modern browsers, use <code>$(\"your-pure-css-selector\").eq(index)</code> instead. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Find the third td.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;eq demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;table border=\"1\"&gt;\n  &lt;tr&gt;&lt;td&gt;TD #0&lt;/td&gt;&lt;td&gt;TD #1&lt;/td&gt;&lt;td&gt;TD #2&lt;/td&gt;&lt;/tr&gt;\n  &lt;tr&gt;&lt;td&gt;TD #3&lt;/td&gt;&lt;td&gt;TD #4&lt;/td&gt;&lt;td&gt;TD #5&lt;/td&gt;&lt;/tr&gt;\n  &lt;tr&gt;&lt;td&gt;TD #6&lt;/td&gt;&lt;td&gt;TD #7&lt;/td&gt;&lt;td&gt;TD #8&lt;/td&gt;&lt;/tr&gt;\n&lt;/table&gt;\n \n&lt;script&gt;\n$( \"td:eq( 2 )\" ).css( \"color\", \"red\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Apply three different styles to list items to demonstrate that <code>:eq()</code> is designed to select a single element while <code>:nth-child()</code> or <code>:eq()</code> within a looping construct such as <code>.each()</code> can select multiple elements.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;eq demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;ul class=\"nav\"&gt;\n  &lt;li&gt;List 1, item 1&lt;/li&gt;\n  &lt;li&gt;List 1, item 2&lt;/li&gt;\n  &lt;li&gt;List 1, item 3&lt;/li&gt;\n&lt;/ul&gt;\n&lt;ul class=\"nav\"&gt;\n  &lt;li&gt;List 2, item 1&lt;/li&gt;\n  &lt;li&gt;List 2, item 2&lt;/li&gt;\n  &lt;li&gt;List 2, item 3&lt;/li&gt;\n&lt;/ul&gt;\n \n&lt;script&gt;\n// Applies yellow background color to a single &lt;li&gt;\n$( \"ul.nav li:eq(1)\" ).css( \"backgroundColor\", \"#ff0\" );\n \n// Applies italics to text of the second &lt;li&gt; within each &lt;ul class=\"nav\"&gt;\n$( \"ul.nav\" ).each(function( index ) {\n  $( this ).find( \"li:eq(1)\" ).css( \"fontStyle\", \"italic\" );\n});\n \n// Applies red text color to descendants of &lt;ul class=\"nav\"&gt;\n// for each &lt;li&gt; that is the second child of its parent\n$( \"ul.nav li:nth-child(2)\" ).css( \"color\", \"red\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-2\"> <p>Add a class to List 2, item 2 by targeting the second to last &lt;li&gt; </p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;eq demo&lt;/title&gt;\n  &lt;style&gt;\n  .foo {\n    color: blue;\n    background-color: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;ul class=\"nav\"&gt;\n  &lt;li&gt;List 1, item 1&lt;/li&gt;\n  &lt;li&gt;List 1, item 2&lt;/li&gt;\n  &lt;li&gt;List 1, item 3&lt;/li&gt;\n&lt;/ul&gt;\n&lt;ul class=\"nav\"&gt;\n  &lt;li&gt;List 2, item 1&lt;/li&gt;\n  &lt;li&gt;List 2, item 2&lt;/li&gt;\n  &lt;li&gt;List 2, item 3&lt;/li&gt;\n&lt;/ul&gt;\n \n&lt;script&gt;\n$( \"li:eq(-2)\" ).addClass( \"foo\" )\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/eq-selector\" class=\"_attribution-link\">https://api.jquery.com/eq-selector</a>\n  </p>\n</div>\n","delegate":"<h1 class=\"entry-title\">.delegate()</h1> <div class=\"entry-content\"> <article id=\"delegate1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.delegate( selector, eventType, handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Attach a handler to one or more events for all elements that match the selector, now or in the future, based on a specific set of root elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.2/\">1.4.2</a></span><a id=\"delegate-selector-eventType-handler\" href=\"#delegate-selector-eventType-handler\">.delegate( selector, eventType, handler )</a> </h4> <ul> <li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A selector to filter the elements that trigger the event.</div> </li> <li> <div><strong>eventType</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing one or more space-separated JavaScript event types, such as \"click\" or \"keydown,\" or custom event names.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute at the time the event is triggered.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.2/\">1.4.2</a></span><a id=\"delegate-selector-eventType-eventData-handler\" href=\"#delegate-selector-eventType-eventData-handler\">.delegate( selector, eventType, eventData, handler )</a> </h4> <ul> <li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A selector to filter the elements that trigger the event.</div> </li> <li> <div><strong>eventType</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing one or more space-separated JavaScript event types, such as \"click\" or \"keydown,\" or custom event names.</div> </li> <li> <div><strong>eventData</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>An object containing data that will be passed to the event handler.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute at the time the event is triggered.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"delegate-selector-events\" href=\"#delegate-selector-events\">.delegate( selector, events )</a> </h4> <ul> <li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A selector to filter the elements that trigger the event.</div> </li> <li> <div><strong>events</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>A plain object of one or more event types and functions to execute for them.</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>As of jQuery 1.7, <code>.delegate()</code> has been superseded by the <a href=\"on\">.on()</a> method. For earlier versions, however, it remains the most effective means to use event delegation. More information on event binding and delegation is in the <a href=\"on\">.on()</a> method. In general, these are the equivalent templates for the two methods:</p> <pre class=\"syntaxhighlighter javascript\">// jQuery 1.4.3+\n$( elements ).delegate( selector, events, data, handler );\n// jQuery 1.7+\n$( elements ).on( events, selector, data, handler );</pre> <p>For example, the following <code>.delegate()</code> code:</p> <pre class=\"syntaxhighlighter javascript\">$( \"table\" ).delegate( \"td\", \"click\", function() {\n  $( this ).toggleClass( \"chosen\" );\n});</pre> <p>is equivalent to the following code written using <code>.on()</code>:</p> <pre class=\"syntaxhighlighter javascript\">$( \"table\" ).on( \"click\", \"td\", function() {\n  $( this ).toggleClass( \"chosen\" );\n});</pre> <p>To remove events attached with <code>delegate()</code>, see the <a href=\"undelegate\">.undelegate()</a> method.</p> <p>Passing and handling event data works the same way as it does for <code>.on()</code>.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> Since the <a href=\"live\"><code>.live()</code></a> method handles events once they have propagated to the top of the document, it is not possible to stop propagation of live events. Similarly, events handled by <code><a href=\"delegate\">.delegate()</a></code> will propagate to the elements to which they are delegated; event handlers bound on any elements below it in the DOM tree will already have been executed by the time the delegated event handler is called. These handlers, therefore, may prevent the delegated handler from triggering by calling <code><a href=\"event.stoppropagation\">event.stopPropagation()</a></code> or returning <code>false</code>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Click a paragraph to add another. Note that .delegate() attaches a click event handler to all paragraphs - even new ones.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;delegate demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    background: yellow;\n    font-weight: bold;\n    cursor: pointer;\n    padding: 5px;\n  }\n  p.over {\n    background: #ccc;\n  }\n  span {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Click me!&lt;/p&gt;\n \n&lt;span&gt;&lt;/span&gt;\n \n&lt;script&gt;\n$( \"body\" ).delegate( \"p\", \"click\", function() {\n  $( this ).after( \"&lt;p&gt;Another paragraph!&lt;/p&gt;\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>To display each paragraph's text in an alert box whenever it is clicked:</p> <pre class=\"syntaxhighlighter javascript\">$( \"body\" ).delegate( \"p\", \"click\", function() {\n  alert( $( this ).text() );\n});</pre> </div> <div class=\"entry-example\" id=\"example-2\"> <p>To cancel a default action and prevent it from bubbling up, return false:</p> <pre class=\"syntaxhighlighter javascript\">$( \"body\" ).delegate( \"a\", \"click\", function() {\n  return false;\n});</pre> </div> <div class=\"entry-example\" id=\"example-3\"> <p>To cancel only the default action by using the preventDefault method.</p> <pre class=\"syntaxhighlighter javascript\">$( \"body\" ).delegate( \"a\", \"click\", function( event ) {\n  event.preventDefault();\n});</pre> </div> <div class=\"entry-example\" id=\"example-4\"> <p>Can bind custom events too.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;delegate demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    color: red;\n  }\n  span {\n    color: blue;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Has an attached custom event.&lt;/p&gt;\n&lt;button&gt;Trigger custom event&lt;/button&gt;\n&lt;span style=\"display:none;\"&gt;&lt;/span&gt;\n \n&lt;script&gt;\n$( \"body\" ).delegate( \"p\", \"myCustomEvent\", function( e, myName, myValue ) {\n  $( this ).text( \"Hi there!\" );\n  $( \"span\" )\n    .stop()\n    .css( \"opacity\", 1 )\n    .text( \"myName = \" + myName )\n    .fadeIn( 30 )\n    .fadeOut( 1000 );\n});\n$( \"button\" ).click(function() {\n  $( \"p\" ).trigger( \"myCustomEvent\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/delegate\" class=\"_attribution-link\">https://api.jquery.com/delegate</a>\n  </p>\n</div>\n","descendant-selector":"<h1 class=\"entry-title\">Descendant Selector (“ancestor descendant”)</h1> <div class=\"entry-content\"> <article id=\"descendant1\" class=\"entry selector\"><h2 class=\"section-title\"><span>descendant selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all elements that are descendants of a given ancestor.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \"ancestor descendant\" )</h4> <p class=\"argument\"><strong>ancestor: </strong>Any valid selector.</p> <p class=\"argument\"><strong>descendant: </strong>A selector to filter the descendant elements.</p> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>A descendant of an element could be a child, grandchild, great-grandchild, and so on, of that element.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Mark all inputs that are descendants of a form with a dotted blue border. Give a yellow background to inputs that are descendants of a fieldset that is a descendant of a form.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;descendant demo&lt;/title&gt;\n  &lt;style&gt;\n  form {\n    border: 2px green solid;\n    padding: 2px;\n    margin: 0;\n    background: #efe;\n  }\n  div {\n    color: red;\n  }\n  fieldset {\n    margin: 1px;\n    padding: 3px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;form&gt;\n  &lt;div&gt;Form is surrounded by the green border.&lt;/div&gt;\n \n  &lt;label for=\"name\"&gt;Child of form:&lt;/label&gt;\n  &lt;input name=\"name\" id=\"name\"&gt;\n \n  &lt;fieldset&gt;\n    &lt;label for=\"newsletter\"&gt;Grandchild of form, child of fieldset:&lt;/label&gt;\n    &lt;input name=\"newsletter\" id=\"newsletter\"&gt;\n  &lt;/fieldset&gt;\n&lt;/form&gt;\nSibling to form: &lt;input name=\"none\"&gt;\n \n&lt;script&gt;\n$( \"form input\" ).css( \"border\", \"2px dotted blue\" );\n$( \"form fieldset input\" ).css( \"backgroundColor\", \"yellow\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/descendant-selector\" class=\"_attribution-link\">https://api.jquery.com/descendant-selector</a>\n  </p>\n</div>\n","disabled-selector":"<h1 class=\"entry-title\">:disabled Selector</h1> <div class=\"entry-content\"> <article id=\"disabled1\" class=\"entry selector\"><h2 class=\"section-title\"><span>disabled selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all elements that are disabled.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \":disabled\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>As with other pseudo-class selectors (those that begin with a \":\"), it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector (\"*\") is implied. In other words, the bare <code>$(':disabled')</code> is equivalent to <code>$('*:disabled')</code>, so <code>$('input:disabled')</code> or similar should be used instead. </p> <p>Although their resulting selections are usually the same, the <code>:disabled</code> selector is subtly different from the <code>[disabled]</code> attribute selector;<code>:disabled</code> matches elements that are <a href=\"https://html.spec.whatwg.org/multipage/scripting.html#disabled-elements\">actually disabled</a> while <code>[disabled]</code> only checks for the existence of the disabled attribute.</p> <p>The <code>:disabled</code> selector should only be used for selecting HTML elements that support the <code>disabled</code> attribute (<code>&lt;button&gt;</code>, <code>&lt;input&gt;</code>, <code>&lt;optgroup&gt;</code>, <code>&lt;option&gt;</code>, <code>&lt;select&gt;</code>, <code>&lt;textarea&gt;</code>, <code>&lt;menuitem&gt;</code>, and <code>&lt;fieldset&gt;</code>).</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds all input elements that are disabled.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;disabled demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;form&gt;\n  &lt;input name=\"email\" disabled=\"disabled\"&gt;\n  &lt;input name=\"id\"&gt;\n&lt;/form&gt;\n \n&lt;script&gt;\n$( \"input:disabled\" ).val( \"this is it\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/disabled-selector\" class=\"_attribution-link\">https://api.jquery.com/disabled-selector</a>\n  </p>\n</div>\n","die":"<h1 class=\"entry-title\">.die()</h1> <div class=\"entry-content\"> <article id=\"die1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.die()</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span><span class=\"version-details\">version deprecated: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a>, removed: <a href=\"https://api.jquery.com/category/version/1.9/\">1.9</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Remove event handlers previously attached using <code>.live()</code> from the elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.1/\">1.4.1</a></span><a id=\"die\" href=\"#die\">.die()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.3/\">1.3</a></span><a id=\"die-eventType-handler\" href=\"#die-eventType-handler\">.die( eventType [, handler ] )</a> </h4> <ul> <li> <div><strong>eventType</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing a JavaScript event type, such as <code>click</code> or <code>keydown</code>.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>The function that is no longer to be executed.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"die-events\" href=\"#die-events\">.die( events )</a> </h4> <ul><li> <div><strong>events</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>A plain object of one or more event types, such as <code>click</code> or <code>keydown</code> and their corresponding functions that are no longer to be executed.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Any handler that has been attached with <code>.live()</code> can be removed with <code>.die()</code>. This method is analogous to calling <code>.off()</code> with no arguments, which is used to remove all handlers attached with <code>.on()</code>. See the discussions of <code>.live()</code> and <code>.off()</code> for further details.</p> <p>If used without an argument, .die() removes <em>all</em> event handlers previously attached using <code>.live()</code> from the elements.</p> <p><strong>As of jQuery 1.7</strong>, use of <code>.die()</code> (and its complementary method, <code>.live()</code>) is not recommended. Instead, use <a href=\"off\"><code>.off()</code></a> to remove event handlers bound with <a href=\"on\"><code>.on()</code></a></p> <p><strong>Note:</strong> In order for .die() to function correctly, the selector used with it must match exactly the selector initially used with .live().</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>To unbind all live events from all paragraphs, write:</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).die();</pre> </div> <div class=\"entry-example\" id=\"example-1\"> <p>To unbind all live click events from all paragraphs, write:</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).die( \"click\" );</pre> </div> <div class=\"entry-example\" id=\"example-2\"> <p>To unbind just one previously bound handler, pass the function in as the second argument:</p> <pre class=\"syntaxhighlighter javascript\">var foo = function() {\n  // Code to handle some kind of event\n};\n \n// Now foo will be called when paragraphs are clicked\n$( \"p\" ).live( \"click\", foo );\n \n// Now foo will no longer be called\n$( \"p\" ).die( \"click\", foo );</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/die\" class=\"_attribution-link\">https://api.jquery.com/die</a>\n  </p>\n</div>\n","end":"<h1 class=\"entry-title\">.end()</h1> <div class=\"entry-content\"> <article id=\"end1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.end()</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>End the most recent filtering operation in the current chain and return the set of matched elements to its previous state.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"end\" href=\"#end\">.end()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Most of jQuery's <a href=\"https://api.jquery.com/category/traversing/\">DOM traversal</a> methods operate on a jQuery object instance and produce a new one, matching a different set of DOM elements. When this happens, it is as if the new set of elements is pushed onto a stack that is maintained inside the object. Each successive filtering method pushes a new element set onto the stack. If we need an older element set, we can use <code>end()</code> to pop the sets back off of the stack.</p> <p>Suppose we have a couple short lists on a page:</p> <pre class=\"syntaxhighlighter xml\">&lt;ul class=\"first\"&gt;\n  &lt;li class=\"foo\"&gt;list item 1&lt;/li&gt;\n  &lt;li&gt;list item 2&lt;/li&gt;\n  &lt;li class=\"bar\"&gt;list item 3&lt;/li&gt;\n&lt;/ul&gt;\n&lt;ul class=\"second\"&gt;\n  &lt;li class=\"foo\"&gt;list item 1&lt;/li&gt;\n  &lt;li&gt;list item 2&lt;/li&gt;\n  &lt;li class=\"bar\"&gt;list item 3&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>The <code>end()</code> method is useful primarily when exploiting jQuery's chaining properties. When not using chaining, we can usually just call up a previous object by variable name, so we don't need to manipulate the stack. With <code>end()</code>, though, we can string all the method calls together:</p> <pre class=\"syntaxhighlighter javascript\">$( \"ul.first\" )\n  .find( \".foo\" )\n    .css( \"background-color\", \"red\" )\n  .end()\n  .find( \".bar\" )\n    .css( \"background-color\", \"green\" );</pre> <p>This chain searches for items with the class <code>foo</code> within the first list only and turns their backgrounds red. Then <code>end()</code> returns the object to its state before the call to <code>find()</code>, so the second <code>find()</code> looks for '.bar' inside <code>&lt;ul class=\"first\"&gt;</code>, not just inside that list's <code>&lt;li class=\"foo\"&gt;</code>, and turns the matching elements' backgrounds green. The net result is that items 1 and 3 of the first list have a colored background, and none of the items from the second list do.</p> <p>A long jQuery chain can be visualized as a structured code block, with filtering methods providing the openings of nested blocks and <code>end()</code> methods closing them:</p> <pre class=\"syntaxhighlighter javascript\">$( \"ul.first\" )\n  .find( \".foo\" )\n    .css( \"background-color\", \"red\" )\n  .end()\n  .find( \".bar\" )\n    .css( \"background-color\", \"green\" )\n  .end();</pre> <p>The last <code>end()</code> is unnecessary, as we are discarding the jQuery object immediately thereafter. However, when the code is written in this form, the <code>end()</code> provides visual symmetry and a sense of completion —making the program, at least to the eyes of some developers, more readable, at the cost of a slight hit to performance as it is an additional function call.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Selects all paragraphs, finds span elements inside these, and reverts the selection back to the paragraphs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;end demo&lt;/title&gt;\n  &lt;style&gt;\n  p, div {\n    margin: 1px;\n    padding: 1px;\n    font-weight: bold;\n    font-size: 16px;\n  }\n  div {\n    color: blue;\n  }\n  b {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;\n  Hi there &lt;span&gt;how&lt;/span&gt; are you &lt;span&gt;doing&lt;/span&gt;?\n&lt;/p&gt;\n \n&lt;p&gt;\n  This &lt;span&gt;span&lt;/span&gt; is one of\n  several &lt;span&gt;spans&lt;/span&gt; in this\n  &lt;span&gt;sentence&lt;/span&gt;.\n&lt;/p&gt;\n \n&lt;div&gt;\n  Tags in jQuery object initially: &lt;b&gt;&lt;/b&gt;\n&lt;/div&gt;\n \n&lt;div&gt;\n  Tags in jQuery object after find: &lt;b&gt;&lt;/b&gt;\n&lt;/div&gt;\n \n&lt;div&gt;\n  Tags in jQuery object after end: &lt;b&gt;&lt;/b&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\njQuery.fn.showTags = function( n ) {\n  var tags = this.map(function() {\n    return this.tagName;\n  })\n  .get()\n  .join( \", \" );\n  $( \"b:eq( \" + n + \" )\" ).text( tags );\n  return this;\n};\n \n$( \"p\" )\n  .showTags( 0 )\n  .find( \"span\" )\n    .showTags( 1 )\n    .css( \"background\", \"yellow\" )\n  .end()\n  .showTags( 2 )\n  .css( \"font-style\", \"italic\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Selects all paragraphs, finds span elements inside these, and reverts the selection back to the paragraphs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;end demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    margin: 10px;\n    padding: 10px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;&lt;span&gt;Hello&lt;/span&gt;, how are you?&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" )\n  .find( \"span\" )\n  .end()\n  .css( \"border\", \"2px red solid\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/end\" class=\"_attribution-link\">https://api.jquery.com/end</a>\n  </p>\n</div>\n","enabled-selector":"<h1 class=\"entry-title\">:enabled Selector</h1> <div class=\"entry-content\"> <article id=\"enabled1\" class=\"entry selector\"><h2 class=\"section-title\"><span>enabled selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all elements that are enabled.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \":enabled\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ( \"*\" ) is implied. In other words, the bare <code>$( \":enabled\" )</code> is equivalent to <code>$( \"*:enabled\" )</code>, so <code>$( \"input:enabled\" )</code> or similar should be used instead. </p> <p>Although their resulting selections are usually the same, <code>:enabled</code> selector is subtly different from <code>:not([disabled])</code>; <code>:enabled</code> selects elements that have their boolean disabled property strictly equal to false, while <code>:not([disabled])</code> selects elements that do not have a disabled <em>attribute</em> set (regardless of its value).</p> <p>The <code>:enabled</code> selector should only be used for selecting HTML elements that support the <code>disabled</code> attribute (<code>&lt;button&gt;</code>, <code>&lt;input&gt;</code>, <code>&lt;optgroup&gt;</code>, <code>&lt;option&gt;</code>, <code>&lt;select&gt;</code>, and <code>&lt;textarea&gt;</code>).</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Find all input elements that are enabled.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;enabled demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;form&gt;\n  &lt;input name=\"email\" disabled=\"disabled\"&gt;\n  &lt;input name=\"id\"&gt;\n&lt;/form&gt;\n \n&lt;script&gt;\n$( \"input:enabled\" ).val( \"this is it\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/enabled-selector\" class=\"_attribution-link\">https://api.jquery.com/enabled-selector</a>\n  </p>\n</div>\n","each":"<h1 class=\"entry-title\">.each()</h1> <div class=\"entry-content\"> <article id=\"each1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.each( function )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Iterate over a jQuery object, executing a function for each matched element. </p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"each-function\" href=\"#each-function\">.each( function )</a> </h4> <ul><li> <div><strong>function</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Integer\">Integer</a> index, <a href=\"types#Element\">Element</a> element )</div> <div>A function to execute for each matched element.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.each()</code> method is designed to make DOM looping constructs concise and less error-prone. When called it iterates over the DOM elements that are part of the jQuery object. Each time the callback runs, it is passed the current loop iteration, beginning from 0. More importantly, the callback is fired in the context of the current DOM element, so the keyword <code>this</code> refers to the element.</p> <p>Suppose you have a simple unordered list on the page:</p> <pre class=\"syntaxhighlighter xml\">&lt;ul&gt;\n  &lt;li&gt;foo&lt;/li&gt;\n  &lt;li&gt;bar&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>You can select the list items and iterate across them:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li\" ).each(function( index ) {\n  console.log( index + \": \" + $( this ).text() );\n});</pre> <p>A message is thus logged for each item in the list:</p> <p> <samp>0: foo</samp> <br> <samp>1: bar</samp> </p> <p>You can stop the loop from within the callback function by returning <code>false</code>.</p> <p>Note: most jQuery methods that return a jQuery object also loop through the set of elements in the jQuery collection — a process known as <i>implicit iteration</i>. When this occurs, it is often unnecessary to <i>explicitly</i> iterate with the <code>.each()</code> method:</p> <pre class=\"syntaxhighlighter javascript\">// The .each() method is unnecessary here:\n$( \"li\" ).each(function() {\n  $( this ).addClass( \"foo\" );\n});\n \n// Instead, you should rely on implicit iteration:\n$( \"li\" ).addClass( \"bar\" );</pre> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Iterate over three divs and sets their color property.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;each demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    color: red;\n    text-align: center;\n    cursor: pointer;\n    font-weight: bolder;\n    width: 300px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;Click here&lt;/div&gt;\n&lt;div&gt;to iterate through&lt;/div&gt;\n&lt;div&gt;these divs.&lt;/div&gt;\n \n&lt;script&gt;\n$( document.body ).click(function() {\n  $( \"div\" ).each(function( i ) {\n    if ( this.style.color !== \"blue\" ) {\n      this.style.color = \"blue\";\n    } else {\n      this.style.color = \"\";\n    }\n  });\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>To access a jQuery object instead of the regular DOM element, use <code>$( this )</code>. For example:</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;each demo&lt;/title&gt;\n  &lt;style&gt;\n  ul {\n    font-size: 18px;\n    margin: 0;\n  }\n  span {\n    color: blue;\n    text-decoration: underline;\n    cursor: pointer;\n  }\n  .example {\n    font-style: italic;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \nTo do list: &lt;span&gt;(click here to change)&lt;/span&gt;\n&lt;ul&gt;\n  &lt;li&gt;Eat&lt;/li&gt;\n  &lt;li&gt;Sleep&lt;/li&gt;\n  &lt;li&gt;Be merry&lt;/li&gt;\n&lt;/ul&gt;\n \n&lt;script&gt;\n$( \"span\" ).click(function() {\n  $( \"li\" ).each(function() {\n    $( this ).toggleClass( \"example\" );\n  });\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-2\"> <p>Use <code>return false</code> to break out of each() loops early.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;each demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    width: 40px;\n    height: 40px;\n    margin: 5px;\n    float: left;\n    border: 2px blue solid;\n    text-align: center;\n  }\n  span {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button&gt;Change colors&lt;/button&gt;\n&lt;span&gt;&lt;/span&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div id=\"stop\"&gt;Stop here&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"button\" ).click(function() {\n  $( \"div\" ).each(function( index, element ) {\n    // element == this\n    $( element ).css( \"backgroundColor\", \"yellow\" );\n    if ( $( this ).is( \"#stop\" ) ) {\n      $( \"span\" ).text( \"Stopped at div index #\" + index );\n      return false;\n    }\n  });\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/each\" class=\"_attribution-link\">https://api.jquery.com/each</a>\n  </p>\n</div>\n","empty-selector":"<h1 class=\"entry-title\">:empty Selector</h1> <div class=\"entry-content\"> <article id=\"empty1\" class=\"entry selector\"><h2 class=\"section-title\"><span>empty selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Select all elements that have no children (including text nodes).</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \":empty\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This is the inverse of <code>:parent</code>. </p> <p>One important thing to note with :empty (and :parent) is that child elements include text nodes.</p> <p>The W3C recommends that the <code>&lt;p&gt;</code> element have at least one child node, even if that child is merely text (see http://www.w3.org/TR/html401/struct/text.html#edef-P). Some other elements, on the other hand, are empty (i.e. have no children) by definition: &lt;input&gt;, &lt;img&gt;, &lt;br&gt;, and &lt;hr&gt;, for example.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds all elements that are empty - they don't have child elements or text.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;empty demo&lt;/title&gt;\n  &lt;style&gt;\n  td {\n    text-align: center;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;table border=\"1\"&gt;\n  &lt;tr&gt;&lt;td&gt;TD #0&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;\n  &lt;tr&gt;&lt;td&gt;TD #2&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;\n  &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;TD#5&lt;/td&gt;&lt;/tr&gt;\n&lt;/table&gt;\n \n&lt;script&gt;\n$( \"td:empty\" )\n  .text( \"Was empty!\" )\n  .css( \"background\", \"rgb(255,220,200)\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/empty-selector\" class=\"_attribution-link\">https://api.jquery.com/empty-selector</a>\n  </p>\n</div>\n","element-selector":"<h1 class=\"entry-title\">Element Selector (“element”)</h1> <div class=\"entry-content\"> <article id=\"element1\" class=\"entry selector\"><h2 class=\"section-title\"><span>element selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all elements with the given tag name.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \"element\" )</h4> <p class=\"argument\"><strong>element: </strong>An element to search for. Refers to the tagName of DOM nodes.</p> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>JavaScript's <code>getElementsByTagName()</code> function is called to return the appropriate elements when this expression is used.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds every DIV element.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;element demo&lt;/title&gt;\n  &lt;style&gt;\n  div, span {\n    width: 60px;\n    height: 60px;\n    float: left;\n    padding: 10px;\n    margin: 10px;\n    background-color: #eee;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;DIV1&lt;/div&gt;\n&lt;div&gt;DIV2&lt;/div&gt;\n&lt;span&gt;SPAN&lt;/span&gt;\n \n&lt;script&gt;\n$( \"div\" ).css( \"border\", \"9px solid red\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/element-selector\" class=\"_attribution-link\">https://api.jquery.com/element-selector</a>\n  </p>\n</div>\n","eq":"<h1 class=\"entry-title\">.eq()</h1> <div class=\"entry-content\"> <article id=\"eq1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.eq( index )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Reduce the set of matched elements to the one at the specified index.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.1.2/\">1.1.2</a></span><a id=\"eq-index\" href=\"#eq-index\">.eq( index )</a> </h4> <ul><li> <div><strong>index</strong></div> <div>Type: <a href=\"types#Integer\">Integer</a> </div> <div>An integer indicating the 0-based position of the element. </div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"eq-indexFromEnd\" href=\"#eq-indexFromEnd\">.eq( indexFromEnd )</a> </h4> <ul><li> <div><strong>indexFromEnd</strong></div> <div>Type: <a href=\"types#Integer\">Integer</a> </div> <div>An integer indicating the position of the element, counting backwards from the last element in the set. </div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Given a jQuery object that represents a set of DOM elements, the <code>.eq()</code> method constructs a new jQuery object from one element within that set. The supplied index identifies the position of this element in the set. </p> <p>Consider a page with a simple list on it:</p> <pre class=\"syntaxhighlighter xml\">&lt;ul&gt;\n  &lt;li&gt;list item 1&lt;/li&gt;\n  &lt;li&gt;list item 2&lt;/li&gt;\n  &lt;li&gt;list item 3&lt;/li&gt;\n  &lt;li&gt;list item 4&lt;/li&gt;\n  &lt;li&gt;list item 5&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>We can apply this method to the set of list items:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li\" ).eq( 2 ).css( \"background-color\", \"red\" );</pre> <p>The result of this call is a red background for item 3. Note that the supplied index is zero-based, and refers to the position of the element within the jQuery object, not within the DOM tree.</p> <p>Providing a negative number indicates a position starting from the end of the set, rather than the beginning. For example:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li\" ).eq( -2 ).css( \"background-color\", \"red\" );</pre> <p>This time list item 4 is turned red, since it is two from the end of the set.</p> <p>If an element cannot be found at the specified zero-based index, the method constructs a new jQuery object with an empty set and a <code>length</code> property of 0. </p> <pre class=\"syntaxhighlighter javascript\">$( \"li\" ).eq( 5 ).css( \"background-color\", \"red\" );</pre> <p>Here, none of the list items is turned red, since <code>.eq( 5 )</code> indicates the sixth of five list items.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Turn the div with index 2 blue by adding an appropriate class.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;eq demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    width: 60px;\n    height: 60px;\n    margin: 10px;\n    float: left;\n    border: 2px solid blue;\n  }\n  .blue {\n    background: blue;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"body\" ).find( \"div\" ).eq( 2 ).addClass( \"blue\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/eq\" class=\"_attribution-link\">https://api.jquery.com/eq</a>\n  </p>\n</div>\n","even-selector":"<h1 class=\"entry-title\">:even Selector</h1> <div class=\"entry-content\"> <article id=\"even1\" class=\"entry selector\"><h2 class=\"section-title\"><span>even selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects even elements, zero-indexed. See also <a href=\"https://api.jquery.com/Selectors/odd/\">odd</a>.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \":even\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>In particular, note that the <em>0-based indexing</em> means that, counter-intuitively, <code>:even</code> selects the first element, third element, and so on within the matched set.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> Because <code>:even</code> is a jQuery extension and not part of the CSS specification, queries using <code>:even</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. To achieve the best performance when using <code>:even</code> to select elements, first select the elements using a pure CSS selector, then use <a href=\"filter\"><code>.filter(\":even\")</code></a>. </li> <li> Selected elements are in the order of their appearance in the document. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds even table rows, matching the first, third and so on (index 0, 2, 4 etc.).</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;even demo&lt;/title&gt;\n  &lt;style&gt;\n  table {\n    background: #eee;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;table border=\"1\"&gt;\n  &lt;tr&gt;&lt;td&gt;Row with Index #0&lt;/td&gt;&lt;/tr&gt;\n  &lt;tr&gt;&lt;td&gt;Row with Index #1&lt;/td&gt;&lt;/tr&gt;\n  &lt;tr&gt;&lt;td&gt;Row with Index #2&lt;/td&gt;&lt;/tr&gt;\n  &lt;tr&gt;&lt;td&gt;Row with Index #3&lt;/td&gt;&lt;/tr&gt;\n&lt;/table&gt;\n \n&lt;script&gt;\n$( \"tr:even\" ).css( \"background-color\", \"#bbf\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/even-selector\" class=\"_attribution-link\">https://api.jquery.com/even-selector</a>\n  </p>\n</div>\n","error":"<h1 class=\"entry-title\">.error()</h1> <div class=\"entry-content\"> <article id=\"error1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.error( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span><span class=\"version-details\">version deprecated: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Bind an event handler to the \"error\" JavaScript event.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"error-handler\" href=\"#error-handler\">.error( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute when the event is triggered.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"error-eventData-handler\" href=\"#error-eventData-handler\">.error( [eventData ], handler )</a> </h4> <ul> <li> <div><strong>eventData</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>An object containing data that will be passed to the event handler.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method is a shortcut for <code>.on( \"error\", handler )</code>.</p> <p><b>As of jQuery 1.8</b>, the <code>.error()</code> method is deprecated. Use <code>.on( \"error\", handler )</code> to attach event handlers to the <code>error</code> event instead.</p> <p>The <code>error</code> event is sent to elements, such as images, that are referenced by a document and loaded by the browser. It is called if the element was not loaded correctly.</p> <p>For example, consider a page with a simple image element:</p> <pre class=\"syntaxhighlighter xml\">&lt;img alt=\"Book\" id=\"book\"&gt;</pre> <p>The event handler can be bound to the image:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#book\" )\n  .error(function() {\n    alert( \"Handler for .error() called.\" )\n  })\n  .attr( \"src\", \"missing.png\" );</pre> <p>If the image cannot be loaded (for example, because it is not present at the supplied URL), the alert is displayed:</p> <p> <samp>Handler for .error() called.</samp> </p> <div class=\"warning\"> <p>The event handler <em>must</em> be attached before the browser fires the <code>error</code> event, which is why the example sets the <code>src</code> attribute after attaching the handler. Also, the <code>error</code> event may not be correctly fired when the page is served locally; <code>error</code> relies on HTTP status codes and will generally not be triggered if the URL uses the <code>file:</code> protocol.</p> </div> <p>Note: A jQuery <code>error</code> event handler should not be attached to the <code>window</code> object. The browser fires the <code>window</code>'s <code>error</code> event when a script error occurs. However, the window <code>error</code> event receives different arguments and has different return value requirements than conventional event handlers. Use <code>window.onerror</code> instead.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> As the <code>.error()</code> method is just a shorthand for <code>.on( \"error\", handler )</code>, detaching is possible using <code>.off( \"error\" )</code>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>To replace all the missing images with another, you can update the <code>src</code> attribute inside the callback passed to <code>.error()</code>. Be sure that the replacement image exists; otherwise the <code>error</code> event will be triggered indefinitely.</p> <pre class=\"syntaxhighlighter javascript\">// If missing.png is missing, it is replaced by replacement.png\n$( \"img\" )\n  .error(function() {\n    $( this ).attr( \"src\", \"replacement.png\" );\n  })\n  .attr( \"src\", \"missing.png\" );</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/error\" class=\"_attribution-link\">https://api.jquery.com/error</a>\n  </p>\n</div>\n","event.currenttarget":"<h1 class=\"entry-title\">event.currentTarget</h1> <div class=\"entry-content\"> <article id=\"event-currentTarget1\" class=\"entry property\"><h2 class=\"section-title\"> <span>event.currentTarget</span><span class=\"returns\">Returns: <a href=\"types#Element\">Element</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong> The current DOM element within the event bubbling phase. </p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.3/\">1.3</a></span>event.currentTarget</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This property will typically be equal to the <code>this</code> of the function.</p> <p> <em>If you are using <a href=\"jquery.proxy\">jQuery.proxy</a> or another form of scope manipulation, <code>this</code> will be equal to whatever context you have provided, not <code>event.currentTarget</code></em> </p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Alert that currentTarget matches the `this` keyword.</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).click(function( event ) {\n  alert( event.currentTarget === this ); // true\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/event.currentTarget\" class=\"_attribution-link\">https://api.jquery.com/event.currentTarget</a>\n  </p>\n</div>\n","event.data":"<h1 class=\"entry-title\">event.data</h1> <div class=\"entry-content\"> <article id=\"event-data1\" class=\"entry property\"><h2 class=\"section-title\"> <span>event.data</span><span class=\"returns\">Returns: <a href=\"types#Object\">Object</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>An optional object of data passed to an event method when the current executing handler is bound. </p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.1/\">1.1</a></span>event.data</h4></li></ul> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Within a <code>for</code> loop, pass the value of <code>i</code> to the <code>.on()</code> method so that the current iteration's value is preserved. </p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;event.data demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button&gt; 0 &lt;/button&gt;\n&lt;button&gt; 1 &lt;/button&gt;\n&lt;button&gt; 2 &lt;/button&gt;\n&lt;button&gt; 3 &lt;/button&gt;\n&lt;button&gt; 4 &lt;/button&gt;\n \n&lt;div id=\"log\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar logDiv = $( \"#log\" );\n \nfor ( var i = 0; i &lt; 5; i++ ) {\n  $( \"button\" ).eq( i ).on( \"click\", { value: i }, function( event ) {\n    var msgs = [\n      \"button = \" + $( this ).index(),\n      \"event.data.value = \" + event.data.value,\n      \"i = \" + i\n    ];\n    logDiv.append( msgs.join( \", \" ) + \"&lt;br&gt;\" );\n  });\n}\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/event.data\" class=\"_attribution-link\">https://api.jquery.com/event.data</a>\n  </p>\n</div>\n","event.delegatetarget":"<h1 class=\"entry-title\">event.delegateTarget</h1> <div class=\"entry-content\"> <article id=\"event-delegateTarget1\" class=\"entry property\"><h2 class=\"section-title\"> <span>event.delegateTarget</span><span class=\"returns\">Returns: <a href=\"types#Element\">Element</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>The element where the currently-called jQuery event handler was attached.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a></span>event.delegateTarget</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This property is most often useful in delegated events attached by <a href=\"delegate\"><code>.delegate()</code></a> or <a href=\"on\"><code>.on()</code></a>, where the event handler is attached at an ancestor of the element being processed. It can be used, for example, to identify and remove event handlers at the delegation point.</p> <p>For non-delegated event handlers attached directly to an element, <code>event.delegateTarget</code> will always be equal to <code>event.currentTarget</code>.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>When a button in any box class is clicked, change the box's background color to red.</p> <pre class=\"syntaxhighlighter javascript\">$( \".box\" ).on( \"click\", \"button\", function( event ) {\n  $( event.delegateTarget ).css( \"background-color\", \"red\" );\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/event.delegateTarget\" class=\"_attribution-link\">https://api.jquery.com/event.delegateTarget</a>\n  </p>\n</div>\n","event.isimmediatepropagationstopped":"<h1 class=\"entry-title\">event.isImmediatePropagationStopped()</h1> <div class=\"entry-content\"> <article id=\"event-isImmediatePropagationStopped1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">event.isImmediatePropagationStopped()</span><span class=\"returns\">Returns: <a href=\"types#Boolean\">Boolean</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong> Returns whether event.stopImmediatePropagation() was ever called on this event object. </p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.3/\">1.3</a></span><a id=\"event-isImmediatePropagationStopped\" href=\"#event-isImmediatePropagationStopped\">event.isImmediatePropagationStopped()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This property was introduced in <a href=\"http://www.w3.org/TR/2003/NOTE-DOM-Level-3-Events-20031107/events.html#Events-Event-isImmediatePropagationStopped\">DOM level 3</a>.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Checks whether event.stopImmediatePropagation() was called.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;event.isImmediatePropagationStopped demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button&gt;click me&lt;/button&gt;\n&lt;div id=\"stop-log\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\nfunction immediatePropStopped( event ) {\n  var msg = \"\";\n  if ( event.isImmediatePropagationStopped() ) {\n    msg = \"called\";\n  } else {\n    msg = \"not called\";\n  }\n  $( \"#stop-log\" ).append( \"&lt;div&gt;\" + msg + \"&lt;/div&gt;\" );\n}\n \n$( \"button\" ).click(function( event ) {\n  immediatePropStopped( event );\n  event.stopImmediatePropagation();\n  immediatePropStopped( event );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/event.isImmediatePropagationStopped\" class=\"_attribution-link\">https://api.jquery.com/event.isImmediatePropagationStopped</a>\n  </p>\n</div>\n","event.ispropagationstopped":"<h1 class=\"entry-title\">event.isPropagationStopped()</h1> <div class=\"entry-content\"> <article id=\"event-isPropagationStopped1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">event.isPropagationStopped()</span><span class=\"returns\">Returns: <a href=\"types#Boolean\">Boolean</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong> Returns whether <a href=\"event.stoppropagation\">event.stopPropagation()</a> was ever called on this event object. </p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.3/\">1.3</a></span><a id=\"event-isPropagationStopped\" href=\"#event-isPropagationStopped\">event.isPropagationStopped()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This event method is described in the <a href=\"http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/events.html#Events-Event-isPropagationStopped\">W3C DOM Level 3 specification</a>.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Checks whether event.stopPropagation() was called</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;event.isPropagationStopped demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button&gt;click me&lt;/button&gt;\n&lt;div id=\"stop-log\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\nfunction propStopped( event ) {\n  var msg = \"\";\n  if ( event.isPropagationStopped() ) {\n    msg = \"called\";\n  } else {\n    msg = \"not called\";\n  }\n  $( \"#stop-log\" ).append( \"&lt;div&gt;\" + msg + \"&lt;/div&gt;\" );\n}\n \n$( \"button\" ).click(function(event) {\n  propStopped( event );\n  event.stopPropagation();\n  propStopped( event );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/event.isPropagationStopped\" class=\"_attribution-link\">https://api.jquery.com/event.isPropagationStopped</a>\n  </p>\n</div>\n","event.pagex":"<h1 class=\"entry-title\">event.pageX</h1> <div class=\"entry-content\"> <article id=\"event-pageX1\" class=\"entry property\"><h2 class=\"section-title\"> <span>event.pageX</span><span class=\"returns\">Returns: <a href=\"types#Number\">Number</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>The mouse position relative to the left edge of the document.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0.4/\">1.0.4</a></span>event.pageX</h4></li></ul> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Show the mouse position relative to the left and top edges of the document (within this iframe).</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;event.pageX demo&lt;/title&gt;\n  &lt;style&gt;\n  body {\n    background-color: #eef;\n  }\n  div {\n    padding: 20px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div id=\"log\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( document ).on( \"mousemove\", function( event ) {\n  $( \"#log\" ).text( \"pageX: \" + event.pageX + \", pageY: \" + event.pageY );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/event.pageX\" class=\"_attribution-link\">https://api.jquery.com/event.pageX</a>\n  </p>\n</div>\n","event.isdefaultprevented":"<h1 class=\"entry-title\">event.isDefaultPrevented()</h1> <div class=\"entry-content\"> <article id=\"event-isDefaultPrevented1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">event.isDefaultPrevented()</span><span class=\"returns\">Returns: <a href=\"types#Boolean\">Boolean</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Returns whether <a href=\"event.preventdefault\">event.preventDefault()</a> was ever called on this event object. </p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.3/\">1.3</a></span><a id=\"event-isDefaultPrevented\" href=\"#event-isDefaultPrevented\">event.isDefaultPrevented()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Checks whether event.preventDefault() was called.</p> <pre class=\"syntaxhighlighter javascript\">$( \"a\" ).click(function( event ) {\n  alert( event.isDefaultPrevented() ); // false\n  event.preventDefault();\n  alert( event.isDefaultPrevented() ); // true\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/event.isDefaultPrevented\" class=\"_attribution-link\">https://api.jquery.com/event.isDefaultPrevented</a>\n  </p>\n</div>\n","event.namespace":"<h1 class=\"entry-title\">event.namespace</h1> <div class=\"entry-content\"> <article id=\"event-namespace1\" class=\"entry property\"><h2 class=\"section-title\"> <span>event.namespace</span><span class=\"returns\">Returns: <a href=\"types#String\">String</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>The namespace specified when the event was triggered.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span>event.namespace</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This will likely be used primarily by plugin authors who wish to handle tasks differently depending on the event namespace used.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Determine the event namespace used.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;event.namespace demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button&gt;display event.namespace&lt;/button&gt;\n&lt;p&gt;&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).on( \"test.something\", function( event ) {\n  alert( event.namespace );\n});\n$( \"button\" ).click(function( event ) {\n  $( \"p\" ).trigger( \"test.something\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/event.namespace\" class=\"_attribution-link\">https://api.jquery.com/event.namespace</a>\n  </p>\n</div>\n","event.metakey":"<h1 class=\"entry-title\">event.metaKey</h1> <div class=\"entry-content\"> <article id=\"event-metaKey1\" class=\"entry property\"><h2 class=\"section-title\"> <span>event.metaKey</span><span class=\"returns\">Returns: <a href=\"types#Boolean\">Boolean</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Indicates whether the META key was pressed when the event fired.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0.4/\">1.0.4</a></span>event.metaKey</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Returns a boolean value (<code>true</code> or <code>false</code>) that indicates whether or not the <kbd>META</kbd> key was pressed at the time the event fired. This key might map to an alternative key name on some platforms.</p> <p>On Macintosh keyboards, the <kbd>META</kbd> key maps to the <a href=\"http://en.wikipedia.org/wiki/Command_key\">Command key (⌘)</a>.</p> <p>On Windows keyboards, the <kbd>META</kbd> key maps to the <a href=\"http://en.wikipedia.org/wiki/Windows_key\">Windows key</a>.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Determine whether the META key was pressed when the event fired.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;event.metaKey demo&lt;/title&gt;\n  &lt;style&gt;\n  body {\n    background-color: #eef;\n  }\n  div {\n    padding: 20px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button value=\"Test\" name=\"Test\" id=\"checkMetaKey\"&gt;Click me!&lt;/button&gt;\n&lt;div id=\"display\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"#checkMetaKey\" ).click(function( event ) {\n  $( \"#display\" ).text( event.metaKey );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/event.metaKey\" class=\"_attribution-link\">https://api.jquery.com/event.metaKey</a>\n  </p>\n</div>\n","event.relatedtarget":"<h1 class=\"entry-title\">event.relatedTarget</h1> <div class=\"entry-content\"> <article id=\"event-relatedTarget1\" class=\"entry property\"><h2 class=\"section-title\"> <span>event.relatedTarget</span><span class=\"returns\">Returns: <a href=\"types#Element\">Element</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>The other DOM element involved in the event, if any.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.1.4/\">1.1.4</a></span>event.relatedTarget</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>For <code>mouseout</code>, indicates the element being entered; for <code>mouseover</code>, indicates the element being exited. </p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>On mouseout of anchors, alert the element type being entered.</p> <pre class=\"syntaxhighlighter javascript\">$( \"a\" ).mouseout(function( event ) {\n  alert( event.relatedTarget.nodeName ); // \"DIV\"\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/event.relatedTarget\" class=\"_attribution-link\">https://api.jquery.com/event.relatedTarget</a>\n  </p>\n</div>\n","event.preventdefault":"<h1 class=\"entry-title\">event.preventDefault()</h1> <div class=\"entry-content\"> <article id=\"event-preventDefault1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">event.preventDefault()</span><span class=\"returns\">Returns: <a href=\"types#undefined\">undefined</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>If this method is called, the default action of the event will not be triggered.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"event-preventDefault\" href=\"#event-preventDefault\">event.preventDefault()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>For example, clicked anchors will not take the browser to a new URL. We can use <a href=\"event.isdefaultprevented\"><code>event.isDefaultPrevented()</code></a> to determine if this method has been called by an event handler that was triggered by this event.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Cancel the default action (navigation) of the click.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;event.preventDefault demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;a href=\"http://jquery.com\"&gt;default click action is prevented&lt;/a&gt;\n&lt;div id=\"log\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"a\" ).click(function( event ) {\n  event.preventDefault();\n  $( \"&lt;div&gt;\" )\n    .append( \"default \" + event.type + \" prevented\" )\n    .appendTo( \"#log\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/event.preventDefault\" class=\"_attribution-link\">https://api.jquery.com/event.preventDefault</a>\n  </p>\n</div>\n","event.pagey":"<h1 class=\"entry-title\">event.pageY</h1> <div class=\"entry-content\"> <article id=\"event-pageY1\" class=\"entry property\"><h2 class=\"section-title\"> <span>event.pageY</span><span class=\"returns\">Returns: <a href=\"types#Number\">Number</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>The mouse position relative to the top edge of the document.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0.4/\">1.0.4</a></span>event.pageY</h4></li></ul> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Show the mouse position relative to the left and top edges of the document (within this iframe).</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;event.pageY demo&lt;/title&gt;\n  &lt;style&gt;\n  body {\n    background-color: #eef;\n  }\n  div {\n    padding: 20px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div id=\"log\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( document ).on( \"mousemove\", function( event ) {\n  $( \"#log\" ).text( \"pageX: \" + event.pageX + \", pageY: \" + event.pageY );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/event.pageY\" class=\"_attribution-link\">https://api.jquery.com/event.pageY</a>\n  </p>\n</div>\n","event.result":"<h1 class=\"entry-title\">event.result</h1> <div class=\"entry-content\"> <article id=\"event-result1\" class=\"entry property\"><h2 class=\"section-title\"> <span>event.result</span><span class=\"returns\">Returns: <a href=\"types#Object\">Object</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>The last value returned by an event handler that was triggered by this event, unless the value was <code>undefined</code>.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.3/\">1.3</a></span>event.result</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This property can be useful for getting previous return values of custom events. </p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Display previous handler's return value</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;event.result demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button&gt;display event.result&lt;/button&gt;\n&lt;p&gt;&lt;/p&gt;\n \n&lt;script&gt;\n$( \"button\" ).click(function( event ) {\n  return \"hey\";\n});\n$( \"button\" ).click(function( event ) {\n  $( \"p\" ).html( event.result );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/event.result\" class=\"_attribution-link\">https://api.jquery.com/event.result</a>\n  </p>\n</div>\n","event.timestamp":"<h1 class=\"entry-title\">event.timeStamp</h1> <div class=\"entry-content\"> <article id=\"event-timeStamp1\" class=\"entry property\"><h2 class=\"section-title\"> <span>event.timeStamp</span><span class=\"returns\">Returns: <a href=\"types#Number\">Number</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>The difference in milliseconds between the time the browser created the event and January 1, 1970.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2.6/\">1.2.6</a></span>event.timeStamp</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This property can be useful for profiling event performance by getting the <code>event.timeStamp</code> value at two points in the code and noting the difference. To simply determine the current time inside an event handler, use <code>(new Date).getTime()</code> instead.</p> <p>Note: Due to a <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=238041\">bug open since 2004</a>, this value is not populated correctly in Firefox and it is not possible to know the time the event was created in that browser.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Display the time since the click handler last executed.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;event.timeStamp demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    height: 100px;\n    width: 300px;\n    margin: 10px;\n    background-color: #ffd;\n    overflow: auto;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;Click.&lt;/div&gt;\n \n&lt;script&gt;\nvar last, diff;\n$( \"div\" ).click(function( event ) {\n  if ( last ) {\n    diff = event.timeStamp - last;\n    $( \"div\" ).append( \"time since last event: \" + diff + \"&lt;br&gt;\" );\n  } else {\n    $( \"div\" ).append( \"Click again.&lt;br&gt;\" );\n  }\n  last = event.timeStamp;\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/event.timeStamp\" class=\"_attribution-link\">https://api.jquery.com/event.timeStamp</a>\n  </p>\n</div>\n","fadeto":"<h1 class=\"entry-title\">.fadeTo()</h1> <div class=\"entry-content\"> <article id=\"fadeTo1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.fadeTo( duration, opacity [, complete ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Adjust the opacity of the matched elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"fadeTo-duration-opacity-complete\" href=\"#fadeTo-duration-opacity-complete\">.fadeTo( duration, opacity [, complete ] )</a> </h4> <ul> <li> <div><strong>duration</strong></div> <div>Type: <a href=\"types#String\">String</a> or <a href=\"types#Number\">Number</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div><strong>opacity</strong></div> <div>Type: <a href=\"types#Number\">Number</a> </div> <div>A number between 0 and 1 denoting the target opacity.</div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function to call once the animation is complete.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"fadeTo-duration-opacity-easing-complete\" href=\"#fadeTo-duration-opacity-easing-complete\">.fadeTo( duration, opacity [, easing ] [, complete ] )</a> </h4> <ul> <li> <div><strong>duration</strong></div> <div>Type: <a href=\"types#String\">String</a> or <a href=\"types#Number\">Number</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div><strong>opacity</strong></div> <div>Type: <a href=\"types#Number\">Number</a> </div> <div>A number between 0 and 1 denoting the target opacity.</div> </li> <li> <div><strong>easing</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string indicating which easing function to use for the transition.</div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function to call once the animation is complete.</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.fadeTo()</code> method animates the opacity of the matched elements. It is similar to the <code><a href=\"fadein\">.fadeIn()</a></code> method but that method unhides the element and always fades to 100% opacity.</p> <p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of <code>200</code> and <code>600</code> milliseconds, respectively. If any other string is supplied, the default duration of <code>400</code> milliseconds is used. Unlike the other effect methods, <code>.fadeTo()</code> requires that <code>duration</code> be explicitly specified.</p> <p>If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but <code>this</code> is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.</p> <p>We can animate any element, such as a simple image:</p> <pre class=\"syntaxhighlighter xml\">&lt;div id=\"clickme\"&gt;\n  Click here\n&lt;/div&gt;\n&lt;img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\"&gt;\n// With the element initially shown, we can dim it slowly:\n$( \"#clickme\" ).click(function() {\n  $( \"#book\" ).fadeTo( \"slow\" , 0.5, function() {\n    // Animation complete.\n  });\n});</pre> <figure> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_41.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_42.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_43.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_44.png\" alt=\"\"> <figcaption>Figure 1 - Illustration of the <code>fadeTo()</code> effect</figcaption> </figure> <p>With <code>duration</code> set to <code>0</code>, this method just changes the <code>opacity</code> CSS property, so <code>.fadeTo( 0, opacity )</code> is the same as <code>.css( \"opacity\", opacity )</code>.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> All jQuery effects, including <code>.fadeTo()</code>, can be turned off globally by setting <code>jQuery.fx.off = true</code>, which effectively sets the duration to 0. For more information, see <a href=\"jquery.fx.off\">jQuery.fx.off</a>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Animates first paragraph to fade to an opacity of 0.33 (33%, about one third visible), completing the animation within 600 milliseconds.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;fadeTo demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;\nClick this paragraph to see it fade.\n&lt;/p&gt;\n \n&lt;p&gt;\nCompare to this one that won't fade.\n&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p:first\" ).click(function() {\n  $( this ).fadeTo( \"slow\", 0.33 );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Fade div to a random opacity on each click, completing the animation within 200 milliseconds.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;fadeTo demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    width: 80px;\n    margin: 0;\n    padding: 5px;\n  }\n  div {\n    width: 40px;\n    height: 40px;\n    position: absolute;\n  }\n  #one {\n    top: 0;\n    left: 0;\n    background: #f00;\n  }\n  #two {\n    top: 20px;\n    left: 20px;\n    background: #0f0;\n  }\n  #three {\n    top: 40px;\n    left:40px;\n    background:#00f;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;And this is the library that John built...&lt;/p&gt;\n \n&lt;div id=\"one\"&gt;&lt;/div&gt;\n&lt;div id=\"two\"&gt;&lt;/div&gt;\n&lt;div id=\"three\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"div\" ).click(function() {\n  $( this ).fadeTo( \"fast\", Math.random() );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-2\"> <p>Find the right answer! The fade will take 250 milliseconds and change various styles when it completes.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;fadeTo demo&lt;/title&gt;\n  &lt;style&gt;\n  div, p {\n    width: 80px;\n    height: 40px;\n    top: 0;\n    margin: 0;\n    position: absolute;\n    padding-top: 8px;\n  }\n  p {\n    background: #fcc;\n    text-align: center;\n  }\n  div {\n    background: blue;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Wrong&lt;/p&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;p&gt;Wrong&lt;/p&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;p&gt;Right!&lt;/p&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar getPos = function( n ) {\n  return (Math.floor( n ) * 90) + \"px\";\n};\n$( \"p\" ).each(function( n ) {\n  var r = Math.floor( Math.random() * 3 );\n  var tmp = $( this ).text();\n  $( this ).text( $( \"p:eq(\" + r + \")\" ).text() );\n  $( \"p:eq(\" + r + \")\" ).text( tmp );\n  $( this ).css( \"left\", getPos( n ) );\n});\n$( \"div\" )\n  .each(function( n ) {\n    $( this ).css( \"left\", getPos( n ) );\n  })\n  .css( \"cursor\", \"pointer\" )\n  .click( function() {\n    $( this ).fadeTo( 250, 0.25, function() {\n      $( this )\n        .css( \"cursor\", \"\" )\n        .prev()\n          .css({\n            \"font-weight\": \"bolder\",\n            \"font-style\": \"italic\"\n          });\n    });\n  });\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/fadeTo\" class=\"_attribution-link\">https://api.jquery.com/fadeTo</a>\n  </p>\n</div>\n","event.target":"<h1 class=\"entry-title\">event.target</h1> <div class=\"entry-content\"> <article id=\"event-target1\" class=\"entry property\"><h2 class=\"section-title\"> <span>event.target</span><span class=\"returns\">Returns: <a href=\"types#Element\">Element</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong> The DOM element that initiated the event. </p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>event.target</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>target</code> property can be the element that registered for the event or a descendant of it. It is often useful to compare <code>event.target</code> to <code>this</code> in order to determine if the event is being handled due to event bubbling. This property is very useful in event delegation, when events bubble.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Display the tag's name on click</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;event.target demo&lt;/title&gt;\n  &lt;style&gt;\n  span, strong, p {\n    padding: 8px;\n    display: block;\n    border: 1px solid #999;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div id=\"log\"&gt;&lt;/div&gt;\n&lt;div&gt;\n  &lt;p&gt;\n    &lt;strong&gt;&lt;span&gt;click&lt;/span&gt;&lt;/strong&gt;\n  &lt;/p&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\n$( \"body\" ).click(function( event ) {\n  $( \"#log\" ).html( \"clicked: \" + event.target.nodeName );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Implements a simple event delegation: The click handler is added to an unordered list, and the children of its li children are hidden. Clicking one of the li children toggles (see toggle()) their children.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;event.target demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;ul&gt;\n  &lt;li&gt;item 1\n    &lt;ul&gt;\n      &lt;li&gt;sub item 1-a&lt;/li&gt;\n      &lt;li&gt;sub item 1-b&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n  &lt;li&gt;item 2\n    &lt;ul&gt;\n      &lt;li&gt;sub item 2-a&lt;/li&gt;\n      &lt;li&gt;sub item 2-b&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n \n&lt;script&gt;\nfunction handler( event ) {\n  var target = $( event.target );\n  if ( target.is( \"li\" ) ) {\n    target.children().toggle();\n  }\n}\n$( \"ul\" ).click( handler ).find( \"ul\" ).hide();\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/event.target\" class=\"_attribution-link\">https://api.jquery.com/event.target</a>\n  </p>\n</div>\n","event.stopimmediatepropagation":"<h1 class=\"entry-title\">event.stopImmediatePropagation()</h1> <div class=\"entry-content\"> <article id=\"event-stopImmediatePropagation1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">event.stopImmediatePropagation()</span><span class=\"returns\">Returns: </span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Keeps the rest of the handlers from being executed and prevents the event from bubbling up the DOM tree.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.3/\">1.3</a></span><a id=\"event-stopImmediatePropagation\" href=\"#event-stopImmediatePropagation\">event.stopImmediatePropagation()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>In addition to keeping any additional handlers on an element from being executed, this method also stops the bubbling by implicitly calling <code>event.stopPropagation()</code>. To simply prevent the event from bubbling to ancestor elements but allow other event handlers to execute on the same element, we can use <code><a href=\"event.stoppropagation\">event.stopPropagation()</a></code> instead.</p> <p>Use <code><a href=\"event.isimmediatepropagationstopped\">event.isImmediatePropagationStopped()</a></code> to know whether this method was ever called (on that event object).</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> Since the <a href=\"live\"><code>.live()</code></a> method handles events once they have propagated to the top of the document, it is not possible to stop propagation of live events. Similarly, events handled by <code><a href=\"delegate\">.delegate()</a></code> will propagate to the elements to which they are delegated; event handlers bound on any elements below it in the DOM tree will already have been executed by the time the delegated event handler is called. These handlers, therefore, may prevent the delegated handler from triggering by calling <code><a href=\"event.stoppropagation\">event.stopPropagation()</a></code> or returning <code>false</code>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Prevents other event handlers from being called.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;event.stopImmediatePropagation demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    height: 30px;\n    width: 150px;\n    background-color: #ccf;\n  }\n  div {\n    height: 30px;\n    width: 150px;\n    background-color: #cfc;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;paragraph&lt;/p&gt;\n&lt;div&gt;division&lt;/div&gt;\n \n&lt;script&gt;\n$( \"p\" ).click(function( event ) {\n  event.stopImmediatePropagation();\n});\n$( \"p\" ).click(function( event ) {\n  // This function won't be executed\n  $( this ).css( \"background-color\", \"#f00\" );\n});\n$( \"div\" ).click(function( event ) {\n  // This function will be executed\n  $( this ).css( \"background-color\", \"#f00\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/event.stopImmediatePropagation\" class=\"_attribution-link\">https://api.jquery.com/event.stopImmediatePropagation</a>\n  </p>\n</div>\n","event.stoppropagation":"<h1 class=\"entry-title\">event.stopPropagation()</h1> <div class=\"entry-content\"> <article id=\"event-stopPropagation1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">event.stopPropagation()</span><span class=\"returns\">Returns: </span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Prevents the event from bubbling up the DOM tree, preventing any parent handlers from being notified of the event.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"event-stopPropagation\" href=\"#event-stopPropagation\">event.stopPropagation()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>We can use <code><a href=\"event.ispropagationstopped\">event.isPropagationStopped()</a></code> to determine if this method was ever called (on that event object). </p> <p>This method works for custom events triggered with <a href=\"trigger\">trigger()</a> as well.</p> <p>Note that this will not prevent other handlers <em>on the same element</em> from running. </p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> Since the <a href=\"live\"><code>.live()</code></a> method handles events once they have propagated to the top of the document, it is not possible to stop propagation of live events. Similarly, events handled by <code><a href=\"delegate\">.delegate()</a></code> will propagate to the elements to which they are delegated; event handlers bound on any elements below it in the DOM tree will already have been executed by the time the delegated event handler is called. These handlers, therefore, may prevent the delegated handler from triggering by calling <code><a href=\"event.stoppropagation\">event.stopPropagation()</a></code> or returning <code>false</code>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Kill the bubbling on the click event.</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).click(function( event ) {\n  event.stopPropagation();\n  // Do something\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/event.stopPropagation\" class=\"_attribution-link\">https://api.jquery.com/event.stopPropagation</a>\n  </p>\n</div>\n","find":"<h1 class=\"entry-title\">.find()</h1> <div class=\"entry-content\"> <article id=\"find1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.find( selector )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Get the descendants of each element in the current set of matched elements, filtered by a selector, jQuery object, or element.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"find-selector\" href=\"#find-selector\">.find( selector )</a> </h4> <ul><li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> </div> <div>A string containing a selector expression to match elements against.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.6/\">1.6</a></span><a id=\"find-element\" href=\"#find-element\">.find( element )</a> </h4> <ul><li> <div><strong>element</strong></div> <div>Type: <a href=\"types#Element\">Element</a> or <a href=\"types#jQuery\">jQuery</a> </div> <div>An element or a jQuery object to match elements against.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Given a jQuery object that represents a set of DOM elements, the <code>.find()</code> method allows us to search through the descendants of these elements in the DOM tree and construct a new jQuery object from the matching elements. The <code>.find()</code> and <code>.children()</code> methods are similar, except that the latter only travels a single level down the DOM tree.</p> <p>The first signature for the <code>.find()</code>method accepts a selector expression of the same type that we can pass to the <code>$()</code> function. The elements will be filtered by testing whether they match this selector.</p> <p>Consider a page with a basic nested list on it:</p> <pre class=\"syntaxhighlighter xml\">&lt;ul class=\"level-1\"&gt;\n  &lt;li class=\"item-i\"&gt;I&lt;/li&gt;\n  &lt;li class=\"item-ii\"&gt;II\n    &lt;ul class=\"level-2\"&gt;\n      &lt;li class=\"item-a\"&gt;A&lt;/li&gt;\n      &lt;li class=\"item-b\"&gt;B\n        &lt;ul class=\"level-3\"&gt;\n          &lt;li class=\"item-1\"&gt;1&lt;/li&gt;\n          &lt;li class=\"item-2\"&gt;2&lt;/li&gt;\n          &lt;li class=\"item-3\"&gt;3&lt;/li&gt;\n        &lt;/ul&gt;\n      &lt;/li&gt;\n      &lt;li class=\"item-c\"&gt;C&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n  &lt;li class=\"item-iii\"&gt;III&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>If we begin at item II, we can find list items within it:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li.item-ii\" ).find( \"li\" ).css( \"background-color\", \"red\" );</pre> <p>The result of this call is a red background on items A, B, 1, 2, 3, and C. Even though item II matches the selector expression, it is not included in the results; only descendants are considered candidates for the match.</p> <div class=\"warning\"> <p>Unlike most of the tree traversal methods, the selector expression is required in a call to <code>.find()</code>. If we need to retrieve all of the descendant elements, we can pass in the universal selector <code>'*'</code> to accomplish this.</p> </div> <p><a href=\"jquery#selector-context\">Selector context</a> is implemented with the <code>.find()</code> <code>method;</code> therefore, <code>$( \"li.item-ii\" ).find( \"li\" )</code> is equivalent to <code>$( \"li\", \"li.item-ii\" )</code>.</p> <p><strong>As of jQuery 1.6</strong>, we can also filter the selection with a given jQuery collection or element. With the same nested list as above, if we start with:</p> <pre class=\"syntaxhighlighter javascript\">var allListElements = $( \"li\" );</pre> <p>And then pass this jQuery object to find:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li.item-ii\" ).find( allListElements );</pre> <p>This will return a jQuery collection which contains only the list elements that are descendants of item II.</p> <p>Similarly, an element may also be passed to find:</p> <pre class=\"syntaxhighlighter javascript\">var item1 = $( \"li.item-1\" )[ 0 ];\n$( \"li.item-ii\" ).find( item1 ).css( \"background-color\", \"red\" );</pre> <p>The result of this call would be a red background on item 1.</p>  </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Starts with all paragraphs and searches for descendant span elements, same as <code>$( \"p span\" )</code></p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;find demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;&lt;span&gt;Hello&lt;/span&gt;, how are you?&lt;/p&gt;\n&lt;p&gt;Me? I'm &lt;span&gt;good&lt;/span&gt;.&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).find( \"span\" ).css( \"color\", \"red\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>A selection using a jQuery collection of all span tags. Only spans within p tags are changed to red while others are left blue.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;find demo&lt;/title&gt;\n  &lt;style&gt;\n  span {\n    color: blue;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;&lt;span&gt;Hello&lt;/span&gt;, how are you?&lt;/p&gt;\n&lt;p&gt;Me? I'm &lt;span&gt;good&lt;/span&gt;.&lt;/p&gt;\n&lt;div&gt;Did you &lt;span&gt;eat&lt;/span&gt; yet?&lt;/div&gt;\n \n&lt;script&gt;\nvar spans = $( \"span\" );\n$( \"p\" ).find( spans ).css( \"color\", \"red\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-2\"> <p>Add spans around each word then add a hover and italicize words with the letter <strong>t</strong>.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;find demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    font-size: 20px;\n    width: 200px;\n    color: blue;\n    font-weight: bold;\n    margin: 0 10px;\n  }\n  .hilite {\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;\n  When the day is short\n  find that which matters to you\n  or stop believing\n&lt;/p&gt;\n \n&lt;script&gt;\nvar newText = $( \"p\" ).text().split( \" \" ).join( \"&lt;/span&gt; &lt;span&gt;\" );\nnewText = \"&lt;span&gt;\" + newText + \"&lt;/span&gt;\";\n \n$( \"p\" )\n  .html( newText )\n  .find( \"span\" )\n    .hover(function() {\n      $( this ).addClass( \"hilite\" );\n    }, function() {\n      $( this ).removeClass( \"hilite\" );\n    })\n  .end()\n  .find( \":contains('t')\" )\n    .css({\n      \"font-style\": \"italic\",\n      \"font-weight\": \"bolder\"\n    });\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/find\" class=\"_attribution-link\">https://api.jquery.com/find</a>\n  </p>\n</div>\n","first-child-selector":"<h1 class=\"entry-title\">:first-child Selector</h1> <div class=\"entry-content\"> <article id=\"first-child1\" class=\"entry selector\"><h2 class=\"section-title\"><span>first-child selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all elements that are the first child of their parent.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.1.4/\">1.1.4</a></span>jQuery( \":first-child\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>While <a href=\"first-selector\">:first</a> matches only a single element, the <code>:first-child</code> selector can match more than one: one for each parent. This is equivalent to <code>:nth-child(1)</code>.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds the first span in each matched div to underline and add a hover state.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;first-child demo&lt;/title&gt;\n  &lt;style&gt;\n  span {\n    color: #008;\n  }\n  span.sogreen {\n    color: green;\n    font-weight: bolder;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;\n  &lt;span&gt;John,&lt;/span&gt;\n  &lt;span&gt;Karl,&lt;/span&gt;\n  &lt;span&gt;Brandon&lt;/span&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;span&gt;Glen,&lt;/span&gt;\n  &lt;span&gt;Tane,&lt;/span&gt;\n  &lt;span&gt;Ralph&lt;/span&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\n$( \"div span:first-child\" )\n  .css( \"text-decoration\", \"underline\" )\n  .hover(function() {\n    $( this ).addClass( \"sogreen\" );\n  }, function() {\n    $( this ).removeClass( \"sogreen\" );\n  });\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/first-child-selector\" class=\"_attribution-link\">https://api.jquery.com/first-child-selector</a>\n  </p>\n</div>\n","event.type":"<h1 class=\"entry-title\">event.type</h1> <div class=\"entry-content\"> <article id=\"event-type1\" class=\"entry property\"><h2 class=\"section-title\"> <span>event.type</span><span class=\"returns\">Returns: <a href=\"types#String\">String</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Describes the nature of the event.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>event.type</h4></li></ul> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>On all anchor clicks, alert the event type.</p> <pre class=\"syntaxhighlighter javascript\">$( \"a\" ).click(function( event ) {\n  alert( event.type ); // \"click\"\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/event.type\" class=\"_attribution-link\">https://api.jquery.com/event.type</a>\n  </p>\n</div>\n","focus":"<h1 class=\"entry-title\">.focus()</h1> <div class=\"entry-content\"> <article id=\"focus1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.focus( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Bind an event handler to the \"focus\" JavaScript event, or trigger that event on an element.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"focus-handler\" href=\"#focus-handler\">.focus( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"focus-eventData-handler\" href=\"#focus-eventData-handler\">.focus( [eventData ], handler )</a> </h4> <ul> <li> <div><strong>eventData</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>An object containing data that will be passed to the event handler.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"focus\" href=\"#focus\">.focus()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <ul> <li>This method is a shortcut for <code>.on( \"focus\", handler )</code> in the first and second variations, and <code>.trigger( \"focus\" )</code> in the third.</li> <li>The <code>focus</code> event is sent to an element when it gains focus. This event is implicitly applicable to a limited set of elements, such as form elements (<code>&lt;input&gt;</code>, <code>&lt;select&gt;</code>, etc.) and links (<code>&lt;a href&gt;</code>). In recent browser versions, the event can be extended to include all element types by explicitly setting the element's <code>tabindex</code> property. An element can gain focus via keyboard commands, such as the Tab key, or by mouse clicks on the element.</li> <li>Elements with focus are usually highlighted in some way by the browser, for example with a dotted line surrounding the element. The focus is used to determine which element is the first to receive keyboard-related events.</li> </ul> <div class=\"warning\"> <p>Attempting to set focus to a hidden element causes an error in Internet Explorer. Take care to only use <code>.focus()</code> on elements that are visible. To run an element's focus event handlers without setting focus to the element, use <code>.triggerHandler( \"focus\" )</code> instead of <code>.focus()</code>.</p> </div> <p>For example, consider the HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;form&gt;\n  &lt;input id=\"target\" type=\"text\" value=\"Field 1\"&gt;\n  &lt;input type=\"text\" value=\"Field 2\"&gt;\n&lt;/form&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;/div&gt;</pre> <p>The event handler can be bound to the first input field:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#target\" ).focus(function() {\n  alert( \"Handler for .focus() called.\" );\n});</pre> <p>Now clicking on the first field, or tabbing to it from another field, displays the alert:</p> <p> <samp>Handler for .focus() called.</samp> </p> <p>We can trigger the event when another element is clicked:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#other\" ).click(function() {\n  $( \"#target\" ).focus();\n});</pre> <p>After this code executes, clicks on <samp>Trigger the handler</samp> will also alert the message.</p> <p>The <code>focus</code> event does not bubble in Internet Explorer. Therefore, scripts that rely on event delegation with the <code>focus</code> event will not work consistently across browsers. As of version 1.4.2, however, jQuery works around this limitation by mapping <code>focus</code> to the <code>focusin</code> event in its event delegation methods, <a href=\"live\"><code>.live()</code></a> and <a href=\"delegate\"><code>.delegate()</code></a>.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> As the <code>.focus()</code> method is just a shorthand for <code>.on( \"focus\", handler )</code>, detaching is possible using <code>.off( \"focus\" )</code>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Fire focus.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;focus demo&lt;/title&gt;\n  &lt;style&gt;\n  span {\n    display: none;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;&lt;input type=\"text\"&gt; &lt;span&gt;focus fire&lt;/span&gt;&lt;/p&gt;\n&lt;p&gt;&lt;input type=\"password\"&gt; &lt;span&gt;focus fire&lt;/span&gt;&lt;/p&gt;\n \n&lt;script&gt;\n$( \"input\" ).focus(function() {\n  $( this ).next( \"span\" ).css( \"display\", \"inline\" ).fadeOut( 1000 );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>To stop people from writing in text input boxes, try:</p> <pre class=\"syntaxhighlighter javascript\">$( \"input[type=text]\" ).focus(function() {\n  $( this ).blur();\n});</pre> </div> <div class=\"entry-example\" id=\"example-2\"> <p>To focus on a login input box with id 'login' on page startup, try:</p> <pre class=\"syntaxhighlighter javascript\">$( document ).ready(function() {\n  $( \"#login\" ).focus();\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/focus\" class=\"_attribution-link\">https://api.jquery.com/focus</a>\n  </p>\n</div>\n","event.which":"<h1 class=\"entry-title\">event.which</h1> <div class=\"entry-content\"> <article id=\"event-which1\" class=\"entry property\"><h2 class=\"section-title\"> <span>event.which</span><span class=\"returns\">Returns: <a href=\"types#Number\">Number</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>For key or mouse events, this property indicates the specific key or button that was pressed.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.1.3/\">1.1.3</a></span>event.which</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>event.which</code> property normalizes <code>event.keyCode</code> and <code>event.charCode</code>. It is recommended to watch <code>event.which</code> for keyboard key input. For more detail, read about <a href=\"https://developer.mozilla.org/en/DOM/event.charCode#Notes\">event.charCode on the MDN</a>. </p> <p><code>event.which</code> also normalizes button presses (<code>mousedown</code> and <code>mouseup</code>events), reporting <code>1</code> for left button, <code>2</code> for middle, and <code>3</code> for right. Use <code>event.which</code> instead of <code>event.button</code>. </p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Log which key was depressed.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;event.which demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;input id=\"whichkey\" value=\"type something\"&gt;\n&lt;div id=\"log\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"#whichkey\" ).on( \"keydown\", function( event ) {\n  $( \"#log\" ).html( event.type + \": \" +  event.which );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Log which mouse button was depressed.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;event.which demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;input id=\"whichkey\" value=\"click here\"&gt;\n&lt;div id=\"log\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"#whichkey\" ).on( \"mousedown\", function( event ) {\n  $( \"#log\" ).html( event.type + \": \" +  event.which );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/event.which\" class=\"_attribution-link\">https://api.jquery.com/event.which</a>\n  </p>\n</div>\n","fadein":"<h1 class=\"entry-title\">.fadeIn()</h1> <div class=\"entry-content\"> <article id=\"fadeIn1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.fadeIn( [duration ] [, complete ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Display the matched elements by fading them to opaque.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"fadeIn-duration-complete\" href=\"#fadeIn-duration-complete\">.fadeIn( [duration ] [, complete ] )</a> </h4> <ul> <li> <div> <strong>duration</strong> (default: <code>400</code>)</div> <div>Type: <a href=\"types#Number\">Number</a> or <a href=\"types#String\">String</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function to call once the animation is complete, called once per matched element.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"fadeIn-options\" href=\"#fadeIn-options\">.fadeIn( options )</a> </h4> <ul><li> <div><strong>options</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>A map of additional options to pass to the method.</div> <ul> <li> <div> <strong>duration</strong> (default: <code>400</code>)</div> <div>Type: <a href=\"types#Number\">Number</a> or <a href=\"types#String\">String</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div> <strong>easing</strong> (default: <code>swing</code>)</div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string indicating which easing function to use for the transition.</div> </li> <li> <div> <strong>queue</strong> (default: <code>true</code>)</div> <div>Type: <a href=\"types#Boolean\">Boolean</a> or <a href=\"types#String\">String</a> </div> <div>A Boolean indicating whether to place the animation in the effects queue. If false, the animation will begin immediately. <strong>As of jQuery 1.7</strong>, the queue option can also accept a string, in which case the animation is added to the queue represented by that string. When a custom queue name is used the animation does not automatically start; you must call <code>.dequeue(\"queuename\")</code> to start it.</div> </li> <li> <div><strong>specialEasing</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a>)</span> </div> </li> <li> <div><strong>step</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Number\">Number</a> now, <a href=\"types#Tween\">Tween</a> tween )</div> <div>A function to be called for each animated property of each animated element. This function provides an opportunity to modify the Tween object to change the value of the property before it is set.</div> </li> <li> <div><strong>progress</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Number\">Number</a> progress, <a href=\"types#Number\">Number</a> remainingMs )</div> <div>A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function that is called once the animation on an element is complete.</div> </li> <li> <div><strong>start</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation )</div> <div>A function to call when the animation on an element begins.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>done</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Boolean\">Boolean</a> jumpedToEnd )</div> <div>A function to be called when the animation on an element completes (its Promise object is resolved).<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>fail</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Boolean\">Boolean</a> jumpedToEnd )</div> <div>A function to be called when the animation on an element fails to complete (its Promise object is rejected).<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>always</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Boolean\">Boolean</a> jumpedToEnd )</div> <div>A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected).<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> </ul> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"fadeIn-duration-easing-complete\" href=\"#fadeIn-duration-easing-complete\">.fadeIn( [duration ] [, easing ] [, complete ] )</a> </h4> <ul> <li> <div> <strong>duration</strong> (default: <code>400</code>)</div> <div>Type: <a href=\"types#Number\">Number</a> or <a href=\"types#String\">String</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div> <strong>easing</strong> (default: <code>swing</code>)</div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string indicating which easing function to use for the transition.</div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function to call once the animation is complete, called once per matched element.</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.fadeIn()</code> method animates the opacity of the matched elements. It is similar to the <code><a href=\"fadeto\">.fadeTo()</a></code> method but that method does not unhide the element and can specify the final opacity level.</p> <p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of <code>200</code> and <code>600</code> milliseconds, respectively. If any other string is supplied, or if the <code>duration</code> parameter is omitted, the default duration of <code>400</code> milliseconds is used.</p> <p>We can animate any element, such as a simple image:</p> <pre class=\"syntaxhighlighter xml\">&lt;div id=\"clickme\"&gt;\n  Click here\n&lt;/div&gt;\n&lt;img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\"&gt;\n \n// With the element initially hidden, we can show it slowly:\n$( \"#clickme\" ).click(function() {\n  $( \"#book\" ).fadeIn( \"slow\", function() {\n    // Animation complete\n  });\n});</pre> <figure> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_33.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_34.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_35.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_36.png\" alt=\"\"> <figcaption>Figure 1 - Illustration of the <code>fadeIn()</code> effect</figcaption> </figure> <h4 id=\"easing\">Easing</h4> <p><strong>As of jQuery 1.4.3</strong>, an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called <code>swing</code>, and one that progresses at a constant pace, called <code>linear</code>. More easing functions are available with the use of plug-ins, most notably the <a href=\"http://jqueryui.com\">jQuery UI suite</a>.</p> <h4 id=\"callback-function\">Callback Function</h4> <p>If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but <code>this</code> is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole. </p> <p><strong>As of jQuery 1.6</strong>, the <code><a href=\"promise\">.promise()</a></code> method can be used in conjunction with the <code><a href=\"deferred.done\">deferred.done()</a></code> method to execute a single callback for the animation as a whole when <em>all</em> matching elements have completed their animations ( See the <a href=\"promise#example-1\">example for .promise()</a> ). </p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> All jQuery effects, including <code>.fadeIn()</code>, can be turned off globally by setting <code>jQuery.fx.off = true</code>, which effectively sets the duration to 0. For more information, see <a href=\"jquery.fx.off\">jQuery.fx.off</a>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Animates hidden divs to fade in one by one, completing each animation within 600 milliseconds.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;fadeIn demo&lt;/title&gt;\n  &lt;style&gt;\n  span {\n    color: red;\n    cursor: pointer;\n  }\n  div {\n    margin: 3px;\n    width: 80px;\n    display: none;\n    height: 80px;\n    float: left;\n  }\n  #one {\n    background: #f00;\n  }\n  #two {\n    background: #0f0;\n  }\n  #three {\n    background: #00f;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;span&gt;Click here...&lt;/span&gt;\n&lt;div id=\"one\"&gt;&lt;/div&gt;\n&lt;div id=\"two\"&gt;&lt;/div&gt;\n&lt;div id=\"three\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( document.body ).click(function() {\n  $( \"div:hidden:first\" ).fadeIn( \"slow\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Fades a red block in over the text. Once the animation is done, it quickly fades in more text on top.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;fadeIn demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    position: relative;\n    width: 400px;\n    height: 90px;\n  }\n  div {\n    position: absolute;\n    width: 400px;\n    height: 65px;\n    font-size: 36px;\n    text-align: center;\n    color: yellow;\n    background: red;\n    padding-top: 25px;\n    top: 0;\n    left: 0;\n    display: none;\n  }\n  span {\n    display: none;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;\n  Let it be known that the party of the first part\n  and the party of the second part are henceforth\n  and hereto directed to assess the allegations\n  for factual correctness... (&lt;a href=\"#\"&gt;click!&lt;/a&gt;)\n  &lt;div&gt;&lt;span&gt;CENSORED!&lt;/span&gt;&lt;/div&gt;\n&lt;/p&gt;\n \n&lt;script&gt;\n$( \"a\" ).click(function() {\n  $( \"div\" ).fadeIn( 3000, function() {\n    $( \"span\" ).fadeIn( 100 );\n  });\n  return false;\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/fadeIn\" class=\"_attribution-link\">https://api.jquery.com/fadeIn</a>\n  </p>\n</div>\n","focusin":"<h1 class=\"entry-title\">.focusin()</h1> <div class=\"entry-content\"> <article id=\"focusin1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.focusin( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Bind an event handler to the \"focusin\" event.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"focusin-handler\" href=\"#focusin-handler\">.focusin( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"focusin-eventData-handler\" href=\"#focusin-eventData-handler\">.focusin( [eventData ], handler )</a> </h4> <ul> <li> <div><strong>eventData</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>An object containing data that will be passed to the event handler.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"focusin\" href=\"#focusin\">.focusin()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method is a shortcut for <code>.on( \"focusin\", handler )</code> in the first two variations, and <code>.trigger( \"focusin\" )</code> in the third.</p> <p>The <code>focusin</code> event is sent to an element when it, or any element inside of it, gains focus. This is distinct from the <a href=\"focus\">focus</a> event in that it supports detecting the focus event on parent elements (in other words, it supports event bubbling).</p> <p>This event will likely be used together with the <a href=\"focusout\">focusout</a> event.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> As the <code>.focusin()</code> method is just a shorthand for <code>.on( \"focusin\", handler )</code>, detaching is possible using <code>.off( \"focusin\" )</code>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Watch for a focus to occur within the paragraphs on the page.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;focusin demo&lt;/title&gt;\n  &lt;style&gt;\n  span {\n    display: none;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;&lt;input type=\"text\"&gt; &lt;span&gt;focusin fire&lt;/span&gt;&lt;/p&gt;\n&lt;p&gt;&lt;input type=\"password\"&gt; &lt;span&gt;focusin fire&lt;/span&gt;&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).focusin(function() {\n  $( this ).find( \"span\" ).css( \"display\", \"inline\" ).fadeOut( 1000 );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/focusin\" class=\"_attribution-link\">https://api.jquery.com/focusin</a>\n  </p>\n</div>\n","focusout":"<h1 class=\"entry-title\">.focusout()</h1> <div class=\"entry-content\"> <article id=\"focusout1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.focusout( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Bind an event handler to the \"focusout\" JavaScript event.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"focusout-handler\" href=\"#focusout-handler\">.focusout( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"focusout-eventData-handler\" href=\"#focusout-eventData-handler\">.focusout( [eventData ], handler )</a> </h4> <ul> <li> <div><strong>eventData</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>An object containing data that will be passed to the event handler.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"focusout\" href=\"#focusout\">.focusout()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method is a shortcut for <code>.on( \"focusout\", handler )</code> when passed arguments, and <code>.trigger( \"focusout\" )</code> when no arguments are passed.</p> <p>The <code>focusout</code> event is sent to an element when it, or any element inside of it, loses focus. This is distinct from the <a href=\"blur\">blur</a> event in that it supports detecting the loss of focus on descendant elements (in other words, it supports event bubbling).</p> <p>This event will likely be used together with the <a href=\"focusin\">focusin</a> event.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> As the <code>.focusout()</code> method is just a shorthand for <code>.on( \"focusout\", handler )</code>, detaching is possible using <code>.off( \"focusout\" )</code>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Watch for a loss of focus to occur inside paragraphs and note the difference between the <code>focusout</code> count and the <code>blur</code> count. (The <code>blur</code> count does not change because those events do not bubble.)</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;focusout demo&lt;/title&gt;\n  &lt;style&gt;\n  .inputs {\n    float: left;\n    margin-right: 1em;\n  }\n  .inputs p {\n    margin-top: 0;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div class=\"inputs\"&gt;\n  &lt;p&gt;\n    &lt;input type=\"text\"&gt;&lt;br&gt;\n    &lt;input type=\"text\"&gt;\n  &lt;/p&gt;\n  &lt;p&gt;\n    &lt;input type=\"password\"&gt;\n  &lt;/p&gt;\n&lt;/div&gt;\n&lt;div id=\"focus-count\"&gt;focusout fire&lt;/div&gt;\n&lt;div id=\"blur-count\"&gt;blur fire&lt;/div&gt;\n \n&lt;script&gt;\nvar focus = 0,\n  blur = 0;\n$( \"p\" )\n  .focusout(function() {\n    focus++;\n    $( \"#focus-count\" ).text( \"focusout fired: \" + focus + \"x\" );\n  })\n  .blur(function() {\n    blur++;\n    $( \"#blur-count\" ).text( \"blur fired: \" + blur + \"x\" );\n  });\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/focusout\" class=\"_attribution-link\">https://api.jquery.com/focusout</a>\n  </p>\n</div>\n","fadeout":"<h1 class=\"entry-title\">.fadeOut()</h1> <div class=\"entry-content\"> <article id=\"fadeOut1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.fadeOut( [duration ] [, complete ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Hide the matched elements by fading them to transparent.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"fadeOut-duration-complete\" href=\"#fadeOut-duration-complete\">.fadeOut( [duration ] [, complete ] )</a> </h4> <ul> <li> <div> <strong>duration</strong> (default: <code>400</code>)</div> <div>Type: <a href=\"types#Number\">Number</a> or <a href=\"types#String\">String</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function to call once the animation is complete, called once per matched element.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"fadeOut-options\" href=\"#fadeOut-options\">.fadeOut( options )</a> </h4> <ul><li> <div><strong>options</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>A map of additional options to pass to the method.</div> <ul> <li> <div> <strong>duration</strong> (default: <code>400</code>)</div> <div>Type: <a href=\"types#Number\">Number</a> or <a href=\"types#String\">String</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div> <strong>easing</strong> (default: <code>swing</code>)</div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string indicating which easing function to use for the transition.</div> </li> <li> <div> <strong>queue</strong> (default: <code>true</code>)</div> <div>Type: <a href=\"types#Boolean\">Boolean</a> or <a href=\"types#String\">String</a> </div> <div>A Boolean indicating whether to place the animation in the effects queue. If false, the animation will begin immediately. <strong>As of jQuery 1.7</strong>, the queue option can also accept a string, in which case the animation is added to the queue represented by that string. When a custom queue name is used the animation does not automatically start; you must call <code>.dequeue(\"queuename\")</code> to start it.</div> </li> <li> <div><strong>specialEasing</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a>)</span> </div> </li> <li> <div><strong>step</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Number\">Number</a> now, <a href=\"types#Tween\">Tween</a> tween )</div> <div>A function to be called for each animated property of each animated element. This function provides an opportunity to modify the Tween object to change the value of the property before it is set.</div> </li> <li> <div><strong>progress</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Number\">Number</a> progress, <a href=\"types#Number\">Number</a> remainingMs )</div> <div>A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function that is called once the animation on an element is complete.</div> </li> <li> <div><strong>start</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation )</div> <div>A function to call when the animation on an element begins.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>done</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Boolean\">Boolean</a> jumpedToEnd )</div> <div>A function to be called when the animation on an element completes (its Promise object is resolved).<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>fail</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Boolean\">Boolean</a> jumpedToEnd )</div> <div>A function to be called when the animation on an element fails to complete (its Promise object is rejected).<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>always</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Boolean\">Boolean</a> jumpedToEnd )</div> <div>A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected).<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> </ul> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"fadeOut-duration-easing-complete\" href=\"#fadeOut-duration-easing-complete\">.fadeOut( [duration ] [, easing ] [, complete ] )</a> </h4> <ul> <li> <div> <strong>duration</strong> (default: <code>400</code>)</div> <div>Type: <a href=\"types#Number\">Number</a> or <a href=\"types#String\">String</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div> <strong>easing</strong> (default: <code>swing</code>)</div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string indicating which easing function to use for the transition.</div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function to call once the animation is complete, called once per matched element.</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.fadeOut()</code> method animates the opacity of the matched elements. Once the opacity reaches 0, the <code>display</code> style property is set to <code>none</code>, so the element no longer affects the layout of the page.</p> <p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of <code>200</code> and <code>600</code> milliseconds, respectively. If any other string is supplied, or if the <code>duration</code> parameter is omitted, the default duration of <code>400</code> milliseconds is used.</p> <p>We can animate any element, such as a simple image:</p> <pre class=\"syntaxhighlighter xml\">&lt;div id=\"clickme\"&gt;\n  Click here\n&lt;/div&gt;\n&lt;img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\"&gt;</pre> <p>With the element initially shown, we can hide it slowly:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#clickme\" ).click(function() {\n  $( \"#book\" ).fadeOut( \"slow\", function() {\n    // Animation complete.\n  });\n});</pre> <figure> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_37.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_38.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_39.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_40.png\" alt=\"\"> <figcaption>Figure 1 - Illustration of the <code>fadeOut()</code> effect</figcaption> </figure> <div class=\"warning\"> <p><strong>Note: </strong>To avoid unnecessary DOM manipulation, <code>.fadeOut()</code> will not hide an element that is already considered hidden. For information on which elements jQuery considers hidden, see <a href=\"hidden-selector\"> :hidden Selector</a>.</p> </div> <h4 id=\"easing\">Easing</h4> <p><strong>As of jQuery 1.4.3</strong>, an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called <code>swing</code>, and one that progresses at a constant pace, called <code>linear</code>. More easing functions are available with the use of plug-ins, most notably the <a href=\"http://jqueryui.com\">jQuery UI suite</a>.</p> <h4 id=\"callback-function\">Callback Function</h4> <p>If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but <code>this</code> is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.</p> <p><strong>As of jQuery 1.6</strong>, the <code><a href=\"promise\">.promise()</a></code> method can be used in conjunction with the <code><a href=\"deferred.done\">deferred.done()</a></code> method to execute a single callback for the animation as a whole when <em>all</em> matching elements have completed their animations ( See the <a href=\"promise#example-1\">example for .promise()</a> ). </p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> All jQuery effects, including <code>.fadeOut()</code>, can be turned off globally by setting <code>jQuery.fx.off = true</code>, which effectively sets the duration to 0. For more information, see <a href=\"jquery.fx.off\">jQuery.fx.off</a>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Animates all paragraphs to fade out, completing the animation within 600 milliseconds.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;fadeOut demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    font-size: 150%;\n    cursor: pointer;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;\n  If you click on this paragraph\n  you'll see it just fade away.\n&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).click(function() {\n  $( \"p\" ).fadeOut( \"slow\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Fades out spans in one section that you click on.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;fadeOut demo&lt;/title&gt;\n  &lt;style&gt;\n  span {\n    cursor: pointer;\n  }\n  span.hilite {\n    background: yellow;\n  }\n  div {\n    display: inline;\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;h3&gt;Find the modifiers - &lt;div&gt;&lt;/div&gt;&lt;/h3&gt;\n&lt;p&gt;\n  If you &lt;span&gt;really&lt;/span&gt; want to go outside\n  &lt;span&gt;in the cold&lt;/span&gt; then make sure to wear\n  your &lt;span&gt;warm&lt;/span&gt; jacket given to you by\n  your &lt;span&gt;favorite&lt;/span&gt; teacher.\n&lt;/p&gt;\n \n&lt;script&gt;\n$( \"span\" ).click(function() {\n  $( this ).fadeOut( 1000, function() {\n    $( \"div\" ).text( \"'\" + $( this ).text() + \"' has faded!\" );\n    $( this ).remove();\n  });\n});\n$( \"span\" ).hover(function() {\n  $( this ).addClass( \"hilite\" );\n}, function() {\n  $( this ).removeClass( \"hilite\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-2\"> <p>Fades out two divs, one with a \"linear\" easing and one with the default, \"swing,\" easing.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;fadeOut demo&lt;/title&gt;\n  &lt;style&gt;\n  .box,\n  button {\n    float: left;\n    margin: 5px 10px 5px 0;\n  }\n  .box {\n    height: 80px;\n    width: 80px;\n    background: #090;\n  }\n  #log {\n    clear: left;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button id=\"btn1\"&gt;fade out&lt;/button&gt;\n&lt;button id=\"btn2\"&gt;show&lt;/button&gt;\n \n&lt;div id=\"log\"&gt;&lt;/div&gt;\n \n&lt;div id=\"box1\" class=\"box\"&gt;linear&lt;/div&gt;\n&lt;div id=\"box2\" class=\"box\"&gt;swing&lt;/div&gt;\n \n&lt;script&gt;\n$( \"#btn1\" ).click(function() {\n  function complete() {\n    $( \"&lt;div&gt;\" ).text( this.id ).appendTo( \"#log\" );\n  }\n  $( \"#box1\" ).fadeOut( 1600, \"linear\", complete );\n  $( \"#box2\" ).fadeOut( 1600, complete );\n});\n \n$( \"#btn2\" ).click(function() {\n  $( \"div\" ).show();\n  $( \"#log\" ).empty();\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/fadeOut\" class=\"_attribution-link\">https://api.jquery.com/fadeOut</a>\n  </p>\n</div>\n","has":"<h1 class=\"entry-title\">.has()</h1> <div class=\"entry-content\"> <article id=\"has1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.has( selector )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Reduce the set of matched elements to those that have a descendant that matches the selector or DOM element.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"has-selector\" href=\"#has-selector\">.has( selector )</a> </h4> <ul><li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing a selector expression to match elements against.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"has-contained\" href=\"#has-contained\">.has( contained )</a> </h4> <ul><li> <div><strong>contained</strong></div> <div>Type: <a href=\"types#Element\">Element</a> </div> <div>A DOM element to match elements against.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Given a jQuery object that represents a set of DOM elements, the <code>.has()</code> method constructs a new jQuery object from a subset of the matching elements. The supplied selector is tested against the descendants of the matching elements; the element will be included in the result if any of its descendant elements matches the selector.</p> <p>Consider a page with a nested list as follows:</p> <pre class=\"syntaxhighlighter xml\"> &lt;ul&gt;\n  &lt;li&gt;list item 1&lt;/li&gt;\n  &lt;li&gt;list item 2\n    &lt;ul&gt;\n      &lt;li&gt;list item 2-a&lt;/li&gt;\n      &lt;li&gt;list item 2-b&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n  &lt;li&gt;list item 3&lt;/li&gt;\n  &lt;li&gt;list item 4&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>We can apply this method to the set of list items as follows:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li\" ).has( \"ul\" ).css( \"background-color\", \"red\" );</pre> <p>The result of this call is a red background for item 2, as it is the only <code>&lt;li&gt;</code> that has a <code>&lt;ul&gt;</code> among its descendants.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Check if an element is inside another.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;has demo&lt;/title&gt;\n  &lt;style&gt;\n  .full {\n    border: 1px solid red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;ul&gt;&lt;li&gt;Does the UL contain an LI?&lt;/li&gt;&lt;/ul&gt;\n \n&lt;script&gt;\n$( \"ul\" ).append( \"&lt;li&gt;\" +\n  ( $( \"ul\" ).has( \"li\" ).length ? \"Yes\" : \"No\" ) +\n  \"&lt;/li&gt;\" );\n$( \"ul\" ).has( \"li\" ).addClass( \"full\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/has\" class=\"_attribution-link\">https://api.jquery.com/has</a>\n  </p>\n</div>\n","has-selector":"<h1 class=\"entry-title\">:has() Selector</h1> <div class=\"entry-content\"> <article id=\"has1\" class=\"entry selector\"><h2 class=\"section-title\"><span>has selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects elements which contain at least one element that matches the specified selector.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.1.4/\">1.1.4</a></span>jQuery( \":has(selector)\" )</h4> <p class=\"argument\"><strong>selector: </strong>Any selector.</p> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The expression <code>$( \"div:has(p)\" )</code> matches a <code>&lt;div&gt;</code> if a <code>&lt;p&gt;</code> exists anywhere among its descendants, not just as a direct child.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> Because <code>:has()</code> is a jQuery extension and not part of the CSS specification, queries using <code>:has()</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. For better performance in modern browsers, use <code>$( \"your-pure-css-selector\" ).has( selector/DOMElement )</code> instead. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Adds the class \"test\" to all divs that have a paragraph inside of them.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;has demo&lt;/title&gt;\n  &lt;style&gt;\n  .test {\n    border: 3px inset red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;&lt;p&gt;Hello in a paragraph&lt;/p&gt;&lt;/div&gt;\n&lt;div&gt;Hello again! (with no paragraph)&lt;/div&gt;\n \n&lt;script&gt;\n$( \"div:has(p)\" ).addClass( \"test\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/has-selector\" class=\"_attribution-link\">https://api.jquery.com/has-selector</a>\n  </p>\n</div>\n","fadetoggle":"<h1 class=\"entry-title\">.fadeToggle()</h1> <div class=\"entry-content\"> <article id=\"fadeToggle1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.fadeToggle( [duration ] [, easing ] [, complete ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Display or hide the matched elements by animating their opacity.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.4/\">1.4.4</a></span><a id=\"fadeToggle-duration-easing-complete\" href=\"#fadeToggle-duration-easing-complete\">.fadeToggle( [duration ] [, easing ] [, complete ] )</a> </h4> <ul> <li> <div> <strong>duration</strong> (default: <code>400</code>)</div> <div>Type: <a href=\"types#Number\">Number</a> or <a href=\"types#String\">String</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div> <strong>easing</strong> (default: <code>swing</code>)</div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string indicating which easing function to use for the transition.</div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function to call once the animation is complete, called once per matched element.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.4/\">1.4.4</a></span><a id=\"fadeToggle-options\" href=\"#fadeToggle-options\">.fadeToggle( options )</a> </h4> <ul><li> <div><strong>options</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>A map of additional options to pass to the method.</div> <ul> <li> <div> <strong>duration</strong> (default: <code>400</code>)</div> <div>Type: <a href=\"types#Number\">Number</a> or <a href=\"types#String\">String</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div> <strong>easing</strong> (default: <code>swing</code>)</div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string indicating which easing function to use for the transition.</div> </li> <li> <div> <strong>queue</strong> (default: <code>true</code>)</div> <div>Type: <a href=\"types#Boolean\">Boolean</a> or <a href=\"types#String\">String</a> </div> <div>A Boolean indicating whether to place the animation in the effects queue. If false, the animation will begin immediately. <strong>As of jQuery 1.7</strong>, the queue option can also accept a string, in which case the animation is added to the queue represented by that string. When a custom queue name is used the animation does not automatically start; you must call <code>.dequeue(\"queuename\")</code> to start it.</div> </li> <li> <div><strong>specialEasing</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a>)</span> </div> </li> <li> <div><strong>step</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Number\">Number</a> now, <a href=\"types#Tween\">Tween</a> tween )</div> <div>A function to be called for each animated property of each animated element. This function provides an opportunity to modify the Tween object to change the value of the property before it is set.</div> </li> <li> <div><strong>progress</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Number\">Number</a> progress, <a href=\"types#Number\">Number</a> remainingMs )</div> <div>A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function that is called once the animation on an element is complete.</div> </li> <li> <div><strong>start</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation )</div> <div>A function to call when the animation on an element begins.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>done</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Boolean\">Boolean</a> jumpedToEnd )</div> <div>A function to be called when the animation on an element completes (its Promise object is resolved).<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>fail</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Boolean\">Boolean</a> jumpedToEnd )</div> <div>A function to be called when the animation on an element fails to complete (its Promise object is rejected).<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>always</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Boolean\">Boolean</a> jumpedToEnd )</div> <div>A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected).<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> </ul> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.fadeToggle()</code> method animates the opacity of the matched elements. When called on a visible element, the element's <code>display</code> style property is set to <code>none</code> once the opacity reaches 0, so the element no longer affects the layout of the page.</p> <p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of <code>200</code> and <code>600</code> milliseconds, respectively.</p> <h4 id=\"easing\">Easing</h4> <p>The string representing an easing function specifies the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called <code>swing</code>, and one that progresses at a constant pace, called <code>linear</code>. More easing functions are available with the use of plug-ins, most notably the <a href=\"http://jqueryui.com\">jQuery UI suite</a>.</p> <h4 id=\"callback-function\">Callback Function</h4> <p>If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but <code>this</code> is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.</p> <p><strong>As of jQuery 1.6</strong>, the <code><a href=\"promise\">.promise()</a></code> method can be used in conjunction with the <code><a href=\"deferred.done\">deferred.done()</a></code> method to execute a single callback for the animation as a whole when <em>all</em> matching elements have completed their animations ( See the <a href=\"promise#example-1\">example for .promise()</a> ). </p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> All jQuery effects, including <code>.fadeToggle()</code>, can be turned off globally by setting <code>jQuery.fx.off = true</code>, which effectively sets the duration to 0. For more information, see <a href=\"jquery.fx.off\">jQuery.fx.off</a>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Fades first paragraph in or out, completing the animation within 600 milliseconds and using a linear easing. Fades last paragraph in or out for 200 milliseconds, inserting a \"finished\" message upon completion. </p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;fadeToggle demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button&gt;fadeToggle p1&lt;/button&gt;\n&lt;button&gt;fadeToggle p2&lt;/button&gt;\n&lt;p&gt;This paragraph has a slow, linear fade.&lt;/p&gt;\n&lt;p&gt;This paragraph has a fast animation.&lt;/p&gt;\n&lt;div id=\"log\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"button:first\" ).click(function() {\n  $( \"p:first\" ).fadeToggle( \"slow\", \"linear\" );\n});\n$( \"button:last\" ).click(function() {\n  $( \"p:last\" ).fadeToggle( \"fast\", function() {\n    $( \"#log\" ).append( \"&lt;div&gt;finished&lt;/div&gt;\" );\n  });\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/fadeToggle\" class=\"_attribution-link\">https://api.jquery.com/fadeToggle</a>\n  </p>\n</div>\n","first":"<h1 class=\"entry-title\">.first()</h1> <div class=\"entry-content\"> <article id=\"first1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.first()</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Reduce the set of matched elements to the first in the set.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"first\" href=\"#first\">.first()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Given a jQuery object that represents a set of DOM elements, the <code>.first()</code> method constructs a new jQuery object from the first element in that set.</p> <p>Consider a page with a simple list on it:</p> <pre class=\"syntaxhighlighter xml\">&lt;ul&gt;\n  &lt;li&gt;list item 1&lt;/li&gt;\n  &lt;li&gt;list item 2&lt;/li&gt;\n  &lt;li&gt;list item 3&lt;/li&gt;\n  &lt;li&gt;list item 4&lt;/li&gt;\n  &lt;li&gt;list item 5&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>We can apply this method to the set of list items:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li\" ).first().css( \"background-color\", \"red\" );</pre> <p>The result of this call is a red background for the first item.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Highlight the first span in a paragraph.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;first demo&lt;/title&gt;\n  &lt;style&gt;\n  .highlight{\n    background-color: yellow\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;\n  &lt;span&gt;Look:&lt;/span&gt;\n  &lt;span&gt;This is some text in a paragraph.&lt;/span&gt;\n  &lt;span&gt;This is a note about it.&lt;/span&gt;\n&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p span\" ).first().addClass( \"highlight\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/first\" class=\"_attribution-link\">https://api.jquery.com/first</a>\n  </p>\n</div>\n","first-of-type-selector":"<h1 class=\"entry-title\">:first-of-type Selector</h1> <div class=\"entry-content\"> <article id=\"first-of-type1\" class=\"entry selector\"><h2 class=\"section-title\"><span>first-of-type selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all elements that are the first among siblings of the same element name.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.9/\">1.9</a></span>jQuery( \":first-of-type\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>:first-of-type</code> selector matches elements that have no other element with both the same parent and the same element name coming before it in the document tree.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Find the first span in each matched div and add a class to it.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;first-of-type demo&lt;/title&gt;\n  &lt;style&gt;\n  span.fot {\n    color: red;\n    font-size: 120%;\n    font-style: italic;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;\n  &lt;span&gt;Corey,&lt;/span&gt;\n  &lt;span&gt;Yehuda,&lt;/span&gt;\n  &lt;span&gt;Adam,&lt;/span&gt;\n  &lt;span&gt;Todd&lt;/span&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;b&gt;Nobody,&lt;/b&gt;\n  &lt;span&gt;Jörn,&lt;/span&gt;\n  &lt;span&gt;Scott,&lt;/span&gt;\n  &lt;span&gt;Timo&lt;/span&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\n$( \"span:first-of-type\" ).addClass( \"fot\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/first-of-type-selector\" class=\"_attribution-link\">https://api.jquery.com/first-of-type-selector</a>\n  </p>\n</div>\n","file-selector":"<h1 class=\"entry-title\">:file Selector</h1> <div class=\"entry-content\"> <article id=\"file1\" class=\"entry selector\"><h2 class=\"section-title\"><span>file selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all elements of type file.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \":file\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p><code>:file</code> is equivalent to <code>[type=\"file\"]</code>. As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector (\"*\") is implied. In other words, the bare <code>$( \":file\" )</code> is equivalent to <code>$(\"*:file\" )</code>, so <code>$( \"input:file\" )</code> should be used instead. </p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> Because <code>:file</code> is a jQuery extension and not part of the CSS specification, queries using <code>:file</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. For better performance in modern browsers, use <code>[type=\"file\"]</code> instead. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds all file inputs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;file demo&lt;/title&gt;\n  &lt;style&gt;\n  textarea {\n    height: 45px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;form&gt;\n  &lt;input type=\"button\" value=\"Input Button\"&gt;\n  &lt;input type=\"checkbox\"&gt;\n  &lt;input type=\"file\"&gt;\n  &lt;input type=\"hidden\"&gt;\n  &lt;input type=\"image\"&gt;\n  &lt;input type=\"password\"&gt;\n  &lt;input type=\"radio\"&gt;\n  &lt;input type=\"reset\"&gt;\n  &lt;input type=\"submit\"&gt;\n  &lt;input type=\"text\"&gt;\n  &lt;select&gt;&lt;option&gt;Option&lt;/option&gt;&lt;/select&gt;\n  &lt;textarea&gt;&lt;/textarea&gt;\n  &lt;button&gt;Button&lt;/button&gt;\n&lt;/form&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar input = $( \"input:file\" ).css({\n  background: \"yellow\",\n  border: \"3px red solid\"\n});\n$( \"div\" )\n  .text( \"For this type jQuery found \" + input.length + \".\" )\n  .css( \"color\", \"red\" );\n$( \"form\" ).submit(function( event ) {\n  event.preventDefault();\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/file-selector\" class=\"_attribution-link\">https://api.jquery.com/file-selector</a>\n  </p>\n</div>\n","filter":"<h1 class=\"entry-title\">.filter()</h1> <div class=\"entry-content\"> <article id=\"filter1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.filter( selector )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Reduce the set of matched elements to those that match the selector or pass the function's test. </p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"filter-selector\" href=\"#filter-selector\">.filter( selector )</a> </h4> <ul><li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> </div> <div>A string containing a selector expression to match the current set of elements against.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"filter-function\" href=\"#filter-function\">.filter( function )</a> </h4> <ul><li> <div><strong>function</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Integer\">Integer</a> index, <a href=\"types#Element\">Element</a> element ) =&gt; <a href=\"types#Boolean\">Boolean</a> </div> <div>A function used as a test for each element in the set. <code>this</code> is the current DOM element.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"filter-elements\" href=\"#filter-elements\">.filter( elements )</a> </h4> <ul><li> <div><strong>elements</strong></div> <div>Type: <a href=\"types#Element\">Element</a> </div> <div>One or more DOM elements to match the current set of elements against.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"filter-selection\" href=\"#filter-selection\">.filter( selection )</a> </h4> <ul><li> <div><strong>selection</strong></div> <div>Type: <a href=\"types#jQuery\">jQuery</a> </div> <div>An existing jQuery object to match the current set of elements against.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Given a jQuery object that represents a set of DOM elements, the <code>.filter()</code> method constructs a new jQuery object from a subset of the matching elements. The supplied selector is tested against each element; all elements matching the selector will be included in the result.</p> <p>Consider a page with a simple list on it:</p> <pre class=\"syntaxhighlighter xml\">&lt;ul&gt;\n  &lt;li&gt;list item 1&lt;/li&gt;\n  &lt;li&gt;list item 2&lt;/li&gt;\n  &lt;li&gt;list item 3&lt;/li&gt;\n  &lt;li&gt;list item 4&lt;/li&gt;\n  &lt;li&gt;list item 5&lt;/li&gt;\n  &lt;li&gt;list item 6&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>We can apply this method to the set of list items:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li\" ).filter( \":even\" ).css( \"background-color\", \"red\" );</pre> <p>The result of this call is a red background for items 1, 3, and 5, as they match the selector (recall that <code>:even</code> and <code>:odd</code> use 0-based indexing).</p> <h4 id=\"using-filter-function\">Using a Filter Function</h4> <p>The second form of this method allows us to filter elements against a function rather than a selector. For each element, if the function returns <code>true</code> (or a \"truthy\" value), the element will be included in the filtered set; otherwise, it will be excluded. Suppose we have a somewhat more involved HTML snippet:</p> <pre class=\"syntaxhighlighter xml\">&lt;ul&gt;\n  &lt;li&gt;&lt;strong&gt;list&lt;/strong&gt; item 1 - one strong tag&lt;/li&gt;\n  &lt;li&gt;&lt;strong&gt;list&lt;/strong&gt; item &lt;strong&gt;2&lt;/strong&gt; -\n    two &lt;span&gt;strong tags&lt;/span&gt;&lt;/li&gt;\n  &lt;li&gt;list item 3&lt;/li&gt;\n  &lt;li&gt;list item 4&lt;/li&gt;\n  &lt;li&gt;list item 5&lt;/li&gt;\n  &lt;li&gt;list item 6&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>We can select the list items, then filter them based on their contents:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li\" )\n  .filter(function( index ) {\n    return $( \"strong\", this ).length === 1;\n  })\n    .css( \"background-color\", \"red\" );</pre> <p>This code will alter the first list item only, as it contains exactly one <code>&lt;strong&gt;</code> tag. Within the filter function, <code>this</code> refers to each DOM element in turn. The parameter passed to the function tells us the index of that DOM element within the set matched by the jQuery object.</p> <p>We can also take advantage of the <code>index</code> passed through the function, which indicates the 0-based position of the element within the unfiltered set of matched elements:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li\" )\n  .filter(function( index ) {\n    return index % 3 === 2;\n  })\n    .css( \"background-color\", \"red\" );</pre> <p>This alteration to the code will cause the third and sixth list items to be highlighted, as it uses the modulus operator (<code>%</code>) to select every item with an <code>index</code> value that, when divided by 3, has a remainder of <code>2</code>.</p>  </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Change the color of all divs; then add a border to those with a \"middle\" class.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;filter demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    width: 60px;\n    height: 60px;\n    margin: 5px;\n    float: left;\n    border: 2px white solid;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;&lt;/div&gt;\n&lt;div class=\"middle\"&gt;&lt;/div&gt;\n&lt;div class=\"middle\"&gt;&lt;/div&gt;\n&lt;div class=\"middle\"&gt;&lt;/div&gt;\n&lt;div class=\"middle\"&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"div\" )\n  .css( \"background\", \"#c8ebcc\" )\n  .filter( \".middle\" )\n    .css( \"border-color\", \"red\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Change the color of all divs; then add a border to the second one (index == 1) and the div with an id of \"fourth.\"</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;filter demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    width: 60px;\n    height: 60px;\n    margin: 5px;\n    float: left;\n    border: 3px white solid;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div id=\"first\"&gt;&lt;/div&gt;\n&lt;div id=\"second\"&gt;&lt;/div&gt;\n&lt;div id=\"third\"&gt;&lt;/div&gt;\n&lt;div id=\"fourth\"&gt;&lt;/div&gt;\n&lt;div id=\"fifth\"&gt;&lt;/div&gt;\n&lt;div id=\"sixth\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"div\" )\n  .css( \"background\", \"#b4b0da\" )\n  .filter(function( index ) {\n    return index === 1 || $( this ).attr( \"id\" ) === \"fourth\";\n  })\n    .css( \"border\", \"3px double red\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-2\"> <p>Select all divs and filter the selection with a DOM element, keeping only the one with an id of \"unique\".</p> <pre class=\"syntaxhighlighter javascript\">$( \"div\" ).filter( document.getElementById( \"unique\" ) );</pre> </div> <div class=\"entry-example\" id=\"example-3\"> <p>Select all divs and filter the selection with a jQuery object, keeping only the one with an id of \"unique\".</p> <pre class=\"syntaxhighlighter javascript\">$( \"div\" ).filter( $( \"#unique\" ) );</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/filter\" class=\"_attribution-link\">https://api.jquery.com/filter</a>\n  </p>\n</div>\n","first-selector":"<h1 class=\"entry-title\">:first Selector</h1> <div class=\"entry-content\"> <article id=\"first1\" class=\"entry selector\"><h2 class=\"section-title\"><span>first selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects the first matched DOM element.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \":first\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>:first</code> pseudo-class is equivalent to <code>:eq( 0 )</code>. It could also be written as <code>:lt( 1 )</code>. While this matches only a single element, <a href=\"first-child-selector\">:first-child</a> can match more than one: One for each parent.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> Because <code>:first</code> is a jQuery extension and not part of the CSS specification, queries using <code>:first</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. To achieve the best performance when using <code>:first</code> to select elements, first select the elements using a pure CSS selector, then use <a href=\"filter\"><code>.filter(\":first\")</code></a>. </li> <li> Selected elements are in the order of their appearance in the document. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds the first table row.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;first demo&lt;/title&gt;\n  &lt;style&gt;\n  td {\n    color: blue;\n    font-weight: bold;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;table&gt;\n  &lt;tr&gt;&lt;td&gt;Row 1&lt;/td&gt;&lt;/tr&gt;\n  &lt;tr&gt;&lt;td&gt;Row 2&lt;/td&gt;&lt;/tr&gt;\n  &lt;tr&gt;&lt;td&gt;Row 3&lt;/td&gt;&lt;/tr&gt;\n&lt;/table&gt;\n \n&lt;script&gt;\n$( \"tr:first\" ).css( \"font-style\", \"italic\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/first-selector\" class=\"_attribution-link\">https://api.jquery.com/first-selector</a>\n  </p>\n</div>\n","finish":"<h1 class=\"entry-title\">.finish()</h1> <div class=\"entry-content\"> <article id=\"finish1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.finish( [queue ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Stop the currently-running animation, remove all queued animations, and complete all animations for the matched elements.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.9/\">1.9</a></span><a id=\"finish-queue\" href=\"#finish-queue\">.finish( [queue ] )</a> </h4> <ul><li> <div> <strong>queue</strong> (default: <code>'fx'</code>)</div> <div>Type: <a href=\"types#String\">String</a> </div> <div>The name of the queue in which to stop animations.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>When <code>.finish()</code> is called on an element, the currently-running animation and all queued animations (if any) immediately stop and their CSS properties set to their target values. All queued animations are removed.</p> <p>If the first argument is provided, only the animations in the queue represented by that string will be stopped.</p> <p>The <code>.finish()</code> method is similar to <code>.stop(true, true)</code> in that it clears the queue and the current animation jumps to its end value. It differs, however, in that <code>.finish()</code> also causes the CSS property of all <em>queued</em> animations to jump to their end values, as well.</p> <div class=\"warning\"> <p>Animations may be stopped globally by setting the property <code>$.fx.off</code> to <code>true</code>. When this is done, all animation methods will immediately set elements to their final state when called, rather than displaying an effect.</p> </div> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Click the Go button once to start the animation, and then click the other buttons to see how they affect the current and queued animations.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;finish demo&lt;/title&gt;\n  &lt;style&gt;\n  .box {\n    position: absolute;\n    top: 10px;\n    left: 10px;\n    width: 15px;\n    height: 15px;\n    background: black;\n  }\n  #path {\n    height: 244px;\n    font-size: 70%;\n    border-left: 2px dashed red;\n    border-bottom: 2px dashed green;\n    border-right: 2px dashed blue;\n  }\n  button {\n    width: 12em;\n    display: block;\n    text-align: left;\n    margin: 0 auto;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div class=\"box\"&gt;&lt;/div&gt;\n&lt;div id=\"path\"&gt;\n  &lt;button id=\"go\"&gt;Go&lt;/button&gt;\n  &lt;br&gt;\n  &lt;button id=\"bstt\" class=\"b\"&gt;.stop( true,true )&lt;/button&gt;\n  &lt;button id=\"bcf\" class=\"b\"&gt;.clearQueue().finish()&lt;/button&gt;\n  &lt;br&gt;\n  &lt;button id=\"bstf\" class=\"b\"&gt;.stop( true, false )&lt;/button&gt;\n  &lt;button id=\"bcs\" class=\"b\"&gt;.clearQueue().stop()&lt;/button&gt;\n  &lt;br&gt;\n  &lt;button id=\"bsff\" class=\"b\"&gt;.stop( false, false )&lt;/button&gt;\n  &lt;button id=\"bs\" class=\"b\"&gt;.stop()&lt;/button&gt;\n  &lt;br&gt;\n  &lt;button id=\"bsft\" class=\"b\"&gt;.stop( false, true )&lt;/button&gt;\n  &lt;br&gt;\n  &lt;button id=\"bf\" class=\"b\"&gt;.finish()&lt;/button&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\nvar horiz = $( \"#path\" ).width() - 20,\n  vert = $( \"#path\" ).height() - 20;\n \nvar btns = {\n  bstt: function() {\n    $( \"div.box\" ).stop( true, true );\n  },\n  bs: function() {\n    $( \"div.box\" ).stop();\n  },\n  bsft: function() {\n    $( \"div.box\" ).stop( false, true );\n  },\n  bf: function() {\n    $( \"div.box\" ).finish();\n  },\n  bcf: function() {\n    $( \"div.box\" ).clearQueue().finish();\n  },\n  bsff: function() {\n    $( \"div.box\" ).stop( false, false );\n  },\n  bstf: function() {\n    $( \"div.box\" ).stop( true, false );\n  },\n  bcs: function() {\n    $( \"div.box\" ).clearQueue().stop();\n  }\n};\n \n$( \"button.b\" ).on( \"click\", function() {\n  btns[ this.id ]();\n});\n \n$( \"#go\" ).on( \"click\", function() {\n  $( \".box\" )\n    .clearQueue()\n    .stop()\n    .css({\n      left: 10,\n      top: 10\n    })\n    .animate({\n      top: vert\n    }, 3000 )\n    .animate({\n      left: horiz\n    }, 3000 )\n    .animate({\n      top: 10\n    }, 3000 );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/finish\" class=\"_attribution-link\">https://api.jquery.com/finish</a>\n  </p>\n</div>\n","hover":"<h1 class=\"entry-title\">.hover()</h1> <div class=\"entry-content\"> Bind one or two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements.<div class=\"toc\"> <h4><span>Contents:</span></h4> <ul class=\"toc-list\"> <li> <a href=\"#hover1\">.hover( handlerIn, handlerOut )</a><ul><li><a href=\"#hover-handlerIn-handlerOut\">.hover( handlerIn, handlerOut )</a></li></ul> </li> <li> <a href=\"#hover2\">.hover( handlerInOut )</a><ul><li><a href=\"#hover-handlerInOut\">.hover( handlerInOut )</a></li></ul> </li> </ul> </div>\n<article id=\"hover1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.hover( handlerIn, handlerOut )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Bind two handlers to the matched elements, to be executed when the mouse pointer enters and leaves the elements.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"hover-handlerIn-handlerOut\" href=\"#hover-handlerIn-handlerOut\">.hover( handlerIn, handlerOut )</a> </h4> <ul> <li> <div><strong>handlerIn</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute when the mouse pointer enters the element.</div> </li> <li> <div><strong>handlerOut</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute when the mouse pointer leaves the element.</div> </li> </ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.hover()</code> method binds handlers for both <code>mouseenter</code> and <code>mouseleave</code> events. You can use it to simply apply behavior to an element during the time the mouse is within the element.</p> <p>Calling <code>$( selector ).hover( handlerIn, handlerOut )</code> is shorthand for:</p> <pre class=\"syntaxhighlighter javascript\">$( selector ).mouseenter( handlerIn ).mouseleave( handlerOut );</pre> <p>See the discussions for <code><a href=\"mouseenter\">.mouseenter()</a></code> and <code><a href=\"mouseleave\">.mouseleave()</a></code> for more details.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>To add a special style to list items that are being hovered over, try:</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;hover demo&lt;/title&gt;\n  &lt;style&gt;\n  ul {\n    margin-left: 20px;\n    color: blue;\n  }\n  li {\n    cursor: default;\n  }\n  span {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;ul&gt;\n  &lt;li&gt;Milk&lt;/li&gt;\n  &lt;li&gt;Bread&lt;/li&gt;\n  &lt;li class=\"fade\"&gt;Chips&lt;/li&gt;\n  &lt;li class=\"fade\"&gt;Socks&lt;/li&gt;\n&lt;/ul&gt;\n \n&lt;script&gt;\n$( \"li\" ).hover(\n  function() {\n    $( this ).append( $( \"&lt;span&gt; ***&lt;/span&gt;\" ) );\n  }, function() {\n    $( this ).find( \"span:last\" ).remove();\n  }\n);\n \n$( \"li.fade\" ).hover(function() {\n  $( this ).fadeOut( 100 );\n  $( this ).fadeIn( 500 );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>To add a special style to table cells that are being hovered over, try:</p> <pre class=\"syntaxhighlighter javascript\">$( \"td\" ).hover(\n  function() {\n    $( this ).addClass( \"hover\" );\n  }, function() {\n    $( this ).removeClass( \"hover\" );\n  }\n);</pre> </div> <div class=\"entry-example\" id=\"example-2\"> <p>To unbind the above example use:</p> <pre class=\"syntaxhighlighter javascript\">$( \"td\" ).off( \"mouseenter mouseleave\" );</pre> </div></section> </div></article><article id=\"hover2\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.hover( handlerInOut )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Bind a single handler to the matched elements, to be executed when the mouse pointer enters or leaves the elements.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"hover-handlerInOut\" href=\"#hover-handlerInOut\">.hover( handlerInOut )</a> </h4> <ul><li> <div><strong>handlerInOut</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute when the mouse pointer enters or leaves the element.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc-1\"> <p>The <code>.hover()</code> method, when passed a single function, will execute that handler for both <code>mouseenter</code> and <code>mouseleave</code> events. This allows the user to use jQuery's various toggle methods within the handler or to respond differently within the handler depending on the <code>event.type</code>.</p> <p>Calling <code>$(selector).hover(handlerInOut)</code> is shorthand for:</p> <pre class=\"syntaxhighlighter javascript\">$( selector ).on( \"mouseenter mouseleave\", handlerInOut );</pre> <p>See the discussions for <code><a href=\"mouseenter\">.mouseenter()</a></code> and <code><a href=\"mouseleave\">.mouseleave()</a></code> for more details.</p> </div> <section class=\"entry-examples\" id=\"entry-examples-1\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-1-0\"> <p>Slide the next sibling LI up or down on hover, and toggle a class.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;hover demo&lt;/title&gt;\n  &lt;style&gt;\n  ul {\n    margin-left: 20px;\n    color: blue;\n  }\n  li {\n    cursor: default;\n  }\n  li.active {\n    background: black;\n    color: white;\n  }\n  span {\n    color:red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;ul&gt;\n  &lt;li&gt;Milk&lt;/li&gt;\n  &lt;li&gt;White&lt;/li&gt;\n  &lt;li&gt;Carrots&lt;/li&gt;\n  &lt;li&gt;Orange&lt;/li&gt;\n  &lt;li&gt;Broccoli&lt;/li&gt;\n  &lt;li&gt;Green&lt;/li&gt;\n&lt;/ul&gt;\n \n&lt;script&gt;\n$( \"li\" )\n  .filter( \":odd\" )\n    .hide()\n  .end()\n  .filter( \":even\" )\n    .hover(function() {\n      $( this )\n        .toggleClass( \"active\" )\n        .next()\n          .stop( true, true )\n          .slideToggle();\n    });\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/hover\" class=\"_attribution-link\">https://api.jquery.com/hover</a>\n  </p>\n</div>\n","focus-selector":"<h1 class=\"entry-title\">:focus Selector</h1> <div class=\"entry-content\"> <article id=\"focus1\" class=\"entry selector\"><h2 class=\"section-title\"><span>focus selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects element if it is currently focused.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.6/\">1.6</a></span>jQuery( \":focus\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>As with other pseudo-class selectors (those that begin with a \":\"), it is recommended to precede <code>:focus</code> with a tag name or some other selector; otherwise, the universal selector ( \"*\" ) is implied. In other words, the bare <code>$( \":focus\" )</code> is equivalent to <code>$( \"*:focus\" )</code>. If you are looking for the currently focused element, <code>$( document.activeElement )</code> will retrieve it without having to search the whole DOM tree.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Adds the focused class to whatever element has focus</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;focus demo&lt;/title&gt;\n  &lt;style&gt;\n  .focused {\n    background: #abcdef;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div id=\"content\"&gt;\n  &lt;input tabIndex=\"1\"&gt;\n  &lt;input tabIndex=\"2\"&gt;\n  &lt;select tabIndex=\"3\"&gt;\n    &lt;option&gt;select menu&lt;/option&gt;\n  &lt;/select&gt;\n  &lt;div tabIndex=\"4\"&gt;\n    a div\n  &lt;/div&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\n$( \"#content\" ).delegate( \"*\", \"focus blur\", function() {\n  var elem = $( this );\n  setTimeout(function() {\n    elem.toggleClass( \"focused\", elem.is( \":focus\" ) );\n  }, 0 );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/focus-selector\" class=\"_attribution-link\">https://api.jquery.com/focus-selector</a>\n  </p>\n</div>\n","id-selector":"<h1 class=\"entry-title\">ID Selector (“#id”)</h1> <div class=\"entry-content\"> <article id=\"id1\" class=\"entry selector\"><h2 class=\"section-title\"><span>id selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects a single element with the given id attribute. </p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \"#id\" )</h4> <p class=\"argument\"><strong>id: </strong>An ID to search for, specified via the id attribute of an element.</p> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>For id selectors, jQuery uses the JavaScript function <code>document.getElementById()</code>, which is extremely efficient. When another selector is attached to the id selector, such as <code>h2#pageTitle</code>, jQuery performs an additional check before identifying the element as a match.</p> <p>Calling <code>jQuery()</code> (or <code>$()</code>) with an id selector as its argument will return a jQuery object containing a collection of either zero or one DOM element.</p> <p>Each <code>id</code> value must be used only once within a document. If more than one element has been assigned the same ID, queries that use that ID will only select the first matched element in the DOM. This behavior should not be relied on, however; a document with more than one element using the same ID is invalid.</p> <p>If the id contains characters like periods or colons you have to <a href=\"http://learn.jquery.com/using-jquery-core/faq/how-do-i-select-an-element-by-an-id-that-has-characters-used-in-css-notation/\">escape those characters with backslashes</a>.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Select the element with the id \"myDiv\" and give it a red border.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;id demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    width: 90px;\n    height: 90px;\n    float: left;\n    padding: 5px;\n    margin: 5px;\n    background-color: #eee;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div id=\"notMe\"&gt;&lt;p&gt;id=\"notMe\"&lt;/p&gt;&lt;/div&gt;\n&lt;div id=\"myDiv\"&gt;id=\"myDiv\"&lt;/div&gt;\n \n&lt;script&gt;\n$( \"#myDiv\" ).css( \"border\", \"3px solid red\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Select the element with the id \"myID.entry[1]\" and give it a red border. Note how certain characters must be escaped with backslashes.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;id demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    width: 300px;\n    float: left;\n    padding: 2px;\n    margin: 3px;\n    background-color: #eee;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div id=\"myID.entry[0]\"&gt;id=\"myID.entry[0]\"&lt;/div&gt;\n&lt;div id=\"myID.entry[1]\"&gt;id=\"myID.entry[1]\"&lt;/div&gt;\n&lt;div id=\"myID.entry[2]\"&gt;id=\"myID.entry[2]\"&lt;/div&gt;\n \n&lt;script&gt;\n$( \"#myID\\\\.entry\\\\[1\\\\]\" ).css( \"border\", \"3px solid red\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/id-selector\" class=\"_attribution-link\">https://api.jquery.com/id-selector</a>\n  </p>\n</div>\n","input-selector":"<h1 class=\"entry-title\">:input Selector</h1> <div class=\"entry-content\"> <article id=\"input1\" class=\"entry selector\"><h2 class=\"section-title\"><span>input selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all input, textarea, select and button elements.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \":input\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>:input</code> selector basically selects all form controls.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> Because <code>:input</code> is a jQuery extension and not part of the CSS specification, queries using <code>:input</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. To achieve the best performance when using <code>:input</code> to select elements, first select the elements using a pure CSS selector, then use <a href=\"filter\"><code>.filter(\":input\")</code></a>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds all input elements.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;input demo&lt;/title&gt;\n  &lt;style&gt;\n  textarea {\n    height: 25px;\n  }\n  \t&lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;form&gt;\n  &lt;input type=\"button\" value=\"Input Button\"&gt;\n  &lt;input type=\"checkbox\"&gt;\n  &lt;input type=\"file\"&gt;\n  &lt;input type=\"hidden\"&gt;\n  &lt;input type=\"image\"&gt;\n  &lt;input type=\"password\"&gt;\n  &lt;input type=\"radio\"&gt;\n  &lt;input type=\"reset\"&gt;\n  &lt;input type=\"submit\"&gt;\n  &lt;input type=\"text\"&gt;\n  &lt;select&gt;\n    &lt;option&gt;Option&lt;/option&gt;\n  &lt;/select&gt;\n  &lt;textarea&gt;&lt;/textarea&gt;\n  &lt;button&gt;Button&lt;/button&gt;\n&lt;/form&gt;\n&lt;div id=\"messages\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar allInputs = $( \":input\" );\nvar formChildren = $( \"form &gt; *\" );\n$( \"#messages\" ).text( \"Found \" + allInputs.length + \" inputs and the form has \" +\n  formChildren.length + \" children.\" );\n \n$( \"form\" ).submit(function( event ) {\n  event.preventDefault();\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/input-selector\" class=\"_attribution-link\">https://api.jquery.com/input-selector</a>\n  </p>\n</div>\n","get":"<h1 class=\"entry-title\">.get()</h1> <div class=\"entry-content\"> Retrieve the DOM elements matched by the jQuery object.<div class=\"toc\"> <h4><span>Contents:</span></h4> <ul class=\"toc-list\"> <li> <a href=\"#get1\">.get( index )</a><ul><li><a href=\"#get-index\">.get( index )</a></li></ul> </li> <li> <a href=\"#get2\">.get()</a><ul><li><a href=\"#get\">.get()</a></li></ul> </li> </ul> </div>\n<article id=\"get1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.get( index )</span><span class=\"returns\">Returns: <a href=\"types#Element\">Element</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Retrieve one of the elements matched by the jQuery object.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"get-index\" href=\"#get-index\">.get( index )</a> </h4> <ul><li> <div><strong>index</strong></div> <div>Type: <a href=\"types#Integer\">Integer</a> </div> <div>A zero-based integer indicating which element to retrieve.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.get()</code> method grants access to the DOM nodes underlying each jQuery object. If the value of <code>index</code> is out of bounds — less than the negative number of elements or equal to or greater than the number of elements — it returns <code>undefined</code>. Consider a simple unordered list:</p> <pre class=\"syntaxhighlighter xml\">&lt;ul&gt;\n  &lt;li id=\"foo\"&gt;foo&lt;/li&gt;\n  &lt;li id=\"bar\"&gt;bar&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>With an index specified, <code>.get( index )</code> retrieves a single element:</p> <pre class=\"syntaxhighlighter javascript\">console.log( $( \"li\" ).get( 0 ) );</pre> <p>Since the index is zero-based, the first list item is returned:</p> <p> <samp>&lt;li id=\"foo\"&gt;</samp> </p> <p>Each jQuery object also masquerades as an array, so we can use the array dereferencing operator to get at the list item instead:</p> <pre class=\"syntaxhighlighter javascript\">console.log( $( \"li\" )[ 0 ] );</pre> <p>However, this syntax lacks some of the additional capabilities of .get(), such as specifying a negative index:</p> <pre class=\"syntaxhighlighter javascript\">console.log( $( \"li\" ).get( -1 ) );</pre> <p>A negative index is counted from the end of the matched set, so this example returns the last item in the list:</p> <p> <samp>&lt;li id=\"bar\"&gt;</samp> </p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Display the tag name of the click element.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;get demo&lt;/title&gt;\n  &lt;style&gt;\n  span {\n    color: red;\n  }\n  div {\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;span&gt;&amp;nbsp;&lt;/span&gt;\n&lt;p&gt;In this paragraph is an &lt;span&gt;important&lt;/span&gt; section&lt;/p&gt;\n&lt;div&gt;&lt;input type=\"text\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"*\", document.body ).click(function( event ) {\n  event.stopPropagation();\n  var domElement = $( this ).get( 0 );\n  $( \"span:first\" ).text( \"Clicked on - \" + domElement.nodeName );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article><article id=\"get2\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.get()</span><span class=\"returns\">Returns: <a href=\"types#Array\">Array</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Retrieve the elements matched by the jQuery object.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"get\" href=\"#get\">.get()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc-1\"> <p>Consider a simple unordered list:</p> <pre class=\"syntaxhighlighter xml\">&lt;ul&gt;\n  &lt;li id=\"foo\"&gt;foo&lt;/li&gt;\n  &lt;li id=\"bar\"&gt;bar&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>Without a parameter, <code>.get()</code> returns an array of all of the elements:</p> <pre class=\"syntaxhighlighter javascript\">console.log( $( \"li\" ).get() );</pre> <p>All of the matched DOM nodes are returned by this call, contained in a standard array:</p> <p> <span class=\"result\">[&lt;li id=\"foo\"&gt;, &lt;li id=\"bar\"&gt;]</span> </p> </div> <section class=\"entry-examples\" id=\"entry-examples-1\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-1-0\"> <p>Select all divs in the document and return the DOM Elements as an Array; then use the built-in reverse() method to reverse that array.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;get demo&lt;/title&gt;\n  &lt;style&gt;\n  span {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \nReversed - &lt;span&gt;&lt;/span&gt;\n \n&lt;div&gt;One&lt;/div&gt;\n&lt;div&gt;Two&lt;/div&gt;\n&lt;div&gt;Three&lt;/div&gt;\n \n&lt;script&gt;\nfunction display( divs ) {\n  var a = [];\n  for ( var i = 0; i &lt; divs.length; i++ ) {\n    a.push( divs[ i ].innerHTML );\n  }\n  $( \"span\" ).text( a.join(\" \") );\n}\ndisplay( $( \"div\" ).get().reverse() );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/get\" class=\"_attribution-link\">https://api.jquery.com/get</a>\n  </p>\n</div>\n","gt-selector":"<h1 class=\"entry-title\">:gt() Selector</h1> <div class=\"entry-content\"> <article id=\"gt1\" class=\"entry selector\"><h2 class=\"section-title\"><span>gt selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Select all elements at an index greater than <code>index</code> within the matched set.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \":gt(index)\" )</h4> <p class=\"argument\"><strong>index: </strong>Zero-based index.</p> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a></span>jQuery( \":gt(-index)\" )</h4> <p class=\"argument\"><strong>indexFromEnd: </strong>Zero-based index, counting backwards from the last element. </p> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p> <strong>index-related selectors</strong> </p> <p>The index-related selector expressions (including this \"greater than\" selector) filter the set of elements that have matched the expressions that precede them. They narrow the set down based on the order of the elements within this matched set. For example, if elements are first selected with a class selector (<code>.myclass</code>) and four elements are returned, these elements are given indices 0 through 3 for the purposes of these selectors.</p> <p>Note that since JavaScript arrays use <em>0-based indexing</em>, these selectors reflect that fact. This is why <code>$( \".myclass:gt(1)\" )</code> selects elements after the second element in the document with the class <code>myclass</code>, rather than after the first. In contrast, <code>:nth-child(n)</code> uses <em>1-based indexing</em> to conform to the CSS specification.</p> <p>Prior to jQuery 1.8, the <code>:gt(index)</code> selector did <em>not</em> accept a negative value for <code>index</code></p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> Because <code>:gt()</code> is a jQuery extension and not part of the CSS specification, queries using <code>:gt()</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. For better performance in modern browsers, use <code>$(\"your-pure-css-selector\").slice(index)</code> instead. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Give TD #5 and higher a yellow background and TD #8 a red text color.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;gt demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;table border=\"1\"&gt;\n  &lt;tr&gt;&lt;td&gt;TD #0&lt;/td&gt;&lt;td&gt;TD #1&lt;/td&gt;&lt;td&gt;TD #2&lt;/td&gt;&lt;/tr&gt;\n  &lt;tr&gt;&lt;td&gt;TD #3&lt;/td&gt;&lt;td&gt;TD #4&lt;/td&gt;&lt;td&gt;TD #5&lt;/td&gt;&lt;/tr&gt;\n  &lt;tr&gt;&lt;td&gt;TD #6&lt;/td&gt;&lt;td&gt;TD #7&lt;/td&gt;&lt;td&gt;TD #8&lt;/td&gt;&lt;/tr&gt;\n&lt;/table&gt;\n \n&lt;script&gt;\n$( \"td:gt(4)\" ).css( \"backgroundColor\", \"yellow\" );\n$( \"td:gt(-2)\" ).css( \"color\", \"red\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/gt-selector\" class=\"_attribution-link\">https://api.jquery.com/gt-selector</a>\n  </p>\n</div>\n","hasclass":"<h1 class=\"entry-title\">.hasClass()</h1> <div class=\"entry-content\"> <article id=\"hasClass1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.hasClass( className )</span><span class=\"returns\">Returns: <a href=\"types#Boolean\">Boolean</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Determine whether any of the matched elements are assigned the given class.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2/\">1.2</a></span><a id=\"hasClass-className\" href=\"#hasClass-className\">.hasClass( className )</a> </h4> <ul><li> <div><strong>className</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>The class name to search for.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Elements may have more than one class assigned to them. In HTML, this is represented by separating the class names with a space:</p> <pre class=\"syntaxhighlighter xml\">&lt;div id=\"mydiv\" class=\"foo bar\"&gt;&lt;/div&gt;</pre> <p>The <code>.hasClass()</code> method will return <code>true</code> if the class is assigned to an element, even if other classes also are. For example, given the HTML above, the following will return <code>true</code>:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#mydiv\" ).hasClass( \"foo\" )</pre> <p>As would:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#mydiv\" ).hasClass( \"bar\" )</pre> <p>While this would return <code>false</code>:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#mydiv\" ).hasClass( \"quux\" )</pre> <p>As of jQuery 1.12/2.2, this method supports XML documents, including SVG.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Looks for the paragraph that contains 'selected' as a class.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;hasClass demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    margin: 8px;\n    font-size: 16px;\n  }\n  .selected {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;This paragraph is black and is the first paragraph.&lt;/p&gt;\n&lt;p class=\"selected\"&gt;This paragraph is red and is the second paragraph.&lt;/p&gt;\n&lt;div id=\"result1\"&gt;First paragraph has selected class: &lt;/div&gt;\n&lt;div id=\"result2\"&gt;Second paragraph has selected class: &lt;/div&gt;\n&lt;div id=\"result3\"&gt;At least one paragraph has selected class: &lt;/div&gt;\n \n&lt;script&gt;\n$( \"#result1\" ).append( $( \"p:first\" ).hasClass( \"selected\" ).toString() );\n$( \"#result2\" ).append( $( \"p:last\" ).hasClass( \"selected\" ).toString() );\n$( \"#result3\" ).append( $( \"p\" ).hasClass( \"selected\" ).toString() ) ;\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/hasClass\" class=\"_attribution-link\">https://api.jquery.com/hasClass</a>\n  </p>\n</div>\n","header-selector":"<h1 class=\"entry-title\">:header Selector</h1> <div class=\"entry-content\"> <article id=\"header1\" class=\"entry selector\"><h2 class=\"section-title\"><span>header selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all elements that are headers, like h1, h2, h3 and so on.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2/\">1.2</a></span>jQuery( \":header\" )</h4></li></ul> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> Because <code>:header</code> is a jQuery extension and not part of the CSS specification, queries using <code>:header</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. To achieve the best performance when using <code>:header</code> to select elements, first select the elements using a pure CSS selector, then use <a href=\"filter\"><code>.filter(\":header\")</code></a>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Adds a background and text color to all the headers on the page.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;header demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;h1&gt;Header 1&lt;/h1&gt;\n&lt;p&gt;Contents 1&lt;/p&gt;\n&lt;h2&gt;Header 2&lt;/h2&gt;\n&lt;p&gt;Contents 2&lt;/p&gt;\n \n&lt;script&gt;\n$( \":header\" ).css({ background: \"#ccc\", color: \"blue\" });\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/header-selector\" class=\"_attribution-link\">https://api.jquery.com/header-selector</a>\n  </p>\n</div>\n","has-attribute-selector":"<h1 class=\"entry-title\">Has Attribute Selector [name]</h1> <div class=\"entry-content\"> <article id=\"attributeHas1\" class=\"entry selector\"><h2 class=\"section-title\"><span>attributeHas selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects elements that have the specified attribute, with any value. </p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \"[attribute]\" )</h4> <p class=\"argument\"><strong>attribute: </strong>An attribute name.</p> </li></ul> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Bind a single click to divs with an id that adds the id to the div's text.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;attributeHas demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;no id&lt;/div&gt;\n&lt;div id=\"hey\"&gt;with id&lt;/div&gt;\n&lt;div id=\"there\"&gt;has an id&lt;/div&gt;\n&lt;div&gt;nope&lt;/div&gt;\n \n&lt;script&gt;\n// Using .one() so the handler is executed at most once\n// per element per event type\n$( \"div[id]\" ).one( \"click\", function() {\n  var idString = $( this ).text() + \" = \" + $( this ).attr( \"id\" );\n  $( this ).text( idString );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/has-attribute-selector\" class=\"_attribution-link\">https://api.jquery.com/has-attribute-selector</a>\n  </p>\n</div>\n","hidden-selector":"<h1 class=\"entry-title\">:hidden Selector</h1> <div class=\"entry-content\"> <article id=\"hidden1\" class=\"entry selector\"><h2 class=\"section-title\"><span>hidden selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all elements that are hidden.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \":hidden\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Elements can be considered hidden for several reasons:</p> <ul> <li>They have a CSS <code>display</code> value of <code>none</code>.</li> <li>They are form elements with <code>type=\"hidden\"</code>.</li> <li>Their width and height are explicitly set to 0.</li> <li>An ancestor element is hidden, so the element is not shown on the page.</li> </ul> <p>Elements with <code>visibility: hidden</code> or <code>opacity: 0</code> are considered to be visible, since they still consume space in the layout. During animations that hide an element, the element is considered to be visible until the end of the animation.</p> <p>Elements that are not in a document are not considered to be visible; jQuery does not have a way to know if they will be visible when appended to a document since it depends on the applicable styles.</p> <p>This selector is the opposite of the <a href=\"visible-selector\"><code>:visible</code></a> selector. So, every element selected by <code>:hidden</code> isn't selected by <code>:visible</code> and vice versa.</p> <p>During animations to show an element, the element is considered to be visible at the start of the animation.</p> <p>How <code>:hidden</code> is determined was changed in jQuery 1.3.2. An element is assumed to be hidden if it or any of its parents consumes no space in the document. CSS visibility isn't taken into account (therefore <code>$( elem ).css( \"visibility\", \"hidden\" ).is( \":hidden\" ) == false</code>). The <a href=\"http://blog.jquery.com/2009/02/20/jquery-1-3-2-released/\">release notes</a> outline the changes in more detail.</p> <p>jQuery 3 slightly modifies the meaning of <code>:hidden</code> (and therefore of <a href=\"visible-selector\"><code>:visible</code></a>). Starting with this version, elements will be considered <code>:hidden</code> if they don't have any layout boxes. For example, <code>br</code> elements and inline elements with no content will not be selected by the <code>:hidden</code> selector.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> Because <code>:hidden</code> is a jQuery extension and not part of the CSS specification, queries using <code>:hidden</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. To achieve the best performance when using <code>:hidden</code> to select elements, first select the elements using a pure CSS selector, then use <a href=\"filter\"><code>.filter(\":hidden\")</code></a>. </li> <li> Using this selector heavily can have performance implications, as it may force the browser to re-render the page before it can determine visibility. Tracking the visibility of elements via other methods, using a class for example, can provide better performance. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Shows all hidden divs and counts hidden inputs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;hidden demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    width: 70px;\n    height: 40px;\n    background: #e7f;\n    margin: 5px;\n    float: left;\n  }\n  span {\n    display: block;\n    clear: left;\n    color: red;\n  }\n  .starthidden {\n    display: none;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;span&gt;&lt;/span&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div style=\"display:none;\"&gt;Hider!&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;div class=\"starthidden\"&gt;Hider!&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;form&gt;\n  &lt;input type=\"hidden\"&gt;\n  &lt;input type=\"hidden\"&gt;\n  &lt;input type=\"hidden\"&gt;\n&lt;/form&gt;\n \n&lt;span&gt;&lt;/span&gt;\n \n&lt;script&gt;\n// In some browsers :hidden includes head, title, script, etc...\nvar hiddenElements = $( \"body\" ).find( \":hidden\" ).not( \"script\" );\n \n$( \"span:first\" ).text( \"Found \" + hiddenElements.length + \" hidden elements total.\" );\n$( \"div:hidden\" ).show( 3000 );\n$( \"span:last\" ).text( \"Found \" + $( \"input:hidden\" ).length + \" hidden inputs.\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/hidden-selector\" class=\"_attribution-link\">https://api.jquery.com/hidden-selector</a>\n  </p>\n</div>\n","height":"<h1 class=\"entry-title\">.height()</h1> <div class=\"entry-content\"> Get the current computed height for the first element in the set of matched elements or set the height of every matched element.<div class=\"toc\"> <h4><span>Contents:</span></h4> <ul class=\"toc-list\"> <li> <a href=\"#height1\">.height()</a><ul><li><a href=\"#height\">.height()</a></li></ul> </li> <li> <a href=\"#height2\">.height( value )</a><ul> <li><a href=\"#height-value\">.height( value )</a></li> <li><a href=\"#height-function\">.height( function )</a></li> </ul> </li> </ul> </div>\n<article id=\"height1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.height()</span><span class=\"returns\">Returns: <a href=\"types#Number\">Number</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Get the current computed height for the first element in the set of matched elements.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"height\" href=\"#height\">.height()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The difference between <code>.css( \"height\" )</code> and <code>.height()</code> is that the latter returns a unit-less pixel value (for example, <code>400</code>) while the former returns a value with units intact (for example, <code>400px</code>). The <code>.height()</code> method is recommended when an element's height needs to be used in a mathematical calculation.</p> <figure> <img src=\"https://api.jquery.com/resources/0042_04_01.png\"> <figcaption>Figure 1 - Illustration of the measured height</figcaption> </figure> <p>This method is also able to find the height of the window and document.</p> <pre class=\"syntaxhighlighter javascript\">// Returns height of browser viewport\n$( window ).height();\n \n// Returns height of HTML document\n$( document ).height();</pre> <p>Note that <code>.height()</code> will always return the content height, regardless of the value of the CSS <code>box-sizing</code> property. As of jQuery 1.8, this may require retrieving the CSS height plus <code>box-sizing</code> property and then subtracting any potential border and padding on each element when the element has <code>box-sizing: border-box</code>. To avoid this penalty, use <code>.css( \"height\" )</code> rather than <code>.height()</code>.</p> <div class=\"warning\"> <p><strong>Note:</strong> Although <code>style</code> and <code>script</code> tags will report a value for <code>.width()</code> or <code>height()</code> when absolutely positioned and given <code>display:block</code>, it is strongly discouraged to call those methods on these tags. In addition to being a bad practice, the results may also prove unreliable.</p> </div> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> The number returned by dimensions-related APIs, including <code>.height()</code>, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition. </li> <li> The value reported by <code>.height()</code> is not guaranteed to be accurate when the element or its parent is hidden. To get an accurate value, ensure the element is visible before using <code>.height()</code>. jQuery will attempt to temporarily show and then re-hide an element in order to measure its dimensions, but this is unreliable and (even when accurate) can significantly impact page performance. This show-and-rehide measurement feature may be removed in a future version of jQuery. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Show various heights. Note the values are from the iframe so might be smaller than you expected. The yellow highlight shows the iframe body.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;height demo&lt;/title&gt;\n  &lt;style&gt;\n  body {\n    background: yellow;\n  }\n  button {\n    font-size: 12px;\n    margin: 2px;\n  }\n  p {\n    width: 150px;\n    border: 1px red solid;\n  }\n  div {\n    color: red;\n    font-weight: bold;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button id=\"getp\"&gt;Get Paragraph Height&lt;/button&gt;\n&lt;button id=\"getd\"&gt;Get Document Height&lt;/button&gt;\n&lt;button id=\"getw\"&gt;Get Window Height&lt;/button&gt;\n \n&lt;div&gt;&amp;nbsp;&lt;/div&gt;\n&lt;p&gt;\n  Sample paragraph to test height\n&lt;/p&gt;\n \n&lt;script&gt;\nfunction showHeight( element, height ) {\n  $( \"div\" ).text( \"The height for the \" + element + \" is \" + height + \"px.\" );\n}\n$( \"#getp\" ).click(function() {\n  showHeight( \"paragraph\", $( \"p\" ).height() );\n});\n$( \"#getd\" ).click(function() {\n  showHeight( \"document\", $( document ).height() );\n});\n$( \"#getw\" ).click(function() {\n  showHeight( \"window\", $( window ).height() );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article><article id=\"height2\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.height( value )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Set the CSS height of every matched element.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"height-value\" href=\"#height-value\">.height( value )</a> </h4> <ul><li> <div><strong>value</strong></div> <div>Type: <a href=\"types#String\">String</a> or <a href=\"types#Number\">Number</a> </div> <div>An integer representing the number of pixels, or an integer with an optional unit of measure appended (as a string).</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.1/\">1.4.1</a></span><a id=\"height-function\" href=\"#height-function\">.height( function )</a> </h4> <ul><li> <div><strong>function</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Integer\">Integer</a> index, <a href=\"types#Integer\">Integer</a> height ) =&gt; <a href=\"types#String\">String</a> or <a href=\"types#Number\">Number</a> </div> <div>A function returning the height to set. Receives the index position of the element in the set and the old height as arguments. Within the function, <code>this</code> refers to the current element in the set.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc-1\"> <p>When calling <code>.height(value)</code>, the value can be either a string (number and unit) or a number. If only a number is provided for the value, jQuery assumes a pixel unit. If a string is provided, however, a valid CSS measurement must be provided for the height (such as <code>100px</code>, <code>50%</code>, or <code>auto</code>). Note that in modern browsers, the CSS height property does not include padding, border, or margin.</p> <p>If no explicit unit was specified (like 'em' or '%') then \"px\" is concatenated to the value.</p> <p>Note that <code>.height(value)</code> sets the content height of the box regardless of the value of the CSS <code>box-sizing</code> property.</p> </div> <section class=\"entry-examples\" id=\"entry-examples-1\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-1-0\"> <p>To set the height of each div on click to 30px plus a color change.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;height demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    width: 50px;\n    height: 70px;\n    float: left;\n    margin: 5px;\n    background: rgb(255,140,0);\n    cursor: pointer;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"div\" ).one( \"click\", function() {\n  $( this ).height( 30 ).css({\n    cursor: \"auto\",\n    backgroundColor: \"green\"\n  });\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/height\" class=\"_attribution-link\">https://api.jquery.com/height</a>\n  </p>\n</div>\n","html":"<h1 class=\"entry-title\">.html()</h1> <div class=\"entry-content\"> Get the HTML contents of the first element in the set of matched elements or set the HTML contents of every matched element.<div class=\"toc\"> <h4><span>Contents:</span></h4> <ul class=\"toc-list\"> <li> <a href=\"#html1\">.html()</a><ul><li><a href=\"#html\">.html()</a></li></ul> </li> <li> <a href=\"#html2\">.html( htmlString )</a><ul> <li><a href=\"#html-htmlString\">.html( htmlString )</a></li> <li><a href=\"#html-function\">.html( function )</a></li> </ul> </li> </ul> </div>\n<article id=\"html1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.html()</span><span class=\"returns\">Returns: <a href=\"types#String\">String</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Get the HTML contents of the first element in the set of matched elements.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"html\" href=\"#html\">.html()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method is not available on XML documents.</p> <p>In an HTML document, <code>.html()</code> can be used to get the contents of any element. If the selector expression matches more than one element, only the first match will have its HTML content returned. Consider this code:</p> <pre class=\"syntaxhighlighter javascript\">$( \"div.demo-container\" ).html();</pre> <p>In order for the following <code>&lt;div&gt;</code>'s content to be retrieved, it would have to be the first one with <code>class=\"demo-container\"</code> in the document:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"demo-container\"&gt;\n  &lt;div class=\"demo-box\"&gt;Demonstration Box&lt;/div&gt;\n&lt;/div&gt;</pre> <p>The result would look like this:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"demo-box\"&gt;Demonstration Box&lt;/div&gt;</pre> <p>This method uses the browser's <code>innerHTML</code> property. Some browsers may not return HTML that exactly replicates the HTML source in an original document. For example, Internet Explorer sometimes leaves off the quotes around attribute values if they contain only alphanumeric characters.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> By design, any jQuery constructor or method that accepts an HTML string — <a href=\"jquery\">jQuery()</a>, <a href=\"append\">.append()</a>, <a href=\"after\">.after()</a>, etc. — can potentially execute code. This can occur by injection of script tags or use of HTML attributes that execute code (for example, <code>&lt;img onload=\"\"&gt;</code>). Do not use these methods to insert strings obtained from untrusted sources such as URL query parameters, cookies, or form inputs. Doing so can introduce cross-site-scripting (XSS) vulnerabilities. Remove or escape any user input before adding content to the document. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Click a paragraph to convert it from html to text.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;html demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    margin: 8px;\n    font-size: 20px;\n    color: blue;\n    cursor: pointer;\n  }\n  b {\n    text-decoration: underline;\n  }\n  button {\n    cursor: pointer;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;\n  &lt;b&gt;Click&lt;/b&gt; to change the &lt;span id=\"tag\"&gt;html&lt;/span&gt;\n&lt;/p&gt;\n&lt;p&gt;\n  to a &lt;span id=\"text\"&gt;text&lt;/span&gt; node.\n&lt;/p&gt;\n&lt;p&gt;\n  This &lt;button name=\"nada\"&gt;button&lt;/button&gt; does nothing.\n&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).click(function() {\n  var htmlString = $( this ).html();\n  $( this ).text( htmlString );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article><article id=\"html2\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.html( htmlString )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Set the HTML contents of each element in the set of matched elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"html-htmlString\" href=\"#html-htmlString\">.html( htmlString )</a> </h4> <ul><li> <div><strong>htmlString</strong></div> <div>Type: <a href=\"types#htmlString\">htmlString</a> </div> <div>A string of HTML to set as the content of each matched element.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"html-function\" href=\"#html-function\">.html( function )</a> </h4> <ul><li> <div><strong>function</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Integer\">Integer</a> index, <a href=\"types#htmlString\">htmlString</a> oldhtml ) =&gt; <a href=\"types#htmlString\">htmlString</a> </div> <div>A function returning the HTML content to set. Receives the index position of the element in the set and the old HTML value as arguments. jQuery empties the element before calling the function; use the oldhtml argument to reference the previous content. Within the function, <code>this</code> refers to the current element in the set.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc-1\"> <p>The <code>.html()</code> method is not available in XML documents. </p> <p>When <code>.html()</code> is used to set an element's content, any content that was in that element is completely replaced by the new content. Additionally, jQuery removes other constructs such as data and event handlers from child elements before replacing those elements with the new content.</p> <p>Consider the following HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"demo-container\"&gt;\n  &lt;div class=\"demo-box\"&gt;Demonstration Box&lt;/div&gt;\n&lt;/div&gt;</pre> <p>The content of <code>&lt;div class=\"demo-container\"&gt;</code> can be set like this:</p> <pre class=\"syntaxhighlighter javascript\">$( \"div.demo-container\" )\n  .html( \"&lt;p&gt;All new content. &lt;em&gt;You bet!&lt;/em&gt;&lt;/p&gt;\" );</pre> <p>That line of code will replace everything inside <code>&lt;div class=\"demo-container\"&gt;</code>:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"demo-container\"&gt;\n  &lt;p&gt;All new content. &lt;em&gt;You bet!&lt;/em&gt;&lt;/p&gt;\n&lt;/div&gt;</pre> <p>As of jQuery 1.4, the <code>.html()</code> method allows the HTML content to be set by passing in a function.</p> <pre class=\"syntaxhighlighter javascript\">$( \"div.demo-container\" ).html(function() {\n  var emphasis = \"&lt;em&gt;\" + $( \"p\" ).length + \" paragraphs!&lt;/em&gt;\";\n  return \"&lt;p&gt;All new content for \" + emphasis + \"&lt;/p&gt;\";\n});</pre> <p>Given a document with six paragraphs, this example will set the HTML of <code>&lt;div class=\"demo-container\"&gt;</code> to <code>&lt;p&gt;All new content for &lt;em&gt;6 paragraphs!&lt;/em&gt;&lt;/p&gt;</code>.</p> <p>This method uses the browser's <code>innerHTML</code> property. Some browsers may not generate a DOM that exactly replicates the HTML source provided. For example, Internet Explorer prior to version 8 will convert all <code>href</code> properties on links to absolute URLs, and Internet Explorer prior to version 9 will not correctly handle HTML5 elements without the addition of a separate <a href=\"http://code.google.com/p/html5shiv/\">compatibility layer</a>.</p> <p>To set the content of a <code>&lt;script&gt;</code> element, which does not contain HTML, use the <a href=\"text\"><code>.text()</code></a> method and not <code>.html()</code>.</p> <p><strong>Note:</strong> In Internet Explorer up to and including version 9, setting the text content of an HTML element may corrupt the text nodes of its children that are being removed from the document as a result of the operation. If you are keeping references to these DOM elements and need them to be unchanged, use <code>.empty().html( string )</code> instead of <code>.html(string)</code> so that the elements are removed from the document before the new string is assigned to the element.</p> </div> <section class=\"entry-examples\" id=\"entry-examples-1\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-1-0\"> <p>Add some html to each div.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;html demo&lt;/title&gt;\n  &lt;style&gt;\n  .red {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;span&gt;Hello&lt;/span&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"div\" ).html( \"&lt;span class='red'&gt;Hello &lt;b&gt;Again&lt;/b&gt;&lt;/span&gt;\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1-1\"> <p>Add some html to each div then immediately do further manipulations to the inserted html.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;html demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    color: blue;\n    font-size: 18px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"div\" ).html( \"&lt;b&gt;Wow!&lt;/b&gt; Such excitement...\" );\n$( \"div b\" )\n  .append( document.createTextNode( \"!!!\" ) )\n  .css( \"color\", \"red\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/html\" class=\"_attribution-link\">https://api.jquery.com/html</a>\n  </p>\n</div>\n","jquery.ajax":"<h1 class=\"entry-title\">jQuery.ajax()</h1> <div class=\"entry-content\"> <article id=\"jQuery-ajax1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.ajax( url [, settings ] )</span><span class=\"returns\">Returns: <a href=\"types#jqXHR\">jqXHR</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Perform an asynchronous HTTP (Ajax) request.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.5/\">1.5</a></span><a id=\"jQuery-ajax-url-settings\" href=\"#jQuery-ajax-url-settings\">jQuery.ajax( url [, settings ] )</a> </h4> <ul> <li> <div><strong>url</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing the URL to which the request is sent.</div> </li> <li> <div><strong>settings</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>A set of key/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with <a href=\"jquery.ajaxsetup\">$.ajaxSetup()</a>. See <a href=\"#jQuery-ajax-settings\">jQuery.ajax( settings )</a> below for a complete list of all settings.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"jQuery-ajax-settings\" href=\"#jQuery-ajax-settings\">jQuery.ajax( [settings ] )</a> </h4> <ul><li> <div><strong>settings</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>A set of key/value pairs that configure the Ajax request. All settings are optional. A default can be set for any option with <a href=\"jquery.ajaxsetup\">$.ajaxSetup()</a>.</div> <ul> <li> <div> <strong>accepts</strong> (default: <code>depends on DataType</code>)</div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>A set of key/value pairs that map a given <code>dataType</code> to its MIME type, which gets sent in the <code>Accept</code> request header. This header tells the server what kind of response it will accept in return. For example, the following defines a custom type <code>mycustomtype</code> to be sent with the request: <pre class=\"syntaxhighlighter javascript\">$.ajax({\n  accepts: {\n    mycustomtype: 'application/x-some-custom-type'\n  },\n \n  // Instructions for how to deserialize a `mycustomtype`\n  converters: {\n    'text mycustomtype': function(result) {\n      // Do Stuff\n      return newresult;\n    }\n  },\n \n  // Expect a `mycustomtype` back from server\n  dataType: 'mycustomtype'\n});</pre> <strong>Note:</strong> You will need to specify a complementary entry for this type in <code>converters</code> for this to work properly. </div> </li> <li> <div> <strong>async</strong> (default: <code>true</code>)</div> <div>Type: <a href=\"types#Boolean\">Boolean</a> </div> <div>By default, all requests are sent asynchronously (i.e. this is set to <code>true</code> by default). If you need synchronous requests, set this option to <code>false</code>. Cross-domain requests and <code>dataType: \"jsonp\"</code> requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active. <strong>As of jQuery 1.8</strong>, the use of <code>async: false</code> with jqXHR (<code>$.Deferred</code>) is deprecated; you must use the success/error/complete callback options instead of the corresponding methods of the jqXHR object such as <code>jqXHR.done()</code>.</div> </li> <li> <div><strong>beforeSend</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#jqXHR\">jqXHR</a> jqXHR, <a href=\"types#PlainObject\">PlainObject</a> settings )</div> <div>A pre-request callback function that can be used to modify the jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object before it is sent. Use this to set custom headers, etc. The jqXHR and settings objects are passed as arguments. This is an <a href=\"ajax_events\">Ajax Event</a>. Returning <code>false</code> in the <code>beforeSend</code> function will cancel the request. <strong>As of jQuery 1.5</strong>, the <code>beforeSend</code> option will be called regardless of the type of request.</div> </li> <li> <div> <strong>cache</strong> (default: <code>true, false for dataType 'script' and 'jsonp'</code>)</div> <div>Type: <a href=\"types#Boolean\">Boolean</a> </div> <div>If set to <code>false</code>, it will force requested pages not to be cached by the browser. <strong>Note:</strong> Setting <code>cache</code> to false will only work correctly with HEAD and GET requests. It works by appending \"_={timestamp}\" to the GET parameters. The parameter is not needed for other types of requests, except in IE8 when a POST is made to a URL that has already been requested by a GET.</div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#jqXHR\">jqXHR</a> jqXHR, <a href=\"types#String\">String</a> textStatus )</div> <div>A function to be called when the request finishes (after <code>success</code> and <code>error</code> callbacks are executed). The function gets passed two arguments: The jqXHR (in jQuery 1.4.x, XMLHTTPRequest) object and a string categorizing the status of the request (<code>\"success\"</code>, <code>\"notmodified\"</code>, <code>\"nocontent\"</code>, <code>\"error\"</code>, <code>\"timeout\"</code>, <code>\"abort\"</code>, or <code>\"parsererror\"</code>). <strong>As of jQuery 1.5</strong>, the <code>complete</code> setting can accept an array of functions. Each function will be called in turn. This is an <a href=\"ajax_events\">Ajax Event</a>.</div> </li> <li> <div><strong>contents</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>An object of string/regular-expression pairs that determine how jQuery will parse the response, given its content type.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.5/\">1.5</a>)</span> </div> </li> <li> <div> <strong>contentType</strong> (default: <code>'application/x-www-form-urlencoded; charset=UTF-8'</code>)</div> <div>Type: <a href=\"types#Boolean\">Boolean</a> or <a href=\"types#String\">String</a> </div> <div>When sending data to the server, use this content type. Default is \"application/x-www-form-urlencoded; charset=UTF-8\", which is fine for most cases. If you explicitly pass in a content-type to <code>$.ajax()</code>, then it is always sent to the server (even if no data is sent). As of jQuery 1.6 you can pass <code>false</code> to tell jQuery to not set any content type header. <strong>Note:</strong> The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding. <strong>Note:</strong> For cross-domain requests, setting the content type to anything other than <code>application/x-www-form-urlencoded</code>, <code>multipart/form-data</code>, or <code>text/plain</code> will trigger the browser to send a preflight OPTIONS request to the server.</div> </li> <li> <div><strong>context</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>This object will be the context of all Ajax-related callbacks. By default, the context is an object that represents the Ajax settings used in the call (<code>$.ajaxSettings</code> merged with the settings passed to <code>$.ajax</code>). For example, specifying a DOM element as the context will make that the context for the <code>complete</code> callback of a request, like so: <pre class=\"syntaxhighlighter javascript\">$.ajax({\n  url: \"test.html\",\n  context: document.body\n}).done(function() {\n  $( this ).addClass( \"done\" );\n});</pre> </div> </li> <li> <div> <strong>converters</strong> (default: <code>{\"* text\": window.String, \"text html\": true, \"text json\": jQuery.parseJSON, \"text xml\": jQuery.parseXML}</code>)</div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>An object containing dataType-to-dataType converters. Each converter's value is a function that returns the transformed value of the response.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.5/\">1.5</a>)</span> </div> </li> <li> <div> <strong>crossDomain</strong> (default: <code>false for same-domain requests, true for cross-domain requests</code>)</div> <div>Type: <a href=\"types#Boolean\">Boolean</a> </div> <div>If you wish to force a crossDomain request (such as JSONP) on the same domain, set the value of crossDomain to <code>true</code>. This allows, for example, server-side redirection to another domain.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.5/\">1.5</a>)</span> </div> </li> <li> <div><strong>data</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> or <a href=\"types#String\">String</a> or <a href=\"types#Array\">Array</a> </div> <div>Data to be sent to the server. It is converted to a query string, if not already a string. It's appended to the url for GET-requests. See <code>processData</code> option to prevent this automatic processing. Object must be Key/Value pairs. If value is an Array, jQuery serializes multiple values with same key based on the value of the <code>traditional</code> setting (described below).</div> </li> <li> <div><strong>dataFilter</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#String\">String</a> data, <a href=\"types#String\">String</a> type ) =&gt; <a href=\"types#Anything\">Anything</a> </div> <div>A function to be used to handle the raw response data of XMLHttpRequest. This is a pre-filtering function to sanitize the response. You should return the sanitized data. The function accepts two arguments: The raw data returned from the server and the 'dataType' parameter.</div> </li> <li> <div> <strong>dataType</strong> (default: <code>Intelligent Guess (xml, json, script, or html)</code>)</div> <div>Type: <a href=\"types#String\">String</a> </div> <div>The type of data that you're expecting back from the server. If none is specified, jQuery will try to infer it based on the MIME type of the response (an XML MIME type will yield XML, in 1.4 JSON will yield a JavaScript object, in 1.4 script will execute the script, and anything else will be returned as a string). The available types (and the result passed as the first argument to your success callback) are: <ul> <li> <code>\"xml\"</code>: Returns a XML document that can be processed via jQuery.</li> <li> <code>\"html\"</code>: Returns HTML as plain text; included script tags are evaluated when inserted in the DOM.</li> <li> <code>\"script\"</code>: Evaluates the response as JavaScript and returns it as plain text. Disables caching by appending a query string parameter, <code>_=[TIMESTAMP]</code>, to the URL unless the <code>cache</code> option is set to <code>true</code>. <strong>Note:</strong> This will turn POSTs into GETs for remote-domain requests.</li> <li> <code>\"json\"</code>: Evaluates the response as JSON and returns a JavaScript object. Cross-domain <code>\"json\"</code> requests are converted to <code>\"jsonp\"</code> unless the request includes <code>jsonp: false</code> in its request options. The JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. As of jQuery 1.9, an empty response is also rejected; the server should return a response of <code>null</code> or <code>{}</code> instead. (See <a href=\"http://json.org/\">json.org</a> for more information on proper JSON formatting.)</li> <li> <code>\"jsonp\"</code>: Loads in a JSON block using <a href=\"http://bob.ippoli.to/archives/2005/12/05/remote-json-jsonp/\">JSONP</a>. Adds an extra <code>\"?callback=?\"</code> to the end of your URL to specify the callback. Disables caching by appending a query string parameter, <code>\"_=[TIMESTAMP]\"</code>, to the URL unless the <code>cache</code> option is set to <code>true</code>.</li> <li> <code>\"text\"</code>: A plain text string.</li> <li>multiple, space-separated values: <strong>As of jQuery 1.5</strong>, jQuery can convert a dataType from what it received in the Content-Type header to what you require. For example, if you want a text response to be treated as XML, use <code>\"text xml\"</code> for the dataType. You can also make a JSONP request, have it received as text, and interpreted by jQuery as XML: <code>\"jsonp text xml\"</code>. Similarly, a shorthand string such as <code>\"jsonp xml\"</code> will first attempt to convert from jsonp to xml, and, failing that, convert from jsonp to text, and then from text to xml.</li> </ul> </div> </li> <li> <div><strong>error</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#jqXHR\">jqXHR</a> jqXHR, <a href=\"types#String\">String</a> textStatus, <a href=\"types#String\">String</a> errorThrown )</div> <div>A function to be called if the request fails. The function receives three arguments: The jqXHR (in jQuery 1.4.x, XMLHttpRequest) object, a string describing the type of error that occurred and an optional exception object, if one occurred. Possible values for the second argument (besides <code>null</code>) are <code>\"timeout\"</code>, <code>\"error\"</code>, <code>\"abort\"</code>, and <code>\"parsererror\"</code>. When an HTTP error occurs, <code>errorThrown</code> receives the textual portion of the HTTP status, such as \"Not Found\" or \"Internal Server Error.\" <strong>As of jQuery 1.5</strong>, the <code>error</code> setting can accept an array of functions. Each function will be called in turn. <strong>Note:</strong> <em>This handler is not called for cross-domain script and cross-domain JSONP requests.</em> This is an <a href=\"ajax_events\">Ajax Event</a>.</div> </li> <li> <div> <strong>global</strong> (default: <code>true</code>)</div> <div>Type: <a href=\"types#Boolean\">Boolean</a> </div> <div>Whether to trigger global Ajax event handlers for this request. The default is <code>true</code>. Set to <code>false</code> to prevent the global handlers like <code>ajaxStart</code> or <code>ajaxStop</code> from being triggered. This can be used to control various <a href=\"ajax_events\">Ajax Events</a>.</div> </li> <li> <div> <strong>headers</strong> (default: <code>{}</code>)</div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>An object of additional header key/value pairs to send along with requests using the XMLHttpRequest transport. The header <code>X-Requested-With: XMLHttpRequest</code> is always added, but its default <code>XMLHttpRequest</code> value can be changed here. Values in the <code>headers</code> setting can also be overwritten from within the <code>beforeSend</code> function.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.5/\">1.5</a>)</span> </div> </li> <li> <div> <strong>ifModified</strong> (default: <code>false</code>)</div> <div>Type: <a href=\"types#Boolean\">Boolean</a> </div> <div>Allow the request to be successful only if the response has changed since the last request. This is done by checking the Last-Modified header. Default value is <code>false</code>, ignoring the header. In jQuery 1.4 this technique also checks the 'etag' specified by the server to catch unmodified data.</div> </li> <li> <div> <strong>isLocal</strong> (default: <code>depends on current location protocol</code>)</div> <div>Type: <a href=\"types#Boolean\">Boolean</a> </div> <div>Allow the current environment to be recognized as \"local,\" (e.g. the filesystem), even if jQuery does not recognize it as such by default. The following protocols are currently recognized as local: <code>file</code>, <code>*-extension</code>, and <code>widget</code>. If the <code>isLocal</code> setting needs modification, it is recommended to do so once in the <code>$.ajaxSetup()</code> method.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.5.1/\">1.5.1</a>)</span> </div> </li> <li> <div><strong>jsonp</strong></div> <div>Type: <a href=\"types#String\">String</a> or <a href=\"types#Boolean\">Boolean</a> </div> <div>Override the callback function name in a JSONP request. This value will be used instead of 'callback' in the 'callback=?' part of the query string in the url. So <code>{jsonp:'onJSONPLoad'}</code> would result in <code>'onJSONPLoad=?'</code> passed to the server. <strong>As of jQuery 1.5</strong>, setting the <code>jsonp</code> option to <code>false</code> prevents jQuery from adding the \"?callback\" string to the URL or attempting to use \"=?\" for transformation. In this case, you should also explicitly set the <code>jsonpCallback</code> setting. For example, <code>{ jsonp: false, jsonpCallback: \"callbackName\" }</code>. If you don't trust the target of your Ajax requests, consider setting the <code>jsonp</code> property to <code>false</code> for security reasons.</div> </li> <li> <div><strong>jsonpCallback</strong></div> <div>Type: <a href=\"types#String\">String</a> or <a href=\"types#Function\">Function</a>()</div> <div>Specify the callback function name for a JSONP request. This value will be used instead of the random name automatically generated by jQuery. It is preferable to let jQuery generate a unique name as it'll make it easier to manage the requests and provide callbacks and error handling. You may want to specify the callback when you want to enable better browser caching of GET requests. <strong>As of jQuery 1.5</strong>, you can also use a function for this setting, in which case the value of <code>jsonpCallback</code> is set to the return value of that function.</div> </li> <li> <div> <strong>method</strong> (default: <code>'GET'</code>)</div> <div>Type: <a href=\"types#String\">String</a> </div> <div>The HTTP method to use for the request (e.g. <code>\"POST\"</code>, <code>\"GET\"</code>, <code>\"PUT\"</code>).<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.9.0/\">1.9.0</a>)</span> </div> </li> <li> <div><strong>mimeType</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A mime type to override the <abbr title=\"XMLHttpRequest\">XHR</abbr> mime type.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.5.1/\">1.5.1</a>)</span> </div> </li> <li> <div><strong>password</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A password to be used with XMLHttpRequest in response to an HTTP access authentication request.</div> </li> <li> <div> <strong>processData</strong> (default: <code>true</code>)</div> <div>Type: <a href=\"types#Boolean\">Boolean</a> </div> <div>By default, data passed in to the <code>data</code> option as an object (technically, anything other than a string) will be processed and transformed into a query string, fitting to the default content-type \"application/x-www-form-urlencoded\". If you want to send a DOMDocument, or other non-processed data, set this option to <code>false</code>.</div> </li> <li> <div><strong>scriptCharset</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>Only applies when the \"script\" transport is used (e.g., cross-domain requests with \"jsonp\" or \"script\" dataType and \"GET\" type). Sets the <code>charset</code> attribute on the script tag used in the request. Used when the character set on the local page is not the same as the one on the remote script.</div> </li> <li> <div> <strong>statusCode</strong> (default: <code>{}</code>)</div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div> <p>An object of numeric HTTP codes and functions to be called when the response has the corresponding code. For example, the following will alert when the response status is a 404:</p> <pre class=\"syntaxhighlighter javascript\">$.ajax({\n  statusCode: {\n    404: function() {\n      alert( \"page not found\" );\n    }\n  }\n});</pre> <p>If the request is successful, the status code functions take the same parameters as the success callback; if it results in an error (including 3xx redirect), they take the same parameters as the <code>error</code> callback.</p> <span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.5/\">1.5</a>)</span> </div> </li> <li> <div><strong>success</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Anything\">Anything</a> data, <a href=\"types#String\">String</a> textStatus, <a href=\"types#jqXHR\">jqXHR</a> jqXHR )</div> <div>A function to be called if the request succeeds. The function gets passed three arguments: The data returned from the server, formatted according to the <code>dataType</code> parameter or the <code>dataFilter</code> callback function, if specified; a string describing the status; and the <code>jqXHR</code> (in jQuery 1.4.x, XMLHttpRequest) object. <strong>As of jQuery 1.5</strong>, <em>the success setting can accept an array of functions. Each function will be called in turn.</em> This is an <a href=\"ajax_events\">Ajax Event</a>.</div> </li> <li> <div><strong>timeout</strong></div> <div>Type: <a href=\"types#Number\">Number</a> </div> <div>Set a timeout (in milliseconds) for the request. This will override any global timeout set with <a href=\"jquery.ajaxsetup\">$.ajaxSetup()</a>. The timeout period starts at the point the <code>$.ajax</code> call is made; if several other requests are in progress and the browser has no connections available, it is possible for a request to time out before it can be sent. <strong>In jQuery 1.4.x and below,</strong> the XMLHttpRequest object will be in an invalid state if the request times out; accessing any object members may throw an exception. <strong>In Firefox 3.0+ only,</strong> script and JSONP requests cannot be cancelled by a timeout; the script will run even if it arrives after the timeout period.</div> </li> <li> <div><strong>traditional</strong></div> <div>Type: <a href=\"types#Boolean\">Boolean</a> </div> <div>Set this to <code>true</code> if you wish to use the traditional style of <a href=\"jquery.param\">param serialization</a>.</div> </li> <li> <div> <strong>type</strong> (default: <code>'GET'</code>)</div> <div>Type: <a href=\"types#String\">String</a> </div> <div>An alias for <code>method</code>. You should use <code>type</code> if you're using versions of jQuery prior to 1.9.0.</div> </li> <li> <div> <strong>url</strong> (default: <code>The current page</code>)</div> <div>Type: <a href=\"types#String\">String</a> </div> <div> A string containing the URL to which the request is sent.</div> </li> <li> <div><strong>username</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A username to be used with XMLHttpRequest in response to an HTTP access authentication request.</div> </li> <li> <div> <strong>xhr</strong> (default: <code>ActiveXObject when available (IE), the XMLHttpRequest otherwise</code>)</div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>Callback for creating the XMLHttpRequest object. Defaults to the ActiveXObject when available (IE), the XMLHttpRequest otherwise. Override to provide your own implementation for XMLHttpRequest or enhancements to the factory.</div> </li> <li> <div><strong>xhrFields</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div> <p>An object of fieldName-fieldValue pairs to set on the native <code><abbr title=\"XMLHttpRequest\">XHR</abbr></code> object. For example, you can use it to set <code>withCredentials</code> to <code>true</code> for cross-domain requests if needed.</p> <pre class=\"syntaxhighlighter javascript\">$.ajax({\n   url: a_cross_domain_url,\n   xhrFields: {\n      withCredentials: true\n   }\n});</pre> <p><strong>In jQuery 1.5</strong>, the <code>withCredentials</code> property was not propagated to the native <code>XHR</code> and thus CORS requests requiring it would ignore this flag. For this reason, we recommend using jQuery 1.5.1+ should you require the use of it.</p> <span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.5.1/\">1.5.1</a>)</span> </div> </li> </ul> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>$.ajax()</code> function underlies all Ajax requests sent by jQuery. It is often unnecessary to directly call this function, as several higher-level alternatives like <code><a href=\"jquery.get\">$.get()</a></code> and <code><a href=\"load\">.load()</a></code> are available and are easier to use. If less common options are required, though, <code>$.ajax()</code> can be used more flexibly.</p> <p>At its simplest, the <code>$.ajax()</code> function can be called with no arguments:</p> <pre class=\"syntaxhighlighter javascript\">$.ajax();</pre> <p><strong>Note:</strong> Default settings can be set globally by using the <code><a href=\"jquery.ajaxsetup\">$.ajaxSetup()</a></code> function.</p> <p>This example, using no options, loads the contents of the current page, but does nothing with the result. To use the result, you can implement one of the callback functions.</p> <h4 id=\"jqXHR\">The jqXHR Object</h4> <p>The jQuery XMLHttpRequest (jqXHR) object returned by <code>$.ajax()</code> <strong>as of jQuery 1.5</strong> is a superset of the browser's native XMLHttpRequest object. For example, it contains <code>responseText</code> and <code>responseXML</code> properties, as well as a <code>getResponseHeader()</code> method. When the transport mechanism is something other than XMLHttpRequest (for example, a script tag for a JSONP request) the <code>jqXHR</code> object simulates native XHR functionality where possible. </p> <p><strong>As of jQuery 1.5.1</strong>, the <code>jqXHR</code> object also contains the <code>overrideMimeType()</code> method (it was available in jQuery 1.4.x, as well, but was temporarily removed in jQuery 1.5). The <code>.overrideMimeType()</code> method may be used in the <code>beforeSend()</code> callback function, for example, to modify the response content-type header:</p> <pre class=\"syntaxhighlighter javascript\">$.ajax({\n  url: \"http://fiddle.jshell.net/favicon.png\",\n  beforeSend: function( xhr ) {\n    xhr.overrideMimeType( \"text/plain; charset=x-user-defined\" );\n  }\n})\n  .done(function( data ) {\n    if ( console &amp;&amp; console.log ) {\n      console.log( \"Sample of data:\", data.slice( 0, 100 ) );\n    }\n  });</pre> <p>The jqXHR objects returned by <code>$.ajax()</code> as of jQuery 1.5 implement the Promise interface, giving them all the properties, methods, and behavior of a Promise (see <a href=\"https://api.jquery.com/category/deferred-object/\">Deferred object</a> for more information). These methods take one or more function arguments that are called when the <code>$.ajax()</code> request terminates. This allows you to assign multiple callbacks on a single request, and even to assign callbacks after the request may have completed. (If the request is already complete, the callback is fired immediately.) Available Promise methods of the jqXHR object include: </p> <ul> <li> <strong>jqXHR.done(function( data, textStatus, jqXHR ) {});</strong> <p>An alternative construct to the success callback option, refer to <code><a href=\"deferred.done\">deferred.done()</a></code> for implementation details.</p> </li> <li> <strong>jqXHR.fail(function( jqXHR, textStatus, errorThrown ) {});</strong> <p>An alternative construct to the error callback option, the <code>.fail()</code> method replaces the deprecated <code>.error()</code> method. Refer to <code><a href=\"deferred.fail\">deferred.fail()</a></code> for implementation details. </p> </li> <li> <strong>jqXHR.always(function( data|jqXHR, textStatus, jqXHR|errorThrown ) { });</strong> <p>An alternative construct to the complete callback option, the <code>.always()</code> method replaces the deprecated <code>.complete()</code> method.</p> <p>In response to a successful request, the function's arguments are the same as those of <code>.done()</code>: data, textStatus, and the jqXHR object. For failed requests the arguments are the same as those of <code>.fail()</code>: the jqXHR object, textStatus, and errorThrown. Refer to <code><a href=\"deferred.always\">deferred.always()</a></code> for implementation details.</p> </li> <li> <strong>jqXHR.then(function( data, textStatus, jqXHR ) {}, function( jqXHR, textStatus, errorThrown ) {});</strong> <p>Incorporates the functionality of the <code>.done()</code> and <code>.fail()</code> methods, allowing (as of jQuery 1.8) the underlying Promise to be manipulated. Refer to <a href=\"deferred.then\"><code>deferred.then()</code></a> for implementation details. </p> </li> </ul> <div class=\"warning\"> <p><strong>Deprecation Notice:</strong> The <code>jqXHR.success()</code>, <code>jqXHR.error()</code>, and <code>jqXHR.complete()</code> callbacks are removed as of jQuery 3.0. You can use <code>jqXHR.done()</code>, <code>jqXHR.fail()</code>, and <code>jqXHR.always()</code> instead.</p> </div> <pre class=\"syntaxhighlighter javascript\">// Assign handlers immediately after making the request,\n// and remember the jqXHR object for this request\nvar jqxhr = $.ajax( \"example.php\" )\n  .done(function() {\n    alert( \"success\" );\n  })\n  .fail(function() {\n    alert( \"error\" );\n  })\n  .always(function() {\n    alert( \"complete\" );\n  });\n \n// Perform other work here ...\n \n// Set another completion function for the request above\njqxhr.always(function() {\n  alert( \"second complete\" );\n});</pre> <p>The <code>this</code> reference within all callbacks is the object in the <code>context</code> option passed to <code>$.ajax</code> in the settings; if <code>context</code> is not specified, <code>this</code> is a reference to the Ajax settings themselves.</p> <p>For backward compatibility with <code>XMLHttpRequest</code>, a <code>jqXHR</code> object will expose the following properties and methods:</p> <ul> <li> <code>readyState</code> </li> <li> <code>status</code> </li> <li> <code>statusText</code> </li> <li> <code>responseXML</code> and/or <code>responseText</code> when the underlying request responded with xml and/or text, respectively</li> <li> <code>setRequestHeader(name, value)</code> which departs from the standard by replacing the old value with the new one rather than concatenating the new value to the old one</li> <li> <code>getAllResponseHeaders()</code> </li> <li> <code>getResponseHeader()</code> </li> <li> <code>statusCode()</code> </li> <li> <code>abort()</code> </li> </ul> <p>No <code>onreadystatechange</code> mechanism is provided, however, since <code>done</code>, <code>fail</code>, <code>always</code>, and <code>statusCode</code> cover all conceivable requirements.</p> <h4 id=\"callback-functions\">Callback Function Queues</h4> <p>The <code>beforeSend</code>, <code>error</code>, <code>dataFilter</code>, <code>success</code> and <code>complete</code> options all accept callback functions that are invoked at the appropriate times.</p> <p><strong>As of jQuery 1.5</strong>, the <code>fail</code> and <code>done</code>, and, as of jQuery 1.6, <code>always</code> callback hooks are first-in, first-out managed queues, allowing for more than one callback for each hook. See <a href=\"https://api.jquery.com/category/deferred-object/\">Deferred object methods</a>, which are implemented internally for these <code>$.ajax()</code> callback hooks.</p> <p>The callback hooks provided by <code>$.ajax()</code> are as follows:</p> <ol> <li> <code>beforeSend</code> callback option is invoked; it receives the <code>jqXHR</code> object and the <code>settings</code> object as parameters.</li> <li> <code>error</code> callback option is invoked, if the request fails. It receives the <code>jqXHR</code>, a string indicating the error type, and an exception object if applicable. Some built-in errors will provide a string as the exception object: \"abort\", \"timeout\", \"No Transport\".</li> <li> <code>dataFilter</code> callback option is invoked immediately upon successful receipt of response data. It receives the returned data and the value of <code>dataType</code>, and must return the (possibly altered) data to pass on to <code>success</code>.</li> <li> <code>success</code> callback option is invoked, if the request succeeds. It receives the returned data, a string containing the success code, and the <code>jqXHR</code> object.</li> <li> <strong>Promise callbacks</strong> — <code>.done()</code>, <code>.fail()</code>, <code>.always()</code>, and <code>.then()</code> — are invoked, in the order they are registered. </li> <li> <code>complete</code> callback option fires, when the request finishes, whether in failure or success. It receives the <code>jqXHR</code> object, as well as a string containing the success or error code.</li> </ol> <h4 id=\"data-types\">Data Types</h4> <p>Different types of response to <code>$.ajax()</code> call are subjected to different kinds of pre-processing before being passed to the success handler. The type of pre-processing depends by default upon the Content-Type of the response, but can be set explicitly using the <code>dataType</code> option. If the <code>dataType</code> option is provided, the Content-Type header of the response will be disregarded.</p> <p>The available data types are <code>text</code>, <code>html</code>, <code>xml</code>, <code>json</code>, <code>jsonp</code>, and <code>script</code>.</p> <p>If <code>text</code> or <code>html</code> is specified, no pre-processing occurs. The data is simply passed on to the success handler, and made available through the <code>responseText</code> property of the <code>jqXHR</code> object.</p> <p>If <code>xml</code> is specified, the response is parsed using <a href=\"jquery.parsexml\"><code>jQuery.parseXML</code></a> before being passed, as an <a href=\"types#XMLDocument\"><code>XMLDocument</code></a>, to the success handler. The XML document is made available through the <code>responseXML</code> property of the <code>jqXHR</code> object.</p> <p>If <code>json</code> is specified, the response is parsed using <a href=\"jquery.parsejson\"><code>jQuery.parseJSON</code></a> before being passed, as an object, to the success handler. The parsed JSON object is made available through the <code>responseJSON</code> property of the <code>jqXHR</code> object.</p> <p>If <code>script</code> is specified, <code>$.ajax()</code> will execute the JavaScript that is received from the server before passing it on to the success handler as a string.</p> <p>If <code>jsonp</code> is specified, <code>$.ajax()</code> will automatically append a query string parameter of (by default) <code>callback=?</code> to the URL. The <code>jsonp</code> and <code>jsonpCallback</code> properties of the settings passed to <code>$.ajax()</code> can be used to specify, respectively, the name of the query string parameter and the name of the JSONP callback function. The server should return valid JavaScript that passes the JSON response into the callback function. <code>$.ajax()</code> will execute the returned JavaScript, calling the JSONP callback function, before passing the JSON object contained in the response to the <code>$.ajax()</code> success handler.</p> <p>For more information on JSONP, see the <a href=\"http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/\">original post detailing its use</a>.</p> <h4 id=\"sending-data-to-server\">Sending Data to the Server</h4> <p>By default, Ajax requests are sent using the GET HTTP method. If the POST method is required, the method can be specified by setting a value for the <code>type</code> option. This option affects how the contents of the <code>data</code> option are sent to the server. POST data will always be transmitted to the server using UTF-8 charset, per the W3C XMLHTTPRequest standard.</p> <p>The <code>data</code> option can contain either a query string of the form <code>key1=value1&amp;key2=value2</code>, or an object of the form <code>{key1: 'value1', key2: 'value2'}</code>. If the latter form is used, the data is converted into a query string using <code><a href=\"jquery.param\">jQuery.param()</a></code> before it is sent. This processing can be circumvented by setting <code>processData</code> to <code>false</code>. The processing might be undesirable if you wish to send an XML object to the server; in this case, change the <code>contentType</code> option from <code>application/x-www-form-urlencoded</code> to a more appropriate MIME type.</p> <h4 id=\"advanced-options\">Advanced Options</h4> <p>The <code>global</code> option prevents handlers registered using <code><a href=\"ajaxsend\">.ajaxSend()</a></code>, <code><a href=\"ajaxerror\">.ajaxError()</a></code>, and similar methods from firing when this request would trigger them. This can be useful to, for example, suppress a loading indicator that was implemented with <code><a href=\"ajaxsend\">.ajaxSend()</a></code> if the requests are frequent and brief. With cross-domain script and JSONP requests, the global option is automatically set to <code>false</code>. See the descriptions of these methods below for more details.</p> <p>If the server performs HTTP authentication before providing a response, the user name and password pair can be sent via the <code>username</code> and <code>password</code> options.</p> <p>Ajax requests are time-limited, so errors can be caught and handled to provide a better user experience. Request timeouts are usually either left at their default or set as a global default using <code><a href=\"jquery.ajaxsetup\">$.ajaxSetup()</a></code> rather than being overridden for specific requests with the <code>timeout</code> option.</p> <p>By default, requests are always issued, but the browser may serve results out of its cache. To disallow use of the cached results, set <code>cache</code> to <code>false</code>. To cause the request to report failure if the asset has not been modified since the last request, set <code>ifModified</code> to <code>true</code>.</p> <p>The <code>scriptCharset</code> allows the character set to be explicitly specified for requests that use a <code>&lt;script&gt;</code> tag (that is, a type of <code>script</code> or <code>jsonp</code>). This is useful if the script and host page have differing character sets.</p> <p>The first letter in Ajax stands for \"asynchronous,\" meaning that the operation occurs in parallel and the order of completion is not guaranteed. The <code>async</code> option to <code>$.ajax()</code> defaults to <code>true</code>, indicating that code execution can continue after the request is made. Setting this option to <code>false</code> (and thus making the call no longer asynchronous) is strongly discouraged, as it can cause the browser to become unresponsive.</p> <p>The <code>$.ajax()</code> function returns the <code>XMLHttpRequest</code> object that it creates. Normally jQuery handles the creation of this object internally, but a custom function for manufacturing one can be specified using the <code>xhr</code> option. The returned object can generally be discarded, but does provide a lower-level interface for observing and manipulating the request. In particular, calling <code>.abort()</code> on the object will halt the request before it completes.</p> <h4 id=\"extending-ajax\">Extending Ajax</h4> <p><strong>As of jQuery 1.5</strong>, jQuery's Ajax implementation includes <a href=\"jquery.ajaxprefilter\">prefilters</a>, <a href=\"jquery.ajaxtransport\">transports</a>, and converters that allow you to extend Ajax with a great deal of flexibility.</p> <h4 id=\"using-converters\">Using Converters</h4> <p><code>$.ajax()</code> converters support mapping data types to other data types. If, however, you want to map a custom data type to a known type (e.g <code>json</code>), you must add a correspondence between the response Content-Type and the actual data type using the <code>contents</code> option:</p> <pre class=\"syntaxhighlighter javascript\">$.ajaxSetup({\n  contents: {\n    mycustomtype: /mycustomtype/\n  },\n  converters: {\n    \"mycustomtype json\": function( result ) {\n      // Do stuff\n      return newresult;\n    }\n  }\n});</pre> <p>This extra object is necessary because the response Content-Types and data types never have a strict one-to-one correspondence (hence the regular expression).</p> <p>To convert from a supported type (e.g <code>text</code>, <code>json</code>) to a custom data type and back again, use another pass-through converter:</p> <pre class=\"syntaxhighlighter javascript\">$.ajaxSetup({\n  contents: {\n    mycustomtype: /mycustomtype/\n  },\n  converters: {\n    \"text mycustomtype\": true,\n    \"mycustomtype json\": function( result ) {\n      // Do stuff\n      return newresult;\n    }\n  }\n});</pre> <p>The above now allows passing from <code>text</code> to <code>mycustomtype</code> and then <code>mycustomtype</code> to <code>json</code>.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> Due to browser security restrictions, most \"Ajax\" requests are subject to the <a title=\"Same Origin Policy on Wikipedia\" href=\"http://en.wikipedia.org/wiki/Same_origin_policy\">same origin policy</a>; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. </li> <li> Script and JSONP requests are not subject to the same origin policy restrictions. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Save some data to the server and notify the user once it's complete.</p> <pre class=\"syntaxhighlighter javascript\">$.ajax({\n  method: \"POST\",\n  url: \"some.php\",\n  data: { name: \"John\", location: \"Boston\" }\n})\n  .done(function( msg ) {\n    alert( \"Data Saved: \" + msg );\n  });</pre> </div> <div class=\"entry-example\" id=\"example-1\"> <p>Retrieve the latest version of an HTML page.</p> <pre class=\"syntaxhighlighter javascript\">$.ajax({\n  url: \"test.html\",\n  cache: false\n})\n  .done(function( html ) {\n    $( \"#results\" ).append( html );\n  });</pre> </div> <div class=\"entry-example\" id=\"example-2\"> <p>Send an xml document as data to the server. By setting the processData option to <code>false</code>, the automatic conversion of data to strings is prevented.</p> <pre class=\"syntaxhighlighter javascript\">var xmlDocument = [create xml document];\nvar xmlRequest = $.ajax({\n  url: \"page.php\",\n  processData: false,\n  data: xmlDocument\n});\n \nxmlRequest.done( handleResponse );</pre> </div> <div class=\"entry-example\" id=\"example-3\"> <p>Send an id as data to the server, save some data to the server, and notify the user once it's complete. If the request fails, alert the user.</p> <pre class=\"syntaxhighlighter javascript\">var menuId = $( \"ul.nav\" ).first().attr( \"id\" );\nvar request = $.ajax({\n  url: \"script.php\",\n  method: \"POST\",\n  data: { id : menuId },\n  dataType: \"html\"\n});\n \nrequest.done(function( msg ) {\n  $( \"#log\" ).html( msg );\n});\n \nrequest.fail(function( jqXHR, textStatus ) {\n  alert( \"Request failed: \" + textStatus );\n});</pre> </div> <div class=\"entry-example\" id=\"example-4\"> <p>Load and execute a JavaScript file.</p> <pre class=\"syntaxhighlighter javascript\">$.ajax({\n  method: \"GET\",\n  url: \"test.js\",\n  dataType: \"script\"\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.ajax\" class=\"_attribution-link\">https://api.jquery.com/jQuery.ajax</a>\n  </p>\n</div>\n","hide":"<h1 class=\"entry-title\">.hide()</h1> <div class=\"entry-content\"> <article id=\"hide1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.hide()</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Hide the matched elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"hide\" href=\"#hide\">.hide()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"hide-duration-complete\" href=\"#hide-duration-complete\">.hide( [duration ] [, complete ] )</a> </h4> <ul> <li> <div> <strong>duration</strong> (default: <code>400</code>)</div> <div>Type: <a href=\"types#Number\">Number</a> or <a href=\"types#String\">String</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function to call once the animation is complete, called once per matched element.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"hide-options\" href=\"#hide-options\">.hide( options )</a> </h4> <ul><li> <div><strong>options</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>A map of additional options to pass to the method.</div> <ul> <li> <div> <strong>duration</strong> (default: <code>400</code>)</div> <div>Type: <a href=\"types#Number\">Number</a> or <a href=\"types#String\">String</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div> <strong>easing</strong> (default: <code>swing</code>)</div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string indicating which easing function to use for the transition.</div> </li> <li> <div> <strong>queue</strong> (default: <code>true</code>)</div> <div>Type: <a href=\"types#Boolean\">Boolean</a> or <a href=\"types#String\">String</a> </div> <div>A Boolean indicating whether to place the animation in the effects queue. If false, the animation will begin immediately. <strong>As of jQuery 1.7</strong>, the queue option can also accept a string, in which case the animation is added to the queue represented by that string. When a custom queue name is used the animation does not automatically start; you must call <code>.dequeue(\"queuename\")</code> to start it.</div> </li> <li> <div><strong>specialEasing</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a>)</span> </div> </li> <li> <div><strong>step</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Number\">Number</a> now, <a href=\"types#Tween\">Tween</a> tween )</div> <div>A function to be called for each animated property of each animated element. This function provides an opportunity to modify the Tween object to change the value of the property before it is set.</div> </li> <li> <div><strong>progress</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Number\">Number</a> progress, <a href=\"types#Number\">Number</a> remainingMs )</div> <div>A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function that is called once the animation on an element is complete.</div> </li> <li> <div><strong>start</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation )</div> <div>A function to call when the animation on an element begins.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>done</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Boolean\">Boolean</a> jumpedToEnd )</div> <div>A function to be called when the animation on an element completes (its Promise object is resolved).<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>fail</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Boolean\">Boolean</a> jumpedToEnd )</div> <div>A function to be called when the animation on an element fails to complete (its Promise object is rejected).<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>always</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Boolean\">Boolean</a> jumpedToEnd )</div> <div>A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected).<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> </ul> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"hide-duration-easing-complete\" href=\"#hide-duration-easing-complete\">.hide( duration [, easing ] [, complete ] )</a> </h4> <ul> <li> <div> <strong>duration</strong> (default: <code>400</code>)</div> <div>Type: <a href=\"types#Number\">Number</a> or <a href=\"types#String\">String</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div> <strong>easing</strong> (default: <code>swing</code>)</div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string indicating which easing function to use for the transition.</div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function to call once the animation is complete, called once per matched element.</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>With no parameters, the <code>.hide()</code> method is the simplest way to hide an element:</p> <pre class=\"syntaxhighlighter javascript\">$( \".target\" ).hide();</pre> <p>The matched elements will be hidden immediately, with no animation. This is roughly equivalent to calling <code>.css( \"display\", \"none\" )</code>, except that the value of the <code>display</code> property is saved in jQuery's data cache so that <code>display</code> can later be restored to its initial value. If an element has a <code>display</code> value of <code>inline</code> and is hidden then shown, it will once again be displayed <code>inline</code>.</p> <p>When a duration, a plain object, or a \"complete\" function is provided, <code>.hide()</code> becomes an animation method. The <code>.hide()</code> method animates the width, height, and opacity of the matched elements simultaneously. When these properties reach 0, the <code>display</code> style property is set to <code>none</code> to ensure that the element no longer affects the layout of the page.</p> <p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of <code>200</code> and <code>600</code> milliseconds, respectively.</p> <p>Note that <code>.hide()</code> is fired immediately and will override the animation queue if no duration or a duration of 0 is specified.</p> <p>As of jQuery <strong>1.4.3</strong>, an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called <code>swing</code>, and one that progresses at a constant pace, called <code>linear</code>. More easing functions are available with the use of plug-ins, most notably the <a href=\"http://jqueryui.com\">jQuery UI suite</a>.</p> <p>If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but <code>this</code> is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.</p> <div class=\"warning\"> <p><strong>Note:</strong> This method may cause performance issues, especially when used on many elements. If you're encountering such issues, use performance testing tools to determine whether this method is causing them. Moreover, this method can cause problems with responsive layouts if the display value differs at different viewport sizes.</p> </div> <p>We can animate any element, such as a simple image:</p> <pre class=\"syntaxhighlighter xml\">&lt;div id=\"clickme\"&gt;\n  Click here\n&lt;/div&gt;\n&lt;img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\"&gt;</pre> <pre class=\"syntaxhighlighter javascript\">// With the element initially shown, we can hide it slowly:\n$( \"#clickme\" ).click(function() {\n  $( \"#book\" ).hide( \"slow\", function() {\n    alert( \"Animation complete.\" );\n  });\n});</pre> <figure> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_05.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_06.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_07.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_08.png\" alt=\"\"> <figcaption>Figure 1 - Illustration of the <code>hide()</code> effect</figcaption> </figure> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> All jQuery effects, including <code>.hide()</code>, can be turned off globally by setting <code>jQuery.fx.off = true</code>, which effectively sets the duration to 0. For more information, see <a href=\"jquery.fx.off\">jQuery.fx.off</a>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Hides all paragraphs then the link on click.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;hide demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Hello&lt;/p&gt;\n&lt;a href=\"#\"&gt;Click to hide me too&lt;/a&gt;\n&lt;p&gt;Here is another paragraph&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).hide();\n$( \"a\" ).click(function( event ) {\n  event.preventDefault();\n  $( this ).hide();\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Animates all shown paragraphs to hide slowly, completing the animation within 600 milliseconds.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;hide demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    background: #dad;\n    font-weight: bold;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button&gt;Hide 'em&lt;/button&gt;\n&lt;p&gt;Hiya&lt;/p&gt;\n&lt;p&gt;Such interesting text, eh?&lt;/p&gt;\n \n&lt;script&gt;\n$( \"button\" ).click(function() {\n  $( \"p\" ).hide( \"slow\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-2\"> <p>Animates all spans (words in this case) to hide fastly, completing each animation within 200 milliseconds. Once each animation is done, it starts the next one.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;hide demo&lt;/title&gt;\n  &lt;style&gt;\n  span {\n    background: #def3ca;\n    padding: 3px;\n    float: left;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button id=\"hider\"&gt;Hide&lt;/button&gt;\n&lt;button id=\"shower\"&gt;Show&lt;/button&gt;\n&lt;div&gt;\n  &lt;span&gt;Once&lt;/span&gt; &lt;span&gt;upon&lt;/span&gt; &lt;span&gt;a&lt;/span&gt;\n  &lt;span&gt;time&lt;/span&gt; &lt;span&gt;there&lt;/span&gt; &lt;span&gt;were&lt;/span&gt;\n  &lt;span&gt;three&lt;/span&gt; &lt;span&gt;programmers...&lt;/span&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\n$( \"#hider\" ).click(function() {\n  $( \"span:last-child\" ).hide( \"fast\", function() {\n    // Use arguments.callee so we don't need a named function\n    $( this ).prev().hide( \"fast\", arguments.callee );\n  });\n});\n$( \"#shower\" ).click(function() {\n  $( \"span\" ).show( 2000 );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-3\"> <p>Hides the divs when clicked over 2 seconds, then removes the div element when its hidden. Try clicking on more than one box at a time.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;hide demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    background: #ece023;\n    width: 30px;\n    height: 40px;\n    margin: 2px;\n    float: left;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\nfor ( var i = 0; i &lt; 5; i++ ) {\n  $( \"&lt;div&gt;\" ).appendTo( document.body );\n}\n$( \"div\" ).click(function() {\n  $( this ).hide( 2000, function() {\n    $( this ).remove();\n  });\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/hide\" class=\"_attribution-link\">https://api.jquery.com/hide</a>\n  </p>\n</div>\n","image-selector":"<h1 class=\"entry-title\">:image Selector</h1> <div class=\"entry-content\"> <article id=\"image1\" class=\"entry selector\"><h2 class=\"section-title\"><span>image selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all elements of type image.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \":image\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p><code>:image</code> is equivalent to <code>[type=\"image\"]</code></p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> Because <code>:image</code> is a jQuery extension and not part of the CSS specification, queries using <code>:image</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. For better performance in modern browsers, use <code>[type=\"image\"]</code> instead. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds all image inputs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;image demo&lt;/title&gt;\n  &lt;style&gt;\n  textarea {\n    height: 45px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;form&gt;\n  &lt;input type=\"button\" value=\"Input Button\"&gt;\n  &lt;input type=\"checkbox\"&gt;\n  &lt;input type=\"file\"&gt;\n  &lt;input type=\"hidden\"&gt;\n  &lt;input type=\"image\"&gt;\n  &lt;input type=\"password\"&gt;\n  &lt;input type=\"radio\"&gt;\n  &lt;input type=\"reset\"&gt;\n  &lt;input type=\"submit\"&gt;\n  &lt;input type=\"text\"&gt;\n  &lt;select&gt;\n    &lt;option&gt;Option&lt;/option&gt;\n  &lt;/select&gt;\n  &lt;textarea&gt;&lt;/textarea&gt;\n  &lt;button&gt;Button&lt;/button&gt;\n&lt;/form&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar input = $( \"input:image\" ).css({\n  background:\"yellow\",\n  border:\"3px red solid\"\n});\n$( \"div\" )\n  .text( \"For this type jQuery found \" + input.length + \".\" )\n  .css( \"color\", \"red\" );\n$( \"form\" ).submit(function( event ) {\n  event.preventDefault();\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/image-selector\" class=\"_attribution-link\">https://api.jquery.com/image-selector</a>\n  </p>\n</div>\n","innerheight":"<h1 class=\"entry-title\">.innerHeight()</h1> <div class=\"entry-content\"> Get the current computed inner height (including padding but not border) for the first element in the set of matched elements or set the inner height of every matched element.<div class=\"toc\"> <h4><span>Contents:</span></h4> <ul class=\"toc-list\"> <li> <a href=\"#innerHeight1\">.innerHeight()</a><ul><li><a href=\"#innerHeight\">.innerHeight()</a></li></ul> </li> <li> <a href=\"#innerHeight2\">.innerHeight( value )</a><ul> <li><a href=\"#innerHeight-value\">.innerHeight( value )</a></li> <li><a href=\"#innerHeight-function\">.innerHeight( function )</a></li> </ul> </li> </ul> </div>\n<article id=\"innerHeight1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.innerHeight()</span><span class=\"returns\">Returns: <a href=\"types#Number\">Number</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Get the current computed height for the first element in the set of matched elements, including padding but not border.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2.6/\">1.2.6</a></span><a id=\"innerHeight\" href=\"#innerHeight\">.innerHeight()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method returns the height of the element, including top and bottom padding, in pixels.</p> <p>This method is not applicable to <code>window</code> and <code>document</code> objects; for these, use <code><a href=\"height\">.height()</a></code> instead.</p> <figure> <img src=\"https://api.jquery.com/resources/0042_04_02.png\"> <figcaption>Figure 1 - Illustration of the measured height</figcaption> </figure> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> The number returned by dimensions-related APIs, including <code>.innerHeight()</code>, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition. </li> <li> The value reported by <code>.innerHeight()</code> is not guaranteed to be accurate when the element or its parent is hidden. To get an accurate value, ensure the element is visible before using <code>.innerHeight()</code>. jQuery will attempt to temporarily show and then re-hide an element in order to measure its dimensions, but this is unreliable and (even when accurate) can significantly impact page performance. This show-and-rehide measurement feature may be removed in a future version of jQuery. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Get the innerHeight of a paragraph.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;innerHeight demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    margin: 10px;\n    padding: 5px;\n    border: 2px solid #666;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Hello&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;\n \n&lt;script&gt;\nvar p = $( \"p:first\" );\n$( \"p:last\" ).text( \"innerHeight:\" + p.innerHeight() );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article><article id=\"innerHeight2\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.innerHeight( value )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Set the CSS inner height of each element in the set of matched elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.8.0/\">1.8.0</a></span><a id=\"innerHeight-value\" href=\"#innerHeight-value\">.innerHeight( value )</a> </h4> <ul><li> <div><strong>value</strong></div> <div>Type: <a href=\"types#String\">String</a> or <a href=\"types#Number\">Number</a> </div> <div>A number representing the number of pixels, or a number along with an optional unit of measure appended (as a string).</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.8.0/\">1.8.0</a></span><a id=\"innerHeight-function\" href=\"#innerHeight-function\">.innerHeight( function )</a> </h4> <ul><li> <div><strong>function</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Integer\">Integer</a> index, <a href=\"types#Number\">Number</a> height ) =&gt; <a href=\"types#String\">String</a> or <a href=\"types#Number\">Number</a> </div> <div>A function returning the inner height (including padding but not border) to set. Receives the index position of the element in the set and the old inner height as arguments. Within the function, <code>this</code> refers to the current element in the set.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc-1\"> <p>When calling <code>.innerHeight(\"value\")</code>, the value can be either a string (number and unit) or a number. If only a number is provided for the value, jQuery assumes a pixel unit. If a string is provided, however, any valid CSS measurement may be used for the height (such as <code>100px</code>, <code>50%</code>, or <code>auto</code>). Note that in modern browsers, the CSS height property does not include padding, border, or margin, unless the <code>box-sizing</code> CSS property is used.</p> <p>If no explicit unit is specified (like \"em\" or \"%\") then \"px\" is assumed.</p> </div> <section class=\"entry-examples\" id=\"entry-examples-1\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-1-0\"> <p>Change the inner height of each div the first time it is clicked (and change its color).</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;innerHeight demo&lt;/title&gt;\n  &lt;style&gt;\ndiv {\n  width: 60px;\n  padding: 10px;\n  height: 70px;\n  float: left;\n  margin: 5px;\n  background: red;\n  cursor: pointer;\n}\n.mod {\n  background: blue;\n  cursor: default;\n}\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;d&lt;/div&gt;\n&lt;div&gt;d&lt;/div&gt;\n&lt;div&gt;d&lt;/div&gt;\n&lt;div&gt;d&lt;/div&gt;\n&lt;div&gt;d&lt;/div&gt;\n \n&lt;script&gt;\nvar modHeight = 70;\n$( \"div\" ).one( \"click\", function() {\n  $( this ).innerHeight( modHeight ).addClass( \"mod\" );\n  modHeight -= 8;\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/innerHeight\" class=\"_attribution-link\">https://api.jquery.com/innerHeight</a>\n  </p>\n</div>\n","innerwidth":"<h1 class=\"entry-title\">.innerWidth()</h1> <div class=\"entry-content\"> Get the current computed inner width (including padding but not border) for the first element in the set of matched elements or set the inner width of every matched element.<div class=\"toc\"> <h4><span>Contents:</span></h4> <ul class=\"toc-list\"> <li> <a href=\"#innerWidth1\">.innerWidth()</a><ul><li><a href=\"#innerWidth\">.innerWidth()</a></li></ul> </li> <li> <a href=\"#innerWidth2\">.innerWidth( value )</a><ul> <li><a href=\"#innerWidth-value\">.innerWidth( value )</a></li> <li><a href=\"#innerWidth-function\">.innerWidth( function )</a></li> </ul> </li> </ul> </div>\n<article id=\"innerWidth1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.innerWidth()</span><span class=\"returns\">Returns: <a href=\"types#Number\">Number</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Get the current computed inner width for the first element in the set of matched elements, including padding but not border.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2.6/\">1.2.6</a></span><a id=\"innerWidth\" href=\"#innerWidth\">.innerWidth()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method returns the width of the element, including left and right padding, in pixels.</p> <p>This method is not applicable to <code>window</code> and <code>document</code> objects; for these, use <code><a href=\"width\">.width()</a></code> instead.</p> <figure> <img src=\"https://api.jquery.com/resources/0042_04_05.png\"> <figcaption>Figure 1 - Illustration of the measured width</figcaption> </figure> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> The number returned by dimensions-related APIs, including <code>.innerWidth()</code>, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition. </li> <li> The value reported by <code>.innerWidth()</code> is not guaranteed to be accurate when the element or its parent is hidden. To get an accurate value, ensure the element is visible before using <code>.innerWidth()</code>. jQuery will attempt to temporarily show and then re-hide an element in order to measure its dimensions, but this is unreliable and (even when accurate) can significantly impact page performance. This show-and-rehide measurement feature may be removed in a future version of jQuery. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Get the innerWidth of a paragraph.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;innerWidth demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    margin: 10px;\n    padding: 5px;\n    border: 2px solid #666;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Hello&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;\n \n&lt;script&gt;\nvar p = $( \"p:first\" );\n$( \"p:last\" ).text( \"innerWidth:\" + p.innerWidth() );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article><article id=\"innerWidth2\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.innerWidth( value )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Set the CSS inner width of each element in the set of matched elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.8.0/\">1.8.0</a></span><a id=\"innerWidth-value\" href=\"#innerWidth-value\">.innerWidth( value )</a> </h4> <ul><li> <div><strong>value</strong></div> <div>Type: <a href=\"types#String\">String</a> or <a href=\"types#Number\">Number</a> </div> <div>A number representing the number of pixels, or a number along with an optional unit of measure appended (as a string).</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.8.0/\">1.8.0</a></span><a id=\"innerWidth-function\" href=\"#innerWidth-function\">.innerWidth( function )</a> </h4> <ul><li> <div><strong>function</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Integer\">Integer</a> index, <a href=\"types#Number\">Number</a> width ) =&gt; <a href=\"types#String\">String</a> or <a href=\"types#Number\">Number</a> </div> <div>A function returning the inner width (including padding but not border) to set. Receives the index position of the element in the set and the old inner width as arguments. Within the function, <code>this</code> refers to the current element in the set.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc-1\"> <p>When calling <code>.innerWidth(\"value\")</code>, the value can be either a string (number and unit) or a number. If only a number is provided for the value, jQuery assumes a pixel unit. If a string is provided, however, any valid CSS measurement may be used for the width (such as <code>100px</code>, <code>50%</code>, or <code>auto</code>). Note that in modern browsers, the CSS width property does not include padding, border, or margin, unless the <code>box-sizing</code> CSS property is used.</p> <p>If no explicit unit is specified (like \"em\" or \"%\") then \"px\" is assumed.</p> </div> <section class=\"entry-examples\" id=\"entry-examples-1\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-1-0\"> <p>Change the inner width of each div the first time it is clicked (and change its color).</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;innerWidth demo&lt;/title&gt;\n  &lt;style&gt;\ndiv {\nwidth: 60px;\npadding: 10px;\nheight: 50px;\nfloat: left;\nmargin: 5px;\nbackground: red;\ncursor: pointer;\n}\n.mod {\nbackground: blue;\ncursor: default;\n}\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;d&lt;/div&gt;\n&lt;div&gt;d&lt;/div&gt;\n&lt;div&gt;d&lt;/div&gt;\n&lt;div&gt;d&lt;/div&gt;\n&lt;div&gt;d&lt;/div&gt;\n \n&lt;script&gt;\nvar modWidth = 60;\n$( \"div\" ).one( \"click\", function() {\n$( this ).innerWidth( modWidth ).addClass( \"mod\" );\nmodWidth -= 8;\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/innerWidth\" class=\"_attribution-link\">https://api.jquery.com/innerWidth</a>\n  </p>\n</div>\n","insertafter":"<h1 class=\"entry-title\">.insertAfter()</h1> <div class=\"entry-content\"> <article id=\"insertAfter1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.insertAfter( target )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Insert every element in the set of matched elements after the target.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"insertAfter-target\" href=\"#insertAfter-target\">.insertAfter( target )</a> </h4> <ul><li> <div><strong>target</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> or <a href=\"types#htmlString\">htmlString</a> or <a href=\"types#Element\">Element</a> or <a href=\"types#Array\">Array</a> or <a href=\"types#jQuery\">jQuery</a> </div> <div>A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements will be inserted after the element(s) specified by this parameter.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code><a href=\"after\">.after()</a></code> and <code>.insertAfter()</code> methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With <code>.after()</code>, the selector expression preceding the method is the container after which the content is inserted. With <code>.insertAfter()</code>, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted after the target container.</p> <p>Consider the following HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;h2&gt;Greetings&lt;/h2&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;/div&gt;\n&lt;/div&gt;</pre> <p>We can create content and insert it after several elements at once:</p> <pre class=\"syntaxhighlighter javascript\">$( \"&lt;p&gt;Test&lt;/p&gt;\" ).insertAfter( \".inner\" );</pre> <p>Each inner <code>&lt;div&gt;</code> element gets this new content:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;h2&gt;Greetings&lt;/h2&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;/div&gt;\n  &lt;p&gt;Test&lt;/p&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;/div&gt;\n  &lt;p&gt;Test&lt;/p&gt;\n&lt;/div&gt;</pre> <p>We can also select an element on the page and insert it after another:</p> <pre class=\"syntaxhighlighter javascript\">$( \"h2\" ).insertAfter( $( \".container\" ) );</pre> <p>If an element selected this way is inserted into a single location elsewhere in the DOM, it will be moved after the target (not cloned) and a new set consisting of the inserted element is returned:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;/div&gt;\n&lt;/div&gt;\n&lt;h2&gt;Greetings&lt;/h2&gt;</pre> <p>If there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first, and that new set (the original element plus clones) is returned.</p> <p><strong>Before jQuery 1.9,</strong> the append-to-single-element case did not create a new set, but instead returned the original set which made it difficult to use the <code>.end()</code> method reliably when being used with an unknown number of elements.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> By design, any jQuery constructor or method that accepts an HTML string — <a href=\"jquery\">jQuery()</a>, <a href=\"append\">.append()</a>, <a href=\"after\">.after()</a>, etc. — can potentially execute code. This can occur by injection of script tags or use of HTML attributes that execute code (for example, <code>&lt;img onload=\"\"&gt;</code>). Do not use these methods to insert strings obtained from untrusted sources such as URL query parameters, cookies, or form inputs. Doing so can introduce cross-site-scripting (XSS) vulnerabilities. Remove or escape any user input before adding content to the document. </li> <li> jQuery doesn't officially support SVG. Using jQuery methods on SVG documents, unless explicitly documented for that method, might cause unexpected behaviors. Examples of methods that support SVG as of jQuery 3.0 are <code>addClass</code> and <code>removeClass</code>. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Insert all paragraphs after an element with id of \"foo\". Same as $( \"#foo\" ).after( \"p\" )</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;insertAfter demo&lt;/title&gt;\n  &lt;style&gt;\n  #foo {\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt; is what I said... &lt;/p&gt;\n&lt;div id=\"foo\"&gt;FOO!&lt;/div&gt;\n \n&lt;script&gt;\n$( \"p\" ).insertAfter( \"#foo\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/insertAfter\" class=\"_attribution-link\">https://api.jquery.com/insertAfter</a>\n  </p>\n</div>\n","insertbefore":"<h1 class=\"entry-title\">.insertBefore()</h1> <div class=\"entry-content\"> <article id=\"insertBefore1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.insertBefore( target )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Insert every element in the set of matched elements before the target.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"insertBefore-target\" href=\"#insertBefore-target\">.insertBefore( target )</a> </h4> <ul><li> <div><strong>target</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> or <a href=\"types#htmlString\">htmlString</a> or <a href=\"types#Element\">Element</a> or <a href=\"types#Array\">Array</a> or <a href=\"types#jQuery\">jQuery</a> </div> <div>A selector, element, array of elements, HTML string, or jQuery object; the matched set of elements will be inserted before the element(s) specified by this parameter.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code><a href=\"before\">.before()</a></code> and <code>.insertBefore()</code> methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With <code>.before()</code>, the selector expression preceding the method is the container before which the content is inserted. With <code>.insertBefore()</code>, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted before the target container.</p> <p>Consider the following HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;h2&gt;Greetings&lt;/h2&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;/div&gt;\n&lt;/div&gt;</pre> <p>We can create content and insert it before several elements at once:</p> <pre class=\"syntaxhighlighter javascript\">$( \"&lt;p&gt;Test&lt;/p&gt;\" ).insertBefore( \".inner\" );</pre> <p>Each inner <code>&lt;div&gt;</code> element gets this new content:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;h2&gt;Greetings&lt;/h2&gt;\n  &lt;p&gt;Test&lt;/p&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;/div&gt;\n  &lt;p&gt;Test&lt;/p&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;/div&gt;\n&lt;/div&gt;</pre> <p>We can also select an element on the page and insert it before another:</p> <pre class=\"syntaxhighlighter javascript\">$( \"h2\" ).insertBefore( $( \".container\" ) );</pre> <p>If an element selected this way is inserted into a single location elsewhere in the DOM, it will be moved before the target (not cloned) and a new set consisting of the inserted element is returned:</p> <pre class=\"syntaxhighlighter xml\">&lt;h2&gt;Greetings&lt;/h2&gt;\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;/div&gt;\n&lt;/div&gt;</pre> <p>If there is more than one target element, however, cloned copies of the inserted element will be created for each target after the first, and that new set (the original element plus clones) is returned.</p> <p><strong>Before jQuery 1.9,</strong> the append-to-single-element case did not create a new set, but instead returned the original set which made it difficult to use the <code>.end()</code> method reliably when being used with an unknown number of elements.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> By design, any jQuery constructor or method that accepts an HTML string — <a href=\"jquery\">jQuery()</a>, <a href=\"append\">.append()</a>, <a href=\"after\">.after()</a>, etc. — can potentially execute code. This can occur by injection of script tags or use of HTML attributes that execute code (for example, <code>&lt;img onload=\"\"&gt;</code>). Do not use these methods to insert strings obtained from untrusted sources such as URL query parameters, cookies, or form inputs. Doing so can introduce cross-site-scripting (XSS) vulnerabilities. Remove or escape any user input before adding content to the document. </li> <li> jQuery doesn't officially support SVG. Using jQuery methods on SVG documents, unless explicitly documented for that method, might cause unexpected behaviors. Examples of methods that support SVG as of jQuery 3.0 are <code>addClass</code> and <code>removeClass</code>. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Insert all paragraphs before an element with id of \"foo\". Same as $( \"#foo\" ).before( \"p\" )</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;insertBefore demo&lt;/title&gt;\n  &lt;style&gt;\n  #foo {\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div id=\"foo\"&gt;FOO!&lt;/div&gt;\n&lt;p&gt;I would like to say: &lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).insertBefore( \"#foo\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/insertBefore\" class=\"_attribution-link\">https://api.jquery.com/insertBefore</a>\n  </p>\n</div>\n","is":"<h1 class=\"entry-title\">.is()</h1> <div class=\"entry-content\"> <article id=\"is1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.is( selector )</span><span class=\"returns\">Returns: <a href=\"types#Boolean\">Boolean</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Check the current matched set of elements against a selector, element, or jQuery object and return <code>true</code> if at least one of these elements matches the given arguments.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"is-selector\" href=\"#is-selector\">.is( selector )</a> </h4> <ul><li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> </div> <div>A string containing a selector expression to match elements against.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.6/\">1.6</a></span><a id=\"is-function\" href=\"#is-function\">.is( function )</a> </h4> <ul><li> <div><strong>function</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Integer\">Integer</a> index, <a href=\"types#Element\">Element</a> element ) =&gt; <a href=\"types#Boolean\">Boolean</a> </div> <div>A function used as a test for every element in the set. It accepts two arguments, <code>index</code>, which is the element's index in the jQuery collection, and <code>element</code>, which is the DOM element. Within the function, <code>this</code> refers to the current DOM element.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.6/\">1.6</a></span><a id=\"is-selection\" href=\"#is-selection\">.is( selection )</a> </h4> <ul><li> <div><strong>selection</strong></div> <div>Type: <a href=\"types#jQuery\">jQuery</a> </div> <div>An existing jQuery object to match the current set of elements against.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.6/\">1.6</a></span><a id=\"is-elements\" href=\"#is-elements\">.is( elements )</a> </h4> <ul><li> <div><strong>elements</strong></div> <div>Type: <a href=\"types#Element\">Element</a> </div> <div>One or more elements to match the current set of elements against.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Unlike other filtering methods, <code>.is()</code> does not create a new jQuery object. Instead, it allows you to test the contents of a jQuery object without modification. This is often useful inside callbacks, such as event handlers.</p> <p>Suppose you have a list, with two of its items containing a child element:</p> <pre class=\"syntaxhighlighter xml\">&lt;ul&gt;\n  &lt;li&gt;list &lt;strong&gt;item 1&lt;/strong&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;span&gt;list item 2&lt;/span&gt;&lt;/li&gt;\n  &lt;li&gt;list item 3&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>You can attach a click handler to the &lt;ul&gt; element, and then limit the code to be triggered only when a list item itself, not one of its children, is clicked:</p> <pre class=\"syntaxhighlighter javascript\">$( \"ul\" ).click(function( event ) {\n  var target = $( event.target );\n  if ( target.is( \"li\" ) ) {\n    target.css( \"background-color\", \"red\" );\n  }\n});</pre> <p>Now, when the user clicks on the word \"list\" in the first item or anywhere in the third item, the clicked list item will be given a red background. However, when the user clicks on item 1 in the first item or anywhere in the second item, nothing will occur, because in those cases the target of the event would be <code>&lt;strong&gt;</code> or <code>&lt;span&gt;</code>, respectively.</p> <p>Prior to jQuery 1.7, in selector strings with positional selectors such as <code>:first</code>, <code>:gt()</code>, or <code>:even</code>, the positional filtering is done against the jQuery object passed to <code>.is()</code>, <em>not</em> against the containing document. So for the HTML shown above, an expression such as <code>$( \"li:first\" ).is( \"li:last\" )</code> returns <code>true</code>, but <code>$( \"li:first-child\" ).is( \"li:last-child\" )</code> returns <code>false</code>. In addition, a bug in Sizzle prevented many positional selectors from working properly. These two factors made positional selectors almost unusable in filters.</p> <p>Starting with jQuery 1.7, selector strings with positional selectors apply the selector against the document, and then determine whether the first element of the current jQuery set matches any of the resulting elements. So for the HTML shown above, an expression such as <code>$( \"li:first\" ).is( \"li:last\" )</code> returns <code>false</code>. Note that since positional selectors are jQuery additions and not W3C standard, we recommend using the W3C selectors whenever feasible.</p> <h4>Using a Function</h4> <p>The second form of this method evaluates expressions related to elements based on a function rather than a selector. For each element, if the function returns <code>true</code>, <code>.is()</code> returns <code>true</code> as well. For example, given a somewhat more involved HTML snippet:</p> <pre class=\"syntaxhighlighter xml\">&lt;ul&gt;\n  &lt;li&gt;&lt;strong&gt;list&lt;/strong&gt; item 1 - one strong tag&lt;/li&gt;\n  &lt;li&gt;&lt;strong&gt;list&lt;/strong&gt; item &lt;strong&gt;2&lt;/strong&gt; -\n    two &lt;span&gt;strong tags&lt;/span&gt;&lt;/li&gt;\n  &lt;li&gt;list item 3&lt;/li&gt;\n  &lt;li&gt;list item 4&lt;/li&gt;\n  &lt;li&gt;list item 5&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>You can attach a click handler to every <code>&lt;li&gt;</code> that evaluates the number of <code>&lt;strong&gt;</code> elements within the clicked <code>&lt;li&gt;</code> at that time like so:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li\" ).click(function() {\n  var li = $( this ),\n    isWithTwo = li.is(function() {\n      return $( \"strong\", this ).length === 2;\n    });\n  if ( isWithTwo ) {\n    li.css( \"background-color\", \"green\" );\n  } else {\n    li.css( \"background-color\", \"red\" );\n  }\n});</pre> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Shows a few ways is() can be used inside an event handler.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;is demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    width: 60px;\n    height: 60px;\n    margin: 5px;\n    float: left;\n    border: 4px outset;\n    background: green;\n    text-align: center;\n    font-weight: bolder;\n    cursor: pointer;\n  }\n  .blue {\n    background: blue;\n  }\n  .red {\n    background: red;\n  }\n  span {\n    color: white;\n    font-size: 16px;\n  }\n  p {\n    color: red;\n    font-weight: bolder;\n    background: yellow;\n    margin: 3px;\n    clear: left;\n    display: none;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;&lt;/div&gt;\n&lt;div class=\"blue\"&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div class=\"red\"&gt;&lt;/div&gt;\n&lt;div&gt;&lt;br/&gt;&lt;span&gt;Peter&lt;/span&gt;&lt;/div&gt;\n&lt;div class=\"blue\"&gt;&lt;/div&gt;\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n \n&lt;script&gt;\n$( \"div\" ).one( \"click\", function() {\n  if ( $( this ).is( \":first-child\" ) ) {\n    $( \"p\" ).text( \"It's the first div.\" );\n  } else if ( $( this ).is( \".blue,.red\" ) ) {\n    $( \"p\" ).text( \"It's a blue or red div.\" );\n  } else if ( $( this ).is( \":contains('Peter')\" ) ) {\n    $( \"p\" ).text( \"It's Peter!\" );\n  } else {\n    $( \"p\" ).html( \"It's nothing &lt;em&gt;special&lt;/em&gt;.\" );\n  }\n  $( \"p\" ).hide().slideDown( \"slow\" );\n  $( this ).css({\n    \"border-style\": \"inset\",\n    cursor: \"default\"\n  });\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Returns true, because the parent of the input is a form element.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;is demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;form&gt;\n  &lt;input type=\"checkbox\"&gt;\n&lt;/form&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar isFormParent = $( \"input[type='checkbox']\" ).parent().is( \"form\" );\n$( \"div\" ).text( \"isFormParent = \" + isFormParent );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-2\"> <p>Returns false, because the parent of the input is a p element.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;is demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;form&gt;\n  &lt;p&gt;&lt;input type=\"checkbox\"&gt;&lt;/p&gt;\n&lt;/form&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar isFormParent = $( \"input[type='checkbox']\" ).parent().is( \"form\" );\n$( \"div\" ).text( \"isFormParent = \" + isFormParent );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-3\"> <p>Checks against an existing collection of alternating list elements. Blue, alternating list elements slide up while others turn red.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;is demo&lt;/title&gt;\n  &lt;style&gt;\n  li {\n    cursor: pointer;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;ul id=\"browsers\"&gt;\n  &lt;li&gt;Chrome&lt;/li&gt;\n  &lt;li&gt;Safari&lt;/li&gt;\n  &lt;li&gt;Firefox&lt;/li&gt;\n  &lt;li&gt;Opera&lt;/li&gt;\n&lt;/ul&gt;\n \n&lt;script&gt;\nvar alt = $( \"#browsers li:nth-child(2n)\" ).css( \"background\", \"#0ff\" );\n$( \"li\" ).click(function() {\n  var li = $( this );\n  if ( li.is( alt ) ) {\n    li.slideUp();\n  } else {\n    li.css( \"background\", \"red\" );\n  }\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-4\"> <p>An alternate way to achieve the above example using an element rather than a jQuery object. Checks against an existing collection of alternating list elements. Blue, alternating list elements slide up while others turn red.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;is demo&lt;/title&gt;\n  &lt;style&gt;\n  li {\n    cursor: pointer;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;ul id=\"browsers\"&gt;\n  &lt;li&gt;Chrome&lt;/li&gt;\n  &lt;li&gt;Safari&lt;/li&gt;\n  &lt;li&gt;Firefox&lt;/li&gt;\n  &lt;li&gt;Opera&lt;/li&gt;\n&lt;/ul&gt;\n \n&lt;script&gt;\nvar alt = $( \"#browsers li:nth-child(2n)\" ).css( \"background\", \"#0ff\" );\n$( \"li\" ).click(function() {\n  if ( alt.is( this ) ) {\n    $( this ).slideUp();\n  } else {\n    $( this ).css( \"background\", \"red\" );\n  }\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/is\" class=\"_attribution-link\">https://api.jquery.com/is</a>\n  </p>\n</div>\n","jquery":"<h1 class=\"entry-title\">jQuery()</h1> <div class=\"entry-content\"> Return a collection of matched elements either found in the DOM based on passed argument(s) or created by passing an HTML string.<div class=\"toc\"> <h4><span>Contents:</span></h4> <ul class=\"toc-list\"> <li> <a href=\"#jQuery1\">jQuery( selector [, context ] )</a><ul> <li><a href=\"#jQuery-selector-context\">jQuery( selector [, context ] )</a></li> <li><a href=\"#jQuery-element\">jQuery( element )</a></li> <li><a href=\"#jQuery-elementArray\">jQuery( elementArray )</a></li> <li><a href=\"#jQuery-object\">jQuery( object )</a></li> <li><a href=\"#jQuery-selection\">jQuery( selection )</a></li> <li><a href=\"#jQuery\">jQuery()</a></li> </ul> </li> <li> <a href=\"#jQuery2\">jQuery( html [, ownerDocument ] )</a><ul> <li><a href=\"#jQuery-html-ownerDocument\">jQuery( html [, ownerDocument ] )</a></li> <li><a href=\"#jQuery-html-attributes\">jQuery( html, attributes )</a></li> </ul> </li> <li> <a href=\"#jQuery3\">jQuery( callback )</a><ul><li><a href=\"#jQuery-callback\">jQuery( callback )</a></li></ul> </li> </ul> </div>\n<article id=\"jQuery1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery( selector [, context ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Accepts a string containing a CSS selector which is then used to match a set of elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"jQuery-selector-context\" href=\"#jQuery-selector-context\">jQuery( selector [, context ] )</a> </h4> <ul> <li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> </div> <div>A string containing a selector expression</div> </li> <li> <div><strong>context</strong></div> <div>Type: <a href=\"types#Element\">Element</a> or <a href=\"types#jQuery\">jQuery</a> </div> <div>A DOM Element, Document, or jQuery to use as context</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"jQuery-element\" href=\"#jQuery-element\">jQuery( element )</a> </h4> <ul><li> <div><strong>element</strong></div> <div>Type: <a href=\"types#Element\">Element</a> </div> <div>A DOM element to wrap in a jQuery object.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"jQuery-elementArray\" href=\"#jQuery-elementArray\">jQuery( elementArray )</a> </h4> <ul><li> <div><strong>elementArray</strong></div> <div>Type: <a href=\"types#Array\">Array</a> </div> <div>An array containing a set of DOM elements to wrap in a jQuery object.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"jQuery-object\" href=\"#jQuery-object\">jQuery( object )</a> </h4> <ul><li> <div><strong>object</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>A plain object to wrap in a jQuery object.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"jQuery-selection\" href=\"#jQuery-selection\">jQuery( selection )</a> </h4> <ul><li> <div><strong>selection</strong></div> <div>Type: <a href=\"types#jQuery\">jQuery</a> </div> <div>An existing jQuery object to clone.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"jQuery\" href=\"#jQuery\">jQuery()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>In the first formulation listed above, <code>jQuery()</code> — which can also be written as <code>$()</code> — searches through the DOM for any elements that match the provided selector and creates a new jQuery object that references these elements:</p> <pre class=\"syntaxhighlighter javascript\">$( \"div.foo\" );</pre> <p>If no elements match the provided selector, the new jQuery object is \"empty\"; that is, it contains no elements and has <code><a href=\"length\">.length</a></code> property of 0.</p> <h4 id=\"selector-context\">Selector Context</h4> <p>By default, selectors perform their searches within the DOM starting at the document root. However, an alternate context can be given for the search by using the optional second parameter to the <code>$()</code> function. For example, to do a search within an event handler, the search can be restricted like so:</p> <pre class=\"syntaxhighlighter javascript\">$( \"div.foo\" ).click(function() {\n  $( \"span\", this ).addClass( \"bar\" );\n});</pre> <p>When the search for the span selector is restricted to the context of <code>this</code>, only spans within the clicked element will get the additional class.</p> <p>Internally, selector context is implemented with the <code>.find()</code> method, so <code>$( \"span\", this )</code> is equivalent to <code>$( this ).find( \"span\" )</code>.</p> <h4 id=\"using-dom-elements\">Using DOM elements</h4> <p>The second and third formulations of this function create a jQuery object using one or more DOM elements that were already selected in some other way. A jQuery object is created from the array elements in the order they appeared in the array; unlike most other multi-element jQuery operations, the elements are not sorted in DOM order. Elements will be copied from the array as-is and won't be unwrapped if they're already jQuery collections.</p> <p>Please note that although you can pass text nodes and comment nodes into a jQuery collection this way, most operations don't support them. The few that do will have an explicit note on their API documentation page.</p> <p>A common use of single-DOM-element construction is to call jQuery methods on an element that has been passed to a callback function through the keyword <code>this</code>:</p> <pre class=\"syntaxhighlighter javascript\">$( \"div.foo\" ).click(function() {\n  $( this ).slideUp();\n});</pre> <p>This example causes elements to be hidden with a sliding animation when clicked. Because the handler receives the clicked item in the <code>this</code> keyword as a bare DOM element, the element must be passed to the <code>$()</code> function before applying jQuery methods to it.</p> <p>XML data returned from an Ajax call can be passed to the <code>$()</code> function so individual elements of the XML structure can be retrieved using <code>.find()</code> and other DOM traversal methods.</p> <pre class=\"syntaxhighlighter javascript\">$.post( \"url.xml\", function( data ) {\n  var $child = $( data ).find( \"child\" );\n});</pre> <h4 id=\"cloning-jquery-objects\">Cloning jQuery Objects</h4> <p>When a jQuery object is passed to the <code>$()</code> function, a clone of the object is created. This new jQuery object references the same DOM elements as the initial one.</p> <h4 id=\"returning-empty-set\">Returning an Empty Set</h4> <p>As of jQuery 1.4, calling the <code>jQuery()</code> method with <em>no arguments</em> returns an empty jQuery set (with a <code><a href=\"length\">.length</a></code> property of 0). In previous versions of jQuery, this would return a set containing the document node.</p> <h4 id=\"working-with-plain-objects\">Working With Plain Objects</h4> <p>At present, the only operations supported on plain JavaScript objects wrapped in jQuery are: <code>.data()</code>,<code>.prop()</code>,<code>.on()</code>, <code>.off()</code>, <code>.trigger()</code> and <code>.triggerHandler()</code>. The use of <code>.data()</code> (or any method requiring <code>.data()</code>) on a plain object will result in a new property on the object called jQuery{randomNumber} (eg. jQuery123456789).</p> <pre class=\"syntaxhighlighter javascript\">// Define a plain object\nvar foo = { foo: \"bar\", hello: \"world\" };\n \n// Pass it to the jQuery function\nvar $foo = $( foo );\n \n// Test accessing property values\nvar test1 = $foo.prop( \"foo\" ); // bar\n \n// Test setting property values\n$foo.prop( \"foo\", \"foobar\" );\nvar test2 = $foo.prop( \"foo\" ); // foobar\n \n// Test using .data() as summarized above\n$foo.data( \"keyName\", \"someValue\" );\nconsole.log( $foo ); // will now contain a jQuery{randomNumber} property\n \n// Test binding an event name and triggering\n$foo.on( \"eventName\", function () {\n  console.log( \"eventName was called\" );\n});\n \n$foo.trigger( \"eventName\" ); // Logs \"eventName was called\"</pre> <p>Should <code>.trigger( \"eventName\" )</code> be used, it will search for an \"eventName\" property on the object and attempt to execute it after any attached jQuery handlers are executed. It does not check whether the property is a function or not. To avoid this behavior, <code>.triggerHandler( \"eventName\" )</code> should be used instead.</p> <pre class=\"syntaxhighlighter javascript\">$foo.triggerHandler( \"eventName\" ); // Also logs \"eventName was called\"</pre> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Find all p elements that are children of a div element and apply a border to them.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;one&lt;/p&gt;\n&lt;div&gt;&lt;p&gt;two&lt;/p&gt;&lt;/div&gt;\n&lt;p&gt;three&lt;/p&gt;\n \n&lt;script&gt;\n$( \"div &gt; p\" ).css( \"border\", \"1px solid gray\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Find all inputs of type radio within the first form in the document.</p> <pre class=\"syntaxhighlighter javascript\">$( \"input:radio\", document.forms[ 0 ] );</pre> </div> <div class=\"entry-example\" id=\"example-2\"> <p>Find all div elements within an XML document from an Ajax response.</p> <pre class=\"syntaxhighlighter javascript\">$( \"div\", xml.responseXML );</pre> </div> <div class=\"entry-example\" id=\"example-3\"> <p>Set the background color of the page to black.</p> <pre class=\"syntaxhighlighter javascript\">$( document.body ).css( \"background\", \"black\" );</pre> </div> <div class=\"entry-example\" id=\"example-4\"> <p>Hide all the input elements within a form.</p> <pre class=\"syntaxhighlighter javascript\">$( myForm.elements ).hide();</pre> </div></section> </div></article><article id=\"jQuery2\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery( html [, ownerDocument ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Creates DOM elements on the fly from the provided string of raw HTML.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"jQuery-html-ownerDocument\" href=\"#jQuery-html-ownerDocument\">jQuery( html [, ownerDocument ] )</a> </h4> <ul> <li> <div><strong>html</strong></div> <div>Type: <a href=\"types#htmlString\">htmlString</a> </div> <div>A string of HTML to create on the fly. Note that this parses HTML, <strong>not</strong> XML.</div> </li> <li> <div><strong>ownerDocument</strong></div> <div>Type: <a href=\"types#document\">document</a> </div> <div>A document in which the new elements will be created.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"jQuery-html-attributes\" href=\"#jQuery-html-attributes\">jQuery( html, attributes )</a> </h4> <ul> <li> <div><strong>html</strong></div> <div>Type: <a href=\"types#htmlString\">htmlString</a> </div> <div>A string defining a single, standalone, HTML element (e.g. &lt;div/&gt; or &lt;div&gt;&lt;/div&gt;).</div> </li> <li> <div><strong>attributes</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>An object of attributes, events, and methods to call on the newly-created element.</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc-1\"> <h4 id=\"creating-new-elements\">Creating New Elements</h4> <p>If a string is passed as the parameter to <code>$()</code>, jQuery examines the string to see if it looks like HTML (i.e., it starts with <code>&lt;tag ... &gt;</code>). If not, the string is interpreted as a selector expression, as explained above. But if the string appears to be an HTML snippet, jQuery attempts to create new DOM elements as described by the HTML. Then a jQuery object is created and returned that refers to these elements. You can perform any of the usual jQuery methods on this object:</p> <pre class=\"syntaxhighlighter javascript\">$( \"&lt;p id='test'&gt;My &lt;em&gt;new&lt;/em&gt; text&lt;/p&gt;\" ).appendTo( \"body\" );</pre> <p>For explicit parsing of a string to HTML, use the <a href=\"jquery.parsehtml\">$.parseHTML()</a> method.</p> <p>By default, elements are created with an <code>.ownerDocument</code> matching the document into which the jQuery library was loaded. Elements being injected into a different document should be created using that document, e.g., <code>$(\"&lt;p&gt;hello iframe&lt;/p&gt;\", $(\"#myiframe\").prop(\"contentWindow\").document)</code>.</p> <p>If the HTML is more complex than a single tag without attributes, as it is in the above example, the actual creation of the elements is handled by the browser's <code>.innerHTML</code> mechanism. In most cases, jQuery creates a new <code>&lt;div&gt;</code> element and sets the <code>innerHTML</code> property of the element to the HTML snippet that was passed in. When the parameter has a single tag (with optional closing tag or quick-closing) — <code>$( \"&lt;img /&gt;\" )</code> or <code>$( \"&lt;img&gt;\" )</code>, <code>$( \"&lt;a&gt;&lt;/a&gt;\" )</code> or <code>$( \"&lt;a&gt;\" )</code> — jQuery creates the element using the native JavaScript <code>.createElement()</code> function.</p> <p>When passing in complex HTML, some browsers may not generate a DOM that exactly replicates the HTML source provided. As mentioned, jQuery uses the browser's <code>.innerHTML</code> property to parse the passed HTML and insert it into the current document. During this process, some browsers filter out certain elements such as <code>&lt;html&gt;</code>, <code>&lt;title&gt;</code>, or <code>&lt;head&gt;</code> elements. As a result, the elements inserted may not be representative of the original string passed.</p> <p>Filtering isn't, however, limited to these tags. For example, Internet Explorer prior to version 8 will also convert all <code>href</code> properties on links to absolute URLs, and Internet Explorer prior to version 9 will not correctly handle HTML5 elements without the addition of a separate <a href=\"http://code.google.com/p/html5shiv/\">compatibility layer</a>.</p> <p>To ensure cross-platform compatibility, the snippet must be well-formed. Tags that can contain other elements should be paired with a closing tag:</p> <pre class=\"syntaxhighlighter javascript\">$( \"&lt;a href='http://jquery.com'&gt;&lt;/a&gt;\" );</pre> <p>Tags that cannot contain elements may be quick-closed or not:</p> <pre class=\"syntaxhighlighter javascript\">$( \"&lt;img&gt;\" );\n$( \"&lt;input&gt;\" );</pre> <p>When passing HTML to <code>jQuery()</code>, note that text nodes are not treated as DOM elements. With the exception of a few methods (such as <code>.content()</code>), they are generally ignored or removed. E.g:</p> <pre class=\"syntaxhighlighter javascript\">var el = $( \"&lt;br&gt;2&lt;br&gt;3\" ); // returns [&lt;br&gt;, \"2\", &lt;br&gt;]\nel = $( \"&lt;br&gt;2&lt;br&gt;3 &gt;\" ); // returns [&lt;br&gt;, \"2\", &lt;br&gt;, \"3 &amp;gt;\"]</pre> <p>This behavior is expected. <strong>As of jQuery 1.9.0</strong> (and unless using the <a href=\"https://github.com/jquery/jquery-migrate/#readme\">jQuery Migrate plugin</a>), <code>jQuery()</code> requires the HTML string to start with a <code>&lt;</code> (i.e text nodes cannot appear at the front of the HTML string).</p> <p><strong>As of jQuery 1.4</strong>, the second argument to <code>jQuery()</code> can accept a plain object consisting of a superset of the properties that can be passed to the <a href=\"attr\">.attr()</a> method.</p> <p><strong>Important:</strong> If the second argument is passed, the HTML string in the first argument must represent a simple element with no attributes. <strong>As of jQuery 1.4</strong>, any <a href=\"https://api.jquery.com/category/events/\">event type</a> can be passed in, and the following jQuery methods can be called: <a href=\"val\">val</a>, <a href=\"css\">css</a>, <a href=\"html\">html</a>, <a href=\"text\">text</a>, <a href=\"data\">data</a>, <a href=\"width\">width</a>, <a href=\"height\">height</a>, or <a href=\"offset\">offset</a>.</p> <p><strong>As of jQuery 1.8</strong>, any jQuery instance method (a method of <code>jQuery.fn</code>) can be used as a property of the object passed to the second parameter:</p> <pre class=\"syntaxhighlighter javascript\">$( \"&lt;div&gt;&lt;/div&gt;\", {\n  \"class\": \"my-div\",\n  on: {\n    touchstart: function( event ) {\n      // Do something\n    }\n  }\n}).appendTo( \"body\" );</pre> <p>The name <code>\"class\"</code> must be quoted in the object since it is a JavaScript reserved word, and <code>\"className\"</code> cannot be used since it refers to the DOM property, not the attribute. </p> <p>While the second argument is convenient, its flexibility can lead to unintended consequences (e.g. <code>$( \"&lt;input&gt;\", {size: \"4\"} )</code> calling the <code>.size()</code> method instead of setting the size attribute). The previous code block could thus be written instead as:</p> <pre class=\"syntaxhighlighter javascript\">$( \"&lt;div&gt;&lt;/div&gt;\" )\n  .addClass( \"my-div\" )\n  .on({\n    touchstart: function( event ) {\n      // Do something\n    }\n  })\n    .appendTo( \"body\" );</pre> </div> <section class=\"entry-examples\" id=\"entry-examples-1\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-1-0\"> <p>Create a div element (and all of its contents) dynamically and append it to the body element. Internally, an element is created and its innerHTML property set to the given markup.</p> <pre class=\"syntaxhighlighter javascript\">$( \"&lt;div&gt;&lt;p&gt;Hello&lt;/p&gt;&lt;/div&gt;\" ).appendTo( \"body\" )</pre> </div> <div class=\"entry-example\" id=\"example-1-1\"> <p>Create some DOM elements.</p> <pre class=\"syntaxhighlighter javascript\">$( \"&lt;div/&gt;\", {\n  \"class\": \"test\",\n  text: \"Click me!\",\n  click: function() {\n    $( this ).toggleClass( \"test\" );\n  }\n})\n  .appendTo( \"body\" );</pre> </div></section> </div></article><article id=\"jQuery3\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery( callback )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Binds a function to be executed when the DOM has finished loading.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"jQuery-callback\" href=\"#jQuery-callback\">jQuery( callback )</a> </h4> <ul><li> <div><strong>callback</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>The function to execute when the DOM is ready.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc-2\"> <p>This function behaves just like <code>$( document ).ready()</code>, in that it should be used to wrap other <code>$()</code> operations on your page that depend on the DOM being ready. While this function is, technically, chainable, there really isn't much use for chaining against it.</p> </div> <section class=\"entry-examples\" id=\"entry-examples-2\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-2-0\"> <p>Execute the function when the DOM is ready to be used.</p> <pre class=\"syntaxhighlighter javascript\">$(function() {\n  // Document is ready\n});</pre> </div> <div class=\"entry-example\" id=\"example-2-1\"> <p>Use both the shortcut for $(document).ready() and the argument to write failsafe jQuery code using the $ alias, without relying on the global alias.</p> <pre class=\"syntaxhighlighter javascript\">jQuery(function( $ ) {\n  // Your code using failsafe $ alias here...\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery\" class=\"_attribution-link\">https://api.jquery.com/jQuery</a>\n  </p>\n</div>\n","jquery-2":"<h1 class=\"entry-title\">.jquery</h1> <div class=\"entry-content\"> <article id=\"jquery1\" class=\"entry property\"><h2 class=\"section-title\"> <span>jquery</span><span class=\"returns\">Returns: <a href=\"types#String\">String</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>A string containing the jQuery version number.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jquery</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.jquery</code> property is assigned to the jQuery prototype, commonly referred to by its alias <code>$.fn</code>. It is a string containing the version number of <code>jQuery</code>, such as \"1.5.0\" or \"1.4.4\".</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Determine if an object is a jQuery object</p> <pre class=\"syntaxhighlighter javascript\">var a = { what: \"A regular JS object\" },\n  b = $( \"body\" );\n \nif ( a.jquery ) { // Falsy, since it's undefined\n  alert( \"a is a jQuery object!\" );\n}\n \nif ( b.jquery ) { // Truthy, since it's a string\n    alert( \"b is a jQuery object!\" );\n}</pre> </div> <div class=\"entry-example\" id=\"example-1\"> <p>Get the current version of jQuery running on the page</p> <pre class=\"syntaxhighlighter javascript\">alert( \"You are running jQuery version: \" + $.fn.jquery );</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jquery-2\" class=\"_attribution-link\">https://api.jquery.com/jquery-2</a>\n  </p>\n</div>\n","jquery.ajaxsetup":"<h1 class=\"entry-title\">jQuery.ajaxSetup()</h1> <div class=\"entry-content\"> <article id=\"jQuery-ajaxSetup1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.ajaxSetup( options )</span><span class=\"returns\">Returns: </span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Set default values for future Ajax requests. Its use is not recommended.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.1/\">1.1</a></span><a id=\"jQuery-ajaxSetup-options\" href=\"#jQuery-ajaxSetup-options\">jQuery.ajaxSetup( options )</a> </h4> <ul><li> <div><strong>options</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>A set of key/value pairs that configure the default Ajax request. All options are optional. </div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>For details on the settings available for <code>$.ajaxSetup()</code>, see <code><a href=\"jquery.ajax\">$.ajax()</a></code>. </p> <p>All subsequent Ajax calls using any function will use the new settings, unless overridden by the individual calls, until the next invocation of <code>$.ajaxSetup()</code>.</p> <p><strong>Note:</strong> The settings specified here will affect <em>all</em> calls to <code>$.ajax</code> or Ajax-based derivatives such as <code>$.get()</code>. This can cause undesirable behavior since other callers (for example, plugins) may be expecting the normal default settings. For that reason we <em>strongly recommend against using this API</em>. Instead, set the options explicitly in the call or define a simple plugin to do so.</p> <p>For example, the following sets a default for the <code>url</code> parameter before pinging the server repeatedly:</p> <pre class=\"syntaxhighlighter javascript\">$.ajaxSetup({\n  url: \"ping.php\"\n});</pre> <p>Now each time an Ajax request is made, the \"ping.php\" URL will be used automatically:</p> <pre class=\"syntaxhighlighter javascript\">$.ajax({\n  // url not set here; uses ping.php\n  data: { \"name\": \"Dan\" }\n});</pre> <div class=\"warning\"> <p>Note: Global callback functions should be set with their respective global Ajax event handler methods—<code><a href=\"ajaxstart\">.ajaxStart()</a></code>, <code><a href=\"ajaxstop\">.ajaxStop()</a></code>, <code><a href=\"ajaxcomplete\">.ajaxComplete()</a></code>, <code><a href=\"ajaxerror\">.ajaxError()</a></code>, <code><a href=\"ajaxsuccess\">.ajaxSuccess()</a></code>, <code><a href=\"ajaxsend\">.ajaxSend()</a></code>—rather than within the <code>options</code> object for <code>$.ajaxSetup()</code>.</p> </div> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Sets the defaults for Ajax requests to the url \"/xmlhttp/\", disables global handlers and uses POST instead of GET. The following Ajax requests then sends some data without having to set anything else.</p> <pre class=\"syntaxhighlighter javascript\">$.ajaxSetup({\n  url: \"/xmlhttp/\",\n  global: false,\n  type: \"POST\"\n});\n$.ajax({ data: myData });</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.ajaxSetup\" class=\"_attribution-link\">https://api.jquery.com/jQuery.ajaxSetup</a>\n  </p>\n</div>\n","jquery.ajaxprefilter":"<h1 class=\"entry-title\">jQuery.ajaxPrefilter()</h1> <div class=\"entry-content\"> <article id=\"jQuery-ajaxPrefilter1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.ajaxPrefilter( [dataTypes ], handler )</span><span class=\"returns\">Returns: <a href=\"types#undefined\">undefined</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Handle custom Ajax options or modify existing options before each request is sent and before they are processed by <code>$.ajax()</code>.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.5/\">1.5</a></span><a id=\"jQuery-ajaxPrefilter-dataTypes-handler\" href=\"#jQuery-ajaxPrefilter-dataTypes-handler\">jQuery.ajaxPrefilter( [dataTypes ], handler )</a> </h4> <ul> <li> <div><strong>dataTypes</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>An optional string containing one or more space-separated dataTypes</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#PlainObject\">PlainObject</a> options, <a href=\"types#PlainObject\">PlainObject</a> originalOptions, <a href=\"types#jqXHR\">jqXHR</a> jqXHR )</div> <div>A handler to set default values for future Ajax requests.</div> </li> </ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>A typical prefilter registration using <code>$.ajaxPrefilter()</code> looks like this:</p> <pre class=\"syntaxhighlighter javascript\">$.ajaxPrefilter(function( options, originalOptions, jqXHR ) {\n  // Modify options, control originalOptions, store jqXHR, etc\n});</pre> <p>where:</p> <ul> <li> <code>options</code> are the request options</li> <li> <code>originalOptions</code> are the options as provided to the <code>$.ajax()</code> method, unmodified and, thus, without defaults from <code>ajaxSettings</code> </li> <li> <code>jqXHR</code> is the jqXHR object of the request</li> </ul> <p>Prefilters are a perfect fit when custom options need to be handled. Given the following code, for example, a call to <code>$.ajax()</code> would automatically abort a request to the same URL if the custom <code>abortOnRetry</code> option is set to <code>true</code>:</p> <pre class=\"syntaxhighlighter javascript\">var currentRequests = {};\n \n$.ajaxPrefilter(function( options, originalOptions, jqXHR ) {\n  if ( options.abortOnRetry ) {\n    if ( currentRequests[ options.url ] ) {\n      currentRequests[ options.url ].abort();\n    }\n    currentRequests[ options.url ] = jqXHR;\n  }\n});</pre> <p>Prefilters can also be used to modify existing options. For example, the following proxies cross-domain requests through http://mydomain.net/proxy/:</p> <pre class=\"syntaxhighlighter javascript\">$.ajaxPrefilter(function( options ) {\n  if ( options.crossDomain ) {\n    options.url = \"http://mydomain.net/proxy/\" + encodeURIComponent( options.url );\n    options.crossDomain = false;\n  }\n});</pre> <p>If the optional <code>dataTypes</code> argument is supplied, the prefilter will be only be applied to requests with the indicated dataTypes. For example, the following only applies the given prefilter to JSON and script requests:</p> <pre class=\"syntaxhighlighter javascript\">$.ajaxPrefilter( \"json script\", function( options, originalOptions, jqXHR ) {\n  // Modify options, control originalOptions, store jqXHR, etc\n});</pre> <p>The <code>$.ajaxPrefilter()</code> method can also redirect a request to another dataType by returning that dataType. For example, the following sets a request as \"script\" if the URL has some specific properties defined in a custom <code>isActuallyScript()</code> function:</p> <pre class=\"syntaxhighlighter javascript\">$.ajaxPrefilter(function( options ) {\n  if ( isActuallyScript( options.url ) ) {\n    return \"script\";\n  }\n});</pre> <p>This would ensure not only that the request is considered \"script\" but also that all the prefilters specifically attached to the script dataType would be applied to it.</p> </div> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.ajaxPrefilter\" class=\"_attribution-link\">https://api.jquery.com/jQuery.ajaxPrefilter</a>\n  </p>\n</div>\n","jquery.boxmodel":"<h1 class=\"entry-title\">jQuery.boxModel</h1> <div class=\"entry-content\"> <article id=\"jQuery-boxModel1\" class=\"entry property\"><h2 class=\"section-title\"> <span>jQuery.boxModel</span><span class=\"returns\">Returns: <a href=\"types#Boolean\">Boolean</a></span><span class=\"version-details\">version deprecated: <a href=\"https://api.jquery.com/category/version/1.3/\">1.3</a>, removed: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>States if the current page, in the user's browser, is being rendered using the <a href=\"http://www.w3.org/TR/REC-CSS2/box.html\">W3C CSS Box Model</a>. <strong>This property was removed in jQuery 1.8</strong>. Please try to use feature detection instead.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery.boxModel</h4></li></ul> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.boxModel\" class=\"_attribution-link\">https://api.jquery.com/jQuery.boxModel</a>\n  </p>\n</div>\n","jquery.browser":"<h1 class=\"entry-title\">jQuery.browser</h1> <div class=\"entry-content\"> <div class=\"toc\"> <h4><span>Contents:</span></h4> <ul class=\"toc-list\"> <li><a href=\"#jQuery-browser1\">jQuery.browser</a></li> <li><a href=\"#jQuery-browser-version2\">jQuery.browser.version</a></li> </ul> </div>\n<article id=\"jQuery-browser1\" class=\"entry property\"><h2 class=\"section-title\"> <span>jQuery.browser</span><span class=\"returns\">Returns: <a href=\"types#PlainObject\">PlainObject</a></span><span class=\"version-details\">version deprecated: <a href=\"https://api.jquery.com/category/version/1.3/\">1.3</a>, removed: <a href=\"https://api.jquery.com/category/version/1.9/\">1.9</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Contains flags for the useragent, read from navigator.userAgent. <strong>This property was removed in jQuery 1.9</strong> and is available only through the jQuery.migrate plugin. Please try to use feature detection instead.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery.browser</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>$.browser</code> property provides information about the web browser that is accessing the page, as reported by the browser itself. It contains flags for each of the four most prevalent browser classes (Internet Explorer, Mozilla, Webkit, and Opera) as well as version information.</p> <p>Available flags are:</p> <ul> <li>webkit (as of jQuery 1.4)</li> <li>safari (deprecated)</li> <li>opera</li> <li>msie</li> <li>mozilla</li> </ul> <p>This property is available immediately. It is therefore safe to use it to determine whether or not to call <code>$(document).ready()</code>. The <code>$.browser</code> property is deprecated in jQuery 1.3, and its functionality may be moved to a team-supported plugin in a future release of jQuery.</p> <p>Because <code>$.browser</code> uses <code>navigator.userAgent</code> to determine the platform, it is vulnerable to spoofing by the user or misrepresentation by the browser itself. It is always best to avoid browser-specific code entirely where possible. Instead of relying on <code>$.browser</code> it's better to use libraries like <a href=\"http://modernizr.com/\">Modernizr</a>.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Show the browser info.</p> <pre class=\"syntaxhighlighter javascript\">jQuery.each( jQuery.browser, function( i, val ) {\n  $( \"&lt;div&gt;\" + i + \" : &lt;span&gt;\" + val + \"&lt;/span&gt;\" )\n  .appendTo( document.body );\n});</pre> </div> <div class=\"entry-example\" id=\"example-1\"> <p>Return true if the current useragent is some version of Microsoft's Internet Explorer. <strong>Will not work in jQuery 1.9 or later</strong> unless the <a href=\"https://github.com/jquery/jquery-migrate/#readme\">jQuery Migrate</a> plugin is included.</p> <pre class=\"syntaxhighlighter javascript\">$.browser.msie;</pre> </div> <div class=\"entry-example\" id=\"example-2\"> <p>Alert \"this is WebKit!\" only for WebKit browsers. <strong>Will not work in jQuery 1.9 or later</strong> unless the <a href=\"https://github.com/jquery/jquery-migrate/#readme\">jQuery Migrate</a> plugin is included.</p> <pre class=\"syntaxhighlighter javascript\">  if ( $.browser.webkit ) {\n    alert( \"This is WebKit!\" );\n  }</pre> </div></section> </div></article><article id=\"jQuery-browser-version2\" class=\"entry property\"><h2 class=\"section-title\"> <span>jQuery.browser.version</span><span class=\"returns\">Returns: <a href=\"types#String\">String</a></span><span class=\"version-details\">version deprecated: <a href=\"https://api.jquery.com/category/version/1.3/\">1.3</a>, removed: <a href=\"https://api.jquery.com/category/version/1.9/\">1.9</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>The version number of the rendering engine for the user's browser. <strong>This property was removed in jQuery 1.9</strong> and is available only through the jQuery.migrate plugin.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.1.3/\">1.1.3</a></span>jQuery.browser.version</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc-1\"> <p>Here are some typical results:</p> <ul> <li>Internet Explorer: 6.0, 7.0, 8.0</li> <li>Mozilla/Firefox/Flock/Camino: 1.7.12, 1.8.1.3, 1.9</li> <li>Opera: 10.06, 11.01</li> <li>Safari/Webkit: 312.8, 418.9</li> </ul> <p>Note that IE8 claims to be 7 in Compatibility View.</p> </div> <section class=\"entry-examples\" id=\"entry-examples-1\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-1-0\"> <p>Return the version number of the rendering engine used by the user's current browser. For example, FireFox 4 returns 2.0 (the version of the Gecko rendering engine it utilizes). <strong>Will not work in jQuery 1.9 or later</strong> unless the <a href=\"https://github.com/jquery/jquery-migrate/#readme\">jQuery Migrate</a> plugin is included.</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).html( \"The version # of the browser's rendering engine is: &lt;span&gt;\" +\n  $.browser.version + \"&lt;/span&gt;\" );</pre> </div> <div class=\"entry-example\" id=\"example-1-1\"> <p>Alert the version of IE's rendering engine that is being used. <strong>Will not work in jQuery 1.9 or later</strong> unless the <a href=\"https://github.com/jquery/jquery-migrate/#readme\">jQuery Migrate</a> plugin is included.</p> <pre class=\"syntaxhighlighter javascript\">if ( $.browser.msie ) {\n  alert( $.browser.version );\n}</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.browser\" class=\"_attribution-link\">https://api.jquery.com/jQuery.browser</a>\n  </p>\n</div>\n","jquery.ajaxtransport":"<h1 class=\"entry-title\">jQuery.ajaxTransport()</h1> <div class=\"entry-content\"> <article id=\"jQuery-ajaxTransport1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.ajaxTransport( dataType, handler )</span><span class=\"returns\">Returns: <a href=\"types#undefined\">undefined</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Creates an object that handles the actual transmission of Ajax data.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.5/\">1.5</a></span><a id=\"jQuery-ajaxTransport-dataType-handler\" href=\"#jQuery-ajaxTransport-dataType-handler\">jQuery.ajaxTransport( dataType, handler )</a> </h4> <ul> <li> <div><strong>dataType</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string identifying the data type to use</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#PlainObject\">PlainObject</a> options, <a href=\"types#PlainObject\">PlainObject</a> originalOptions, <a href=\"types#jqXHR\">jqXHR</a> jqXHR )</div> <div>A handler to return the new transport object to use with the data type provided in the first argument.</div> </li> </ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>A transport is an object that provides two methods, <code>send</code> and <code>abort</code>, that are used internally by <code>$.ajax()</code> to issue requests. A transport is the most advanced way to enhance <code>$.ajax()</code> and should be used only as a last resort when prefilters and converters are insufficient.</p> <p>Since each request requires its own transport object instance, transports cannot be registered directly. Therefore, you should provide a function that returns a transport instead.</p> <p>Transports factories are registered using <code>$.ajaxTransport()</code>. A typical registration looks like this:</p> <pre class=\"syntaxhighlighter javascript\">$.ajaxTransport( dataType, function( options, originalOptions, jqXHR ) {\n  if( /* transportCanHandleRequest */ ) {\n    return {\n      send: function( headers, completeCallback ) {\n        // Send code\n      },\n      abort: function() {\n        // Abort code\n      }\n    };\n  }\n});</pre> <p>where:</p> <ul> <li> <code>options</code> are the request options</li> <li> <code>originalOptions</code> are the options as provided to the <code>$.ajax()</code> method, unmodified and, thus, without defaults from ajaxSettings</li> <li> <code>jqXHR</code> is the jqXHR object of the request</li> <li> <code>headers</code> is an object of (key-value) request headers that the transport can transmit if it supports it</li> <li> <code>completeCallback</code> is the callback used to notify Ajax of the completion of the request</li> </ul> <p><code>completeCallback</code> has the following signature:</p> <pre class=\"syntaxhighlighter javascript\">function( status, statusText, responses, headers ) {}</pre> <p>where:</p> <ul> <li> <code>status</code> is the HTTP status code of the response, like 200 for a typical success, or 404 for when the resource is not found.</li> <li> <code>statusText</code> is the statusText of the response.</li> <li> <code>responses</code> (Optional) is An object containing dataType/value that contains the response in all the formats the transport could provide (for instance, a native XMLHttpRequest object would set responses to <code>{ xml: XMLData, text: textData }</code> for a response that is an XML document)</li> <li> <code>headers</code> (Optional) is a string containing all the response headers if the transport has access to them (akin to what <code>XMLHttpRequest.getAllResponseHeaders()</code> would provide).</li> </ul> <p>Just like prefilters, a transport's factory function can be attached to a specific dataType:</p> <pre class=\"syntaxhighlighter javascript\">$.ajaxTransport( \"script\", function( options, originalOptions, jqXHR ) {\n  // Will only be called for script requests\n});</pre> <p>The following example shows how a minimal image transport could be implemented:</p> <pre class=\"syntaxhighlighter javascript\">$.ajaxTransport( \"image\", function( s ) {\n  if ( s.type === \"GET\" &amp;&amp; s.async ) {\n    var image;\n    return {\n      send: function( _ , callback ) {\n        image = new Image();\n        function done( status ) {\n          if ( image ) {\n            var statusText = ( status === 200 ) ? \"success\" : \"error\",\n              tmp = image;\n            image = image.onreadystatechange = image.onerror = image.onload = null;\n            callback( status, statusText, { image: tmp } );\n          }\n        }\n        image.onreadystatechange = image.onload = function() {\n          done( 200 );\n        };\n        image.onerror = function() {\n          done( 404 );\n        };\n        image.src = s.url;\n      },\n      abort: function() {\n        if ( image ) {\n          image = image.onreadystatechange = image.onerror = image.onload = null;\n        }\n      }\n    };\n  }\n});</pre> <h4 id=\"handling-custom-data-types\">Handling Custom Data Types</h4> <p>The jQuery Ajax implementation comes with a set of standard dataTypes, such as text, json, xml, and html.</p> <p>Use the <code>converters</code> option in <code><a href=\"jquery.ajaxsetup\">$.ajaxSetup()</a></code> to augment or modify the data type conversion strategies used by <code>$.ajax()</code>.</p> <p> The unminified jQuery source itself includes a list of default converters, which effectively illustrates how they can be used: </p> <pre class=\"syntaxhighlighter javascript\">// List of data converters\n// 1) Key format is \"source_type destination_type\"\n//    (a single space in-between)\n// 2) The catchall symbol \"*\" can be used for source_type\nconverters: {\n  // Convert anything to text\n  \"* text\": window.String,\n  // Text to html (true = no transformation)\n  \"text html\": true,\n  // Evaluate text as a json expression\n  \"text json\": jQuery.parseJSON,\n  // Parse text as xml\n  \"text xml\": jQuery.parseXML\n}</pre> <p>When you specify a <code>converters</code> option globally in <code>$.ajaxSetup()</code> or per call in <code>$.ajax()</code>, the object will map onto the default converters, overwriting those you specify and leaving the others intact.</p> <p>For example, the jQuery source uses <code>$.ajaxSetup()</code> to add a converter for \"text script\":</p> <pre class=\"syntaxhighlighter javascript\">jQuery.ajaxSetup({\n  accepts: {\n    script: \"text/javascript, application/javascript\"\n  },\n  contents: {\n    script: /javascript/\n  },\n  converters: {\n    \"text script\": jQuery.globalEval\n  }\n});</pre> </div> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.ajaxTransport\" class=\"_attribution-link\">https://api.jquery.com/jQuery.ajaxTransport</a>\n  </p>\n</div>\n","jquery.extend":"<h1 class=\"entry-title\">jQuery.extend()</h1> <div class=\"entry-content\"> <article id=\"jQuery-extend1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.extend( target [, object1 ] [, objectN ] )</span><span class=\"returns\">Returns: <a href=\"types#Object\">Object</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Merge the contents of two or more objects together into the first object.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"jQuery-extend-target-object1-objectN\" href=\"#jQuery-extend-target-object1-objectN\">jQuery.extend( target [, object1 ] [, objectN ] )</a> </h4> <ul> <li> <div><strong>target</strong></div> <div>Type: <a href=\"types#Object\">Object</a> </div> <div> An object that will receive the new properties if additional objects are passed in or that will extend the jQuery namespace if it is the sole argument.</div> </li> <li> <div><strong>object1</strong></div> <div>Type: <a href=\"types#Object\">Object</a> </div> <div>An object containing additional properties to merge in.</div> </li> <li> <div><strong>objectN</strong></div> <div>Type: <a href=\"types#Object\">Object</a> </div> <div>Additional objects containing properties to merge in.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.1.4/\">1.1.4</a></span><a id=\"jQuery-extend-deep-target-object1-objectN\" href=\"#jQuery-extend-deep-target-object1-objectN\">jQuery.extend( [deep ], target, object1 [, objectN ] )</a> </h4> <ul> <li> <div><strong>deep</strong></div> <div>Type: <a href=\"types#Boolean\">Boolean</a> </div> <div>If true, the merge becomes recursive (aka. deep copy).</div> </li> <li> <div><strong>target</strong></div> <div>Type: <a href=\"types#Object\">Object</a> </div> <div>The object to extend. It will receive the new properties.</div> </li> <li> <div><strong>object1</strong></div> <div>Type: <a href=\"types#Object\">Object</a> </div> <div>An object containing additional properties to merge in.</div> </li> <li> <div><strong>objectN</strong></div> <div>Type: <a href=\"types#Object\">Object</a> </div> <div>Additional objects containing properties to merge in.</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>When two or more object arguments are supplied to <code>$.extend()</code>, properties from all of the objects are added to the target object. Arguments that are <code>null</code> or <code>undefined</code> are ignored.</p> <p>If only one argument is supplied to <code>$.extend()</code>, this means the target argument was omitted. In this case, the jQuery object itself is assumed to be the target. By doing this, you can add new functions to the jQuery namespace. This can be useful for plugin authors wishing to add new methods to JQuery.</p> <p>Keep in mind that the target object (first argument) will be modified, and will also be returned from <code>$.extend()</code>. If, however, you want to preserve both of the original objects, you can do so by passing an empty object as the target:</p> <pre class=\"syntaxhighlighter javascript\">var object = $.extend({}, object1, object2);</pre> <p>The merge performed by <code>$.extend()</code> is not recursive by default; if a property of the first object is itself an object or array, it will be completely overwritten by a property with the same key in the second or subsequent object. The values are not merged. This can be seen in the example below by examining the value of banana. However, by passing <code>true</code> for the first function argument, objects will be recursively merged.</p> <p><strong>Warning</strong>: Passing <code>false</code> for the first argument is not supported.</p> <p>Undefined properties are not copied. However, properties inherited from the object's prototype <em>will</em> be copied over. Properties that are an object constructed via <code>new MyCustomObject(args)</code>, or built-in JavaScript types such as Date or RegExp, are not re-constructed and will appear as plain Objects in the resulting object or array.</p> <p>On a <code>deep</code> extend, Object and Array are extended, but object wrappers on primitive types such as String, Boolean, and Number are not. Deep-extending a cyclical data structure will result in an error.</p> <p>For needs that fall outside of this behavior, write a custom extend method instead, or use a library like <a href=\"http://lodash.com\">lodash</a>. </p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Merge two objects, modifying the first.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.extend demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div id=\"log\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar object1 = {\n  apple: 0,\n  banana: { weight: 52, price: 100 },\n  cherry: 97\n};\nvar object2 = {\n  banana: { price: 200 },\n  durian: 100\n};\n \n// Merge object2 into object1\n$.extend( object1, object2 );\n \n// Assuming JSON.stringify - not available in IE&lt;8\n$( \"#log\" ).append( JSON.stringify( object1 ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Merge two objects recursively, modifying the first.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.extend demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div id=\"log\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar object1 = {\n  apple: 0,\n  banana: { weight: 52, price: 100 },\n  cherry: 97\n};\nvar object2 = {\n  banana: { price: 200 },\n  durian: 100\n};\n \n// Merge object2 into object1, recursively\n$.extend( true, object1, object2 );\n \n// Assuming JSON.stringify - not available in IE&lt;8\n$( \"#log\" ).append( JSON.stringify( object1 ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-2\"> <p>Merge defaults and options, without modifying the defaults. This is a common plugin development pattern.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.extend demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div id=\"log\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar defaults = { validate: false, limit: 5, name: \"foo\" };\nvar options = { validate: true, name: \"bar\" };\n \n// Merge defaults and options, without modifying defaults\nvar settings = $.extend( {}, defaults, options );\n \n// Assuming JSON.stringify - not available in IE&lt;8\n$( \"#log\" ).append( \"&lt;div&gt;&lt;b&gt;defaults -- &lt;/b&gt;\" + JSON.stringify( defaults ) + \"&lt;/div&gt;\" );\n$( \"#log\" ).append( \"&lt;div&gt;&lt;b&gt;options -- &lt;/b&gt;\" + JSON.stringify( options ) + \"&lt;/div&gt;\" );\n$( \"#log\" ).append( \"&lt;div&gt;&lt;b&gt;settings -- &lt;/b&gt;\" + JSON.stringify( settings ) + \"&lt;/div&gt;\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.extend\" class=\"_attribution-link\">https://api.jquery.com/jQuery.extend</a>\n  </p>\n</div>\n","jquery.contains":"<h1 class=\"entry-title\">jQuery.contains()</h1> <div class=\"entry-content\"> <article id=\"jQuery-contains1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.contains( container, contained )</span><span class=\"returns\">Returns: <a href=\"types#Boolean\">Boolean</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Check to see if a DOM element is a descendant of another DOM element.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"jQuery-contains-container-contained\" href=\"#jQuery-contains-container-contained\">jQuery.contains( container, contained )</a> </h4> <ul> <li> <div><strong>container</strong></div> <div>Type: <a href=\"types#Element\">Element</a> </div> <div>The DOM element that may contain the other element.</div> </li> <li> <div><strong>contained</strong></div> <div>Type: <a href=\"types#Element\">Element</a> </div> <div>The DOM element that may be contained by (a descendant of) the other element.</div> </li> </ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>$.contains()</code> method returns <code>true</code> if the DOM element provided by the second argument is a descendant of the DOM element provided by the first argument, whether it is a direct child or nested more deeply. Otherwise, it returns <code>false</code>. Only <em>element</em> nodes are supported; if the second argument is a text or comment node, <code>$.contains()</code> will return <code>false</code>.</p> <div class=\"warning\"> <p><strong>Note:</strong> The first argument <em>must</em> be a DOM element, not a jQuery object or plain JavaScript object.</p> </div> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Check if an element is a descendant of another.</p> <pre class=\"syntaxhighlighter javascript\">$.contains( document.documentElement, document.body ); // true\n$.contains( document.body, document.documentElement ); // false</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.contains\" class=\"_attribution-link\">https://api.jquery.com/jQuery.contains</a>\n  </p>\n</div>\n","jquery.cssnumber":"<h1 class=\"entry-title\">jQuery.cssNumber</h1> <div class=\"entry-content\"> <article id=\"jQuery-cssNumber1\" class=\"entry property\"><h2 class=\"section-title\"> <span>jQuery.cssNumber</span><span class=\"returns\">Returns: <a href=\"types#Object\">Object</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>An object containing all CSS properties that may be used without a unit. The <a href=\"css\"><code>.css()</code></a> method uses this object to see if it may append <code>px</code> to unitless values.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span>jQuery.cssNumber</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>You can think about <code>jQuery.cssNumber</code> as a list of all CSS properties you might use without a unit. It's used by <a href=\"css\"><code>.css()</code></a> to determine if it needs to add <code>px</code> to unitless values.</p> <p>The keys of the <code>jQuery.cssNumber</code> object are camel-cased and the values are all set to <code>true</code>. If you want to prevent the <a href=\"css\"><code>.css()</code></a> method from automatically adding the <code>px</code> unit for a specific CSS property, you can add an extra property to the <code>jQuery.cssNumber</code> object.</p> <pre class=\"syntaxhighlighter javascript\">jQuery.cssNumber.someCSSProp = true;</pre> <p>By default the object contains the following properties:</p> <ul> <li><code>zIndex</code></li> <li><code>fontWeight</code></li> <li><code>opacity</code></li> <li><code>zoom</code></li> <li><code>lineHeight</code></li> <li> <code>widows</code> (added in jQuery 1.6)</li> <li> <code>orphans</code> (added in jQuery 1.6)</li> <li> <code>fillOpacity</code> (added in jQuery 1.6.2)</li> <li> <code>columnCount</code> (added in jQuery 1.9)</li> <li> <code>order</code> (added in jQuery 1.10.2)</li> <li> <code>flexGrow</code> (added in jQuery 1.11.1)</li> <li> <code>flexShrink</code> (added in jQuery 1.11.1)</li> </ul> </div> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.cssNumber\" class=\"_attribution-link\">https://api.jquery.com/jQuery.cssNumber</a>\n  </p>\n</div>\n","jquery.csshooks":"<h1 class=\"entry-title\">jQuery.cssHooks</h1> <div class=\"entry-content\"> <article id=\"jQuery-cssHooks1\" class=\"entry property\"><h2 class=\"section-title\"> <span>jQuery.cssHooks</span><span class=\"returns\">Returns: <a href=\"types#Object\">Object</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Hook directly into jQuery to override how particular CSS properties are retrieved or set, normalize CSS property naming, or create custom properties.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span>jQuery.cssHooks</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>$.cssHooks</code> object provides a way to define functions for getting and setting particular CSS values. It can also be used to create new cssHooks for normalizing CSS3 features such as box shadows and gradients. </p> <p>For example, some versions of Webkit-based browsers require <code>-webkit-border-radius</code> to set the <code>border-radius</code> on an element, while earlier Firefox versions require <code>-moz-border-radius</code>. A css hook can normalize these vendor-prefixed properties to let <code>.css()</code> accept a single, standard property name (<code>border-radius</code>, or with DOM property syntax, <code>borderRadius</code>).</p> <p>In addition to providing fine-grained control over how specific style properties are handled, <code>$.cssHooks</code> also extends the set of properties available to the <code>.animate()</code> method.</p> <p>Defining a new css hook is straight-forward. The skeleton template below can serve as a guide to creating your own. </p> <pre class=\"syntaxhighlighter javascript\">(function( $ ) {\n \n// First, check to see if cssHooks are supported\nif ( !$.cssHooks ) {\n  // If not, output an error message\n  throw( new Error( \"jQuery 1.4.3 or above is required for this plugin to work\" ) );\n}\n \n// Wrap in a document ready call, because jQuery writes\n// cssHooks at this time and will blow away your functions\n// if they exist.\n$(function () {\n  $.cssHooks[ \"someCSSProp\" ] = {\n    get: function( elem, computed, extra ) {\n      // Handle getting the CSS property\n    },\n    set: function( elem, value ) {\n      // Handle setting the CSS value\n    }\n  };\n});\n \n})( jQuery );</pre> <h4 id=\"feature-testing\">Feature Testing</h4> <p>Before normalizing a vendor-specific CSS property, first determine whether the browser supports the standard property or a vendor-prefixed variation. For example, to check for support of the <code>border-radius</code> property, see if any variation is a member of a temporary element's <code>style</code> object.</p> <pre class=\"syntaxhighlighter javascript\">(function( $ ) {\n \nfunction styleSupport( prop ) {\n  var vendorProp, supportedProp,\n \n    // Capitalize first character of the prop to test vendor prefix\n    capProp = prop.charAt( 0 ).toUpperCase() + prop.slice( 1 ),\n    prefixes = [ \"Moz\", \"Webkit\", \"O\", \"ms\" ],\n    div = document.createElement( \"div\" );\n \n  if ( prop in div.style ) {\n \n    // Browser supports standard CSS property name\n    supportedProp = prop;\n  } else {\n \n    // Otherwise test support for vendor-prefixed property names\n    for ( var i = 0; i &lt; prefixes.length; i++ ) {\n      vendorProp = prefixes[ i ] + capProp;\n      if ( vendorProp in div.style ) {\n        supportedProp = vendorProp;\n        break;\n      }\n    }\n  }\n \n  // Avoid memory leak in IE\n  div = null;\n \n  // Add property to $.support so it can be accessed elsewhere\n  $.support[ prop ] = supportedProp;\n  return supportedProp;\n}\n \n// Call the function, e.g. testing for \"border-radius\" support:\nstyleSupport( \"borderRadius\" );\n \n})( jQuery );</pre> <h4 id=\"defining-complete-csshook\">Defining a complete css hook</h4> <p>To define a complete css hook, combine the support test with a filled-out version of the skeleton template provided in the first example:</p> <pre class=\"syntaxhighlighter javascript\">(function( $ ) {\n \nif ( !$.cssHooks ) {\n  throw( new Error( \"jQuery 1.4.3+ is needed for this plugin to work\" ) );\n}\n \nfunction styleSupport( prop ) {\n  var vendorProp, supportedProp,\n    capProp = prop.charAt( 0 ).toUpperCase() + prop.slice( 1 ),\n    prefixes = [ \"Moz\", \"Webkit\", \"O\", \"ms\" ],\n    div = document.createElement( \"div\" );\n \n  if ( prop in div.style ) {\n    supportedProp = prop;\n  } else {\n    for ( var i = 0; i &lt; prefixes.length; i++ ) {\n      vendorProp = prefixes[ i ] + capProp;\n      if ( vendorProp in div.style ) {\n        supportedProp = vendorProp;\n        break;\n      }\n    }\n  }\n \n  div = null;\n  $.support[ prop ] = supportedProp;\n  return supportedProp;\n}\n \nvar borderRadius = styleSupport( \"borderRadius\" );\n \n// Set cssHooks only for browsers that support a vendor-prefixed border radius\nif ( borderRadius &amp;&amp; borderRadius !== \"borderRadius\" ) {\n  $.cssHooks.borderRadius = {\n    get: function( elem, computed, extra ) {\n      return $.css( elem, borderRadius );\n    },\n    set: function( elem, value) {\n      elem.style[ borderRadius ] = value;\n    }\n  };\n}\n \n})( jQuery );</pre> <p>You can then set the border radius in a supported browser using either the DOM (camelCased) style or the CSS (hyphenated) style:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#element\" ).css( \"borderRadius\", \"10px\" );\n$( \"#another\" ).css( \"border-radius\", \"20px\" );</pre> <p>If the browser lacks support for any form of the CSS property, vendor-prefixed or not, the style is not applied to the element. However, if the browser supports a proprietary alternative, it can be applied to the cssHooks instead. </p> <pre class=\"syntaxhighlighter javascript\">(function( $ ) {\n \n// Feature test for support of a CSS property\n// and a proprietary alternative\n// ...\nif ( $.support.someCSSProp &amp;&amp; $.support.someCSSProp !== \"someCSSProp\" ) {\n \n  // Set cssHooks for browsers that\n  // support only a vendor-prefixed someCSSProp\n  $.cssHooks.someCSSProp = {\n    get: function( elem, computed, extra ) {\n      return $.css( elem, $.support.someCSSProp );\n    },\n    set: function( elem, value) {\n      elem.style[ $.support.someCSSProp ] = value;\n    }\n  };\n} else if ( supportsProprietaryAlternative ) {\n  $.cssHooks.someCSSProp = {\n    get: function( elem, computed, extra ) {\n      // Handle crazy conversion from the proprietary alternative\n    },\n    set: function( elem, value ) {\n      // Handle crazy conversion to the proprietary alternative\n    }\n  }\n}\n \n})( jQuery );</pre> <h4 id=\"special-units\">Special units</h4> <p>By default, jQuery adds a \"px\" unit to the values passed to the <code>.css()</code> method. This behavior can be prevented by adding the property to the <a href=\"jquery.cssnumer\"><code>jQuery.cssNumber</code></a> object</p> <pre class=\"syntaxhighlighter javascript\">$.cssNumber.someCSSProp = true;</pre> <h4 id=\"animating\">Animating with cssHooks</h4> <p>A css hook can also hook into jQuery's animation mechanism by adding a property to the <code>jQuery.fx.step</code> object:</p> <pre class=\"syntaxhighlighter javascript\">$.fx.step.someCSSProp = function( fx ) {\n  $.cssHooks.someCSSProp.set( fx.elem, fx.now + fx.unit );\n};</pre> <p>Note that this works best for simple numeric-value animations. More custom code may be required depending on the CSS property, the type of value it returns, and the animation's complexity.</p> </div> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.cssHooks\" class=\"_attribution-link\">https://api.jquery.com/jQuery.cssHooks</a>\n  </p>\n</div>\n","jquery.callbacks":"<h1 class=\"entry-title\">jQuery.Callbacks()</h1> <div class=\"entry-content\"> <article id=\"jQuery-Callbacks1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.Callbacks( flags )</span><span class=\"returns\">Returns: <a href=\"types#Callbacks\">Callbacks</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>A multi-purpose callbacks list object that provides a powerful way to manage callback lists.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a></span><a id=\"jQuery-Callbacks-flags\" href=\"#jQuery-Callbacks-flags\">jQuery.Callbacks( flags )</a> </h4> <ul><li> <div><strong>flags</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>An optional list of space-separated flags that change how the callback list behaves.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>$.Callbacks()</code> function is internally used to provide the base functionality behind the jQuery <code>$.ajax()</code> and <code>$.Deferred()</code> components. It can be used as a similar base to define functionality for new components.</p> <p><code>$.Callbacks()</code> supports a number of methods including <code><a href=\"callbacks.add\">callbacks.add()</a></code>,<code><a href=\"callbacks.remove\">callbacks.remove()</a></code>, <code><a href=\"callbacks.fire\">callbacks.fire()</a></code> and <code><a href=\"callbacks.disable\">callbacks.disable()</a></code>.</p> <h3 id=\"getting-started\">Getting started</h3> <p>The following are two sample methods named <code>fn1</code> and <code>fn2</code>:</p> <pre class=\"syntaxhighlighter javascript\">function fn1( value ) {\n  console.log( value );\n}\n \nfunction fn2( value ) {\n  console.log( \"fn2 says: \" + value );\n  return false;\n}</pre> <p>These can be added as callbacks to a <code>$.Callbacks</code> list and invoked as follows:</p> <pre class=\"syntaxhighlighter javascript\">var callbacks = $.Callbacks();\ncallbacks.add( fn1 );\n \n// Outputs: foo!\ncallbacks.fire( \"foo!\" );\n \ncallbacks.add( fn2 );\n \n// Outputs: bar!, fn2 says: bar!\ncallbacks.fire( \"bar!\" );</pre> <p>The result of this is that it becomes simple to construct complex lists of callbacks where input values can be passed through to as many functions as needed with ease.</p> <p>Two specific methods were being used above: <code>.add()</code> and <code>.fire()</code>. The <code>.add()</code> method supports adding new callbacks to the callback list, while the <code>.fire()</code> method executes the added functions and provides a way to pass arguments to be processed by the callbacks in the same list.</p> <p>Another method supported by <code>$.Callbacks</code> is <code>.remove()</code>, which has the ability to remove a particular callback from the callback list. Here's a practical example of <code>.remove()</code> being used:</p> <pre class=\"syntaxhighlighter javascript\">var callbacks = $.Callbacks();\ncallbacks.add( fn1 );\n \n// Outputs: foo!\ncallbacks.fire( \"foo!\" );\n \ncallbacks.add( fn2 );\n \n// Outputs: bar!, fn2 says: bar!\ncallbacks.fire( \"bar!\" );\n \ncallbacks.remove( fn2 );\n \n// Only outputs foobar, as fn2 has been removed.\ncallbacks.fire( \"foobar\" );</pre> <h3 id=\"supported-flags\">Supported Flags</h3> <p>The <code>flags</code> argument is an optional argument to <code>$.Callbacks()</code>, structured as a list of space-separated strings that change how the callback list behaves (eg. <code>$.Callbacks( \"unique stopOnFalse\" )</code>).</p> <h2>Possible flags:</h2> <ul> <li> <code>once</code>: Ensures the callback list can only be fired once (like a Deferred).</li> <li> <code>memory</code>: Keeps track of previous values and will call any callback added after the list has been fired right away with the latest \"memorized\" values (like a Deferred).</li> <li> <code>unique</code>: Ensures a callback can only be added once (so there are no duplicates in the list).</li> <li> <code>stopOnFalse</code>: Interrupts callings when a callback returns false.</li> </ul> <p>By default a callback list will act like an event callback list and can be \"fired\" multiple times.</p> <p>For examples of how <code>flags</code> should ideally be used, see below:</p> <h2 id=\"once\"> <code>$.Callbacks( \"once\" )</code>:</h2> <pre class=\"syntaxhighlighter javascript\">var callbacks = $.Callbacks( \"once\" );\ncallbacks.add( fn1 );\ncallbacks.fire( \"foo\" );\ncallbacks.add( fn2 );\ncallbacks.fire( \"bar\" );\ncallbacks.remove( fn2 );\ncallbacks.fire( \"foobar\" );\n \n/*\noutput:\nfoo\n*/</pre> <h2 id=\"memory\"> <code>$.Callbacks( \"memory\" )</code>:</h2> <pre class=\"syntaxhighlighter javascript\">var callbacks = $.Callbacks( \"memory\" );\ncallbacks.add( fn1 );\ncallbacks.fire( \"foo\" );\ncallbacks.add( fn2 );\ncallbacks.fire( \"bar\" );\ncallbacks.remove( fn2 );\ncallbacks.fire( \"foobar\" );\n \n/*\noutput:\nfoo\nfn2 says:foo\nbar\nfn2 says:bar\nfoobar\n*/</pre> <h2 id=\"unique\"> <code>$.Callbacks( \"unique\" )</code>:</h2> <pre class=\"syntaxhighlighter javascript\">var callbacks = $.Callbacks( \"unique\" );\ncallbacks.add( fn1 );\ncallbacks.fire( \"foo\" );\ncallbacks.add( fn1 ); // Repeat addition\ncallbacks.add( fn2 );\ncallbacks.fire( \"bar\" );\ncallbacks.remove( fn2 );\ncallbacks.fire( \"foobar\" );\n \n/*\noutput:\nfoo\nbar\nfn2 says:bar\nfoobar\n*/</pre> <h2 id=\"stopOnFalse\"> <code>$.Callbacks( \"stopOnFalse\" )</code>:</h2> <pre class=\"syntaxhighlighter javascript\">function fn1( value ) {\n  console.log( value );\n  return false;\n}\n \nfunction fn2( value ) {\n  fn1( \"fn2 says: \" + value );\n  return false;\n}\n \nvar callbacks = $.Callbacks( \"stopOnFalse\" );\ncallbacks.add( fn1 );\ncallbacks.fire( \"foo\" );\ncallbacks.add( fn2 );\ncallbacks.fire( \"bar\" );\ncallbacks.remove( fn2 );\ncallbacks.fire( \"foobar\" );\n \n/*\noutput:\nfoo\nbar\nfoobar\n*/</pre> <p>Because <code>$.Callbacks()</code> supports a list of flags rather than just one, setting several flags has a cumulative effect similar to \"&amp;&amp;\". This means it's possible to combine flags to create callback lists that, say, both are <i>unique</i> and <i>ensure if list was already fired, adding more callbacks will have it called with the latest fired value</i> (i.e. <code>$.Callbacks(\"unique memory\")</code>).</p> <h2 id=\"unique-memory\"> <code>$.Callbacks( 'unique memory' )</code>:</h2> <pre class=\"syntaxhighlighter javascript\">function fn1( value ) {\n  console.log( value );\n  return false;\n}\n \nfunction fn2( value ) {\n  fn1( \"fn2 says: \" + value );\n  return false;\n}\n \nvar callbacks = $.Callbacks( \"unique memory\" );\ncallbacks.add( fn1 );\ncallbacks.fire( \"foo\" );\ncallbacks.add( fn1 ); // Repeat addition\ncallbacks.add( fn2 );\ncallbacks.fire( \"bar\" );\ncallbacks.add( fn2 );\ncallbacks.fire( \"baz\" );\ncallbacks.remove( fn2 );\ncallbacks.fire( \"foobar\" );\n \n/*\noutput:\nfoo\nfn2 says:foo\nbar\nfn2 says:bar\nbaz\nfn2 says:baz\nfoobar\n*/</pre> <p>Flag combinations with <code>$.Callbacks()</code> are internally in jQuery for the <code>.done()</code> and <code>.fail()</code> functions on a Deferred — both of which use <code>$.Callbacks('memory once')</code>.</p> <p>The methods of <code>$.Callbacks</code> can also be detached, should there be a need to define short-hand versions for convenience:</p> <pre class=\"syntaxhighlighter javascript\">var callbacks = $.Callbacks(),\n  add = callbacks.add,\n  remove = callbacks.remove,\n  fire = callbacks.fire;\n \nadd( fn1 );\nfire( \"hello world\" );\nremove( fn1 );</pre> <h3 id=\"pubsub\">$.Callbacks, $.Deferred and Pub/Sub</h3> <p>The general idea behind pub/sub (Publish/Subscribe, or, the Observer pattern) is the promotion of loose coupling in applications. Rather than single objects calling on the methods of other objects, an object instead subscribes to a specific task or activity of another object and is notified when it occurs. Observers are also called Subscribers, and we refer to the object being observed as the Publisher (or the subject). Publishers notify subscribers when events occur.</p> <p>To demonstrate the component-creation capabilities of <code>$.Callbacks()</code>, it's possible to implement a Pub/Sub system using only callback lists. Using <code>$.Callbacks</code> as a topics queue, a system for publishing and subscribing to topics can be implemented as follows:</p> <pre class=\"syntaxhighlighter javascript\">var topics = {};\n \njQuery.Topic = function( id ) {\n  var callbacks, method,\n    topic = id &amp;&amp; topics[ id ];\n \n  if ( !topic ) {\n    callbacks = jQuery.Callbacks();\n    topic = {\n      publish: callbacks.fire,\n      subscribe: callbacks.add,\n      unsubscribe: callbacks.remove\n    };\n    if ( id ) {\n      topics[ id ] = topic;\n    }\n  }\n  return topic;\n};</pre> <p>This can then be used by parts of your application to publish and subscribe to events of interest quite easily:</p> <pre class=\"syntaxhighlighter javascript\">// Subscribers\n$.Topic( \"mailArrived\" ).subscribe( fn1 );\n$.Topic( \"mailArrived\" ).subscribe( fn2 );\n$.Topic( \"mailSent\" ).subscribe( fn1 );\n \n// Publisher\n$.Topic( \"mailArrived\" ).publish( \"hello world!\" );\n$.Topic( \"mailSent\" ).publish( \"woo! mail!\" );\n \n// Here, \"hello world!\" gets pushed to fn1 and fn2\n// when the \"mailArrived\" notification is published\n// with \"woo! mail!\" also being pushed to fn1 when\n// the \"mailSent\" notification is published.\n \n/*\noutput:\nhello world!\nfn2 says: hello world!\nwoo! mail!\n*/</pre> <p>While this is useful, the implementation can be taken further. Using <code>$.Deferreds</code>, it's possible to ensure publishers only publish notifications for subscribers once particular tasks have been completed (resolved). See the below code sample for some further comments on how this could be used in practice:</p> <pre class=\"syntaxhighlighter javascript\">// Subscribe to the mailArrived notification\n$.Topic( \"mailArrived\" ).subscribe( fn1 );\n \n// Create a new instance of Deferreds\nvar dfd = $.Deferred();\n \n// Define a new topic (without directly publishing)\nvar topic = $.Topic( \"mailArrived\" );\n \n// When the deferred has been resolved, publish a\n// notification to subscribers\ndfd.done( topic.publish );\n \n// Here the Deferred is being resolved with a message\n// that will be passed back to subscribers. It's possible to\n// easily integrate this into a more complex routine\n// (eg. waiting on an Ajax call to complete) so that\n// messages are only published once the task has actually\n// finished.\ndfd.resolve( \"it's been published!\" );</pre> </div> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.Callbacks\" class=\"_attribution-link\">https://api.jquery.com/jQuery.Callbacks</a>\n  </p>\n</div>\n","jquery.data":"<h1 class=\"entry-title\">jQuery.data()</h1> <div class=\"entry-content\"> Store arbitrary data associated with the specified element and/or return the value that was set.<div class=\"toc\"> <h4><span>Contents:</span></h4> <ul class=\"toc-list\"> <li> <a href=\"#jQuery-data1\">jQuery.data( element, key, value )</a><ul><li><a href=\"#jQuery-data-element-key-value\">jQuery.data( element, key, value )</a></li></ul> </li> <li> <a href=\"#jQuery-data2\">jQuery.data( element, key )</a><ul> <li><a href=\"#jQuery-data-element-key\">jQuery.data( element, key )</a></li> <li><a href=\"#jQuery-data-element\">jQuery.data( element )</a></li> </ul> </li> </ul> </div>\n<article id=\"jQuery-data1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.data( element, key, value )</span><span class=\"returns\">Returns: <a href=\"types#Object\">Object</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Store arbitrary data associated with the specified element. Returns the value that was set.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2.3/\">1.2.3</a></span><a id=\"jQuery-data-element-key-value\" href=\"#jQuery-data-element-key-value\">jQuery.data( element, key, value )</a> </h4> <ul> <li> <div><strong>element</strong></div> <div>Type: <a href=\"types#Element\">Element</a> </div> <div>The DOM element to associate with the data.</div> </li> <li> <div><strong>key</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string naming the piece of data to set.</div> </li> <li> <div><strong>value</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>The new data value; this can be any Javascript type except <code>undefined</code>.</div> </li> </ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p><strong>Note:</strong> This is a low-level method; a more convenient <code><a href=\"data\">.data()</a></code> is also available.</p> <p>The <code>jQuery.data()</code> method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore free from memory leaks. jQuery ensures that the data is removed when DOM elements are removed via jQuery methods, and when the user leaves the page. We can set several distinct values for a single element and retrieve them later:</p> <pre class=\"syntaxhighlighter javascript\">jQuery.data( document.body, \"foo\", 52 );\njQuery.data( document.body, \"bar\", \"test\" );</pre> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> Note that this method currently does not provide cross-platform support for setting data on XML documents, as Internet Explorer does not allow data to be attached via expando properties. </li> <li> <code>undefined</code> is not recognized as a data value. Calls such as <code>jQuery.data( el, \"name\", undefined )</code> will return the corresponding data for \"name\", and is therefore the same as <code>jQuery.data( el, \"name\" )</code>. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Store then retrieve a value from the div element.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.data demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    color: blue;\n  }\n  span {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;\n  The values stored were\n  &lt;span&gt;&lt;/span&gt;\n  and\n  &lt;span&gt;&lt;/span&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\nvar div = $( \"div\" )[ 0 ];\njQuery.data( div, \"test\", {\n  first: 16,\n  last: \"pizza!\"\n});\n$( \"span:first\" ).text( jQuery.data( div, \"test\" ).first );\n$( \"span:last\" ).text( jQuery.data( div, \"test\" ).last );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article><article id=\"jQuery-data2\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.data( element, key )</span><span class=\"returns\">Returns: <a href=\"types#Object\">Object</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Returns value at named data store for the element, as set by <code>jQuery.data(element, name, value)</code>, or the full data store for the element.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2.3/\">1.2.3</a></span><a id=\"jQuery-data-element-key\" href=\"#jQuery-data-element-key\">jQuery.data( element, key )</a> </h4> <ul> <li> <div><strong>element</strong></div> <div>Type: <a href=\"types#Element\">Element</a> </div> <div>The DOM element to query for the data.</div> </li> <li> <div><strong>key</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>Name of the data stored.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"jQuery-data-element\" href=\"#jQuery-data-element\">jQuery.data( element )</a> </h4> <ul><li> <div><strong>element</strong></div> <div>Type: <a href=\"types#Element\">Element</a> </div> <div>The DOM element to query for the data.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc-1\"> <p><strong>Note:</strong> This is a low-level method; a more convenient <code><a href=\"data\">.data()</a></code> is also available.</p> <p><strong>Regarding HTML5 data-* attributes:</strong> This low-level method does NOT retrieve the <code>data-*</code> attributes unless the more convenient <code><a href=\"data\">.data()</a></code> method has already retrieved them.</p> <p>The <code>jQuery.data()</code> method allows us to attach data of any type to DOM elements in a way that is safe from circular references and therefore from memory leaks. We can retrieve several distinct values for a single element one at a time, or as a set:</p> <pre class=\"syntaxhighlighter javascript\">alert( jQuery.data( document.body, \"foo\" ) );\nalert( jQuery.data( document.body ) );</pre> <p>The above lines alert the data values that were set on the <code>body</code> element. If nothing was set on that element, an empty string is returned.</p> <p>Calling <code>jQuery.data( element )</code> retrieves all of the element's associated values as a JavaScript object. Note that jQuery itself uses this method to store data for internal use, such as event handlers, so do not assume that it contains only data that your own code has stored.</p> <p><em>Note:</em> this method currently does not provide cross-platform support for setting data on XML documents, as Internet Explorer does not allow data to be attached via expando properties.</p> </div> <section class=\"entry-examples\" id=\"entry-examples-1\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-1-0\"> <p>Get the data named \"blah\" stored at for an element.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.data demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    margin: 5px;\n    background: yellow;\n  }\n  button {\n    margin: 5px;\n    font-size: 14px;\n  }\n  p {\n    margin: 5px;\n    color: blue;\n  }\n  span {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;A div&lt;/div&gt;\n&lt;button&gt;Get \"blah\" from the div&lt;/button&gt;\n&lt;button&gt;Set \"blah\" to \"hello\"&lt;/button&gt;\n&lt;button&gt;Set \"blah\" to 86&lt;/button&gt;\n&lt;button&gt;Remove \"blah\" from the div&lt;/button&gt;\n&lt;p&gt;The \"blah\" value of this div is &lt;span&gt;?&lt;/span&gt;&lt;/p&gt;\n \n&lt;script&gt;\n$( \"button\" ).click( function() {\n  var value,\n    div = $( \"div\" )[ 0 ];\n  switch ( $( \"button\" ).index( this ) ) {\n  case 0 :\n    value = jQuery.data( div, \"blah\" );\n    break;\n  case 1 :\n    jQuery.data( div, \"blah\", \"hello\" );\n    value = \"Stored!\";\n    break;\n  case 2 :\n    jQuery.data( div, \"blah\", 86 );\n    value = \"Stored!\";\n    break;\n  case 3 :\n    jQuery.removeData( div, \"blah\" );\n    value = \"Removed!\";\n    break;\n  }\n  $( \"span\" ).text( \"\" + value );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.data\" class=\"_attribution-link\">https://api.jquery.com/jQuery.data</a>\n  </p>\n</div>\n","jquery.deferred":"<h1 class=\"entry-title\">jQuery.Deferred()</h1> <div class=\"entry-content\"> <article id=\"jQuery-Deferred1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.Deferred( [beforeStart ] )</span><span class=\"returns\">Returns: <a href=\"types#Deferred\">Deferred</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong> A factory function that returns a chainable utility object with methods to register multiple callbacks into callback queues, invoke callback queues, and relay the success or failure state of any synchronous or asynchronous function.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.5/\">1.5</a></span><a id=\"jQuery-Deferred-beforeStart\" href=\"#jQuery-Deferred-beforeStart\">jQuery.Deferred( [beforeStart ] )</a> </h4> <ul><li> <div><strong>beforeStart</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Deferred\">Deferred</a> deferred )</div> <div> A function that is called just before the constructor returns. </div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>jQuery.Deferred()</code> factory creates a new <code>deferred</code> object.</p> <p>The <code>jQuery.Deferred</code> method can be passed an optional function, which is called just before the method returns and is passed the new <code>deferred</code> object as both the <code>this</code> object and as the first argument to the function. The called function can attach callbacks using <a href=\"deferred.then\"><code>deferred.then()</code></a>, for example.</p> <p>A Deferred object starts in the <em>pending</em> state. Any callbacks added to the object with <a href=\"deferred.then\"><code>deferred.then()</code></a>, <a href=\"deferred.always\"><code>deferred.always()</code></a>, <a href=\"deferred.done\"><code>deferred.done()</code></a>, or <a href=\"deferred.fail\"><code>deferred.fail()</code></a> are queued to be executed later. Calling <a href=\"deferred.resolve\"><code>deferred.resolve()</code></a> or <a href=\"deferred.resolvewith\"><code>deferred.resolveWith()</code></a> transitions the Deferred into the <em>resolved</em> state and immediately executes any <code>doneCallbacks</code> that are set. Calling <a href=\"deferred.reject\"><code>deferred.reject()</code></a> or <a href=\"deferred.rejectwith\"><code>deferred.rejectWith()</code></a> transitions the Deferred into the <em>rejected</em> state and immediately executes any <code>failCallbacks</code> that are set. Once the object has entered the resolved or rejected state, it stays in that state. Callbacks can still be added to the resolved or rejected Deferred — they will execute immediately.</p> <h4> Enhanced Callbacks with jQuery Deferred </h4> <p>In JavaScript it is common to invoke functions that optionally accept callbacks that are called within that function. For example, in versions prior to jQuery 1.5, asynchronous processes such as <code>jQuery.ajax()</code> accept callbacks to be invoked some time in the near-future upon success, error, and completion of the ajax request.</p> <p><code>jQuery.Deferred()</code> introduces several enhancements to the way callbacks are managed and invoked. In particular, <code>jQuery.Deferred()</code> provides flexible ways to provide multiple callbacks, and these callbacks can be invoked regardless of whether the original callback dispatch has already occurred. jQuery Deferred is based on the <a href=\"http://wiki.commonjs.org/wiki/Promises/A\">CommonJS Promises/A</a> design.</p> <p>One model for understanding Deferred is to think of it as a chain-aware function wrapper. The <a href=\"deferred.then\"><code>deferred.then()</code></a>, <a href=\"deferred.always\"><code>deferred.always()</code></a>, <a href=\"deferred.done\"><code>deferred.done()</code></a>, and <a href=\"deferred.fail\"><code>deferred.fail()</code></a> methods specify the functions to be called and the <a href=\"deferred.resolve\"><code>deferred.resolve(args)</code></a> or <a href=\"deferred.reject\"><code>deferred.reject(args)</code></a> methods \"call\" the functions with the arguments you supply. Once the Deferred has been resolved or rejected it stays in that state; a second call to <code>deferred.resolve()</code>, for example, is ignored. If more functions are added by <code>deferred.then()</code>, for example, after the Deferred is resolved, they are called immediately with the arguments previously provided.</p> <p>In most cases where a jQuery API call returns a Deferred or Promise-compatible object, such as <a href=\"jquery.ajax\"><code>jQuery.ajax()</code></a> or <a href=\"jquery.when\"><code>jQuery.when()</code></a>, you will only want to use the <a href=\"deferred.then\"><code>deferred.then()</code></a>, <a href=\"deferred.done\"><code>deferred.done()</code></a>, and <a href=\"deferred.fail\"><code>deferred.fail()</code></a> methods to add callbacks to the Deferred's queues. The internals of the API call or code that created the Deferred will invoke <a href=\"deferred.resolve\"><code>deferred.resolve()</code></a> or <a href=\"deferred.reject\"><code>deferred.reject()</code></a> on the deferred at some point, causing the appropriate callbacks to run.</p> </div> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.Deferred\" class=\"_attribution-link\">https://api.jquery.com/jQuery.Deferred</a>\n  </p>\n</div>\n","jquery.dequeue":"<h1 class=\"entry-title\">jQuery.dequeue()</h1> <div class=\"entry-content\"> <article id=\"jQuery-dequeue1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.dequeue( element [, queueName ] )</span><span class=\"returns\">Returns: <a href=\"types#undefined\">undefined</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Execute the next function on the queue for the matched element.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.3/\">1.3</a></span><a id=\"jQuery-dequeue-element-queueName\" href=\"#jQuery-dequeue-element-queueName\">jQuery.dequeue( element [, queueName ] )</a> </h4> <ul> <li> <div><strong>element</strong></div> <div>Type: <a href=\"types#Element\">Element</a> </div> <div>A DOM element from which to remove and execute a queued function.</div> </li> <li> <div><strong>queueName</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue.</div> </li> </ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p><strong>Note:</strong> This is a low-level method, you should probably use <code><a href=\"dequeue\">.dequeue()</a></code> instead.</p> <p>When <code>jQuery.dequeue()</code> is called, the next function on the queue is removed from the queue, and then executed. This function should in turn (directly or indirectly) cause <code>jQuery.dequeue()</code> to be called, so that the sequence can continue.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Use jQuery.dequeue() to end a custom queue function which allows the queue to keep going.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.dequeue demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    margin: 3px;\n    width: 50px;\n    position: absolute;\n    height: 50px;\n    left: 10px;\n    top: 30px;\n    background-color: yellow;\n  }\n  div.red {\n    background-color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button&gt;Start&lt;/button&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"button\" ).click(function() {\n  $( \"div\" )\n    .animate({ left: '+=200px' }, 2000 )\n    .animate({ top: '0px' }, 600 )\n    .queue(function() {\n      $( this ).toggleClass( \"red\" );\n      $.dequeue( this );\n    })\n    .animate({ left:'10px', top:'30px' }, 700 );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.dequeue\" class=\"_attribution-link\">https://api.jquery.com/jQuery.dequeue</a>\n  </p>\n</div>\n","jquery.each":"<h1 class=\"entry-title\">jQuery.each()</h1> <div class=\"entry-content\"> <article id=\"jQuery-each1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.each( array, callback )</span><span class=\"returns\">Returns: <a href=\"types#Object\">Object</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>A generic iterator function, which can be used to seamlessly iterate over both objects and arrays. Arrays and array-like objects with a length property (such as a function's arguments object) are iterated by numeric index, from 0 to length-1. Other objects are iterated via their named properties.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"jQuery-each-array-callback\" href=\"#jQuery-each-array-callback\">jQuery.each( array, callback )</a> </h4> <ul> <li> <div><strong>array</strong></div> <div>Type: <a href=\"types#Array\">Array</a> </div> <div>The array to iterate over.</div> </li> <li> <div><strong>callback</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Integer\">Integer</a> indexInArray, <a href=\"types#Object\">Object</a> value )</div> <div>The function that will be executed on every object.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"jQuery-each-object-callback\" href=\"#jQuery-each-object-callback\">jQuery.each( object, callback )</a> </h4> <ul> <li> <div><strong>object</strong></div> <div>Type: <a href=\"types#Object\">Object</a> </div> <div>The object to iterate over.</div> </li> <li> <div><strong>callback</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#String\">String</a> propertyName, <a href=\"types#Object\">Object</a> valueOfProperty )</div> <div>The function that will be executed on every object.</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>$.each()</code> function is not the same as <a href=\"each\">$(selector).each()</a>, which is used to iterate, exclusively, over a jQuery object. The <code>$.each()</code> function can be used to iterate over any collection, whether it is an object or an array. In the case of an array, the callback is passed an array index and a corresponding array value each time. (The value can also be accessed through the <code>this</code> keyword, but Javascript will always wrap the <code>this</code> value as an <code>Object</code> even if it is a simple string or number value.) The method returns its first argument, the object that was iterated.</p> <p><b>Note:</b> The <code>$.each()</code> function internally retrieves and uses the <code>length</code> property of the passed collection. So, if the collection has a property called <code>length</code> — e.g. <code>{bar: 'foo', length: 10}</code> — the function might not work as expected.</p> <pre class=\"syntaxhighlighter javascript\">$.each([ 52, 97 ], function( index, value ) {\n  alert( index + \": \" + value );\n});</pre> <p>This produces two messages:</p> <p> <samp>0: 52</samp> <br> <samp>1: 97</samp> </p> <p>If an object is used as the collection, the callback is passed a key-value pair each time:</p> <pre class=\"syntaxhighlighter javascript\">var obj = {\n  \"flammable\": \"inflammable\",\n  \"duh\": \"no duh\"\n};\n$.each( obj, function( key, value ) {\n  alert( key + \": \" + value );\n});</pre> <p>Once again, this produces two messages:</p> <p> <samp>flammable: inflammable</samp> <br> <samp>duh: no duh</samp> </p> <p>We can break the <code>$.each()</code> loop at a particular iteration by making the callback function return <code>false</code>. Returning <em>non-false</em> is the same as a <code>continue</code> statement in a for loop; it will skip immediately to the next iteration.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Iterates through the array displaying each number as both a word and numeral</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.each demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    color: blue;\n  }\n  div#five {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div id=\"one\"&gt;&lt;/div&gt;\n&lt;div id=\"two\"&gt;&lt;/div&gt;\n&lt;div id=\"three\"&gt;&lt;/div&gt;\n&lt;div id=\"four\"&gt;&lt;/div&gt;\n&lt;div id=\"five\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar arr = [ \"one\", \"two\", \"three\", \"four\", \"five\" ];\nvar obj = { one: 1, two: 2, three: 3, four: 4, five: 5 };\n \njQuery.each( arr, function( i, val ) {\n  $( \"#\" + val ).text( \"Mine is \" + val + \".\" );\n \n  // Will stop running after \"three\"\n  return ( val !== \"three\" );\n});\n \njQuery.each( obj, function( i, val ) {\n  $( \"#\" + i ).append( document.createTextNode( \" - \" + val ) );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Iterates over items in an array, accessing both the current item and its index.</p> <pre class=\"syntaxhighlighter javascript\">$.each( [ \"a\", \"b\", \"c\" ], function( i, l ){\n  alert( \"Index #\" + i + \": \" + l );\n});</pre> </div> <div class=\"entry-example\" id=\"example-2\"> <p>Iterates over the properties in an object, accessing both the current item and its key.</p> <pre class=\"syntaxhighlighter javascript\">$.each({ name: \"John\", lang: \"JS\" }, function( k, v ) {\n  alert( \"Key: \" + k + \", Value: \" + v );\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.each\" class=\"_attribution-link\">https://api.jquery.com/jQuery.each</a>\n  </p>\n</div>\n","jquery.error":"<h1 class=\"entry-title\">jQuery.error()</h1> <div class=\"entry-content\"> <article id=\"jQuery-error1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.error( message )</span><span class=\"returns\">Returns: </span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Takes a string and throws an exception containing it.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.1/\">1.4.1</a></span><a id=\"jQuery-error-message\" href=\"#jQuery-error-message\">jQuery.error( message )</a> </h4> <ul><li> <div><strong>message</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>The message to send out.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method exists primarily for plugin developers who wish to override it and provide a better display (or more information) for the error messages.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Override jQuery.error for display in Firebug.</p> <pre class=\"syntaxhighlighter javascript\">jQuery.error = console.error;</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.error\" class=\"_attribution-link\">https://api.jquery.com/jQuery.error</a>\n  </p>\n</div>\n","jquery.escapeselector":"<h1 class=\"entry-title\">jQuery.escapeSelector()</h1> <div class=\"entry-content\"> <article id=\"jQuery-escapeSelector1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.escapeSelector( selector )</span><span class=\"returns\">Returns: <a href=\"types#Selector\">Selector</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Escapes any character that has a special meaning in a CSS selector.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/3.0/\">3.0</a></span><a id=\"jQuery-escapeSelector-selector\" href=\"#jQuery-escapeSelector-selector\">jQuery.escapeSelector( selector )</a> </h4> <ul><li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> </div> <div>A string containing a selector expression to escape.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method is useful for situations where a class name or an ID contains characters that have a special meaning in CSS, such as the dot or the semicolon.</p> <p>The method is essentially a shim for the <a href=\"https://drafts.csswg.org/cssom/#the-css.escape()-method\">CSS Working Group's CSS.escape() method</a>. The main difference is that <code>$.escapeSelector()</code> can be reliably used in all of jQuery's supported browsers.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Escape an ID containing a hash.</p> <pre class=\"syntaxhighlighter javascript\">$.escapeSelector( \"#target\" ); // \"\\#target\"</pre> </div> <div class=\"entry-example\" id=\"example-1\"> <p>Select all the elements having a class name of <code>.box</code> inside a <code>div</code>.</p> <pre class=\"syntaxhighlighter javascript\">$( \"div\" ).find( \".\" + $.escapeSelector( \".box\" ) );</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.escapeSelector\" class=\"_attribution-link\">https://api.jquery.com/jQuery.escapeSelector</a>\n  </p>\n</div>\n","jquery.fx.interval":"<h1 class=\"entry-title\">jQuery.fx.interval</h1> <div class=\"entry-content\"> <article id=\"jQuery-fx-interval1\" class=\"entry property\"><h2 class=\"section-title\"> <span>jQuery.fx.interval</span><span class=\"returns\">Returns: <a href=\"types#Number\">Number</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>The rate (in milliseconds) at which animations fire.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span>jQuery.fx.interval</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This property can be manipulated to adjust the number of frames per second at which animations will run. The default is 13 milliseconds. Making this a lower number could make the animations run smoother in faster browsers (such as Chrome) but there may be performance and CPU implications of doing so.</p> <p>Since jQuery uses one global interval, no animation should be running or all animations should stop for the change of this property to take effect.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Cause all animations to run with less frames.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.fx.interval demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    width: 50px;\n    height: 30px;\n    margin: 5px;\n    float: left;\n    background: green;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;&lt;input type=\"button\" value=\"Run\"&gt;&lt;/p&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\njQuery.fx.interval = 100;\n$( \"input\" ).click(function() {\n  $( \"div\" ).toggle( 3000 );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.fx.interval\" class=\"_attribution-link\">https://api.jquery.com/jQuery.fx.interval</a>\n  </p>\n</div>\n","jquery.isemptyobject":"<h1 class=\"entry-title\">jQuery.isEmptyObject()</h1> <div class=\"entry-content\"> <article id=\"jQuery-isEmptyObject1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.isEmptyObject( object )</span><span class=\"returns\">Returns: <a href=\"types#Boolean\">Boolean</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Check to see if an object is empty (contains no enumerable properties).</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"jQuery-isEmptyObject-object\" href=\"#jQuery-isEmptyObject-object\">jQuery.isEmptyObject( object )</a> </h4> <ul><li> <div><strong>object</strong></div> <div>Type: <a href=\"types#Object\">Object</a> </div> <div>The object that will be checked to see if it's empty.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>As of jQuery 1.4 this method checks both properties on the object itself and properties inherited from prototypes (in that it doesn't use hasOwnProperty). The argument should always be a plain JavaScript <code>Object</code> as other types of object (DOM elements, primitive strings/numbers, host objects) may not give consistent results across browsers. To determine if an object is a plain JavaScript object, use <a href=\"jquery.isplainobject\"><code>$.isPlainObject()</code></a></p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Check an object to see if it's empty.</p> <pre class=\"syntaxhighlighter javascript\">jQuery.isEmptyObject({}); // true\njQuery.isEmptyObject({ foo: \"bar\" }); // false</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.isEmptyObject\" class=\"_attribution-link\">https://api.jquery.com/jQuery.isEmptyObject</a>\n  </p>\n</div>\n","jquery.fn.extend":"<h1 class=\"entry-title\">jQuery.fn.extend()</h1> <div class=\"entry-content\"> <article id=\"jQuery-fn-extend1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.fn.extend( object )</span><span class=\"returns\">Returns: <a href=\"types#Object\">Object</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Merge the contents of an object onto the jQuery prototype to provide new jQuery instance methods.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"jQuery-fn-extend-object\" href=\"#jQuery-fn-extend-object\">jQuery.fn.extend( object )</a> </h4> <ul><li> <div><strong>object</strong></div> <div>Type: <a href=\"types#Object\">Object</a> </div> <div>An object to merge onto the jQuery prototype.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> The <code>jQuery.fn.extend()</code> method extends the jQuery prototype (<code>$.fn</code>) object to provide new methods that can be chained to the <code>jQuery()</code> function. </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Add two methods to the jQuery prototype (<code>$.fn</code>) object and then use one of them.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.fn.extend demo&lt;/title&gt;\n  &lt;style&gt;\n  label {\n    display: block;\n    margin: .5em;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;label&gt;&lt;input type=\"checkbox\" name=\"foo\"&gt; Foo&lt;/label&gt;\n&lt;label&gt;&lt;input type=\"checkbox\" name=\"bar\"&gt; Bar&lt;/label&gt;\n \n&lt;script&gt;\njQuery.fn.extend({\n  check: function() {\n    return this.each(function() {\n      this.checked = true;\n    });\n  },\n  uncheck: function() {\n    return this.each(function() {\n      this.checked = false;\n    });\n  }\n});\n \n// Use the newly created .check() method\n$( \"input[type='checkbox']\" ).check();\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.fn.extend\" class=\"_attribution-link\">https://api.jquery.com/jQuery.fn.extend</a>\n  </p>\n</div>\n","jquery.get":"<h1 class=\"entry-title\">jQuery.get()</h1> <div class=\"entry-content\"> <article id=\"jQuery-get1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.get( url [, data ] [, success ] [, dataType ] )</span><span class=\"returns\">Returns: <a href=\"types#jqXHR\">jqXHR</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Load data from the server using a HTTP GET request.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"jQuery-get-url-data-success-dataType\" href=\"#jQuery-get-url-data-success-dataType\">jQuery.get( url [, data ] [, success ] [, dataType ] )</a> </h4> <ul> <li> <div><strong>url</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing the URL to which the request is sent.</div> </li> <li> <div><strong>data</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> or <a href=\"types#String\">String</a> </div> <div>A plain object or string that is sent to the server with the request.</div> </li> <li> <div><strong>success</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#PlainObject\">PlainObject</a> data, <a href=\"types#String\">String</a> textStatus, <a href=\"types#jqXHR\">jqXHR</a> jqXHR )</div> <div>A callback function that is executed if the request succeeds. Required if <code>dataType</code> is provided, but you can use <code>null</code> or <a href=\"jquery.noop\"><code>jQuery.noop</code></a> as a placeholder.</div> </li> <li> <div><strong>dataType</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.12/2.2/\">1.12/2.2</a></span><a id=\"jQuery-get-settings\" href=\"#jQuery-get-settings\">jQuery.get( [settings ] )</a> </h4> <ul><li> <div><strong>settings</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>A set of key/value pairs that configure the Ajax request. All properties except for <code>url</code> are optional. A default can be set for any option with <a href=\"jquery.ajaxsetup\">$.ajaxSetup()</a>. See <a href=\"jquery.ajax#jQuery-ajax-settings\">jQuery.ajax( settings )</a> for a complete list of all settings. The type option will automatically be set to <code>GET</code>.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This is a shorthand Ajax function, which is equivalent to:</p> <pre class=\"syntaxhighlighter javascript\">$.ajax({\n  url: url,\n  data: data,\n  success: success,\n  dataType: dataType\n});</pre> <p>The <code>success</code> callback function is passed the returned data, which will be an XML root element, text string, JavaScript file, or JSON object, depending on the MIME type of the response. It is also passed the text status of the response. </p> <p><strong>As of jQuery 1.5</strong>, the <code>success</code> callback function is also passed a <a href=\"#jqxhr-object\">\"jqXHR\" object</a> (in <strong>jQuery 1.4</strong>, it was passed the <code>XMLHttpRequest</code> object). However, since JSONP and cross-domain GET requests do not use <abbr title=\"XMLHTTPRequest\">XHR</abbr>, in those cases the <code>jqXHR</code> and <code>textStatus</code> parameters passed to the success callback are undefined.</p> <p>Most implementations will specify a success handler:</p> <pre class=\"syntaxhighlighter javascript\">$.get( \"ajax/test.html\", function( data ) {\n  $( \".result\" ).html( data );\n  alert( \"Load was performed.\" );\n});</pre> <p>This example fetches the requested HTML snippet and inserts it on the page.</p> <h4 id=\"jqxhr-object\">The jqXHR Object</h4> <p><strong>As of jQuery 1.5</strong>, all of jQuery's Ajax methods return a superset of the <code>XMLHTTPRequest</code> object. This jQuery XHR object, or \"jqXHR,\" returned by <code>$.get()</code> implements the Promise interface, giving it all the properties, methods, and behavior of a Promise (see <a href=\"https://api.jquery.com/category/deferred-object/\">Deferred object</a> for more information). The <code>jqXHR.done()</code> (for success), <code>jqXHR.fail()</code> (for error), and <code>jqXHR.always()</code> (for completion, whether success or error) methods take a function argument that is called when the request terminates. For information about the arguments this function receives, see the <a href=\"jquery.ajax#jqXHR\">jqXHR Object</a> section of the <code>$.ajax()</code> documentation.</p> <p>The Promise interface also allows jQuery's Ajax methods, including <code>$.get()</code>, to chain multiple <code>.done()</code>, <code>.fail()</code>, and <code>.always()</code> callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.</p> <pre class=\"syntaxhighlighter javascript\">// Assign handlers immediately after making the request,\n// and remember the jqxhr object for this request\nvar jqxhr = $.get( \"example.php\", function() {\n  alert( \"success\" );\n})\n  .done(function() {\n    alert( \"second success\" );\n  })\n  .fail(function() {\n    alert( \"error\" );\n  })\n  .always(function() {\n    alert( \"finished\" );\n  });\n \n// Perform other work here ...\n \n// Set another completion function for the request above\njqxhr.always(function() {\n  alert( \"second finished\" );\n});</pre> <h4>Deprecation Notice</h4> <p>The <code>jqXHR.success()</code>, <code>jqXHR.error()</code>, and <code>jqXHR.complete()</code> callback methods are <strong>removed as of jQuery 3.0</strong>. You can use <code>jqXHR.done()</code>, <code>jqXHR.fail()</code>, and <code>jqXHR.always()</code> instead.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> Due to browser security restrictions, most \"Ajax\" requests are subject to the <a title=\"Same Origin Policy on Wikipedia\" href=\"http://en.wikipedia.org/wiki/Same_origin_policy\">same origin policy</a>; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. </li> <li> If a request with jQuery.get() returns an error code, it will fail silently unless the script has also called the global <a href=\"ajaxerror\">.ajaxError() </a> method. Alternatively, as of jQuery 1.5, the <code>.error()</code> method of the <code>jqXHR</code> object returned by jQuery.get() is also available for error handling. </li> <li> Script and JSONP requests are not subject to the same origin policy restrictions. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Request the test.php page, but ignore the return results.</p> <pre class=\"syntaxhighlighter javascript\">$.get( \"test.php\" );</pre> </div> <div class=\"entry-example\" id=\"example-1\"> <p>Request the test.php page and send some additional data along (while still ignoring the return results).</p> <pre class=\"syntaxhighlighter javascript\">$.get( \"test.php\", { name: \"John\", time: \"2pm\" } );</pre> </div> <div class=\"entry-example\" id=\"example-2\"> <p>Pass arrays of data to the server (while still ignoring the return results).</p> <pre class=\"syntaxhighlighter javascript\">$.get( \"test.php\", { \"choices[]\": [\"Jon\", \"Susan\"] } );</pre> </div> <div class=\"entry-example\" id=\"example-3\"> <p>Alert the results from requesting test.php (HTML or XML, depending on what was returned).</p> <pre class=\"syntaxhighlighter javascript\">$.get( \"test.php\", function( data ) {\n  alert( \"Data Loaded: \" + data );\n});</pre> </div> <div class=\"entry-example\" id=\"example-4\"> <p>Alert the results from requesting test.cgi with an additional payload of data (HTML or XML, depending on what was returned).</p> <pre class=\"syntaxhighlighter javascript\">$.get( \"test.cgi\", { name: \"John\", time: \"2pm\" } )\n  .done(function( data ) {\n    alert( \"Data Loaded: \" + data );\n  });</pre> </div> <div class=\"entry-example\" id=\"example-5\"> <p> Get the test.php page contents, which has been returned in json format (&lt;?php echo json_encode( array( \"name\"=&gt;\"John\",\"time\"=&gt;\"2pm\" ) ); ?&gt;), and add it to the page.</p> <pre class=\"syntaxhighlighter javascript\">$.get( \"test.php\", function( data ) {\n  $( \"body\" )\n    .append( \"Name: \" + data.name ) // John\n    .append( \"Time: \" + data.time ); //  2pm\n}, \"json\" );</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.get\" class=\"_attribution-link\">https://api.jquery.com/jQuery.get</a>\n  </p>\n</div>\n","jquery.fx.off":"<h1 class=\"entry-title\">jQuery.fx.off</h1> <div class=\"entry-content\"> <article id=\"jQuery-fx-off1\" class=\"entry property\"><h2 class=\"section-title\"> <span>jQuery.fx.off</span><span class=\"returns\">Returns: <a href=\"types#Boolean\">Boolean</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Globally disable all animations.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.3/\">1.3</a></span>jQuery.fx.off</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>When this property is set to <code>true</code>, all animation methods will immediately set elements to their final state when called, rather than displaying an effect. This may be desirable for a couple reasons:</p> <ul> <li>jQuery is being used on a low-resource device.</li> <li>Users are encountering accessibility problems with the animations.</li> </ul> <p>Animations can be turned back on by setting the property to <code>false</code>.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Toggle animation on and off</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.fx.off demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    width: 50px;\n    height: 30px;\n    margin: 5px;\n    float: left;\n    background: green;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;input type=\"button\" value=\"Run\"&gt;\n&lt;button&gt;Toggle fx&lt;/button&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar toggleFx = function() {\n  $.fx.off = !$.fx.off;\n};\ntoggleFx();\n$( \"button\" ).click( toggleFx );\n$( \"input\" ).click(function() {\n  $( \"div\" ).toggle( \"slow\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.fx.off\" class=\"_attribution-link\">https://api.jquery.com/jQuery.fx.off</a>\n  </p>\n</div>\n","jquery.getjson":"<h1 class=\"entry-title\">jQuery.getJSON()</h1> <div class=\"entry-content\"> <article id=\"jQuery-getJSON1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.getJSON( url [, data ] [, success ] )</span><span class=\"returns\">Returns: <a href=\"types#jqXHR\">jqXHR</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Load JSON-encoded data from the server using a GET HTTP request.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"jQuery-getJSON-url-data-success\" href=\"#jQuery-getJSON-url-data-success\">jQuery.getJSON( url [, data ] [, success ] )</a> </h4> <ul> <li> <div><strong>url</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing the URL to which the request is sent.</div> </li> <li> <div><strong>data</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> or <a href=\"types#String\">String</a> </div> <div>A plain object or string that is sent to the server with the request.</div> </li> <li> <div><strong>success</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#PlainObject\">PlainObject</a> data, <a href=\"types#String\">String</a> textStatus, <a href=\"types#jqXHR\">jqXHR</a> jqXHR )</div> <div>A callback function that is executed if the request succeeds.</div> </li> </ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This is a shorthand Ajax function, which is equivalent to:</p> <pre class=\"syntaxhighlighter javascript\">$.ajax({\n  dataType: \"json\",\n  url: url,\n  data: data,\n  success: success\n});</pre> <p>Data that is sent to the server is appended to the URL as a query string. If the value of the <code>data</code> parameter is a plain object, it is converted to a string and url-encoded before it is appended to the URL.</p> <p>Most implementations will specify a success handler:</p> <pre class=\"syntaxhighlighter javascript\">$.getJSON( \"ajax/test.json\", function( data ) {\n  var items = [];\n  $.each( data, function( key, val ) {\n    items.push( \"&lt;li id='\" + key + \"'&gt;\" + val + \"&lt;/li&gt;\" );\n  });\n \n  $( \"&lt;ul/&gt;\", {\n    \"class\": \"my-new-list\",\n    html: items.join( \"\" )\n  }).appendTo( \"body\" );\n});</pre> <p>This example, of course, relies on the structure of the JSON file:</p> <pre class=\"syntaxhighlighter javascript\">{\n  \"one\": \"Singular sensation\",\n  \"two\": \"Beady little eyes\",\n  \"three\": \"Little birds pitch by my doorstep\"\n}</pre> <p>Using this structure, the example loops through the requested data, builds an unordered list, and appends it to the body.</p> <p>The <code>success</code> callback is passed the returned data, which is typically a JavaScript object or array as defined by the JSON structure and parsed using the <code><a href=\"jquery.parsejson\">$.parseJSON()</a></code> method. It is also passed the text status of the response.</p> <p><strong>As of jQuery 1.5</strong>, the <code>success</code> callback function receives a <a href=\"jquery.get#jqxhr-object\">\"jqXHR\" object</a> (in <strong>jQuery 1.4</strong>, it received the <code>XMLHttpRequest</code> object). However, since JSONP and cross-domain GET requests do not use <abbr title=\"XMLHTTPRequest\">XHR</abbr>, in those cases the <code>jqXHR</code> and <code>textStatus</code> parameters passed to the success callback are undefined.</p> <div class=\"warning\"> <p><strong>Important:</strong> As of jQuery 1.4, if the JSON file contains a syntax error, the request will usually fail silently. Avoid frequent hand-editing of JSON data for this reason. JSON is a data-interchange format with syntax rules that are stricter than those of JavaScript's object literal notation. For example, all strings represented in JSON, whether they are properties or values, must be enclosed in double-quotes. For details on the JSON format, see <a href=\"http://json.org/\">http://json.org/</a>.</p> </div> <h4 id=\"jsonp\">JSONP</h4> <p>If the URL includes the string \"callback=?\" (or similar, as defined by the server-side API), the request is treated as JSONP instead. See the discussion of the <code>jsonp</code> data type in <code><a href=\"jquery.ajax\">$.ajax()</a></code> for more details.</p> <h4 id=\"jqxhr-object\">The jqXHR Object</h4> <p><strong>As of jQuery 1.5</strong>, all of jQuery's Ajax methods return a superset of the <code>XMLHTTPRequest</code> object. This jQuery XHR object, or \"jqXHR,\" returned by <code>$.getJSON()</code> implements the Promise interface, giving it all the properties, methods, and behavior of a Promise (see <a href=\"https://api.jquery.com/category/deferred-object/\">Deferred object</a> for more information). The <code>jqXHR.done()</code> (for success), <code>jqXHR.fail()</code> (for error), and <code>jqXHR.always()</code> (for completion, whether success or error) methods take a function argument that is called when the request terminates. For information about the arguments this function receives, see the <a href=\"jquery.ajax#jqXHR\">jqXHR Object</a> section of the <code>$.ajax()</code> documentation.</p> <p>The Promise interface in jQuery 1.5 also allows jQuery's Ajax methods, including <code>$.getJSON()</code>, to chain multiple <code>.done()</code>, <code>.always()</code>, and <code>.fail()</code> callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.</p> <pre class=\"syntaxhighlighter javascript\">// Assign handlers immediately after making the request,\n// and remember the jqxhr object for this request\nvar jqxhr = $.getJSON( \"example.json\", function() {\n  console.log( \"success\" );\n})\n  .done(function() {\n    console.log( \"second success\" );\n  })\n  .fail(function() {\n    console.log( \"error\" );\n  })\n  .always(function() {\n    console.log( \"complete\" );\n  });\n \n// Perform other work here ...\n \n// Set another completion function for the request above\njqxhr.complete(function() {\n  console.log( \"second complete\" );\n});</pre> <h4>Deprecation Notice</h4> <p>The <code>jqXHR.success()</code>, <code>jqXHR.error()</code>, and <code>jqXHR.complete()</code> callback methods are <strong>removed as of jQuery 3.0</strong>. You can use <code>jqXHR.done()</code>, <code>jqXHR.fail()</code>, and <code>jqXHR.always()</code> instead.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> Due to browser security restrictions, most \"Ajax\" requests are subject to the <a title=\"Same Origin Policy on Wikipedia\" href=\"http://en.wikipedia.org/wiki/Same_origin_policy\">same origin policy</a>; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. </li> <li> Script and JSONP requests are not subject to the same origin policy restrictions. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Loads the four most recent pictures of Mount Rainier from the Flickr JSONP API.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.getJSON demo&lt;/title&gt;\n  &lt;style&gt;\n  img {\n    height: 100px;\n    float: left;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div id=\"images\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\n(function() {\n  var flickerAPI = \"http://api.flickr.com/services/feeds/photos_public.gne?jsoncallback=?\";\n  $.getJSON( flickerAPI, {\n    tags: \"mount rainier\",\n    tagmode: \"any\",\n    format: \"json\"\n  })\n    .done(function( data ) {\n      $.each( data.items, function( i, item ) {\n        $( \"&lt;img&gt;\" ).attr( \"src\", item.media.m ).appendTo( \"#images\" );\n        if ( i === 3 ) {\n          return false;\n        }\n      });\n    });\n})();\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Load the JSON data from test.js and access a name from the returned JSON data.</p> <pre class=\"syntaxhighlighter javascript\">$.getJSON( \"test.js\", function( json ) {\n  console.log( \"JSON Data: \" + json.users[ 3 ].name );\n });</pre> </div> <div class=\"entry-example\" id=\"example-2\"> <p>Load the JSON data from test.js, passing along additional data, and access a name from the returned JSON data. If an error occurs, log an error message instead.</p> <pre class=\"syntaxhighlighter javascript\">$.getJSON( \"test.js\", { name: \"John\", time: \"2pm\" } )\n  .done(function( json ) {\n    console.log( \"JSON Data: \" + json.users[ 3 ].name );\n  })\n  .fail(function( jqxhr, textStatus, error ) {\n    var err = textStatus + \", \" + error;\n    console.log( \"Request Failed: \" + err );\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.getJSON\" class=\"_attribution-link\">https://api.jquery.com/jQuery.getJSON</a>\n  </p>\n</div>\n","jquery.globaleval":"<h1 class=\"entry-title\">jQuery.globalEval()</h1> <div class=\"entry-content\"> <article id=\"jQuery-globalEval1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.globalEval( code )</span><span class=\"returns\">Returns: </span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Execute some JavaScript code globally.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0.4/\">1.0.4</a></span><a id=\"jQuery-globalEval-code\" href=\"#jQuery-globalEval-code\">jQuery.globalEval( code )</a> </h4> <ul><li> <div><strong>code</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>The JavaScript code to execute.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method behaves differently from using a normal JavaScript <code>eval()</code> in that it's executed within the global context (which is important for loading external scripts dynamically).</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Execute a script in the global context.</p> <pre class=\"syntaxhighlighter javascript\">function test() {\n  jQuery.globalEval( \"var newVar = true;\" )\n}\ntest();\n// newVar === true</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.globalEval\" class=\"_attribution-link\">https://api.jquery.com/jQuery.globalEval</a>\n  </p>\n</div>\n","jquery.getscript":"<h1 class=\"entry-title\">jQuery.getScript()</h1> <div class=\"entry-content\"> <article id=\"jQuery-getScript1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.getScript( url [, success ] )</span><span class=\"returns\">Returns: <a href=\"types#jqXHR\">jqXHR</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Load a JavaScript file from the server using a GET HTTP request, then execute it.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"jQuery-getScript-url-success\" href=\"#jQuery-getScript-url-success\">jQuery.getScript( url [, success ] )</a> </h4> <ul> <li> <div><strong>url</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing the URL to which the request is sent.</div> </li> <li> <div><strong>success</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#String\">String</a> script, <a href=\"types#String\">String</a> textStatus, <a href=\"types#jqXHR\">jqXHR</a> jqXHR )</div> <div>A callback function that is executed if the request succeeds.</div> </li> </ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This is a shorthand Ajax function, which is equivalent to:</p> <pre class=\"syntaxhighlighter javascript\">$.ajax({\n  url: url,\n  dataType: \"script\",\n  success: success\n});</pre> <p>The script is executed in the global context, so it can refer to other variables and use jQuery functions. Included scripts can have some impact on the current page.</p> <h4 id=\"success-callback\"> Success Callback </h4> <p>The callback is fired once the script has been loaded but not necessarily executed.</p> <p>Scripts are included and run by referencing the file name:</p> <pre class=\"syntaxhighlighter javascript\">$.getScript( \"ajax/test.js\", function( data, textStatus, jqxhr ) {\n  console.log( data ); // Data returned\n  console.log( textStatus ); // Success\n  console.log( jqxhr.status ); // 200\n  console.log( \"Load was performed.\" );\n});</pre> <h4 id=\"handling-errors\">Handling Errors</h4> <p>As of jQuery 1.5, you may use <a href=\"deferred.fail\"><code>.fail()</code></a> to account for errors:</p> <pre class=\"syntaxhighlighter javascript\">$.getScript( \"ajax/test.js\" )\n  .done(function( script, textStatus ) {\n    console.log( textStatus );\n  })\n  .fail(function( jqxhr, settings, exception ) {\n    $( \"div.log\" ).text( \"Triggered ajaxError handler.\" );\n});</pre> <p>Prior to jQuery 1.5, the global <code>.ajaxError()</code> callback event had to be used in order to handle <code>$.getScript()</code> errors:</p> <pre class=\"syntaxhighlighter javascript\">$( \"div.log\" ).ajaxError(function( e, jqxhr, settings, exception ) {\n  if ( settings.dataType == \"script\" ) {\n    $( this ).text( \"Triggered ajaxError handler.\" );\n  }\n});</pre> <h4 id=\"caching-requests\">Caching Responses</h4> <p>By default, <code>$.getScript()</code> sets the cache setting to <code>false</code>. This appends a timestamped query parameter to the request URL to ensure that the browser downloads the script each time it is requested. You can override this feature by setting the cache property globally using <a href=\"jquery.ajaxsetup\"><code>$.ajaxSetup()</code></a>: </p> <pre class=\"syntaxhighlighter javascript\">$.ajaxSetup({\n  cache: true\n});</pre> <p>Alternatively, you could define a new method that uses the more flexible <code>$.ajax()</code> method.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Define a $.cachedScript() method that allows fetching a cached script:</p> <pre class=\"syntaxhighlighter javascript\">jQuery.cachedScript = function( url, options ) {\n \n  // Allow user to set any option except for dataType, cache, and url\n  options = $.extend( options || {}, {\n    dataType: \"script\",\n    cache: true,\n    url: url\n  });\n \n  // Use $.ajax() since it is more flexible than $.getScript\n  // Return the jqXHR object so we can chain callbacks\n  return jQuery.ajax( options );\n};\n \n// Usage\n$.cachedScript( \"ajax/test.js\" ).done(function( script, textStatus ) {\n  console.log( textStatus );\n});</pre> </div> <div class=\"entry-example\" id=\"example-1\"> <p>Load the <a href=\"https://github.com/jquery/jquery-color\">official jQuery Color Animation plugin</a> dynamically and bind some color animations to occur once the new functionality is loaded.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.getScript demo&lt;/title&gt;\n  &lt;style&gt;\n  .block {\n     background-color: blue;\n     width: 150px;\n     height: 70px;\n     margin: 10px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button id=\"go\"&gt;&amp;raquo; Run&lt;/button&gt;\n&lt;div class=\"block\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar url = \"https://code.jquery.com/color/jquery.color.js\";\n$.getScript( url, function() {\n  $( \"#go\" ).click(function() {\n    $( \".block\" )\n      .animate({\n        backgroundColor: \"rgb(255, 180, 180)\"\n      }, 1000 )\n      .delay( 500 )\n      .animate({\n        backgroundColor: \"olive\"\n      }, 1000 )\n      .delay( 500 )\n      .animate({\n        backgroundColor: \"#00f\"\n      }, 1000 );\n  });\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.getScript\" class=\"_attribution-link\">https://api.jquery.com/jQuery.getScript</a>\n  </p>\n</div>\n","jquery.grep":"<h1 class=\"entry-title\">jQuery.grep()</h1> <div class=\"entry-content\"> <article id=\"jQuery-grep1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.grep( array, function [, invert ] )</span><span class=\"returns\">Returns: <a href=\"types#Array\">Array</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Finds the elements of an array which satisfy a filter function. The original array is not affected.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"jQuery-grep-array-function-invert\" href=\"#jQuery-grep-array-function-invert\">jQuery.grep( array, function [, invert ] )</a> </h4> <ul> <li> <div><strong>array</strong></div> <div>Type: <a href=\"types#ArrayLikeObject\">ArrayLikeObject</a> </div> <div>The array-like object to search through.</div> </li> <li> <div><strong>function</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Object\">Object</a> elementOfArray, <a href=\"types#Integer\">Integer</a> indexInArray ) =&gt; <a href=\"types#Boolean\">Boolean</a> </div> <div>The function to process each item against. The first argument to the function is the item, and the second argument is the index. The function should return a Boolean value. <code>this</code> will be the global window object.</div> </li> <li> <div><strong>invert</strong></div> <div>Type: <a href=\"types#Boolean\">Boolean</a> </div> <div>If \"invert\" is false, or not provided, then the function returns an array consisting of all elements for which \"callback\" returns true. If \"invert\" is true, then the function returns an array consisting of all elements for which \"callback\" returns false.</div> </li> </ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>$.grep()</code> method removes items from an array as necessary so that all remaining items pass a provided test. The test is a function that is passed an array item and the index of the item within the array. Only if the test returns true will the item be in the result array.</p> <p> The filter function will be passed two arguments: the current array item and its index. The filter function must return 'true' to include the item in the result array.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Filters the original array of numbers leaving that are not 5 and have an index greater than 4. Then it removes all 9s.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.grep demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    color: blue;\n  }\n  p {\n    color: green;\n    margin: 0;\n  }\n  span {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;span&gt;&lt;/span&gt;\n \n&lt;script&gt;\nvar arr = [ 1, 9, 3, 8, 6, 1, 5, 9, 4, 7, 3, 8, 6, 9, 1 ];\n$( \"div\" ).text( arr.join( \", \" ) );\n \narr = jQuery.grep(arr, function( n, i ) {\n  return ( n !== 5 &amp;&amp; i &gt; 4 );\n});\n$( \"p\" ).text( arr.join( \", \" ) );\n \narr = jQuery.grep(arr, function( a ) {\n  return a !== 9;\n});\n \n$( \"span\" ).text( arr.join( \", \" ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Filter an array of numbers to include only numbers bigger then zero.</p> <pre class=\"syntaxhighlighter javascript\">$.grep( [ 0, 1, 2 ], function( n, i ) {\n  return n &gt; 0;\n});</pre> <h4>Result:</h4> <pre class=\"syntaxhighlighter javascript\">[ 1, 2 ]</pre> </div> <div class=\"entry-example\" id=\"example-2\"> <p>Filter an array of numbers to include numbers that are not bigger than zero.</p> <pre class=\"syntaxhighlighter javascript\">$.grep( [ 0, 1, 2 ], function( n, i ) {\n    return n &gt; 0;\n}, true );</pre> <h4>Result:</h4> <pre class=\"syntaxhighlighter javascript\">[ 0 ]</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.grep\" class=\"_attribution-link\">https://api.jquery.com/jQuery.grep</a>\n  </p>\n</div>\n","jquery.holdready":"<h1 class=\"entry-title\">jQuery.holdReady()</h1> <div class=\"entry-content\"> <article id=\"jQuery-holdReady1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.holdReady( hold )</span><span class=\"returns\">Returns: <a href=\"types#undefined\">undefined</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Holds or releases the execution of jQuery's ready event.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.6/\">1.6</a></span><a id=\"jQuery-holdReady-hold\" href=\"#jQuery-holdReady-hold\">jQuery.holdReady( hold )</a> </h4> <ul><li> <div><strong>hold</strong></div> <div>Type: <a href=\"types#Boolean\">Boolean</a> </div> <div>Indicates whether the ready hold is being requested or released</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>$.holdReady()</code> method allows the caller to delay jQuery's ready event. This <em>advanced feature</em> would typically be used by dynamic script loaders that want to load additional JavaScript such as jQuery plugins before allowing the ready event to occur, even though the DOM may be ready. This method must be called early in the document, such as in the <code>&lt;head&gt;</code> immediately after the jQuery script tag. Calling this method after the ready event has already fired will have no effect. </p> <p>To delay the ready event, first call <code>$.holdReady( true )</code>. When the ready event should be released to execute, call <code>$.holdReady( false )</code>. Note that multiple holds can be put on the ready event, one for each <code>$.holdReady( true )</code> call. The ready event will not actually fire until all holds have been released with a corresponding number of <code>$.holdReady( false )</code> calls <em>and</em> the normal document ready conditions are met. (See <a href=\"ready\"><code>ready</code></a> for more information.)</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Delay the ready event until a custom plugin has loaded.</p> <pre class=\"syntaxhighlighter javascript\">$.holdReady( true );\n$.getScript( \"myplugin.js\", function() {\n  $.holdReady( false );\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.holdReady\" class=\"_attribution-link\">https://api.jquery.com/jQuery.holdReady</a>\n  </p>\n</div>\n","jquery.inarray":"<h1 class=\"entry-title\">jQuery.inArray()</h1> <div class=\"entry-content\"> <article id=\"jQuery-inArray1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.inArray( value, array [, fromIndex ] )</span><span class=\"returns\">Returns: <a href=\"types#Number\">Number</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Search for a specified value within an array and return its index (or -1 if not found).</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2/\">1.2</a></span><a id=\"jQuery-inArray-value-array-fromIndex\" href=\"#jQuery-inArray-value-array-fromIndex\">jQuery.inArray( value, array [, fromIndex ] )</a> </h4> <ul> <li> <div><strong>value</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>The value to search for.</div> </li> <li> <div><strong>array</strong></div> <div>Type: <a href=\"types#Array\">Array</a> </div> <div>An array through which to search.</div> </li> <li> <div><strong>fromIndex</strong></div> <div>Type: <a href=\"types#Number\">Number</a> </div> <div>The index of the array at which to begin the search. The default is 0, which will search the whole array.</div> </li> </ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>$.inArray()</code> method is similar to JavaScript's native <code>.indexOf()</code> method in that it returns -1 when it doesn't find a match. If the first element within the array matches <code>value</code>, <code>$.inArray()</code> returns 0.</p> <p>Because JavaScript treats 0 as loosely equal to false (i.e. 0 == false, but 0 !== false), to check for the presence of <code>value</code> within <code>array</code>, you need to check if it's not equal to (or greater than) -1.</p> <p>The comparison between values is strict. The following will return <code>-1</code> (not found) because a number is being searched in an array of strings:</p> <pre class=\"syntaxhighlighter javascript\">$.inArray( 5 + 5, [ \"8\", \"9\", \"10\", 10 + \"\" ] );</pre> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Report the index of some elements in the array.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.inArray demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    color: blue;\n  }\n  span {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;\"John\" found at &lt;span&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;4 found at &lt;span&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;\"Karl\" not found, so &lt;span&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;\"Pete\" is in the array, but not at or after index 2, so &lt;span&gt;&lt;/span&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar arr = [ 4, \"Pete\", 8, \"John\" ];\nvar $spans = $( \"span\" );\n$spans.eq( 0 ).text( jQuery.inArray( \"John\", arr ) );\n$spans.eq( 1 ).text( jQuery.inArray( 4, arr ) );\n$spans.eq( 2 ).text( jQuery.inArray( \"Karl\", arr ) );\n$spans.eq( 3 ).text( jQuery.inArray( \"Pete\", arr, 2 ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.inArray\" class=\"_attribution-link\">https://api.jquery.com/jQuery.inArray</a>\n  </p>\n</div>\n","jquery.isarray":"<h1 class=\"entry-title\">jQuery.isArray()</h1> <div class=\"entry-content\"> <article id=\"jQuery-isArray1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.isArray( obj )</span><span class=\"returns\">Returns: <a href=\"types#boolean\">boolean</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Determine whether the argument is an array.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.3/\">1.3</a></span><a id=\"jQuery-isArray-obj\" href=\"#jQuery-isArray-obj\">jQuery.isArray( obj )</a> </h4> <ul><li> <div><strong>obj</strong></div> <div>Type: <a href=\"types#Object\">Object</a> </div> <div>Object to test whether or not it is an array.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p><code>$.isArray()</code> returns a Boolean indicating whether the object is a JavaScript array (not an array-like object, such as a jQuery object).</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds out if the parameter is an array.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.isArray demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \nIs [] an Array? &lt;b&gt;&lt;/b&gt;\n \n&lt;script&gt;\n$( \"b\" ).append( \"\" + $.isArray([]) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.isArray\" class=\"_attribution-link\">https://api.jquery.com/jQuery.isArray</a>\n  </p>\n</div>\n","jquery.htmlprefilter":"<h1 class=\"entry-title\">jQuery.htmlPrefilter()</h1> <div class=\"entry-content\"> <article id=\"jQuery-htmlPrefilter1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.htmlPrefilter( html )</span><span class=\"returns\">Returns: <a href=\"types#String\">String</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Modify and filter HTML strings passed through <a href=\"https://api.jquery.com/category/manipulation/\">jQuery manipulation methods</a>.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.12/2.2/\">1.12/2.2</a></span><a id=\"jQuery-htmlPrefilter-html\" href=\"#jQuery-htmlPrefilter-html\">jQuery.htmlPrefilter( html )</a> </h4> <ul><li> <div><strong>html</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>The HTML string on which to operate.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method rarely needs to be called directly. Instead, use it as an entry point to modify existing <a href=\"https://api.jquery.com/category/manipulation/\">jQuery manipulation methods</a>. For instance, to remove all <code>&lt;del&gt;</code> tags from incoming HTML strings, do this:</p> <pre class=\"syntaxhighlighter javascript\">var htmlPrefilter = $.htmlPrefilter,\n  rdel = /&lt;(del)(?=[\\s&gt;])[\\w\\W]*?&lt;\\/\\1\\s*&gt;/gi;\n \n$.htmlPrefilter = function( html ) {\n  return htmlPrefilter.call( this, html ).replace( rdel, \"\" );\n};</pre> <p>This function can also be overwritten in order to bypass certain edge case issues. The default <code>htmlPrefilter</code> function in jQuery will greedily ensure that all tags are XHTML-compliant. This includes anything that looks like an HTML tag, but is actually within a string (e.g. </p>\n<pre>&lt;a title=\"&lt;div /&gt;\"&gt;&lt;&gt;</pre>). The <code>jQuery.htmlPrefilter()</code> function can be used to bypass this: <pre class=\"syntaxhighlighter javascript\">$.htmlPrefilter = function( html ) {\n  // Return HTML strings unchanged\n  return html;\n};</pre> <p>However, while the above fix is short and simple, it puts the burden on you to ensure XHTML-compliant tags in any HTML strings. A more thorough fix for this issue would be this:</p> <pre class=\"syntaxhighlighter javascript\">var panything = \"[\\\\w\\\\W]*?\",\n \n  // Whitespace\n  // https://html.spec.whatwg.org/multipage/infrastructure.html#space-character\n  pspace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n \n  // End of tag name (whitespace or greater-than)\n  pnameEnd = pspace.replace( \"]\", \"&gt;]\" ),\n \n  // Tag name (a leading letter, then almost anything)\n  // https://html.spec.whatwg.org/multipage/syntax.html#tag-open-state\n  // https://html.spec.whatwg.org/multipage/syntax.html#tag-name-state\n  pname = \"[a-z]\" + pnameEnd.replace( \"[\", \"[^/\\\\0\" ) + \"*\",\n \n  // Void element (end tag prohibited)\n  // https://html.spec.whatwg.org/multipage/syntax.html#void-elements\n  pvoidName = \"(?:area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|\" +\n    \"source|track|wbr)(?=\" + pnameEnd + \")\",\n \n  // Attributes (double-quoted value, single-quoted value, unquoted value, or no value)\n  // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n  pattrs = \"(?:\" + pspace + \"+[^\\\\0-\\\\x20\\\\x7f-\\\\x9f=\\\"'/&gt;]+(?:\" + pspace + \"*=\" + pspace +\n    \"*(?:\\\"\" + panything + \"\\\"|'\" + panything + \"'|\" +\n    pnameEnd.replace( \"[\", \"[^\" ) + \"*(?!/)\" +\n    \")|))*\" + pspace + \"*\",\n \n  // Trailing content of a close tag\n  pcloseTail = \"(?:\" + pspace + panything + \"|)\",\n \n  rspecialHtml = new RegExp(\n    // Non-void element that self-closes: $1–$5\n    \"(&lt;)(?!\" + pvoidName + \")(\" + pname + \")(\" + pattrs + \")(\\\\/)(&gt;)|\" +\n      // No-innerHTML container (element, comment, or CDATA): $6\n      \"(&lt;(script|style|textarea)\" + pattrs + \"&gt;\" + panything + \"&lt;\\\\/\\\\7\" + pcloseTail + \"&gt;|\" +\n      \"&lt;!--\" + panything + \"--)\",\n    \"gi\"\n  ),\n \n  // \"&lt;\"; element name; attributes; \"&gt;\"; \"&lt;\"; \"/\"; element name; \"&gt;\"; no-innerHTML container\n  pspecialReplacement = \"$1$2$3$5$1$4$2$5$6\";\n \n$.htmlPrefilter = function( html ) {\n  return ( html + \"\" ).replace( rspecialHtml, pspecialReplacement );\n};</pre> </div> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.htmlPrefilter\" class=\"_attribution-link\">https://api.jquery.com/jQuery.htmlPrefilter</a>\n  </p>\n</div>\n","jquery.hasdata":"<h1 class=\"entry-title\">jQuery.hasData()</h1> <div class=\"entry-content\"> <article id=\"jQuery-hasData1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.hasData( element )</span><span class=\"returns\">Returns: <a href=\"types#Boolean\">Boolean</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Determine whether an element has any jQuery data associated with it.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.5/\">1.5</a></span><a id=\"jQuery-hasData-element\" href=\"#jQuery-hasData-element\">jQuery.hasData( element )</a> </h4> <ul><li> <div><strong>element</strong></div> <div>Type: <a href=\"types#Element\">Element</a> </div> <div>A DOM element to be checked for data.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>jQuery.hasData()</code> method provides a way to determine if an element currently has any values that were set using <code><a href=\"jquery.data\">jQuery.data()</a></code>. If there is no data object associated with an element, the method returns <code>false</code>; otherwise it returns <code>true</code>.</p> <p>The primary advantage of <code>jQuery.hasData(element)</code> is that it does not create and associate a data object with the element if none currently exists. In contrast, <code>jQuery.data(element)</code> always returns a data object to the caller, creating one if no data object previously existed. </p> <p>Note that jQuery's event system uses the jQuery data API to store event handlers. Therefore, binding an event to an element using <code>.on()</code>, <code>.bind()</code>, <code>.live()</code>, <code>.delegate()</code>, or one of the shorthand event methods also associates a data object with that element. </p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Set data on an element and see the results of hasData.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.hasData demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Results: &lt;/p&gt;\n \n&lt;script&gt;\nvar $p = jQuery( \"p\" ), p = $p[ 0 ];\n$p.append( jQuery.hasData( p ) + \" \" ); // false\n \n$.data( p, \"testing\", 123 );\n$p.append( jQuery.hasData( p ) + \" \" ); // true\n \n$.removeData( p, \"testing\" );\n$p.append( jQuery.hasData( p ) + \" \" ); // false\n \n$p.on( \"click\", function() {} );\n$p.append( jQuery.hasData( p ) + \" \" ); // true\n \n$p.off( \"click\" );\n$p.append( jQuery.hasData( p ) + \" \" ); // false\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.hasData\" class=\"_attribution-link\">https://api.jquery.com/jQuery.hasData</a>\n  </p>\n</div>\n","jquery.isfunction":"<h1 class=\"entry-title\">jQuery.isFunction()</h1> <div class=\"entry-content\"> <article id=\"jQuery-isFunction1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.isFunction( obj )</span><span class=\"returns\">Returns: <a href=\"types#boolean\">boolean</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Determine if the argument passed is a JavaScript function object. </p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2/\">1.2</a></span><a id=\"jQuery-isFunction-obj\" href=\"#jQuery-isFunction-obj\">jQuery.isFunction( obj )</a> </h4> <ul><li> <div><strong>obj</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>Object to test whether or not it is a function.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p><strong>Note:</strong> As of jQuery 1.3, functions provided by the browser like <code>alert()</code> and DOM element methods like <code>getAttribute()</code> are not guaranteed to be detected as functions in browsers such as Internet Explorer.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Test a few parameter examples.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.isFunction demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    color: blue;\n    margin: 2px;\n    font-size: 14px;\n  }\n  span {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;jQuery.isFunction( objs[ 0 ] ) = &lt;span&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;jQuery.isFunction( objs[ 1 ] ) = &lt;span&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;jQuery.isFunction( objs[ 2 ] ) = &lt;span&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;jQuery.isFunction( objs[ 3 ] ) = &lt;span&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;jQuery.isFunction( objs[ 4 ] ) = &lt;span&gt;&lt;/span&gt;&lt;/div&gt;\n \n&lt;script&gt;\nfunction stub() {}\nvar objs = [\n  function() {},\n  { x:15, y:20 },\n  null,\n  stub,\n  \"function\"\n];\n \njQuery.each( objs, function( i ) {\n  var isFunc = jQuery.isFunction( objs[ i ]);\n  $( \"span\" ).eq( i ).text( isFunc );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Finds out if the parameter is a function.</p> <pre class=\"syntaxhighlighter javascript\">$.isFunction(function() {});</pre> <h4>Result:</h4> <pre class=\"syntaxhighlighter javascript\">true</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.isFunction\" class=\"_attribution-link\">https://api.jquery.com/jQuery.isFunction</a>\n  </p>\n</div>\n","jquery.isplainobject":"<h1 class=\"entry-title\">jQuery.isPlainObject()</h1> <div class=\"entry-content\"> <article id=\"jQuery-isPlainObject1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.isPlainObject( object )</span><span class=\"returns\">Returns: <a href=\"types#Boolean\">Boolean</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Check to see if an object is a plain object (created using \"{}\" or \"new Object\").</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"jQuery-isPlainObject-object\" href=\"#jQuery-isPlainObject-object\">jQuery.isPlainObject( object )</a> </h4> <ul><li> <div><strong>object</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>The object that will be checked to see if it's a plain object.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p><strong>Note:</strong> Host objects (or objects used by browser host environments to complete the execution environment of ECMAScript) have a number of inconsistencies which are difficult to robustly feature detect cross-platform. As a result of this, <code>$.isPlainObject()</code> may evaluate inconsistently across browsers in certain instances.</p> <p>An example of this is a test against <code>document.location</code> using <code>$.isPlainObject()</code> as follows:</p> <pre class=\"syntaxhighlighter javascript\">console.log( $.isPlainObject( document.location ) );</pre> <p>which throws an invalid pointer exception in IE8. With this in mind, it's important to be aware of any of the gotchas involved in using <code>$.isPlainObject()</code> against older browsers. A couple basic examples that do function correctly cross-browser can be found below.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Check an object to see if it's a plain object.</p> <pre class=\"syntaxhighlighter javascript\">jQuery.isPlainObject({}) // true\njQuery.isPlainObject( \"test\" ) // false</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.isPlainObject\" class=\"_attribution-link\">https://api.jquery.com/jQuery.isPlainObject</a>\n  </p>\n</div>\n","jquery.isnumeric":"<h1 class=\"entry-title\">jQuery.isNumeric()</h1> <div class=\"entry-content\"> <article id=\"jQuery-isNumeric1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.isNumeric( value )</span><span class=\"returns\">Returns: <a href=\"types#Boolean\">Boolean</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Determines whether its argument represents a JavaScript number.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a></span><a id=\"jQuery-isNumeric-value\" href=\"#jQuery-isNumeric-value\">jQuery.isNumeric( value )</a> </h4> <ul><li> <div><strong>value</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>The value to be tested.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>$.isNumeric()</code> method checks whether its argument represents a numeric value. If so, it returns <code>true</code>. Otherwise it returns <code>false</code>. The argument can be of any type.</p> <p>As of jQuery 3.0 <code>$.isNumeric()</code> returns <code>true</code> only if the argument is of type <a href=\"types#Number\"><code>number</code></a>, or if it's of type <code>string</code> and it can be coerced into finite numbers. In all other cases, it returns <code>false</code>.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Sample return values of $.isNumeric with various inputs.</p> <pre class=\"syntaxhighlighter javascript\">// true (numeric)\n$.isNumeric( \"-10\" )\n$.isNumeric( \"0\" )\n$.isNumeric( 0xFF )\n$.isNumeric( \"0xFF\" )\n$.isNumeric( \"8e5\" )\n$.isNumeric( \"3.1415\" )\n$.isNumeric( +10 )\n$.isNumeric( 0144 )\n \n// false (non-numeric)\n$.isNumeric( \"-0x42\" )\n$.isNumeric( \"7.2acdgs\" )\n$.isNumeric( \"\" )\n$.isNumeric( {} )\n$.isNumeric( NaN )\n$.isNumeric( null )\n$.isNumeric( true )\n$.isNumeric( Infinity )\n$.isNumeric( undefined )</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.isNumeric\" class=\"_attribution-link\">https://api.jquery.com/jQuery.isNumeric</a>\n  </p>\n</div>\n","jquery.parsexml":"<h1 class=\"entry-title\">jQuery.parseXML()</h1> <div class=\"entry-content\"> <article id=\"jQuery-parseXML1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.parseXML( data )</span><span class=\"returns\">Returns: <a href=\"types#XMLDocument\">XMLDocument</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Parses a string into an XML document.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.5/\">1.5</a></span><a id=\"jQuery-parseXML-data\" href=\"#jQuery-parseXML-data\">jQuery.parseXML( data )</a> </h4> <ul><li> <div><strong>data</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>a well-formed XML string to be parsed</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p><code>jQuery.parseXML</code> uses the native parsing function of the browser to create a valid XML Document. This document can then be passed to <code>jQuery</code> to create a typical jQuery object that can be traversed and manipulated.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Create a jQuery object using an XML string and obtain the value of the title node.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.parseXML demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p id=\"someElement\"&gt;&lt;/p&gt;\n&lt;p id=\"anotherElement\"&gt;&lt;/p&gt;\n \n&lt;script&gt;\nvar xml = \"&lt;rss version='2.0'&gt;&lt;channel&gt;&lt;title&gt;RSS Title&lt;/title&gt;&lt;/channel&gt;&lt;/rss&gt;\",\n  xmlDoc = $.parseXML( xml ),\n  $xml = $( xmlDoc ),\n  $title = $xml.find( \"title\" );\n \n// Append \"RSS Title\" to #someElement\n$( \"#someElement\" ).append( $title.text() );\n \n// Change the title to \"XML Title\"\n$title.text( \"XML Title\" );\n \n// Append \"XML Title\" to #anotherElement\n$( \"#anotherElement\" ).append( $title.text() );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.parseXML\" class=\"_attribution-link\">https://api.jquery.com/jQuery.parseXML</a>\n  </p>\n</div>\n","jquery.iswindow":"<h1 class=\"entry-title\">jQuery.isWindow()</h1> <div class=\"entry-content\"> <article id=\"jQuery-isWindow1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.isWindow( obj )</span><span class=\"returns\">Returns: <a href=\"types#boolean\">boolean</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Determine whether the argument is a window.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"jQuery-isWindow-obj\" href=\"#jQuery-isWindow-obj\">jQuery.isWindow( obj )</a> </h4> <ul><li> <div><strong>obj</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>Object to test whether or not it is a window.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This is used in a number of places in jQuery to determine if we're operating against a browser window (such as the current window or an iframe).</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds out if the parameter is a window.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.isWindow demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \nIs 'window' a window? &lt;b&gt;&lt;/b&gt;\n \n&lt;script&gt;\n$( \"b\" ).append( \"\" + $.isWindow( window ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.isWindow\" class=\"_attribution-link\">https://api.jquery.com/jQuery.isWindow</a>\n  </p>\n</div>\n","jquery.isxmldoc":"<h1 class=\"entry-title\">jQuery.isXMLDoc()</h1> <div class=\"entry-content\"> <article id=\"jQuery-isXMLDoc1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.isXMLDoc( node )</span><span class=\"returns\">Returns: <a href=\"types#Boolean\">Boolean</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Check to see if a DOM node is within an XML document (or is an XML document).</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.1.4/\">1.1.4</a></span><a id=\"jQuery-isXMLDoc-node\" href=\"#jQuery-isXMLDoc-node\">jQuery.isXMLDoc( node )</a> </h4> <ul><li> <div><strong>node</strong></div> <div>Type: <a href=\"types#Element\">Element</a> </div> <div>The DOM node that will be checked to see if it's in an XML document.</div> </li></ul> </li></ul> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Check an object to see if it's in an XML document.</p> <pre class=\"syntaxhighlighter javascript\">jQuery.isXMLDoc( document ) // false\njQuery.isXMLDoc( document.body ) // false</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.isXMLDoc\" class=\"_attribution-link\">https://api.jquery.com/jQuery.isXMLDoc</a>\n  </p>\n</div>\n","jquery.merge":"<h1 class=\"entry-title\">jQuery.merge()</h1> <div class=\"entry-content\"> <article id=\"jQuery-merge1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.merge( first, second )</span><span class=\"returns\">Returns: <a href=\"types#Array\">Array</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Merge the contents of two arrays together into the first array. </p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"jQuery-merge-first-second\" href=\"#jQuery-merge-first-second\">jQuery.merge( first, second )</a> </h4> <ul> <li> <div><strong>first</strong></div> <div>Type: <a href=\"types#ArrayLikeObject\">ArrayLikeObject</a> </div> <div>The first array-like object to merge, the elements of second added.</div> </li> <li> <div><strong>second</strong></div> <div>Type: <a href=\"types#ArrayLikeObject\">ArrayLikeObject</a> </div> <div>The second array-like object to merge into the first, unaltered.</div> </li> </ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>$.merge()</code> operation forms an array that contains all elements from the two arrays. The orders of items in the arrays are preserved, with items from the second array appended. The <code>$.merge()</code> function is destructive. It alters the <code>length</code> and numeric index properties of the first object to include items from the second.</p> <p>If you need the original first array, make a copy of it before calling <code>$.merge()</code>. Fortunately, <code>$.merge()</code> itself can be used for this duplication:</p> <pre class=\"syntaxhighlighter javascript\">var newArray = $.merge([], oldArray);</pre> <p>This shortcut creates a new, empty array and merges the contents of oldArray into it, effectively cloning the array.</p> <p>Prior to jQuery 1.4, the arguments should be true Javascript Array objects; use <code>$.makeArray</code> if they are not.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Merges two arrays, altering the first argument.</p> <pre class=\"syntaxhighlighter javascript\">$.merge( [ 0, 1, 2 ], [ 2, 3, 4 ] )</pre> <h4>Result:</h4> <pre class=\"syntaxhighlighter javascript\">[ 0, 1, 2, 2, 3, 4 ]</pre> </div> <div class=\"entry-example\" id=\"example-1\"> <p>Merges two arrays, altering the first argument.</p> <pre class=\"syntaxhighlighter javascript\">$.merge( [ 3, 2, 1 ], [ 4, 3, 2 ] )</pre> <h4>Result:</h4> <pre class=\"syntaxhighlighter javascript\">[ 3, 2, 1, 4, 3, 2 ]</pre> </div> <div class=\"entry-example\" id=\"example-2\"> <p>Merges two arrays, but uses a copy, so the original isn't altered.</p> <pre class=\"syntaxhighlighter javascript\">var first = [ \"a\", \"b\", \"c\" ];\nvar second = [ \"d\", \"e\", \"f\" ];\n$.merge( $.merge( [], first ), second );</pre> <h4>Result:</h4> <pre class=\"syntaxhighlighter javascript\">[ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\" ]</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.merge\" class=\"_attribution-link\">https://api.jquery.com/jQuery.merge</a>\n  </p>\n</div>\n","jquery.makearray":"<h1 class=\"entry-title\">jQuery.makeArray()</h1> <div class=\"entry-content\"> <article id=\"jQuery-makeArray1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.makeArray( obj )</span><span class=\"returns\">Returns: <a href=\"types#Array\">Array</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Convert an array-like object into a true JavaScript array.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2/\">1.2</a></span><a id=\"jQuery-makeArray-obj\" href=\"#jQuery-makeArray-obj\">jQuery.makeArray( obj )</a> </h4> <ul><li> <div><strong>obj</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>Any object to turn into a native Array.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Many methods, both in jQuery and in JavaScript in general, return objects that are array-like. For example, the jQuery factory function <code>$()</code> returns a jQuery object that has many of the properties of an array (a length, the <code>[]</code> array access operator, etc.), but is not exactly the same as an array and lacks some of an array's built-in methods (such as <code>.pop()</code> and <code>.reverse()</code>).</p> <p>Note that after the conversion, any special features the object had (such as the jQuery methods in our example) will no longer be present. The object is now a plain array.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Turn a collection of HTMLElements into an Array of them.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.makeArray demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;First&lt;/div&gt;\n&lt;div&gt;Second&lt;/div&gt;\n&lt;div&gt;Third&lt;/div&gt;\n&lt;div&gt;Fourth&lt;/div&gt;\n \n&lt;script&gt;\n// Returns a NodeList\nvar elems = document.getElementsByTagName( \"div\" );\n// Convert the NodeList to an Array\nvar arr = jQuery.makeArray( elems );\n// Use an Array method on list of dom elements\narr.reverse();\n$( arr ).appendTo( document.body );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Turn a jQuery object into an array</p> <pre class=\"syntaxhighlighter javascript\">var obj = $( \"li\" );\nvar arr = $.makeArray( obj );</pre> <h4>Result:</h4> <pre class=\"syntaxhighlighter javascript\">( typeof obj === \"object\" &amp;&amp; obj.jquery ) === true;\njQuery.isArray( arr ) === true;</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.makeArray\" class=\"_attribution-link\">https://api.jquery.com/jQuery.makeArray</a>\n  </p>\n</div>\n","jquery.map":"<h1 class=\"entry-title\">jQuery.map()</h1> <div class=\"entry-content\"> <article id=\"jQuery-map1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.map( array, callback )</span><span class=\"returns\">Returns: <a href=\"types#Array\">Array</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Translate all items in an array or object to new array of items.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"jQuery-map-array-callback\" href=\"#jQuery-map-array-callback\">jQuery.map( array, callback )</a> </h4> <ul> <li> <div><strong>array</strong></div> <div>Type: <a href=\"types#Array\">Array</a> </div> <div>The Array to translate.</div> </li> <li> <div><strong>callback</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Object\">Object</a> elementOfArray, <a href=\"types#Integer\">Integer</a> indexInArray ) =&gt; <a href=\"types#Object\">Object</a> </div> <div>The function to process each item against. The first argument to the function is the array item, the second argument is the index in array The function can return any value. A returned array will be flattened into the resulting array. Within the function, <code>this</code> refers to the global (window) object.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.6/\">1.6</a></span><a id=\"jQuery-map-object-callback\" href=\"#jQuery-map-object-callback\">jQuery.map( object, callback )</a> </h4> <ul> <li> <div><strong>object</strong></div> <div>Type: <a href=\"types#Object\">Object</a> </div> <div>The Object to translate.</div> </li> <li> <div><strong>callback</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Object\">Object</a> propertyOfObject, <a href=\"types#String\">String</a> key ) =&gt; <a href=\"types#Object\">Object</a> </div> <div>The function to process each item against. The first argument to the function is the value; the second argument is the key of the object property. The function can return any value to add to the array. A returned array will be flattened into the resulting array. Within the function, <code>this</code> refers to the global (window) object. </div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>If you wish to process a jQuery object — for example, <code>$('div').map( callback );</code> — use <a href=\"map\">.map()</a> instead. </p> <p>The <code>$.map()</code> method applies a function to each item in an array or object and maps the results into a new array. <strong>Prior to jQuery 1.6</strong>, <code>$.map()</code> supports traversing <em>arrays only</em>. <strong>As of jQuery 1.6</strong> it also traverses objects.</p> <p>Array-like objects — those with a <code>.length</code> property <em>and</em> a value on the <code>.length - 1</code> index — must be converted to actual arrays before being passed to <code>$.map()</code>. The jQuery library provides <a href=\"jquery.makearray\">$.makeArray()</a> for such conversions.</p> <pre class=\"syntaxhighlighter javascript\">// The following object masquerades as an array.\nvar fakeArray = { \"length\": 2, 0: \"Addy\", 1: \"Subtracty\" };\n \n// Therefore, convert it to a real array\nvar realArray = $.makeArray( fakeArray )\n \n// Now it can be used reliably with $.map()\n$.map( realArray, function( val, i ) {\n  // Do something\n});</pre> <p>The translation function that is provided to this method is called for each top-level element in the array or object and is passed two arguments: The element's value and its index or key within the array or object.</p> <p>The function can return:</p> <ul> <li>the translated value, which will be mapped to the resulting array</li> <li> <code>null</code> or <code>undefined</code>, to remove the item</li> <li>an array of values, which will be flattened into the full array</li> </ul> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Use $.map() to change the values of an array.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.map demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    color: blue;\n  }\n  p {\n    color: green;\n    margin: 0;\n  }\n  span {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n&lt;span&gt;&lt;/span&gt;\n \n&lt;script&gt;\nvar arr = [ \"a\", \"b\", \"c\", \"d\", \"e\" ];\n$( \"div\" ).text( arr.join( \", \" ) );\n \narr = jQuery.map( arr, function( n, i ) {\n  return ( n.toUpperCase() + i );\n});\n$( \"p\" ).text( arr.join( \", \" ) );\n \narr = jQuery.map( arr, function( a ) {\n  return a + a;\n});\n$( \"span\" ).text( arr.join( \", \" ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Map the original array to a new one and add 4 to each value.</p> <pre class=\"syntaxhighlighter javascript\">$.map( [ 0, 1, 2 ], function( n ) {\n  return n + 4;\n});</pre> <h4>Result:</h4> <pre class=\"syntaxhighlighter javascript\">[4, 5, 6]</pre> </div> <div class=\"entry-example\" id=\"example-2\"> <p>Map the original array to a new one, adding 1 to each value if it is bigger then zero and removing it if not.</p> <pre class=\"syntaxhighlighter javascript\">$.map( [ 0, 1, 2 ], function( n ) {\n  return n &gt; 0 ? n + 1 : null;\n});</pre> <h4>Result:</h4> <pre class=\"syntaxhighlighter javascript\">[ 2, 3 ]</pre> </div> <div class=\"entry-example\" id=\"example-3\"> <p>Map the original array to a new one; each element is added with its original value and the value plus one.</p> <pre class=\"syntaxhighlighter javascript\">$.map( [ 0, 1, 2 ], function( n ) {\n    return [ n, n + 1 ];\n});</pre> <h4>Result:</h4> <pre class=\"syntaxhighlighter javascript\">[ 0, 1, 1, 2, 2, 3 ]</pre> </div> <div class=\"entry-example\" id=\"example-4\"> <p>Map the original object to a new array and double each value.</p> <pre class=\"syntaxhighlighter javascript\">var dimensions = { width: 10, height: 15, length: 20 };\ndimensions = $.map( dimensions, function( value, index ) {\n  return value * 2;\n});</pre> <h4>Result:</h4> <pre class=\"syntaxhighlighter javascript\">[ 20, 30, 40 ]</pre> </div> <div class=\"entry-example\" id=\"example-5\"> <p>Map an object's keys to an array.</p> <pre class=\"syntaxhighlighter javascript\">var dimensions = { width: 10, height: 15, length: 20 };\nvar keys = $.map( dimensions, function( value, key ) {\n  return key;\n});</pre> <h4>Result:</h4> <pre class=\"syntaxhighlighter javascript\">[ \"width\", \"height\", \"length\" ]</pre> </div> <div class=\"entry-example\" id=\"example-6\"> <p>Map the original array to a new one; each element is squared.</p> <pre class=\"syntaxhighlighter javascript\">$.map( [ 0, 1, 2, 3 ], function( a ) {\n  return a * a;\n});</pre> <h4>Result:</h4> <pre class=\"syntaxhighlighter javascript\">[ 0, 1, 4, 9 ]</pre> </div> <div class=\"entry-example\" id=\"example-7\"> <p>Map the original array to a new one, removing numbers less than 50 by returning <code>null</code> and subtracting 45 from the rest.</p> <pre class=\"syntaxhighlighter javascript\">$.map( [ 0, 1, 52, 97 ], function( a ) {\n  return (a &gt; 50 ? a - 45 : null);\n});</pre> <h4>Result:</h4> <pre class=\"syntaxhighlighter javascript\">[ 7, 52 ]</pre> </div> <div class=\"entry-example\" id=\"example-8\"> <p>Augment the resulting array by returning an array inside the function.</p> <pre class=\"syntaxhighlighter javascript\">var array = [ 0, 1, 52, 97 ];\narray = $.map( array, function( a, index ) {\n  return [ a - 45, index ];\n});</pre> <h4>Result:</h4> <pre class=\"syntaxhighlighter javascript\">[ -45, 0, -44, 1, 7, 2, 52, 3]</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.map\" class=\"_attribution-link\">https://api.jquery.com/jQuery.map</a>\n  </p>\n</div>\n","jquery.noconflict":"<h1 class=\"entry-title\">jQuery.noConflict()</h1> <div class=\"entry-content\"> <article id=\"jQuery-noConflict1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.noConflict( [removeAll ] )</span><span class=\"returns\">Returns: <a href=\"types#Object\">Object</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Relinquish jQuery's control of the <code>$</code> variable.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"jQuery-noConflict-removeAll\" href=\"#jQuery-noConflict-removeAll\">jQuery.noConflict( [removeAll ] )</a> </h4> <ul><li> <div><strong>removeAll</strong></div> <div>Type: <a href=\"types#Boolean\">Boolean</a> </div> <div>A Boolean indicating whether to remove all jQuery variables from the global scope (including jQuery itself).</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Many JavaScript libraries use <code>$</code> as a function or variable name, just as jQuery does. In jQuery's case, <code>$</code> is just an alias for <code>jQuery</code>, so all functionality is available without using <code>$</code>. If you need to use another JavaScript library alongside jQuery, return control of <code>$</code> back to the other library with a call to <code>$.noConflict()</code>. Old references of <code>$</code> are saved during jQuery initialization; <code>noConflict()</code> simply restores them.</p> <p>If for some reason two versions of jQuery are loaded (which is not recommended), calling <code>$.noConflict( true )</code> from the second version will return the globally scoped jQuery variables to those of the first version.</p> <pre class=\"syntaxhighlighter xml\">&lt;script src=\"other_lib.js\"&gt;&lt;/script&gt;\n&lt;script src=\"jquery.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n$.noConflict();\n// Code that uses other library's $ can follow here.\n&lt;/script&gt;</pre> <p>This technique is especially effective in conjunction with the <code>.ready()</code> method's ability to alias the jQuery object, as within callback passed to <code>.ready()</code> you can use <code>$</code> if you wish without fear of conflicts later:</p> <pre class=\"syntaxhighlighter xml\">&lt;script src=\"other_lib.js\"&gt;&lt;/script&gt;\n&lt;script src=\"jquery.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n$.noConflict();\njQuery( document ).ready(function( $ ) {\n  // Code that uses jQuery's $ can follow here.\n});\n// Code that uses other library's $ can follow here.\n&lt;/script&gt;</pre> <p>If necessary, you can free up the <code>jQuery</code> name as well by passing <code>true</code> as an argument to the method. This is rarely necessary, and if you must do this (for example, if you need to use multiple versions of the jQuery library on the same page), you need to consider that most plug-ins rely on the presence of the <code>jQuery</code> variable and may not operate correctly in this situation.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Map the original object that was referenced by $ back to $.</p> <pre class=\"syntaxhighlighter javascript\">jQuery.noConflict();\n// Do something with jQuery\njQuery( \"div p\" ).hide();\n// Do something with another library's $()\n$( \"content\" ).style.display = \"none\";</pre> </div> <div class=\"entry-example\" id=\"example-1\"> <p>Revert the $ alias and then create and execute a function to provide the $ as a jQuery alias inside the function's scope. Inside the function the original $ object is not available. This works well for most plugins that don't rely on any other library. </p> <pre class=\"syntaxhighlighter javascript\">jQuery.noConflict();\n(function( $ ) {\n  $(function() {\n    // More code using $ as alias to jQuery\n  });\n})(jQuery);\n \n// Other code using $ as an alias to the other library</pre> </div> <div class=\"entry-example\" id=\"example-2\"> <p>Create a different alias instead of jQuery to use in the rest of the script.</p> <pre class=\"syntaxhighlighter javascript\">var j = jQuery.noConflict();\n \n// Do something with jQuery\nj( \"div p\" ).hide();\n \n// Do something with another library's $()\n$( \"content\" ).style.display = \"none\";</pre> </div> <div class=\"entry-example\" id=\"example-3\"> <p>Completely move jQuery to a new namespace in another object.</p> <pre class=\"syntaxhighlighter javascript\">var dom = {};\ndom.query = jQuery.noConflict( true );</pre> <h4>Result:</h4> <pre class=\"syntaxhighlighter javascript\">// Do something with the new jQuery\ndom.query( \"div p\" ).hide();\n \n// Do something with another library's $()\n$( \"content\" ).style.display = \"none\";\n \n// Do something with another version of jQuery\njQuery( \"div &gt; p\" ).hide();</pre> </div> <div class=\"entry-example\" id=\"example-4\"> <p>Load two versions of jQuery (not recommended). Then, restore jQuery's globally scoped variables to the first loaded jQuery.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.noConflict demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div id=\"log\"&gt;\n  &lt;h3&gt;Before $.noConflict(true)&lt;/h3&gt;\n&lt;/div&gt;\n&lt;script src=\"https://code.jquery.com/jquery-1.6.2.js\"&gt;&lt;/script&gt;\n \n&lt;script&gt;\nvar $log = $( \"#log\" );\n \n$log.append( \"2nd loaded jQuery version ($): \" + $.fn.jquery + \"&lt;br&gt;\" );\n \n// Restore globally scoped jQuery variables to the first version loaded\n// (the newer version)\n \njq162 = jQuery.noConflict( true );\n \n$log.append( \"&lt;h3&gt;After $.noConflict(true)&lt;/h3&gt;\" );\n$log.append( \"1st loaded jQuery version ($): \" + $.fn.jquery + \"&lt;br&gt;\" );\n$log.append( \"2nd loaded jQuery version (jq162): \" + jq162.fn.jquery + \"&lt;br&gt;\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.noConflict\" class=\"_attribution-link\">https://api.jquery.com/jQuery.noConflict</a>\n  </p>\n</div>\n","jquery.now":"<h1 class=\"entry-title\">jQuery.now()</h1> <div class=\"entry-content\"> <article id=\"jQuery-now1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.now()</span><span class=\"returns\">Returns: <a href=\"types#Number\">Number</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Return a number representing the current time.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"jQuery-now\" href=\"#jQuery-now\">jQuery.now()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>$.now()</code> method is a shorthand for the number returned by the expression <code>(new Date).getTime()</code>.</p> </div> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.now\" class=\"_attribution-link\">https://api.jquery.com/jQuery.now</a>\n  </p>\n</div>\n","jquery.noop":"<h1 class=\"entry-title\">jQuery.noop()</h1> <div class=\"entry-content\"> <article id=\"jQuery-noop1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.noop()</span><span class=\"returns\">Returns: <a href=\"types#undefined\">undefined</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>An empty function.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"jQuery-noop\" href=\"#jQuery-noop\">jQuery.noop()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>You can use this empty function when you wish to pass around a function that will do nothing.</p> <p>This is useful for plugin authors who offer optional callbacks; in the case that no callback is given, something like <code>jQuery.noop</code> could execute.</p> </div> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.noop\" class=\"_attribution-link\">https://api.jquery.com/jQuery.noop</a>\n  </p>\n</div>\n","jquery.trim":"<h1 class=\"entry-title\">jQuery.trim()</h1> <div class=\"entry-content\"> <article id=\"jQuery-trim1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.trim( str )</span><span class=\"returns\">Returns: <a href=\"types#String\">String</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Remove the whitespace from the beginning and end of a string.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"jQuery-trim-str\" href=\"#jQuery-trim-str\">jQuery.trim( str )</a> </h4> <ul><li> <div><strong>str</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>The string to trim.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>$.trim()</code> function removes all newlines, spaces (including non-breaking spaces), and tabs from the beginning and end of the supplied string. If these whitespace characters occur in the middle of the string, they are preserved.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Remove the white spaces at the start and at the end of the string.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.trim demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;pre id=\"original\"&gt;&lt;/pre&gt;\n&lt;pre id=\"trimmed\"&gt;&lt;/pre&gt;\n \n&lt;script&gt;\nvar str = \"         lots of spaces before and after         \";\n$( \"#original\" ).html( \"Original String: '\" + str + \"'\" );\n$( \"#trimmed\" ).html( \"$.trim()'ed: '\" + $.trim(str) + \"'\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Remove the white spaces at the start and at the end of the string.</p> <pre class=\"syntaxhighlighter javascript\">$.trim(\"    hello, how are you?    \");</pre> <h4>Result:</h4> <pre class=\"syntaxhighlighter javascript\">\"hello, how are you?\"</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.trim\" class=\"_attribution-link\">https://api.jquery.com/jQuery.trim</a>\n  </p>\n</div>\n","jquery.param":"<h1 class=\"entry-title\">jQuery.param()</h1> <div class=\"entry-content\"> <article id=\"jQuery-param1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.param( obj )</span><span class=\"returns\">Returns: <a href=\"types#String\">String</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Create a serialized representation of an array, a plain object, or a jQuery object suitable for use in a URL query string or Ajax request. In case a jQuery object is passed, it should contain input elements with name/value properties.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2/\">1.2</a></span><a id=\"jQuery-param-obj\" href=\"#jQuery-param-obj\">jQuery.param( obj )</a> </h4> <ul><li> <div><strong>obj</strong></div> <div>Type: <a href=\"types#Array\">Array</a> or <a href=\"types#PlainObject\">PlainObject</a> or <a href=\"types#jQuery\">jQuery</a> </div> <div>An array, a plain object, or a jQuery object to serialize.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"jQuery-param-obj-traditional\" href=\"#jQuery-param-obj-traditional\">jQuery.param( obj, traditional )</a> </h4> <ul> <li> <div><strong>obj</strong></div> <div>Type: <a href=\"types#Array\">Array</a> or <a href=\"types#PlainObject\">PlainObject</a> or <a href=\"types#jQuery\">jQuery</a> </div> <div>An array, a plain object, or a jQuery object to serialize.</div> </li> <li> <div><strong>traditional</strong></div> <div>Type: <a href=\"types#Boolean\">Boolean</a> </div> <div>A Boolean indicating whether to perform a traditional \"shallow\" serialization.</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This function is used internally to convert form element values into a serialized string representation (See <a href=\"serialize\">.serialize()</a> for more information).</p> <p>As of jQuery 1.3, the return value of a function is used instead of the function as a String.</p> <p>As of jQuery 1.4, the <code>$.param()</code> method serializes deep objects recursively to accommodate modern scripting languages and frameworks such as PHP and Ruby on Rails. You can disable this functionality globally by setting <code>jQuery.ajaxSettings.traditional = true;</code>.</p> <p>As of jQuery 3.0, the <code>$.param()</code> method no longer uses <code>jQuery.ajaxSettings.traditional</code> as its default setting and will default to <code>false</code>. For best compatibility across versions, call <code>$.param()</code> with an explicit value for the second argument and do not use defaults.</p> <p>If the object passed is in an Array, it must be an array of objects in the format returned by <a href=\"serializearray\">.serializeArray()</a></p> <pre class=\"syntaxhighlighter javascript\">[\n  { name: \"first\", value: \"Rick\" },\n  { name: \"last\", value: \"Astley\" },\n  { name: \"job\", value: \"Rock Star\" }\n]</pre> <div class=\"warning\"> <p><strong>Note:</strong> Because some frameworks have limited ability to parse serialized arrays, developers should exercise caution when passing an <code>obj</code> argument that contains objects or arrays nested within another array.</p> </div> <div class=\"warning\"> <p><strong>Note:</strong> Because there is no universally agreed-upon specification for param strings, it is not possible to encode complex data structures using this method in a manner that works ideally across all languages supporting such input. Use JSON format as an alternative for encoding complex data instead.</p> </div> <p>In jQuery 1.4, HTML5 input elements are also serialized.</p> <p>We can display a query string representation of an object and a URI-decoded version of the same as follows:</p> <pre class=\"syntaxhighlighter javascript\">var myObject = {\n  a: {\n    one: 1,\n    two: 2,\n    three: 3\n  },\n  b: [ 1, 2, 3 ]\n};\nvar recursiveEncoded = $.param( myObject );\nvar recursiveDecoded = decodeURIComponent( $.param( myObject ) );\n \nalert( recursiveEncoded );\nalert( recursiveDecoded );</pre> <p>The values of <code>recursiveEncoded</code> and <code>recursiveDecoded</code> are alerted as follows:</p> <p> <samp>a%5Bone%5D=1&amp;a%5Btwo%5D=2&amp;a%5Bthree%5D=3&amp;b%5B%5D=1&amp;b%5B%5D=2&amp;b%5B%5D=3</samp> <br> <samp>a[one]=1&amp;a[two]=2&amp;a[three]=3&amp;b[]=1&amp;b[]=2&amp;b[]=3</samp> </p> <p>To emulate the behavior of <code>$.param()</code> prior to jQuery 1.4, we can set the <code>traditional</code> argument to <code>true</code>:</p> <pre class=\"syntaxhighlighter javascript\">var myObject = {\n  a: {\n    one: 1,\n    two: 2,\n    three: 3\n  },\n  b: [ 1, 2, 3 ]\n};\nvar shallowEncoded = $.param( myObject, true );\nvar shallowDecoded = decodeURIComponent( shallowEncoded );\n \nalert( shallowEncoded );\nalert( shallowDecoded );</pre> <p>The values of <code>shallowEncoded</code> and <code>shallowDecoded</code> are alerted as follows:</p> <p> <samp>a=%5Bobject+Object%5D&amp;b=1&amp;b=2&amp;b=3</samp> <br> <samp>a=[object+Object]&amp;b=1&amp;b=2&amp;b=3</samp> </p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Serialize a key/value object.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.param demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div id=\"results\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar params = { width:1680, height:1050 };\nvar str = jQuery.param( params );\n$( \"#results\" ).text( str );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Serialize a few complex objects</p> <pre class=\"syntaxhighlighter javascript\">// &lt;=1.3.2:\n$.param({ a: [ 2, 3, 4 ] }); // \"a=2&amp;a=3&amp;a=4\"\n// &gt;=1.4:\n$.param({ a: [ 2, 3, 4 ] }); // \"a[]=2&amp;a[]=3&amp;a[]=4\"\n \n// &lt;=1.3.2:\n$.param({ a: { b: 1, c: 2 }, d: [ 3, 4, { e: 5 } ] });\n// \"a=[object+Object]&amp;d=3&amp;d=4&amp;d=[object+Object]\"\n \n// &gt;=1.4:\n$.param({ a: { b: 1, c: 2 }, d: [ 3, 4, { e: 5 } ] });\n// \"a[b]=1&amp;a[c]=2&amp;d[]=3&amp;d[]=4&amp;d[2][e]=5\"</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.param\" class=\"_attribution-link\">https://api.jquery.com/jQuery.param</a>\n  </p>\n</div>\n","jquery.parsehtml":"<h1 class=\"entry-title\">jQuery.parseHTML()</h1> <div class=\"entry-content\"> <article id=\"jQuery-parseHTML1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.parseHTML( data [, context ] [, keepScripts ] )</span><span class=\"returns\">Returns: <a href=\"types#Array\">Array</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Parses a string into an array of DOM nodes.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a></span><a id=\"jQuery-parseHTML-data-context-keepScripts\" href=\"#jQuery-parseHTML-data-context-keepScripts\">jQuery.parseHTML( data [, context ] [, keepScripts ] )</a> </h4> <ul> <li> <div><strong>data</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>HTML string to be parsed</div> </li> <li> <div> <strong>context</strong> (default: <code>document</code>)</div> <div>Type: <a href=\"types#Element\">Element</a> </div> <div>Document element to serve as the context in which the HTML fragment will be created</div> </li> <li> <div> <strong>keepScripts</strong> (default: <code>false</code>)</div> <div>Type: <a href=\"types#Boolean\">Boolean</a> </div> <div>A Boolean indicating whether to include scripts passed in the HTML string</div> </li> </ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p><code>jQuery.parseHTML</code> uses native methods to convert the string to a set of DOM nodes, which can then be inserted into the document. These methods do render all trailing or leading text (even if that's just whitespace). To prevent trailing/leading whitespace from being converted to text nodes you can pass the HTML string through <a href=\"jquery.trim\"><code>jQuery.trim</code></a>.</p> <p>By default, the <code>context</code> is the current <code>document</code> if not specified or given as <code>null</code> or <code>undefined</code>. If the HTML was to be used in another document such as an iframe, that frame's document could be used.</p> <p>As of 3.0 the default behavior is changed. If the <code>context</code> is not specified or given as <code>null</code> or <code>undefined</code>, a new <code>document</code> is used. This can potentially improve security because inline events will not execute when the HTML is parsed. Once the parsed HTML is injected into a document it does execute, but this gives tools a chance to traverse the created DOM and remove anything deemed unsafe. This improvement does not apply to internal uses of <code>jQuery.parseHTML</code> as they usually pass in the current <code>document</code>. Therefore, a statement like <code>$( \"#log\" ).append( $( htmlString ) )</code> is still subject to the injection of malicious code.</p> <h2>Security Considerations</h2> <p>Most jQuery APIs that accept HTML strings will run scripts that are included in the HTML. <code>jQuery.parseHTML</code> does not run scripts in the parsed HTML unless <code>keepScripts</code> is explicitly <code>true</code>. However, it is still possible in most environments to execute scripts indirectly, for example via the <code>&lt;img onerror&gt;</code> attribute. The caller should be aware of this and guard against it by cleaning or escaping any untrusted inputs from sources such as the URL or cookies. For future compatibility, callers should not depend on the ability to run <em>any</em> script content when <code>keepScripts</code> is unspecified or <code>false</code>.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Create an array of DOM nodes using an HTML string and insert it into a div.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.parseHTML demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div id=\"log\"&gt;\n  &lt;h3&gt;Content:&lt;/h3&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\nvar $log = $( \"#log\" ),\n  str = \"hello, &lt;b&gt;my name is&lt;/b&gt; jQuery.\",\n  html = $.parseHTML( str ),\n  nodeNames = [];\n \n// Append the parsed HTML\n$log.append( html );\n \n// Gather the parsed HTML's node names\n$.each( html, function( i, el ) {\n  nodeNames[ i ] = \"&lt;li&gt;\" + el.nodeName + \"&lt;/li&gt;\";\n});\n \n// Insert the node names\n$log.append( \"&lt;h3&gt;Node Names:&lt;/h3&gt;\" );\n$( \"&lt;ol&gt;&lt;/ol&gt;\" )\n  .append( nodeNames.join( \"\" ) )\n  .appendTo( $log );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.parseHTML\" class=\"_attribution-link\">https://api.jquery.com/jQuery.parseHTML</a>\n  </p>\n</div>\n","jquery.parsejson":"<h1 class=\"entry-title\">jQuery.parseJSON()</h1> <div class=\"entry-content\"> <article id=\"jQuery-parseJSON1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.parseJSON( json )</span><span class=\"returns\">Returns: <a href=\"types#String\">String</a> or <a href=\"types#Number\">Number</a> or <a href=\"types#Object\">Object</a> or <a href=\"types#Array\">Array</a> or <a href=\"types#Boolean\">Boolean</a></span><span class=\"version-details\">version deprecated: <a href=\"https://api.jquery.com/category/version/3.0/\">3.0</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Takes a well-formed JSON string and returns the resulting JavaScript value.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.1/\">1.4.1</a></span><a id=\"jQuery-parseJSON-json\" href=\"#jQuery-parseJSON-json\">jQuery.parseJSON( json )</a> </h4> <ul><li> <div><strong>json</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>The JSON string to parse.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Passing in a malformed JSON string results in a JavaScript exception being thrown. For example, the following are all invalid JSON strings:</p> <ul> <li> <code>\"{test: 1}\"</code> (test does not have double quotes around it).</li> <li> <code>\"{'test': 1}\"</code> ('test' is using single quotes instead of double quotes).</li> <li> <code>\"'test'\"</code> ('test' is using single quotes instead of double quotes).</li> <li> <code>\".1\"</code> (a number must start with a digit; <code>\"0.1\"</code> would be valid).</li> <li> <code>\"undefined\"</code> (<code>undefined</code> cannot be represented in a JSON string; <code>null</code>, however, can be).</li> <li> <code>\"NaN\"</code> (<code>NaN</code> cannot be represented in a JSON string; direct representation of <code>Infinity</code> is also not permitted).</li> </ul> <p>The JSON standard does not permit \"control characters\" such as a tab or newline. An example like <code>$.parseJSON( '{ \"testing\":\"1\\t2\\n3\" }' )</code> will throw an error in most implementations because the JavaScript parser converts the string's tab and newline escapes into literal tab and newline; doubling the backslashes like <code>\"1\\\\t2\\\\n3\"</code> yields expected results. This problem is often seen when injecting JSON into a JavaScript file from a server-side language such as PHP.</p> <p>Where the browser provides a native implementation of <code>JSON.parse</code>, jQuery uses it to parse the string. For details on the JSON format, see <a href=\"http://json.org/\">http://json.org/</a>.</p> <p>Prior to jQuery 1.9, <code>$.parseJSON</code> returned <code>null</code> instead of throwing an error if it was passed an empty string, <code>null</code>, or <code>undefined</code>, even though those are not valid JSON.</p> <p>As of jQuery 3.0, <code>$.parseJSON</code> is deprecated. To parse JSON objects, use the native <code>JSON.parse</code> method instead.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Parse a JSON string.</p> <pre class=\"syntaxhighlighter javascript\">var obj = jQuery.parseJSON( '{ \"name\": \"John\" }' );\nalert( obj.name === \"John\" );</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.parseJSON\" class=\"_attribution-link\">https://api.jquery.com/jQuery.parseJSON</a>\n  </p>\n</div>\n","jquery.unique":"<h1 class=\"entry-title\">jQuery.unique()</h1> <div class=\"entry-content\"> <article id=\"jQuery-unique1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.unique( array )</span><span class=\"returns\">Returns: <a href=\"types#Array\">Array</a></span><span class=\"version-details\">version deprecated: <a href=\"https://api.jquery.com/category/version/3.0/\">3.0</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.1.3/\">1.1.3</a></span><a id=\"jQuery-unique-array\" href=\"#jQuery-unique-array\">jQuery.unique( array )</a> </h4> <ul><li> <div><strong>array</strong></div> <div>Type: <a href=\"types#Array\">Array</a> </div> <div>The Array of DOM elements.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p><strong>As of jQuery 3.0, this method is deprecated and just an alias of <code><a href=\"jquery.uniquesort\">jQuery.uniqueSort()</a></code>. Please use that method instead.</strong></p> <p>The <code>$.unique()</code> function searches through an array of objects, sorting the array, and removing any duplicate nodes. A node is considered a duplicate if it is the <em>exact same</em> node as one already in the array; two different nodes with identical attributes are not considered to be duplicates. This function only works on plain JavaScript arrays of DOM elements, and is chiefly used internally by jQuery. You probably will never need to use it.</p> <p>As of jQuery 1.4 the results will always be returned in document order.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Removes any duplicate elements from the array of divs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.unique demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    color: blue;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;There are 6 divs in this document.&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div class=\"dup\"&gt;&lt;/div&gt;\n&lt;div class=\"dup\"&gt;&lt;/div&gt;\n&lt;div class=\"dup\"&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\n// unique() must take a native array\nvar divs = $( \"div\" ).get();\n \n// Add 3 elements of class dup too (they are divs)\ndivs = divs.concat( $( \".dup\" ).get() );\n$( \"div:eq(1)\" ).text( \"Pre-unique there are \" + divs.length + \" elements.\" );\n \ndivs = jQuery.unique( divs );\n$( \"div:eq(2)\" ).text( \"Post-unique there are \" + divs.length + \" elements.\" )\n  .css( \"color\", \"red\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.unique\" class=\"_attribution-link\">https://api.jquery.com/jQuery.unique</a>\n  </p>\n</div>\n","jquery.when":"<h1 class=\"entry-title\">jQuery.when()</h1> <div class=\"entry-content\"> <article id=\"jQuery-when1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.when( deferreds )</span><span class=\"returns\">Returns: <a href=\"types#Promise\">Promise</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Provides a way to execute callback functions based on zero or more objects, usually <a href=\"https://api.jquery.com/category/deferred-object/\">Deferred</a> objects that represent asynchronous events.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.5/\">1.5</a></span><a id=\"jQuery-when-deferreds\" href=\"#jQuery-when-deferreds\">jQuery.when( deferreds )</a> </h4> <ul><li> <div><strong>deferreds</strong></div> <div>Type: <a href=\"types#Deferred\">Deferred</a> </div> <div>Zero or more Deferred objects, or plain JavaScript objects.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>If no arguments are passed to <code>jQuery.when()</code>, it will return a resolved Promise.</p> <p>If a single Deferred is passed to <code>jQuery.when()</code>, its Promise object (a subset of the Deferred methods) is returned by the method. Additional methods of the Promise object can be called to attach callbacks, such as <a href=\"deferred.then\"><code>deferred.then</code></a>. When the Deferred is resolved or rejected, usually by the code that created the Deferred originally, the appropriate callbacks will be called. For example, the jqXHR object returned by <code>jQuery.ajax()</code> is a Promise-compatible object and can be used this way:</p> <pre class=\"syntaxhighlighter javascript\">$.when( $.ajax( \"test.aspx\" ) ).then(function( data, textStatus, jqXHR ) {\n  alert( jqXHR.status ); // Alerts 200\n});</pre> <p>If a single argument is passed to <code>jQuery.when()</code> and it is not a Deferred or a Promise, it will be treated as a resolved Deferred and any doneCallbacks attached will be executed immediately. The doneCallbacks are passed the original argument. In this case any failCallbacks you might set are never called since the Deferred is never rejected. For example:</p> <pre class=\"syntaxhighlighter javascript\">$.when( { testing: 123 } ).done(function( x ) {\n  alert( x.testing ); // Alerts \"123\"\n});</pre> <p>If you don't pass it any arguments at all, <code>jQuery.when()</code> will return a resolved promise.</p> <pre class=\"syntaxhighlighter javascript\">$.when().then(function( x ) {\n  alert( \"I fired immediately\" );\n});</pre> <p>In the case where multiple Deferred objects are passed to <code>jQuery.when()</code>, the method returns the Promise from a new \"master\" Deferred object that tracks the aggregate state of all the Deferreds it has been passed. The method will resolve its master Deferred as soon as all the Deferreds resolve, or reject the master Deferred as soon as one of the Deferreds is rejected. If the master Deferred is resolved, the doneCallbacks for the master Deferred are executed. The arguments passed to the doneCallbacks provide the resolved values for each of the Deferreds, and matches the order the Deferreds were passed to <code>jQuery.when()</code>. For example:</p> <pre class=\"syntaxhighlighter javascript\">var d1 = $.Deferred();\nvar d2 = $.Deferred();\n \n$.when( d1, d2 ).done(function ( v1, v2 ) {\n    console.log( v1 ); // \"Fish\"\n    console.log( v2 ); // \"Pizza\"\n});\n \nd1.resolve( \"Fish\" );\nd2.resolve( \"Pizza\" );</pre> <p>In the event a Deferred was resolved with no value, the corresponding doneCallback argument will be undefined. If a Deferred resolved to a single value, the corresponding argument will hold that value. In the case where a Deferred resolved to multiple values, the corresponding argument will be an array of those values. For example:</p> <pre class=\"syntaxhighlighter javascript\">var d1 = $.Deferred();\nvar d2 = $.Deferred();\nvar d3 = $.Deferred();\n \n$.when( d1, d2, d3 ).done(function ( v1, v2, v3 ) {\n    console.log( v1 ); // v1 is undefined\n    console.log( v2 ); // v2 is \"abc\"\n    console.log( v3 ); // v3 is an array [ 1, 2, 3, 4, 5 ]\n});\n \nd1.resolve();\nd2.resolve( \"abc\" );\nd3.resolve( 1, 2, 3, 4, 5 );</pre> <p>In the multiple-Deferreds case where one of the Deferreds is rejected, <code>jQuery.when()</code> immediately fires the failCallbacks for its master Deferred. Note that some of the Deferreds may still be unresolved at that point. The arguments passed to the failCallbacks match the signature of the failCallback for the Deferred that was rejected. If you need to perform additional processing for this case, such as canceling any unfinished Ajax requests, you can keep references to the underlying jqXHR objects in a closure and inspect/cancel them in the failCallback.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Execute a function after two Ajax requests are successful. (See the jQuery.ajax() documentation for a complete description of success and error cases for an ajax request).</p> <pre class=\"syntaxhighlighter javascript\">$.when( $.ajax( \"/page1.php\" ), $.ajax( \"/page2.php\" ) ).done(function( a1, a2 ) {\n  // a1 and a2 are arguments resolved for the page1 and page2 ajax requests, respectively.\n  // Each argument is an array with the following structure: [ data, statusText, jqXHR ]\n  var data = a1[ 0 ] + a2[ 0 ]; // a1[ 0 ] = \"Whip\", a2[ 0 ] = \" It\"\n  if ( /Whip It/.test( data ) ) {\n    alert( \"We got what we came for!\" );\n  }\n});</pre> </div> <div class=\"entry-example\" id=\"example-1\"> <p>Execute the function <code>myFunc</code> when both ajax requests are successful, or <code>myFailure</code> if either one has an error.</p> <pre class=\"syntaxhighlighter javascript\">$.when( $.ajax( \"/page1.php\" ), $.ajax( \"/page2.php\" ) )\n  .then( myFunc, myFailure );</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.when\" class=\"_attribution-link\">https://api.jquery.com/jQuery.when</a>\n  </p>\n</div>\n","jquery.post":"<h1 class=\"entry-title\">jQuery.post()</h1> <div class=\"entry-content\"> <article id=\"jQuery-post1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.post( url [, data ] [, success ] [, dataType ] )</span><span class=\"returns\">Returns: <a href=\"types#jqXHR\">jqXHR</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Load data from the server using a HTTP POST request.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"jQuery-post-url-data-success-dataType\" href=\"#jQuery-post-url-data-success-dataType\">jQuery.post( url [, data ] [, success ] [, dataType ] )</a> </h4> <ul> <li> <div><strong>url</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing the URL to which the request is sent.</div> </li> <li> <div><strong>data</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> or <a href=\"types#String\">String</a> </div> <div>A plain object or string that is sent to the server with the request.</div> </li> <li> <div><strong>success</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#PlainObject\">PlainObject</a> data, <a href=\"types#String\">String</a> textStatus, <a href=\"types#jqXHR\">jqXHR</a> jqXHR )</div> <div>A callback function that is executed if the request succeeds. Required if <code>dataType</code> is provided, but can be <code>null</code> in that case.</div> </li> <li> <div><strong>dataType</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>The type of data expected from the server. Default: Intelligent Guess (xml, json, script, text, html).</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.12/2.2/\">1.12/2.2</a></span><a id=\"jQuery-post-settings\" href=\"#jQuery-post-settings\">jQuery.post( [settings ] )</a> </h4> <ul><li> <div><strong>settings</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>A set of key/value pairs that configure the Ajax request. All properties except for <code>url</code> are optional. A default can be set for any option with <a href=\"jquery.ajaxsetup\">$.ajaxSetup()</a>. See <a href=\"jquery.ajax#jQuery-ajax-settings\">jQuery.ajax( settings )</a> for a complete list of all settings. Type will automatically be set to <code>POST</code>.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This is a shorthand Ajax function, which is equivalent to:</p> <pre class=\"syntaxhighlighter javascript\">$.ajax({\n  type: \"POST\",\n  url: url,\n  data: data,\n  success: success,\n  dataType: dataType\n});</pre> <p>The <code>success</code> callback function is passed the returned data, which will be an XML root element or a text string depending on the MIME type of the response. It is also passed the text status of the response.</p> <p><strong>As of jQuery 1.5</strong>, the <code>success</code> callback function is also passed a <a href=\"#jqxhr-object\">\"jqXHR\" object</a> (in <strong>jQuery 1.4</strong>, it was passed the <code>XMLHttpRequest</code> object).</p> <p>Most implementations will specify a success handler:</p> <pre class=\"syntaxhighlighter javascript\">$.post( \"ajax/test.html\", function( data ) {\n  $( \".result\" ).html( data );\n});</pre> <p>This example fetches the requested HTML snippet and inserts it on the page.</p> <p>Pages fetched with <code>POST</code> are never cached, so the <code>cache</code> and <code>ifModified</code> options in <code><a href=\"jquery.ajaxsetup\">jQuery.ajaxSetup()</a></code> have no effect on these requests.</p> <h4 id=\"jqxhr-object\">The jqXHR Object</h4> <p><strong>As of jQuery 1.5</strong>, all of jQuery's Ajax methods return a superset of the <code>XMLHTTPRequest</code> object. This jQuery XHR object, or \"jqXHR,\" returned by <code>$.get()</code> implements the Promise interface, giving it all the properties, methods, and behavior of a Promise (see <a href=\"https://api.jquery.com/category/deferred-object/\">Deferred object</a> for more information). The <code>jqXHR.done()</code> (for success), <code>jqXHR.fail()</code> (for error), and <code>jqXHR.always()</code> (for completion, whether success or error) methods take a function argument that is called when the request terminates. For information about the arguments this function receives, see the <a href=\"jquery.ajax#jqXHR\">jqXHR Object</a> section of the $.ajax() documentation.</p> <p>The Promise interface also allows jQuery's Ajax methods, including <code>$.get()</code>, to chain multiple <code>.done()</code>, <code>.fail()</code>, and <code>.always()</code> callbacks on a single request, and even to assign these callbacks after the request may have completed. If the request is already complete, the callback is fired immediately.</p> <pre class=\"syntaxhighlighter javascript\">// Assign handlers immediately after making the request,\n// and remember the jqxhr object for this request\nvar jqxhr = $.post( \"example.php\", function() {\n  alert( \"success\" );\n})\n  .done(function() {\n    alert( \"second success\" );\n  })\n  .fail(function() {\n    alert( \"error\" );\n  })\n  .always(function() {\n    alert( \"finished\" );\n});\n \n// Perform other work here ...\n \n// Set another completion function for the request above\njqxhr.always(function() {\n  alert( \"second finished\" );\n});</pre> <h4>Deprecation Notice</h4> <p>The <code>jqXHR.success()</code>, <code>jqXHR.error()</code>, and <code>jqXHR.complete()</code> callback methods are <strong>removed as of jQuery 3.0</strong>. You can use <code>jqXHR.done()</code>, <code>jqXHR.fail()</code>, and <code>jqXHR.always()</code> instead.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> Due to browser security restrictions, most \"Ajax\" requests are subject to the <a title=\"Same Origin Policy on Wikipedia\" href=\"http://en.wikipedia.org/wiki/Same_origin_policy\">same origin policy</a>; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. </li> <li> If a request with jQuery.post() returns an error code, it will fail silently unless the script has also called the global <a href=\"ajaxerror\">.ajaxError() </a> method. Alternatively, as of jQuery 1.5, the <code>.error()</code> method of the <code>jqXHR</code> object returned by jQuery.post() is also available for error handling. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Request the test.php page, but ignore the return results.</p> <pre class=\"syntaxhighlighter javascript\">$.post( \"test.php\" );</pre> </div> <div class=\"entry-example\" id=\"example-1\"> <p>Request the test.php page and send some additional data along (while still ignoring the return results).</p> <pre class=\"syntaxhighlighter javascript\">$.post( \"test.php\", { name: \"John\", time: \"2pm\" } );</pre> </div> <div class=\"entry-example\" id=\"example-2\"> <p>Pass arrays of data to the server (while still ignoring the return results).</p> <pre class=\"syntaxhighlighter javascript\">$.post( \"test.php\", { 'choices[]': [ \"Jon\", \"Susan\" ] } );</pre> </div> <div class=\"entry-example\" id=\"example-3\"> <p>Send form data using Ajax requests</p> <pre class=\"syntaxhighlighter javascript\">$.post( \"test.php\", $( \"#testform\" ).serialize() );</pre> </div> <div class=\"entry-example\" id=\"example-4\"> <p>Alert the results from requesting test.php (HTML or XML, depending on what was returned).</p> <pre class=\"syntaxhighlighter javascript\">$.post( \"test.php\", function( data ) {\n  alert( \"Data Loaded: \" + data );\n});</pre> </div> <div class=\"entry-example\" id=\"example-5\"> <p>Alert the results from requesting test.php with an additional payload of data (HTML or XML, depending on what was returned).</p> <pre class=\"syntaxhighlighter javascript\">$.post( \"test.php\", { name: \"John\", time: \"2pm\" })\n  .done(function( data ) {\n    alert( \"Data Loaded: \" + data );\n  });</pre> </div> <div class=\"entry-example\" id=\"example-6\"> <p>Post to the test.php page and get content which has been returned in json format (&lt;?php echo json_encode(array(\"name\"=&gt;\"John\",\"time\"=&gt;\"2pm\")); ?&gt;).</p> <pre class=\"syntaxhighlighter javascript\">$.post( \"test.php\", { func: \"getNameAndTime\" }, function( data ) {\n  console.log( data.name ); // John\n  console.log( data.time ); // 2pm\n}, \"json\");</pre> </div> <div class=\"entry-example\" id=\"example-7\"> <p>Post a form using Ajax and put results in a div</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.post demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;form action=\"/\" id=\"searchForm\"&gt;\n  &lt;input type=\"text\" name=\"s\" placeholder=\"Search...\"&gt;\n  &lt;input type=\"submit\" value=\"Search\"&gt;\n&lt;/form&gt;\n&lt;!-- the result of the search will be rendered inside this div --&gt;\n&lt;div id=\"result\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\n// Attach a submit handler to the form\n$( \"#searchForm\" ).submit(function( event ) {\n \n  // Stop form from submitting normally\n  event.preventDefault();\n \n  // Get some values from elements on the page:\n  var $form = $( this ),\n    term = $form.find( \"input[name='s']\" ).val(),\n    url = $form.attr( \"action\" );\n \n  // Send the data using post\n  var posting = $.post( url, { s: term } );\n \n  // Put the results in a div\n  posting.done(function( data ) {\n    var content = $( data ).find( \"#content\" );\n    $( \"#result\" ).empty().append( content );\n  });\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.post\" class=\"_attribution-link\">https://api.jquery.com/jQuery.post</a>\n  </p>\n</div>\n","keydown":"<h1 class=\"entry-title\">.keydown()</h1> <div class=\"entry-content\"> <article id=\"keydown1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.keydown( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Bind an event handler to the \"keydown\" JavaScript event, or trigger that event on an element.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"keydown-handler\" href=\"#keydown-handler\">.keydown( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"keydown-eventData-handler\" href=\"#keydown-eventData-handler\">.keydown( [eventData ], handler )</a> </h4> <ul> <li> <div><strong>eventData</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>An object containing data that will be passed to the event handler.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"keydown\" href=\"#keydown\">.keydown()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method is a shortcut for <code>.on( \"keydown\", handler )</code> in the first and second variations, and <code>.trigger( \"keydown\" )</code> in the third.</p> <p>The <code>keydown</code> event is sent to an element when the user presses a key on the keyboard. If the key is kept pressed, the event is sent every time the operating system repeats the key. It can be attached to any element, but the event is only sent to the element that has the focus. Focusable elements can vary between browsers, but form elements can always get focus so are reasonable candidates for this event type.</p> <p>For example, consider the HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;form&gt;\n  &lt;input id=\"target\" type=\"text\" value=\"Hello there\"&gt;\n&lt;/form&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;/div&gt;</pre> <p>The event handler can be bound to the input field:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#target\" ).keydown(function() {\n  alert( \"Handler for .keydown() called.\" );\n});</pre> <p>Now when the insertion point is inside the field, pressing a key displays the alert:</p> <p> <samp>Handler for .keydown() called.</samp> </p> <p>To trigger the event manually, apply <code>.keydown()</code> without an argument:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#other\" ).click(function() {\n  $( \"#target\" ).keydown();\n});</pre> <p>After this code executes, clicks on <samp>Trigger the handler</samp> will also alert the message.</p> <p>If key presses anywhere need to be caught (for example, to implement global shortcut keys on a page), it is useful to attach this behavior to the <code>document</code> object. Because of event bubbling, all key presses will make their way up the DOM to the <code>document</code> object unless explicitly stopped.</p> <p>To determine which key was pressed, examine the <a href=\"https://api.jquery.com/category/events/event-object/\">event object</a> that is passed to the handler function. While browsers use differing properties to store this information, jQuery normalizes the <code>.which</code> property so you can reliably use it to retrieve the key code. This code corresponds to a key on the keyboard, including codes for special keys such as arrows. For catching actual text entry, <code>.keypress()</code> may be a better choice.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> As the <code>.keydown()</code> method is just a shorthand for <code>.on( \"keydown\", handler )</code>, detaching is possible using <code>.off( \"keydown\" )</code>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Show the event object for the keydown handler when a key is pressed in the input.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;keydown demo&lt;/title&gt;\n  &lt;style&gt;\n  fieldset {\n    margin-bottom: 1em;\n  }\n  input {\n    display: block;\n    margin-bottom: .25em;\n  }\n  #print-output {\n    width: 100%;\n  }\n  .print-output-line {\n    white-space: pre;\n    padding: 5px;\n    font-family: monaco, monospace;\n    font-size: .7em;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;form&gt;\n  &lt;fieldset&gt;\n    &lt;label for=\"target\"&gt;Type Something:&lt;/label&gt;\n    &lt;input id=\"target\" type=\"text\"&gt;\n  &lt;/fieldset&gt;\n&lt;/form&gt;\n&lt;button id=\"other\"&gt;\n  Trigger the handler\n&lt;/button&gt;\n&lt;script type=\"text/javascript\" src=\"/resources/events.js\"&gt;&lt;/script&gt;\n \n&lt;script&gt;\nvar xTriggered = 0;\n$( \"#target\" ).keydown(function( event ) {\n  if ( event.which == 13 ) {\n   event.preventDefault();\n  }\n  xTriggered++;\n  var msg = \"Handler for .keydown() called \" + xTriggered + \" time(s).\";\n  $.print( msg, \"html\" );\n  $.print( event );\n});\n \n$( \"#other\" ).click(function() {\n  $( \"#target\" ).keydown();\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/keydown\" class=\"_attribution-link\">https://api.jquery.com/keydown</a>\n  </p>\n</div>\n","jquery.queue":"<h1 class=\"entry-title\">jQuery.queue()</h1> <div class=\"entry-content\"> Show or manipulate the queue of functions to be executed on the matched element.<div class=\"toc\"> <h4><span>Contents:</span></h4> <ul class=\"toc-list\"> <li> <a href=\"#jQuery-queue1\">jQuery.queue( element [, queueName ] )</a><ul><li><a href=\"#jQuery-queue-element-queueName\">jQuery.queue( element [, queueName ] )</a></li></ul> </li> <li> <a href=\"#jQuery-queue2\">jQuery.queue( element, queueName, newQueue )</a><ul> <li><a href=\"#jQuery-queue-element-queueName-newQueue\">jQuery.queue( element, queueName, newQueue )</a></li> <li><a href=\"#jQuery-queue-element-queueName-callback\">jQuery.queue( element, queueName, callback )</a></li> </ul> </li> </ul> </div>\n<article id=\"jQuery-queue1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.queue( element [, queueName ] )</span><span class=\"returns\">Returns: <a href=\"types#Array\">Array</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Show the queue of functions to be executed on the matched element.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.3/\">1.3</a></span><a id=\"jQuery-queue-element-queueName\" href=\"#jQuery-queue-element-queueName\">jQuery.queue( element [, queueName ] )</a> </h4> <ul> <li> <div><strong>element</strong></div> <div>Type: <a href=\"types#Element\">Element</a> </div> <div>A DOM element to inspect for an attached queue.</div> </li> <li> <div><strong>queueName</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue.</div> </li> </ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p><strong>Note:</strong> This is a low-level method, you should probably use <code><a href=\"queue\">.queue()</a></code> instead.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Show the length of the queue.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.queue demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    margin: 3px;\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    left: 0px;\n    top: 30px;\n    background: green;\n    display: none;\n  }\n  div.newcolor {\n    background: blue;\n  }\n  span {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button id=\"show\"&gt;Show Length of Queue&lt;/button&gt;\n&lt;span&gt;&lt;/span&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"#show\" ).click(function() {\n  var n = jQuery.queue( $( \"div\" )[ 0 ], \"fx\" );\n  $( \"span\" ).text( \"Queue length is: \" + n.length );\n});\n \nfunction runIt() {\n  $( \"div\" )\n    .show( \"slow\" )\n    .animate({\n      left: \"+=200\"\n    }, 2000 )\n    .slideToggle( 1000 )\n    .slideToggle( \"fast\" )\n    .animate({\n      left: \"-=200\"\n    }, 1500 )\n    .hide( \"slow\" )\n    .show( 1200 )\n    .slideUp( \"normal\", runIt );\n}\n \nrunIt();\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article><article id=\"jQuery-queue2\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.queue( element, queueName, newQueue )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Manipulate the queue of functions to be executed on the matched element.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.3/\">1.3</a></span><a id=\"jQuery-queue-element-queueName-newQueue\" href=\"#jQuery-queue-element-queueName-newQueue\">jQuery.queue( element, queueName, newQueue )</a> </h4> <ul> <li> <div><strong>element</strong></div> <div>Type: <a href=\"types#Element\">Element</a> </div> <div>A DOM element where the array of queued functions is attached.</div> </li> <li> <div><strong>queueName</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue.</div> </li> <li> <div><strong>newQueue</strong></div> <div>Type: <a href=\"types#Array\">Array</a> </div> <div>An array of functions to replace the current queue contents.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.3/\">1.3</a></span><a id=\"jQuery-queue-element-queueName-callback\" href=\"#jQuery-queue-element-queueName-callback\">jQuery.queue( element, queueName, callback )</a> </h4> <ul> <li> <div><strong>element</strong></div> <div>Type: <a href=\"types#Element\">Element</a> </div> <div>A DOM element on which to add a queued function.</div> </li> <li> <div><strong>queueName</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue.</div> </li> <li> <div><strong>callback</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>The new function to add to the queue.</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc-1\"> <p><strong>Note:</strong> This is a low-level method, you should probably use <code><a href=\"queue\">.queue()</a></code> instead.</p> <p>Every element can have one or more queues of functions attached to it by jQuery. In most applications, only one queue (called <code>fx</code>) is used. Queues allow a sequence of actions to be called on an element asynchronously, without halting program execution.</p> <p>The <code>jQuery.queue()</code> method allows us to directly manipulate this queue of functions. Calling <code>jQuery.queue()</code> with a callback is particularly useful; it allows us to place a new function at the end of the queue.</p> <p>Note that when adding a function with <code>jQuery.queue()</code>, we should ensure that <code>jQuery.dequeue()</code> is eventually called so that the next function in line executes.</p> </div> <section class=\"entry-examples\" id=\"entry-examples-1\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-1-0\"> <p>Queue a custom function.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.queue demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    margin: 3px;\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    left: 0px;\n    top: 30px;\n    background: green;\n    display: none;\n  }\n  div.newcolor {\n    background: blue;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \nClick here...\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( document.body ).click(function() {\n  var divs = $( \"div\" )\n    .show( \"slow\" )\n    .animate({ left: \"+=200\" }, 2000 );\n  jQuery.queue( divs[ 0 ], \"fx\", function() {\n    $( this ).addClass( \"newcolor\" );\n    jQuery.dequeue( this );\n  });\n  divs.animate({ left: \"-=200\" }, 500 );\n  jQuery.queue( divs[ 0 ], \"fx\", function() {\n    $( this ).removeClass( \"newcolor\" );\n    jQuery.dequeue( this );\n  });\n  divs.slideUp();\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1-1\"> <p>Set a queue array to delete the queue.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.queue demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    margin: 3px;\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    left: 0px;\n    top: 30px;\n    background: green;\n    display: none;\n  }\n  div.newcolor {\n    background: blue;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button id=\"start\"&gt;Start&lt;/button&gt;\n&lt;button id=\"stop\"&gt;Stop&lt;/button&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"#start\" ).click(function() {\n  var divs = $( \"div\" )\n    .show( \"slow\" )\n    .animate({ left: \"+=200\" }, 5000 );\n  jQuery.queue( divs[ 0 ], \"fx\", function() {\n    $( this ).addClass( \"newcolor\" );\n    jQuery.dequeue( this );\n  });\n  divs.animate({ left: \"-=200\" }, 1500 );\n  jQuery.queue( divs[ 0 ], \"fx\", function() {\n    $( this ).removeClass( \"newcolor\" );\n    jQuery.dequeue( this );\n  });\n  divs.slideUp();\n});\n$( \"#stop\" ).click(function() {\n  jQuery.queue( $( \"div\" )[ 0 ], \"fx\", [] );\n  $( \"div\" ).stop();\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.queue\" class=\"_attribution-link\">https://api.jquery.com/jQuery.queue</a>\n  </p>\n</div>\n","keypress":"<h1 class=\"entry-title\">.keypress()</h1> <div class=\"entry-content\"> <article id=\"keypress1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.keypress( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Bind an event handler to the \"keypress\" JavaScript event, or trigger that event on an element.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"keypress-handler\" href=\"#keypress-handler\">.keypress( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"keypress-eventData-handler\" href=\"#keypress-eventData-handler\">.keypress( [eventData ], handler )</a> </h4> <ul> <li> <div><strong>eventData</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>An object containing data that will be passed to the event handler.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"keypress\" href=\"#keypress\">.keypress()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p><strong>Note:</strong> as the <code>keypress</code> event isn't covered by any official specification, the actual behavior encountered when using it may differ across browsers, browser versions, and platforms.</p> <p>This method is a shortcut for <code>.on( \"keypress\", handler )</code> in the first two variations, and <code>.trigger( \"keypress\" )</code> in the third.</p> <p>The <code>keypress</code> event is sent to an element when the browser registers keyboard input. This is similar to the <code>keydown</code> event, except that modifier and non-printing keys such as <kbd>Shift</kbd>, <kbd>Esc</kbd>, and <kbd>delete</kbd> trigger <code>keydown</code> events but not <code>keypress</code> events. Other differences between the two events may arise depending on platform and browser.</p> <p>A <code>keypress</code> event handler can be attached to any element, but the event is only sent to the element that has the focus. Focusable elements can vary between browsers, but form controls can always get focus so are reasonable candidates for this event type.</p> <p>For example, consider the HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;form&gt;\n  &lt;fieldset&gt;\n    &lt;input id=\"target\" type=\"text\" value=\"Hello there\"&gt;\n  &lt;/fieldset&gt;\n&lt;/form&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;/div&gt;</pre> <p>The event handler can be bound to the input field:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#target\" ).keypress(function() {\n  console.log( \"Handler for .keypress() called.\" );\n});</pre> <p>Now when the insertion point is inside the field, pressing a key displays the log:</p> <p> <samp>Handler for .keypress() called.</samp> </p> <p>To trigger the event manually, apply <code>.keypress()</code> without an argument:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#other\" ).click(function() {\n  $( \"#target\" ).keypress();\n});</pre> <p>After this code executes, clicks on the <samp>Trigger the handler</samp> div will also log the message.</p> <p>If key presses anywhere need to be caught (for example, to implement global shortcut keys on a page), it is useful to attach this behavior to the <code>document</code> object. Because of event bubbling, all key presses will make their way up the DOM to the <code>document</code> object unless explicitly stopped.</p> <p>To determine which character was entered, examine the <code>event</code> object that is passed to the handler function. While browsers use differing properties to store this information, jQuery normalizes the <code>.which</code> property so you can reliably use it to retrieve the character code.</p> <p>Note that <code>keydown</code> and <code>keyup</code> provide a code indicating which key is pressed, while <code>keypress</code> indicates which character was entered. For example, a lowercase \"a\" will be reported as 65 by <code>keydown</code> and <code>keyup</code>, but as 97 by <code>keypress</code>. An uppercase \"A\" is reported as 65 by all events. Because of this distinction, when catching special keystrokes such as arrow keys, <code>.keydown()</code> or <code>.keyup()</code> is a better choice.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> As the <code>.keypress()</code> method is just a shorthand for <code>.on( \"keypress\", handler )</code>, detaching is possible using <code>.off( \"keypress\" )</code>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Show the event object when a key is pressed in the input. Note: This demo relies on a simple $.print() plugin (http://api.jquery.com/resources/events.js) for the event object's output.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;keypress demo&lt;/title&gt;\n  &lt;style&gt;\n  fieldset {\n    margin-bottom: 1em;\n  }\n  input {\n    display: block;\n    margin-bottom: .25em;\n  }\n  #print-output {\n    width: 100%;\n  }\n  .print-output-line {\n    white-space: pre;\n    padding: 5px;\n    font-family: monaco, monospace;\n    font-size: .7em;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;form&gt;\n  &lt;fieldset&gt;\n    &lt;label for=\"target\"&gt;Type Something:&lt;/label&gt;\n    &lt;input id=\"target\" type=\"text\"&gt;\n  &lt;/fieldset&gt;\n&lt;/form&gt;\n&lt;button id=\"other\"&gt;\n  Trigger the handler\n&lt;/button&gt;\n&lt;script src=\"/resources/events.js\"&gt;&lt;/script&gt;\n \n&lt;script&gt;\nvar xTriggered = 0;\n$( \"#target\" ).keypress(function( event ) {\n  if ( event.which == 13 ) {\n     event.preventDefault();\n  }\n  xTriggered++;\n  var msg = \"Handler for .keypress() called \" + xTriggered + \" time(s).\";\n  $.print( msg, \"html\" );\n  $.print( event );\n});\n \n$( \"#other\" ).click(function() {\n  $( \"#target\" ).keypress();\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/keypress\" class=\"_attribution-link\">https://api.jquery.com/keypress</a>\n  </p>\n</div>\n","jquery.readyexception":"<h1 class=\"entry-title\">jQuery.readyException()</h1> <div class=\"entry-content\"> <article id=\"jQuery-readyException1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.readyException( error )</span><span class=\"returns\">Returns: <a href=\"types#Selector\">Selector</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Handles errors thrown synchronously in functions wrapped in <code>jQuery()</code>.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/3.1/\">3.1</a></span><a id=\"jQuery-readyException-error\" href=\"#jQuery-readyException-error\">jQuery.readyException( error )</a> </h4> <ul><li> <div><strong>error</strong></div> <div>Type: <a href=\"types#Error\">Error</a> </div> <div>An error thrown in the function wrapped in <code>jQuery()</code>.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method is fired when an error is thrown synchronously in a function wrapped in <code>jQuery()</code> or <code>jQuery( document ).ready()</code>, or equivalent. By default it re-throws the error in a timeout so that it's logged in the console and passed to <code>window.onerror</code> instead of being swallowed. Overwrite this method if you want to handle such errors differently.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Pass the received error to <code>console.error</code>.</p> <pre class=\"syntaxhighlighter javascript\">jQuery.readyException = function( error ) {\n  console.error( error );\n};</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.readyException\" class=\"_attribution-link\">https://api.jquery.com/jQuery.readyException</a>\n  </p>\n</div>\n","jquery.proxy":"<h1 class=\"entry-title\">jQuery.proxy()</h1> <div class=\"entry-content\"> <article id=\"jQuery-proxy1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.proxy( function, context )</span><span class=\"returns\">Returns: <a href=\"types#Function\">Function</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Takes a function and returns a new one that will always have a particular context.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"jQuery-proxy-function-context\" href=\"#jQuery-proxy-function-context\">jQuery.proxy( function, context )</a> </h4> <ul> <li> <div><strong>function</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>The function whose context will be changed.</div> </li> <li> <div><strong>context</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>The object to which the context (<code>this</code>) of the function should be set.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"jQuery-proxy-context-name\" href=\"#jQuery-proxy-context-name\">jQuery.proxy( context, name )</a> </h4> <ul> <li> <div><strong>context</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>The object to which the context of the function should be set.</div> </li> <li> <div><strong>name</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>The name of the function whose context will be changed (should be a property of the <code>context</code> object).</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.6/\">1.6</a></span><a id=\"jQuery-proxy-function-context-additionalArguments\" href=\"#jQuery-proxy-function-context-additionalArguments\">jQuery.proxy( function, context [, additionalArguments ] )</a> </h4> <ul> <li> <div><strong>function</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>The function whose context will be changed.</div> </li> <li> <div><strong>context</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>The object to which the context (<code>this</code>) of the function should be set.</div> </li> <li> <div><strong>additionalArguments</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>Any number of arguments to be passed to the function referenced in the <code>function</code> argument.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.6/\">1.6</a></span><a id=\"jQuery-proxy-context-name-additionalArguments\" href=\"#jQuery-proxy-context-name-additionalArguments\">jQuery.proxy( context, name [, additionalArguments ] )</a> </h4> <ul> <li> <div><strong>context</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>The object to which the context of the function should be set.</div> </li> <li> <div><strong>name</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>The name of the function whose context will be changed (should be a property of the <code>context</code> object).</div> </li> <li> <div><strong>additionalArguments</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>Any number of arguments to be passed to the function named in the <code>name</code> argument.</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method is most useful for attaching event handlers to an element where the context is pointing back to a different object. Additionally, jQuery makes sure that even if you bind the function returned from <code>jQuery.proxy()</code> it will still unbind the correct function if passed the original.</p> <p>Be aware, however, that jQuery's event binding subsystem assigns a unique id to each event handling function in order to track it when it is used to specify the function to be unbound. The function represented by <code>jQuery.proxy()</code> is seen as a single function by the event subsystem, even when it is used to bind different contexts. To avoid unbinding the wrong handler, use a unique event namespace for binding and unbinding (e.g., <code>\"click.myproxy1\"</code>) rather than specifying the proxied function during unbinding.</p> <p><strong>As of jQuery 1.6</strong>, any number of additional arguments may be supplied to <code>$.proxy()</code>, and they will be passed to the function whose context will be changed.</p> <p><strong>As of jQuery 1.9</strong>, when the <code>context</code> is <code>null</code> or <code>undefined</code> the proxied function will be called with the same <code>this</code> object as the proxy was called with. This allows <code>$.proxy()</code> to be used to partially apply the arguments of a function without changing the context.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Change the context of functions bound to a click handler using the \"function, context\" signature. Unbind the first handler after first click.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.proxy demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;&lt;button type=\"button\" id=\"test\"&gt;Test&lt;/button&gt;&lt;/p&gt;\n&lt;div id=\"log\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar me = {\n  type: \"zombie\",\n  test: function( event ) {\n    // Without proxy, `this` would refer to the event target\n    // use event.target to reference that element.\n    var element = event.target;\n    $( element ).css( \"background-color\", \"red\" );\n \n    // With proxy, `this` refers to the me object encapsulating\n    // this function.\n    $( \"#log\" ).append( \"Hello \" + this.type + \"&lt;br&gt;\" );\n    $( \"#test\" ).off( \"click\", this.test );\n  }\n};\n \nvar you = {\n  type: \"person\",\n  test: function( event ) {\n    $( \"#log\" ).append( this.type + \" \" );\n  }\n};\n \n// Execute you.test() in the context of the `you` object\n// no matter where it is called\n// i.e. the `this` keyword will refer to `you`\nvar youClick = $.proxy( you.test, you );\n \n// attach click handlers to #test\n$( \"#test\" )\n  // this === \"zombie\"; handler unbound after first click\n  .on( \"click\", $.proxy( me.test, me ) )\n \n  // this === \"person\"\n  .on( \"click\", youClick )\n \n  // this === \"zombie\"\n  .on( \"click\", $.proxy( you.test, me ) )\n \n  // this === \"&lt;button&gt; element\"\n  .on( \"click\", you.test );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Enforce the context of the function using the \"context, function name\" signature. Unbind the handler after first click.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.proxy demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n  &lt;p&gt;&lt;button id=\"test\"&gt;Test&lt;/button&gt;&lt;/p&gt;\n  &lt;p id=\"log\"&gt;&lt;/p&gt;\n \n&lt;script&gt;\nvar obj = {\n  name: \"John\",\n  test: function() {\n    $( \"#log\" ).append( this.name );\n    $( \"#test\" ).off( \"click\", obj.test );\n  }\n};\n$( \"#test\" ).on( \"click\", jQuery.proxy( obj, \"test\" ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-2\"> <p>Change the context of a function bound to the click handler, </p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.proxy demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;&lt;button type=\"button\" id=\"test\"&gt;Test&lt;/button&gt;&lt;/p&gt;\n&lt;div id=\"log\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar me = {\n  // I'm a dog\n  type: \"dog\",\n \n  // Note that event comes *after* one and two\n  test: function( one, two, event ) {\n    $( \"#log\" )\n \n      // `one` maps to `you`, the 1st additional\n      // argument in the $.proxy function call\n      .append( \"&lt;h3&gt;Hello \" + one.type + \":&lt;/h3&gt;\" )\n \n      // The `this` keyword refers to `me`\n      // (the 2nd, context, argument of $.proxy)\n      .append( \"I am a \" + this.type + \", \" )\n \n      // `two` maps to `they`, the 2nd additional\n      // argument in the $.proxy function call\n      .append( \"and they are \" + two.type + \".&lt;br&gt;\" )\n \n      // The event type is \"click\"\n      .append( \"Thanks for \" + event.type + \"ing.\" )\n \n      // The clicked element is `event.target`,\n      // and its type is \"button\"\n      .append( \"the \" + event.target.type + \".\" );\n  }\n};\n \nvar you = { type: \"cat\" };\nvar they = { type: \"fish\" };\n \n// Set up handler to execute me.test() in the context\n// of `me`, with `you` and `they` as additional arguments\nvar proxy = $.proxy( me.test, me, you, they );\n \n$( \"#test\" )\n  .on( \"click\", proxy );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.proxy\" class=\"_attribution-link\">https://api.jquery.com/jQuery.proxy</a>\n  </p>\n</div>\n","jquery.removedata":"<h1 class=\"entry-title\">jQuery.removeData()</h1> <div class=\"entry-content\"> <article id=\"jQuery-removeData1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.removeData( element [, name ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Remove a previously-stored piece of data.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2.3/\">1.2.3</a></span><a id=\"jQuery-removeData-element-name\" href=\"#jQuery-removeData-element-name\">jQuery.removeData( element [, name ] )</a> </h4> <ul> <li> <div><strong>element</strong></div> <div>Type: <a href=\"types#Element\">Element</a> </div> <div>A DOM element from which to remove data.</div> </li> <li> <div><strong>name</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string naming the piece of data to remove.</div> </li> </ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p><strong>Note:</strong> This is a low-level method, you should probably use <code><a href=\"removedata\">.removeData()</a></code> instead.</p> <p>The <code>jQuery.removeData()</code> method allows us to remove values that were previously set using <code><a href=\"jquery.data\">jQuery.data()</a></code>. When called with the name of a key, <code>jQuery.removeData()</code> deletes that particular value; when called with no arguments, all values are removed.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Set a data store for 2 names then remove one of them.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.removeData demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    margin: 2px;\n    color: blue;\n  }\n  span {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;value1 before creation: &lt;span&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;value1 after creation: &lt;span&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;value1 after removal: &lt;span&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;value2 after removal: &lt;span&gt;&lt;/span&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar div = $( \"div\" )[ 0 ];\n$( \"span:eq(0)\" ).text( \"\" + $( \"div\" ).data( \"test1\" ) );\njQuery.data( div, \"test1\", \"VALUE-1\" );\njQuery.data( div, \"test2\", \"VALUE-2\" );\n$( \"span:eq(1)\" ).text( \"\" + jQuery.data( div, \"test1\" ) );\njQuery.removeData( div, \"test1\" );\n$( \"span:eq(2)\" ).text( \"\" + jQuery.data( div, \"test1\" ) );\n$( \"span:eq(3)\" ).text( \"\" + jQuery.data( div, \"test2\" ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.removeData\" class=\"_attribution-link\">https://api.jquery.com/jQuery.removeData</a>\n  </p>\n</div>\n","jquery.speed":"<h1 class=\"entry-title\">jQuery.speed</h1> <div class=\"entry-content\"> <article id=\"jQuery-speed1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.speed( [duration ] [, settings ] )</span><span class=\"returns\">Returns: <a href=\"types#PlainObject\">PlainObject</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Creates an object containing a set of properties ready to be used in the definition of custom animations.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"jQuery-speed-duration-settings\" href=\"#jQuery-speed-duration-settings\">jQuery.speed( [duration ] [, settings ] )</a> </h4> <ul> <li> <div> <strong>duration</strong> (default: <code>400</code>)</div> <div>Type: <a href=\"types#Number\">Number</a> or <a href=\"types#String\">String</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div><strong>settings</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div>  <ul> <li> <div> <strong>easing</strong> (default: <code>swing</code>)</div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string indicating which easing function to use for the transition.</div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function to call once the animation is complete.</div> </li> </ul> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.1/\">1.1</a></span><a id=\"jQuery-speed-duration-easing-complete\" href=\"#jQuery-speed-duration-easing-complete\">jQuery.speed( [duration ] [, easing ] [, complete ] )</a> </h4> <ul> <li> <div> <strong>duration</strong> (default: <code>400</code>)</div> <div>Type: <a href=\"types#Number\">Number</a> or <a href=\"types#String\">String</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div> <strong>easing</strong> (default: <code>swing</code>)</div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string indicating which easing function to use for the transition.</div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function to call once the animation is complete, called once per matched element.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.1/\">1.1</a></span><a id=\"jQuery-speed-settings\" href=\"#jQuery-speed-settings\">jQuery.speed( settings )</a> </h4> <ul><li> <div><strong>settings</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div>  <ul> <li> <div> <strong>duration</strong> (default: <code>400</code>)</div> <div>Type: <a href=\"types#Number\">Number</a> or <a href=\"types#String\">String</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div> <strong>easing</strong> (default: <code>swing</code>)</div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string indicating which easing function to use for the transition.</div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function to call once the animation is complete.</div> </li> </ul> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>$.speed()</code> method provides a way to define properties, such as <code>duration</code>, <code>easing</code>, and <code>queue</code>, to use in a custom animation. By using it, you don't have to implement the logic that deals with default values and optional parameters.</p> <p>This method is meant for plugin developers who are creating new animation methods. Letting <code>$.speed()</code> do all the parameter hockey and normalization for you, rather than duplicating the logic yourself, makes your work simpler. An example of use can be found in the animated form of <code>.addClass()</code> of jQuery UI. </p> </div> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.speed\" class=\"_attribution-link\">https://api.jquery.com/jQuery.speed</a>\n  </p>\n</div>\n","jquery.sub":"<h1 class=\"entry-title\">jQuery.sub()</h1> <div class=\"entry-content\"> <article id=\"jQuery-sub1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.sub()</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span><span class=\"version-details\">version deprecated: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a>, removed: <a href=\"https://api.jquery.com/category/version/1.9/\">1.9</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Creates a new copy of jQuery whose properties and methods can be modified without affecting the original jQuery object.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.5/\">1.5</a></span><a id=\"jQuery-sub\" href=\"#jQuery-sub\">jQuery.sub()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p> <strong>This method is deprecated as of jQuery 1.7 and will be moved to a plugin in jQuery 1.8.</strong> </p> <p>There are two specific use cases for which jQuery.sub() was created. The first was for providing a painless way of overriding jQuery methods without completely destroying the original methods and another was for helping to do encapsulation and basic namespacing for jQuery plugins.</p> <p>Note that jQuery.sub() doesn't attempt to do any sort of isolation - that's not its intention. All the methods on the sub'd version of jQuery will still point to the original jQuery (events bound and triggered will still be through the main jQuery, data will be bound to elements through the main jQuery, Ajax queries and events will run through the main jQuery, etc.).</p> <p>Note that if you're looking to use this for plugin development you should first <i>strongly</i> consider using something like the jQuery UI widget factory which manages both state and plugin sub-methods. <a href=\"http://blog.nemikor.com/2010/05/15/building-stateful-jquery-plugins/\">Some examples of using the jQuery UI widget factory</a> to build a plugin.</p> <p>The particular use cases of this method can be best described through some examples.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Adding a method to a jQuery sub so that it isn't exposed externally:</p> <pre class=\"syntaxhighlighter javascript\">(function(){\n  var sub$ = jQuery.sub();\n  sub$.fn.myCustomMethod = function() {\n    return \"just for me\";\n  };\n \n  sub$( document ).ready(function() {\n    sub$( \"body\" ).myCustomMethod() // \"just for me\"\n  });\n})();\n \ntypeof jQuery( \"body\" ).myCustomMethod // undefined</pre> </div> <div class=\"entry-example\" id=\"example-1\"> <p>Override some jQuery methods to provide new functionality.</p> <pre class=\"syntaxhighlighter javascript\">(function() {\n  var myjQuery = jQuery.sub();\n \n  myjQuery.fn.remove = function() {\n \n    // New functionality: Trigger a remove event\n    this.trigger( \"remove\" );\n \n    // Be sure to call the original jQuery remove method\n    return jQuery.fn.remove.apply( this, arguments );\n  };\n \n  myjQuery(function( $ ) {\n    $( \".menu\" ).click(function() {\n      $( this ).find( \".submenu\" ).remove();\n    });\n \n    // A new remove event is now triggered from this copy of jQuery\n    $( document ).on( \"remove\", function( event ) {\n      $( event.target ).parent().hide();\n    });\n  });\n})();\n \n// Regular jQuery doesn't trigger a remove event when removing an element\n// This functionality is only contained within the modified 'myjQuery'.</pre> </div> <div class=\"entry-example\" id=\"example-2\"> <p>Create a plugin that returns plugin-specific methods.</p> <pre class=\"syntaxhighlighter javascript\">(function() {\n \n  // Create a new copy of jQuery using sub()\n  var plugin = jQuery.sub();\n \n  // Extend that copy with the new plugin methods\n  plugin.fn.extend({\n    open: function() {\n      return this.show();\n    },\n    close: function() {\n      return this.hide();\n    }\n  });\n \n  // Add our plugin to the original jQuery\n  jQuery.fn.myplugin = function() {\n    this.addClass( \"plugin\" );\n \n    // Make sure our plugin returns our special plugin version of jQuery\n    return plugin( this );\n  };\n})();\n \n$( document ).ready(function() {\n \n  // Call the plugin, open method now exists\n  $( \"#main\" ).myplugin().open();\n \n  // Note: Calling just $( \"#main\" ).open() won't work as open doesn't exist!\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.sub\" class=\"_attribution-link\">https://api.jquery.com/jQuery.sub</a>\n  </p>\n</div>\n","last-child-selector":"<h1 class=\"entry-title\">:last-child Selector</h1> <div class=\"entry-content\"> <article id=\"last-child1\" class=\"entry selector\"><h2 class=\"section-title\"><span>last-child selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all elements that are the last child of their parent.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.1.4/\">1.1.4</a></span>jQuery( \":last-child\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>While <a href=\"last-selector\">:last</a> matches only a single element, <code>:last-child</code> can match more than one: one for each parent.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Find the last span in each matched div and add some css plus a hover state.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;last-child demo&lt;/title&gt;\n  &lt;style&gt;\n  span.solast {\n    text-decoration: line-through;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;\n  &lt;span&gt;John,&lt;/span&gt;\n  &lt;span&gt;Karl,&lt;/span&gt;\n  &lt;span&gt;Brandon,&lt;/span&gt;\n  &lt;span&gt;Sam&lt;/span&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;span&gt;Glen,&lt;/span&gt;\n  &lt;span&gt;Tane,&lt;/span&gt;\n  &lt;span&gt;Ralph,&lt;/span&gt;\n  &lt;span&gt;David&lt;/span&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\n$( \"div span:last-child\" )\n  .css({ color:\"red\", fontSize:\"80%\" })\n  .hover(function() {\n    $( this ).addClass( \"solast\" );\n  }, function() {\n    $( this ).removeClass( \"solast\" );\n  });\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/last-child-selector\" class=\"_attribution-link\">https://api.jquery.com/last-child-selector</a>\n  </p>\n</div>\n","length":"<h1 class=\"entry-title\">.length</h1> <div class=\"entry-content\"> <article id=\"length1\" class=\"entry property\"><h2 class=\"section-title\"> <span>length</span><span class=\"returns\">Returns: <a href=\"types#Integer\">Integer</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>The number of elements in the jQuery object.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>length</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The number of elements currently matched. The .<a href=\"size\">size()</a> method will return the same value.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Count the divs. Click to add more.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;length demo&lt;/title&gt;\n  &lt;style&gt;\n  body {\n    cursor: pointer;\n  }\n  div {\n    width: 50px;\n    height: 30px;\n    margin: 5px;\n    float: left;\n    background: green;\n  }\n  span {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;span&gt;&lt;/span&gt;\n  &lt;div&gt;&lt;/div&gt;\n&lt;script&gt;\n$( document.body )\n  .click(function() {\n    $( document.body ).append( $( \"&lt;div&gt;\" ) );\n    var n = $( \"div\" ).length;\n    $( \"span\" ).text( \"There are \" + n + \" divs.\" +\n      \"Click to add more.\");\n  })\n  // Trigger the click to start\n  .trigger( \"click\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/length\" class=\"_attribution-link\">https://api.jquery.com/length</a>\n  </p>\n</div>\n","jquery.support":"<h1 class=\"entry-title\">jQuery.support</h1> <div class=\"entry-content\"> <article id=\"jQuery-support1\" class=\"entry property\"><h2 class=\"section-title\"> <span>jQuery.support</span><span class=\"returns\">Returns: <a href=\"types#Object\">Object</a></span><span class=\"version-details\">version deprecated: <a href=\"https://api.jquery.com/category/version/1.9/\">1.9</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>A collection of properties that represent the presence of different browser features or bugs. Intended for jQuery's internal use; specific properties may be removed when they are no longer needed internally to improve page startup performance. For your own project's feature-detection needs, we strongly recommend the use of an external library such as <a href=\"http://modernizr.com\">Modernizr</a> instead of dependency on properties in <code>jQuery.support</code>.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.3/\">1.3</a></span>jQuery.support</h4></li></ul> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.support\" class=\"_attribution-link\">https://api.jquery.com/jQuery.support</a>\n  </p>\n</div>\n","jquery.type":"<h1 class=\"entry-title\">jQuery.type()</h1> <div class=\"entry-content\"> <article id=\"jQuery-type1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.type( obj )</span><span class=\"returns\">Returns: <a href=\"types#String\">String</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Determine the internal JavaScript [[Class]] of an object.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"jQuery-type-obj\" href=\"#jQuery-type-obj\">jQuery.type( obj )</a> </h4> <ul><li> <div><strong>obj</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>Object to get the internal JavaScript [[Class]] of.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>A number of techniques are used to determine the exact return value for an object. The [[Class]] is determined as follows:</p> <ul> <li>If the object is undefined or null, then \"undefined\" or \"null\" is returned accordingly. <ul> <li>jQuery.type( undefined ) === \"undefined\"</li> <li>jQuery.type() === \"undefined\"</li> <li>jQuery.type( window.notDefined ) === \"undefined\"</li> <li>jQuery.type( null ) === \"null\"</li> </ul> </li> <li>If the argument is either a primitive value or an instance of a standard built-in ECMAScript object, the [[Class]] internal property is used to determine the type. (<a href=\"http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/\">More details about this technique.</a>) <ul> <li>jQuery.type( true ) === \"boolean\"</li> <li>jQuery.type( new Boolean() ) === \"boolean\"</li> <li>jQuery.type( 3 ) === \"number\"</li> <li>jQuery.type( new Number(3) ) === \"number\"</li> <li>jQuery.type( \"test\" ) === \"string\"</li> <li>jQuery.type( new String(\"test\") ) === \"string\"</li> <li>jQuery.type( function(){} ) === \"function\"</li> <li>jQuery.type( [] ) === \"array\"</li> <li>jQuery.type( new Array() ) === \"array\"</li> <li>jQuery.type( new Date() ) === \"date\"</li> <li>jQuery.type( new Error() ) === \"error\" // <strong>as of jQuery 1.9</strong> </li> <li>jQuery.type( /test/ ) === \"regexp\"</li> </ul> </li> <li>Everything else returns \"object\" as its type.</li> </ul> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Find out if the parameter is a RegExp.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.type demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \nIs it a RegExp? &lt;b&gt;&lt;/b&gt;\n \n&lt;script&gt;\n$( \"b\" ).append( \"\" + jQuery.type( /test/ ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.type\" class=\"_attribution-link\">https://api.jquery.com/jQuery.type</a>\n  </p>\n</div>\n","jquery.uniquesort":"<h1 class=\"entry-title\">jQuery.uniqueSort()</h1> <div class=\"entry-content\"> <article id=\"jQuery-uniqueSort1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">jQuery.uniqueSort( array )</span><span class=\"returns\">Returns: <a href=\"types#Array\">Array</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Sorts an array of DOM elements, in place, with the duplicates removed. Note that this only works on arrays of DOM elements, not strings or numbers.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.12/2.2/\">1.12/2.2</a></span><a id=\"jQuery-uniqueSort-array\" href=\"#jQuery-uniqueSort-array\">jQuery.uniqueSort( array )</a> </h4> <ul><li> <div><strong>array</strong></div> <div>Type: <a href=\"types#Array\">Array</a> </div> <div>The Array of DOM elements.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>$.uniqueSort()</code> function searches through an array of objects, sorting the array, and removing any duplicate nodes. A node is considered a duplicate if it is the <em>exact same</em> node as one already in the array; two different nodes with identical attributes are not considered to be duplicates. This function only works on plain JavaScript arrays of DOM elements, and is chiefly used internally by jQuery. You probably will never need to use it.</p> <p>Prior to jQuery 3.0, this method was called <code><a href=\"jquery.unique\">jQuery.unique()</a></code>.</p> <p>As of jQuery 1.4 the results will always be returned in document order.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Removes any duplicate elements from the array of divs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.uniqueSort demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    color: blue;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;There are 6 divs in this document.&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div class=\"dup\"&gt;&lt;/div&gt;\n&lt;div class=\"dup\"&gt;&lt;/div&gt;\n&lt;div class=\"dup\"&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\n// unique() must take a native array\nvar divs = $( \"div\" ).get();\n \n// Add 3 elements of class dup too (they are divs)\ndivs = divs.concat( $( \".dup\" ).get() );\n$( \"div:eq(1)\" ).text( \"Pre-unique there are \" + divs.length + \" elements.\" );\n \ndivs = jQuery.uniqueSort( divs );\n$( \"div:eq(2)\" ).text( \"Post-unique there are \" + divs.length + \" elements.\" )\n  .css( \"color\", \"red\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/jQuery.uniqueSort\" class=\"_attribution-link\">https://api.jquery.com/jQuery.uniqueSort</a>\n  </p>\n</div>\n","keyup":"<h1 class=\"entry-title\">.keyup()</h1> <div class=\"entry-content\"> <article id=\"keyup1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.keyup( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Bind an event handler to the \"keyup\" JavaScript event, or trigger that event on an element.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"keyup-handler\" href=\"#keyup-handler\">.keyup( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"keyup-eventData-handler\" href=\"#keyup-eventData-handler\">.keyup( [eventData ], handler )</a> </h4> <ul> <li> <div><strong>eventData</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>An object containing data that will be passed to the event handler.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"keyup\" href=\"#keyup\">.keyup()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method is a shortcut for <code>.on( \"keyup\", handler )</code> in the first two variations, and <code>.trigger( \"keyup\" )</code> in the third.</p> <p>The <code>keyup</code> event is sent to an element when the user releases a key on the keyboard. It can be attached to any element, but the event is only sent to the element that has the focus. Focusable elements can vary between browsers, but form elements can always get focus so are reasonable candidates for this event type.</p> <p>For example, consider the HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;form&gt;\n  &lt;input id=\"target\" type=\"text\" value=\"Hello there\"&gt;\n&lt;/form&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;/div&gt;</pre> <p>The event handler can be bound to the input field:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#target\" ).keyup(function() {\n  alert( \"Handler for .keyup() called.\" );\n});</pre> <p>Now when the insertion point is inside the field and a key is pressed and released, the alert is displayed:</p> <p> <samp>Handler for .keyup() called.</samp> </p> <p>To trigger the event manually, apply <code>.keyup()</code> without arguments:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#other\" ).click(function() {\n  $( \"#target\" ).keyup();\n});</pre> <p>After this code executes, clicks on <samp>Trigger the handler</samp> will also alert the message.</p> <p>If key presses anywhere need to be caught (for example, to implement global shortcut keys on a page), it is useful to attach this behavior to the <code>document</code> object. Because of event bubbling, all key presses will make their way up the DOM to the <code>document</code> object unless explicitly stopped.</p> <p>To determine which key was pressed, examine the event object that is passed to the handler function. While browsers use differing properties to store this information, jQuery normalizes the <code>.which</code> property so you can reliably use it to retrieve the key code. This code corresponds to a key on the keyboard, including codes for special keys such as arrows. For catching actual text entry, <code>.keypress()</code> may be a better choice.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> As the <code>.keyup()</code> method is just a shorthand for <code>.on( \"keyup\", handler )</code>, detaching is possible using <code>.off( \"keyup\" )</code>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Show the event object for the keyup handler (using a simple $.print plugin) when a key is released in the input.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;keyup demo&lt;/title&gt;\n  &lt;style&gt;\n  fieldset {\n    margin-bottom: 1em;\n  }\n  input {\n    display: block;\n    margin-bottom: .25em;\n  }\n  #print-output {\n    width: 100%;\n  }\n  .print-output-line {\n    white-space: pre;\n    padding: 5px;\n    font-family: monaco, monospace;\n    font-size: .7em;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;form&gt;\n  &lt;fieldset&gt;\n    &lt;label for=\"target\"&gt;Type Something:&lt;/label&gt;\n    &lt;input id=\"target\" type=\"text\"&gt;\n  &lt;/fieldset&gt;\n&lt;/form&gt;\n&lt;button id=\"other\"&gt;\n  Trigger the handler\n&lt;/button&gt;\n&lt;script type=\"text/javascript\" src=\"/resources/events.js\"&gt;&lt;/script&gt;\n \n&lt;script&gt;\nvar xTriggered = 0;\n$( \"#target\" ).keyup(function( event ) {\n  xTriggered++;\n  var msg = \"Handler for .keyup() called \" + xTriggered + \" time(s).\";\n  $.print( msg, \"html\" );\n  $.print( event );\n}).keydown(function( event ) {\n  if ( event.which == 13 ) {\n    event.preventDefault();\n  }\n});\n \n$( \"#other\").click(function() {\n  $( \"#target\" ).keyup();\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/keyup\" class=\"_attribution-link\">https://api.jquery.com/keyup</a>\n  </p>\n</div>\n","lang-selector":"<h1 class=\"entry-title\">:lang() Selector</h1> <div class=\"entry-content\"> <article id=\"lang1\" class=\"entry selector\"><h2 class=\"section-title\"><span>lang selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all elements of the specified language.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.9/\">1.9</a></span>jQuery( \":lang(language)\" )</h4> <p class=\"argument\"><strong>language: </strong>A language code.</p> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>:lang()</code> selector matches elements that have a language value equal to the supplied language code or that start with the supplied language code immediately followed by \"-\". For example, the selector <code>$(\"div:lang(en)\")</code>will match <code>&lt;div lang=\"en\"&gt;</code> and <code>&lt;div lang=\"en-us\"&gt;</code> (and any of their descendant <code>&lt;div&gt;</code>s), but not <code>&lt;div lang=\"fr\"&gt;</code></p> <p>For HTML elements, the language value is determined by the <code>lang</code> attribute and possibly information from <code>meta</code> elements or HTTP headers.</p> <p>Further discussion of this usage can be found in the <a href=\"http://www.w3.org/TR/css3-selectors/#lang-pseudo\">W3C CSS specification</a>.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Color div elements according to their language.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;lang demo&lt;/title&gt;\n  &lt;style&gt;\n  body {\n    background-color: #ccc;\n  }\n  h3 {\n    margin: .25em 0;\n  }\n  div {\n    line-height: 1.5em\n  }\n  .usa {\n    background-color: #f00;\n    color: #fff;\n  }\n  .usa .usa {\n    background-color: #fff;\n    color: #000;\n  }\n  .usa .usa .usa {\n    background-color: #00f;\n    color: #fff;\n  }\n  .spain {\n    background-color: #f00;\n    color: #ff0;\n  }\n  .spain .spain {\n    background-color: #ff0;\n    color: #f00;\n    line-height: 3em;\n  }\n  .spain .spain .spain {\n    background-color: #f00;\n    color: #ff0;\n    line-height: 1.5em;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;h3&gt;USA&lt;/h3&gt;\n&lt;div lang=\"en-us\"&gt;red\n  &lt;div&gt;white\n    &lt;div&gt;and blue&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;h3&gt;España&lt;/h3&gt;\n&lt;div lang=\"es-es\"&gt;rojo\n  &lt;div&gt;amarillo\n    &lt;div&gt;y rojo&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\n$( \"div:lang(en-us)\" ).addClass( \"usa\" );\n$( \"div:lang(es-es)\" ).addClass( \"spain\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/lang-selector\" class=\"_attribution-link\">https://api.jquery.com/lang-selector</a>\n  </p>\n</div>\n","last":"<h1 class=\"entry-title\">.last()</h1> <div class=\"entry-content\"> <article id=\"last1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.last()</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Reduce the set of matched elements to the final one in the set.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"last\" href=\"#last\">.last()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Given a jQuery object that represents a set of DOM elements, the <code>.last()</code> method constructs a new jQuery object from the last element in that set.</p> <p>Consider a page with a simple list on it:</p> <pre class=\"syntaxhighlighter xml\">&lt;ul&gt;\n  &lt;li&gt;list item 1&lt;/li&gt;\n  &lt;li&gt;list item 2&lt;/li&gt;\n  &lt;li&gt;list item 3&lt;/li&gt;\n  &lt;li&gt;list item 4&lt;/li&gt;\n  &lt;li&gt;list item 5&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>We can apply this method to the set of list items:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li\" ).last().css( \"background-color\", \"red\" );</pre> <p>The result of this call is a red background for the final item.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Highlight the last span in a paragraph.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;last demo&lt;/title&gt;\n  &lt;style&gt;\n  .highlight {\n    background-color: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;&lt;span&gt;Look:&lt;/span&gt; &lt;span&gt;This is some text in a paragraph.&lt;/span&gt; &lt;span&gt;This is a note about it.&lt;/span&gt;&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p span\" ).last().addClass( \"highlight\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/last\" class=\"_attribution-link\">https://api.jquery.com/last</a>\n  </p>\n</div>\n","last-selector":"<h1 class=\"entry-title\">:last Selector</h1> <div class=\"entry-content\"> <article id=\"last1\" class=\"entry selector\"><h2 class=\"section-title\"><span>last selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects the last matched element.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \":last\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Note that <code>:last</code> selects a single element by filtering the current jQuery collection and matching the last element within it.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> Because <code>:last</code> is a jQuery extension and not part of the CSS specification, queries using <code>:last</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. To achieve the best performance when using <code>:last</code> to select elements, first select the elements using a pure CSS selector, then use <a href=\"filter\"><code>.filter(\":last\")</code></a>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds the last table row.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;last demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;table&gt;\n  &lt;tr&gt;&lt;td&gt;First Row&lt;/td&gt;&lt;/tr&gt;\n  &lt;tr&gt;&lt;td&gt;Middle Row&lt;/td&gt;&lt;/tr&gt;\n  &lt;tr&gt;&lt;td&gt;Last Row&lt;/td&gt;&lt;/tr&gt;\n&lt;/table&gt;\n \n&lt;script&gt;\n$( \"tr:last\" ).css({ backgroundColor: \"yellow\", fontWeight: \"bolder\" });\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/last-selector\" class=\"_attribution-link\">https://api.jquery.com/last-selector</a>\n  </p>\n</div>\n","live":"<h1 class=\"entry-title\">.live()</h1> <div class=\"entry-content\"> <article id=\"live1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.live( events, handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span><span class=\"version-details\">version deprecated: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a>, removed: <a href=\"https://api.jquery.com/category/version/1.9/\">1.9</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Attach an event handler for all elements which match the current selector, now and in the future.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.3/\">1.3</a></span><a id=\"live-events-handler\" href=\"#live-events-handler\">.live( events, handler )</a> </h4> <ul> <li> <div><strong>events</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing a JavaScript event type, such as \"click\" or \"keydown.\" As of jQuery 1.4 the string can contain multiple, space-separated event types or custom event names.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute at the time the event is triggered.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"live-events-data-handler\" href=\"#live-events-data-handler\">.live( events [, data ], handler )</a> </h4> <ul> <li> <div><strong>events</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing a JavaScript event type, such as \"click\" or \"keydown.\" As of jQuery 1.4 the string can contain multiple, space-separated event types or custom event names.</div> </li> <li> <div><strong>data</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>An object containing data that will be passed to the event handler.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute at the time the event is triggered.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"live-events\" href=\"#live-events\">.live( events )</a> </h4> <ul><li> <div><strong>events</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>A plain object of one or more JavaScript event types and functions to execute for them.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p><strong>As of jQuery 1.7</strong>, the <code>.live()</code> method is deprecated. Use <a href=\"on\"><code>.on()</code></a> to attach event handlers. Users of older versions of jQuery should use <a href=\"delegate\"><code>.delegate()</code></a> in preference to <code>.live()</code>.</p> <p>This method provides a means to attach delegated event handlers to the <code>document</code> element of a page, which simplifies the use of event handlers when content is dynamically added to a page. See the discussion of direct versus delegated events in the <a href=\"on\"><code>.on()</code></a> method for more information. </p> <p>Rewriting the <code>.live()</code> method in terms of its successors is straightforward; these are templates for equivalent calls for all three event attachment methods:</p> <pre class=\"syntaxhighlighter javascript\">$( selector ).live( events, data, handler );                // jQuery 1.3+\n$( document ).delegate( selector, events, data, handler );  // jQuery 1.4.3+\n$( document ).on( events, selector, data, handler );        // jQuery 1.7+</pre> <p>The <code>events</code> argument can either be a space-separated list of event type names and optional namespaces, or an object of event name strings and handlers. The <code>data</code> argument is optional and can be omitted. For example, the following three method calls are functionally equivalent (but see below for more effective and performant ways to attach delegated event handlers):</p> <pre class=\"syntaxhighlighter javascript\">$( \"a.offsite\" ).live( \"click\", function() {\n  alert( \"Goodbye!\" ); // jQuery 1.3+\n});\n$( document ).delegate( \"a.offsite\", \"click\", function() {\n  alert( \"Goodbye!\" ); // jQuery 1.4.3+\n});\n$( document ).on( \"click\", \"a.offsite\", function() {\n  alert( \"Goodbye!\" );  // jQuery 1.7+\n});</pre> <p>Use of the <code>.live()</code> method is no longer recommended since later versions of jQuery offer better methods that do not have its drawbacks. In particular, the following issues arise with the use of <code>.live()</code>:</p> <ul> <li>jQuery attempts to retrieve the elements specified by the selector before calling the <code>.live()</code> method, which may be time-consuming on large documents.</li> <li>Chaining methods is not supported. For example, <code>$( \"a\" ).find( \".offsite, .external\" ).live( ... ); </code> is <em>not</em> valid and does not work as expected.</li> <li>Since all <code>.live()</code> events are attached at the <code>document</code> element, events take the longest and slowest possible path before they are handled.</li> <li>On mobile iOS (iPhone, iPad and iPod Touch) the <code>click</code> event does not bubble to the document body for most elements and cannot be used with <code>.live()</code> without applying one of the following workarounds: <ol> <li>Use natively clickable elements such as <code>a</code> or <code>button</code>, as both of these do bubble to <code>document</code>.</li> <li>Use <code>.on()</code> or <code>.delegate()</code> attached to an element below the level of <code>document.body</code>, since mobile iOS does bubble within the body.</li> <li>Apply the CSS style <code>cursor:pointer</code> to the element that needs to bubble clicks (or a parent including <code>document.documentElement</code>). Note however, this will disable copy\\paste on the element and cause it to be highlighted when touched.</li> </ol> </li> <li>Calling <a href=\"event.stoppropagation\"><code>event.stopPropagation()</code></a> in the event handler is ineffective in stopping event handlers attached lower in the document; the event has already propagated to <code>document</code>.</li> <li>The <code>.live()</code> method interacts with other event methods in ways that can be surprising, e.g., <code>$( document ).off( \"click\" )</code> removes all click handlers attached by any call to <code>.live()</code>!</li> </ul> <p>For pages still using <code>.live()</code>, this list of version-specific differences may be helpful:</p> <ul> <li>Before jQuery 1.7, to stop further handlers from executing after one bound using <code>.live()</code>, the handler must return <code>false</code>. Calling <code>.stopPropagation()</code> will not accomplish this.</li> <li>As of <b>jQuery 1.4</b> the <code>.live()</code> method supports custom events as well as <em>all JavaScript events that bubble</em>. It also supports certain events that don't bubble, including <code>change</code>, <code>submit</code>, <code>focus</code> and <code>blur</code>.</li> <li>In <b>jQuery 1.3.x</b> only the following JavaScript events could be bound: <code>click</code>, <code>dblclick</code>, <code>keydown</code>, <code>keypress</code>, <code>keyup</code>, <code>mousedown</code>, <code>mousemove</code>, <code>mouseout</code>, <code>mouseover</code>, and <code>mouseup</code>.</li> </ul> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Cancel a default action and prevent it from bubbling up by returning false.</p> <pre class=\"syntaxhighlighter javascript\">$( \"a\" ).live( \"click\", function() {\n  return false;\n});</pre> </div> <div class=\"entry-example\" id=\"example-1\"> <p>Cancel only the default action by using the preventDefault method.</p> <pre class=\"syntaxhighlighter javascript\">$( \"a\" ).live( \"click\", function( event ) {\n  event.preventDefault();\n});</pre> </div> <div class=\"entry-example\" id=\"example-2\"> <p>Bind custom events with .live().</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).live( \"myCustomEvent\", function( event, myName, myValue ) {\n  $( this ).text( \"Hi there!\" );\n  $( \"span\" )\n    .stop()\n    .css( \"opacity\", 1 )\n    .text( \"myName = \" + myName )\n    .fadeIn( 30 )\n    .fadeOut( 1000 );\n  });\n$( \"button\" ).click(function() {\n  $( \"p\" ).trigger( \"myCustomEvent\" );\n});</pre> </div> <div class=\"entry-example\" id=\"example-3\"> <p>Use an object to bind multiple live event handlers. Note that .live() calls the click, mouseover, and mouseout event handlers for all paragraphs--even new ones.</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).live({\n  click: function() {\n    $( this ).after( \"&lt;p&gt;Another paragraph!&lt;/p&gt;\" );\n  },\n  mouseover: function() {\n    $( this ).addClass( \"over\" );\n  },\n  mouseout: function() {\n    $( this ).removeClass( \"over\" );\n  }\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/live\" class=\"_attribution-link\">https://api.jquery.com/live</a>\n  </p>\n</div>\n","last-of-type-selector":"<h1 class=\"entry-title\">:last-of-type Selector</h1> <div class=\"entry-content\"> <article id=\"last-of-type1\" class=\"entry selector\"><h2 class=\"section-title\"><span>last-of-type selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all elements that are the last among siblings of the same element name.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.9/\">1.9</a></span>jQuery( \":last-of-type\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>:last-of-type</code> selector matches elements that have no other element with the same parent and the same element name coming after it in the document tree.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Find the last span in each matched div and add some css plus a hover state.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;last-of-type demo&lt;/title&gt;\n  &lt;style&gt;\n  span.solast {\n    text-decoration: line-through;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;\n  &lt;span&gt;Corey,&lt;/span&gt;\n  &lt;span&gt;Yehuda,&lt;/span&gt;\n  &lt;span&gt;Adam,&lt;/span&gt;\n  &lt;span&gt;Todd&lt;/span&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;span&gt;Jörn,&lt;/span&gt;\n  &lt;span&gt;Scott,&lt;/span&gt;\n  &lt;span&gt;Timo,&lt;/span&gt;\n  &lt;b&gt;Nobody&lt;/b&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\n$( \"span:last-of-type\" )\n  .css({ color:\"red\", fontSize:\"80%\" })\n  .hover(function() {\n    $( this ).addClass( \"solast\" );\n  }, function() {\n    $( this ).removeClass( \"solast\" );\n  });\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/last-of-type-selector\" class=\"_attribution-link\">https://api.jquery.com/last-of-type-selector</a>\n  </p>\n</div>\n","load":"<h1 class=\"entry-title\">.load()</h1> <div class=\"entry-content\"> <article id=\"load1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.load( url [, data ] [, complete ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Load data from the server and place the returned HTML into the matched element.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"load-url-data-complete\" href=\"#load-url-data-complete\">.load( url [, data ] [, complete ] )</a> </h4> <ul> <li> <div><strong>url</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing the URL to which the request is sent.</div> </li> <li> <div><strong>data</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> or <a href=\"types#String\">String</a> </div> <div>A plain object or string that is sent to the server with the request.</div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#String\">String</a> responseText, <a href=\"types#String\">String</a> textStatus, <a href=\"types#jqXHR\">jqXHR</a> jqXHR )</div> <div>A callback function that is executed when the request completes.</div> </li> </ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <div class=\"warning\"> <p>Note: The event handling suite also has a method named <code><a href=\"load-event\">.load()</a></code>. jQuery determines which method to fire based on the set of arguments passed to it.</p> </div> <p>This method is the simplest way to fetch data from the server. It is roughly equivalent to <code>$.get(url, data, success)</code> except that it is a method rather than global function and it has an implicit callback function. When a successful response is detected (i.e. when <code>textStatus</code> is \"success\" or \"notmodified\"), <code>.load()</code> sets the HTML contents of the matched element to the returned data. This means that most uses of the method can be quite simple:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#result\" ).load( \"ajax/test.html\" );</pre> <p>If no element is matched by the selector — in this case, if the document does not contain an element with id=\"result\" — the Ajax request will <em>not</em> be sent.</p> <h4 id=\"callback-function\">Callback Function</h4> <p>If a \"complete\" callback is provided, it is executed after post-processing and HTML insertion has been performed. The callback is fired once for each element in the jQuery collection, and <code>this</code> is set to each DOM element in turn.</p> <pre class=\"syntaxhighlighter javascript\">$( \"#result\" ).load( \"ajax/test.html\", function() {\n  alert( \"Load was performed.\" );\n});</pre> <p>In the two examples above, if the current document does not contain an element with an ID of \"result,\" the <code>.load()</code> method is not executed.</p> <h4 id=\"request-method\">Request Method</h4> <p>The POST method is used if data is provided as an object; otherwise, GET is assumed.</p> <h4 id=\"loading-page-fragments\">Loading Page Fragments</h4> <p>The <code>.load()</code> method, unlike <code><a href=\"jquery.get\">$.get()</a></code>, allows us to specify a portion of the remote document to be inserted. This is achieved with a special syntax for the <code>url</code> parameter. If one or more space characters are included in the string, the portion of the string following the first space is assumed to be a jQuery selector that determines the content to be loaded. </p> <p>We could modify the example above to use only part of the document that is fetched:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#result\" ).load( \"ajax/test.html #container\" );</pre> <p>When this method executes, it retrieves the content of <code>ajax/test.html</code>, but then jQuery parses the returned document to find the element with an ID of <code>container</code>. This element, along with its contents, is inserted into the element with an ID of <code>result</code>, and the rest of the retrieved document is discarded.</p> <p>jQuery uses the browser's <code>.innerHTML</code> property to parse the retrieved document and insert it into the current document. During this process, browsers often filter elements from the document such as <code>&lt;html&gt;</code>, <code>&lt;title&gt;</code>, or <code>&lt;head&gt;</code> elements. As a result, the elements retrieved by <code>.load()</code> may not be exactly the same as if the document were retrieved directly by the browser.</p> <h4 id=\"script-execution\">Script Execution</h4> <p> When calling <code>.load()</code> using a URL without a suffixed selector expression, the content is passed to <code>.html()</code> prior to scripts being removed. This executes the script blocks before they are discarded. If <code>.load()</code> is called with a selector expression appended to the URL, however, the scripts are stripped out prior to the DOM being updated, and thus are <em>not</em> executed. An example of both cases can be seen below:</p> <p>Here, any JavaScript loaded into <code>#a</code> as a part of the document will successfully execute.</p> <pre class=\"syntaxhighlighter javascript\">$( \"#a\" ).load( \"article.html\" );</pre> <p>However, in the following case, script blocks in the document being loaded into <code>#b</code> are stripped out and not executed:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#b\" ).load( \"article.html #target\" );</pre> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> Due to browser security restrictions, most \"Ajax\" requests are subject to the <a title=\"Same Origin Policy on Wikipedia\" href=\"http://en.wikipedia.org/wiki/Same_origin_policy\">same origin policy</a>; the request can not successfully retrieve data from a different domain, subdomain, port, or protocol. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Load another page's list items into an ordered list.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;load demo&lt;/title&gt;\n  &lt;style&gt;\n  body {\n    font-size: 12px;\n    font-family: Arial;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;b&gt;Projects:&lt;/b&gt;\n&lt;ol id=\"new-projects\"&gt;&lt;/ol&gt;\n \n&lt;script&gt;\n$( \"#new-projects\" ).load( \"/resources/load.html #projects li\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Display a notice if the Ajax request encounters an error.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;load demo&lt;/title&gt;\n  &lt;style&gt;\n  body {\n    font-size: 12px;\n    font-family: Arial;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;b&gt;Successful Response (should be blank):&lt;/b&gt;\n&lt;div id=\"success\"&gt;&lt;/div&gt;\n&lt;b&gt;Error Response:&lt;/b&gt;\n&lt;div id=\"error\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"#success\" ).load( \"/not-here.php\", function( response, status, xhr ) {\n  if ( status == \"error\" ) {\n    var msg = \"Sorry but there was an error: \";\n    $( \"#error\" ).html( msg + xhr.status + \" \" + xhr.statusText );\n  }\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-2\"> <p>Load the feeds.html file into the div with the ID of feeds.</p> <pre class=\"syntaxhighlighter javascript\">$( \"#feeds\" ).load( \"feeds.html\" );</pre> <h4>Result:</h4> <pre class=\"syntaxhighlighter xml\">&lt;div id=\"feeds\"&gt;&lt;b&gt;45&lt;/b&gt; feeds found.&lt;/div&gt;</pre> </div> <div class=\"entry-example\" id=\"example-3\"> <p>pass arrays of data to the server.</p> <pre class=\"syntaxhighlighter javascript\">$( \"#objectID\" ).load( \"test.php\", { \"choices[]\": [ \"Jon\", \"Susan\" ] } );</pre> </div> <div class=\"entry-example\" id=\"example-4\"> <p>Same as above, but will POST the additional parameters to the server and a callback that is executed when the server is finished responding.</p> <pre class=\"syntaxhighlighter javascript\">$( \"#feeds\" ).load( \"feeds.php\", { limit: 25 }, function() {\n  alert( \"The last 25 entries in the feed have been loaded\" );\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/load\" class=\"_attribution-link\">https://api.jquery.com/load</a>\n  </p>\n</div>\n","load-event":"<h1 class=\"entry-title\">.load()</h1> <div class=\"entry-content\"> <article id=\"load1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.load( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span><span class=\"version-details\">version deprecated: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Bind an event handler to the \"load\" JavaScript event.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"load-handler\" href=\"#load-handler\">.load( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute when the event is triggered.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"load-eventData-handler\" href=\"#load-eventData-handler\">.load( [eventData ], handler )</a> </h4> <ul> <li> <div><strong>eventData</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>An object containing data that will be passed to the event handler.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method is a shortcut for <code>.on( \"load\", handler )</code>.</p> <p>The <code>load</code> event is sent to an element when it and all sub-elements have been completely loaded. This event can be sent to any element associated with a URL: images, scripts, frames, iframes, and the <code>window</code> object.</p> <p>For example, consider a page with a simple image:</p> <pre class=\"syntaxhighlighter xml\">&lt;img src=\"book.png\" alt=\"Book\" id=\"book\"&gt;</pre> <p>The event handler can be bound to the image:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#book\" ).load(function() {\n  // Handler for .load() called.\n});</pre> <p>As soon as the image has been loaded, the handler is called.</p> <p>In general, it is not necessary to wait for all images to be fully loaded. If code can be executed earlier, it is usually best to place it in a handler sent to the <code>.ready()</code> method. </p> <div class=\"warning\"> <p>The Ajax module also has a method named <code><a href=\"load\">.load()</a></code>. Which one is fired depends on the set of arguments passed.</p> </div> <div class=\"warning\"> <p> <b>Caveats of the <code>load</code> event when used with images</b> </p>\n<p>A common challenge developers attempt to solve using the <code>.load()</code> shortcut is to execute a function when an image (or collection of images) have completely loaded. There are several known caveats with this that should be noted. These are:</p> <ul> <li>It doesn't work consistently nor reliably cross-browser</li> <li>It doesn't fire correctly in WebKit if the image src is set to the same src as before</li> <li>It doesn't correctly bubble up the DOM tree</li> <li>Can cease to fire for images that already live in the browser's cache</li> </ul>  </div> <div class=\"warning\"> <p><strong>Note:</strong> The <code>.live()</code> and <code>.delegate()</code> methods cannot be used to detect the <code>load</code> event of an iframe. The load event does not correctly bubble up the parent document and the event.target isn't set by Firefox, IE9 or Chrome, which is required to do event delegation.</p> </div> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Run a function when the page is fully loaded including graphics.</p> <pre class=\"syntaxhighlighter javascript\">$( window ).load(function() {\n  // Run code\n});</pre> </div> <div class=\"entry-example\" id=\"example-1\"> <p>Add the class bigImg to all images with height greater than 100 upon each image load.</p> <pre class=\"syntaxhighlighter javascript\">$( \"img.userIcon\" ).load(function() {\n  if ( $( this ).height() &gt; 100) {\n    $( this ).addClass( \"bigImg\" );\n  }\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/load-event\" class=\"_attribution-link\">https://api.jquery.com/load-event</a>\n  </p>\n</div>\n","map":"<h1 class=\"entry-title\">.map()</h1> <div class=\"entry-content\"> <article id=\"map1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.map( callback )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Pass each element in the current matched set through a function, producing a new jQuery object containing the return values.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2/\">1.2</a></span><a id=\"map-callback\" href=\"#map-callback\">.map( callback )</a> </h4> <ul><li> <div><strong>callback</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Integer\">Integer</a> index, <a href=\"types#Element\">Element</a> domElement ) =&gt; <a href=\"types#Object\">Object</a> </div> <div>A function object that will be invoked for each element in the current set.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>If you wish to process a plain array or object, use the <a href=\"jquery.map\">jQuery.map()</a> instead. </p> <p>As the return value is a jQuery object, which contains an array, it's very common to call <code>.get()</code> on the result to work with a basic array.</p> <p>The <code>.map()</code> method is particularly useful for getting or setting the value of a collection of elements. Consider a form with a set of checkboxes in it:</p> <pre class=\"syntaxhighlighter xml\">&lt;form method=\"post\" action=\"\"&gt;\n  &lt;fieldset&gt;\n    &lt;div&gt;\n      &lt;label for=\"two\"&gt;2&lt;/label&gt;\n      &lt;input type=\"checkbox\" value=\"2\" id=\"two\" name=\"number[]\"&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n      &lt;label for=\"four\"&gt;4&lt;/label&gt;\n      &lt;input type=\"checkbox\" value=\"4\" id=\"four\" name=\"number[]\"&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n      &lt;label for=\"six\"&gt;6&lt;/label&gt;\n      &lt;input type=\"checkbox\" value=\"6\" id=\"six\" name=\"number[]\"&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n      &lt;label for=\"eight\"&gt;8&lt;/label&gt;\n      &lt;input type=\"checkbox\" value=\"8\" id=\"eight\" name=\"number[]\"&gt;\n    &lt;/div&gt;\n  &lt;/fieldset&gt;\n&lt;/form&gt;</pre> <p>To get a comma-separated list of checkbox <code>ID</code>s:</p> <pre class=\"syntaxhighlighter javascript\">$( \":checkbox\" )\n  .map(function() {\n    return this.id;\n  })\n  .get()\n  .join();</pre> <p>The result of this call is the string, <code>\"two,four,six,eight\"</code>.</p> <p>Within the callback function, <code>this</code> refers to the current DOM element for each iteration. The function can return an individual data item or an array of data items to be inserted into the resulting set. If an array is returned, the elements inside the array are inserted into the set. If the function returns <code>null</code> or <code>undefined</code>, no element will be inserted.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Build a list of all the values within a form.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;map demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;&lt;b&gt;Values: &lt;/b&gt;&lt;/p&gt;\n&lt;form&gt;\n  &lt;input type=\"text\" name=\"name\" value=\"John\"&gt;\n  &lt;input type=\"text\" name=\"password\" value=\"password\"&gt;\n  &lt;input type=\"text\" name=\"url\" value=\"http://ejohn.org/\"&gt;\n&lt;/form&gt;\n \n&lt;script&gt;\n$( \"p\" )\n  .append( $( \"input\" ).map(function() {\n    return $( this ).val();\n  })\n  .get()\n  .join( \", \" ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>A contrived example to show some functionality.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;map demo&lt;/title&gt;\n  &lt;style&gt;\n  body {\n    font-size: 16px;\n  }\n  ul {\n    float: left;\n    margin: 0 30px;\n    color: blue;\n  }\n  #results {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;ul&gt;\n  &lt;li&gt;First&lt;/li&gt;\n  &lt;li&gt;Second&lt;/li&gt;\n  &lt;li&gt;Third&lt;/li&gt;\n  &lt;li&gt;Fourth&lt;/li&gt;\n  &lt;li&gt;Fifth&lt;/li&gt;\n&lt;/ul&gt;\n&lt;ul id=\"results\"&gt;\n&lt;/ul&gt;\n \n&lt;script&gt;\nvar mappedItems = $( \"li\" ).map(function( index ) {\n  var replacement = $( \"&lt;li&gt;\" ).text( $( this ).text() ).get( 0 );\n  if ( index === 0 ) {\n \n    // Make the first item all caps\n    $( replacement ).text( $( replacement ).text().toUpperCase() );\n  } else if ( index === 1 || index === 3 ) {\n \n    // Delete the second and fourth items\n    replacement = null;\n  } else if ( index === 2 ) {\n \n    // Make two of the third item and add some text\n    replacement = [ replacement, $( \"&lt;li&gt;\" ).get( 0 ) ];\n    $( replacement[ 0 ] ).append( \"&lt;b&gt; - A&lt;/b&gt;\" );\n    $( replacement[ 1 ] ).append( \"Extra &lt;b&gt; - B&lt;/b&gt;\" );\n  }\n \n  // Replacement will be a dom element, null,\n  // or an array of dom elements\n  return replacement;\n});\n$( \"#results\" ).append( mappedItems );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-2\"> <p>Equalize the heights of the divs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;map demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    width: 40px;\n    float: left;\n  }\n  input {\n    clear: left;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;input type=\"button\" value=\"equalize div heights\"&gt;\n&lt;div style=\"background: red; height: 40px; \"&gt;&lt;/div&gt;\n&lt;div style=\"background: green; height: 70px;\"&gt;&lt;/div&gt;\n&lt;div style=\"background: blue; height: 50px; \"&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$.fn.equalizeHeights = function() {\n  var maxHeight = this.map(function( i, e ) {\n    return $( e ).height();\n  }).get();\n  return this.height( Math.max.apply( this, maxHeight ) );\n};\n \n$( \"input\" ).click(function() {\n  $( \"div\" ).equalizeHeights();\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/map\" class=\"_attribution-link\">https://api.jquery.com/map</a>\n  </p>\n</div>\n","lt-selector":"<h1 class=\"entry-title\">:lt() Selector</h1> <div class=\"entry-content\"> <article id=\"lt1\" class=\"entry selector\"><h2 class=\"section-title\"><span>lt selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Select all elements at an index less than <code>index</code> within the matched set.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \":lt(index)\" )</h4> <p class=\"argument\"><strong>index: </strong>Zero-based index.</p> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a></span>jQuery( \":lt(-index)\" )</h4> <p class=\"argument\"><strong>indexFromEnd: </strong>Zero-based index, counting backwards from the last element. </p> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p> <strong>index-related selectors</strong> </p> <p>The index-related selectors (including this \"less than\" selector) filter the set of elements that have matched the expressions that precede them. They narrow the set down based on the order of the elements within this matched set. For example, if elements are first selected with a class selector (<code>.myclass</code>) and four elements are returned, these elements are given indices 0 through 3 for the purposes of these selectors.</p> <p>Note that since JavaScript arrays use <em>0-based indexing</em>, these selectors reflect that fact. This is why <code>$( \".myclass:lt(1)\" )</code> selects the first element in the document with the class <code>myclass</code>, rather than selecting no elements. In contrast, <code>:nth-child(n)</code> uses <em>1-based indexing</em> to conform to the CSS specification.</p> <p>Prior to jQuery 1.8, the <code>:lt(index)</code> selector did <em>not</em> accept a negative value for <code>index</code></p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> Because <code>:lt()</code> is a jQuery extension and not part of the CSS specification, queries using <code>:lt()</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. For better performance in modern browsers, use <code>$(\"your-pure-css-selector\").slice(0, index)</code> instead. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Give TDs less than the one with the 4th index (TD#4) a yellow background and TDs less than the one with -2nd index a red text color.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;lt demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;table border=\"1\"&gt;\n  &lt;tr&gt;&lt;td&gt;TD #0&lt;/td&gt;&lt;td&gt;TD #1&lt;/td&gt;&lt;td&gt;TD #2&lt;/td&gt;&lt;/tr&gt;\n  &lt;tr&gt;&lt;td&gt;TD #3&lt;/td&gt;&lt;td&gt;TD #4&lt;/td&gt;&lt;td&gt;TD #5&lt;/td&gt;&lt;/tr&gt;\n  &lt;tr&gt;&lt;td&gt;TD #6&lt;/td&gt;&lt;td&gt;TD #7&lt;/td&gt;&lt;td&gt;TD #8&lt;/td&gt;&lt;/tr&gt;\n&lt;/table&gt;\n \n&lt;script&gt;\n$( \"td:lt(4)\" ).css( \"backgroundColor\", \"yellow\" );\n$( \"td:lt(-2)\" ).css( \"color\", \"red\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/lt-selector\" class=\"_attribution-link\">https://api.jquery.com/lt-selector</a>\n  </p>\n</div>\n","mousedown":"<h1 class=\"entry-title\">.mousedown()</h1> <div class=\"entry-content\"> <article id=\"mousedown1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.mousedown( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Bind an event handler to the \"mousedown\" JavaScript event, or trigger that event on an element.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"mousedown-handler\" href=\"#mousedown-handler\">.mousedown( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"mousedown-eventData-handler\" href=\"#mousedown-eventData-handler\">.mousedown( [eventData ], handler )</a> </h4> <ul> <li> <div><strong>eventData</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>An object containing data that will be passed to the event handler.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"mousedown\" href=\"#mousedown\">.mousedown()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method is a shortcut for <code>.on( \"mousedown\", handler)</code> in the first variation, and <code>.trigger( \"mousedown\" )</code> in the second.</p> <p>The <code>mousedown</code> event is sent to an element when the mouse pointer is over the element, and the mouse button is pressed. Any HTML element can receive this event.</p> <p>For example, consider the HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;div id=\"target\"&gt;\n  Click here\n&lt;/div&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;/div&gt;</pre> <figure> <img src=\"https://api.jquery.com/resources/0042_05_01.png\" alt=\"\"> <figcaption>Figure 1 - Illustration of the rendered HTML</figcaption> </figure> <p>The event handler can be bound to any <code>&lt;div&gt;</code>:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#target\" ).mousedown(function() {\n  alert( \"Handler for .mousedown() called.\" );\n});</pre> <p>Now if we click on this element, the alert is displayed:</p> <p> <samp>Handler for .mousedown() called.</samp> </p> <p>We can also trigger the event when a different element is clicked:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#other\" ).click(function() {\n  $( \"#target\" ).mousedown();\n});</pre> <p>After this code executes, clicks on <samp>Trigger the handler</samp> will also alert the message.</p> <p>The <code>mousedown</code> event is sent when any mouse button is clicked. To act only on specific buttons, we can use the event object's <code>which </code>property. Not all browsers support this property (Internet Explorer uses button instead), but jQuery normalizes the property so that it is safe to use in any browser. The value of <code>which</code> will be 1 for the left button, 2 for the middle button, or 3 for the right button.</p> <p>This event is primarily useful for ensuring that the primary button was used to begin a drag operation; if ignored, strange results can occur when the user attempts to use a context menu. While the middle and right buttons can be detected with these properties, this is not reliable. In Opera and Safari, for example, right mouse button clicks are not detectable by default.</p> <p>If the user clicks on an element, drags away from it, and releases the button, this is still counted as a <code>mousedown</code> event. This sequence of actions is treated as a \"canceling\" of the button press in most user interfaces, so it is usually better to use the <code>click</code> event unless we know that the <code>mousedown</code> event is preferable for a particular situation.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> As the <code>.mousedown()</code> method is just a shorthand for <code>.on( \"mousedown\", handler )</code>, detaching is possible using <code>.off( \"mousedown\" )</code>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Show texts when mouseup and mousedown event triggering.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;mousedown demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Press mouse and release here.&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" )\n  .mouseup(function() {\n    $( this ).append( \"&lt;span style='color:#f00;'&gt;Mouse up.&lt;/span&gt;\" );\n  })\n  .mousedown(function() {\n    $( this ).append( \"&lt;span style='color:#00f;'&gt;Mouse down.&lt;/span&gt;\" );\n  });\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/mousedown\" class=\"_attribution-link\">https://api.jquery.com/mousedown</a>\n  </p>\n</div>\n","mousemove":"<h1 class=\"entry-title\">.mousemove()</h1> <div class=\"entry-content\"> <article id=\"mousemove1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.mousemove( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Bind an event handler to the \"mousemove\" JavaScript event, or trigger that event on an element.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"mousemove-handler\" href=\"#mousemove-handler\">.mousemove( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"mousemove-eventData-handler\" href=\"#mousemove-eventData-handler\">.mousemove( [eventData ], handler )</a> </h4> <ul> <li> <div><strong>eventData</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>An object containing data that will be passed to the event handler.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"mousemove\" href=\"#mousemove\">.mousemove()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method is a shortcut for <code>.on( \"mousemove\", handler )</code> in the first two variations, and <code>.trigger( \"mousemove\" )</code> in the third.</p> <p>The <code>mousemove</code> event is sent to an element when the mouse pointer moves inside the element. Any HTML element can receive this event.</p> <p>For example, consider the HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;div id=\"target\"&gt;\n  Move here\n&lt;/div&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;/div&gt;\n&lt;div id=\"log\"&gt;&lt;/div&gt;</pre> <p>The event handler can be bound to the target:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#target\" ).mousemove(function( event ) {\n  var msg = \"Handler for .mousemove() called at \";\n  msg += event.pageX + \", \" + event.pageY;\n  $( \"#log\" ).append( \"&lt;div&gt;\" + msg + \"&lt;/div&gt;\" );\n});</pre> <p>Now when the mouse pointer moves within the target button, the messages are appended to &lt;div id=\"log\"&gt;:</p> <p> <samp>Handler for .mousemove() called at (399, 48)</samp> <br> <samp>Handler for .mousemove() called at (398, 46)</samp> <br> <samp>Handler for .mousemove() called at (397, 44)</samp> <br> <samp>Handler for .mousemove() called at (396, 42)</samp> <br> </p> <p>To trigger the event manually, apply <code>.mousemove()</code> without an argument:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#other\" ).click(function() {\n  $( \"#target\" ).mousemove();\n});</pre> <p>After this code executes, clicks on the Trigger button will also append the message:</p> <p> <samp>Handler for .mousemove() called at (undefined, undefined)</samp> </p> <p>When tracking mouse movement, you usually need to know the actual position of the mouse pointer. The event object that is passed to the handler contains some information about the mouse coordinates. Properties such as <code>.clientX</code>, <code>.offsetX</code>, and <code>.pageX</code> are available, but support for them differs between browsers. Fortunately, jQuery normalizes the <code>.pageX</code> and <code>.pageY</code> properties so that they can be used in all browsers. These properties provide the X and Y coordinates of the mouse pointer relative to the top-left corner of the document, as illustrated in the example output above.</p> <p>Keep in mind that the <code>mousemove</code> event is triggered whenever the mouse pointer moves, even for a pixel. This means that hundreds of events can be generated over a very small amount of time. If the handler has to do any significant processing, or if multiple handlers for the event exist, this can be a serious performance drain on the browser. It is important, therefore, to optimize <code>mousemove </code>handlers as much as possible, and to unbind them as soon as they are no longer needed.</p> <p>A common pattern is to bind the <code>mousemove</code> handler from within a <code>mousedown</code> hander, and to unbind it from a corresponding <code>mouseup</code> handler. If implementing this sequence of events, remember that the <code>mouseup</code> event might be sent to a different HTML element than the <code>mousemove</code> event was. To account for this, the <code>mouseup</code> handler should typically be bound to an element high up in the DOM tree, such as <code>&lt;body&gt;</code>.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> As the <code>.mousemove()</code> method is just a shorthand for <code>.on( \"mousemove\", handler )</code>, detaching is possible using <code>.off( \"mousemove\" )</code>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Show the mouse coordinates when the mouse is moved over the yellow div. Coordinates are relative to the window, which in this case is the iframe.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;mousemove demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    width: 220px;\n    height: 170px;\n    margin: 10px 50px 10px 10px;\n    background: yellow;\n    border: 2px groove;\n    float: right;\n  }\n  p {\n    margin: 0;\n    margin-left: 10px;\n    color: red;\n    width: 220px;\n    height: 120px;\n    padding-top: 70px;\n    float: left;\n    font-size: 14px;\n  }\n  span {\n    display: block;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;\n  &lt;span&gt;Move the mouse over the div.&lt;/span&gt;\n  &lt;span&gt;&amp;nbsp;&lt;/span&gt;\n&lt;/p&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"div\" ).mousemove(function( event ) {\n  var pageCoords = \"( \" + event.pageX + \", \" + event.pageY + \" )\";\n  var clientCoords = \"( \" + event.clientX + \", \" + event.clientY + \" )\";\n  $( \"span:first\" ).text( \"( event.pageX, event.pageY ) : \" + pageCoords );\n  $( \"span:last\" ).text( \"( event.clientX, event.clientY ) : \" + clientCoords );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/mousemove\" class=\"_attribution-link\">https://api.jquery.com/mousemove</a>\n  </p>\n</div>\n","mouseenter":"<h1 class=\"entry-title\">.mouseenter()</h1> <div class=\"entry-content\"> <article id=\"mouseenter1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.mouseenter( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Bind an event handler to be fired when the mouse enters an element, or trigger that handler on an element.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"mouseenter-handler\" href=\"#mouseenter-handler\">.mouseenter( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"mouseenter-eventData-handler\" href=\"#mouseenter-eventData-handler\">.mouseenter( [eventData ], handler )</a> </h4> <ul> <li> <div><strong>eventData</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>An object containing data that will be passed to the event handler.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"mouseenter\" href=\"#mouseenter\">.mouseenter()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method is a shortcut for <code>.on( \"mouseenter\", handler )</code> in the first two variations, and <code>.trigger( \"mouseenter\" )</code> in the third.</p> <p>The <code>mouseenter</code> JavaScript event is proprietary to Internet Explorer. Because of the event's general utility, jQuery simulates this event so that it can be used regardless of browser. This event is sent to an element when the mouse pointer enters the element. Any HTML element can receive this event.</p> <p>For example, consider the HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;div id=\"outer\"&gt;\n  Outer\n  &lt;div id=\"inner\"&gt;\n    Inner\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;/div&gt;\n&lt;div id=\"log\"&gt;&lt;/div&gt;</pre> <figure> <img src=\"https://api.jquery.com/resources/0042_05_08.png\" alt=\"\"> <figcaption>Figure 1 - Illustration of the rendered HTML</figcaption> </figure> <p>The event handler can be bound to any element:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#outer\" ).mouseenter(function() {\n  $( \"#log\" ).append( \"&lt;div&gt;Handler for .mouseenter() called.&lt;/div&gt;\" );\n});</pre> <p>Now when the mouse pointer moves over the <samp>Outer</samp> <code>&lt;div&gt;</code>, the message is appended to <code>&lt;div id=\"log\"&gt;</code>. You can also trigger the event when another element is clicked:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#other\" ).click(function() {\n  $( \"#outer\" ).mouseenter();\n});</pre> <p>After this code executes, clicks on <samp>Trigger the handler</samp> will also append the message.</p> <p>The <code>mouseenter</code> event differs from <code>mouseover</code> in the way it handles event bubbling. If <code>mouseover</code> were used in this example, then when the mouse pointer moved over the <samp>Inner</samp> element, the handler would be triggered. This is usually undesirable behavior. The <code>mouseenter</code> event, on the other hand, only triggers its handler when the mouse enters the element it is bound to, not a descendant. So in this example, the handler is triggered when the mouse enters the <samp>Outer</samp> element, but not the <samp>Inner</samp> element.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> As the <code>.mouseenter()</code> method is just a shorthand for <code>.on( \"mouseenter\", handler )</code>, detaching is possible using <code>.off( \"mouseenter\" )</code>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Show texts when mouseenter and mouseout event triggering. <code>mouseover</code> fires when the pointer moves into the child element as well, while <code>mouseenter</code> fires only when the pointer moves into the bound element.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;mouseenter demo&lt;/title&gt;\n  &lt;style&gt;\n  div.out {\n    width: 40%;\n    height: 120px;\n    margin: 0 15px;\n    background-color: #d6edfc;\n    float: left;\n  }\n  div.in {\n    width: 60%;\n    height: 60%;\n    background-color: #fc0;\n    margin: 10px auto;\n  }\n  p {\n    line-height: 1em;\n    margin: 0;\n    padding: 0;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div class=\"out overout\"&gt;\n  &lt;p&gt;move your mouse&lt;/p&gt;\n  &lt;div class=\"in overout\"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;\n  &lt;p&gt;0&lt;/p&gt;\n&lt;/div&gt;\n \n&lt;div class=\"out enterleave\"&gt;\n  &lt;p&gt;move your mouse&lt;/p&gt;\n  &lt;div class=\"in enterleave\"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;\n  &lt;p&gt;0&lt;/p&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\nvar i = 0;\n$( \"div.overout\" )\n  .mouseover(function() {\n    $( \"p:first\", this ).text( \"mouse over\" );\n    $( \"p:last\", this ).text( ++i );\n  })\n  .mouseout(function() {\n    $( \"p:first\", this ).text( \"mouse out\" );\n  });\n \nvar n = 0;\n$( \"div.enterleave\" )\n  .mouseenter(function() {\n    $( \"p:first\", this ).text( \"mouse enter\" );\n    $( \"p:last\", this ).text( ++n );\n  })\n  .mouseleave(function() {\n    $( \"p:first\", this ).text( \"mouse leave\" );\n  });\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/mouseenter\" class=\"_attribution-link\">https://api.jquery.com/mouseenter</a>\n  </p>\n</div>\n","mouseleave":"<h1 class=\"entry-title\">.mouseleave()</h1> <div class=\"entry-content\"> <article id=\"mouseleave1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.mouseleave( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Bind an event handler to be fired when the mouse leaves an element, or trigger that handler on an element.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"mouseleave-handler\" href=\"#mouseleave-handler\">.mouseleave( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"mouseleave-eventData-handler\" href=\"#mouseleave-eventData-handler\">.mouseleave( [eventData ], handler )</a> </h4> <ul> <li> <div><strong>eventData</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>An object containing data that will be passed to the event handler.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"mouseleave\" href=\"#mouseleave\">.mouseleave()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method is a shortcut for <code>.on('mouseleave', handler)</code> in the first two variations, and <code>.trigger('mouseleave')</code> in the third.</p> <p>The <code>mouseleave</code> JavaScript event is proprietary to Internet Explorer. Because of the event's general utility, jQuery simulates this event so that it can be used regardless of browser. This event is sent to an element when the mouse pointer leaves the element. Any HTML element can receive this event.</p> <p>For example, consider the HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;div id=\"outer\"&gt;\n  Outer\n  &lt;div id=\"inner\"&gt;\n    Inner\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;/div&gt;\n&lt;div id=\"log\"&gt;&lt;/div&gt;</pre> <figure> <img src=\"https://api.jquery.com/resources/0042_05_09.png\" alt=\"\"> <figcaption>Figure 1 - Illustration of the rendered HTML</figcaption> </figure> <p>The event handler can be bound to any element:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#outer\" ).mouseleave(function() {\n  $( \"#log\" ).append( \"&lt;div&gt;Handler for .mouseleave() called.&lt;/div&gt;\" );\n});</pre> <p>Now when the mouse pointer moves out of the <samp>Outer</samp> <code>&lt;div&gt;</code>, the message is appended to <code>&lt;div id=\"log\"&gt;</code>. You can also trigger the event when another element is clicked:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#other\" ).click(function() {\n  $( \"#outer\" ).mouseleave();\n});</pre> <p>After this code executes, clicks on <samp>Trigger the handler</samp> will also append the message.</p> <p>The <code>mouseleave</code> event differs from <code>mouseout</code> in the way it handles event bubbling. If <code>mouseout</code> were used in this example, then when the mouse pointer moved out of the <samp>Inner</samp> element, the handler would be triggered. This is usually undesirable behavior. The <code>mouseleave</code> event, on the other hand, only triggers its handler when the mouse leaves the element it is bound to, not a descendant. So in this example, the handler is triggered when the mouse leaves the <samp>Outer</samp> element, but not the <samp>Inner</samp> element.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> As the <code>.mouseleave()</code> method is just a shorthand for <code>.on( \"mouseleave\", handler )</code>, detaching is possible using <code>.off( \"mouseleave\" )</code>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Show number of times mouseout and mouseleave events are triggered. <code>mouseout</code> fires when the pointer moves out of child element as well, while <code>mouseleave</code> fires only when the pointer moves out of the bound element.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;mouseleave demo&lt;/title&gt;\n  &lt;style&gt;\n  div.out {\n    width: 40%;\n    height: 120px;\n    margin: 0 15px;\n    background-color: #d6edfc;\n    float: left;\n  }\n  div.in {\n    width: 60%;\n    height: 60%;\n    background-color: #fc0;\n    margin: 10px auto;\n  }\n  p {\n    line-height: 1em;\n    margin: 0;\n    padding: 0;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div class=\"out overout\"&gt;\n  &lt;p&gt;move your mouse&lt;/p&gt;\n  &lt;div class=\"in overout\"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;\n  &lt;p&gt;0&lt;/p&gt;\n&lt;/div&gt;\n&lt;div class=\"out enterleave\"&gt;\n  &lt;p&gt;move your mouse&lt;/p&gt;\n  &lt;div class=\"in enterleave\"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;\n  &lt;p&gt;0&lt;/p&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\nvar i = 0;\n$( \"div.overout\" )\n  .mouseover(function() {\n    $( \"p:first\", this ).text( \"mouse over\" );\n  })\n  .mouseout(function() {\n    $( \"p:first\", this ).text( \"mouse out\" );\n    $( \"p:last\", this ).text( ++i );\n  });\n \nvar n = 0;\n$( \"div.enterleave\" )\n  .mouseenter(function() {\n    $( \"p:first\", this ).text( \"mouse enter\" );\n  })\n  .mouseleave(function() {\n    $( \"p:first\", this ).text( \"mouse leave\" );\n    $( \"p:last\", this ).text( ++n );\n  });\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/mouseleave\" class=\"_attribution-link\">https://api.jquery.com/mouseleave</a>\n  </p>\n</div>\n","multiple-attribute-selector":"<h1 class=\"entry-title\">Multiple Attribute Selector [name=”value”][name2=”value2″]</h1> <div class=\"entry-content\"> <article id=\"attributeMultiple1\" class=\"entry selector\"><h2 class=\"section-title\"><span>attributeMultiple selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Matches elements that match all of the specified attribute filters.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \"[attributeFilter1][attributeFilter2][attributeFilterN]\" )</h4> <p class=\"argument\"><strong>attributeFilter1: </strong>An attribute filter.</p> <p class=\"argument\"><strong>attributeFilter2: </strong>Another attribute filter, reducing the selection even more</p> <p class=\"argument\"><strong>attributeFilterN: </strong>As many more attribute filters as necessary</p> </li></ul> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds all inputs that have an id attribute and whose name attribute ends with man and sets the value.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;attributeMultiple demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;input id=\"man-news\" name=\"man-news\"&gt;\n&lt;input name=\"milkman\"&gt;\n&lt;input id=\"letterman\" name=\"new-letterman\"&gt;\n&lt;input name=\"newmilk\"&gt;\n \n&lt;script&gt;\n$( \"input[id][name$='man']\" ).val( \"only this one\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/multiple-attribute-selector\" class=\"_attribution-link\">https://api.jquery.com/multiple-attribute-selector</a>\n  </p>\n</div>\n","mouseout":"<h1 class=\"entry-title\">.mouseout()</h1> <div class=\"entry-content\"> <article id=\"mouseout1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.mouseout( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Bind an event handler to the \"mouseout\" JavaScript event, or trigger that event on an element.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"mouseout-handler\" href=\"#mouseout-handler\">.mouseout( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"mouseout-eventData-handler\" href=\"#mouseout-eventData-handler\">.mouseout( [eventData ], handler )</a> </h4> <ul> <li> <div><strong>eventData</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>An object containing data that will be passed to the event handler.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"mouseout\" href=\"#mouseout\">.mouseout()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method is a shortcut for <code>.on( \"mouseout\", handler )</code> in the first two variation, and <code>.trigger( \"mouseout\" )</code> in the third.</p> <p>The <code>mouseout</code> event is sent to an element when the mouse pointer leaves the element. Any HTML element can receive this event.</p> <p>For example, consider the HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;div id=\"outer\"&gt;\n  Outer\n  &lt;div id=\"inner\"&gt;\n    Inner\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;/div&gt;\n&lt;div id=\"log\"&gt;&lt;/div&gt;</pre> <figure> <img src=\"https://api.jquery.com/resources/0042_05_07.png\" alt=\"\"> <figcaption>Figure 1 - Illustration of the rendered HTML</figcaption> </figure> <p>The event handler can be bound to any element:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#outer\" ).mouseout(function() {\n  $( \"#log\" ).append( \"Handler for .mouseout() called.\" );\n});</pre> <p>Now when the mouse pointer moves out of the <samp>Outer</samp> <code>&lt;div&gt;</code>, the message is appended to <code>&lt;div id=\"log\"&gt;</code>. To trigger the event manually, apply <code>.mouseout()</code> without an argument::</p> <pre class=\"syntaxhighlighter javascript\">$( \"#other\" ).click(function() {\n  $( \"#outer\" ).mouseout();\n});</pre> <p>After this code executes, clicks on <samp>Trigger the handler</samp> will also append the message.</p> <p>This event type can cause many headaches due to event bubbling. For instance, when the mouse pointer moves out of the <samp>Inner</samp> element in this example, a <code>mouseout</code> event will be sent to that, then trickle up to <samp>Outer</samp>. This can trigger the bound <code>mouseout</code> handler at inopportune times. See the discussion for <code>.<a href=\"mouseleave\">mouseleave</a>()</code> for a useful alternative.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> As the <code>.mouseout()</code> method is just a shorthand for <code>.on( \"mouseout\", handler )</code>, detaching is possible using <code>.off( \"mouseout\" )</code>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Show the number of times mouseout and mouseleave events are triggered. <code>mouseout</code> fires when the pointer moves out of the child element as well, while <code>mouseleave</code> fires only when the pointer moves out of the bound element.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;mouseout demo&lt;/title&gt;\n  &lt;style&gt;\n  div.out {\n    width: 40%;\n    height: 120px;\n    margin: 0 15px;\n    background-color: #d6edfc;\n    float: left;\n  }\n  div.in {\n    width: 60%;\n    height: 60%;\n    background-color: #fc0;\n    margin: 10px auto;\n  }\n  p {\n    line-height: 1em;\n    margin: 0;\n    padding: 0;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div class=\"out overout\"&gt;\n  &lt;p&gt;move your mouse&lt;/p&gt;\n  &lt;div class=\"in overout\"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;\n  &lt;p&gt;0&lt;/p&gt;\n&lt;/div&gt;\n \n&lt;div class=\"out enterleave\"&gt;\n  &lt;p&gt;move your mouse&lt;/p&gt;\n  &lt;div class=\"in enterleave\"&gt;&lt;p&gt;move your mouse&lt;/p&gt;&lt;p&gt;0&lt;/p&gt;&lt;/div&gt;\n  &lt;p&gt;0&lt;/p&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\nvar i = 0;\n$( \"div.overout\" )\n  .mouseout(function() {\n    $( \"p:first\", this ).text( \"mouse out\" );\n    $( \"p:last\", this ).text( ++i );\n  })\n  .mouseover(function() {\n    $( \"p:first\", this ).text( \"mouse over\" );\n  });\n \nvar n = 0;\n$( \"div.enterleave\" )\n  .on( \"mouseenter\", function() {\n    $( \"p:first\", this ).text( \"mouse enter\" );\n  })\n  .on( \"mouseleave\", function() {\n    $( \"p:first\", this ).text( \"mouse leave\" );\n    $( \"p:last\", this ).text( ++n );\n  });\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/mouseout\" class=\"_attribution-link\">https://api.jquery.com/mouseout</a>\n  </p>\n</div>\n","multiple-selector":"<h1 class=\"entry-title\">Multiple Selector (“selector1, selector2, selectorN”)</h1> <div class=\"entry-content\"> <article id=\"multiple1\" class=\"entry selector\"><h2 class=\"section-title\"><span>multiple selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects the combined results of all the specified selectors.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \"selector1, selector2, selectorN\" )</h4> <p class=\"argument\"><strong>selector1: </strong>Any valid selector.</p> <p class=\"argument\"><strong>selector2: </strong>Another valid selector.</p> <p class=\"argument\"><strong>selectorN: </strong>As many more valid selectors as you like.</p> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>You can specify any number of selectors to combine into a single result. This multiple expression combinator is an efficient way to select disparate elements. The order of the DOM elements in the returned jQuery object may not be identical, as they will be in document order. An alternative to this combinator is the .<a href=\"add\">add()</a> method.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds the elements that match any of these three selectors.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;multiple demo&lt;/title&gt;\n  &lt;style&gt;\n  div, span, p {\n    width: 126px;\n    height: 60px;\n    float: left;\n    padding: 3px;\n    margin: 2px;\n    background-color: #eee;\n    font-size: 14px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;div&lt;/div&gt;\n&lt;p class=\"myClass\"&gt;p class=\"myClass\"&lt;/p&gt;\n&lt;p class=\"notMyClass\"&gt;p class=\"notMyClass\"&lt;/p&gt;\n&lt;span&gt;span&lt;/span&gt;\n \n&lt;script&gt;\n$( \"div, span, p.myClass\" ).css( \"border\", \"3px solid red\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Show the order in the jQuery object.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;multiple demo&lt;/title&gt;\n  &lt;style&gt;\n  b {\n    color: red;\n    font-size: 16px;\n    display: block;\n    clear:left;\n  }\n  div, span, p {\n    width: 40px;\n    height: 40px;\n    float: left;\n    margin: 10px;\n    background-color: blue;\n    padding: 3px;\n    color: white;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;span&gt;span&lt;/span&gt;\n&lt;p&gt;p&lt;/p&gt;\n&lt;p&gt;p&lt;/p&gt;\n&lt;div&gt;div&lt;/div&gt;\n&lt;span&gt;span&lt;/span&gt;\n&lt;p&gt;p&lt;/p&gt;\n&lt;div&gt;div&lt;/div&gt;\n&lt;b&gt;&lt;/b&gt;\n \n&lt;script&gt;\nvar list = $( \"div, p, span\" )\n  .map( function() {\n    return this.tagName;\n  })\n  .get()\n  .join( \", \" );\n$( \"b\" ).append( document.createTextNode( list ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/multiple-selector\" class=\"_attribution-link\">https://api.jquery.com/multiple-selector</a>\n  </p>\n</div>\n","not-selector":"<h1 class=\"entry-title\">:not() Selector</h1> <div class=\"entry-content\"> <article id=\"not1\" class=\"entry selector\"><h2 class=\"section-title\"><span>not selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all elements that do not match the given selector.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \":not(selector)\" )</h4> <p class=\"argument\"><strong>selector: </strong>A selector with which to filter by.</p> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>All selectors are accepted inside <code>:not()</code>, for example: <code>:not(div a)</code> and <code>:not(div,a)</code>.</p> <h3>Additional Notes</h3> <p>The <code><a href=\"not\">.not()</a></code> method will end up providing you with more readable selections than pushing complex selectors or variables into a <code>:not()</code> selector filter. In most cases, it is a better choice.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds all inputs that are not checked and highlights the next sibling span. Notice there is no change when clicking the checkboxes since no click events have been linked.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;not demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;\n  &lt;input type=\"checkbox\" name=\"a\"&gt;\n  &lt;span&gt;Mary&lt;/span&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;input type=\"checkbox\" name=\"b\"&gt;\n  &lt;span&gt;lcm&lt;/span&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;input type=\"checkbox\" name=\"c\" checked=\"checked\"&gt;\n  &lt;span&gt;Peter&lt;/span&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\n$( \"input:not(:checked) + span\" ).css( \"background-color\", \"yellow\" );\n$( \"input\").attr( \"disabled\", \"disabled\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/not-selector\" class=\"_attribution-link\">https://api.jquery.com/not-selector</a>\n  </p>\n</div>\n","mouseup":"<h1 class=\"entry-title\">.mouseup()</h1> <div class=\"entry-content\"> <article id=\"mouseup1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.mouseup( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Bind an event handler to the \"mouseup\" JavaScript event, or trigger that event on an element.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"mouseup-handler\" href=\"#mouseup-handler\">.mouseup( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"mouseup-eventData-handler\" href=\"#mouseup-eventData-handler\">.mouseup( [eventData ], handler )</a> </h4> <ul> <li> <div><strong>eventData</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>An object containing data that will be passed to the event handler.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"mouseup\" href=\"#mouseup\">.mouseup()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method is a shortcut for <code>.on('mouseup', handler)</code> in the first variation, and <code>.trigger('mouseup')</code> in the second.</p> <p>The <code>mouseup</code> event is sent to an element when the mouse pointer is over the element, and the mouse button is released. Any HTML element can receive this event.</p> <p>For example, consider the HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;div id=\"target\"&gt;\n  Click here\n&lt;/div&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;/div&gt;</pre> <figure> <img src=\"https://api.jquery.com/resources/0042_05_02.png\" alt=\"\"> <figcaption>Figure 1 - Illustration of the rendered HTML</figcaption> </figure> <p>The event handler can be bound to any <code>&lt;div&gt;</code>:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#target\" ).mouseup(function() {\n  alert( \"Handler for .mouseup() called.\" );\n});</pre> <p>Now if we click on this element, the alert is displayed:</p> <p> <samp>Handler for .mouseup() called.</samp> </p> <p>We can also trigger the event when a different element is clicked:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#other\" ).click(function() {\n  $( \"#target\" ).mouseup();\n});</pre> <p>After this code executes, clicks on <samp>Trigger the handler</samp> will also alert the message.</p> <p>If the user clicks outside an element, drags onto it, and releases the button, this is still counted as a <code>mouseup</code> event. This sequence of actions is not treated as a button press in most user interfaces, so it is usually better to use the <code>click</code> event unless we know that the <code>mouseup</code> event is preferable for a particular situation.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> As the <code>.mouseup()</code> method is just a shorthand for <code>.on( \"mouseup\", handler )</code>, detaching is possible using <code>.off( \"mouseup\" )</code>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Show texts when mouseup and mousedown event triggering.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;mouseup demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Press mouse and release here.&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" )\n  .mouseup(function() {\n    $( this ).append( \"&lt;span style='color:#f00;'&gt;Mouse up.&lt;/span&gt;\" );\n  })\n  .mousedown(function() {\n    $( this ).append( \"&lt;span style='color:#00f;'&gt;Mouse down.&lt;/span&gt;\" );\n  });\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/mouseup\" class=\"_attribution-link\">https://api.jquery.com/mouseup</a>\n  </p>\n</div>\n","mouseover":"<h1 class=\"entry-title\">.mouseover()</h1> <div class=\"entry-content\"> <article id=\"mouseover1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.mouseover( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Bind an event handler to the \"mouseover\" JavaScript event, or trigger that event on an element.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"mouseover-handler\" href=\"#mouseover-handler\">.mouseover( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"mouseover-eventData-handler\" href=\"#mouseover-eventData-handler\">.mouseover( [eventData ], handler )</a> </h4> <ul> <li> <div><strong>eventData</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>An object containing data that will be passed to the event handler.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"mouseover\" href=\"#mouseover\">.mouseover()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method is a shortcut for <code>.on( \"mouseover\", handler )</code> in the first two variations, and <code>.trigger( \"mouseover\" )</code> in the third.</p> <p>The <code>mouseover</code> event is sent to an element when the mouse pointer enters the element. Any HTML element can receive this event.</p> <p>For example, consider the HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;div id=\"outer\"&gt;\n  Outer\n  &lt;div id=\"inner\"&gt;\n    Inner\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;/div&gt;\n&lt;div id=\"log\"&gt;&lt;/div&gt;</pre> <figure> <img src=\"https://api.jquery.com/resources/0042_05_06.png\" alt=\"\"> <figcaption>Figure 1 - Illustration of the rendered HTML</figcaption> </figure> <p>The event handler can be bound to any element:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#outer\" ).mouseover(function() {\n  $( \"#log\" ).append( \"&lt;div&gt;Handler for .mouseover() called.&lt;/div&gt;\" );\n});</pre> <p>Now when the mouse pointer moves over the <samp>Outer</samp> <code>&lt;div&gt;</code>, the message is appended to <code>&lt;div id=\"log\"&gt;</code>. We can also trigger the event when another element is clicked:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#other\" ).click(function() {\n  $( \"#outer\" ).mouseover();\n});</pre> <p>After this code executes, clicks on <samp>Trigger the handler</samp> will also append the message.</p> <p>This event type can cause many headaches due to event bubbling. For instance, when the mouse pointer moves over the <samp>Inner</samp> element in this example, a <code>mouseover</code> event will be sent to that, then trickle up to <samp>Outer</samp>. This can trigger our bound <code>mouseover</code> handler at inopportune times. See the discussion for <code>.mouseenter()</code> for a useful alternative.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> As the <code>.mouseover()</code> method is just a shorthand for <code>.on( \"mouseover\", handler )</code>, detaching is possible using <code>.off( \"mouseover\" )</code>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Show the number of times mouseover and mouseenter events are triggered. <code>mouseover</code> fires when the pointer moves into the child element as well, while <code>mouseenter</code> fires only when the pointer moves into the bound element.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;mouseover demo&lt;/title&gt;\n  &lt;style&gt;\n  div.out {\n    width: 40%;\n    height: 120px;\n    margin: 0 15px;\n    background-color: #d6edfc;\n    float: left;\n  }\n  div.in {\n    width: 60%;\n    height: 60%;\n    background-color: #fc0;\n    margin: 10px auto;\n  }\n  p {\n    line-height: 1em;\n    margin: 0;\n    padding: 0;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div class=\"out overout\"&gt;\n  &lt;span&gt;move your mouse&lt;/span&gt;\n  &lt;div class=\"in\"&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n \n&lt;div class=\"out enterleave\"&gt;\n  &lt;span&gt;move your mouse&lt;/span&gt;\n  &lt;div class=\"in\"&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\nvar i = 0;\n$( \"div.overout\" )\n  .mouseover(function() {\n    i += 1;\n    $( this ).find( \"span\" ).text( \"mouse over x \" + i );\n  })\n  .mouseout(function() {\n    $( this ).find( \"span\" ).text( \"mouse out \" );\n  });\n \nvar n = 0;\n$( \"div.enterleave\" )\n  .mouseenter(function() {\n    n += 1;\n    $( this ).find( \"span\" ).text( \"mouse enter x \" + n );\n  })\n  .mouseleave(function() {\n    $( this ).find( \"span\" ).text( \"mouse leave\" );\n  });\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/mouseover\" class=\"_attribution-link\">https://api.jquery.com/mouseover</a>\n  </p>\n</div>\n","next":"<h1 class=\"entry-title\">.next()</h1> <div class=\"entry-content\"> <article id=\"next1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.next( [selector ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Get the immediately following sibling of each element in the set of matched elements. If a selector is provided, it retrieves the next sibling only if it matches that selector.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"next-selector\" href=\"#next-selector\">.next( [selector ] )</a> </h4> <ul><li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> </div> <div>A string containing a selector expression to match elements against.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Given a jQuery object that represents a set of DOM elements, the <code>.next()</code> method allows us to search through the immediately following sibling of these elements in the DOM tree and construct a new jQuery object from the matching elements.</p> <p>The method optionally accepts a selector expression of the same type that we can pass to the <code>$()</code> function. If the immediately following sibling matches the selector, it remains in the newly constructed jQuery object; otherwise, it is excluded.</p> <p>Consider a page with a simple list on it:</p> <pre class=\"syntaxhighlighter xml\">&lt;ul&gt;\n  &lt;li&gt;list item 1&lt;/li&gt;\n  &lt;li&gt;list item 2&lt;/li&gt;\n  &lt;li class=\"third-item\"&gt;list item 3&lt;/li&gt;\n  &lt;li&gt;list item 4&lt;/li&gt;\n  &lt;li&gt;list item 5&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>If we begin at the third item, we can find the element which comes just after it:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li.third-item\" ).next().css( \"background-color\", \"red\" );</pre> <p>The result of this call is a red background behind item 4. Since we do not supply a selector expression, this following element is unequivocally included as part of the object. If we had supplied one, the element would be tested for a match before it was included.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Find the very next sibling of each disabled button and change its text \"this button is disabled\".</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;next demo&lt;/title&gt;\n  &lt;style&gt;\n  span {\n    color: blue;\n    font-weight: bold;\n  }\n  button {\n    width: 100px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;&lt;button disabled=\"disabled\"&gt;First&lt;/button&gt; - &lt;span&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;&lt;button&gt;Second&lt;/button&gt; - &lt;span&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;&lt;button disabled=\"disabled\"&gt;Third&lt;/button&gt; - &lt;span&gt;&lt;/span&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"button[disabled]\" ).next().text( \"this button is disabled\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Find the very next sibling of each paragraph. Keep only the ones with a class \"selected\".</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;next demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Hello&lt;/p&gt;\n&lt;p class=\"selected\"&gt;Hello Again&lt;/p&gt;\n&lt;div&gt;&lt;span&gt;And Again&lt;/span&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"p\" ).next( \".selected\" ).css( \"background\", \"yellow\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/next\" class=\"_attribution-link\">https://api.jquery.com/next</a>\n  </p>\n</div>\n","nth-last-child-selector":"<h1 class=\"entry-title\">:nth-last-child() Selector</h1> <div class=\"entry-content\"> <article id=\"nth-last-child1\" class=\"entry selector\"><h2 class=\"section-title\"><span>nth-last-child selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all elements that are the nth-child of their parent, counting from the last element to the first.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.9/\">1.9</a></span>jQuery( \":nth-last-child(index/even/odd/equation)\" )</h4> <p class=\"argument\"><strong>index: </strong>The index of each child to match, starting with the last one (<code>1</code>), the string <code>even</code> or <code>odd</code>, or an equation ( eg. <code>:nth-last-child(even)</code>, <code>:nth-last-child(4n)</code> )</p> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Because jQuery's implementation of <code>:nth-</code> selectors is strictly derived from the CSS specification, the value of <code>n</code> is \"1-indexed\", meaning that the counting starts at 1. For other selector expressions such as <code>:eq()</code> or <code>:even</code> jQuery follows JavaScript's \"0-indexed\" counting. Given a single <code>&lt;ul&gt;</code> containing three <code>&lt;li&gt;</code>s, <code>$( \"li:nth-last-child(1)\" )</code> selects the third, last, <code>&lt;li&gt;</code>.</p> <p>Further discussion of this usage can be found in the <a href=\"http://www.w3.org/TR/css3-selectors/#nth-last-child-pseudo\">W3C CSS specification</a>.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Find the second to last li in each matched ul and note it.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;nth-last-child demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    float: left;\n  }\n  span {\n    color: blue;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;\n  &lt;ul&gt;\n    &lt;li&gt;John&lt;/li&gt;\n    &lt;li&gt;Karl&lt;/li&gt;\n    &lt;li&gt;Adam&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;ul&gt;\n    &lt;li&gt;Dan&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;ul&gt;\n    &lt;li&gt;Dave&lt;/li&gt;\n    &lt;li&gt;Rick&lt;/li&gt;\n    &lt;li&gt;Timmy&lt;/li&gt;\n    &lt;li&gt;Gibson&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n&lt;script&gt;\n$( \"ul li:nth-last-child(2)\" ).append( \"&lt;span&gt; - 2nd to last!&lt;/span&gt;\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>This is a playground to see how the selector works with different strings. </p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;nth-last-child demo&lt;/title&gt;\n  &lt;style&gt;\n  button {\n    display: block;\n    font-size: 12px;\n    width: 100px;\n  }\n  div {\n    float: left;\n    margin: 10px;\n    font-size: 10px;\n    border: 1px solid black;\n  }\n  span {\n    color: blue;\n    font-size:18px;\n  }\n  #inner {\n    color: red;\n  }\n  td {\n    width: 50px;\n    text-align: center;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;\n  &lt;button&gt;:nth-last-child(even)&lt;/button&gt;\n  &lt;button&gt;:nth-last-child(odd)&lt;/button&gt;\n  &lt;button&gt;:nth-last-child(3n)&lt;/button&gt;\n  &lt;button&gt;:nth-last-child(2)&lt;/button&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;button&gt;:nth-last-child(3n+1)&lt;/button&gt;\n  &lt;button&gt;:nth-last-child(3n+2)&lt;/button&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;table&gt;\n    &lt;tr&gt;&lt;td&gt;John&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Karl&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Brandon&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Benjamin&lt;/td&gt;&lt;/tr&gt;\n  &lt;/table&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;table&gt;\n    &lt;tr&gt;&lt;td&gt;Sam&lt;/td&gt;&lt;/tr&gt;\n  &lt;/table&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;table&gt;\n    &lt;tr&gt;&lt;td&gt;Glen&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Tane&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Ralph&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;David&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Mike&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Dan&lt;/td&gt;&lt;/tr&gt;\n  &lt;/table&gt;\n&lt;/div&gt;\n&lt;span&gt;tr&lt;span id=\"inner\"&gt;&lt;/span&gt;&lt;/span&gt;\n \n&lt;script&gt;\n$( \"button\" ).click(function() {\n  var str = $( this ).text();\n  $( \"tr\" ).css( \"background\", \"white\" );\n  $( \"tr\" + str ).css( \"background\", \"#ff0000\" );\n  $( \"#inner\" ).text(str);\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/nth-last-child-selector\" class=\"_attribution-link\">https://api.jquery.com/nth-last-child-selector</a>\n  </p>\n</div>\n","offset":"<h1 class=\"entry-title\">.offset()</h1> <div class=\"entry-content\"> Get the current coordinates of the first element, or set the coordinates of every element, in the set of matched elements, relative to the document.<div class=\"toc\"> <h4><span>Contents:</span></h4> <ul class=\"toc-list\"> <li> <a href=\"#offset1\">.offset()</a><ul><li><a href=\"#offset\">.offset()</a></li></ul> </li> <li> <a href=\"#offset2\">.offset( coordinates )</a><ul> <li><a href=\"#offset-coordinates\">.offset( coordinates )</a></li> <li><a href=\"#offset-function\">.offset( function )</a></li> </ul> </li> </ul> </div>\n<article id=\"offset1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.offset()</span><span class=\"returns\">Returns: <a href=\"types#Object\">Object</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Get the current coordinates of the first element in the set of matched elements, relative to the document.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2/\">1.2</a></span><a id=\"offset\" href=\"#offset\">.offset()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.offset()</code> method allows us to retrieve the current position of an element <em>relative to the document</em>. Contrast this with <code><a href=\"position\">.position()</a></code>, which retrieves the current position <em>relative to the offset parent</em>. When positioning a new element on top of an existing one for global manipulation (in particular, for implementing drag-and-drop), <code>.offset()</code> is more useful.</p> <p><code>.offset()</code> returns an object containing the properties <code>top</code> and <code>left</code>.</p> <div class=\"warning\"> <p><strong>Note:</strong> jQuery does not support getting the offset coordinates of hidden elements or accounting for borders, margins, or padding set on the body element.</p> <p>While it is possible to get the coordinates of elements with <code>visibility:hidden</code> set, <code>display:none</code> is excluded from the rendering tree and thus has a position that is undefined.</p> </div> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> The number returned by dimensions-related APIs, including <code>.offset()</code>, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Access the offset of the second paragraph:</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;offset demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    margin-left: 10px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Hello&lt;/p&gt;&lt;p&gt;2nd Paragraph&lt;/p&gt;\n \n&lt;script&gt;\nvar p = $( \"p:last\" );\nvar offset = p.offset();\np.html( \"left: \" + offset.left + \", top: \" + offset.top );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Click to see the offset.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;offset demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    margin-left: 10px;\n    color: blue;\n    width: 200px;\n    cursor: pointer;\n  }\n  span {\n    color: red;\n    cursor: pointer;\n  }\n  div.abs {\n    width: 50px;\n    height: 50px;\n    position: absolute;\n    left: 220px;\n    top: 35px;\n    background-color: green;\n    cursor: pointer;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div id=\"result\"&gt;Click an element.&lt;/div&gt;\n&lt;p&gt;\n  This is the best way to &lt;span&gt;find&lt;/span&gt; an offset.\n&lt;/p&gt;\n&lt;div class=\"abs\"&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\n$( \"*\", document.body ).click(function( event ) {\n  var offset = $( this ).offset();\n  event.stopPropagation();\n  $( \"#result\" ).text( this.tagName +\n    \" coords ( \" + offset.left + \", \" + offset.top + \" )\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article><article id=\"offset2\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.offset( coordinates )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Set the current coordinates of every element in the set of matched elements, relative to the document.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"offset-coordinates\" href=\"#offset-coordinates\">.offset( coordinates )</a> </h4> <ul><li> <div><strong>coordinates</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>An object containing the properties <code>top</code> and <code>left</code>, which are numbers indicating the new top and left coordinates for the elements.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"offset-function\" href=\"#offset-function\">.offset( function )</a> </h4> <ul><li> <div><strong>function</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Integer\">Integer</a> index, <a href=\"types#PlainObject\">PlainObject</a> coords ) =&gt; <a href=\"types#PlainObject\">PlainObject</a> </div> <div>A function to return the coordinates to set. Receives the index of the element in the collection as the first argument and the current coordinates as the second argument. The function should return an object with the new <code>top</code> and <code>left</code> properties.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc-1\"> <p>The <code>.offset()</code> setter method allows us to reposition an element. The element's position is specified <em>relative to the document</em>. If the element's <code>position</code> style property is currently <code>static</code>, it will be set to <code>relative</code> to allow for this repositioning.</p> </div> <section class=\"entry-examples\" id=\"entry-examples-1\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-1-0\"> <p>Set the offset of the second paragraph:</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;offset demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    margin-left: 10px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Hello&lt;/p&gt;&lt;p&gt;2nd Paragraph&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p:last\" ).offset({ top: 10, left: 30 });\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/offset\" class=\"_attribution-link\">https://api.jquery.com/offset</a>\n  </p>\n</div>\n","next-adjacent-selector":"<h1 class=\"entry-title\">Next Adjacent Selector (“prev + next”)</h1> <div class=\"entry-content\"> <article id=\"next-adjacent1\" class=\"entry selector\"><h2 class=\"section-title\"><span>next adjacent selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all next elements matching \"next\" that are immediately preceded by a sibling \"prev\".</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \"prev + next\" )</h4> <p class=\"argument\"><strong>prev: </strong>Any valid selector.</p> <p class=\"argument\"><strong>next: </strong>A selector to match the element that is next to the first selector.</p> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>One important point to consider with both the next adjacent sibling selector (<code>prev + next</code>) and the general sibling selector (<code>prev ~ siblings</code>) is that the elements on either side of the combinator must share the same parent.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds all inputs that are next to a label.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;next adjacent demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;form&gt;\n  &lt;label for=\"name\"&gt;Name:&lt;/label&gt;\n  &lt;input name=\"name\" id=\"name\"&gt;\n  &lt;fieldset&gt;\n    &lt;label for=\"newsletter\"&gt;Newsletter:&lt;/label&gt;\n    &lt;input name=\"newsletter\" id=\"newsletter\"&gt;\n  &lt;/fieldset&gt;\n&lt;/form&gt;\n&lt;input name=\"none\"&gt;\n \n&lt;script&gt;\n$( \"label + input\" ).css( \"color\", \"blue\" ).val( \"Labeled!\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/next-adjacent-selector\" class=\"_attribution-link\">https://api.jquery.com/next-adjacent-selector</a>\n  </p>\n</div>\n","next-siblings-selector":"<h1 class=\"entry-title\">Next Siblings Selector (“prev ~ siblings”)</h1> <div class=\"entry-content\"> <article id=\"next-siblings1\" class=\"entry selector\"><h2 class=\"section-title\"><span>next siblings selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all sibling elements that follow after the \"prev\" element, have the same parent, and match the filtering \"siblings\" selector.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \"prev ~ siblings\" )</h4> <p class=\"argument\"><strong>prev: </strong>Any valid selector.</p> <p class=\"argument\"><strong>siblings: </strong>A selector to filter elements that are the following siblings of the first selector.</p> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The notable difference between (<code>prev + next</code>) and (<code>prev ~ siblings</code>) is their respective reach. While the former reaches only to the immediately following sibling element, the latter extends that reach to all following sibling elements.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds all divs that are siblings after the element with #prev as its id. Notice the span isn't selected since it is not a div and the \"niece\" isn't selected since it is a child of a sibling, not an actual sibling.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;next siblings demo&lt;/title&gt;\n  &lt;style&gt;\n  div, span {\n    display: block;\n    width: 80px;\n    height: 80px;\n    margin: 5px;\n    background: #bfa;\n    float: left;\n    font-size: 14px;\n  }\n  div#small {\n    width: 60px;\n    height: 25px;\n    font-size: 12px;\n    background: #fab;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;div (doesn't match since before #prev)&lt;/div&gt;\n&lt;span id=\"prev\"&gt;span#prev&lt;/span&gt;\n&lt;div&gt;div sibling&lt;/div&gt;\n&lt;div&gt;div sibling &lt;div id=\"small\"&gt;div niece&lt;/div&gt;&lt;/div&gt;\n&lt;span&gt;span sibling (not div)&lt;/span&gt;\n&lt;div&gt;div sibling&lt;/div&gt;\n \n&lt;script&gt;\n$( \"#prev ~ div\" ).css( \"border\", \"3px groove blue\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/next-siblings-selector\" class=\"_attribution-link\">https://api.jquery.com/next-siblings-selector</a>\n  </p>\n</div>\n","nextuntil":"<h1 class=\"entry-title\">.nextUntil()</h1> <div class=\"entry-content\"> <article id=\"nextUntil1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.nextUntil( [selector ] [, filter ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Get all following siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object passed.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"nextUntil-selector-filter\" href=\"#nextUntil-selector-filter\">.nextUntil( [selector ] [, filter ] )</a> </h4> <ul> <li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> </div> <div>A string containing a selector expression to indicate where to stop matching following sibling elements.</div> </li> <li> <div><strong>filter</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> </div> <div>A string containing a selector expression to match elements against.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.6/\">1.6</a></span><a id=\"nextUntil-element-filter\" href=\"#nextUntil-element-filter\">.nextUntil( [element ] [, filter ] )</a> </h4> <ul> <li> <div><strong>element</strong></div> <div>Type: <a href=\"types#Element\">Element</a> or <a href=\"types#jQuery\">jQuery</a> </div> <div>A DOM node or jQuery object indicating where to stop matching following sibling elements.</div> </li> <li> <div><strong>filter</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> </div> <div>A string containing a selector expression to match elements against.</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Given a selector expression that represents a set of DOM elements, the <code>.nextUntil()</code> method searches through the successors of these elements in the DOM tree, stopping when it reaches an element matched by the method's argument. The new jQuery object that is returned contains all following siblings up to but not including the one matched by the <code>.nextUntil()</code> argument.</p> <p>If the selector is not matched or is not supplied, all following siblings will be selected; in these cases it selects the same elements as the <code>.nextAll()</code> method does when no filter selector is provided.</p> <p><strong>As of jQuery 1.6</strong>, A DOM node or jQuery object, instead of a selector, may be passed to the <code>.nextUntil()</code> method.</p> <p>The method optionally accepts a selector expression for its second argument. If this argument is supplied, the elements will be filtered by testing whether they match it.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Find the siblings that follow &lt;dt id=\"term-2\"&gt; up to the next &lt;dt&gt; and give them a red background color. Also, find &lt;dd&gt; siblings that follow &lt;dt id=\"term-1\"&gt; up to &lt;dt id=\"term-3\"&gt; and give them a green text color. </p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;nextUntil demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;dl&gt;\n  &lt;dt id=\"term-1\"&gt;term 1&lt;/dt&gt;\n  &lt;dd&gt;definition 1-a&lt;/dd&gt;\n  &lt;dd&gt;definition 1-b&lt;/dd&gt;\n  &lt;dd&gt;definition 1-c&lt;/dd&gt;\n  &lt;dd&gt;definition 1-d&lt;/dd&gt;\n  &lt;dt id=\"term-2\"&gt;term 2&lt;/dt&gt;\n  &lt;dd&gt;definition 2-a&lt;/dd&gt;\n  &lt;dd&gt;definition 2-b&lt;/dd&gt;\n  &lt;dd&gt;definition 2-c&lt;/dd&gt;\n  &lt;dt id=\"term-3\"&gt;term 3&lt;/dt&gt;\n  &lt;dd&gt;definition 3-a&lt;/dd&gt;\n  &lt;dd&gt;definition 3-b&lt;/dd&gt;\n&lt;/dl&gt;\n \n&lt;script&gt;\n$( \"#term-2\" )\n  .nextUntil( \"dt\" )\n    .css( \"background-color\", \"red\" );\nvar term3 = document.getElementById( \"term-3\" );\n$( \"#term-1\" )\n  .nextUntil( term3, \"dd\" )\n    .css( \"color\", \"green\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/nextUntil\" class=\"_attribution-link\">https://api.jquery.com/nextUntil</a>\n  </p>\n</div>\n","nextall":"<h1 class=\"entry-title\">.nextAll()</h1> <div class=\"entry-content\"> <article id=\"nextAll1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.nextAll( [selector ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Get all following siblings of each element in the set of matched elements, optionally filtered by a selector.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2/\">1.2</a></span><a id=\"nextAll-selector\" href=\"#nextAll-selector\">.nextAll( [selector ] )</a> </h4> <ul><li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing a selector expression to match elements against.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Given a jQuery object that represents a set of DOM elements, the <code>.nextAll()</code> method allows us to search through the successors of these elements in the DOM tree and construct a new jQuery object from the matching elements.</p> <p>The method optionally accepts a selector expression of the same type that we can pass to the <code>$()</code> function. If the selector is supplied, the elements will be filtered by testing whether they match it.</p> <p>Consider a page with a simple list on it:</p> <pre class=\"syntaxhighlighter xml\">&lt;ul&gt;\n  &lt;li&gt;list item 1&lt;/li&gt;\n  &lt;li&gt;list item 2&lt;/li&gt;\n  &lt;li class=\"third-item\"&gt;list item 3&lt;/li&gt;\n  &lt;li&gt;list item 4&lt;/li&gt;\n  &lt;li&gt;list item 5&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>If we begin at the third item, we can find the elements which come after it:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li.third-item\" ).nextAll().css( \"background-color\", \"red\" );</pre> <p>The result of this call is a red background behind items 4 and 5. Since we do not supply a selector expression, these following elements are unequivocally included as part of the object. If we had supplied one, the elements would be tested for a match before they were included.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Locate all the divs after the first and give them a class.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;nextAll demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    width: 80px;\n    height: 80px;\n    background: #abc;\n    border: 2px solid black;\n    margin: 10px;\n    float: left;\n  }\n  div.after {\n    border-color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;first&lt;/div&gt;\n&lt;div&gt;sibling&lt;div&gt;child&lt;/div&gt;&lt;/div&gt;\n&lt;div&gt;sibling&lt;/div&gt;\n&lt;div&gt;sibling&lt;/div&gt;\n&lt;script&gt;\n$( \"div:first\" ).nextAll().addClass( \"after\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Locate all the paragraphs after the second child in the body and give them a class.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;nextAll demo&lt;/title&gt;\n  &lt;style&gt;\n  div, p {\n    width: 60px;\n    height: 60px;\n    background: #abc;\n    border: 2px solid black;\n    margin: 10px;\n    float: left;\n  }\n  .after {\n    border-color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;p&lt;/p&gt;\n&lt;div&gt;div&lt;/div&gt;\n&lt;p&gt;p&lt;/p&gt;\n&lt;p&gt;p&lt;/p&gt;\n&lt;div&gt;div&lt;/div&gt;\n&lt;p&gt;p&lt;/p&gt;\n&lt;div&gt;div&lt;/div&gt;\n \n&lt;script&gt;\n$( \":nth-child(1)\" ).nextAll( \"p\" ).addClass( \"after\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/nextAll\" class=\"_attribution-link\">https://api.jquery.com/nextAll</a>\n  </p>\n</div>\n","nth-last-of-type-selector":"<h1 class=\"entry-title\">:nth-last-of-type() Selector</h1> <div class=\"entry-content\"> <article id=\"nth-last-of-type1\" class=\"entry selector\"><h2 class=\"section-title\"><span>nth-last-of-type selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all the elements that are the nth-child of their parent in relation to siblings with the same element name, counting from the last element to the first.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.9/\">1.9</a></span>jQuery( \":nth-last-of-type(index/even/odd/equation)\" )</h4> <p class=\"argument\"><strong>index: </strong>The index of each child to match, starting with the last one (<code>1</code>), the string <code>even</code> or <code>odd</code>, or an equation ( eg. <code>:nth-last-of-type(even)</code>, <code>:nth-last-of-type(4n)</code> )</p> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Because jQuery's implementation of <code>:nth-</code> selectors is strictly derived from the CSS specification, the value of <code>n</code> is \"1-indexed\", meaning that the counting starts at 1. For other selector expressions such as <code>:eq()</code> or <code>:even</code> jQuery follows JavaScript's \"0-indexed\" counting. Given a single <code>&lt;ul&gt;</code> containing three <code>&lt;li&gt;</code>s, <code>$('li:nth-last-of-type(1)')</code> selects the third, last, <code>&lt;li&gt;</code>.</p> <p>Further discussion of this usage can be found in the <a href=\"http://www.w3.org/TR/css3-selectors/#nth-last-of-type-pseudo\">W3C CSS specification</a>.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Find the second to last li in each matched ul and note it.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;nth-last-of-type demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    float: left;\n  }\n  span {\n    color: blue;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;\n  &lt;ul&gt;\n    &lt;li&gt;John&lt;/li&gt;\n    &lt;li&gt;Karl&lt;/li&gt;\n    &lt;li&gt;Adam&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;ul&gt;\n    &lt;li&gt;Dan&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;ul&gt;\n    &lt;li&gt;Dave&lt;/li&gt;\n    &lt;li&gt;Rick&lt;/li&gt;\n    &lt;li&gt;Timmy&lt;/li&gt;\n    &lt;li&gt;Gibson&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\n$( \"ul li:nth-last-of-type(2)\" ).append( \"&lt;span&gt; - 2nd to last!&lt;/span&gt;\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>This is a playground to see how the selector works with different strings. </p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;nth-last-of-type demo&lt;/title&gt;\n  &lt;style&gt;\n  button {\n    display: block;\n    font-size: 12px;\n    width: 100px;\n  }\n  div {\n    float: left;\n    margin: 10px;\n    font-size: 10px;\n    border: 1px solid black;\n  }\n  span {\n    color: blue;\n    font-size: 18px;\n  }\n  #inner {\n    color: red;\n  }\n  td {\n    width: 50px;\n    text-align: center;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;\n  &lt;button&gt;:nth-last-of-type(even)&lt;/button&gt;\n  &lt;button&gt;:nth-last-of-type(odd)&lt;/button&gt;\n  &lt;button&gt;:nth-last-of-type(3n)&lt;/button&gt;\n  &lt;button&gt;:nth-last-of-type(2)&lt;/button&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;button&gt;:nth-last-of-type(3n+1)&lt;/button&gt;\n  &lt;button&gt;:nth-last-of-type(3n+2)&lt;/button&gt;\n&lt;/div&gt;\n \n&lt;div&gt;\n  &lt;table&gt;\n    &lt;tr&gt;&lt;td&gt;John&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Karl&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Brandon&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Benjamin&lt;/td&gt;&lt;/tr&gt;\n  &lt;/table&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;table&gt;\n    &lt;tr&gt;&lt;td&gt;Sam&lt;/td&gt;&lt;/tr&gt;\n  &lt;/table&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;table&gt;\n    &lt;tr&gt;&lt;td&gt;Glen&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Tane&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Ralph&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;David&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Mike&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Dan&lt;/td&gt;&lt;/tr&gt;\n  &lt;/table&gt;\n&lt;/div&gt;\n \n&lt;span&gt;tr&lt;span id=\"inner\"&gt;&lt;/span&gt;&lt;/span&gt;\n \n&lt;script&gt;\n$( \"button\" ).click(function() {\n  var str = $( this ).text();\n  $( \"tr\" ).css( \"background\", \"white\" );\n  $( \"tr\" + str ).css( \"background\", \"#ff0000\" );\n  $( \"#inner\" ).text( str );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/nth-last-of-type-selector\" class=\"_attribution-link\">https://api.jquery.com/nth-last-of-type-selector</a>\n  </p>\n</div>\n","not":"<h1 class=\"entry-title\">.not()</h1> <div class=\"entry-content\"> <article id=\"not1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.not( selector )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Remove elements from the set of matched elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"not-selector\" href=\"#not-selector\">.not( selector )</a> </h4> <ul><li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> or <a href=\"types#Element\">Element</a> or <a href=\"types#Array\">Array</a> </div> <div>A string containing a selector expression, a DOM element, or an array of elements to match against the set.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"not-function\" href=\"#not-function\">.not( function )</a> </h4> <ul><li> <div><strong>function</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Integer\">Integer</a> index, <a href=\"types#Element\">Element</a> element ) =&gt; <a href=\"types#Boolean\">Boolean</a> </div> <div>A function used as a test for each element in the set. It accepts two arguments, <code>index</code>, which is the element's index in the jQuery collection, and <code>element</code>, which is the DOM element. Within the function, <code>this</code> refers to the current DOM element.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"not-selection\" href=\"#not-selection\">.not( selection )</a> </h4> <ul><li> <div><strong>selection</strong></div> <div>Type: <a href=\"types#jQuery\">jQuery</a> </div> <div>An existing jQuery object to match the current set of elements against.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Given a jQuery object that represents a set of DOM elements, the <code>.not()</code> method constructs a new jQuery object from a subset of the matching elements. The supplied selector is tested against each element; the elements that don't match the selector will be included in the result.</p> <p>Consider a page with a simple list on it:</p> <pre class=\"syntaxhighlighter xml\">&lt;ul&gt;\n  &lt;li&gt;list item 1&lt;/li&gt;\n  &lt;li&gt;list item 2&lt;/li&gt;\n  &lt;li&gt;list item 3&lt;/li&gt;\n  &lt;li&gt;list item 4&lt;/li&gt;\n  &lt;li&gt;list item 5&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>We can apply this method to the set of list items:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li\" ).not( \":even\" ).css( \"background-color\", \"red\" );</pre> <p>The result of this call is a red background for items 2 and 4, as they do not match the selector (recall that :even and :odd use 0-based indexing).</p> <h4>Removing Specific Elements</h4> <p>The second version of the <code>.not()</code> method allows us to remove elements from the matched set, assuming we have found those elements previously by some other means. For example, suppose our list had an id applied to one of its items:</p> <pre class=\"syntaxhighlighter xml\">&lt;ul&gt;\n  &lt;li&gt;list item 1&lt;/li&gt;\n  &lt;li&gt;list item 2&lt;/li&gt;\n  &lt;li id=\"notli\"&gt;list item 3&lt;/li&gt;\n  &lt;li&gt;list item 4&lt;/li&gt;\n  &lt;li&gt;list item 5&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>We can fetch the third list item using the native JavaScript <code>getElementById()</code> function, then remove it from a jQuery object:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li\" ).not( document.getElementById( \"notli\" ) )\n  .css( \"background-color\", \"red\" );</pre> <p>This statement changes the color of items 1, 2, 4, and 5. We could have accomplished the same thing with a simpler jQuery expression, but this technique can be useful when, for example, other libraries provide references to plain DOM nodes.</p> <p>As of jQuery 1.4, the <code>.not()</code> method can take a function as its argument in the same way that <code>.filter()</code> does. Elements for which the function returns <code>true</code> are excluded from the filtered set; all other elements are included.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Adds a border to divs that are not green or blue.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;not demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    width: 50px;\n    height: 50px;\n    margin: 10px;\n    float: left;\n    background: yellow;\n    border: 2px solid white;\n  }\n  .green {\n    background: #8f8;\n  }\n  .gray {\n    background: #ccc;\n  }\n  #blueone {\n    background: #99f;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;&lt;/div&gt;\n&lt;div id=\"blueone\"&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div class=\"green\"&gt;&lt;/div&gt;\n&lt;div class=\"green\"&gt;&lt;/div&gt;\n&lt;div class=\"gray\"&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"div\" ).not( \".green, #blueone\" )\n  .css( \"border-color\", \"red\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Removes the element with the ID \"selected\" from the set of all paragraphs.</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).not( $( \"#selected\" )[ 0 ] );</pre> </div> <div class=\"entry-example\" id=\"example-2\"> <p>Removes the element with the ID \"selected\" from the set of all paragraphs.</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).not( \"#selected\" );</pre> </div> <div class=\"entry-example\" id=\"example-3\"> <p>Removes all elements that match \"div p.selected\" from the total set of all paragraphs.</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).not( $( \"div p.selected\" ) );</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/not\" class=\"_attribution-link\">https://api.jquery.com/not</a>\n  </p>\n</div>\n","nth-child-selector":"<h1 class=\"entry-title\">:nth-child() Selector</h1> <div class=\"entry-content\"> <article id=\"nth-child1\" class=\"entry selector\"><h2 class=\"section-title\"><span>nth-child selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all elements that are the nth-child of their parent.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.1.4/\">1.1.4</a></span>jQuery( \":nth-child(index/even/odd/equation)\" )</h4> <p class=\"argument\"><strong>index: </strong>The index of each child to match, starting with <code>1</code>, the string <code>even</code> or <code>odd</code>, or an equation ( eg. <code>:nth-child(even)</code>, <code>:nth-child(4n)</code> )</p> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Because jQuery's implementation of <code>:nth-</code> selectors is strictly derived from the CSS specification, the value of <code>n</code> is \"1-indexed\", meaning that the counting starts at 1. For other selector expressions such as <code>:eq()</code> or <code>:even</code> jQuery follows JavaScript's \"0-indexed\" counting. Given a single <code>&lt;ul&gt;</code> containing two <code>&lt;li&gt;</code>s, <code>$( \"li:nth-child(1)\" )</code> selects the first <code>&lt;li&gt;</code> while <code>$( \"li:eq(1)\" )</code> selects the second.</p> <p>The <code>:nth-child(n)</code> pseudo-class is easily confused with <code>:eq(n)</code>, even though the two can result in dramatically different matched elements. With <code>:nth-child(n)</code>, all children are counted, regardless of what they are, and the specified element is selected only if it matches the selector attached to the pseudo-class. With <code>:eq(n)</code> only the selector attached to the pseudo-class is counted, not limited to children of any other element, and the (n+1)th one (n is 0-based) is selected.</p> <p>Further discussion of this unusual usage can be found in the <a href=\"http://www.w3.org/TR/css3-selectors/#nth-child-pseudo\">W3C CSS specification</a>.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Find the second li in each matched ul and note it.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;nth-child demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    float: left;\n  }\n  span {\n    color: blue;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;\n  &lt;ul&gt;\n    &lt;li&gt;John&lt;/li&gt;\n    &lt;li&gt;Karl&lt;/li&gt;\n    &lt;li&gt;Brandon&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;ul&gt;\n    &lt;li&gt;Sam&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;ul&gt;\n    &lt;li&gt;Glen&lt;/li&gt;\n    &lt;li&gt;Tane&lt;/li&gt;\n    &lt;li&gt;Ralph&lt;/li&gt;\n    &lt;li&gt;David&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\n$( \"ul li:nth-child(2)\" ).append( \"&lt;span&gt; - 2nd!&lt;/span&gt;\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>This is a playground to see how the selector works with different strings. Notice that this is different from the :even and :odd which have no regard for parent and just filter the list of elements to every other one. The :nth-child, however, counts the index of the child to its particular parent. In any case, it's easier to see than explain so...</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;nth-child demo&lt;/title&gt;\n  &lt;style&gt;\n  button {\n    display: block;\n    font-size: 12px;\n    width: 100px;\n  }\n  div {\n    float: left;\n    margin: 10px;\n    font-size: 10px;\n    border: 1px solid black;\n  }\n  span {\n    color: blue;\n    font-size: 18px;\n  }\n  #inner {\n    color: red;\n  }\n  td {\n    width: 50px;\n    text-align: center;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;\n  &lt;button&gt;:nth-child(even)&lt;/button&gt;\n  &lt;button&gt;:nth-child(odd)&lt;/button&gt;\n  &lt;button&gt;:nth-child(3n)&lt;/button&gt;\n  &lt;button&gt;:nth-child(2)&lt;/button&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;button&gt;:nth-child(3n+1)&lt;/button&gt;\n  &lt;button&gt;:nth-child(3n+2)&lt;/button&gt;\n  &lt;button&gt;:even&lt;/button&gt;\n  &lt;button&gt;:odd&lt;/button&gt;\n&lt;/div&gt;\n \n&lt;div&gt;\n  &lt;table&gt;\n    &lt;tr&gt;&lt;td&gt;John&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Karl&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Brandon&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Benjamin&lt;/td&gt;&lt;/tr&gt;\n  &lt;/table&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;table&gt;\n    &lt;tr&gt;&lt;td&gt;Sam&lt;/td&gt;&lt;/tr&gt;\n  &lt;/table&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;table&gt;\n    &lt;tr&gt;&lt;td&gt;Glen&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Tane&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Ralph&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;David&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Mike&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Dan&lt;/td&gt;&lt;/tr&gt;\n  &lt;/table&gt;\n&lt;/div&gt;\n \n&lt;span&gt;tr&lt;span id=\"inner\"&gt;&lt;/span&gt;&lt;/span&gt;\n \n&lt;script&gt;\n$( \"button\" ).click(function() {\n  var str = $( this ).text();\n  $( \"tr\" ).css( \"background\", \"white\" );\n  $( \"tr\" + str ).css( \"background\", \"#ff0000\" );\n  $( \"#inner\" ).text( str );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/nth-child-selector\" class=\"_attribution-link\">https://api.jquery.com/nth-child-selector</a>\n  </p>\n</div>\n","nth-of-type-selector":"<h1 class=\"entry-title\">:nth-of-type() Selector</h1> <div class=\"entry-content\"> <article id=\"nth-of-type1\" class=\"entry selector\"><h2 class=\"section-title\"><span>nth-of-type selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all elements that are the nth child of their parent in relation to siblings with the same element name.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.9/\">1.9</a></span>jQuery( \":nth-of-type(index/even/odd/equation)\" )</h4> <p class=\"argument\"><strong>index: </strong>The index of each child to match, starting with <code>1</code>, the string <code>even</code> or <code>odd</code>, or an equation ( eg. <code>:nth-of-type(even)</code>, <code>:nth-of-type(4n)</code> )</p> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Because jQuery's implementation of <code>:nth-</code> selectors is strictly derived from the CSS specification, the value of <code>n</code> is \"1-indexed\", meaning that the counting starts at 1. For other selector expressions such as <code>:eq()</code> or <code>:even</code> jQuery follows JavaScript's \"0-indexed\" counting. </p> <p>Further discussion of this usage can be found in the <a href=\"http://www.w3.org/TR/css3-selectors/#nth-of-type-pseudo\">W3C CSS specification</a>.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Find each span that is second in relation to its sibling spans.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;nth-of-type demo&lt;/title&gt;\n  &lt;style&gt;\n  .nth {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;\n  &lt;span&gt;John&lt;/span&gt;,\n  &lt;b&gt;Kim&lt;/b&gt;,\n  &lt;span&gt;Adam&lt;/span&gt;,\n  &lt;b&gt;Rafael&lt;/b&gt;,\n  &lt;span&gt;Oleg&lt;/span&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;b&gt;Dave&lt;/b&gt;,\n  &lt;span&gt;Ann&lt;/span&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  &lt;i&gt;&lt;span&gt;Maurice&lt;/span&gt;&lt;/i&gt;,\n  &lt;span&gt;Richard&lt;/span&gt;,\n  &lt;span&gt;Ralph&lt;/span&gt;,\n  &lt;span&gt;Jason&lt;/span&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\n$( \"span:nth-of-type(2)\" )\n  .append( \"&lt;span&gt; is 2nd sibling span&lt;/span&gt;\" )\n  .addClass( \"nth\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/nth-of-type-selector\" class=\"_attribution-link\">https://api.jquery.com/nth-of-type-selector</a>\n  </p>\n</div>\n","parents":"<h1 class=\"entry-title\">.parents()</h1> <div class=\"entry-content\"> <article id=\"parents1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.parents( [selector ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Get the ancestors of each element in the current set of matched elements, optionally filtered by a selector.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"parents-selector\" href=\"#parents-selector\">.parents( [selector ] )</a> </h4> <ul><li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> </div> <div>A string containing a selector expression to match elements against.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Given a jQuery object that represents a set of DOM elements, the <code>.parents()</code> method allows us to search through the ancestors of these elements in the DOM tree and construct a new jQuery object from the matching elements ordered from immediate parent on up; the elements are returned in order from the closest parent to the outer ones. When multiple DOM elements are in the original set, the resulting set will be in <em>reverse</em> order of the original elements as well, with duplicates removed.</p> <p>The <code>.parents()</code> and <code><a href=\"parent\">.parent()</a></code> methods are similar, except that the latter only travels a single level up the DOM tree. Also, <code>$( \"html\" ).parent()</code> method returns a set containing <code>document</code> whereas <code>$( \"html\" ).parents()</code> returns an empty set.</p> <p>The method optionally accepts a selector expression of the same type that we can pass to the <code>$()</code> function. If the selector is supplied, the elements will be filtered by testing whether they match it.</p> <p>Consider a page with a basic nested list on it:</p> <pre class=\"syntaxhighlighter xml\">&lt;ul class=\"level-1\"&gt;\n  &lt;li class=\"item-i\"&gt;I&lt;/li&gt;\n  &lt;li class=\"item-ii\"&gt;II\n    &lt;ul class=\"level-2\"&gt;\n      &lt;li class=\"item-a\"&gt;A&lt;/li&gt;\n      &lt;li class=\"item-b\"&gt;B\n        &lt;ul class=\"level-3\"&gt;\n          &lt;li class=\"item-1\"&gt;1&lt;/li&gt;\n          &lt;li class=\"item-2\"&gt;2&lt;/li&gt;\n          &lt;li class=\"item-3\"&gt;3&lt;/li&gt;\n        &lt;/ul&gt;\n      &lt;/li&gt;\n      &lt;li class=\"item-c\"&gt;C&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n  &lt;li class=\"item-iii\"&gt;III&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>If we begin at item A, we can find its ancestors:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li.item-a\" ).parents().css( \"background-color\", \"red\" );</pre> <p>The result of this call is a red background for the level-2 list, item II, and the level-1 list (and on up the DOM tree all the way to the <code>&lt;html&gt;</code> element). Since we do not supply a selector expression, all of the ancestors are part of the returned jQuery object. If we had supplied one, only the matching items among these would be included.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Find all parent elements of each b.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;parents demo&lt;/title&gt;\n  &lt;style&gt;\n  b, span, p, html body {\n    padding: .5em;\n    border: 1px solid;\n  }\n  b {\n    color: blue;\n  }\n  strong {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;\n  &lt;p&gt;\n    &lt;span&gt;\n      &lt;b&gt;My parents are: &lt;/b&gt;\n    &lt;/span&gt;\n  &lt;/p&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\nvar parentEls = $( \"b\" ).parents()\n  .map(function() {\n    return this.tagName;\n  })\n  .get()\n  .join( \", \" );\n$( \"b\" ).append( \"&lt;strong&gt;\" + parentEls + \"&lt;/strong&gt;\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Click to find all unique div parent elements of each span.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;parents demo&lt;/title&gt;\n  &lt;style&gt;\n  p, div, span {\n    margin: 2px;\n    padding: 1px;\n  }\n  div {\n    border: 2px white solid;\n  }\n  span {\n    cursor: pointer;\n    font-size: 12px;\n  }\n  .selected {\n    color: blue;\n  }\n  b {\n    color: red;\n    display: block;\n    font-size: 14px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;\n  &lt;div&gt;\n    &lt;div&gt;&lt;span&gt;Hello&lt;/span&gt;&lt;/div&gt;\n      &lt;span&gt;Hello Again&lt;/span&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n      &lt;span&gt;And Hello Again&lt;/span&gt;\n    &lt;/div&gt;\n  &lt;/p&gt;\n  &lt;b&gt;Click Hellos to toggle their parents.&lt;/b&gt;\n \n&lt;script&gt;\nfunction showParents() {\n  $( \"div\" ).css( \"border-color\", \"white\" );\n  var len = $( \"span.selected\" )\n    .parents( \"div\" )\n      .css( \"border\", \"2px red solid\" )\n      .length;\n  $( \"b\" ).text( \"Unique div parents: \" + len );\n}\n$( \"span\" ).click(function() {\n  $( this ).toggleClass( \"selected\" );\n  showParents();\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/parents\" class=\"_attribution-link\">https://api.jquery.com/parents</a>\n  </p>\n</div>\n","odd-selector":"<h1 class=\"entry-title\">:odd Selector</h1> <div class=\"entry-content\"> <article id=\"odd1\" class=\"entry selector\"><h2 class=\"section-title\"><span>odd selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects odd elements, zero-indexed. See also <a href=\"even-selector\">even</a>.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \":odd\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>In particular, note that the <em>0-based indexing</em> means that, counter-intuitively, <code>:odd</code> selects the second element, fourth element, and so on within the matched set.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> Because <code>:odd</code> is a jQuery extension and not part of the CSS specification, queries using <code>:odd</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. To achieve the best performance when using <code>:odd</code> to select elements, first select the elements using a pure CSS selector, then use <a href=\"filter\"><code>.filter(\":odd\")</code></a>. </li> <li> Selected elements are in the order of their appearance in the document. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds odd table rows, matching the second, fourth and so on (index 1, 3, 5 etc.).</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;odd demo&lt;/title&gt;\n  &lt;style&gt;\n  table {\n    background: #f3f7f5;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;table border=\"1\"&gt;\n  &lt;tr&gt;&lt;td&gt;Row with Index #0&lt;/td&gt;&lt;/tr&gt;\n  &lt;tr&gt;&lt;td&gt;Row with Index #1&lt;/td&gt;&lt;/tr&gt;\n  &lt;tr&gt;&lt;td&gt;Row with Index #2&lt;/td&gt;&lt;/tr&gt;\n  &lt;tr&gt;&lt;td&gt;Row with Index #3&lt;/td&gt;&lt;/tr&gt;\n&lt;/table&gt;\n \n&lt;script&gt;\n$( \"tr:odd\" ).css( \"background-color\", \"#bbbbff\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/odd-selector\" class=\"_attribution-link\">https://api.jquery.com/odd-selector</a>\n  </p>\n</div>\n","off":"<h1 class=\"entry-title\">.off()</h1> <div class=\"entry-content\"> <article id=\"off1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.off( events [, selector ] [, handler ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Remove an event handler.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a></span><a id=\"off-events-selector-handler\" href=\"#off-events-selector-handler\">.off( events [, selector ] [, handler ] )</a> </h4> <ul> <li> <div><strong>events</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>One or more space-separated event types and optional namespaces, or just namespaces, such as \"click\", \"keydown.myPlugin\", or \".myPlugin\".</div> </li> <li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A selector which should match the one originally passed to <code>.on()</code> when attaching event handlers.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A handler function previously attached for the event(s), or the special value <code>false</code>.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a></span><a id=\"off-events-selector\" href=\"#off-events-selector\">.off( events [, selector ] )</a> </h4> <ul> <li> <div><strong>events</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>An object where the string keys represent one or more space-separated event types and optional namespaces, and the values represent handler functions previously attached for the event(s).</div> </li> <li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A selector which should match the one originally passed to <code>.on()</code> when attaching event handlers.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a></span><a id=\"off-event\" href=\"#off-event\">.off( event )</a> </h4> <ul><li> <div><strong>event</strong></div> <div>Type: <a href=\"types#Event\">Event</a> </div> <div>A <a href=\"https://api.jquery.com/category/events/event-object/\"><code>jQuery.Event</code></a> object.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a></span><a id=\"off\" href=\"#off\">.off()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.off()</code> method removes event handlers that were attached with <a href=\"on\"><code>.on()</code></a>. See the discussion of delegated and directly bound events on that page for more information. Calling <code>.off()</code> with no arguments removes all handlers attached to the elements. Specific event handlers can be removed on elements by providing combinations of event names, namespaces, selectors, or handler function names. <strong>When multiple filtering arguments are given, all of the arguments provided must match for the event handler to be removed.</strong></p> <p>If a simple event name such as <code>\"click\"</code> is provided, <em>all</em> events of that type (both direct and delegated) are removed from the elements in the jQuery set. When writing code that will be used as a plugin, or simply when working with a large code base, best practice is to attach and remove events using namespaces so that the code will not inadvertently remove event handlers attached by other code. All events of all types in a specific namespace can be removed from an element by providing just a namespace, such as <code>\".myPlugin\"</code>. At minimum, either a namespace or event name must be provided.</p> <p>To remove specific delegated event handlers, provide a <code>selector</code> argument. The selector string must exactly match the one passed to <code>.on()</code> when the event handler was attached. To remove all delegated events from an element without removing non-delegated events, use the special value <code>\"**\"</code>.</p> <p>A handler can also be removed by specifying the function name in the <code>handler</code> argument. When jQuery attaches an event handler, it assigns a unique id to the handler function. Handlers proxied by <a href=\"jquery.proxy\"><code>jQuery.proxy()</code></a> or a similar mechanism will all have the same unique id (the proxy function), so passing proxied handlers to <code>.off</code> may remove more handlers than intended. In those situations it is better to attach and remove event handlers using namespaces.</p> <p>As with <code>.on()</code>, you can pass <code>events</code> as an object instead of specifying an <code>events</code> string and <code>handler</code> function as separate arguments. The keys for the <code>events</code> object are events and/or namespaces; the values are handler functions or the special value <code>false</code>.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Add and remove event handlers on the colored button.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;off demo&lt;/title&gt;\n  &lt;style&gt;\n  button {\n    margin: 5px;\n  }\n  button#theone {\n    color: red;\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button id=\"theone\"&gt;Does nothing...&lt;/button&gt;\n&lt;button id=\"bind\"&gt;Add Click&lt;/button&gt;\n&lt;button id=\"unbind\"&gt;Remove Click&lt;/button&gt;\n&lt;div style=\"display:none;\"&gt;Click!&lt;/div&gt;\n \n&lt;script&gt;\nfunction flash() {\n  $( \"div\" ).show().fadeOut( \"slow\" );\n}\n$( \"#bind\" ).click(function() {\n  $( \"body\" )\n    .on( \"click\", \"#theone\", flash )\n    .find( \"#theone\" )\n      .text( \"Can Click!\" );\n});\n$( \"#unbind\" ).click(function() {\n  $( \"body\" )\n    .off( \"click\", \"#theone\", flash )\n    .find( \"#theone\" )\n      .text( \"Does nothing...\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Remove all event handlers from all paragraphs:</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).off();</pre> </div> <div class=\"entry-example\" id=\"example-2\"> <p>Remove all delegated click handlers from all paragraphs:</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).off( \"click\", \"**\" );</pre> </div> <div class=\"entry-example\" id=\"example-3\"> <p>Remove just one previously bound handler by passing it as the third argument:</p> <pre class=\"syntaxhighlighter javascript\">var foo = function() {\n  // Code to handle some kind of event\n};\n \n// ... Now foo will be called when paragraphs are clicked ...\n$( \"body\" ).on( \"click\", \"p\", foo );\n \n// ... Foo will no longer be called.\n$( \"body\" ).off( \"click\", \"p\", foo );</pre> </div> <div class=\"entry-example\" id=\"example-4\"> <p>Unbind all delegated event handlers by their namespace:</p> <pre class=\"syntaxhighlighter javascript\">var validate = function() {\n  // Code to validate form entries\n};\n \n// Delegate events under the \".validator\" namespace\n$( \"form\" ).on( \"click.validator\", \"button\", validate );\n \n$( \"form\" ).on( \"keypress.validator\", \"input[type='text']\", validate );\n \n// Remove event handlers in the \".validator\" namespace\n$( \"form\" ).off( \".validator\" );</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/off\" class=\"_attribution-link\">https://api.jquery.com/off</a>\n  </p>\n</div>\n","offsetparent":"<h1 class=\"entry-title\">.offsetParent()</h1> <div class=\"entry-content\"> <article id=\"offsetParent1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.offsetParent()</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Get the closest ancestor element that is positioned.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2.6/\">1.2.6</a></span><a id=\"offsetParent\" href=\"#offsetParent\">.offsetParent()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Given a jQuery object that represents a set of DOM elements, the <code>.offsetParent()</code> method allows us to search through the ancestors of these elements in the DOM tree and construct a new jQuery object wrapped around the closest positioned ancestor. An element is said to be positioned if it has a CSS position attribute of <code>relative</code>, <code>absolute</code>, or <code>fixed</code>. This information is useful for calculating offsets for performing animations and placing objects on the page.</p> <p>Consider a page with a basic nested list on it, with a positioned element:</p> <pre class=\"syntaxhighlighter xml\">&lt;ul class=\"level-1\"&gt;\n  &lt;li class=\"item-i\"&gt;I&lt;/li&gt;\n  &lt;li class=\"item-ii\" style=\"position: relative;\"&gt;II\n    &lt;ul class=\"level-2\"&gt;\n      &lt;li class=\"item-a\"&gt;A&lt;/li&gt;\n      &lt;li class=\"item-b\"&gt;B\n        &lt;ul class=\"level-3\"&gt;\n          &lt;li class=\"item-1\"&gt;1&lt;/li&gt;\n          &lt;li class=\"item-2\"&gt;2&lt;/li&gt;\n          &lt;li class=\"item-3\"&gt;3&lt;/li&gt;\n        &lt;/ul&gt;\n      &lt;/li&gt;\n      &lt;li class=\"item-c\"&gt;C&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n  &lt;li class=\"item-iii\"&gt;III&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>If we begin at item A, we can find its positioned ancestor:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li.item-a\" ).offsetParent().css( \"background-color\", \"red\" );</pre> <p>This will change the color of list item II, which is positioned.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Find the offsetParent of item \"A.\"</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;offsetParent demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;ul class=\"level-1\"&gt;\n  &lt;li class=\"item-i\"&gt;I&lt;/li&gt;\n  &lt;li class=\"item-ii\" style=\"position: relative;\"&gt;II\n    &lt;ul class=\"level-2\"&gt;\n      &lt;li class=\"item-a\"&gt;A&lt;/li&gt;\n      &lt;li class=\"item-b\"&gt;B\n        &lt;ul class=\"level-3\"&gt;\n          &lt;li class=\"item-1\"&gt;1&lt;/li&gt;\n          &lt;li class=\"item-2\"&gt;2&lt;/li&gt;\n          &lt;li class=\"item-3\"&gt;3&lt;/li&gt;\n        &lt;/ul&gt;\n      &lt;/li&gt;\n      &lt;li class=\"item-c\"&gt;C&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n  &lt;li class=\"item-iii\"&gt;III&lt;/li&gt;\n&lt;/ul&gt;\n \n&lt;script&gt;$( \"li.item-a\" ).offsetParent().css( \"background-color\", \"red\" );&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/offsetParent\" class=\"_attribution-link\">https://api.jquery.com/offsetParent</a>\n  </p>\n</div>\n","on":"<h1 class=\"entry-title\">.on()</h1> <div class=\"entry-content\"> <article id=\"on1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.on( events [, selector ] [, data ], handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Attach an event handler function for one or more events to the selected elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a></span><a id=\"on-events-selector-data-handler\" href=\"#on-events-selector-data-handler\">.on( events [, selector ] [, data ], handler )</a> </h4> <ul> <li> <div><strong>events</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>One or more space-separated event types and optional namespaces, such as \"click\" or \"keydown.myPlugin\".</div> </li> <li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A selector string to filter the descendants of the selected elements that trigger the event. If the selector is <code>null</code> or omitted, the event is always triggered when it reaches the selected element.</div> </li> <li> <div><strong>data</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>Data to be passed to the handler in <a href=\"event.data\"><code>event.data</code></a> when an event is triggered.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject [, <a href=\"types#Anything\">Anything</a> extraParameter ] [, ... ] )</div> <div>A function to execute when the event is triggered. The value <code>false</code> is also allowed as a shorthand for a function that simply does <code>return false</code>.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a></span><a id=\"on-events-selector-data\" href=\"#on-events-selector-data\">.on( events [, selector ] [, data ] )</a> </h4> <ul> <li> <div><strong>events</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>An object in which the string keys represent one or more space-separated event types and optional namespaces, and the values represent a handler function to be called for the event(s).</div> </li> <li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A selector string to filter the descendants of the selected elements that will call the handler. If the selector is null or omitted, the handler is always called when it reaches the selected element.</div> </li> <li> <div><strong>data</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>Data to be passed to the handler in <a href=\"event.data\"><code>event.data</code></a> when an event occurs.</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.on()</code> method attaches event handlers to the currently selected set of elements in the jQuery object. As of jQuery 1.7, the <code>.on()</code> method provides all functionality required for attaching event handlers. For help in converting from older jQuery event methods, see <a href=\"bind\"><code>.bind()</code></a>, <a href=\"delegate\"><code>.delegate()</code></a>, and <a href=\"live\"><code>.live()</code></a>. To remove events bound with <code>.on()</code>, see <a href=\"off\"><code>.off()</code></a>. To attach an event that runs only once and then removes itself, see <a href=\"one\"><code>.one()</code></a></p> <h2 id=\"event-names\">Event names and namespaces</h2> <p>Any event names can be used for the <code>events</code> argument. jQuery will pass through the browser's standard JavaScript event types, calling the <code>handler</code> function when the browser generates events due to user actions such as <code>click</code>. In addition, the <a href=\"trigger\"><code>.trigger()</code></a> method can trigger both standard browser event names and custom event names to call attached handlers. Event names should only contain alphanumerics, underscore, and colon characters.</p> <p>An event name can be qualified by <em>event namespaces</em> that simplify removing or triggering the event. For example, <code>\"click.myPlugin.simple\"</code> defines both the myPlugin and simple namespaces for this particular click event. A click event handler attached via that string could be removed with <code>.off(\"click.myPlugin\")</code> or <code>.off(\"click.simple\")</code> without disturbing other click handlers attached to the elements. Namespaces are similar to CSS classes in that they are not hierarchical; only one name needs to match. Namespaces beginning with an underscore are reserved for jQuery's use.</p> <p>In the second form of <code>.on()</code>, the <code>events</code> argument is a plain object. The keys are strings in the same form as the <code>events</code> argument with space-separated event type names and optional namespaces. The value for each key is a function (or <code>false</code> value) that is used as the <code>handler</code> instead of the final argument to the method. In other respects, the two forms are identical in their behavior as described below.</p> <h2 id=\"direct-and-delegated-events\">Direct and delegated events</h2> <p>The majority of browser events <em>bubble</em>, or <em>propagate</em>, from the deepest, innermost element (the <strong>event target</strong>) in the document where they occur all the way up to the body and the <code>document</code> element. In Internet Explorer 8 and lower, a few events such as <code>change</code> and <code>submit</code> do not natively bubble but jQuery patches these to bubble and create consistent cross-browser behavior.</p> <p>If <code>selector</code> is omitted or is null, the event handler is referred to as <em>direct</em> or <em>directly-bound</em>. The handler is called every time an event occurs on the selected elements, whether it occurs directly on the element or bubbles from a descendant (inner) element.</p> <p>When a <code>selector</code> is provided, the event handler is referred to as <em>delegated</em>. The handler is not called when the event occurs directly on the bound element, but only for descendants (inner elements) that match the selector. jQuery bubbles the event from the event target up to the element where the handler is attached (i.e., innermost to outermost element) and runs the handler for any elements along that path matching the selector.</p> <p><strong>Event handlers are bound only to the currently selected elements; they must exist at the time your code makes the call to <code>.on()</code></strong>. To ensure the elements are present and can be selected, place scripts after the elements in the HTML markup or perform event binding inside a document ready handler. Alternatively, use delegated events to attach event handlers.</p> <p><strong>Delegated events</strong> have the advantage that they can process events from <em>descendant elements</em> that are added to the document at a later time. By picking an element that is guaranteed to be present at the time the delegated event handler is attached, you can use delegated events to avoid the need to frequently attach and remove event handlers. This element could be the container element of a view in a Model-View-Controller design, for example, or <code>document</code> if the event handler wants to monitor all bubbling events in the document. The <code>document</code> element is available in the <code>head</code> of the document before loading any other HTML, so it is safe to attach events there without waiting for the document to be ready.</p> <p>In addition to their ability to handle events on descendant elements not yet created, another advantage of delegated events is their potential for much lower overhead when many elements must be monitored. On a data table with 1,000 rows in its <code>tbody</code>, this example attaches a handler to 1,000 elements:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#dataTable tbody tr\" ).on( \"click\", function() {\n  console.log( $( this ).text() );\n});</pre> <p>An event-delegation approach attaches an event handler to only one element, the tbody, and the event only needs to bubble up one level (from the clicked <code>tr</code> to <code>tbody</code>):</p> <pre class=\"syntaxhighlighter javascript\">$( \"#dataTable tbody\" ).on( \"click\", \"tr\", function() {\n  console.log( $( this ).text() );\n});</pre> <p><strong>Note:</strong> Delegated events do not work for SVG.</p> <h2 id=\"event-handler\">The event handler and its environment</h2> <p>The <code>handler</code> argument is a function (or the value <code>false</code>, see below), and is required unless you pass an object for the <code>events</code> argument. You can provide an anonymous handler function at the point of the <code>.on()</code> call, as the examples have done above, or declare a named function and pass its name:</p> <pre class=\"syntaxhighlighter javascript\">function notify() {\n  alert( \"clicked\" );\n}\n$( \"button\" ).on( \"click\", notify );</pre> <p>When the browser triggers an event or other JavaScript calls jQuery's <code>.trigger()</code> method, jQuery passes the handler an <a href=\"https://api.jquery.com/category/events/event-object/\"><code>Event</code></a> object it can use to analyze and change the status of the event. This object is a <em>normalized subset</em> of data provided by the browser; the browser's unmodified native event object is available in <code>event.originalEvent</code>. For example, <a href=\"event.type\"><code>event.type</code></a> contains the event name (e.g., \"resize\") and <a href=\"event.target\"><code>event.target</code></a> indicates the deepest (innermost) element where the event occurred.</p> <p>By default, most events bubble up from the original event target to the <code>document</code> element. At each element along the way, jQuery calls any matching event handlers that have been attached. A handler can prevent the event from bubbling further up the document tree (and thus prevent handlers on those elements from running) by calling <code>event.stopPropagation()</code>. Any other handlers attached on the current element <em>will</em> run however. To prevent that, call <code>event.stopImmediatePropagation()</code>. (Event handlers bound to an element are called in the same order that they were bound.)</p> <p>Similarly, a handler can call <code>event.preventDefault()</code> to cancel any default action that the browser may have for this event; for example, the default action on a <code>click</code> event is to follow the link. Not all browser events have default actions, and not all default actions can be canceled. See the <a href=\"http://www.w3.org/TR/DOM-Level-3-Events/#event-types-list\">W3C Events Specification</a> for details.</p> <p>Returning <code>false</code> from an event handler will automatically call <code>event.stopPropagation()</code> and <code>event.preventDefault()</code>. A <code>false</code> value can also be passed for the <code>handler</code> as a shorthand for <code>function(){ return false; }</code>. So, <code>$( \"a.disabled\" ).on( \"click\", false );</code> attaches an event handler to all links with class \"disabled\" that prevents them from being followed when they are clicked and also stops the event from bubbling. </p> <p>When jQuery calls a handler, the <code>this</code> keyword is a reference to the element where the event is being delivered; for directly bound events this is the element where the event was attached and for delegated events this is an element matching <code>selector</code>. (Note that <code>this</code> may not be equal to <code>event.target</code> if the event has bubbled from a descendant element.) To create a jQuery object from the element so that it can be used with jQuery methods, use <code>$( this )</code>.</p> <h2 id=\"passing-data\">Passing data to the handler</h2> <p>If a <code>data</code> argument is provided to <code>.on()</code> and is not <code>null</code> or <code>undefined</code>, it is passed to the handler in the <a href=\"event.data\"><code>event.data</code></a> property each time an event is triggered. The <code>data</code> argument can be any type, but if a string is used the <code>selector</code> must either be provided or explicitly passed as <code>null</code> so that the data is not mistaken for a selector. Best practice is to use a plain object so that multiple values can be passed as properties.</p> <p>As of jQuery 1.4, the same event handler can be bound to an element multiple times. This is especially useful when the <code>event.data</code> feature is being used, or when other unique data resides in a closure around the event handler function. For example:</p> <pre class=\"syntaxhighlighter javascript\">function greet( event ) {\n  alert( \"Hello \" + event.data.name );\n}\n$( \"button\" ).on( \"click\", {\n  name: \"Karl\"\n}, greet );\n$( \"button\" ).on( \"click\", {\n  name: \"Addy\"\n}, greet );</pre> <p>The above code will generate two different alerts when the button is clicked.</p> <p>As an alternative or in addition to the <code>data</code> argument provided to the <code>.on()</code> method, you can also pass data to an event handler using a second argument to <a href=\"trigger\"><code>.trigger()</code></a> or <a href=\"triggerhandler\"><code>.triggerHandler()</code></a>. Data provided this way is passed to the event handler as further parameters after the <code>Event</code> object. If an array was passed to the second argument of <code>.trigger()</code> or <code>.triggerHandler()</code>, each element in the array will be presented to the event handler as an individual parameter.</p> <h2 id=\"event-performance\">Event performance</h2> <p>In most cases, an event such as <code>click</code> occurs infrequently and performance is not a significant concern. However, high frequency events such as <code>mousemove</code> or <code>scroll</code> can fire dozens of times per second, and in those cases it becomes more important to use events judiciously. Performance can be increased by reducing the amount of work done in the handler itself, caching information needed by the handler rather than recalculating it, or by rate-limiting the number of actual page updates using <code>setTimeout</code>.</p> <p>Attaching many delegated event handlers near the top of the document tree can degrade performance. Each time the event occurs, jQuery must compare all selectors of all attached events of that type to every element in the path from the event target up to the top of the document. For best performance, attach delegated events at a document location as close as possible to the target elements. Avoid excessive use of <code>document</code> or <code>document.body</code> for delegated events on large documents.</p> <p>jQuery can process simple selectors of the form <code>tag#id.class</code> very quickly when they are used to filter delegated events. So, <code>\"#myForm\"</code>, <code>\"a.external\"</code>, and <code>\"button\"</code> are all fast selectors. Delegated events that use more complex selectors, particularly hierarchical ones, can be several times slower--although they are still fast enough for most applications. Hierarchical selectors can often be avoided simply by attaching the handler to a more appropriate point in the document. For example, instead of <code>$( \"body\" ).on( \"click\", \"#commentForm .addNew\", addComment )</code> use <code>$( \"#commentForm\" ).on( \"click\", \".addNew\", addComment )</code>.</p> <h2 id=\"additional-notes\">Additional notes</h2> <p>There are shorthand methods for some events such as <a href=\"click\"><code>.click()</code></a> that can be used to attach or trigger event handlers. For a complete list of shorthand methods, see the <a href=\"https://api.jquery.com/category/events/\">events category</a>.</p> <p><em>Deprecated in jQuery 1.8, removed in 1.9:</em> The name <code>\"hover\"</code> used as a shorthand for the string <code>\"mouseenter mouseleave\"</code>. It attaches a <em>single event handler</em> for those two events, and the handler must examine <code>event.type</code> to determine whether the event is <code>mouseenter</code> or <code>mouseleave</code>. Do not confuse the \"hover\" pseudo-event-name with the <a href=\"hover\"><code>.hover()</code></a> method, which accepts <em>one or two</em> functions.</p> <p>jQuery's event system requires that a DOM element allow attaching data via a property on the element, so that events can be tracked and delivered. The <code>object</code>, <code>embed</code>, and <code>applet</code> elements cannot attach data, and therefore cannot have jQuery events bound to them.</p> <p>The <code>focus</code> and <code>blur</code> events are specified by the W3C to not bubble, but jQuery defines cross-browser <code>focusin</code> and <code>focusout</code> events that do bubble. When <code>focus</code> and <code>blur</code> are used to attach delegated event handlers, jQuery maps the names and delivers them as <code>focusin</code> and <code>focusout</code> respectively. For consistency and clarity, use the bubbling event type names.</p> <p>In all browsers, the <code>load</code>, <code>scroll</code>, and <code>error</code> events (e.g., on an <code>&lt;img&gt;</code> element) do not bubble. In Internet Explorer 8 and lower, the <code>paste</code> and <code>reset</code> events do not bubble. Such events are not supported for use with delegation, but they <em>can</em> be used when the event handler is directly attached to the element generating the event.</p> <p>The <code>error</code> event on the <code>window</code> object uses nonstandard arguments and return value conventions, so it is not supported by jQuery. Instead, assign a handler function directly to the <code>window.onerror</code> property.</p> <p>The handler list for an element is set when the event is first delivered. Adding or removing event handlers on the current element won't take effect until the next time the event is handled. To prevent any further event handlers from executing on an element within an event handler, call <code>event.stopImmediatePropagation()</code>. This behavior goes against the <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget-removeEventListener\">W3C events specification</a>. To better understand this case, consider the following code:</p> <pre class=\"syntaxhighlighter javascript\">var $test = $( \"#test\" );\n \nfunction handler1() {\n  console.log( \"handler1\" );\n  $test.off( \"click\", handler2 );\n}\n \nfunction handler2() {\n  console.log( \"handler2\" );\n}\n \n$test.on( \"click\", handler1 );\n$test.on( \"click\", handler2 );</pre> <p>In the code above, <code>handler2</code> will be executed anyway the first time even if it's removed using <a href=\"off\"><code>.off()</code></a>. However, the handler will not be executed the following times the <code>click</code> event is triggered.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Display a paragraph's text in an alert when it is clicked:</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).on( \"click\", function() {\n  alert( $( this ).text() );\n});</pre> </div> <div class=\"entry-example\" id=\"example-1\"> <p>Pass data to the event handler, which is specified here by name:</p> <pre class=\"syntaxhighlighter javascript\">function myHandler( event ) {\n  alert( event.data.foo );\n}\n$( \"p\" ).on( \"click\", { foo: \"bar\" }, myHandler );</pre> </div> <div class=\"entry-example\" id=\"example-2\"> <p>Cancel a form submit action and prevent the event from bubbling up by returning <code>false</code>:</p> <pre class=\"syntaxhighlighter javascript\">$( \"form\" ).on( \"submit\", false );</pre> </div> <div class=\"entry-example\" id=\"example-3\"> <p>Cancel only the default action by using <code>.preventDefault()</code>.</p> <pre class=\"syntaxhighlighter javascript\">$( \"form\" ).on( \"submit\", function( event ) {\n  event.preventDefault();\n});</pre> </div> <div class=\"entry-example\" id=\"example-4\"> <p>Stop submit events from bubbling without preventing form submit, using <code>.stopPropagation()</code>.</p> <pre class=\"syntaxhighlighter javascript\">$( \"form\" ).on( \"submit\", function( event ) {\n  event.stopPropagation();\n});</pre> </div> <div class=\"entry-example\" id=\"example-5\"> <p>Pass data to the event handler using the second argument to <code>.trigger()</code></p> <pre class=\"syntaxhighlighter javascript\">$( \"div\" ).on( \"click\", function( event, person ) {\n  alert( \"Hello, \" + person.name );\n});\n$( \"div\" ).trigger( \"click\", { name: \"Jim\" } );</pre> </div> <div class=\"entry-example\" id=\"example-6\"> <p>Use the the second argument of <code>.trigger()</code> to pass an array of data to the event handler</p> <pre class=\"syntaxhighlighter javascript\">$( \"div\" ).on( \"click\", function( event, salutation, name ) {\n  alert( salutation + \", \" + name );\n});\n$( \"div\" ).trigger( \"click\", [ \"Goodbye\", \"Jim\" ] );</pre> </div> <div class=\"entry-example\" id=\"example-7\"> <p>Attach and trigger custom (non-browser) events.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;on demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    color: red;\n  }\n  span {\n    color: blue;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Has an attached custom event.&lt;/p&gt;\n&lt;button&gt;Trigger custom event&lt;/button&gt;\n&lt;span style=\"display:none;\"&gt;&lt;/span&gt;\n \n&lt;script&gt;\n$( \"p\" ).on( \"myCustomEvent\", function( event, myName ) {\n  $( this ).text( myName + \", hi there!\" );\n  $( \"span\" )\n    .stop()\n    .css( \"opacity\", 1 )\n    .text( \"myName = \" + myName )\n    .fadeIn( 30 )\n    .fadeOut( 1000 );\n});\n$( \"button\" ).click(function () {\n  $( \"p\" ).trigger( \"myCustomEvent\", [ \"John\" ] );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-8\"> <p>Attach multiple event handlers simultaneously using a plain object.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;on demo&lt;/title&gt;\n  &lt;style&gt;\n  .test {\n    color: #000;\n    padding: .5em;\n    border: 1px solid #444;\n  }\n  .active {\n    color: #900;\n  }\n  .inside {\n    background-color: aqua;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div class=\"test\"&gt;test div&lt;/div&gt;\n \n&lt;script&gt;\n$( \"div.test\" ).on({\n  click: function() {\n    $( this ).toggleClass( \"active\" );\n  }, mouseenter: function() {\n    $( this ).addClass( \"inside\" );\n  }, mouseleave: function() {\n    $( this ).removeClass( \"inside\" );\n  }\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-9\"> <p>Click any paragraph to add another after it. Note that <code>.on()</code> allows a click event on any paragraph--even new ones--since the event is handled by the ever-present body element after it bubbles to there.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;on demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    background: yellow;\n    font-weight: bold;\n    cursor: pointer;\n    padding: 5px;\n  }\n  p.over {\n    background: #ccc;\n  }\n  span {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Click me!&lt;/p&gt;\n&lt;span&gt;&lt;/span&gt;\n \n&lt;script&gt;\nvar count = 0;\n$( \"body\" ).on( \"click\", \"p\", function() {\n  $( this ).after( \"&lt;p&gt;Another paragraph! \" + (++count) + \"&lt;/p&gt;\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-10\"> <p>Display each paragraph's text in an alert box whenever it is clicked:</p> <pre class=\"syntaxhighlighter javascript\">$( \"body\" ).on( \"click\", \"p\", function() {\n  alert( $( this ).text() );\n});</pre> </div> <div class=\"entry-example\" id=\"example-11\"> <p>Cancel a link's default action using the <code>.preventDefault()</code> method:</p> <pre class=\"syntaxhighlighter javascript\">$( \"body\" ).on( \"click\", \"a\", function( event ) {\n  event.preventDefault();\n});</pre> </div> <div class=\"entry-example\" id=\"example-12\"> <p>Attach multiple events—one on <code>mouseenter</code> and one on <code>mouseleave</code> to the same element:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#cart\" ).on( \"mouseenter mouseleave\", function( event ) {\n  $( this ).toggleClass( \"active\" );\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/on\" class=\"_attribution-link\">https://api.jquery.com/on</a>\n  </p>\n</div>\n","position":"<h1 class=\"entry-title\">.position()</h1> <div class=\"entry-content\"> <article id=\"position1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.position()</span><span class=\"returns\">Returns: <a href=\"types#Object\">Object</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Get the current coordinates of the first element in the set of matched elements, relative to the offset parent.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2/\">1.2</a></span><a id=\"position\" href=\"#position\">.position()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.position()</code> method allows us to retrieve the current position of an element <em>relative to the offset parent</em>. Contrast this with <code><a href=\"offset\">.offset()</a></code>, which retrieves the current position <em>relative to the document</em>. When positioning a new element near another one and within the same containing DOM element, <code>.position()</code> is the more useful.</p> <p>Returns an object containing the properties <code>top</code> and <code>left</code>.</p> <div class=\"warning\"> <p><strong>Note:</strong> jQuery does not support getting the position coordinates of hidden elements or accounting for borders, margins, or padding set on the body element.</p> </div> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> The number returned by dimensions-related APIs, including <code>.position()</code>, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Access the position of the second paragraph:</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;position demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    padding: 15px;\n  }\n  p {\n    margin-left: 10px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;\n  &lt;p&gt;Hello&lt;/p&gt;\n&lt;/div&gt;\n&lt;p&gt;&lt;/p&gt;\n \n&lt;script&gt;\nvar p = $( \"p:first\" );\nvar position = p.position();\n$( \"p:last\" ).text( \"left: \" + position.left + \", top: \" + position.top );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/position\" class=\"_attribution-link\">https://api.jquery.com/position</a>\n  </p>\n</div>\n","outerwidth":"<h1 class=\"entry-title\">.outerWidth()</h1> <div class=\"entry-content\"> Get the current computed width for the first element in the set of matched elements, including padding and border.<div class=\"toc\"> <h4><span>Contents:</span></h4> <ul class=\"toc-list\"> <li> <a href=\"#outerWidth1\">.outerWidth( [includeMargin ] )</a><ul><li><a href=\"#outerWidth-includeMargin\">.outerWidth( [includeMargin ] )</a></li></ul> </li> <li> <a href=\"#outerWidth2\">.outerWidth( value )</a><ul> <li><a href=\"#outerWidth-value\">.outerWidth( value )</a></li> <li><a href=\"#outerWidth-functionindex--width\">.outerWidth( function(index, width) )</a></li> </ul> </li> </ul> </div>\n<article id=\"outerWidth1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.outerWidth( [includeMargin ] )</span><span class=\"returns\">Returns: <a href=\"types#Number\">Number</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Get the current computed width for the first element in the set of matched elements, including padding and border.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2.6/\">1.2.6</a></span><a id=\"outerWidth-includeMargin\" href=\"#outerWidth-includeMargin\">.outerWidth( [includeMargin ] )</a> </h4> <ul><li> <div> <strong>includeMargin</strong> (default: <code>false</code>)</div> <div>Type: <a href=\"types#Boolean\">Boolean</a> </div> <div>A Boolean indicating whether to include the element's margin in the calculation.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Returns the width of the element, along with left and right padding, border, and optionally margin, in pixels.</p> <p>If <code>includeMargin</code> is omitted or <code>false</code>, the padding and border are included in the calculation; if <code>true</code>, the margin is also included.</p> <p>This method is not applicable to <code>window</code> and <code>document</code> objects; for these, use <code><a href=\"width\">.width()</a></code> instead. Although <code>.outerWidth()</code> can be used on table elements, it may give unexpected results on tables using the <code>border-collapse: collapse</code> CSS property.</p> <figure> <img src=\"https://api.jquery.com/resources/0042_04_06.png\"> <figcaption>Figure 1 - Illustration of the measured width</figcaption> </figure> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> The number returned by dimensions-related APIs, including <code>.outerWidth()</code>, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition. </li> <li> The value reported by <code>.outerWidth()</code> is not guaranteed to be accurate when the element or its parent is hidden. To get an accurate value, ensure the element is visible before using <code>.outerWidth()</code>. jQuery will attempt to temporarily show and then re-hide an element in order to measure its dimensions, but this is unreliable and (even when accurate) can significantly impact page performance. This show-and-rehide measurement feature may be removed in a future version of jQuery. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Get the outerWidth of a paragraph.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;outerWidth demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    margin: 10px;\n    padding: 5px;\n    border: 2px solid #666;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Hello&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n \n&lt;script&gt;\nvar p = $( \"p:first\" );\n$( \"p:last\" ).text(\n  \"outerWidth:\" + p.outerWidth() +\n  \" , outerWidth( true ):\" + p.outerWidth( true ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article><article id=\"outerWidth2\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.outerWidth( value )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Set the CSS outer width of each element in the set of matched elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.8.0/\">1.8.0</a></span><a id=\"outerWidth-value\" href=\"#outerWidth-value\">.outerWidth( value )</a> </h4> <ul><li> <div><strong>value</strong></div> <div>Type: <a href=\"types#String\">String</a> or <a href=\"types#Number\">Number</a> </div> <div>A number representing the number of pixels, or a number along with an optional unit of measure appended (as a string).</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.8.0/\">1.8.0</a></span><a id=\"outerWidth-functionindex--width\" href=\"#outerWidth-functionindex--width\">.outerWidth( function(index, width) )</a> </h4> <ul><li> <div><strong>function(index, width)</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function returning the outer width to set. Receives the index position of the element in the set and the old outer width as arguments. Within the function, <code>this</code> refers to the current element in the set.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc-1\"> <p>When calling <code>.outerWidth(value)</code>, the value can be either a string (number and unit) or a number. If only a number is provided for the value, jQuery assumes a pixel unit. If a string is provided, however, any valid CSS measurement may be used (such as <code>100px</code>, <code>50%</code>, or <code>auto</code>).</p> </div> <section class=\"entry-examples\" id=\"entry-examples-1\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-1-0\"> <p>Change the outer width of each div the first time it is clicked (and change its color).</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;outerWidth demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    width: 60px;\n    padding: 10px;\n    height: 50px;\n    float: left;\n    margin: 5px;\n    background: red;\n    cursor: pointer;\n  }\n  .mod {\n    background: blue;\n    cursor: default;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;d&lt;/div&gt;\n&lt;div&gt;d&lt;/div&gt;\n&lt;div&gt;d&lt;/div&gt;\n&lt;div&gt;d&lt;/div&gt;\n&lt;div&gt;d&lt;/div&gt;\n \n&lt;script&gt;\nvar modWidth = 60;\n$( \"div\" ).one( \"click\", function() {\n  $( this ).outerWidth( modWidth ).addClass( \"mod\" );\n  modWidth -= 8;\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/outerWidth\" class=\"_attribution-link\">https://api.jquery.com/outerWidth</a>\n  </p>\n</div>\n","one":"<h1 class=\"entry-title\">.one()</h1> <div class=\"entry-content\"> <article id=\"one1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.one( events [, data ], handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Attach a handler to an event for the elements. The handler is executed at most once per element per event type.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.1/\">1.1</a></span><a id=\"one-events-data-handler\" href=\"#one-events-data-handler\">.one( events [, data ], handler )</a> </h4> <ul> <li> <div><strong>events</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing one or more JavaScript event types, such as \"click\" or \"submit,\" or custom event names.</div> </li> <li> <div><strong>data</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>An object containing data that will be passed to the event handler.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute at the time the event is triggered.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a></span><a id=\"one-events-selector-data-handler\" href=\"#one-events-selector-data-handler\">.one( events [, selector ] [, data ], handler )</a> </h4> <ul> <li> <div><strong>events</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>One or more space-separated event types and optional namespaces, such as \"click\" or \"keydown.myPlugin\".</div> </li> <li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A selector string to filter the descendants of the selected elements that trigger the event. If the selector is <code>null</code> or omitted, the event is always triggered when it reaches the selected element.</div> </li> <li> <div><strong>data</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>Data to be passed to the handler in <a href=\"event.data\"><code>event.data</code></a> when an event is triggered.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute when the event is triggered. The value <code>false</code> is also allowed as a shorthand for a function that simply does <code>return false</code>.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a></span><a id=\"one-events-selector-data\" href=\"#one-events-selector-data\">.one( events [, selector ] [, data ] )</a> </h4> <ul> <li> <div><strong>events</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>An object in which the string keys represent one or more space-separated event types and optional namespaces, and the values represent a handler function to be called for the event(s).</div> </li> <li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A selector string to filter the descendants of the selected elements that will call the handler. If the selector is null or omitted, the handler is always called when it reaches the selected element.</div> </li> <li> <div><strong>data</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>Data to be passed to the handler in <a href=\"event.data\"><code>event.data</code></a> when an event occurs.</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.one()</code> method is identical to <code>.on()</code>, except that the handler for a given element and event type is unbound after its first invocation. For example:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#foo\" ).one( \"click\", function() {\n  alert( \"This will be displayed only once.\" );\n});</pre> <p>After the code is executed, a click on the element with ID <code>foo</code> will display the alert. Subsequent clicks will do nothing. This code is equivalent to:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#foo\" ).on( \"click\", function( event ) {\n  alert( \"This will be displayed only once.\" );\n  $( this ).off( event );\n});</pre> <p>In other words, explicitly calling <code>.off()</code> from within a regularly-bound handler has exactly the same effect.</p> <p>If the first argument contains more than one space-separated event types, the event handler is called <em>once for each event type</em>.</p> <pre class=\"syntaxhighlighter javascript\">$( \"#foo\" ).one( \"click mouseover\", function() {\n  alert( \"The \" + event.type + \" event happened!\" );\n});</pre> <p>In the example above the alert could be displayed twice due to the <em>two</em> event types (<code>click</code> and <code>mouseover</code>).</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Tie a one-time click to each div.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;one demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    width: 60px;\n    height: 60px;\n    margin: 5px;\n    float: left;\n    background: green;\n    border: 10px outset;\n    cursor:pointer;\n  }\n  p {\n    color: red;\n    margin: 0;\n    clear: left;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;p&gt;Click a green square...&lt;/p&gt;\n \n&lt;script&gt;\nvar n = 0;\n$( \"div\" ).one( \"click\", function() {\n  var index = $( \"div\" ).index( this );\n  $( this ).css({\n    borderStyle: \"inset\",\n    cursor: \"auto\"\n  });\n  $( \"p\" ).text( \"Div at index #\" + index + \" clicked.\" +\n    \" That's \" + (++n) + \" total clicks.\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>To display the text of all paragraphs in an alert box the first time each of them is clicked:</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).one( \"click\", function() {\n  alert( $( this ).text() );\n});</pre> </div> <div class=\"entry-example\" id=\"example-2\"> <p>Event handlers will trigger once per element per event type</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;one demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div class=\"count\"&gt;0&lt;/div&gt;\n&lt;div class=\"target\"&gt;Hover/click me&lt;/div&gt;\n \n&lt;script&gt;\nvar n = 0;\n$(\".target\").one(\"click mouseenter\", function() {\n  $(\".count\").html(++n);\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/one\" class=\"_attribution-link\">https://api.jquery.com/one</a>\n  </p>\n</div>\n","only-child-selector":"<h1 class=\"entry-title\">:only-child Selector</h1> <div class=\"entry-content\"> <article id=\"only-child1\" class=\"entry selector\"><h2 class=\"section-title\"><span>only-child selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all elements that are the only child of their parent.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.1.4/\">1.1.4</a></span>jQuery( \":only-child\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>If the parent has other child elements, nothing is matched.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Change the text and add a border for each button that is the only child of its parent.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;only-child demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    width: 100px;\n    height: 80px;\n    margin: 5px;\n    float: left;\n    background: #b9e;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;\n  &lt;button&gt;Sibling!&lt;/button&gt;\n  &lt;button&gt;Sibling!&lt;/button&gt;\n&lt;/div&gt;\n \n&lt;div&gt;\n  &lt;button&gt;Sibling!&lt;/button&gt;\n&lt;/div&gt;\n \n&lt;div&gt;\n  None\n&lt;/div&gt;\n \n&lt;div&gt;\n  &lt;button&gt;Sibling!&lt;/button&gt;\n  &lt;button&gt;Sibling!&lt;/button&gt;\n  &lt;button&gt;Sibling!&lt;/button&gt;\n&lt;/div&gt;\n \n&lt;div&gt;\n  &lt;button&gt;Sibling!&lt;/button&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\n$( \"div button:only-child\" ).text( \"Alone\" ).css( \"border\", \"2px blue solid\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/only-child-selector\" class=\"_attribution-link\">https://api.jquery.com/only-child-selector</a>\n  </p>\n</div>\n","only-of-type-selector":"<h1 class=\"entry-title\">:only-of-type Selector</h1> <div class=\"entry-content\"> <article id=\"only-of-type1\" class=\"entry selector\"><h2 class=\"section-title\"><span>only-of-type selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all elements that have no siblings with the same element name.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.9/\">1.9</a></span>jQuery( \":only-of-type\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>If the parent has other child elements with the same element name, nothing is matched.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Change the text and add a border for each button that is the only child button of its parent.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;only-of-type demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    width: 100px;\n    height: 80px;\n    margin: 5px;\n    float: left;\n    background: #b9e;\n  }\n  span {\n    padding: 2px;\n    margin: 3px;\n    line-height: 1.4;\n    border: 1px solid #000;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;\n  &lt;button&gt;Sibling!&lt;/button&gt;\n  &lt;button&gt;Sibling!&lt;/button&gt;\n&lt;/div&gt;\n \n&lt;div&gt;\n  &lt;button&gt;Sibling!&lt;/button&gt;\n&lt;/div&gt;\n&lt;div&gt;\n  None\n&lt;/div&gt;\n \n&lt;div&gt;\n  &lt;button&gt;Sibling!&lt;/button&gt;\n  &lt;span&gt;Sibling!&lt;/span&gt;\n  &lt;span&gt;Sibling!&lt;/span&gt;\n&lt;/div&gt;\n \n&lt;div&gt;\n  &lt;button&gt;Sibling!&lt;/button&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\n  $( \"button:only-of-type\" ).text( \"Alone\" ).css( \"border\", \"2px blue solid\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/only-of-type-selector\" class=\"_attribution-link\">https://api.jquery.com/only-of-type-selector</a>\n  </p>\n</div>\n","parent-selector":"<h1 class=\"entry-title\">:parent Selector</h1> <div class=\"entry-content\"> <article id=\"parent1\" class=\"entry selector\"><h2 class=\"section-title\"><span>parent selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Select all elements that have at least one child node (either an element or text).</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \":parent\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This is the inverse of <code>:empty</code>. </p> <p>One important thing to note regarding the use of <code>:parent</code> (and <code>:empty</code>) is that child nodes include text nodes.</p> <p>The W3C recommends that the <code>&lt;p&gt;</code> element have at least one child node, even if that child is merely text (see <a href=\"http://www.w3.org/TR/html401/struct/text.html#edef-P\">http://www.w3.org/TR/html401/struct/text.html#edef-P</a>). Some other elements, on the other hand, are empty (i.e. have no children) by definition:<code> &lt;input&gt;</code>, <code>&lt;img&gt;</code>, <code>&lt;br&gt;</code>, and <code>&lt;hr&gt;</code>, for example.</p> <p>To obtain the parents or ancestors of an existing jQuery set, see the <code><a href=\"parent\">.parent()</a></code> and <code><a href=\"parents\">.parents()</a></code> methods.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> Because <code>:parent</code> is a jQuery extension and not part of the CSS specification, queries using <code>:parent</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. To achieve the best performance when using <code>:parent</code> to select elements, first select the elements using a pure CSS selector, then use <a href=\"filter\"><code>.filter(\":parent\")</code></a>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds all tds with children, including text.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;parent demo&lt;/title&gt;\n  &lt;style&gt;\n  td {\n    width: 40px;\n    background: green;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;table border=\"1\"&gt;\n  &lt;tr&gt;&lt;td&gt;Value 1&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;\n  &lt;tr&gt;&lt;td&gt;Value 2&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;\n&lt;/table&gt;\n \n&lt;script&gt;\n$( \"td:parent\" ).fadeTo( 1500, 0.3 );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/parent-selector\" class=\"_attribution-link\">https://api.jquery.com/parent-selector</a>\n  </p>\n</div>\n","outerheight":"<h1 class=\"entry-title\">.outerHeight()</h1> <div class=\"entry-content\"> Get the current computed height for the first element in the set of matched elements, including padding, border, and optionally margin. Returns a number (without \"px\") representation of the value or null if called on an empty set of elements.<div class=\"toc\"> <h4><span>Contents:</span></h4> <ul class=\"toc-list\"> <li> <a href=\"#outerHeight1\">.outerHeight( [includeMargin ] )</a><ul><li><a href=\"#outerHeight-includeMargin\">.outerHeight( [includeMargin ] )</a></li></ul> </li> <li> <a href=\"#outerHeight2\">.outerHeight( value )</a><ul> <li><a href=\"#outerHeight-value\">.outerHeight( value )</a></li> <li><a href=\"#outerHeight-functionindex--height\">.outerHeight( function(index, height) )</a></li> </ul> </li> </ul> </div>\n<article id=\"outerHeight1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.outerHeight( [includeMargin ] )</span><span class=\"returns\">Returns: <a href=\"types#Number\">Number</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Get the current computed height for the first element in the set of matched elements, including padding, border, and optionally margin. Returns a number (without \"px\") representation of the value or null if called on an empty set of elements.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2.6/\">1.2.6</a></span><a id=\"outerHeight-includeMargin\" href=\"#outerHeight-includeMargin\">.outerHeight( [includeMargin ] )</a> </h4> <ul><li> <div> <strong>includeMargin</strong> (default: <code>false</code>)</div> <div>Type: <a href=\"types#Boolean\">Boolean</a> </div> <div>A Boolean indicating whether to include the element's margin in the calculation.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The top and bottom padding and border are always included in the <code>.outerHeight()</code> calculation; if the <code>includeMargin</code> argument is set to <code>true</code>, the margin (top and bottom) is also included.</p> <p>This method is not applicable to <code>window</code> and <code>document</code> objects; for these, use <code><a href=\"height\">.height()</a></code> instead.</p> <figure> <img src=\"https://api.jquery.com/resources/0042_04_03.png\"> <figcaption>Figure 1 - Illustration of the measured height</figcaption> </figure> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> The number returned by dimensions-related APIs, including <code>.outerHeight()</code>, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition. </li> <li> The value reported by <code>.outerHeight()</code> is not guaranteed to be accurate when the element or its parent is hidden. To get an accurate value, ensure the element is visible before using <code>.outerHeight()</code>. jQuery will attempt to temporarily show and then re-hide an element in order to measure its dimensions, but this is unreliable and (even when accurate) can significantly impact page performance. This show-and-rehide measurement feature may be removed in a future version of jQuery. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Get the outerHeight of a paragraph.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;outerHeight demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    margin: 10px;\n    padding: 5px;\n    border: 2px solid #666;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Hello&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n \n&lt;script&gt;\nvar p = $( \"p:first\" );\n$( \"p:last\" ).text(\n  \"outerHeight:\" + p.outerHeight() +\n  \" , outerHeight( true ):\" + p.outerHeight( true ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article><article id=\"outerHeight2\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.outerHeight( value )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Set the CSS outer Height of each element in the set of matched elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.8.0/\">1.8.0</a></span><a id=\"outerHeight-value\" href=\"#outerHeight-value\">.outerHeight( value )</a> </h4> <ul><li> <div><strong>value</strong></div> <div>Type: <a href=\"types#String\">String</a> or <a href=\"types#Number\">Number</a> </div> <div>A number representing the number of pixels, or a number along with an optional unit of measure appended (as a string).</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.8.0/\">1.8.0</a></span><a id=\"outerHeight-functionindex--height\" href=\"#outerHeight-functionindex--height\">.outerHeight( function(index, height) )</a> </h4> <ul><li> <div><strong>function(index, height)</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function returning the outer height to set. Receives the index position of the element in the set and the old outer height as arguments. Within the function, <code>this</code> refers to the current element in the set.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc-1\"> <p>When calling <code>.outerHeight(value)</code>, the value can be either a string (number and unit) or a number. If only a number is provided for the value, jQuery assumes a pixel unit. If a string is provided, however, any valid CSS measurement may be used (such as <code>100px</code>, <code>50%</code>, or <code>auto</code>).</p> </div> <section class=\"entry-examples\" id=\"entry-examples-1\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-1-0\"> <p>Change the outer height of each div the first time it is clicked (and change its color).</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;outerHeight demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    width: 50px;\n    padding: 10px;\n    height: 60px;\n    float: left;\n    margin: 5px;\n    background: red;\n    cursor: pointer;\n  }\n  .mod {\n    background: blue;\n    cursor: default;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;d&lt;/div&gt;\n&lt;div&gt;d&lt;/div&gt;\n&lt;div&gt;d&lt;/div&gt;\n&lt;div&gt;d&lt;/div&gt;\n&lt;div&gt;d&lt;/div&gt;\n \n&lt;script&gt;\nvar modHeight = 60;\n$( \"div\" ).one( \"click\", function() {\n  $( this ).outerHeight( modHeight ).addClass( \"mod\" );\n  modHeight -= 8;\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/outerHeight\" class=\"_attribution-link\">https://api.jquery.com/outerHeight</a>\n  </p>\n</div>\n","parent":"<h1 class=\"entry-title\">.parent()</h1> <div class=\"entry-content\"> <article id=\"parent1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.parent( [selector ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Get the parent of each element in the current set of matched elements, optionally filtered by a selector.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"parent-selector\" href=\"#parent-selector\">.parent( [selector ] )</a> </h4> <ul><li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> </div> <div>A string containing a selector expression to match elements against.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Given a jQuery object that represents a set of DOM elements, the <code>parent()</code> method traverses to the immediate parent of each of these elements in the DOM tree and constructs a new jQuery object from the matching elements.</p> <p>This method is similar to <a href=\"parents\"><code>.parents()</code></a>, except <code>.parent()</code> only travels a single level up the DOM tree. Also, <code>$( \"html\" ).parent()</code> method returns a set containing <code>document</code> whereas <code>$( \"html\" ).parents()</code> returns an empty set.</p> <p>The method optionally accepts a selector expression of the same type that we can pass to the <code>$()</code> function. If the selector is supplied, the elements will be filtered by testing whether they match it.</p> <p>Consider a page with a basic nested list on it:</p> <pre class=\"syntaxhighlighter xml\">&lt;ul class=\"level-1\"&gt;\n  &lt;li class=\"item-i\"&gt;I&lt;/li&gt;\n  &lt;li class=\"item-ii\"&gt;II\n    &lt;ul class=\"level-2\"&gt;\n      &lt;li class=\"item-a\"&gt;A&lt;/li&gt;\n      &lt;li class=\"item-b\"&gt;B\n        &lt;ul class=\"level-3\"&gt;\n          &lt;li class=\"item-1\"&gt;1&lt;/li&gt;\n          &lt;li class=\"item-2\"&gt;2&lt;/li&gt;\n          &lt;li class=\"item-3\"&gt;3&lt;/li&gt;\n        &lt;/ul&gt;\n      &lt;/li&gt;\n      &lt;li class=\"item-c\"&gt;C&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n  &lt;li class=\"item-iii\"&gt;III&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>If we begin at item A, we can find its parents:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li.item-a\" ).parent().css( \"background-color\", \"red\" );</pre> <p>The result of this call is a red background for the level-2 list. Since we do not supply a selector expression, the parent element is unequivocally included as part of the object. If we had supplied one, the element would be tested for a match before it was included.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Shows the parent of each element as (parent &gt; child). Check the View Source to see the raw html.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;parent demo&lt;/title&gt;\n  &lt;style&gt;\n  div, p {\n    margin: 10px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;div,\n  &lt;span&gt;span, &lt;/span&gt;\n  &lt;b&gt;b &lt;/b&gt;\n&lt;/div&gt;\n \n&lt;p&gt;p,\n  &lt;span&gt;span,\n    &lt;em&gt;em &lt;/em&gt;\n  &lt;/span&gt;\n&lt;/p&gt;\n \n&lt;div&gt;div,\n  &lt;strong&gt;strong,\n    &lt;span&gt;span, &lt;/span&gt;\n    &lt;em&gt;em,\n      &lt;b&gt;b, &lt;/b&gt;\n    &lt;/em&gt;\n  &lt;/strong&gt;\n  &lt;b&gt;b &lt;/b&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\n$( \"*\", document.body ).each(function() {\n  var parentTag = $( this ).parent().get( 0 ).tagName;\n  $( this ).prepend( document.createTextNode( parentTag + \" &gt; \" ) );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Find the parent element of each paragraph with a class \"selected\".</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;parent demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;&lt;p&gt;Hello&lt;/p&gt;&lt;/div&gt;\n&lt;div class=\"selected\"&gt;&lt;p&gt;Hello Again&lt;/p&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"p\" ).parent( \".selected\" ).css( \"background\", \"yellow\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/parent\" class=\"_attribution-link\">https://api.jquery.com/parent</a>\n  </p>\n</div>\n","parentsuntil":"<h1 class=\"entry-title\">.parentsUntil()</h1> <div class=\"entry-content\"> <article id=\"parentsUntil1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.parentsUntil( [selector ] [, filter ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Get the ancestors of each element in the current set of matched elements, up to but not including the element matched by the selector, DOM node, or jQuery object.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"parentsUntil-selector-filter\" href=\"#parentsUntil-selector-filter\">.parentsUntil( [selector ] [, filter ] )</a> </h4> <ul> <li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> </div> <div>A string containing a selector expression to indicate where to stop matching ancestor elements.</div> </li> <li> <div><strong>filter</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> </div> <div>A string containing a selector expression to match elements against.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.6/\">1.6</a></span><a id=\"parentsUntil-element-filter\" href=\"#parentsUntil-element-filter\">.parentsUntil( [element ] [, filter ] )</a> </h4> <ul> <li> <div><strong>element</strong></div> <div>Type: <a href=\"types#Element\">Element</a> or <a href=\"types#jQuery\">jQuery</a> </div> <div>A DOM node or jQuery object indicating where to stop matching ancestor elements.</div> </li> <li> <div><strong>filter</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> </div> <div>A string containing a selector expression to match elements against.</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Given a selector expression that represents a set of DOM elements, the <code>.parentsUntil()</code> method traverses through the ancestors of these elements until it reaches an element matched by the selector passed in the method's argument. The resulting jQuery object contains all of the ancestors up to but not including the one matched by the <code>.parentsUntil()</code> selector.</p> <p>If the selector is not matched or is not supplied, all ancestors will be selected; in these cases it selects the same elements as the <code>.parents()</code> method does when no selector is provided.</p> <p><strong>As of jQuery 1.6</strong>, A DOM node or jQuery object, instead of a selector, may be used for the first <strong>.parentsUntil()</strong> argument.</p> <p>The method optionally accepts a selector expression for its second argument. If this argument is supplied, the elements will be filtered by testing whether they match it.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Find the ancestors of &lt;li class=\"item-a\"&gt; up to &lt;ul class=\"level-1\"&gt; and give them a red background color. Also, find ancestors of &lt;li class=\"item-2\"&gt; that have a class of \"yes\" up to &lt;ul class=\"level-1\"&gt; and give them a green border.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;parentsUntil demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;ul class=\"level-1 yes\"&gt;\n  &lt;li class=\"item-i\"&gt;I&lt;/li&gt;\n  &lt;li class=\"item-ii\"&gt;II\n    &lt;ul class=\"level-2 yes\"&gt;\n      &lt;li class=\"item-a\"&gt;A&lt;/li&gt;\n      &lt;li class=\"item-b\"&gt;B\n        &lt;ul class=\"level-3\"&gt;\n          &lt;li class=\"item-1\"&gt;1&lt;/li&gt;\n          &lt;li class=\"item-2\"&gt;2&lt;/li&gt;\n          &lt;li class=\"item-3\"&gt;3&lt;/li&gt;\n        &lt;/ul&gt;\n      &lt;/li&gt;\n      &lt;li class=\"item-c\"&gt;C&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n  &lt;li class=\"item-iii\"&gt;III&lt;/li&gt;\n&lt;/ul&gt;\n \n&lt;script&gt;\n$( \"li.item-a\" )\n  .parentsUntil( \".level-1\" )\n    .css( \"background-color\", \"red\" );\n \n$( \"li.item-2\" )\n  .parentsUntil( $( \"ul.level-1\" ), \".yes\" )\n    .css( \"border\", \"3px solid green\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/parentsUntil\" class=\"_attribution-link\">https://api.jquery.com/parentsUntil</a>\n  </p>\n</div>\n","password-selector":"<h1 class=\"entry-title\">:password Selector</h1> <div class=\"entry-content\"> <article id=\"password1\" class=\"entry selector\"><h2 class=\"section-title\"><span>password selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all elements of type password.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \":password\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p><code>$( \":password\" )</code> is equivalent to <code>$( \"[type=password]\" )</code>. As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ( \"*\" ) is implied. In other words, the bare <code>$( \":password\" )</code> is equivalent to <code>$( \"*:password\" )</code>, so <code>$( \"input:password\" )</code> should be used instead. </p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> Because <code>:password</code> is a jQuery extension and not part of the CSS specification, queries using <code>:password</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. For better performance in modern browsers, use <code>[type=\"password\"]</code> instead. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds all password inputs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;password demo&lt;/title&gt;\n  &lt;style&gt;\n  textarea {\n    height: 45px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;form&gt;\n  &lt;input type=\"button\" value=\"Input Button\"&gt;\n  &lt;input type=\"checkbox\"&gt;\n  &lt;input type=\"file\"&gt;\n  &lt;input type=\"hidden\"&gt;\n  &lt;input type=\"image\"&gt;\n  &lt;input type=\"password\"&gt;\n  &lt;input type=\"radio\"&gt;\n  &lt;input type=\"reset\"&gt;\n  &lt;input type=\"submit\"&gt;\n  &lt;input type=\"text\"&gt;\n  &lt;select&gt;\n    &lt;option&gt;Option&lt;/option&gt;\n  &lt;/select&gt;\n  &lt;textarea&gt;&lt;/textarea&gt;\n  &lt;button&gt;Button&lt;/button&gt;\n&lt;/form&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar input = $( \"input:password\" ).css({\n  background: \"yellow\",\n  border: \"3px red solid\"\n});\n$( \"div\" )\n  .text( \"For this type jQuery found \" + input.length + \".\" )\n  .css( \"color\", \"red\" );\n \n// Prevent form submission\n$( \"form\" ).submit(function() {\n  return false;\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/password-selector\" class=\"_attribution-link\">https://api.jquery.com/password-selector</a>\n  </p>\n</div>\n","removeattr":"<h1 class=\"entry-title\">.removeAttr()</h1> <div class=\"entry-content\"> <article id=\"removeAttr1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.removeAttr( attributeName )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Remove an attribute from each element in the set of matched elements.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"removeAttr-attributeName\" href=\"#removeAttr-attributeName\">.removeAttr( attributeName )</a> </h4> <ul><li> <div><strong>attributeName</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>An attribute to remove; as of version 1.7, it can be a space-separated list of attributes.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.removeAttr()</code> method uses the JavaScript <code>removeAttribute()</code> function, but it has the advantage of being able to be called directly on a jQuery object and it accounts for different attribute naming across browsers.</p> <p><strong>Note:</strong> Removing an inline <code>onclick</code> event handler using <code>.removeAttr()</code> doesn't achieve the desired effect in Internet Explorer 8, 9 and 11. To avoid potential problems, use <code>.prop()</code> instead:</p> <pre class=\"syntaxhighlighter javascript\">$element.prop( \"onclick\", null );\nconsole.log( \"onclick property: \", $element[ 0 ].onclick );</pre>  </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Clicking the button changes the title of the input next to it. Move the mouse pointer over the text input to see the effect of adding and removing the title attribute.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;removeAttr demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button&gt;Change title&lt;/button&gt;\n&lt;input type=\"text\" title=\"hello there\"&gt;\n&lt;div id=\"log\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\n(function() {\n  var inputTitle = $( \"input\" ).attr( \"title\" );\n  $( \"button\" ).click(function() {\n    var input = $( this ).next();\n \n    if ( input.attr( \"title\" ) === inputTitle ) {\n      input.removeAttr( \"title\" )\n    } else {\n      input.attr( \"title\", inputTitle );\n    }\n \n    $( \"#log\" ).html( \"input title is now \" + input.attr( \"title\" ) );\n  });\n})();\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/removeAttr\" class=\"_attribution-link\">https://api.jquery.com/removeAttr</a>\n  </p>\n</div>\n","prepend":"<h1 class=\"entry-title\">.prepend()</h1> <div class=\"entry-content\"> <article id=\"prepend1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.prepend( content [, content ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Insert content, specified by the parameter, to the beginning of each element in the set of matched elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"prepend-content-content\" href=\"#prepend-content-content\">.prepend( content [, content ] )</a> </h4> <ul> <li> <div><strong>content</strong></div> <div>Type: <a href=\"types#htmlString\">htmlString</a> or <a href=\"types#Element\">Element</a> or <a href=\"types#Text\">Text</a> or <a href=\"types#Array\">Array</a> or <a href=\"types#jQuery\">jQuery</a> </div> <div>DOM element, text node, array of elements and text nodes, HTML string, or jQuery object to insert at the beginning of each element in the set of matched elements.</div> </li> <li> <div><strong>content</strong></div> <div>Type: <a href=\"types#htmlString\">htmlString</a> or <a href=\"types#Element\">Element</a> or <a href=\"types#Text\">Text</a> or <a href=\"types#Array\">Array</a> or <a href=\"types#jQuery\">jQuery</a> </div> <div>One or more additional DOM elements, text nodes, arrays of elements and text nodes, HTML strings, or jQuery objects to insert at the beginning of each element in the set of matched elements.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"prepend-function\" href=\"#prepend-function\">.prepend( function )</a> </h4> <ul><li> <div><strong>function</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Integer\">Integer</a> elementOfArray, <a href=\"types#String\">String</a> html ) =&gt; <a href=\"types#htmlString\">htmlString</a> or <a href=\"types#Element\">Element</a> or <a href=\"types#Text\">Text</a> or <a href=\"types#jQuery\">jQuery</a> </div> <div>A function that returns an HTML string, DOM element(s), text node(s), or jQuery object to insert at the beginning of each element in the set of matched elements. Receives the index position of the element in the set and the old HTML value of the element as arguments. Within the function, <code>this</code> refers to the current element in the set.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.prepend()</code> method inserts the specified content as the first child of each element in the jQuery collection (To insert it as the <em>last</em> child, use <a href=\"append\"><code>.append()</code></a>). </p> <p>The <code>.prepend()</code> and <code><a href=\"prependto\">.prependTo()</a></code> methods perform the same task. The major difference is in the syntax—specifically, in the placement of the content and target. With <code>.prepend()</code>, the selector expression preceding the method is the container into which the content is inserted. With <code>.prependTo()</code>, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.</p> <p>Consider the following HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;h2&gt;Greetings&lt;/h2&gt;\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;/div&gt;\n&lt;/div&gt;</pre> <p>You can create content and insert it into several elements at once:</p> <pre class=\"syntaxhighlighter javascript\">$( \".inner\" ).prepend( \"&lt;p&gt;Test&lt;/p&gt;\" );</pre> <p>Each <code>&lt;div class=\"inner\"&gt;</code> element gets this new content:</p> <pre class=\"syntaxhighlighter xml\">&lt;h2&gt;Greetings&lt;/h2&gt;\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;\n    &lt;p&gt;Test&lt;/p&gt;\n    Hello\n  &lt;/div&gt;\n  &lt;div class=\"inner\"&gt;\n    &lt;p&gt;Test&lt;/p&gt;\n    Goodbye\n  &lt;/div&gt;\n&lt;/div&gt;</pre> <p>You can also select an element on the page and insert it into another:</p> <pre class=\"syntaxhighlighter javascript\">$( \".container\" ).prepend( $( \"h2\" ) );</pre> <p>If <em>a single element</em> selected this way is inserted into a single location elsewhere in the DOM, it will be moved into the target (<em>not cloned</em>):</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n    &lt;h2&gt;Greetings&lt;/h2&gt;\n    &lt;div class=\"inner\"&gt;Hello&lt;/div&gt;\n    &lt;div class=\"inner\"&gt;Goodbye&lt;/div&gt;\n&lt;/div&gt;</pre> <p><strong>Important</strong>: If there is more than one target element, however, cloned copies of the inserted element will be created for each target except for the last one.</p> <h4 id=\"additional-arguments\">Additional Arguments</h4> <p>Similar to other content-adding methods such as <code><a href=\"append\">.append()</a></code> and <code><a href=\"before\">.before()</a></code>, <code>.prepend()</code> also supports passing in multiple arguments as input. Supported input includes DOM elements, jQuery objects, HTML strings, and arrays of DOM elements.</p> <p>For example, the following will insert two new <code>&lt;div&gt;</code>s and an existing <code>&lt;div&gt;</code> as the first three child nodes of the body:</p> <pre class=\"syntaxhighlighter javascript\">var $newdiv1 = $( \"&lt;div id='object1'&gt;&lt;/div&gt;\"),\n  newdiv2 = document.createElement( \"div\" ),\n  existingdiv1 = document.getElementById( \"foo\" );\n \n$( \"body\" ).prepend( $newdiv1, [ newdiv2, existingdiv1 ] );</pre> <p>Since <code>.prepend()</code> can accept any number of additional arguments, the same result can be achieved by passing in the three <code>&lt;div&gt;</code>s as three separate arguments, like so: <code>$( \"body\" ).prepend( $newdiv1, newdiv2, existingdiv1 )</code>. The type and number of arguments will largely depend on how you collect the elements in your code.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> By design, any jQuery constructor or method that accepts an HTML string — <a href=\"jquery\">jQuery()</a>, <a href=\"append\">.append()</a>, <a href=\"after\">.after()</a>, etc. — can potentially execute code. This can occur by injection of script tags or use of HTML attributes that execute code (for example, <code>&lt;img onload=\"\"&gt;</code>). Do not use these methods to insert strings obtained from untrusted sources such as URL query parameters, cookies, or form inputs. Doing so can introduce cross-site-scripting (XSS) vulnerabilities. Remove or escape any user input before adding content to the document. </li> <li> jQuery doesn't officially support SVG. Using jQuery methods on SVG documents, unless explicitly documented for that method, might cause unexpected behaviors. Examples of methods that support SVG as of jQuery 3.0 are <code>addClass</code> and <code>removeClass</code>. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Prepends some HTML to all paragraphs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;prepend demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;there, friend!&lt;/p&gt;\n&lt;p&gt;amigo!&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).prepend( \"&lt;b&gt;Hello &lt;/b&gt;\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Prepends a DOM Element to all paragraphs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;prepend demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;is what I'd say&lt;/p&gt;\n&lt;p&gt;is what I said&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).prepend( document.createTextNode( \"Hello \" ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-2\"> <p>Prepends a jQuery object (similar to an Array of DOM Elements) to all paragraphs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;prepend demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt; is what was said.&lt;/p&gt;&lt;b&gt;Hello&lt;/b&gt;\n \n&lt;script&gt;\n$( \"p\" ).prepend( $( \"b\" ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/prepend\" class=\"_attribution-link\">https://api.jquery.com/prepend</a>\n  </p>\n</div>\n","prev":"<h1 class=\"entry-title\">.prev()</h1> <div class=\"entry-content\"> <article id=\"prev1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.prev( [selector ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Get the immediately preceding sibling of each element in the set of matched elements. If a selector is provided, it retrieves the previous sibling only if it matches that selector.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"prev-selector\" href=\"#prev-selector\">.prev( [selector ] )</a> </h4> <ul><li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> </div> <div>A string containing a selector expression to match elements against.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Given a jQuery object that represents a set of DOM elements, the <code>.prev()</code> method searches for the predecessor of each of these elements in the DOM tree and constructs a new jQuery object from the matching elements.</p> <p>The method optionally accepts a selector expression of the same type that can be passed to the <code>$()</code> function. If the selector is supplied, the preceding element will be filtered by testing whether it match the selector.</p> <p>Consider a page with a simple list on it:</p> <pre class=\"syntaxhighlighter xml\">&lt;ul&gt;\n  &lt;li&gt;list item 1&lt;/li&gt;\n  &lt;li&gt;list item 2&lt;/li&gt;\n  &lt;li class=\"third-item\"&gt;list item 3&lt;/li&gt;\n  &lt;li&gt;list item 4&lt;/li&gt;\n  &lt;li&gt;list item 5&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>To select the element that comes immediately before item three:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li.third-item\" ).prev().css( \"background-color\", \"red\" );</pre> <p>The result of this call is a red background behind item 2. Since no selector expression is supplied, this preceding element is unequivocally included as part of the object. If one had been supplied, the element would be tested for a match before it was included.</p> <p>If no previous sibling exists, or if the previous sibling element does not match a supplied selector, an empty jQuery object is returned.</p> <p>To select <em>all</em> preceding sibling elements, rather than just the preceding <em>adjacent</em> sibling, use the <a href=\"prevall\">.prevAll()</a> method.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Find the very previous sibling of each div.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;prev demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    width: 40px;\n    height: 40px;\n    margin: 10px;\n    float: left;\n    border: 2px blue solid;\n    padding: 2px;\n  }\n  span {\n    font-size: 14px;\n  }\n  p {\n    clear: left;\n    margin: 10px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;span&gt;has child&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div id=\"start\"&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;p&gt;&lt;button&gt;Go to Prev&lt;/button&gt;&lt;/p&gt;\n \n&lt;script&gt;\nvar $curr = $( \"#start\" );\n$curr.css( \"background\", \"#f99\" );\n$( \"button\" ).click(function() {\n  $curr = $curr.prev();\n  $( \"div\" ).css( \"background\", \"\" );\n  $curr.css( \"background\", \"#f99\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>For each paragraph, find the very previous sibling that has a class \"selected\".</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;prev demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;&lt;span&gt;Hello&lt;/span&gt;&lt;/div&gt;\n&lt;p class=\"selected\"&gt;Hello Again&lt;/p&gt;\n&lt;p&gt;And Again&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).prev( \".selected\" ).css( \"background\", \"yellow\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/prev\" class=\"_attribution-link\">https://api.jquery.com/prev</a>\n  </p>\n</div>\n","promise":"<h1 class=\"entry-title\">.promise()</h1> <div class=\"entry-content\"> <article id=\"promise1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.promise( [type ] [, target ] )</span><span class=\"returns\">Returns: <a href=\"types#Promise\">Promise</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong> Return a Promise object to observe when all actions of a certain type bound to the collection, queued or not, have finished. </p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.6/\">1.6</a></span><a id=\"promise-type-target\" href=\"#promise-type-target\">.promise( [type ] [, target ] )</a> </h4> <ul> <li> <div> <strong>type</strong> (default: <code>fx</code>)</div> <div>Type: <a href=\"types#String\">String</a> </div> <div> The type of queue that needs to be observed. </div> </li> <li> <div><strong>target</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>Object onto which the promise methods have to be attached</div> </li> </ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.promise()</code> method returns a dynamically generated Promise that is resolved once all actions of a certain type bound to the collection, queued or not, have ended.</p> <p> By default, <code>type</code> is <code>\"fx\"</code>, which means the returned Promise is resolved when all animations of the selected elements have completed.</p> <p> Resolve context and sole argument is the collection onto which <code>.promise()</code> has been called. </p> <p> If <code>target</code> is provided, <code>.promise()</code> will attach the methods onto it and then return this object rather than create a new one. This can be useful to attach the Promise behavior to an object that already exists.</p> <div class=\"warning\"> <p><strong>Note: </strong>The returned Promise is linked to a Deferred object stored on the <code>.data()</code> for an element. Since the<code>.remove()</code> method removes the element's data as well as the element itself, it will prevent any of the element's unresolved Promises from resolving. If it is necessary to remove an element from the DOM before its Promise is resolved, use <code>.detach()</code> instead and follow with <code>.removeData()</code> after resolution.</p> </div> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Using <code>.promise()</code> on a collection with no active animation returns a resolved Promise:</p> <pre class=\"syntaxhighlighter javascript\">var div = $( \"&lt;div&gt;\" );\n \ndiv.promise().done(function( arg1 ) {\n  // Will fire right away and alert \"true\"\n  alert( this === div &amp;&amp; arg1 === div );\n});</pre> </div> <div class=\"entry-example\" id=\"example-1\"> <p>Resolve the returned Promise when all animations have ended (including those initiated in the animation callback or added later on):</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;promise demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    height: 50px;\n    width: 50px;\n    float: left;\n    margin-right: 10px;\n    display: none;\n    background-color: #090;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button&gt;Go&lt;/button&gt;\n&lt;p&gt;Ready...&lt;/p&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"button\" ).on( \"click\", function() {\n  $( \"p\" ).append( \"Started...\" );\n \n  $( \"div\" ).each(function( i ) {\n    $( this ).fadeIn().fadeOut( 1000 * ( i + 1 ) );\n  });\n \n  $( \"div\" ).promise().done(function() {\n    $( \"p\" ).append( \" Finished! \" );\n  });\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-2\"> <p>Resolve the returned Promise using a <code>$.when()</code> statement (the <code>.promise()</code> method makes it possible to do this with jQuery collections):</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;promise demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    height: 50px;\n    width: 50px;\n    float: left;\n    margin-right: 10px;\n    display: none;\n    background-color: #090;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button&gt;Go&lt;/button&gt;\n&lt;p&gt;Ready...&lt;/p&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar effect = function() {\n  return $( \"div\" ).fadeIn( 800 ).delay( 1200 ).fadeOut();\n};\n \n$( \"button\" ).on( \"click\", function() {\n  $( \"p\" ).append( \" Started... \" );\n \n  $.when( effect() ).done(function() {\n    $( \"p\" ).append( \" Finished! \" );\n  });\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/promise\" class=\"_attribution-link\">https://api.jquery.com/promise</a>\n  </p>\n</div>\n","reset-selector":"<h1 class=\"entry-title\">:reset Selector</h1> <div class=\"entry-content\"> <article id=\"reset1\" class=\"entry selector\"><h2 class=\"section-title\"><span>reset selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all elements of type reset.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \":reset\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p><code>:reset</code> is equivalent to <code>[type=\"reset\"]</code></p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> Because <code>:reset</code> is a jQuery extension and not part of the CSS specification, queries using <code>:reset</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. For better performance in modern browsers, use <code>[type=\"reset\"]</code> instead. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds all reset inputs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;reset demo&lt;/title&gt;\n  &lt;style&gt;\n  textarea {\n    height: 45px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;form&gt;\n  &lt;input type=\"button\" value=\"Input Button\"&gt;\n  &lt;input type=\"checkbox\"&gt;\n  &lt;input type=\"file\"&gt;\n  &lt;input type=\"hidden\"&gt;\n  &lt;input type=\"image\"&gt;\n  &lt;input type=\"password\"&gt;\n  &lt;input type=\"radio\"&gt;\n  &lt;input type=\"reset\"&gt;\n  &lt;input type=\"submit\"&gt;\n  &lt;input type=\"text\"&gt;\n  &lt;select&gt;\n    &lt;option&gt;Option&lt;/option&gt;\n  &lt;/select&gt;\n  &lt;textarea&gt;&lt;/textarea&gt;\n  &lt;button&gt;Button&lt;/button&gt;\n&lt;/form&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar input = $( \"input:reset\" ).css({\n  background: \"yellow\",\n  border: \"3px red solid\"\n});\n$( \"div\" )\n  .text( \"For this type jQuery found \" + input.length + \".\" )\n  .css( \"color\", \"red\" );\n \n// Prevent form submission\n$( \"form\" ).submit(function( event ) {\n  event.preventDefault();\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/reset-selector\" class=\"_attribution-link\">https://api.jquery.com/reset-selector</a>\n  </p>\n</div>\n","prevall":"<h1 class=\"entry-title\">.prevAll()</h1> <div class=\"entry-content\"> <article id=\"prevAll1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.prevAll( [selector ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Get all preceding siblings of each element in the set of matched elements, optionally filtered by a selector.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2/\">1.2</a></span><a id=\"prevAll-selector\" href=\"#prevAll-selector\">.prevAll( [selector ] )</a> </h4> <ul><li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> </div> <div>A string containing a selector expression to match elements against.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Given a jQuery object that represents a set of DOM elements, the <code>.prevAll()</code> method searches through the predecessors of these elements in the DOM tree and construct a new jQuery object from the matching elements; the elements are returned in order beginning with the closest sibling.</p> <p>The method optionally accepts a selector expression of the same type that we can pass to the <code>$()</code> function. If the selector is supplied, the elements will be filtered by testing whether they match it.</p> <p>Consider a page with a simple list on it:</p> <pre class=\"syntaxhighlighter xml\">&lt;ul&gt;\n  &lt;li&gt;list item 1&lt;/li&gt;\n  &lt;li&gt;list item 2&lt;/li&gt;\n  &lt;li class=\"third-item\"&gt;list item 3&lt;/li&gt;\n  &lt;li&gt;list item 4&lt;/li&gt;\n  &lt;li&gt;list item 5&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>If we begin at the third item, we can find the elements which come before it:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li.third-item\" ).prevAll().css( \"background-color\", \"red\" );</pre> <p>The result of this call is a red background behind items 1 and 2. Since we do not supply a selector expression, these preceding elements are unequivocally included as part of the object. If we had supplied one, the elements would be tested for a match before they were included.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Locate all the divs preceding the last div and give them a class.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;prevAll demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    width: 70px;\n    height: 70px;\n    background: #abc;\n    border: 2px solid black;\n    margin: 10px;\n    float: left;\n  }\n  div.before {\n    border-color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"div:last\" ).prevAll().addClass( \"before\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/prevAll\" class=\"_attribution-link\">https://api.jquery.com/prevAll</a>\n  </p>\n</div>\n","prependto":"<h1 class=\"entry-title\">.prependTo()</h1> <div class=\"entry-content\"> <article id=\"prependTo1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.prependTo( target )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Insert every element in the set of matched elements to the beginning of the target.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"prependTo-target\" href=\"#prependTo-target\">.prependTo( target )</a> </h4> <ul><li> <div><strong>target</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> or <a href=\"types#htmlString\">htmlString</a> or <a href=\"types#Element\">Element</a> or <a href=\"types#Array\">Array</a> or <a href=\"types#jQuery\">jQuery</a> </div> <div>A selector, element, HTML string, array of elements, or jQuery object; the matched set of elements will be inserted at the beginning of the element(s) specified by this parameter.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code><a href=\"prepend\">.prepend()</a></code> and <code>.prependTo()</code> methods perform the same task. The major difference is in the syntax-specifically, in the placement of the content and target. With <code>.prepend()</code>, the selector expression preceding the method is the container into which the content is inserted. With <code>.prependTo()</code>, on the other hand, the content precedes the method, either as a selector expression or as markup created on the fly, and it is inserted into the target container.</p> <p>Consider the following HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;h2&gt;Greetings&lt;/h2&gt;\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;/div&gt;\n&lt;/div&gt;</pre> <p>We can create content and insert it into several elements at once:</p> <pre class=\"syntaxhighlighter javascript\">$( \"&lt;p&gt;Test&lt;/p&gt;\" ).prependTo( \".inner\" );</pre> <p>Each inner <code>&lt;div&gt;</code> element gets this new content:</p> <pre class=\"syntaxhighlighter xml\">&lt;h2&gt;Greetings&lt;/h2&gt;\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;\n    &lt;p&gt;Test&lt;/p&gt;\n    Hello\n  &lt;/div&gt;\n  &lt;div class=\"inner\"&gt;\n    &lt;p&gt;Test&lt;/p&gt;\n    Goodbye\n  &lt;/div&gt;\n&lt;/div&gt;</pre> <p>We can also select an element on the page and insert it into another:</p> <pre class=\"syntaxhighlighter javascript\">$( \"h2\" ).prependTo( $( \".container\" ) );</pre> <p>If an element selected this way is inserted into a single location elsewhere in the DOM, it will be moved into the target (not cloned):</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;h2&gt;Greetings&lt;/h2&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;/div&gt;\n&lt;/div&gt;</pre> <p>If there is more than one target element, however, cloned copies of the inserted element will be created for each target except the last.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> By design, any jQuery constructor or method that accepts an HTML string — <a href=\"jquery\">jQuery()</a>, <a href=\"append\">.append()</a>, <a href=\"after\">.after()</a>, etc. — can potentially execute code. This can occur by injection of script tags or use of HTML attributes that execute code (for example, <code>&lt;img onload=\"\"&gt;</code>). Do not use these methods to insert strings obtained from untrusted sources such as URL query parameters, cookies, or form inputs. Doing so can introduce cross-site-scripting (XSS) vulnerabilities. Remove or escape any user input before adding content to the document. </li> <li> jQuery doesn't officially support SVG. Using jQuery methods on SVG documents, unless explicitly documented for that method, might cause unexpected behaviors. Examples of methods that support SVG as of jQuery 3.0 are <code>addClass</code> and <code>removeClass</code>. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Prepend all spans to the element with the ID \"foo\" (Check .prepend() documentation for more examples)</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;prependTo demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div id=\"foo\"&gt;FOO!&lt;/div&gt;\n&lt;span&gt;I have something to say... &lt;/span&gt;\n \n&lt;script&gt;\n$( \"span\" ).prependTo( \"#foo\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/prependTo\" class=\"_attribution-link\">https://api.jquery.com/prependTo</a>\n  </p>\n</div>\n","pushstack":"<h1 class=\"entry-title\">.pushStack()</h1> <div class=\"entry-content\"> <article id=\"pushStack1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.pushStack( elements )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Add a collection of DOM elements onto the jQuery stack.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"pushStack-elements\" href=\"#pushStack-elements\">.pushStack( elements )</a> </h4> <ul><li> <div><strong>elements</strong></div> <div>Type: <a href=\"types#Array\">Array</a> </div> <div>An array of elements to push onto the stack and make into a new jQuery object.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.3/\">1.3</a></span><a id=\"pushStack-elements-name-arguments\" href=\"#pushStack-elements-name-arguments\">.pushStack( elements, name, arguments )</a> </h4> <ul> <li> <div><strong>elements</strong></div> <div>Type: <a href=\"types#Array\">Array</a> </div> <div>An array of elements to push onto the stack and make into a new jQuery object.</div> </li> <li> <div><strong>name</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>The name of a jQuery method that generated the array of elements.</div> </li> <li> <div><strong>arguments</strong></div> <div>Type: <a href=\"types#Array\">Array</a> </div> <div>The arguments that were passed in to the jQuery method (for serialization).</div> </li> </ul> </li> </ul> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Add some elements onto the jQuery stack, then pop back off again.</p> <pre class=\"syntaxhighlighter javascript\">jQuery([])\n  .pushStack( document.getElementsByTagName( \"div\" ) )\n  .remove()\n  .end();</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/pushStack\" class=\"_attribution-link\">https://api.jquery.com/pushStack</a>\n  </p>\n</div>\n","prop":"<h1 class=\"entry-title\">.prop()</h1> <div class=\"entry-content\"> Get the value of a property for the first element in the set of matched elements or set one or more properties for every matched element.<div class=\"toc\"> <h4><span>Contents:</span></h4> <ul class=\"toc-list\"> <li> <a href=\"#prop1\">.prop( propertyName )</a><ul><li><a href=\"#prop-propertyName\">.prop( propertyName )</a></li></ul> </li> <li> <a href=\"#prop2\">.prop( propertyName, value )</a><ul> <li><a href=\"#prop-propertyName-value\">.prop( propertyName, value )</a></li> <li><a href=\"#prop-properties\">.prop( properties )</a></li> <li><a href=\"#prop-propertyName-function\">.prop( propertyName, function )</a></li> </ul> </li> </ul> </div>\n<article id=\"prop1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.prop( propertyName )</span><span class=\"returns\">Returns: <a href=\"types#Anything\">Anything</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Get the value of a property for the first element in the set of matched elements.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.6/\">1.6</a></span><a id=\"prop-propertyName\" href=\"#prop-propertyName\">.prop( propertyName )</a> </h4> <ul><li> <div><strong>propertyName</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>The name of the property to get.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.prop()</code> method gets the property value for only the <em>first</em> element in the matched set. It returns <code>undefined</code> for the value of a property that has not been set, or if the matched set has no elements. To get the value for each element individually, use a looping construct such as jQuery's <code>.each()</code> or <code>.map()</code> method.</p> <div class=\"warning\"> <p><strong>Note:</strong> Attempting to change the <code>type</code> property (or attribute) of an <code>input</code> element created via HTML or already in an HTML document will result in an error being thrown by Internet Explorer 6, 7, or 8.</p> </div> <h4>Attributes vs. Properties</h4> <p>The difference between <em>attributes</em> and <em>properties</em> can be important in specific situations. <strong>Before jQuery 1.6</strong>, the <code><a href=\"attr\">.attr()</a></code> method sometimes took property values into account when retrieving some attributes, which could cause inconsistent behavior. <strong>As of jQuery 1.6</strong>, the <code>.prop()</code> method provides a way to explicitly retrieve property values, while <code>.attr()</code> retrieves attributes.</p> <p>For example, <code>selectedIndex</code>, <code>tagName</code>, <code>nodeName</code>, <code>nodeType</code>, <code>ownerDocument</code>, <code>defaultChecked</code>, and <code>defaultSelected</code> should be retrieved and set with the <code>.prop()</code> method. Prior to jQuery 1.6, these properties were retrievable with the <code>.attr()</code> method, but this was not within the scope of <code>attr</code>. These do not have corresponding attributes and are only properties.</p> <p>Concerning boolean attributes, consider a DOM element defined by the HTML markup <code>&lt;input type=\"checkbox\" checked=\"checked\" /&gt;</code>, and assume it is in a JavaScript variable named <code>elem</code>:</p> <table> <tr> <th> <code>elem.checked</code> </th> <td> <code>true</code> (Boolean) Will change with checkbox state</td> </tr> <tr> <th> <code>$( elem ).prop( \"checked\" )</code> </th> <td> <code>true</code> (Boolean) Will change with checkbox state</td> </tr> <tr> <th> <code>elem.getAttribute( \"checked\" )</code> </th> <td> <code>\"checked\"</code> (String) Initial state of the checkbox; does not change</td> </tr> <tr> <th> <code>$( elem ).attr( \"checked\" )</code> <em>(1.6)</em> </th> <td> <code>\"checked\"</code> (String) Initial state of the checkbox; does not change</td> </tr> <tr> <th> <code>$( elem ).attr( \"checked\" )</code> <em>(1.6.1+)</em> </th> <td> <code>\"checked\"</code> (String) Will change with checkbox state</td> </tr> <tr> <th> <code>$( elem ).attr( \"checked\" )</code> <em>(pre-1.6)</em> </th> <td> <code>true</code> (Boolean) Changed with checkbox state</td> </tr> </table> <br> <p>According to the <a href=\"http://www.w3.org/TR/html401/interact/forms.html#h-17.4\">W3C forms specification</a>, the <code>checked</code> attribute is a <em><a href=\"http://www.w3.org/TR/html4/intro/sgmltut.html#h-3.3.4.2\">boolean attribute</a></em>, which means the corresponding property is <strong>true</strong> if the attribute is present at all—even if, for example, the attribute has no value or is set to empty string value or even \"false\". This is true of all boolean attributes.</p> <p>Nevertheless, the most important concept to remember about the <code>checked</code> attribute is that it does not correspond to the <code>checked</code> property. The attribute actually corresponds to the <code>defaultChecked</code> property and should be used only to set the <em>initial</em> value of the checkbox. The <code>checked</code> attribute value does not change with the state of the checkbox, while the <code>checked</code> property does. Therefore, the cross-browser-compatible way to determine if a checkbox is checked is to use the property:</p> <ul> <li> <code>if ( elem.checked )</code> </li> <li> <code>if ( $( elem ).prop( \"checked\" ) )</code> </li> <li> <code>if ( $( elem ).is( \":checked\" ) )</code> </li> </ul> <p>The same is true for other dynamic attributes, such as <code>selected</code> and <code>value</code>.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> In Internet Explorer prior to version 9, using <code><a href=\"prop\">.prop()</a></code> to set a DOM element property to anything other than a simple primitive value (number, string, or boolean) can cause memory leaks if the property is not removed (using <a href=\"removeprop\"><code>.removeProp()</code></a>) before the DOM element is removed from the document. To safely set values on DOM objects without memory leaks, use <a href=\"data\"><code>.data()</code></a>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Display the checked property and attribute of a checkbox as it changes.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;prop demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    margin: 20px 0 0;\n  }\n  b {\n    color: blue;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;input id=\"check1\" type=\"checkbox\" checked=\"checked\"&gt;\n&lt;label for=\"check1\"&gt;Check me&lt;/label&gt;\n&lt;p&gt;&lt;/p&gt;\n \n&lt;script&gt;\n$( \"input\" ).change(function() {\n  var $input = $( this );\n  $( \"p\" ).html(\n    \".attr( \\\"checked\\\" ): &lt;b&gt;\" + $input.attr( \"checked\" ) + \"&lt;/b&gt;&lt;br&gt;\" +\n    \".prop( \\\"checked\\\" ): &lt;b&gt;\" + $input.prop( \"checked\" ) + \"&lt;/b&gt;&lt;br&gt;\" +\n    \".is( \\\":checked\\\" ): &lt;b&gt;\" + $input.is( \":checked\" ) ) + \"&lt;/b&gt;\";\n}).change();\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article><article id=\"prop2\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.prop( propertyName, value )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Set one or more properties for the set of matched elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.6/\">1.6</a></span><a id=\"prop-propertyName-value\" href=\"#prop-propertyName-value\">.prop( propertyName, value )</a> </h4> <ul> <li> <div><strong>propertyName</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>The name of the property to set.</div> </li> <li> <div><strong>value</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>A value to set for the property.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.6/\">1.6</a></span><a id=\"prop-properties\" href=\"#prop-properties\">.prop( properties )</a> </h4> <ul><li> <div><strong>properties</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>An object of property-value pairs to set.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.6/\">1.6</a></span><a id=\"prop-propertyName-function\" href=\"#prop-propertyName-function\">.prop( propertyName, function )</a> </h4> <ul> <li> <div><strong>propertyName</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>The name of the property to set.</div> </li> <li> <div><strong>function</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Integer\">Integer</a> index, <a href=\"types#Anything\">Anything</a> oldPropertyValue ) =&gt; <a href=\"types#Anything\">Anything</a> </div> <div>A function returning the value to set. Receives the index position of the element in the set and the old property value as arguments. Within the function, the keyword <code>this</code> refers to the current element.</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc-1\"> <p>The <code>.prop()</code> method is a convenient way to set the value of properties—especially when setting multiple properties, using values returned by a function, or setting values on multiple elements at once. It should be used when setting <code>selectedIndex</code>, <code>tagName</code>, <code>nodeName</code>, <code>nodeType</code>, <code>ownerDocument</code>, <code>defaultChecked</code>, or <code>defaultSelected</code>. Since jQuery 1.6, these properties can no longer be set with the <code>.attr()</code> method. They do not have corresponding attributes and are only properties.</p> <p>Properties generally affect the dynamic state of a DOM element without changing the serialized HTML attribute. Examples include the <code>value</code> property of input elements, the <code>disabled</code> property of inputs and buttons, or the <code>checked</code> property of a checkbox. The <code>.prop()</code> method should be used to set disabled and checked instead of the <code><a href=\"attr\">.attr()</a></code> method. The <code><a href=\"val\">.val()</a></code> method should be used for getting and setting value.</p> <pre class=\"syntaxhighlighter javascript\">$( \"input\" ).prop( \"disabled\", false );\n$( \"input\" ).prop( \"checked\", true );\n$( \"input\" ).val( \"someValue\" );</pre> <p><strong>Important:</strong> the <code><a href=\"removeprop\">.removeProp()</a></code> method should not be used to set these properties to false. Once a native property is removed, it cannot be added again. See <code><a href=\"removeprop\">.removeProp()</a></code> for more information.</p> <h4 id=\"computed-prop-values\">Computed property values</h4> <p>By using a function to set properties, you can compute the value based on other properties of the element. For example, to toggle all checkboxes based off their individual values:</p> <pre class=\"syntaxhighlighter javascript\">$( \"input[type='checkbox']\" ).prop( \"checked\", function( i, val ) {\n  return !val;\n});</pre> <p><strong>Note: </strong>If nothing is returned in the setter function (ie. <code>function( index, prop ){})</code>, or if <code>undefined</code> is returned, the current value is not changed. This is useful for selectively setting values only when certain criteria are met.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> In Internet Explorer prior to version 9, using <code><a href=\"prop\">.prop()</a></code> to set a DOM element property to anything other than a simple primitive value (number, string, or boolean) can cause memory leaks if the property is not removed (using <a href=\"removeprop\"><code>.removeProp()</code></a>) before the DOM element is removed from the document. To safely set values on DOM objects without memory leaks, use <a href=\"data\"><code>.data()</code></a>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples-1\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-1-0\"> <p>Disable all checkboxes on the page.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;prop demo&lt;/title&gt;\n  &lt;style&gt;\n  img {\n    padding: 10px;\n  }\n  div {\n    color: red;\n    font-size: 24px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n  &lt;input type=\"checkbox\" checked=\"checked\"&gt;\n  &lt;input type=\"checkbox\"&gt;\n  &lt;input type=\"checkbox\"&gt;\n  &lt;input type=\"checkbox\" checked=\"checked\"&gt;\n \n&lt;script&gt;\n$( \"input[type='checkbox']\" ).prop({\n  disabled: true\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/prop\" class=\"_attribution-link\">https://api.jquery.com/prop</a>\n  </p>\n</div>\n","prevuntil":"<h1 class=\"entry-title\">.prevUntil()</h1> <div class=\"entry-content\"> <article id=\"prevUntil1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.prevUntil( [selector ] [, filter ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Get all preceding siblings of each element up to but not including the element matched by the selector, DOM node, or jQuery object.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"prevUntil-selector-filter\" href=\"#prevUntil-selector-filter\">.prevUntil( [selector ] [, filter ] )</a> </h4> <ul> <li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> </div> <div>A string containing a selector expression to indicate where to stop matching preceding sibling elements.</div> </li> <li> <div><strong>filter</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> </div> <div>A string containing a selector expression to match elements against.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.6/\">1.6</a></span><a id=\"prevUntil-element-filter\" href=\"#prevUntil-element-filter\">.prevUntil( [element ] [, filter ] )</a> </h4> <ul> <li> <div><strong>element</strong></div> <div>Type: <a href=\"types#Element\">Element</a> or <a href=\"types#jQuery\">jQuery</a> </div> <div>A DOM node or jQuery object indicating where to stop matching preceding sibling elements.</div> </li> <li> <div><strong>filter</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> </div> <div>A string containing a selector expression to match elements against.</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Given a selector expression that represents a set of DOM elements, the <code>.prevUntil()</code> method searches through the predecessors of these elements in the DOM tree, stopping when it reaches an element matched by the method's argument. The new jQuery object that is returned contains all previous siblings up to but not including the one matched by the <code>.prevUntil()</code> selector; the elements are returned in order from the closest sibling to the farthest.</p> <p>If the selector is not matched or is not supplied, all previous siblings will be selected; in these cases it selects the same elements as the <code><a href=\"prevall\">.prevAll()</a></code> method does when no filter selector is provided.</p> <p><strong>As of jQuery 1.6</strong>, A DOM node or jQuery object, instead of a selector, may be used for the first <strong>.prevUntil()</strong> argument.</p> <p>The method optionally accepts a selector expression for its second argument. If this argument is supplied, the elements will be filtered by testing whether they match it.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Find the siblings that precede &lt;dt id=\"term-2\"&gt; up to the preceding &lt;dt&gt; and give them a red background color. Also, find previous &lt;dd&gt; siblings of &lt;dt id=\"term-3\"&gt; up to &lt;dt id=\"term-1\"&gt; and give them a green text color.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;prevUntil demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;dl&gt;\n  &lt;dt id=\"term-1\"&gt;term 1&lt;/dt&gt;\n  &lt;dd&gt;definition 1-a&lt;/dd&gt;\n  &lt;dd&gt;definition 1-b&lt;/dd&gt;\n  &lt;dd&gt;definition 1-c&lt;/dd&gt;\n  &lt;dd&gt;definition 1-d&lt;/dd&gt;\n \n  &lt;dt id=\"term-2\"&gt;term 2&lt;/dt&gt;\n  &lt;dd&gt;definition 2-a&lt;/dd&gt;\n  &lt;dd&gt;definition 2-b&lt;/dd&gt;\n  &lt;dd&gt;definition 2-c&lt;/dd&gt;\n \n  &lt;dt id=\"term-3\"&gt;term 3&lt;/dt&gt;\n  &lt;dd&gt;definition 3-a&lt;/dd&gt;\n  &lt;dd&gt;definition 3-b&lt;/dd&gt;\n&lt;/dl&gt;\n \n&lt;script&gt;\n$( \"#term-2\" ).prevUntil( \"dt\" )\n  .css( \"background-color\", \"red\" );\n \nvar term1 = document.getElementById( \"term-1\" );\n$( \"#term-3\" ).prevUntil( term1, \"dd\" )\n  .css( \"color\", \"green\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/prevUntil\" class=\"_attribution-link\">https://api.jquery.com/prevUntil</a>\n  </p>\n</div>\n","queue":"<h1 class=\"entry-title\">.queue()</h1> <div class=\"entry-content\"> Show or manipulate the queue of functions to be executed on the matched elements.<div class=\"toc\"> <h4><span>Contents:</span></h4> <ul class=\"toc-list\"> <li> <a href=\"#queue1\">.queue( [queueName ] )</a><ul><li><a href=\"#queue-queueName\">.queue( [queueName ] )</a></li></ul> </li> <li> <a href=\"#queue2\">.queue( [queueName ], newQueue )</a><ul> <li><a href=\"#queue-queueName-newQueue\">.queue( [queueName ], newQueue )</a></li> <li><a href=\"#queue-queueName-callback\">.queue( [queueName ], callback )</a></li> </ul> </li> </ul> </div>\n<article id=\"queue1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.queue( [queueName ] )</span><span class=\"returns\">Returns: <a href=\"types#Array\">Array</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Show the queue of functions to be executed on the matched elements.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2/\">1.2</a></span><a id=\"queue-queueName\" href=\"#queue-queueName\">.queue( [queueName ] )</a> </h4> <ul><li> <div><strong>queueName</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue.</div> </li></ul> </li></ul> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Show the length of the queue.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;queue demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    margin: 3px;\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    left: 0px;\n    top: 60px;\n    background: green;\n    display: none;\n  }\n  div.newcolor {\n    background: blue;\n  }\n  p {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;The queue length is: &lt;span&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar div = $( \"div\" );\n \nfunction runIt() {\n  div\n    .show( \"slow\" )\n    .animate({ left: \"+=200\" }, 2000 )\n    .slideToggle( 1000 )\n    .slideToggle( \"fast\" )\n    .animate({ left: \"-=200\" }, 1500 )\n    .hide( \"slow\" )\n    .show( 1200 )\n    .slideUp( \"normal\", runIt );\n}\n \nfunction showIt() {\n  var n = div.queue( \"fx\" );\n  $( \"span\" ).text( n.length );\n  setTimeout( showIt, 100 );\n}\n \nrunIt();\nshowIt();\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article><article id=\"queue2\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.queue( [queueName ], newQueue )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Manipulate the queue of functions to be executed, once for each matched element.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2/\">1.2</a></span><a id=\"queue-queueName-newQueue\" href=\"#queue-queueName-newQueue\">.queue( [queueName ], newQueue )</a> </h4> <ul> <li> <div><strong>queueName</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue.</div> </li> <li> <div><strong>newQueue</strong></div> <div>Type: <a href=\"types#Array\">Array</a> </div> <div>An array of functions to replace the current queue contents.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2/\">1.2</a></span><a id=\"queue-queueName-callback\" href=\"#queue-queueName-callback\">.queue( [queueName ], callback )</a> </h4> <ul> <li> <div><strong>queueName</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing the name of the queue. Defaults to <code>fx</code>, the standard effects queue.</div> </li> <li> <div><strong>callback</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Function\">Function</a> next() )</div> <div>The new function to add to the queue, with a function to call that will dequeue the next item.</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc-1\"> <p>Every element can have one to many queues of functions attached to it by jQuery. In most applications, only one queue (called <code>fx</code>) is used. Queues allow a sequence of actions to be called on an element asynchronously, without halting program execution. The typical example of this is calling multiple animation methods on an element. For example:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#foo\" ).slideUp().fadeIn();</pre> <p>When this statement is executed, the element begins its sliding animation immediately, but the fading transition is placed on the <code>fx</code> queue to be called only once the sliding transition is complete.</p> <p>The <code>.queue()</code> method allows us to directly manipulate this queue of functions. Calling <code>.queue()</code> with a callback is particularly useful; it allows us to place a new function at the end of the queue. The callback function is executed once for each element in the jQuery set.</p> <p>This feature is similar to providing a callback function with an animation method, but does not require the callback to be given at the time the animation is performed.</p> <pre class=\"syntaxhighlighter javascript\">$( \"#foo\" ).slideUp();\n$( \"#foo\" ).queue(function() {\n  alert( \"Animation complete.\" );\n  $( this ).dequeue();\n});</pre> <p>This is equivalent to:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#foo\" ).slideUp(function() {\n  alert( \"Animation complete.\" );\n});</pre> <p>Note that when adding a function with <code>.queue()</code>, we should ensure that <code>.dequeue()</code> is eventually called so that the next function in line executes.</p> <p><strong>As of jQuery 1.4</strong>, the function that's called is passed another function as the first argument. When called, this automatically dequeues the next item and keeps the queue moving. We use it as follows:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#test\" ).queue(function( next ) {\n    // Do some stuff...\n    next();\n});</pre> </div> <section class=\"entry-examples\" id=\"entry-examples-1\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-1-0\"> <p>Queue a custom function.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;queue demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    margin: 3px;\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    left: 0px;\n    top: 30px;\n    background: green;\n    display: none;\n  }\n  div.newcolor {\n    background: blue;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \nClick here...\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( document.body ).click(function() {\n  $( \"div\" )\n    .show( \"slow\" )\n    .animate({ left: \"+=200\" }, 2000 )\n    .queue(function() {\n      $( this ).addClass( \"newcolor\" ).dequeue();\n    })\n    .animate({ left: \"-=200\" }, 500 )\n    .queue(function() {\n      $( this ).removeClass( \"newcolor\" ).dequeue();\n    })\n    .slideUp();\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1-1\"> <p>Set a queue array to delete the queue.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;queue demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    margin: 3px;\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    left: 0px;\n    top: 30px;\n    background: green;\n    display: none;\n  }\n  div.newcolor {\n    background: blue;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button id=\"start\"&gt;Start&lt;/button&gt;\n&lt;button id=\"stop\"&gt;Stop&lt;/button&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"#start\" ).click(function() {\n  $( \"div\" )\n    .show( \"slow\" )\n    .animate({ left: \"+=200\" }, 5000 )\n    .queue(function() {\n      $( this ).addClass( \"newcolor\" ).dequeue();\n    })\n    .animate({ left: '-=200' }, 1500 )\n    .queue(function() {\n      $( this ).removeClass( \"newcolor\" ).dequeue();\n    })\n    .slideUp();\n});\n$( \"#stop\" ).click(function() {\n  $( \"div\" )\n    .queue( \"fx\", [] )\n    .stop();\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/queue\" class=\"_attribution-link\">https://api.jquery.com/queue</a>\n  </p>\n</div>\n","resize":"<h1 class=\"entry-title\">.resize()</h1> <div class=\"entry-content\"> <article id=\"resize1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.resize( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Bind an event handler to the \"resize\" JavaScript event, or trigger that event on an element.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"resize-handler\" href=\"#resize-handler\">.resize( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"resize-eventData-handler\" href=\"#resize-eventData-handler\">.resize( [eventData ], handler )</a> </h4> <ul> <li> <div><strong>eventData</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>An object containing data that will be passed to the event handler.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"resize\" href=\"#resize\">.resize()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method is a shortcut for <code>.on('resize', handler)</code> in the first and second variations, and <code>.trigger( \"resize\" )</code> in the third.</p> <p>The <code>resize</code> event is sent to the <code>window</code> element when the size of the browser window changes:</p> <pre class=\"syntaxhighlighter javascript\">$( window ).resize(function() {\n  $( \"#log\" ).append( \"&lt;div&gt;Handler for .resize() called.&lt;/div&gt;\" );\n});</pre> <p>Now whenever the browser window's size is changed, the message is appended to &lt;div id=\"log\"&gt; one or more times, depending on the browser.</p> <p>Code in a <code>resize</code> handler should never rely on the number of times the handler is called. Depending on implementation, <code>resize</code> events can be sent continuously as the resizing is in progress (the typical behavior in Internet Explorer and WebKit-based browsers such as Safari and Chrome), or only once at the end of the resize operation (the typical behavior in some other browsers such as Opera).</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> As the <code>.resize()</code> method is just a shorthand for <code>.on( \"resize\", handler )</code>, detaching is possible using <code>.off( \"resize\" )</code>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>To see the window width while (or after) it is resized, try:</p> <pre class=\"syntaxhighlighter javascript\">$( window ).resize(function() {\n  $( \"body\" ).prepend( \"&lt;div&gt;\" + $( window ).width() + \"&lt;/div&gt;\" );\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/resize\" class=\"_attribution-link\">https://api.jquery.com/resize</a>\n  </p>\n</div>\n","radio-selector":"<h1 class=\"entry-title\">:radio Selector</h1> <div class=\"entry-content\"> <article id=\"radio1\" class=\"entry selector\"><h2 class=\"section-title\"><span>radio selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all elements of type radio.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \":radio\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p><code>$( \":radio\" )</code> is equivalent to <code>$( \"[type=radio]\" )</code>. As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector (\"*\") is implied. In other words, the bare <code>$( \":radio\" )</code> is equivalent to <code>$( \"*:radio\" )</code>, so <code>$( \"input:radio\" )</code> should be used instead. </p> <p>To select a set of associated radio buttons, you might use: <code>$( \"input[name=gender]:radio\" )</code></p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> Because <code>:radio</code> is a jQuery extension and not part of the CSS specification, queries using <code>:radio</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. For better performance in modern browsers, use <code>[type=\"radio\"]</code> instead. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds all radio inputs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;radio demo&lt;/title&gt;\n  &lt;style&gt;\n  textarea {\n    height: 25px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;form&gt;\n  &lt;input type=\"button\" value=\"Input Button\"&gt;\n  &lt;input type=\"checkbox\"&gt;\n  &lt;input type=\"file\"&gt;\n  &lt;input type=\"hidden\"&gt;\n  &lt;input type=\"image\"&gt;\n  &lt;input type=\"password\"&gt;\n  &lt;input type=\"radio\" name=\"asdf\"&gt;\n  &lt;input type=\"radio\" name=\"asdf\"&gt;\n  &lt;input type=\"reset\"&gt;\n  &lt;input type=\"submit\"&gt;\n  &lt;input type=\"text\"&gt;\n  &lt;select&gt;\n    &lt;option&gt;Option&lt;/option&gt;\n  &lt;/select&gt;\n  &lt;textarea&gt;&lt;/textarea&gt;\n  &lt;button&gt;Button&lt;/button&gt;\n&lt;/form&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar input = $( \"form input:radio\" )\n  .wrap( \"&lt;span&gt;&lt;/span&gt;\" )\n  .parent()\n    .css({\n      background: \"yellow\",\n      border: \"3px red solid\"\n    });\n \n$( \"div\" )\n  .text( \"For this type jQuery found \" + input.length + \".\" )\n  .css( \"color\", \"red\" );\n \n// Prevent form submission\n$( \"form\" ).submit(function( event ) {\n  event.preventDefault();\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/radio-selector\" class=\"_attribution-link\">https://api.jquery.com/radio-selector</a>\n  </p>\n</div>\n","ready":"<h1 class=\"entry-title\">.ready()</h1> <div class=\"entry-content\"> <article id=\"ready1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.ready( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Specify a function to execute when the DOM is fully loaded.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"ready-handler\" href=\"#ready-handler\">.ready( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function to execute after the DOM is ready.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>While JavaScript provides the <code>load</code> event for executing code when a page is rendered, this event does not get triggered until all assets such as images have been completely received. In most cases, the script can be run as soon as the DOM hierarchy has been fully constructed. The handler passed to <code>.ready()</code> is guaranteed to be executed after the DOM is ready, so this is usually the best place to attach all other event handlers and run other jQuery code. When using scripts that rely on the value of CSS style properties, it's important to reference external stylesheets or embed style elements before referencing the scripts.</p> <p>In cases where code relies on loaded assets (for example, if the dimensions of an image are required), the code should be placed in a handler for the <code>load</code> event instead.</p> <div class=\"warning\"> <p>The <code>.ready()</code> method is generally incompatible with the <code>&lt;body onload=\"\"&gt;</code> attribute. If <code>load</code> must be used, either do not use <code>.ready()</code> or use jQuery's <code>.load()</code> method to attach <code>load</code> event handlers to the window or to more specific items, like images. </p> </div> <p>All three of the following syntaxes are equivalent:</p> <ul> <li> <code>$( document ).ready( handler )</code> </li> <li> <code>$().ready( handler )</code> (this is not recommended)</li> <li> <code>$( handler )</code> </li> </ul> <p>There is also <code>$(document).on( \"ready\", handler )</code>, <em>deprecated as of jQuery 1.8</em>. This behaves similarly to the ready method but if the ready event has already fired and you try to <code>.on( \"ready\" )</code> the bound handler will not be executed. Ready handlers bound this way are executed <em>after</em> any bound by the other three methods above.</p> <p>The <code>.ready()</code> method can only be called on a jQuery object matching the current document, so the selector can be omitted.</p> <p>The <code>.ready()</code> method is typically used with an anonymous function:</p> <pre class=\"syntaxhighlighter javascript\">$( document ).ready(function() {\n  // Handler for .ready() called.\n});</pre> <p>Which is equivalent to calling:</p> <pre class=\"syntaxhighlighter javascript\">$(function() {\n  // Handler for .ready() called.\n});</pre> <p>If <code>.ready()</code> is called after the DOM has been initialized, the new handler passed in will be executed immediately.</p> <h4>Aliasing the jQuery Namespace</h4> <p>When using another JavaScript library, we may wish to call <code><a href=\"jquery.noconflict\">$.noConflict()</a></code> to avoid namespace difficulties. When this function is called, the <code>$</code> shortcut is no longer available, forcing us to write <code>jQuery</code> each time we would normally write <code>$</code>. However, the handler passed to the <code>.ready()</code> method can take an argument, which is passed the global <code>jQuery</code> object. This means we can rename the object within the context of our <code>.ready()</code> handler without affecting other code:</p> <pre class=\"syntaxhighlighter javascript\">jQuery( document ).ready(function( $ ) {\n  // Code using $ as usual goes here.\n});</pre> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Display a message when the DOM is loaded.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;ready demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n  &lt;script&gt;\n \n  $( document ).ready(function() {\n    $( \"p\" ).text( \"The DOM is now loaded and can be manipulated.\" );\n  });\n \n  &lt;/script&gt;\n \n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Not loaded yet.&lt;/p&gt;\n \n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/ready\" class=\"_attribution-link\">https://api.jquery.com/ready</a>\n  </p>\n</div>\n","remove":"<h1 class=\"entry-title\">.remove()</h1> <div class=\"entry-content\"> <article id=\"remove1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.remove( [selector ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Remove the set of matched elements from the DOM.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"remove-selector\" href=\"#remove-selector\">.remove( [selector ] )</a> </h4> <ul><li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A selector expression that filters the set of matched elements to be removed.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Similar to <code><a href=\"empty\">.empty()</a></code>, the <code>.remove()</code> method takes elements out of the DOM. Use <code>.remove()</code> when you want to remove the element itself, as well as everything inside it. In addition to the elements themselves, all bound events and jQuery data associated with the elements are removed. To remove the elements without removing data and events, use <code><a href=\"detach\">.detach()</a></code> instead.</p> <p>Consider the following HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;div class=\"hello\"&gt;Hello&lt;/div&gt;\n  &lt;div class=\"goodbye\"&gt;Goodbye&lt;/div&gt;\n&lt;/div&gt;</pre> <p>We can target any element for removal:</p> <pre class=\"syntaxhighlighter javascript\">$( \".hello\" ).remove();</pre> <p>This will result in a DOM structure with the <code>&lt;div&gt;</code> element deleted:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;div class=\"goodbye\"&gt;Goodbye&lt;/div&gt;\n&lt;/div&gt;</pre> <p>If we had any number of nested elements inside <code>&lt;div class=\"hello\"&gt;</code>, they would be removed, too. Other jQuery constructs such as data or event handlers are erased as well.</p> <p>We can also include a selector as an optional parameter. For example, we could rewrite the previous DOM removal code as follows:</p> <pre class=\"syntaxhighlighter javascript\">$( \"div\" ).remove( \".hello\" );</pre> <p>This would result in the same DOM structure:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;div class=\"goodbye\"&gt;Goodbye&lt;/div&gt;\n&lt;/div&gt;</pre> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Removes all paragraphs from the DOM</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;remove demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    background: yellow;\n    margin: 6px 0;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Hello&lt;/p&gt;\nhow are\n&lt;p&gt;you?&lt;/p&gt;\n&lt;button&gt;Call remove() on paragraphs&lt;/button&gt;\n \n&lt;script&gt;\n$( \"button\" ).click(function() {\n  $( \"p\" ).remove();\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Removes all paragraphs that contain \"Hello\" from the DOM. Analogous to doing <code>$(\"p\").filter(\":contains('Hello')\").remove()</code>.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;remove demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    background: yellow;\n    margin: 6px 0;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p class=\"hello\"&gt;Hello&lt;/p&gt;\nhow are\n&lt;p&gt;you?&lt;/p&gt;\n&lt;button&gt;Call remove( \":contains('Hello')\" ) on paragraphs&lt;/button&gt;\n \n&lt;script&gt;\n$( \"button\" ).click(function() {\n  $( \"p\" ).remove( \":contains('Hello')\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/remove\" class=\"_attribution-link\">https://api.jquery.com/remove</a>\n  </p>\n</div>\n","removedata":"<h1 class=\"entry-title\">.removeData()</h1> <div class=\"entry-content\"> <article id=\"removeData1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.removeData( [name ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Remove a previously-stored piece of data.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2.3/\">1.2.3</a></span><a id=\"removeData-name\" href=\"#removeData-name\">.removeData( [name ] )</a> </h4> <ul><li> <div><strong>name</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string naming the piece of data to delete.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a></span><a id=\"removeData-list\" href=\"#removeData-list\">.removeData( [list ] )</a> </h4> <ul><li> <div><strong>list</strong></div> <div>Type: <a href=\"types#Array\">Array</a> or <a href=\"types#String\">String</a> </div> <div>An array or space-separated string naming the pieces of data to delete.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.removeData()</code> method allows us to remove values that were previously set using <code>.data()</code>. When called with the name of a key, <code>.removeData()</code> deletes that particular value. When called with no arguments, <code>.removeData()</code> removes all values.</p> <p> Note that <code>.removeData()</code> will only remove data from jQuery's internal <code>.data()</code> cache, and any corresponding <code>data-</code> attributes on the element will not be removed. A later call to <code>data()</code> will therefore re-retrieve the value from the <code>data-</code> attribute. To prevent this, use <code>.removeAttr()</code> alongside <code>.removeData()</code> to remove the <code>data-</code> attribute as well. Prior to jQuery 1.4.3, as <code>data()</code> did not use <code>data-</code> attributes, this was not an issue. </p> <p><strong>As of jQuery 1.7</strong>, when called with an array of keys or a string of space-separated keys, <code>.removeData()</code> deletes the value of each key in that array or string.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Set a data store for 2 names then remove one of them.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;removeData demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    margin: 2px;\n    color: blue;\n  }\n  span {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;value1 before creation: &lt;span&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;value1 after creation: &lt;span&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;value1 after removal: &lt;span&gt;&lt;/span&gt;&lt;/div&gt;\n&lt;div&gt;value2 after removal: &lt;span&gt;&lt;/span&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"span:eq(0)\" ).text( \"\" + $( \"div\" ).data( \"test1\" ) );\n$( \"div\" ).data( \"test1\", \"VALUE-1\" );\n$( \"div\" ).data( \"test2\", \"VALUE-2\" );\n$( \"span:eq(1)\" ).text( \"\" + $( \"div\").data( \"test1\" ) );\n$( \"div\" ).removeData( \"test1\" );\n$( \"span:eq(2)\" ).text( \"\" + $( \"div\" ).data( \"test1\" ) );\n$( \"span:eq(3)\" ).text( \"\" + $( \"div\" ).data( \"test2\" ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/removeData\" class=\"_attribution-link\">https://api.jquery.com/removeData</a>\n  </p>\n</div>\n","removeclass":"<h1 class=\"entry-title\">.removeClass()</h1> <div class=\"entry-content\"> <article id=\"removeClass1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.removeClass( [className ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Remove a single class, multiple classes, or all classes from each element in the set of matched elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"removeClass-className\" href=\"#removeClass-className\">.removeClass( [className ] )</a> </h4> <ul><li> <div><strong>className</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>One or more space-separated classes to be removed from the class attribute of each matched element.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"removeClass-function\" href=\"#removeClass-function\">.removeClass( function )</a> </h4> <ul><li> <div><strong>function</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Integer\">Integer</a> index, <a href=\"types#String\">String</a> className ) =&gt; <a href=\"types#String\">String</a> </div> <div>A function returning one or more space-separated class names to be removed. Receives the index position of the element in the set and the old class value as arguments.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>If a class name is included as a parameter, then only that class will be removed from the set of matched elements. If no class names are specified in the parameter, all classes will be removed.</p> <p>Before jQuery version 1.12/2.2, the <code>.removeClass()</code> method manipulated the <code>className</code> <em>property</em> of the selected elements, not the <code>class</code> <em>attribute</em>. Once the property was changed, it was the browser that updated the attribute accordingly. This means that when the <code>class</code> attribute was updated and the last class name was removed, the browser might have set the attribute's value to an empty string instead of removing the attribute completely. An implication of this behavior was that this method only worked for documents with HTML DOM semantics (e.g., not pure XML documents).</p> <p>As of jQuery 1.12/2.2, this behavior is changed to improve the support for XML documents, including SVG. Starting from this version, the <code>class</code> <em>attribute</em> is used instead. So, <code>.removeClass()</code> can be used on XML or SVG documents.</p> <p>More than one class may be removed at a time, separated by a space, from the set of matched elements, like so:</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).removeClass( \"myClass yourClass\" )</pre> <p>This method is often used with <code>.addClass()</code> to switch elements' classes from one to another, like so:</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).removeClass( \"myClass noClass\" ).addClass( \"yourClass\" );</pre> <p>Here, the <code>myClass</code> and <code>noClass</code> classes are removed from all paragraphs, while <code>yourClass</code> is added.</p> <p>To replace all existing classes with another class, we can use <code>.attr( \"class\", \"newClass\" )</code> instead.</p> <p>As of jQuery 1.4, the <code>.removeClass()</code> method allows us to indicate the class to be removed by passing in a function.</p> <pre class=\"syntaxhighlighter javascript\">$( \"li:last\" ).removeClass(function() {\n  return $( this ).prev().attr( \"class\" );\n});</pre> <p>This example removes the class name of the penultimate <code>&lt;li&gt;</code> from the last <code>&lt;li&gt;</code>.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Remove the class 'blue' from the matched elements.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;removeClass demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    margin: 4px;\n    font-size: 16px;\n    font-weight: bolder;\n  }\n  .blue {\n    color: blue;\n  }\n  .under {\n    text-decoration: underline;\n  }\n  .highlight {\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p class=\"blue under\"&gt;Hello&lt;/p&gt;\n&lt;p class=\"blue under highlight\"&gt;and&lt;/p&gt;\n&lt;p class=\"blue under\"&gt;then&lt;/p&gt;\n&lt;p class=\"blue under\"&gt;Goodbye&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p:even\" ).removeClass( \"blue\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Remove the class 'blue' and 'under' from the matched elements.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;removeClass demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    margin: 4px;\n    font-size: 16px;\n    font-weight: bolder;\n  }\n  .blue {\n    color: blue;\n  }\n  .under {\n    text-decoration: underline;\n  }\n  .highlight {\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p class=\"blue under\"&gt;Hello&lt;/p&gt;\n&lt;p class=\"blue under highlight\"&gt;and&lt;/p&gt;\n&lt;p class=\"blue under\"&gt;then&lt;/p&gt;\n&lt;p class=\"blue under\"&gt;Goodbye&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p:odd\" ).removeClass( \"blue under\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-2\"> <p>Remove all the classes from the matched elements.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;removeClass demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    margin: 4px;\n    font-size: 16px;\n    font-weight: bolder;\n  }\n  .blue {\n    color: blue;\n  }\n  .under {\n    text-decoration: underline;\n  }\n  .highlight {\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p class=\"blue under\"&gt;Hello&lt;/p&gt;\n&lt;p class=\"blue under highlight\"&gt;and&lt;/p&gt;\n&lt;p class=\"blue under\"&gt;then&lt;/p&gt;\n&lt;p class=\"blue under\"&gt;Goodbye&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p:eq(1)\" ).removeClass();\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/removeClass\" class=\"_attribution-link\">https://api.jquery.com/removeClass</a>\n  </p>\n</div>\n","removeprop":"<h1 class=\"entry-title\">.removeProp()</h1> <div class=\"entry-content\"> <article id=\"removeProp1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.removeProp( propertyName )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Remove a property for the set of matched elements.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.6/\">1.6</a></span><a id=\"removeProp-propertyName\" href=\"#removeProp-propertyName\">.removeProp( propertyName )</a> </h4> <ul><li> <div><strong>propertyName</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>The name of the property to remove.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.removeProp()</code> method removes properties set by the <code><a href=\"prop\">.prop()</a></code> method.</p> <p>With some built-in properties of a DOM element or <code>window</code> object, browsers may generate an error if an attempt is made to remove the property. jQuery first assigns the value <code>undefined</code> to the property and ignores any error the browser generates. In general, it is only necessary to remove custom properties that have been set on an object, and not built-in (native) properties.</p> <p><strong>Note:</strong> Do not use this method to remove native properties such as checked, disabled, or selected. This will remove the property completely and, once removed, cannot be added again to element. Use <code><a href=\"prop\">.prop()</a></code> to set these properties to <code>false</code> instead.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> In Internet Explorer prior to version 9, using <code><a href=\"prop\">.prop()</a></code> to set a DOM element property to anything other than a simple primitive value (number, string, or boolean) can cause memory leaks if the property is not removed (using <a href=\"removeprop\"><code>.removeProp()</code></a>) before the DOM element is removed from the document. To safely set values on DOM objects without memory leaks, use <a href=\"data\"><code>.data()</code></a>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Set a numeric property on a paragraph and then remove it. </p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;removeProp demo&lt;/title&gt;\n  &lt;style&gt;\n  img {\n    padding: 10px;\n  }\n  div {\n    color: red;\n    font-size: 24px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n  &lt;p&gt;&lt;/p&gt;\n \n&lt;script&gt;\npara = $( \"p\" );\npara\n  .prop( \"luggageCode\", 1234 )\n  .append( \"The secret luggage code is: \", String( para.prop( \"luggageCode\" ) ), \". \" )\n  .removeProp( \"luggageCode\" )\n  .append( \"Now the secret luggage code is: \", String( para.prop( \"luggageCode\" ) ), \". \" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/removeProp\" class=\"_attribution-link\">https://api.jquery.com/removeProp</a>\n  </p>\n</div>\n","select":"<h1 class=\"entry-title\">.select()</h1> <div class=\"entry-content\"> <article id=\"select1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.select( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Bind an event handler to the \"select\" JavaScript event, or trigger that event on an element.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"select-handler\" href=\"#select-handler\">.select( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"select-eventData-handler\" href=\"#select-eventData-handler\">.select( [eventData ], handler )</a> </h4> <ul> <li> <div><strong>eventData</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>An object containing data that will be passed to the event handler.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"select\" href=\"#select\">.select()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method is a shortcut for <code>.on( \"select\", handler )</code> in the first two variations, and <code>.trigger( \"select\" )</code> in the third.</p> <p>The <code>select</code> event is sent to an element when the user makes a text selection inside it. This event is limited to <code>&lt;input type=\"text\"&gt;</code> fields and <code>&lt;textarea&gt;</code> boxes.</p> <p>For example, consider the HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;form&gt;\n  &lt;input id=\"target\" type=\"text\" value=\"Hello there\"&gt;\n&lt;/form&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;/div&gt;</pre> <p>The event handler can be bound to the text input:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#target\" ).select(function() {\n  alert( \"Handler for .select() called.\" );\n});</pre> <p>Now when any portion of the text is selected, the alert is displayed. Merely setting the location of the insertion point will not trigger the event. To trigger the event manually, apply <code>.select()</code> without an argument:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#other\").click(function() {\n  $( \"#target\" ).select();\n});</pre> <p>After this code executes, clicks on the Trigger button will also alert the message:</p> <p> <samp>Handler for .select() called.</samp> </p> <p>In addition, the default <code>select</code> action on the field will be fired, so the entire text field will be selected.</p> <div class=\"warning\"> <p>The method for retrieving the current selected text differs from one browser to another. A number of jQuery plug-ins offer cross-platform solutions.</p> </div> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> As the <code>.select()</code> method is just a shorthand for <code>.on( \"select\", handler )</code>, detaching is possible using <code>.off( \"select\" )</code>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>To do something when text in input boxes is selected:</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;select demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    color: blue;\n  }\n  div {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n  &lt;p&gt;Click and drag the mouse to select text in the inputs.&lt;/p&gt;\n  &lt;input type=\"text\" value=\"Some text\"&gt;\n  &lt;input type=\"text\" value=\"to test on\"&gt;\n  &lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \":input\" ).select(function() {\n  $( \"div\" ).text( \"Something was selected\" ).show().fadeOut( 1000 );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>To trigger the select event on all input elements, try:</p> <pre class=\"syntaxhighlighter javascript\">$( \"input\" ).select();</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/select\" class=\"_attribution-link\">https://api.jquery.com/select</a>\n  </p>\n</div>\n","replaceall":"<h1 class=\"entry-title\">.replaceAll()</h1> <div class=\"entry-content\"> <article id=\"replaceAll1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.replaceAll( target )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Replace each target element with the set of matched elements.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2/\">1.2</a></span><a id=\"replaceAll-target\" href=\"#replaceAll-target\">.replaceAll( target )</a> </h4> <ul><li> <div><strong>target</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> or <a href=\"types#jQuery\">jQuery</a> or <a href=\"types#Array\">Array</a> or <a href=\"types#Element\">Element</a> </div> <div>A selector string, jQuery object, DOM element, or array of elements indicating which element(s) to replace.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.replaceAll()</code> method is similar to <code><a href=\"replacewith\">.replaceWith()</a></code>, but with the source and target reversed. Consider this DOM structure:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner first\"&gt;Hello&lt;/div&gt;\n  &lt;div class=\"inner second\"&gt;And&lt;/div&gt;\n  &lt;div class=\"inner third\"&gt;Goodbye&lt;/div&gt;\n&lt;/div&gt;</pre> <p>We can create an element, then replace other elements with it:</p> <pre class=\"syntaxhighlighter javascript\">$( \"&lt;h2&gt;New heading&lt;/h2&gt;\" ).replaceAll( \".inner\" );</pre> <p>This causes all of them to be replaced:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;h2&gt;New heading&lt;/h2&gt;\n  &lt;h2&gt;New heading&lt;/h2&gt;\n  &lt;h2&gt;New heading&lt;/h2&gt;\n&lt;/div&gt;</pre> <p>Or, we could select an element to use as the replacement:</p> <pre class=\"syntaxhighlighter javascript\">$( \".first\" ).replaceAll( \".third\" );</pre> <p>This results in the DOM structure:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner second\"&gt;And&lt;/div&gt;\n  &lt;div class=\"inner first\"&gt;Hello&lt;/div&gt;\n&lt;/div&gt;</pre> <p>From this example, we can see that the selected element replaces the target by being moved from its old location, not by being cloned.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> The <code>.replaceAll()</code> method removes all data and event handlers associated with the removed nodes. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Replace all the paragraphs with bold words.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;replaceAll demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Hello&lt;/p&gt;\n&lt;p&gt;cruel&lt;/p&gt;\n&lt;p&gt;World&lt;/p&gt;\n \n&lt;script&gt;\n$( \"&lt;b&gt;Paragraph. &lt;/b&gt;\" ).replaceAll( \"p\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/replaceAll\" class=\"_attribution-link\">https://api.jquery.com/replaceAll</a>\n  </p>\n</div>\n","replacewith":"<h1 class=\"entry-title\">.replaceWith()</h1> <div class=\"entry-content\"> <article id=\"replaceWith1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.replaceWith( newContent )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Replace each element in the set of matched elements with the provided new content and return the set of elements that was removed.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2/\">1.2</a></span><a id=\"replaceWith-newContent\" href=\"#replaceWith-newContent\">.replaceWith( newContent )</a> </h4> <ul><li> <div><strong>newContent</strong></div> <div>Type: <a href=\"types#htmlString\">htmlString</a> or <a href=\"types#Element\">Element</a> or <a href=\"types#Array\">Array</a> or <a href=\"types#jQuery\">jQuery</a> </div> <div>The content to insert. May be an HTML string, DOM element, array of DOM elements, or jQuery object.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"replaceWith-function\" href=\"#replaceWith-function\">.replaceWith( function )</a> </h4> <ul><li> <div><strong>function</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function that returns content with which to replace the set of matched elements.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.replaceWith()</code> method removes content from the DOM and inserts new content in its place with a single call. Consider this DOM structure:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner first\"&gt;Hello&lt;/div&gt;\n  &lt;div class=\"inner second\"&gt;And&lt;/div&gt;\n  &lt;div class=\"inner third\"&gt;Goodbye&lt;/div&gt;\n&lt;/div&gt;</pre> <p>The second inner <code>&lt;div&gt;</code> could be replaced with the specified HTML:</p> <pre class=\"syntaxhighlighter javascript\">$( \"div.second\" ).replaceWith( \"&lt;h2&gt;New heading&lt;/h2&gt;\" );</pre> <p>This results in the structure:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner first\"&gt;Hello&lt;/div&gt;\n  &lt;h2&gt;New heading&lt;/h2&gt;\n  &lt;div class=\"inner third\"&gt;Goodbye&lt;/div&gt;\n&lt;/div&gt;</pre> <p><em>All</em> inner <code>&lt;div&gt;</code> elements could be targeted at once:</p> <pre class=\"syntaxhighlighter javascript\">$( \"div.inner\" ).replaceWith( \"&lt;h2&gt;New heading&lt;/h2&gt;\" );</pre> <p>This causes all of them to be replaced:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;h2&gt;New heading&lt;/h2&gt;\n  &lt;h2&gt;New heading&lt;/h2&gt;\n  &lt;h2&gt;New heading&lt;/h2&gt;\n&lt;/div&gt;</pre> <p>An element could also be selected as the replacement:</p> <pre class=\"syntaxhighlighter javascript\">$( \"div.third\" ).replaceWith( $( \".first\" ) );</pre> <p>This results in the DOM structure:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner second\"&gt;And&lt;/div&gt;\n  &lt;div class=\"inner first\"&gt;Hello&lt;/div&gt;\n&lt;/div&gt;</pre> <p>This example demonstrates that the selected element replaces the target by being moved from its old location, not by being cloned.</p> <p>The <code>.replaceWith()</code> method, like most jQuery methods, returns the jQuery object so that other methods can be chained onto it. However, it must be noted that the <em>original</em> jQuery object is returned. This object refers to the element that has been removed from the DOM, not the new element that has replaced it.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> The <code>.replaceWith()</code> method removes all data and event handlers associated with the removed nodes. </li> <li> Prior to jQuery 1.9, <code>.replaceWith()</code> would attempt to add or change nodes in the current jQuery set if the first node in the set was not connected to a document, and in those cases return a new jQuery set rather than the original set. The method might or might not have returned a new result depending on the number or connectedness of its arguments! As of jQuery 1.9, <code>.after()</code>, <code>.before()</code>, and <code>.replaceWith()</code> always return the original unmodified set. Attempting to use these methods on a node without a parent has no effect—that is, neither the set nor the nodes it contains are changed. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>On click, replace the button with a div containing the same word.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;replaceWith demo&lt;/title&gt;\n  &lt;style&gt;\n  button {\n    display: block;\n    margin: 3px;\n    color: red;\n    width: 200px;\n  }\n  div {\n    color: red;\n    border: 2px solid blue;\n    width: 200px;\n    margin: 3px;\n    text-align: center;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button&gt;First&lt;/button&gt;\n&lt;button&gt;Second&lt;/button&gt;\n&lt;button&gt;Third&lt;/button&gt;\n \n&lt;script&gt;\n$( \"button\" ).click(function() {\n  $( this ).replaceWith( \"&lt;div&gt;\" + $( this ).text() + \"&lt;/div&gt;\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Replace all paragraphs with bold words.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;replaceWith demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Hello&lt;/p&gt;\n&lt;p&gt;cruel&lt;/p&gt;\n&lt;p&gt;World&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).replaceWith( \"&lt;b&gt;Paragraph. &lt;/b&gt;\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-2\"> <p>On click, replace each paragraph with a div that is already in the DOM and selected with the <code>$()</code> function. Notice it doesn't clone the object but rather moves it to replace the paragraph.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;replaceWith demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    border: 2px solid blue;\n    color: red;\n    margin: 3px;\n  }\n  p {\n    border: 2px solid red;\n    color: blue;\n    margin: 3px;\n    cursor: pointer;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n  &lt;p&gt;Hello&lt;/p&gt;\n  &lt;p&gt;cruel&lt;/p&gt;\n  &lt;p&gt;World&lt;/p&gt;\n  &lt;div&gt;Replaced!&lt;/div&gt;\n \n&lt;script&gt;\n$( \"p\" ).click(function() {\n  $( this ).replaceWith( $( \"div\" ) );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-3\"> <p>On button click, replace the containing div with its child divs and append the class name of the selected element to the paragraph.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;replaceWith demo&lt;/title&gt;\n  &lt;style&gt;\n  .container {\n    background-color: #991;\n  }\n  .inner {\n    color: #911;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;\n  &lt;button&gt;Replace!&lt;/button&gt;\n&lt;/p&gt;\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;Scooby&lt;/div&gt;\n  &lt;div class=\"inner\"&gt;Dooby&lt;/div&gt;\n  &lt;div class=\"inner\"&gt;Doo&lt;/div&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\n$( \"button\" ).on( \"click\", function() {\n  var $container = $( \"div.container\" ).replaceWith(function() {\n    return $( this ).contents();\n  });\n \n  $( \"p\" ).append( $container.attr( \"class\" ) );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/replaceWith\" class=\"_attribution-link\">https://api.jquery.com/replaceWith</a>\n  </p>\n</div>\n","show":"<h1 class=\"entry-title\">.show()</h1> <div class=\"entry-content\"> <article id=\"show1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.show()</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Display the matched elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"show\" href=\"#show\">.show()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"show-duration-complete\" href=\"#show-duration-complete\">.show( [duration ] [, complete ] )</a> </h4> <ul> <li> <div> <strong>duration</strong> (default: <code>400</code>)</div> <div>Type: <a href=\"types#Number\">Number</a> or <a href=\"types#String\">String</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function to call once the animation is complete, called once per matched element.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"show-options\" href=\"#show-options\">.show( options )</a> </h4> <ul><li> <div><strong>options</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>A map of additional options to pass to the method.</div> <ul> <li> <div> <strong>duration</strong> (default: <code>400</code>)</div> <div>Type: <a href=\"types#Number\">Number</a> or <a href=\"types#String\">String</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div> <strong>easing</strong> (default: <code>swing</code>)</div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string indicating which easing function to use for the transition.</div> </li> <li> <div> <strong>queue</strong> (default: <code>true</code>)</div> <div>Type: <a href=\"types#Boolean\">Boolean</a> or <a href=\"types#String\">String</a> </div> <div>A Boolean indicating whether to place the animation in the effects queue. If false, the animation will begin immediately. <strong>As of jQuery 1.7</strong>, the queue option can also accept a string, in which case the animation is added to the queue represented by that string. When a custom queue name is used the animation does not automatically start; you must call <code>.dequeue(\"queuename\")</code> to start it.</div> </li> <li> <div><strong>specialEasing</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a>)</span> </div> </li> <li> <div><strong>step</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Number\">Number</a> now, <a href=\"types#Tween\">Tween</a> tween )</div> <div>A function to be called for each animated property of each animated element. This function provides an opportunity to modify the Tween object to change the value of the property before it is set.</div> </li> <li> <div><strong>progress</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Number\">Number</a> progress, <a href=\"types#Number\">Number</a> remainingMs )</div> <div>A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function that is called once the animation on an element is complete.</div> </li> <li> <div><strong>start</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation )</div> <div>A function to call when the animation on an element begins.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>done</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Boolean\">Boolean</a> jumpedToEnd )</div> <div>A function to be called when the animation on an element completes (its Promise object is resolved).<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>fail</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Boolean\">Boolean</a> jumpedToEnd )</div> <div>A function to be called when the animation on an element fails to complete (its Promise object is rejected).<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>always</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Boolean\">Boolean</a> jumpedToEnd )</div> <div>A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected).<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> </ul> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"show-duration-easing-complete\" href=\"#show-duration-easing-complete\">.show( duration [, easing ] [, complete ] )</a> </h4> <ul> <li> <div> <strong>duration</strong> (default: <code>400</code>)</div> <div>Type: <a href=\"types#Number\">Number</a> or <a href=\"types#String\">String</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div> <strong>easing</strong> (default: <code>swing</code>)</div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string indicating which easing function to use for the transition.</div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function to call once the animation is complete, called once per matched element.</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>With no parameters, the <code>.show()</code> method is the simplest way to display an element: </p> <pre class=\"syntaxhighlighter javascript\">$( \".target\" ).show();</pre> <p>The matched elements will be revealed immediately, with no animation. This is roughly equivalent to calling <code>.css( \"display\", \"block\")</code>, except that the <code>display</code> property is restored to whatever it was initially. If an element has a <code>display</code> value of <code>inline</code>, then is hidden and shown, it will once again be displayed <code>inline</code>.</p> <p><strong>Note: </strong> If using !important in your styles, such as <code>display: none !important</code>, it is necessary to override the style using <code>.css( \"display\", \"block !important\")</code> should you wish for <code>.show()</code> to function correctly.</p> <p>When a duration, a plain object, or a \"complete\" function is provided, <code>.show()</code> becomes an animation method. The <code>.show()</code> method animates the width, height, and opacity of the matched elements simultaneously.</p> <p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of <code>200</code> and <code>600</code> milliseconds, respectively.</p> <p>As of jQuery 1.4.3, an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called <code>swing</code>, and one that progresses at a constant pace, called <code>linear</code>. More easing functions are available with the use of plug-ins, most notably the <a href=\"http://jqueryui.com\">jQuery UI suite</a>.</p> <p>If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but <code>this</code> is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.</p> <div class=\"warning\"> <p><strong>Note:</strong> This method may cause performance issues, especially when used on many elements. If you're encountering such issues, use performance testing tools to determine whether this method is causing them. Moreover, this method can cause problems with responsive layouts if the display value differs at different viewport sizes.</p> </div> <p>We can animate any element, such as a simple image:</p> <pre class=\"syntaxhighlighter xml\">&lt;div id=\"clickme\"&gt;\n  Click here\n&lt;/div&gt;\n&lt;img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\"&gt;\nWith the element initially hidden, we can show it slowly:\n$( \"#clickme\" ).click(function() {\n  $( \"#book\" ).show( \"slow\", function() {\n    // Animation complete.\n  });\n});</pre> <figure> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_01.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_02.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_03.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_04.png\" alt=\"\"> <figcaption>Figure 1 - Illustration of the <code>show()</code> effect</figcaption> </figure> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> All jQuery effects, including <code>.show()</code>, can be turned off globally by setting <code>jQuery.fx.off = true</code>, which effectively sets the duration to 0. For more information, see <a href=\"jquery.fx.off\">jQuery.fx.off</a>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Animates all hidden paragraphs to show slowly, completing the animation within 600 milliseconds.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;show demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button&gt;Show it&lt;/button&gt;\n&lt;p style=\"display: none\"&gt;Hello  2&lt;/p&gt;\n \n&lt;script&gt;\n$( \"button\" ).click(function() {\n  $( \"p\" ).show( \"slow\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Show the first div, followed by each next adjacent sibling div in order, with a 200ms animation. Each animation starts when the previous sibling div's animation ends.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;show demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    background: #def3ca;\n    margin: 3px;\n    width: 80px;\n    display: none;\n    float: left;\n    text-align: center;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button id=\"showr\"&gt;Show&lt;/button&gt;\n&lt;button id=\"hidr\"&gt;Hide&lt;/button&gt;\n&lt;div&gt;Hello 3,&lt;/div&gt;\n&lt;div&gt;how&lt;/div&gt;\n&lt;div&gt;are&lt;/div&gt;\n&lt;div&gt;you?&lt;/div&gt;\n \n&lt;script&gt;\n$( \"#showr\" ).click(function() {\n  $( \"div\" ).first().show( \"fast\", function showNext() {\n    $( this ).next( \"div\" ).show( \"fast\", showNext );\n  });\n});\n \n$( \"#hidr\" ).click(function() {\n  $( \"div\" ).hide( 1000 );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-2\"> <p>Show all span and input elements with an animation. Change the text once the animation is done.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;show demo&lt;/title&gt;\n  &lt;style&gt;\n  span {\n    display: none;\n  }\n  div {\n    display: none;\n  }\n  p {\n    font-weight: bold;\n    background-color: #fcd;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button&gt;Do it!&lt;/button&gt;\n&lt;span&gt;Are you sure? (type 'yes' if you are) &lt;/span&gt;\n&lt;div&gt;\n  &lt;form&gt;\n    &lt;input type=\"text\"  value=\"as;ldkfjalsdf\"&gt;\n  &lt;/form&gt;\n&lt;/div&gt;\n&lt;p style=\"display:none;\"&gt;I'm hidden...&lt;/p&gt;\n \n&lt;script&gt;\nfunction doIt() {\n  $( \"span,div\" ).show( \"slow\" );\n}\n// Can pass in function name\n$( \"button\" ).click( doIt );\n \n$( \"form\" ).submit(function( event ) {\n  if ( $( \"input\" ).val() === \"yes\" ) {\n    $( \"p\" ).show( 4000, function() {\n      $( this ).text( \"Ok, DONE! (now showing)\" );\n    });\n  }\n  $( \"span,div\" ).hide( \"fast\" );\n \n  // Prevent form submission\n  event.preventDefault();\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/show\" class=\"_attribution-link\">https://api.jquery.com/show</a>\n  </p>\n</div>\n","root-selector":"<h1 class=\"entry-title\">:root Selector</h1> <div class=\"entry-content\"> <article id=\"root1\" class=\"entry selector\"><h2 class=\"section-title\"><span>root selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects the element that is the root of the document.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.9/\">1.9</a></span>jQuery( \":root\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>In HTML, the root of the document, and thus the element that <code>$(\":root\")</code> selects, is always the <code>&lt;html&gt;</code> element.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Display the tag name of the root element.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;root demo&lt;/title&gt;\n  &lt;style&gt;\n  span.fot {\n    color: red;\n    font-size: 120%;\n    font-style: italic;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div id=\"log\"&gt;The root of this document is: &lt;/div&gt;\n \n&lt;script&gt;\n$( \"&lt;b&gt;&lt;/b&gt;\" ).html( $( \":root\" )[ 0 ].nodeName ).appendTo( \"#log\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/root-selector\" class=\"_attribution-link\">https://api.jquery.com/root-selector</a>\n  </p>\n</div>\n","scroll":"<h1 class=\"entry-title\">.scroll()</h1> <div class=\"entry-content\"> <article id=\"scroll1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.scroll( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Bind an event handler to the \"scroll\" JavaScript event, or trigger that event on an element.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"scroll-handler\" href=\"#scroll-handler\">.scroll( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"scroll-eventData-handler\" href=\"#scroll-eventData-handler\">.scroll( [eventData ], handler )</a> </h4> <ul> <li> <div><strong>eventData</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>An object containing data that will be passed to the event handler.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"scroll\" href=\"#scroll\">.scroll()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method is a shortcut for <code>.on( \"scroll\", handler )</code> in the first and second variations, and <code>.trigger( \"scroll\" )</code> in the third.</p> <p>The <code>scroll</code> event is sent to an element when the user scrolls to a different place in the element. It applies to <code>window</code> objects, but also to scrollable frames and elements with the <code>overflow </code>CSS property set to <code>scroll</code> (or <code>auto</code> when the element's explicit height or width is less than the height or width of its contents).</p> <p>For example, consider the HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;div id=\"target\" style=\"overflow: scroll; width: 200px; height: 100px;\"&gt;\n  Lorem ipsum dolor sit amet, consectetur adipisicing elit,\n  sed do eiusmod tempor incididunt ut labore et dolore magna\n  aliqua. Ut enim ad minim veniam, quis nostrud exercitation\n  ullamco laboris nisi ut aliquip ex ea commodo consequat.\n  Duis aute irure dolor in reprehenderit in voluptate velit\n  esse cillum dolore eu fugiat nulla pariatur. Excepteur\n  sint occaecat cupidatat non proident, sunt in culpa qui\n  officia deserunt mollit anim id est laborum.\n&lt;/div&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;/div&gt;\n&lt;div id=\"log\"&gt;&lt;/div&gt;</pre> <p>The style definition is present to make the target element small enough to be scrollable:</p> <figure> <img src=\"https://api.jquery.com/resources/0042_05_11.png\" alt=\"\"> <figcaption>Figure 1 - Illustration of the rendered HTML</figcaption> </figure> <p>The <code>scroll</code> event handler can be bound to this element:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#target\" ).scroll(function() {\n  $( \"#log\" ).append( \"&lt;div&gt;Handler for .scroll() called.&lt;/div&gt;\" );\n});</pre> <p>Now when the user scrolls the text up or down, one or more messages are appended to <code>&lt;div id=\"log\"&gt;&lt;/div&gt;</code>:</p> <p> <samp>Handler for .scroll() called.</samp> </p> <p>To trigger the event manually, apply <code>.scroll()</code> without an argument:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#other\" ).click(function() {\n  $( \"#target\" ).scroll();\n});</pre> <p>After this code executes, clicks on <samp>Trigger the handler</samp> will also append the message.</p> <p>A <code>scroll</code> event is sent whenever the element's scroll position changes, regardless of the cause. A mouse click or drag on the scroll bar, dragging inside the element, pressing the arrow keys, or using the mouse's scroll wheel could cause this event.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> As the <code>.scroll()</code> method is just a shorthand for <code>.on( \"scroll\", handler )</code>, detaching is possible using <code>.off( \"scroll\" )</code>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>To do something when your page is scrolled:</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;scroll demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    color: blue;\n  }\n  p {\n    color: green;\n  }\n  span {\n    color: red;\n    display: none;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;Try scrolling the iframe.&lt;/div&gt;\n&lt;p&gt;Paragraph - &lt;span&gt;Scroll happened!&lt;/span&gt;&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).clone().appendTo( document.body );\n$( \"p\" ).clone().appendTo( document.body );\n$( \"p\" ).clone().appendTo( document.body );\n$( window ).scroll(function() {\n  $( \"span\" ).css( \"display\", \"inline\" ).fadeOut( \"slow\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/scroll\" class=\"_attribution-link\">https://api.jquery.com/scroll</a>\n  </p>\n</div>\n","scrollleft":"<h1 class=\"entry-title\">.scrollLeft()</h1> <div class=\"entry-content\"> Get the current horizontal position of the scroll bar for the first element in the set of matched elements or set the horizontal position of the scroll bar for every matched element.<div class=\"toc\"> <h4><span>Contents:</span></h4> <ul class=\"toc-list\"> <li> <a href=\"#scrollLeft1\">.scrollLeft()</a><ul><li><a href=\"#scrollLeft\">.scrollLeft()</a></li></ul> </li> <li> <a href=\"#scrollLeft2\">.scrollLeft( value )</a><ul><li><a href=\"#scrollLeft-value\">.scrollLeft( value )</a></li></ul> </li> </ul> </div>\n<article id=\"scrollLeft1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.scrollLeft()</span><span class=\"returns\">Returns: <a href=\"types#Integer\">Integer</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Get the current horizontal position of the scroll bar for the first element in the set of matched elements.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2.6/\">1.2.6</a></span><a id=\"scrollLeft\" href=\"#scrollLeft\">.scrollLeft()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The horizontal scroll position is the same as the number of pixels that are hidden from view to the left of the scrollable area. If the scroll bar is at the very left, or if the element is not scrollable, this number will be <code>0</code>.</p> <div class=\"warning\"> <p><strong>Note:</strong><code>.scrollLeft()</code>, when called directly or animated as a property using <code>.animate()</code>, will not work if the element it is being applied to is hidden.</p> </div> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Get the scrollLeft of a paragraph.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;scrollLeft demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    margin: 10px;\n    padding: 5px;\n    border: 2px solid #666;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Hello&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n \n&lt;script&gt;\nvar p = $( \"p:first\" );\n$( \"p:last\" ).text( \"scrollLeft:\" + p.scrollLeft() );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article><article id=\"scrollLeft2\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.scrollLeft( value )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Set the current horizontal position of the scroll bar for each of the set of matched elements.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2.6/\">1.2.6</a></span><a id=\"scrollLeft-value\" href=\"#scrollLeft-value\">.scrollLeft( value )</a> </h4> <ul><li> <div><strong>value</strong></div> <div>Type: <a href=\"types#Number\">Number</a> </div> <div>An integer indicating the new position to set the scroll bar to.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc-1\"> <p>The horizontal scroll position is the same as the number of pixels that are hidden from view above the scrollable area. Setting the <code>scrollLeft</code> positions the horizontal scroll of each matched element.</p> </div> <section class=\"entry-examples\" id=\"entry-examples-1\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-1-0\"> <p>Set the scrollLeft of a div.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;scrollLeft demo&lt;/title&gt;\n  &lt;style&gt;\n  div.demo {\n    background: #ccc none repeat scroll 0 0;\n    border: 3px solid #666;\n    margin: 5px;\n    padding: 5px;\n    position: relative;\n    width: 200px;\n    height: 100px;\n    overflow: auto;\n  }\n  p {\n    margin: 10px;\n    padding: 5px;\n    border: 2px solid #666;\n    width: 1000px;\n    height: 1000px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div class=\"demo\"&gt;&lt;h1&gt;lalala&lt;/h1&gt;&lt;p&gt;Hello&lt;/p&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"div.demo\" ).scrollLeft( 300 );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/scrollLeft\" class=\"_attribution-link\">https://api.jquery.com/scrollLeft</a>\n  </p>\n</div>\n","serialize":"<h1 class=\"entry-title\">.serialize()</h1> <div class=\"entry-content\"> <article id=\"serialize1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.serialize()</span><span class=\"returns\">Returns: <a href=\"types#String\">String</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Encode a set of form elements as a string for submission.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"serialize\" href=\"#serialize\">.serialize()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.serialize()</code> method creates a text string in standard URL-encoded notation. It can act on a jQuery object that has selected individual form controls, such as <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, and <code>&lt;select&gt;</code>: <code>$( \"input, textarea, select\" ).serialize();</code></p> <p>It is typically easier, however, to select the <code>&lt;form&gt;</code> itself for serialization:</p> <pre class=\"syntaxhighlighter javascript\">$( \"form\" ).on( \"submit\", function( event ) {\n  event.preventDefault();\n  console.log( $( this ).serialize() );\n});</pre> <p>In this case, jQuery serializes the successful controls within the form. Only <code>form</code> elements are examined for inputs they contain, in all other cases the input elements to be serialized should be part of the set passed to the <code>.serialize()</code> method. Selecting both the form and its children in a set will cause duplicates in the serialized string.</p> <p>Note: Only <a href=\"http://www.w3.org/TR/html401/interact/forms.html#h-17.13.2\">\"successful controls\"</a> are serialized to the string. No submit button value is serialized since the form was not submitted using a button. For a form element's value to be included in the serialized string, the element must have a <code>name</code> attribute. Values from checkboxes and radio buttons (<code>input</code>s of type \"radio\" or \"checkbox\") are included only if they are checked. Data from file select elements is not serialized.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Serialize a form to a query string that could be sent to a server in an Ajax request.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;serialize demo&lt;/title&gt;\n  &lt;style&gt;\n  body, select {\n    font-size: 12px;\n  }\n  form {\n    margin: 5px;\n  }\n  p {\n    color: red;\n    margin: 5px;\n    font-size: 14px;\n  }\n  b {\n    color: blue;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;form&gt;\n  &lt;select name=\"single\"&gt;\n    &lt;option&gt;Single&lt;/option&gt;\n    &lt;option&gt;Single2&lt;/option&gt;\n  &lt;/select&gt;\n \n  &lt;br&gt;\n  &lt;select name=\"multiple\" multiple=\"multiple\"&gt;\n    &lt;option selected=\"selected\"&gt;Multiple&lt;/option&gt;\n    &lt;option&gt;Multiple2&lt;/option&gt;\n    &lt;option selected=\"selected\"&gt;Multiple3&lt;/option&gt;\n  &lt;/select&gt;\n \n  &lt;br&gt;\n  &lt;input type=\"checkbox\" name=\"check\" value=\"check1\" id=\"ch1\"&gt;\n  &lt;label for=\"ch1\"&gt;check1&lt;/label&gt;\n  &lt;input type=\"checkbox\" name=\"check\" value=\"check2\" checked=\"checked\" id=\"ch2\"&gt;\n  &lt;label for=\"ch2\"&gt;check2&lt;/label&gt;\n \n  &lt;br&gt;\n  &lt;input type=\"radio\" name=\"radio\" value=\"radio1\" checked=\"checked\" id=\"r1\"&gt;\n  &lt;label for=\"r1\"&gt;radio1&lt;/label&gt;\n  &lt;input type=\"radio\" name=\"radio\" value=\"radio2\" id=\"r2\"&gt;\n  &lt;label for=\"r2\"&gt;radio2&lt;/label&gt;\n&lt;/form&gt;\n \n&lt;p&gt;&lt;tt id=\"results\"&gt;&lt;/tt&gt;&lt;/p&gt;\n \n&lt;script&gt;\n  function showValues() {\n    var str = $( \"form\" ).serialize();\n    $( \"#results\" ).text( str );\n  }\n  $( \"input[type='checkbox'], input[type='radio']\" ).on( \"click\", showValues );\n  $( \"select\" ).on( \"change\", showValues );\n  showValues();\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/serialize\" class=\"_attribution-link\">https://api.jquery.com/serialize</a>\n  </p>\n</div>\n","text-selector":"<h1 class=\"entry-title\">:text Selector</h1> <div class=\"entry-content\"> <article id=\"text1\" class=\"entry selector\"><h2 class=\"section-title\"><span>text selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all input elements of type text.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \":text\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p><code>$( \":text\" )</code> allows us to select all <code>&lt;input type=\"text\"&gt;</code> elements. As with other pseudo-class selectors (those that begin with a \":\") it is recommended to precede it with a tag name or some other selector; otherwise, the universal selector ( \"*\" ) is implied. In other words, the bare <code>$( \":text\" )</code> is equivalent to <code>$( \"*:text\" )</code>, so <code>$( \"input:text\" )</code> should be used instead. </p> <p><strong>Note:</strong> As of jQuery 1.5.2, <code>:text</code> selects <code>input</code> elements that have no specified <code>type</code> attribute (in which case <code>type=\"text\"</code> is implied). </p> <p>This difference in behavior between <code>$( \":text\" )</code> and <code>$( \"[type=text]\" )</code>, can be seen below:</p> <pre class=\"syntaxhighlighter javascript\">$( \"&lt;input&gt;\" ).is( \"[type=text]\" ); // false\n$( \"&lt;input&gt;\" ).is( \":text\" ); // true</pre> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> Because <code>:text</code> is a jQuery extension and not part of the CSS specification, queries using <code>:text</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. For better performance in modern browsers, use <code>[type=\"text\"]</code> instead. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds all text inputs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;text demo&lt;/title&gt;\n  &lt;style&gt;\n  textarea {\n    height: 25px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;form&gt;\n  &lt;input type=\"button\" value=\"Input Button\"&gt;\n  &lt;input type=\"checkbox\"&gt;\n  &lt;input type=\"file\"&gt;\n  &lt;input type=\"hidden\"&gt;\n  &lt;input type=\"image\"&gt;\n  &lt;input type=\"password\"&gt;\n  &lt;input type=\"radio\"&gt;\n  &lt;input type=\"reset\"&gt;\n  &lt;input type=\"submit\"&gt;\n  &lt;input type=\"text\"&gt;\n  &lt;select&gt;\n    &lt;option&gt;Option&lt;/option&gt;\n  &lt;/select&gt;\n  &lt;textarea&gt;&lt;/textarea&gt;\n  &lt;button&gt;Button&lt;/button&gt;\n&lt;/form&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar input = $( \"form input:text\" ).css({\n  background: \"yellow\",\n  border: \"3px red solid\"\n});\n \n$( \"div\" )\n  .text( \"For this type jQuery found \" + input.length + \".\" )\n  .css( \"color\", \"red\" );\n \n// Prevent form submission\n$( \"form\" ).submit(function( event ) {\n  event.preventDefault();\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/text-selector\" class=\"_attribution-link\">https://api.jquery.com/text-selector</a>\n  </p>\n</div>\n","selected-selector":"<h1 class=\"entry-title\">:selected Selector</h1> <div class=\"entry-content\"> <article id=\"selected1\" class=\"entry selector\"><h2 class=\"section-title\"><span>selected selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all elements that are selected.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \":selected\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>:selected</code> selector works for <code>&lt;option&gt;</code> elements. It does not work for checkboxes or radio inputs; use <code>:checked</code> for them.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> Because <code>:selected</code> is a jQuery extension and not part of the CSS specification, queries using <code>:selected</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. To achieve the best performance when using <code>:selected</code> to select elements, first select the elements using a pure CSS selector, then use <a href=\"filter\"><code>.filter(\":selected\")</code></a>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Attaches a change event to the select that gets the text for each selected option and writes them in the div. It then triggers the event for the initial text draw.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;selected demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;select name=\"garden\" multiple=\"multiple\"&gt;\n  &lt;option&gt;Flowers&lt;/option&gt;\n  &lt;option selected=\"selected\"&gt;Shrubs&lt;/option&gt;\n  &lt;option&gt;Trees&lt;/option&gt;\n  &lt;option selected=\"selected\"&gt;Bushes&lt;/option&gt;\n  &lt;option&gt;Grass&lt;/option&gt;\n  &lt;option&gt;Dirt&lt;/option&gt;\n&lt;/select&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"select\" )\n  .change(function() {\n    var str = \"\";\n    $( \"select option:selected\" ).each(function() {\n      str += $( this ).text() + \" \";\n    });\n    $( \"div\" ).text( str );\n  })\n  .trigger( \"change\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/selected-selector\" class=\"_attribution-link\">https://api.jquery.com/selected-selector</a>\n  </p>\n</div>\n","scrolltop":"<h1 class=\"entry-title\">.scrollTop()</h1> <div class=\"entry-content\"> <div class=\"toc\"> <h4><span>Contents:</span></h4> <ul class=\"toc-list\"> <li> <a href=\"#scrollTop1\">.scrollTop()</a><ul><li><a href=\"#scrollTop\">.scrollTop()</a></li></ul> </li> <li> <a href=\"#scrollTop2\">.scrollTop( value )</a><ul><li><a href=\"#scrollTop-value\">.scrollTop( value )</a></li></ul> </li> </ul> </div>\n<article id=\"scrollTop1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.scrollTop()</span><span class=\"returns\">Returns: <a href=\"types#Number\">Number</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Get the current vertical position of the scroll bar for the first element in the set of matched elements or set the vertical position of the scroll bar for every matched element.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2.6/\">1.2.6</a></span><a id=\"scrollTop\" href=\"#scrollTop\">.scrollTop()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The vertical scroll position is the same as the number of pixels that are hidden from view above the scrollable area. If the scroll bar is at the very top, or if the element is not scrollable, this number will be <code>0</code>.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Get the scrollTop of a paragraph.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;scrollTop demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    margin: 10px;\n    padding: 5px;\n    border: 2px solid #666;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Hello&lt;/p&gt;&lt;p&gt;&lt;/p&gt;\n \n&lt;script&gt;\nvar p = $( \"p:first\" );\n$( \"p:last\" ).text( \"scrollTop:\" + p.scrollTop() );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article><article id=\"scrollTop2\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.scrollTop( value )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Set the current vertical position of the scroll bar for each of the set of matched elements.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2.6/\">1.2.6</a></span><a id=\"scrollTop-value\" href=\"#scrollTop-value\">.scrollTop( value )</a> </h4> <ul><li> <div><strong>value</strong></div> <div>Type: <a href=\"types#Number\">Number</a> </div> <div>A number indicating the new position to set the scroll bar to.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc-1\"> <p>The vertical scroll position is the same as the number of pixels that are hidden from view above the scrollable area. Setting the <code>scrollTop</code> positions the vertical scroll of each matched element.</p> </div> <section class=\"entry-examples\" id=\"entry-examples-1\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-1-0\"> <p>Set the scrollTop of a div.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;scrollTop demo&lt;/title&gt;\n  &lt;style&gt;\n  div.demo {\n    background: #ccc none repeat scroll 0 0;\n    border: 3px solid #666;\n    margin: 5px;\n    padding: 5px;\n    position: relative;\n    width: 200px;\n    height: 100px;\n    overflow: auto;\n  }\n  p {\n    margin: 10px;\n    padding: 5px;\n    border: 2px solid #666;\n    width: 1000px;\n    height: 1000px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div class=\"demo\"&gt;&lt;h1&gt;lalala&lt;/h1&gt;&lt;p&gt;Hello&lt;/p&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"div.demo\" ).scrollTop( 300 );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/scrollTop\" class=\"_attribution-link\">https://api.jquery.com/scrollTop</a>\n  </p>\n</div>\n","selector":"<h1 class=\"entry-title\">.selector</h1> <div class=\"entry-content\"> <article id=\"selector1\" class=\"entry property\"><h2 class=\"section-title\"> <span>selector</span><span class=\"returns\">Returns: <a href=\"types#String\">String</a></span><span class=\"version-details\">version deprecated: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a>, removed: <a href=\"https://api.jquery.com/category/version/3.0/\">3.0</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>A selector representing selector passed to jQuery(), if any, when creating the original set.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.3/\">1.3</a></span>selector</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.selector</code> property was deprecated in jQuery 1.7 and is only maintained to the extent needed for supporting <code>.live()</code> in the jQuery Migrate plugin. It may be removed without notice in a future version. The property was never a reliable indicator of the selector that could be used to obtain the set of elements currently contained in the jQuery set where it was a property, since subsequent traversal methods may have changed the set. Plugins that need to use a selector string within their plugin can require it as a parameter of the method. For example, a \"foo\" plugin could be written as <code>$.fn.foo = function( selector, options ) { /* plugin code goes here */ };</code>, and the person using the plugin would write <code>$( \"div.bar\" ).foo( \"div.bar\", {dog: \"bark\"} );</code> with the <code>\"div.bar\"</code> selector repeated as the first argument of <code>.foo()</code>.</p> </div> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/selector\" class=\"_attribution-link\">https://api.jquery.com/selector</a>\n  </p>\n</div>\n","size":"<h1 class=\"entry-title\">.size()</h1> <div class=\"entry-content\"> <article id=\"size1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.size()</span><span class=\"returns\">Returns: <a href=\"types#Integer\">Integer</a></span><span class=\"version-details\">version deprecated: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Return the number of elements in the jQuery object.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"size\" href=\"#size\">.size()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.size()</code> method is deprecated as of jQuery 1.8. Use the <code><a href=\"length\">.length</a></code> property instead.</p> <p>The <code>.size()</code> method is functionally equivalent to the <code><a href=\"length\">.length</a></code> property; however, <strong>the <code>.length</code> property is preferred</strong> because it does not have the overhead of a function call.</p> <p>Given a simple unordered list on the page:</p> <pre class=\"syntaxhighlighter xml\">&lt;ul&gt;\n  &lt;li&gt;foo&lt;/li&gt;\n  &lt;li&gt;bar&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>Both <code>.size()</code> and <code>.length</code> identify the number of items:</p> <pre class=\"syntaxhighlighter javascript\">alert( \"Size: \" + $( \"li\" ).size() );\nalert( \"Size: \" + $( \"li\" ).length );</pre> <p>This results in two alerts:</p> <p> <samp>Size: 2</samp> </p> <p> <samp>Size: 2</samp> </p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Count the divs. Click to add more.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;size demo&lt;/title&gt;\n  &lt;style&gt;\n  body {\n    cursor: pointer;\n    min-height: 100px;\n  }\n  div {\n    width: 50px;\n    height: 30px;\n    margin: 5px;\n    float: left;\n    background: blue;\n  }\n  span {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;span&gt;&lt;/span&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( document.body )\n  .click(function() {\n    $( this ).append( $( \"&lt;div&gt;\" ) );\n    var n = $( \"div\" ).size();\n    $( \"span\" ).text( \"There are \" + n + \" divs. Click to add more.\" );\n  })\n \n  // Trigger the click to start\n  .click();\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/size\" class=\"_attribution-link\">https://api.jquery.com/size</a>\n  </p>\n</div>\n","serializearray":"<h1 class=\"entry-title\">.serializeArray()</h1> <div class=\"entry-content\"> <article id=\"serializeArray1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.serializeArray()</span><span class=\"returns\">Returns: <a href=\"types#Array\">Array</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Encode a set of form elements as an array of names and values.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2/\">1.2</a></span><a id=\"serializeArray\" href=\"#serializeArray\">.serializeArray()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.serializeArray()</code> method creates a JavaScript array of objects, ready to be encoded as a JSON string. It operates on a jQuery collection of <code>form</code>s and/or form controls. The controls can be of several types:</p> <pre class=\"syntaxhighlighter xml\">&lt;form&gt;\n  &lt;div&gt;&lt;input type=\"text\" name=\"a\" value=\"1\" id=\"a\"&gt;&lt;/div&gt;\n  &lt;div&gt;&lt;input type=\"text\" name=\"b\" value=\"2\" id=\"b\"&gt;&lt;/div&gt;\n  &lt;div&gt;&lt;input type=\"hidden\" name=\"c\" value=\"3\" id=\"c\"&gt;&lt;/div&gt;\n  &lt;div&gt;\n    &lt;textarea name=\"d\" rows=\"8\" cols=\"40\"&gt;4&lt;/textarea&gt;\n  &lt;/div&gt;\n  &lt;div&gt;&lt;select name=\"e\"&gt;\n    &lt;option value=\"5\" selected=\"selected\"&gt;5&lt;/option&gt;\n    &lt;option value=\"6\"&gt;6&lt;/option&gt;\n    &lt;option value=\"7\"&gt;7&lt;/option&gt;\n  &lt;/select&gt;&lt;/div&gt;\n  &lt;div&gt;\n    &lt;input type=\"checkbox\" name=\"f\" value=\"8\" id=\"f\"&gt;\n  &lt;/div&gt;\n  &lt;div&gt;\n    &lt;input type=\"submit\" name=\"g\" value=\"Submit\" id=\"g\"&gt;\n  &lt;/div&gt;\n&lt;/form&gt;</pre> <p>The <code>.serializeArray()</code> method uses the standard W3C rules for <a href=\"http://www.w3.org/TR/html401/interact/forms.html#h-17.13.2\">successful controls</a> to determine which elements it should include; in particular the element cannot be disabled and must contain a <code>name</code> attribute. No submit button value is serialized since the form was not submitted using a button. Data from file select elements is not serialized.</p> <p>This method can act on a jQuery object that has selected individual form controls, such as <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, and <code>&lt;select&gt;</code>. However, it is typically easier to select the <code>&lt;form&gt;</code> element itself for serialization:</p> <pre class=\"syntaxhighlighter javascript\">$( \"form\" ).submit(function( event ) {\n  console.log( $( this ).serializeArray() );\n  event.preventDefault();\n});</pre> <p>This produces the following data structure (provided that the browser supports <code>console.log</code>):</p> <pre class=\"syntaxhighlighter javascript\">[\n  {\n    name: \"a\",\n    value: \"1\"\n  },\n  {\n    name: \"b\",\n    value: \"2\"\n  },\n  {\n    name: \"c\",\n    value: \"3\"\n  },\n  {\n    name: \"d\",\n    value: \"4\"\n  },\n  {\n    name: \"e\",\n    value: \"5\"\n  }\n]</pre> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Get the values from a form, iterate through them, and append them to a results display.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;serializeArray demo&lt;/title&gt;\n  &lt;style&gt;\n  body, select {\n    font-size: 14px;\n  }\n  form {\n    margin: 5px;\n  }\n  p {\n    color: red;\n    margin: 5px;\n  }\n  b {\n    color: blue;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;&lt;b&gt;Results:&lt;/b&gt; &lt;span id=\"results\"&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;form&gt;\n  &lt;select name=\"single\"&gt;\n    &lt;option&gt;Single&lt;/option&gt;\n    &lt;option&gt;Single2&lt;/option&gt;\n  &lt;/select&gt;\n  &lt;select name=\"multiple\" multiple=\"multiple\"&gt;\n    &lt;option selected=\"selected\"&gt;Multiple&lt;/option&gt;\n    &lt;option&gt;Multiple2&lt;/option&gt;\n    &lt;option selected=\"selected\"&gt;Multiple3&lt;/option&gt;\n  &lt;/select&gt;\n  &lt;br&gt;\n  &lt;input type=\"checkbox\" name=\"check\" value=\"check1\" id=\"ch1\"&gt;\n  &lt;label for=\"ch1\"&gt;check1&lt;/label&gt;\n  &lt;input type=\"checkbox\" name=\"check\" value=\"check2\" checked=\"checked\" id=\"ch2\"&gt;\n  &lt;label for=\"ch2\"&gt;check2&lt;/label&gt;\n  &lt;input type=\"radio\" name=\"radio\" value=\"radio1\" checked=\"checked\" id=\"r1\"&gt;\n  &lt;label for=\"r1\"&gt;radio1&lt;/label&gt;\n  &lt;input type=\"radio\" name=\"radio\" value=\"radio2\" id=\"r2\"&gt;\n  &lt;label for=\"r2\"&gt;radio2&lt;/label&gt;\n&lt;/form&gt;\n \n&lt;script&gt;\n  function showValues() {\n    var fields = $( \":input\" ).serializeArray();\n    $( \"#results\" ).empty();\n    jQuery.each( fields, function( i, field ) {\n      $( \"#results\" ).append( field.value + \" \" );\n    });\n  }\n \n  $( \":checkbox, :radio\" ).click( showValues );\n  $( \"select\" ).change( showValues );\n  showValues();\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/serializeArray\" class=\"_attribution-link\">https://api.jquery.com/serializeArray</a>\n  </p>\n</div>\n","siblings":"<h1 class=\"entry-title\">.siblings()</h1> <div class=\"entry-content\"> <article id=\"siblings1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.siblings( [selector ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Get the siblings of each element in the set of matched elements, optionally filtered by a selector.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"siblings-selector\" href=\"#siblings-selector\">.siblings( [selector ] )</a> </h4> <ul><li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> </div> <div>A string containing a selector expression to match elements against.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Given a jQuery object that represents a set of DOM elements, the <code>.siblings()</code> method allows us to search through the siblings of these elements in the DOM tree and construct a new jQuery object from the matching elements.</p> <p>The method optionally accepts a selector expression of the same type that we can pass to the <code>$()</code> function. If the selector is supplied, the elements will be filtered by testing whether they match it.</p> <p>Consider a page with a simple list on it:</p> <pre class=\"syntaxhighlighter xml\">&lt;ul&gt;\n  &lt;li&gt;list item 1&lt;/li&gt;\n  &lt;li&gt;list item 2&lt;/li&gt;\n  &lt;li class=\"third-item\"&gt;list item 3&lt;/li&gt;\n  &lt;li&gt;list item 4&lt;/li&gt;\n  &lt;li&gt;list item 5&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>If we begin at the third item, we can find its siblings:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li.third-item\" ).siblings().css( \"background-color\", \"red\" );</pre> <p>The result of this call is a red background behind items 1, 2, 4, and 5. Since we do not supply a selector expression, all of the siblings are part of the object. If we had supplied one, only the matching items among these four would be included.</p> <p>The original element is not included among the siblings, which is important to remember when we wish to find all elements at a particular level of the DOM tree. However, if the original collection contains more than one element, they might be mutual siblings and will both be found. If you need an exclusive list of siblings, use <code>$collection.siblings().not($collection)</code>.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Find the unique siblings of all yellow li elements in the 3 lists (including other yellow li elements if appropriate).</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;siblings demo&lt;/title&gt;\n  &lt;style&gt;\n  ul {\n    float: left;\n    margin: 5px;\n    font-size: 16px;\n    font-weight: bold;\n  }\n  p {\n    color: blue;\n    margin: 10px 20px;\n    font-size: 16px;\n    padding: 5px;\n    font-weight: bolder;\n  }\n  .hilite {\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;ul&gt;\n  &lt;li&gt;One&lt;/li&gt;\n  &lt;li&gt;Two&lt;/li&gt;\n  &lt;li class=\"hilite\"&gt;Three&lt;/li&gt;\n  &lt;li&gt;Four&lt;/li&gt;\n&lt;/ul&gt;\n \n&lt;ul&gt;\n  &lt;li&gt;Five&lt;/li&gt;\n  &lt;li&gt;Six&lt;/li&gt;\n  &lt;li&gt;Seven&lt;/li&gt;\n&lt;/ul&gt;\n \n&lt;ul&gt;\n  &lt;li&gt;Eight&lt;/li&gt;\n  &lt;li class=\"hilite\"&gt;Nine&lt;/li&gt;\n  &lt;li&gt;Ten&lt;/li&gt;\n  &lt;li class=\"hilite\"&gt;Eleven&lt;/li&gt;\n&lt;/ul&gt;\n \n&lt;p&gt;Unique siblings: &lt;b&gt;&lt;/b&gt;&lt;/p&gt;\n \n&lt;script&gt;\nvar len = $( \".hilite\" ).siblings()\n  .css( \"color\", \"red\" )\n  .length;\n$( \"b\" ).text( len );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Find all siblings with a class \"selected\" of each div.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;siblings demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;&lt;span&gt;Hello&lt;/span&gt;&lt;/div&gt;\n&lt;p class=\"selected\"&gt;Hello Again&lt;/p&gt;\n&lt;p&gt;And Again&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).siblings( \".selected\" ).css( \"background\", \"yellow\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/siblings\" class=\"_attribution-link\">https://api.jquery.com/siblings</a>\n  </p>\n</div>\n","slidedown":"<h1 class=\"entry-title\">.slideDown()</h1> <div class=\"entry-content\"> <article id=\"slideDown1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.slideDown( [duration ] [, complete ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Display the matched elements with a sliding motion.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"slideDown-duration-complete\" href=\"#slideDown-duration-complete\">.slideDown( [duration ] [, complete ] )</a> </h4> <ul> <li> <div> <strong>duration</strong> (default: <code>400</code>)</div> <div>Type: <a href=\"types#Number\">Number</a> or <a href=\"types#String\">String</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function to call once the animation is complete, called once per matched element.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"slideDown-options\" href=\"#slideDown-options\">.slideDown( options )</a> </h4> <ul><li> <div><strong>options</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>A map of additional options to pass to the method.</div> <ul> <li> <div> <strong>duration</strong> (default: <code>400</code>)</div> <div>Type: <a href=\"types#Number\">Number</a> or <a href=\"types#String\">String</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div> <strong>easing</strong> (default: <code>swing</code>)</div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string indicating which easing function to use for the transition.</div> </li> <li> <div> <strong>queue</strong> (default: <code>true</code>)</div> <div>Type: <a href=\"types#Boolean\">Boolean</a> or <a href=\"types#String\">String</a> </div> <div>A Boolean indicating whether to place the animation in the effects queue. If false, the animation will begin immediately. <strong>As of jQuery 1.7</strong>, the queue option can also accept a string, in which case the animation is added to the queue represented by that string. When a custom queue name is used the animation does not automatically start; you must call <code>.dequeue(\"queuename\")</code> to start it.</div> </li> <li> <div><strong>specialEasing</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a>)</span> </div> </li> <li> <div><strong>step</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Number\">Number</a> now, <a href=\"types#Tween\">Tween</a> tween )</div> <div>A function to be called for each animated property of each animated element. This function provides an opportunity to modify the Tween object to change the value of the property before it is set.</div> </li> <li> <div><strong>progress</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Number\">Number</a> progress, <a href=\"types#Number\">Number</a> remainingMs )</div> <div>A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function that is called once the animation on an element is complete.</div> </li> <li> <div><strong>start</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation )</div> <div>A function to call when the animation on an element begins.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>done</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Boolean\">Boolean</a> jumpedToEnd )</div> <div>A function to be called when the animation on an element completes (its Promise object is resolved).<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>fail</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Boolean\">Boolean</a> jumpedToEnd )</div> <div>A function to be called when the animation on an element fails to complete (its Promise object is rejected).<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>always</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Boolean\">Boolean</a> jumpedToEnd )</div> <div>A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected).<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> </ul> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"slideDown-duration-easing-complete\" href=\"#slideDown-duration-easing-complete\">.slideDown( [duration ] [, easing ] [, complete ] )</a> </h4> <ul> <li> <div> <strong>duration</strong> (default: <code>400</code>)</div> <div>Type: <a href=\"types#Number\">Number</a> or <a href=\"types#String\">String</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div> <strong>easing</strong> (default: <code>swing</code>)</div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string indicating which easing function to use for the transition.</div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function to call once the animation is complete, called once per matched element.</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.slideDown()</code> method animates the height of the matched elements. This causes lower parts of the page to slide down, making way for the revealed items.</p> <p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of <code>200</code> and <code>600</code> milliseconds, respectively. If any other string is supplied, or if the <code>duration</code> parameter is omitted, the default duration of <code>400</code> milliseconds is used.</p> <p>We can animate any element, such as a simple image:</p> <pre class=\"syntaxhighlighter xml\">&lt;div id=\"clickme\"&gt;\n  Click here\n&lt;/div&gt;\n&lt;img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\"&gt;</pre> <p>With the element initially hidden, we can show it slowly:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#clickme\" ).click(function() {\n  $( \"#book\" ).slideDown( \"slow\", function() {\n    // Animation complete.\n  });\n});</pre> <figure> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_17.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_18.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_19.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_20.png\" alt=\"\"> <figcaption>Figure 1 - Illustration of the <code>slideDown()</code> effect</figcaption> </figure> <h4 id=\"easing\">Easing</h4> <p><strong>As of jQuery 1.4.3</strong>, an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called <code>swing</code>, and one that progresses at a constant pace, called <code>linear</code>. More easing functions are available with the use of plug-ins, most notably the <a href=\"http://jqueryui.com\">jQuery UI suite</a>.</p> <h4 id=\"callback-function\">Callback Function</h4> <p>If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but <code>this</code> is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.</p> <p><strong>As of jQuery 1.6</strong>, the <code><a href=\"promise\">.promise()</a></code> method can be used in conjunction with the <code><a href=\"deferred.done\">deferred.done()</a></code> method to execute a single callback for the animation as a whole when <em>all</em> matching elements have completed their animations ( See the <a href=\"promise#example-1\">example for .promise()</a> ). </p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> All jQuery effects, including <code>.slideDown()</code>, can be turned off globally by setting <code>jQuery.fx.off = true</code>, which effectively sets the duration to 0. For more information, see <a href=\"jquery.fx.off\">jQuery.fx.off</a>. </li> <li> If <code>.slideDown()</code> is called on an unordered list (<code>&lt;ul&gt;</code>) and its <code>&lt;li&gt;</code> elements have position (relative, absolute, or fixed), the effect may not work properly in IE6 through at least IE9 unless the <code>&lt;ul&gt;</code> has \"layout.\" To remedy the problem, add the <code>position: relative;</code> and <code>zoom: 1;</code> CSS declarations to the <code>ul</code>. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Animates all divs to slide down and show themselves over 600 milliseconds.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;slideDown demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    background: #de9a44;\n    margin: 3px;\n    width: 80px;\n    height: 40px;\n    display: none;\n    float: left;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \nClick me!\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( document.body ).click(function () {\n  if ( $( \"div:first\" ).is( \":hidden\" ) ) {\n    $( \"div\" ).slideDown( \"slow\" );\n  } else {\n    $( \"div\" ).hide();\n  }\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Animates all inputs to slide down, completing the animation within 1000 milliseconds. Once the animation is done, the input look is changed especially if it is the middle input which gets the focus.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;slideDown demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    background: #cfd;\n    margin: 3px;\n    width: 50px;\n    text-align: center;\n    float: left;\n    cursor: pointer;\n    border: 2px outset black;\n    font-weight: bolder;\n  }\n  input {\n    display: none;\n    width: 120px;\n    float: left;\n    margin: 10px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;Push!&lt;/div&gt;\n&lt;input type=\"text\"&gt;\n&lt;input type=\"text\" class=\"middle\"&gt;\n&lt;input type=\"text\"&gt;\n \n&lt;script&gt;\n$( \"div\" ).click(function() {\n  $( this ).css({\n    borderStyle: \"inset\",\n    cursor: \"wait\"\n  });\n  $( \"input\" ).slideDown( 1000, function() {\n    $( this )\n      .css( \"border\", \"2px red inset\" )\n      .filter( \".middle\" )\n        .css( \"background\", \"yellow\" )\n        .focus();\n    $( \"div\" ).css( \"visibility\", \"hidden\" );\n  });\n});\n \n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/slideDown\" class=\"_attribution-link\">https://api.jquery.com/slideDown</a>\n  </p>\n</div>\n","slice":"<h1 class=\"entry-title\">.slice()</h1> <div class=\"entry-content\"> <article id=\"slice1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.slice( start [, end ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Reduce the set of matched elements to a subset specified by a range of indices.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.1.4/\">1.1.4</a></span><a id=\"slice-start-end\" href=\"#slice-start-end\">.slice( start [, end ] )</a> </h4> <ul> <li> <div><strong>start</strong></div> <div>Type: <a href=\"types#Integer\">Integer</a> </div> <div>An integer indicating the 0-based position at which the elements begin to be selected. If negative, it indicates an offset from the end of the set.</div> </li> <li> <div><strong>end</strong></div> <div>Type: <a href=\"types#Integer\">Integer</a> </div> <div>An integer indicating the 0-based position at which the elements stop being selected. If negative, it indicates an offset from the end of the set. If omitted, the range continues until the end of the set.</div> </li> </ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Given a jQuery object that represents a set of DOM elements, the <code>.slice()</code> method constructs a new jQuery object containing a subset of the elements specified by the <code>start</code> and, optionally, <code>end</code> argument. The supplied <code>start</code> index identifies the position of one of the elements in the set; if <code>end</code> is omitted, all elements after this one will be included in the result.</p> <p>Consider a page with a simple list on it:</p> <pre class=\"syntaxhighlighter xml\">&lt;ul&gt;\n  &lt;li&gt;list item 1&lt;/li&gt;\n  &lt;li&gt;list item 2&lt;/li&gt;\n  &lt;li&gt;list item 3&lt;/li&gt;\n  &lt;li&gt;list item 4&lt;/li&gt;\n  &lt;li&gt;list item 5&lt;/li&gt;\n&lt;/ul&gt;</pre> <p>We can apply this method to the set of list items:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li\" ).slice( 2 ).css( \"background-color\", \"red\" );</pre> <p>The result of this call is a red background for items 3, 4, and 5. Note that the supplied index is zero-based, and refers to the position of elements within the jQuery object, not within the DOM tree.</p> <p>The end parameter allows us to limit the selected range even further. For example:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li\" ).slice( 2, 4 ).css( \"background-color\", \"red\" );</pre> <p>Now only items 3 and 4 are selected. The index is once again zero-based; the range extends up to but not including the specified index.</p> <h4>Negative Indices</h4> <p>The jQuery <code>.slice()</code> method is patterned after the JavaScript .slice() method for arrays. One of the features that it mimics is the ability for negative numbers to be passed as either the <code>start</code> or <code>end</code> parameter. If a negative number is provided, this indicates a position starting from the end of the set, rather than the beginning. For example:</p> <pre class=\"syntaxhighlighter javascript\">$( \"li\" ).slice( -2, -1 ).css( \"background-color\", \"red\" );</pre> <p>This time only list item 4 is turned red, since it is the only item in the range between two from the end (<code>-2</code>) and one from the end (<code>-1</code>).</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Turns divs yellow based on a random slice.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;slice demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    width: 40px;\n    height: 40px;\n    margin: 10px;\n    float: left;\n    border: 2px solid blue;\n  }\n  span {\n    color: red;\n    font-weight: bold;\n  }\n  button {\n    margin: 5px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;&lt;button&gt;Turn slice yellow&lt;/button&gt;\n  &lt;span&gt;Click the button!&lt;/span&gt;&lt;/p&gt;\n  &lt;div&gt;&lt;/div&gt;\n  &lt;div&gt;&lt;/div&gt;\n  &lt;div&gt;&lt;/div&gt;\n  &lt;div&gt;&lt;/div&gt;\n  &lt;div&gt;&lt;/div&gt;\n  &lt;div&gt;&lt;/div&gt;\n  &lt;div&gt;&lt;/div&gt;\n  &lt;div&gt;&lt;/div&gt;\n  &lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\nfunction colorEm() {\n  var $div = $( \"div\" );\n  var start = Math.floor( Math.random() * $div.length );\n  var end = Math.floor( Math.random() * ( $div.length - start ) ) +\n    start + 1;\n  if ( end === $div.length ) {\n    end = undefined;\n  }\n  $div.css( \"background\", \"\" );\n  if ( end ) {\n    $div.slice( start, end ).css( \"background\", \"yellow\" );\n  } else {\n    $div.slice( start ).css( \"background\", \"yellow\" );\n  }\n  $( \"span\" ).text( \"$( 'div' ).slice( \" + start +\n    (end ? \", \" + end : \"\") +\n    \").css( 'background', 'yellow' );\" );\n}\n \n$( \"button\" ).click( colorEm );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Selects all paragraphs, then slices the selection to include only the first element.</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).slice( 0, 1 ).wrapInner( \"&lt;b&gt;&lt;/b&gt;\" );</pre> </div> <div class=\"entry-example\" id=\"example-2\"> <p>Selects all paragraphs, then slices the selection to include only the first and second element.</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).slice( 0, 2 ).wrapInner( \"&lt;b&gt;&lt;/b&gt;\" );</pre> </div> <div class=\"entry-example\" id=\"example-3\"> <p>Selects all paragraphs, then slices the selection to include only the second element.</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).slice( 1, 2 ).wrapInner( \"&lt;b&gt;&lt;/b&gt;\" );</pre> </div> <div class=\"entry-example\" id=\"example-4\"> <p>Selects all paragraphs, then slices the selection to include only the second and third element.</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).slice( 1 ).wrapInner( \"&lt;b&gt;&lt;/b&gt;\" );</pre> </div> <div class=\"entry-example\" id=\"example-5\"> <p>Selects all paragraphs, then slices the selection to include only the third element.</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).slice( -1 ).wrapInner( \"&lt;b&gt;&lt;/b&gt;\" );</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/slice\" class=\"_attribution-link\">https://api.jquery.com/slice</a>\n  </p>\n</div>\n","slidetoggle":"<h1 class=\"entry-title\">.slideToggle()</h1> <div class=\"entry-content\"> <article id=\"slideToggle1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.slideToggle( [duration ] [, complete ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Display or hide the matched elements with a sliding motion.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"slideToggle-duration-complete\" href=\"#slideToggle-duration-complete\">.slideToggle( [duration ] [, complete ] )</a> </h4> <ul> <li> <div> <strong>duration</strong> (default: <code>400</code>)</div> <div>Type: <a href=\"types#Number\">Number</a> or <a href=\"types#String\">String</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function to call once the animation is complete, called once per matched element.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"slideToggle-options\" href=\"#slideToggle-options\">.slideToggle( options )</a> </h4> <ul><li> <div><strong>options</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>A map of additional options to pass to the method.</div> <ul> <li> <div> <strong>duration</strong> (default: <code>400</code>)</div> <div>Type: <a href=\"types#Number\">Number</a> or <a href=\"types#String\">String</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div> <strong>easing</strong> (default: <code>swing</code>)</div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string indicating which easing function to use for the transition.</div> </li> <li> <div> <strong>queue</strong> (default: <code>true</code>)</div> <div>Type: <a href=\"types#Boolean\">Boolean</a> or <a href=\"types#String\">String</a> </div> <div>A Boolean indicating whether to place the animation in the effects queue. If false, the animation will begin immediately. <strong>As of jQuery 1.7</strong>, the queue option can also accept a string, in which case the animation is added to the queue represented by that string. When a custom queue name is used the animation does not automatically start; you must call <code>.dequeue(\"queuename\")</code> to start it.</div> </li> <li> <div><strong>specialEasing</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a>)</span> </div> </li> <li> <div><strong>step</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Number\">Number</a> now, <a href=\"types#Tween\">Tween</a> tween )</div> <div>A function to be called for each animated property of each animated element. This function provides an opportunity to modify the Tween object to change the value of the property before it is set.</div> </li> <li> <div><strong>progress</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Number\">Number</a> progress, <a href=\"types#Number\">Number</a> remainingMs )</div> <div>A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function that is called once the animation on an element is complete.</div> </li> <li> <div><strong>start</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation )</div> <div>A function to call when the animation on an element begins.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>done</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Boolean\">Boolean</a> jumpedToEnd )</div> <div>A function to be called when the animation on an element completes (its Promise object is resolved).<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>fail</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Boolean\">Boolean</a> jumpedToEnd )</div> <div>A function to be called when the animation on an element fails to complete (its Promise object is rejected).<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>always</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Boolean\">Boolean</a> jumpedToEnd )</div> <div>A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected).<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> </ul> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"slideToggle-duration-easing-complete\" href=\"#slideToggle-duration-easing-complete\">.slideToggle( [duration ] [, easing ] [, complete ] )</a> </h4> <ul> <li> <div> <strong>duration</strong> (default: <code>400</code>)</div> <div>Type: <a href=\"types#Number\">Number</a> or <a href=\"types#String\">String</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div> <strong>easing</strong> (default: <code>swing</code>)</div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string indicating which easing function to use for the transition.</div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function to call once the animation is complete, called once per matched element.</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.slideToggle()</code> method animates the height of the matched elements. This causes lower parts of the page to slide up or down, appearing to reveal or conceal the items. If the element is initially displayed, it will be hidden; if hidden, it will be shown. The <code>display</code> property is saved and restored as needed. If an element has a <code>display</code> value of <code>inline</code>, then is hidden and shown, it will once again be displayed <code>inline</code>. When the height reaches 0 after a hiding animation, the <code>display</code> style property is set to <code>none</code> to ensure that the element no longer affects the layout of the page.</p> <p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of <code>200</code> and <code>600</code> milliseconds, respectively.</p> <p>We can animate any element, such as a simple image:</p> <pre class=\"syntaxhighlighter xml\">&lt;div id=\"clickme\"&gt;\n  Click here\n&lt;/div&gt;\n&lt;img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\"&gt;</pre> <p>We will cause <code>.slideToggle()</code> to be called when another element is clicked:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#clickme\" ).click(function() {\n  $( \"#book\" ).slideToggle( \"slow\", function() {\n    // Animation complete.\n  });\n});</pre> <p>With the element initially shown, we can hide it slowly with the first click:</p> <figure> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_25.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_26.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_27.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_28.png\" alt=\"\"> <figcaption>Figure 1 - Illustration of the <code>slideToggle()</code> effect when hiding the image</figcaption> </figure> <p>A second click will show the element once again:</p> <figure> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_29.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_30.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_31.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_32.png\" alt=\"\"> <figcaption>Figure 2 - Illustration of the <code>slideToggle()</code> effect when showing the image</figcaption> </figure> <h4 id=\"easing\">Easing</h4> <p><strong>As of jQuery 1.4.3</strong>, an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called <code>swing</code>, and one that progresses at a constant pace, called <code>linear</code>. More easing functions are available with the use of plug-ins, most notably the <a href=\"http://jqueryui.com\">jQuery UI suite</a>.</p> <h4 id=\"callback-function\">Callback Function</h4> <p>If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but <code>this</code> is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.</p> <p><strong>As of jQuery 1.6</strong>, the <code><a href=\"promise\">.promise()</a></code> method can be used in conjunction with the <code><a href=\"deferred.done\">deferred.done()</a></code> method to execute a single callback for the animation as a whole when <em>all</em> matching elements have completed their animations ( See the <a href=\"promise#example-1\">example for .promise()</a> ). </p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> All jQuery effects, including <code>.slideToggle()</code>, can be turned off globally by setting <code>jQuery.fx.off = true</code>, which effectively sets the duration to 0. For more information, see <a href=\"jquery.fx.off\">jQuery.fx.off</a>. </li> <li> If <code>.slideDown()</code> is called on an unordered list (<code>&lt;ul&gt;</code>) and its <code>&lt;li&gt;</code> elements have position (relative, absolute, or fixed), the effect may not work properly in IE6 through at least IE9 unless the <code>&lt;ul&gt;</code> has \"layout.\" To remedy the problem, add the <code>position: relative;</code> and <code>zoom: 1;</code> CSS declarations to the <code>ul</code>. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Animates all paragraphs to slide up or down, completing the animation within 600 milliseconds.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;slideToggle demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    width: 400px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button&gt;Toggle&lt;/button&gt;\n&lt;p&gt;\n  This is the paragraph to end all paragraphs.  You\n  should feel &lt;em&gt;lucky&lt;/em&gt; to have seen such a paragraph in\n  your life.  Congratulations!\n&lt;/p&gt;\n \n&lt;script&gt;\n$( \"button\" ).click(function() {\n  $( \"p\" ).slideToggle( \"slow\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Animates divs between dividers with a toggle that makes some appear and some disappear.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;slideToggle demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    background: #b977d1;\n    margin: 3px;\n    width: 60px;\n    height: 60px;\n    float: left;\n  }\n  div.still {\n    background: #345;\n    width: 5px;\n  }\n  div.hider {\n    display: none;\n  }\n  span {\n    color: red;\n  }\n  p {\n    clear: left;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;&lt;/div&gt;\n&lt;div class=\"still\"&gt;&lt;/div&gt;\n&lt;div style=\"display:none;\"&gt;\n&lt;/div&gt;&lt;div class=\"still\"&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div class=\"still\"&gt;&lt;/div&gt;\n&lt;div class=\"hider\"&gt;&lt;/div&gt;\n&lt;div class=\"still\"&gt;&lt;/div&gt;\n&lt;div class=\"hider\"&gt;&lt;/div&gt;\n&lt;div class=\"still\"&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;p&gt;&lt;button id=\"aa\"&gt;Toggle&lt;/button&gt; There have been &lt;span&gt;0&lt;/span&gt; toggled divs.&lt;/p&gt;\n \n&lt;script&gt;\n$( \"#aa\" ).click(function() {\n  $( \"div:not(.still)\" ).slideToggle( \"slow\", function() {\n    var n = parseInt( $( \"span\" ).text(), 10 );\n    $( \"span\" ).text( n + 1 );\n  });\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/slideToggle\" class=\"_attribution-link\">https://api.jquery.com/slideToggle</a>\n  </p>\n</div>\n","stop":"<h1 class=\"entry-title\">.stop()</h1> <div class=\"entry-content\"> <article id=\"stop1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.stop( [clearQueue ] [, jumpToEnd ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Stop the currently-running animation on the matched elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2/\">1.2</a></span><a id=\"stop-clearQueue-jumpToEnd\" href=\"#stop-clearQueue-jumpToEnd\">.stop( [clearQueue ] [, jumpToEnd ] )</a> </h4> <ul> <li> <div> <strong>clearQueue</strong> (default: <code>false</code>)</div> <div>Type: <a href=\"types#Boolean\">Boolean</a> </div> <div>A Boolean indicating whether to remove queued animation as well. Defaults to <code>false</code>.</div> </li> <li> <div> <strong>jumpToEnd</strong> (default: <code>false</code>)</div> <div>Type: <a href=\"types#Boolean\">Boolean</a> </div> <div>A Boolean indicating whether to complete the current animation immediately. Defaults to <code>false</code>.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.7/\">1.7</a></span><a id=\"stop-queue-clearQueue-jumpToEnd\" href=\"#stop-queue-clearQueue-jumpToEnd\">.stop( [queue ] [, clearQueue ] [, jumpToEnd ] )</a> </h4> <ul> <li> <div> <strong>queue</strong> (default: <code>false</code>)</div> <div>Type: <a href=\"types#String\">String</a> </div> <div>The name of the queue in which to stop animations.</div> </li> <li> <div><strong>clearQueue</strong></div> <div>Type: <a href=\"types#Boolean\">Boolean</a> </div> <div>A Boolean indicating whether to remove queued animation as well. Defaults to <code>false</code>.</div> </li> <li> <div> <strong>jumpToEnd</strong> (default: <code>false</code>)</div> <div>Type: <a href=\"types#Boolean\">Boolean</a> </div> <div>A Boolean indicating whether to complete the current animation immediately. Defaults to <code>false</code>.</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>When <code>.stop()</code> is called on an element, the currently-running animation (if any) is immediately stopped. If, for instance, an element is being hidden with <code>.slideUp()</code> when <code>.stop()</code> is called, the element will now still be displayed, but will be a fraction of its previous height. Callback functions are not called.</p> <p>If more than one animation method is called on the same element, the later animations are placed in the effects queue for the element. These animations will not begin until the first one completes. When <code>.stop()</code> is called, the next animation in the queue begins immediately. If the <code>clearQueue</code> parameter is provided with a value of <code>true</code>, then the rest of the animations in the queue are removed and never run.</p> <p>If the <code>jumpToEnd</code> argument is provided with a value of <code>true</code>, the current animation stops, but the element is immediately given its target values for each CSS property. In our above <code>.slideUp()</code> example, the element would be immediately hidden. The callback function is then immediately called, if provided.</p> <p><strong>As of jQuery 1.7</strong>, if the first argument is provided as a string, only the animations in the queue represented by that string will be stopped.</p> <p>The usefulness of the <code>.stop()</code> method is evident when we need to animate an element on <code>mouseenter</code> and <code>mouseleave</code>:</p> <pre class=\"syntaxhighlighter xml\">&lt;div id=\"hoverme\"&gt;\n  Hover me\n  &lt;img id=\"hoverme\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\"&gt;\n&lt;/div&gt;</pre> <p>We can create a nice fade effect without the common problem of multiple queued animations by adding <code>.stop(true, true)</code> to the chain:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#hoverme-stop-2\" ).hover(function() {\n  $( this ).find( \"img\" ).stop( true, true ).fadeOut();\n}, function() {\n  $( this ).find( \"img\" ).stop( true, true ).fadeIn();\n});</pre> <h2>Toggling Animations</h2> <p><strong>As of jQuery 1.7,</strong> stopping a toggled animation prematurely with <code>.stop()</code> will trigger jQuery's internal effects tracking. In previous versions, calling the <code>.stop()</code> method before a toggled animation was completed would cause the animation to lose track of its state (if jumpToEnd was false). Any subsequent animations would start at a new \"half-way\" state, sometimes resulting in the element disappearing. To observe the new behavior, see the final example below.</p> <div class=\"warning\"> <p>Animations may be stopped globally by setting the property <code>$.fx.off</code> to <code>true</code>. When this is done, all animation methods will immediately set elements to their final state when called, rather than displaying an effect.</p> </div> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Click the Go button once to start the animation, then click the STOP button to stop it where it's currently positioned. Another option is to click several buttons to queue them up and see that stop just kills the currently playing one.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;stop demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    position: absolute;\n    background-color: #abc;\n    left: 0px;\n    top: 30px;\n    width: 60px;\n    height: 60px;\n    margin: 5px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button id=\"go\"&gt;Go&lt;/button&gt;\n&lt;button id=\"stop\"&gt;STOP!&lt;/button&gt;\n&lt;button id=\"back\"&gt;Back&lt;/button&gt;\n&lt;div class=\"block\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\n// Start animation\n$( \"#go\" ).click(function() {\n  $( \".block\" ).animate({ left: \"+=100px\" }, 2000 );\n});\n \n// Stop animation when button is clicked\n$( \"#stop\" ).click(function() {\n  $( \".block\" ).stop();\n});\n \n// Start animation in the opposite direction\n$( \"#back\" ).click(function() {\n  $( \".block\" ).animate({ left: \"-=100px\" }, 2000 );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Click the slideToggle button to start the animation, then click again before the animation is completed. The animation will toggle the other direction from the saved starting point.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;stop demo&lt;/title&gt;\n  &lt;style&gt;\n  .block {\n    background-color: #abc;\n    border: 2px solid black;\n    width: 200px;\n    height: 80px;\n    margin: 10px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button id=\"toggle\"&gt;slideToggle&lt;/button&gt;\n&lt;div class=\"block\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar $block = $( \".block\" );\n \n// Toggle a sliding animation animation\n$( \"#toggle\" ).on( \"click\", function() {\n  $block.stop().slideToggle( 1000 );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/stop\" class=\"_attribution-link\">https://api.jquery.com/stop</a>\n  </p>\n</div>\n","slideup":"<h1 class=\"entry-title\">.slideUp()</h1> <div class=\"entry-content\"> <article id=\"slideUp1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.slideUp( [duration ] [, complete ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Hide the matched elements with a sliding motion.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"slideUp-duration-complete\" href=\"#slideUp-duration-complete\">.slideUp( [duration ] [, complete ] )</a> </h4> <ul> <li> <div> <strong>duration</strong> (default: <code>400</code>)</div> <div>Type: <a href=\"types#Number\">Number</a> or <a href=\"types#String\">String</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function to call once the animation is complete, called once per matched element.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"slideUp-options\" href=\"#slideUp-options\">.slideUp( options )</a> </h4> <ul><li> <div><strong>options</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>A map of additional options to pass to the method.</div> <ul> <li> <div> <strong>duration</strong> (default: <code>400</code>)</div> <div>Type: <a href=\"types#Number\">Number</a> or <a href=\"types#String\">String</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div> <strong>easing</strong> (default: <code>swing</code>)</div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string indicating which easing function to use for the transition.</div> </li> <li> <div> <strong>queue</strong> (default: <code>true</code>)</div> <div>Type: <a href=\"types#Boolean\">Boolean</a> or <a href=\"types#String\">String</a> </div> <div>A Boolean indicating whether to place the animation in the effects queue. If false, the animation will begin immediately. <strong>As of jQuery 1.7</strong>, the queue option can also accept a string, in which case the animation is added to the queue represented by that string. When a custom queue name is used the animation does not automatically start; you must call <code>.dequeue(\"queuename\")</code> to start it.</div> </li> <li> <div><strong>specialEasing</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a>)</span> </div> </li> <li> <div><strong>step</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Number\">Number</a> now, <a href=\"types#Tween\">Tween</a> tween )</div> <div>A function to be called for each animated property of each animated element. This function provides an opportunity to modify the Tween object to change the value of the property before it is set.</div> </li> <li> <div><strong>progress</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Number\">Number</a> progress, <a href=\"types#Number\">Number</a> remainingMs )</div> <div>A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function that is called once the animation on an element is complete.</div> </li> <li> <div><strong>start</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation )</div> <div>A function to call when the animation on an element begins.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>done</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Boolean\">Boolean</a> jumpedToEnd )</div> <div>A function to be called when the animation on an element completes (its Promise object is resolved).<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>fail</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Boolean\">Boolean</a> jumpedToEnd )</div> <div>A function to be called when the animation on an element fails to complete (its Promise object is rejected).<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>always</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Boolean\">Boolean</a> jumpedToEnd )</div> <div>A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected).<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> </ul> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"slideUp-duration-easing-complete\" href=\"#slideUp-duration-easing-complete\">.slideUp( [duration ] [, easing ] [, complete ] )</a> </h4> <ul> <li> <div> <strong>duration</strong> (default: <code>400</code>)</div> <div>Type: <a href=\"types#Number\">Number</a> or <a href=\"types#String\">String</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div> <strong>easing</strong> (default: <code>swing</code>)</div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string indicating which easing function to use for the transition.</div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function to call once the animation is complete, called once per matched element.</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.slideUp()</code> method animates the height of the matched elements. This causes lower parts of the page to slide up, appearing to conceal the items. Once the height reaches 0 (or, if set, to whatever the CSS min-height property is), the <code>display</code> style property is set to <code>none</code> to ensure that the element no longer affects the layout of the page.</p> <p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of <code>200</code> and <code>600</code> milliseconds, respectively. If any other string is supplied, or if the <code>duration</code> parameter is omitted, the default duration of <code>400</code> milliseconds is used.</p> <p>We can animate any element, such as a simple image:</p> <pre class=\"syntaxhighlighter xml\">&lt;div id=\"clickme\"&gt;\n  Click here\n&lt;/div&gt;\n&lt;img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\"&gt;</pre> <p>With the element initially shown, we can hide it slowly:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#clickme\" ).click(function() {\n  $( \"#book\" ).slideUp( \"slow\", function() {\n    // Animation complete.\n  });\n});</pre> <figure> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_21.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_22.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_23.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_24.png\" alt=\"\"> <figcaption>Figure 1 - Illustration of the <code>slideUp()</code> effect</figcaption> </figure> <h4 id=\"easing\">Easing</h4> <p><strong>As of jQuery 1.4.3</strong>, an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called <code>swing</code>, and one that progresses at a constant pace, called <code>linear</code>. More easing functions are available with the use of plug-ins, most notably the <a href=\"http://jqueryui.com\">jQuery UI suite</a>.</p> <h4 id=\"callback-function\">Callback Function</h4> <p>If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but <code>this</code> is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.</p> <p><strong>As of jQuery 1.6</strong>, the <code><a href=\"promise\">.promise()</a></code> method can be used in conjunction with the <code><a href=\"deferred.done\">deferred.done()</a></code> method to execute a single callback for the animation as a whole when <em>all</em> matching elements have completed their animations ( See the <a href=\"promise#example-1\">example for .promise()</a> ). </p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> All jQuery effects, including <code>.slideUp()</code>, can be turned off globally by setting <code>jQuery.fx.off = true</code>, which effectively sets the duration to 0. For more information, see <a href=\"jquery.fx.off\">jQuery.fx.off</a>. </li> <li> If <code>.slideDown()</code> is called on an unordered list (<code>&lt;ul&gt;</code>) and its <code>&lt;li&gt;</code> elements have position (relative, absolute, or fixed), the effect may not work properly in IE6 through at least IE9 unless the <code>&lt;ul&gt;</code> has \"layout.\" To remedy the problem, add the <code>position: relative;</code> and <code>zoom: 1;</code> CSS declarations to the <code>ul</code>. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Animates all divs to slide up, completing the animation within 400 milliseconds.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;slideUp demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    background: #3d9a44;\n    margin: 3px;\n    width: 80px;\n    height: 40px;\n    float: left;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \nClick me!\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( document.body ).click(function() {\n  if ( $( \"div:first\" ).is( \":hidden\" ) ) {\n    $( \"div\" ).show( \"slow\" );\n  } else {\n    $( \"div\" ).slideUp();\n  }\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Animates the parent paragraph to slide up, completing the animation within 200 milliseconds. Once the animation is done, it displays an alert.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;slideUp demo&lt;/title&gt;\n  &lt;style&gt;\n div {\n   margin: 2px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;\n  &lt;button&gt;Hide One&lt;/button&gt;\n  &lt;input type=\"text\" value=\"One\"&gt;\n&lt;/div&gt;\n \n&lt;div&gt;\n  &lt;button&gt;Hide Two&lt;/button&gt;\n  &lt;input type=\"text\" value=\"Two\"&gt;\n&lt;/div&gt;\n \n&lt;div&gt;\n  &lt;button&gt;Hide Three&lt;/button&gt;\n  &lt;input type=\"text\" value=\"Three\"&gt;\n&lt;/div&gt;\n \n&lt;div id=\"msg\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"button\" ).click(function() {\n  $( this ).parent().slideUp( \"slow\", function() {\n    $( \"#msg\" ).text( $( \"button\", this ).text() + \" has completed.\" );\n  });\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/slideUp\" class=\"_attribution-link\">https://api.jquery.com/slideUp</a>\n  </p>\n</div>\n","target-selector":"<h1 class=\"entry-title\">:target Selector</h1> <div class=\"entry-content\"> <article id=\"target1\" class=\"entry selector\"><h2 class=\"section-title\"><span>target selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects the target element indicated by the fragment identifier of the document's URI.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.9/\">1.9</a></span>jQuery( \":target\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>If the document's URI contains a fragment identifier, or hash, then the <code>:target</code> selector will match the element with an ID that matches the identifier. For example, given a document with a URI of http://example.com/#foo, <code>$( \"p:target\" )</code> will select the <code>&lt;p id=\"foo\"&gt;</code> element.</p> <p>Further discussion of this usage can be found in the <a href=\"http://www.w3.org/TR/css3-selectors/#target-pseudo\">W3C CSS specification</a>.</p> </div> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/target-selector\" class=\"_attribution-link\">https://api.jquery.com/target-selector</a>\n  </p>\n</div>\n","submit-selector":"<h1 class=\"entry-title\">:submit Selector</h1> <div class=\"entry-content\"> <article id=\"submit1\" class=\"entry selector\"><h2 class=\"section-title\"><span>submit selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all elements of type submit.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \":submit\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>:submit</code> selector typically applies to button or input elements. Note that some browsers treat <code>&lt;button&gt;</code> element as <code>type=\"submit\"</code> implicitly while others (such as Internet Explorer) do not. To ensure that markup works consistently across all browsers and guarantee that it is possible to consistently select buttons that will submit a form, always specify a <code>type</code> property.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> Because <code>:submit</code> is a jQuery extension and not part of the CSS specification, queries using <code>:submit</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. For better performance in modern browsers, use <code>input[type=\"submit\"], button[type=\"submit\"]</code> instead. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Finds all submit elements that are descendants of a td element.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;submit demo&lt;/title&gt;\n  &lt;style&gt;\n  textarea {\n    height: 45px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;form&gt;\n&lt;table id=\"exampleTable\" border=\"1\" cellpadding=\"10\" align=\"center\"&gt;\n  &lt;tr&gt;\n    &lt;th&gt;\n      Element Type\n    &lt;/th&gt;\n    &lt;th&gt;\n      Element\n    &lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;\n      &lt;input type=\"button\" value=\"Input Button\"&gt;\n    &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;\n      &lt;input type=\"checkbox\"&gt;\n    &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;\n      &lt;input type=\"file\"&gt;\n    &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;\n      &lt;input type=\"hidden\"&gt;\n    &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;\n      &lt;input type=\"image\"&gt;\n    &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;\n      &lt;input type=\"password\"&gt;\n    &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;\n      &lt;input type=\"radio\"&gt;\n    &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;\n      &lt;input type=\"reset\"&gt;\n    &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;\n      &lt;input type=\"submit\"&gt;\n    &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;\n      &lt;input type=\"text\"&gt;\n    &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;\n      &lt;select&gt;&lt;option&gt;Option&lt;/option&gt;&lt;/select&gt;\n    &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;\n      &lt;textarea&gt;&lt;/textarea&gt;\n    &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;\n      &lt;button&gt;Button&lt;/button&gt;\n    &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;\n      &lt;button type=\"submit\"&gt;Button type=\"submit\"&lt;/button&gt;\n    &lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\n&lt;/form&gt;\n&lt;div id=\"result\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\nvar submitEl = $( \"td :submit\" )\n  .parent( \"td\" )\n    .css({\n      background: \"yellow\",\n      border: \"3px red solid\"\n    })\n  .end();\n \n$( \"#result\" ).text( \"jQuery matched \" + submitEl.length + \" elements.\" );\n \n// Prevent form submission\n$( \"form\" ).submit(function( event ) {\n  event.preventDefault();\n});\n \n// Extra JS to make the HTML easier to edit (None of this is relevant to the ':submit' selector)\n$( \"#exampleTable\" ).find( \"td\" ).each(function( i, el ) {\n  var inputEl = $( el ).children(),\n    inputType = inputEl.attr( \"type\" ) ? \" type='\" + inputEl.attr( \"type\" ) + \"'\" : \"\" ;\n  $( el ).before( \"&lt;td&gt;\" + inputEl[ 0 ].nodeName + inputType + \"&lt;/td&gt;\" );\n})\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/submit-selector\" class=\"_attribution-link\">https://api.jquery.com/submit-selector</a>\n  </p>\n</div>\n","text":"<h1 class=\"entry-title\">.text()</h1> <div class=\"entry-content\"> Get the combined text contents of each element in the set of matched elements, including their descendants, or set the text contents of the matched elements.<div class=\"toc\"> <h4><span>Contents:</span></h4> <ul class=\"toc-list\"> <li> <a href=\"#text1\">.text()</a><ul><li><a href=\"#text\">.text()</a></li></ul> </li> <li> <a href=\"#text2\">.text( text )</a><ul> <li><a href=\"#text-text\">.text( text )</a></li> <li><a href=\"#text-function\">.text( function )</a></li> </ul> </li> </ul> </div>\n<article id=\"text1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.text()</span><span class=\"returns\">Returns: <a href=\"types#String\">String</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Get the combined text contents of each element in the set of matched elements, including their descendants.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"text\" href=\"#text\">.text()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Unlike the <code>.html()</code> method, <code>.text()</code> can be used in both XML and HTML documents. The result of the <code>.text()</code> method is a string containing the combined text of all matched elements. (Due to variations in the HTML parsers in different browsers, the text returned may vary in newlines and other white space.) Consider the following HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"demo-container\"&gt;\n  &lt;div class=\"demo-box\"&gt;Demonstration Box&lt;/div&gt;\n  &lt;ul&gt;\n    &lt;li&gt;list item 1&lt;/li&gt;\n    &lt;li&gt;list &lt;strong&gt;item&lt;/strong&gt; 2&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;</pre> <p>The code <code>$( \"div.demo-container\" ).text()</code> would produce the following result:</p> <p> <code>Demonstration Box list item 1 list item 2</code> </p> <p>The <code>.text()</code> method cannot be used on form inputs or scripts. To set or get the text value of <code>input</code> or <code>textarea</code> elements, use the <a href=\"val\"><code>.val()</code></a> method. To get the value of a script element, use the <a href=\"html\"><code>.html()</code></a> method.</p> <p>As of jQuery 1.4, the <code>.text()</code> method returns the value of text and CDATA nodes as well as element nodes.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Find the text in the first paragraph (stripping out the html), then set the html of the last paragraph to show it is just text (the red bold is gone).</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;text demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    color: blue;\n    margin: 8px;\n  }\n  b {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;&lt;b&gt;Test&lt;/b&gt; Paragraph.&lt;/p&gt;\n&lt;p&gt;&lt;/p&gt;\n \n&lt;script&gt;\nvar str = $( \"p:first\" ).text();\n$( \"p:last\" ).html( str );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article><article id=\"text2\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.text( text )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Set the content of each element in the set of matched elements to the specified text.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"text-text\" href=\"#text-text\">.text( text )</a> </h4> <ul><li> <div><strong>text</strong></div> <div>Type: <a href=\"types#String\">String</a> or <a href=\"types#Number\">Number</a> or <a href=\"types#Boolean\">Boolean</a> </div> <div>The text to set as the content of each matched element. When Number or Boolean is supplied, it will be converted to a String representation.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"text-function\" href=\"#text-function\">.text( function )</a> </h4> <ul><li> <div><strong>function</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Integer\">Integer</a> index, <a href=\"types#String\">String</a> text ) =&gt; <a href=\"types#String\">String</a> </div> <div>A function returning the text content to set. Receives the index position of the element in the set and the old text value as arguments.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc-1\"> <p>Unlike the <code>.html()</code> method, <code>.text()</code> can be used in both XML and HTML documents. </p> <p>We need to be aware that this method escapes the string provided as necessary so that it will render correctly in HTML. To do so, it calls the DOM method <code>.createTextNode()</code>, does not interpret the string as HTML. Consider the following HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"demo-container\"&gt;\n  &lt;div class=\"demo-box\"&gt;Demonstration Box&lt;/div&gt;\n  &lt;ul&gt;\n    &lt;li&gt;list item 1&lt;/li&gt;\n    &lt;li&gt;list &lt;strong&gt;item&lt;/strong&gt; 2&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;</pre> <p>The code <code>$( \"div.demo-container\" ).text( \"&lt;p&gt;This is a test.&lt;/p&gt;\" );</code> will produce the following DOM output:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"demo-container\"&gt;\n  &amp;lt;p&amp;gt;This is a test.&amp;lt;/p&amp;gt;\n&lt;/div&gt;</pre> <p>It will appear on a rendered page as though the tags were exposed, like this:</p> <pre class=\"syntaxhighlighter xml\">&lt;p&gt;This is a test&lt;/p&gt;</pre> <p>The <code>.text()</code> method cannot be used on input elements. For input field text, use the <a href=\"val\">.val()</a> method.</p> <p>As of jQuery 1.4, the <code>.text()</code> method allows us to set the text content by passing in a function.</p> <pre class=\"syntaxhighlighter javascript\">$( \"ul li\" ).text(function( index ) {\n  return \"item number \" + ( index + 1 );\n});</pre> <p>Given an unordered list with three <code>&lt;li&gt;</code> elements, this example will produce the following DOM output:</p> <pre class=\"syntaxhighlighter xml\">&lt;ul&gt;\n  &lt;li&gt;item number 1&lt;/li&gt;\n  &lt;li&gt;item number 2&lt;/li&gt;\n  &lt;li&gt;item number 3&lt;/li&gt;\n&lt;/ul&gt;</pre> </div> <section class=\"entry-examples\" id=\"entry-examples-1\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-1-0\"> <p>Add text to the paragraph (notice the bold tag is escaped).</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;text demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    color: blue;\n    margin: 8px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Test Paragraph.&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).text( \"&lt;b&gt;Some&lt;/b&gt; new text.\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/text\" class=\"_attribution-link\">https://api.jquery.com/text</a>\n  </p>\n</div>\n","submit":"<h1 class=\"entry-title\">.submit()</h1> <div class=\"entry-content\"> <article id=\"submit1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.submit( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Bind an event handler to the \"submit\" JavaScript event, or trigger that event on an element.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"submit-handler\" href=\"#submit-handler\">.submit( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"submit-eventData-handler\" href=\"#submit-eventData-handler\">.submit( [eventData ], handler )</a> </h4> <ul> <li> <div><strong>eventData</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>An object containing data that will be passed to the event handler.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"submit\" href=\"#submit\">.submit()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method is a shortcut for <code>.on( \"submit\", handler )</code> in the first variation, and <code>.trigger( \"submit\" )</code> in the third.</p> <p>The <code>submit</code> event is sent to an element when the user is attempting to submit a form. It can only be attached to <code>&lt;form&gt;</code> elements. Forms can be submitted either by clicking an explicit <code>&lt;input type=\"submit\"&gt;</code>, <code>&lt;input type=\"image\"&gt;</code>, or <code>&lt;button type=\"submit\"&gt;</code>, or by pressing <kbd>Enter</kbd> when certain form elements have focus.</p> <div class=\"warning\"> <p>Depending on the browser, the Enter key may only cause a form submission if the form has exactly one text field, or only when there is a submit button present. The interface should not rely on a particular behavior for this key unless the issue is forced by observing the keypress event for presses of the Enter key.</p> </div> <p>For example, consider the HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;form id=\"target\" action=\"destination.html\"&gt;\n  &lt;input type=\"text\" value=\"Hello there\"&gt;\n  &lt;input type=\"submit\" value=\"Go\"&gt;\n&lt;/form&gt;\n&lt;div id=\"other\"&gt;\n  Trigger the handler\n&lt;/div&gt;</pre> <p>The event handler can be bound to the form:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#target\" ).submit(function( event ) {\n  alert( \"Handler for .submit() called.\" );\n  event.preventDefault();\n});</pre> <p>Now when the form is submitted, the message is alerted. This happens prior to the actual submission, so we can cancel the submit action by calling <code>.preventDefault()</code> on the event object or by returning <code>false</code> from our handler. We can trigger the event manually when another element is clicked:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#other\" ).click(function() {\n  $( \"#target\" ).submit();\n});</pre> <p>After this code executes, clicks on <samp>Trigger the handler</samp> will also display the message. In addition, the default <code>submit</code> action on the form will be fired, so the form will be submitted.</p> <p>The JavaScript <code>submit</code> event does not bubble in Internet Explorer. However, scripts that rely on event delegation with the <code>submit</code> event will work consistently across browsers as of jQuery 1.4, which has normalized the event's behavior. </p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> As the <code>.submit()</code> method is just a shorthand for <code>.on( \"submit\", handler )</code>, detaching is possible using <code>.off( \"submit\" )</code>. </li> <li> Forms and their child elements should not use input names or ids that conflict with properties of a form, such as <code>submit</code>, <code>length</code>, or <code>method</code>. Name conflicts can cause confusing failures. For a complete list of rules and to check your markup for these problems, see <a href=\"http://kangax.github.com/domlint/\">DOMLint</a>. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>If you'd like to prevent forms from being submitted unless a flag variable is set, try:</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;submit demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    margin: 0;\n    color: blue;\n  }\n  div,p {\n    margin-left: 10px;\n  }\n  span {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Type 'correct' to validate.&lt;/p&gt;\n&lt;form action=\"javascript:alert( 'success!' );\"&gt;\n  &lt;div&gt;\n    &lt;input type=\"text\"&gt;\n    &lt;input type=\"submit\"&gt;\n  &lt;/div&gt;\n&lt;/form&gt;\n&lt;span&gt;&lt;/span&gt;\n \n&lt;script&gt;\n$( \"form\" ).submit(function( event ) {\n  if ( $( \"input:first\" ).val() === \"correct\" ) {\n    $( \"span\" ).text( \"Validated...\" ).show();\n    return;\n  }\n \n  $( \"span\" ).text( \"Not valid!\" ).show().fadeOut( 1000 );\n  event.preventDefault();\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>If you'd like to prevent forms from being submitted unless a flag variable is set, try:</p> <pre class=\"syntaxhighlighter javascript\">$( \"form\" ).submit(function() {\n  return this.some_flag_variable;\n});</pre> </div> <div class=\"entry-example\" id=\"example-2\"> <p>To trigger the submit event on the first form on the page, try:</p> <pre class=\"syntaxhighlighter javascript\">$( \"form:first\" ).submit();</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/submit\" class=\"_attribution-link\">https://api.jquery.com/submit</a>\n  </p>\n</div>\n","toarray":"<h1 class=\"entry-title\">.toArray()</h1> <div class=\"entry-content\"> <article id=\"toArray1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.toArray()</span><span class=\"returns\">Returns: <a href=\"types#Array\">Array</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Retrieve all the elements contained in the jQuery set, as an array.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"toArray\" href=\"#toArray\">.toArray()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p><code>.toArray()</code> returns all of the elements in the jQuery set:</p> <pre class=\"syntaxhighlighter javascript\">alert( $( \"li\" ).toArray() );</pre> <p>All of the matched DOM nodes are returned by this call, contained in a standard array:</p> <p> <span class=\"result\">[&lt;li id=\"foo\"&gt;, &lt;li id=\"bar\"&gt;]</span> </p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Select all divs in the document and return the DOM Elements as an Array; then use the built-in reverse() method to reverse that array.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;toArray demo&lt;/title&gt;\n  &lt;style&gt;\n  span {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \nReversed - &lt;span&gt;&lt;/span&gt;\n \n&lt;div&gt;One&lt;/div&gt;\n&lt;div&gt;Two&lt;/div&gt;\n&lt;div&gt;Three&lt;/div&gt;\n \n&lt;script&gt;\nfunction disp( divs ) {\n  var a = [];\n  for ( var i = 0; i &lt; divs.length; i++ ) {\n    a.push( divs[ i ].innerHTML );\n  }\n  $( \"span\" ).text( a.join( \" \" ) );\n}\n \ndisp( $( \"div\" ).toArray().reverse() );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/toArray\" class=\"_attribution-link\">https://api.jquery.com/toArray</a>\n  </p>\n</div>\n","toggle-event":"<h1 class=\"entry-title\">.toggle()</h1> <div class=\"entry-content\"> <article id=\"toggle1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.toggle( handler, handler [, handler ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span><span class=\"version-details\">version deprecated: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>, removed: <a href=\"https://api.jquery.com/category/version/1.9/\">1.9</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Bind two or more handlers to the matched elements, to be executed on alternate clicks.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"toggle-handler-handler-handler\" href=\"#toggle-handler-handler-handler\">.toggle( handler, handler [, handler ] )</a> </h4> <ul> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute every even time the element is clicked.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute every odd time the element is clicked.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>Additional handlers to cycle through after clicks.</div> </li> </ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <div class=\"warning\"> <p>Note: This method signature was deprecated in jQuery 1.8 and removed in jQuery 1.9. jQuery also provides an animation method named <a href=\"toggle\">.toggle()</a> that toggles the visibility of elements. Whether the animation or the event method is fired depends on the set of arguments passed.</p> </div> <p>The <code>.toggle()</code> method binds a handler for the <code>click</code> event, so the rules outlined for the triggering of <code>click</code> apply here as well.</p> <p>For example, consider the HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;div id=\"target\"&gt;\n  Click here\n&lt;/div&gt;</pre> <p>Event handlers can then be bound to the <code>&lt;div&gt;</code>:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#target\" ).toggle(function() {\n  alert( \"First handler for .toggle() called.\" );\n}, function() {\n  alert( \"Second handler for .toggle() called.\" );\n});</pre> <p>As the element is clicked repeatedly, the messages alternate:</p> <p> <samp>First handler for .toggle() called.</samp> <br> <samp>Second handler for .toggle() called.</samp> <br> <samp>First handler for .toggle() called.</samp> <br> <samp>Second handler for .toggle() called.</samp> <br> <samp>First handler for .toggle() called.</samp> </p> <p>If more than two handlers are provided, <code>.toggle()</code> will cycle among all of them. For example, if there are three handlers, then the first handler will be called on the first click, the fourth click, the seventh click, and so on.</p> <p>The <code>.toggle()</code> method is provided for convenience. It is relatively straightforward to implement the same behavior by hand, and this can be necessary if the assumptions built into <code>.toggle()</code> prove limiting. For example, <code>.toggle()</code> is not guaranteed to work correctly if applied twice to the same element. Since <code>.toggle()</code> internally uses a <code>click</code> handler to do its work, we must unbind <code>click</code> to remove a behavior attached with <code>.toggle()</code>, so other <code>click</code> handlers can be caught in the crossfire. The implementation also calls <code>.preventDefault()</code> on the event, so links will not be followed and buttons will not be clicked if <code>.toggle()</code> has been called on the element.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Toggle a style on table cells. (Not recommended. Use .toggleClass() instead.):</p> <pre class=\"syntaxhighlighter javascript\">$( \"td\" ).toggle(\n  function() {\n    $( this ).addClass( \"selected\" );\n  }, function() {\n    $( this ).removeClass( \"selected\" );\n  }\n);</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/toggle-event\" class=\"_attribution-link\">https://api.jquery.com/toggle-event</a>\n  </p>\n</div>\n","toggle":"<h1 class=\"entry-title\">.toggle()</h1> <div class=\"entry-content\"> <article id=\"toggle1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.toggle( [duration ] [, complete ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Display or hide the matched elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"toggle-duration-complete\" href=\"#toggle-duration-complete\">.toggle( [duration ] [, complete ] )</a> </h4> <ul> <li> <div> <strong>duration</strong> (default: <code>400</code>)</div> <div>Type: <a href=\"types#Number\">Number</a> or <a href=\"types#String\">String</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function to call once the animation is complete, called once per matched element.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"toggle-options\" href=\"#toggle-options\">.toggle( options )</a> </h4> <ul><li> <div><strong>options</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>A map of additional options to pass to the method.</div> <ul> <li> <div> <strong>duration</strong> (default: <code>400</code>)</div> <div>Type: <a href=\"types#Number\">Number</a> or <a href=\"types#String\">String</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div> <strong>easing</strong> (default: <code>swing</code>)</div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string indicating which easing function to use for the transition.</div> </li> <li> <div> <strong>queue</strong> (default: <code>true</code>)</div> <div>Type: <a href=\"types#Boolean\">Boolean</a> or <a href=\"types#String\">String</a> </div> <div>A Boolean indicating whether to place the animation in the effects queue. If false, the animation will begin immediately. <strong>As of jQuery 1.7</strong>, the queue option can also accept a string, in which case the animation is added to the queue represented by that string. When a custom queue name is used the animation does not automatically start; you must call <code>.dequeue(\"queuename\")</code> to start it.</div> </li> <li> <div><strong>specialEasing</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>An object containing one or more of the CSS properties defined by the properties argument and their corresponding easing functions.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a>)</span> </div> </li> <li> <div><strong>step</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Number\">Number</a> now, <a href=\"types#Tween\">Tween</a> tween )</div> <div>A function to be called for each animated property of each animated element. This function provides an opportunity to modify the Tween object to change the value of the property before it is set.</div> </li> <li> <div><strong>progress</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Number\">Number</a> progress, <a href=\"types#Number\">Number</a> remainingMs )</div> <div>A function to be called after each step of the animation, only once per animated element regardless of the number of animated properties.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function that is called once the animation on an element is complete.</div> </li> <li> <div><strong>start</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation )</div> <div>A function to call when the animation on an element begins.<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>done</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Boolean\">Boolean</a> jumpedToEnd )</div> <div>A function to be called when the animation on an element completes (its Promise object is resolved).<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>fail</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Boolean\">Boolean</a> jumpedToEnd )</div> <div>A function to be called when the animation on an element fails to complete (its Promise object is rejected).<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> <li> <div><strong>always</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Promise\">Promise</a> animation, <a href=\"types#Boolean\">Boolean</a> jumpedToEnd )</div> <div>A function to be called when the animation on an element completes or stops without completing (its Promise object is either resolved or rejected).<span class=\"version-details\"> (version added: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a>)</span> </div> </li> </ul> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"toggle-duration-easing-complete\" href=\"#toggle-duration-easing-complete\">.toggle( duration [, easing ] [, complete ] )</a> </h4> <ul> <li> <div> <strong>duration</strong> (default: <code>400</code>)</div> <div>Type: <a href=\"types#Number\">Number</a> or <a href=\"types#String\">String</a> </div> <div>A string or number determining how long the animation will run.</div> </li> <li> <div> <strong>easing</strong> (default: <code>swing</code>)</div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string indicating which easing function to use for the transition.</div> </li> <li> <div><strong>complete</strong></div> <div>Type: <a href=\"types#Function\">Function</a>()</div> <div>A function to call once the animation is complete, called once per matched element.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.3/\">1.3</a></span><a id=\"toggle-display\" href=\"#toggle-display\">.toggle( display )</a> </h4> <ul><li> <div><strong>display</strong></div> <div>Type: <a href=\"types#Boolean\">Boolean</a> </div> <div>Use <code>true</code> to show the element or <code>false</code> to hide it.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <div class=\"warning\"> <p>Note: The event handling suite also has a method named <a href=\"toggle-event\">.toggle()</a>. Which one is fired depends on the set of arguments passed.</p> </div> <p>With no parameters, the <code>.toggle()</code> method simply toggles the visibility of elements:</p> <pre class=\"syntaxhighlighter javascript\">$( \".target\" ).toggle();</pre> <p>The matched elements will be revealed or hidden immediately, with no animation, by changing the CSS <code>display</code> property. If the element is initially displayed, it will be hidden; if hidden, it will be shown. The <code>display</code> property is saved and restored as needed. If an element has a <code>display</code> value of <code>inline</code>, then is hidden and shown, it will once again be displayed <code>inline</code>.</p> <p>When a duration, a plain object, or a <em>single</em> \"complete\" function is provided, <code>.toggle()</code> becomes an animation method. The <code>.toggle()</code> method animates the width, height, and opacity of the matched elements simultaneously. When these properties reach 0 after a hiding animation, the <code>display</code> style property is set to <code>none</code> to ensure that the element no longer affects the layout of the page.</p> <p>Durations are given in milliseconds; higher values indicate slower animations, not faster ones. The strings <code>'fast'</code> and <code>'slow'</code> can be supplied to indicate durations of <code>200</code> and <code>600</code> milliseconds, respectively.</p> <p>As of jQuery 1.4.3, an optional string naming an easing function may be used. Easing functions specify the speed at which the animation progresses at different points within the animation. The only easing implementations in the jQuery library are the default, called <code>swing</code>, and one that progresses at a constant pace, called <code>linear</code>. More easing functions are available with the use of plug-ins, most notably the <a href=\"http://jqueryui.com\">jQuery UI suite</a>.</p> <p>If supplied, the callback is fired once the animation is complete. This can be useful for stringing different animations together in sequence. The callback is not sent any arguments, but <code>this</code> is set to the DOM element being animated. If multiple elements are animated, it is important to note that the callback is executed once per matched element, not once for the animation as a whole.</p> <p>We can animate any element, such as a simple image:</p> <pre class=\"syntaxhighlighter xml\">&lt;div id=\"clickme\"&gt;\n  Click here\n&lt;/div&gt;\n&lt;img id=\"book\" src=\"book.png\" alt=\"\" width=\"100\" height=\"123\"&gt;</pre> <p>We will cause <code>.toggle()</code> to be called when another element is clicked:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#clickme\" ).click(function() {\n  $( \"#book\" ).toggle( \"slow\", function() {\n    // Animation complete.\n  });\n});</pre> <p>With the element initially shown, we can hide it slowly with the first click: </p> <figure> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_09.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_10.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_11.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_12.png\" alt=\"\"> <figcaption>Figure 1 - Illustration of the <code>toggle()</code> effect when hiding the image</figcaption> </figure> <p>A second click will show the element once again:</p> <figure> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_13.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_14.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_15.png\" alt=\"\"> <img class=\"column three\" src=\"https://api.jquery.com/resources/0042_06_16.png\" alt=\"\"> <figcaption>Figure 2 - Illustration of the <code>toggle()</code> effect when showing the image</figcaption> </figure> <p>The second version of the method accepts a Boolean parameter. If this parameter is <code>true</code>, then the matched elements are shown; if <code>false</code>, the elements are hidden. In essence, the statement: </p> <pre class=\"syntaxhighlighter javascript\">$( \"#foo\" ).toggle( display );</pre> <p>is equivalent to:</p> <pre class=\"syntaxhighlighter javascript\">if ( display === true ) {\n  $( \"#foo\" ).show();\n} else if ( display === false ) {\n  $( \"#foo\" ).hide();\n}</pre> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> All jQuery effects, including <code>.toggle()</code>, can be turned off globally by setting <code>jQuery.fx.off = true</code>, which effectively sets the duration to 0. For more information, see <a href=\"jquery.fx.off\">jQuery.fx.off</a>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Toggles all paragraphs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;toggle demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button&gt;Toggle&lt;/button&gt;\n&lt;p&gt;Hello&lt;/p&gt;\n&lt;p style=\"display: none\"&gt;Good Bye&lt;/p&gt;\n \n&lt;script&gt;\n$( \"button\" ).click(function() {\n  $( \"p\" ).toggle();\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Animates all paragraphs to be shown if they are hidden and hidden if they are visible, completing the animation within 600 milliseconds.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;toggle demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    background: #dad;\n    font-weight: bold;\n    font-size: 16px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button&gt;Toggle 'em&lt;/button&gt;\n&lt;p&gt;Hiya&lt;/p&gt;\n&lt;p&gt;Such interesting text, eh?&lt;/p&gt;\n \n&lt;script&gt;\n$( \"button\" ).click(function() {\n  $( \"p\" ).toggle( \"slow\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-2\"> <p>Shows all paragraphs, then hides them all, back and forth.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;toggle demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button&gt;Toggle&lt;/button&gt;\n&lt;p&gt;Hello&lt;/p&gt;\n&lt;p style=\"display: none\"&gt;Good Bye&lt;/p&gt;\n \n&lt;script&gt;\nvar flip = 0;\n$( \"button\" ).click(function() {\n  $( \"p\" ).toggle( flip++ % 2 === 0 );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/toggle\" class=\"_attribution-link\">https://api.jquery.com/toggle</a>\n  </p>\n</div>\n","trigger":"<h1 class=\"entry-title\">.trigger()</h1> <div class=\"entry-content\"> <article id=\"trigger1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.trigger( eventType [, extraParameters ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Execute all handlers and behaviors attached to the matched elements for the given event type.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"trigger-eventType-extraParameters\" href=\"#trigger-eventType-extraParameters\">.trigger( eventType [, extraParameters ] )</a> </h4> <ul> <li> <div><strong>eventType</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing a JavaScript event type, such as <code>click</code> or <code>submit</code>.</div> </li> <li> <div><strong>extraParameters</strong></div> <div>Type: <a href=\"types#Array\">Array</a> or <a href=\"types#PlainObject\">PlainObject</a> </div> <div>Additional parameters to pass along to the event handler.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.3/\">1.3</a></span><a id=\"trigger-event-extraParameters\" href=\"#trigger-event-extraParameters\">.trigger( event [, extraParameters ] )</a> </h4> <ul> <li> <div><strong>event</strong></div> <div>Type: <a href=\"types#Event\">Event</a> </div> <div>A <a href=\"https://api.jquery.com/category/events/event-object/\"><code>jQuery.Event</code></a> object.</div> </li> <li> <div><strong>extraParameters</strong></div> <div>Type: <a href=\"types#Array\">Array</a> or <a href=\"types#PlainObject\">PlainObject</a> </div> <div>Additional parameters to pass along to the event handler.</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Any event handlers attached with <code>.on()</code> or one of its shortcut methods are triggered when the corresponding event occurs. They can be fired manually, however, with the <code>.trigger()</code> method. A call to <code>.trigger()</code> executes the handlers in the same order they would be if the event were triggered naturally by the user:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#foo\" ).on( \"click\", function() {\n  alert( $( this ).text() );\n});\n$( \"#foo\" ).trigger( \"click\" );</pre> <p>As of jQuery 1.3, <code>.trigger()</code>ed events bubble up the DOM tree; an event handler can stop the bubbling by returning <code>false</code> from the handler or calling the <a href=\"event.stoppropagation\"><code>.stopPropagation()</code></a> method on the event object passed into the event. Although <code>.trigger()</code> simulates an event activation, complete with a synthesized event object, it does not perfectly replicate a naturally-occurring event.</p> <p>To trigger handlers bound via jQuery without also triggering the native event, use <a href=\"triggerhandler\"><code>.triggerHandler()</code></a> instead. </p> <p>When we define a custom event type using the <code>.on()</code> method, the second argument to <code>.trigger()</code> can become useful. For example, suppose we have bound a handler for the <code>custom</code> event to our element instead of the built-in <code>click</code> event as we did above:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#foo\" ).on( \"custom\", function( event, param1, param2 ) {\n  alert( param1 + \"\\n\" + param2 );\n});\n$( \"#foo\").trigger( \"custom\", [ \"Custom\", \"Event\" ] );</pre> <p>The event object is always passed as the first parameter to an event handler. An array of arguments can also be passed to the .trigger() call, and these parameters will be passed along to the handler as well following the event object. As of jQuery 1.6.2, single string or numeric argument can be passed without being wrapped in an array.</p> <p>Note the difference between the extra parameters passed here and the <code>eventData</code> parameter to the <a href=\"on\">.on()</a> method. Both are mechanisms for passing information to an event handler, but the <code>extraParameters</code> argument to <code>.trigger()</code> allows information to be determined at the time the event is triggered, while the <code>eventData</code> argument to <code>.on()</code> requires the information to be already computed at the time the handler is bound.</p> <p>The <code>.trigger()</code> method can be used on jQuery collections that wrap plain JavaScript objects similar to a pub/sub mechanism; any event handlers bound to the object will be called when the event is triggered. </p> <div class=\"warning\"> <strong>Note:</strong> For both plain objects and DOM objects other than <code>window</code>, if a triggered event name matches the name of a property on the object, jQuery will attempt to invoke the property as a method if no event handler calls <a href=\"event.preventdefault\"><code>event.preventDefault()</code></a>. If this behavior is not desired, use <a href=\"triggerhandler\"><code>.triggerHandler()</code></a> instead.</div> <div class=\"warning\"> <strong>Note:</strong> As with <a href=\"triggerhandler\"><code>.triggerHandler()</code></a>, when calling <code>.trigger()</code> with an event name matches the name of a property on the object, prefixed by <code>on</code> (e.g. triggering <code>click</code> on <code>window</code> that has a non null <code>onclick</code> method), jQuery will attempt to invoke that property as a method.</div> <div class=\"warning\"> <strong>Note:</strong> When triggering with a plain object that is not array-like but still contains a <code>length</code> property, you should pass the object in an array (e.g. <code>[ { length: 1 } ]</code>).</div> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Clicks to button #2 also trigger a click for button #1.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;trigger demo&lt;/title&gt;\n  &lt;style&gt;\n  button {\n    margin: 10px;\n  }\n  div {\n    color: blue;\n    font-weight: bold;\n  }\n  span {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button&gt;Button #1&lt;/button&gt;\n&lt;button&gt;Button #2&lt;/button&gt;\n&lt;div&gt;&lt;span&gt;0&lt;/span&gt; button #1 clicks.&lt;/div&gt;\n&lt;div&gt;&lt;span&gt;0&lt;/span&gt; button #2 clicks.&lt;/div&gt;\n \n&lt;script&gt;\n$( \"button:first\" ).click(function() {\n  update( $( \"span:first\" ) );\n});\n \n$( \"button:last\" ).click(function() {\n  $( \"button:first\" ).trigger( \"click\" );\n  update( $( \"span:last\" ) );\n});\n \nfunction update( j ) {\n  var n = parseInt( j.text(), 10 );\n  j.text( n + 1 );\n}\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>To submit the first form without using the submit() function, try:</p> <pre class=\"syntaxhighlighter javascript\">$( \"form:first\" ).trigger( \"submit\" );</pre> </div> <div class=\"entry-example\" id=\"example-2\"> <p>To submit the first form without using the submit() function, try:</p> <pre class=\"syntaxhighlighter javascript\">var event = jQuery.Event( \"submit\" );\n$( \"form:first\" ).trigger( event );\nif ( event.isDefaultPrevented() ) {\n  // Perform an action...\n}</pre> </div> <div class=\"entry-example\" id=\"example-3\"> <p>To pass arbitrary data to an event:</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" )\n  .click(function( event, a, b ) {\n    // When a normal click fires, a and b are undefined\n    // for a trigger like below a refers to \"foo\" and b refers to \"bar\"\n  })\n  .trigger( \"click\", [ \"foo\", \"bar\" ] );</pre> </div> <div class=\"entry-example\" id=\"example-4\"> <p>To pass arbitrary data through an event object:</p> <pre class=\"syntaxhighlighter javascript\">var event = jQuery.Event( \"logged\" );\nevent.user = \"foo\";\nevent.pass = \"bar\";\n$( \"body\" ).trigger( event );</pre> </div> <div class=\"entry-example\" id=\"example-5\"> <p>Alternative way to pass data through an event object:</p> <pre class=\"syntaxhighlighter javascript\">$( \"body\" ).trigger({\n  type:\"logged\",\n  user:\"foo\",\n  pass:\"bar\"\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/trigger\" class=\"_attribution-link\">https://api.jquery.com/trigger</a>\n  </p>\n</div>\n","toggleclass":"<h1 class=\"entry-title\">.toggleClass()</h1> <div class=\"entry-content\"> <div class=\"toc\"> <h4><span>Contents:</span></h4> <ul class=\"toc-list\"> <li> <a href=\"#toggleClass1\">.toggleClass( className )</a><ul> <li><a href=\"#toggleClass-className\">.toggleClass( className )</a></li> <li><a href=\"#toggleClass-className-state\">.toggleClass( className, state )</a></li> <li><a href=\"#toggleClass-function-state\">.toggleClass( function [, state ] )</a></li> </ul> </li> <li> <a href=\"#toggleClass2\">.toggleClass( [state ] )</a><ul><li><a href=\"#toggleClass-state\">.toggleClass( [state ] )</a></li></ul> </li> </ul> </div>\n<article id=\"toggleClass1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.toggleClass( className )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Add or remove one or more classes from each element in the set of matched elements, depending on either the class's presence or the value of the state argument.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"toggleClass-className\" href=\"#toggleClass-className\">.toggleClass( className )</a> </h4> <ul><li> <div><strong>className</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>One or more class names (separated by spaces) to be toggled for each element in the matched set.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.3/\">1.3</a></span><a id=\"toggleClass-className-state\" href=\"#toggleClass-className-state\">.toggleClass( className, state )</a> </h4> <ul> <li> <div><strong>className</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>One or more class names (separated by spaces) to be toggled for each element in the matched set.</div> </li> <li> <div><strong>state</strong></div> <div>Type: <a href=\"types#Boolean\">Boolean</a> </div> <div>A Boolean (not just truthy/falsy) value to determine whether the class should be added or removed.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"toggleClass-function-state\" href=\"#toggleClass-function-state\">.toggleClass( function [, state ] )</a> </h4> <ul> <li> <div><strong>function</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Integer\">Integer</a> index, <a href=\"types#String\">String</a> className, <a href=\"types#Boolean\">Boolean</a> state ) =&gt; <a href=\"types#String\">String</a> </div> <div>A function that returns class names to be toggled in the class attribute of each element in the matched set. Receives the index position of the element in the set, the old class value, and the state as arguments.</div> </li> <li> <div><strong>state</strong></div> <div>Type: <a href=\"types#Boolean\">Boolean</a> </div> <div>A boolean value to determine whether the class should be added or removed.</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method takes one or more class names as its parameter. In the first version, if an element in the matched set of elements already has the class, then it is removed; if an element does not have the class, then it is added. For example, we can apply <code>.toggleClass()</code> to a simple <code>&lt;div&gt;</code>: </p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"tumble\"&gt;Some text.&lt;/div&gt;</pre> <p>The first time we apply <code>$( \"div.tumble\" ).toggleClass( \"bounce\" )</code>, we get the following:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"tumble bounce\"&gt;Some text.&lt;/div&gt;</pre> <p>The second time we apply <code>$( \"div.tumble\" ).toggleClass( \"bounce\" )</code>, the <code>&lt;div&gt;</code> class is returned to the single <code>tumble</code> value:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"tumble\"&gt;Some text.&lt;/div&gt;</pre> <p>Applying <code>.toggleClass( \"bounce spin\" )</code> to the same <code>&lt;div&gt;</code> alternates between <code>&lt;div class=\"tumble bounce spin\"&gt;</code> and <code>&lt;div class=\"tumble\"&gt;</code>.</p> <p>The second version of <code>.toggleClass()</code> uses the second parameter for determining whether the class should be added or removed. If this parameter's value is <code>true</code>, then the class is added; if <code>false</code>, the class is removed. In essence, the statement:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#foo\" ).toggleClass( className, addOrRemove );</pre> <p>is equivalent to:</p> <pre class=\"syntaxhighlighter javascript\">if ( addOrRemove ) {\n  $( \"#foo\" ).addClass( className );\n} else {\n  $( \"#foo\" ).removeClass( className );\n}</pre> <p><strong>As of jQuery 1.4</strong>, if no arguments are passed to <code>.toggleClass()</code>, all class names on the element the first time <code>.toggleClass()</code> is called will be toggled. Also as of jQuery 1.4, the class name to be toggled can be determined by passing in a function.</p> <pre class=\"syntaxhighlighter javascript\">$( \"div.foo\" ).toggleClass(function() {\n  if ( $( this ).parent().is( \".bar\" ) ) {\n    return \"happy\";\n  } else {\n    return \"sad\";\n  }\n});</pre> <p>This example will toggle the <code>happy</code> class for <code>&lt;div class=\"foo\"&gt;</code> elements if their parent element has a class of <code>bar</code>; otherwise, it will toggle the <code>sad</code> class.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Toggle the class 'highlight' when a paragraph is clicked.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;toggleClass demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    margin: 4px;\n    font-size: 16px;\n    font-weight: bolder;\n    cursor: pointer;\n  }\n  .blue {\n    color: blue;\n  }\n  .highlight {\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p class=\"blue\"&gt;Click to toggle&lt;/p&gt;\n&lt;p class=\"blue highlight\"&gt;highlight&lt;/p&gt;\n&lt;p class=\"blue\"&gt;on these&lt;/p&gt;\n&lt;p class=\"blue\"&gt;paragraphs&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).click(function() {\n  $( this ).toggleClass( \"highlight\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Add the \"highlight\" class to the clicked paragraph on every third click of that paragraph, remove it every first and second click.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;toggleClass demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    margin: 4px;\n    font-size: 16px;\n    font-weight: bolder;\n    cursor: pointer;\n  }\n  .blue {\n    color: blue;\n  }\n  .highlight {\n    background: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p class=\"blue\"&gt;Click to toggle (&lt;span&gt;clicks: 0&lt;/span&gt;)&lt;/p&gt;\n&lt;p class=\"blue highlight\"&gt;highlight (&lt;span&gt;clicks: 0&lt;/span&gt;)&lt;/p&gt;\n&lt;p class=\"blue\"&gt;on these (&lt;span&gt;clicks: 0&lt;/span&gt;)&lt;/p&gt;\n&lt;p class=\"blue\"&gt;paragraphs (&lt;span&gt;clicks: 0&lt;/span&gt;)&lt;/p&gt;\n \n&lt;script&gt;\nvar count = 0;\n$( \"p\" ).each(function() {\n  var $thisParagraph = $( this );\n  var count = 0;\n  $thisParagraph.click(function() {\n    count++;\n    $thisParagraph.find( \"span\" ).text( \"clicks: \" + count );\n    $thisParagraph.toggleClass( \"highlight\", count % 3 === 0 );\n  });\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-2\"> <p>Toggle the class name(s) indicated on the buttons for each div.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;toggleClass demo&lt;/title&gt;\n  &lt;style&gt;\n  .wrap &gt; div {\n    float: left;\n    width: 100px;\n    margin: 1em 1em 0 0;\n    padding=left: 3px;\n    border: 1px solid #abc;\n  }\n  div.a {\n    background-color: aqua;\n  }\n  div.b {\n    background-color: burlywood;\n  }\n  div.c {\n    background-color: cornsilk;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div class=\"buttons\"&gt;\n  &lt;button&gt;toggle&lt;/button&gt;\n  &lt;button class=\"a\"&gt;toggle a&lt;/button&gt;\n  &lt;button class=\"a b\"&gt;toggle a b&lt;/button&gt;\n  &lt;button class=\"a b c\"&gt;toggle a b c&lt;/button&gt;\n  &lt;a href=\"#\"&gt;reset&lt;/a&gt;\n&lt;/div&gt;\n&lt;div class=\"wrap\"&gt;\n  &lt;div&gt;&lt;/div&gt;\n  &lt;div class=\"b\"&gt;&lt;/div&gt;\n  &lt;div class=\"a b\"&gt;&lt;/div&gt;\n  &lt;div class=\"a c\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n \n&lt;script&gt;\nvar cls = [ \"\", \"a\", \"a b\", \"a b c\" ];\nvar divs = $( \"div.wrap\" ).children();\nvar appendClass = function() {\n  divs.append(function() {\n    return \"&lt;div&gt;\" + ( this.className || \"none\" ) + \"&lt;/div&gt;\";\n  });\n};\n \nappendClass();\n \n$( \"button\" ).on( \"click\", function() {\n  var tc = this.className || undefined;\n  divs.toggleClass( tc );\n  appendClass();\n});\n \n$( \"a\" ).on( \"click\", function( event ) {\n  event.preventDefault();\n  divs.empty().each(function( i ) {\n    this.className = cls[ i ];\n  });\n  appendClass();\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article><article id=\"toggleClass2\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.toggleClass( [state ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span><span class=\"version-details\">version deprecated: <a href=\"https://api.jquery.com/category/version/3.0/\">3.0</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong></p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"toggleClass-state\" href=\"#toggleClass-state\">.toggleClass( [state ] )</a> </h4> <ul><li> <div><strong>state</strong></div> <div>Type: <a href=\"types#Boolean\">Boolean</a> </div> <div>A boolean value to determine whether the class should be added or removed.</div> </li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc-1\"> <div class=\"warning\"> <strong>This signature (only!) is deprecated as of jQuery 3.0</strong>.</div> </div> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/toggleClass\" class=\"_attribution-link\">https://api.jquery.com/toggleClass</a>\n  </p>\n</div>\n","unload":"<h1 class=\"entry-title\">.unload()</h1> <div class=\"entry-content\"> <article id=\"unload1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.unload( handler )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span><span class=\"version-details\">version deprecated: <a href=\"https://api.jquery.com/category/version/1.8/\">1.8</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Bind an event handler to the \"unload\" JavaScript event.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"unload-handler\" href=\"#unload-handler\">.unload( handler )</a> </h4> <ul><li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute when the event is triggered.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"unload-eventData-handler\" href=\"#unload-eventData-handler\">.unload( [eventData ], handler )</a> </h4> <ul> <li> <div><strong>eventData</strong></div> <div>Type: <a href=\"types#Anything\">Anything</a> </div> <div>A plain object of data that will be passed to the event handler.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute each time the event is triggered.</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>This method is a shortcut for <code>.on( \"unload\", handler )</code>.</p> <p>The <code>unload</code> event is sent to the <code>window</code> element when the user navigates away from the page. This could mean one of many things. The user could have clicked on a link to leave the page, or typed in a new URL in the address bar. The forward and back buttons will trigger the event. Closing the browser window will cause the event to be triggered. Even a page reload will first create an <code>unload</code> event.</p> <div class=\"warning\"> <p>The exact handling of the <code>unload</code> event has varied from version to version of browsers. For example, some versions of Firefox trigger the event when a link is followed, but not when the window is closed. In practical usage, behavior should be tested on all supported browsers and contrasted with the similar <code>beforeunload</code> event.</p> </div> <p>Any <code>unload</code> event handler should be bound to the <code>window</code> object:</p> <pre class=\"syntaxhighlighter javascript\">$( window ).unload(function() {\n  return \"Handler for .unload() called.\";\n});</pre> <p>This event is available so that scripts can perform cleanup when the user leaves the page. Most browsers will ignore calls to <code>alert()</code>, <code>confirm()</code> and <code>prompt()</code> inside the event handler. The string you return may be used in a confirmation dialog, but not all browsers support this. It is not possible to cancel the <code>unload</code> event with <code>.preventDefault()</code>.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul><li> As the <code>.unload()</code> method is just a shorthand for <code>.on( \"unload\", handler )</code>, detaching is possible using <code>.off( \"unload\" )</code>. </li></ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>To display an alert when a page is unloaded:</p> <pre class=\"syntaxhighlighter javascript\">$( window ).unload(function() {\n  return \"Bye now!\";\n});</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/unload\" class=\"_attribution-link\">https://api.jquery.com/unload</a>\n  </p>\n</div>\n","unwrap":"<h1 class=\"entry-title\">.unwrap()</h1> <div class=\"entry-content\"> <article id=\"unwrap1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.unwrap()</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Remove the parents of the set of matched elements from the DOM, leaving the matched elements in their place.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"unwrap\" href=\"#unwrap\">.unwrap()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/3.0/\">3.0</a></span><a id=\"unwrap-selector\" href=\"#unwrap-selector\">.unwrap( [selector ] )</a> </h4> <ul><li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A selector to check the parent element against. If an element's parent does not match the selector, the element won't be unwrapped.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.unwrap()</code> method removes the element's parent. This is effectively the inverse of the <code><a href=\"wrap\">.wrap()</a></code> method. The matched elements (and their siblings, if any) replace their parents within the DOM structure.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Wrap/unwrap a div around each of the paragraphs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;unwrap demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    border: 2px solid blue;\n  }\n  p {\n    background: yellow;\n    margin: 4px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;button&gt;wrap/unwrap&lt;/button&gt;\n&lt;p&gt;Hello&lt;/p&gt;\n&lt;p&gt;cruel&lt;/p&gt;\n&lt;p&gt;World&lt;/p&gt;\n&lt;script&gt;\nvar pTags = $( \"p\" );\n$( \"button\" ).click(function() {\n  if ( pTags.parent().is( \"div\" ) ) {\n    pTags.unwrap();\n  } else {\n    pTags.wrap( \"&lt;div&gt;&lt;/div&gt;\" );\n  }\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/unwrap\" class=\"_attribution-link\">https://api.jquery.com/unwrap</a>\n  </p>\n</div>\n","triggerhandler":"<h1 class=\"entry-title\">.triggerHandler()</h1> <div class=\"entry-content\"> <article id=\"triggerHandler1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.triggerHandler( eventType [, extraParameters ] )</span><span class=\"returns\">Returns: <a href=\"types#Object\">Object</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Execute all handlers attached to an element for an event.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2/\">1.2</a></span><a id=\"triggerHandler-eventType-extraParameters\" href=\"#triggerHandler-eventType-extraParameters\">.triggerHandler( eventType [, extraParameters ] )</a> </h4> <ul> <li> <div><strong>eventType</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing a JavaScript event type, such as <code>click</code> or <code>submit</code>.</div> </li> <li> <div><strong>extraParameters</strong></div> <div>Type: <a href=\"types#Array\">Array</a> or <a href=\"types#PlainObject\">PlainObject</a> </div> <div>Additional parameters to pass along to the event handler.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.3/\">1.3</a></span><a id=\"triggerHandler-event-extraParameters\" href=\"#triggerHandler-event-extraParameters\">.triggerHandler( event [, extraParameters ] )</a> </h4> <ul> <li> <div><strong>event</strong></div> <div>Type: <a href=\"types#Event\">Event</a> </div> <div>A <a href=\"https://api.jquery.com/category/events/event-object/\"><code>jQuery.Event</code></a> object.</div> </li> <li> <div><strong>extraParameters</strong></div> <div>Type: <a href=\"types#Array\">Array</a> or <a href=\"types#PlainObject\">PlainObject</a> </div> <div>Additional parameters to pass along to the event handler.</div> </li> </ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p><code>.triggerHandler( eventType )</code> executes all handlers bound with jQuery for the event type. It will also execute any method called <code>on{eventType}()</code> found on the element. The behavior of this method is similar to <a href=\"trigger\"><code>.trigger()</code></a>, with the following exceptions:</p> <ul> <li>The <code>.triggerHandler( \"event\" )</code> method will not call <code>.event()</code> on the element it is triggered on. This means <code>.triggerHandler( \"submit\" )</code> on a form will not call <code>.submit()</code> on the form.</li> <li>While <code>.trigger()</code> will operate on all elements matched by the jQuery object, <code>.triggerHandler()</code> only affects the first matched element.</li> <li>Events triggered with <code>.triggerHandler()</code> do not bubble up the DOM hierarchy; if they are not handled by the target element directly, they do nothing.</li> <li>Instead of returning the jQuery object (to allow chaining), <code>.triggerHandler()</code> returns whatever value was returned by the last handler it caused to be executed. If no handlers are triggered, it returns <code>undefined</code> </li> </ul> <p>For more information on this method, see the discussion for <code><a href=\"trigger\">.trigger()</a></code>.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>If you called .triggerHandler() on a focus event - the browser's default focus action would not be triggered, only the event handlers bound to the focus event.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;triggerHandler demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button id=\"old\"&gt;.trigger( \"focus\" )&lt;/button&gt;\n&lt;button id=\"new\"&gt;.triggerHandler( \"focus\" )&lt;/button&gt;&lt;br&gt;&lt;br&gt;\n \n&lt;input type=\"text\" value=\"To Be Focused\"&gt;\n \n&lt;script&gt;\n$( \"#old\" ).click(function() {\n  $( \"input\" ).trigger( \"focus\" );\n});\n$( \"#new\" ).click(function() {\n  $( \"input\" ).triggerHandler( \"focus\" );\n});\n$( \"input\" ).focus(function() {\n  $( \"&lt;span&gt;Focused!&lt;/span&gt;\" ).appendTo( \"body\" ).fadeOut( 1000 );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/triggerHandler\" class=\"_attribution-link\">https://api.jquery.com/triggerHandler</a>\n  </p>\n</div>\n","undelegate":"<h1 class=\"entry-title\">.undelegate()</h1> <div class=\"entry-content\"> <article id=\"undelegate1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.undelegate()</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Remove a handler from the event for all elements which match the current selector, based upon a specific set of root elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.2/\">1.4.2</a></span><a id=\"undelegate\" href=\"#undelegate\">.undelegate()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.2/\">1.4.2</a></span><a id=\"undelegate-selector-eventType\" href=\"#undelegate-selector-eventType\">.undelegate( selector, eventType )</a> </h4> <ul> <li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A selector which will be used to filter the event results.</div> </li> <li> <div><strong>eventType</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing a JavaScript event type, such as \"click\" or \"keydown\"</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.2/\">1.4.2</a></span><a id=\"undelegate-selector-eventType-handler\" href=\"#undelegate-selector-eventType-handler\">.undelegate( selector, eventType, handler )</a> </h4> <ul> <li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A selector which will be used to filter the event results.</div> </li> <li> <div><strong>eventType</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing a JavaScript event type, such as \"click\" or \"keydown\"</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>A function to execute at the time the event is triggered.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"undelegate-selector-events\" href=\"#undelegate-selector-events\">.undelegate( selector, events )</a> </h4> <ul> <li> <div><strong>selector</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A selector which will be used to filter the event results.</div> </li> <li> <div><strong>events</strong></div> <div>Type: <a href=\"types#PlainObject\">PlainObject</a> </div> <div>An object of one or more event types and previously bound functions to unbind from them.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.6/\">1.6</a></span><a id=\"undelegate-namespace\" href=\"#undelegate-namespace\">.undelegate( namespace )</a> </h4> <ul><li> <div><strong>namespace</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing a namespace to unbind all events from.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.undelegate()</code> method is a way of removing event handlers that have been bound using <a href=\"delegate\"><code>.delegate()</code></a>. <strong>As of jQuery 1.7</strong>, the <a href=\"on\"><code>.on()</code></a> and <a href=\"off\"><code>.off()</code></a> methods are preferred for attaching and removing event handlers.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Can bind and unbind events to the colored button.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;undelegate demo&lt;/title&gt;\n  &lt;style&gt;\n  button {\n    margin: 5px;\n  }\n  button#theone {\n    color: red;\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button id=\"theone\"&gt;Does nothing...&lt;/button&gt;\n&lt;button id=\"bind\"&gt;Bind Click&lt;/button&gt;\n&lt;button id=\"unbind\"&gt;Unbind Click&lt;/button&gt;\n&lt;div style=\"display:none;\"&gt;Click!&lt;/div&gt;\n \n&lt;script&gt;\nfunction aClick() {\n  $( \"div\" ).show().fadeOut( \"slow\" );\n}\n$( \"#bind\" ).click(function() {\n  $( \"body\" )\n    .delegate( \"#theone\", \"click\", aClick )\n    .find( \"#theone\" ).text( \"Can Click!\" );\n});\n$( \"#unbind\" ).click(function() {\n  $( \"body\" )\n    .undelegate( \"#theone\", \"click\", aClick )\n    .find( \"#theone\" ).text( \"Does nothing...\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>To unbind all delegated events from all paragraphs, write:</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).undelegate();</pre> </div> <div class=\"entry-example\" id=\"example-2\"> <p>To unbind all delegated click events from all paragraphs, write:</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).undelegate( \"click\" );</pre> </div> <div class=\"entry-example\" id=\"example-3\"> <p>To undelegate just one previously bound handler, pass the function in as the third argument:</p> <pre class=\"syntaxhighlighter javascript\">var foo = function () {\n  // Code to handle some kind of event\n};\n \n// ... Now foo will be called when paragraphs are clicked ...\n$( \"body\" ).delegate( \"p\", \"click\", foo );\n \n// ... foo will no longer be called.\n$( \"body\" ).undelegate( \"p\", \"click\", foo );</pre> </div> <div class=\"entry-example\" id=\"example-4\"> <p>To unbind all delegated events by their namespace:</p> <pre class=\"syntaxhighlighter javascript\">var foo = function() {\n  // Code to handle some kind of event\n};\n \n// Delegate events under the \".whatever\" namespace\n$( \"form\" ).delegate( \":button\", \"click.whatever\", foo );\n \n$( \"form\" ).delegate( \"input[type='text'] \", \"keypress.whatever\", foo );\n \n// Unbind all events delegated under the \".whatever\" namespace\n$( \"form\" ).undelegate( \".whatever\" );</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/undelegate\" class=\"_attribution-link\">https://api.jquery.com/undelegate</a>\n  </p>\n</div>\n","unbind":"<h1 class=\"entry-title\">.unbind()</h1> <div class=\"entry-content\"> <article id=\"unbind1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.unbind( eventType [, handler ] )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Remove a previously-attached event handler from the elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"unbind-eventType-handler\" href=\"#unbind-eventType-handler\">.unbind( eventType [, handler ] )</a> </h4> <ul> <li> <div><strong>eventType</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing a JavaScript event type, such as <code>click</code> or <code>submit</code>.</div> </li> <li> <div><strong>handler</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Event\">Event</a> eventObject )</div> <div>The function that is to be no longer executed.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.3/\">1.4.3</a></span><a id=\"unbind-eventType-false\" href=\"#unbind-eventType-false\">.unbind( eventType, false )</a> </h4> <ul> <li> <div><strong>eventType</strong></div> <div>Type: <a href=\"types#String\">String</a> </div> <div>A string containing a JavaScript event type, such as <code>click</code> or <code>submit</code>.</div> </li> <li> <div><strong>false</strong></div> <div>Type: <a href=\"types#Boolean\">Boolean</a> </div> <div>Unbinds the corresponding 'return false' function that was bound using <code>.bind( eventType, false )</code>.</div> </li> </ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"unbind-event\" href=\"#unbind-event\">.unbind( event )</a> </h4> <ul><li> <div><strong>event</strong></div> <div>Type: <a href=\"types#Event\">Event</a> </div> <div>A <a href=\"https://api.jquery.com/category/events/event-object/\"><code>jQuery.Event</code></a> object.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"unbind\" href=\"#unbind\">.unbind()</a> </h4> <ul><li><div class=\"null-signature\">This signature does not accept any arguments.</div></li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Event handlers attached with <code>.bind()</code> can be removed with <code>.unbind()</code>. (As of jQuery 1.7, the <a href=\"on\"><code>.on()</code></a> and <a href=\"off\"><code>.off()</code></a> methods are preferred to attach and remove event handlers on elements.) In the simplest case, with no arguments, <code>.unbind()</code> removes all handlers attached to the elements:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#foo\" ).unbind();</pre> <p>This version removes the handlers regardless of type. To be more precise, we can pass an event type:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#foo\").unbind( \"click\" );</pre> <p>By specifying the <code>click</code> event type, only handlers for that event type will be unbound. This approach can still have negative ramifications if other scripts might be attaching behaviors to the same element, however. Robust and extensible applications typically demand the two-argument version for this reason:</p> <pre class=\"syntaxhighlighter javascript\">var handler = function() {\n  alert( \"The quick brown fox jumps over the lazy dog.\" );\n};\n$( \"#foo\" ).bind( \"click\", handler );\n$( \"#foo\" ).unbind( \"click\", handler );</pre> <p>By naming the handler, we can be assured that no other functions are accidentally removed. Note that the following will <em>not</em> work:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#foo\" ).bind( \"click\", function() {\n  alert( \"The quick brown fox jumps over the lazy dog.\" );\n});\n \n// Will NOT work\n$( \"#foo\" ).unbind( \"click\", function() {\n  alert( \"The quick brown fox jumps over the lazy dog.\" );\n});</pre> <p>Even though the two functions are identical in content, they are created separately and so JavaScript is free to keep them as distinct function objects. To unbind a particular handler, we need a reference to that function and not a different one that happens to do the same thing.</p> <div class=\"warning\"> <p><strong>Note:</strong> Using a proxied function to unbind an event on an element will unbind all proxied functions on that element, as the same proxy function is used for all proxied events. To allow unbinding a specific event, use unique class names on the event (e.g. <code>click.proxy1</code>, <code>click.proxy2</code>) when attaching them.</p> </div> <h4>Using Namespaces</h4> <p>Instead of maintaining references to handlers in order to unbind them, we can namespace the events and use this capability to narrow the scope of our unbinding actions. As shown in the discussion for the <code>.bind()</code> method, namespaces are defined by using a period (<code>.</code>) character when binding a handler:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#foo\" ).bind( \"click.myEvents\", handler );</pre> <p>When a handler is bound in this fashion, we can still unbind it the normal way:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#foo\" ).unbind( \"click\" );</pre> <p>However, if we want to avoid affecting other handlers, we can be more specific:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#foo\" ).unbind( \"click.myEvents\" );</pre> <p>We can also unbind all of the handlers in a namespace, regardless of event type:</p> <pre class=\"syntaxhighlighter javascript\">$( \"#foo\" ).unbind( \".myEvents\" );</pre> <p>It is particularly useful to attach namespaces to event bindings when we are developing plug-ins or otherwise writing code that may interact with other event-handling code in the future.</p> <h4>Using the Event Object</h4> <p>The third form of the <code>.unbind()</code> method is used when we wish to unbind a handler from within itself. For example, suppose we wish to trigger an event handler only three times:</p> <pre class=\"syntaxhighlighter javascript\">var timesClicked = 0;\n$( \"#foo\" ).bind( \"click\", function( event ) {\n  alert( \"The quick brown fox jumps over the lazy dog.\" );\n  timesClicked++;\n  if ( timesClicked &gt;= 3 ) {\n    $( this ).unbind( event );\n  }\n});</pre> <p>The handler in this case must take a parameter, so that we can capture the event object and use it to unbind the handler after the third click. The event object contains the context necessary for <code>.unbind()</code> to know which handler to remove. This example is also an illustration of a closure. Since the handler refers to the <code>timesClicked</code> variable, which is defined outside the function, incrementing the variable has an effect even between invocations of the handler.</p> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Can bind and unbind events to the colored button.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;unbind demo&lt;/title&gt;\n  &lt;style&gt;\n  button {\n    margin: 5px;\n  }\n  button#theone {\n    color: red;\n    background: yellow;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button id=\"theone\"&gt;Does nothing...&lt;/button&gt;\n&lt;button id=\"bind\"&gt;Bind Click&lt;/button&gt;\n&lt;button id=\"unbind\"&gt;Unbind Click&lt;/button&gt;\n&lt;div style=\"display:none;\"&gt;Click!&lt;/div&gt;\n \n&lt;script&gt;\nfunction aClick() {\n  $( \"div\" ).show().fadeOut( \"slow\" );\n}\n$( \"#bind\" ).click(function() {\n  $( \"#theone\" )\n    .bind( \"click\", aClick )\n    .text( \"Can Click!\" );\n});\n$( \"#unbind\" ).click(function() {\n  $( \"#theone\" )\n    .unbind( \"click\", aClick )\n    .text( \"Does nothing...\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>To unbind all events from all paragraphs, write:</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).unbind();</pre> </div> <div class=\"entry-example\" id=\"example-2\"> <p>To unbind all click events from all paragraphs, write:</p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).unbind( \"click\" );</pre> </div> <div class=\"entry-example\" id=\"example-3\"> <p>To unbind just one previously bound handler, pass the function in as the second argument:</p> <pre class=\"syntaxhighlighter javascript\">var foo = function() {\n  // Code to handle some kind of event\n};\n \n$( \"p\" ).bind( \"click\", foo ); // ... Now foo will be called when paragraphs are clicked ...\n \n$( \"p\" ).unbind( \"click\", foo ); // ... foo will no longer be called.</pre> </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/unbind\" class=\"_attribution-link\">https://api.jquery.com/unbind</a>\n  </p>\n</div>\n","visible-selector":"<h1 class=\"entry-title\">:visible Selector</h1> <div class=\"entry-content\"> <article id=\"visible1\" class=\"entry selector\"><h2 class=\"section-title\"><span>visible selector</span></h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Selects all elements that are visible.</p> <ul class=\"signatures\"><li class=\"signature\"><h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span>jQuery( \":visible\" )</h4></li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>Elements are considered visible if they consume space in the document. Visible elements have a width or height that is greater than zero.</p> <p>Elements with <code>visibility: hidden</code> or <code>opacity: 0</code> are considered visible, since they still consume space in the layout.</p> <p>Elements that are not in a document are considered hidden; jQuery does not have a way to know if they will be visible when appended to a document since it depends on the applicable styles.</p> <p>This selector is the opposite of the <a href=\"hidden-selector\"><code>:hidden</code></a> selector. So, every element selected by <code>:visible</code> isn't selected by <code>:hidden</code> and vice versa.</p> <p>All <code>option</code> elements are considered hidden, regardless of their <code>selected</code> state.</p> <p>During animations that hide an element, the element is considered visible until the end of the animation. During animations to show an element, the element is considered visible at the start at the animation.</p> <p>How <code>:visible</code> is calculated was changed in jQuery 1.3.2. The <a href=\"http://blog.jquery.com/2009/02/20/jquery-1-3-2-released/\">release notes</a> outline the changes in more detail.</p> <p>jQuery 3 slightly modifies the meaning of <code>:visible</code> (and therefore of <a href=\"hidden-selector\"><code>:hidden</code></a>). Starting with this version, elements will be considered <code>:visible</code> if they have any layout boxes, including those of zero width and/or height. For example, <code>br</code> elements and inline elements with no content will be selected by the <code>:visible</code> selector.</p> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> Because <code>:visible</code> is a jQuery extension and not part of the CSS specification, queries using <code>:visible</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. To achieve the best performance when using <code>:visible</code> to select elements, first select the elements using a pure CSS selector, then use <a href=\"filter\"><code>.filter(\":visible\")</code></a>. </li> <li> Using this selector heavily can have performance implications, as it may force the browser to re-render the page before it can determine visibility. Tracking the visibility of elements via other methods, using a class for example, can provide better performance. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Make all visible divs turn yellow on click.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;visible demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    width: 50px;\n    height: 40px;\n    margin: 5px;\n    border: 3px outset green;\n    float: left;\n  }\n  .starthidden {\n    display: none;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button&gt;Show hidden to see they don't change&lt;/button&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div class=\"starthidden\"&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div&gt;&lt;/div&gt;\n&lt;div style=\"display:none;\"&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"div:visible\" ).click(function() {\n  $( this ).css( \"background\", \"yellow\" );\n});\n$( \"button\" ).click(function() {\n  $( \"div:hidden\" ).show( \"fast\" );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/visible-selector\" class=\"_attribution-link\">https://api.jquery.com/visible-selector</a>\n  </p>\n</div>\n","width":"<h1 class=\"entry-title\">.width()</h1> <div class=\"entry-content\"> Get the current computed width for the first element in the set of matched elements or set the width of every matched element.<div class=\"toc\"> <h4><span>Contents:</span></h4> <ul class=\"toc-list\"> <li> <a href=\"#width1\">.width()</a><ul><li><a href=\"#width\">.width()</a></li></ul> </li> <li> <a href=\"#width2\">.width( value )</a><ul> <li><a href=\"#width-value\">.width( value )</a></li> <li><a href=\"#width-function\">.width( function )</a></li> </ul> </li> </ul> </div>\n<article id=\"width1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.width()</span><span class=\"returns\">Returns: <a href=\"types#Number\">Number</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Get the current computed width for the first element in the set of matched elements.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"width\" href=\"#width\">.width()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The difference between <code>.css(width)</code> and <code>.width()</code> is that the latter returns a unit-less pixel value (for example, <code>400</code>) while the former returns a value with units intact (for example, <code>400px</code>). The <code>.width()</code> method is recommended when an element's width needs to be used in a mathematical calculation.</p> <figure> <img src=\"https://api.jquery.com/resources/0042_04_04.png\"> <figcaption>Figure 1 - Illustration of the measured width</figcaption> </figure> <p>This method is also able to find the width of the window and document.</p> <pre class=\"syntaxhighlighter javascript\">// Returns width of browser viewport\n$( window ).width();\n \n// Returns width of HTML document\n$( document ).width();</pre> <p>Note that <code>.width()</code> will always return the content width, regardless of the value of the CSS <code>box-sizing</code> property. As of jQuery 1.8, this may require retrieving the CSS width plus <code>box-sizing</code> property and then subtracting any potential border and padding on each element when the element has <code>box-sizing: border-box</code>. To avoid this penalty, use <code>.css( \"width\" )</code> rather than <code>.width()</code>.</p> <div class=\"warning\"> <p><strong>Note:</strong> Although <code>style</code> and <code>script</code> tags will report a value for <code>.width()</code> or <code>height()</code> when absolutely positioned and given <code>display:block</code>, it is strongly discouraged to call those methods on these tags. In addition to being a bad practice, the results may also prove unreliable.</p> </div> </div> <h3>Additional Notes:</h3> <div class=\"longdesc\"><ul> <li> The number returned by dimensions-related APIs, including <code>.width()</code>, may be fractional in some cases. Code should not assume it is an integer. Also, dimensions may be incorrect when the page is zoomed by the user; browsers do not expose an API to detect this condition. </li> <li> The value reported by <code>.width()</code> is not guaranteed to be accurate when the element or its parent is hidden. To get an accurate value, ensure the element is visible before using <code>.width()</code>. jQuery will attempt to temporarily show and then re-hide an element in order to measure its dimensions, but this is unreliable and (even when accurate) can significantly impact page performance. This show-and-rehide measurement feature may be removed in a future version of jQuery. </li> </ul></div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Show various widths. Note the values are from the iframe so might be smaller than you expected. The yellow highlight shows the iframe body.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;width demo&lt;/title&gt;\n  &lt;style&gt;\n  body {\n    background: yellow;\n  }\n  button {\n    font-size: 12px;\n    margin: 2px;\n  }\n  p {\n    width: 150px;\n    border: 1px red solid;\n  }\n  div {\n    color: red;\n    font-weight: bold;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;button id=\"getp\"&gt;Get Paragraph Width&lt;/button&gt;\n&lt;button id=\"getd\"&gt;Get Document Width&lt;/button&gt;\n&lt;button id=\"getw\"&gt;Get Window Width&lt;/button&gt;\n&lt;div&gt;&amp;nbsp;&lt;/div&gt;\n&lt;p&gt;\n  Sample paragraph to test width\n&lt;/p&gt;\n \n&lt;script&gt;\nfunction showWidth( ele, w ) {\n  $( \"div\" ).text( \"The width for the \" + ele + \" is \" + w + \"px.\" );\n}\n$( \"#getp\" ).click(function() {\n  showWidth( \"paragraph\", $( \"p\" ).width() );\n});\n$( \"#getd\" ).click(function() {\n  showWidth( \"document\", $( document ).width() );\n});\n$(\"#getw\").click(function() {\n  showWidth( \"window\", $( window ).width() );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article><article id=\"width2\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.width( value )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Set the CSS width of each element in the set of matched elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"width-value\" href=\"#width-value\">.width( value )</a> </h4> <ul><li> <div><strong>value</strong></div> <div>Type: <a href=\"types#String\">String</a> or <a href=\"types#Number\">Number</a> </div> <div>An integer representing the number of pixels, or an integer along with an optional unit of measure appended (as a string).</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4.1/\">1.4.1</a></span><a id=\"width-function\" href=\"#width-function\">.width( function )</a> </h4> <ul><li> <div><strong>function</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Integer\">Integer</a> index, <a href=\"types#Integer\">Integer</a> value ) =&gt; <a href=\"types#String\">String</a> or <a href=\"types#Number\">Number</a> </div> <div>A function returning the width to set. Receives the index position of the element in the set and the old width as arguments. Within the function, <code>this</code> refers to the current element in the set.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc-1\"> <p>When calling <code>.width(\"value\")</code>, the value can be either a string (number and unit) or a number. If only a number is provided for the value, jQuery assumes a pixel unit. If a string is provided, however, any valid CSS measurement may be used for the width (such as <code>100px</code>, <code>50%</code>, or <code>auto</code>). Note that in modern browsers, the CSS width property does not include padding, border, or margin, unless the <code>box-sizing</code> CSS property is used.</p> <p>If no explicit unit is specified (like \"em\" or \"%\") then \"px\" is assumed.</p> <p>Note that <code>.width(\"value\")</code> sets the content width of the box regardless of the value of the CSS <code>box-sizing</code> property.</p> </div> <section class=\"entry-examples\" id=\"entry-examples-1\"><h2>Example:</h2>\n<div class=\"entry-example\" id=\"example-1-0\"> <p>Change the width of each div the first time it is clicked (and change its color).</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;width demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    width: 70px;\n    height: 50px;\n    float: left;\n    margin: 5px;\n    background: red;\n    cursor: pointer;\n  }\n  .mod {\n    background: blue;\n    cursor: default;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;d&lt;/div&gt;\n&lt;div&gt;d&lt;/div&gt;\n&lt;div&gt;d&lt;/div&gt;\n&lt;div&gt;d&lt;/div&gt;\n&lt;div&gt;d&lt;/div&gt;\n \n&lt;script&gt;\nvar modWidth = 50;\n$( \"div\" ).one( \"click\", function() {\n  $( this ).width( modWidth ).addClass( \"mod\" );\n  modWidth -= 8;\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/width\" class=\"_attribution-link\">https://api.jquery.com/width</a>\n  </p>\n</div>\n","wrap":"<h1 class=\"entry-title\">.wrap()</h1> <div class=\"entry-content\"> <article id=\"wrap1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.wrap( wrappingElement )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Wrap an HTML structure around each element in the set of matched elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"wrap-wrappingElement\" href=\"#wrap-wrappingElement\">.wrap( wrappingElement )</a> </h4> <ul><li> <div><strong>wrappingElement</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> or <a href=\"types#htmlString\">htmlString</a> or <a href=\"types#Element\">Element</a> or <a href=\"types#jQuery\">jQuery</a> </div> <div>A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements. When you pass a jQuery collection containing more than one element, or a selector matching more than one element, the first element will be used.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"wrap-function\" href=\"#wrap-function\">.wrap( function )</a> </h4> <ul><li> <div><strong>function</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Integer\">Integer</a> index ) =&gt; <a href=\"types#String\">String</a> or <a href=\"types#jQuery\">jQuery</a> </div> <div>A callback function returning the HTML content or jQuery object to wrap around the matched elements. Receives the index position of the element in the set as an argument. Within the function, <code>this</code> refers to the current element in the set.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.wrap()</code> function can take any string or object that could be passed to the <code>$()</code> factory function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. A copy of this structure will be wrapped around each of the elements in the set of matched elements. This method returns the original set of elements for chaining purposes.</p> <p>Consider the following HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;/div&gt;\n&lt;/div&gt;</pre> <p>Using <code>.wrap()</code>, we can insert an HTML structure around the inner <code>&lt;div&gt;</code> elements like so:</p> <pre class=\"syntaxhighlighter javascript\">$( \".inner\" ).wrap( \"&lt;div class='new'&gt;&lt;/div&gt;\" );</pre> <p>The new <code>&lt;div&gt;</code> element is created on the fly and added to the DOM. The result is a new <code>&lt;div&gt;</code> wrapped around each matched element:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;div class=\"new\"&gt;\n    &lt;div class=\"inner\"&gt;Hello&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"new\"&gt;\n    &lt;div class=\"inner\"&gt;Goodbye&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</pre> <p>The second version of this method allows us to instead specify a callback function. This callback function will be called once for every matched element; it should return a DOM element, jQuery object, or HTML snippet in which to wrap the corresponding element. For example:</p> <pre class=\"syntaxhighlighter javascript\">$( \".inner\" ).wrap(function() {\n  return \"&lt;div class='\" + $( this ).text() + \"'&gt;&lt;/div&gt;\";\n});</pre> <p>This will cause each <code>&lt;div&gt;</code> to have a class corresponding to the text it wraps:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;div class=\"Hello\"&gt;\n    &lt;div class=\"inner\"&gt;Hello&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"Goodbye\"&gt;\n    &lt;div class=\"inner\"&gt;Goodbye&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</pre> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Wrap a new div around all of the paragraphs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;wrap demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    border: 2px solid blue;\n  }\n  p {\n    background: yellow;\n    margin: 4px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Hello&lt;/p&gt;\n&lt;p&gt;cruel&lt;/p&gt;\n&lt;p&gt;World&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).wrap( \"&lt;div&gt;&lt;/div&gt;\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Wraps a newly created tree of objects around the spans. Notice anything in between the spans gets left out like the &lt;strong&gt; (red text) in this example. Even the white space between spans is left out. Click View Source to see the original html.&gt;</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;wrap demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    border: 2px blue solid;\n    margin: 2px;\n    padding: 2px;\n  }\n  p {\n    background: yellow;\n    margin: 2px;\n    padding: 2px;\n  }\n  strong {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;span&gt;Span Text&lt;/span&gt;\n&lt;strong&gt;What about me?&lt;/strong&gt;\n&lt;span&gt;Another One&lt;/span&gt;\n \n&lt;script&gt;\n$( \"span\" ).wrap( \"&lt;div&gt;&lt;div&gt;&lt;p&gt;&lt;em&gt;&lt;b&gt;&lt;/b&gt;&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-2\"> <p>Wrap a new div around all of the paragraphs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;wrap demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    border: 2px solid blue;\n  }\n  p {\n    background: yellow;\n    margin: 4px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Hello&lt;/p&gt;\n&lt;p&gt;cruel&lt;/p&gt;\n&lt;p&gt;World&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).wrap( document.createElement( \"div\" ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-3\"> <p>Wrap a jQuery object double depth div around all of the paragraphs. Notice it doesn't move the object but just clones it to wrap around its target.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;wrap demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    border: 2px solid blue;\n    margin: 2px;\n    padding: 2px;\n  }\n  .doublediv {\n    border-color: red;\n  }\n  p {\n    background: yellow;\n    margin: 4px;\n    font-size: 14px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Hello&lt;/p&gt;\n&lt;p&gt;cruel&lt;/p&gt;\n&lt;p&gt;World&lt;/p&gt;\n&lt;div class=\"doublediv\"&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"p\" ).wrap( $( \".doublediv\" ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/wrap\" class=\"_attribution-link\">https://api.jquery.com/wrap</a>\n  </p>\n</div>\n","val":"<h1 class=\"entry-title\">.val()</h1> <div class=\"entry-content\"> Get the current value of the first element in the set of matched elements or set the value of every matched element.<div class=\"toc\"> <h4><span>Contents:</span></h4> <ul class=\"toc-list\"> <li> <a href=\"#val1\">.val()</a><ul><li><a href=\"#val\">.val()</a></li></ul> </li> <li> <a href=\"#val2\">.val( value )</a><ul> <li><a href=\"#val-value\">.val( value )</a></li> <li><a href=\"#val-function\">.val( function )</a></li> </ul> </li> </ul> </div>\n<article id=\"val1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.val()</span><span class=\"returns\">Returns: <a href=\"types#String\">String</a> or <a href=\"types#Number\">Number</a> or <a href=\"types#Array\">Array</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Get the current value of the first element in the set of matched elements.</p> <ul class=\"signatures\"><li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"val\" href=\"#val\">.val()</a> </h4> <ul><li><div class=\"null-signature\">This method does not accept any arguments.</div></li></ul> </li></ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.val()</code> method is primarily used to get the values of form elements such as <code>input</code>, <code>select</code> and <code>textarea</code>. When the first element in the collection is a <code>select-multiple</code> (i.e., a <code>select</code> element with the <code>multiple</code> attribute set), it returns an array containing the value of each selected option, or <code>null</code> if no options are selected. When called on an empty collection, it returns <code>undefined</code>.</p> <p>For selects and checkboxes, you can also use the <a href=\"selected-selector\">:selected</a> and <a href=\"checked-selector\">:checked</a> selectors to get at values, for example:</p> <pre class=\"syntaxhighlighter javascript\">// Get the value from a dropdown select\n$( \"select.foo option:selected\").val();\n \n// Get the value from a dropdown select even easier\n$( \"select.foo\" ).val();\n \n// Get the value from a checked checkbox\n$( \"input:checkbox:checked\" ).val();\n \n// Get the value from a set of radio buttons\n$( \"input:radio[name=bar]:checked\" ).val();</pre> <div class=\"warning\"> <p><strong>Note: </strong> At present, using <code>.val()</code> on textarea elements strips carriage return characters from the browser-reported value. When this value is sent to the server via XHR however, carriage returns are preserved (or added by browsers which do not include them in the raw value). A workaround for this issue can be achieved using a valHook as follows:</p> </div> <pre class=\"syntaxhighlighter javascript\">$.valHooks.textarea = {\n  get: function( elem ) {\n    return elem.value.replace( /\\r?\\n/g, \"\\r\\n\" );\n  }\n};</pre> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Get the single value from a single select and an array of values from a multiple select and display their values.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;val demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    color: red;\n    margin: 4px;\n  }\n  b {\n    color: blue;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;&lt;/p&gt;\n \n&lt;select id=\"single\"&gt;\n  &lt;option&gt;Single&lt;/option&gt;\n  &lt;option&gt;Single2&lt;/option&gt;\n&lt;/select&gt;\n \n&lt;select id=\"multiple\" multiple=\"multiple\"&gt;\n  &lt;option selected=\"selected\"&gt;Multiple&lt;/option&gt;\n  &lt;option&gt;Multiple2&lt;/option&gt;\n  &lt;option selected=\"selected\"&gt;Multiple3&lt;/option&gt;\n&lt;/select&gt;\n \n&lt;script&gt;\nfunction displayVals() {\n  var singleValues = $( \"#single\" ).val();\n  var multipleValues = $( \"#multiple\" ).val() || [];\n  $( \"p\" ).html( \"&lt;b&gt;Single:&lt;/b&gt; \" + singleValues +\n    \" &lt;b&gt;Multiple:&lt;/b&gt; \" + multipleValues.join( \", \" ) );\n}\n \n$( \"select\" ).change( displayVals );\ndisplayVals();\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Find the value of an input box.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;val demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    color: blue;\n    margin: 8px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;input type=\"text\" value=\"some text\"&gt;\n&lt;p&gt;&lt;/p&gt;\n \n&lt;script&gt;\n$( \"input\" )\n  .keyup(function() {\n    var value = $( this ).val();\n    $( \"p\" ).text( value );\n  })\n  .keyup();\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article><article id=\"val2\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.val( value )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Set the value of each element in the set of matched elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.0/\">1.0</a></span><a id=\"val-value\" href=\"#val-value\">.val( value )</a> </h4> <ul><li> <div><strong>value</strong></div> <div>Type: <a href=\"types#String\">String</a> or <a href=\"types#Number\">Number</a> or <a href=\"types#Array\">Array</a> </div> <div>A string of text, a number, or an array of strings corresponding to the value of each matched element to set as selected/checked.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"val-function\" href=\"#val-function\">.val( function )</a> </h4> <ul><li> <div><strong>function</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Integer\">Integer</a> index, <a href=\"types#String\">String</a> value ) =&gt; <a href=\"types#String\">String</a> </div> <div>A function returning the value to set. <code>this</code> is the current element. Receives the index position of the element in the set and the old value as arguments.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc-1\"> <p>This method is typically used to set the values of form fields. </p> <p><code>val()</code> allows you to pass an array of element values. This is useful when working on a jQuery object containing elements like <code>&lt;input type=\"checkbox\"&gt;</code>, <code>&lt;input type=\"radio\"&gt;</code>, and <code>&lt;option&gt;</code>s inside of a <code>&lt;select&gt;</code>. In this case, the <code>input</code>s and the <code>option</code>s having a <code>value</code> that matches one of the elements of the array will be checked or selected while those having a <code>value</code> that don't match one of the elements of the array will be unchecked or unselected, depending on the type. In case of <code>&lt;input type=\"radio\"&gt;</code>s that are part of a radio group and <code>&lt;select&gt;</code>s, any previously selected element will be deselected.</p> <p>Setting values using this method (or using the native <code>value</code> property) does not cause the dispatch of the <code>change</code> event. For this reason, the relevant event handlers will not be executed. If you want to execute them, you should call <code>.trigger( \"change\" )</code> after setting the value.</p> <p>The <code>.val()</code> method allows us to set the value by passing in a function. As of jQuery 1.4, the function is passed two arguments, the current element's index and its current value: </p> <pre class=\"syntaxhighlighter javascript\">$( \"input:text.items\" ).val(function( index, value ) {\n  return value + \" \" + this.className;\n});</pre> <p>This example appends the string \" items\" to the text inputs' values.</p> </div> <section class=\"entry-examples\" id=\"entry-examples-1\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-1-0\"> <p>Set the value of an input box.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;val demo&lt;/title&gt;\n  &lt;style&gt;\n  button {\n    margin: 4px;\n    cursor: pointer;\n  }\n  input {\n    margin: 4px;\n    color: blue;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;div&gt;\n  &lt;button&gt;Feed&lt;/button&gt;\n  &lt;button&gt;the&lt;/button&gt;\n  &lt;button&gt;Input&lt;/button&gt;\n&lt;/div&gt;\n&lt;input type=\"text\" value=\"click a button\"&gt;\n \n&lt;script&gt;\n$( \"button\" ).click(function() {\n  var text = $( this ).text();\n  $( \"input\" ).val( text );\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1-1\"> <p>Use the function argument to modify the value of an input box.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;val demo&lt;/title&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Type something and then click or tab out of the input.&lt;/p&gt;\n&lt;input type=\"text\" value=\"type something\"&gt;\n \n&lt;script&gt;\n$( \"input\" ).on( \"blur\", function() {\n  $( this ).val(function( i, val ) {\n    return val.toUpperCase();\n  });\n});\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1-2\"> <p>Set a single select, a multiple select, checkboxes and a radio button .</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;val demo&lt;/title&gt;\n  &lt;style&gt;\n  body {\n    color: blue;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;select id=\"single\"&gt;\n  &lt;option&gt;Single&lt;/option&gt;\n  &lt;option&gt;Single2&lt;/option&gt;\n&lt;/select&gt;\n \n&lt;select id=\"multiple\" multiple=\"multiple\"&gt;\n  &lt;option selected=\"selected\"&gt;Multiple&lt;/option&gt;\n  &lt;option&gt;Multiple2&lt;/option&gt;\n  &lt;option selected=\"selected\"&gt;Multiple3&lt;/option&gt;\n&lt;/select&gt;\n \n&lt;br&gt;\n&lt;input type=\"checkbox\" name=\"checkboxname\" value=\"check1\"&gt; check1\n&lt;input type=\"checkbox\" name=\"checkboxname\" value=\"check2\"&gt; check2\n&lt;input type=\"radio\" name=\"r\" value=\"radio1\"&gt; radio1\n&lt;input type=\"radio\" name=\"r\" value=\"radio2\"&gt; radio2\n \n&lt;script&gt;\n$( \"#single\" ).val( \"Single2\" );\n$( \"#multiple\" ).val([ \"Multiple2\", \"Multiple3\" ]);\n$( \"input\").val([ \"check1\", \"check2\", \"radio1\" ]);\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/val\" class=\"_attribution-link\">https://api.jquery.com/val</a>\n  </p>\n</div>\n","ajax_events":"<h1 class=\"entry-title\">Ajax Events</h1>  <p>Ajax requests produce a number of different events that you can subscribe to. Here's a full list of the events and in what order they are triggered.</p> <p>There are two types of events:</p> <h3>Local Events</h3> <p>These are callbacks that you can subscribe to within the Ajax request object, like so:</p> <pre class=\"syntaxhighlighter javascript\"> $.ajax({\n   beforeSend: function(){\n     // Handle the beforeSend event\n   },\n   complete: function(){\n     // Handle the complete event\n   }\n   // ......\n });</pre> <h3>Global Events</h3> <p>These events are triggered on the <code>document</code>, calling any handlers which may be listening. You can listen for these events like so:</p> <pre> $(document).bind(\"ajaxSend\", function(){\n   $(\"#loading\").show();\n }).bind(\"ajaxComplete\", function(){\n   $(\"#loading\").hide();\n });\n</pre> <p>Global events can be disabled for a particular Ajax request by passing in the global option, like so:</p> <pre class=\"syntaxhighlighter javascript\"> $.ajax({\n   url: \"test.html\",\n   global: false,\n   // ...\n });</pre> <h3>Events</h3> <p>This is the full list of Ajax events, and in the order in which they are triggered. The indented events are triggered for each and every Ajax request (unless a global option has been set). The ajaxStart and ajaxStop events are events that relate to all Ajax requests together. </p> <ul> <li> <b>ajaxStart</b> (Global Event)<br>This event is triggered if an Ajax request is started and no other Ajax requests are currently running. <ul> <li> <b>beforeSend</b> (Local Event)<br>This event, which is triggered before an Ajax request is started, allows you to modify the XMLHttpRequest object (setting additional headers, if need be.)</li> <li> <b>ajaxSend</b> (Global Event)<br>This global event is also triggered before the request is run.</li> <li> <b>success</b> (Local Event)<br>This event is only called if the request was successful (no errors from the server, no errors with the data).</li> <li> <b>ajaxSuccess</b> (Global Event)<br>This event is also only called if the request was successful.</li> <li> <b>error</b> (Local Event)<br>This event is only called if an error occurred with the request (you can never have both an error and a success callback with a request).</li> <li> <b>ajaxError</b> (Global Event)<br>This global event behaves the same as the local error event.</li> <li> <b>complete</b> (Local Event)<br>This event is called regardless of if the request was successful, or not. You will always receive a complete callback, even for synchronous requests.</li> <li> <b>ajaxComplete</b> (Global Event)<br>This event behaves the same as the complete event and will be triggered every time an Ajax request finishes.</li> </ul> </li> <li>\n<b>ajaxStop</b> (Global Event)<br>This global event is triggered if there are no more Ajax requests being processed.</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/Ajax_Events\" class=\"_attribution-link\">https://api.jquery.com/Ajax_Events</a>\n  </p>\n</div>\n","wrapall":"<h1 class=\"entry-title\">.wrapAll()</h1> <div class=\"entry-content\"> <article id=\"wrapAll1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.wrapAll( wrappingElement )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Wrap an HTML structure around all elements in the set of matched elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2/\">1.2</a></span><a id=\"wrapAll-wrappingElement\" href=\"#wrapAll-wrappingElement\">.wrapAll( wrappingElement )</a> </h4> <ul><li> <div><strong>wrappingElement</strong></div> <div>Type: <a href=\"types#Selector\">Selector</a> or <a href=\"types#htmlString\">htmlString</a> or <a href=\"types#Element\">Element</a> or <a href=\"types#jQuery\">jQuery</a> </div> <div>A selector, element, HTML string, or jQuery object specifying the structure to wrap around the matched elements.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"wrapAll-function\" href=\"#wrapAll-function\">.wrapAll( function )</a> </h4> <ul><li> <div><strong>function</strong></div> <div>Type: <a href=\"types#Function\">Function</a>() =&gt; <a href=\"types#String\">String</a> or <a href=\"types#jQuery\">jQuery</a> </div> <div>A callback function returning the HTML content or jQuery object to wrap around all the matched elements. Within the function, <code>this</code> refers to the first element in the set. <strong>Prior to jQuery 3.0</strong>, the callback was incorrectly called for every element in the set and received the index position of the element in the set as an argument.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.wrapAll()</code> function can take any string or object that could be passed to the <code>$()</code> function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. The structure will be wrapped around all of the elements in the set of matched elements, as a single group.</p> <p>Consider the following HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;/div&gt;\n&lt;/div&gt;</pre> <p>Using <code>.wrapAll()</code>, we can insert an HTML structure around the inner <code>&lt;div&gt;</code> elements like so:</p> <pre class=\"syntaxhighlighter javascript\">$( \".inner\" ).wrapAll( \"&lt;div class='new' /&gt;\");</pre> <p>The new <code>&lt;div&gt;</code> element is created on the fly and added to the DOM. The result is a new <code>&lt;div&gt;</code> wrapped around all matched elements:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;div class=\"new\"&gt;\n    &lt;div class=\"inner\"&gt;Hello&lt;/div&gt;\n    &lt;div class=\"inner\"&gt;Goodbye&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</pre> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Wrap a new div around all of the paragraphs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;wrapAll demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    border: 2px solid blue;\n  }\n  p {\n    background: yellow;\n    margin: 4px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Hello&lt;/p&gt;\n&lt;p&gt;cruel&lt;/p&gt;\n&lt;p&gt;World&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).wrapAll( \"&lt;div&gt;&lt;/div&gt;\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Wraps a newly created tree of objects around the spans. Notice anything in between the spans gets left out like the &lt;strong&gt; (red text) in this example. Even the white space between spans is left out. Click View Source to see the original html.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;wrapAll demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    border: 2px blue solid;\n    margin: 2px;\n    padding: 2px;\n  }\n  p {\n    background: yellow;\n    margin: 2px;\n    padding: 2px;\n  }\n  strong {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;span&gt;Span Text&lt;/span&gt;\n&lt;strong&gt;What about me?&lt;/strong&gt;\n&lt;span&gt;Another One&lt;/span&gt;\n \n&lt;script&gt;\n$( \"span\").wrapAll( \"&lt;div&gt;&lt;div&gt;&lt;p&gt;&lt;em&gt;&lt;b&gt;&lt;/b&gt;&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-2\"> <p>Wrap a new div around all of the paragraphs.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;wrapAll demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    border: 2px solid blue;\n  }\n  p {\n    background: yellow;\n    margin: 4px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Hello&lt;/p&gt;\n&lt;p&gt;cruel&lt;/p&gt;\n&lt;p&gt;World&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).wrapAll( document.createElement( \"div\" ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-3\"> <p>Wrap a jQuery object double depth div around all of the paragraphs. Notice it doesn't move the object but just clones it to wrap around its target.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;wrapAll demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    border: 2px solid blue;\n    margin: 2px;\n    padding: 2px;\n  }\n  .doublediv {\n    border-color: red;\n  }\n  p {\n    background: yellow;\n    margin: 4px;\n    font-size: 14px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Hello&lt;/p&gt;\n&lt;p&gt;cruel&lt;/p&gt;\n&lt;p&gt;World&lt;/p&gt;\n&lt;div class=\"doublediv\"&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;\n \n&lt;script&gt;\n$( \"p\" ).wrapAll( $( \".doublediv\" ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/wrapAll\" class=\"_attribution-link\">https://api.jquery.com/wrapAll</a>\n  </p>\n</div>\n","wrapinner":"<h1 class=\"entry-title\">.wrapInner()</h1> <div class=\"entry-content\"> <article id=\"wrapInner1\" class=\"entry method\"><h2 class=\"section-title\"> <span class=\"name\">.wrapInner( wrappingElement )</span><span class=\"returns\">Returns: <a href=\"types#jQuery\">jQuery</a></span> </h2> <div class=\"entry-wrapper\"> <p class=\"desc\"><strong>Description: </strong>Wrap an HTML structure around the content of each element in the set of matched elements.</p> <ul class=\"signatures\"> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.2/\">1.2</a></span><a id=\"wrapInner-wrappingElement\" href=\"#wrapInner-wrappingElement\">.wrapInner( wrappingElement )</a> </h4> <ul><li> <div><strong>wrappingElement</strong></div> <div>Type: <a href=\"types#htmlString\">htmlString</a> or <a href=\"types#Selector\">Selector</a> or <a href=\"types#jQuery\">jQuery</a> or <a href=\"types#Element\">Element</a> </div> <div>An HTML snippet, selector expression, jQuery object, or DOM element specifying the structure to wrap around the content of the matched elements.</div> </li></ul> </li> <li class=\"signature\"> <h4 class=\"name\"> <span class=\"version-details\">version added: <a href=\"https://api.jquery.com/category/version/1.4/\">1.4</a></span><a id=\"wrapInner-function\" href=\"#wrapInner-function\">.wrapInner( function )</a> </h4> <ul><li> <div><strong>function</strong></div> <div>Type: <a href=\"types#Function\">Function</a>( <a href=\"types#Integer\">Integer</a> index ) =&gt; <a href=\"types#String\">String</a> </div> <div>A callback function which generates a structure to wrap around the content of the matched elements. Receives the index position of the element in the set as an argument. Within the function, <code>this</code> refers to the current element in the set.</div> </li></ul> </li> </ul> <div class=\"longdesc\" id=\"entry-longdesc\"> <p>The <code>.wrapInner()</code> function can take any string or object that could be passed to the <code>$()</code> factory function to specify a DOM structure. This structure may be nested several levels deep, but should contain only one inmost element. The structure will be wrapped around the content of each of the elements in the set of matched elements.</p> <p>Consider the following HTML:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;Hello&lt;/div&gt;\n  &lt;div class=\"inner\"&gt;Goodbye&lt;/div&gt;\n&lt;/div&gt;</pre> <p>Using <code>.wrapInner()</code>, we can insert an HTML structure around the content of each inner <code>&lt;div&gt;</code> elements like so:</p> <pre class=\"syntaxhighlighter javascript\">$( \".inner\" ).wrapInner( \"&lt;div class='new'&gt;&lt;/div&gt;\");</pre> <p>The new <code>&lt;div&gt;</code> element is created on the fly and added to the DOM. The result is a new <code>&lt;div&gt;</code> wrapped around the content of each matched element:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;\n    &lt;div class=\"new\"&gt;Hello&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"inner\"&gt;\n    &lt;div class=\"new\"&gt;Goodbye&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</pre> <p>The second version of this method allows us to instead specify a callback function. This callback function will be called once for every matched element; it should return a DOM element, jQuery object, or HTML snippet in which to wrap the content of the corresponding element. For example:</p> <pre class=\"syntaxhighlighter javascript\">$( \".inner\" ).wrapInner(function() {\n  return \"&lt;div class='\" + this.nodeValue + \"'&gt;&lt;/div&gt;\";\n});</pre> <p>This will cause each <code>&lt;div&gt;</code> to have a class corresponding to the text it wraps:</p> <pre class=\"syntaxhighlighter xml\">&lt;div class=\"container\"&gt;\n  &lt;div class=\"inner\"&gt;\n    &lt;div class=\"Hello\"&gt;Hello&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"inner\"&gt;\n    &lt;div class=\"Goodbye\"&gt;Goodbye&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</pre> <p><strong>Note:</strong> When passing a selector string to the <code>.wrapInner()</code> function, the expected input is well formed HTML with correctly closed tags. Examples of valid input include:</p> <pre class=\"syntaxhighlighter javascript\">$( elem ).wrapInner( \"&lt;div class='test'&gt;&lt;/div&gt;\" );\n$( elem ).wrapInner( \"&lt;div class=\\\"test\\\"&gt;&lt;/div&gt;\" );</pre> </div> <section class=\"entry-examples\" id=\"entry-examples\"><h2>Examples:</h2>\n<div class=\"entry-example\" id=\"example-0\"> <p>Selects all paragraphs and wraps a bold tag around each of its contents.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;wrapInner demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    background: #bbf;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Hello&lt;/p&gt;\n&lt;p&gt;cruel&lt;/p&gt;\n&lt;p&gt;World&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).wrapInner( \"&lt;b&gt;&lt;/b&gt;\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-1\"> <p>Wraps a newly created tree of objects around the inside of the body.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;wrapInner demo&lt;/title&gt;\n  &lt;style&gt;\n  div {\n    border: 2px green solid;\n    margin: 2px;\n    padding: 2px;\n  }\n  p {\n    background: yellow;\n    margin: 2px;\n    padding: 2px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \nPlain old text, or is it?\n \n&lt;script&gt;\n$( \"body\" ).wrapInner( \"&lt;div&gt;&lt;div&gt;&lt;p&gt;&lt;em&gt;&lt;b&gt;&lt;/b&gt;&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;\" );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-2\"> <p>Selects all paragraphs and wraps a bold tag around each of its contents.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;wrapInner demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    background: #9f9;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Hello&lt;/p&gt;\n&lt;p&gt;cruel&lt;/p&gt;\n&lt;p&gt;World&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).wrapInner( document.createElement( \"b\" ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div> <div class=\"entry-example\" id=\"example-3\"> <p>Selects all paragraphs and wraps a jQuery object around each of its contents.</p> <pre class=\"syntaxhighlighter xml\">&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;wrapInner demo&lt;/title&gt;\n  &lt;style&gt;\n  p {\n    background: #9f9;\n  }\n  .red {\n    color: red;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n \n&lt;p&gt;Hello&lt;/p&gt;\n&lt;p&gt;cruel&lt;/p&gt;\n&lt;p&gt;World&lt;/p&gt;\n \n&lt;script&gt;\n$( \"p\" ).wrapInner( $( \"&lt;span class='red'&gt;&lt;/span&gt;\" ) );\n&lt;/script&gt;\n \n&lt;/body&gt;\n&lt;/html&gt;</pre> <h4>Demo:</h4>  </div></section> </div></article> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/wrapInner\" class=\"_attribution-link\">https://api.jquery.com/wrapInner</a>\n  </p>\n</div>\n","types":"<h1 class=\"entry-title\">Types</h1>   <p>JavaScript provides several built-in datatypes. In addition to those, this page documents virtual types like Selectors, enhanced pseudo-types like Events and some concepts you need to know about Functions. If you want to study these concepts in depth, take a look at <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\">MDN</a>. </p> <p>You should be able to try out most of the examples below by just copying them to your browser's JavaScript Console (Chrome, Safari with Develop menu activated, IE 8+) or <a href=\"http://www.getfirebug.com/\">Firebug</a> console (<a href=\"https://www.mozilla.org/en-US/firefox/new/\">Firefox</a>). </p> <p>Whenever an example mentions that a type defaults to a boolean value, the result is good to know when using that type in a boolean context: </p> <pre class=\"syntaxhighlighter javascript\">var x = \"\";\nif ( x ) {\n  console.log( \"x defaulted to true\" );\n} else {\n  console.log( \"x defaulted to false\" );\n}</pre> <p>In this case, <code>\"x defaulted to false\"</code> is printed. </p> <p>To keep the examples short, the invert (\"not\") operator and double-negation are used to show a boolean context: </p> <pre class=\"syntaxhighlighter javascript\">var x = \"\";\n!x // true\n!!x // false (Double negation: Since \"not (empty string)\" is true, negating that makes it false)</pre> <p>On to the actual types. </p> <div id=\"toctitle\"><h2>Contents</h2></div> <ol> <li class=\"toclevel-1\">\n<a href=\"#Anything\"><span class=\"toctext\">Anything</span></a> </li>\n<li class=\"toclevel-1\">\n<a href=\"#String\"><span class=\"toctext\">String</span></a> <ul> <li class=\"toclevel-2\"><a href=\"#Quoting\"><span class=\"toctext\">Quoting</span></a></li> <li class=\"toclevel-2\"><a href=\"#Built-in_Methods\"><span class=\"toctext\">Built-in Methods</span></a></li> <li class=\"toclevel-2\"><a href=\"#Length_Property\"><span class=\"toctext\">Length Property</span></a></li> <li class=\"toclevel-2\"><a href=\"#Boolean_Default\"><span class=\"toctext\">Boolean Default</span></a></li> </ul> </li> <li class=\"toclevel-1\"><a href=\"#htmlString\"><span class=\"toctext\">htmlString</span></a></li> <li class=\"toclevel-1\">\n<a href=\"#Number\"><span class=\"toctext\">Number</span></a> <ul> <li class=\"toclevel-2\"><a href=\"#Boolean_Default_2\"><span class=\"toctext\">Boolean Default</span></a></li> <li class=\"toclevel-2\"><a href=\"#Math\"><span class=\"toctext\">Math</span></a></li> <li class=\"toclevel-2\"><a href=\"#Parsing_Numbers\"><span class=\"toctext\">Parsing Numbers</span></a></li> <li class=\"toclevel-2\"><a href=\"#Numbers_to_Strings\"><span class=\"toctext\">Numbers to Strings</span></a></li> <li class=\"toclevel-2\"><a href=\"#NaN_and_Infinity\"><span class=\"toctext\">NaN and Infinity</span></a></li> <li class=\"toclevel-2\"><a href=\"#Integer\"><span class=\"toctext\">Integer</span></a></li> <li class=\"toclevel-2\"><a href=\"#Float\"><span class=\"toctext\">Float</span></a></li> </ul> </li> <li class=\"toclevel-1\"><a href=\"#Boolean\"><span class=\"toctext\">Boolean</span></a></li> <li class=\"toclevel-1\">\n<a href=\"#Object\"><span class=\"toctext\">Object</span></a> <ul> <li class=\"toclevel-2\"><a href=\"#Dot_Notation\"><span class=\"toctext\">Dot Notation</span></a></li> <li class=\"toclevel-2\"><a href=\"#Array_Notation\"><span class=\"toctext\">Array Notation</span></a></li> <li class=\"toclevel-2\"><a href=\"#Iteration\"><span class=\"toctext\">Iteration</span></a></li> <li class=\"toclevel-2\"><a href=\"#Boolean_default_3\"><span class=\"toctext\">Boolean default</span></a></li> <li class=\"toclevel-2\"><a href=\"#Prototype\"><span class=\"toctext\">Prototype</span></a></li> </ul> </li> <li class=\"toclevel-1\">\n<a href=\"#Array\"><span class=\"toctext\">Array</span></a> <ul> <li class=\"toclevel-2\"><a href=\"#Iteration_2\"><span class=\"toctext\">Iteration</span></a></li> <li class=\"toclevel-2\"><a href=\"#Boolean_Default_4\"><span class=\"toctext\">Boolean Default</span></a></li> <li class=\"toclevel-2\"><a href=\"#Array.3CType.3E_Notation\"><span class=\"toctext\">Array&lt;Type&gt; Notation</span></a></li> </ul> </li> <li class=\"toclevel-1\"><a href=\"#ArrayLikeObject\"><span class=\"toctext\">Array-Like Object</span></a></li> <li class=\"toclevel-1\"><a href=\"#PlainObject\"><span class=\"toctext\">PlainObject</span></a></li> <li class=\"toclevel-1\"><a href=\"#Date\"><span class=\"toctext\">Date</span></a></li> <li class=\"toclevel-1\">\n<a href=\"#Function\"><span class=\"toctext\">Function</span></a> <ul> <li class=\"toclevel-2\"><a href=\"#Arguments\"><span class=\"toctext\">Arguments</span></a></li> <li class=\"toclevel-2\"><a href=\"#Context.2C_Call_and_Apply\"><span class=\"toctext\">Context, Call and Apply</span></a></li> <li class=\"toclevel-2\"><a href=\"#Scope\"><span class=\"toctext\">Scope</span></a></li> <li class=\"toclevel-2\"><a href=\"#Closures\"><span class=\"toctext\">Closures</span></a></li> <li class=\"toclevel-2\"><a href=\"#Proxy_Pattern\"><span class=\"toctext\">Proxy Pattern</span></a></li> </ul> </li> <li class=\"toclevel-1\"><a href=\"#Selector\"><span class=\"toctext\">Selector</span></a></li> <li class=\"toclevel-1\"><a href=\"#Event\"><span class=\"toctext\">Event</span></a></li> <li class=\"toclevel-1\"><a href=\"#Element\"><span class=\"toctext\">Element</span></a></li> <li class=\"toclevel-1\"><a href=\"#Text\"><span class=\"toctext\">Text</span></a></li> <li class=\"toclevel-1\"><a href=\"#jQuery\"><span class=\"toctext\">jQuery</span></a></li> <li class=\"toclevel-1\"><a href=\"#XMLHttpRequest\"><span class=\"toctext\">XMLHttpRequest</span></a></li> <li class=\"toclevel-1\"><a href=\"#jqXHR\"><span class=\"toctext\">jqXHR</span></a></li> <li class=\"toclevel-1\"><a href=\"#Deferred\"><span class=\"toctext\">Deferred Object</span></a></li> <li class=\"toclevel-1\"><a href=\"#Promise\"><span class=\"toctext\">Promise Object</span></a></li> <li class=\"toclevel-1\"><a href=\"#Callbacks\"><span class=\"toctext\">Callbacks Object</span></a></li> <li class=\"toclevel-1\"><a href=\"#XMLDocument\"><span class=\"toctext\">XML Document</span></a></li> <li class=\"toclevel-1\"><a href=\"#Assert\"><span class=\"toctext\">Qunit's Assert Object</span></a></li> </ol> <h2 id=\"Anything\"> Anything </h2> <p>The <strong>Anything</strong> virtual type is used in jQuery documentation to indicate that any type can be used or should be expected. </p> <h2 id=\"String\"> String </h2> <p>A string in JavaScript is an immutable object that contains none, one or many characters. </p> <pre class=\"syntaxhighlighter javascript\">\"I'm a String in JavaScript!\"\n'So am I!'</pre> <p>The type of a string is \"string\". </p> <pre class=\"syntaxhighlighter javascript\">typeof \"some string\"; // \"string\"</pre> <h3 id=\"Quoting\"> Quoting </h3> <p>A string can be defined using single or double quotes. You can nest single quotes inside of double quotes, and the other way around. To mix double quotes with double quotes (or single with single), the nested ones have to be escaped with a backslash. </p> <pre class=\"syntaxhighlighter javascript\">\"You make 'me' sad.\"\n'That\\'s \"cranking\" good fun!'\n\"&lt;a href=\\\"home\\\"&gt;Home&lt;/a&gt;\"</pre> <h3 id=\"Built-in_Methods\"> Built-in Methods </h3> <p>A string in JavaScript has some built-in methods to manipulate the string, though the result is always a new string - or something else, eg. split returns an <a href=\"types#Array\" title=\"Types\">array</a>. </p> <pre class=\"syntaxhighlighter javascript\">\"hello\".charAt( 0 ) // \"h\"\n\"hello\".toUpperCase() // \"HELLO\"\n\"Hello\".toLowerCase() // \"hello\"\n\"hello\".replace( /e|o/g, \"x\" ) // \"hxllx\"\n\"1,2,3\".split( \",\" ) // [ \"1\", \"2\", \"3\" ]</pre> <h3 id=\"Length_Property\"> Length Property </h3> <p>All strings have a length property. </p> <pre class=\"syntaxhighlighter javascript\">\"Hello\".length // 5\n\"\".length // 0</pre> <h3 id=\"Boolean_Default\"> Boolean Default </h3> <p>An empty string defaults to false: </p> <pre class=\"syntaxhighlighter javascript\">!\"\" // true\n!!\"\" // false\n!\"hello\" // false\n!\"true\" // false\n!new Boolean( false ) // false</pre> <h2 id=\"htmlString\"> htmlString </h2> <p>A string is designated <strong>htmlString</strong> in jQuery documentation when it is used to represent one or more DOM elements, typically to be created and inserted in the document. When passed as an argument of the <code>jQuery()</code> function, the string is identified as HTML if it starts with <code>&lt;tag ... &gt;</code>) and is parsed as such until the final <code>&gt;</code> character. Prior to jQuery 1.9, a string was considered to be HTML if it contained <code>&lt;tag ... &gt;</code> <em>anywhere within the string</em>.</p> <p>When a string as passed as an argument to a manipulation method such as <code>.append()</code>, it is always considered to be HTML since jQuery's other common interpretation of a string (CSS selectors) does not apply in those contexts.</p> <p>For explicit parsing of a string to HTML, the <code><a href=\"jquery.parsehtml\">$.parseHTML()</a></code> method is available as of jQuery 1.8.</p> <pre class=\"syntaxhighlighter javascript\">// Appends &lt;b&gt;hello&lt;/b&gt;:\n$( \"&lt;b&gt;hello&lt;/b&gt;\" ).appendTo( \"body\" );\n \n// Appends &lt;b&gt;hello&lt;/b&gt;:\n$( \"&lt;b&gt;hello&lt;/b&gt;bye\" ).appendTo( \"body\" );\n \n// Syntax error, unrecognized expression: bye&lt;b&gt;hello&lt;/b&gt;\n$( \"bye&lt;b&gt;hello&lt;/b&gt;\" ).appendTo( \"body\" );\n \n// Appends bye&lt;b&gt;hello&lt;/b&gt;:\n$( $.parseHTML( \"bye&lt;b&gt;hello&lt;/b&gt;\" ) ).appendTo( \"body\" );\n \n// Appends &lt;b&gt;hello&lt;/b&gt;wait&lt;b&gt;bye&lt;/b&gt;:\n$( \"&lt;b&gt;hello&lt;/b&gt;wait&lt;b&gt;bye&lt;/b&gt;\" ).appendTo( \"body\" );</pre> <h2 id=\"Number\"> Number </h2> <p>Numbers in JavaScript are double-precision 64-bit format IEEE 754 values. They are immutable, just as <a href=\"#String\" title=\"\">strings</a>. All operators common in c-based languages are available to work with numbers (+, -, *, /, %, =, +=, -=, *=, /=, ++, --). </p> <pre class=\"syntaxhighlighter javascript\">12\n3.543</pre> <p>The type of a number is \"number\". </p> <pre class=\"syntaxhighlighter javascript\">typeof 12 // \"number\"\ntypeof 3.543 // \"number\"</pre> <h3 id=\"Boolean_Default_2\"> Boolean Default </h3> <p>If a number is zero, it defaults to false: </p> <pre class=\"syntaxhighlighter javascript\">!0 // true\n!!0 // false\n!1 // false\n!-1 // false</pre> <p>Due to the implementation of numbers as double-precision values, the following result is not an error: </p> <pre class=\"syntaxhighlighter javascript\">0.1 + 0.2 // 0.30000000000000004</pre> <p><br> </p> <h3 id=\"Math\"> Math </h3> <p>JavaScript provides utilities to work with numbers in the Math object: </p> <pre class=\"syntaxhighlighter javascript\">Math.PI // 3.141592653589793\nMath.cos( Math.PI ) // -1</pre> <h3 id=\"Parsing_Numbers\"> Parsing Numbers </h3> <p>parseInt and parseFloat help parsing strings into numbers. Both do some implicit conversion if the base isn't specified: </p> <pre class=\"syntaxhighlighter javascript\">parseInt( \"123\" ) = 123 // (implicit decimal)\nparseInt( \"010\" ) = 8 // (implicit octal)\nparseInt( \"0xCAFE\" ) = 51966 // (implicit hexadecimal)\nparseInt( \"010\", 10 ) = 10 // (explicit decimal)\nparseInt( \"11\", 2 ) = 3 // (explicit binary)\nparseFloat( \"10.10\" ) = 10.1</pre> <h3 id=\"Numbers_to_Strings\"> Numbers to Strings </h3> <p>When appending numbers to string, the result is always a string. The operator is the same, so be careful: If you want to add numbers and then append them to a string, put parentheses around the numbers: </p> <pre class=\"syntaxhighlighter javascript\">\"\" + 1 + 2; // \"12\"\n\"\" + ( 1 + 2 ); // \"3\"\n\"\" + 0.0000001; // \"1e-7\"\nparseInt( 0.0000001 ); // 1 (!)</pre> <p>Or you use the String class provided by javascript, which try to parse a value as string: </p> <pre class=\"syntaxhighlighter javascript\">String( 1 ) + String( 2 ); // \"12\"\nString( 1 + 2 ); // \"3\"</pre> <h3 id=\"NaN_and_Infinity\"> NaN and Infinity </h3> <p>Parsing something that isn't a number results in NaN. isNaN helps to detect those cases: </p> <pre class=\"syntaxhighlighter javascript\">parseInt( \"hello\", 10 ) // NaN\nisNaN( parseInt(\"hello\", 10) ) // true</pre> <p>Division by zero results in Infinity: </p> <pre class=\"syntaxhighlighter javascript\">1 / 0 // Infinity</pre> <p>Both NaN and Infinity are of type \"number\": </p> <pre class=\"syntaxhighlighter javascript\">typeof NaN // \"number\"\ntypeof Infinity // \"number\"</pre> <p>Note that NaN compares in a strange way: </p> <pre class=\"syntaxhighlighter javascript\">NaN === NaN // false (!)</pre> <p>But: </p> <pre class=\"syntaxhighlighter javascript\">Infinity === Infinity // true</pre> <h3 id=\"Integer\"> Integer </h3> <p>An integer is a plain Number type, but whenever explicitly mentioned, indicates that a non-floating-point number is expected. </p> <h3 id=\"Float\"> Float </h3> <p>A float is a plain Number type, just as Integer, but whenever explicitly mentioned, indicates that a floating-point number is expected. </p> <p><br> </p> <h2 id=\"Boolean\"> Boolean </h2> <p>A boolean in JavaScript can be either true or false: </p> <pre class=\"syntaxhighlighter javascript\">if ( true ) console.log( \"always!\" );\nif ( false ) console.log( \"never!\" );</pre> <h2 id=\"Object\"> Object </h2> <p>Everything in JavaScript is an object, though some are more objective (haha). The easiest way to create an object is the object literal: </p> <pre class=\"syntaxhighlighter javascript\">var x = {};\nvar y = {\n  name: \"Pete\",\n  age: 15\n};</pre> <p>The type of an object is \"object\": </p> <pre class=\"syntaxhighlighter javascript\">typeof {} // \"object\"</pre> <h3 id=\"Dot_Notation\"> Dot Notation </h3> <p>You can write and read properties of an object using the dot notation: </p> <pre class=\"syntaxhighlighter javascript\">y.name // \"Pete\"\ny.age // 15\nx.name = y.name + \" Pan\" // \"Pete Pan\"\nx.age = y.age + 1 // 16</pre> <h3 id=\"Array_Notation\"> Array Notation </h3> <p>Or you write and read properties using the array notation, which allows you to dynamically choose the property: </p> <pre class=\"syntaxhighlighter javascript\">var operations = {\n  increase: \"++\",\n  decrease: \"--\"\n};\nvar operation = \"increase\";\noperations[ operation ] // \"++\"\noperations[ \"multiply\" ] = \"*\"; // \"*\"</pre> <h3 id=\"Iteration\"> Iteration </h3> <p>Iterating over objects is easy with the for-in-loop: </p> <pre class=\"syntaxhighlighter javascript\">var obj = {\n  name: \"Pete\",\n  age: 15\n};\nfor( key in obj ) {\n  alert( \"key is \" + [ key ] + \", value is \" + obj[ key ] );\n}</pre> <p>Note that for-in-loop can be spoiled by extending Object.prototype (see <a href=\"http://erik.eae.net/archives/2005/06/06/22.13.54/\" class=\"external text\" title=\"http://erik.eae.net/archives/2005/06/06/22.13.54/\">Object.prototype is verboten</a>) so take care when using other libraries. </p> <p>jQuery provides a generic <a href=\"jquery.each\"><em>each</em> function</a> to iterate over properties of objects, as well as elements of arrays: </p> <pre class=\"syntaxhighlighter javascript\">jQuery.each( obj, function( key, value ) {\n  console.log( \"key\", key, \"value\", value );\n});</pre> <p>The drawback is that the callback is called in the context of each value and you therefore lose the context of your own object if applicable. More on this below at Functions. </p> <h3 id=\"Boolean_default_3\"> Boolean default </h3> <p>An object, no matter if it has properties or not, never defaults to false: </p> <pre class=\"syntaxhighlighter javascript\">!{} // false\n!!{} // true</pre> <h3 id=\"Prototype\"> Prototype </h3> <p>All objects have a prototype property. Whenever the interpreter looks for a property, it also checks in the object's prototype if the property is not found on the object itself. jQuery uses the prototype extensively to add methods to jQuery instances. Internally, jQuery makes <code>jQuery.fn</code> an alias of <code>jQuery.prototype</code> so you can use either one (though plugin developers have standardized on <code>fn</code>). </p> <pre class=\"syntaxhighlighter javascript\">var form = $(\"#myform\");\nconsole.log( form.clearForm ); // undefined\n \n// jQuery.fn === jQuery.prototype\njQuery.fn.clearForm = function() {\n  return this.find( \":input\" ).each(function() {\n    this.value = \"\";\n  }).end();\n};\n \n// works for all instances of jQuery objects, because\n// the new method was added to the prototype\nconsole.log( form.clearForm ); // function\nform.clearForm();</pre> <h2 id=\"Array\"> Array </h2> <p>Arrays in JavaScript are mutable lists with a few built-in methods. You can define arrays using the array literal: </p> <pre class=\"syntaxhighlighter javascript\">var x = [];\nvar y = [ 1, 2, 3 ];</pre> <p>The type of an array is \"object\": </p> <pre class=\"syntaxhighlighter javascript\">typeof []; // \"object\"\ntypeof [ 1, 2, 3 ]; // \"object\"</pre> <p>Reading and writing elements to an array uses the array-notation: </p> <pre class=\"syntaxhighlighter javascript\">x[ 0 ] = 1;\ny[ 2 ] // 3</pre> <h3 id=\"Iteration_2\"> Iteration </h3> <p>An array has a length property that is useful for iteration: </p> <pre class=\"syntaxhighlighter javascript\">for ( var i = 0; i &lt; a.length; i++ ) {\n  // Do something with a[i]\n}</pre> <p>When performance is critical, reading the length property only once can help to speed things up. This should be used only when a performance bottleneck was discovered: </p> <pre class=\"syntaxhighlighter javascript\">for ( var i = 0, j = a.length; i &lt; j; i++ ) {\n  // Do something with a[i]\n}</pre> <p>Another variation defines a variable that is filled for each iteration, removing the array-notation from the loop-body. It does not work when the array contains 0 or empty strings! </p> <pre class=\"syntaxhighlighter javascript\">for ( var i = 0, item; item = a[i]; i++ ) {\n  // Do something with item\n}</pre> <p>jQuery provides a generic <a href=\"jquery.each\"><em>each</em> function</a> to iterate over element of arrays, as well as properties of objects: </p> <pre class=\"syntaxhighlighter javascript\">var x = [ 1, 2, 3 ];\njQuery.each( x, function( index, value ) {\n  console.log( \"index\", index, \"value\", value );\n});</pre> <p>The drawback is that the callback is called in the context of each value and you therefore lose the context of your own object if applicable. More on this below at Functions. </p> <p>The length property can also be used to add elements to the end of an array. That is equivalent to using the push-method: </p> <pre class=\"syntaxhighlighter javascript\">var x = [];\nx.push( 1 );\nx[ x.length ] = 2;\nx // [ 1, 2 ]</pre> <p>You'll see both variations a lot when looking through JavaScript library code. </p> <p>Other built-in methods are reverse, join, shift, unshift, pop, slice, splice and sort: </p> <pre class=\"syntaxhighlighter javascript\">var x = [ 0, 3, 1, 2 ];\nx.reverse()      // [ 2, 1, 3, 0 ]\nx.join(\" – \")    // \"2 - 1 - 3 - 0\"\nx.pop()          // [ 2, 1, 3 ]\nx.unshift( -1 )  // [ -1, 2, 1, 3 ]\nx.shift()        // [ 2, 1, 3 ]\nx.sort()         // [ 1, 2, 3 ]\nx.splice( 1, 2 ) // [ 2, 3 ]</pre> <p>Note: .unshift() method does not return a length property in Internet Explorer. </p> <h3 id=\"Boolean_Default_4\"> Boolean Default </h3> <p>An array, no matter if it has elements or not, never defaults to false: </p> <pre class=\"syntaxhighlighter javascript\">![] // false\n!![] // true</pre> <h3 id=\"Array.3CType.3E_Notation\"> Array&lt;Type&gt; Notation </h3> <p>In the jQuery API you'll often find the notation of Array&lt;Type&gt;: </p> <pre>dragPrevention    Array&lt;String&gt;\n</pre> <p>This indicates that the method doesn't only expect an array as the argument, but also specifies the expected type. The notation is borrowed from Java 5's generics notation (or C++ templates). </p> <h2 id=\"ArrayLikeObject\">Array-Like Object</h2> <p>Either a true JavaScript Array or a JavaScript Object that contains a nonnegative integer <code>length</code> property and index properties from <code>0</code> up to <code>length - 1</code>. This latter case includes array-like objects commonly encountered in web-based code such as the <code>arguments</code> object and the <code>NodeList</code> object returned by many DOM methods.</p> <p>When a jQuery API accepts either plain Objects or Array-Like objects, a plain Object with a numeric <code>length</code> property will trigger the Array-Like behavior.</p> <h2 id=\"PlainObject\"> PlainObject </h2> <p>The PlainObject type is a JavaScript object containing zero or more key-value pairs. The plain object is, in other words, an <code>Object</code> object. It is designated \"plain\" in jQuery documentation to distinguish it from other kinds of JavaScript objects: for example, <code>null</code>, user-defined arrays, and host objects such as <code>document</code>, all of which have a <code>typeof</code> value of \"object.\" The <code><a href=\"jquery.isplainobject\">jQuery.isPlainObject()</a></code> method identifies whether the passed argument is a plain object or not, as demonstrated below: </p> <pre class=\"syntaxhighlighter javascript\">  var a = [];\n  var d = document;\n  var o = {};\n \n  typeof a; // object\n  typeof d; // object\n  typeof o; // object\n \n  jQuery.isPlainObject( a ); // false\n  jQuery.isPlainObject( d ); // false\n  jQuery.isPlainObject( o ); // true</pre> <h2 id=\"Null\">Null</h2> <p>The <code>null</code> keyword is a JavaScript literal that is commonly used to express the absence of an intentional value.</p> <h2 id=\"Date\"> Date </h2> <p>The Date type is a JavaScript object that represents a single moment in time. Date objects are instantiated using their constructor function, which by default creates an object that represents the current date and time. </p> <pre class=\"syntaxhighlighter javascript\">new Date();</pre> <p>To create a Date object for an alternative date and time, pass numeric arguments in the following order: year, month, day, hour, minute, second, millisecond — although note that the month is zero-based, whereas the other arguments are one-based. The following creates a Date object representing January 1st, 2014, at 8:15. </p> <pre class=\"syntaxhighlighter javascript\">new Date( 2014, 0, 1, 8, 15 );</pre> <h2 id=\"Function\"> Function </h2> <p>A function in JavaScript can be either named or anonymous. Any function can be assigned to a variable or passed to a method, but passing member functions this way can cause them to be called in the context of another object (i.e. with a different \"this\" object). </p> <pre class=\"syntaxhighlighter javascript\">function named() {}\nvar handler = function() {}</pre> <p>You see a lot of anonymous functions in jQuery code: </p> <pre class=\"syntaxhighlighter javascript\">$( document ).ready(function() {});\n$( \"a\" ).click(function() {});\n$.ajax({\n  url: \"someurl.php\",\n  success: function() {}\n});</pre> <p>The type of a function is \"function\". </p> <h3 id=\"Arguments\"> Arguments </h3> <p>Inside a function a special variable \"arguments\" is always available. It's similar to an array in that it has a length property, but it lacks the built-in methods of an array. The elements of the pseudo-array are the argument of the function call. </p> <pre class=\"syntaxhighlighter javascript\">function log( x ) {\n  console.log( typeof x, arguments.length );\n}\nlog(); // \"undefined\", 0\nlog( 1 ); // \"number\", 1\nlog( \"1\", \"2\", \"3\" ); // \"string\", 3</pre> <p>The arguments object also has a callee property, which refers to the function you're inside of. For instance: </p> <pre class=\"syntaxhighlighter javascript\">var awesome = function() { return arguments.callee; }\nawesome() === awesome // true</pre> <h3 id=\"Context.2C_Call_and_Apply\"> Context, Call and Apply </h3> <p>In JavaScript, the variable \"this\" always refers to the current context. By default, \"this\" refers to the window object. Within a function this context can change, depending on how the function is called. </p> <p>All event handlers in jQuery are called with the handling element as the context. </p> <pre class=\"syntaxhighlighter javascript\">$( document ).ready(function() {\n  // this refers to window.document\n});\n$( \"a\" ).click(function() {\n  // this refers to an anchor DOM element\n});</pre> <p>You can specify the context for a function call using the function-built-in methods call and apply. The difference between them is how they pass arguments. Call passes all arguments through as arguments to the function, while apply accepts an array as the arguments. </p> <pre class=\"syntaxhighlighter javascript\">function scope() {\n  console.log( this, arguments.length );\n}\nscope() // window, 0\nscope.call( \"foobar\", [ 1, 2 ] ); // \"foobar\", 1\nscope.apply( \"foobar\", [ 1, 2 ] ); // \"foobar\", 2</pre> <h3 id=\"Scope\"> Scope </h3> <p>In JavaScript, all variables defined inside a function are only visible inside that function scope. Consider the following example: </p> <pre class=\"syntaxhighlighter javascript\">// global\nvar x = 0;\n(function() {\n  // private\n  var x = 1;\n  console.log( x ); // 1\n})();\nconsole.log( x ); // 0</pre> <p>It defines a variable <i>x</i> in the global scope, then defines an anonymous function and executes it immediately (the additional parentheses are required for immediate execution). Inside the function another variable <i>x</i> is defined with a different value. It is only visible within that function and doesn't overwrite the global variable. </p> <h3 id=\"Closures\"> Closures </h3> <p>Closures are created whenever a variable that is defined outside the current scope is accessed from within some inner scope. In the following example, the variable <i>counter</i> is visible within the create, increment, and print functions, but not outside of them. </p> <pre class=\"syntaxhighlighter javascript\">function create() {\n  var counter = 0;\n  return {\n    increment: function() {\n      counter++;\n    },\n    print: function() {\n      console.log( counter );\n    }\n  }\n}\nvar c = create();\nc.increment();\nc.print(); // 1</pre> <p>The pattern allows you to create objects with methods that operate on data that isn't visible to the outside—the very basis of object-oriented programming. </p> <h3 id=\"Proxy_Pattern\"> Proxy Pattern </h3> <p>Combining the above knowledge gives you as a JavaScript developer quite a lot of power. One way to combine that is to implement a proxy pattern in JavaScript, enabling the basics of aspect-oriented programming (AOP): </p> <pre class=\"syntaxhighlighter javascript\">(function() {\n  // log all calls to setArray\n  var proxied = jQuery.fn.setArray;\n  jQuery.fn.setArray = function() {\n    console.log( this, arguments );\n    return proxied.apply( this, arguments );\n  };\n})();</pre> <p>The above wraps its code in a function to hide the \"proxied\"-variable. It saves jQuery's setArray-method in a closure and overwrites it. The proxy then logs all calls to the method and delegates the call to the original. Using apply(this, arguments) guarantees that the caller won't be able to notice the difference between the original and the proxied method. </p> <h2 id=\"Callback\"> Callback </h2> <p>A callback is a plain JavaScript function passed to some method as an argument or option. Some callbacks are just events, called to give the user a chance to react when a certain state is triggered. jQuery's event system uses such callbacks everywhere: </p> <pre class=\"syntaxhighlighter javascript\">$( \"body\" ).click(function( event ) {\n  console.log( \"clicked: \" + event.target );\n});</pre> <p>Most callbacks provide arguments and a context. In the event-handler example, the callback is called with one argument, an Event. The context is set to the handling element, in the above example, document.body. </p> <p>Some callbacks are required to return something, others make that return value optional. To prevent a form submission, a submit event handler can return false: </p> <pre class=\"syntaxhighlighter javascript\">$( \"#myform\" ).submit(function() {\n  return false;\n});</pre> <p>Instead of always returning false, the callback could check fields of the form for validity, and return false only when the form is invalid. </p> <p><br> </p> <h2 id=\"Selector\"> Selector </h2> <p>A selector is used in jQuery to select DOM elements from a DOM document. That document is, in most cases, the DOM document present in all browsers, but can also be an XML document received via Ajax. </p> <p>The selectors are a composition of CSS and custom additions. All selectors available in jQuery are documented on the <a href=\"https://api.jquery.com/category/selectors/\" title=\"Selectors\">Selectors API page</a>. </p> <p>There are lot of plugins that leverage jQuery's selectors in other ways. The validation plugin accepts a selector to specify a dependency, whether an input is required or not: </p> <pre class=\"syntaxhighlighter javascript\">emailrules: {\n  required: \"#email:filled\"\n}</pre> <p>This would make a checkbox with name \"emailrules\" required only if the user entered an email address in the email field, selected via its id, filtered via a custom selector \":filled\" that the validation plugin provides. </p> <p>If Selector is specified as the type of an argument, it accepts everything that the jQuery constructor accepts, eg. Strings, Elements, Lists of Elements. </p> <h2 id=\"Event\">Event</h2> <p>jQuery's event system normalizes the event object according to W3C standards. The event object is guaranteed to be passed to the event handler (no checks for window.event required). It normalizes the target, relatedTarget, which, metaKey and pageX/Y properties and provides both stopPropagation() and preventDefault() methods. </p> <p>Those properties are all documented, and accompanied by examples, on the <a href=\"https://api.jquery.com/category/events/event-object/\" title=\"Events\">Event object</a> page. </p> <p>The standard events in the Document Object Model are: <code>blur</code>, <code>focus</code>, <code>load</code>, <code>resize</code>, <code>scroll</code>, <code>unload</code>, <code>beforeunload</code>, <code>click</code>, <code>dblclick</code>, <code>mousedown</code>, <code>mouseup</code>, <code>mousemove</code>, <code>mouseover</code>, <code>mouseout</code>, <code>mouseenter</code>, <code>mouseleave</code>, <code>change</code>, <code>select</code>, <code>submit</code>, <code>keydown</code>, <code>keypress,</code> and <code>keyup</code>. Since the DOM event names have predefined meanings for some elements, using them for other purposes is not recommended. jQuery's event model can trigger an event by any name on an element, and it is propagated up the DOM tree to which that element belongs, if any. </p> <h2 id=\"Element\"> Element </h2> <p>An element in the Document Object Model (DOM) can have attributes, text, and children. It provides methods to traverse the parent and children and to get access to its attributes. Due to inconsistencies in DOM API specifications and implementations, however, those methods can be a challenge to use. jQuery provides a \"wrapper\" around those elements to help interacting with the DOM. But sometimes you will be working directly with DOM elements, or see methods that (also) accept DOM elements as arguments. </p> <p>Whenever you call jQuery's <code>.each()</code> method or one of its event methods on a jQuery collection, the context of the callback function — <code>this</code> — is set to a DOM element. </p> <p>Some properties of DOM elements are quite consistent among browsers. Consider this example of a simple onblur validation: </p> <pre class=\"syntaxhighlighter javascript\">$( \"input[type='text']\" ).on( \"blur\", function() {\n  if( !this.value ) {\n    alert( \"Please enter some text!\" );\n  }\n});</pre> <p>You could replace <code>this.value</code> with <code>$(this).val()</code> to access the value of the text input via jQuery, but in that case you wouldn't gain anything. </p> <h2 id=\"Text\"> Text </h2> <p>Text is a node of the Document Object Model (DOM) that represents the textual content of an <a href=\"#Element\">element</a> or an attribute. Consider the following code: </p> <pre class=\"syntaxhighlighter xml\">&lt;p id=\"target\"&gt;&lt;b&gt;Hello&lt;/b&gt; world&lt;/p&gt;</pre> <p>If you retrieve the children of the paragraph of the example as follows: </p> <pre class=\"syntaxhighlighter javascript\">var children = document.getElementById( \"target\" ).childNodes;</pre> <p>you obtain two children. The first one is the <a href=\"#Element\">element</a> representing the <code>b</code> tag. The second child is a text node containing the string \" world\". </p> <h2 id=\"jQuery\"> jQuery </h2> <p>A jQuery object contains a collection of Document Object Model (DOM) elements that have been created from an HTML string or selected from a document. Since jQuery methods often use CSS selectors to match elements from a document, the set of elements in a jQuery object is often called a set of \"matched elements\" or \"selected elements\". </p> <p>The jQuery object itself behaves much like an array; it has a <code>length</code> property and the elements in the object can be accessed by their numeric indices <code>[0]</code> to <code>[length-1]</code>. Note that a jQuery object is not actually a Javascript Array object, so it does not have all the methods of a true Array object such as <code>join()</code>. </p> <p>Most frequently, you will use the jQuery() function to create a jQuery object. <code>jQuery()</code> can also be accessed by its familiar single-character alias of <code>$()</code>, unless you have called <code>jQuery.noConflict()</code> to disable this option. Many jQuery methods return the jQuery object itself, so that method calls can be chained: </p> <p>In API calls that return <code>jQuery</code>, the value returned will be the original jQuery object unless otherwise documented by that API. API methods such as <code>.filter()</code> or <code>.not()</code> modify their incoming set and thus return a new jQuery object. </p> <pre class=\"syntaxhighlighter javascript\">$( \"p\" ).css( \"color\", \"red\" ).find( \".special\" ).css( \"color\", \"green\" );</pre> <p>Whenever you use a \"destructive\" jQuery method that potentially changes the set of elements in the jQuery object, such as <code>.filter()</code> or <code>.find()</code>, that method actually returns a new jQuery object with the resulting elements. To return to the previous jQuery object, you use the <code>.end()</code> method. </p> <p>A jQuery object may be empty, containing no DOM elements. You can create an empty jQuery object with <code>$()</code> (that is, passing no arguments at all). A jQuery object may also be empty if a selector doesn't select any elements, or if a chained method filters out all the elements. It is not an error; any further methods called on that jQuery object simply have no effect since they have no elements to act upon. So, in this example if there are no bad entries on the page then no elements will be colored red: </p> <pre class=\"syntaxhighlighter javascript\">$( \".badEntry\" ).css({ color: \"red\" });</pre> <h2 id=\"XMLHttpRequest\"> XMLHttpRequest </h2> <p>Some of jQuery's Ajax functions return the native XMLHttpRequest (XHR) object, or pass it as an argument to success/error/complete handlers, so that you can do additional processing or monitoring on the request. Note that Ajax functions only return or pass an XHR object when an XHR object is actually used in the request. For example, JSONP requests and cross-domain GET requests use a script element rather than an XHR object. </p> <p>Although the XHR object is a standard, there are variations in its behavior on different browsers. Refer to the W3C site and browsers' documentation for more information: </p> <ul>\n<li> <a href=\"http://www.w3.org/TR/XMLHttpRequest/\" class=\"external text\" title=\"http://www.w3.org/TR/XMLHttpRequest/\">W3C standard</a> </li>\n<li> <a href=\"http://developer.apple.com/internet/webcontent/xmlhttpreq.html\" class=\"external text\" title=\"http://developer.apple.com/internet/webcontent/xmlhttpreq.html\">Apple (Safari)</a> </li>\n<li> <a href=\"https://developer.mozilla.org/docs/en/DOM/XMLHttpRequest\" class=\"external text\" title=\"http://developer.mozilla.org/en/xmlhttprequest\">Mozilla (Firefox)</a> </li>\n<li> <a href=\"http://msdn.microsoft.com/en-us/library/ms535874%28VS.85%29.aspx\" class=\"external text\" title=\"http://msdn.microsoft.com/en-us/library/ms535874%28VS.85%29.aspx\">Microsoft (Internet Explorer)</a> </li>\n<li> <a href=\"http://www.opera.com/docs/specs/opera9/xhr/\" class=\"external text\" title=\"http://www.opera.com/docs/specs/opera9/xhr/\">Opera</a> </li>\n</ul> <p>Google does not appear to have an official page for their XHR documentation for Chrome. As of version 5, Chrome does not support the use of the file protocol for XHR requests. </p> <h2 id=\"jqXHR\"> jqXHR </h2> <p>As of jQuery 1.5, the <a href=\"jquery.ajax\">$.ajax()</a> method returns the jqXHR object, which is a superset of the XMLHTTPRequest object. For more information, see the <a href=\"jquery.ajax#jqXHR\">jqXHR section of the $.ajax entry</a> </p> <h2 id=\"Deferred\"> Deferred Object</h2> <p>As of jQuery 1.5, the <a href=\"https://api.jquery.com/category/deferred-object/\">Deferred</a> object provides a way to register multiple callbacks into self-managed callback queues, invoke callback queues as appropriate, and relay the success or failure state of any synchronous or asynchronous function. </p> <h2 id=\"Promise\"> Promise Object</h2> <p>This object provides a subset of the methods of the <a href=\"https://api.jquery.com/category/deferred-object/\">Deferred</a> object (<a href=\"deferred.then\"><code>then</code></a>, <a href=\"deferred.done\"><code>done</code></a>, <a href=\"deferred.fail\"><code>fail</code></a>, <a href=\"deferred.always\"><code>always</code></a>, <a href=\"deferred.pipe\"><code>pipe</code></a>, <a href=\"deferred.progress\"><code>progress</code></a>, <a href=\"deferred.state\"><code>state</code></a> and <a href=\"deferred.promise\"><code>promise</code></a>) to prevent users from changing the state of the Deferred. </p> <h2 id=\"Callbacks\">Callbacks Object</h2> <p>A multi-purpose object that provides a powerful way to manage callback lists. It supports adding, removing, firing, and disabling callbacks. The Callbacks object is created and returned by the <code>$.Callbacks</code> function and subsequently returned by most of that function's methods. </p> <h2 id=\"XMLDocument\">XML Document</h2> <p>A document object created by the browser's XML DOM parser, usually from a string representing XML. XML documents have different semantics than HTML documents, but most of the traversing and manipulation methods provided by jQuery will work with them.</p> <h2 id=\"Assert\">Assert</h2> <p>A reference to or instance of the object holding all of QUnit's assertions. See the <a href=\"https://api.qunitjs.com/QUnit.assert/\">API documentation for <code>QUnit.assert</code></a> for details.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; The jQuery Foundation and other contributors<br>Licensed under the MIT License.<br>\n    <a href=\"https://api.jquery.com/Types\" class=\"_attribution-link\">https://api.jquery.com/Types</a>\n  </p>\n</div>\n"}