{"index":"<h1 class=\"title\">RethinkDB Documentation</h1>   <h3>What is RethinkDB?</h3> <p> RethinkDB makes building and scaling realtime apps dramatically easier. Get started by installing the server, and jump into our getting started guide to start building your first app in minutes. </p> <ul class=\"primary-docs\"> <li class=\"quickstart\"> <a href=\"docs/quickstart/index\"> Quickstart </a> </li> <li class=\"install\"> <a href=\"docs/install/index\"> Install RethinkDB </a> </li> <li class=\"api\"> <a href=\"api/java/index\"> API reference </a> </li> </ul>   <h2>RethinkDB in two minutes</h2> <a class=\"video\" href=\"https://www.youtube.com/watch?v=qKPKsBNw604\"> <img src=\"https://rethinkdb.com/assets/images/videos/what-is-rethinkdb.png\">  </a>   <h2>Featured articles</h2> <ul class=\"article-list\"> <li> <a href=\"docs/changefeeds/java/index\">Changefeeds in RethinkDB</a> <p>Learn about changefeeds, RethinkDB's realtime push technology, and how it can be used to build and scale realtime apps.</p> </li> <li> <a href=\"docs/map-reduce/index\">Map-reduce in RethinkDB</a> <p>RethinkDB has powerful Hadoop-style map-reduce tools, that integrate cleanly into the query language. Learn how they work, and play with a few examples.</p> </li> <li> <a href=\"docs/geo-support/java/index\">Geospatial queries</a> <p>Learn how to use GeoJSON features to build location-aware apps in RethinkDB.</p> </li> <li> <a href=\"docs/paas/index\">Deploying with a PaaS</a> <p>Learn how to deploy RethinkDB on cloud services like Compose.io, AWS, and others.</p> </li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/\" class=\"_attribution-link\">https://rethinkdb.com/docs/</a>\n  </p>\n</div>\n","docs/quickstart/index":"<h1 class=\"title\">Thirty-second quickstart with RethinkDB</h1> <blockquote class=\"infobox \">\n<p><strong>Before you start:</strong> make sure you’ve <a href=\"https://rethinkdb.com/install\">installed RethinkDB</a>—it should only take a minute!</p> </blockquote> <p><img src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/quickstart.png\" class=\"api_command_illustration\"></p> <h2 id=\"start-the-server\">Start the server</h2> <p>First, start the RethinkDB server. Under OS X or Linux, do this from a terminal window.</p> <pre data-language=\"\">$ rethinkdb\ninfo: Creating directory 'rethinkdb_data'\ninfo: Listening for intracluster connections on port 29015\ninfo: Listening for client driver connections on port 28015\ninfo: Listening for administrative HTTP connections on port 8080\ninfo: Server ready\n</pre>  <p>From Windows, do this from a command prompt window. Use the <code class=\"highlighter-rouge\">cd</code> command to go to the directory that you unpacked <code class=\"highlighter-rouge\">rethinkdb.exe</code> in.</p> <pre data-language=\"\">C:\\Users\\Slava\\&gt;cd RethinkDB\nC:\\Users\\Slava\\RethinkDB\\&gt;\n</pre>  <p>Then, start RethinkDB with its default options.</p> <pre data-language=\"\">C:\\Users\\Slava\\RethinkDB\\&gt;rethinkdb.exe\ninfo: Creating directory 'rethinkdb_data'\ninfo: Listening for intracluster connections on port 29015\ninfo: Listening for client driver connections on port 28015\ninfo: Listening for administrative HTTP connections on port 8080\ninfo: Server ready\n</pre>  <p>Point your browser to <code class=\"highlighter-rouge\">localhost:8080</code>. You’ll see an administrative UI where you can control the cluster (which so far consists of one server), and play with the query language.</p> <h2 id=\"run-some-queries\">Run some queries</h2> <p>Click on the <em>Data Explorer</em> tab in the browser. You can manipulate data using JavaScript straight from your browser. By default, RethinkDB creates a database named <code class=\"highlighter-rouge\">test</code>. Let’s create a table:</p> <pre data-language=\"\">r.db('test').tableCreate('tv_shows')\n</pre>  <p>Use the “Run” button or Shift+Enter to run the query. Now, let’s insert some JSON documents into the table:</p> <pre data-language=\"\">r.table('tv_shows').insert([{ name: 'Star Trek TNG', episodes: 178 },\n                            { name: 'Battlestar Galactica', episodes: 75 }])\n</pre>  <p>We’ve just inserted two rows into the <code class=\"highlighter-rouge\">tv_shows</code> table. Let’s verify the number of rows inserted:</p> <pre data-language=\"\">r.table('tv_shows').count()\n</pre>  <p>Finally, let’s do a slightly more sophisticated query. Let’s find all shows with more than 100 episodes.</p> <pre data-language=\"\">r.table('tv_shows').filter(r.row('episodes').gt(100))\n</pre>  <p>As a result, we of course get the best science fiction show in existence.</p> <h2 id=\"next-steps\">Next steps</h2> <p>Congrats, you’re on your way to database bliss! Now move on to the <a href=\"../guide/java/index\">ten-minute guide</a> and learn how to use the client drivers, get more in-depth information on basic commands, and start writing real applications with RethinkDB.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/quickstart/\" class=\"_attribution-link\">https://rethinkdb.com/docs/quickstart/</a>\n  </p>\n</div>\n","api/java/index":"<h1 class=\"title\">Java ReQL command reference</h1>    <blockquote class=\"infobox infobox-info\"> <p> <strong>Looking for documentation for a community driver?</strong><br> <a href=\"../../docs/install-drivers/index\">Find the project page</a> for your driver for specific ReQL documentation. </p> </blockquote>  <h2 data-alt=\"Accessing ReQL \">Accessing ReQL </h2>\n<h3 id=\"rr\"><a href=\"r/index\">r</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r → r\n</pre> <p>The top-level ReQL namespace.</p> <p><strong>Example:</strong> Set up your top-level namespace.</p> <pre data-language=\"java\">import com.rethinkdb.RethinkDB;\nimport com.rethinkdb.gen.exc.ReqlError;\nimport com.rethinkdb.gen.exc.ReqlQueryLogicError;\nimport com.rethinkdb.model.MapObject;\nimport com.rethinkdb.net.Connection;\n\npublic static final RethinkDB r = RethinkDB.r;\n</pre>  <p><a href=\"r/index\">Read more about this command →</a></p> <h3 id=\"connectionconnect\"><a href=\"connect/index\">connection</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.connection() → builder\n</pre> <p>Create a new connection to the database server. <code class=\"highlighter-rouge\">connection</code> returns a builder object with the following methods:</p> <ul> <li>\n<code class=\"highlighter-rouge\">hostname()</code>: the host to connect to (default <code class=\"highlighter-rouge\">localhost</code>).</li> <li>\n<code class=\"highlighter-rouge\">port()</code>: the port to connect on (default <code class=\"highlighter-rouge\">28015</code>).</li> <li>\n<code class=\"highlighter-rouge\">dbname()</code>: the default database (default <code class=\"highlighter-rouge\">test</code>).</li> <li>\n<code class=\"highlighter-rouge\">user()</code>: the user account and password to connect as (default <code class=\"highlighter-rouge\">\"admin\", \"\"</code>).</li> <li>\n<code class=\"highlighter-rouge\">timeout()</code>: timeout period in seconds for the connection to be opened (default <code class=\"highlighter-rouge\">20</code>).</li> <li>\n<code class=\"highlighter-rouge\">connect()</code>: instantiate a connection object with the parameters previously passed to the builder.</li> <li>\n<code class=\"highlighter-rouge\">certFile()</code>: a path to an SSL CA certificate.</li> <li>\n<code class=\"highlighter-rouge\">sslContext()</code>: an instance of an <a href=\"https://docs.oracle.com/javase/8/docs/api/javax/net/ssl/SSLContext.html\">SSLContext</a> class to use for SSL connections.</li> </ul> <p>Either <code class=\"highlighter-rouge\">certFile</code> or <code class=\"highlighter-rouge\">sslContext</code> must be supplied to make an SSL connection to the RethinkDB server. Only one should be used.</p> <p>If the connection cannot be established, a <code class=\"highlighter-rouge\">ReqlDriverError</code> will be thrown.</p> <p><strong>Example:</strong> Open a connection using the default host and port, specifying the default database.</p> <pre data-language=\"java\">Connection conn = r.connection().connect();\n</pre>  <p><a href=\"connect/index\">Read more about this command →</a></p> <h3 id=\"closeclose\"><a href=\"close/index\">close</a></h3> <pre class=\"command-syntax\" data-language=\"java\">conn.close([boolean])\n</pre> <p>Close an open connection.</p> <p><strong>Example:</strong> Close an open connection, waiting for noreply writes to finish.</p> <pre data-language=\"java\">conn.close();\n</pre>  <p><a href=\"close/index\">Read more about this command →</a></p> <h3 id=\"reconnectreconnect\"><a href=\"reconnect/index\">reconnect</a></h3> <pre class=\"command-syntax\" data-language=\"java\">conn.reconnect([boolean, timeout])\n</pre> <p>Close and reopen a connection.</p> <p><strong>Example:</strong> Cancel outstanding requests/queries that are no longer needed.</p> <pre data-language=\"java\">conn.reconnect(false);\n</pre>  <p><a href=\"reconnect/index\">Read more about this command →</a></p> <h3 id=\"useuse\"><a href=\"use/index\">use</a></h3> <pre class=\"command-syntax\" data-language=\"java\">conn.use(dbName)\n</pre> <p>Change the default database on this connection.</p> <p><strong>Example:</strong> Change the default database so that we don’t need to specify the database when referencing a table.</p> <pre data-language=\"java\">conn.use(\"marvel\");\nr.table(\"heroes\").run(conn);  // refers to r.db(\"marvel\").table(\"heroes\")\n</pre>  <p><a href=\"use/index\">Read more about this command →</a></p> <h3 id=\"runrun\"><a href=\"run/index\">run</a></h3> <pre class=\"command-syntax\" data-language=\"java\">query.run(conn)\n</pre> <p>Run a query on a connection, returning either a single JSON result or a cursor, depending on the query.</p> <p><strong>Example:</strong> If you are OK with potentially out of date data from all the tables involved in this query and want potentially faster reads, pass a flag allowing out of date data in an options object. Settings for individual tables will supercede this global setting for all tables in the query.</p> <pre data-language=\"java\">import com.rethinkdb.model.OptArgs;\n\nr.table(\"marvel\").run(conn, OptArgs.of(\"read_mode\", \"outdated\"));\n</pre>  <p><a href=\"run/index\">Read more about this command →</a></p> <h3 id=\"runnoreplyrunnoreply\"><a href=\"run_noreply/index\">runNoReply</a></h3> <pre class=\"command-syntax\" data-language=\"java\">query.runNoReply(conn)\n</pre> <p>Run a query on a connection and immediately return, without waiting for any result data to be returned by the server.</p> <p><strong>Example:</strong> Send a write and return immediately.</p> <pre data-language=\"java\">r.table(\"marvel\").insert(document).runNoReply(conn);\n</pre>  <p><a href=\"run_noreply/index\">Read more about this command →</a></p> <h3 id=\"changeschanges\"><a href=\"changes/index\">changes</a></h3> <pre class=\"command-syntax\" data-language=\"java\">stream.changes() → stream\nsingleSelection.changes() → stream\n</pre> <p>Turn a query into a changefeed, an infinite stream of objects representing changes to the query’s results as they occur. A changefeed may return changes to a table or an individual document (a “point” changefeed). Commands such as <code class=\"highlighter-rouge\">filter</code> or <code class=\"highlighter-rouge\">map</code> may be used before the <code class=\"highlighter-rouge\">changes</code> command to transform or filter the output, and many commands that operate on sequences can be chained after <code class=\"highlighter-rouge\">changes</code>.</p> <p><strong>Example:</strong> Subscribe to the changes on a table.</p> <p>Start monitoring the changefeed in one client:</p> <pre data-language=\"java\">Cursor changeCursor = r.table(\"games\").changes().run(conn);\nfor (Object change : changeCursor) {\n    System.out.println(change);\n}\n</pre>  <p>As these queries are performed in a second client, the first client would receive and print the following objects:</p> <pre data-language=\"java\">r.table(\"games\").insert(r.hashMap(\"id\", 1)).run(conn);\n</pre>  <pre data-language=\"java\">{\"old_val\": null, \"new_val\": {\"id\": 1}}\n</pre>  <pre data-language=\"java\">r.table(\"games\").get(1).update(r.hashMap(\"player1\", \"Bob\")).run(conn);\n</pre>  <pre data-language=\"java\">{\"old_val\": {\"id\": 1}, \"new_val\": {\"id\": 1, \"player1\": \"Bob\"}}\n</pre>  <pre data-language=\"java\">r.table(\"games\").get(1).replace(\n    r.hashMap(\"id\", 1).with(\"player1\", \"Bob\").with(\"player2\", \"Alice\")\n).run(conn);\n</pre>  <pre data-language=\"java\">{\"old_val\": {\"id\": 1, \"player1\": \"Bob\"},\n \"new_val\": {\"id\": 1, \"player1\": \"Bob\", \"player2\": \"Alice\"}}\n</pre>  <pre data-language=\"java\">r.table(\"games\").get(1).delete().run(conn);\n</pre>  <pre data-language=\"java\">{\"old_val\": {\"id\": 1, \"player1\": \"Bob\", \"player2\": \"Alice\"}, \"new_val\": null}\n</pre>  <pre data-language=\"java\">r.tableDrop(\"games\").run(conn);\n</pre>  <pre data-language=\"java\">ReqlRuntimeError: Changefeed aborted (table unavailable)\n</pre>  <p><a href=\"changes/index\">Read more about this command →</a></p> <h3 id=\"noreplywaitnoreplywait\"><a href=\"noreply_wait/index\">noreplyWait</a></h3> <pre class=\"command-syntax\" data-language=\"java\">conn.noreplyWait()\n</pre> <p>Ensure that previous queries executed with <a href=\"run_noreply/index\">runNoReply</a> have been processed by the server. Note that this guarantee only apples to queries run on the same connection.</p> <p><strong>Example:</strong> We have previously executed queries with <code class=\"highlighter-rouge\">runNoReply</code>. Now wait until the server has processed them.</p> <pre data-language=\"java\">conn.noreplyWait();\n</pre>  <p><a href=\"noreply_wait/index\">Read more about this command →</a></p> <h3 id=\"serverserver\"><a href=\"server/index\">server</a></h3> <pre class=\"command-syntax\" data-language=\"java\">conn.server()\n</pre> <p>Return information about the server being used by a connection.</p> <p><strong>Example:</strong> Return server information.</p> <pre data-language=\"java\">conn.server();\n</pre>  <pre data-language=\"java\">{\n    \"id\": \"404bef53-4b2c-433f-9184-bc3f7bda4a15\",\n    \"name\": \"amadeus\",\n    \"proxy\": false\n}\n</pre>  <p><a href=\"server/index\">Read more about this command →</a></p> <h3 id=\"optargoptarg\"><a href=\"optarg/index\">optArg</a></h3> <pre class=\"command-syntax\" data-language=\"java\">term.optArg(option, value)\n</pre> <p>Specify an optional argument to a Java ReQL term.</p> <p><strong>Example:</strong> Pass the <code class=\"highlighter-rouge\">right_bound</code> optional argument to <a href=\"between/index\">between</a>.</p> <pre data-language=\"java\">r.table(\"marvel\").between(10, 20).optArg(\"right_bound\", \"closed\").run(conn);\n</pre>  <p>To pass more than one optional argument, chain <code class=\"highlighter-rouge\">optArg</code> once for each argument.</p> <p><a href=\"optarg/index\">Read more about this command →</a></p>  <h2 data-alt=\"Cursors \">Cursors </h2>\n<h3 id=\"nextnext\"><a href=\"next/index\">next</a></h3> <pre class=\"command-syntax\" data-language=\"java\">cursor.next([wait])\n</pre> <p>Get the next element in the cursor.</p> <p><strong>Example:</strong> Retrieve the next element.</p> <pre data-language=\"java\">Cursor cursor = r.table(\"superheroes\").run(conn);\nObject doc = cursor.next();\n</pre>  <p><a href=\"next/index\">Read more about this command →</a></p> <h3 id=\"foreach\"><a href=\"each/index\">for</a></h3> <pre class=\"command-syntax\" data-language=\"java\">for (doc : &lt;Cursor&gt;) { ... }\n</pre> <p>Lazily iterate over a result set one element at a time.</p> <p><strong>Example:</strong> Let’s process all the elements!</p> <pre data-language=\"java\">Cursor cursor = r.table(\"users\").run(conn);\nfor (Object doc : cursor) {\n    System.out.println(doc);\n}\n</pre>  <p><a href=\"each/index\">Read more about this command →</a></p> <h3 id=\"tolisttoarray\"><a href=\"to_array/index\">toList</a></h3> <pre class=\"command-syntax\" data-language=\"java\">cursor.toList()\n</pre> <p>Retrieve all results from a cursor as a list.</p> <p><strong>Example:</strong> For small result sets it may be more convenient to process them at once as a list.</p> <pre data-language=\"java\">Cursor cursor = r.table(\"users\").run(conn);\nList users = cursor.toList();\nprocessResults(users);\n</pre>  <p><a href=\"to_array/index\">Read more about this command →</a></p> <h3 id=\"closeclose-cursor\"><a href=\"close-cursor/index\">close</a></h3> <pre class=\"command-syntax\" data-language=\"java\">cursor.close()\n</pre> <p>Close a cursor. Closing a cursor cancels the corresponding query and frees the memory associated with the open request.</p> <p><strong>Example:</strong> Close a cursor.</p> <pre data-language=\"java\">cursor.close();\n</pre>  <p><a href=\"close-cursor/index\">Read more about this command →</a></p>  <h2 data-alt=\"Manipulating databases \">Manipulating databases </h2>\n<h3 id=\"dbcreatedbcreate\"><a href=\"db_create/index\">dbCreate</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.dbCreate(dbName) → object\n</pre> <p>Create a database. A RethinkDB database is a collection of tables, similar to relational databases.</p> <p><strong>Example:</strong> Create a database named ‘superheroes’.</p> <pre data-language=\"java\">r.dbCreate(\"superheroes\").run(conn);\n</pre>  <p>Return:</p> <pre data-language=\"java\">{\n    \"config_changes\": [\n        {\n            \"new_val\": {\n                \"id\": \"e4689cfc-e903-4532-a0e6-2d6797a43f07\",\n                \"name\": \"superheroes\"\n            },\n            \"old_val\": null\n        }\n    ],\n    \"dbs_created\": 1\n}\n</pre>  <p><a href=\"db_create/index\">Read more about this command →</a></p> <h3 id=\"dbdropdbdrop\"><a href=\"db_drop/index\">dbDrop</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.dbDrop(dbName) → object\n</pre> <p>Drop a database. The database, all its tables, and corresponding data will be deleted.</p> <p><strong>Example:</strong> Drop a database named ‘superheroes’.</p> <pre data-language=\"java\">r.dbDrop(\"superheroes\").run(conn);\n</pre>  <p>Return:</p> <pre data-language=\"java\">{\n    \"config_changes\": [\n        {\n            \"old_val\": {\n                \"id\": \"e4689cfc-e903-4532-a0e6-2d6797a43f07\",\n                \"name\": \"superheroes\"\n            },\n            \"new_val\": null\n        }\n    ],\n    \"tables_dropped\": 3,\n    \"dbs_dropped\": 1\n}\n</pre>  <p><a href=\"db_drop/index\">Read more about this command →</a></p> <h3 id=\"dblistdblist\"><a href=\"db_list/index\">dbList</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.dbList() → array\n</pre> <p>List all database names in the cluster. The result is a list of strings.</p> <p><strong>Example:</strong> List all databases.</p> <pre data-language=\"java\">r.dbList().run(conn);\n</pre>  <p><a href=\"db_list/index\">Read more about this command →</a></p>  <h2 data-alt=\"Manipulating tables \">Manipulating tables </h2>\n<h3 id=\"tablecreatetablecreate\"><a href=\"table_create/index\">tableCreate</a></h3> <pre class=\"command-syntax\" data-language=\"java\">db.tableCreate(tableName) → object\nr.tableCreate(tableName) → object\n</pre> <p>Create a table. A RethinkDB table is a collection of JSON documents.</p> <p><strong>Example:</strong> Create a table named ‘dc_universe’ with the default settings.</p> <pre data-language=\"java\">r.db(\"heroes\").tableCreate(\"dc_universe\").run(conn);\n</pre>  <p>Result:</p> <pre data-language=\"java\">{\n    \"config_changes\": [\n        {\n            \"new_val\": {\n                \"db\": \"test\",\n                \"durability\":  \"hard\",\n                \"id\": \"20ea60d4-3b76-4817-8828-98a236df0297\",\n                \"name\": \"dc_universe\",\n                \"primary_key\": \"id\",\n                \"shards\": [\n                    {\n                        \"primary_replica\": \"rethinkdb_srv1\",\n                        \"replicas\": [\n                            \"rethinkdb_srv1\",\n                            \"rethinkdb_srv2\"\n                        ]\n                    }\n                ],\n                \"write_acks\": \"majority\"\n            },\n            \"old_val\": null\n        }\n    ],\n    \"tables_created\": 1\n}\n</pre>  <p><a href=\"table_create/index\">Read more about this command →</a></p> <h3 id=\"tabledroptabledrop\"><a href=\"table_drop/index\">tableDrop</a></h3> <pre class=\"command-syntax\" data-language=\"java\">db.tableDrop(tableName) → object\n</pre> <p>Drop a table from a database. The table and all its data will be deleted.</p> <p><strong>Example:</strong> Drop a table named “dc_universe”.</p> <pre data-language=\"java\">r.db(\"test\").tableDrop(\"dc_universe\").run(conn);\n</pre>  <p>Result:</p> <pre data-language=\"java\">{\n    \"config_changes\": [\n        {\n            \"old_val\": {\n                \"db\": \"test\",\n                \"durability\":  \"hard\",\n                \"id\": \"20ea60d4-3b76-4817-8828-98a236df0297\",\n                \"name\": \"dc_universe\",\n                \"primary_key\": \"id\",\n                \"shards\": [\n                    {\n                        \"primary_replica\": \"rethinkdb_srv1\",\n                        \"replicas\": [\n                            \"rethinkdb_srv1\",\n                            \"rethinkdb_srv2\"\n                        ]\n                    }\n                ],\n                \"write_acks\": \"majority\"\n            },\n            \"new_val\": null\n        }\n    ],\n    \"tables_dropped\": 1\n}\n</pre>  <p><a href=\"table_drop/index\">Read more about this command →</a></p> <h3 id=\"tablelisttablelist\"><a href=\"table_list/index\">tableList</a></h3> <pre class=\"command-syntax\" data-language=\"java\">db.tableList() → array\n</pre> <p>List all table names in a database. The result is a list of strings.</p> <p><strong>Example:</strong> List all tables of the ‘test’ database.</p> <pre data-language=\"java\">r.db(\"test\").tableList().run(conn);\n</pre>  <p><a href=\"table_list/index\">Read more about this command →</a></p> <h3 id=\"indexcreateindexcreate\"><a href=\"index_create/index\">indexCreate</a></h3> <pre class=\"command-syntax\" data-language=\"java\">table.indexCreate(indexName[, indexFunction]) → object\n</pre> <p>Create a new secondary index on a table. Secondary indexes improve the speed of many read queries at the slight cost of increased storage space and decreased write performance. For more information about secondary indexes, read the article “<a href=\"../../docs/secondary-indexes/java/index\">Using secondary indexes in RethinkDB</a>.”</p> <p><strong>Example:</strong> Create a simple index based on the field <code class=\"highlighter-rouge\">postId</code>.</p> <pre data-language=\"java\">r.table(\"comments\").indexCreate(\"postId\").run(conn);\n</pre>  <p><a href=\"index_create/index\">Read more about this command →</a></p> <h3 id=\"indexdropindexdrop\"><a href=\"index_drop/index\">indexDrop</a></h3> <pre class=\"command-syntax\" data-language=\"java\">table.indexDrop(indexName) → object\n</pre> <p>Delete a previously created secondary index of this table.</p> <p><strong>Example:</strong> Drop a secondary index named ‘code_name’.</p> <pre data-language=\"java\">r.table(\"dc\").indexDrop(\"code_name\").run(conn);\n</pre>  <p><a href=\"index_drop/index\">Read more about this command →</a></p> <h3 id=\"indexlistindexlist\"><a href=\"index_list/index\">indexList</a></h3> <pre class=\"command-syntax\" data-language=\"java\">table.indexList() → array\n</pre> <p>List all the secondary indexes of this table.</p> <p><strong>Example:</strong> List the available secondary indexes for this table.</p> <pre data-language=\"java\">r.table('marvel').indexList().run(conn);\n</pre>  <p><a href=\"index_list/index\">Read more about this command →</a></p> <h3 id=\"indexrenameindexrename\"><a href=\"index_rename/index\">indexRename</a></h3> <pre class=\"command-syntax\" data-language=\"java\">table.indexRename(oldIndexName, newIndexName) → object\n</pre> <p>Rename an existing secondary index on a table. If the <a href=\"optarg/index\">optArg</a> <code class=\"highlighter-rouge\">overwrite</code> is specified as <code class=\"highlighter-rouge\">true</code>, a previously existing index with the new name will be deleted and the index will be renamed. If <code class=\"highlighter-rouge\">overwrite</code> is <code class=\"highlighter-rouge\">false</code> (the default) an error will be raised if the new index name already exists.</p> <p><strong>Example:</strong> Rename an index on the comments table.</p> <pre data-language=\"java\">r.table(\"comments\").indexRename(\"postId\", \"messageId\").run(conn);\n</pre>  <p><a href=\"index_rename/index\">Read more about this command →</a></p> <h3 id=\"indexstatusindexstatus\"><a href=\"index_status/index\">indexStatus</a></h3> <pre class=\"command-syntax\" data-language=\"java\">table.indexStatus([, index...]) → array\n</pre> <p>Get the status of the specified indexes on this table, or the status of all indexes on this table if no indexes are specified.</p> <p><strong>Example:</strong> Get the status of all the indexes on <code class=\"highlighter-rouge\">test</code>:</p> <pre data-language=\"java\">r.table(\"test\").indexStatus().run(conn);\n</pre>  <p><a href=\"index_status/index\">Read more about this command →</a></p> <h3 id=\"indexwaitindexwait\"><a href=\"index_wait/index\">indexWait</a></h3> <pre class=\"command-syntax\" data-language=\"java\">table.indexWait([, index...]) → array\n</pre> <p>Wait for the specified indexes on this table to be ready, or for all indexes on this table to be ready if no indexes are specified.</p> <p><strong>Example:</strong> Wait for all indexes on the table <code class=\"highlighter-rouge\">test</code> to be ready:</p> <pre data-language=\"java\">r.table(\"test\").indexWait().run(conn);\n</pre>  <p><a href=\"index_wait/index\">Read more about this command →</a></p>  <h2 data-alt=\"Writing data \">Writing data </h2>\n<h3 id=\"insertinsert\"><a href=\"insert/index\">insert</a></h3> <pre class=\"command-syntax\" data-language=\"java\">table.insert(object | [object1, object2, ...]) → object\n</pre> <p>You can pass the following options using <a href=\"optarg/index\">optArg</a>:</p> <p><strong>Example:</strong> Insert a document into the table <code class=\"highlighter-rouge\">posts</code>.</p> <pre data-language=\"java\">r.table(\"posts\").insert(\n    r.hashMap(\"id\", 1)\n     .with(\"title\", \"Lorem ipsum\")\n     .with(\"content\", \"Dolor sit amet\")\n).run(conn);\n</pre>  <p><a href=\"insert/index\">Read more about this command →</a></p> <h3 id=\"updateupdate\"><a href=\"update/index\">update</a></h3> <pre class=\"command-syntax\" data-language=\"java\">table.update(object | function) → object\nselection.update(object | function) → object\nsingleSelection.update(object | function) → object\n</pre> <p>Update JSON documents in a table. Accepts a JSON document, a ReQL expression, or a combination of the two.</p> <p><strong>Example:</strong> Update the status of the post with <code class=\"highlighter-rouge\">id</code> of <code class=\"highlighter-rouge\">1</code> to <code class=\"highlighter-rouge\">published</code>.</p> <pre data-language=\"java\">r.table(\"posts\").get(1).update(r.hashMap(\"status\", \"published\")).run(conn);\n</pre>  <p><a href=\"update/index\">Read more about this command →</a></p> <h3 id=\"replacereplace\"><a href=\"replace/index\">replace</a></h3> <pre class=\"command-syntax\" data-language=\"java\">table.replace(object | function) → object\nselection.replace(object | function) → object\nsingleSelection.replace(object | function) → object\n</pre> <p>Replace documents in a table. Accepts a JSON document or a ReQL expression, and replaces the original document with the new one. The new document must have the same primary key as the original document.</p> <p><strong>Example:</strong> Replace the document with the primary key <code class=\"highlighter-rouge\">1</code>.</p> <pre data-language=\"java\">r.table(\"posts\").get(1).replace(\n    r.hashMap(\"id\", 1).with(\"title\", \"Lorem ipsum\")\n     .with(\"content\", \"Aleas jacta est\")\n     .with(\"status\", \"draft\")\n).run(conn);\n</pre>  <p><a href=\"replace/index\">Read more about this command →</a></p> <h3 id=\"deletedelete\"><a href=\"delete/index\">delete</a></h3> <pre class=\"command-syntax\" data-language=\"java\">table.delete() → object\nselection.delete() → object\nsingleSelection.delete() → object\n</pre> <p>Delete one or more documents from a table.</p> <p><strong>Example:</strong> Delete a single document from the table <code class=\"highlighter-rouge\">comments</code>.</p> <pre data-language=\"java\">r.table(\"comments\").get(\"7eab9e63-73f1-4f33-8ce4-95cbea626f59\").delete().run(conn);\n</pre>  <p><a href=\"delete/index\">Read more about this command →</a></p> <h3 id=\"syncsync\"><a href=\"sync/index\">sync</a></h3> <pre class=\"command-syntax\" data-language=\"java\">table.sync() → object\n</pre> <p>Ensure that writes on a given table are written to permanent storage. Queries that specify soft durability do not wait for writes to be committed to disk; a call to <code class=\"highlighter-rouge\">sync</code> on a table will not return until all previous writes to the table are completed, guaranteeing the data’s persistence.</p> <p><strong>Example:</strong> After having updated multiple heroes with soft durability, we now want to wait until these changes are persisted.</p> <pre data-language=\"java\">r.table(\"marvel\").sync().run(conn);\n</pre>  <p><a href=\"sync/index\">Read more about this command →</a></p>  <h2 data-alt=\"Selecting data \">Selecting data </h2>\n<h3 id=\"dbdb\"><a href=\"db/index\">db</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.db(dbName) → db\n</pre> <p>Reference a database.</p> <p><strong>Example:</strong> Explicitly specify a database for a query.</p> <pre data-language=\"java\">r.db(\"heroes\").table(\"marvel\").run(conn);\n</pre>  <p><a href=\"db/index\">Read more about this command →</a></p> <h3 id=\"tabletable\"><a href=\"table/index\">table</a></h3> <pre class=\"command-syntax\" data-language=\"java\">db.table(name) → table\n</pre> <p>Return all documents in a table. Other commands may be chained after <code class=\"highlighter-rouge\">table</code> to return a subset of documents (such as <a href=\"get/index\">get</a> and <a href=\"filter/index\">filter</a>) or perform further processing.</p> <p><strong>Example:</strong> Return all documents in the table ‘marvel’ of the default database.</p> <pre data-language=\"java\">r.table(\"marvel\").run(conn);\n</pre>  <p><a href=\"table/index\">Read more about this command →</a></p> <h3 id=\"getget\"><a href=\"get/index\">get</a></h3> <pre class=\"command-syntax\" data-language=\"java\">table.get(key) → singleRowSelection\n</pre> <p>Get a document by primary key.</p> <p><strong>Example:</strong> Find a document by UUID.</p> <pre data-language=\"java\">r.table(\"posts\").get(\"a9849eef-7176-4411-935b-79a6e3c56a74\").run(conn);\n</pre>  <p><a href=\"get/index\">Read more about this command →</a></p> <h3 id=\"getallgetall\"><a href=\"get_all/index\">getAll</a></h3> <pre class=\"command-syntax\" data-language=\"java\">table.getAll([key, key2...]) → selection\n</pre> <p>Get all documents where the given value matches the value of the requested index.</p> <p><strong>Example:</strong> Secondary index keys are not guaranteed to be unique so we cannot query via <a href=\"get/index\">get</a> when using a secondary index.</p> <pre data-language=\"java\">r.table(\"marvel\").getAll(\"man_of_steel\").optArg(\"index\", \"code_name\").run(conn);\n</pre>  <p><a href=\"get_all/index\">Read more about this command →</a></p> <h3 id=\"betweenbetween\"><a href=\"between/index\">between</a></h3> <pre class=\"command-syntax\" data-language=\"java\">table.between(lowerKey, upperKey) → selection\n</pre> <p>Get all documents between two keys. Accepts three <a href=\"optarg/index\">optArgs</a>: <code class=\"highlighter-rouge\">index</code>, <code class=\"highlighter-rouge\">left_bound</code>, and <code class=\"highlighter-rouge\">right_bound</code>. If <code class=\"highlighter-rouge\">index</code> is set to the name of a secondary index, <code class=\"highlighter-rouge\">between</code> will return all documents where that index’s value is in the specified range (it uses the primary key by default). <code class=\"highlighter-rouge\">left_bound</code> or <code class=\"highlighter-rouge\">right_bound</code> may be set to <code class=\"highlighter-rouge\">open</code> or <code class=\"highlighter-rouge\">closed</code> to indicate whether or not to include that endpoint of the range (by default, <code class=\"highlighter-rouge\">left_bound</code> is closed and <code class=\"highlighter-rouge\">right_bound</code> is open).</p> <p><strong>Example:</strong> Find all users with primary key &gt;= 10 and &lt; 20 (a normal half-open interval).</p> <pre data-language=\"java\">r.table(\"marvel\").between(10, 20).run(conn);\n</pre>  <p><a href=\"between/index\">Read more about this command →</a></p> <h3 id=\"filterfilter\"><a href=\"filter/index\">filter</a></h3> <pre class=\"command-syntax\" data-language=\"java\">selection.filter(predicate_function) → selection\nstream.filter(predicate_function) → stream\narray.filter(predicate_function) → array\n</pre> <p>Return all the elements in a sequence for which the given predicate is true. The return value of <code class=\"highlighter-rouge\">filter</code> will be the same as the input (sequence, stream, or array). Documents can be filtered in a variety of ways—ranges, nested values, boolean conditions, and the results of anonymous functions.</p> <p><strong>Example:</strong> Get all users who are 30 years old.</p> <pre data-language=\"java\">r.table(\"users\").filter(r.hashMap(age, 30)).run(conn);\n</pre>  <p>The predicate <code class=\"highlighter-rouge\">r.hashMap(age, 30)</code> selects documents in the <code class=\"highlighter-rouge\">users</code> table with an <code class=\"highlighter-rouge\">age</code> field whose value is <code class=\"highlighter-rouge\">30</code>. Documents with an <code class=\"highlighter-rouge\">age</code> field set to any other value <em>or</em> with no <code class=\"highlighter-rouge\">age</code> field present are skipped.</p> <p><a href=\"filter/index\">Read more about this command →</a></p>  <h2 data-alt=\"Joins \">Joins </h2>\n<h3 id=\"innerjoininnerjoin\"><a href=\"inner_join/index\">innerJoin</a></h3> <pre class=\"command-syntax\" data-language=\"java\">sequence.innerJoin(otherSequence, predicate_function) → stream\narray.innerJoin(otherSequence, predicate_function) → array\n</pre> <p>Returns an inner join of two sequences.</p> <p><strong>Example:</strong> Return a list of all matchups between Marvel and DC heroes in which the DC hero could beat the Marvel hero in a fight.</p> <pre data-language=\"java\">r.table(\"marvel\").innerJoin(r.table(\"dc\"),\n    (marvel_row, dc_row) -&gt; marvel_row.g(\"strength\").lt(dc_row.g(\"strength\"))\n).zip().run(conn);\n</pre>  <p><a href=\"inner_join/index\">Read more about this command →</a></p> <h3 id=\"outerjoinouterjoin\"><a href=\"outer_join/index\">outerJoin</a></h3> <pre class=\"command-syntax\" data-language=\"java\">sequence.outerJoin(otherSequence, predicate_function) → stream\narray.outerJoin(otherSequence, predicate_function) → array\n</pre> <p>Returns a left outer join of two sequences. The returned sequence represents a union of the left-hand sequence and the right-hand sequence: all documents in the left-hand sequence will be returned, each matched with a document in the right-hand sequence if one satisfies the predicate condition. In most cases, you will want to follow the join with <a href=\"zip/index\">zip</a> to combine the left and right results.</p> <p><strong>Example:</strong> Return a list of all Marvel heroes, paired with any DC heroes who could beat them in a fight.</p> <pre data-language=\"java\">r.table(\"marvel\").outerJoin(r.table(\"dc\"),\n    (marvel_row, dc_row) -&gt; marvel_row.g(\"strength\").lt(dc_row.g(\"strength\"))\n).zip().run(conn);\n</pre>  <p>(Compare this to an <a href=\"inner_join/index\">innerJoin</a> with the same inputs and predicate, which would return a list only of the matchups in which the DC hero has the higher strength.)</p> <p><a href=\"outer_join/index\">Read more about this command →</a></p> <h3 id=\"eqjoineqjoin\"><a href=\"eq_join/index\">eqJoin</a></h3> <pre class=\"command-syntax\" data-language=\"java\">sequence.eqJoin(leftField, rightTable) → sequence\nsequence.eqJoin(function, rightTable) → sequence\n</pre> <p>Join tables using a field or function on the left-hand sequence matching primary keys or secondary indexes on the right-hand table. <code class=\"highlighter-rouge\">eqJoin</code> is more efficient than other ReQL join types, and operates much faster. Documents in the result set consist of pairs of left-hand and right-hand documents, matched when the field on the left-hand side exists and is non-null and an entry with that field’s value exists in the specified index on the right-hand side.</p> <p><strong>Example:</strong> Match players with the games they’ve played against one another.</p> <p>Join these tables using <code class=\"highlighter-rouge\">gameId</code> on the player table and <code class=\"highlighter-rouge\">id</code> on the games table:</p> <pre data-language=\"java\">r.table(\"players\").eqJoin(\"gameId\", r.table(\"games\")).run(conn);\n</pre>  <p>This will return a result set such as the following:</p> <pre data-language=\"java\">[\n    {\n        \"left\" : { \"gameId\" : 3, \"id\" : 2, \"player\" : \"Agatha\" },\n        \"right\" : { \"id\" : 3, \"field\" : \"Bucklebury\" }\n    },\n    {\n        \"left\" : { \"gameId\" : 2, \"id\" : 3, \"player\" : \"Fred\" },\n        \"right\" : { \"id\" : 2, \"field\" : \"Rushock Bog\" }\n    },\n    ...\n]\n</pre>  <p><a href=\"eq_join/index\">Read more about this command →</a></p> <h3 id=\"zipzip\"><a href=\"zip/index\">zip</a></h3> <pre class=\"command-syntax\" data-language=\"java\">stream.zip() → stream\narray.zip() → array\n</pre> <p>Used to ‘zip’ up the result of a join by merging the ‘right’ fields into ‘left’ fields of each member of the sequence.</p> <p><strong>Example:</strong> ‘zips up’ the sequence by merging the left and right fields produced by a join.</p> <pre data-language=\"java\">r.table(\"marvel\").eqJoin(\"main_dc_collaborator\", r.table(\"dc\")).zip().run(conn);\n</pre>  <p><a href=\"zip/index\">Read more about this command →</a></p>  <h2 data-alt=\"Transformations \">Transformations </h2>\n<h3 id=\"mapmap\"><a href=\"map/index\">map</a></h3> <pre class=\"command-syntax\" data-language=\"java\">sequence1.map([sequence2, ...], function) → stream\narray1.map([array2, ...], function) → array\nr.map(sequence1[, sequence2, ...], function) → stream\nr.map(array1[, array2, ...], function) → array\n</pre> <p>Transform each element of one or more sequences by applying a mapping function to them. If <code class=\"highlighter-rouge\">map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</p> <p><strong>Example:</strong> Return the first five squares.</p> <pre data-language=\"java\">r.expr(r.array(1, 2, 3, 4, 5)).map(val -&gt; r.mul(val, val)).run(conn);\n\n// Result:\n[1, 4, 9, 16, 25]\n</pre>  <p><a href=\"map/index\">Read more about this command →</a></p> <h3 id=\"withfieldswithfields\"><a href=\"with_fields/index\">withFields</a></h3> <pre class=\"command-syntax\" data-language=\"java\">sequence.withFields([selector1, selector2...]) → stream\narray.withFields([selector1, selector2...]) → array\n</pre> <p>Plucks one or more attributes from a sequence of objects, filtering out any objects in the sequence that do not have the specified fields. Functionally, this is identical to <a href=\"has_fields/index\">hasFields</a> followed by <a href=\"pluck/index\">pluck</a> on a sequence.</p> <p><strong>Example:</strong> Get a list of users and their posts, excluding any users who have not made any posts.</p> <p>Existing table structure:</p> <pre data-language=\"java\">[\n    { \"id\": 1, \"user\": \"bob\", \"email\": \"bob@foo.com\", \"posts\": [ 1, 4, 5 ] },\n    { \"id\": 2, \"user\": \"george\", \"email\": \"george@foo.com\" },\n    { \"id\": 3, \"user\": \"jane\", \"email\": \"jane@foo.com\", \"posts\": [ 2, 3, 6 ] }\n]\n</pre>  <p>Command and output:</p> <pre data-language=\"java\">r.table(\"users\").withFields(\"id\", \"user\", \"posts\").run(conn);\n\n// Result passed to callback\n[\n    { \"id\": 1, \"user\": \"bob\", \"posts\": [ 1, 4, 5 ] },\n    { \"id\": 3, \"user\": \"jane\", \"posts\": [ 2, 3, 6 ] }\n]\n</pre>  <p><a href=\"with_fields/index\">Read more about this command →</a></p> <h3 id=\"concatmapconcatmap\"><a href=\"concat_map/index\">concatMap</a></h3> <pre class=\"command-syntax\" data-language=\"java\">stream.concatMap(function) → stream\narray.concatMap(function) → array\n</pre> <p>Concatenate one or more elements into a single sequence using a mapping function.</p> <p><strong>Example:</strong> Construct a sequence of all monsters defeated by Marvel heroes. The field “defeatedMonsters” is an array of one or more monster names.</p> <pre data-language=\"java\">r.table(\"marvel\").concatMap(hero -&gt; hero.g(\"defeatedMonsters\")).run(conn);\n</pre>  <p><a href=\"concat_map/index\">Read more about this command →</a></p> <h3 id=\"orderbyorderby\"><a href=\"order_by/index\">orderBy</a></h3> <pre class=\"command-syntax\" data-language=\"java\">table.orderBy([key | function]).optArg(\"index\", index) → selection&lt;stream&gt;\nselection.orderBy(key | function[, ...]) → selection&lt;array&gt;\nsequence.orderBy(key | function[, ...]) → array\n</pre> <p>Sort the sequence by document values of the given key(s). To specify the ordering, wrap the attribute with either <code class=\"highlighter-rouge\">r.asc</code> or <code class=\"highlighter-rouge\">r.desc</code> (defaults to ascending).</p> <p><strong>Example:</strong> Order all the posts using the index <code class=\"highlighter-rouge\">date</code>.</p> <pre data-language=\"java\">r.table(\"posts\").orderBy().optArg(\"index\", \"date\").run(conn);\n</pre>  <p><a href=\"order_by/index\">Read more about this command →</a></p> <h3 id=\"skipskip\"><a href=\"skip/index\">skip</a></h3> <pre class=\"command-syntax\" data-language=\"java\">sequence.skip(n) → stream\narray.skip(n) → array\n</pre> <p>Skip a number of elements from the head of the sequence.</p> <p><strong>Example:</strong> Here in conjunction with <a href=\"order_by/index\">orderBy</a> we choose to ignore the most successful heroes.</p> <pre data-language=\"java\">r.table(\"marvel\").orderBy(\"successMetric\").skip(10).run(conn);\n</pre>  <p><a href=\"skip/index\">Read more about this command →</a></p> <h3 id=\"limitlimit\"><a href=\"limit/index\">limit</a></h3> <pre class=\"command-syntax\" data-language=\"java\">sequence.limit(n) → stream\narray.limit(n) → array\n</pre> <p>End the sequence after the given number of elements.</p> <p><strong>Example:</strong> Only so many can fit in our Pantheon of heroes.</p> <pre data-language=\"java\">r.table(\"marvel\").orderBy(\"belovedness\").limit(10).run(conn);\n</pre>  <p><a href=\"limit/index\">Read more about this command →</a></p> <h3 id=\"sliceslice\"><a href=\"slice/index\">slice</a></h3> <pre class=\"command-syntax\" data-language=\"java\">selection.slice(startOffset[, endOffset]) → selection\nstream.slice(startOffset[, endOffset]) → stream\narray.slice(startOffset[, endOffset]) → array\nbinary.slice(startOffset[, endOffset]) → binary\nstring.slice(startOffset[, endOffset]) → string\n</pre> <p>Return the elements of a sequence within the specified range.</p> <p><strong>Example:</strong> Return the fourth, fifth and sixth youngest players. (The youngest player is at index 0, so those are elements 3–5.)</p> <pre data-language=\"java\">r.table(\"players\").orderBy().optArg(\"index\", \"age\").slice(3, 6).run(conn);\n</pre>  <p><a href=\"slice/index\">Read more about this command →</a></p> <h3 id=\"nthnth\"><a href=\"nth/index\">nth</a></h3> <pre class=\"command-syntax\" data-language=\"java\">sequence.nth(index) → object\nselection.nth(index) → selection&lt;object&gt;\n</pre> <p>Get the <em>nth</em> element of a sequence, counting from zero. If the argument is negative, count from the last element.</p> <p><strong>Example:</strong> Select the second element in the array.</p> <pre data-language=\"java\">r.expr(r.array(1,2,3)).nth(1).run(conn);\n</pre>  <p><a href=\"nth/index\">Read more about this command →</a></p> <h3 id=\"offsetsofoffsetsof\"><a href=\"offsets_of/index\">offsetsOf</a></h3> <pre class=\"command-syntax\" data-language=\"java\">sequence.offsetsOf(datum | predicate_function) → array\n</pre> <p>Get the indexes of an element in a sequence. If the argument is a predicate, get the indexes of all elements matching it.</p> <p><strong>Example:</strong> Find the position of the letter ‘c’.</p> <pre data-language=\"java\">r.expr(r.array(\"a\", \"b\", \"c\")).offsetsOf(\"c\").run(conn);\n</pre>  <p><a href=\"offsets_of/index\">Read more about this command →</a></p> <h3 id=\"isemptyisempty\"><a href=\"is_empty/index\">isEmpty</a></h3> <pre class=\"command-syntax\" data-language=\"java\">sequence.isEmpty() → bool\n</pre> <p>Test if a sequence is empty.</p> <p><strong>Example:</strong> Are there any documents in the marvel table?</p> <pre data-language=\"java\">r.table(\"marvel\").isEmpty().run(conn);\n</pre>  <p><a href=\"is_empty/index\">Read more about this command →</a></p> <h3 id=\"unionunion\"><a href=\"union/index\">union</a></h3> <pre class=\"command-syntax\" data-language=\"java\">stream.union(sequence[, sequence, ...]) → stream\narray.union(sequence[, sequence, ...]) → array\nr.union(stream, sequence[, sequence, ...]) → stream\nr.union(array, sequence[, sequence, ...]) → array\n</pre> <p>Merge two or more sequences.</p> <p><strong>Example:</strong> Construct a stream of all heroes.</p> <pre data-language=\"java\">r.table(\"marvel\").union(r.table(\"dc\")).run(conn);\n</pre>  <p><a href=\"union/index\">Read more about this command →</a></p> <h3 id=\"samplesample\"><a href=\"sample/index\">sample</a></h3> <pre class=\"command-syntax\" data-language=\"java\">sequence.sample(number) → selection\nstream.sample(number) → array\narray.sample(number) → array\n</pre> <p>Select a given number of elements from a sequence with uniform random distribution. Selection is done without replacement.</p> <p><strong>Example:</strong> Select 3 random heroes.</p> <pre data-language=\"java\">r.table(\"marvel\").sample(3).run(conn);\n</pre>  <p><a href=\"sample/index\">Read more about this command →</a></p>  <h2 data-alt=\"Aggregation \">Aggregation </h2>\n<h3 id=\"groupgroup\"><a href=\"group/index\">group</a></h3> <pre class=\"command-syntax\" data-language=\"java\">sequence.group([field | function...,]) → grouped_stream\nr.group(sequence, [field | function...,]) → grouped_stream\n</pre> <p>Takes a stream and partitions it into multiple groups based on the fields or functions provided.</p> <p><strong>Example:</strong> Group games by player.</p> <pre data-language=\"java\">r.table(\"games\").group(\"player\").run(conn);\n</pre>  <p>To show the returned data, we’ll use JSON representation again, with <code class=\"highlighter-rouge\">group</code> and <code class=\"highlighter-rouge\">values</code> as the fields corresponding to the elements in each <code class=\"highlighter-rouge\">GroupedResult</code>.</p> <pre data-language=\"java\">[\n    {\n        \"group\": \"Alice\",\n        \"values\": [\n            {\"id\": 5, \"player\": \"Alice\", \"points\": 7, \"type\": \"free\"},\n            {\"id\": 12, \"player\": \"Alice\", \"points\": 2, \"type\": \"free\"}\n        ]\n    },\n    {\n        \"group\": \"Bob\",\n        \"values\": [\n            {\"id\": 2, \"player\": \"Bob\", \"points\": 15, \"type\": \"ranked\"},\n            {\"id\": 11, \"player\": \"Bob\", \"points\": 10, \"type\": \"free\"}\n        ]\n    }\n]\n</pre>  <p><a href=\"group/index\">Read more about this command →</a></p> <h3 id=\"ungroupungroup\"><a href=\"ungroup/index\">ungroup</a></h3> <pre class=\"command-syntax\" data-language=\"java\">grouped_stream.ungroup() → array\ngrouped_data.ungroup() → array\n</pre> <p>Takes a grouped stream or grouped data and turns it into an array of objects representing the groups. Any commands chained after <code class=\"highlighter-rouge\">ungroup</code> will operate on this array, rather than operating on each group individually. This is useful if you want to e.g. order the groups by the value of their reduction.</p> <p><strong>Example:</strong> What is the maximum number of points scored by each player, with the highest scorers first?</p> <pre data-language=\"java\">r.table(\"games\").group(\"player\").max(\"points\").g(\"points\").ungroup()\n .orderBy(r.desc(\"reduction\")).run(conn);\n</pre>  <p><a href=\"ungroup/index\">Read more about this command →</a></p> <h3 id=\"reducereduce\"><a href=\"reduce/index\">reduce</a></h3> <pre class=\"command-syntax\" data-language=\"java\">sequence.reduce(function) → value\nr.reduce(sequence, function) → value\n</pre> <p>Produce a single value from a sequence through repeated application of a reduction function.</p> <p><strong>Example:</strong> Return the number of documents in the table <code class=\"highlighter-rouge\">posts</code>.</p> <pre data-language=\"java\">r.table(\"posts\").map(doc -&gt; 1).reduce(\n    (left, right) -&gt; left.add(right)\n).default_(0).run(conn);\n</pre>  <p>A shorter way to execute this query is to use <a href=\"count/index\">count</a>.</p> <p><a href=\"reduce/index\">Read more about this command →</a></p> <h3 id=\"foldfold\"><a href=\"fold/index\">fold</a></h3> <pre class=\"command-syntax\" data-language=\"java\">sequence.fold(base, function) → value\nsequence.fold(base, function).optArg(\"emit\", function)[.optArg(\"final_emit\", function)] → sequence\n</pre> <p>Apply a function to a sequence in order, maintaining state via an accumulator. The <code class=\"highlighter-rouge\">fold</code> command returns either a single value or a new sequence.</p> <p><strong>Example:</strong> Concatenate words from a list.</p> <pre data-language=\"java\">r.table(\"words\").orderBy(\"id\").fold(\"\",\n    (acc, word) -&gt; acc.add(r.branch(r.eq(acc, \"\"), \"\", \", \")).add(word)\n).run(conn);\n</pre>  <p>(This example could be implemented with <code class=\"highlighter-rouge\">reduce</code>, but <code class=\"highlighter-rouge\">fold</code> will preserve the order when <code class=\"highlighter-rouge\">words</code> is a RethinkDB table or other stream, which is not guaranteed with <code class=\"highlighter-rouge\">reduce</code>.)</p> <p><a href=\"fold/index\">Read more about this command →</a></p> <h3 id=\"countcount\"><a href=\"count/index\">count</a></h3> <pre class=\"command-syntax\" data-language=\"java\">sequence.count([value | predicate_function]) → number\nbinary.count() → number\nstring.count() → number\nobject.count() → number\nr.count(sequence | binary | string | object[, predicate_function]) → number\n</pre> <p>Counts the number of elements in a sequence or key/value pairs in an object, or returns the size of a string or binary object.</p> <p><strong>Example:</strong> Count the number of users.</p> <pre data-language=\"java\">r.table(\"users\").count().run(conn);\n</pre>  <p><a href=\"count/index\">Read more about this command →</a></p> <h3 id=\"sumsum\"><a href=\"sum/index\">sum</a></h3> <pre class=\"command-syntax\" data-language=\"java\">sequence.sum([field | function]) → number\nr.sum(sequence, [field | function]) → number\n</pre> <p>Sums all the elements of a sequence. If called with a field name, sums all the values of that field in the sequence, skipping elements of the sequence that lack that field. If called with a function, calls that function on every element of the sequence and sums the results, skipping elements of the sequence where that function returns <code class=\"highlighter-rouge\">null</code> or a non-existence error.</p> <p><strong>Example:</strong> What’s 3 + 5 + 7?</p> <pre data-language=\"java\">r.expr(r.array(3, 5, 7)).sum().run(conn);\n</pre>  <p><a href=\"sum/index\">Read more about this command →</a></p> <h3 id=\"avgavg\"><a href=\"avg/index\">avg</a></h3> <pre class=\"command-syntax\" data-language=\"java\">sequence.avg([field | function]) → number\nr.avg(sequence, [field | function]) → number\n</pre> <p>Averages all the elements of a sequence. If called with a field name, averages all the values of that field in the sequence, skipping elements of the sequence that lack that field. If called with a function, calls that function on every element of the sequence and averages the results, skipping elements of the sequence where that function returns <code class=\"highlighter-rouge\">null</code> or a non-existence error.</p> <p><strong>Example:</strong> What’s the average of 3, 5, and 7?</p> <pre data-language=\"java\">r.expr(r.array(3, 5, 7)).avg().run(conn);\n</pre>  <p><a href=\"avg/index\">Read more about this command →</a></p> <h3 id=\"minmin\"><a href=\"min/index\">min</a></h3> <pre class=\"command-syntax\" data-language=\"java\">sequence.min([field | function]) → element\nr.min(sequence, [field | function]) → element\n</pre> <p>Finds the minimum element of a sequence.</p> <p><strong>Example:</strong> Return the minimum value in the list <code class=\"highlighter-rouge\">[3, 5, 7]</code>.</p> <pre data-language=\"java\">r.expr(r.array(3, 5, 7)).min().run(conn);\n</pre>  <p><a href=\"min/index\">Read more about this command →</a></p> <h3 id=\"maxmax\"><a href=\"max/index\">max</a></h3> <pre class=\"command-syntax\" data-language=\"java\">sequence.max([field | function]) → element\nr.max(sequence, [field | function]) → element\n</pre> <p>Finds the maximum element of a sequence.</p> <p><strong>Example:</strong> Return the maximum value in the list <code class=\"highlighter-rouge\">[3, 5, 7]</code>.</p> <pre data-language=\"java\">r.expr(r.array(3, 5, 7)).max().run(conn);\n</pre>  <p><a href=\"max/index\">Read more about this command →</a></p> <h3 id=\"distinctdistinct\"><a href=\"distinct/index\">distinct</a></h3> <pre class=\"command-syntax\" data-language=\"java\">sequence.distinct() → array\ntable.distinct() → stream\nr.distinct(sequence) → array\nr.distinct(table) → stream\n</pre> <p>Removes duplicates from elements in a sequence.</p> <p><strong>Example:</strong> Which unique villains have been vanquished by Marvel heroes?</p> <pre data-language=\"java\">r.table(\"marvel\").concatMap(\n    hero -&gt; hero.g(\"villain_list\")\n).distinct().run(conn);\n</pre>  <p><a href=\"distinct/index\">Read more about this command →</a></p> <h3 id=\"containscontains\"><a href=\"contains/index\">contains</a></h3> <pre class=\"command-syntax\" data-language=\"java\">sequence.contains([value | predicate_function, ...]) → bool\nr.contains(sequence, [value | predicate_function, ...]) → bool\n</pre> <p>When called with values, returns <code class=\"highlighter-rouge\">true</code> if a sequence contains all the specified values. When called with predicate functions, returns <code class=\"highlighter-rouge\">true</code> if for each predicate there exists at least one element of the stream where that predicate returns <code class=\"highlighter-rouge\">true</code>.</p> <p><strong>Example:</strong> Has Iron Man ever fought Superman?</p> <pre data-language=\"java\">r.table(\"marvel\").get(\"ironman\").g(\"opponents\").contains(\"superman\").run(conn);\n</pre>  <p><a href=\"contains/index\">Read more about this command →</a></p>  <h2 data-alt=\"Document manipulation \">Document manipulation </h2> <h3 id=\"pluckpluck\"><a href=\"pluck/index\">pluck</a></h3> <pre class=\"command-syntax\" data-language=\"java\">sequence.pluck([selector1, selector2...]) → stream\narray.pluck([selector1, selector2...]) → array\nobject.pluck([selector1, selector2...]) → object\nsingleSelection.pluck([selector1, selector2...]) → object\n</pre> <p>Plucks out one or more attributes from either an object or a sequence of objects (projection).</p> <p><strong>Example:</strong> We just need information about IronMan’s reactor and not the rest of the document.</p> <pre data-language=\"java\">r.table(\"marvel\").get(\"IronMan\").pluck(\"reactorState\", \"reactorPower\").run(conn);\n</pre>  <p><a href=\"pluck/index\">Read more about this command →</a></p> <h3 id=\"withoutwithout\"><a href=\"without/index\">without</a></h3> <pre class=\"command-syntax\" data-language=\"java\">sequence.without([selector1, selector2...]) → stream\narray.without([selector1, selector2...]) → array\nsingleSelection.without([selector1, selector2...]) → object\nobject.without([selector1, selector2...]) → object\n</pre> <p>The opposite of pluck; takes an object or a sequence of objects, and returns them with the specified fields or paths removed.</p> <p><strong>Example:</strong> Since we don’t need it for this computation we’ll save bandwidth and leave out the list of IronMan’s romantic conquests.</p> <pre data-language=\"java\">r.table(\"marvel\").get(\"IronMan\").without(\"personalVictoriesList\").run(conn);\n</pre>  <p><a href=\"without/index\">Read more about this command →</a></p> <h3 id=\"mergemerge\"><a href=\"merge/index\">merge</a></h3> <pre class=\"command-syntax\" data-language=\"java\">singleSelection.merge([object | function, object | function, ...]) → object\nobject.merge([object | function, object | function, ...]) → object\nsequence.merge([object | function, object | function, ...]) → stream\narray.merge([object | function, object | function, ...]) → array\n</pre> <p>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code class=\"highlighter-rouge\">merge</code> also accepts a function that returns an object, which will be used similarly to a <a href=\"map/index\">map</a> function.</p> <p><strong>Example:</strong> Equip Thor for battle.</p> <pre data-language=\"java\">r.table(\"marvel\").get(\"thor\")\n .merge(r.table(\"equipment\").get(\"hammer\"),\n        r.table(\"equipment\").get(\"pimento_sandwich\"))\n .run(conn);\n</pre>  <p><a href=\"merge/index\">Read more about this command →</a></p> <h3 id=\"appendappend\"><a href=\"append/index\">append</a></h3> <pre class=\"command-syntax\" data-language=\"java\">array.append(value) → array\n</pre> <p>Append a value to an array.</p> <p><strong>Example:</strong> Retrieve Iron Man’s equipment list with the addition of some new boots.</p> <pre data-language=\"java\">r.table(\"marvel\").get(\"IronMan\").g(\"equipment\").append(\"newBoots\").run(conn);\n</pre>  <p><a href=\"append/index\">Read more about this command →</a></p> <h3 id=\"prependprepend\"><a href=\"prepend/index\">prepend</a></h3> <pre class=\"command-syntax\" data-language=\"java\">array.prepend(value) → array\n</pre> <p>Prepend a value to an array.</p> <p><strong>Example:</strong> Retrieve Iron Man’s equipment list with the addition of some new boots.</p> <pre data-language=\"java\">r.table(\"marvel\").get(\"IronMan\").g(\"equipment\").prepend(\"newBoots\").run(conn);\n</pre>  <p><a href=\"prepend/index\">Read more about this command →</a></p> <h3 id=\"differencedifference\"><a href=\"difference/index\">difference</a></h3> <pre class=\"command-syntax\" data-language=\"java\">array.difference(array) → array\n</pre> <p>Remove the elements of one array from another array.</p> <p><strong>Example:</strong> Retrieve Iron Man’s equipment list without boots.</p> <pre data-language=\"java\">r.table(\"marvel\").get(\"IronMan\").g(\"equipment\").difference(r.array(\"Boots\"))\n .run(conn);\n</pre>  <p><a href=\"difference/index\">Read more about this command →</a></p> <h3 id=\"setinsertsetinsert\"><a href=\"set_insert/index\">setInsert</a></h3> <pre class=\"command-syntax\" data-language=\"java\">array.setInsert(value) → array\n</pre> <p>Add a value to an array and return it as a set (an array with distinct values).</p> <p><strong>Example:</strong> Retrieve Iron Man’s equipment list with the addition of some new boots.</p> <pre data-language=\"java\">r.table(\"marvel\").get(\"IronMan\").g(\"equipment\").setInsert(\"newBoots\").run(conn);\n</pre>  <p><a href=\"set_insert/index\">Read more about this command →</a></p> <h3 id=\"setunionsetunion\"><a href=\"set_union/index\">setUnion</a></h3> <pre class=\"command-syntax\" data-language=\"java\">array.setUnion(array) → array\n</pre> <p>Perform a set intersection of two arrays, returning an array with all unique items from both.</p> <p><strong>Example:</strong> Retrieve Iron Man’s equipment list with the addition of some new boots and an arc reactor.</p> <pre data-language=\"java\">r.table(\"marvel\").get(\"IronMan\").g(\"equipment\")\n .setUnion(r.array(\"newBoots\", \"arc_reactor\")).run(conn);\n</pre>  <p><a href=\"set_union/index\">Read more about this command →</a></p> <h3 id=\"setintersectionsetintersection\"><a href=\"set_intersection/index\">setIntersection</a></h3> <pre class=\"command-syntax\" data-language=\"java\">array.setIntersection(array) → array\n</pre> <p>Intersect two arrays returning values that occur in both of them as a set (an array with distinct values).</p> <p><strong>Example:</strong> Check which pieces of equipment Iron Man has from a fixed list.</p> <pre data-language=\"java\">r.table(\"marvel\").get(\"IronMan\").g(\"equipment\")\n .setIntersection(r.array(\"newBoots\", \"arc_reactor\")).run(conn);\n</pre>  <p><a href=\"set_intersection/index\">Read more about this command →</a></p> <h3 id=\"setdifferencesetdifference\"><a href=\"set_difference/index\">setDifference</a></h3> <pre class=\"command-syntax\" data-language=\"java\">array.setDifference(array) → array\n</pre> <p>Remove the elements of one array from another and return them as a set (an array with distinct values).</p> <p><strong>Example:</strong> Check which pieces of equipment Iron Man has, excluding a fixed list.</p> <pre data-language=\"java\">r.table(\"marvel\").get(\"IronMan\").g(\"equipment\")\n .setDifference(r.array(\"newBoots\", \"arc_reactor\")).run(conn);\n</pre>  <p><a href=\"set_difference/index\">Read more about this command →</a></p> <h3 id=\"bracketbracket\"><a href=\"bracket/index\">bracket</a></h3> <pre class=\"command-syntax\" data-language=\"java\">sequence.bracket(attr) → sequence\nsingleSelection.bracket(attr) → value\nobject.bracket(attr) → value\narray.bracket(index) → value\n</pre> <p>Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.</p> <p><strong>Example:</strong> What was Iron Man’s first appearance in a comic?</p> <pre data-language=\"java\">r.table(\"marvel\").get(\"IronMan\").bracket(\"firstAppearance\").run(conn);\n// more idiomatically:\nr.table(\"marvel\").get(\"IronMan\").g(\"firstAppearance\").run(conn);\n</pre>  <p><a href=\"bracket/index\">Read more about this command →</a></p> <h3 id=\"getfield-ggetfield\"><a href=\"get_field/index\">getField, g</a></h3> <pre class=\"command-syntax\" data-language=\"java\">sequence.g(attr) → sequence\nsingleSelection.g(attr) → value\nobject.g(attr) → value\n</pre> <p>Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.</p> <p><strong>Example:</strong> What was Iron Man’s first appearance in a comic?</p> <pre data-language=\"java\">r.table(\"marvel\").get(\"IronMan\").g(\"firstAppearance\").run(conn);\n</pre>  <p><a href=\"get_field/index\">Read more about this command →</a></p> <h3 id=\"hasfieldshasfields\"><a href=\"has_fields/index\">hasFields</a></h3> <pre class=\"command-syntax\" data-language=\"java\">sequence.hasFields([selector1, selector2...]) → stream\narray.hasFields([selector1, selector2...]) → array\nobject.hasFields([selector1, selector2...]) → boolean\n</pre> <p>Test if an object has one or more fields. An object has a field if it has that key and the key has a non-null value. For instance, the object <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"err\">'a'</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"err\">'b'</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"err\">'c'</span><span class=\"p\">:</span><span class=\"kc\">null</span><span class=\"p\">}</span></code> has the fields <code class=\"highlighter-rouge\">a</code> and <code class=\"highlighter-rouge\">b</code>.</p> <p><strong>Example:</strong> Return the players who have won games.</p> <pre data-language=\"java\">r.table(\"players\").hasFields(\"games_won\").run(conn);\n</pre>  <p><a href=\"has_fields/index\">Read more about this command →</a></p> <h3 id=\"insertatinsertat\"><a href=\"insert_at/index\">insertAt</a></h3> <pre class=\"command-syntax\" data-language=\"java\">array.insertAt(offset, value) → array\n</pre> <p>Insert a value in to an array at a given index. Returns the modified array.</p> <p><strong>Example:</strong> Hulk decides to join the avengers.</p> <pre data-language=\"java\">r.expr(r.array(\"Iron Man\", \"Spider-Man\")).insertAt(1, \"Hulk\").run(conn);\n</pre>  <p><a href=\"insert_at/index\">Read more about this command →</a></p> <h3 id=\"spliceatspliceat\"><a href=\"splice_at/index\">spliceAt</a></h3> <pre class=\"command-syntax\" data-language=\"java\">array.spliceAt(offset, array) → array\n</pre> <p>Insert several values into an array at the given index. Returns the modified array.</p> <p><strong>Example:</strong> Hulk and Thor decide to join the Avengers.</p> <pre data-language=\"java\">r.expr(r.array(\"Iron Man\", \"Spider-Man\"))\n .spliceAt(1, r.array(\"Hulk\", \"Thor\")).run(conn);\n</pre>  <p><a href=\"splice_at/index\">Read more about this command →</a></p> <h3 id=\"deleteatdeleteat\"><a href=\"delete_at/index\">deleteAt</a></h3> <pre class=\"command-syntax\" data-language=\"java\">array.deleteAt(offset [,endOffset]) → array\n</pre> <p>Remove one or more elements from an array at a given index. Returns the modified array. (Note: <code class=\"highlighter-rouge\">deleteAt</code> operates on arrays, not documents; to delete documents, see the <a href=\"delete/index\">delete</a> command.)</p> <p><strong>Example:</strong> Delete the second element of an array.</p> <pre data-language=\"java\">r.expr(r.array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")).deleteAt(1).run(conn);\n\n// Result:\n[\"a\", \"c\", \"d\", \"e\", \"f\"]\n</pre>  <p><a href=\"delete_at/index\">Read more about this command →</a></p> <h3 id=\"changeatchangeat\"><a href=\"change_at/index\">changeAt</a></h3> <pre class=\"command-syntax\" data-language=\"java\">array.changeAt(offset, value) → array\n</pre> <p>Change a value in an array at a given index. Returns the modified array.</p> <p><strong>Example:</strong> Bruce Banner hulks out.</p> <pre data-language=\"java\">r.expr(r.array(\"Iron Man\", \"Bruce\", \"Spider-Man\")).changeAt(1, \"Hulk\")\n .run(conn);\n</pre>  <p><a href=\"change_at/index\">Read more about this command →</a></p> <h3 id=\"keyskeys\"><a href=\"keys/index\">keys</a></h3> <pre class=\"command-syntax\" data-language=\"java\">singleSelection.keys() → array\nobject.keys() → array\n</pre> <p>Return an array containing all of an object’s keys. Note that the keys will be sorted as described in <a href=\"../../docs/data-types/index#sorting-order\">ReQL data types</a> (for strings, lexicographically).</p> <p><strong>Example:</strong> Get all the keys from a table row.</p> <pre data-language=\"java\">// row: { \"id\": 1, \"mail\": \"fred@example.com\", \"name\": \"fred\" }\n\nr.table(\"users\").get(1).keys().run(conn);\n\n// Result:\n[ \"id\", \"mail\", \"name\" ]\n</pre>  <p><a href=\"keys/index\">Read more about this command →</a></p> <h3 id=\"valuesvalues\"><a href=\"values/index\">values</a></h3> <pre class=\"command-syntax\" data-language=\"java\">singleSelection.values() → array\nobject.values() → array\n</pre> <p>Return an array containing all of an object’s values. <code class=\"highlighter-rouge\">values()</code> guarantees the values will come out in the same order as <a href=\"keys/index\">keys</a>.</p> <p><strong>Example:</strong> Get all of the values from a table row.</p> <pre data-language=\"java\">// row: { \"id\": 1, \"mail\": \"fred@example.com\", \"name\": \"fred\" }\n\nr.table(\"users\").get(1).values().run(conn);\n\n// Result:\n[ 1, \"fred@example.com\", \"fred\" ]\n</pre>  <p><a href=\"values/index\">Read more about this command →</a></p> <h3 id=\"literalliteral\"><a href=\"literal/index\">literal</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.literal(object) → special\n</pre> <p>Replace an object in a field instead of merging it with an existing object in a <code class=\"highlighter-rouge\">merge</code> or <code class=\"highlighter-rouge\">update</code> operation. Using <code class=\"highlighter-rouge\">literal</code> with no arguments in a <code class=\"highlighter-rouge\">merge</code> or <code class=\"highlighter-rouge\">update</code> operation will remove the corresponding field.</p> <p><strong>Example:</strong> Replace one nested document with another rather than merging the fields.</p> <pre data-language=\"java\">r.table(\"users\").get(1)\n .update(r.hashMap(\"data\", r.literal(r.hashMap(\"age\", 19).with(\"job\", \"Engineer\"))))\n .run(conn);\n\n// Result:\n{\n    \"id\": 1,\n    \"name\": \"Alice\",\n    \"data\": {\n        \"age\": 19,\n        \"job\": \"Engineer\"\n    }\n}\n</pre>  <p><a href=\"literal/index\">Read more about this command →</a></p> <h3 id=\"objectobject\"><a href=\"object/index\">object</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.object([key, value,]...) → object\n</pre> <p>Creates an object from a list of key-value pairs, where the keys must be strings. <code class=\"highlighter-rouge\">r.object(A, B, C, D)</code> is equivalent to <code class=\"highlighter-rouge\">r.expr([[A, B], [C, D]]).coerce_to('OBJECT')</code>.</p> <p><strong>Example:</strong> Create a simple object.</p> <pre data-language=\"java\">r.object(\"id\", 5, \"data\", r.array(\"foo\", \"bar\")).run(conn);\n\n// Result:\n{ \"data\": [\"foo\", \"bar\"], \"id\": 5}\n</pre>  <p><a href=\"object/index\">Read more about this command →</a></p>  <h2 data-alt=\"String manipulation \">String manipulation </h2>\n<h3 id=\"matchmatch\"><a href=\"match/index\">match</a></h3> <pre class=\"command-syntax\" data-language=\"java\">string.match(regexp) → null/object\n</pre> <p>Match a string against a regular expression. If there is a match, returns an object with the fields:</p> <ul> <li>\n<code class=\"highlighter-rouge\">str</code>: The matched string</li> <li>\n<code class=\"highlighter-rouge\">start</code>: The matched string’s start</li> <li>\n<code class=\"highlighter-rouge\">end</code>: The matched string’s end</li> <li>\n<code class=\"highlighter-rouge\">groups</code>: The capture groups defined with parentheses</li> </ul> <p>If no match is found, returns <code class=\"highlighter-rouge\">null</code>.</p> <p><strong>Example:</strong> Get all users whose name starts with “A”. Because <code class=\"highlighter-rouge\">null</code> evaluates to <code class=\"highlighter-rouge\">false</code> in <a href=\"filter/index\">filter</a>, you can use the result of <code class=\"highlighter-rouge\">match</code> for the predicate.</p> <pre data-language=\"java\">r.table(\"users\").filter(doc -&gt; doc.g(\"name\").match(\"^A\")).run(conn);\n</pre>  <p><a href=\"match/index\">Read more about this command →</a></p> <h3 id=\"splitsplit\"><a href=\"split/index\">split</a></h3> <pre class=\"command-syntax\" data-language=\"java\">string.split([separator, [max_splits]]) → array\n</pre> <p>Split a string into substrings. With no arguments, will split on whitespace; when called with a string as the first argument, will split using that string as a separator. A maximum number of splits can also be specified. (To specify <code class=\"highlighter-rouge\">max_splits</code> while still splitting on whitespace, use <code class=\"highlighter-rouge\">null</code> as the separator argument.)</p> <p><strong>Example:</strong> Split on whitespace.</p> <pre data-language=\"java\">r.expr(\"foo  bar bax\").split().run(conn);\n</pre>  <p>Result:</p> <pre data-language=\"java\">[\"foo\", \"bar\", \"bax\"]\n</pre>  <p><a href=\"split/index\">Read more about this command →</a></p> <h3 id=\"upcaseupcase\"><a href=\"upcase/index\">upcase</a></h3> <pre class=\"command-syntax\" data-language=\"java\">string.upcase() → string\n</pre> <p>Uppercases a string.</p> <p><strong>Example:</strong></p> <pre data-language=\"java\">r.expr(\"Sentence about LaTeX.\").upcase().run(conn);\n</pre>  <p>Result:</p> <pre data-language=\"java\">\"SENTENCE ABOUT LATEX.\"\n</pre>  <p><strong>Note:</strong> <code class=\"highlighter-rouge\">upcase</code> and <code class=\"highlighter-rouge\">downcase</code> only affect ASCII characters.</p> <p><a href=\"upcase/index\">Read more about this command →</a></p> <h3 id=\"downcasedowncase\"><a href=\"downcase/index\">downcase</a></h3> <pre class=\"command-syntax\" data-language=\"java\">string.downcase() → string\n</pre> <p>Lowercase a string.</p> <p><strong>Example:</strong></p> <pre data-language=\"java\">r.expr(\"Sentence about LaTeX.\").downcase().run(conn);\n</pre>  <p>Result:</p> <pre data-language=\"java\">\"sentence about latex.\"\n</pre>  <p><strong>Note:</strong> <code class=\"highlighter-rouge\">upcase</code> and <code class=\"highlighter-rouge\">downcase</code> only affect ASCII characters.</p> <p><a href=\"downcase/index\">Read more about this command →</a></p>  <h2 data-alt=\"Math and logic \">Math and logic </h2>\n<h3 id=\"addadd\"><a href=\"add/index\">add</a></h3> <pre class=\"command-syntax\" data-language=\"java\">value.add(value[, value, ...]) → value\ntime.add(number[, number, ...]) → time\n</pre> <p>Sum two or more numbers, or concatenate two or more strings or arrays.</p> <p><strong>Example:</strong> It’s as easy as 2 + 2 = 4.</p> <pre data-language=\"java\">r.expr(2).add(2).run(conn);\n\n// Result:\n4\n</pre>  <p><a href=\"add/index\">Read more about this command →</a></p> <h3 id=\"subsub\"><a href=\"sub/index\">sub</a></h3> <pre class=\"command-syntax\" data-language=\"java\">number.sub(number[, number, ...]) → number\ntime.sub(number[, number, ...]) → time\ntime.sub(time) → number\n</pre> <p>Subtract two numbers.</p> <p><strong>Example:</strong> It’s as easy as 2 - 2 = 0.</p> <pre data-language=\"java\">r.expr(2).sub(2).run(conn);\n</pre>  <p><a href=\"sub/index\">Read more about this command →</a></p> <h3 id=\"mulmul\"><a href=\"mul/index\">mul</a></h3> <pre class=\"command-syntax\" data-language=\"java\">number.mul(number[, number, ...]) → number\narray.mul(number[, number, ...]) → array\n</pre> <p>Multiply two numbers, or make a periodic array.</p> <p><strong>Example:</strong> It’s as easy as 2 * 2 = 4.</p> <pre data-language=\"java\">r.expr(2).mul(2).run(conn);\n</pre>  <p><a href=\"mul/index\">Read more about this command →</a></p> <h3 id=\"divdiv\"><a href=\"div/index\">div</a></h3> <pre class=\"command-syntax\" data-language=\"java\">number.div(number[, number ...]) → number\n</pre> <p>Divide two numbers.</p> <p><strong>Example:</strong> It’s as easy as 2 / 2 = 1.</p> <pre data-language=\"java\">r.expr(2).div(2).run(conn);\n</pre>  <p><a href=\"div/index\">Read more about this command →</a></p> <h3 id=\"modmod\"><a href=\"mod/index\">mod</a></h3> <pre class=\"command-syntax\" data-language=\"java\">number.mod(number) → number\n</pre> <p><strong>Example:</strong> It’s as easy as 2 % 2 = 0.</p> <pre data-language=\"java\">r.expr(2).mod(2).run(conn);\n</pre>  <p><a href=\"mod/index\">Read more about this command →</a></p> <h3 id=\"andand\"><a href=\"and/index\">and</a></h3> <pre class=\"command-syntax\" data-language=\"java\">bool.and([bool, bool, ...]) → bool\nr.and([bool, bool, ...]) → bool\n</pre> <p>Compute the logical “and” of one or more values.</p> <p><strong>Example:</strong> Return whether both <code class=\"highlighter-rouge\">a</code> and <code class=\"highlighter-rouge\">b</code> evaluate to true.</p> <pre data-language=\"java\">boolean a = true;\nboolean b = false;\nr.expr(a).and(b).run(conn);\n\n// Result:\nfalse\n</pre>  <p><a href=\"and/index\">Read more about this command →</a></p> <h3 id=\"oror\"><a href=\"or/index\">or</a></h3> <pre class=\"command-syntax\" data-language=\"java\">bool.or([bool, bool, ...]) → bool\nr.or([bool, bool, ...]) → bool\n</pre> <p>Compute the logical “or” of one or more values.</p> <p><strong>Example:</strong> Return whether either <code class=\"highlighter-rouge\">a</code> or <code class=\"highlighter-rouge\">b</code> evaluate to true.</p> <pre data-language=\"java\">boolean a = true;\nboolean b = false;\nr.expr(a).or(b).run(conn);\n\n// Result:\ntrue\n</pre>  <p><a href=\"or/index\">Read more about this command →</a></p> <h3 id=\"eqeq\"><a href=\"eq/index\">eq</a></h3> <pre class=\"command-syntax\" data-language=\"java\">value.eq(value[, value, ...]) → bool\n</pre> <p>Test if two or more values are equal.</p> <p><strong>Example:</strong> See if a user’s <code class=\"highlighter-rouge\">role</code> field is set to <code class=\"highlighter-rouge\">administrator</code>.</p> <pre data-language=\"java\">r.table(\"users\").get(1).g(\"role\").eq(\"administrator\").run(conn);\n</pre>  <p><a href=\"eq/index\">Read more about this command →</a></p> <h3 id=\"nene\"><a href=\"ne/index\">ne</a></h3> <pre class=\"command-syntax\" data-language=\"java\">value.ne(value[, value, ...]) → bool\n</pre> <p>Test if two or more values are not equal.</p> <p><strong>Example:</strong> See if a user’s <code class=\"highlighter-rouge\">role</code> field is not set to <code class=\"highlighter-rouge\">administrator</code>.</p> <pre data-language=\"java\">r.table(\"users\").get(1).g(\"role\").ne(\"administrator\").run(conn);\n</pre>  <p><a href=\"ne/index\">Read more about this command →</a></p> <h3 id=\"gtgt\"><a href=\"gt/index\">gt</a></h3> <pre class=\"command-syntax\" data-language=\"java\">value.gt(value[, value, ...]) → bool\n</pre> <p>Compare values, testing if the left-hand value is greater than the right-hand.</p> <p><strong>Example:</strong> Test if a player has scored more than 10 points.</p> <pre data-language=\"java\">r.table(\"players\").get(1).g(\"score\").gt(10).run(conn);\n</pre>  <p><a href=\"gt/index\">Read more about this command →</a></p> <h3 id=\"gege\"><a href=\"ge/index\">ge</a></h3> <pre class=\"command-syntax\" data-language=\"java\">value.ge(value[, value, ...]) → bool\n</pre> <p>Compare values, testing if the left-hand value is greater than or equal to the right-hand.</p> <p><strong>Example:</strong> Test if a player has scored 10 points or more.</p> <pre data-language=\"java\">r.table(\"players\").get(1).g(\"score\").ge(10).run(conn);\n</pre>  <p><a href=\"ge/index\">Read more about this command →</a></p> <h3 id=\"ltlt\"><a href=\"lt/index\">lt</a></h3> <pre class=\"command-syntax\" data-language=\"java\">value.lt(value[, value, ...]) → bool\n</pre> <p>Compare values, testing if the left-hand value is less than the right-hand.</p> <p><strong>Example:</strong> Test if a player has scored less than 10 points.</p> <pre data-language=\"java\">r.table(\"players\").get(1).g(\"score\").lt(10).run(conn);\n</pre>  <p><a href=\"lt/index\">Read more about this command →</a></p> <h3 id=\"lele\"><a href=\"le/index\">le</a></h3> <pre class=\"command-syntax\" data-language=\"java\">value.le(value[, value, ...]) → bool\n</pre> <p>Compare values, testing if the left-hand value is less than or equal to the right-hand.</p> <p><strong>Example:</strong> Test if a player has scored 10 points or less.</p> <pre data-language=\"java\">r.table(\"players\").get(1).g(\"score\").le(10).run(conn);\n</pre>  <p><a href=\"le/index\">Read more about this command →</a></p> <h3 id=\"notnot\"><a href=\"not/index\">not</a></h3> <pre class=\"command-syntax\" data-language=\"java\">bool.not() → bool\nr.not(bool) → bool\n</pre> <p>Compute the logical inverse (not) of an expression.</p> <p><strong>Example:</strong> Not true is false.</p> <pre data-language=\"java\">r(true).not().run(conn);\nr.not(true).run(conn);\n</pre>  <p>These evaluate to <code class=\"highlighter-rouge\">false</code>.</p> <p><a href=\"not/index\">Read more about this command →</a></p> <h3 id=\"randomrandom\"><a href=\"random/index\">random</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.random() → number\nr.random(number[, number]) → number\nr.random(integer[, integer]) → integer\n</pre> <p>Generate a random number between given (or implied) bounds. <code class=\"highlighter-rouge\">random</code> takes zero, one or two arguments, and can also take an <a href=\"optarg/index\">optArg</a> of <code class=\"highlighter-rouge\">float</code>.</p> <p><strong>Example:</strong> Generate a random number in the range <code class=\"highlighter-rouge\">[0,1)</code></p> <pre data-language=\"java\">r.random().run(conn);\n</pre>  <p><a href=\"random/index\">Read more about this command →</a></p> <h3 id=\"roundround\"><a href=\"round/index\">round</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.round(number) → number\nnumber.round() → number\n</pre> <p>Rounds the given value to the nearest whole integer.</p> <p><strong>Example:</strong> Round 12.345 to the nearest integer.</p> <pre data-language=\"java\">r.round(12.345).run(conn);\n\n// Result:\n12.0\n</pre>  <p>The <code class=\"highlighter-rouge\">round</code> command can also be chained after an expression.</p> <p><a href=\"round/index\">Read more about this command →</a></p> <h3 id=\"ceilceil\"><a href=\"ceil/index\">ceil</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.ceil(number) → number\nnumber.ceil() → number\n</pre> <p>Rounds the given value up, returning the smallest integer greater than or equal to the given value (the value’s ceiling).</p> <p><strong>Example:</strong> Return the ceiling of 12.345.</p> <pre data-language=\"java\">r.ceil(12.345).run(conn);\n\n// Result:\n13.0\n</pre>  <p>The <code class=\"highlighter-rouge\">ceil</code> command can also be chained after an expression.</p> <p><a href=\"ceil/index\">Read more about this command →</a></p> <h3 id=\"floorfloor\"><a href=\"floor/index\">floor</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.floor(number) → number\nnumber.floor() → number\n</pre> <p>Rounds the given value down, returning the largest integer value less than or equal to the given value (the value’s floor).</p> <p><strong>Example:</strong> Return the floor of 12.345.</p> <pre data-language=\"java\">r.floor(12.345).run(conn);\n\n// Result:\n12.0\n</pre>  <p>The <code class=\"highlighter-rouge\">floor</code> command can also be chained after an expression.</p> <p><a href=\"floor/index\">Read more about this command →</a></p>  <h2 data-alt=\"Dates and times \">Dates and times </h2>\n<h3 id=\"nownow\"><a href=\"now/index\">now</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.now() → time\n</pre> <p>Return a time object representing the current time in UTC. The command now() is computed once when the server receives the query, so multiple instances of r.now() will always return the same time inside a query.</p> <p><strong>Example:</strong> Add a new user with the time at which he subscribed.</p> <pre data-language=\"java\">r.table(\"users\").insert(\n    r.hashMap(\"name\", \"John\")\n     .with(\"subscription_date\", r.now())\n).run(conn);\n</pre>  <p><a href=\"now/index\">Read more about this command →</a></p> <h3 id=\"timetime\"><a href=\"time/index\">time</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.time(year, month, day[, hour, minute, second], timezone) → time\n</pre> <p>Create a time object for a specific time.</p> <p><strong>Example:</strong> Update the birthdate of the user “John” to November 3rd, 1986 UTC.</p> <pre data-language=\"java\">r.table(\"user\").get(\"John\").update(\n    r.hashMap(\"birthdate\", r.time(1986, 11, 3, 'Z'))\n).run(conn);\n</pre>  <p><a href=\"time/index\">Read more about this command →</a></p> <h3 id=\"epochtimeepochtime\"><a href=\"epoch_time/index\">epochTime</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.epochTime(number) → time\n</pre> <p>Create a time object based on seconds since epoch. The first argument is a double and will be rounded to three decimal places (millisecond-precision).</p> <p><strong>Example:</strong> Update the birthdate of the user “John” to November 3rd, 1986.</p> <pre data-language=\"java\">r.table(\"user\").get(\"John\").update(\n    r.hashMap(birthdate, r.epochTime(531360000))\n).run(conn);\n</pre>  <p><a href=\"epoch_time/index\">Read more about this command →</a></p> <h3 id=\"iso8601iso8601\"><a href=\"iso8601/index\">iso8601</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.iso8601(string) → time\n</pre> <p>Create a time object based on an ISO 8601 date-time string (e.g. ‘2013-01-01T01:01:01+00:00’). RethinkDB supports all valid ISO 8601 formats except for week dates. Read more about the ISO 8601 format at <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">Wikipedia</a>.</p> <p><strong>Example:</strong> Update the time of John’s birth.</p> <pre data-language=\"java\">r.table(\"user\").get(\"John\").update(\n    r.hashMap(\"birth\", r.iso8601(\"1986-11-03T08:30:00-07:00\"))\n).run(conn);\n</pre>  <p><a href=\"iso8601/index\">Read more about this command →</a></p> <h3 id=\"intimezoneintimezone\"><a href=\"in_timezone/index\">inTimezone</a></h3> <pre class=\"command-syntax\" data-language=\"java\">time.inTimezone(timezone) → time\n</pre> <p>Return a new time object with a different timezone. While the time stays the same, the results returned by methods such as hours() will change since they take the timezone into account. The timezone argument has to be of the ISO 8601 format.</p> <p><strong>Example:</strong> Hour of the day in San Francisco (UTC/GMT -8, without daylight saving time).</p> <pre data-language=\"java\">r.now().inTimezone(\"-08:00\").hours().run(conn);\n</pre>  <p><a href=\"in_timezone/index\">Read more about this command →</a></p> <h3 id=\"timezonetimezone\"><a href=\"timezone/index\">timezone</a></h3> <pre class=\"command-syntax\" data-language=\"java\">time.timezone() → string\n</pre> <p>Return the timezone of the time object.</p> <p><strong>Example:</strong> Return all the users in the “-07:00” timezone.</p> <pre data-language=\"java\">r.table(\"users\").filter(\n    user -&gt; user.g(\"subscriptionDate\").timezone().eq(\"-07:00\")\n).run(conn);\n</pre>  <p><a href=\"timezone/index\">Read more about this command →</a></p> <h3 id=\"duringduring\"><a href=\"during/index\">during</a></h3> <pre class=\"command-syntax\" data-language=\"java\">time.during(startTime, endTime) → bool\n</pre> <p>Return whether a time is between two other times.</p> <p><strong>Example:</strong> Retrieve all the posts that were posted between December 1st, 2013 (inclusive) and December 10th, 2013 (exclusive).</p> <pre data-language=\"java\">r.table(\"posts\").filter(\n    row -&gt; row.g(\"date\").during(r.time(2013, 12, 1, \"Z\"), r.time(2013, 12, 10, \"Z\"))\n).run(conn);\n</pre>  <p><a href=\"during/index\">Read more about this command →</a></p> <h3 id=\"datedate\"><a href=\"date/index\">date</a></h3> <pre class=\"command-syntax\" data-language=\"java\">time.date() → time\n</pre> <p>Return a new [OffsetDateTime][odt] object only based on the day, month and year (ie. the same day at 00:00).</p> <p><strong>Example:</strong> Retrieve all the users whose birthday is today.</p> <pre data-language=\"java\">r.table(\"users\").filter(\n    user -&gt; user.g(\"birthdate\").date().eq(r.now().date())\n).run(conn);\n</pre>  <p><a href=\"date/index\">Read more about this command →</a></p> <h3 id=\"timeofdaytimeofday\"><a href=\"time_of_day/index\">timeOfDay</a></h3> <pre class=\"command-syntax\" data-language=\"java\">time.timeOfDay() → number\n</pre> <p>Return the number of seconds elapsed since the beginning of the day stored in the time object.</p> <p><strong>Example:</strong> Retrieve posts that were submitted before noon.</p> <pre data-language=\"java\">r.table(\"posts\").filter(\n    post -&gt; post.g(\"date\").timeOfDay().le(12*60*60)\n).run(conn);\n</pre>  <p><a href=\"time_of_day/index\">Read more about this command →</a></p> <h3 id=\"yearyear\"><a href=\"year/index\">year</a></h3> <pre class=\"command-syntax\" data-language=\"java\">time.year() → number\n</pre> <p>Return the year of a time object.</p> <p><strong>Example:</strong> Retrieve all the users born in 1986.</p> <pre data-language=\"java\">r.table(\"users\").filter(\n    user -&gt; user.g(\"birthdate\").year().eq(1986)\n}).run(conn);\n</pre>  <p><a href=\"year/index\">Read more about this command →</a></p> <h3 id=\"monthmonth\"><a href=\"month/index\">month</a></h3> <pre class=\"command-syntax\" data-language=\"java\">time.month() → number\n</pre> <p>Return the month of a time object as a number between 1 and 12. For your convenience, the terms <code class=\"highlighter-rouge\">r.january</code>, <code class=\"highlighter-rouge\">r.february</code>, etc. are defined and map to the appropriate integer.</p> <p><strong>Example:</strong> Retrieve all the users who were born in November.</p> <pre data-language=\"java\">r.table(\"users\").filter(row -&gt; row.g(\"birthdate\").month().eq(11)).run(conn);\n</pre>  <p><a href=\"month/index\">Read more about this command →</a></p> <h3 id=\"dayday\"><a href=\"day/index\">day</a></h3> <pre class=\"command-syntax\" data-language=\"java\">time.day() → number\n</pre> <p>Return the day of a time object as a number between 1 and 31.</p> <p><strong>Example:</strong> Return the users born on the 24th of any month.</p> <pre data-language=\"java\">r.table(\"users\").filter(\n    row -&gt; row.g(\"birthdate\").day().eq(24)\n).run(conn);\n</pre>  <p><a href=\"day/index\">Read more about this command →</a></p> <h3 id=\"dayofweekdayofweek\"><a href=\"day_of_week/index\">dayOfWeek</a></h3> <pre class=\"command-syntax\" data-language=\"java\">time.dayOfWeek() → number\n</pre> <p>Return the day of week of a time object as a number between 1 and 7 (following ISO 8601 standard). For your convenience, the terms r.monday, r.tuesday, etc. are defined and map to the appropriate integer.</p> <p><strong>Example:</strong> Return today’s day of week.</p> <pre data-language=\"java\">r.now().dayOfWeek().run(conn);\n</pre>  <p><a href=\"day_of_week/index\">Read more about this command →</a></p> <h3 id=\"dayofyeardayofyear\"><a href=\"day_of_year/index\">dayOfYear</a></h3> <pre class=\"command-syntax\" data-language=\"java\">time.dayOfYear() → number\n</pre> <p>Return the day of the year of a time object as a number between 1 and 366 (following ISO 8601 standard).</p> <p><strong>Example:</strong> Retrieve all the users who were born the first day of a year.</p> <pre data-language=\"java\">r.table(\"users\").filter(\n    row -&gt; row.g(\"birthdate\").dayOfYear().eq(1)\n).run(conn);\n</pre>  <p><a href=\"day_of_year/index\">Read more about this command →</a></p> <h3 id=\"hourshours\"><a href=\"hours/index\">hours</a></h3> <pre class=\"command-syntax\" data-language=\"java\">time.hours() → number\n</pre> <p>Return the hour in a time object as a number between 0 and 23.</p> <p><strong>Example:</strong> Return all the posts submitted after midnight and before 4am.</p> <pre data-language=\"java\">r.table(\"posts\").filter(post -&gt; post.g(\"date\").hours().lt(4)).run(conn);\n</pre>  <p><a href=\"hours/index\">Read more about this command →</a></p> <h3 id=\"minutesminutes\"><a href=\"minutes/index\">minutes</a></h3> <pre class=\"command-syntax\" data-language=\"java\">time.minutes() → number\n</pre> <p>Return the minute in a time object as a number between 0 and 59.</p> <p><strong>Example:</strong> Return all the posts submitted during the first 10 minutes of every hour.</p> <pre data-language=\"java\">r.table(\"posts\").filter(post -&gt; post.g(\"date\").minutes().lt(10)).run(conn);\n</pre>  <p><a href=\"minutes/index\">Read more about this command →</a></p> <h3 id=\"secondsseconds\"><a href=\"seconds/index\">seconds</a></h3> <pre class=\"command-syntax\" data-language=\"java\">time.seconds() → number\n</pre> <p>Return the seconds in a time object as a number between 0 and 59.999 (double precision).</p> <p><strong>Example:</strong> Return the post submitted during the first 30 seconds of every minute.</p> <pre data-language=\"java\">r.table(\"posts\").filter(post -&gt; post.g(\"date\").seconds().lt(30)).run(conn);\n</pre>  <p><a href=\"seconds/index\">Read more about this command →</a></p> <h3 id=\"toiso8601toiso8601\"><a href=\"to_iso8601/index\">toIso8601</a></h3> <pre class=\"command-syntax\" data-language=\"java\">time.toIso8601() → string\n</pre> <p>Convert a time object to a string in ISO 8601 format.</p> <p><strong>Example:</strong> Return the current ISO 8601 time.</p> <pre data-language=\"java\">r.now().toIso8601().run(conn);\n\n// Result:\n\"2015-04-20T18:37:52.690+00:00\"\n</pre>  <p><a href=\"to_iso8601/index\">Read more about this command →</a></p> <h3 id=\"toepochtimetoepochtime\"><a href=\"to_epoch_time/index\">toEpochTime</a></h3> <pre class=\"command-syntax\" data-language=\"java\">time.toEpochTime() → number\n</pre> <p>Convert a time object to its epoch time.</p> <p><strong>Example:</strong> Return the current time in seconds since the Unix Epoch with millisecond-precision.</p> <pre data-language=\"java\">r.now().toEpochTime().run(conn);\n</pre>  <p><a href=\"to_epoch_time/index\">Read more about this command →</a></p>  <h2 data-alt=\"Control structures \">Control structures </h2>\n<h3 id=\"arrayarray\"><a href=\"array/index\">array</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.array(value[, value...]) → array\n</pre> <p>Take one or more values as arguments and return an array. (Technically, return a [List][] object.)</p> <p><strong>Example:</strong> Create an array.</p> <pre data-language=\"java\">r.expr(r.array(10, 20, 30)).run(conn);\n</pre>  <p>This is a ReQL equivalent to:</p> <pre data-language=\"java\">List&lt;Integer&gt; myArray = Arrays.asList(10, 20, 30);\n</pre>  <p><a href=\"array/index\">Read more about this command →</a></p> <h3 id=\"hashmaphashmap\"><a href=\"hashmap/index\">hashMap</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.hashMap(key, value)[.with(key, value) ...] → object\n</pre> <p>Take a key/value pair, with extra key/value pairs optionally specified by chaining one or more <code class=\"highlighter-rouge\">with(key, value)</code> terms after <code class=\"highlighter-rouge\">hashMap</code>, and return an object.</p> <p><strong>Example:</strong> Create a hashmap.</p> <pre data-language=\"java\">import com.rethinkdb.model.MapObject;\n\nMapObject newData = r.hashMap(\"user\", \"fred\")\n    .with(\"email\", \"fred@example.com\")\n    .with(\"id\", 101)\n    .with(\"admin\", true);\n</pre>  <p>This creates the object (in JSON):</p> <pre data-language=\"java\">{\n    \"admin\": true,\n    \"email\": \"fred@example.com\",\n    \"id\": 101,\n    \"user\": \"fred\"\n}\n</pre>  <p><a href=\"hashmap/index\">Read more about this command →</a></p> <h3 id=\"argsargs\"><a href=\"args/index\">args</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.args(array) → special\n</pre> <p><code class=\"highlighter-rouge\">r.args</code> is a special term that’s used to splice an array of arguments into another term. This is useful when you want to call a variadic term such as <a href=\"get_all/index\">getAll</a> with a set of arguments produced at runtime.</p> <p><strong>Example:</strong> Get Alice and Bob from the table <code class=\"highlighter-rouge\">people</code>.</p> <pre data-language=\"java\">r.table(\"people\").getAll(\"Alice\", \"Bob\").run(conn);\n// or\nr.table(\"people\").getAll(r.args(r.array(\"Alice\", \"Bob\"))).run(conn);\n</pre>  <p><a href=\"args/index\">Read more about this command →</a></p> <h3 id=\"binarybinary\"><a href=\"binary/index\">binary</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.binary(data) → binary\n</pre> <p>Encapsulate binary data within a query.</p> <p><strong>Example:</strong> Save an avatar image to a existing user record.</p> <pre data-language=\"java\">import java.nio.file.*;\n\nPath path = Paths.get(\"./defaultAvatar.png\");\nbyte[] avatarImage = Files.readAllBytes(path);\nr.table(\"users\").get(100).update(r.hashMap(\"avatar\", avatarImage));\n</pre>  <p><a href=\"binary/index\">Read more about this command →</a></p> <h3 id=\"dodo\"><a href=\"do/index\">do_</a></h3> <pre class=\"command-syntax\" data-language=\"java\">any.do_(function) → any\nr.do_([args]*, function) → any\nany.do_(expr) → any\nr.do_([args]*, expr) → any\n</pre> <p>Call an anonymous function using return values from other ReQL commands or queries as arguments.</p> <p><strong>Example:</strong> Compute a golfer’s net score for a game.</p> <pre data-language=\"java\">r.table(\"players\").get(\"86be93eb-a112-48f5-a829-15b2cb49de1d\").do_(\n    player -&gt; player.g(\"gross_score\").sub(player.g(\"course_handicap\"))\n).run(conn);\n</pre>  <p><a href=\"do/index\">Read more about this command →</a></p> <h3 id=\"branchbranch\"><a href=\"branch/index\">branch</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.branch(test, true_action[, test2, test2_action, ...], false_action) → any\ntest.branch(true_action[, test2, test2_action, ...], false_action) → any\n</pre> <p>Perform a branching conditional equivalent to <code class=\"highlighter-rouge\">if-then-else</code>.</p> <p>The <code class=\"highlighter-rouge\">branch</code> command takes 2n+1 arguments: pairs of conditional expressions and commands to be executed if the conditionals return any value but <code class=\"highlighter-rouge\">false</code> or <code class=\"highlighter-rouge\">null</code> (i.e., “truthy” values), with a final “else” command to be evaluated if all of the conditionals are <code class=\"highlighter-rouge\">false</code> or <code class=\"highlighter-rouge\">null</code>.</p> <p><strong>Example:</strong> Test the value of x.</p> <pre data-language=\"java\">int x = 10;\nr.branch(r.expr(x).gt(5), \"big\", \"small\").run(conn);\n\n// Result:\n\"big\"\n</pre>  <p><a href=\"branch/index\">Read more about this command →</a></p> <h3 id=\"foreachforeach\"><a href=\"for_each/index\">forEach</a></h3> <pre class=\"command-syntax\" data-language=\"java\">sequence.forEach(write_function) → object\n</pre> <p>Loop over a sequence, evaluating the given write query for each element.</p> <p><strong>Example:</strong> Now that our heroes have defeated their villains, we can safely remove them from the villain table.</p> <pre data-language=\"java\">r.table(\"marvel\").forEach(\n    hero -&gt; r.table(\"villains\").get(hero.g(\"villainDefeated\")).delete()\n).run(conn);\n</pre>  <p><a href=\"for_each/index\">Read more about this command →</a></p> <h3 id=\"rangerange\"><a href=\"range/index\">range</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.range() → stream\nr.range([startValue, ]endValue) → stream\n</pre> <p>Generate a stream of sequential integers in a specified range.</p> <p><strong>Example:</strong> Return a four-element range of <code class=\"highlighter-rouge\">[0, 1, 2, 3]</code>.</p> <pre data-language=\"java\">r.range(4).run(conn);\n</pre>  <p>Result (shown as JSON):</p> <pre data-language=\"java\">[0, 1, 2, 3]\n</pre>  <p><a href=\"range/index\">Read more about this command →</a></p> <h3 id=\"errorerror\"><a href=\"error/index\">error</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.error(message) → error\n</pre> <p>Throw a runtime error. If called with no arguments inside the second argument to <code class=\"highlighter-rouge\">default</code>, re-throw the current error.</p> <p><strong>Example:</strong> Iron Man can’t possibly have lost a battle:</p> <pre data-language=\"java\">r.table(\"marvel\").get(\"IronMan\").do_(\n    ironman -&gt; r.branch(\n        ironman.g(\"victories\").lt(ironman.g(\"battles\")),\n        r.error(\"impossible code path\"),\n        ironman\n    )\n).run(conn);\n</pre>  <p><a href=\"error/index\">Read more about this command →</a></p> <h3 id=\"defaultdefault\"><a href=\"default/index\">default</a></h3> <pre class=\"command-syntax\" data-language=\"java\">value.default(default_value) → any\nsequence.default(default_value) → any\n</pre> <p>Provide a default value in case of non-existence errors. The <code class=\"highlighter-rouge\">default</code> command evaluates its first argument (the value it’s chained to). If that argument returns <code class=\"highlighter-rouge\">null</code> or a non-existence error is thrown in evaluation, then <code class=\"highlighter-rouge\">default</code> returns its second argument. The second argument is usually a default value, but it can be a function that returns a value.</p> <p><strong>Example:</strong> Suppose we want to retrieve the titles and authors of the table <code class=\"highlighter-rouge\">posts</code>. In the case where the author field is missing or <code class=\"highlighter-rouge\">null</code>, we want to retrieve the string <code class=\"highlighter-rouge\">Anonymous</code>.</p> <pre data-language=\"java\">r.table(\"posts\").map(post -&gt;\n    r.hashMap(\"title\", post.g(\"title\"))\n        .with(\"author\", post.g(\"author\").default_(\"Anonymous\"))\n).run(conn);\n</pre>  <p><a href=\"default/index\">Read more about this command →</a></p> <h3 id=\"exprexpr\"><a href=\"expr/index\">expr</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.expr(value) → value\n</pre> <p>Construct a ReQL JSON object from a native object.</p> <p><strong>Example:</strong> Objects wrapped with <code class=\"highlighter-rouge\">expr</code> can then be manipulated by ReQL API functions.</p> <pre data-language=\"java\">import com.rethinkdb.model.MapObject;\n\n// Create object { \"a\": \"b\" }\nMapObject newData = r.hashMap(\"a\", \"b\");\n\n// merge with { \"b\": [1, 2, 3] }\nr.expr(newData).merge(r.hashMap(\"b\", r.array(1, 2, 3))).run(conn);\n</pre>  <p><a href=\"expr/index\">Read more about this command →</a></p> <h3 id=\"jsjs\"><a href=\"js/index\">js</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.js(jsString) → value\n</pre> <p>Create a JavaScript expression.</p> <p><strong>Example:</strong> Concatenate two strings using JavaScript.</p> <pre data-language=\"java\">r.js(\"'str1' + 'str2'\").run(conn);\n</pre>  <p><a href=\"js/index\">Read more about this command →</a></p> <h3 id=\"coercetocoerceto\"><a href=\"coerce_to/index\">coerceTo</a></h3> <pre class=\"command-syntax\" data-language=\"java\">sequence.coerceTo(\"array\") → array\nvalue.coerceTo(\"string\") → string\nstring.coerceTo(\"number\") → number\narray.coerceTo(\"object\") → object\nsequence.coerceTo(\"object\") → object\nobject.coerceTo(\"array\") → array\nbinary.coerceTo(\"string\") → string\nstring.coerceTo(\"binary\") → binary\n</pre> <p>Convert a value of one type into another.</p> <p><strong>Example:</strong> Coerce a stream to an array to store its output in a field. (A stream cannot be stored in a field directly.)</p> <pre data-language=\"java\">r.table(\"posts\").map(post -&gt; post.merge(\n    r.hashMap(\"comments\",\n              r.table(\"comments\").getAll(post.g(\"id\")).optArg(\"index\", \"post_id\")\n              .coerceTo(\"array\"))\n)).run(conn);\n</pre>  <p><a href=\"coerce_to/index\">Read more about this command →</a></p> <h3 id=\"typeoftypeof\"><a href=\"type_of/index\">typeOf</a></h3> <pre class=\"command-syntax\" data-language=\"java\">any.typeOf() → string\n</pre> <p>Gets the type of a ReQL query’s return value.</p> <p><strong>Example:</strong> Get the type of a string.</p> <pre data-language=\"java\">r.expr(\"foo\").typeOf().run(conn);\n// result: \"STRING\"\n</pre>  <p><a href=\"type_of/index\">Read more about this command →</a></p> <h3 id=\"infoinfo\"><a href=\"info/index\">info</a></h3> <pre class=\"command-syntax\" data-language=\"java\">any.info() → object\nr.info(any) → object\n</pre> <p>Get information about a ReQL value.</p> <p><strong>Example:</strong> Get information about a table such as primary key, or cache size.</p> <pre data-language=\"java\">r.table(\"marvel\").info().run(conn);\n</pre>  <p><a href=\"info/index\">Read more about this command →</a></p> <h3 id=\"jsonjson\"><a href=\"json/index\">json</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.json(json_string) → value\n</pre> <p>Parse a JSON string on the server.</p> <p><strong>Example:</strong> Send an array to the server.</p> <pre data-language=\"java\">r.json(\"[1,2,3]\").run(conn);\n</pre>  <p><a href=\"json/index\">Read more about this command →</a></p> <h3 id=\"tojsonstring-tojsontojsonstring\"><a href=\"to_json_string/index\">toJsonString, toJson</a></h3> <pre class=\"command-syntax\" data-language=\"java\">value.toJsonString() → string\nvalue.toJson() → string\n</pre> <p>Convert a ReQL value or object to a JSON string. You may use either <code class=\"highlighter-rouge\">toJsonString</code> or <code class=\"highlighter-rouge\">toJson</code>.</p> <p><strong>Example:</strong> Get a ReQL document as a JSON string.</p> <pre data-language=\"java\">r.table(\"hero\").get(1).toJson().run(conn)\n</pre>  <p>Returned data:</p> <pre data-language=\"java\">'{\"id\": 1, \"name\": \"Batman\", \"city\": \"Gotham\", \"powers\": [\"martial arts\", \"cinematic entrances\"]}'\n</pre>  <p><a href=\"to_json_string/index\">Read more about this command →</a></p> <h3 id=\"httphttp\"><a href=\"http/index\">http</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.http(url[, options]) → value\nr.http(url[, options]) → stream\n</pre> <p>Retrieve data from the specified URL over HTTP. The return type depends on the <code class=\"highlighter-rouge\">resultFormat</code> option, which checks the <code class=\"highlighter-rouge\">Content-Type</code> of the response by default.</p> <p><strong>Example:</strong> Perform an HTTP <code class=\"highlighter-rouge\">GET</code> and store the result in a table.</p> <pre data-language=\"java\">r.table(\"posts\").insert(r.http(\"http://httpbin.org/get\")).run(conn);\n</pre>  <p><a href=\"http/index\">Read more about this command →</a></p> <h3 id=\"uuiduuid\"><a href=\"uuid/index\">uuid</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.uuid([string]) → string\n</pre> <p>Return a UUID (universally unique identifier), a string that can be used as a unique ID. If a string is passed to <code class=\"highlighter-rouge\">uuid</code> as an argument, the UUID will be deterministic, derived from the string’s SHA-1 hash.</p> <p><strong>Example:</strong> Generate a UUID.</p> <pre data-language=\"java\">r.uuid().run(conn);\n// returns \"27961a0e-f4e8-4eb3-bf95-c5203e1d87b9\"\n</pre>  <p><a href=\"uuid/index\">Read more about this command →</a></p>  <h2 data-alt=\"Geospatial commands \">Geospatial commands </h2>\n<h3 id=\"circlecircle\"><a href=\"circle/index\">circle</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.circle(r.array(longitude, latitude), radius) → geometry\nr.circle(point, radius) → geometry\n</pre> <p>Construct a circular line or polygon. A circle in RethinkDB is a polygon or line <em>approximating</em> a circle of a given radius around a given center, consisting of a specified number of vertices (default 32).</p> <p><strong>Example:</strong> Define a circle.</p> <pre data-language=\"java\">r.table(\"geo\").insert(\n    r.hashMap(\"id\", 300)\n     .with(\"name\", \"Hayes Valley\")\n     .with(\"neighborhood\", r.circle(r.array(-122.423246, 37.779388), 1000))\n).run(conn);\n</pre>  <p><a href=\"circle/index\">Read more about this command →</a></p> <h3 id=\"distancedistance\"><a href=\"distance/index\">distance</a></h3> <pre class=\"command-syntax\" data-language=\"java\">geometry.distance(geometry) → number\nr.distance(geometry, geometry) → number\n</pre> <p>Compute the distance between a point and another geometry object. At least one of the geometry objects specified must be a point.</p> <p><strong>Example:</strong> Compute the distance between two points on the Earth in kilometers.</p> <pre data-language=\"java\">r.distance(\n    r.point(-122.423246,37.779388),\n    r.point(-117.220406,32.719464)\n).optArg(\"unit\", \"km\").run(conn);\n\n// Result:\n734.1252496021841\n</pre>  <p><a href=\"distance/index\">Read more about this command →</a></p> <h3 id=\"fillfill\"><a href=\"fill/index\">fill</a></h3> <pre class=\"command-syntax\" data-language=\"java\">line.fill() → polygon\n</pre> <p>Convert a Line object into a Polygon object. If the last point does not specify the same coordinates as the first point, <code class=\"highlighter-rouge\">polygon</code> will close the polygon by connecting them.</p> <p><strong>Example:</strong> Create a line object and then convert it to a polygon.</p> <pre data-language=\"java\">r.table(\"geo\").insert(\n    r.hashMap(\"id\", 201)\n     .with(\"rectangle\", r.line(\n        r.array(-122.423246,37.779388),\n        r.array(-122.423246,37.329898),\n        r.array(-121.886420,37.329898),\n        r.array(-121.886420,37.779388)))\n).run(conn);\n\nr.table(\"geo\").get(201).update(\n    r.hashMap(\"rectangle\", row -&gt; row.g(\"rectangle\").fill())\n).optArg(\"non_atomic\", true).run(conn);\n</pre>  <p><a href=\"fill/index\">Read more about this command →</a></p> <h3 id=\"geojsongeojson\"><a href=\"geojson/index\">geojson</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.geojson(geojson) → geometry\n</pre> <p>Convert a <a href=\"http://geojson.org\">GeoJSON</a> object to a ReQL geometry object.</p> <p><strong>Example:</strong> Convert a GeoJSON object to a ReQL geometry object.</p> <pre data-language=\"java\">import com.rethinkdb.model.Geojson;\n\n// GeoJSON object:\n//      {\n//          \"type\": \"Point\",\n//          \"coordinates\": [ -122.423246, 37.779388 ]\n//      }\nGeojson geo = r.hashMap(\"type, \"Point\")\n               .with(\"coordinates\", r.array(-122.423246, 37.779388));\n\nr.table(\"geo\").insert(\n    r.hashMap(\"id\", \"sfo\")\n     .with(\"name\", \"San Francisco\")\n     .with(\"location\", r.geojson(geo))\n).run(conn);\n</pre>  <p><a href=\"geojson/index\">Read more about this command →</a></p> <h3 id=\"togeojsontogeojson\"><a href=\"to_geojson/index\">toGeojson</a></h3> <pre class=\"command-syntax\" data-language=\"java\">geometry.toGeojson() → object\n</pre> <p>Convert a ReQL geometry object to a <a href=\"http://geojson.org\">GeoJSON</a> object.</p> <p><strong>Example:</strong> Convert a ReQL geometry object to a GeoJSON object.</p> <pre data-language=\"java\">r.table(\"geo\").get(\"sfo\")(\"location\").toGeojson().run(conn);\n\n// Result:\n{\n    \"type\": \"Point\",\n    \"coordinates\": [ -122.423246, 37.779388 ]\n}\n</pre>  <p><a href=\"to_geojson/index\">Read more about this command →</a></p> <h3 id=\"getintersectinggetintersecting\"><a href=\"get_intersecting/index\">getIntersecting</a></h3> <pre class=\"command-syntax\" data-language=\"java\">table.getIntersecting(geometry).optArg(\"index\", index) → selection&lt;stream&gt;\n</pre> <p>Get all documents where the given geometry object intersects the geometry object of the requested geospatial index.</p> <p><strong>Example:</strong> Which of the locations in a list of parks intersect <code class=\"highlighter-rouge\">circle1</code>?</p> <pre data-language=\"java\">import com.rethinkdb.gen.ast.Circle;\n\nCircle circle1 = r.circle(r.array(-117.220406, 32.719464), 10)\n                  .optArg(\"unit\", \"mi\");\n\nr.table(\"parks\").getIntersecting(circle1).optArg(\"index\", \"area\").run(conn);\n</pre>  <p><a href=\"get_intersecting/index\">Read more about this command →</a></p> <h3 id=\"getnearestgetnearest\"><a href=\"get_nearest/index\">getNearest</a></h3> <pre class=\"command-syntax\" data-language=\"java\">table.getNearest(point).optArg(\"index\", index) → array\n</pre> <p>Return a list of documents closest to a specified point based on a geospatial index, sorted in order of increasing distance.</p> <p><strong>Example:</strong> Return a list of the closest 25 enemy hideouts to the secret base.</p> <pre data-language=\"java\">import com.rethinkdb.gen.ast.Point;\n\nPoint secretBase = r.point(-122.422876,37.777128);\n\nr.table(\"hideouts\")\n .getNearest(secretBase)\n .optArg(\"index\", \"location\")\n .optArg(\"max_results\", 25)\n .run(conn);\n</pre>  <p><a href=\"get_nearest/index\">Read more about this command →</a></p> <h3 id=\"includesincludes\"><a href=\"includes/index\">includes</a></h3> <pre class=\"command-syntax\" data-language=\"java\">sequence.includes(geometry) → sequence\ngeometry.includes(geometry) → bool\n</pre> <p>Tests whether a geometry object is completely contained within another. When applied to a sequence of geometry objects, <code class=\"highlighter-rouge\">includes</code> acts as a <a href=\"filter/index\">filter</a>, returning a sequence of objects from the sequence that include the argument.</p> <p><strong>Example:</strong> Is a point included within a 2000-meter circle?</p> <pre data-language=\"java\">Object point1 = r.point(-117.220406,32.719464);\nObject point2 = r.point(-117.206201,32.725186);\n\nr.circle(point1, 2000).includes(point2).run(conn);\n\n// Result:\ntrue\n</pre>  <p><a href=\"includes/index\">Read more about this command →</a></p> <h3 id=\"intersectsintersects\"><a href=\"intersects/index\">intersects</a></h3> <pre class=\"command-syntax\" data-language=\"java\">sequence.intersects(geometry) → sequence\ngeometry.intersects(geometry) → bool\nr.intersects(sequence, geometry) → sequence\nr.intersects(geometry, geometry) → bool\n</pre> <p>Tests whether two geometry objects intersect with one another. When applied to a sequence of geometry objects, <code class=\"highlighter-rouge\">intersects</code> acts as a <a href=\"filter/index\">filter</a>, returning a sequence of objects from the sequence that intersect with the argument.</p> <p><strong>Example:</strong> Is <code class=\"highlighter-rouge\">point2</code> within a 2000-meter circle around <code class=\"highlighter-rouge\">point1</code>?</p> <pre data-language=\"java\">import com.rethinkdb.gen.ast.Point;\n\nPoint point1 = r.point(-117.220406,32.719464);\nPoint point2 = r.point(-117.206201,32.725186);\n\nr.circle(point1, 2000).intersects(point2).run(conn);\n\n// Result:\ntrue\n</pre>  <p><a href=\"intersects/index\">Read more about this command →</a></p> <h3 id=\"lineline\"><a href=\"line/index\">line</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.line([lon1, lat1], [lon2, lat2], ...) → line\nr.line(point1, point2, ...) → line\n</pre> <p>Construct a geometry object of type Line. The line can be specified in one of two ways:</p> <ul> <li>Two or more two-item arrays, specifying latitude and longitude numbers of the line’s vertices;</li> <li>Two or more <a href=\"point/index\">Point</a> objects specifying the line’s vertices.</li> </ul> <p><strong>Example:</strong> Define a line.</p> <pre data-language=\"java\">r.table(\"geo\").insert(\n    r.hashMap(\"id\", 101)\n     .with(\"route\", r.line(r.array(-122.423246, 37.779388),\n                           r.array(-121.88642, 37.329898)))\n).run(conn);\n</pre>  <p><a href=\"line/index\">Read more about this command →</a></p> <h3 id=\"pointpoint\"><a href=\"point/index\">point</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.point(longitude, latitude) → point\n</pre> <p>Construct a geometry object of type Point. The point is specified by two floating point numbers, the longitude (−180 to 180) and latitude (−90 to 90) of the point on a perfect sphere. See <a href=\"../../docs/geo-support/java/index\">Geospatial support</a> for more information on ReQL’s coordinate system.</p> <p><strong>Example:</strong> Define a point.</p> <pre data-language=\"java\">r.table(\"geo\").insert(\n    r.hashMap(\"id\", 1)\n     .with(\"name\", \"San Francisco\")\n     .with(\"location\", r.point(-122.423246, 37.779388))\n).run(conn);\n</pre>  <p><a href=\"point/index\">Read more about this command →</a></p> <h3 id=\"polygonpolygon\"><a href=\"polygon/index\">polygon</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.polygon([lon1, lat1], [lon2, lat2], [lon3, lat3], ...) → polygon\nr.polygon(point1, point2, point3, ...) → polygon\n</pre> <p>Construct a geometry object of type Polygon. The Polygon can be specified in one of two ways:</p> <ul> <li>Three or more two-item arrays, specifying latitude and longitude numbers of the polygon’s vertices;</li> <li>Three or more <a href=\"point/index\">Point</a> objects specifying the polygon’s vertices.</li> </ul> <p><strong>Example:</strong> Define a polygon.</p> <pre data-language=\"java\">r.table(\"geo\").insert(\n    r.hashMap(\"id\", 101)\n     .with(\"rectangle\", r.polygon(\n        r.array(-122.423246, 37.779388),\n        r.array(-122.423246, 37.329898),\n        r.array(-121.88642, 37.329898),\n        r.array(-121.88642, 37.779388))\n    )\n).run(conn);\n</pre>  <p><a href=\"polygon/index\">Read more about this command →</a></p> <h3 id=\"polygonsubpolygonsub\"><a href=\"polygon_sub/index\">polygonSub</a></h3> <pre class=\"command-syntax\" data-language=\"java\">polygon1.polygonSub(polygon2) → polygon\n</pre> <p>Use <code class=\"highlighter-rouge\">polygon2</code> to “punch out” a hole in <code class=\"highlighter-rouge\">polygon1</code>. <code class=\"highlighter-rouge\">polygon2</code> must be completely contained within <code class=\"highlighter-rouge\">polygon1</code> and must have no holes itself (it must not be the output of <code class=\"highlighter-rouge\">polygonSub</code> itself).</p> <p><strong>Example:</strong> Define a polygon with a hole punched in it.</p> <pre data-language=\"java\">import com.rethinkdb.gen.ast.Polygon;\n\nPolygon outerPolygon = r.polygon(\n    [-122.4,37.7],\n    [-122.4,37.3],\n    [-121.8,37.3],\n    [-121.8,37.7]\n);\nPolygon innerPolygon = r.polygon(\n    [-122.3,37.4],\n    [-122.3,37.6],\n    [-122.0,37.6],\n    [-122.0,37.4]\n);\nouterPolygon.polygonSub(inner_polygon).run(conn);\n</pre>  <p><a href=\"polygon_sub/index\">Read more about this command →</a></p>  <h2 data-alt=\"Administration \">Administration </h2>\n<h3 id=\"grantgrant\"><a href=\"grant/index\">grant</a></h3> <pre class=\"command-syntax\" data-language=\"java\">r.grant(\"username\", r.hashMap(\"permission\", bool[, ...])) → object\ndb.grant(\"username\", r.hashMap(\"permission\", bool[, ...])) → object\ntable.grant(\"username\", r.hashMap(\"permission\", bool[, ...])) → object\n</pre> <p>Grant or deny access permissions for a user account, globally or on a per-database or per-table basis.</p> <p><strong>Example:</strong> Grant the <code class=\"highlighter-rouge\">chatapp</code> user account read and write permissions on the <code class=\"highlighter-rouge\">users</code> database.</p> <pre data-language=\"java\">r.db(\"users\").grant(\"chatapp\", r.hashMap(\"read\", true).with(\"write\", true)).run(conn);\n</pre>  <p>Return:</p> <pre data-language=\"java\">{\n    \"granted\": 1,\n    \"permissions_changes\": [\n        {\n            \"new_val\": { \"read\": true, \"write\": true },\n            \"old_val\": { null }\n        }\n    ]\n</pre>  <p><a href=\"grant/index\">Read more about this command →</a></p> <h3 id=\"configconfig\"><a href=\"config/index\">config</a></h3> <pre class=\"command-syntax\" data-language=\"java\">table.config() → selection&lt;object&gt;\ndatabase.config() → selection&lt;object&gt;\n</pre> <p>Query (read and/or update) the configurations for individual tables or databases.</p> <p><strong>Example:</strong> Get the configuration for the <code class=\"highlighter-rouge\">users</code> table.</p> <pre data-language=\"java\">r.table(\"users\").config().run(conn);\n</pre>  <p><a href=\"config/index\">Read more about this command →</a></p> <h3 id=\"rebalancerebalance\"><a href=\"rebalance/index\">rebalance</a></h3> <pre class=\"command-syntax\" data-language=\"java\">table.rebalance() → object\ndatabase.rebalance() → object\n</pre> <p>Rebalances the shards of a table. When called on a database, all the tables in that database will be rebalanced.</p> <p><strong>Example:</strong> Rebalance a table.</p> <pre data-language=\"java\">&gt; r.table(\"superheroes\").rebalance().run(conn);\n</pre>  <p><a href=\"rebalance/index\">Read more about this command →</a></p> <h3 id=\"reconfigurereconfigure\"><a href=\"reconfigure/index\">reconfigure</a></h3> <pre class=\"command-syntax\" data-language=\"java\">table.reconfigure() → object\ndatabase.reconfigure() → object\n</pre> <p>Reconfigure a table’s sharding and replication. Pass the following options using <a href=\"optarg/index\">optArg</a>:</p> <p><strong>Example:</strong> Reconfigure a table.</p> <pre data-language=\"java\">r.table(\"superheroes\").reconfigure().optArg(\"shards\", 2).optArg(\"replicas\", 1).run(conn);\n</pre>  <p><a href=\"reconfigure/index\">Read more about this command →</a></p> <h3 id=\"statusstatus\"><a href=\"status/index\">status</a></h3> <pre class=\"command-syntax\" data-language=\"java\">table.status() → selection&lt;object&gt;\n</pre> <p>Return the status of a table.</p> <p><strong>Example:</strong> Get a table’s status.</p> <pre data-language=\"java\">r.table(\"superheroes\").status().run(conn);\n</pre>  <p><a href=\"status/index\">Read more about this command →</a></p> <h3 id=\"waitwait\"><a href=\"wait/index\">wait</a></h3> <pre class=\"command-syntax\" data-language=\"java\">table.wait() → object\ndatabase.wait() → object\nr.wait(table | database) → object\n</pre> <p>Wait for a table or all the tables in a database to be ready. A table may be temporarily unavailable after creation, rebalancing or reconfiguring. The <code class=\"highlighter-rouge\">wait</code> command blocks until the given table (or database) is fully up to date.</p> <p><strong>Example:</strong> Wait on a table to be ready.</p> <pre data-language=\"java\">r.table(\"superheroes\").wait().run(conn);\n</pre>  <p>Result:</p> <pre data-language=\"java\">{ \"ready\": 1 }\n</pre>  <p><a href=\"wait/index\">Read more about this command →</a></p>    <h3>Improve this doc</h3> <p>Help us improve this document.</p> <ul> <li class=\"github\">\n<strong>Help us</strong> improve the docs <a href=\"https://github.com/rethinkdb/docs/blob/master/api/java/index.md\">by editing</a> this document</li> <li class=\"github\">\n<strong>Post an issue</strong> on the docs <a href=\"https://github.com/rethinkdb/docs/issues\">issue tracker</a> on GitHub</li> </ul> <h3>Get more help</h3> <p>We always welcome suggestions on how to improve our documentation, or specific ReQL questions.</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"http://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"github\">\n<strong>Post an issue</strong> on our <a href=\"https://github.com/rethinkdb/rethinkdb/issues\">issue tracker</a> on GitHub</li> <li class=\"twitter\">\n<strong>Follow</strong> <a href=\"http://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/</a>\n  </p>\n</div>\n","docs/optimization/index":"<h1 class=\"title\">Optimizing query performance</h1> <p>Understanding how RethinkDB parallelizes queries can improve the performance of your applications—sometimes significantly.</p> <div class=\"toc\">  <ul id=\"markdown-toc\"> <li><a href=\"#sharding\" id=\"markdown-toc-sharding\">Sharding</a></li> <li><a href=\"#replication\" id=\"markdown-toc-replication\">Replication</a></li> <li><a href=\"#proxy-nodes\" id=\"markdown-toc-proxy-nodes\">Proxy nodes</a></li> </ul> </div> <h2 id=\"sharding\">Sharding</h2> <p>The basic rule is:</p> <p><strong>Processing happens where the data is until an operation needs to combine it.</strong></p> <p>In other words, ReQL queries that involve multiple shards will be processed on those shards whenever possible.</p> <p>Let’s follow the processing of a simple query. (This example uses JavaScript, but the commands are virtually identical in other languages.)</p> <pre data-language=\"\">r.table('users').filter({role: 'admin'}).run(conn, callback);\n</pre>  <p>RethinkDB will process this query with the following steps:</p> <ol> <li>The query is sent to a server for execution.</li> <li>The <a href=\"https://rethinkdb.com/api/javascript/filter/\">filter</a> operation is performed in parallel on each shard of the <code class=\"highlighter-rouge\">users</code> table.</li> <li>The result of the <code class=\"highlighter-rouge\">filter</code> is sent from the shards to the query server and combined.</li> <li>The result is returned to the client.</li> </ol> <p>However, an <a href=\"https://rethinkdb.com/api/javascript/order_by/\">orderBy</a> query will be executed differently.</p> <pre data-language=\"\">r.table('users').orderBy('username').run(conn, callback);\n</pre>  <ol> <li>The query is sent to a server for execution.</li> <li>Data is sent from the shards to the query server and combined.</li> <li>The <code class=\"highlighter-rouge\">orderBy</code> operation is performed on the query server.</li> <li>The result is returned to the client.</li> </ol> <p>An <code class=\"highlighter-rouge\">orderBy</code> operation (without an index) can’t be distributed across the shards for parallel execution—it needs all the data in the table to perform a sort.</p> <p>The following commands can be distributed across shards:</p> <ul> <li>Selections: <code class=\"highlighter-rouge\">between</code>, <code class=\"highlighter-rouge\">get_all</code>, <code class=\"highlighter-rouge\">filter</code>\n</li> <li>\n<a href=\"../map-reduce/index\">Map-reduce</a> operations: <code class=\"highlighter-rouge\">map</code>, <code class=\"highlighter-rouge\">concat_map</code>, <code class=\"highlighter-rouge\">reduce</code>\n</li> <li><code class=\"highlighter-rouge\">group</code></li> <li>Derived terms: <code class=\"highlighter-rouge\">pluck</code>, <code class=\"highlighter-rouge\">with_field</code>, <code class=\"highlighter-rouge\">count</code>, <code class=\"highlighter-rouge\">eq_join</code>\n</li> <li>\n<code class=\"highlighter-rouge\">order_by</code> <em>with</em> indexes</li> </ul> <p>The order in which you chain ReQL commands can affect performance. For an example, imagine combining the previous two queries to return an ordered list of names of admin users. The <code class=\"highlighter-rouge\">filter</code> operation can be distributed across shards, but the <code class=\"highlighter-rouge\">orderBy</code> operation cannot. So this query:</p> <pre data-language=\"\">r.table('users').filter({role: 'admin'}).orderBy('name').run(conn, callback);\n</pre>  <p>Is preferable to this query:</p> <pre data-language=\"\">r.table('users').orderBy('name').filter({role: 'admin'}).run(conn, callback);\n</pre>  <p>Commands that stop subsequent commands from being parallelized include:</p> <ul> <li>\n<code class=\"highlighter-rouge\">order_by</code> (with or without indexes)</li> <li><code class=\"highlighter-rouge\">distinct</code></li> <li><code class=\"highlighter-rouge\">eq_join</code></li> <li>\n<code class=\"highlighter-rouge\">reduce</code>, <code class=\"highlighter-rouge\">fold</code>\n</li> <li>\n<code class=\"highlighter-rouge\">limit</code>, <code class=\"highlighter-rouge\">skip</code>, <code class=\"highlighter-rouge\">slice</code>\n</li> <li>\n<code class=\"highlighter-rouge\">max</code>, <code class=\"highlighter-rouge\">min</code>, <code class=\"highlighter-rouge\">avg</code>\n</li> </ul> <p>Any command that requires the results from the shards to be combined on the server executing the query will finish executing on that server rather than being distributed. Optimize your queries by putting commands that can execute in parallel <em>before</em> commands that combine the result set whenever possible.</p> <h2 id=\"replication\">Replication</h2> <p>RethinkDB’s defaults tend to prioritize safety over performance. One of those defaults is that queries will be sent to the primary replicas for shards, which will always have current data (although that data may be returned to a query before it’s been committed to disk).</p> <p>You can increase the performance of a query by using the <code class=\"highlighter-rouge\">outdated</code> read mode, which allows the cluster to return values from memory on arbitrarily-selected replicas.</p> <pre data-language=\"\">r.table('users', {readMode: 'outdated'}).\n  filter({role: 'admin'}).run(conn, callback);\n</pre>  <p>While <code class=\"highlighter-rouge\">outdated</code> reads are faster, they are the least consistent. For more information on this option, read “Balancing safety and performance” in the <a href=\"../consistency/index#balancing-safety-and-performance\">Consistency guarantees</a> documentation.</p> <h2 id=\"proxy-nodes\">Proxy nodes</h2> <p>Starting RethinkDB with the <code class=\"highlighter-rouge\">proxy</code> command turns a server into a <em>proxy node,</em> which acts as a query router. This increases cluster performance by reducing intracluster traffic and, if you’re using changefeeds, de-duplicating feed messages.</p> <p>For more information about proxy nodes, read “Running a proxy node” under <a href=\"../sharding-and-replication/index#running-a-proxy-node\">Scaling, sharding and replication</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/optimization/\" class=\"_attribution-link\">https://rethinkdb.com/docs/optimization/</a>\n  </p>\n</div>\n","docs/reql-data-exploration/index":"<h1 class=\"title\">Useful RethinkDB commands for exploring data</h1> <p><img alt=\"Data Exploration Illustration\" class=\"api_command_illustration\" src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/data_exploration.png\"></p> <p>Akshay Chougule, a biologist working with large data sets, wrote a blog post about <a href=\"http://datavu.blogspot.com/2014/08/useful-unix-commands-for-exploring-data.html\">Useful Unix commands for exploring data</a>, showing ways to “query” comma-delimited plain text data sets with common shell commands. We thought it’d be interesting to do a similar article using ReQL in the Data Explorer, showing how it can be used for ad hoc queries.</p> <p>Akshay created a fictitious data set of movies; we’ll use <a href=\"http://www.imdb.com/interfaces\">data</a> from the <a href=\"http://www.imdb.com/chart/top\">IMDb Top 250</a>. (Note that we captured this on August 26, 2014, so the data will likely be different if you check it now.) The plain-text data from IMDb isn’t in <em>any</em> format, but we’ve turned it into a JSON file available at <a href=\"http://rethinkdb.com/sample/top-250-ratings.json\">http://rethinkdb.com/sample/top-250-ratings.json</a>. (For the record, we converted it to a tab-delimited file first, used <code class=\"highlighter-rouge\">rethinkdb import</code> to get it into a database, fixed the column types and re-exported it. See <a href=\"http://rethinkdb.com/docs/importing/\">Importing your data</a> for details.)</p> <p>Since it’s available online, you can import our sample data set just by creating a table and importing it with <a href=\"../http/index\">http</a>. Just execute these commands directly in the Data Explorer.</p> <pre data-language=\"\">r.tableCreate('movies');\nr.table('movies').insert(r.http('http://rethinkdb.com/sample/top-250-ratings.json'))\n</pre>  <p>The Data Explorer will return information about the inserted rows.</p> <pre data-language=\"\">{\n\t\"deleted\": 0 ,\n\t\"errors\": 0 ,\n\t\"generated_keys\": [\n\t\"bbf81f4d-2a6d-40bb-9b5d-b6e288cc8795\" ,\n\t\"0d6054f4-12b0-4c2e-b221-881441c779c4\" ,\n\t...\n\t] ,\n\t\"inserted\": 253 ,\n\t\"replaced\": 0 ,\n\t\"skipped\": 0 ,\n\t\"unchanged\": 0\n}\n</pre>  <p>The table created has six fields: an automatically generated primary key (<code class=\"highlighter-rouge\">id</code>), <code class=\"highlighter-rouge\">rank</code> (the IMDb rank, 1–250), <code class=\"highlighter-rouge\">rating</code> (on a 1–10 scale), <code class=\"highlighter-rouge\">title</code>, <code class=\"highlighter-rouge\">votes</code>, and <code class=\"highlighter-rouge\">year</code>.</p> <h3 id=\"get-the-top-movie\">Get the top movie</h3> <p>So we can see IMDb’s number one movie with <code class=\"highlighter-rouge\">filter({rank: 1})</code>:</p> <pre data-language=\"\">r.table('movies').filter({rank: 1})\n\n[\n\t{\n\t\t\"id\":  \"bbf81f4d-2a6d-40bb-9b5d-b6e288cc8795\" ,\n\t\t\"rank\": 1 ,\n\t\t\"rating\": 9.2 ,\n\t\t\"title\":  \"The Shawshank Redemption\" ,\n\t\t\"votes\": 1262930 ,\n\t\t\"year\": 1994\n\t}\n]\n</pre>  <p>(“Shawshank” has been the most-loved movie on IMDb for many years. Take that, Orson Welles.)</p> <h3 id=\"removing-duplicate-documents\">Removing duplicate documents</h3> <p>You might have caught that there were 253 documents inserted, not 250. Either we have the top 253 movies, or there are a few duplicate records lurking in there. We can use <code class=\"highlighter-rouge\">distinct</code> to get a count of unique rows, but we need to remove the <code class=\"highlighter-rouge\">id</code> column from the query, since all ID values are unique.</p> <pre data-language=\"\">r.table('movies').without('id').distinct().count()\n\n250\n</pre>  <p>To get the list without duplicates, we can simply leave off <code class=\"highlighter-rouge\">count</code>.</p> <pre data-language=\"\">r.table('movies').without('id').distinct()\n</pre>  <p>To put these into a new table, wrap that query with <code class=\"highlighter-rouge\">insert</code>. We’ll get new IDs generated automatically. This is also an example of using subqueries with ReQL: it’s easy to pass the results of one query into another. (One of ReQL’s other nice properties, which we’ve already seen, is command chaining: the input of one command is often the output of the command before it, similar to Unix piping.)</p> <pre data-language=\"\">r.tableCreate('moviesUnique');\nr.table('moviesUnique').insert(\n\tr.table('movies').without('id').distinct()\n)\n</pre>  <p>Now with a “clean” data set we can run simple reports right in the Data Explorer. (You might want to switch to Table View for some of these, and you can also add <code class=\"highlighter-rouge\">.without('id')</code> in the command chain to “prettify” the table display if you wish.)</p> <h3 id=\"display-the-top-10-movies\">Display the top 10 movies…</h3> <pre data-language=\"\">r.table('moviesUnique').orderBy('rank').limit(10)\n</pre>  <h3 id=\"and-the-bottom-10\">…and the bottom 10</h3> <pre data-language=\"\">r.table('moviesUnique').orderBy(r.desc('rank')).limit(10)\n</pre>  <p>(Those are the bottom 10 of the top 250, so they’re still pretty good.)</p> <h3 id=\"get-the-1st-2nd-6th-and-last-records\">Get the 1st, 2nd ,6th and last records</h3> <pre data-language=\"\">r.table('moviesUnique').filter(function (doc) {\n  return r.expr([1, 2, 6, r.table('moviesUnique').max('rank')('rank')]).\n    contains(doc('rank'));\n}).orderBy('rank');\n</pre>  <h3 id=\"find-the-average-number-of-votes-for-the-top-25-movies\">Find the average number of votes for the top 25 movies</h3> <pre data-language=\"\">r.table('moviesUnique').orderBy('rank').limit(25).avg('votes')\n</pre>  <h3 id=\"find-the-most-recent-movie-in-the-top-25\">Find the most recent movie in the top 25</h3> <pre data-language=\"\">r.table('moviesUnique').orderBy('rank').limit(25).max('year')\n</pre>  <h3 id=\"find-the-highest-ranked-movie-with-under-100000-votes\">Find the highest-ranked movie with under 100,000 votes</h3> <pre data-language=\"\">r.table('moviesUnique').filter(r.row('votes').lt(100000)).min('rank')\n</pre>  <p>You can read more about ReQL in the <a href=\"../introduction-to-reql/index\">Introduction to ReQL</a> article, or go into greater depth with the <a href=\"../../api/java/index\">API documentation</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/reql-data-exploration/\" class=\"_attribution-link\">https://rethinkdb.com/docs/reql-data-exploration/</a>\n  </p>\n</div>\n","docs/start-a-server/index":"<h1 class=\"title\">Start a RethinkDB server</h1> <blockquote class=\"infobox \">\n<p><strong>Want to start instances of RethinkDB on system startup?</strong> See <a href=\"../start-on-startup/index\">Start RethinkDB at system startup</a> to learn how to set up RethinkDB with <code class=\"highlighter-rouge\">init.d</code> or <code class=\"highlighter-rouge\">systemd</code>.</p> </blockquote> <p>This document describes how to start RethinkDB from the command line in several configurations, from a single instance on one machine to multiple instances on multiple machines.</p> <div class=\"toc\">  <ul id=\"markdown-toc\"> <li><a href=\"#starting-the-server\" id=\"markdown-toc-starting-the-server\">Starting the server</a></li> <li><a href=\"#multiple-rethinkdb-instances-on-a-single-machine\" id=\"markdown-toc-multiple-rethinkdb-instances-on-a-single-machine\">Multiple RethinkDB instances on a single machine</a></li> <li><a href=\"#a-rethinkdb-cluster-using-multiple-machines\" id=\"markdown-toc-a-rethinkdb-cluster-using-multiple-machines\">A RethinkDB cluster using multiple machines</a></li> <li><a href=\"#troubleshooting\" id=\"markdown-toc-troubleshooting\">Troubleshooting</a></li> </ul> </div> <p><img src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/cluster.png\" class=\"api_command_illustration\"></p> <h2 id=\"starting-the-server\">Starting the server</h2> <p>To start the first RethinkDB instance, run this command in your terminal:</p> <pre data-language=\"\">$ rethinkdb\ninfo: Creating directory /home/user/rethinkdb_data\ninfo: Listening for intracluster connections on port 29015\ninfo: Listening for client driver connections on port 28015\ninfo: Listening for administrative HTTP connections on port 8080\ninfo: Server ready\n</pre>  <p>Note the port numbers you can use to access RethinkDB:</p> <ul> <li>Use the intracluster port (<code class=\"highlighter-rouge\">29015</code> by default) to connect other nodes in the cluster to this node.</li> <li>Point your browser to the HTTP connections port (<code class=\"highlighter-rouge\">8080</code> by default) to access the web interface.</li> </ul> <blockquote class=\"infobox \">\n<p>For a complete list of options that can be passed to RethinkDB on the command line, read <a href=\"../cli-options/index\">RethinkDB command line options</a> or type <code class=\"highlighter-rouge\">rethinkdb --help</code> at the terminal prompt.</p> </blockquote> <h2 id=\"multiple-rethinkdb-instances-on-a-single-machine\">Multiple RethinkDB instances on a single machine</h2> <p>Adding a node to a RethinkDB cluster is as easy as starting a new RethinkDB process and pointing it to an existing node in the cluster. Everything else is handled by the system without any additional effort required from the user.</p> <p>Now start the second RethinkDB instance on the same machine:</p> <pre data-language=\"\">$ rethinkdb --port-offset 1 --directory rethinkdb_data2 --join localhost:29015\ninfo: Creating directory /home/user/rethinkdb_data2\ninfo: Listening for intracluster connections on port 29016\ninfo: Attempting connection to 1 peer...\ninfo: Connected to server \"Chaosknight\" e6bfec5c-861e-4a8c-8eed-604cc124b714\ninfo: Listening for client driver connections on port 28016\ninfo: Listening for administrative HTTP connections on port 8081\ninfo: Server ready\n</pre>  <p><strong>You now have a RethinkDB cluster!</strong> Try pointing your browser to <code class=\"highlighter-rouge\">localhost:8080</code> or <code class=\"highlighter-rouge\">localhost:8081</code> to access the web interface. If you click on the “Servers” tab at the top, you should see both servers in the cluster.</p> <p>You can also point the client drivers to <code class=\"highlighter-rouge\">localhost:28015</code> or <code class=\"highlighter-rouge\">localhost:28016</code> to start running queries (it doesn’t matter which node you use—the cluster will automatically route all commands to appropriate nodes).</p> <p>Note the command line parameters we used to start the second node:</p> <ul> <li>\n<code class=\"highlighter-rouge\">--port-offset</code>—increment all ports by 1 so the two nodes don’t try to use the same ports on one machine.</li> <li>\n<code class=\"highlighter-rouge\">--directory</code>—use a different data directory so the two nodes don’t try to access the same files.</li> <li>\n<code class=\"highlighter-rouge\">--join</code>—tell our new RethinkDB instance to connect to another instance (in this case, <code class=\"highlighter-rouge\">localhost:29015</code>).</li> </ul> <p>For a complete list of options that can be passed to RethinkDB on the command line, read <a href=\"../cli-options/index\">RethinkDB command line options</a>, or type <code class=\"highlighter-rouge\">rethinkdb --help</code> at the terminal prompt.</p> <blockquote class=\"infobox \">\n<p><strong>Having trouble accessing the web interface?</strong> Try restarting both of your RethinkDB instances with an additional <code class=\"highlighter-rouge\">--bind all</code> parameter.</p> </blockquote> <p>In production, you’d likely want to specify options via configuration files rather than command line options; read the <a href=\"../config-file/index\">configuration file</a> documentation for details on the format and available options. Also, you’d want your RethinkDB instances to come online at system startup. See <a href=\"../start-on-startup/index\">Start RethinkDB at system startup</a> to learn how to set up RethinkDB with <code class=\"highlighter-rouge\">init.d</code> or <code class=\"highlighter-rouge\">systemd</code>.</p> <blockquote class=\"infobox \">\n<p><strong>Want to connect a third node?</strong> You can join it with either of the two existing nodes in the cluster.</p> </blockquote> <h2 id=\"a-rethinkdb-cluster-using-multiple-machines\">A RethinkDB cluster using multiple machines</h2> <p>Starting a cluster on multiple machines or VMs is even easier than starting it on a single machine, because you don’t have to worry about port and directory conflicts.</p> <p>First, start RethinkDB on the first machine:</p> <pre data-language=\"\">$ rethinkdb --bind all\n</pre>  <p>Then start RethinkDB on the second machine:</p> <pre data-language=\"\">$ rethinkdb --join IP_OF_FIRST_MACHINE:29015 --bind all\n</pre>  <p><strong>You now have a RethinkDB cluster!</strong></p> <p>Note that by default, RethinkDB only opens connections bound to <code class=\"highlighter-rouge\">localhost</code> in order to prevent unauthorized clients on the network from connecting to the server. The <code class=\"highlighter-rouge\">--bind all</code> option allows connections from anywhere on the network. It works well if the network is protected.</p> <p>If your network is open to the internet, you should take additional precautions. See the <a href=\"../security/index\">security page</a> for more details.</p> <h2 id=\"troubleshooting\">Troubleshooting</h2> <blockquote class=\"infobox \">\n<p><strong>Seeing a ‘received invalid clustering header’ message?</strong> RethinkDB uses three ports to operate—the HTTP web UI port, the client drivers port, and the intracluster traffic port. You can connect the browser to the web UI port to administer the cluster right from your browser, and connect the client drivers to the client driver port to run queries from your application. If you’re running a cluster, different RethinkDB nodes communicate with each other via the intracluster traffic port.</p> <p>The message <code class=\"highlighter-rouge\">received invalid clustering header</code> means there is a port mismatch, and something is connecting to the wrong port. For example, it’s common to get this message if you accidentally point the browser or connect the client drivers to the intracluster traffic port.</p> </blockquote><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/start-a-server/\" class=\"_attribution-link\">https://rethinkdb.com/docs/start-a-server/</a>\n  </p>\n</div>\n","docs/install/index":"<h1 class=\"title\">Installing RethinkDB</h1>   <h3>Official packages</h3> <ul class=\"platform-buttons\"> <li> <a href=\"https://rethinkdb.com/docs/install/ubuntu/\">  Ubuntu </a> </li> <li> <a href=\"https://rethinkdb.com/docs/install/osx/\">  OS X </a> </li> <li> <a href=\"https://rethinkdb.com/docs/install/centos/\">  CentOS </a> </li> <li> <a href=\"https://rethinkdb.com/docs/install/debian/\">  Debian </a> </li> <li> <a href=\"https://rethinkdb.com/docs/install/windows/\">  Windows </a> </li> </ul>   <h3>Community supported packages</h3> <ul class=\"platform-buttons\"> <li> <a href=\"https://rethinkdb.com/docs/install/arch/\">  Arch Linux </a> </li> <li> <a href=\"https://rethinkdb.com/docs/install/opensuse/\">  openSUSE </a> </li> <li> <a href=\"https://rethinkdb.com/docs/install/fedora/\">  Fedora </a> </li> <li> <a href=\"https://rethinkdb.com/docs/install/mint/\">  Linux Mint </a> </li> <li> <a href=\"https://rethinkdb.com/docs/install/raspbian/\">  Raspbian </a> </li> </ul>   <blockquote class=\"infobox infobox-info\">\n<p><strong>Ready to install the client drivers?</strong> Take a look at <a href=\"../install-drivers/index\">the drivers install page</a>.</p> </blockquote>  <h2 id=\"docker\">Docker</h2> <p>Docker provides an <a href=\"https://registry.hub.docker.com/_/rethinkdb/\">official RethinkDB repository</a> on the Docker Hub. To deploy RethinkDB on Docker, run the following command:</p> <pre data-language=\"\">$ docker run -d -P --name rethink1 rethinkdb\n</pre>  <p>You can find unofficial community-supported Docker images on our <a href=\"../frameworks-and-libraries/index\">Frameworks and Libraries</a> list under “Docker images.”</p> <h2 id=\"installing-on-other-platforms\">Installing on other platforms</h2> <p><img class=\"install-illustration\" src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/install.png\"></p> <h3 id=\"building-from-source\">Building from source</h3> <p>If your platform isn’t listed here, you may still be able to build from source. You should be able to build RethinkDB on most Linux-based systems—check out the generic <a href=\"https://rethinkdb.com/docs/build\">build instructions</a>. If you get RethinkDB running on your platform, please <a href=\"https://rethinkdb.com/community\">contribute</a> a package!</p>  <h3 id=\"other-architectures\">Other architectures</h3> <p>Currently the RethinkDB server only supports x86 and x86_64 architectures on Unix-based platforms, and has experimental ARM support (thanks to the effort of <a href=\"http://github.com/davidthomas426\">@davidthomas426</a>).</p> <p>Our long-term goal is to port RethinkDB to every widely-used platform. <a href=\"https://rethinkdb.com/community/\">Get involved</a> in the development effort and help port RethinkDB to more platforms.</p> <h2 id=\"older-versions\">Older versions</h2> <p>Binaries for previous versions of RethinkDB are available in the <a href=\"https://download.rethinkdb.com\">download archive</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/install/\" class=\"_attribution-link\">https://rethinkdb.com/docs/install/</a>\n  </p>\n</div>\n","docs/sql-to-reql/java/index":"<h1 class=\"title\">SQL to ReQL cheat sheet</h1>    <blockquote class=\"infobox infobox-alert\">\n<p><strong>This document has not been updated for Java.</strong> The <a href=\"../../../api/java/index\">API documentation</a> for Java is complete, but many ReQL articles still have examples in other languages. We’ll be updating each article after the Java driver is officially released.</p> </blockquote> <p><img alt=\"Data Modeling Illustration\" class=\"api_command_illustration\" src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/SQL-to-ReQL-cheat-sheet.png\"></p>  <h2 id=\"terminology\">Terminology</h2> <p>SQL and RethinkDB share very similar terminology. Below is a table of terms and concepts in the two systems.</p> <table class=\"table-top-aligned\"> <thead> <tr> <th>SQL</th> <th>RethinkDB</th> </tr> </thead> <tbody> <tr> <td>database</td> <td>database</td> </tr> <tr> <td>table</td> <td>table</td> </tr> <tr> <td>row</td> <td>document</td> </tr> <tr> <td>column</td> <td>field</td> </tr> <tr> <td>table joins</td> <td>table joins</td> </tr> <tr> <td>primary key</td> <td>primary key (by default <code>id</code>)</td> </tr> <tr> <td>index</td> <td>index</td> </tr> </tbody> </table> <h2 id=\"insert\">INSERT</h2> <p>This is a list of queries for inserting data into a database.</p> <table class=\"table-top-aligned\"> <thead><tr>\n<th>SQL</th>\n<th>ReQL</th>\n</tr></thead> <tbody> <tr> <td> <pre data-language=\"\">INSERT INTO users(user_id,\n                  age,\n                  name)\nVALUES (\"f62255a8259f\",\n        30,\n        Peter)</pre> </td> <td> <pre data-language=\"\">r.table(\"users\").insert({\n   userId: \"f62255a8259f\",\n   age: 30,\n   name: \"Peter\"\n})</pre> </td> </tr> </tbody> </table> <h2 id=\"select\">SELECT</h2> <p>This is a list of queries for selecting data out of a database.</p> <table class=\"table-top-aligned\"> <thead><tr>\n<th>SQL</th>\n<th>ReQL</th>\n</tr></thead> <tbody> <tr>\n<td> <pre data-language=\"\">SELECT * FROM users</pre> </td>\n<td> <pre data-language=\"\">r.table(\"users\")</pre> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">SELECT user_id, name FROM users</pre> </td>\n<td> <pre data-language=\"\">r.table(\"users\")\n .pluck(\"userId\", \"name\")</pre> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">SELECT * FROM users\nWHERE name = \"Peter\"</pre> </td>\n<td> <pre data-language=\"\">r.table(\"users\").filter({\n    name: \"Peter\"\n})</pre> <p>If you have a secondary index built on the field <code>name</code>, you can run a more efficient query:</p> <pre data-language=\"\">r.table(\"users\")\n    .getAll(\"Peter\", {index: \"name\"})</pre> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">SELECT * FROM users\nWHERE name = \"Peter\"\nAND age = 30</pre> </td>\n<td> <pre data-language=\"\">r.table(\"users\").filter({\n    name: \"Peter\",\n    age: 30\n})</pre> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">SELECT * FROM users\nWHERE name LIKE \"P%\"</pre> </td>\n<td> <pre data-language=\"\">r.table(\"users\").filter(\n    r.row(\"name\").match(\"^P\")\n)</pre> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">SELECT * FROM users\nORDER BY name ASC</pre> </td>\n<td> <pre data-language=\"\">r.table(\"users\").orderBy(\"name\")</pre> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">SELECT * FROM users\nORDER BY name DESC</pre> </td>\n<td> <pre data-language=\"\">r.table(\"users\").orderBy(\n    r.desc(\"name\")\n)</pre> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">SELECT user_id FROM users\nWHERE name = \"Peter\"\nORDER BY name DESC</pre> </td>\n<td> <pre data-language=\"\">r.table(\"users\").filter({\n    name: \"Peter\"\n}).orderBy(\n    r.desc(\"name\")\n).pluck(\"userId\")</pre> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">SELECT * FROM users LIMIT 5 SKIP 10</pre> </td>\n<td> <pre data-language=\"\">r.table(\"users\").skip(10).limit(5)</pre> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">SELECT * FROM users\nWHERE name IN ('Peter', 'John')</pre> </td>\n<td> <pre data-language=\"\">r.table(\"users\").filter(\n  function (doc) {\n    return r.expr([\"Peter\",\"John\"])\n            .contains(doc(\"name\"));\n  }\n)</pre> <p>If you have a secondary index built on the field <code>name</code>, you can run a more efficient query:</p> <pre data-language=\"\">r.table(\"users\")\n    .getAll(\"Peter\", \"John\",\n        {index: \"name\"})</pre> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">SELECT * FROM users\nWHERE name NOT IN ('Peter', 'John')</pre> </td>\n<td> <pre data-language=\"\">r.table(\"users\").filter(\n  function (doc) {\n    return r.expr([\"Peter\",\"John\"])\n            .contains(doc(\"name\"))\n            .not();\n  }\n)</pre> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">SELECT COUNT(*) FROM users</pre> </td>\n<td> <pre data-language=\"\">r.table(\"users\").count()</pre> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">SELECT COUNT(name) FROM users\nWHERE age &gt; 18</pre> </td>\n<td> <pre data-language=\"\">r.table(\"users\").filter(\n    r.row.hasFields(\"name\")\n    .and(r.row(\"age\").gt(18))\n).count()</pre> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">SELECT AVG(\"age\")\n    FROM users</pre> </td>\n<td> <pre data-language=\"\">r.table(\"users\").avg(\"age\")</pre> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">SELECT MAX(\"age\")\n    FROM users</pre> </td>\n<td> <pre data-language=\"\">r.table(\"users\")(\"age\").max()</pre> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">SELECT DISTINCT(name) FROM users</pre> </td>\n<td> <pre data-language=\"\">r.table(\"users\").pluck(\"name\")\n .distinct()</pre> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">SELECT *\n    FROM users\n    WHERE age BETWEEN 18 AND 65;</pre> </td>\n<td> <pre data-language=\"\">r.table(\"users\").filter(\n    r.row(\"age\").ge(18)\n     .and(r.row(\"age\").le(65))\n)</pre> If you have a secondary index built on the field <code>age</code>, you can run a more efficient query: <pre data-language=\"\">r.table(\"users\")\n .between(18, 65, {index: \"age\"})</pre> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">SELECT name, 'is_adult' = CASE\n    WHEN age&gt;18 THEN 'yes'\n    ELSE 'no'\n    END\nFROM users</pre> </td>\n<td> <pre data-language=\"\">r.table(\"users\").map({\n    name: r.row(\"name\"),\n    is_adult: r.branch(\n        r.row(\"age\").gt(18),\n        \"yes\",\n        \"no\"\n    )\n})</pre> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">SELECT *\n  FROM posts\n  WHERE EXISTS\n    (SELECT * FROM users\n     WHERE posts.author_id\n         = users.id)</pre> </td>\n<td> <pre data-language=\"\">r.table(\"posts\")\n  .filter(function (post) {\n    return r.table(\"users\")\n      .filter(function (user) {\n        return user(\"id\").eq(post(\"authorId\"))\n      }).count().gt(0)\n    })</pre> </td>\n</tr> </tbody> </table> <h2 id=\"update\">UPDATE</h2> <p>This is a list of commands for updating data in the database.</p> <table class=\"table-top-aligned\"> <thead><tr>\n<th>SQL</th>\n<th>ReQL</th>\n</tr></thead> <tbody> <tr>\n<td> <pre data-language=\"\">UPDATE users\n    SET age = 18\n    WHERE age &lt; 18</pre> </td>\n<td> <pre data-language=\"\">r.table(\"users\").filter(\n    r.row(\"age\").lt(18)\n).update({age: 18})</pre> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">UPDATE users\n    SET age = age+1</pre> </td>\n<td> <pre data-language=\"\">r.table(\"users\").update(\n    {age: r.row(\"age\").add(1)}\n)</pre> </td>\n</tr> </tbody> </table> <h2 id=\"delete\">DELETE</h2> <p>This is a list of queries for deleting data from the database.</p> <table class=\"table-top-aligned\"> <thead><tr>\n<th>SQL</th>\n<th>ReQL</th>\n</tr></thead> <tbody> <tr>\n<td> <pre data-language=\"\">DELETE FROM users</pre> </td>\n<td> <pre data-language=\"\">r.table(\"users\").delete()</pre> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">DELETE FROM users\nWHERE age &lt; 18</pre> </td>\n<td> <pre data-language=\"\">r.table(\"users\")\n    .filter(r.row(\"age\").lt(18))\n    .delete()</pre> </td>\n</tr> </tbody> </table> <h2 id=\"joins\">JOINS</h2> <p>This is a list of queries for performing joins between multiple tables.</p> <table class=\"table-top-aligned\"> <thead><tr>\n<th>SQL</th>\n<th>ReQL</th>\n</tr></thead> <tbody> <tr>\n<td> <pre data-language=\"\">SELECT *\nFROM posts\nJOIN users\nON posts.user_id = users.id</pre> </td>\n<td> <pre data-language=\"\">r.table(\"posts\").innerJoin(\n  r.table(\"users\"),\n  function (post, user) {\n    return post(\"userId\").eq(user(\"id\"));\n}).zip()</pre> <p><em>Note:</em> <code>zip()</code> will merge the user in the post, overwriting fields in case of conflict.</p> <p>If you have an index (primary key or secondary index) built on the field of the right table, you can perform a more efficient join with <a href=\"https://rethinkdb.com/api/javascript/eq_join/\">eqJoin</a>.</p> <pre data-language=\"\">r.table(\"posts\").eqJoin(\n    \"id\",\n    r.table(\"users\"),\n    {index: \"id\"}\n).zip()</pre> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">SELECT posts.id AS post_id,\n       user.name,\n       users.id AS user_id\n    FROM posts\n    JOIN users\n        ON posts.user_id = users.id\n\nSELECT posts.id AS post_id,\n       user.name,\n       users.id AS user_id\n    FROM posts\n    INNER JOIN users\n        ON posts.user_id = users.id</pre> </td>\n<td> <pre data-language=\"\">r.table(\"posts\").innerJoin(\n  r.table(\"users\"),\n  function (post, user) {\n    return post(\"userId\").eq(user(\"id\"));\n}).map({\n  postId: r.row(\"left\")(\"id\"),\n  userId: r.row(\"right\")(\"id\"),\n  name: r.row(\"right\")(\"name\")\n})</pre> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">SELECT *\n    FROM posts\n    RIGHT JOIN users\n        ON posts.user_id = users.id\n\nSELECT *\n    FROM posts\n    RIGHT OUTER JOIN users\n        ON posts.user_id = users.id</pre> </td>\n<td> <pre data-language=\"\">r.table(\"posts\").outerJoin(\n  r.table(\"users\"),\n  function (post, user) {\n    return post(\"userId\").eq(user(\"id\"));\n}).zip()</pre> <p><em>Note</em>: You can perform more efficient <code>OUTER JOIN</code> operations with the <a href=\"https://rethinkdb.com/api/javascript/concat_map/\">concatMap</a> command.</p> <pre data-language=\"\">r.table(\"posts\").concatMap(\n  function (post) {\n    return r.table(\"users\")\n    .getAll(post(\"id\"), {index: id})\n    .do(\n      function (result) {\n        return r.branch(\n          result.count().eq(0),\n          [{left: post}],\n          result.map(function (user) {\n            return {\n              left: post, right: user\n            };\n          })\n        );\n      }\n    );\n  }\n).zip();</pre> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">SELECT *\n    FROM posts\n    LEFT JOIN users\n        ON posts.user_id = users.id</pre> <pre data-language=\"\">SELECT *\n    FROM posts\n    LEFT OUTER JOIN users\n        ON posts.user_id = users.id</pre> </td>\n<td> <pre data-language=\"\">r.table(\"users\").outerJoin(\n  r.table(\"posts\"),\n  function (user, post) {\n    return post(\"userId\").eq(user(\"id\"));\n  }\n).zip()</pre> <pre data-language=\"\">r.table(\"users\").concatMap(\n  function (user) {\n    return r.table(\"posts\").getAll(user(\"id\"), {index: \"id\"}).do(\n      function (results) {\n        return r.branch(\n          results.count().eq(0),\n          [{left: user}],\n          results.map(function (post) {\n            return {left: user, right: post};\n          })\n        );\n      }\n    );\n  }\n).zip()</pre> </td>\n</tr> </tbody> </table> <h2 id=\"aggregations\">AGGREGATIONS</h2> <p>This is a list of queries for performing data aggregation.</p> <table class=\"table-top-aligned\"> <thead><tr>\n<th>SQL</th>\n<th>ReQL</th>\n</tr></thead> <tbody> <tr>\n<td> <pre data-language=\"\">SELECT category\n    FROM posts\n    GROUP BY category</pre> </td>\n<td> <pre data-language=\"\">r.table(\"posts\").map(\n    r.row(\"category\")\n).distinct()</pre> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">SELECT category,\n       SUM('num_comments')\n    FROM posts\n    GROUP BY category</pre> </td>\n<td> <pre data-language=\"\">r.table('posts')\n .group('category')\n .sum('num_comments')</pre> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">SELECT category,\n       status,\n       SUM('num_comments')\n    FROM posts\n    GROUP BY category, status</pre> </td>\n<td> <pre data-language=\"\">r.table(\"posts\")\n .group('category', 'status')\n .sum('num_comments')</pre> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">SELECT category,\n       SUM(num_comments)\n    FROM posts\n    WHERE num_comments &gt; 7\n    GROUP BY category</pre> </td>\n<td> <pre data-language=\"\">r.table(\"posts\")\n .filter(r.row('num_comments').gt(7))\n .group('category')\n .sum('num_comments')</pre> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">SELECT category,\n       SUM(num_comments)\n    FROM posts\n    GROUP BY category\n    HAVING num_comments &gt; 7</pre> </td>\n<td> <pre data-language=\"\">r.table(\"posts\")\n .group('category')\n .sum('num_comments')\n .ungroup()\n .filter(r.row(\"reduction\").gt(7))</pre> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">SELECT title,\n        COUNT(title)\n    FROM movies\n    GROUP BY title\n    HAVING COUNT(title) &gt; 1</pre> </td>\n<td> <pre data-language=\"\">r.table(\"movies\")\n .group(\"title\")\n .count()\n .ungroup()\n .filter(r.row(\"reduction\").gt(1))</pre> </td>\n</tr> </tbody> </table> <h2 id=\"table-and-database-manipulation\">TABLE and DATABASE manipulation</h2> <p>This is a list of queries for creating and dropping tables and databases.</p> <table class=\"table-top-aligned\"> <thead><tr>\n<th>SQL</th>\n<th>ReQL</th>\n</tr></thead> <tbody> <tr>\n<td> <pre data-language=\"\">CREATE DATABASE my_database;</pre> </td>\n<td> <pre data-language=\"\">r.dbCreate('my_database')</pre> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">DROP DATABASE my_database;</pre> </td>\n<td> <pre data-language=\"\">r.dbDrop('my_database')</pre> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">CREATE TABLE users\n    (id INT IDENTITY(1,1) PRIMARY KEY,\n    name VARCHAR(50),\n    age INT);</pre> </td>\n<td> <pre data-language=\"\">r.tableCreate('users', {primaryKey: \"id\"})</pre> <p><em>Note:</em> RethinkDB is a NoSQL database and does not enforce schemas.</p> <p><em>Note:</em> The default primary key is <code>id</code></p> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">TRUNCATE TABLE users;</pre> </td>\n<td> <pre data-language=\"\">r.table(\"users\").delete()</pre> </td>\n</tr> <tr>\n<td> <pre data-language=\"\">DROP TABLE users;</pre> </td>\n<td> <pre data-language=\"\">r.tableDrop(\"users\")</pre> </td>\n</tr> </tbody> </table> <h2 id=\"read-more\">Read More</h2> <p>Browse the following resources to learn more about ReQL:</p> <ul> <li><a href=\"https://rethinkdb.com/blog/lambda-functions/\">Lambda functions in RethinkDB</a></li> <li><a href=\"../../map-reduce/index\">Introduction to map-reduce</a></li> <li><a href=\"../../table-joins/index\">Introduction to Joins</a></li> <li><a href=\"../../../api/java/index\">API Reference</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/sql-to-reql/java/\" class=\"_attribution-link\">https://rethinkdb.com/docs/sql-to-reql/java/</a>\n  </p>\n</div>\n","docs/guide/java/index":"<h1 class=\"title\">Ten-minute guide with RethinkDB and Java</h1>    <blockquote class=\"infobox \">\n<p><strong>Before you start:</strong></p> <ul> <li>Make sure you’ve <a href=\"https://rethinkdb.com/install\">installed RethinkDB</a>—it should only take a minute!</li> <li>Make also sure you’ve <a href=\"https://rethinkdb.com/docs/install-drivers/java/\">installed the Java driver</a>.</li> <li>Read the <a href=\"../../quickstart/index\">thirty-second quickstart</a>.</li> </ul> </blockquote> <p><img src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/10-minute-guide_javascript.png\" class=\"api_command_illustration\"></p> <h2 id=\"start-the-server\">Start the server</h2> <p>For a more detailed look, make sure to read the <a href=\"../../quickstart/index\">quickstart</a>.</p> <h3 id=\"linux-and-os-x\">Linux and OS X</h3> <p>Start the server from a terminal window.</p> <pre data-language=\"\">$ rethinkdb\n</pre>  <h3 id=\"windows\">Windows</h3> <p>Start the server from the Windows command prompt.</p> <pre data-language=\"\">C:\\Users\\Slava\\RethinkDB\\&gt;rethinkdb.exe\n</pre>  <h2 id=\"import-the-driver\">Import the driver</h2> <p>You can use the drivers from Java like this:</p> <pre data-language=\"\">import com.rethinkdb.RethinkDB;\nimport com.rethinkdb.gen.exc.ReqlError;\nimport com.rethinkdb.gen.exc.ReqlQueryLogicError;\nimport com.rethinkdb.model.MapObject;\nimport com.rethinkdb.net.Connection;\n\npublic static final RethinkDB r = RethinkDB.r;\n</pre>  <p>You can now access RethinkDB commands through the <code class=\"highlighter-rouge\">r</code> class.</p> <h2 id=\"open-a-connection\">Open a connection</h2> <p>When you first start RethinkDB, the server opens a port for the client drivers (<code class=\"highlighter-rouge\">28015</code> by default). Let’s open a connection:</p> <pre data-language=\"\">Connection conn = r.connection().hostname(\"localhost\").port(28015).connect();\n</pre>  <p>The variable <code class=\"highlighter-rouge\">conn</code> is now initialized and we can run queries.</p> <h2 id=\"create-a-new-table\">Create a new table</h2> <p>By default, RethinkDB creates a database <code class=\"highlighter-rouge\">test</code>. Let’s create a table <code class=\"highlighter-rouge\">authors</code> within this database:</p> <pre data-language=\"\">r.db(\"test\").tableCreate(\"authors\").run(conn);\n</pre>  <p>The result will be (in JSON):</p> <pre data-language=\"\">{\n    \"config_changes\": [\n        &lt;table configuration data&gt;\n    ],\n    \"tables_created\": 1\n}\n</pre>  <p>(The <code class=\"highlighter-rouge\">config_changes</code> field contains metadata about the newly created table; for more details, read about the <a href=\"../../../api/java/table_create/index\">tableCreate</a> command.) There are a couple of things you should note about this query:</p> <ul> <li>First, we select the database <code class=\"highlighter-rouge\">test</code> with the <code class=\"highlighter-rouge\">db</code> command.</li> <li>Then, we add the <code class=\"highlighter-rouge\">tableCreate</code> command to create the actual table.</li> <li>Lastly, we call <code class=\"highlighter-rouge\">run(conn)</code> in order to send the query to the server.</li> </ul> <p>All ReQL queries follow this general structure. Now that we’ve created a table, let’s insert some data!</p> <h2 id=\"insert-data\">Insert data</h2> <p>Let’s insert three new documents into the <code class=\"highlighter-rouge\">authors</code> table:</p> <pre data-language=\"\">r.table(\"authors\").insert(r.array(\n    r.hashMap(\"name\", \"William Adama\")\n     .with(\"tv_show\", \"Battlestar Galactica\")\n     .with(\"posts\", r.array(\n        r.hashMap(\"title\", \"Decommissioning speech\")\n         .with(\"content\", \"The Cylon War is long over...\"),\n        r.hashMap(\"title\", \"We are at war\")\n         .with(\"content\", \"Moments ago, this ship received...\"),\n        r.hashMap(\"title\", \"The new Earth\")\n         .with(\"content\", \"The discoveries of the past few days...\")\n        )\n    ),\n    r.hashMap(\"name\", \"Laura Roslin\")\n     .with(\"tv_show\", \"Battlestar Galactica\")\n     .with(\"posts\", r.array(\n        r.hashMap(\"title\", \"The oath of office\")\n         .with(\"content\", \"I, Laura Roslin, ...\"),\n        r.hashMap(\"title\", \"They look like us\")\n         .with(\"content\", \"The Cylons have the ability...\")\n        )\n    ),\n    r.hashMap(\"name\", \"Jean-Luc Picard\")\n     .with(\"tv_show\", \"Star Trek TNG\")\n     .with(\"posts\", r.array(\n        r.hashMap(\"title\", \"Civil rights\")\n         .with(\"content\", \"There are some words I've known since...\")\n        )\n    )\n)).run(conn);\n</pre>  <p>We should get back an object that looks like this:</p> <pre data-language=\"\">{\n    \"unchanged\": 0,\n    \"skipped\": 0,\n    \"replaced\": 0,\n    \"inserted\": 3,\n    \"generated_keys\": [\n        \"7644aaf2-9928-4231-aa68-4e65e31bf219\",\n        \"064058b6-cea9-4117-b92d-c911027a725a\",\n        \"543ad9c8-1744-4001-bb5e-450b2565d02c\"\n    ],\n    \"errors\": 0,\n    \"deleted\": 0\n}\n</pre>  <p>The server should return an object with zero errors and three inserted documents. We didn’t specify any primary keys (by default, each table uses the <code class=\"highlighter-rouge\">id</code> attribute for primary keys), so RethinkDB generated them for us. The generated keys are returned via the <code class=\"highlighter-rouge\">generated_keys</code> attribute.</p> <p>There are a couple of things to note about this query:</p> <ul> <li>Each connection sets a default database to use during its lifetime (if you don’t specify one in <code class=\"highlighter-rouge\">connect</code>, the default database is set to <code class=\"highlighter-rouge\">test</code>). This way we can omit the <code class=\"highlighter-rouge\">db('test')</code> command in our query. We won’t specify the database explicitly from now on, but if you want to prepend your queries with the <code class=\"highlighter-rouge\">db</code> command, it won’t hurt.</li> <li>The <code class=\"highlighter-rouge\">insert</code> command accepts a single document or an array of documents if you want to batch inserts. We use an array in this query instead of running three separate <code class=\"highlighter-rouge\">insert</code> commands for each document.</li> </ul> <h2 id=\"retrieve-documents\">Retrieve documents</h2> <p>Now that we inserted some data, let’s see how we can query the database!</p> <h3 id=\"all-documents-in-a-table\">All documents in a table</h3> <p>To retrieve all documents from the table <code class=\"highlighter-rouge\">authors</code>, we can simply run the query <code class=\"highlighter-rouge\">r.table(\"authors\")</code>:</p> <pre data-language=\"\">Cursor cursor = r.table(\"authors\").run(conn);\nfor (Object doc : cursor) {\n    System.out.println(doc);\n}\n</pre>  <p>The result is an array of the three previously inserted documents, along with the generated <code class=\"highlighter-rouge\">id</code> values.</p> <p>Since the table might contain a large number of documents, the database returns a cursor object. As you iterate through the cursor, the server will send documents to the client in batches as they are requested. We only have three documents in our example, so we can safely retrieve all the documents at once. The <code class=\"highlighter-rouge\">toList</code> function automatically iterates through the cursor and puts the documents into a Java list.</p> <h3 id=\"filter-documents-based-on-a-condition\">Filter documents based on a condition</h3> <p>Let’s try to retrieve the document where the <code class=\"highlighter-rouge\">name</code> attribute is set to <code class=\"highlighter-rouge\">William Adama</code>. We can use a condition to filter the documents by chaining a <code class=\"highlighter-rouge\">filter</code> command to the end of the query:</p> <pre data-language=\"\">Cursor cursor = r.table(\"authors\").filter(row -&gt; row.g(\"name\").eq(\"William Adama\")).run(conn);\nfor (Object doc : cursor) {\n    System.out.println(doc);\n}\n</pre>  <p>This query returns a cursor with one document—the record for William Adama. The <code class=\"highlighter-rouge\">filter</code> command evaluates the provided condition for every row in the table, and returns only the relevant rows. Here’s the new commands we used to construct the condition above:</p> <ul> <li>\n<code class=\"highlighter-rouge\">row</code> refers to the currently visited document.</li> <li>\n<code class=\"highlighter-rouge\">row.g(\"name\")</code> refers to the value of the field <code class=\"highlighter-rouge\">name</code> of the visited document.</li> <li>The <code class=\"highlighter-rouge\">eq</code> command returns <code class=\"highlighter-rouge\">true</code> if two values are equal (in this case, the field <code class=\"highlighter-rouge\">name</code> and the string <code class=\"highlighter-rouge\">William Adama</code>).</li> </ul> <p>Let’s use <code class=\"highlighter-rouge\">filter</code> again to retrieve all authors who have more than two posts:</p> <pre data-language=\"\">Cursor cursor = r.table(\"authors\").filter(row -&gt; row.g(\"posts\").count().gt(2)).run(conn);\nfor (Object doc : cursor) {\n    System.out.println(doc);\n}\n</pre>  <p>In this case, we’re using a predicate that returns <code class=\"highlighter-rouge\">true</code> only if the length of the array in the field <code class=\"highlighter-rouge\">posts</code> is greater than two. This predicate contains two commands we haven’t seen before:</p> <ul> <li>The <code class=\"highlighter-rouge\">count</code> command returns the size of the array.</li> <li>The <code class=\"highlighter-rouge\">gt</code> command returns <code class=\"highlighter-rouge\">true</code> if a value is greater than the specified value (in this case, if the number of posts is greater than two).</li> </ul> <h3 id=\"retrieve-documents-by-primary-key\">Retrieve documents by primary key</h3> <p>We can also efficiently retrieve documents by their primary key using the <code class=\"highlighter-rouge\">get</code> command. We can use one of the ids generated in the previous example:</p> <pre data-language=\"\">r.db(\"test\").table(\"authors\").get(\"7644aaf2-9928-4231-aa68-4e65e31bf219\").run(conn);\n</pre>  <p>Since primary keys are unique, the <code class=\"highlighter-rouge\">get</code> command returns a single document. This way we can retrieve the document directly without converting a cursor to an array.</p> <blockquote class=\"infobox \">\n<p>Learn more about how RethinkDB can efficiently retrieve documents with <a href=\"../../secondary-indexes/java/index\">secondary indexes</a>.</p> </blockquote> <h2 id=\"realtime-feeds\">Realtime feeds</h2> <blockquote class=\"infobox \">\n<p>Feel free to skip this section if you don’t want to learn about realtime feeds yet. You can always go back and start a feed later.</p> </blockquote> <p>RethinkDB inverts the traditional database architecture by exposing an exciting new access model – instead of polling for changes, the developer can tell RethinkDB to continuously push updated query results to applications in realtime.</p> <p>To start a feed, compile and run the following query in a terminal window:</p> <pre data-language=\"\">import com.rethinkdb.RethinkDB;\nimport com.rethinkdb.net.Connection;\nimport com.rethinkdb.net.Cursor;\n\npublic static final RethinkDB r = RethinkDB.r;\n\nConnection conn = r.connection().hostname(\"localhost\").port(28015).connect();\n\nCursor cursor = r.table(\"authors\").changes().run(conn);\nfor (Object doc : cursor) {\n    System.out.println(doc);\n}\n</pre>  <p>The code above will start with the following messages:</p> <pre data-language=\"\">{\n  \"new_val\": {\n    \"id\": \"1d854219-85c6-4e6c-8259-dbda0ab386d4\",\n    \"name\": \"Laura Roslin\",\n    \"posts\": [...],\n    \"tv_show\": \"Battlestar Galactica\",\n    \"type\": \"fictional\"\n  },\n  \"old_val\": {\n    \"id\": \"1d854219-85c6-4e6c-8259-dbda0ab386d4\",\n    \"name\": \"Laura Roslin\",\n    \"posts\": [...],\n    \"tv_show\": \"Battlestar Galactica\"\n  }\n}\n</pre>  <p>RethinkDB will notify your program of all changes in the <code class=\"highlighter-rouge\">authors</code> table and will include the old value and the new value of each modified document. See the <a href=\"../../changefeeds/java/index\">changefeeds</a> documentation entry for more details on how to use realtime feeds in RethinkDB.</p> <p>We’ll be updating and deleting some documents in the next two sections. To do this in realtime, we’re going to use JavaScript in the <a href=\"../../reql-data-exploration/index\">Data Explorer</a>. Open the RethinkDB Administration Console in your web browser and click “Data Explorer.”</p> <h2 id=\"update-documents\">Update documents</h2> <p>Let’s update all documents in the <code class=\"highlighter-rouge\">authors</code> table and add a <code class=\"highlighter-rouge\">type</code> field to note that every author so far is fictional:</p> <pre data-language=\"\">r.table('authors').update({type: \"fictional\"})\n</pre>  <p>Since we changed three documents, the result should look like this:</p> <pre data-language=\"\">{\n    \"unchanged\": 0,\n    \"skipped\": 0,\n    \"replaced\": 3,\n    \"inserted\": 0,\n    \"errors\": 0,\n    \"deleted\":0\n}\n</pre>  <p>Note that we first selected every author in the table, and then chained the <code class=\"highlighter-rouge\">update</code> command to the end of the query. We could also update a subset of documents by filtering the table first. Let’s update William Adama’s record to note that he has the rank of Admiral:</p> <pre data-language=\"\">r.table('authors').filter(\n    r.row(\"name\").eq(\"William Adama\")\n).update({rank: \"Admiral\"})\n</pre>  <p>Since we only updated one document, we get back this object:</p> <pre data-language=\"\">{\n    \"unchanged\": 0,\n    \"skipped\": 0,\n    \"replaced\": 1,\n    \"inserted\": 0,\n    \"errors\": 0,\n    \"deleted\": 0\n}\n</pre>  <p>The <code class=\"highlighter-rouge\">update</code> command allows changing existing fields in the document, as well as values inside of arrays. Let’s suppose Star Trek archaeologists unearthed a new speech by Jean-Luc Picard that we’d like to add to his posts:</p> <pre data-language=\"\">r.table('authors').filter(\n    r.row(\"name\").eq(\"Jean-Luc Picard\")\n).update({\n    posts: r.row(\"posts\").append({\n        title: \"Shakespeare\",\n        content: \"What a piece of work is man...\"\n    })\n})\n</pre>  <p>After processing this query, RethinkDB will add an additional post to Jean-Luc Picard’s document.</p> <blockquote class=\"infobox \">\n<p>Browse the <a href=\"../../../api/java/index\">API reference</a> for many more array operations available in RethinkDB.</p> </blockquote> <h2 id=\"delete-documents\">Delete documents</h2> <p>Suppose we’d like to trim down our database and delete every document with less than three posts (sorry Laura and Jean-Luc):</p> <pre data-language=\"\">r.table('authors').filter(r.row('posts').count().lt(3)).delete()\n</pre>  <p>Since we have two authors with less than two posts, the result is:</p> <pre data-language=\"\">{\n    \"unchanged\": 0,\n    \"skipped\": 0,\n    \"replaced\": 0,\n    \"inserted\": 0,\n    \"errors\": 0,\n    \"deleted\": 2\n}\n</pre>  <h2 id=\"learn-more\">Learn more</h2> <blockquote class=\"infobox \">\n<p><strong>Want to keep learning?</strong> Dive into the documentation:</p> <ul> <li>Read the <a href=\"../../introduction-to-reql/index\">introduction to RQL</a> to learn about the ReQL concepts in more depth.</li> <li>Learn how to use <a href=\"../../map-reduce/index\">map-reduce</a> in RethinkDB.</li> <li>Learn how to use <a href=\"../../table-joins/index\">table joins</a> in RethinkDB.</li> <li>Jump into the <a href=\"../../cookbook/java/index\">cookbook</a> and browse through dozens of examples of common RethinkDB queries.</li> </ul> </blockquote><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/guide/java/\" class=\"_attribution-link\">https://rethinkdb.com/docs/guide/java/</a>\n  </p>\n</div>\n","docs/introduction-to-reql/index":"<h1 class=\"title\">Introduction to ReQL</h1> <p>ReQL is the RethinkDB query language. It offers a very powerful and convenient way to manipulate JSON documents. This document is a gentle introduction to ReQL concepts. You don’t have to read it to be productive with RethinkDB, but it helps to understand some basics.</p> <blockquote class=\"infobox \">\n<p><strong>Want to write useful queries right away?</strong> Check out the <a href=\"../guide/java/index\">ten-minute guide</a>.</p> </blockquote> <div class=\"toc\">  <ul id=\"markdown-toc\"> <li><a href=\"#reql-embeds-into-your-programming-language\" id=\"markdown-toc-reql-embeds-into-your-programming-language\">ReQL embeds into your programming language</a></li> <li><a href=\"#all-reql-queries-are-chainable\" id=\"markdown-toc-all-reql-queries-are-chainable\">All ReQL queries are chainable</a></li> <li><a href=\"#reql-is-efficient\" id=\"markdown-toc-reql-is-efficient\">ReQL is efficient</a></li> <li><a href=\"#reql-queries-are-functional\" id=\"markdown-toc-reql-queries-are-functional\">ReQL queries are functional</a></li> <li><a href=\"#reql-queries-are-composable\" id=\"markdown-toc-reql-queries-are-composable\">ReQL queries are composable</a></li> <li><a href=\"#and-just-for-kicks-reql-can-do-math\" id=\"markdown-toc-and-just-for-kicks-reql-can-do-math\">And just for kicks, ReQL can do math!</a></li> <li><a href=\"#read-more\" id=\"markdown-toc-read-more\">Read More</a></li> </ul> </div> <p><img src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/introduction_to_reql.png\" class=\"api_command_illustration\"></p> <p>ReQL is different from other NoSQL query languages. It’s built on three key principles:</p> <ol> <li>\n<strong>ReQL embeds into your programming language.</strong> Queries are constructed by making function calls in the programming language you already know. You don’t have to concatenate strings or construct specialized JSON objects to query the database.</li> <li>\n<strong>All ReQL queries are chainable</strong>. You begin with a table and incrementally chain transformers to the end of the query using the <code class=\"highlighter-rouge\">.</code> operator.</li> <li>\n<strong>All queries execute on the server</strong>. While queries are constructed on the client in a familiar programming language, they execute entirely on the database server once you call the <code class=\"highlighter-rouge\">run</code> command and pass it an active database connection.</li> </ol> <p>Let’s look at these concepts in more detail.</p> <blockquote class=\"infobox \">\n<p><strong>Note:</strong> the following examples use the Python driver, but most of them also apply to RethinkDB drivers for other languages.</p> </blockquote> <h2 id=\"reql-embeds-into-your-programming-language\">ReQL embeds into your programming language</h2> <p>You start using ReQL in your program similarly to how you’d use other databases:</p> <pre data-language=\"\">import rethinkdb as r  # import the RethinkDB package\nconn = r.connect()       # connect to the server on localhost and default port\n</pre>  <p>But this is where the similarity ends. Instead of constructing strings and passing them to the database server, you access ReQL by using methods from the <code class=\"highlighter-rouge\">rethinkdb</code> package:</p> <pre data-language=\"\">r.table_create('users').run(conn)   # create a table `users`\nr.table('users').run(conn)          # get an iterable cursor to the `users` table\n</pre>  <p>Every ReQL query, from filters, to updates, to table joins is done by calling appropriate methods.</p> <blockquote class=\"infobox \">\n<p><strong>This design has the following advantages:</strong></p> <ul> <li>You can use the same programming environment and tools you’re already used to.</li> <li>Learning the language is no different from learning any other library.</li> <li>There is little to no chance of security issues that arise from string injection attacks.</li> </ul> </blockquote> <h2 id=\"all-reql-queries-are-chainable\">All ReQL queries are chainable</h2> <p>In ReQL, you can chain commands at the end of other commands using the <code class=\"highlighter-rouge\">.</code> operator:</p> <pre data-language=\"\"># Get an iterable cursor to the `users` table (we've seen this above)\nr.table('users').run(conn)\n\n# Return only the `last_name` field of the documents\nr.table('users').pluck('last_name').run(conn)\n\n# Get all the distinct last names (remove duplicates)\nr.table('users').pluck('last_name').distinct().run(conn)\n\n# Count the number of distinct last names\nr.table('users').pluck('last_name').distinct().count().run(conn)\n</pre>  <p>Almost all ReQL operations are chainable. You can think of the <code class=\"highlighter-rouge\">.</code> operator similarly to how you’d think of a Unix pipe. You select the data from the table and pipe it into a command that transforms it. You can continue chaining transformers until your query is done. In ReQL, data flows from left to right.</p> <p>Even if you have a cluster of RethinkDB nodes, you can send your queries to any node and the cluster will create and execute distributed programs that get the data from relevant nodes, perform the necessary computations, and present you with final results without you ever worrying about it.</p> <blockquote class=\"infobox \">\n<p><strong>This design has the following advantages:</strong></p> <ul> <li>The language is easy to learn, read, and modify.</li> <li>It’s a natural and convenient way to express queries.</li> <li>You can construct queries incrementally by chaining transformations and examining intermediary results.</li> </ul> </blockquote> <h2 id=\"reql-is-efficient\">ReQL is efficient</h2> <h3 id=\"server-side-execution\">Server-side execution</h3> <p>While queries are built up on the client, they’re only sent to the server once you call the <code class=\"highlighter-rouge\">run</code> command. All processing happens on the server—the queries don’t run on the client, and don’t require intermediary network round trips between the client and the server. For example, you can store queries in variables, and send them to the server later:</p> <pre data-language=\"\"># Create the query to get distinct last names\ndistinct_lastnames_query = r.table('users').pluck('last_name').distinct()\n\n# Send it to the server and execute\ndistinct_lastnames_query.run(conn)\n</pre>  <blockquote class=\"infobox \">\n<p>Read about <a href=\"https://rethinkdb.com/blog/lambda-functions/\">how this technology is implemented</a> for more details.</p> </blockquote> <h3 id=\"laziness\">Laziness</h3> <p>ReQL queries are executed lazily:</p> <pre data-language=\"\"># Get up to five user documents that have the `age` field defined\nr.table('users').has_fields('age').limit(5).run(conn)\n</pre>  <p>For this query RethinkDB will perform enough work to get the five documents, and stop when the query is satisfied. Even if you don’t have a limit on the number of queries but use a cursor, RethinkDB will do just enough work to allow you to read the data you request. This allows queries to execute quickly without wasting CPU cycles, network bandwidth, and disk IO.</p> <p>Like most database systems, ReQL supports primary and secondary indexes to allow efficient data access. You can also create compound indexes and indexes based on arbitrary ReQL expressions to speed up complex queries.</p> <blockquote class=\"infobox \">\n<p>Learn how to use <a href=\"../secondary-indexes/java/index\">primary and secondary indexes</a> in RethinkDB.</p> </blockquote> <h3 id=\"parallelism\">Parallelism</h3> <p>All ReQL queries are automatically parallelized on the RethinkDB server as much as possible. Whenever possible, query execution is split across CPU cores, servers in the cluster, and even multiple datacenters. If you have large, complicated queries that require multiple stages of processing, RethinkDB will automatically break them up into stages, execute each stage in parallel, and combine data to return a complete result.</p> <h3 id=\"query-optimization\">Query optimization</h3> <p>While RethinkDB doesn’t currently have a fully-featured query optimizer, ReQL is designed with one in mind. For example, the server has enough information to reorder the chain for efficiency, or to use alternative implementation plans to improve performance. This feature will be introduced into future versions of RethinkDB.</p> <h2 id=\"reql-queries-are-functional\">ReQL queries are functional</h2> <p>So far we’ve seen only simple queries without conditions. ReQL supports a familiar syntax for building more advanced queries:</p> <pre data-language=\"\"># Get all users older than 30\nr.table('users').filter(lambda user: user['age'] &gt; 30).run(conn)\n\n# If you'd like to avoid writing lambdas, RethinkDB supports an\n# alternative syntax:\nr.table('users').filter(r.row['age'] &gt; 30).run(conn)\n</pre>  <p>This query looks just like any other Python code you would normally write. Note that RethinkDB will execute this query on the server, and it doesn’t execute native Python code.</p> <p>The client drivers do a lot of work to inspect the code and convert it to an efficient ReQL query that will be executed on the server:</p> <ul> <li>Whenever possible, the client drivers use operator overloading to support expressions such as <code class=\"highlighter-rouge\">user['age'] &gt; 30</code>.</li> <li>The <code class=\"highlighter-rouge\">lambda</code> expression is executed only once on the client. Internally, the driver passes a special object to the <code class=\"highlighter-rouge\">lambda</code> function which allows constructing a representation of the query. This representation is then sent to the server over the network and evaluated on the cluster.</li> </ul> <blockquote class=\"infobox \">\n<p>Read about <a href=\"https://rethinkdb.com/blog/lambda-functions/\">how this technology is implemented</a> for more details.</p> </blockquote> <p>This technology has limitations. While most operations allow you to write familiar code, you can’t use native language’s operations that have side effects (such as <code class=\"highlighter-rouge\">print</code>) or control blocks (such as <code class=\"highlighter-rouge\">if</code> and <code class=\"highlighter-rouge\">for</code>). Instead, you have to use alternative ReQL commands:</p> <pre data-language=\"\"># WRONG: Get all users older than 30 using the `if` statement\nr.table('users').filter(lambda user:\n    True if user['age'] &gt; 30 else False).run(conn)\n\n# RIGHT: Get all users older than 30 using the `r.branch` command\nr.table('users').filter(lambda user:\n    r.branch(user['age'] &gt; 30, True, False)).run(conn)\n</pre>  <blockquote class=\"infobox \">\n<p><strong>This design has the following advantages:</strong></p> <ul> <li>For most queries, you can write familiar, easy to learn code without learning special commands.</li> <li>The queries are efficiently transported to the server (via protocol buffers), and evaluated in the cluster.</li> <li>RethinkDB has access to the query structure, which allows for optimization techniques similar to those available in SQL. This feature will be added to RethinkDB in the future.</li> </ul> <p><strong>This technology has the following limitation:</strong></p> <ul> <li>Native language’s operations that have side effects or control blocks cannot be used within a <code class=\"highlighter-rouge\">lambda</code>. Learn more about <a href=\"https://rethinkdb.com/blog/lambda-functions/\">how this design is implemented</a> for details.</li> </ul> </blockquote> <h2 id=\"reql-queries-are-composable\">ReQL queries are composable</h2> <p>You can combine multiple ReQL queries to build more complex ones.</p> <h3 id=\"composing-simple-commands\">Composing simple commands</h3> <p>Let’s start with a simple example. RethinkDB supports server-side JavaScript evaluation using the embedded V8 engine (sandboxed within outside processes, of course):</p> <pre data-language=\"\"># Evaluate a JavaScript expression on the server and get the result\nr.js('1 + 1').run(conn)\n</pre>  <p>Because ReQL is composable you can combine the <code class=\"highlighter-rouge\">r.js</code> command with any other query. For example, let’s use it as an alternative to get all users older than 30:</p> <pre data-language=\"\"># Get all users older than 30 (we've seen this above)\nr.table('users').filter(lambda user: user['age'] &gt; 30).run(conn)\n\n# Get all users older than 30 using server-side JavaScript\nr.table('users').filter(r.js('(function (user) { return user.age &gt; 30; })')).run(conn)\n</pre>  <p>RethinkDB will seamlessly evaluate the <code class=\"highlighter-rouge\">js</code> command by calling into the V8 engine during the evaluation of the <code class=\"highlighter-rouge\">filter</code> query. You can combine most queries this way into progressively more complex ones.</p> <h3 id=\"subqueries\">Subqueries</h3> <p>Let’s say we have another table <code class=\"highlighter-rouge\">authors</code>, and we’d like to get a list of authors whose last names are also in the <code class=\"highlighter-rouge\">users</code> table we’ve seen before. We can do it by combining two queries:</p> <pre data-language=\"\"># Find all authors whose last names are also in the `users` table\nr.table('authors').filter(lambda author:\n    r.table('users').pluck('last_name').contains(author.pluck('last_name'))).\n    run(conn)\n</pre>  <p>Here, we use the <code class=\"highlighter-rouge\">r.table('users').pluck('last_name')</code> query as the inner query in <code class=\"highlighter-rouge\">filter</code>, combining the two queries to build a more sophisticated one. Even if you have a cluster of servers and both the <code class=\"highlighter-rouge\">authors</code> table and the <code class=\"highlighter-rouge\">users</code> table are sharded, RethinkDB will do the right thing and evaluate relevant parts of the query above on the appropriate shards, combine bits of data as necessary, and return the complete result.</p> <blockquote class=\"infobox \">\n<p><strong>A few things to note about this query:</strong></p> <ul> <li>We compose the query on the client and call <code class=\"highlighter-rouge\">run</code> only once. Remember to call <code class=\"highlighter-rouge\">run</code> only once on the complex query when you’re ready for it to be executed.</li> <li>You can also perform this query using the <a href=\"https://rethinkdb.com/api/python/inner_join/\">inner_join</a> command.</li> </ul> </blockquote> <h3 id=\"expressions\">Expressions</h3> <p>Composing queries isn’t limited to simple commands and inner queries. You can also use expressions to perform complex operations. For example, suppose we’d like to find all users whose salary and bonus don’t exceed $90,000, and increase their salary by 10%:</p> <pre data-language=\"\">r.table('users').filter(lambda user: user['salary'] + user['bonus'] &lt; 90000)\n .update(lambda user: {'salary': user['salary'] + user['salary'] * 0.1})\n</pre>  <h3 id=\"rich-command-set\">Rich command-set</h3> <p>In addition to commands described here, ReQL supports a number of sophisticated commands that are composable similarly to the commands described here. See the following documentation for more details:</p> <ul> <li>Learn how to use <a href=\"../map-reduce/index\">map-reduce</a> in RethinkDB.</li> <li>Learn how to use <a href=\"../table-joins/index\">table joins</a> in RethinkDB.</li> <li>Browse the <a href=\"https://rethinkdb.com/api\">API reference</a> for more commands.</li> </ul> <blockquote class=\"infobox \">\n<p><strong>This design has the following advantages:</strong></p> <ul> <li>Unlike most NoSQL languages, you can use ReQL to build queries of arbitrary complexity.</li> <li>There is no new syntax or new commands for complex queries. Once you understand the composition principle you can write new queries without learning anything else.</li> <li>Subqueries can be abstracted in variables, which allows for modular programming in the same way as done by most other modern programming languages.</li> </ul> </blockquote> <h2 id=\"and-just-for-kicks-reql-can-do-math\">And just for kicks, ReQL can do math!</h2> <p>Just in case you needed another calculator, ReQL can do that too!</p> <pre data-language=\"\"># Add two plus two\n(r.expr(2) + r.expr(2)).run(conn)\n\n# You only need to specify `r.expr` once for the driver to work\n(r.expr(2) + 2).run(conn)\n\n# More algebra\n(r.expr(2) + 2 / 2).run(conn)\n\n# Logic\n(r.expr(2) &gt; 3).run(conn)\n\n# Branches\nr.branch(r.expr(2) &gt; 3,\n         1,  # if True, return 1\n         2   # otherwise, return 2\n  ).run(conn)\n\n# Compute the Fibonacci sequence\nr.table_create('fib').run(conn)\nr.table('fib').insert([{'id': 0, 'value': 0}, {'id': 1, 'value': 1}]).run(conn)\nr.expr([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]).for_each(lambda x:\n  r.table('fib').insert({'id': x,\n                         'value': (r.table('fib').order_by('id').nth(x - 1)['value'] +\n                                   r.table('fib').order_by('id').nth(x - 2)['value'])\n                        })).run(conn)\nr.table('fib').order_by('id')['value'].run(conn)\n</pre>  <h2 id=\"read-more\">Read More</h2> <p>Browse the following resources to learn more about ReQL:</p> <ul> <li><a href=\"https://rethinkdb.com/blog/lambda-functions/\">Lambda functions in RethinkDB</a></li> <li><a href=\"../map-reduce/index\">Introduction to map-reduce</a></li> <li><a href=\"../table-joins/index\">Introduction to Joins</a></li> <li><a href=\"../../api/java/index\">API Reference</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/introduction-to-reql/\" class=\"_attribution-link\">https://rethinkdb.com/docs/introduction-to-reql/</a>\n  </p>\n</div>\n","docs/secondary-indexes/java/index":"<h1 class=\"title\">Using secondary indexes in RethinkDB</h1>    <p>Secondary indexes are data structures that improve the speed of many read queries at the slight cost of increased storage space and decreased write performance.</p> <p>RethinkDB supports different types of secondary indexes:</p> <ul> <li>\n<strong>Simple indexes</strong> based on the value of a single field.</li> <li>\n<strong>Compound indexes</strong> based on multiple fields.</li> <li>\n<strong>Multi indexes</strong> based on arrays of values.</li> <li>Indexes based on <strong>arbitrary expressions</strong>.</li> </ul> <div class=\"toc\">  <ul id=\"markdown-toc\"> <li><a href=\"#simple-indexes\" id=\"markdown-toc-simple-indexes\">Simple indexes</a></li> <li><a href=\"#compound-indexes\" id=\"markdown-toc-compound-indexes\">Compound indexes</a></li> <li><a href=\"#multi-indexes\" id=\"markdown-toc-multi-indexes\">Multi indexes</a></li> <li><a href=\"#indexes-on-arbitrary-reql-expressions\" id=\"markdown-toc-indexes-on-arbitrary-reql-expressions\">Indexes on arbitrary ReQL expressions</a></li> <li><a href=\"#notes\" id=\"markdown-toc-notes\">Notes</a></li> <li><a href=\"#more\" id=\"markdown-toc-more\">More</a></li> </ul> </div> <p><img src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/secondary-indexes.png\" alt=\"Secondary Indexes Illustration\" class=\"api_command_illustration\"></p> <h2 id=\"simple-indexes\">Simple indexes</h2> <p>Use simple indexes to efficiently retrieve and order documents by the value of a single field.</p> <h3 id=\"creation\">Creation</h3> <pre data-language=\"\">// Create a secondary index on the last_name attribute\nr.table(\"users\").indexCreate(\"last_name\").run(conn);\n\n// Wait for the index to be ready to use\nr.table(\"users\").indexWait(\"last_name\").run(conn);\n</pre>  <h3 id=\"querying\">Querying</h3> <pre data-language=\"\">// Get all users whose last name is \"Smith\"\nr.table(\"users\").getAll(\"Smith\").optArg(\"index\", \"last_name\").run(conn);\n\n// Get all users whose last names are \"Smith\" or \"Lewis\"\nr.table(\"users\").getAll(\"Smith\", \"Lewis\").optArg(\"index\", \"last_name\").run(conn);\n\n// Get all users whose last names are between \"Smith\" and \"Wade\"\nr.table(\"users\").between(\"Smith\", \"Wade\").optArg(\"index\", \"last_name\").run(conn);\n\n// Efficiently order users by last name using an index\nr.table(\"users\").orderBy().optArg(\"index\", \"last_name\").run(conn);\n\n// For each blog post, return the post and its author using the last_name index\nr.table(\"posts\").eqJoin(\"author_last_name\", r.table(\"users\")).optArg(\"index\", \"last_name\").zip().run(conn);\n</pre>  <blockquote class=\"infobox \">\n<p><strong>Want to learn more about joins in RethinkDB?</strong> See <a href=\"../../table-joins/index\">how to use joins</a> to query <em>one to many</em> and <em>many to many</em> relations.</p> </blockquote> <h2 id=\"compound-indexes\">Compound indexes</h2> <p>Compound indexes use arrays to efficiently retrieve documents by multiple fields.</p> <h3 id=\"creation-1\">Creation</h3> <pre data-language=\"\">// Create a compound secondary index based on the first_name and last_name attributes\nr.table(\"users\").indexCreate(\"full_name\",\n    row -&gt; r.array(row.g(\"last_name\"), row.g(\"first_name\"))\n).run(conn);\n\n// Wait for the index to be ready to use\nr.table(\"users\").indexWait(\"full_name\").run(conn);\n</pre>  <h3 id=\"querying-1\">Querying</h3> <pre data-language=\"\">// Get all users whose full name is John Smith.\nr.table(\"users\").getAll(r.array(\"Smith\", \"John\"))\n .optArg(\"index\", \"full_name\").run(conn);\n\n// Get all users whose full name is between \"John Smith\" and \"Wade Welles\"\nr.table(\"users\").between(\n    r.array(\"Smith\", \"John\"), r.array(\"Welles\", \"Wade\")\n).optArg(\"index\", \"full_name\").run(conn);\n\n// Get all users whose last name is Smith.\nr.table(\"users\").between(\n    r.array(\"Smith\", r.minval()), r.array(\"Smith\", r.maxval())\n).optArg(\"index\", \"full_name\").run(conn);\n\n// Efficiently order users by first name and last name using an index\nr.table(\"users\").orderBy().optArg(\"index\", \"full_name\").run(conn);\n\n// For each blog post, return the post and its author using the full_name index\nr.table(\"posts\").eqJoin(\n    \"author_full_name\", r.table(\"users\")\n).optArg(\"index\", \"full_name\").run(conn);\n</pre>  <p>Internally, compound indexes and simple indexes are the same type of index in RethinkDB; compound indexes are simply a special case of regular index that returns an array rather than a single value.</p> <h2 id=\"multi-indexes\">Multi indexes</h2> <p>With simple and compound indexes, a document will be indexed using at most one index key: a single value for a simple index and a set of values for a compound index. Multiple documents may have the same index key. With a <em>multi index</em>, a document can be indexed using more than one key in the same index. For instance, a blog post might have multiple tags, and each tag might refer to multiple blog posts.</p> <p>The keys in a multi index can be single values, compound values or even arbitrary expressions. (See the section below for more detail on indexes using functions.)</p> <h3 id=\"creation-2\">Creation</h3> <p>Suppose each post has a field <code class=\"highlighter-rouge\">tags</code> that maps to an array of tags. The schema of the table <code class=\"highlighter-rouge\">posts</code> would be something like:</p> <pre data-language=\"\">{\n    \"title\": \"...\",\n    \"content\": \"...\",\n    \"tags\": [ &lt;tag1&gt;, &lt;tag2&gt;, ... ]\n}\n\n</pre>  <pre data-language=\"\">// Create the multi index based on the field tags\nr.table(\"posts\").indexCreate(\"tags\").optArg(\"multi\", true).run(conn);\n\n// Wait for the index to be ready to use\nr.table(\"posts\").indexWait(\"tags\").run(conn);\n</pre>  <h3 id=\"querying-2\">Querying</h3> <pre data-language=\"\">// Get all posts with the tag \"travel\" (where the field tags contains \"travel\")\nr.table(\"posts\").getAll(\"travel\").optArg(\"index\", \"tags\").run(conn);\n\n// For each tag, return the tag and the posts that have such tag\nr.table(\"tags\").eqJoin(\"tag\", r.table(\"posts\"))\n .optArg(\"index\", \"tags\").run(conn);\n</pre>  <p>Note that queries with <code class=\"highlighter-rouge\">getAll</code> or <code class=\"highlighter-rouge\">between</code> may return the same document multiple times unless you use the <a href=\"../../../api/java/distinct/index\">distinct</a> command.</p> <h2 id=\"indexes-on-arbitrary-reql-expressions\">Indexes on arbitrary ReQL expressions</h2> <p>You can create an index on an arbitrary expression by passing an anonymous function to <code class=\"highlighter-rouge\">indexCreate</code>.</p> <pre data-language=\"\">// A different way to do a compound index\nr.table(\"users\").indexCreate(\"full_name2\",\n    user -&gt; r.add(user.g(\"last_name\"), \"_\", user.g(\"first_name\"))\n).run(conn);\n</pre>  <p>The function you give to <code class=\"highlighter-rouge\">indexCreate</code> must be deterministic. In practice this means that that you cannot use a function that contains a sub-query or the <code class=\"highlighter-rouge\">r.js</code> command.</p> <blockquote class=\"infobox \">\n<p>If the function passed to <code class=\"highlighter-rouge\">indexCreate</code> returns an error for a given document, that document will not be indexed. No error will be returned for those documents.</p> </blockquote> <h3 id=\"using-multi-indexes-and-arbitrary-expressions-together\">Using multi indexes and arbitrary expressions together</h3> <p>You can create a multi index on an arbitrary expression in similar fashion, by passing the multi option as the last parameter to <code class=\"highlighter-rouge\">indexCreate</code>.</p> <pre data-language=\"\">// Create a multi index on a ReQL expression\nr.table(\"users\").indexCreate(\"activities\",\n    row -&gt; row.g(\"hobbies\").add(row.g(\"sports\"))\n).optArg(\"multi\", true).run(conn);\n</pre>  <h3 id=\"use-a-multi-index-and-a-mapping-function-to-speed-getallcontains\">Use a multi index and a mapping function to speed getAll/contains</h3> <p>If your program frequently executes a <a href=\"../../../api/java/get_all/index\">getAll</a> followed by a <a href=\"../../../api/java/contains/index\">contains</a>, that operation can be made more efficient by creating a compound multi index using a mapping function on the field that contains the list.</p> <pre data-language=\"\">// Create the index\nr.table(\"users\").indexCreate(\"user_equipment\",\n    user -&gt; user.g(\"equipment\").map(\n        equipment -&gt; r.array(user.g(\"id\"), equipment)\n    )\n).optArg(\"multi\", true).run(conn);\n\n// Query equivalent to:\n// r.table(\"users\").getAll(1).filter(\n//     user -&gt; user.g(\"equipment\").contains(\"tent\")\n// ).run(conn);\nr.table(\"users\").getAll(r.array(1, \"tent\"))\n .optArg(\"index\", \"user_equipment\").distinct().run(conn);\n</pre>  <p>// Administrative operations #</p> <pre data-language=\"\">// list indexes on table \"users\"\nr.table(\"users\").indexList().run(conn);\n\n// drop index \"last_name\" on table \"users\"\nr.table(\"users\").indexDrop(\"last_name\").run(conn);\n\n// return the status of all indexes\nr.table(\"users\").indexStatus().run(conn);\n\n// return the status of the index \"last_name\"\nr.table(\"users\").indexStatus(\"last_name\").run(conn);\n\n// return only when the index \"last_name\" is ready\nr.table(\"users\").indexWait(\"last_name\").run(conn);\n</pre>  <h3 id=\"manipulating-indexes-with-the-web-ui\">Manipulating indexes with the web UI</h3> <p>The web UI supports creation and deletion of simple secondary indexes. In the table list, click on the table <code class=\"highlighter-rouge\">users</code>. You can manipulate indexes through the secondary index panel in the table view.</p> <div class=\"screenshots\"> <a href=\"https://rethinkdb.com/assets/images/docs/query-language/secondary-index-ui.png\"><img src=\"https://rethinkdb.com/assets/images/docs/query-language/secondary-index-ui.png\" style=\"width: 269px; height: 105px;\"></a> </div> <h2 id=\"notes\">Notes</h2> <p>The primary index of a table can be used in any ReQL command that uses a secondary index.</p> <p>Indexes (both secondary and primary) are guaranteed to be updated by successful write operations. If an <code class=\"highlighter-rouge\">insert</code>, <code class=\"highlighter-rouge\">update</code> or <code class=\"highlighter-rouge\">delete</code> operation is successful, the change will be correctly reflected in the index. (Read about RethinkDB <a href=\"../../consistency/index\">Consistency guarantees</a> for write operations.)</p> <p>The part of a secondary index key that’s used for fast lookups depends on the length of the primary key (which must be 127 bytes or less). The length of this part is 238−<em>PK</em>, where <em>PK</em> is the primary key length; if the primary key length is a 36-character GUID, for instance, this means that 202 characters in the secondary index will be significant. If a table has multiple entries where the first 238−<em>PK</em> characters are identical, lookup performance will be sharply degraded, as RethinkDB will have to perform a linear search to find the correct entries.</p> <p>Secondary indexes will not store <code class=\"highlighter-rouge\">null</code> values or objects. Thus, the results of a command such as:</p> <pre data-language=\"\">r.table(\"users\").indexCreate(\"group\").run(conn);\nr.table(\"users\").orderBy().optArg(\"index\", \"group\").run(conn);\n</pre>  <p>may be different from an equivalent command without an index:</p> <pre data-language=\"\">r.table(\"users\").orderBy(\"group\").run(conn);\n</pre>  <p>if the field being indexed has non-indexable values. This limitation will be removed in a future version of RethinkDB. See GitHub issue <a href=\"https://github.com/rethinkdb/rethinkdb/issues/1032\">#1032</a> to track progress on this.</p> <p>RethinkDB does not currently have an optimizer. As an example, the following query will not automatically use an index:</p> <pre data-language=\"\">// This query does not use a secondary index! Use getAll instead.\nr.table(\"users\").filter(r.hashMap(\"last_name\", \"Smith\")).run(conn);\n</pre>  <p>You have to explicitly use the <code class=\"highlighter-rouge\">getAll</code> command to take advantage of secondary indexes.</p> <pre data-language=\"\">// This query uses a secondary index.\nr.table(\"users\").getAll(\"Smith\").optArg(\"index\", \"last_name\").run(conn);\n</pre>  <p>You cannot chain multiple <code class=\"highlighter-rouge\">getAll</code> commands. Use a compound index to efficiently retrieve documents by multiple fields.</p> <p>An <code class=\"highlighter-rouge\">orderBy</code> command that uses a secondary index cannot be chained after <code class=\"highlighter-rouge\">getAll</code>. You can only chain it after a <code class=\"highlighter-rouge\">table</code> command. However, you can chain <code class=\"highlighter-rouge\">orderBy</code> after a <code class=\"highlighter-rouge\">between</code> command provided it uses the same index.</p> <p>RethinkDB does not support unique secondary indexes even for non-sharded tables.</p> <h2 id=\"more\">More</h2> <p>Browse the API reference to learn more about secondary index commands:</p> <ul> <li>Manipulating indexes: <a href=\"../../../api/java/index_create/index\">indexCreate</a>, <a href=\"../../../api/java/index_drop/index\">indexDrop</a> and <a href=\"../../../api/java/index_list/index\">indexList</a>\n</li> <li>Using indexes: <a href=\"../../../api/java/get_all/index\">getAll</a>, <a href=\"../../../api/java/between/index\">between</a>, <a href=\"../../../api/java/eq_join/index\">eqJoin</a> and <a href=\"../../../api/java/order_by/index\">orderBy</a>\n</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/secondary-indexes/java/\" class=\"_attribution-link\">https://rethinkdb.com/docs/secondary-indexes/java/</a>\n  </p>\n</div>\n","docs/external-api-access/index":"<h1 class=\"title\">External API access</h1> <blockquote class=\"infobox infobox-info\">\n<p><strong>Note:</strong> the following examples use the JavaScript driver. See the <a href=\"https://rethinkdb.com/api/javascript/http/\">r.http</a> command reference for documentation for other languages.</p> </blockquote> <div class=\"toc\">  <ul id=\"markdown-toc\"> <li><a href=\"#basic-usage\" id=\"markdown-toc-basic-usage\">Basic usage</a></li> <li><a href=\"#accessing-json-apis\" id=\"markdown-toc-accessing-json-apis\">Accessing JSON APIs</a></li> <li><a href=\"#storing-and-enriching-api-data\" id=\"markdown-toc-storing-and-enriching-api-data\">Storing and enriching API data</a></li> <li><a href=\"#pagination\" id=\"markdown-toc-pagination\">Pagination</a></li> <li><a href=\"#authentication\" id=\"markdown-toc-authentication\">Authentication</a></li> <li><a href=\"#read-more\" id=\"markdown-toc-read-more\">Read more</a></li> </ul> </div> <p>RethinkDB provides an <a href=\"https://rethinkdb.com/api/javascript/http/\">r.http</a> command for accessing external APIs directly from the database. Since many APIs accept and return JSON, RethinkDB is a convenient platform for manipulating and analyzing API data, both interactively and in running applications.</p> <h2 id=\"basic-usage\">Basic usage</h2> <p>Let’s try something very simple — accessing a website. Type the following command in the Data Explorer and hit ‘Run’ (alternatively, you can run it from a RethinkDB driver):</p> <pre data-language=\"\">r.http('www.google.com')\n</pre>  <p>The <code class=\"highlighter-rouge\">r.http</code> command will issue a request to <code class=\"highlighter-rouge\">www.google.com</code> directly from the database and return a string with the source of Google’s homepage.</p> <h2 id=\"accessing-json-apis\">Accessing JSON APIs</h2> <p>Now let’s access a real JSON API. In this example we’re going to use GitHub — a collaborative development platform that hosts thousands of open-source projects. Users on GitHub can indicate interest by starring projects and following other users. GitHub calls users who starred other projects “stargazers”.</p> <p>Let’s find the most influential GitHub users who showed interest in RethinkDB. First, let’s grab the list of RethinkDB stargazers:</p> <pre data-language=\"\">r.http('https://api.github.com/repos/rethinkdb/rethinkdb/stargazers')\n</pre>  <p>This query makes a call to GitHub and returns an array of JSON documents. RethinkDB natively operates on JSON, and what’s really convenient about <code class=\"highlighter-rouge\">r.http</code> is that its output is no different from any other query. You can use ReQL commands to perform operations on the output of <code class=\"highlighter-rouge\">r.http</code>, just like on a standard RethinkDB table!</p> <p>For example, let’s count the number of results returned by the API:</p> <pre data-language=\"\">r.http('https://api.github.com/repos/rethinkdb/rethinkdb/stargazers').count()\n</pre>  <p>Or, let’s pluck out usernames and IDs, and sort the array in ascending order by user IDs:</p> <pre data-language=\"\">r.http('https://api.github.com/repos/rethinkdb/rethinkdb/stargazers')\n .pluck('login', 'id').orderBy('id')\n</pre>  <p>You can chain as many ReQL commands as necessary to perform data manipulation tasks. Since ReQL is explicitly designed for JSON querying and modification, it’s also an excellent language for operating on web services!</p> <h2 id=\"storing-and-enriching-api-data\">Storing and enriching API data</h2> <p>Since you’ll be doing more manipulation on the data, you might want to store the results of an API call in the database. Let’s create a table <code class=\"highlighter-rouge\">stargazers</code> and insert the RethinkDB stargazers into this table:</p> <pre data-language=\"\">r.tableCreate('stargazers');\nr.table('stargazers').insert(\n  r.http('https://api.github.com/repos/rethinkdb/rethinkdb/stargazers'));\n</pre>  <p>Now we’d like to sort RethinkDB stargazers by influence. When you request stargazers from GitHub, the GitHub API doesn’t include the number of followers for each stargazer, but it does include a field <code class=\"highlighter-rouge\">url</code> specific to each stargazer. If you follow this URL, the GitHub API will return additional information for the user, including the number of their followers.</p> <p>Let’s update our stargazer data with this additional information:</p> <pre data-language=\"\">r.table('stargazers').update(r.http(r.row('url')), {nonAtomic: true})\n</pre>  <p>The update command will go through every row and issue an API request to the GitHub URL for the given user, grab the relevant data, and update the user information with that data!</p> <p>We can now sort the stargazers by the number of their followers!</p> <pre data-language=\"\">r.table('stargazers').orderBy(r.desc('followers'))\n</pre>  <h2 id=\"pagination\">Pagination</h2> <p>The calls above only return a few dozen stargazers while RethinkDB has thousands. Most APIs paginate large result sets and GitHub is no exception. The <code class=\"highlighter-rouge\">r.http</code> command has built-in support for pagination via the <code class=\"highlighter-rouge\">page</code> and <code class=\"highlighter-rouge\">pageLimit</code> arguments. Let’s get ten pages of stargazers from GitHub instead of one:</p> <pre data-language=\"\">r.http('https://api.github.com/repos/rethinkdb/rethinkdb/stargazers',\n       { page: 'link-next', pageLimit: 10 })\n</pre>  <p>The <code class=\"highlighter-rouge\">page</code> argument takes the type of pagination mechanism used by the API. In this case GitHub uses the standard link header mechanism <code class=\"highlighter-rouge\">link-next</code>, but you can also specify custom pagination schemes for unusual APIs. The <code class=\"highlighter-rouge\">page-limit</code> argument specifies the number of pages you’d like to get. See the <a href=\"https://rethinkdb.com/api/javascript/http/\">API reference</a> for more details.</p> <p>When you turn on pagination in <code class=\"highlighter-rouge\">r.http</code>, instead of returning an array of documents, RethinkDB returns a stream which you can access in the driver via the usual cursor API. This is significant because pagination happens lazily — RethinkDB will request new pages as you iterate through the cursor to minimize the number of API calls.</p> <h2 id=\"authentication\">Authentication</h2> <p>Most APIs support some form of authentication and rate limiting. The <code class=\"highlighter-rouge\">r.http</code> command supports common forms of authentication (see the <a href=\"https://rethinkdb.com/api/javascript/http/\">reference</a> for more details). For example, here is how you can use GitHub tokens with basic auth:</p> <pre data-language=\"\">r.http('https://api.github.com/users/coffeemug', {\n       auth: {\n           user: GITHUB_TOKEN,\n           pass: 'x-oauth-basic'\n       }\n})\n</pre>  <h2 id=\"read-more\">Read more</h2> <p>Browse the following resources to learn more about ReQL and <code class=\"highlighter-rouge\">r.http</code>:</p> <ul> <li>\n<a href=\"https://rethinkdb.com/api/javascript/http\">r.http</a> API reference</li> <li><a href=\"../introduction-to-reql/index\">Introduction to ReQL</a></li> <li><a href=\"https://rethinkdb.com/blog/lambda-functions/\">Lambda functions in RethinkDB</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/external-api-access/\" class=\"_attribution-link\">https://rethinkdb.com/docs/external-api-access/</a>\n  </p>\n</div>\n","docs/examples/index":"<h1 class=\"title\">Example projects</h1> <blockquote class=\"infobox \">\n<p><strong>Looking for another stack?</strong> We will try to add as many examples as we can. If you have written a cool app and want us to showcase it, <a href=\"https://rethinkdb.com/community\">let us know</a>!</p> </blockquote> <table class=\"docs-grid docs-examples\"> <tbody> <tr> <td> <div class=\"docs-grid-block\"> <h5>Todo list 1</h5> <p>Todo list with Angular and Express</p> <strong>Technologies:</strong> <ul> <li>Node.js</li> <li>Express 4.0</li> <li>Angular.js</li> </ul>  Go to the <a class=\"action\" href=\"https://github.com/rethinkdb/rethinkdb-example-nodejs/tree/master/todo-angular-express\">callbacks</a> or <a href=\"https://github.com/rethinkdb/rethinkdb-example-nodejs/tree/master/todo-angular-express-promise\">promises</a> tutorial » </div> </td> <td> <div class=\"docs-grid-block\"> <h5>Todo list 2</h5> <p>Node.js Todo list</p> <strong>Technologies:</strong> <ul> <li>Node.js</li> <li>Koa</li> <li>Angular.js</li> </ul>  <a class=\"action\" href=\"https://github.com/rethinkdb/rethinkdb-example-nodejs/tree/master/todo-angular-koa\">Go to the tutorial »</a> </div> </td> </tr> <tr> <td> <div class=\"docs-grid-block elections\"> <h5>US election analysis</h5> <p> Analysis of the 2012 US presidential elections. </p> <strong>Technologies:</strong> <ul> <li>JavaScript</li> <li>Data Explorer</li> <li>\n<code>group</code>, <code>eqJoin</code>, map-reduce</li> </ul>  <a class=\"action\" href=\"https://rethinkdb.com/docs/tutorials/elections/\">Go to the tutorial »</a> </div> </td> <td> <div class=\"docs-grid-block chat\"> <h5>Asynchronous chat</h5> <p> The classic chat with Node.js. </p> <strong>Technologies:</strong> <ul> <li>JavaScript driver with Node.js</li> <li>Express</li> <li>Passport</li> </ul>  <a class=\"action\" href=\"https://github.com/rethinkdb/rethinkdb-example-nodejs-chat\">See the source »</a> </div> </td> </tr> <tr> <td> <div class=\"docs-grid-block molecule\"> <h5>Molly.js</h5> <p> A WebGL molecule viewer (by <a href=\"https://github.com/psb\">@psb</a>). </p> <strong>Technologies:</strong> <ul> <li>JavaScript driver with Node.js</li> <li>Express</li> <li>WebGL</li> </ul>  <a class=\"action\" href=\"https://github.com/psb/molly.js/\">See the code »</a> </div> </td> <td> <div class=\"docs-grid-block pastie\"> <h5>Pastie app</h5> <p> A simple Pastie app. </p> <strong>Technologies:</strong> <ul> <li>Ruby driver</li> <li>Sinatra</li> <li>\n<code>filter</code>, <code>pluck</code>, <code>order_by</code>\n</li> </ul>  <a class=\"action\" href=\"https://github.com/rethinkdb/rethinkdb-example-sinatra-pastie\">See the code »</a> </div> </td> </tr> <tr> <td> <div class=\"docs-grid-block superheroes\"> <h5>Superheroes tutorial</h5> <p> Simple queries on a superheroes dataset. </p> <strong>Technologies:</strong> <ul> <li>Python driver</li> <li>Simple creation and insertion</li> <li>Filtering based on arrays</li> </ul>  <a class=\"action\" href=\"https://rethinkdb.com/docs/tutorials/superheroes/\">Go to the tutorial »</a> </div> </td> <td> <div class=\"docs-grid-block todo-backbone\"> <h5>Todo list in Backbone</h5> <p> Backbone.js Todo List based on <a href=\"http://todomvc.com/\">TodoMVC</a>. </p> <strong>Technologies:</strong> <ul> <li>Python driver</li> <li>Flask</li> <li>Backbone.js</li> </ul>  <a class=\"action\" href=\"https://github.com/rethinkdb/rethinkdb-example-flask-backbone-todo\">See the source »</a> </div> </td> </tr> <tr> <td> <div class=\"docs-grid-block todo-ember\"> <h5>Todo list in Ember.js</h5> <p> Ember.js Todo List in the spirit of <a href=\"http://todomvc.com/\">TodoMVC</a>. </p> <strong>Technologies:</strong> <ul> <li>Python driver</li> <li>Bottle</li> <li>Ember.js</li> </ul>  <a class=\"action\" href=\"https://github.com/rethinkdb/rethinkdb-example-bottle-ember-todo\">See the source »</a> </div> </td> <td> <div class=\"docs-grid-block blog\"> <h5>Blog example app</h5> <p> A web.py blog application. </p> <strong>Technologies:</strong> <ul> <li>Python driver</li> <li>web.py</li> <li>Basic updates and filtering</li> </ul>  <a class=\"action\" href=\"https://github.com/rethinkdb/rethinkdb-example-webpy-blog\">See the source »</a> </div> </td> </tr> <tr> <td> <div class=\"docs-grid-block cat\"> <h5>CatThink</h5> <p>See cat pictures shared on Instagram in real time.</p> <strong>Technologies:</strong> <ul> <li>Node and Socket.io</li> <li>Changefeeds</li> <li>Instagram PubSubHubbub</li> </ul>  <a class=\"action\" href=\"https://rethinkdb.com/blog/cats-of-instagram/\">Go to the tutorial »</a> </div> </td> </tr> </tbody> </table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/examples/\" class=\"_attribution-link\">https://rethinkdb.com/docs/examples/</a>\n  </p>\n</div>\n","docs/administration-tools/index":"<h1 class=\"title\">Administration tools</h1> <p>RethinkDB provides a web interface which lets you manage your entire server cluster, from controlling sharding and replication to running ReQL queries (in JavaScript), with editing and history support. In addition, you can perform administration tasks using scriptable ReQL commands.</p> <h2 id=\"the-web-interface\">The web interface</h2> <p><a class=\"screenshot-thumbnail\" href=\"https://rethinkdb.com/assets/images/docs/administration/webui.png\"><img src=\"https://rethinkdb.com/assets/images/docs/administration/thumbnails/webui.png\"></a></p> <p>Once RethinkDB is running, you can connect to it at <a href=\"http://localhost:8080\">http://localhost:8080</a>, assuming you’ve kept the default port (8080) and it’s running on your local machine.</p> <p>By default, RethinkDB binds the web interface to <code class=\"highlighter-rouge\">localhost</code> for security reasons. If you need to be able to access it from another server, use the <code class=\"highlighter-rouge\">--bind all</code> parameter when starting RethinkDB. Read how to <a href=\"../start-a-server/index\">Start a RethinkDB server</a> and <a href=\"../start-on-startup/index\">Start RethinkDB at system startup</a>.</p> <h2 id=\"reql-administration-commands\">ReQL administration commands</h2> <p>With the appropriate <a href=\"../install-drivers/index\">client driver</a> installed you can use a supported language to perform all administration tasks, either from the language’s REPL or as a script. There are ReQL commands for <a href=\"https://rethinkdb.com/api/python/reconfigure\">configuring sharding and replication</a>, <a href=\"https://rethinkdb.com/api/python/rebalance\">rebalancing shards</a> and more. In addition, you can query <a href=\"../system-tables/index\">system tables</a> to get information about your cluster and to change many of its operational characteristics.</p> <p>These examples use Python, but there’s equivalent functionality in Ruby, and any other scripting language with a RethinkDB driver updated for version 1.16 or later. Read the API documentation for more information on specific commands along with descriptions of their return values.</p> <h3 id=\"using-a-repl\">Using a REPL</h3> <p>Load <code class=\"highlighter-rouge\">python</code> (or <a href=\"http://ipython.org\">ipython</a>) and set up a connection to your database:</p> <pre data-language=\"\">import rethinkdb as r\nr.connect('localhost', 28015).repl()\n</pre>  <p>Now, you can use ReQL commands to query system tables and perform reconfiguration commands. To return the server status, you can query the <code class=\"highlighter-rouge\">server_status</code> system table in the special <code class=\"highlighter-rouge\">rethinkdb</code> database.</p> <pre data-language=\"\">list(r.db('rethinkdb').table('server_status').run())\n\n[{u'network': { u'canonical_addresses': [{u'host': u'127.0.0.1', u'port':\n29015}, {u'host': u'::1', u'port': 29015}], u'http_admin_port': 8080,\nu'hostname': u'companion-cube', u'cluster_port': 29015, u'reql_port': 28015,\nu'time_connected': datetime.datetime(2015, 06, 12, 22, 43, 56, 651000,\ntzinfo=&lt;rethinkdb.ast.RqlTzinfo object at 0x10c13d1d0&gt;)}, u'process': {\nu'version': u'rethinkdb 2.1.0-xxx (CLANG 3.4 (tags/RELEASE_34/final))',\nu'pid': 69596, u'cache_size_mb': 100, u'argv': [u'/usr/bin/rethinkdb'],\nu'time_started': datetime.datetime(2015, 06, 12, 22, 43, 56, 651000,\ntzinfo=&lt;rethinkdb.ast.RqlTzinfo object at 0x10c13d1d0&gt;)}, u'id':\nu'6dbc31fe-8f78-4128-af76-cdac43bcc195', u'name': u'rethinkdb'}]\n</pre>  <p>To return the status on a specific table, you can use the <a href=\"https://rethinkdb.com/api/python/status\">status</a> command.</p> <pre data-language=\"\">r.table('superheroes').status().run()\n</pre>  <p>And reconfiguring a table can be done the <a href=\"https://rethinkdb.com/api/python/reconfigure\">reconfigure</a> command.</p> <pre data-language=\"\">r.table('a').reconfigure(shards=2, replicas=2).run()\n\nr.table('b').reconfigure(shards=2, replicas={'us_east':2, 'us_west':2,\n    'london':2}, primary_replica_tag='us_east').run()\n</pre>  <p>The Data Explorer in the web administration UI is itself a JavaScript REPL, with syntax highlighting and history. (The article on <a href=\"../reql-data-exploration/index\">ReQL data exploration</a> goes into some detail on how to use the Data Explorer.) The advantage of scripting languages with ReQL comes into play when writing administration scripts.</p> <h3 id=\"scripting-reql\">Scripting ReQL</h3> <p>By using ReQL with a language like Python, it becomes easy to script administrative and configuration tasks with RethinkDB. If you have complex table configurations that might need to be repeated for new tables or tweaked for the whole database, you can store them in a script.</p> <pre data-language=\"\">import rethinkdb as r\nconn = r.connect('localhost', 28015)\n\n# Configure the entire database\nr.db('database').reconfigure(shards=2, replicas=3).run(conn)\n\n# Configure a set of specific tables\ntables = ['users', 'posts', 'comments']\nfor table in tables:\n    r.table(table).reconfigure(shards=3, replicas=2).run(conn)\n\n# Configure all tables that are not related to logging\ntables = [t for t in r.table_list().run() if 'log_' not in t]\nfor table in tables:\n    r.table(table).reconfigure(shards=2, replicas=3).run(conn)\n\n# Retrieve the current configuration of all the tables\n# This uses the table_config system table\nconfigs = r.db('rethinkdb').table('table_config').run()\n\n# Restore the configuration of tables saved in 'configs'\nfor config in configs:\n    r.db('rethinkdb').table('table_config').get(\n    config['id']).update(config).run(conn)\n</pre>  <p>Scripting is also the only way to access some advanced features such as server tags, which let you group servers together for replication purposes (such as associating them with physical data centers). For more information, read the “Advanced configuration” section of <a href=\"../sharding-and-replication/index\">Sharding and replication</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/administration-tools/\" class=\"_attribution-link\">https://rethinkdb.com/docs/administration-tools/</a>\n  </p>\n</div>\n","docs/table-joins/index":"<h1 class=\"title\">Table joins in RethinkDB</h1> <blockquote class=\"infobox \">\n<p><strong>Wondering how to model your data?</strong> Read about <a href=\"../data-modeling/index\">data modeling in RethinkDB</a>.</p> </blockquote> <p>Like many traditional database systems, RethinkDB supports <code class=\"highlighter-rouge\">JOIN</code> commands to combine data from multiple tables. In RethinkDB joins are automatically distributed—a join command is automatically sent to the appropriate nodes across the cluster, the relevant data is combined, and the final result is presented to the user.</p> <p>Let’s see how we can use joins in RethinkDB to query data based on <strong>one to many</strong>, and <strong>many to many</strong> relations.</p> <div class=\"toc\">  <ul id=\"markdown-toc\"> <li><a href=\"#one-to-many-relations\" id=\"markdown-toc-one-to-many-relations\">One to many relations</a></li> <li><a href=\"#many-to-many-relations\" id=\"markdown-toc-many-to-many-relations\">Many to many relations</a></li> <li><a href=\"#resolving-field-name-conflicts\" id=\"markdown-toc-resolving-field-name-conflicts\">Resolving field name conflicts</a></li> <li><a href=\"#read-more\" id=\"markdown-toc-read-more\">Read more</a></li> </ul> </div> <p><img src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/table-joins.png\" alt=\"Table Join Illustration\" class=\"api_command_illustration\"></p> <h2 id=\"one-to-many-relations\">One to many relations</h2> <h3 id=\"using-primary-keys\">Using primary keys</h3> <p>Let’s suppose we’ve created two tables: <code class=\"highlighter-rouge\">employees</code> and <code class=\"highlighter-rouge\">companies</code>. We’ll use these tables to model the notion of people working for organizations (each organization has multiple people working for it, but any given person works at a single organization). Here’s an example document in the <code class=\"highlighter-rouge\">employees</code> table:</p> <pre data-language=\"\">{\n    \"id\": \"543ad9c8-1744-4001-bb5e-450b2565d02c\",\n    \"name\": \"Jean-Luc Picard\",\n    \"company_id\": \"064058b6-cea9-4117-b92d-c911027a725a\",\n    \"rank\": \"captain\"\n}\n</pre>  <p>And here’s an example document in the <code class=\"highlighter-rouge\">companies</code> table:</p> <pre data-language=\"\">{\n    \"id\": \"064058b6-cea9-4117-b92d-c911027a725a\",\n    \"company\": \"Starfleet\",\n    \"type\": \"paramilitary\"\n}\n</pre>  <p>We can join the two tables as follows:</p> <pre data-language=\"\">r.table(\"employees\").eq_join(\"company_id\", r.table(\"companies\")).run()\n</pre>  <p>This query joins the <code class=\"highlighter-rouge\">company_id</code> of the employee table with the primary key of the company table. It returns a sequence of documents where each document contains two fields—the employee information and the company information:</p> <pre data-language=\"\">{\n    \"left\": {\n        \"id\": \"543ad9c8-1744-4001-bb5e-450b2565d02c\",\n        \"name\": \"Jean-Luc Picard\",\n        \"company_id\": \"064058b6-cea9-4117-b92d-c911027a725a\",\n        \"rank\": \"captain\"\n    },\n    \"right\": {\n        \"id\": \"064058b6-cea9-4117-b92d-c911027a725a\",\n        \"company\": \"Starfleet\",\n        \"type\": \"paramilitary\"\n    }\n}\n</pre>  <ul> <li>The field <code class=\"highlighter-rouge\">left</code> contains the information from the left table in the query (in this case, the employee)</li> <li>The field <code class=\"highlighter-rouge\">right</code> contains the information from the right table in the query (in this case, the company)</li> </ul> <p>We can chain the <code class=\"highlighter-rouge\">zip</code> command at the end of the query to merge the two fields into a single document. For example, the following query:</p> <pre data-language=\"\">r.table(\"employees\").eq_join(\"company_id\", r.table(\"companies\")).zip().run()\n</pre>  <p>Returns the following result:</p> <pre data-language=\"\">{\n    \"id\": \"064058b6-cea9-4117-b92d-c911027a725a\",\n    \"name\": \"Jean-Luc Picard\",\n    \"company_id\": \"064058b6-cea9-4117-b92d-c911027a725a\",\n    \"rank\": \"captain\",\n    \"company\": \"Starfleet\",\n    \"type\": \"paramilitary\"\n}\n</pre>  <h3 id=\"using-subqueries\">Using subqueries</h3> <p>A common data access task is retrieving one document with associated “child” documents. (This would often be in a one-to-many relationship as shown here, but could be a many-to-many or one-to-one relationship.) In our example data set, we might want to retrieve information about a company and all its employees. We can do this in one ReQL command using <code class=\"highlighter-rouge\">merge</code> and a subquery in its lambda function.</p> <pre data-language=\"\">id = \"064058b6-cea9-4117-b92d-c911027a725a\"\nr.table(\"companies\").get(id).merge(lambda company:\n    { 'employees': r.table('employees').get_all(company['id'],\n                           index='company_id').coerce_to('array') }\n).run()\n</pre>  <p>This will return a result similar to:</p> <pre data-language=\"\">{\n    \"id\": \"064058b6-cea9-4117-b92d-c911027a725a\",\n    \"company\": \"Starfleet\",\n    \"type\": \"paramilitary\",\n    \"employees\": [\n        {\n            \"id\": \"543ad9c8-1744-4001-bb5e-450b2565d02c\",\n            \"name\": \"Jean-Luc Picard\",\n            \"company_id\": \"064058b6-cea9-4117-b92d-c911027a725a\",\n            \"rank\": \"captain\"\n        },\n        ...\n    ]\n}\n</pre>  <p>Where <code class=\"highlighter-rouge\">eq_join</code> produces a table-like result (the rough equivalent of SQL’s <code class=\"highlighter-rouge\">SELECT * FROM companies, employees WHERE companies.id = employees.company_id</code>), using a subquery produces a nested document, where the employee objects are returned in a list in the <code class=\"highlighter-rouge\">employees</code> field.</p> <h3 id=\"using-secondary-indexes\">Using secondary indexes</h3> <p>Suppose that our data model for the employees stores a company name instead of a company id:</p> <pre data-language=\"\">{\n    \"id\": \"543ad9c8-1744-4001-bb5e-450b2565d02c\",\n    \"name\": \"Jean-Luc Picard\",\n    \"company_name\": \"Starfleet\",\n    \"rank\": \"captain\"\n}\n</pre>  <p>We can create a secondary index on the <code class=\"highlighter-rouge\">company</code> field of the <code class=\"highlighter-rouge\">companies</code> table, and perform our query by taking advantage of the secondary index:</p> <pre data-language=\"\">r.table(\"companies\").index_create(\"company\").run()\n</pre>  <p>The query would look like this:</p> <pre data-language=\"\">r.table(\"employees\").eq_join(\"company_name\",\n                             r.table(\"companies\"), index=\"company\").run()\n</pre>  <blockquote class=\"infobox \">\n<p><strong>Want to learn more about indexes?</strong>: Read about <a href=\"../secondary-indexes/java/index\">using secondary indexes in RethinkDB</a>.</p> </blockquote> <blockquote class=\"infobox \">\n<p><strong>Note</strong>: you can also join tables on arbitrary fields without creating an index using the <a href=\"https://rethinkdb.com/api/python/inner_join/\">inner_join</a> command. However, arbitrary inner joins are less efficient then equijoins.</p> </blockquote> <h2 id=\"many-to-many-relations\">Many to many relations</h2> <p>You can also use RethinkDB to query many to many relations. Let’s suppose we have a collaborative blogging platform where authors collaborate to create posts (multiple authors can work on any given post, and publish multiple posts).</p> <p>In order to model this data we’d create three tables—<code class=\"highlighter-rouge\">authors</code>, <code class=\"highlighter-rouge\">posts</code> and <code class=\"highlighter-rouge\">authors_posts</code>, similarly to how we’d do it in a relational system. Here is example data for the <code class=\"highlighter-rouge\">authors</code> table:</p> <pre data-language=\"\">{\n  \"id\": \"7644aaf2-9928-4231-aa68-4e65e31bf219\",\n  \"name\": \"William Adama\",\n  \"tv_show\": \"Battlestar Galactica\"\n}\n{\n  \"id\": \"064058b6-cea9-4117-b92d-c911027a725a\",\n  \"name\": \"Laura Roslin\",\n  \"tv_show\": \"Battlestar Galactica\"\n}\n</pre>  <p>Here is example data for the <code class=\"highlighter-rouge\">posts</code> table:</p> <pre data-language=\"\">{\n    \"id\": \"543ad9c8-1744-4001-bb5e-450b2565d02c\",\n    \"title\": \"Decommissioning speech\",\n    \"content\": \"The Cylon War is long over...\"\n}\n</pre>  <p>And here is example data for the <code class=\"highlighter-rouge\">authors_posts</code> table:</p> <pre data-language=\"\">{\n    \"author_id\": \"7644aaf2-9928-4231-aa68-4e65e31bf219\",\n    \"post_id\": \"543ad9c8-1744-4001-bb5e-450b2565d02c\"\n}\n{\n    \"author_id\": \"064058b6-cea9-4117-b92d-c911027a725a\",\n    \"post_id\": \"543ad9c8-1744-4001-bb5e-450b2565d02c\"\n}\n</pre>  <p>In a many to many relation, we can use multiple <code class=\"highlighter-rouge\">eq_join</code> commands to join the data from all three tables:</p> <pre data-language=\"\">r.table(\"authors_posts\").eq_join(\"author_id\", r.table(\"authors\")).zip().\n  eq_join(\"post_id\", r.table(\"posts\")).zip().run()\n</pre>  <p>The result of this query is a stream of documents that includes every post written by every author in our database:</p> <pre data-language=\"\">{\n    \"tv_show\": \"Battlestar Galactica\",\n    \"title\": \"Decommissioning speech\",\n    \"post_id\": \"543ad9c8-1744-4001-bb5e-450b2565d02c\",\n    \"name\": \"William Adama\",\n    \"id\": \"543ad9c8-1744-4001-bb5e-450b2565d02c\",\n    \"content\": \"The Cylon War is long over...\",\n    \"author_id\": \"7644aaf2-9928-4231-aa68-4e65e31bf219\"\n}\n{\n    \"tv_show\": \"Battlestar Galactica\",\n    \"title\": \"Decommissioning speech\",\n    \"post_id\": \"543ad9c8-1744-4001-bb5e-450b2565d02c\",\n    \"name\": \"Laura Roslin\",\n    \"id\": \"543ad9c8-1744-4001-bb5e-450b2565d02c\",\n    \"content\": \"The Cylon War is long over...\",\n    \"author_id\": \"064058b6-cea9-4117-b92d-c911027a725a\"\n}\n</pre>  <h2 id=\"resolving-field-name-conflicts\">Resolving field name conflicts</h2> <p>If you use the <code class=\"highlighter-rouge\">zip</code> command after <code class=\"highlighter-rouge\">join</code>, the document from the right table will be merged into the left one.</p> <p>Consider the following query:</p> <pre data-language=\"\">r.table(\"employees\").eq_join(\"company_id\", r.table(\"companies\"))\n</pre>  <p>Suppose its output is as follows:</p> <pre data-language=\"\">{\n    # Employee\n    \"left\": {\n        \"id\": \"543ad9c8-1744-4001-bb5e-450b2565d02c\",\n        \"name\": \"Jean-Luc Picard\",\n        \"company_id\": \"064058b6-cea9-4117-b92d-c911027a725a\",\n        \"rank\": \"captain\"\n    },\n    # Company\n    \"right\": {\n        \"id\": \"064058b6-cea9-4117-b92d-c911027a725a\",\n        \"company\": \"Starfleet\",\n        \"type\": \"paramilitary\"\n    }\n}\n</pre>  <p>The conflicting field is <code class=\"highlighter-rouge\">id</code>. If you directly use the <code class=\"highlighter-rouge\">zip</code> command, the <code class=\"highlighter-rouge\">id</code> field of the result will be the one from the company. There are three ways to resolve potential field conflicts.</p> <h3 id=\"removing-the-conflicting-fields\">Removing the conflicting fields</h3> <p>Suppose that you want to keep the <code class=\"highlighter-rouge\">id</code> field of the employee, but not the one of the company. You can do it by removing the field <code class=\"highlighter-rouge\">right.id</code>, then calling the <code class=\"highlighter-rouge\">zip</code> command.</p> <pre data-language=\"\">r.table(\"employees\").eq_join(\"company_id\", r.table(\"companies\"))\n    .without({\"right\": {\"id\": True}}) # Remove the field right.id\n    .zip()\n    .run()\n</pre>  <h3 id=\"renaming-the-fields\">Renaming the fields</h3> <p>If you need to keep both fields, you can rename them with <code class=\"highlighter-rouge\">map</code> and <code class=\"highlighter-rouge\">without</code> before using the <code class=\"highlighter-rouge\">zip</code> command.</p> <pre data-language=\"\">r.table(\"employees\").eq_join(\"company_id\", r.table(\"companies\"))\n    # Copy the field right.id into right.c_id\n    .map( r.row.merge({\n        \"right\": {\n            \"c_id\": r.row[\"right\"][\"id\"]\n        }\n    }))\n    # Remove the field right.id\n    .without({\"right\": {\"id\": True}})\n    .zip()\n    .run()\n</pre>  <h3 id=\"manually-merge-the-left-and-right-fields\">Manually merge the left and right fields</h3> <p>You can manually merge the <code class=\"highlighter-rouge\">left</code> and <code class=\"highlighter-rouge\">right</code> fields without using the <code class=\"highlighter-rouge\">zip</code> command. Suppose you want to keep the name of the employee and the name of his company. You can do:</p> <pre data-language=\"\">r.table(\"employees\").eq_join(\"company_id\", r.table(\"companies\"))\n    .map({\n        \"name\": r.row[\"left\"][\"name\"],\n        \"company\": r.row[\"right\"][\"company\"]\n    }).run()\n</pre>  <h2 id=\"read-more\">Read more</h2> <p>To learn more, read about <a href=\"../data-modeling/index\">data modeling in RethinkDB</a>. For detailed information, take a look at the API documentation for the join commands:</p> <ul> <li><a href=\"https://rethinkdb.com/api/python/eq_join/\">eq_join</a></li> <li><a href=\"https://rethinkdb.com/api/python/inner_join/\">inner_join</a></li> <li><a href=\"https://rethinkdb.com/api/python/outer_join/\">outer_join</a></li> <li><a href=\"https://rethinkdb.com/api/python/zip/\">zip</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/table-joins/\" class=\"_attribution-link\">https://rethinkdb.com/docs/table-joins/</a>\n  </p>\n</div>\n","docs/changefeeds/java/index":"<h1 class=\"title\">Changefeeds in RethinkDB</h1>    <p><strong>Changefeeds</strong> lie at the heart of RethinkDB’s real-time functionality.</p> <div class=\"toc\">  <ul id=\"markdown-toc\"> <li><a href=\"#basic-usage\" id=\"markdown-toc-basic-usage\">Basic usage</a></li> <li><a href=\"#point-single-document-changefeeds\" id=\"markdown-toc-point-single-document-changefeeds\">Point (single document) changefeeds</a></li> <li><a href=\"#changefeeds-with-filtering-and-aggregation-queries\" id=\"markdown-toc-changefeeds-with-filtering-and-aggregation-queries\">Changefeeds with filtering and aggregation queries</a></li> <li><a href=\"#including-state-changes\" id=\"markdown-toc-including-state-changes\">Including state changes</a></li> <li><a href=\"#including-initial-values\" id=\"markdown-toc-including-initial-values\">Including initial values</a></li> <li><a href=\"#including-result-types\" id=\"markdown-toc-including-result-types\">Including result types</a></li> <li><a href=\"#handling-latency\" id=\"markdown-toc-handling-latency\">Handling latency</a></li> <li><a href=\"#scaling-considerations\" id=\"markdown-toc-scaling-considerations\">Scaling considerations</a></li> <li><a href=\"#read-more\" id=\"markdown-toc-read-more\">Read more</a></li> </ul> </div> <p>They allow clients to receive changes on a table, a single document, or even the results from a specific query as they happen. Nearly any ReQL query can be turned into a changefeed.</p> <p><img alt=\"Data Modeling Illustration\" class=\"api_command_illustration\" src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/change-feeds.png\"></p> <h2 id=\"basic-usage\">Basic usage</h2> <p>Subscribe to a feed by calling <a href=\"../../../api/java/changes/index\">changes</a> on a table:</p> <pre data-language=\"\">Cursor changeCursor = r.table(\"users\").changes().run(conn);\nfor (Object change : changeCursor) {\n    System.out.println(change);\n}\n</pre>  <p>The <code class=\"highlighter-rouge\">changes</code> command returns a cursor (like the <code class=\"highlighter-rouge\">table</code> or <code class=\"highlighter-rouge\">filter</code> commands do). You can iterate through its contents using ReQL. Unlike other cursors, the output of <code class=\"highlighter-rouge\">changes</code> is infinite: the cursor will block until more elements are available. Every time you make a change to the table or document the <code class=\"highlighter-rouge\">changes</code> feed is monitoring, a new object will be returned to the cursor. For example, if you insert a user <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"s2\">\"id\"</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span><span class=\"s2\">\"Slava\"</span><span class=\"p\">,</span><span class=\"s2\">\"age\"</span><span class=\"p\">:</span><span class=\"mi\">31</span><span class=\"p\">}</span></code> into the <code class=\"highlighter-rouge\">users</code> table, RethinkDB will post this document to changefeeds subscribed to <code class=\"highlighter-rouge\">users</code>:</p> <pre data-language=\"\">{\n  \"old_val\": null,\n  \"new_val\": { \"id\": 1, \"name\": \"Slava\", \"age\": 31 }\n}\n</pre>  <p>Here <code class=\"highlighter-rouge\">old_val</code> is the old version of the document, and <code class=\"highlighter-rouge\">new_val</code> is a new version of the document. On an <code class=\"highlighter-rouge\">insert</code>, <code class=\"highlighter-rouge\">old_val</code> will be <code class=\"highlighter-rouge\">null</code>; on a <code class=\"highlighter-rouge\">delete</code>, <code class=\"highlighter-rouge\">new_val</code> will be <code class=\"highlighter-rouge\">null</code>. On an <code class=\"highlighter-rouge\">update</code>, both <code class=\"highlighter-rouge\">old_val</code> and <code class=\"highlighter-rouge\">new_val</code> are present.</p> <h2 id=\"point-single-document-changefeeds\">Point (single document) changefeeds</h2> <p>A “point” changefeed returns changes to a single document within a table rather than the table as a whole.</p> <pre data-language=\"\">r.table(\"users\").get(100).changes().run(conn);\n</pre>  <p>The output format of a point changefeed is identical to a table changefeed.</p> <h2 id=\"changefeeds-with-filtering-and-aggregation-queries\">Changefeeds with filtering and aggregation queries</h2> <p>Like any ReQL command, <code class=\"highlighter-rouge\">changes</code> integrates with the rest of the query language. You can call <code class=\"highlighter-rouge\">changes</code> after most commands that transform or select data:</p> <ul> <li><a href=\"../../../api/java/filter/index\">filter</a></li> <li><a href=\"../../../api/java/get_all/index\">getAll</a></li> <li><a href=\"../../../api/java/map/index\">map</a></li> <li><a href=\"../../../api/java/pluck/index\">pluck</a></li> <li><a href=\"../../../api/java/between/index\">between</a></li> <li><a href=\"../../../api/java/union/index\">union</a></li> <li><a href=\"../../../api/java/min/index\">min</a></li> <li><a href=\"../../../api/java/max/index\">max</a></li> <li>\n<a href=\"../../../api/java/order_by/index\">orderBy</a>.<a href=\"../../../api/java/limit/index\">limit</a>\n</li> </ul> <p>You can also chain <code class=\"highlighter-rouge\">changes</code> before any command that operates on a sequence of documents, as long as that command doesn’t consume the entire sequence. (For instance, <code class=\"highlighter-rouge\">count</code> and <code class=\"highlighter-rouge\">orderBy</code> cannot come after the <code class=\"highlighter-rouge\">changes</code> command.)</p> <p>Suppose you have a chat application with multiple clients posting messages to different chat rooms. You can create feeds that subscribe to messages posted to a specific room:</p> <pre data-language=\"\">r.table(\"messages\").filter(\n    row -&gt; row.g(\"room_id\").eq(ROOM_ID)\n).changes().run(conn);\n</pre>  <p>You can also use more complicated expressions. Let’s say you have a table <code class=\"highlighter-rouge\">scores</code> that contains the latest game score for every user of your game. You can create a feed of all games where a user beats their previous score, and get only the new value:</p> <pre data-language=\"\">r.table(\"scores\").changes().filter(\n    change -&gt; change.g(\"new_val\").g(\"score\").gt(change.g(\"old_val\").g(\"score\"))\n).g(\"new_val\").run(conn);\n</pre>  <p>There are some limitations and caveats on chaining with changefeeds.</p> <ul> <li>\n<code class=\"highlighter-rouge\">min</code>, <code class=\"highlighter-rouge\">max</code> and <code class=\"highlighter-rouge\">orderBy</code> must be used with indexes.</li> <li>\n<code class=\"highlighter-rouge\">orderBy</code> requires <code class=\"highlighter-rouge\">limit</code>; neither command works by itself.</li> <li>\n<code class=\"highlighter-rouge\">orderBy</code> must be used with a <a href=\"../../secondary-indexes/java/index\">secondary index</a> or the primary index; it cannot be used with an unindexed field.</li> <li>You cannot use changefeeds after <a href=\"../../../api/java/concat_map/index\">concatMap</a> or other transformations whose results cannot be pushed to the shards.</li> <li>You cannot apply a <code class=\"highlighter-rouge\">filter</code> after <code class=\"highlighter-rouge\">orderBy.limit</code> in a changefeed.</li> <li>Transformations are applied before changes are calculated.</li> </ul> <h2 id=\"including-state-changes\">Including state changes</h2> <p>The <code class=\"highlighter-rouge\">include_states</code> optional argument to <code class=\"highlighter-rouge\">changes</code> allows you to receive extra “status” documents in changefeed streams. These can allow your application to distinguish between initial values returned at the start of a stream and subsequent changes. Read the <a href=\"../../../api/java/changes/index\">changes</a> API documentation for a full explanation and example.</p> <h2 id=\"including-initial-values\">Including initial values</h2> <p>By specifying <code class=\"highlighter-rouge\">true</code> to the <code class=\"highlighter-rouge\">include_initial</code> optional argument, the changefeed stream will start with the current contents of the table or selection being monitored. The initial results will have <code class=\"highlighter-rouge\">new_val</code> fields, but no <code class=\"highlighter-rouge\">old_val</code> fields, so it’s easy to distinguish them from change events.</p> <p>If an initial result for a document has been sent and a change is made to that document that would move it to the unsent part of the result set (for instance, a changefeed monitors the top 100 posters, the first 50 have been sent, and poster 48 has become poster 52), an “uninitial” notification will be sent, with an <code class=\"highlighter-rouge\">old_val</code> field but no <code class=\"highlighter-rouge\">new_val</code> field. This is distinct from a delete change event, which would have a <code class=\"highlighter-rouge\">new_val</code> of <code class=\"highlighter-rouge\">null</code>. (In the top 100 posters example, that could indicate the poster has been deleted, or has dropped out of the top 100.)</p> <p>If you specify <code class=\"highlighter-rouge\">true</code> for both <code class=\"highlighter-rouge\">include_states</code> and <code class=\"highlighter-rouge\">include_initial</code>, the changefeed stream will start with a <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"s2\">\"state\"</span><span class=\"p\">:</span><span class=\"s2\">\"initializing\"</span><span class=\"p\">}</span></code> status document, followed by initial values. A <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"s2\">\"state\"</span><span class=\"p\">:</span><span class=\"s2\">\"ready\"</span><span class=\"p\">}</span></code> status document will be sent when all the initial values have been sent.</p> <h2 id=\"including-result-types\">Including result types</h2> <p>The <code class=\"highlighter-rouge\">include_types</code> optional argument adds a third field, <code class=\"highlighter-rouge\">type</code>, to each result sent. The string values for <code class=\"highlighter-rouge\">type</code> are largely self-explanatory:</p> <ul> <li>\n<code class=\"highlighter-rouge\">add</code>: a new value added to the result set.</li> <li>\n<code class=\"highlighter-rouge\">remove</code>: an old value removed from the result set.</li> <li>\n<code class=\"highlighter-rouge\">change</code>: an existing value changed in the result set.</li> <li>\n<code class=\"highlighter-rouge\">initial</code>: an initial value notification.</li> <li>\n<code class=\"highlighter-rouge\">uninitial</code>: an uninitial value notification.</li> <li>\n<code class=\"highlighter-rouge\">state</code>: a status document from <code class=\"highlighter-rouge\">include_states</code>.</li> </ul> <p>Including the <code class=\"highlighter-rouge\">type</code> field can simplify code that handles different cases for changefeed results.</p> <h2 id=\"handling-latency\">Handling latency</h2> <p>Depending on how fast your application makes changes to monitored data and how fast it processes change notifications, it’s possible that more than one change will happen between calls to the <code class=\"highlighter-rouge\">changes</code> command. You can control what happens in that case with the <code class=\"highlighter-rouge\">squash</code> optional argument.</p> <p>By default, if more than one change occurs between invocations of <code class=\"highlighter-rouge\">changes</code>, your application will receive a single change object whose <code class=\"highlighter-rouge\">new_val</code> will incorporate <em>all</em> the changes to the data. Suppose three updates occurred to a monitored document between <code class=\"highlighter-rouge\">change</code> reads:</p> <table> <thead> <tr> <th>Change</th> <th>Data</th> </tr> </thead> <tbody> <tr> <td>Initial state (<code class=\"highlighter-rouge\">old_val</code>)</td> <td>{ name: “Fred”, admin: true }</td> </tr> <tr> <td>update({name: “George”})</td> <td>{ name: “George”, admin: true }</td> </tr> <tr> <td>update({admin: false})</td> <td>{ name: “George”, admin: false }</td> </tr> <tr> <td>update({name: “Jay”})</td> <td>{ name: “Jay”, admin: false }</td> </tr> <tr> <td><code class=\"highlighter-rouge\">new_val</code></td> <td>{ name: “Jay”, admin: false }</td> </tr> </tbody> </table> <p>Your application would by default receive the object as it existed in the database after the <em>most recent</em> change. The previous two updates would be “squashed” into the third.</p> <p>If you wanted to receive <em>all</em> the changes, including the interim states, you could do so by passing <code class=\"highlighter-rouge\">squash: false</code>. The server will buffer up to 100,000 changes. (This number can be changed with the <code class=\"highlighter-rouge\">changefeed_queue_size</code> optional argument.)</p> <p>A third option is to specify how many seconds to wait between squashes. Passing <code class=\"highlighter-rouge\">squash: 5</code> to the <code class=\"highlighter-rouge\">changes</code> command tells RethinkDB to squash changes together every five seconds. Depending on your application’s use case, this might reduce the load on the server. A number passed to <code class=\"highlighter-rouge\">squash</code> may be a float. Note that the requested interval is not guaranteed, but is rather a best effort.</p> <p><strong>Note:</strong> Changefeeds ignore the <code class=\"highlighter-rouge\">read_mode</code> flag to <code class=\"highlighter-rouge\">run</code>, and always behave as if it is set to <code class=\"highlighter-rouge\">single</code> (i.e., the values they return are in memory on the primary replica, but have not necessarily been written to disk yet). For more details read <a href=\"../../consistency/index\">Consistency guarantees</a>.</p> <h2 id=\"scaling-considerations\">Scaling considerations</h2> <p>Changefeeds perform well as they scale, although they create extra intracluster messages in proportion to the number of servers with open feed connections on each write. This can be mitigated by running a RethinkDB proxy server (the <code class=\"highlighter-rouge\">rethinkdb proxy</code> startup option); read <a href=\"../../sharding-and-replication/index#running-a-proxy-node\">Running a proxy node</a> for details.</p> <p>Since changefeeds are unidirectional with no acknowledgement returned from clients, they cannot guarantee delivery. If you need real-time updating with delivery guarantees, consider using a model that distributes to the clients through a message broker such as <a href=\"https://www.rabbitmq.com/\">RabbitMQ</a>.</p> <h2 id=\"read-more\">Read more</h2> <ul> <li>The <a href=\"../../../api/java/changes/index\">changes</a> command API reference</li> <li><a href=\"../../introduction-to-reql/index\">Introduction to ReQL</a></li> <li><a href=\"../../data-types/index\">ReQL data types</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/changefeeds/java/\" class=\"_attribution-link\">https://rethinkdb.com/docs/changefeeds/java/</a>\n  </p>\n</div>\n","docs/install-drivers/index":"<h1 class=\"title\">Installing RethinkDB client drivers</h1>   <h3>Official drivers</h3> <ul class=\"platform-buttons\"> <li> <a href=\"https://rethinkdb.com/docs/install-drivers/javascript/\">  JavaScript </a> </li> <li> <a href=\"https://rethinkdb.com/docs/install-drivers/ruby/\">  Ruby </a> </li> <li> <a href=\"https://rethinkdb.com/docs/install-drivers/python/\">  Python </a> </li> <li> <a href=\"https://rethinkdb.com/docs/install-drivers/java/\">  Java </a> </li> </ul>   <h3>Current community-supported drivers</h3> <p>These drivers have been updated to use the JSON driver protocol and at least RethinkDB 2.0 ReQL.</p> <ul class=\"platform-buttons\"> <li> <a href=\"https://github.com/bchavez/RethinkDb.Driver\">  C# <span class=\"driver-author\">bchavez</span> </a> </li> <li> <a href=\"https://github.com/mfenniak/rethinkdb-net\">  C# <span class=\"driver-author\">mfenniak</span> </a> </li> <li> <a href=\"https://github.com/AtnNn/librethinkdbxx\">  C++ </a> </li> <li> <a href=\"https://github.com/apa512/clj-rethinkdb\">  Clojure </a> </li> <li> <a href=\"https://github.com/orthecreedence/cl-rethinkdb\">  Common Lisp </a> </li> <li> <a href=\"https://github.com/billysometimes/rethinkdb\">  Dart </a> </li> <li> <a href=\"https://github.com/brandonhamilton/rethinkdb-delphi\">  Delphi </a> </li> <li> <a href=\"https://github.com/hamiltop/rethinkdb-elixir\">  Elixir </a> </li> <li> <a href=\"https://github.com/kureikain/relang\">  Erlang </a> </li> <li> <a href=\"https://github.com/dancannon/gorethink\">  Go </a> </li> <li> <a href=\"http://hackage.haskell.org/package/rethinkdb\">  Haskell </a> </li> <li> <a href=\"https://github.com/grandquista/Lua-ReQL\">  Lua </a> </li> <li> <a href=\"https://github.com/neumino/rethinkdbdash\">  Node.js </a> </li> <li> <a href=\"https://github.com/rgv151/rethinkdb.nim\">  Nim </a> </li> <li> <a href=\"https://github.com/njlg/perl-rethinkdb\">  Perl </a> </li> <li> <a href=\"http://danielmewes.github.io/php-rql/\">  PHP </a> </li> <li> <a href=\"https://github.com/mbq/rethinker\">  R </a> </li> <li> <a href=\"https://github.com/pixelspark/rethink-swift\">  Swift </a> </li> </ul>   <h3>Drivers with limited features</h3> <p>These drivers may not support all of RethinkDB 2.0's ReQL. However, if you wish to work with one of these languages, they may provide a good starting point.</p> <ul class=\"platform-buttons\"> <li> <a href=\"https://github.com/dparnell/rethink-db-client\">  Objective-C </a> </li> <li> <a href=\"https://github.com/kclay/rethink-scala\">  Scala </a> </li> </ul>   <blockquote class=\"infobox \">\n<p><strong>Haven’t installed the server yet?</strong> <a href=\"https://rethinkdb.com/install\">Go do that</a> first!</p> </blockquote>  <h2 id=\"contribute-a-driver\">Contribute a driver</h2> <p>Help make RethinkDB available on more platforms—contribute a driver for another language, or join one of the existing projects. To get started with driver development:</p> <ul> <li>Read the article on <a href=\"../writing-drivers/index\">writing RethinkDB drivers</a>.</li> <li>Subscribe to the <a href=\"https://groups.google.com/forum/?fromgroups=#!forum/rethinkdb-dev\">RethinkDB driver developers group</a>.</li> <li>Read the <a href=\"https://github.com/rethinkdb/rethinkdb/tree/v2.3.x/drivers\">source code for existing drivers</a>.</li> </ul> <p><strong>Thanks to all our amazing driver contributors!</strong></p> <ul> <li>\n<a href=\"https://github.com/apa512\">@apa512</a> (Clojure): <a href=\"https://github.com/apa512/clj-rethinkdb\">https://github.com/apa512/clj-rethinkdb</a>\n</li> <li>\n<a href=\"https://github.com/atnnn\">@atnnn</a> (Haskell): <a href=\"https://github.com/atnnn/haskell-rethinkdb\">https://github.com/atnnn</a>\n</li> <li>\n<a href=\"https://github.com/bchavez\">@bchavez</a> (C#/.NET): <a href=\"https://github.com/bchavez/RethinkDb.Driver\">https://github.com/bchavez/RethinkDb.Driver</a>\n</li> <li>\n<a href=\"https://github.com/billysometimes\">@billysometimes</a> (Dart): <a href=\"https://github.com/billysometimes/rethinkdb\">https://github.com/billysometimes/rethinkdb</a>\n</li> <li>\n<a href=\"https://github.com/brandonhamilton\">@brandonhamilton</a> (Delphi): <a href=\"https://github.com/brandonhamilton/rethinkdb-delphi\">https://github.com/brandonhamilton/rethinkdb-delphi</a>\n</li> <li>\n<a href=\"https://github.com/dancannon\">@dancannon</a> (Go): <a href=\"https://github.com/dancannon/gorethink\">https://github.com/dancannon/gorethink</a>\n</li> <li>\n<a href=\"https://github.com/danielmewes\">@danielmewes</a> (PHP): <a href=\"https://github.com/danielmewes/php-rql\">https://github.com/danielmewes/php-rql</a>\n</li> <li>\n<a href=\"https://github.com/dkhenry\">@dkhenry</a> (Java): <a href=\"https://github.com/dkhenry/rethinkjava\">https://github.com/dkhenry/rethinkjava</a>\n</li> <li>\n<a href=\"https://github.com/dparnell\">@dparnell</a> (Objective-C): <a href=\"https://github.com/dparnell/rethink-db-client\">https://github.com/dparnell/rethink-db-client</a>\n</li> <li>\n<a href=\"https://github.com/grandquista\">@grandquista</a> (Lua): <a href=\"https://github.com/grandquista/Lua-ReQL\">https://github.com/grandquista/Lua-ReQL</a>\n</li> <li>\n<a href=\"https://github.com/hamiltop\">@hamiltop</a> (Elixir): <a href=\"https://github.com/hamiltop/rethinkdb-elixir\">https://github.com/hamiltop/rethinkdb-elixir</a>\n</li> <li>\n<a href=\"https://github.com/jurajmasar\">@jurajmasar</a> (C++): <a href=\"https://github.com/jurajmasar/rethink-db-cpp-driver\">https://github.com/jurajmasar/rethink-db-cpp-driver</a>\n</li> <li>\n<a href=\"https://github.com/kclay\">@kclay</a> (Scala): <a href=\"https://github.com/kclay/rethink-scala\">https://github.com/kclay/rethink-scala</a>\n</li> <li>\n<a href=\"https://github.com/kureikain\">@kureikain</a> (Erlang): <a href=\"https://github.com/kureikain/relang\">https://github.com/kureikain/relang</a>\n</li> <li>\n<a href=\"https://github.com/mbq\">@mbq</a> (R): <a href=\"https://github.com/mbq/rethinker\">https://github.com/mbq/rethinker</a>\n</li> <li>\n<a href=\"https://github.com/neumino\">@neumino</a> (Node.js): <a href=\"https://github.com/neumino/rethinkdbdash\">https://github.com/neumino/rethinkdbdash</a>\n</li> <li>\n<a href=\"https://github.com/njlg\">@njlg</a> (Perl): <a href=\"https://github.com/njlg/perl-rethinkdb\">https://github.com/njlg/perl-rethinkdb</a>\n</li> <li>\n<a href=\"https://github.com/npiv/\">@npiv</a> (Java): <a href=\"https://github.com/npiv/rethink-java-driver\">https://github.com/npiv/rethink-java-driver</a>\n</li> <li>\n<a href=\"https://github.com/orthecreedence\">@orthecreedence</a> (Common Lisp): <a href=\"https://github.com/orthecreedence/cl-rethinkdb\">https://github.com/orthecreedence/cl-rethinkdb</a>\n</li> <li>\n<a href=\"https://github.com/pixelspark\">@pixelspark</a> (Swift): <a href=\"https://github.com/pixelspark/rethink-swift\">https://github.com/pixelspark/rethink-swift</a>\n</li> <li>\n<a href=\"https://github.com/rgv151\">@rgv151</a> (Nim): <a href=\"https://github.com/rgv151/rethinkdb.nim\">https://github.com/rgv151/rethinkdb.nim</a>\n</li> <li>\n<a href=\"https://github.com/unbit\">@unbit</a> (C): <a href=\"https://github.com/unbit/librethinkdb\">https://github.com/unbit/librethinkdb</a>\n</li> <li>The <a href=\"https://github.com/mfenniak/rethinkdb-net/graphs/contributors\">rethinkdb-net team</a> (C#/.NET): <a href=\"https://github.com/mfenniak/rethinkdb-net\">https://github.com/mfenniak/rethinkdb-net</a>\n</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/install-drivers/\" class=\"_attribution-link\">https://rethinkdb.com/docs/install-drivers/</a>\n  </p>\n</div>\n","docs/error-types/index":"<h1 class=\"title\">ReQL error types</h1> <p>RethinkDB has three classes of errors: driver (<code class=\"highlighter-rouge\">ReqlDriverError</code>), query compilation (<code class=\"highlighter-rouge\">ReqlCompileError</code>) and runtime (errors subclassed from <code class=\"highlighter-rouge\">ReqlRuntimeError</code>).</p> <div class=\"toc\">  <ul id=\"markdown-toc\"> <li><a href=\"#error-types\" id=\"markdown-toc-error-types\">Error types</a></li> <li><a href=\"#hierarchy\" id=\"markdown-toc-hierarchy\">Hierarchy</a></li> </ul> </div> <h2 id=\"error-types\">Error types</h2> <p><code class=\"highlighter-rouge\">ReqlCompileError</code>: the query cannot be compiled by the server. This may be due to a syntax error, such as an unrecognized optional argument, or specifying the wrong number of arguments to a command. <strong>Note:</strong> Some drivers may catch certain syntax errors and return a <code class=\"highlighter-rouge\">ReqlDriverError</code> before sending the query to the server.</p> <p><code class=\"highlighter-rouge\">ReqlRuntimeError</code>: the parent class of all runtime errors (all errors on the server unrelated to compilation). Programs may use this to catch any runtime error, but the server will always return a more specific error class.</p> <p><code class=\"highlighter-rouge\">ReqlQueryLogicError</code>: the query contains a logical impossibility, such as adding a number to a string.</p> <p><code class=\"highlighter-rouge\">ReqlNonExistenceError</code>: a <code class=\"highlighter-rouge\">ReqlQueryLogicError</code> that results from accessing a non-existent field or something else that can be handled with the <a href=\"https://rethinkdb.com/api/javascript/default/\">default</a> command.</p> <p><code class=\"highlighter-rouge\">ReqlResourceLimitError</code>: query execution caused a resource limit (for example, the array size limit) to be exceeded.</p> <p><code class=\"highlighter-rouge\">ReqlTimeoutError</code>: the query has timed out. (This error happens on the client, not the server. Depending on driver implementation it may derive from a native error class rather than <code class=\"highlighter-rouge\">ReqlError</code>.)</p> <p><code class=\"highlighter-rouge\">ReqlAvailabilityError</code>: the parent class of <code class=\"highlighter-rouge\">ReqlOpFailedError</code> and <code class=\"highlighter-rouge\">ReqlOpIndeterminateError</code>, indicating that a server in the cluster is unavailable. Programs may use this to catch any availability error, but the server will always return one of this class’s children.</p> <p><code class=\"highlighter-rouge\">ReqlOpFailedError</code>: the operation has failed due to cluster state, configuration or table availability.</p> <p><code class=\"highlighter-rouge\">ReqlOpIndeterminateError</code>: the status of the operation cannot be verified due to cluster state, configuration or table availability.</p> <p><code class=\"highlighter-rouge\">ReqlUserError</code>: an error produced by the <a href=\"https://rethinkdb.com/api/javascript/error/\">error</a> command.</p> <p><code class=\"highlighter-rouge\">ReqlInternalError</code>: query execution stopped due to an internal error, i.e., a server bug.</p> <p><code class=\"highlighter-rouge\">ReqlDriverError</code>: an error has occurred within the driver. This may be a driver bug, or it may be an unfulfillable command, such as an unserializable query.</p> <p><code class=\"highlighter-rouge\">ReqlPermissionsError</code>: the user account does not have the permissions necessary to execute the query. See <a href=\"../permissions-and-accounts/index\">Permissions and user accounts</a> for more information.</p> <p><code class=\"highlighter-rouge\">ReqlAuthError</code>: the client failed authentication with the server. This is a subclass of <code class=\"highlighter-rouge\">ReqlDriverError</code>.</p> <h2 id=\"hierarchy\">Hierarchy</h2> <p>All errors are subclassed from the <code class=\"highlighter-rouge\">ReqlError</code> class.</p> <ul> <li>\n<code class=\"highlighter-rouge\">ReqlError</code> <ul> <li><code class=\"highlighter-rouge\">ReqlCompileError</code></li> <li>\n<code class=\"highlighter-rouge\">ReqlRuntimeError</code> <ul> <li>\n<code class=\"highlighter-rouge\">ReqlQueryLogicError</code> <ul> <li><code class=\"highlighter-rouge\">ReqlNonExistenceError</code></li> </ul> </li> <li><code class=\"highlighter-rouge\">ReqlResourceLimitError</code></li> <li><code class=\"highlighter-rouge\">ReqlUserError</code></li> <li><code class=\"highlighter-rouge\">ReqlInternalError</code></li> <li><code class=\"highlighter-rouge\">ReqlTimeoutError</code></li> <li>\n<code class=\"highlighter-rouge\">ReqlAvailabilityError</code> <ul> <li><code class=\"highlighter-rouge\">ReqlOpFailedError</code></li> <li><code class=\"highlighter-rouge\">ReqlOpIndeterminateError</code></li> </ul> </li> <li><code class=\"highlighter-rouge\">ReqlPermissionsError</code></li> </ul> </li> <li>\n<code class=\"highlighter-rouge\">ReqlDriverError</code> <ul> <li><code class=\"highlighter-rouge\">ReqlAuthError</code></li> </ul> </li> </ul> </li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/error-types/\" class=\"_attribution-link\">https://rethinkdb.com/docs/error-types/</a>\n  </p>\n</div>\n","docs/storing-binary/java/index":"<h1 class=\"title\">Storing binary objects</h1>    <blockquote class=\"infobox infobox-alert\">\n<p><strong>This document has not been fully updated for Java.</strong> The <a href=\"../../../api/java/index\">API documentation</a> for Java is complete, but many ReQL articles still have examples in other languages. We’ll be updating each article after the Java driver is officially released.</p> </blockquote> <p>RethinkDB supports a native binary object type, letting you use ReQL to store binary objects directly in the database. The ReQL driver will transparently translate between the ReQL type and <a href=\"https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html\">bytes</a>.</p> <p>For these examples, we’ll assume that the RethinkDB connection is available in class scope as <code class=\"highlighter-rouge\">conn</code>.</p> <h2 id=\"storing-uploaded-files-in-the-database\">Storing uploaded files in the database</h2> <p>It’s a common task for web applications to accept file uploads from users; with RethinkDB you can store these files directly in the database.</p> <pre data-language=\"\">import java.io.file.*;\n\n/**\n * Store a file in the database.\n *\n * @param filePath  the path to the file to save\n * @param saveName  the filename to store with the file in the database\n * @param userId    user ID value\n */\npublic void saveFile(String[] filePath, String[] saveName, long userId) {\n    byte[] fileData = Files.readAllBytes(filePath);\n    r.table(\"files\").insert(\n        r.hashMap(\"userId\", userId)\n         .with(\"filename\", saveName)\n         .with(\"file\", r.binary(fileData))\n    ).run(conn);\n}\n</pre>  <p>In <code class=\"highlighter-rouge\">saveFile</code>, we pass a path to the uploaded file (which may be in a temporary storage directory, even with a temporary name depending on the uploading library we’ve used), the name to save the file with, and the id of the user who’s uploaded the file. The <a href=\"../../../api/java/binary/index\">binary</a> ReQL command is used to store the file’s contents as a binary object in the <code class=\"highlighter-rouge\">file</code> field.</p> <pre data-language=\"\">def get_user_file_ids(user_id):\n    \"\"\"\n    Retrieve the IDs of previously-saved files for a user as a list of\n    dicts: [{'id': x, 'filename': y}, ...]\n    \"\"\"\n    return r.table('files').filter({'user_id': user_id}).pluck(\n        'id', 'filename').run(conn)\n\ndef get_file(file_id):\n    \"\"\"\n    Retrieve a file by its ID. Returns a dict with 'filename' and 'file'\n    keys.\n    \"\"\"\n    return r.table('files').get(file_id).pluck('file', 'filename').run(conn)\n</pre>  <p>Then, there are two functions for retrieving files: one to retrieve a directory of a user’s uploaded files (<code class=\"highlighter-rouge\">get_user_file_ids</code>) and one to retrieve the actual file itself (<code class=\"highlighter-rouge\">get_file</code>). We don’t have to use <code class=\"highlighter-rouge\">binary</code> again here; the ReQL driver will return the proper data type for the <code class=\"highlighter-rouge\">file</code> field in our object.</p> <h2 id=\"storing-user-avatars\">Storing user avatars</h2> <p>Here’s another, more fun example: adding <a href=\"https://en.gravatar.com/site/implement/images/\">Gravatar</a> avatars to user accounts. We can use <a href=\"https://rethinkdb.com/api/python/http\">http</a> to retrieve them.</p> <pre data-language=\"\">import hashlib\n\ndef add_gravatar(user_id):\n    \"\"\"\n    Add a gravatar field with the binary avatar icon to user accounts if they\n    have an avatar associated with their email address.\n    \"\"\"\n    email = r.table('users').get(user_id)['email'].run(conn)\n    hash = hashlib.md5(email).hexdigest()\n    gravatar_url = 'http://www.gravatar.com/avatar/' + hash + '?d=retro'\n    r.table('users').get(user_id).update({\n        'gravatar': r.http(gravatar_url, result_format='binary')}).run(conn)\n</pre>  <p>Where’s <code class=\"highlighter-rouge\">r.binary</code>? You don’t need it in this case, because <code class=\"highlighter-rouge\">r.http</code> will return a binary object with the <code class=\"highlighter-rouge\">result_format='binary'</code> option. (If the MIME type on the sending server is set correctly, you can even leave that off, and <code class=\"highlighter-rouge\">r.http</code> will figure out the correct type.)</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/storing-binary/java/\" class=\"_attribution-link\">https://rethinkdb.com/docs/storing-binary/java/</a>\n  </p>\n</div>\n","docs/data-modeling/index":"<h1 class=\"title\">Data modeling in RethinkDB</h1> <p>There are two ways to model relationships between documents in RethinkDB:</p> <ul> <li>By using <strong>embedded arrays</strong>.</li> <li>By linking documents stored in <strong>multiple tables</strong> (similar to traditional relational database systems).</li> </ul> <p>Let’s explore the advantages and disadvantages of each approach. We’ll use a simple blog database that stores information about authors and their posts to demonstrate them.</p> <div class=\"toc\">  <ul id=\"markdown-toc\"> <li><a href=\"#using-embedded-arrays\" id=\"markdown-toc-using-embedded-arrays\">Using embedded arrays</a></li> <li><a href=\"#linking-documents-in-multiple-tables\" id=\"markdown-toc-linking-documents-in-multiple-tables\">Linking documents in multiple tables</a></li> <li><a href=\"#read-more\" id=\"markdown-toc-read-more\">Read more</a></li> </ul> </div> <p><img alt=\"Data Modeling Illustration\" class=\"api_command_illustration\" src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/data-modeling.png\"></p> <h2 id=\"using-embedded-arrays\">Using embedded arrays</h2> <p>We can model the relationship between authors and posts by using embedded arrays as follows. Consider this example document in the table <code class=\"highlighter-rouge\">authors</code>:</p> <pre data-language=\"\">{\n  \"id\": \"7644aaf2-9928-4231-aa68-4e65e31bf219\",\n  \"name\": \"William Adama\", \"tv_show\": \"Battlestar Galactica\",\n  \"posts\": [\n    {\"title\": \"Decommissioning speech\", \"content\": \"The Cylon War is long over...\"},\n    {\"title\": \"We are at war\", \"content\": \"Moments ago, this ship received...\"},\n    {\"title\": \"The new Earth\", \"content\": \"The discoveries of the past few days...\"}\n  ]\n}\n</pre>  <p>The <code class=\"highlighter-rouge\">authors</code> table contains a document for each author. Each document contains information about the relevant author and a field <code class=\"highlighter-rouge\">posts</code> with an array of posts for that author. In this case the query to retrieve all authors with their posts is simple:</p> <pre data-language=\"\"># Retrieve all authors with their posts\nr.db(\"blog\").table(\"authors\").run()\n\n# Retrieve a single author with her posts\nr.db(\"blog\").table(\"authors\").get(AUTHOR_ID).run()\n</pre>  <blockquote class=\"infobox \">\n<p><strong>Advantages of using embedded arrays:</strong></p> <ul> <li>Queries for accessing authors and posts tend to be simpler.</li> <li>The data is often colocated on disk. If you have a dataset that doesn’t fit into RAM, data is loaded from disk faster.</li> <li>Any update to the authors document atomically updates both the author data and the posts data.</li> </ul> <p><strong>Disadvantages of using embedded arrays:</strong></p> <ul> <li>Deleting, adding or updating a post requires loading the entire <code class=\"highlighter-rouge\">posts</code> array, modifying it, and writing the entire document back to disk.</li> <li>Because of the previous limitation, it’s best to keep the size of the <code class=\"highlighter-rouge\">posts</code> array to no more than a few hundred documents.</li> </ul> </blockquote> <h2 id=\"linking-documents-in-multiple-tables\">Linking documents in multiple tables</h2> <p>You can use a relational data modeling technique and create two tables to store your data. A typical document in the <code class=\"highlighter-rouge\">authors</code> table would look like this:</p> <pre data-language=\"\">{\n  \"id\": \"7644aaf2-9928-4231-aa68-4e65e31bf219\",\n  \"name\": \"William Adama\",\n  \"tv_show\": \"Battlestar Galactica\"\n}\n</pre>  <p>A typical document in the <code class=\"highlighter-rouge\">posts</code> table would look like this:</p> <pre data-language=\"\">{\n  \"id\": \"064058b6-cea9-4117-b92d-c911027a725a\",\n  \"author_id\": \"7644aaf2-9928-4231-aa68-4e65e31bf219\",\n  \"title\": \"Decommissioning speech\",\n  \"content\": \"The Cylon War is long over...\"\n}\n</pre>  <p>Every post contains an <code class=\"highlighter-rouge\">author_id</code> field that links each post to its author. We can retrieve all posts for a given author as follows:</p> <pre data-language=\"\"># If we have a secondary index on `author_id` in the table `posts`\nr.db(\"blog\").table(\"posts\").\n  get_all(\"7644aaf2-9928-4231-aa68-4e65e31bf219\", index=\"author_id\").\n  run()\n\n# If we didn't build a secondary index on `author_id`\nr.db(\"blog\").table(\"posts\").\n  filter({\"author_id\": \"7644aaf2-9928-4231-aa68-4e65e31bf219\"}).\n  run()\n</pre>  <p>In a relational database, we’d use a <code class=\"highlighter-rouge\">JOIN</code> here; in RethinkDB, we use the <code class=\"highlighter-rouge\">eq_join</code> command. To get all posts along with the author information for William Adama:</p> <pre data-language=\"\"># In order for this query to work, we need to have a secondary index\n# on the `author_id` field of the table `posts`.\nr.db(\"blog\").table(\"authors\").get_all(\"7644aaf2-9928-4231-aa68-4e65e31bf219\").eq_join(\n    'id',\n    r.db(\"blog\").table(\"posts\"),\n    index='author_id'\n).zip().run()\n</pre>  <p>Note that the values for <code class=\"highlighter-rouge\">author_id</code> correspond to the <code class=\"highlighter-rouge\">id</code> field of the author, which allows us to link the documents.</p> <blockquote class=\"infobox \">\n<p><strong>Advantages of using multiple tables:</strong></p> <ul> <li>Operations on authors and posts don’t require loading the data for every post for a given author into memory.</li> <li>There is no limitation on the number of posts, so this approach is more suitable for large amounts of data.</li> </ul> <p><strong>Disadvantages of using multiple tables:</strong></p> <ul> <li>The queries linking the data between the authors and their posts tend to be more complicated.</li> <li>With this approach you cannot atomically update both the author data and and the posts data.</li> </ul> </blockquote> <h2 id=\"read-more\">Read more</h2> <p>There’s a separate article, <a href=\"../table-joins/index\">Table joins in RethinkDB</a>, with much more information about the multiple-table approach, including how to do the ReQL equivalents of inner, outer and cross joins. If you aren’t sure which schema to use, ask us on <a href=\"http://stackoverflow.com/questions/ask\">Stack Overflow</a> or join the <code class=\"highlighter-rouge\">#rethinkdb</code> IRC channel on <a href=\"http://www.freenode.org/\">Freenode</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/data-modeling/\" class=\"_attribution-link\">https://rethinkdb.com/docs/data-modeling/</a>\n  </p>\n</div>\n","docs/sharding-and-replication/index":"<h1 class=\"title\">Scaling, sharding and replication</h1> <div class=\"toc\">  <ul id=\"markdown-toc\"> <li><a href=\"#multi-datacenter-setup\" id=\"markdown-toc-multi-datacenter-setup\">Multi-datacenter setup</a></li> <li><a href=\"#running-a-proxy-node\" id=\"markdown-toc-running-a-proxy-node\">Running a proxy node</a></li> <li><a href=\"#sharding-and-replication-via-the-web-console\" id=\"markdown-toc-sharding-and-replication-via-the-web-console\">Sharding and replication via the web console</a></li> <li><a href=\"#sharding-and-replication-via-reql\" id=\"markdown-toc-sharding-and-replication-via-reql\">Sharding and replication via ReQL</a></li> <li><a href=\"#advanced-configuration\" id=\"markdown-toc-advanced-configuration\">Advanced configuration</a></li> </ul> </div> <p>RethinkDB allows you to shard and replicate your cluster on a per-table basis. Settings can be controlled easily from the web administration console. In addition, ReQL commands for table configuration allow both scripting capability and more fine-grained control over replication, distributing replicas for individual tables across user-defined groups of servers using server tags.</p> <p><img alt=\"Sharding and Replication Illustration\" class=\"api_command_illustration\" src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/shard-and-replicate.png\"></p> <h2 id=\"multi-datacenter-setup\">Multi-datacenter setup</h2> <p>To group servers together in data centers, RethinkDB uses <a href=\"#server-tags\">Server tags</a>. Servers can be “tagged” with one or more group names on startup:</p> <pre data-language=\"\">rethinkdb --server-tag data_center_1\n</pre>  <p>Once a server has been given a tag, the tags may be used to assign table replicas to servers with the same tags using the <code class=\"highlighter-rouge\">reconfigure</code> command. Read the section of this document on <a href=\"#server-tags\">Server tags</a> for more details.</p> <h2 id=\"running-a-proxy-node\">Running a proxy node</h2> <p>Once you have several machines in a RethinkDB cluster, you can improve your cluster’s efficiency by running a <em>proxy node</em> on each application server and having the client application connect to the proxy on <code class=\"highlighter-rouge\">localhost</code>.</p> <p>A proxy node doesn’t store any data; instead it acts as a query router. This offers some performance advantages:</p> <ul> <li>The proxy will send queries directly to the correct machines, reducing intracluster traffic.</li> <li>If you’re using <a href=\"../changefeeds/java/index\">changefeeds</a>, the proxy will de-duplicate changefeed messages sent from other cluster nodes, further reducing traffic.</li> <li>The proxy node can do some query processing itself, reducing CPU load on database servers.</li> </ul> <p>To run a proxy node, simply use the <code class=\"highlighter-rouge\">proxy</code> command line option on startup.</p> <pre data-language=\"\">rethinkdb proxy --join hostname:29015\n</pre>  <h2 id=\"sharding-and-replication-via-the-web-console\">Sharding and replication via the web console</h2> <p>When using the web UI, simply specify the number of shards you want, and based on the data available RethinkDB will determine the best split points to maintain balanced shards. To shard your data:</p> <ul> <li>Go to the table view (<em>Tables</em> → <em>table name</em>).</li> <li>Click on the <em>Reconfigure</em> button.</li> <li>Set the number of shards and replicas you would like.</li> <li>Click on the <em>Apply Configuration</em> button.</li> </ul> <p><img src=\"https://rethinkdb.com/assets/images/docs/administration/shard.png\" alt=\"Shard with the web interface\"></p> <p>A table may have up to 64 shards.</p> <h2 id=\"sharding-and-replication-via-reql\">Sharding and replication via ReQL</h2> <p>There are three primary commands for changing sharding and replication in ReQL. In addition, there are lower-level values that can be changed by manipulating <a href=\"../system-tables/index\">system tables</a>.</p> <ul> <li>The <a href=\"https://rethinkdb.com/api/python/table_create\">table_create</a> (or <a href=\"https://rethinkdb.com/api/javascript/table_create\">tableCreate</a>) command can specify initial values for <code class=\"highlighter-rouge\">shards</code> and <code class=\"highlighter-rouge\">replicas</code>.</li> <li>The <a href=\"https://rethinkdb.com/api/python/reconfigure\">reconfigure</a> command can change the values for <code class=\"highlighter-rouge\">shards</code> and <code class=\"highlighter-rouge\">replicas</code> for an existing table.</li> <li>The <a href=\"https://rethinkdb.com/api/python/rebalance\">rebalance</a> command will rebalance table shards.</li> </ul> <p>For more information about administration via ReQL, consult the API documentation for the individual commands as well as the <a href=\"../administration-tools/index\">Administration tools</a> documentation.</p> <blockquote class=\"infobox \">\n<p><strong>Note</strong>: Currently, RethinkDB implements range shards, but will eventually be switching to hash shards. Follow <a href=\"https://github.com/rethinkdb/rethinkdb/issues/364\">Github issue #364</a> to track progress.</p> </blockquote> <h2 id=\"advanced-configuration\">Advanced configuration</h2> <p>These tasks cannot be performed through the web interface.</p> <h3 id=\"server-tags\">Server tags</h3> <p>All of the servers in a RethinkDB cluster may be given zero or more <em>tags</em> that can be used in table configurations to map replicas to servers specified by tag.</p> <p>A server can be given tags with the <code class=\"highlighter-rouge\">--server-tag</code> option on startup:</p> <pre data-language=\"\">rethinkdb --server-tag us --server-tag us_west\n</pre>  <p>While running, a server’s configuration can be changed by writing to the <code class=\"highlighter-rouge\">rethinkdb.server_config</code> <a href=\"../system-tables/index\">system table</a>.</p> <pre data-language=\"\"># get server by UUID\nr.db('rethinkdb').table('server_config').get(\n    'd5211b11-9824-47b1-9f2e-516a999a6451').update(\n    {tags: ['default', 'us', 'us_west']}.run(conn)\n</pre>  <p>If no tags are specified on startup, the server will be started with one tag, <code class=\"highlighter-rouge\">default</code>. Changing the sharding/replica information from the web UI or from ReQL commands that do not specify server tags will affect all servers with the <code class=\"highlighter-rouge\">default</code> tag.</p> <blockquote class=\"infobox infobox-alert\">\n<p>The web UI only affects servers with the <code class=\"highlighter-rouge\">default</code> tag. If you remove the <code class=\"highlighter-rouge\">default</code> tag from a server or start it without that tag, it will not be used for tables configured through the web UI.</p> </blockquote> <p>When servers are tagged, you can use the tags in the <a href=\"https://rethinkdb.com/api/python/reconfigure\">reconfigure</a> command. To assign 3 replicas of the <code class=\"highlighter-rouge\">users</code> table to <code class=\"highlighter-rouge\">us_west</code> and 2 to <code class=\"highlighter-rouge\">us_east</code>:</p> <pre data-language=\"\">r.table('users').reconfigure(shards=2, replicas={'us_west':3, \n    'us_east':2}, primary_replica_tag='us_east').run(conn)\n</pre>  <p>If you remove <em>all</em> of a server’s tags and then reconfigure all the cluster’s tables, that server will be taken out of service.</p> <pre data-language=\"\"># decommission a server\nr.db('rethinkdb').table('server_config').get(\n    'd5211b11-9824-47b1-9f2e-516a999a6451').update(\n    {tags: []}.run(conn)\nr.db('database').reconfigure(shards=2, replicas=3).run(conn)\n</pre>  <p>Note that tables are configured on creation and when the <code class=\"highlighter-rouge\">reconfigure</code> command is called, but the configurations are <em>not</em> stored by the server otherwise. To reconfigure tables consistently—especially if your configuration uses server tags—you should save the configuration in a script. Read more about this in <a href=\"../administration-tools/index\">Administration tools</a>.</p> <h3 id=\"write-acks-and-durability\">Write acks and durability</h3> <p>Two settings for tables, write acknowledgements and write durability, cannot be set through either the web interface or the <code class=\"highlighter-rouge\">reconfigure</code> command. They must be set by modifying the <code class=\"highlighter-rouge\">table_config</code> table for individual tables.</p> <p>The write acknowledgement setting for a table controls when the cluster acknowledges a write request as fulfilled. There are two possible settings:</p> <ul> <li>\n<code class=\"highlighter-rouge\">majority</code>: The cluster sends the acknowledgement when the majority of replicas have acknowledged it. This is the default.</li> <li>\n<code class=\"highlighter-rouge\">single</code>: The cluster sends the acknowledgement when any replica has acknowledged it.</li> </ul> <p>To change these settings for a table:</p> <pre data-language=\"\">r.db('rethinkdb').table('table_config').get(\n    '31c92680-f70c-4a4b-a49e-b238eb12c023').update(\n        {\"write_acks\": \"single\"}).run(conn)\n</pre>  <p>The <code class=\"highlighter-rouge\">durability</code> setting for a table controls when writes are committed. In <code class=\"highlighter-rouge\">hard</code> durability mode, writes are committed to disk before acknowledgements are sent; in <code class=\"highlighter-rouge\">soft</code> mode, writes are acknowledged immediately upon receipt. The <code class=\"highlighter-rouge\">soft</code> mode is faster but slightly less resilient to failure.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/sharding-and-replication/\" class=\"_attribution-link\">https://rethinkdb.com/docs/sharding-and-replication/</a>\n  </p>\n</div>\n","docs/nested-fields/java/index":"<h1 class=\"title\">Accessing nested fields</h1>    <p><img alt=\"Nested Fields Illustration\" class=\"api_command_illustration\" src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/nested_fields.png\"></p> <p>A ReQL document is a JSON object: a set of key-value pairs, in which each value might be a single value, a list of values, or <em>another</em> set of key-value pairs. When the value of a field contains more fields, we describe these as <em>nested fields.</em></p> <p>Consider a user table with contact information and a list of notes for each user in this format. (We’ll show this in JSON.)</p> <pre data-language=\"\">{\n\t\"id\": 10001,\n\t\"name\": \"Bob Smith\",\n\t\"contact\": {\n\t\t\"phone\": {\n\t\t\t\"work\": \"408-555-1212\",\n\t\t\t\"home\": \"408-555-1213\",\n\t\t\t\"cell\": \"408-555-1214\"\n\t\t},\n\t\t\"email\": {\n\t\t\t\"work\": \"bob@smith.com\",\n\t\t\t\"home\": \"bobsmith@gmail.com\",\n\t\t\t\"other\": \"bobbys@moosecall.net\"\n\t\t},\n\t\t\"im\": {\n\t\t\t\"skype\": \"Bob Smith\",\n\t\t\t\"aim\": \"bobmoose\",\n\t\t\t\"icq\": \"nobodyremembersicqnumbers\"\n\t\t}\n\t},\n\t\"notes\": [\n\t\t{\n\t\t\t\"date\": r.time(2014,1,1,'Z'),\n\t\t\t\"from\": \"John Doe\",\n\t\t\t\"subject\": \"My name is even more boring than Bob's\"\n\t\t},\n\t\t{\n\t\t\t\"date\": r.time(2014,2,2,'Z'),\n\t\t\t\"from\": \"Bob Smith Sr\",\n\t\t\t\"subject\": \"Happy Second of February\"\n\t\t}\n\t]\n}\n</pre>  <p>The contact information is <em>nested,</em> like paths in a file system.</p> <blockquote> <p>contact → phone → work → 408-555-1212</p> </blockquote> <p>You can get the value of a specific field by using <code class=\"highlighter-rouge\">g()</code> (<a href=\"../../../api/java/get_field/index\">getField</a>) successively to “drill down” in the document nesting:</p> <pre data-language=\"\">r.table(\"users\").get(10001).g(\"contact\").g(\"phone\").g(\"work\").run(conn);\n// result: \"408-555-1212\"\n</pre>  <p>With most commands, you can also use <a href=\"../../../api/java/hashmap/index\">hashMap</a> to approximate JSON-style nested syntax:</p> <pre data-language=\"\">r.table(\"users\").get(10001).pluck(\n    r.hashMap(\"contact\", r.hashMap(\"phone\", \"work\"))\n).run(conn);\n</pre>  <p>Result:</p> <pre data-language=\"\">{\n\t\"contact\": {\n\t\t\"phone\": {\n\t\t\t\"work\": \"408-555-1212\"\n\t\t}\n\t}\n}\n</pre>  <p>In that example, when you’re trying to get at just one value, the <code class=\"highlighter-rouge\">hashMap</code> style doesn’t offer much advantage. But you can use it to retrieve <em>multiple</em> values at the same nesting level. For instance, you can get just Bob’s work and cell numbers, but not home:</p> <pre data-language=\"\">r.table(\"users\").get(10001).pluck(\n    r.hashMap(\"contact\", r.hashMap(\"phone\", r.array(\"work\", \"cell\")))\n).run(conn);\n\n</pre>  <p>Result:</p> <pre data-language=\"\">{\n\t\"contact\": {\n\t\t\"phone\": {\n\t\t\t\"cell\": \"408-555-1214\",\n\t\t\t\"work\": \"408-555-1212\"\n\t\t}\n\t}\n}\n</pre>  <p>Or, Bob’s work phone and Skype handle:</p> <pre data-language=\"\">r.table(\"users\").get(10001).pluck(\n    r.hashMap(\"contact\", r.array(\n        r.hashMap(\"phone\", \"work\").with(\"im\", \"skype\")\n    ))\n).run(conn);\n</pre>  <pre data-language=\"\">{\n\t\"contact\": {\n\t\t\"im\": {\n\t\t\t\"skype\": \"Bob Smith\"\n\t\t},\n\t\t\"phone\": {\n\t\t\t\"work\": \"408-555-1212\"\n\t\t}\n\t}\n}\n</pre>  <p>And there’s more! You can filter on fields of objects inside a list. Suppose you wanted just the dates and senders of notes to Bob:</p> <pre data-language=\"\">r.table(\"users\").get(10001).pluck(\n    r.hashMap(\"notes\", r.array(\"date\", \"from\"))\n).run(conn);\n</pre>  <pre data-language=\"\">{\n\t\"notes\": [\n\t\t{\n\t\t\t\"date\": Wed Jan 01 2014 00:00:00 GMT+00:00 ,\n\t\t\t\"from\":  \"John Doe\"\n\t\t},\n\t\t{\n\t\t\t\"date\": Sun Feb 02 2014 00:00:00 GMT+00:00 ,\n\t\t\t\"from\":  \"Bob Smith Sr.\"\n\t\t}\n\t]\n}\n</pre>  <p>If you ask for a nested field that doesn’t exist, you will get an empty object or array (this is <em>not</em> the same as a <code class=\"highlighter-rouge\">null</code> value):</p> <pre data-language=\"\">r.table(\"users\").get(10001).pluck(\n    r.hashMap(\"contact\", r.array(\n        r.hashMap(\"phone\", \"work\").with(\"im\", \"msn\")\n    ))\n).run(conn);\n</pre>  <pre data-language=\"\">{\n\t\"contact\": {\n\t\t\"im\": { },\n\t\t\"phone\": {\n\t\t\t\"work\": \"408-555-1212\"\n\t\t}\n\t}\n}\n</pre>  <p>Be aware this behavior holds true when retrieving data from lists, too. If you extracted <code class=\"highlighter-rouge\">subject</code> from <code class=\"highlighter-rouge\">notes</code> above and Bob had 10 notes, 7 of which contained no <code class=\"highlighter-rouge\">subject</code> field, you would still get a list of 10 objects: 7 of them would be <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"err\">subject</span><span class=\"p\">:</span><span class=\"err\">&lt;text&gt;</span><span class=\"p\">}</span></code> and 3 of them would be empty, i.e., <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"p\">}</span></code>.</p> <p>Also, another caveat: the nested field syntax doesn’t guarantee identical schemas between documents that it returns. It’s possible to describe a path that matches objects that have different schema, as seen in this simple example.</p> <pre data-language=\"\">r.expr(\n    r.array(\n        r.hashMap(\"a\",\n            r.hashMap(\"b\", 1)\n            .with(\"c\", 2)\n        ),\n        r.hashMap(\"a\",\n            r.array(\n                r.hashMap(\"b\", 1)\n                .with(\"c\", 2)\n            )\n        )\n    )\n).pluck(r.hashMap(\"a\", r.hashMap(\"b\", true))).run(conn);\n</pre>  <p>Result:</p> <pre data-language=\"\">[\n    {\n        \"a\": {\n            \"b\": 1\n        }\n    },\n    {\n        \"a\": [\n            {\n                \"b\": 1\n            }\n        ]\n    }\n]\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/nested-fields/java/\" class=\"_attribution-link\">https://rethinkdb.com/docs/nested-fields/java/</a>\n  </p>\n</div>\n","docs/map-reduce/index":"<h1 class=\"title\">Map-reduce in RethinkDB</h1> <p><a href=\"http://en.wikipedia.org/wiki/MapReduce\">Map-reduce</a> is a way to summarize and run aggregation functions on large data sets, potentially stored across many servers, in an efficient fashion. It works by processing the data on each server in parallel and then combining those results into one set. It was originally designed by <a href=\"http://research.google.com/archive/mapreduce.html\">Google</a> and later implemented in database systems such as <a href=\"http://hadoop.apache.org/\">Apache Hadoop</a> and <a href=\"http://www.mongodb.org/\">MongoDB</a>.</p> <div class=\"toc\">  <ul id=\"markdown-toc\"> <li><a href=\"#a-simple-example\" id=\"markdown-toc-a-simple-example\">A simple example</a></li> <li><a href=\"#an-example-with-group\" id=\"markdown-toc-an-example-with-group\">An example with group</a></li> <li><a href=\"#a-more-complex-example\" id=\"markdown-toc-a-more-complex-example\">A more complex example</a></li> <li><a href=\"#how-gmr-queries-are-executed\" id=\"markdown-toc-how-gmr-queries-are-executed\">How GMR queries are executed</a></li> <li><a href=\"#read-more\" id=\"markdown-toc-read-more\">Read more</a></li> </ul> </div> <p><img src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/map-reduce.png\" alt=\"Map-reduce Illustration\" class=\"api_command_illustration\"></p> <p>In RethinkDB, map-reduce queries operate on sequences and are composed of two or three parts:</p> <ul> <li>An optional <strong>group</strong> operation which partitions the elements of the sequence into multiple groups.</li> <li>A <strong>map</strong> operation which filters and/or transforms the elements in the sequence (or each group) into a new sequence (or grouped sequences).</li> <li>A <strong>reduce</strong> operation which aggregates the values produced by <strong>map</strong> into a single value (or a single value for each group).</li> </ul> <p>Some other map-reduce implementations, like Hadoop’s, use the mapping step to perform grouping as well; RethinkDB’s implementation explicitly separates them. This is sometimes referred to as “group-map-reduce,” or GMR. RethinkDB distributes GMR queries over tables and shards efficiently. You write GMR queries with the <a href=\"https://rethinkdb.com/api/python/group/\">group</a>, <a href=\"https://rethinkdb.com/api/python/map/\">map</a> and <a href=\"https://rethinkdb.com/api/python/reduce/\">reduce</a> commands, although as we’ll see in our examples, many ReQL commands compile to GMR queries behind the scenes—many common map-reduce cases can be accomplished in one or two lines of ReQL.</p> <h2 id=\"a-simple-example\">A simple example</h2> <p>Suppose you are running a blog and would like to retrieve the number of posts. A map-reduce query to perform this operation would consist of the following steps:</p> <ul> <li>A <strong>map</strong> step that transforms each post into the number <code class=\"highlighter-rouge\">1</code> (since we’re counting each post once).</li> <li>A <strong>reduce</strong> step that sums the number of posts.</li> </ul> <p>We won’t need a <strong>group</strong> step for this example.</p> <p>For our blog, we have a table <code class=\"highlighter-rouge\">posts</code> that contains blog posts. Here’s an example document from the table. (We’ll use Python for this example, but other ReQL drivers are very similar.)</p> <pre data-language=\"\">{\n    \"id\": \"7644aaf2-9928-4231-aa68-4e65e31bf219\"\n    \"title\": \"The line must be drawn here\"\n    \"content\": \"This far, no further! ...\"\n    \"category\": \"Fiction\"\n}\n</pre>  <p>First, we’ll map each post to the number <code class=\"highlighter-rouge\">1</code>:</p> <pre data-language=\"\">r.table('posts').map(lambda post: 1)\n</pre>  <p>And sum the posts with <code class=\"highlighter-rouge\">reduce</code>:</p> <pre data-language=\"\">r.table('posts').map(lambda post: 1).reduce(lambda a, b: a + b).run(conn)\n</pre>  <p>For many cases where a GMR query might be used, ReQL provides even simpler aggregation functions. This example is really more easily written using <a href=\"https://rethinkdb.com/api/python/count\">count</a>:</p> <pre data-language=\"\">r.table('posts').count().run(conn)\n</pre>  <p>RethinkDB has shortcuts for five common aggregation operations: <code class=\"highlighter-rouge\">count</code>, <code class=\"highlighter-rouge\">sum</code>, <code class=\"highlighter-rouge\">avg</code>, <code class=\"highlighter-rouge\">min</code>, and <code class=\"highlighter-rouge\">max</code>. In practice, you’ll often be able to use these with <code class=\"highlighter-rouge\">group</code> these rather than writing your own <code class=\"highlighter-rouge\">map</code> and <code class=\"highlighter-rouge\">reduce</code> functions.</p> <h2 id=\"an-example-with-group\">An example with group</h2> <p>Suppose on the blog in the last example, you’d like to retrieve the number of posts <em>per category.</em> A map-reduce query to perform this operation would consist of the following steps:</p> <ul> <li>A <strong>group</strong> step that groups the posts based on their category.</li> <li>The <strong>map</strong> step from above.</li> <li>A <strong>reduce</strong> step that sums the number of posts for each group.</li> </ul> <p>First, we’ll <code class=\"highlighter-rouge\">group</code> the posts:</p> <pre data-language=\"\">r.table('posts').group(lambda post: post['category'])\n</pre>  <p>Then as before, we map each post to the number <code class=\"highlighter-rouge\">1</code>. Commands after the <code class=\"highlighter-rouge\">group</code> command will be applied to each grouped set.</p> <pre data-language=\"\">r.table('posts').group(lambda post: post['category']).map(\n    lambda post: 1)\n</pre>  <p>And again, we sum the posts with <code class=\"highlighter-rouge\">reduce</code>, which produces totals for each group this time:</p> <pre data-language=\"\">r.table('posts').group(lambda post: post['category']).map(\n    lambda post: 1).reduce(lambda a, b: a + b).run(conn)\n</pre>  <p>And, of course, we can use <code class=\"highlighter-rouge\">count</code> to shorten that. We can actually shorten it even more: ReQL will let you provide <code class=\"highlighter-rouge\">group</code> with the name of the field rather than a lambda function. So the simplified function is:</p> <pre data-language=\"\">r.table('posts').group('category').count().run(conn)\n</pre>  <h2 id=\"a-more-complex-example\">A more complex example</h2> <p>This is based on an example from <a href=\"http://docs.mongodb.org/manual/tutorial/map-reduce-examples/\">MongoDB</a>. Imagine a table of orders, with each document in the table structured like this:</p> <pre data-language=\"\">{\n    \"customer_id\":  \"cs11072\",\n    \"date\": r.time(2014, 27, 2, 12, 13, 09, '-07:00'),\n    \"id\": 103,\n    \"items\": [\n        {\n            \"price\": 91,\n            \"quantity\": 1,\n            \"item_id\":  \"sku10491\"\n        } ,\n        {\n            \"price\": 9,\n            \"quantity\": 3,\n            \"item_id\":  \"sku14667\"\n        } ,\n        {\n            \"price\": 37 ,\n            \"quantity\": 3,\n            \"item_id\":  \"sku16857\"\n        }\n    ],\n    \"total\": 229\n}\n</pre>  <p>First, let’s return the total price per customer. Since this is pre-computed per order in the <code class=\"highlighter-rouge\">total</code> field, this is easily done with one of RethinkDB’s aggregation functions.</p> <pre data-language=\"\">r.table('orders').group('customer_id').sum('total').run(conn)\n</pre>  <p>Now for something more complicated: calculating the total and average quantities sold per item. For this, we’ll use the <a href=\"https://rethinkdb.com/api/python/concat_map\">concat_map</a> function, which combines mapping and concatenation together. In this case, we want to produce a sequence of all the items sold throughout all the orders with their item IDs and quantities. We’ll also add a “count” field set to <code class=\"highlighter-rouge\">1</code>; we’ll use this the same way we used the mapping of each post in the blog example.</p> <pre data-language=\"\">r.table('orders').concat_map(lambda order:\n    order['items'].map(lambda item:\n        {'item_id': item['item_id'], 'quantity': item['quantity'], 'count': 1}\n    ))\n</pre>  <p>The inner <code class=\"highlighter-rouge\">map</code> function is just being used to iterate through the items in each order. At this point, our query will return a list of objects, each object with three fields: <code class=\"highlighter-rouge\">item_id</code>, <code class=\"highlighter-rouge\">quantity</code> and <code class=\"highlighter-rouge\">count</code>.</p> <p>Now, we’ll <code class=\"highlighter-rouge\">group</code> by the <code class=\"highlighter-rouge\">item_id</code> field and use a custom <code class=\"highlighter-rouge\">reduce</code> function to sum the quantities and counts.</p> <pre data-language=\"\">r.table('orders').concat_map(lambda order:\n    order['items'].map(lambda item:\n        {'item_id': item['item_id'], 'quantity': item['quantity'], 'count': 1}\n    )).group('item_id').reduce(lambda left, right: {\n        'item_id': left['item_id'],\n        'quantity': left['quantity'] + right['quantity'],\n        'count': left['count'] + right['count']\n    })\n</pre>  <p>Finally, we’ll use <a href=\"https://rethinkdb.com/api/python/ungroup/\">ungroup</a> to turn this grouped data into an array of objects with <code class=\"highlighter-rouge\">group</code> and <code class=\"highlighter-rouge\">reduction</code> keys. The <code class=\"highlighter-rouge\">group</code> field will be the item ID for each group; the <code class=\"highlighter-rouge\">reduction</code> field will have all the items from the <code class=\"highlighter-rouge\">concat_map</code> function that belong to each group. Then we’ll use <code class=\"highlighter-rouge\">map</code> once more to iterate through that array, computing the average on this pass.</p> <pre data-language=\"\">r.table('orders').concat_map(lambda order:\n    order['items'].map(lambda item:\n        {'item_id': item['item_id'], 'quantity': item['quantity'], 'count': 1}\n    )).group('item_id').reduce(lambda left, right: {\n        'item_id': left['item_id'],\n        'quantity': left['quantity'] + right['quantity'],\n        'count': left['count'] + right['count']\n    }).ungroup().map(lambda group: {\n        'item_id': group['group'],\n        'quantity': group['reduction']['quantity'],\n        'avg': group['reduction']['quantity'] / group['reduction']['count']\n    }).run(conn)\n</pre>  <p>The output will be in this format:</p> <pre data-language=\"\">[\n    {\n        \"avg\": 3.3333333333333,\n        \"quantity\": 20,\n        \"item_id\": \"sku10023\"\n    },\n    {\n        \"avg\": 2.2142857142857,\n        \"quantity\": 31,\n        \"item_id\": \"sku10042\"\n    },\n    ...\n]\n</pre>  <p>(Note that JavaScript, or another language where <code class=\"highlighter-rouge\">+</code> and <code class=\"highlighter-rouge\">/</code> operators aren’t overridden to work with ReQL, will require you to use <a href=\"https://rethinkdb.com/api/javascript/div\">div</a> and <a href=\"https://rethinkdb.com/api/javascript/add\">add</a>.)</p> <h2 id=\"how-gmr-queries-are-executed\">How GMR queries are executed</h2> <p>RethinkDB’s GMR queries are distributed and parallelized across shards and CPU cores whenever possible. While this allows them to execute efficiently, it’s important to keep in mind that the <code class=\"highlighter-rouge\">reduce</code> function is <em>not</em> called on the elements of its input stream from left to right. It’s called on either the elements of the stream <em>in any order</em> or on the output of previous calls to the function.</p> <p>Here is an example of an <strong>incorrect</strong> way to write the previous grouped map-reduce query, simply incrementing the first value passed to the reduction function:</p> <pre data-language=\"\"># Incorrect!\nr.table('posts').group(lambda post: post['category']).map(\n    lambda post: 1).reduce(lambda a, b: a + 1).run(conn)\n</pre>  <p>Suppose we have ten documents in a single category in a sharded table. Four of the documents are on shard 1; six are on shard 2. When the incorrect query is executed, this is its path:</p> <ol> <li>The number of documents on shard 1 is computed. The query returns the value <code class=\"highlighter-rouge\">4</code> for the shard.</li> <li>The number of documents on shard 2 is computed. The query returns the value <code class=\"highlighter-rouge\">6</code> for the shard.</li> <li>The final reduction step is executed to combine the values of the two shards. Instead of computing <code class=\"highlighter-rouge\">4 + 6</code>, the query executes <code class=\"highlighter-rouge\">4 + 1</code>.</li> </ol> <blockquote class=\"infobox infobox-alert\">\n<p><strong>Be careful!</strong> Make sure your reduction function doesn’t assume the reduction step executes from left to right!</p> </blockquote> <h2 id=\"read-more\">Read more</h2> <p>For more information about map-reduce in general, read the <a href=\"http://en.wikipedia.org/wiki/MapReduce\">Wikipedia article</a>. For more information about RethinkDB’s implementation, browse our API documentation.</p> <ul> <li><a href=\"https://rethinkdb.com/api/python/group/\">group</a></li> <li><a href=\"https://rethinkdb.com/api/python/map/\">map</a></li> <li><a href=\"https://rethinkdb.com/api/python/reduce/\">reduce</a></li> <li><a href=\"https://rethinkdb.com/api/python/ungroup/\">ungroup</a></li> <li><a href=\"https://rethinkdb.com/api/python/concat_map\">concat_map</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/map-reduce/\" class=\"_attribution-link\">https://rethinkdb.com/docs/map-reduce/</a>\n  </p>\n</div>\n","docs/data-types/index":"<h1 class=\"title\">ReQL data types</h1> <p>RethinkDB’s basic data types include numbers, strings, boolean values, objects, arrays, and the <code class=\"highlighter-rouge\">null</code> value. In addition, it stores RethinkDB-specific data types including tables, streams, selections, binary objects, time objects, geometry data types, and grouped data.</p> <p>The <code class=\"highlighter-rouge\">typeOf</code> command can be appended to any ReQL command to display what data type that command will returns. For instance (in JavaScript):</p> <pre data-language=\"\">r.table('users').get(1).typeOf().run(conn, callback)\n</pre>  <p>Returns <code class=\"highlighter-rouge\">\"SELECTION&lt;OBJECT&gt;\"</code>. (Yes, the type of the <code class=\"highlighter-rouge\">typeOf</code> command is <code class=\"highlighter-rouge\">\"STRING\"</code>.)</p> <div class=\"toc\">  <ul id=\"markdown-toc\"> <li><a href=\"#basic-data-types\" id=\"markdown-toc-basic-data-types\">Basic data types</a></li> <li><a href=\"#rethinkdb-specific-data-types\" id=\"markdown-toc-rethinkdb-specific-data-types\">RethinkDB-specific data types</a></li> <li><a href=\"#abstract-data-types\" id=\"markdown-toc-abstract-data-types\">Abstract data types</a></li> <li><a href=\"#sorting-order\" id=\"markdown-toc-sorting-order\">Sorting order</a></li> <li><a href=\"#geometry-data-types\" id=\"markdown-toc-geometry-data-types\">Geometry data types</a></li> <li><a href=\"#working-with-streams\" id=\"markdown-toc-working-with-streams\">Working with streams</a></li> </ul> </div> <h2 id=\"basic-data-types\">Basic data types</h2> <ul> <li> <p><strong>Numbers</strong> are any real number: <code class=\"highlighter-rouge\">5</code>, <code class=\"highlighter-rouge\">3.14159</code>, <code class=\"highlighter-rouge\">-42</code>. RethinkDB uses double precision (64-bit) floating point numbers internally. (Neither infinity nor <a href=\"http://en.wikipedia.org/wiki/NaN\">NaN</a> are allowed.)</p> </li> <li> <p><strong>Strings</strong> are any valid UTF-8 string: <code class=\"highlighter-rouge\">\"superhero\"</code>, <code>\"ünnëcëssärÿ ümläüts\"</code>. Strings may include the null code point (U+0000).</p> </li> <li> <p><strong>Booleans</strong> are <code class=\"highlighter-rouge\">true</code> and <code class=\"highlighter-rouge\">false</code>.</p> </li> <li> <p><strong>Null</strong> is a value distinct from the number zero, an empty set, or a zero-length string. Natively this might be <code class=\"highlighter-rouge\">null</code>, <code class=\"highlighter-rouge\">nil</code> or <code class=\"highlighter-rouge\">None</code>, depending on the language. it is often used to explicitly denote the absence of any other value. The root node of a tree structure might have a parent of <code class=\"highlighter-rouge\">null</code>, or a required but as yet non-initialized key might be given a value of <code class=\"highlighter-rouge\">null</code>.</p> </li> <li> <p><strong>Objects</strong> are JSON data objects, standard key-value pairs.</p> <p><code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"err\">username</span><span class=\"p\">:</span><span class=\"err\">'bob'</span><span class=\"p\">,</span><span class=\"err\">posts</span><span class=\"p\">:</span><span class=\"mi\">23</span><span class=\"p\">,</span><span class=\"err\">favorites</span><span class=\"p\">:</span><span class=\"p\">{</span><span class=\"err\">color</span><span class=\"p\">:</span><span class=\"err\">'blue'</span><span class=\"p\">,</span><span class=\"err\">food</span><span class=\"p\">:</span><span class=\"err\">'tacos'</span><span class=\"p\">},</span><span class=\"err\">friends</span><span class=\"p\">:</span><span class=\"p\">[</span><span class=\"err\">'agatha'</span><span class=\"p\">,</span><span class=\"err\">'jason'</span><span class=\"p\">]</span><span class=\"p\">}</span></code></p> <p>Any valid JSON object is a valid RethinkDB object, so values can be any of the basic values, arrays, or other objects. Documents in a RethinkDB database are objects. Like JSON, key names must be strings, not integers.</p> </li> <li> <p><strong>Arrays</strong> are lists of zero or more elements.</p> <p><code class=\"highlighter-rouge\">\n  [1, 2, 3]\n  []\n  [{user: 'Bob', posts: 23}, {user: 'Jason', posts: 10}]\n </code></p> <p>Again, anything valid in a JSON array is valid in RethinkDB: the elements may be any of the basic values, objects, or other arrays. Arrays in RethinkDB are loaded fully into memory before they’re returned to the user, so they’re inefficient at large sizes. RethinkDB defaults to supporting arrays of up to 100,000 elements; this may be set to a different value at runtime for reading by using the <code class=\"highlighter-rouge\">array_limit</code> option to <a href=\"https://rethinkdb.com/api/javascript/run\">run</a>.</p> </li> </ul> <h2 id=\"rethinkdb-specific-data-types\">RethinkDB-specific data types</h2> <ul> <li> <p><strong>Databases</strong> are RethinkDB databases. This is the return type of <code class=\"highlighter-rouge\">db</code>.</p> </li> <li> <p><strong>Tables</strong> are RethinkDB database tables. They behave like selections—they’re writable, as you can insert and delete documents in them. ReQL methods that use an <a href=\"../secondary-indexes/java/index\">index</a>, like <code class=\"highlighter-rouge\">getAll</code>, are only available on tables.</p> </li> <li> <p><strong>Streams</strong> are lists like arrays, but they’re loaded in a lazy fashion. Operations that return streams return a <em>cursor.</em> A cursor is a pointer into the result set. Instead of reading the results all at once like an array, you loop over the results, retrieving the next member of the set with each iteration. This makes it possible to efficiently work with large result sets. (See “Working with Streams,” below, for some tips.) Streams are read-only; you can’t pass one as an input to an ReQL command meant to modify its input like <code class=\"highlighter-rouge\">update</code> or <code class=\"highlighter-rouge\">delete</code>.</p> </li> <li> <p><strong>Selections</strong> represent subsets of tables, for example, the return values of <code class=\"highlighter-rouge\">filter</code> or <code class=\"highlighter-rouge\">get</code>. There are three kinds of selections: <strong>Selection&lt;Object&gt;</strong>, <strong>Selection&lt;Array&gt;</strong> and <strong>Selection&lt;Stream&gt;</strong>. The difference between selections and their non-selection counterparts is that selections are writable—their return values can be passed as inputs to ReQL commands that modify the database. For instance, the <code class=\"highlighter-rouge\">get</code> command will return a Selection&lt;Object&gt; that could then be passed to an <code class=\"highlighter-rouge\">update</code> or <code class=\"highlighter-rouge\">delete</code> command. (<em>Note:</em> <strong>singleSelection</strong> is an older term for Selection&lt;Object&gt;; they mean the same thing.)</p> <p>Some commands (<code class=\"highlighter-rouge\">orderBy</code> and <code class=\"highlighter-rouge\">between</code>) return a data type similar to a selection called a <strong>table_slice</strong>. In most cases a table_slice behaves identically to a selection, but <code class=\"highlighter-rouge\">between</code> can only be called on a table or a table_slice, not any other kind of selection.</p> </li> <li> <p><strong>Pseudotypes</strong> cover several kinds of other ReQL-specific data types which are generally composites or special cases of other types:</p> <ul> <li> <p><strong>Binary objects</strong> are similar to BLOBs in SQL databases: files, images and other binary data. See <a href=\"../storing-binary/java/index\">Storing binary objects</a> for details.</p> </li> <li> <p><strong>Times</strong> are RethinkDB’s native date/time type, stored with millisecond precision. You can use native date/time types in supported languages, as the conversion will be done by the driver. See <a href=\"../dates-and-times/java/index\">Dates and times in RethinkDB</a> for details.</p> </li> <li> <p><strong>Geometry data types</strong> for geospatial support, including points, lines, and polygons. (See below for more detail.)</p> </li> <li> <p><strong>Grouped data</strong> is created by the <code class=\"highlighter-rouge\">group</code> command, which partitions a stream into multiple groups based on specified fields or functions. ReQL commands called on <code class=\"highlighter-rouge\">GROUPED_DATA</code> operate on each group individually. For more details, read the <a href=\"https://rethinkdb.com/api/javascript/group\">group</a> documentation. Depending on the input to <code class=\"highlighter-rouge\">group</code>, grouped data may have the type of <code class=\"highlighter-rouge\">GROUPED_STREAM</code>.</p> </li> </ul> </li> </ul> <h2 id=\"abstract-data-types\">Abstract data types</h2> <p>In the ReQL API documentation and some error messages, you’ll come across terms for “data types” that are actually <em>classes</em> of other data types.</p> <ul> <li> <p>A <strong>datum</strong> is a catch-all term for most non-stream data types, including all basic data types, pseudotypes, objects, and non-stream selections. Datum types do <em>not</em> include streams (including Selection&lt;Stream&gt;), databases, tables and table slices, and functions.</p> </li> <li> <p>A <strong>Sequence</strong> is any list data type: arrays, streams, selections, and tables.</p> </li> <li> <p><strong>Minval</strong> and <strong>maxval</strong> are used with some commands such as <code class=\"highlighter-rouge\">between</code> to specify absolute lower and upper bounds (e.g., <code class=\"highlighter-rouge\">between(r.minval, 1000)</code> would return all documents in a table whose primary key is less than 1000).</p> </li> <li> <p><strong>Functions</strong> can be passed as parameters to certain ReQL commands.</p> </li> </ul> <p>You may also see <strong>Any</strong> used for commands that work with any data type.</p> <h2 id=\"sorting-order\">Sorting order</h2> <p>Arrays (and strings) sort lexicographically. Objects are coerced to arrays before sorting. Strings are sorted by UTF-8 codepoint and do not support Unicode collations.</p> <p>Mixed sequences of data sort in the following order:</p> <ul> <li>arrays</li> <li>booleans</li> <li>null</li> <li>numbers</li> <li>objects</li> <li>binary objects</li> <li>geometry objects</li> <li>times</li> <li>strings</li> </ul> <p>This is the alphabetical order of their type name as returned by the <code class=\"highlighter-rouge\">typeOf()</code> command. (Binary objects, geometry objects and times are “pseudotypes,” and return <code class=\"highlighter-rouge\">PTYPE&lt;BINARY&gt;</code>, <code class=\"highlighter-rouge\">PTYPE&lt;GEOMETRY&gt;</code> and <code class=\"highlighter-rouge\">PTYPE&lt;TIME&gt;</code>, respectively.)</p> <p>This example in the Data Explorer demonstrates sorting mixed types:</p> <pre data-language=\"\">r.expr([\n    {val: 1},\n    {val: 2},\n    {val: null},\n    {val: 'foo'},\n    {val: 'bar'},\n    {val: [1, 2, 4]},\n    {val: [1, 2, 3]},\n    {val: true},\n    {val: r.now()},\n    {val: {foo: 100}},\n    {val: {bar: 200}}\n]).orderBy('val')\n</pre>  <pre data-language=\"\">[\n    {\"val\":[1,2,3]},\n    {\"val\":[1,2,4]},\n    {\"val\":true},\n    {\"val\":null},\n    {\"val\":1},\n    {\"val\":2},\n    {\"val\":{\"bar\":200}},\n    {\"val\":{\"foo\":100}},\n    {\"val\":{\"$reql_type$\":\"TIME\"}},\n    {\"val\":\"bar\"},\n    {\"val\":\"foo\"}\n]\n</pre>  <h2 id=\"geometry-data-types\">Geometry data types</h2> <p>For more information on these data types, read about RethinkDB’s <a href=\"../geo-support/java/index\">geospatial support</a>.</p> <ul> <li> <p><strong>Points</strong> are denoted by a single coordinate pair, two floating point numbers indicating longitude (−180 through 180) and latitude (−90 through 90).</p> </li> <li> <p><strong>Lines</strong> are a sequence of two or more points, denoted by either point objects or coordinate pairs.</p> </li> <li> <p><strong>Polygons</strong> are multipoint lines denoted by a sequence of three or more points, denoted by either point objects or coordinate pairs, which do not intersect with themselves. The first and last coordinate pairs of a polygon are equal.</p> <p>Polygons can also have holes in them, created when a polygon entirely enclosed by another one is “punched out” of the larger one using the <code class=\"highlighter-rouge\">polygonSub</code> command. (This is the only way to create a polygon with a hole in it.)</p> </li> </ul> <p>In the ReQL API documentation you’ll also see a “pseudotype” called <strong>Geometry,</strong> which is a collective for all of the geometry data types. Those commands will work with points, lines and polygons.</p> <h2 id=\"working-with-streams\">Working with streams</h2> <p>Streams use “lazy loading,” a concept you may have run across in other database interfaces. Instead of returning an entire result set from a query, streams return an <a href=\"http://en.wikipedia.org/wiki/Iterator\">iterator</a> referred to as a “cursor,” a pointer into the data set.</p> <p>Different languages support iterators in different ways, but the fundamental concept is always the same: the result set is traversed in a loop that returns one result set at a time. In Python, you might loop through a stream this way:</p> <pre data-language=\"\">players = r.table('players').run(conn)\nfor player in players:\n\tprint player\n</pre>  <p>In Ruby, you would use a block:</p> <pre data-language=\"\">players = r.table('players').run(conn)\nplayers.each do |player|\n\tputs player\nend\n</pre>  <p>JavaScript has no native iterator, but ReQL implements an <a href=\"https://rethinkdb.com/api/javascript/each\">each</a> command similar to <a href=\"http://api.jquery.com/each/\">jQuery</a>’s.</p> <pre data-language=\"\">r.table('players').run(conn, function(err, cursor) {\n\tcursor.each(function(err, player) {\n\t\tif (err) throw err;\n\t\tconsole.log(player);\n\t});\n});\n</pre>  <p>Smaller result sets can be turned into an array directly, with native language constructs in Python and Ruby (<code class=\"highlighter-rouge\">list(players)</code> and <code class=\"highlighter-rouge\">players.to_a</code> respectively) or ReQL commands in JavaScript and Java (<code class=\"highlighter-rouge\">players.toArray()</code> and <code class=\"highlighter-rouge\">players.toList()</code> respectively; see <a href=\"https://rethinkdb.com/api/javascript/to_array/\">toArray</a> and <a href=\"../../api/java/to_array/index\">toList</a> documentation).</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/data-types/\" class=\"_attribution-link\">https://rethinkdb.com/docs/data-types/</a>\n  </p>\n</div>\n","docs/geo-support/java/index":"<h1 class=\"title\">Geospatial queries</h1>    <p>RethinkDB supports spatial and geographic queries through geometry object support.</p> <div class=\"toc\">  <ul id=\"markdown-toc\"> <li><a href=\"#getting-started\" id=\"markdown-toc-getting-started\">Getting started</a></li> <li><a href=\"#coordinate-system\" id=\"markdown-toc-coordinate-system\">Coordinate system</a></li> <li><a href=\"#lines-and-distances\" id=\"markdown-toc-lines-and-distances\">Lines and distances</a></li> <li><a href=\"#data-types\" id=\"markdown-toc-data-types\">Data types</a></li> <li><a href=\"#geospatial-indexes\" id=\"markdown-toc-geospatial-indexes\">Geospatial indexes</a></li> <li><a href=\"#using-geojson\" id=\"markdown-toc-using-geojson\">Using GeoJSON</a></li> <li><a href=\"#faq\" id=\"markdown-toc-faq\">FAQ</a></li> <li><a href=\"#geospatial-commands\" id=\"markdown-toc-geospatial-commands\">Geospatial commands</a></li> </ul> </div> <p>Geometry objects are implemented through a geographic coordinate system, with points and shapes plotted on the surface of a sphere in three-dimensional space. In addition, ReQL geometry objects can be converted to and from GeoJSON, with some limitations.</p> <p>This is an overview of the system. For more details, consult the API documentation for individual geospatial commands.</p> <h2 id=\"getting-started\">Getting started</h2> <p>Create a new table:</p> <pre data-language=\"\">r.tableCreate(\"geo\").run(conn);\n</pre>  <p>Add a couple points:</p> <pre data-language=\"\">r.table(\"geo\").insert(r.array(\n    r.hashMap(\"id\", 1)\n     .with(\"name\", \"San Francisco\")\n     .with(\"location\", r.point(-122.423246, 37.779388)),\n    r.hashMap(\"id\", 2)\n     .with(\"name\", \"San Diego\")\n     .with(\"location\", r.point(-117.220406, 32.719464))\n)).run(conn);\n</pre>  <p>Get the distance between the two points in San Francisco and San Diego:</p> <pre data-language=\"\">r.table(\"geo\").get(1).g(\"location\").distance(\n    r.table(\"geo\").get(2).g(\"location\")\n).run(conn);\n</pre>  <p>Add a geospatial index on the table (required for certain operations like <code class=\"highlighter-rouge\">getNearest</code>):</p> <pre data-language=\"\">r.table(\"geo\").indexCreate(\"location\").optArg(\"geo\", true);\n</pre>  <p>Get the nearest point in the table to a specified one based on the index:</p> <pre data-language=\"\">import com.rethinkdb.gen.ast.Point;\n\nPoint point = r.point(-122.422876,37.777128);  // San Francisco\nr.table(\"geo\").getNearest(point).optArg(\"index\", \"location\").run(conn);\n</pre>  <h2 id=\"coordinate-system\">Coordinate system</h2> <p>Coordinates of points on the sphere’s surface are addressed by a pair of floating point numbers that denote longitude and latitude. The range of longitude is −180 through 180, which wraps around the whole of the sphere: −180 and 180 denote the same line. The range of latitude is −90 (the south pole) through 90 (the north pole).</p> <p>For a more detailed explanation of this, consult the Wikipedia article on the <a href=\"http://en.wikipedia.org/wiki/Geographic_coordinate_system\">geographic coordinate system</a>.</p> <h2 id=\"lines-and-distances\">Lines and distances</h2> <p>Given two endpoints, a line in ReQL is the shortest path between those endpoints on the surface of the sphere, known as a <a href=\"http://en.wikipedia.org/wiki/Geodesic\">geodesic</a>. Lines can be defined with multiple points, in which case each segment of the line will be a geodesic; likewise, sides of a polygon will be geodesics. Geodesics are calculated assuming a perfect sphere.</p> <p>Note that a line between the north pole and south pole (from latitude −90 to latitude 90) cannot be calculated, as <em>all</em> possible paths between them are the “shortest”; this may trigger an error in ReQL or it may choose an arbitrary (but technically correct) path.</p> <p>Distances in ReQL are (by default) calculated assuming not a perfect sphere but an ellipsoid, using a precise and relatively fast algorithm developed by <a href=\"http://link.springer.com/article/10.1007%2Fs00190-012-0578-z\" title=\"Algorithms for geodesics\">Charles Karney</a>. The reference ellipsoid used is <a href=\"http://en.wikipedia.org/wiki/World_Geodetic_System\">WGS84</a>, the standard used for GPS. By default distances are specified in meters, but you can pass an optional argument to distance functions to specify kilometers, miles, nautical miles, and feet.</p> <h2 id=\"data-types\">Data types</h2> <p>The geospatial functions are implemented through a set of new geometric object data types:</p> <ul> <li>\n<strong>Points:</strong> a single coordinate pair</li> <li>\n<strong>Lines:</strong> A sequence of two or more coordinate pairs</li> <li>\n<strong>Polygons:</strong> A multipoint line (at least three coordinate pairs) which does not intersect with itself and whose first and last coordinate pairs are equal. The interior of the polygon is considered filled, that is, part of the polygon. Polygons with “holes” in them, where a hole is another polygon contained by the first, can be created with the [polygonSub][] command.</li> </ul> <p>In addition, there’s a “pseudotype” called <strong>geometry</strong> which appears in documentation, to indicate that any of the geometric objects can be used with those commands.</p> <p>Lines and polygons can be specified using either point objects or sequences of two-number arrays:</p> <pre data-language=\"\">r.line(r.point(0, 0), r.point(0, 5), r.point(5, 5), r.point(5, 0), r.point(0, 0));\nr.line(r.array(0, 0), r.array(0, 5), r.array(5, 5), r.array(5, 0), r.array(0, 0));\n</pre>  <p>Both of those define the same square. If <code class=\"highlighter-rouge\">polygon</code> had been specified instead of <code class=\"highlighter-rouge\">line</code> they would define a filled square.</p> <p>While there <em>is</em> a [circle] command, it approximates a circle by defining either a line or a polygon. There is no true circular data type.</p> <h2 id=\"geospatial-indexes\">Geospatial indexes</h2> <p>To create indexes on fields containing geometry objects, you simply use the standard <a href=\"../../../api/java/index_create/index\">indexCreate</a> command, setting the <code class=\"highlighter-rouge\">geo</code> optional argument to <code class=\"highlighter-rouge\">true</code>. In Java, this would be:</p> <pre data-language=\"\">r.table(\"sites\").indexCreate(\"locations\").optArg(\"geo\", true);\n</pre>  <p>Just like other ReQL indexes, you can create an index using an anonymous function rather than a simple field name, as well as create multi indexes by using the <code class=\"highlighter-rouge\">multi</code> flag with <code class=\"highlighter-rouge\">geo</code>. Read the <a href=\"../../../api/java/index_create/index\">indexCreate</a> API documentation for more details.</p> <h2 id=\"using-geojson\">Using GeoJSON</h2> <p>ReQL geometry objects are not <a href=\"http://geojson.org\">GeoJSON</a> objects, but you can convert back and forth between them with the <a href=\"../../../api/java/geojson/index\">geojson</a> and <a href=\"../../../api/java/to_geojson/index\">toGeojson</a> commands.</p> <p>RethinkDB only allows conversion of GeoJSON objects which have ReQL equivalents: Point, LineString, and Polygon; MultiPoint, MultiLineString, and MultiPolygon are not supported. (You could, however, store multiple points, lines and polygons in an array and use a geospatial multi index with them.)</p> <p>Only longitude/latitude coordinates are supported. GeoJSON objects that use Cartesian coordinates, specify an altitude, or specify their own coordinate reference system will be rejected.</p> <h2 id=\"faq\">FAQ</h2> <ul> <li> <p><strong>How many dimensions are supported?</strong></p> <p>Two (latitude and longitude). Elevation is not supported.</p> </li> <li> <p><strong>What projections are supported?</strong></p> <p>RethinkDB supports the WGS84 World Geodetic System’s reference ellipsoid and geographic coordinate system (GCS). It does not directly support any projected coordinate system (PCS), but there are many tools available for performing such projections.</p> </li> <li> <p><strong>Does RethinkDB do a correct interpolation of degrees to meters along a path?</strong></p> <p>Yes. Distance calculations are done on a geodesic (either WGS84’s reference ellipsoid or a unit sphere).</p> </li> <li> <p><strong>Can you export to WKT or WKB?</strong></p> <p>No. However, you can export to GeoJSON and process that with other tools.</p> </li> </ul> <h2 id=\"geospatial-commands\">Geospatial commands</h2> <ul> <li>\n<a href=\"../../../api/java/geojson/index\">geojson</a>: convert a GeoJSON object to a geometry object</li> <li>\n<a href=\"to_geojson/index\">toGeojson</a>/<a href=\"../../../api/java/to_geojson/index\">to_geojson</a>: convert a geometry object to a GeJSON object</li> <li>\n<a href=\"../../../api/java/point/index\">point</a>: create a point object</li> <li>\n<a href=\"../../../api/java/line/index\">line</a>: create a line object</li> <li>\n<a href=\"../../../api/java/polygon/index\">polygon</a>: create a polygon object</li> <li>\n<a href=\"../../../api/java/circle/index\">circle</a>: create a line or polygon that approximates a circle</li> <li>\n<a href=\"../../../api/java/distance/index\">distance</a>: compute the distance between a point and another geometry object</li> <li>\n<a href=\"../../../api/java/intersects/index\">intersects</a>: determine whether two geometry objects intersect</li> <li>\n<a href=\"../../../api/java/includes/index\">includes</a>: determine whether one geometry object is completely contained by a polygon object</li> <li>\n<a href=\"../../../api/java/get_intersecting/index\">getIntersecting</a>: return documents from a sequence that have a geospatially indexed field whose values intersect with a given geometry object</li> <li>\n<a href=\"../../../api/java/get_nearest/index\">getNearest</a>: return documents from a sequence that have a geospatially indexed field whose values are within a specified distance of a given point</li> <li>\n<a href=\"../../../api/java/polygon_sub/index\">polygonSub</a>: use one polygon completely contained within another to cut out a “hole” in the enclosing polygon</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/geo-support/java/\" class=\"_attribution-link\">https://rethinkdb.com/docs/geo-support/java/</a>\n  </p>\n</div>\n","docs/permissions-and-accounts/index":"<h1 class=\"title\">Permissions and user accounts</h1> <div class=\"toc\">  <ul id=\"markdown-toc\"> <li><a href=\"#users\" id=\"markdown-toc-users\">Users</a></li> <li><a href=\"#permissions\" id=\"markdown-toc-permissions\">Permissions</a></li> <li><a href=\"#scopes\" id=\"markdown-toc-scopes\">Scopes</a></li> <li><a href=\"#the-grant-command\" id=\"markdown-toc-the-grant-command\">The grant command</a></li> <li><a href=\"#for-more-information\" id=\"markdown-toc-for-more-information\">For more information</a></li> </ul> </div> <p>RethinkDB controls access to clusters through a system based around <strong>users, permissions,</strong> and <strong>scopes.</strong> Together, these allow you to specify fine grained control for reading, writing and administrative access down to a per-table level.</p> <h2 id=\"users\">Users</h2> <p>A <em>user</em> in RethinkDB is similar to users in most other database systems; a database administrator may have a user account, and client applications may be given user accounts. These are unrelated to user accounts that may be implemented within the application.</p> <p>Users are created by <a href=\"https://rethinkdb.com/api/javascript/insert\">inserting</a> documents into the <code class=\"highlighter-rouge\">users</code> <a href=\"../system-tables/index\">system table</a>. Every user has an account name in the <code class=\"highlighter-rouge\">id</code> field, and an optional password.</p> <pre data-language=\"\">r.db('rethinkdb').table('users').insert({id: 'bob', password: 'secret'})\n</pre>  <p>If you read this document back, you’ll get this:</p> <pre data-language=\"\">{\n    \"id\": \"bob\",\n    \"password\": true\n}\n</pre>  <p>The <code class=\"highlighter-rouge\">password</code> field is simply a boolean indicating whether a password is set or not. There is no way to read a password from the database.</p> <p>You can <a href=\"https://rethinkdb.com/api/javascript/update\">update</a> the password to a new value, or remove it by setting it to <code class=\"highlighter-rouge\">false</code>.</p> <pre data-language=\"\">r.db('rethinkdb').table('users').get('bob').update({password: false})\n</pre>  <p>You cannot change a username once it’s been created. You can, however, <a href=\"https://rethinkdb.com/api/javascript/delete\">delete</a> users from the table.</p> <h3 id=\"password-hashing-iterations\">Password hashing iterations</h3> <p>By default, RethinkDB will use 4096 iterations for hashing passwords during the connection handshake between client drivers and the server. There is an option to set iterations on a per-account basis by setting passwords to an object of the form <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"err\">password</span><span class=\"p\">:</span><span class=\"s2\">\"password\"</span><span class=\"p\">,</span><span class=\"err\">iterations</span><span class=\"p\">:</span><span class=\"mi\">4096</span><span class=\"p\">}</span></code>. If you wished to use only 1024 iterations, you could set a password like so:</p> <pre data-language=\"\">r.db('rethinkdb').table('users').insert({id: 'bob', password: {password: 'secret', iterations: 1024}})\n</pre>  <p>Note that you will not be able to read the <code class=\"highlighter-rouge\">iterations</code> value for an account; as it’s stored in the password field, it remains read-only.</p> <p>The value for <code class=\"highlighter-rouge\">iterations</code> is a tradeoff between performance and security against brute force attacks. If connections are slow, consider lowering the number of iterations. Raising the number of iterations will make it harder to use a brute force attack, but will increase the CPU usage on clients while establishing a connection.</p> <h3 id=\"the-admin-user\">The admin user</h3> <p>A new RethinkDB cluster always has one user named <code class=\"highlighter-rouge\">admin</code>; this user always has all permissions at a global scope, and the user cannot be deleted. By default, the <code class=\"highlighter-rouge\">admin</code> user has no password. You can change this by updating the <code class=\"highlighter-rouge\">admin</code> user document, or by specifying the <code class=\"highlighter-rouge\">--initial-password</code> <a href=\"../cli-options/index\">command line option</a> on startup.</p> <p>The web administration UI always connects as if it were the <code class=\"highlighter-rouge\">admin</code> user, and skips the authentication process (i.e., the password is not used for this connection). While the web UI cannot be password-protected, you can limit the addresses it will accept connections on using the <code class=\"highlighter-rouge\">--bind-http</code> command line option. For more details on this, review <a href=\"../security/index#securing-the-web-interface\">Secure your cluster</a>.</p> <p>If you forget the admin password, it can be changed from the Data Explorer using <code class=\"highlighter-rouge\">update</code> as described above.</p> <h2 id=\"permissions\">Permissions</h2> <p>There are four different permissions that can be granted to a user:</p> <ul> <li>\n<code class=\"highlighter-rouge\">read</code> allows reading the data in tables.</li> <li>\n<code class=\"highlighter-rouge\">write</code> allows modifying data, including inserting, replacing/updating, and deleting.</li> <li>\n<code class=\"highlighter-rouge\">connect</code> allows a user to open HTTP connections via the <a href=\"https://rethinkdb.com/api/javascript/http\">http</a> command. (Restricting this offers security against an exploit in your code being used to circumvent firewall restrictions.)</li> <li>\n<code class=\"highlighter-rouge\">config</code> allows users different abilities, depending on its scope: <ul> <li>\n<strong>table</strong> scope allows creating and dropping <a href=\"../secondary-indexes/java/index\">secondary indexes</a> on a table, as well as changing the table’s cluster configuration (commands such as <code class=\"highlighter-rouge\">reconfigure</code> and <code class=\"highlighter-rouge\">rebalance</code>).</li> <li>\n<strong>database</strong> scope allows the ability to create and drop tables, in addition to the above.</li> <li>\n<strong>global</strong> scope allows the ability to create and drop databases, in addition to the above. (However, a user must have <code class=\"highlighter-rouge\">config</code> permissions for the tables within a database to drop them, which might not be the case if their <code class=\"highlighter-rouge\">config</code> permissions are overridden at a table level; see <a href=\"#scopes\">Scopes</a> below.)</li> </ul> </li> </ul> <p>Permissions are stored in the <code class=\"highlighter-rouge\">permissions</code> system table. While you can change permissions by modifying documents within that table, it’s far more convenient to use the <a href=\"#the-grant-command\">grant</a> command; see below.</p> <h2 id=\"scopes\">Scopes</h2> <p>The <code class=\"highlighter-rouge\">read</code>, <code class=\"highlighter-rouge\">write</code> and <code class=\"highlighter-rouge\">config</code> permissions can be specified on three scopes, from most granular to least:</p> <ul> <li>table (affecting a table only)</li> <li>database (affecting a database and the tables within)</li> <li>global (affecting all databases and the tables within)</li> </ul> <p>Permissions specified at a lower level will override permissions set at a higher level: a user could be granted read and write access to the <code class=\"highlighter-rouge\">field_notes</code> database, but denied the ability to write to the <code class=\"highlighter-rouge\">calendar</code> table and to either read or write to the <code class=\"highlighter-rouge\">supervisor_only</code> table.</p> <pre data-language=\"\">User: notesapp\n    database \"field_notes\" { read: true, write: true, config: false }\n        table \"calendar\" { write: false }\n        table \"supervisor_only\" { read: false, write: false }\n</pre>  <p>The <code class=\"highlighter-rouge\">calendar</code> table inherits <code class=\"highlighter-rouge\">read: true</code> from the database level, but specifies <code class=\"highlighter-rouge\">write: false</code> to make the table ready-only for <code class=\"highlighter-rouge\">notesapp</code>. The <code class=\"highlighter-rouge\">supervisor_only</code> table overrides both read and write access. The <code class=\"highlighter-rouge\">notesapp</code> account has read and write access to all other tables in the <code class=\"highlighter-rouge\">field_notes</code> database, but no ability to create and drop indexes or change any table’s cluster configuration.</p> <h2 id=\"the-grant-command\">The grant command</h2> <p>The ReQL <a href=\"https://rethinkdb.com/api/javascript/grant\">grant</a> command is used to grant and revoke permissions for users. The scope is selected by chaining <code class=\"highlighter-rouge\">grant</code> after <code class=\"highlighter-rouge\">db</code> (for database scope), <code class=\"highlighter-rouge\">table</code> (for table scope), or calling it directly (for global scope).</p> <pre data-language=\"\">r.grant(\"user\", {permissions}) → object\ntable.grant(\"user\", {permissions}) → object\ndb.grant(\"user\", {permissions}) → object\n</pre>  <p>To specify the permissions described above for Bob, you would execute the following ReQL commands:</p> <pre data-language=\"\">// set database scope\nr.db('field_notes').grant('bob', {read: true, write: true, config: false});\n\n// set table scopes\nr.db('field_notes').table('calendar').grant('bob', {write: false});\nr.db('field_notes').table('supervisor_only').grant('bob', {read: false, write: false});\n</pre>  <h2 id=\"for-more-information\">For more information</h2> <p>API documentation for <code class=\"highlighter-rouge\">grant</code>:</p> <ul> <li><a href=\"https://rethinkdb.com/api/javascript/grant\">JavaScript</a></li> <li><a href=\"https://rethinkdb.com/api/python/grant\">Python</a></li> <li><a href=\"https://rethinkdb.com/api/ruby/grant\">Ruby</a></li> <li><a href=\"../../api/java/grant/index\">Java</a></li> </ul> <p>Also, read about:</p> <ul> <li><a href=\"../system-tables/index\">System tables</a></li> <li><a href=\"../security/index\">Securing your cluster</a></li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/permissions-and-accounts/\" class=\"_attribution-link\">https://rethinkdb.com/docs/permissions-and-accounts/</a>\n  </p>\n</div>\n","docs/failover/index":"<h1 class=\"title\">Failover</h1> <p>When a server fails, it may be because of a network availability issue or something more serious, such as system failure. In a multi-server configuration, where tables have multiple replicas distributed among multiple physical machines, RethinkDB will be able to maintain availability automatically in many cases.</p> <p>To perform automatic failover for a table, the following requirements must be met:</p> <ul> <li>The cluster must have three or more servers</li> <li>The table must be configured to have three or more replicas</li> <li>A majority (greater than half) of replicas for the table must be available</li> </ul> <p>If the primary replica for a table fails, as long as more than half of the table’s voting replicas and more than half of the voting replicas for each shard remain available, one of those voting replicas will be arbitrarily selected as the new primary. There will be a brief period of unavailability, but no data will be lost. If the primary replica specified in a table’s configuration comes back online after a failure, it will return to being the primary.</p> <p>If half or more of the voting replicas of a shard are lost and cannot be reconnected, an <em>emergency repair</em> will need to be performed. For more information on the emergency repair option, read the documentation for <a href=\"https://rethinkdb.com/api/javascript/reconfigure\">reconfigure</a>.</p> <blockquote class=\"infobox \">\n<p><strong>Voting and non-voting?</strong> All replicas are “voting” replicas by default, which simply means that they’re counted in any operation that requires a majority of replicas to be available. However, the speed at which replicas “vote” is affected by network latency; if you have a faraway data center with higher latency, you might want to set its replicas to be non-voting to improve performance, at the cost of guaranteed availability in that data center. You can set a replica to be “non-voting” by changing its table configuration with <code class=\"highlighter-rouge\">reconfigure</code>.</p> </blockquote> <h3 id=\"limitations-of-automatic-failover\">Limitations of automatic failover</h3> <p>In most circumstances, automatic failover can be performed as long as a majority of voting replicas are available. However, one circumstance in which it may not be performed is a non-transitive connectivity failure. Imagine a cluster with three servers: A, B, and C. Under normal network operations, all of the servers can connect to one another. If a network failure occurs such that A can connect to B and B can connect to C, but A cannot connect to C, the network failure is non-transitive. For a more in-depth description, as well as progress on a long-term solution, read <a href=\"https://github.com/rethinkdb/rethinkdb/issues/4357\">Github issue #4357</a>.</p> <p>Since automatic failover requires a majority of servers for a table to be available, it requires a minimum of three servers to be involved. In a two-machine cluster, automatic failover will never occur, and tables will lose availability for writes if either machine loses connectivity. In this case, if the machine cannot be reconnected, you must fix the problem manually using the emergency repair option of <code class=\"highlighter-rouge\">reconfigure</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/failover/\" class=\"_attribution-link\">https://rethinkdb.com/docs/failover/</a>\n  </p>\n</div>\n","docs/dates-and-times/java/index":"<h1 class=\"title\">Dates and times in RethinkDB</h1>    <p>RethinkDB has native support for millisecond-precision times with time zones. Some highlights:</p> <ul> <li>\n<strong>Times are integrated with the official drivers</strong>, which will automatically convert to and from your language’s native time type.</li> <li>\n<strong>Queries are timezone-aware</strong>, so you can ask questions like “Did this event happen on a Monday in the time zone where it was recorded?”</li> <li>\n<strong>Times work as indexes</strong>, so you can efficiently retrieve events based on when they occurred.</li> <li>\n<strong>Time operations are pure ReQL</strong>, which means that even complicated date-time queries can be distributed efficiently across the cluster.</li> </ul> <div class=\"toc\">  <ul id=\"markdown-toc\"> <li><a href=\"#a-quick-example\" id=\"markdown-toc-a-quick-example\">A quick example</a></li> <li><a href=\"#technical-details\" id=\"markdown-toc-technical-details\">Technical details</a></li> <li><a href=\"#inserting-times\" id=\"markdown-toc-inserting-times\">Inserting times</a></li> <li><a href=\"#retrieving-times\" id=\"markdown-toc-retrieving-times\">Retrieving times</a></li> <li><a href=\"#working-with-times\" id=\"markdown-toc-working-with-times\">Working with times</a></li> <li><a href=\"#putting-it-all-together\" id=\"markdown-toc-putting-it-all-together\">Putting it all together</a></li> </ul> </div> <p><img alt=\"Dates and Times Illustration\" class=\"api_command_illustration\" src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/dates-and-times.png\"></p> <h2 id=\"a-quick-example\">A quick example</h2> <p>First, let’s create a table and insert some events. We’ll insert the first event using a native OffsetDateTime object, and the second with the <code class=\"highlighter-rouge\">epochTime</code> constructor:</p> <pre data-language=\"\">import java.time.OffsetDateTime;\nimport java.util.List;\n\nr.tableCreate(\"events\").run(conn);\n\nOffsetDateTime nowDateTime = OffsetDateTime.now();\n\nr.table(\"events\").insert(r.array(\n    r.hashMap(\"id\", 0).with(\"timestamp\", nowDateTime),\n    r.hashMap(\"id\", 1).with(\"timestamp\", r.epochTime(1376436769.923))\n)).run(conn);\n</pre>  <p>Now, let’s get those back:</p> <pre data-language=\"\">Cursor cursor = r.table(\"events\").run(conn);\nList events = cursor.toList();\nSystem.out.println(events);\n</pre>  <p>Result:</p> <pre data-language=\"\">[{id=0, timestamp=2016-01-05T10:41:45.100-08:00}, {id=1, timestamp=2013-08-13T23:32:49.923Z}]\n</pre>  <p>Both times are returned as native Java 8 <code class=\"highlighter-rouge\">OffsetDateTime</code> objects.</p> <p>We can now filter based on these times:</p> <pre data-language=\"\">cursor = r.table(\"events\").filter(\n    row -&gt; row.g(\"timestamp\").hours().gt(20)\n).run(conn);\nevents = cursor.toList();\nSystem.out.println(events);\n</pre>  <pre data-language=\"\">[{id=1, timestamp=2013-08-13T23:32:49.923Z}]\n</pre>  <p>Or create a secondary index on them:</p> <pre data-language=\"\">r.table(\"events\").indexCreate(\"timestamp\").run(conn);\n\ncursor = r.table(\"events\").between(\n    r.epochTime(1376436769.913), r.epochTime(1376436769.933)\n).optArg(\"index\", \"timestamp\").run(conn);\nevents = cursor.toList();\nSystem.out.println(events);\n</pre>  <pre data-language=\"\">[{id=1, timestamp=2013-08-13T23:32:49.923Z}]\n</pre>  <h2 id=\"technical-details\">Technical details</h2> <p>Times are stored on the server as seconds since epoch (UTC) with millisecond precision plus a time zone. Currently the only available time zones are minute-precision time offsets from UTC, but we may add support for DST-aware time zones in the future. Time zones are strings as specified by ISO 8601.</p> <p>Times are considered equal when their epoch (UTC) time values are equal, <strong>regardless of what time zone they’re in</strong>. This is true for both comparisons and indexed operations. Times are compared in floating point with millisecond precision.</p> <p>Most date operations are only defined on years in the range <code class=\"highlighter-rouge\">[1400, 10000]</code> (but note that times in the year <code class=\"highlighter-rouge\">10000</code> cannot be printed as ISO 8601 dates).</p> <p>Leap-seconds aren’t well-supported right now: <code class=\"highlighter-rouge\">2012-06-30T23:59:60</code> and <code class=\"highlighter-rouge\">2012-07-01T00:00:00</code> parse to the same time.</p> <h2 id=\"inserting-times\">Inserting times</h2> <p>You can insert times by simply passing a native <code class=\"highlighter-rouge\">OffsetDateTime</code> object.</p> <pre data-language=\"\">OffsetDateTime myDateTime = OffsetDateTime.now();\n\nr.table(\"events\").insert(\n    r.hashMap(\"id\", 2).with(\"timestamp\", myDateTime),\n).run(conn);\n</pre>  <pre data-language=\"\">{unchanged=0, skipped=0, replaced=0, inserted=1, errors=0, deleted=0}\n</pre>  <p>You can also use <code class=\"highlighter-rouge\">r.now</code> (which the server interprets as the time the query was received in UTC), or construct a time using <code class=\"highlighter-rouge\">r.time</code>, <code class=\"highlighter-rouge\">r.epochTime</code>, or <code class=\"highlighter-rouge\">r.ISO8601</code>.</p> <pre data-language=\"\">r.now().toISO8601().run(conn, callback);\n// returns \"2013-08-09T18:53:15.012+00:00\"\n\nr.time(2013, r.august(), 9, 18, 53, 15.012, \"-07:00\").toIso8601().run(conn);\n// returns \"2013-08-09T18:53:15.012-07:00\"\n\nr.epochTime(1376074395.012).toIso8601().run(conn);\n// returns \"2013-08-09T18:53:15.012+00:00\"\n\nr.iso8601(\"2013-08-09T18:53:15.012-07:00\").toIso8601().run(conn);\n// returns \"2013-08-09T18:53:15.012-07:00\"\n</pre>  <p>Times may be used as the primary key for a table. Two times are considered equal if they have the same number of milliseconds since epoch (UTC), regardless of time zone.</p> <pre data-language=\"\">r.table(\"t\").insert(\n    r.hashMap(\"id\", r.iso8601(\"2013-08-09T11:58:00.1111-07:00\"))\n).run(conn);\n\n// returns:\n// {deleted=0, errors=0, inserted=1, replaced=0, skipped=0, unchanged=0}\n\nr.table(\"t\").insert(\n    r.hashMap(\"id\", r.iso8601(\"2013-08-09T10:58:00.1112-08:00\"))\n).run(conn);\n\n// returns: \n// {deleted=0, errors=1, inserted=0, replaced: 0, skipped=0, unchanged=0, first_error=\"Duplicate primary key `id`=...\"}\n</pre>  <p>You may also insert a time by inserting a literal pseudotype object. This is useful if, for instance, you exported a row using <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"err\">timeFormat</span><span class=\"p\">:</span><span class=\"err\">'raw'</span><span class=\"p\">}</span></code> (see <strong>Retrieving Times</strong> below).</p> <blockquote class=\"infobox \">\n<p><strong>Note:</strong> Avoid using keys matching the regular expression <code class=\"highlighter-rouge\">^\\$reql_.+\\$$</code> in your objects. RethinkDB considers those to be reserved keywords.</p> </blockquote> <pre data-language=\"\">r.expr(\n    r.hashMap(\"$reql_type$\", \"TIME\")\n     .with(\"epoch_time\", 1376075362.662)\n     .with(\"timezone\", \"+00:00\")\n).toIso8601().run(conn);\n</pre>  <h2 id=\"retrieving-times\">Retrieving times</h2> <p>By default, times are converted into native objects when they are retrieved from the server. This may be overridden by passing the <a href=\"../../../api/java/optarg/index\">optArg</a> <code class=\"highlighter-rouge\">timeFormat</code> to <code class=\"highlighter-rouge\">run</code>. The only options right now are <code class=\"highlighter-rouge\">native</code>, the default, and <code class=\"highlighter-rouge\">raw</code>.</p> <pre data-language=\"\">r.now().run(conn);\n// returns \"2016-01-06T00:34:13.623Z\"\n\nr.now().inTimezone(\"-07:00\").run(conn);\n// returns \"2016-01-05T17:34:13.623Z-07:00\"\n\nimport com.rethinkdb.model.OptArgs;\nr.now().run(conn, OptArgs.of(\"time_format\", \"raw\"));\n// returns:\n// {\"timezone\":\"+00:00\",\"$reql_type$\":\"TIME\",\"epoch_time\":1.452040701881E9}\n\nr.now().inTimezone(\"-07:00\").run(conn, OptArgs.of(\"time_format\", \"raw\"));\n// returns:\n// {\"timezone\":\"-07:00\",\"$reql_type$\":\"TIME\",\"epoch_time\":1.452040701881E9}\n</pre>  <p>You can also transform a time object on the server using either <code class=\"highlighter-rouge\">toEpochTime</code> or <code class=\"highlighter-rouge\">toIso8601</code>.</p> <pre data-language=\"\">r.now().toEpochTime().run(conn);\n// returns 1376075986.574\n\nr.now().toISO8601().run(conn);\n// returns \"2013-08-09T19:19:46.574+00:00\"\n</pre>  <h2 id=\"working-with-times\">Working with times</h2> <p>There are only three useful things you can do with a time: modify it, compare it to another time, or retrieve a portion of it.</p> <h3 id=\"modifying-times\">Modifying times</h3> <p>You can add or subtract a duration (in seconds):</p> <pre data-language=\"\">r.time(2015, 1, 1, \"Z\").add(86400).run(conn);\n// returns \"2015-01-02T00:00Z\"\n</pre>  <p>If you subtract two times, you get a duration:</p> <pre data-language=\"\">r.time(2015, 1, 2, \"Z\").sub(r.time(2015, 1, 1, \"Z\")).run(conn);\n// returns 86400\n</pre>  <h3 id=\"comparing-times\">Comparing times</h3> <p>All of the normal comparison operators are defined on times:</p> <pre data-language=\"\">r.epochTime(1376081287.982).lt(new Date()).run(conn, callback);\n// true\n</pre>  <p>Times are only compared with millisecond precision:</p> <pre data-language=\"\">r.epochTime(1376081287.9821).eq(r.epochTime(1376081287.9822)).run(conn);\n// true\n</pre>  <p>There’s also the <a href=\"../../../api/java/during/index\">during</a> command, which can check whether a time is in a particular range of times.</p> <h3 id=\"retrieving-portions-of-times\">Retrieving portions of times</h3> <p>If you have a time, you can retrieve a particular portion (like the month, or the hours) relative to the current time zone. (See the full list at the <a href=\"https://rethinkdb.com/api\">API reference</a>.)</p> <pre data-language=\"\">OffsetDateTime nowDateTime = OffsetDateTime.now();\n\nr.expr(nowDateTime).run(conn);\n// returns \"2013-08-13T23:32:49.923Z\"\n\nr.expr(nowDateTime).month().run(conn);\n// returns 8\n\nr.expr(nowDateTime).hours().run(conn);\n// returns 23\n\nr.expr(nowDateTime).inTimezone(\"-06:00\").hours()run(conn);\n// returns 17\n</pre>  <p>We use the ISO 8601 definition of a week, which starts with Monday, represented as <code class=\"highlighter-rouge\">1</code>.</p> <pre data-language=\"\">r.expr(nowDateTime).dayOfWeek().run(conn);\n// returns 2 for Tuesday\n</pre>  <p>We define <code class=\"highlighter-rouge\">r.monday...r.sunday</code> and <code class=\"highlighter-rouge\">r.january...r.december</code> for convenience:</p> <pre data-language=\"\">r.expr(nowDateTime).dayOfWeek().eq(r.tuesday).run(conn);\n// returns true\n</pre>  <p>We also let you slice the time into the date and the current time of day (a time and a duration, respectively):</p> <pre data-language=\"\">r.now().toEpochTime().run(conn);\n// returns 1376351312.744\n\nr.now().date().toEpochTime().run(conn);\n// returns 1376265600\n\nr.now().timeOfDay().run(conn);\n// returns 85712.744\n</pre>  <h2 id=\"putting-it-all-together\">Putting it all together</h2> <p>By combining these operations, you can write surprisingly useful queries in pure ReQL. For example, let’s say you have a table of sales your company has made, and you want to figure out how much of the gross comes from people who were working overtime:</p> <pre data-language=\"\">r.table(\"sales\").filter(sale -&gt;\n    // Weekends are overtime\n    sale.g(\"time\").dayOfWeek().eq(r.saturday())\n    .or(sale.g(\"time\").dayOfWeek().eq(r.sunday()))\n    // Weekdays outside 9-5 are overtime\n    .or(sale.g(\"time\").hours().lt(9))\n    .or(sale.g(\"time\").hours().ge(17))\n).sum(\"dollars\").run(conn);\n</pre>  <p>If your timestamps are stored with time zones, this query will work even if you have sales from different offices in different countries (assuming they all work 9-5 local time).</p> <p>Since this query is pure ReQL, the entire query will be distributed efficiently over the cluster without any computation being done on the client.</p> <p>Further, because it’s ReQL, the query’s individual pieces are easily composable. If you decide you want those numbers on a per-month basis, you can just throw a <code class=\"highlighter-rouge\">group</code> in there:</p> <pre data-language=\"\">r.table(\"sales\").filter(sale -&gt;\n    // Weekends are overtime\n    sale.g(\"time\").dayOfWeek().eq(r.saturday())\n    .or(sale.g(\"time\").dayOfWeek().eq(r.sunday()))\n    // Weekdays outside 9-5 are overtime\n    .or(sale.g(\"time\").hours().lt(9))\n    .or(sale.g(\"time\").hours().ge(17))\n).group(sale -&gt; sale.g(\"time\").month()).sum(\"dollars\").run(conn);\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/dates-and-times/java/\" class=\"_attribution-link\">https://rethinkdb.com/docs/dates-and-times/java/</a>\n  </p>\n</div>\n","docs/backup/index":"<h1 class=\"title\">Backing up your data</h1> <p>The RethinkDB command line utility allows you to easily take hot backups on a live cluster with the <code class=\"highlighter-rouge\">dump</code> and <code class=\"highlighter-rouge\">restore</code> subcommands. The utility runs under the <code class=\"highlighter-rouge\">admin</code> user account (see <a href=\"../permissions-and-accounts/index\">Permissions and user accounts</a>).</p> <h2 id=\"backup\">Backup</h2> <p>Use the <code class=\"highlighter-rouge\">dump</code> subcommand to create an archive of data from the cluster. This creates a <strong>tar.gz</strong> file consisting of JSON documents and additional table metadata.</p> <pre data-language=\"\">rethinkdb dump [options]\n</pre>  <p>Options to <code class=\"highlighter-rouge\">dump</code> let you specify cluster information and limit the archive to specific databases or tables.</p> <ul> <li>\n<code class=\"highlighter-rouge\">-c</code>, <code class=\"highlighter-rouge\">--connect</code>: host and client port of the node to connect to (default: <code class=\"highlighter-rouge\">localhost:28015</code>)</li> <li>\n<code class=\"highlighter-rouge\">-f</code>, <code class=\"highlighter-rouge\">--file</code>: specify a filename for the archive (default: <code class=\"highlighter-rouge\">rethinkdb_dump_&lt;date&gt;_&lt;time&gt;.tar.gz</code>)</li> <li>\n<code class=\"highlighter-rouge\">-e</code>, <code class=\"highlighter-rouge\">--export</code>: limit the dump to the given database or table (specified as <code class=\"highlighter-rouge\">database.table</code>); may be specified multiple times for multiple databases/tables</li> <li>\n<code class=\"highlighter-rouge\">-p</code>, <code class=\"highlighter-rouge\">--password</code>: prompt for the admin password, if one has been set</li> <li>\n<code class=\"highlighter-rouge\">--password-file</code>: read the admin password from a plain text file</li> <li>\n<code class=\"highlighter-rouge\">--tls-cert</code>: specify a path to a TLS certificate to allow encrypted connections to the server (see <a href=\"../security/index\">Securing the cluster</a>)</li> <li>\n<code class=\"highlighter-rouge\">--clients</code>: number of tables to export simultaneously (default: <code class=\"highlighter-rouge\">3</code>)</li> <li>\n<code class=\"highlighter-rouge\">--temp-dir</code>: directory to use for intermediary results</li> <li>\n<code class=\"highlighter-rouge\">-h</code>, <code class=\"highlighter-rouge\">--help</code>: print help</li> </ul> <p>Since the backup process uses client drivers, it takes advantage of RethinkDB’s concurrency. While it will use some cluster resources, it won’t lock out any clients, and it can be safely run on a live cluster.</p> <h3 id=\"examples\">Examples</h3> <pre data-language=\"\">rethinkdb dump -c fortress:39500\n</pre>  <p>Connect to the cluster at host <code class=\"highlighter-rouge\">fortress</code> with a client port at <code class=\"highlighter-rouge\">39500</code>, saving to the default archive name.</p> <pre data-language=\"\">rethinkdb dump -e league.users -f backup.tar.gz --password-file pw.txt\n</pre>  <p>Connect to the default cluster (<code class=\"highlighter-rouge\">localhost:28015</code>) and archive the <code class=\"highlighter-rouge\">users</code> table from the <code class=\"highlighter-rouge\">league</code> database in <code class=\"highlighter-rouge\">backup.tar.gz</code>. Read the <code class=\"highlighter-rouge\">admin</code> user password from the file <code class=\"highlighter-rouge\">pw.txt</code>.</p> <blockquote class=\"infobox infobox-alert\">\n<p><strong>Note:</strong> The <code class=\"highlighter-rouge\">dump</code> command saves database and table contents and metadata, but does <strong>not</strong> save cluster configuration data.</p> </blockquote> <h2 id=\"restore\">Restore</h2> <p>The <code class=\"highlighter-rouge\">restore</code> subcommand has most of the the same options and defaults as the <code class=\"highlighter-rouge\">dump</code> command, although there are a few extra commands for controlling how data is imported.</p> <pre data-language=\"\">rethinkdb restore filename\n</pre>  <p>(You must specify the archive to restore from; there is no default.)</p> <ul> <li>\n<code class=\"highlighter-rouge\">-c</code>, <code class=\"highlighter-rouge\">--connect</code>: host and client port of the node to connect to (default: <code class=\"highlighter-rouge\">localhost:28015</code>)</li> <li>\n<code class=\"highlighter-rouge\">-p</code>, <code class=\"highlighter-rouge\">--password</code>: prompt for the admin password, if one has been set</li> <li>\n<code class=\"highlighter-rouge\">--password-file</code>: read the admin password from a plain text file</li> <li>\n<code class=\"highlighter-rouge\">--tls-cert</code>: specify a path to a TLS certificate to allow encrypted connections to the server (see <a href=\"../security/index\">Securing the cluster</a>)</li> <li>\n<code class=\"highlighter-rouge\">-i</code>, <code class=\"highlighter-rouge\">--import</code>: limit the restore to the given database or table (specified as <code class=\"highlighter-rouge\">database.table</code>); may be specified multiple times for multiple databases/tables</li> <li>\n<code class=\"highlighter-rouge\">--clients</code>: number of client connections to use (default: <code class=\"highlighter-rouge\">8</code>)</li> <li>\n<code class=\"highlighter-rouge\">--temp-dir</code>: directory to use for intermediary results</li> <li>\n<code class=\"highlighter-rouge\">--hard-durability</code>: use hard durability writes (slower, but less memory consumption on the server)</li> <li>\n<code class=\"highlighter-rouge\">--force</code>: import data even if a table already exists</li> <li>\n<code class=\"highlighter-rouge\">--no-secondary-indexes</code>: do not create secondary indexes for the restored tables</li> <li>\n<code class=\"highlighter-rouge\">-h</code>, <code class=\"highlighter-rouge\">--help</code>: print help</li> </ul> <blockquote class=\"infobox \">\n<p><strong>Note:</strong> <code class=\"highlighter-rouge\">rethinkdb restore</code> may not work for restoring backups made with later versions of RethinkDB to servers running <em>earlier</em> versions. For example, you cannot restore a backup made on RethinkDB 2.2 to a server running RethinkDB 2.1.</p> <p>If you need to do this, you can try passing the <code class=\"highlighter-rouge\">--no-secondary-indexes</code> flag to <code class=\"highlighter-rouge\">restore</code> as a workaround. This will usually allow restores to work on older versions, although this is not guaranteed.</p> </blockquote> <h3 id=\"examples-1\">Examples</h3> <pre data-language=\"\">rethinkdb restore rethinkdb_dump_2015-09-17T10:59:58.tar.gz\n</pre>  <p>Restore to the default cluster (<code class=\"highlighter-rouge\">localhost:28015</code>).</p> <pre data-language=\"\">rethinkdb restore backup.tar.gz -c fortress:39500\n</pre>  <p>Restore <code class=\"highlighter-rouge\">backup.tar.gz</code> to the cluster running on <code class=\"highlighter-rouge\">fortress</code> at port <code class=\"highlighter-rouge\">39500</code>.</p> <pre data-language=\"\">rethinkdb restore backup.tar.gz -i league.users --password-file pw.txt\n</pre>  <p>Restore to the default cluster, only importing the table <code class=\"highlighter-rouge\">users</code> to the database <code class=\"highlighter-rouge\">league</code> from the archive <code class=\"highlighter-rouge\">backup.tar.gz</code>. Read the <code class=\"highlighter-rouge\">admin</code> user password from the file <code class=\"highlighter-rouge\">pw.txt</code>. (This should be a plain text file with the password on the first and only line.)</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/backup/\" class=\"_attribution-link\">https://rethinkdb.com/docs/backup/</a>\n  </p>\n</div>\n","docs/system-issues/index":"<h1 class=\"title\">System current issues table</h1> <p>The current issues table is one of the <a href=\"../system-tables/index\">system tables</a> added in version 1.16 of RethinkDB. Querying it returns problems detected within the cluster; in normal, error-free operation, it will remain empty. The table is read-only.</p> <p>Querying this table with no filters produces a list of all current issues within the cluster.</p> <p><strong>Note:</strong> as with other system tables, the current_issues table can only be accessed by the <code class=\"highlighter-rouge\">admin</code> user account.</p> <pre data-language=\"\">r.db(\"rethinkdb\").table(\"current_issues\").run(conn, callback);\n</pre>  <h2 id=\"document-schema\">Document schema</h2> <p>Issues added to the table follow the same structure.</p> <pre data-language=\"\">{\n    id: \"&lt;uuid&gt;\",\n    type: \"&lt;type&gt;\",\n    critical: &lt;bool&gt;,\n    info: {\n        &lt;type-specific fields&gt;\n    },\n    description: \"&lt;type-specific string&gt;\"\n}\n</pre>  <ul> <li>\n<code class=\"highlighter-rouge\">id</code>: the primary key; it remains unchanged throughout the issue’s lifespan.</li> <li>\n<code class=\"highlighter-rouge\">type</code>: a short string indicating the issue type. (The rest of this document goes into more detail on types.)</li> <li>\n<code class=\"highlighter-rouge\">critical</code>: <code class=\"highlighter-rouge\">true</code> if the issue is likely to cause loss of availability.</li> <li>\n<code class=\"highlighter-rouge\">info</code>: detail fields; the keys and values will depend on the issue type.</li> <li>\n<code class=\"highlighter-rouge\">description</code>: a human-readable description of the problem, including suggestions for how to solve it.</li> </ul> <p>You can query for specific kinds of issues by filtering on the <code class=\"highlighter-rouge\">type</code> field.</p> <pre data-language=\"\">r.db(\"rethinkdb\").table(\"current_issues\").filter({type: \"outdated_index\"}).run(conn, callback);\n</pre>  <h2 id=\"issue-types\">Issue types</h2> <p>Note that if you call <a href=\"https://rethinkdb.com/api/javascript/table\">table</a> with <code class=\"highlighter-rouge\">identifier_format</code> set to <code class=\"highlighter-rouge\">uuid</code>, then references to servers, tables and databases in the <code class=\"highlighter-rouge\">info</code> subdocument will be UUIDs rather than names.</p> <h3 id=\"log-write-issues\">Log write issues</h3> <pre data-language=\"\">type: \"log_write_error\"\ncritical: false\ninfo: {\n    servers: [\"server_a\", \"server_b\", ...],\n    message: \"&lt;error message&gt;\"\n}\n</pre>  <p>RethinkDB has failed to write to its log file (or to <code class=\"highlighter-rouge\">stdout/stderr</code>). The <code class=\"highlighter-rouge\">message</code> string will be the error that RethinkDB received from the operating system on the failed write; <code class=\"highlighter-rouge\">servers</code> will be a list of servers affected.</p> <p>Find and solve the problem preventing the server from writing to the logs (for example, freeing up disk space if the disk is full). There will only be one issue per unique error message received—if multiple servers encounter the same error, only one issue will appear in the table.</p> <h3 id=\"name-collision-issues\">Name collision issues</h3> <pre data-language=\"\">type: \"server_name_collision\" | \"db_name_collision\" | \"table_name_collision\"\ncritical: true\ninfo: {\n    name: \"&lt;name in conflict&gt;\",\n    ids: [\"&lt;uuid1&gt;\", \"&lt;uuid2&gt;\", ...],\n    db: \"&lt;name&gt;\"\n}\n</pre>  <p>(The <code class=\"highlighter-rouge\">db</code> field will be absent unless <code class=\"highlighter-rouge\">type</code> is <code class=\"highlighter-rouge\">table_name_collision</code>.)</p> <p>Multiple servers, databases, or tables in the same database have been assigned the same name. The <code class=\"highlighter-rouge\">name</code> field shows the conflicting name; <code class=\"highlighter-rouge\">ids</code> are the UUIDs of the entities that have that name. In the case of <code class=\"highlighter-rouge\">table_name_collision</code>, <code class=\"highlighter-rouge\">db</code> will be the database that the tables are in. Rename the conflicting entities.</p> <p>Under normal circumstances the system will prevent name collisions, but a collision could occur due to a race condition—for instance, two clients trying to create tables with the same name on different servers simultaneously. This is a critical error, as a name collision on a table or database makes it impossible to read or write from that table or from tables in that database.</p> <p>There will be one issue per name in conflict.</p> <h3 id=\"outdated-index-issues\">Outdated index issues</h3> <pre data-language=\"\">type: \"outdated_index\"\ncritical: false\ninfo: {\n    tables: [\n        {\n            table: \"foo\",\n            db: \"bar\",\n            indexes: [\"ix1\", \"ix2\", ...]\n        }\n    ]\n}\n</pre>  <p>Indexes built with an older version of RethinkDB need to be rebuilt due to changes in the way ReQL handles indexing. See “<a href=\"../troubleshooting/index#my-secondary-index-is-outdated\">My secondary index is outdated</a>” for details on how to rebuild indexes.</p> <p>This issue will only appear in the <code class=\"highlighter-rouge\">current_issues</code> table once—check the <code class=\"highlighter-rouge\">info</code> field for the tables and indexes it affects.</p> <h3 id=\"table-availability-issues\">Table availability issues</h3> <pre data-language=\"\">type: \"table_availability\"\ncritical: true | false\ninfo: {\n    table: \"foo\",\n    db: \"bar\",\n    shards: [\n        {\n            primary_replicas: [\"replica1\"],\n            replicas: [\n                { server: \"replica1\", state: \"ready\" },\n                { server: \"replica2\", state: \"disconnected\" }\n            ]\n        }\n    ],\n    status: {\n        all_replicas_ready: false,\n        ready_for_writes: false,\n        ready_for_reads: true,\n        ready_for_outdated_reads: true\n    }\n}\n</pre>  <p>A table on the cluster is missing at least one replica. The <code class=\"highlighter-rouge\">description</code> string will depend on the roles the missing server(s) played in the table. If the table is not available for reads and/or writes, <code class=\"highlighter-rouge\">critical</code> will be <code class=\"highlighter-rouge\">true</code>; if the table can be both read from and written to, it will be <code class=\"highlighter-rouge\">false</code>.</p> <p>If a table is unavailable for reads and/or writes but all its servers are still available, no issue will be shown.</p> <p>This issue will appear at most once for each table.</p> <h3 id=\"memory-availability-issues\">Memory availability issues</h3> <pre data-language=\"\">type: \"memory_error\"\ncritical: false\ninfo: {\n    servers: [ \"server1\" ],\n    message: \"Data from a process on this server has been placed into swap memory in the past hour. If the data is from RethinkDB, this may impact performance.\"\n}\n</pre>  <p>This message is a warning that a <a href=\"https://en.wikipedia.org/wiki/Paging\">page fault</a> has occurred on a RethinkDB server and swap space is being used. Under Linux, this message will only appear if a RethinkDB process has started paging memory; under OS X, it will appear when <em>any</em> process is paging. The Windows version of RethinkDB cannot detect when paging occurs.</p> <p>When paging occurs on RethinkDB’s process, performance will be adversely affected, and the more paging occurs the worse performance will be. You may be able to address it by ensuring other applications are not using physical memory on the server, tuning the paging cache, or adding more RAM to the server.</p> <h3 id=\"connectivity-issues\">Connectivity issues</h3> <pre data-language=\"\">type: \"non_transitive_error\"\ncritical: false\ninfo: {\n    servers: [ \"server1\", \"server2\" ],\n    message: \"Server connectivity is non-transitive.\"\n}\n</pre>  <p>This message indicates there are currently servers that cannot see every server in the cluster. This may cause table availability issues. It can be resolved by restoring full connectivity.</p> <p>This issue will appear at most once for each server.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/system-issues/\" class=\"_attribution-link\">https://rethinkdb.com/docs/system-issues/</a>\n  </p>\n</div>\n","docs/system-stats/index":"<h1 class=\"title\">System statistics table</h1> <p>The stats table is one of the <a href=\"../system-tables/index\">system tables</a> added in version 1.16 of RethinkDB. It provides statistics about server read/write throughput, client connections, and memory usage.</p> <h2 id=\"querying-the-stats-table\">Querying the stats table</h2> <p><strong>Note:</strong> as with other system tables, the jobs table can only be accessed by the <code class=\"highlighter-rouge\">admin</code> user account.</p> <p>The table’s primary key is the <code class=\"highlighter-rouge\">id</code> field, and the keys are always arrays. The first element in the array is always a string indicating the object type being queried (i.e., <code class=\"highlighter-rouge\">\"table\"</code>, <code class=\"highlighter-rouge\">\"server\"</code>, etc.); for all objects but the cluster (which has only one document in the <code class=\"highlighter-rouge\">stats</code> table), the second element is the UUID of the object being queried.</p> <pre data-language=\"\">// get a dump of all current statistics\nr.db(\"rethinkdb\").table(\"stats\").run(conn, callback);\n\n// query about the cluster as a whole\nr.db(\"rethinkdb\").table(\"stats\").get([\"cluster\"]).run(conn, callback);\n\n// query about a specific server\nr.db(\"rethinkdb\").table(\"stats\").get([\"server\", \"de8b75d1-3184-48f0-b1ef-99a9c04e2be5\"]).run(conn, callback);\n\n// query about a specific table\nr.db(\"rethinkdb\").table(\"stats\").get([\"table\", \"31c92680-f70c-4a4b-a49e-b238eb12c023\"]).run(conn, callback);\n\n// query about a replica of a table on a specific server\n// this requires *two* UUIDs: the table's, then the server's\nr.db(\"rethinkdb\").table(\"stats\").get([\"table_server\", \"31c92680-f70c-4a4b-a49e-b238eb12c023\", \"de8b75d1-3184-48f0-b1ef-99a9c04e2be5\"]).run(conn, callback);\n</pre>  <h2 id=\"document-schema\">Document schema</h2> <p>Each object has its own document schema. The field names are, for the most part, self-explanatory. The fields <code class=\"highlighter-rouge\">server</code>, <code class=\"highlighter-rouge\">db</code> and <code class=\"highlighter-rouge\">table</code> will be either UUIDs or strings depending on the value of the <code class=\"highlighter-rouge\">identifier_format</code> optional argument to <code class=\"highlighter-rouge\">table</code>.</p> <h3 id=\"cluster\">cluster</h3> <pre data-language=\"\">{\n  id: [\"cluster\"],\n  query_engine: {\n    queries_per_sec: &lt;NUMBER&gt;,\n    read_docs_per_sec: &lt;NUMBER&gt;,\n    written_docs_per_sec: &lt;NUMBER&gt;\n  }\n}\n</pre>  <h3 id=\"server\">server</h3> <pre data-language=\"\">{\n  id: [\"server\", &lt;UUID&gt;],\n  server: &lt;UUID&gt; or &lt;STRING&gt;,\n  query_engine: {\n    queries_per_sec: &lt;NUMBER&gt;,\n    queries_total: &lt;NUMBER&gt;,\n    read_docs_per_sec: &lt;NUMBER&gt;,\n    read_docs_total: &lt;NUMBER&gt;,\n    written_docs_per_sec: &lt;NUMBER&gt;,\n    written_docs_total: &lt;NUMBER&gt;,\n    client_connections: &lt;NUMBER&gt;\n  },\n}\n</pre>  <p>If a server has timed out, the returned document will contain no statistics, but <em>will</em> contain an error field.</p> <pre data-language=\"\">{\n  id: [\"server\", &lt;UUID&gt;],\n  server: &lt;UUID&gt; or &lt;STRING&gt;,\n  error: \"Timed out. Unable to retrieve stats.\"\n}\n</pre>  <h3 id=\"table\">table</h3> <pre data-language=\"\">{\n  id: [\"table\", &lt;UUID&gt;],\n  table: &lt;UUID&gt; or &lt;STRING&gt;,\n  db: &lt;UUID&gt; or &lt;STRING&gt;,\n  query_engine: {\n    read_docs_per_sec: &lt;NUMBER&gt;,\n    written_docs_per_sec: &lt;NUMBER&gt;\n  }\n}\n</pre>  <h3 id=\"replica-tableserver-pair\">replica (table/server pair)</h3> <pre data-language=\"\">{\n  id: [\"table_server\", &lt;UUID&gt;, &lt;UUID&gt;]  // table_id, server_id\n  server: &lt;UUID&gt; or &lt;STRING&gt;,\n  table: &lt;UUID&gt; or &lt;STRING&gt;,\n  db: &lt;UUID&gt; or &lt;STRING&gt;,\n  query_engine: {\n    read_docs_per_sec: &lt;NUMBER&gt;,\n    read_docs_total: &lt;NUMBER&gt;,\n    written_docs_per_sec: &lt;NUMBER&gt;,\n    written_docs_total: &lt;NUMBER&gt;\n  },\n  storage_engine: {\n      cache: {\n        in_use_bytes: &lt;NUMBER&gt;\n      },\n      disk: {\n        read_bytes_per_sec: &lt;NUMBER&gt;,\n        read_bytes_total: &lt;NUMBER&gt;,\n        written_bytes_per_sec: &lt;NUMBER&gt;,\n        written_bytes_total: &lt;NUMBER&gt;,\n        space_usage: {\n          metadata_bytes: &lt;NUMBER&gt;,\n          data_bytes: &lt;NUMBER&gt;,\n          garbage_bytes: &lt;NUMBER&gt;,\n          preallocated_bytes: &lt;NUMBER&gt;\n        }\n      }\n   }\n}\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/system-stats/\" class=\"_attribution-link\">https://rethinkdb.com/docs/system-stats/</a>\n  </p>\n</div>\n","docs/system-tables/index":"<h1 class=\"title\">System tables</h1> <p>Starting with version 1.16, RethinkDB maintains special <em>system tables</em> that contain configuration and status information about servers, databases, individual tables, and issues with the cluster. Querying system tables returns information about the status of the cluster and current objects (such as servers and tables) within the cluster. By inserting or deleting records and updating fields in these tables, the configuration of the objects they represent can be modified.</p> <div class=\"toc\">  <ul id=\"markdown-toc\"> <li><a href=\"#overview\" id=\"markdown-toc-overview\">Overview</a></li> <li><a href=\"#configuration-tables\" id=\"markdown-toc-configuration-tables\">Configuration tables</a></li> <li><a href=\"#status-tables\" id=\"markdown-toc-status-tables\">Status tables</a></li> <li><a href=\"#user-account-tables\" id=\"markdown-toc-user-account-tables\">User account tables</a></li> <li><a href=\"#other-tables\" id=\"markdown-toc-other-tables\">Other tables</a></li> </ul> </div> <h2 id=\"overview\">Overview</h2> <p>Access the system tables through the <code class=\"highlighter-rouge\">rethinkdb</code> database. These tables aren’t real RethinkDB document stores the way user-created tables are, but rather “table-like” interfaces to the system allowing most ReQL commands to be used for control. System tables cannot be created, dropped, reconfigured, or renamed.</p> <p>The metadata in the system tables applies to the RethinkDB cluster as a whole. Each server in a cluster maintains its own copy of the system tables. Whenever a system table on a server changes, the changes are synced across all the servers.</p> <p><strong>Note:</strong> As of version 2.3, only the <code class=\"highlighter-rouge\">admin</code> user can access system tables. Read <a href=\"../permissions-and-accounts/index\">Permissions and user accounts</a> for more details on user accounts and permissions.</p> <h3 id=\"the-tables\">The Tables</h3> <ul> <li>\n<code class=\"highlighter-rouge\">table_config</code> stores table configurations, including sharding and replication. By writing to <code class=\"highlighter-rouge\">table_config</code>, you can create, delete, and reconfigure tables.</li> <li>\n<code class=\"highlighter-rouge\">server_config</code> stores server names and tags. By writing to this table you can rename servers and assign them tags.</li> <li>\n<code class=\"highlighter-rouge\">db_config</code> stores database UUIDs and names. By writing to this table, databases can be created, deleted or modified.</li> <li>\n<code class=\"highlighter-rouge\">cluster_config</code> stores the authentication key for the cluster.</li> <li>\n<code class=\"highlighter-rouge\">table_status</code> is a read-only table which returns the status and configuration of tables in the system.</li> <li>\n<code class=\"highlighter-rouge\">server_status</code> is a read-only table that returns information about the process and host machine for each server.</li> <li>\n<code class=\"highlighter-rouge\">current_issues</code> is a read-only table that returns statistics about cluster problems. For details, read the <a href=\"../system-issues/index\">System current issues table</a> documentation.</li> <li>\n<code class=\"highlighter-rouge\">users</code> stores RethinkDB user accounts. (See <a href=\"../permissions-and-accounts/index\">Permissions and user accounts</a>.)</li> <li>\n<code class=\"highlighter-rouge\">permissions</code> stores permissions and scopes associated with RethinkDB user accounts. (See <a href=\"../permissions-and-accounts/index\">Permissions and user accounts</a>.)</li> <li>\n<code class=\"highlighter-rouge\">jobs</code> lists the jobs—queries, index creation, disk compaction, and other utility tasks—the cluster is spending time on, and also allows you to interrupt running queries.</li> <li>\n<code class=\"highlighter-rouge\">stats</code> is a read-only table that returns statistics about the cluster.</li> <li>\n<code class=\"highlighter-rouge\">logs</code> is a read-only table that stores log messages from all the servers in the cluster.</li> </ul> <h3 id=\"caveats\">Caveats</h3> <ul> <li>While system tables support changefeeds, they do not support all of the chaining that real tables do. For instance, aggregation (<code class=\"highlighter-rouge\">max</code> and <code class=\"highlighter-rouge\">min</code>) and <code class=\"highlighter-rouge\">limit</code> commands will not work with system tables.</li> <li>Some system tables are read-only. System tables which allow writing require specific document schema, described below.</li> <li>Write operations on system tables are non-atomic. Avoid writing to the same system table row from more than one client at the same time.</li> <li>The <code class=\"highlighter-rouge\">durability</code> argument on writes is ignored for system tables.</li> </ul> <p>With system tables only, the <code class=\"highlighter-rouge\">table</code> command takes a new argument, <code class=\"highlighter-rouge\">identifier_format</code>. Legal values are <code class=\"highlighter-rouge\">name</code> and <code class=\"highlighter-rouge\">uuid</code>. When it’s set to <code class=\"highlighter-rouge\">uuid</code>, references in system tables to databases or other tables will be UUIDs rather than database/table names. This is useful for writing scripts and administration tasks, as UUIDs remain consistent even if object names change. The default is <code class=\"highlighter-rouge\">name</code>.</p> <h2 id=\"configuration-tables\">Configuration tables</h2> <h3 id=\"tableconfig\">table_config</h3> <p>Sharding and replication can be controlled through the <code class=\"highlighter-rouge\">table_config</code> table, along with the more advanced settings of write acknowledgements and durability. Tables can also be renamed by modifying their rows. A typical row in the <code class=\"highlighter-rouge\">table_config</code> table will look like this:</p> <pre data-language=\"\">{\n    id: \"31c92680-f70c-4a4b-a49e-b238eb12c023\",\n    name: \"tablename\",\n    db: \"test\",\n    primary_key: \"id\",\n    shards: [\n        {\n            primary_replica: \"a\",\n            \"replicas\": [\"a\", \"b\"],\n            \"nonvoting_replicas\": []\n        },\n        {\n            primary_replica: \"b\",\n            \"replicas\": [\"a\", \"b\"]\n            \"nonvoting_replicas\": []\n        }\n    ],\n    indexes: [\"index1\", \"index2\"],\n    write_acks: \"majority\",\n    durability: \"hard\"\n}\n</pre>  <ul> <li>\n<code class=\"highlighter-rouge\">id</code>: the UUID of the table. Read-only.</li> <li>\n<code class=\"highlighter-rouge\">name</code>: the name of the table.</li> <li>\n<code class=\"highlighter-rouge\">db</code>: the database the table is in, either a name or UUID depending on the value of <code class=\"highlighter-rouge\">identifier_format</code>. Read-only.</li> <li>\n<code class=\"highlighter-rouge\">primary_key</code>: the name of the field used as the primary key of the table, set at table creation. Read-only.</li> <li>\n<code class=\"highlighter-rouge\">shards</code>: a list of the table’s shards. Each shard is an object with these fields: <ul> <li>\n<code class=\"highlighter-rouge\">primary_replica</code>: the name or UUID of the server acting as the shard’s primary. If <code class=\"highlighter-rouge\">primary_replica</code> is <code class=\"highlighter-rouge\">null</code>, the table will be unavailable. This may happen if the server acting as the shard’s primary is deleted.</li> <li>\n<code class=\"highlighter-rouge\">replicas</code>: a list of servers, including the primary, storing replicas of the shard.</li> <li>\n<code class=\"highlighter-rouge\">nonvoting_replicas</code>: a list of servers which do not participate in “voting” as part of <a href=\"../failover/index\">failover</a>. If this field is omitted, it is treated as an empty list. This list must be a subset of the <code class=\"highlighter-rouge\">replicas</code> field and must not contain the primary replica.</li> </ul> </li> <li>\n<code class=\"highlighter-rouge\">indexes</code>: a list of secondary indexes in the table. Read-only.</li> <li>\n<code class=\"highlighter-rouge\">write_acks</code>: the write acknowledgement settings for the table. When set to <code class=\"highlighter-rouge\">majority</code> (the default), writes will be acknowledged when a majority of replicas have acknowledged their writes; when set to <code class=\"highlighter-rouge\">single</code> writes will be acknowledged when a single replica acknowledges it.</li> <li>\n<code class=\"highlighter-rouge\">durability</code>: <code class=\"highlighter-rouge\">soft</code> or <code class=\"highlighter-rouge\">hard</code> (the default). In <code class=\"highlighter-rouge\">hard</code> durability mode, writes are committed to disk before acknowledgements are sent; in <code class=\"highlighter-rouge\">soft</code> mode, writes are acknowledged immediately upon receipt. The <code class=\"highlighter-rouge\">soft</code> mode is faster but slightly less resilient to failure.</li> </ul> <p>If you <code class=\"highlighter-rouge\">delete</code> a row from <code class=\"highlighter-rouge\">table_config</code> the table will be deleted. If you <code class=\"highlighter-rouge\">insert</code> a row, the <code class=\"highlighter-rouge\">name</code> and <code class=\"highlighter-rouge\">db</code> fields are required; the other fields are optional, and will be automatically generated or set to their default if they are not specified. Do not include the <code class=\"highlighter-rouge\">id</code> field. The system will auto-generate a UUID.</p> <p>If you <code class=\"highlighter-rouge\">replace</code> a row in <code class=\"highlighter-rouge\">table_config</code>, you must include all the fields. It’s usually easier to <code class=\"highlighter-rouge\">update</code> specific fields.</p> <p>Native ReQL commands like <code class=\"highlighter-rouge\">reconfigure</code> also control sharding and replication, and if you’re not using server tags you can change sharding/replication settings in the web UI. Read <a href=\"../sharding-and-replication/index\">Sharding and replication</a> for more details.</p> <h3 id=\"serverconfig\">server_config</h3> <p>This table stores the names of servers along with their <em>tags.</em> Server tags organize servers into logical groups: servers could be tagged by usage (database, application, etc.), or by data center location (“us_west,” “us_east,” “london,” and so on). For more about server tags, read <a href=\"../sharding-and-replication/index\">Sharding and replication</a>.</p> <p>Every server that has ever been part of the cluster and has not been permanently removed will have a row in this table in the following format.</p> <pre data-language=\"\">{\n    id: \"de8b75d1-3184-48f0-b1ef-99a9c04e2be5\",\n    name: \"servername\",\n    tags: [\"default\"],\n    cache_size_mb: \"auto\"\n}\n</pre>  <ul> <li>\n<code class=\"highlighter-rouge\">id</code>: the UUID of the server. (Read-only.)</li> <li>\n<code class=\"highlighter-rouge\">name</code>: the server’s name.</li> <li>\n<code class=\"highlighter-rouge\">tags</code>: a list of unordered tags associated with the server.</li> <li>\n<code class=\"highlighter-rouge\">cache_size_mb</code>: the server’s cache size, either a number (the desired size in megabytes) or <code class=\"highlighter-rouge\">\"auto\"</code> (let the server decide on startup, based on the system’s available memory).</li> </ul> <p>If tags aren’t specified when a server starts, the server is automatically assigned the <code class=\"highlighter-rouge\">default</code> tag. Documents cannot be inserted into <code class=\"highlighter-rouge\">server_config</code>. A new document gets created when a server connects to the cluster.</p> <p>Documents cannot be deleted from this table. When a server loses its connection to the cluster, its corresponding document will be automatically deleted.</p> <h3 id=\"dbconfig\">db_config</h3> <p>One document exists in <code class=\"highlighter-rouge\">db_config</code> for each database in the cluster, with only two fields in the document.</p> <pre data-language=\"\">{\n    id: \"de8b75d1-3184-48f0-b1ef-99a9c04e2be5\",\n    name: \"dbname\"\n}\n</pre>  <ul> <li>\n<code class=\"highlighter-rouge\">id</code>: the UUID of the database. (Read-only.)</li> <li>\n<code class=\"highlighter-rouge\">name</code>: the name of the database.</li> </ul> <p>Documents can be inserted to create new databases, deleted to remove databases, and modified to rename databases. (Renaming databases is the only task that requires querying the <code class=\"highlighter-rouge\">db_config</code> table; the other two tasks have native ReQL commands, <a href=\"https://rethinkdb.com/api/javascript/db_create\">dbCreate</a> and <a href=\"https://rethinkdb.com/api/javascript/db_drop\">dbDrop</a>.) As with tables, if you <code class=\"highlighter-rouge\">insert</code> a database, don’t include the <code class=\"highlighter-rouge\">id</code> field: the system will auto-generate the UUID.</p> <h3 id=\"clusterconfig\">cluster_config</h3> <p>The <code class=\"highlighter-rouge\">cluster_config</code> table contains only one row. Documents cannot be inserted into or deleted from this table.</p> <pre data-language=\"\">{\n    id: \"heartbeat\",\n    heartbeat_timeout_secs: 10\n}\n</pre>  <ul> <li>\n<code class=\"highlighter-rouge\">id</code>: the primary key, <code class=\"highlighter-rouge\">heartbeat</code>.</li> <li>\n<code class=\"highlighter-rouge\">heartbeat_timeout_secs</code>: the time, in seconds, between when a server loses connectivity to a cluster and the <a href=\"../failover/index\">failover</a> process begins. The default is 10 seconds.</li> </ul> <h2 id=\"status-tables\">Status tables</h2> <p>All the status tables are read-only. Some of the information in status tables is also returned in config tables (such as object names and UUIDs).</p> <h3 id=\"tablestatus\">table_status</h3> <p>This table stores information about table availability. There is one document per table (not counting system tables).</p> <pre data-language=\"\">{\n    id: \"31c92680-f70c-4a4b-a49e-b238eb12c023\",\n    name: \"tablename\",\n    db: \"test\",\n    status: {\n        ready_for_outdated_reads: true,\n        ready_for_reads: true,\n        ready_for_writes: true,\n        all_replicas_ready: true\n    },\n    shards: [\n        {\n            primary_replicas: [\"a\"],\n            replicas: [{server: \"a\", state: \"ready\"}, {server: \"b\", state: \"ready\"}]\n        },\n        {\n            primary_replicas: [\"b\"],\n            replicas: [{server: \"a\", state: \"ready\"}, {server: \"b\", state: \"ready\"}]\n        }]\n}\n\n</pre>  <ul> <li>\n<code class=\"highlighter-rouge\">id</code>: the UUID of the table.</li> <li>\n<code class=\"highlighter-rouge\">name</code>: the table’s name.</li> <li>\n<code class=\"highlighter-rouge\">db</code>: the database the table is in, either a name or UUID depending on the value of <code class=\"highlighter-rouge\">identifier_format</code> (see “caveats” in the overview at the top of this document).</li> <li>\n<code class=\"highlighter-rouge\">status</code>: the subfields in this field indicate whether all shards of the table are ready to accept the given type of query: <code class=\"highlighter-rouge\">outdated_reads</code>, <code class=\"highlighter-rouge\">reads</code> and <code class=\"highlighter-rouge\">writes</code>. The <code class=\"highlighter-rouge\">all_replicas_ready</code> field indicates whether all backfills have finished.</li> <li>\n<code class=\"highlighter-rouge\">shards</code>: one entry for each shard in <code class=\"highlighter-rouge\">table_config</code>. Each shard’s object has the following fields: <ul> <li>\n<code class=\"highlighter-rouge\">primary_replicas</code>: a list of zero or more servers acting as primary replicas for the shard. If it contains more than one server, different parts of the shard are being served by different primaries; this is a temporary condition.</li> <li>\n<code class=\"highlighter-rouge\">replicas</code>: a list of all servers acting as a replica for that shard. This may include servers which are no longer configured as replicas but are still storing data until it can be safely deleted. The <code class=\"highlighter-rouge\">state</code> field may be one of the following: <ul> <li>\n<code class=\"highlighter-rouge\">ready</code>: the server is ready to serve queries.</li> <li>\n<code class=\"highlighter-rouge\">transitioning</code>: the server is between one of the above states. A transitioning state should typically only last a fraction of a second.</li> <li>\n<code class=\"highlighter-rouge\">backfilling</code>: the server is receiving data from another server.</li> <li>\n<code class=\"highlighter-rouge\">disconnected</code>: the server is not connected to the cluster.</li> <li>\n<code class=\"highlighter-rouge\">waiting_for_primary</code>: the server is waiting for its primary replica to be available.</li> <li>\n<code class=\"highlighter-rouge\">waiting_for_quorum</code>: the primary is waiting for a quorum of the table’s replicas to be available before it starts accepting writes.</li> </ul> </li> </ul> </li> </ul> <h3 id=\"serverstatus\">server_status</h3> <p>This table returns information about the status and availability of servers within a RethinkDB cluster. A single document is created for each server that connects to the cluster. If a server loses its connection to the cluster, it will be removed from the <code class=\"highlighter-rouge\">server_status</code> table.</p> <p>This is a typical document schema for a server connected to the host server—that is, the server the client’s connecting to when they query the <code class=\"highlighter-rouge\">server_status</code> table.</p> <pre data-language=\"\">{\n    id: \"de8b75d1-3184-48f0-b1ef-99a9c04e2be5\",\n    name: \"servername\",\n    network: {\n        hostname: \"companion-cube\",\n        cluster_port: 29015,\n        http_admin_port: 8080,\n        reql_port: 28015,\n        time_connected: &lt;ReQL time object&gt;,\n        connected_to: {\n            \"companion-orb\": true,\n            \"companion-dodecahedron\": true\n        },\n        canonical_addresses: [\n            { host: \"127.0.0.1\", port: 29015 },\n            { host: \"::1\", port: 29015 }\n            ]\n    },\n    process: {\n        argv: [\"/usr/bin/rethinkdb\"],\n        cache_size_mb: 100,\n        pid: 28580,\n        time_started: &lt;ReQL time object&gt;,\n        version: \"rethinkdb 2.2.5 (CLANG 7.0.2 (clang-700.1.81))\"\n    }\n}\n</pre>  <ul> <li>\n<code class=\"highlighter-rouge\">id</code>: the UUID of the server.</li> <li>\n<code class=\"highlighter-rouge\">name</code>: the name of the server.</li> <li>\n<code class=\"highlighter-rouge\">network</code>: information about the network the server is on: <ul> <li>\n<code class=\"highlighter-rouge\">hostname</code>: the host name as returned by <code class=\"highlighter-rouge\">gethostname()</code>.</li> <li>\n<code class=\"highlighter-rouge\">*_port</code>: the RethinkDB ports on that server (from the server’s own point of view).</li> <li>\n<code class=\"highlighter-rouge\">canonical_addresses</code>: a list of the canonical addresses and ports of the server. These may differ from <code class=\"highlighter-rouge\">hostname</code> and <code class=\"highlighter-rouge\">cluster_port</code> depending on your network configuration.</li> <li>\n<code class=\"highlighter-rouge\">time_connected</code>: the time the server connected (or reconnected) to the cluster.</li> <li>\n<code class=\"highlighter-rouge\">connected_to</code>: a key/value list of servers this server is either currently connected to (<code class=\"highlighter-rouge\">true</code>), or knows about but is not currently connected to (<code class=\"highlighter-rouge\">false</code>). In most cases other servers will be identified by name, but if the server being queried cannot determine the name of a server in the cluster it is not connected to, it will be identified by UUID.</li> </ul> </li> <li>\n<code class=\"highlighter-rouge\">process</code>: information about the RethinkDB server process: <ul> <li>\n<code class=\"highlighter-rouge\">argv</code>: the command line arguments the server started with, as an array of strings.</li> <li>\n<code class=\"highlighter-rouge\">cache_size_mb</code>: the cache size in megabytes. (This can be <a href=\"../cluster-on-startup/index\">configured on startup</a> or by editing the <code class=\"highlighter-rouge\">server_status</code> entry for that server.)</li> <li>\n<code class=\"highlighter-rouge\">pid</code>: the process ID.</li> <li>\n<code class=\"highlighter-rouge\">time_started</code>: the time the server process started.</li> <li>\n<code class=\"highlighter-rouge\">version</code>: the version string of the RethinkDB server.</li> </ul> </li> </ul> <h2 id=\"user-account-tables\">User account tables</h2> <p>For details on these two tables, read <a href=\"../permissions-and-accounts/index\">Permissions and user accounts</a>.</p> <h3 id=\"users\">users</h3> <p>The <code class=\"highlighter-rouge\">users</code> table contains one document for each user in the system, each with two key/value pairs: a unique <code class=\"highlighter-rouge\">id</code> and a <code class=\"highlighter-rouge\">password</code> field. The <code class=\"highlighter-rouge\">id</code> is the account name. The <code class=\"highlighter-rouge\">password</code> field behaves differently on writes than on reads; you can change an account’s password by writing a value to this field (or remove the password by writing <code class=\"highlighter-rouge\">false</code>), but the password cannot be read. Instead, on a read operation <code class=\"highlighter-rouge\">password</code> will be <code class=\"highlighter-rouge\">true</code> or <code class=\"highlighter-rouge\">false</code>, indicating whether the account has a password or not.</p> <pre data-language=\"\">{\n    id: \"admin\",\n    password: true\n}\n</pre>  <p>Documents can be inserted into <code class=\"highlighter-rouge\">users</code> to create new users and deleted to remove them. You cannot change the <code class=\"highlighter-rouge\">id</code> value of an existing document, only change or remove passwords via <code class=\"highlighter-rouge\">update</code>.</p> <h3 id=\"permissions\">permissions</h3> <p>Documents in the permissions table have two to four key/value pairs.</p> <ul> <li>\n<code class=\"highlighter-rouge\">id</code>: a list of one to three items indicating the user and the scope for the given permission, the items being a username, a database UUID (for database and table scope), and a table UUID (only for table scope).</li> <li>\n<code class=\"highlighter-rouge\">permissions</code>: an object with one to four boolean keys corresponding to the valid permissions (<code class=\"highlighter-rouge\">read</code>, <code class=\"highlighter-rouge\">write</code>, <code class=\"highlighter-rouge\">connect</code> and <code class=\"highlighter-rouge\">config</code>).</li> <li>\n<code class=\"highlighter-rouge\">database</code>: the name of the database these permissions apply to, only present for permissions with database or table scope.</li> <li>\n<code class=\"highlighter-rouge\">table</code>: the name of the table these permissions apply to, only present for permissions with table scope.</li> </ul> <pre data-language=\"\">{\n    id: [\n            \"bob\"\n        ],\n    permissions: {\n        read: true,\n        write: false,\n        config: false\n    }\n}\n{\n    database: \"field_notes\",\n    id: [\n            \"bob\",\n            \"8b2c3f00-f312-4524-847a-25c79e1a22d4\"\n        ],\n    permissions: {\n        write: true\n    }\n}\n{\n    database: \"field_notes\",\n    table: \"calendar\",\n    id: [\n            \"bob\",\n            \"8b2c3f00-f312-4524-847a-25c79e1a22d4\",\n            \"9d705e8c-4e49-4648-b4a9-4ad82ebba635\"\n        ],\n    permissions: {\n        write: false\n    }\n}\n</pre>  <p><strong>Note:</strong> The <code class=\"highlighter-rouge\">table</code> and <code class=\"highlighter-rouge\">database</code> fields will be automatically filled in when inserting into <code class=\"highlighter-rouge\">permissions</code>, based on how many items are in the <code class=\"highlighter-rouge\">id</code> list.</p> <p>Under most circumstances, it is easier to manipulate the <code class=\"highlighter-rouge\">permissions</code> table by using the <a href=\"https://rethinkdb.com/api/javascript/grant\">grant</a> command.</p> <h2 id=\"other-tables\">Other tables</h2> <h3 id=\"currentissues\">current_issues</h3> <p>This table shows problems that have been detected within the RethinkDB cluster. For details, read the <a href=\"../system-issues/index\">System current issues table</a> documentation.</p> <h3 id=\"jobs\">jobs</h3> <p>The <code class=\"highlighter-rouge\">jobs</code> table provides information about tasks running within the RethinkDB cluster, including queries, disk compaction, and index construction, and allows you to kill query jobs by deleting them from the table. For details, read the <a href=\"../system-jobs/index\">System jobs table</a> documentation.</p> <h3 id=\"stats\">stats</h3> <p>The <code class=\"highlighter-rouge\">stats</code> table provides statistics about server read/write throughput, client connections, and memory usage. For details, read the <a href=\"../system-stats/index\">System stats table</a> documentation.</p> <h3 id=\"logs\">logs</h3> <p>This table stores the log files of the cluster. One row is added to the table for each log message generated by <em>each</em> server that’s connected to the cluster. A maximum of 1000 entries will be stored for each server.</p> <pre data-language=\"\">{\n    id: [\"2015-01-09T02:11:55.190829899\", \"5a59c88f-8f66-4703-bf74-bf4cd7205db3\"]\n    level: \"notice\",\n    message: \"Running on Linux 3.13.0-24-generic x86_64\",\n    server: \"companion_cube_3yz\",\n    timestamp: &lt;ReQL time obj&gt;,\n    uptime: 0.389226\n}\n</pre>  <ul> <li>\n<code class=\"highlighter-rouge\">id</code>: a two-element array, consisting of the timestamp of the log entry (in UTC) and the UUID of the server generating the message.</li> <li>\n<code class=\"highlighter-rouge\">level</code>: a string indicating the log message’s severity level. One of <code class=\"highlighter-rouge\">debug</code>, <code class=\"highlighter-rouge\">info</code>, <code class=\"highlighter-rouge\">notice</code>, <code class=\"highlighter-rouge\">warn</code>, or <code class=\"highlighter-rouge\">error</code>.</li> <li>\n<code class=\"highlighter-rouge\">message</code>: the contents of the log message.</li> <li>\n<code class=\"highlighter-rouge\">server</code>: the UUID or name of the generating server (depending on the value of <code class=\"highlighter-rouge\">identifier_format</code>).</li> <li>\n<code class=\"highlighter-rouge\">timestamp</code>: the time when the log message is posted.</li> <li>\n<code class=\"highlighter-rouge\">uptime</code>: how many seconds the server had been running at the time the log message was generated.</li> </ul> <p>The <code class=\"highlighter-rouge\">logs</code> table supports changefeeds. Only messages being <em>written to the logs table</em> will generate changefeed events.</p> <ul> <li>The table stores a maximum of 1000 messages per server. The changefeed will not deliver events for log entries when they are removed.</li> <li>When a server connects or disconnects, its log entries will be added to or removed from the <code class=\"highlighter-rouge\">logs</code> table. The action of connecting or disconnecting will not generate changefeed events for those log entries.</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/system-tables/\" class=\"_attribution-link\">https://rethinkdb.com/docs/system-tables/</a>\n  </p>\n</div>\n","docs/system-jobs/index":"<h1 class=\"title\">System jobs table</h1> <p>The jobs table is one of the <a href=\"../system-tables/index\">system tables</a> added in version 1.16 of RethinkDB. It provides information about tasks running within the RethinkDB cluster, including queries, disk compaction, and index construction, and allows you to kill query jobs by deleting them from the table.</p> <h2 id=\"querying-the-jobs-table\">Querying the jobs table</h2> <p><strong>Note:</strong> as with other system tables, the jobs table can only be accessed by the <code class=\"highlighter-rouge\">admin</code> user account.</p> <p>The table’s primary key is the <code class=\"highlighter-rouge\">id</code> field, and the keys are always arrays. The first element in the array is always a string indicating the type of job (e.g., <code class=\"highlighter-rouge\">\"query\"</code>, <code class=\"highlighter-rouge\">\"disk_compaction\"</code>, etc.); the second element is the UUID of the job. The type of job is also given in the <code class=\"highlighter-rouge\">type</code> field.</p> <pre data-language=\"\">// get a list all currently running jobs\nr.db(\"rethinkdb\").table(\"jobs\").run(conn, callback);\n\n// get a list of currently running queries\nr.db(\"rethinkdb\").table(\"jobs\").filter({type: 'query'}).run(conn, callback);\n\n// delete a specific query\nr.db(\"rethinkdb\").table(\"jobs\").get(\n    [\"query\", \"72789a11-b2e1-4b45-a3ab-af996dcaf484\"]\n).delete().run(conn, callback);\n</pre>  <h2 id=\"document-schema\">Document schema</h2> <p>There are four kinds of jobs. The document schema is consistent between them, with job-specific data appearing in the <code class=\"highlighter-rouge\">info</code> field.</p> <pre data-language=\"\">{\n    \"duration_sec\": &lt;number&gt; or null,\n    \"id\": [ &lt;type string&gt;, &lt;uuid&gt; ],\n    \"info\": { &lt;metadata },\n    \"servers\": [ \"server1\", \"server2\", ... ],\n    \"type\": &lt;type string&gt;\n}\n</pre>  <h3 id=\"query\">query</h3> <p>These entries represent queries issued by a specific client.</p> <pre data-language=\"\">info: {\n    \"client_address\": &lt;IP address string&gt;,\n    \"client_port\": &lt;number&gt;\n}\n</pre>  <h3 id=\"diskcompaction\">disk_compaction</h3> <p>This is an ongoing task on each server, compacting RethinkDB’s storage space in the background. The <code class=\"highlighter-rouge\">duration_sec</code> field will always be <code class=\"highlighter-rouge\">null</code>, and there is no extra information metadata.</p> <pre data-language=\"\">info: { }\n</pre>  <h3 id=\"indexconstruction\">index_construction</h3> <p>These tasks construct secondary indexes in the background. The <code class=\"highlighter-rouge\">progress</code> field is a number between 0 and 1 indicating how far along the index construction task is.</p> <pre data-language=\"\">info: {\n    \"db\": &lt;database name&gt;,\n    \"index\": &lt;index name&gt;,\n    \"progress\": &lt;number&gt;,\n    \"table\": &lt;table name&gt;\n}\n</pre>  <h3 id=\"backfill\">backfill</h3> <p>Backfill tasks bring out of date shards up to date by transferring data between servers. As above, the <code class=\"highlighter-rouge\">progress</code> field is a number between 0 and 1 indicating how far along the backfill task is.</p> <pre data-language=\"\">info: {\n    \"db\": &lt;database name&gt;,\n    \"destination server\": &lt;server being copied to&gt;,\n    \"source_server\": &lt;server being copied from&gt;,\n    \"table\": &lt;table name&gt;,\n    \"progress\": &lt;number&gt;\n}\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/system-jobs/\" class=\"_attribution-link\">https://rethinkdb.com/docs/system-jobs/</a>\n  </p>\n</div>\n","docs/migration/index":"<h1 class=\"title\">Migrating data from previous versions of RethinkDB</h1> <p>The steps necessary for migrating data to current RethinkDB versions from previous ones depend on which version you’re migrating from.</p> <div class=\"toc\">  <ul id=\"markdown-toc\"> <li><a href=\"#back-up-your-data\" id=\"markdown-toc-back-up-your-data\">Back up your data</a></li> <li><a href=\"#rebuild-indexes\" id=\"markdown-toc-rebuild-indexes\">Rebuild indexes</a></li> <li><a href=\"#migrating-old-data\" id=\"markdown-toc-migrating-old-data\">Migrating old data</a></li> <li><a href=\"#deprecated-versions\" id=\"markdown-toc-deprecated-versions\">Deprecated versions</a></li> </ul> </div> <ul> <li>\n<strong>1.16 or higher:</strong> Migration is handled automatically. (This is also true for upgrading from 1.14 onward to versions earlier than 2.2.) After migration, follow the “Rebuild indexes” directions.</li> <li>\n<strong>1.13–1.15:</strong> Upgrade to RethinkDB 2.0.5 <em>first,</em> rebuild the secondary indexes by following the “Rebuild indexes” directions, then upgrade to 2.1 or higher. (Migration from 2.0.5 to 2.1+ will be handled automatically.)</li> <li>\n<strong>1.7–1.12:</strong> Follow the “Migrating old data” directions.</li> <li>\n<strong>1.6 or earlier:</strong> Read the “Deprecated versions” section.</li> </ul> <h2 id=\"back-up-your-data\">Back up your data</h2> <p>While it’s not strictly necessary to back up your data before upgrading, it’s always a good idea. You should make a backup by using the <code class=\"highlighter-rouge\">dump</code> command <em>before</em> updating RethinkDB to its new version! Databases that have been automatically upgraded are not backward-compatible (that is, a database from version 1.14 cannot be used with version 1.13).</p> <p>Use the <code class=\"highlighter-rouge\">dump</code> subcommand from the command line to create an archive of data from the cluster. This creates a <strong>tar.gz</strong> file consisting of JSON documents and additional table metadata.</p> <pre data-language=\"\">rethinkdb dump [options]\n</pre>  <p>The <code class=\"highlighter-rouge\">restore</code> subcommand will reload a backup an archive into your cluster.</p> <pre data-language=\"\">rethinkdb restore filename\n</pre>  <p>Use <code class=\"highlighter-rouge\">rethinkdb help &lt;command&gt;</code> for a list of options. For more details, see <a href=\"../backup/index\">Backing up your data</a>.</p> <blockquote class=\"infobox infobox-alert\">\n<p><strong>Note:</strong> The <code class=\"highlighter-rouge\">dump</code> and <code class=\"highlighter-rouge\">restore</code> commands require the <a href=\"https://rethinkdb.com/docs/install-drivers/python/\">Python driver</a> to be installed. Don’t upgrade the Python driver until <em>after</em> you’ve dumped the data!</p> <p>If you don’t have the Python driver installed, you can install a previous version using <code class=\"highlighter-rouge\">pip install rethinkdb==&lt;version&gt;</code>. (You can use the <a href=\"https://pypi.python.org/pypi/rethinkdb\" title=\"PyPI &gt; rethinkdb\">Python Package Index</a> to check on current and older versions.)</p> </blockquote> <h2 id=\"rebuild-indexes\">Rebuild indexes</h2> <p>When you upgrade a major release (i.e., 2.1 to 2.2), you should rebuild outdated secondary indexes manually. This can be done easily from the command line:</p> <pre data-language=\"\">rethinkdb index-rebuild\n</pre>  <p>This is <em>required</em> if you’re upgrading from versions before 1.16; in those cases, you’ll need to upgrade to version 2.0.5 first. (You can download 2.0.5 and other older versions at RethinkDB’s <a href=\"http://download.rethinkdb.com\">download archive</a>). If you’re upgrading from RethinkDB version 1.16 or later, you can move to 2.2 or higher directly.</p> <p>Note that rebuilding indexes is <em>not</em> required if you’re upgrading between minor releases (i.e., 2.2.0 to 2.2.1).</p> <h2 id=\"migrating-old-data\">Migrating old data</h2> <p><em>These steps are only necessary if you’re upgrading from RethinkDB version 1.7–1.12 to version 2.1 or higher.</em> If you’re using a later version, see the sections above. (If you’re using 1.6 or earlier, read the “<a href=\"#deprecated-versions\">Deprecated versions</a>” section below.)</p> <p>Migration consists of three simple steps:</p> <ul> <li>Export your data from the existing version of RethinkDB</li> <li>Upgrade RethinkDB to a new version</li> <li>Import the data into the new version of RethinkDB</li> </ul> <blockquote class=\"infobox infobox-alert\">\n<p>You must export your data <strong>before</strong> you’ve upgraded RethinkDB to a new version! If you’ve already updated, you can find binaries for previous versions in the <a href=\"http://download.rethinkdb.com\">download archive</a>.</p> </blockquote> <h3 id=\"exporting-your-data\">Exporting your data</h3> <p>To export your data, use <code class=\"highlighter-rouge\">rethinkdb dump</code>:</p> <pre data-language=\"\">rethinkdb dump -c &lt;host&gt;:&lt;port&gt;\n</pre>  <p>This command will export all your data to a <code class=\"highlighter-rouge\">tar.gz</code> file named <code class=\"highlighter-rouge\">rethinkdb_dump_&lt;timestamp&gt;.tar.gz</code> (this may vary depending on your platform).</p> <p>Use <code class=\"highlighter-rouge\">rethinkdb help &lt;command&gt;</code> for a list of options. For more details, see <a href=\"../backup/index\">Backing up your data</a>.</p> <h3 id=\"upgrading-rethinkdb\">Upgrading RethinkDB</h3> <p>First, upgrade the RethinkDB server and drivers to the latest version:</p> <ul> <li>See <a href=\"https://rethinkdb.com/install\">server install instructions</a> for your platform.</li> <li>See <a href=\"../install-drivers/index\">driver install instructions</a> for your language.</li> </ul> <blockquote class=\"infobox \">\n<p><strong>Keep in mind</strong>:</p> <ul> <li>Don’t upgrade the Python driver until <em>after</em> you’ve dumped the data.</li> <li>\n<a href=\"https://rethinkdb.com/docs/install-drivers/python/\">Upgrade</a> the Python driver for the <code class=\"highlighter-rouge\">restore</code> step below.</li> </ul> </blockquote> <p>Then make sure to move or delete the old RethinkDB data directory (<code class=\"highlighter-rouge\">rethinkdb_data</code> by default), since the new version will not be able to read the old file.</p> <h3 id=\"importing-your-data\">Importing your data</h3> <p>To import your data, use <code class=\"highlighter-rouge\">rethinkdb restore</code>:</p> <pre data-language=\"\">rethinkdb restore &lt;exported_file&gt; -c &lt;host&gt;:&lt;port&gt;\n</pre>  <p>Use <code class=\"highlighter-rouge\">rethinkdb restore --help</code> to see the complete list of options for importing your data. Again, for more details, see <a href=\"../backup/index\">Backing up your data</a>.</p> <p>After importing your data, you’ll need to rebuild your secondary indexes.</p> <pre data-language=\"\">rethinkdb index-rebuild\n</pre>  <blockquote class=\"infobox infobox-alert\">\n<p>The cluster configuration is <em>not</em> exported in backup. After a full restore, it will need to be manually reconfigured.</p> </blockquote> <h2 id=\"deprecated-versions\">Deprecated versions</h2> <p>Upgrading from RethinkDB versions 1.6 or earlier has <em>not</em> been tested with RethinkDB 2.1 and higher. However, you should be able to use the deprecated <a href=\"https://github.com/rethinkdb/rethinkdb/tree/02b4f29e1e7f15b3edffcb68bf015578ec5783ab/scripts/migration\">migration script</a>.</p> <p>Follow the directions in the README file to perform the migration.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/migration/\" class=\"_attribution-link\">https://rethinkdb.com/docs/migration/</a>\n  </p>\n</div>\n","docs/importing/index":"<h1 class=\"title\">Importing your data</h1> <p><img alt=\"Importing Data Illustration\" class=\"api_command_illustration\" src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/importing_data.png\"></p> <p>The <code class=\"highlighter-rouge\">rethinkdb</code> utility includes an <code class=\"highlighter-rouge\">import</code> command to load existing data into RethinkDB databases. It can read JSON files, organized in one of two formats described below, or comma-separated value (CSV) files (including ones with other delimiters such as tab characters). The utility runs under the <code class=\"highlighter-rouge\">admin</code> user account (see <a href=\"../permissions-and-accounts/index\">Permissions and user accounts</a>).</p> <p>When the option is available, you should choose the JSON file format. If you’re exporting from a SQL database this might not be possible, but you might be able to write a separate script to transform CSV output into JSON, or use the <code class=\"highlighter-rouge\">mysql2json</code> script available as part of <a href=\"https://github.com/seamusabshere/mysql2xxxx\">mysql2xxxx</a>.</p> <p>The full syntax for the <code class=\"highlighter-rouge\">import</code> command is as follows:</p> <p><em>Import from a directory</em></p> <pre data-language=\"\">rethinkdb import -d DIR [-c HOST:PORT] [--force] [-p]\n  [--password-file FILE] [-i (DB | DB.TABLE)] [--clients NUM]\n  [--shards NUM_SHARDS] [--replicas NUM_REPLICAS]\n</pre>  <p><em>Import from a file</em></p> <pre data-language=\"\">rethinkdb import -f FILE --table DB.TABLE [-c HOST:PORT] [--force]\n  [-p] [--password-file FILE] [--clients NUM] [--format (csv | json)]\n  [--pkey PRIMARY_KEY] [--shards NUM_SHARDS] [--replicas NUM_REPLICAS]\n  [--delimiter CHARACTER] [--custom-header FIELD,FIELD... [--no-header]]\n</pre>  <p>Importing from a directory is only supported for directories created by the <code class=\"highlighter-rouge\">rethinkdb export</code> command.</p> <p>Options for imports include:</p> <ul> <li>\n<code class=\"highlighter-rouge\">-f</code>: file to import from</li> <li>\n<code class=\"highlighter-rouge\">--table</code>: table to import to</li> <li>\n<code class=\"highlighter-rouge\">--format</code>: CSV or JSON (default JSON)</li> <li>\n<code class=\"highlighter-rouge\">-c</code>: connect to the given IP address/host and port</li> <li>\n<code class=\"highlighter-rouge\">-p</code>, <code class=\"highlighter-rouge\">--password</code>: prompt for the admin password, if one has been set</li> <li>\n<code class=\"highlighter-rouge\">--password-file</code>: read the admin password from a plain text file</li> <li>\n<code class=\"highlighter-rouge\">--tls-cert</code>: specify a path to a TLS certificate to allow encrypted connections to the server (see <a href=\"../security/index\">Securing the cluster</a>)</li> <li>\n<code class=\"highlighter-rouge\">--clients</code>: the number of client connections to use at once (default 8)</li> <li>\n<code class=\"highlighter-rouge\">--force</code>: import data even if a table already exists</li> <li>\n<code class=\"highlighter-rouge\">--fields</code>: only import from the listed fields</li> <li>\n<code class=\"highlighter-rouge\">--no-header</code>: indicate the first line of a CSV file is <em>not</em> a header row</li> <li>\n<code class=\"highlighter-rouge\">--custom-header</code>: supply a custom header row for a CSV file</li> </ul> <p>(Some of these options only apply to file imports, and there are other options available. Type <code class=\"highlighter-rouge\">rethinkdb help import</code> for a full list.)</p> <p>To import the file <code class=\"highlighter-rouge\">users.json</code> into the table <code class=\"highlighter-rouge\">test.users</code>, you would use:</p> <pre data-language=\"\">rethinkdb import -f users.json --table test.users\n</pre>  <p>If it were a CSV file, you would use:</p> <pre data-language=\"\">rethinkdb import -f users.csv --format csv --table test.users\n</pre>  <p>By default, the import command will connect to <code class=\"highlighter-rouge\">localhost</code> port <code class=\"highlighter-rouge\">28015</code>. You can use the <code class=\"highlighter-rouge\">-c</code> option to specify a server and client port to connect to. (Note this is the driver port clients connect to, not the cluster port.)</p> <pre data-language=\"\">rethinkdb import -f crew.json --table discovery.crew -c hal:2001\n</pre>  <p>If the cluster requires authorization, you can prompt for the <code class=\"highlighter-rouge\">admin</code> user account password with <code class=\"highlighter-rouge\">-p</code>, or supply a <code class=\"highlighter-rouge\">--password-file</code> to read the password from. (The password file is just a plain text file, with the password on the first and only line.)</p> <pre data-language=\"\">rethinkdb import -f crew.json --table discovery.crew -c hal:2001 -p\n</pre>  <p>A primary key other than <code class=\"highlighter-rouge\">id</code> can be specified with <code class=\"highlighter-rouge\">--pkey</code>:</p> <pre data-language=\"\">rethinkdb import -f heroes.json --table marvel.heroes --pkey name\n</pre>  <p>JSON files are preferred to CSV files, as JSON can represent RethinkDB documents fully. If you’re importing from a CSV file, you should include a header row with the field names, or use the <code class=\"highlighter-rouge\">--no-header</code> option with the <code class=\"highlighter-rouge\">--custom-header</code> option to specify the names.</p> <pre data-language=\"\">rethinkdb import -f users.csv --format csv --table test.users --no-header \\\n    --custom-header id,username,email,password\n</pre>  <p>The CSV delimiter defaults to the comma, but this can be overridden with the <code class=\"highlighter-rouge\">--delimiter</code> option. Use <code class=\"highlighter-rouge\">--delimiter '\\t'</code> for a tab-delimited file.</p> <p>Values in CSV imports will always be imported as strings. If you want to convert those fields after import to the <code class=\"highlighter-rouge\">number</code> data type, run an <code class=\"highlighter-rouge\">update</code> query that does the conversion. An example runnable in the Data Explorer:</p> <pre data-language=\"\">r.table('tablename').update(function(doc) {\n    return doc.merge({\n        field1: doc('field1').coerceTo('number'),\n        field2: doc('field2').coerceTo('number')\n    })\n});\n</pre>  <p>RethinkDB will accept two formats for JSON files:</p> <ul> <li> <p>An array of JSON documents.</p> <p><code class=\"highlighter-rouge\">js\n  [ { field: \"value\" }, { field: \"value\"}, ... ]\n </code></p> </li> <li> <p>Whitespace-separated JSON rows.</p> <p><code class=\"highlighter-rouge\">js\n  { field: \"value\" }\n  { field: \"value\" }\n </code></p> </li> </ul> <p>In both cases, each documents is a JSON object, bracketed with <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"p\">}</span></code> characters. Only the first format is itself a valid JSON document, but RethinkDB will import documents properly either way.</p> <p>There are more options than what we’ve covered here. Run <code class=\"highlighter-rouge\">rethinkdb help import</code> for a full list of parameters and examples.</p> <blockquote class=\"infobox infobox-alert\">\n<p>While <code class=\"highlighter-rouge\">import</code> has the ability to import a directory full of files, those files are expected to be in the format and directory structure created by the <code class=\"highlighter-rouge\">export</code> command.</p> </blockquote><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/importing/\" class=\"_attribution-link\">https://rethinkdb.com/docs/importing/</a>\n  </p>\n</div>\n","docs/third-party-admin-tools/index":"<h1 class=\"title\">Third-party administration tools</h1> <blockquote class=\"infobox \">\n<p><strong>Add your project:</strong> Have you written a cool library or tool for RethinkDB? Shoot us an email at <a href=\"mailto:info@rethinkdb.com\">info@rethinkdb.com</a>.</p> </blockquote> <h2 id=\"administration-tools\">Administration tools</h2> <ul> <li> <p><a href=\"https://github.com/athlite/rethinkdb-cli\">rethinkdb-cli</a> by <a href=\"https://github.com/athlite\">@athlite</a><br> A Node.js REPL for RethinkDB.</p> </li> <li> <p><a href=\"https://github.com/neumino/chateau\">Chateau</a> by <a href=\"https://github.com/neumino\">@neumino</a><br> An administrative interface for your data (like phpMyAdmin for RethinkDB).</p> </li> <li> <p><a href=\"https://github.com/Calder/methink\">Methink</a> by <a href=\"https://github.com/Calder\">@Calder</a><br> A MySQL to RethinkDB migration script.</p> </li> <li> <p><a href=\"https://github.com/baruch/rethink-miner\">rethink-miner</a> by <a href=\"https://github.com/baruch\">@baruch</a><br> Stores queries and their results, and displays them from a web interface.</p> </li> <li> <p><a href=\"https://github.com/stiang/recli\">recli</a> by <a href=\"https://github.com/stiang\">@stiang</a><br> CLI to run ReQL queries in JavaScript.</p> </li> <li> <p><a href=\"https://github.com/byterussian/rethinkdb-cli\">rethinkdb-cli</a> by <a href=\"https://github.com/byterussian\">@byterussian</a><br> CLI to run ReQL queries in Ruby.</p> </li> <li> <p><a href=\"https://github.com/billbarsch/phpReAdmin\">phpReAdmin</a> by <a href=\"https://github.com/billbarsch\">@billbarsch</a><br> Web frontend written in PHP to create/rename/update/delete RethinkDB databases/tables/docs and run ReQL queries in PHP.</p> </li> <li> <p><a href=\"https://github.com/robconery/rethinkdb_nightly\">rethinkdb_nightly</a> by <a href=\"https://github.com/robconery\">@robconery</a><br> A Node.js module that will execute a nightly backup and push it to S3.</p> </li> </ul> <h2 id=\"logging-tools\">Logging tools</h2> <ul> <li>\n<a href=\"https://github.com/kureikain/fluent-plugin-rethink\">fluent-plugin-rethinkdb</a><br> <a href=\"https://github.com/fluent/fluentd\">FluentD</a> output plugins to ship logs to RethinkDB.</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/third-party-admin-tools/\" class=\"_attribution-link\">https://rethinkdb.com/docs/third-party-admin-tools/</a>\n  </p>\n</div>\n","docs/config-file/index":"<h1 class=\"title\">Configuration file options</h1> <p>The <code class=\"highlighter-rouge\">.conf</code> file includes a number of options exclusively for the init script. The rest of the options are exactly the same as the ones that go on the command line to the RethinkDB server. For more details about these options run <code class=\"highlighter-rouge\">rethinkdb help</code>.</p> <p>The configuration file’s location depends on the startup system your distribution uses. A configuration file may also be specified on the command line with the <code class=\"highlighter-rouge\">--config-file</code> option.</p> <h3 id=\"format\">Format</h3> <p>A <a href=\"https://github.com/rethinkdb/rethinkdb/blob/next/packaging/assets/config/default.conf.sample\">sample <code class=\"highlighter-rouge\">.conf</code> file</a> is available with full comments. (It may already be installed on your distribution as <code class=\"highlighter-rouge\">default.conf.sample</code>.)</p> <p>The file uses a simple format of <code class=\"highlighter-rouge\">key=value</code>, with one key specified per line. A simple configuration file that uses the default ports, assigns a server to a virtual group using server tags and joins an existing cluster might be:</p> <pre data-language=\"\">server-name=Kismet\nserver-tag=default\nserver-tag=fremont_ca\njoin=layered:29015\ndaemon\n</pre>  <h3 id=\"supported-options\">Supported options</h3> <p>For some options below, the default value depends on <code class=\"highlighter-rouge\">&lt;name&gt;</code>, the name of the config file without the <code class=\"highlighter-rouge\">.conf</code> extension.</p> <ul> <li> <p><code class=\"highlighter-rouge\">runuser</code> and <code class=\"highlighter-rouge\">rungroup</code>: specifies which user and group should be used launch the Rethinkdb process. <br> <em>Default</em>: <code class=\"highlighter-rouge\">rethinkdb</code> and <code class=\"highlighter-rouge\">rethinkdb</code>.</p> </li> <li> <p><code class=\"highlighter-rouge\">pid-file</code>: the location of the file with the RethinkDB instance process ID (used by the init script to communicate with the server process). <br> <em>Default</em>: <code class=\"highlighter-rouge\">/var/run/rethinkdb/&lt;name&gt;/pid_file</code></p> </li> <li> <p><code class=\"highlighter-rouge\">directory</code>: the data directory where database tables will be stored. This location must be readable and writable by the user or group (or both) specified by <code class=\"highlighter-rouge\">runuser</code> and <code class=\"highlighter-rouge\">rungroup</code>. <br> <em>Note</em>: It is best to create the database manually via <code class=\"highlighter-rouge\">rethinkdb create --directory ...</code> as <code class=\"highlighter-rouge\">runuser</code> or <code class=\"highlighter-rouge\">rungroup</code> before enabling auto-start.<br> <em>Default</em>: <code class=\"highlighter-rouge\">/var/lib/rethinkdb/&lt;name&gt;/</code></p> </li> <li> <p><code class=\"highlighter-rouge\">log-file</code>: path to the log file.<br> <em>Default</em>: <code class=\"highlighter-rouge\">&lt;directory&gt;/log_file</code></p> </li> <li> <p><code class=\"highlighter-rouge\">bind</code>: Address of local interfaces to listen on when accepting connections. May be ‘all’ or an IP address, loopback addresses are enabled by default.<br> <em>Default</em>: all local addresses</p> </li> <li> <p><code class=\"highlighter-rouge\">bind-http</code>: Similar to <code class=\"highlighter-rouge\">bind</code>, but only for the web UI connection port. This option will override <code class=\"highlighter-rouge\">bind</code> for this port if both are specified in the configuration file.</p> </li> <li> <p><code class=\"highlighter-rouge\">bind-cluster</code>: Similar to <code class=\"highlighter-rouge\">bind</code>, but only for the cluster connection port. This option will override <code class=\"highlighter-rouge\">bind</code> for this port if both are specified in the configuration file.</p> </li> <li> <p><code class=\"highlighter-rouge\">bind-driver</code>: Similar to <code class=\"highlighter-rouge\">bind</code>, but only for the client driver connection port. This option will override <code class=\"highlighter-rouge\">bind</code> for this port if both are specified in the configuration file.</p> </li> <li> <p><code class=\"highlighter-rouge\">http-tls-key</code>: the filename of a private key to use with TLS for the web administration console. Both <code class=\"highlighter-rouge\">http-tls-key</code> and <code class=\"highlighter-rouge\">http-tls-cert</code> must be specified.</p> </li> <li> <p><code class=\"highlighter-rouge\">http-tls-cert</code>: the filename of a TLS certificate to use for the web administration console. Both <code class=\"highlighter-rouge\">http-tls-key</code> and <code class=\"highlighter-rouge\">http-tls-cert</code> must be specified.</p> </li> <li> <p><code class=\"highlighter-rouge\">driver-tls-key</code>: the filename of a private key to use with TLS for client driver connections. Both <code class=\"highlighter-rouge\">driver-tls-key</code> and <code class=\"highlighter-rouge\">driver-tls-cert</code> must be specified.</p> </li> <li> <p><code class=\"highlighter-rouge\">driver-tls-cert</code>: the filename of a TLS certificate to use for client driver connections. Both <code class=\"highlighter-rouge\">driver-tls-key</code> and <code class=\"highlighter-rouge\">driver-tls-cert</code> must be specified.</p> </li> <li> <p><code class=\"highlighter-rouge\">driver-tls-ca</code>: the filename of a CA certificate bundle to use for verifying client driver connections. If specified, the server will only accept connections from clients that provide a certificate signed with the CA certificate.</p> </li> <li> <p><code class=\"highlighter-rouge\">cluster-tls-key</code>: the filename of a private key to use with TLS for cluster connections. All three <code class=\"highlighter-rouge\">cluster-tls-*</code> configurations must be specified.</p> </li> <li> <p><code class=\"highlighter-rouge\">cluster-tls-cert</code>: the filename of a TLS certificate to use for cluster connections. All three <code class=\"highlighter-rouge\">cluster-tls-*</code> configurations must be specified.</p> </li> <li> <p><code class=\"highlighter-rouge\">cluster-tls-ca</code>: the filename of a CA certificate to use for verifying cluster connections. All three <code class=\"highlighter-rouge\">cluster-tls-*</code> configurations must be specified.</p> </li> <li> <p><code class=\"highlighter-rouge\">tls-min-protocol</code>: the minimum TLS protocol version the server accepts, one of <code class=\"highlighter-rouge\">TLSv1</code>, <code class=\"highlighter-rouge\">TLSv1.1</code>, <code class=\"highlighter-rouge\">TLSv1.2</code>.<br> <em>Default</em>: <code class=\"highlighter-rouge\">TLSv1.2</code></p> </li> <li> <p><code class=\"highlighter-rouge\">tls-ciphers</code>: A list of TLS ciphers to use.<br> <em>Default</em>: <code class=\"highlighter-rouge\">EECDH+AESGCM</code></p> </li> <li> <p><code class=\"highlighter-rouge\">tls-ecdh-curve</code>: A named elliptic curve to use for ECDHE.<br> <em>Default</em>: <code class=\"highlighter-rouge\">prime256v1</code></p> </li> <li> <p><code class=\"highlighter-rouge\">tls-dhparams</code>: A filename containing parameters for DHE key agreement; this is required if using DHE cipher suites, and unused otherwise. At least a 2048-bit key is recommended.</p> </li> <li> <p><code class=\"highlighter-rouge\">canonical-address</code>: Address that other rethinkdb instances will use to connect to this machine. The address must be specified as <code class=\"highlighter-rouge\">host:port</code> if the instance uses a port other than <code class=\"highlighter-rouge\">29015</code>. This option can be specified multiple times.</p> </li> <li> <p><code class=\"highlighter-rouge\">http-port</code>, <code class=\"highlighter-rouge\">driver-port</code>, and <code class=\"highlighter-rouge\">cluster-port</code>: the web UI port (default <code class=\"highlighter-rouge\">8080</code>), the client driver port (default <code class=\"highlighter-rouge\">28015</code>), and intracluster traffic port (default <code class=\"highlighter-rouge\">29015</code>), respectively.</p> </li> <li> <p><code class=\"highlighter-rouge\">join</code>: The <code class=\"highlighter-rouge\">host:port</code> of a node that Rethinkdb will connect to. It can be specified multiple times.</p> </li> <li> <p><code class=\"highlighter-rouge\">port-offset</code> All ports used locally will have this value added.<br> <em>Default</em>: 0</p> </li> <li> <p><code class=\"highlighter-rouge\">no-http-admin</code>: Disable web administration console.</p> </li> <li> <p><code class=\"highlighter-rouge\">cores</code>: Number of cores to use.<br> <em>Default</em>: Number of cores of the CPU.</p> </li> <li> <p><code class=\"highlighter-rouge\">cache-size</code>: Size of the cache in MB.<br> <em>Default</em>: Half of the available RAM on startup.</p> </li> <li> <p><code class=\"highlighter-rouge\">io-threads</code>: Number of simultaneous I/O operations can happen at the same time.<br> <em>Default</em>: 64</p> </li> <li> <p><code class=\"highlighter-rouge\">direct-io</code>: Use direct I/O for file system access.</p> </li> <li> <p><code class=\"highlighter-rouge\">server-name</code>: The name for this machine (as it will appear in the metadata).<br> <em>Default</em>: Randomly chosen from a short list of names.</p> </li> <li> <p><code class=\"highlighter-rouge\">server-tag</code>: Specifies tags for this server, which can be used to group servers together for administration purposes (for instance, servers in the same data center). See <a href=\"../sharding-and-replication/index\">Sharding and replication</a> for more details. To assign multiple tags to a server, repeat <code class=\"highlighter-rouge\">server-tag</code> lines for each tag.</p> </li> <li> <p><code class=\"highlighter-rouge\">cluster-reconnect-timeout</code>: the amount of time, in seconds, this server will try to reconnect to a cluster if it loses connection before giving up.<br> <em>Default</em>: <code class=\"highlighter-rouge\">86400</code></p> </li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/config-file/\" class=\"_attribution-link\">https://rethinkdb.com/docs/config-file/</a>\n  </p>\n</div>\n","docs/async-connections/index":"<h1 class=\"title\">Asynchronous connections</h1> <p>Certain RethinkDB drivers support asynchronous connections by integrating with popular async libraries. This is particularly useful with <a href=\"../changefeeds/java/index\">changefeeds</a> and other real-time applications.</p> <p>Due to its event-driven nature, JavaScript can easily execute RethinkDB queries in an asynchronous fashion. The official RethinkDB drivers currently support integration with EventMachine for Ruby, and Tornado and Twisted for Python.</p> <div class=\"toc\">  <ul id=\"markdown-toc\"> <li><a href=\"#javascript\" id=\"markdown-toc-javascript\">JavaScript</a></li> <li><a href=\"#ruby-with-eventmachine\" id=\"markdown-toc-ruby-with-eventmachine\">Ruby with EventMachine</a></li> <li><a href=\"#python-with-tornado-or-twisted\" id=\"markdown-toc-python-with-tornado-or-twisted\">Python with Tornado or Twisted</a></li> </ul> </div> <h2 id=\"javascript\">JavaScript</h2> <p>No special procedures or commands are necessary to execute RethinkDB queries asynchronously in JavaScript. Read about using callbacks and promises with RethinkDB in the documentation for the <a href=\"https://rethinkdb.com/api/javascript/run/\">run</a> command.</p> <p>In addition, RethinkDB’s cursors and feeds implement an <a href=\"https://rethinkdb.com/api/javascript/ee-cursor/\">EventEmitter interface</a> compatible with Node’s. This allows your application to set up listeners to receive data from queries as the data becomes available.</p> <h2 id=\"ruby-with-eventmachine\">Ruby with EventMachine</h2> <p>The RethinkDB Ruby driver adds a new ReQL command, <a href=\"https://rethinkdb.com/api/ruby/em_run\">em_run</a>, designed to work with <a href=\"http://rubyeventmachine.com\">EventMachine</a>. In addition, it provides a superclass, <code class=\"highlighter-rouge\">RethinkDB::Handler</code>, with event-specific methods (e.g., <code class=\"highlighter-rouge\">on_open</code>, <code class=\"highlighter-rouge\">on_close</code>) that may be overridden by a class your application defines and passes to <code class=\"highlighter-rouge\">em_run</code>.</p> <h3 id=\"simple-usage\">Simple usage</h3> <p>The easiest way to use RethinkDB with EventMachine is simply by passing a block to <code class=\"highlighter-rouge\">em_run</code>. If RethinkDB returns a sequence (including a stream), the block will be called once with each element of the sequence. Otherwise, the block will be called just once with the returned value.</p> <p><strong>Example:</strong> Iterate over a stream</p> <pre data-language=\"\">require 'eventmachine'\nrequire 'rethinkdb'\ninclude RethinkDB::Shortcuts\n\nconn = r.connect(host: 'localhost', port: 28015)\n\nEventMachine.run {\n  r.table('test').order_by(:index =&gt; 'id').em_run(conn) { |row|\n    # do something with returned row data\n    p row\n  }\n}\n</pre>  <h3 id=\"explicitly-closing-a-query\">Explicitly closing a query</h3> <p>The <code class=\"highlighter-rouge\">em_run</code> command returns a <code class=\"highlighter-rouge\">QueryHandle</code> instance. The <code class=\"highlighter-rouge\">QueryHandle</code> will be closed when all results have been received, or when EventMachine stops running. You can explicitly close it with the <code class=\"highlighter-rouge\">close</code> method.</p> <pre data-language=\"\">EventMachine.run {\n  printed = 0\n  handle = r.table('test').order_by(:index =&gt; 'id').em_run(conn) { |row|\n    printed += 1\n    if printed &gt; 3\n      handle.close\n    else\n      p row\n    end\n  }\n}\n</pre>  <h3 id=\"handling-errors\">Handling errors</h3> <p>In the form above—with a block that accepts a single argument—RethinkDB’s EventMachine adapter will throw errors back up to your application for you to handle in the same fashion as you would using RethinkDB without EventMachine. If the table <code class=\"highlighter-rouge\">test</code> did not exist in the database above, you would receive the standard <code class=\"highlighter-rouge\">ReqlRunTimeError</code>:</p> <pre data-language=\"\">RethinkDB::ReqlRunTimeError: Table `test.test` does not exist.\nBacktrace:\nr.table('test')\n^^^^^^^^^^^^^^^\n</pre>  <p>You can also choose to receive errors in the block by accepting two arguments.</p> <pre data-language=\"\">EventMachine.run {\n  r.table('test').order_by(:index =&gt; 'id').em_run(conn) { |err, row|\n  if err\n    p [:err, err.to_s]\n  else\n    p [:row, row]\n  end\n  }\n}\n</pre>  <p>In this form, the block will receive <code class=\"highlighter-rouge\">nil</code> as the first argument if there is no error. In the case of an error, the second argument will be <code class=\"highlighter-rouge\">nil</code>.</p> <h3 id=\"using-rethinkdbhandler\">Using RethinkDB::Handler</h3> <p>To gain more precise control, write a class that inherits from <code class=\"highlighter-rouge\">RethinkDB::Handler</code> and override the event handling methods, then pass an instance of that class to <code class=\"highlighter-rouge\">em_run</code>.</p> <p><strong>Example:</strong> Iterate over a stream using a handler</p> <pre data-language=\"\">require 'eventmachine'\nrequire 'rethinkdb'\ninclude RethinkDB::Shortcuts\n\nconn = r.connect(host: 'localhost', port: 28015)\n\nclass Printer &lt; RethinkDB::Handler\n\n  def on_open\n    p :open\n  end\n  \n  def on_close\n    p :closed\n  end\n  \n  def on_error(err)\n    p [:err, err.to_s]\n  end\n  \n  def on_val(val)\n    p [:val, val]\n  end\n\nend\n\nEventMachine.run {\n  r.table('test').order_by(:index =&gt; 'id').em_run(conn, Printer)\n}\n\n# Sample output\n:open\n[:val, {\"id\"=&gt;1}]\n[:val, {\"id\"=&gt;2}]\n[:val, {\"id\"=&gt;3}]\n:closed\n</pre>  <h3 id=\"distinguishing-between-data-types\">Distinguishing between data types</h3> <p>In addition to the simple <code class=\"highlighter-rouge\">on_val</code> method, you can provide methods that specifically apply to arrays, streams and atoms.</p> <pre data-language=\"\">class Printer &lt; RethinkDB::Handler\n\n  def on_open\n    p :open\n  end\n  \n  def on_close\n    p :closed\n  end\n  \n  def on_error(err)\n    p [:err, err.to_s]\n  end\n  \n  # Handle arrays\n  def on_array(array)\n    p [:array, array]\n  end\n  \n  # Handle atoms\n  def on_atom(atom)\n    p [:atom, atom]\n  end\n  \n  # Handle individual values received from streams\n  def on_stream_val(val)\n    p [:stream_val, val]\n  end\n  \n  def on_val(val)\n    p [:val, val]\n  end\n\nend\n\nEventMachine.run {\n  r.table('test').order_by(:index =&gt; 'id').em_run(conn, Printer)\n  # print an array\n  r.expr([1, 2, 3]).em_run(conn, Printer)\n  # print a single row\n  r.table('test').get(1).em_run(conn, Printer)\n}\n\n# Sample output\n:open\n[:stream_val, {\"id\"=&gt;0}]\n[:stream_val, {\"id\"=&gt;1}]\n[:stream_val, {\"id\"=&gt;2}]\n:closed\n:open\n[:array, [1, 2, 3]]\n:closed\n:open\n[:atom, {\"id\"=&gt;0}]\n:closed\n</pre>  <p>The various <code class=\"highlighter-rouge\">on_*</code> methods provide fallbacks for one another:</p> <ul> <li>an array will be handled by <code class=\"highlighter-rouge\">on_array</code> if defined; otherwise it will be handled by <code class=\"highlighter-rouge\">on_atom</code>. If neither of those are defined, the <em>individual elements</em> of the array will be handled by <code class=\"highlighter-rouge\">on_stream_val</code> or, if that is not defined, <code class=\"highlighter-rouge\">on_val</code>.</li> <li>a stream will be handled by <code class=\"highlighter-rouge\">on_stream_val</code> if defined; otherwise it will be handled by <code class=\"highlighter-rouge\">on_val</code>.</li> <li>data that is <em>not</em> a stream will be handled by <code class=\"highlighter-rouge\">on_atom</code> if defined; otherwise it will be handled by <code class=\"highlighter-rouge\">on_val</code>.</li> </ul> <p>Thus, <code class=\"highlighter-rouge\">on_val</code> acts a “catch-all” for any data that is not handled by a more specific method.</p> <p>The order in which callbacks are called in the <code class=\"highlighter-rouge\">EventMachine.run</code> block is not guaranteed; in the sample output above, <code class=\"highlighter-rouge\">[:array, [1, 2, 3]]</code> might have printed first.</p> <h3 id=\"changefeeds\">Changefeeds</h3> <p>A changefeed is handled like any other stream; when you pass a block to <code class=\"highlighter-rouge\">em_run</code>, the block is called with each document received on the feed. If you pass a <code class=\"highlighter-rouge\">Handler</code> that defines <code class=\"highlighter-rouge\">on_stream_val</code> (or <code class=\"highlighter-rouge\">on_val</code>), those methods will be called with each document.</p> <p>In addition, there are changefeed-specific methods that may be defined.</p> <ul> <li>\n<code class=\"highlighter-rouge\">on_initial_val</code>: if the changefeed returns initial values (<code class=\"highlighter-rouge\">include_initial</code> has been specified as an option to <a href=\"https://rethinkdb.com/api/ruby/changes/\">changes</a>, those values will be passed to this method.</li> <li>\n<code class=\"highlighter-rouge\">on_uninitial_val</code>: a changefeed that returns initial values may also return “uninitial” values to indicate a document already sent as an initial value has been changed (see the <code class=\"highlighter-rouge\">changes</code> documentation for details); those values, if any, will be passed to this method.</li> <li>\n<code class=\"highlighter-rouge\">on_change</code>: changes will be passed to this method.</li> <li>\n<code class=\"highlighter-rouge\">on_change_error</code>: if the feed includes a document specifying errors that do not cause the feed to abort (for instance, a notification the server discarded some changes), those errors will be passed to this method.</li> <li>\n<code class=\"highlighter-rouge\">on_state</code>: a feed may include documents specifying the state of the stream; those documents will be passed to this function if defined.</li> </ul> <pre data-language=\"\">class FeedPrinter &lt; RethinkDB::Handler\n\n  def on_open\n    p :open\n  end\n  \n  def on_close\n    p :closed\n  end\n  \n  def on_error(err)\n    p [:err, err.to_s]\n  end\n  \n  def on_initial_val(val)\n    p [:initial, val]\n  end\n  \n  def on_state(state)\n    p [:state, state]\n  end\n  \n  def on_change(old, new)\n    p [:change, old, new]\n  end  \n\nend\n\n# Subscribe to changes on the documents with the two lowest ids\nEventMachine.run {\n  r.table('test').order_by(:index =&gt; 'id').limit(2).changes\n    .em_run(conn, FeedPrinter)\n}\n\n# Sample output\n:open\n[:state, \"initializing\"]\n[:initial_val, {\"id\"=&gt;1}]\n[:initial_val, {\"id\"=&gt;0}]\n[:state, \"ready\"]\n\n# Execute: r.table('test').insert({id: 0.5}).run(conn)\n[:change, {\"id\"=&gt;1}, {\"id\"=&gt;0.5}]\n\n# Execute: r.table_drop('test').run(conn)\n[:err, \"Changefeed aborted (table unavailable).\\nBacktrace...\"]\n:closed\n</pre>  <h3 id=\"using-one-handler-with-multiple-queries\">Using one Handler with multiple queries</h3> <p>You can register multiple queries with the same <code class=\"highlighter-rouge\">Handler</code> instance. If you define <code class=\"highlighter-rouge\">Handler</code> methods with an additional argument (two arguments instead of one, or one argument instead of zero), that argument will receive the appropriate <code class=\"highlighter-rouge\">QueryHandle</code> instance.</p> <pre data-language=\"\">class MultiQueryPrinter &lt; RethinkDB::Handler\n  \n  def on_open(qh)\n    p [:open, names[qh]]\n  end\n  \n  def on_close(qh)\n    p [:close, names[qh]]\n    EventMachine.stop if @closed == 2\n  end\n  \n  def on_val(val, qh)\n    p [:val, val, names[qh]]\n  end\n  \nend\n\nEventMachine.run {\n  printer = Printer.new\n  h1 = r.expr(1).em_run(conn, printer)\n  h2 = r.expr(2).em_run(conn, printer)\n  names = { h1 =&gt; \"h1\", h2 =&gt; \"h2\" }\n}\n\n# Sample output\n[:open, \"h1\"]\n[:val, 1, \"h1\"]\n[:close, \"h1\"]\n[:open, \"h2\"]\n[:val, 2, \"h2\"]\n[:close, \"h2\"]\n</pre>  <h3 id=\"stopping-a-handler\">Stopping a Handler</h3> <p>If you call the <code class=\"highlighter-rouge\">stop</code> method on a <code class=\"highlighter-rouge\">Handler</code>, it will stop processing changes and open streams using that handler will be closed. Queries registered with that handler instance will not be interrupted if they are currently processing (e.g., a batch write), but will close rather than executing after the handler has been stopped.</p> <p><strong>Example:</strong> Print the first five changes to a table. After the handler has been stopped, the changefeed query will be closed on the next change to the table rather than returning a value.</p> <pre data-language=\"\">class FeedPrinter &lt; RethinkDB::Handler\n  \n  def initialize(max)\n    @counter = max\n    stop if @counter &lt;= 0\n  end\n  \n  def on_open\n    # Once the changefeed is open, insert 10 rows\n    r.table('test').insert([{}] * 10).run(conn, noreply: true)\n  end\n  \n  def on_val(val)\n    # Every time we print a change, decrement @counter and stop if we hit 0\n    p val\n    @counter -= 1\n    stop if @counter &lt;= 0\n  end\n  \nend\n\nEventMachine.run {\n  r.table('test').changes.em_run(conn, Printer.new(5))\n}\n</pre>  <h2 id=\"python-with-tornado-or-twisted\">Python with Tornado or Twisted</h2> <p>The RethinkDB Python driver integrates with both the <a href=\"http://www.tornadoweb.org/\">Tornado web framework</a> and the <a href=\"http://twistedmatrix.com/\">Twisted networking engine</a>. By using the <a href=\"https://rethinkdb.com/api/python/set_loop_type\">set_loop_type</a> command, you can select either the <code class=\"highlighter-rouge\">'tornado'</code> or <code class=\"highlighter-rouge\">'twisted'</code> event loop model, returning Tornado <code class=\"highlighter-rouge\">Future</code> objects or Twisted <code class=\"highlighter-rouge\">Deferred</code> objects respectively.</p> <h3 id=\"tornado\">Tornado</h3> <h4 id=\"basic-usage\">Basic Usage</h4> <p>Before <code class=\"highlighter-rouge\">connect</code>, use the <code class=\"highlighter-rouge\">set_loop_type(\"tornado\")</code> command to set RethinkDB to use asynchronous event loops compatible with Tornado.</p> <pre data-language=\"\">import rethinkdb as r\nfrom tornado import ioloop, gen\nfrom tornado.concurrent import Future, chain_future\nimport functools\n\nr.set_loop_type(\"tornado\")\nconnection = r.connect(host='localhost', port=28015)\n</pre>  <p>After executing <code class=\"highlighter-rouge\">set_loop_type</code>, <code class=\"highlighter-rouge\">r.connect</code> will return a Tornado <code class=\"highlighter-rouge\">Future</code>, as will <code class=\"highlighter-rouge\">r.run</code>.</p> <p><strong>Example:</strong> Simple use</p> <pre data-language=\"\">@gen.coroutine\ndef single_row(connection_future):\n    # Wait for the connection to be ready\n    connection = yield connection_future\n    # Insert some data\n    yield r.table('test').insert([{\"id\": 0}, {\"id\": 1}, {\"id\": 2}]).run(connection)\n    # Print the first row in the table\n    row = yield r.table('test').get(0).run(connection)\n    print(row)\n\n# Output\n{u'id': 0}\n</pre>  <p><strong>Example:</strong> Using a cursor</p> <pre data-language=\"\">@gen.coroutine\ndef use_cursor(connection_future):\n    # Wait for the connection to be ready\n    connection = yield connection_future\n    # Insert some data\n    yield r.table('test').insert([{\"id\": 0}, {\"id\": 1}, {\"id\": 2}]).run(connection)\n    # Print every row in the table.\n    cursor = yield r.table('test').order_by(index=\"id\").run(connection)\n    while (yield cursor.fetch_next()):\n        item = yield cursor.next()\n        print(item)\n\n# Output\n{u'id': 0}\n{u'id': 1}\n{u'id': 2}\n</pre>  <p>Note that looping over a cursor must be done with <code class=\"highlighter-rouge\">while</code> and <code class=\"highlighter-rouge\">fetch_next</code>, rather than using a <code class=\"highlighter-rouge\">for x in cursor</code> loop.</p> <h4 id=\"error-handling\">Error handling</h4> <p>If an error occurs during an asynchronous operation, the <code class=\"highlighter-rouge\">yield</code> statement will throw an exception as normal. This may happen immediately (for example, you might reference a table that doesn’t exist), but your application might receive large amounts of data before the error (for example, your network might be disrupted after the connection is established).</p> <p>One error in particular is notable. If you have a coroutine set to consume a changefeed indefinitely, and the connection closes, the coroutine will experience a <code class=\"highlighter-rouge\">ReqlRuntimeError</code>.</p> <p><strong>Example:</strong> Re-thrown errors</p> <pre data-language=\"\">@gen.coroutine\ndef bad_table(connection):\n    yield r.table('non_existent').run(connection)\n\nTraceback (most recent call last):\n... elided ...\nrethinkdb.errors.ReqlRuntimeError: Table `test.non_existent` does not exist. in:\nr.table('non_existent')\n^^^^^^^^^^^^^^^^^^^^^^^\n</pre>  <p><strong>Example:</strong> Catching errors in the coroutine</p> <pre data-language=\"\">@gen.coroutine\ndef catch_bad_table(connection):\n    try:\n        yield r.table('non_existent').run(connection)\n    except r.ReqlRuntimeError:\n        print(\"Saw error\")\n\n# Output\nSaw error\n</pre>  <h4 id=\"subscribing-to-changefeeds\">Subscribing to changefeeds</h4> <p>The asynchronous database API allows you to handle multiple changefeeds simultaneously by scheduling background coroutines. As an example, consider this changefeed handler:</p> <pre data-language=\"\">@gen.coroutine\ndef print_cfeed_data(connection_future, table):\n    connection = yield connection_future\n    feed = yield r.table(table).changes().run(connection)\n    while (yield feed.fetch_next()):\n        item = yield feed.next()\n        print(item)\n</pre>  <p>We can schedule it on the Tornado IO loop with this code:</p> <pre data-language=\"\">ioloop.IOLoop.current().add_callback(print_cfeed_data, connection, table)\n</pre>  <p>Now the coroutine will run in the background, printing out changes. When we alter the table, the changes will be noticed.</p> <p>Now, consider a larger example.</p> <pre data-language=\"\">class ChangefeedNoticer(object):\n    def __init__(self, connection):\n        self._connection = connection\n        self._sentinel = object()\n        self._cancel_future = Future()\n    @gen.coroutine\n    def print_cfeed_data(self, table):\n        feed = yield r.table(table).changes().run(self._connection)\n        self._feeds_ready[table].set_result(True)\n        while (yield feed.fetch_next()):\n            cursor = feed.next()\n            chain_future(self._cancel_future, cursor)\n            item = yield cursor\n            if item is self._sentinel:\n                return\n            print(\"Seen on table %s: %s\" % (table, item))\n    @gen.coroutine\n    def table_write(self, table):\n        for i in range(10):\n            yield r.table(table).insert({'id': i}).run(self._connection)\n    @gen.coroutine\n    def exercise_changefeeds(self):\n        self._feeds_ready = {'a': Future(), 'b': Future()}\n        loop = ioloop.IOLoop.current()\n        loop.add_callback(self.print_cfeed_data, 'a')\n        loop.add_callback(self.print_cfeed_data, 'b')\n        yield self._feeds_ready\n        yield [self.table_write('a'), self.table_write('b')]\n        self._cancel_future.set_result(self._sentinel)\n    @classmethod\n    @gen.coroutine\n    def run(cls, connection_future):\n        connection = yield connection_future\n        if 'a' in (yield r.table_list().run(connection)):\n            yield r.table_drop('a').run(connection)\n        yield r.table_create('a').run(connection)\n        if 'b' in (yield r.table_list().run(connection)):\n            yield r.table_drop('b').run(connection)\n        yield r.table_create('b').run(connection)\n        noticer = cls(connection)\n        yield noticer.exercise_changefeeds()\n\n# Output\nSeen on table a: {u'old_val': None, u'new_val': {u'id': 0}}\nSeen on table b: {u'old_val': None, u'new_val': {u'id': 0}}\nSeen on table a: {u'old_val': None, u'new_val': {u'id': 1}}\nSeen on table b: {u'old_val': None, u'new_val': {u'id': 1}}\nSeen on table a: {u'old_val': None, u'new_val': {u'id': 2}}\nSeen on table b: {u'old_val': None, u'new_val': {u'id': 2}}\nSeen on table a: {u'old_val': None, u'new_val': {u'id': 3}}\nSeen on table b: {u'old_val': None, u'new_val': {u'id': 3}}\nSeen on table a: {u'old_val': None, u'new_val': {u'id': 4}}\nSeen on table b: {u'old_val': None, u'new_val': {u'id': 4}}\nSeen on table a: {u'old_val': None, u'new_val': {u'id': 5}}\nSeen on table a: {u'old_val': None, u'new_val': {u'id': 6}}\nSeen on table b: {u'old_val': None, u'new_val': {u'id': 5}}\nSeen on table a: {u'old_val': None, u'new_val': {u'id': 7}}\nSeen on table b: {u'old_val': None, u'new_val': {u'id': 6}}\nSeen on table a: {u'old_val': None, u'new_val': {u'id': 8}}\nSeen on table b: {u'old_val': None, u'new_val': {u'id': 7}}\nSeen on table a: {u'old_val': None, u'new_val': {u'id': 9}}\nSeen on table b: {u'old_val': None, u'new_val': {u'id': 8}}\nSeen on table b: {u'old_val': None, u'new_val': {u'id': 9}}\n</pre>  <p>Here, we listen for changes on multiple tables at once. We simultaneously write into the tables, and observe our writes appear in the changefeeds. We then cancel the changefeeds after we’ve written 10 items into each of the tables.</p> <h3 id=\"twisted\">Twisted</h3> <h4 id=\"basic-usage-1\">Basic Usage</h4> <p>Before <code class=\"highlighter-rouge\">connect</code>, use the <code class=\"highlighter-rouge\">set_loop_type(\"twisted\")</code> command to set RethinkDB to use asynchronous event loops compatible with the Twisted reactor.</p> <pre data-language=\"\">import rethinkdb as r\nfrom twisted.internet import reactor, defer\nfrom twisted.internet.defer import inlineCallbacks, returnValue\n\nr.set_loop_type('twisted')\nconnection = r.connect(host='localhost', port=28015)\n</pre>  <p>After executing <code class=\"highlighter-rouge\">set_loop_type</code>, <code class=\"highlighter-rouge\">r.connect</code> will return a Twisted <code class=\"highlighter-rouge\">Deferred</code>, as will <code class=\"highlighter-rouge\">r.run</code>.</p> <p><strong>Example:</strong> Simple use</p> <pre data-language=\"\">@inlineCallbacks\ndef single_row(conn_deferred):\n    # Wait for the connection to be ready\n    conn = yield conn_deferred\n    # Insert some data\n    yield r.table('test').insert([{\"id\": 0}, {\"id\": 1}, {\"id\": 2}]).run(conn)\n    # Print the first row in the table\n    row = yield r.table('test').get(0).run(conn)\n    print(row)\n\n# Output\n{u'id': 0}\n</pre>  <p><strong>Example:</strong> Using a cursor</p> <pre data-language=\"\">@inlineCallbacks\ndef use_cursor(conn):\n    # Insert some data\n    yield r.table('test').insert([{\"id\": 0}, {\"id\": 1}, {\"id\": 2}]).run(conn)\n    # Print every row in the table.\n    cursor = yield r.table('test').order_by(index=\"id\").run(conn)\n    while (yield cursor.fetch_next()):\n        item = yield cursor.next()\n        print(item)\n\n# Output:\n{u'id': 0}\n{u'id': 1}\n{u'id': 2}\n</pre>  <p>Note that looping over a cursor must be done with <code class=\"highlighter-rouge\">while</code> and <code class=\"highlighter-rouge\">fetch_next</code>, rather than using a <code class=\"highlighter-rouge\">for x in cursor</code> loop.</p> <h4 id=\"error-handling-1\">Error handling</h4> <p>If an error occurs during an asynchronous operation, the <code class=\"highlighter-rouge\">yield</code> statement will throw an exception as normal. This may happen immediately (for example, you might reference a table that doesn’t exist), but your application might receive large amounts of data before the error (for example, your network might be disrupted after the connection is established).</p> <p>One error in particular is notable. If you have a task that consumes a changefeed indefinitely, and the connection closes, the task will experience a <code class=\"highlighter-rouge\">ReqlRuntimeError</code>.</p> <p><strong>Example:</strong> Re-thrown errors</p> <pre data-language=\"\">@inlineCallbacks\ndef bad_table(conn):\n    yield r.table('non_existent').run(conn)\n\nUnhandled error in Deferred:\nTraceback (most recent call last):\nFailure: rethinkdb.errors.ReqlOpFailedError: Table `test.non_existent` does not exist in:\nr.table('non_existent')\n^^^^^^^^^^^^^^^^^^^^^^^\n\n</pre>  <p><strong>Example:</strong> Catching runtime errors</p> <pre data-language=\"\">@inlineCallbacks\ndef catch_bad_table(conn):\n    try:\n        yield r.table('non_existent').run(conn)\n    except r.ReqlRuntimeError:\n        print(\"Saw error\")\n\n# Output\nSaw error\n</pre>  <h4 id=\"subscribing-to-changefeeds-1\">Subscribing to changefeeds</h4> <p>The asynchronous database API allows you to handle multiple changefeeds simultaneously by running multiple background tasks. As an example, consider this changefeed handler:</p> <pre data-language=\"\">@inlineCallbacks\ndef print_feed(conn, table):\n    feed = yield r.table(table).changes().run(conn)\n    while (yield feed.fetch_next()):\n        item = yield feed.next()\n        print(\"Seen on table %s: %s\" % (table, str(item)))\n</pre>  <p>We can schedule it on the Twisted <code class=\"highlighter-rouge\">reactor</code> with this code:</p> <pre data-language=\"\">reactor.callLater(0, print_cfeed_data, conn, table)\n</pre>  <p>Now the task will run in the background, printing out changes. When we alter the table, the changes will be noticed.</p> <p>Now consider a larger example:</p> <pre data-language=\"\">@inlineCallbacks\ndef print_feed(conn, table, ready, cancel):\n    def errback_feed(feed, err):\n        feed.close()\n        return err\n\n    feed = yield r.table(table).changes().run(conn)\n    cancel.addErrback(lambda err: errback_feed(feed, err))\n    ready.callback(None)\n    while (yield feed.fetch_next()):\n        item = yield feed.next()\n        print(\"Seen on table %s: %s\" % (table, str(item)))\n\n@inlineCallbacks\ndef table_write(conn, table):\n    for i in range(10):\n        yield r.table(table).insert({'id': i}).run(conn)\n\n@inlineCallbacks\ndef notice_changes(conn, *tables):\n    # Reset the state of the tables on the server\n    if len(tables) &gt; 0:\n        table_list = yield r.table_list().run(conn)\n        yield defer.DeferredList([r.table_drop(t).run(conn) for t in tables if t in table_list])\n    yield defer.DeferredList([r.table_create(t).run(conn) for t in tables])\n\n    readies = [defer.Deferred() for t in tables]\n    cancel = defer.Deferred()\n    feeds = [print_feed(conn, table, ready, cancel) for table, ready in zip(tables, readies)]\n\n    # Wait for the feeds to become ready\n    yield defer.gatherResults(readies)\n    yield defer.gatherResults([table_write(conn, table) for table in tables])\n\n    # Cancel the feeds and wait for them to exit\n    cancel.addErrback(lambda err: None)\n    cancel.cancel()\n    yield defer.DeferredList(feeds)\n\nyield notice_changes(conn, 'a', 'b')\n\n# Output\nSeen on table b: {u'old_val': None, u'new_val': {u'id': 0}}\nSeen on table a: {u'old_val': None, u'new_val': {u'id': 0}}\nSeen on table b: {u'old_val': None, u'new_val': {u'id': 1}}\nSeen on table a: {u'old_val': None, u'new_val': {u'id': 1}}\nSeen on table b: {u'old_val': None, u'new_val': {u'id': 2}}\nSeen on table a: {u'old_val': None, u'new_val': {u'id': 2}}\nSeen on table b: {u'old_val': None, u'new_val': {u'id': 3}}\nSeen on table a: {u'old_val': None, u'new_val': {u'id': 3}}\nSeen on table b: {u'old_val': None, u'new_val': {u'id': 4}}\nSeen on table a: {u'old_val': None, u'new_val': {u'id': 4}}\nSeen on table b: {u'old_val': None, u'new_val': {u'id': 5}}\nSeen on table a: {u'old_val': None, u'new_val': {u'id': 5}}\nSeen on table b: {u'old_val': None, u'new_val': {u'id': 6}}\nSeen on table a: {u'old_val': None, u'new_val': {u'id': 6}}\nSeen on table b: {u'old_val': None, u'new_val': {u'id': 7}}\nSeen on table a: {u'old_val': None, u'new_val': {u'id': 7}}\nSeen on table b: {u'old_val': None, u'new_val': {u'id': 8}}\nSeen on table a: {u'old_val': None, u'new_val': {u'id': 8}}\nSeen on table a: {u'old_val': None, u'new_val': {u'id': 9}}\nSeen on table b: {u'old_val': None, u'new_val': {u'id': 9}}\n</pre>  <p>Here, we listen for changes on multiple tables at once. We simultaneously write into the tables, and observe our writes appear in the changefeeds. We then cancel the changefeeds after we’ve written 10 items into each of the tables.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/async-connections/\" class=\"_attribution-link\">https://rethinkdb.com/docs/async-connections/</a>\n  </p>\n</div>\n","docs/cookbook/java/index":"<h1 class=\"title\">Cookbook for Java</h1>    <blockquote class=\"infobox infobox-alert\">\n<p><strong>This document has not been updated for Java.</strong> The <a href=\"../../../api/java/index\">API documentation</a> for Java is complete, but many ReQL articles still have examples in other languages. We’ll be updating each article after the Java driver is officially released.</p> </blockquote> <blockquote class=\"infobox \">\n<p><strong>Don’t see the recipe you’re looking for?</strong> Request or add a recipe by <a href=\"https://github.com/rethinkdb/docs/issues\">opening an issue</a> on GitHub.</p> </blockquote> <div class=\"toc\">  <ul id=\"markdown-toc\"> <li><a href=\"#basic-commands\" id=\"markdown-toc-basic-commands\">Basic commands</a></li> <li><a href=\"#filtering\" id=\"markdown-toc-filtering\">Filtering</a></li> <li><a href=\"#manipulating-documents\" id=\"markdown-toc-manipulating-documents\">Manipulating documents</a></li> <li><a href=\"#pagination\" id=\"markdown-toc-pagination\">Pagination</a></li> <li><a href=\"#transformations\" id=\"markdown-toc-transformations\">Transformations</a></li> <li><a href=\"#miscellaneous\" id=\"markdown-toc-miscellaneous\">Miscellaneous</a></li> </ul> </div> <p><img src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/cookbook.png\" class=\"api_command_illustration\"></p> <h2 id=\"basic-commands\">Basic commands</h2> <h3 id=\"creating-a-database\">Creating a database</h3> <p>You can use the <code class=\"highlighter-rouge\">dbCreate</code> command as follows:</p> <pre data-language=\"\">r.dbCreate(\"blog\").run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <p>Another way to create a database is through the web UI. You can reach the web UI at <code class=\"highlighter-rouge\">http://HOST:8080</code>. Click on the <em>Tables</em> tab at the top and then use the <em>Add Database</em> button.</p> <h3 id=\"renaming-a-database\">Renaming a database</h3> <p>The easiest way to rename a database is to use the <a href=\"https://rethinkdb.com/api/javascript/config/\">config</a> command to access the <code class=\"highlighter-rouge\">db_config</code> <a href=\"../../system-tables/index\">system table</a>, and then simply use the <code class=\"highlighter-rouge\">update</code> command.</p> <pre data-language=\"\">r.db(\"old_db_name\").config().update({name: \"new_db_name\"}).run(conn,\n    function(err, result) {\n        if (err) throw err;\n        console.log(result);\n    }\n);\n</pre>  <h3 id=\"creating-a-table\">Creating a table</h3> <p>You can select the database where you’d like to create the table with the <code class=\"highlighter-rouge\">db</code> command and use the <code class=\"highlighter-rouge\">tableCreate</code> command as follows:</p> <pre data-language=\"\">r.db(\"blog\").tableCreate(\"posts\").run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <p>Note that you can omit the <code class=\"highlighter-rouge\">db</code> command if you’re creating a table in the default database on your connection (set to <code class=\"highlighter-rouge\">test</code> unless specified in <code class=\"highlighter-rouge\">connect</code>).</p> <p>Another way to create a new table is to use the web UI. You can reach the web UI at <code class=\"highlighter-rouge\">http://HOST:8080</code>. Click on the <em>Tables</em> tab at the top of the page and then use the <em>Add Table</em> button.</p> <h3 id=\"inserting-documents\">Inserting documents</h3> <p>You can insert documents by calling the <code class=\"highlighter-rouge\">insert</code> command on the appropriate table:</p> <pre data-language=\"\">r.table(\"user\").insert({\n    name: \"Michel\",\n    age: 26\n}).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <p>You can insert multiple documents at once by passing an array of documents to <code class=\"highlighter-rouge\">insert</code> as follows:</p> <pre data-language=\"\">r.table(\"user\").insert([\n    {\n        name: \"Michel\",\n        age: 26\n    },\n    {\n        name: \"Slava\",\n        age: 30\n    }\n]).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <h3 id=\"deleting-documents\">Deleting documents</h3> <p>To delete documents, select the documents you’d like to delete and use the <code class=\"highlighter-rouge\">delete</code> command. For example, let’s delete all posts with the author “Michel”:</p> <pre data-language=\"\">r.table(\"posts\").filter(r.row(\"author\").eq(\"Michel\")).delete().run(conn,\n    function(err, result) {\n        if (err) throw err;\n        console.log(result);\n    }\n);\n</pre>  <p>Or, let’s try to delete a single user:</p> <pre data-language=\"\">r.table(\"posts\").get(\"7644aaf2-9928-4231-aa68-4e65e31bf219\").delete().run(conn,\n    function(err, result) {\n        if (err) throw err;\n        console.log(result);\n    }\n);\n</pre>  <p>Here is how we’d delete all documents in a table:</p> <pre data-language=\"\">r.table(\"posts\").delete().run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <h3 id=\"retrieving-documents\">Retrieving documents</h3> <p>To get all documents in a table, simply use the <code class=\"highlighter-rouge\">table</code> command:</p> <pre data-language=\"\">r.table(\"posts\").run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <p>The <code class=\"highlighter-rouge\">table</code> command returns a cursor; use the <a href=\"https://rethinkdb.com/api/javascript/next\">next</a> or <a href=\"https://rethinkdb.com/api/javascript/each\">each</a> command to iterate through the result set, or <a href=\"https://rethinkdb.com/api/javascript/to_array\">toArray</a> to retrieve the set as an array.</p> <p>To get a specific document by ID, use <code class=\"highlighter-rouge\">get</code>:</p> <pre data-language=\"\">r.table(\"posts\").get(1).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <p>To retrieve documents by the value of a specific field, use <code class=\"highlighter-rouge\">filter</code>:</p> <pre data-language=\"\">r.table(\"posts\").filter({author: \"Michel\"}).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <p>To retrieve documents by the value of a specific <a href=\"../../secondary-indexes/java/index\">index</a>, use <code class=\"highlighter-rouge\">getAll</code>:</p> <pre data-language=\"\">r.table(\"posts\").getAll(\"review\", {index: \"category\"}).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <p>(For more complex filtering recipes, read on.)</p> <h2 id=\"filtering\">Filtering</h2> <h3 id=\"filtering-based-on-multiple-fields\">Filtering based on multiple fields</h3> <p>Suppose you’d like to select all posts where the author’s name is “Michel” and the category is “Geek”. You can do it as follows:</p> <pre data-language=\"\">r.table(\"posts\").filter({\n    author: \"Michel\",\n    category: \"Geek\",\n}).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <p>Alternatively, you can build a predicate with the <code class=\"highlighter-rouge\">and</code> command, and pass it to <code class=\"highlighter-rouge\">filter</code>:</p> <pre data-language=\"\">r.table(\"posts\").filter(\n    r.row(\"author\").eq(\"Michel\").and(r.row(\"category\").eq(\"Geek\"))\n).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <p>You can also use the prefix notation (passing all arguments to <code class=\"highlighter-rouge\">r.and</code>), if that’s what you prefer:</p> <pre data-language=\"\">r.table(\"posts\").filter(\n    r.and(r.row(\"author\").eq(\"Michel\"), r.row(\"category\").eq(\"Geek\"))\n).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <p>Similarly, you can use the <code class=\"highlighter-rouge\">r.or</code> command to filter based on one of many conditions.</p> <h3 id=\"filtering-based-on-the-presence-of-a-value-in-an-array\">Filtering based on the presence of a value in an array</h3> <p>Suppose we have a table <code class=\"highlighter-rouge\">users</code> with documents of the following form:</p> <pre data-language=\"\">{\n    name: \"William Adama\"\n    emails: [\"bill@bsg.com\", \"william@bsg.com\"],\n    ship: \"Galactica\"\n}\n</pre>  <p>If we want to retrieve all users that have the email address <code class=\"highlighter-rouge\">user@email.com</code>, we can write:</p> <pre data-language=\"\">r.table(\"user\").filter(r.row(\"emails\").contains(\"user@email.com\"))\n .run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <p>If we want to retrieve all users on the Galactica and Pegasus, we can write:</p> <pre data-language=\"\">r.table(\"user\").filter(function (user) {\n    r([\"Galactica\", \"Pegasus\"]).contains(user(\"ship\"))\n}).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <h3 id=\"filtering-based-on-nested-fields\">Filtering based on nested fields</h3> <p>In JavaScript you can use the operator <code class=\"highlighter-rouge\">()</code> to get the value of a field. This operator can be chained to retrieve values from nested fields.</p> <p>Suppose we have a table <code class=\"highlighter-rouge\">users</code> with documents of the following form:</p> <pre data-language=\"\">{\n    name: \"William Adama\"\n    contact: {\n        phone: \"555-5555\"\n        email: \"bill@bsg.com\"\n    }\n}\n</pre>  <p>Let’s filter based on the nested field <code class=\"highlighter-rouge\">email</code>:</p> <pre data-language=\"\">r.table(\"user\").filter(\n    r.row(\"contact\")(\"email\").eq(\"user@email.com\")\n).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <p>For many ReQL commands, you can also use a JSON-style nested syntax that allows considerably more flexibility. Read “<a href=\"../../nested-fields/java/index\">Accessing nested fields</a>” for more information.</p> <h3 id=\"efficiently-retrieving-multiple-documents-by-primary-key\">Efficiently retrieving multiple documents by primary key</h3> <p>If you want to retrieve all the posts with the primary keys <code class=\"highlighter-rouge\">1</code>, <code class=\"highlighter-rouge\">2</code>, or <code class=\"highlighter-rouge\">3</code> you can use the <code class=\"highlighter-rouge\">getAll</code> command:</p> <pre data-language=\"\">r.table(\"posts\").getAll(1, 2, 3).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <h3 id=\"efficiently-retrieving-multiple-documents-by-secondary-index\">Efficiently retrieving multiple documents by secondary index</h3> <p>Suppose we have a table <code class=\"highlighter-rouge\">posts</code> that links posts to authors via an <code class=\"highlighter-rouge\">author_id</code> field. If we’ve created a secondary index on <code class=\"highlighter-rouge\">author_id</code> and want to retrieve all the posts where <code class=\"highlighter-rouge\">author_id</code> is <code class=\"highlighter-rouge\">1</code>, <code class=\"highlighter-rouge\">2</code>, or <code class=\"highlighter-rouge\">3</code>, we can use the <code class=\"highlighter-rouge\">getAll</code> command to do it as follows:</p> <pre data-language=\"\">r.table(\"posts\").getAll(1, 2, 3, {index: 'author_id'})\n .run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <blockquote class=\"infobox \">\n<p>Read about <a href=\"../../secondary-indexes/java/index\">creating secondary indexes in RethinkDB</a>.</p> </blockquote> <h3 id=\"retrieving-all-the-objects-in-a-stream-cursor-as-an-array\">Retrieving all the objects in a stream (cursor) as an array</h3> <p>If you’re using a command that returns a stream and want to retrieve all of its results at once in an array rather than iterating through them with the cursor object, you can coerce it to an array using the <a href=\"https://rethinkdb.com/api/javascript/to_array/\">toArray</a> command.</p> <pre data-language=\"\">r.table('posts').run(conn, function(err, cursor) {\n    if (err) throw err;\n    cursor.toArray(function(result) {\n        console.log(result);\n    });\n});\n</pre>  <p>See the <a href=\"../../data-types/index\">data type documentation</a> for more detail about streams.</p> <h3 id=\"returning-specific-fields-of-a-document\">Returning specific fields of a document</h3> <p>If you need to retrieve only a few specific fields from your documents, you can use the <code class=\"highlighter-rouge\">pluck</code> command. For example, here is how you’d return only the fields <code class=\"highlighter-rouge\">name</code> and <code class=\"highlighter-rouge\">age</code> from each row in table <code class=\"highlighter-rouge\">users</code>:</p> <pre data-language=\"\">r.table(\"users\").pluck(\"name\", \"age\").run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <p>This is equivalent to calling <code class=\"highlighter-rouge\">SELECT name, age FROM users</code> in SQL.</p> <p>The <code class=\"highlighter-rouge\">pluck</code> command also supports selecting nested fields in a document. For example, suppose we’d like to select the fields <code class=\"highlighter-rouge\">phone</code> and <code class=\"highlighter-rouge\">email</code> from the following document:</p> <pre data-language=\"\">{\n    name: \"William Adama\"\n    contact: {\n        phone: \"555-5555\"\n        email: \"bill@bsg.com\"\n    }\n}\n</pre>  <p>We can use the following syntax:</p> <pre data-language=\"\">r.table(\"users\").pluck(\n    {contact: {phone: true, email: true}}\n).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <h3 id=\"filtering-based-on-a-date-range\">Filtering based on a date range</h3> <p>Suppose you want to retrieve all the posts whose date field is between January 1st, 2012 (included) and January 1st, 2013 (excluded). You could do:</p> <pre data-language=\"\">r.table(\"posts\").filter(function(post) {\n    return post(\"date\").during(r.time(2012, 1, 1, 'Z'), r.time(2013, 1, 1, 'Z'));\n}).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <p>You can also manually compare dates:</p> <pre data-language=\"\">r.table(\"posts\").filter(function(post) {\n    return post(\"date\").ge(r.time(2012, 1, 1, 'Z')).and(\n        post(\"date\").lt(r.time(2013, 1, 1, 'Z')));\n}).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <h3 id=\"filtering-with-regex\">Filtering with Regex</h3> <p>If you want to retrieve all users whose last name starts with “Ma”, you can use <code class=\"highlighter-rouge\">r.match</code> this way:</p> <pre data-language=\"\">// Will return Martin, Martinez, Marshall etc.\nr.table(\"users\").filter(function(user) {\n    return user(\"lastName\").match(\"^Ma\");\n}).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <p>If you want to retrieve all users whose last name ends with an “s”, you can use <code class=\"highlighter-rouge\">r.match</code> this way:</p> <pre data-language=\"\">// Will return Williams, Jones, Davis etc.\nr.table(\"users\").filter(function(user) {\n    return user(\"lastName\").match(\"s$\");\n}).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <p>If you want to retrieve all users whose last name contains “ll”, you can use <code class=\"highlighter-rouge\">r.match</code> this way:</p> <pre data-language=\"\">// Will return Williams, Miller, Allen etc.\nr.table(\"users\").filter(function(user) {\n    return user(\"lastName\").match(\"ll\");\n}).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <h3 id=\"case-insensitive-filter\">Case insensitive filter</h3> <p>Retrieve all users whose name is “William” (case insensitive).</p> <pre data-language=\"\">// Will return william, William, WILLIAM, wiLLiam etc.\nr.table(\"users\").filter(function(user) {\n    return user(\"name\").match(\"(?i)^william$\");\n}).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <h3 id=\"performing-multiple-aggregations-simultaneously\">Performing multiple aggregations simultaneously</h3> <p>If you want to perform a query that returns aggregations on different fields together, this is a canonical use case for <a href=\"../../map-reduce/index\">map-reduce</a>.</p> <p>Suppose a data set that lists top movies, ranked by user vote. You’d like to get the total votes and the average age of the top 25 movies: the <code class=\"highlighter-rouge\">avg()</code> of the <code class=\"highlighter-rouge\">year</code> column and the <code class=\"highlighter-rouge\">sum()</code> of the <code class=\"highlighter-rouge\">votes</code> column, ordered by the <code class=\"highlighter-rouge\">rank</code> column to get the range 1–25.</p> <p>To perform this, <a href=\"https://rethinkdb.com/api/javascript/map/\">map</a> the first 25 movies into a new result set, adding a <code class=\"highlighter-rouge\">count</code> column, then <a href=\"https://rethinkdb.com/api/javascript/reduce/\">reduce</a> each row of the mapped result set into a total for each field (<code class=\"highlighter-rouge\">votes</code>, <code class=\"highlighter-rouge\">year</code> and <code class=\"highlighter-rouge\">column</code>). Then use <a href=\"https://rethinkdb.com/api/javascript/do/\">do</a> to return a result set with the total votes and the average year, computed by dividing the sum of the years by their count.</p> <pre data-language=\"\">r.table('movies').orderBy('rank').limit(25).map(function (doc) {\n    return { totalVotes: doc('votes'), totalYear: doc('year'), count: 1 };\n}).reduce(function (left, right) {\n    return {\n        totalVotes: left('totalVotes').add(right('totalVotes')),\n        totalYear: left('totalYear').add(right('totalYear')),\n        count: left('count').add(right('count'))\n    };\n}).do(function (res) {\n    return {\n        totalVotes: res('totalVotes'),\n        averageYear: res('totalYear').div(res('count'))\n    };\n}).run(conn, callback);\n</pre>  <p>We’re working on an easier syntax for performing multiple aggregations after <code class=\"highlighter-rouge\">group</code> commands. Follow <a href=\"https://github.com/rethinkdb/rethinkdb/issues/1725\">issue 1725</a> to track progress on this.</p> <h2 id=\"manipulating-documents\">Manipulating documents</h2> <h3 id=\"addingoverwriting-a-field-in-a-document\">Adding/overwriting a field in a document</h3> <p>To add or overwrite a field, you can use the <code class=\"highlighter-rouge\">update</code> command. For instance, if you would like to add the field <code class=\"highlighter-rouge\">author</code> with the value “Michel” for all of the documents in the table <code class=\"highlighter-rouge\">posts</code>, you would use:</p> <pre data-language=\"\">r.table(\"posts\").update({ author: \"Michel\" }).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <h3 id=\"removing-a-field-from-a-document\">Removing a field from a document</h3> <p>The <code class=\"highlighter-rouge\">update</code> command lets you to overwrite fields, but not delete them. If you want to delete a field, use the <code class=\"highlighter-rouge\">replace</code> command. The <code class=\"highlighter-rouge\">replace</code> command replaces your entire document with the new document you pass as an argument. For example, if you want to delete the field <code class=\"highlighter-rouge\">author</code> of the blog post with the id <code class=\"highlighter-rouge\">1</code>, you would use:</p> <pre data-language=\"\">r.table(\"posts\").get(\"1\").replace(r.row.without('author'))\n .run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <h3 id=\"atomically-updating-a-document-based-on-a-condition\">Atomically updating a document based on a condition</h3> <p>All modifications made via the <code class=\"highlighter-rouge\">update</code> and <code class=\"highlighter-rouge\">replace</code> commands are always atomic with respect to a single document. For example, let’s say we’d like to atomically update a view count for a page if the field <code class=\"highlighter-rouge\">countable</code> is set to true, and get back the old and new results in a single query. We can perform this operation as follows:</p> <pre data-language=\"\">r.table(\"pages\").update(function(page) {\n    return r.branch(page(\"countable\").eq(true),  // if the page is countable\n        { views: page(\"views\").add(1) },         // increment the view count\n        {}                                       // else do nothing\n    );\n}, {returnChanges: true}).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <h3 id=\"performing-a-conditional-insert-or-replace\">Performing a conditional insert or replace</h3> <p>Using a similar technique to the last recipe, we can use <code class=\"highlighter-rouge\">branch</code> and <code class=\"highlighter-rouge\">replace</code> to maintain a document’s <code class=\"highlighter-rouge\">updated_at</code> and <code class=\"highlighter-rouge\">created_at</code> fields by either inserting a new document or updating one depending on whether a document with a specified ID exists.</p> <pre data-language=\"\">r.table('users').get(id).replace(function (doc) {\n    return r.branch(\n        doc.eq(null),\n        r.expr(userObject).merge({id: id, created_at: r.now()}),\n        doc.merge(userObject).merge({updated_at: r.now()})\n    )\n}).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <h3 id=\"storing-timestamps-and-json-date-strings-as-time-data-types\">Storing timestamps and JSON date strings as Time data types</h3> <p>You can use the <code class=\"highlighter-rouge\">epochTime</code> and <code class=\"highlighter-rouge\">ISO8601</code> commands to convert Unix timestamps (in seconds) and JSON date-time strings (which are in ISO 8601 format) to the ReQL time type. The ReQL driver will also convert JavaScript Date objects into ReQL time.</p> <pre data-language=\"\">var theDate = new Date();\nvar timestamp = theDate.getTime();\nvar JSONDate = theDate.toJSON();\nr.table(\"dates\").insert({\n    from_object: theDate,\n    from_epoch: r.epochTime(timestamp/1000.0),\n    from_iso: r.ISO8601(JSONDate)\n}).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <p>Use the commands <code class=\"highlighter-rouge\">toEpochTime</code> and <code class=\"highlighter-rouge\">toISO8601</code> to convert back.</p> <h3 id=\"incrementing-a-field-value\">Incrementing a field value</h3> <p>It’s possible to increment a field value in a document—for example, a counter—in one step on the server.</p> <pre data-language=\"\">r.table('aggregated').get(id).update(\n    { count: r.row('count').default(0).add(1) }\n).run(conn, callback);\n</pre>  <p>Use <code class=\"highlighter-rouge\">default</code> to ensure that if the <code class=\"highlighter-rouge\">count</code> field doesn’t already exist in the document, it’s added correctly, rather than letting <code class=\"highlighter-rouge\">add</code> throw an error.</p> <h2 id=\"pagination\">Pagination</h2> <h3 id=\"limiting-the-number-of-returned-documents\">Limiting the number of returned documents</h3> <p>You can limit the number of documents returned by your queries with the <code class=\"highlighter-rouge\">limit</code> command. Let’s retrieve just the first 10 blog posts:</p> <pre data-language=\"\">r.table(\"posts\").orderBy(\"date\").limit(10).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <h3 id=\"implementing-pagination\">Implementing pagination</h3> <p>There are multiple ways to paginate results in RethinkDB. The most straightforward way is using <code class=\"highlighter-rouge\">skip</code> and <code class=\"highlighter-rouge\">limit</code> (similar to the way SQL’s <code class=\"highlighter-rouge\">OFFSET</code> and <code class=\"highlighter-rouge\">LIMIT</code> work), but that’s also the least efficient. It’s more efficient to use <code class=\"highlighter-rouge\">slice</code>, and even more efficient to use <code class=\"highlighter-rouge\">between</code> with a secondary index.</p> <p>The <a href=\"https://rethinkdb.com/api/javascript/slice\">slice</a> command returns a range from a given start value through but not including a given end value. This makes it easy to use as a <code class=\"highlighter-rouge\">skip</code>/<code class=\"highlighter-rouge\">limit</code> replacement: the start value is the first item to retrieve, and the end value is the first item plus the limit. To retrieve posts 11-20 from the database using <code class=\"highlighter-rouge\">slice</code>:</p> <pre data-language=\"\">r.table(\"posts\").orderBy(\"date\").slice(11,21).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <p>If you have a secondary index, you can use the <a href=\"https://rethinkdb.com/api/javascript/between\">between</a> command in conjunction with <a href=\"https://rethinkdb.com/api/javascript/order_by\">orderBy</a> and <code class=\"highlighter-rouge\">limit</code>. This is the most efficient way to paginate, but requires looking up values in the secondary index field to find the first record of each page.</p> <p>Suppose you wanted to paginate through a set of users, 25 at a time. You could get the first 25 records efficiently just with <code class=\"highlighter-rouge\">limit</code>.</p> <pre data-language=\"\">r.table(\"users\").orderBy({index: \"name\"}).limit(25).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <p>For each successive page, start with the last name in the previous page.</p> <pre data-language=\"\">r.table(\"users\").between(lastName, r.maxval, {leftBound: \"open\", index: \"name\"})\n .orderBy({index: \"name\"}).limit(25).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <p>We pass the <code class=\"highlighter-rouge\">lastName</code> saved from the previous set to <code class=\"highlighter-rouge\">between</code> as the start index. For the end index, we pass <code class=\"highlighter-rouge\">null</code> to return documents from the start index to the table’s end. The <code class=\"highlighter-rouge\">leftBound</code> parameter tells <code class=\"highlighter-rouge\">between</code> not to include the first record, since it was already returned as part of the previous page.</p> <h2 id=\"transformations\">Transformations</h2> <h3 id=\"counting-the-number-of-documents-in-a-table\">Counting the number of documents in a table</h3> <p>You can count the number of documents with a <code class=\"highlighter-rouge\">count</code> command:</p> <pre data-language=\"\">r.table(\"posts\").count().run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <h3 id=\"computing-the-average-value-of-a-field\">Computing the average value of a field</h3> <p>You can compute the average value of a field with the <code class=\"highlighter-rouge\">avg</code> command.</p> <pre data-language=\"\">r.table(\"posts\").avg(\"num_comments\").run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <h3 id=\"using-subqueries-to-return-additional-fields\">Using subqueries to return additional fields</h3> <p>Suppose we’d like to to retrieve all the posts in the table <code class=\"highlighter-rouge\">post</code> and also return an additional field, <code class=\"highlighter-rouge\">comments</code>, which is an array of all the comments for the relevant post retrieved from the <code class=\"highlighter-rouge\">comments</code> table. We could do this using a subquery:</p> <pre data-language=\"\">r.table(\"posts\").merge(function(post) {\n    return {\n        comments: r.table(\"comments\").filter(function(comment) {\n            return comment(\"id_post\").eq(post(\"id\"))\n        }).coerceTo(\"ARRAY\")\n    }\n}).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <h3 id=\"performing-a-pivot-operation\">Performing a pivot operation</h3> <p>Suppose the table <code class=\"highlighter-rouge\">marks</code> stores the marks of every students per course:</p> <pre data-language=\"\">[\n    {\n        \"name\": \"William Adama\",\n        \"mark\": 90,\n        \"id\": 1,\n        \"course\": \"English\"\n    },\n    {\n        \"name\": \"William Adama\",\n        \"mark\": 70,\n        \"id\": 2,\n        \"course\": \"Mathematics\"\n    },\n    {\n        \"name\": \"Laura Roslin\",\n        \"mark\": 80,\n        \"id\": 3,\n        \"course\": \"English\"\n    },\n    {\n        \"name\": \"Laura Roslin\",\n        \"mark\": 80,\n        \"id\": 4,\n        \"course\": \"Mathematics\"\n    }\n]\n</pre>  <p>You may be interested in retrieving the results in this format:</p> <pre data-language=\"\">[\n    {\n        \"name\": \"Laura Roslin\",\n        \"Mathematics\": 80,\n        \"English\": 80\n    },\n    {\n        \"name\": \"William Adama\",\n        \"Mathematics\": 70,\n        \"English\": 90\n    }\n]\n</pre>  <p>In this case, you can do a pivot operation with the <code class=\"highlighter-rouge\">group</code> and <code class=\"highlighter-rouge\">coerceTo</code> commands.</p> <pre data-language=\"\">r.db('test').table('marks').group('name').map(function (row) {\n    return [row('course'), row('mark')];\n}).ungroup().map(function (res) {\n    return r.expr({name: res('group')}).merge(res('reduction').coerceTo('object'));\n}).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <p><em>Note:</em> A nicer syntax will eventually be added. See the <a href=\"https://github.com/rethinkdb/rethinkdb/issues/838\">Github issue 838</a> to track progress.</p> <h3 id=\"performing-an-unpivot-operation\">Performing an unpivot operation</h3> <p>Doing an unpivot operation to “cancel” a pivot one can be done with the <code class=\"highlighter-rouge\">concatMap</code>, <code class=\"highlighter-rouge\">map</code> and <code class=\"highlighter-rouge\">keys</code> commands:</p> <pre data-language=\"\">r.table(\"pivotedMarks\").concatMap(function (doc) {\n    return doc.without(\"id\", \"name\").keys().map(function (course) {\n        return {\n            name: doc(\"name\"),\n            course: course,\n            mark: doc(course)\n        };\n    });\n}).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <p><em>Note:</em> A nicer syntax will eventually be added. See the <a href=\"https://github.com/rethinkdb/rethinkdb/issues/838\">Github issue 838</a> to track progress.</p> <h3 id=\"renaming-a-field-when-retrieving-documents\">Renaming a field when retrieving documents</h3> <p>Suppose we want to rename the field <code class=\"highlighter-rouge\">id</code> to <code class=\"highlighter-rouge\">idUser</code> when retrieving documents from the table <code class=\"highlighter-rouge\">users</code>. In the subquery, we can use <code class=\"highlighter-rouge\">merge</code> to add a new field with the existing field’s value, then <code class=\"highlighter-rouge\">without</code> to delete the old field:</p> <pre data-language=\"\">r.table(\"users\").map(\n    r.row.merge({ idUser: r.row(\"id\") }).without(\"id\")\n).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <h3 id=\"grouping-query-results-by-datetime-periods\">Grouping query results by date/time periods</h3> <p>ReQL has commands for extracting parts of <a href=\"../../dates-and-times/java/index\">dates and times</a>, including <a href=\"https://rethinkdb.com/api/javascript/year\">year</a>, <a href=\"https://rethinkdb.com/api/javascript/month\">month</a>, <a href=\"https://rethinkdb.com/api/javascript/day\">day</a>, <a href=\"https://rethinkdb.com/api/javascript/day_of_week\">dayOfWeek</a> and more. You can use these with <a href=\"https://rethinkdb.com/api/javascript/group\">group</a> to group by various intervals. Suppose you had a table of invoices and wanted to retrieve them in groups ordered by year and month:</p> <pre data-language=\"\">r.table(\"invoices\")\n    .group([r.row(\"date\").year(), r.row(\"date\").month()])\n    .ungroup()\n    .merge({invoices: r.row('reduction'), month: r.row('group')})\n    .without('reduction', 'group')\n    .orderBy('month')\n.run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <p>(We also use the technique for renaming a field, described above, to give the names “reduction” and “group” more useful names of “invoices” and “month.”) You could use any combination of the ReQL date/time interval commands in the group, or work with the date/time as a native object.</p> <p>Currently, ReQL has a default limit of 100,000 elements in an array, and the implementation of <code class=\"highlighter-rouge\">group</code> requires the total number of documents grouped to fit within that boundary, so you are limited to 100,000 invoices. This can be changed, however, by passing the <code class=\"highlighter-rouge\">arrayLimit</code> option to <a href=\"https://rethinkdb.com/api/javascript/run\">run</a>. (Also note that <code class=\"highlighter-rouge\">ungroup</code> always returns an array, although this may change in a future version. Follow issue <a href=\"https://github.com/rethinkdb/rethinkdb/issues/2719\">#2719</a> for progress on this.)</p> <p>You can also use this approach with a <a href=\"../../secondary-indexes/java/index\">compound index</a> on the intervals you want to group:</p> <pre data-language=\"\">r.table('invoices').indexCreate(\n    'byDay', [r.row('date').year(), r.row('date').month(), r.row('date').day()]\n).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <p>Then you can use that index in the <code class=\"highlighter-rouge\">group</code> function. This query would return the highest-value invoice for each day.</p> <pre data-language=\"\">r.table(\"invoices\")\n    .group({index: 'byDay'})\n    .max('price')\n.run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <h2 id=\"miscellaneous\">Miscellaneous</h2> <h3 id=\"generating-monotonically-increasing-primary-key-values\">Generating monotonically increasing primary key values</h3> <p>Efficiently generating monotonically increasing IDs in a distributed system is a surprisingly difficult problem. If an inserted document is missing a primary key, RethinkDB currently generates a random UUID. We will be supporting additional autogeneration schemes in the future (see <a href=\"https://github.com/rethinkdb/rethinkdb/issues/117\">https://github.com/rethinkdb/rethinkdb/issues/117</a>), but in the meantime, you can use one of the available open-source libraries for distributed id generation (e.g. <a href=\"https://github.com/twitter/snowflake\">twitter snowflake</a>).</p> <h3 id=\"parsing-rethinkdbs-response-to-a-write-query\">Parsing RethinkDB’s response to a write query</h3> <p>When you issue a write query (<code class=\"highlighter-rouge\">insert</code>, <code class=\"highlighter-rouge\">delete</code>, <code class=\"highlighter-rouge\">update</code>, or <code class=\"highlighter-rouge\">replace</code>), RethinkDB returns a summary object that looks like this:</p> <pre data-language=\"\">{deleted:0, replaced:0, unchanged:0, errors:0, skipped:0, inserted:1}\n</pre>  <p>The most important field of this object is <code class=\"highlighter-rouge\">errors</code>. Generally speaking, if no exceptions are thrown and <code class=\"highlighter-rouge\">errors</code> is 0 then the write did what it was supposed to. (RethinkDB throws an exception when it isn’t even able to access the table; it sets the <code class=\"highlighter-rouge\">errors</code> field if it can access the table but an error occurs during the write. This convention exists so that batched writes don’t abort halfway through when they encounter an error.)</p> <p>The following fields are always present in this object:</p> <ul> <li>\n<code class=\"highlighter-rouge\">inserted</code> – Number of new documents added to the database.</li> <li>\n<code class=\"highlighter-rouge\">deleted</code> – Number of documents deleted from the database.</li> <li>\n<code class=\"highlighter-rouge\">replaced</code> – Number of documents that were modified.</li> <li>\n<code class=\"highlighter-rouge\">unchanged</code> – Number of documents that would have been modified, except that the new value was the same as the old value.</li> <li>\n<code class=\"highlighter-rouge\">skipped</code> – Number of documents that were unmodified in a write operation, because the document is not available to be deleted or updated. The document might have been deleted by a different operation happening concurrently, or in the case of a <code class=\"highlighter-rouge\">get</code> operation the key might not exist.</li> <li>\n<code class=\"highlighter-rouge\">errors</code> – Number of documents that were left unmodified due to an error.</li> </ul> <p>In addition, the following two fields are set as circumstances dictate:</p> <ul> <li>\n<code class=\"highlighter-rouge\">generated_keys</code> – If you issue an insert query where some or all of the rows lack primary keys, the server will generate primary keys for you and return an array of those keys in this field. (The order of this array will match the order of the rows in your insert query.)</li> <li>\n<code class=\"highlighter-rouge\">first_error</code> – If <code class=\"highlighter-rouge\">errors</code> is positive, the text of the first error message encountered will be in this field. This is a very useful debugging aid. (We don’t return all of the errors because a single typo can result in millions of errors when operating on a large database.)</li> </ul> <h3 id=\"using-dynamic-keys-in-reql-commands\">Using dynamic keys in ReQL commands</h3> <p>Sometimes you may want to write a ReQL document with a dynamic key—the field name is stored in a variable. You can do this with the <code class=\"highlighter-rouge\">object</code> command, which takes a list of keys and values (<code class=\"highlighter-rouge\">(key, value, key, value ...)</code>) and returns an object from them.</p> <pre data-language=\"\">r.table('users').get(1).update(r.object(propertyName, value)).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <p>The field name can be determined entirely on the server, too. For instance, to update a field whose name is drawn from the value of another field:</p> <pre data-language=\"\">r.table('users').forEach(function (doc) {\n  return r.table('users').get(doc('id')).update(r.object(doc('field'), newValue));\n}).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <p>For a practical example, imagine a data set like the one from the <a href=\"http://www.rethinkdb.com/docs/cookbook/java/\">pivot example</a>, where each document represents a student’s course record.</p> <pre data-language=\"\">[\n    {\n        \"name\": \"John\",\n        \"mark\": 70,\n        \"id\": 1,\n        \"course\": \"Mathematics\"\n    },\n    {\n        \"name\": \"John\",\n        \"mark\": 90,\n        \"id\": 2,\n        \"course\": \"English\"\n    }\n]\n</pre>  <p>But you’d like to get a document more like a “report card”:</p> <pre data-language=\"\">{\n    \"Mathematics\": 70,\n    \"English\": 90\n}\n</pre>  <p>You can accomplish this with <code class=\"highlighter-rouge\">object</code> and a pivot.</p> <pre data-language=\"\">r.table(\"marks\").filter({student: \"John\"}).map(function(mark) {\n    return r.object(mark(\"course\"), mark(\"mark\"));\n}).reduce(function(left, right) {\n    return left.merge(right);\n}).run(conn, function(err, result) {\n    if (err) throw err;\n    console.log(result);\n});\n</pre>  <h3 id=\"returning-a-reql-query-as-a-string\">Returning a ReQL query as a string</h3> <p>For testing or logging purposes, you might want to capture a created ReQL query as a string. (You can see an example of this in ReQL error messages.) While there is no ReQL command to do this, you can simply use the <code class=\"highlighter-rouge\">toString()</code> method at the end of a query chain, rather than <code class=\"highlighter-rouge\">run()</code>:</p> <pre data-language=\"\">r.table('users').filter(r.row('groups').contains('operators')).toString()\n</pre>  <h3 id=\"building-reql-queries-on-multiple-lines\">Building ReQL queries on multiple lines</h3> <p>It’s a common pattern in some query interfaces to “build” queries programmatically by instantiating a query object, calling it several times in succession to add query commands, then calling the execution command. This lets you dynamically change the query based on conditions at runtime. You might expect to do this in ReQL like so:</p> <pre data-language=\"\">var query = r.table('posts');\nif (request.filter !== undefined) {\n    query.filter(request.filter);\n}\nquery.orderBy('date');\nquery.run(conn, callback);\n</pre>  <p>However, that won’t work! The reason is that the query object doesn’t store state. Each of the commands after the first one is simply running on the <em>original</em> value of <code class=\"highlighter-rouge\">query</code> (in this case, the <code class=\"highlighter-rouge\">posts</code> table). You can solve this by explicitly assigning the output of each new command to the <code class=\"highlighter-rouge\">query</code> variable:</p> <pre data-language=\"\">var query = r.table('posts');\nif (request.filter !== undefined) {\n    query = query.filter(request.filter);\n}\nquery = query.orderBy('date');\nquery.run(conn, callback);\n</pre>  <h3 id=\"joining-multiple-changefeeds-into-one\">Joining multiple changefeeds into one</h3> <p>You might want to produce a “union” changefeed to watch multiple tables or queries on just one feed. Since the <code class=\"highlighter-rouge\">union</code> command works with <code class=\"highlighter-rouge\">changes</code>, ReQL makes this fairly straightforward. To monitor two tables at once:</p> <pre data-language=\"\">r.table('table1').union(r.table('table2')).changes().run(conn, callback);\n</pre>  <p>You might want to “tag” the tables to make it clear which changes belong to which table.</p> <pre data-language=\"\">r.table('table1').merge({table: 'table1'})\n .union(r.table('table2').merge({table: 'table2'})\n .changes().run(conn, callback);\n</pre>  <p>Also, you can use <code class=\"highlighter-rouge\">changes</code> with each query rather than after the whole.</p> <pre data-language=\"\">r.table('table1').filter({flag: 'blue'}).changes()\n .union(r.table('table2').filter({flag: 'red'}).changes())\n .run(conn, callback);\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/cookbook/java/\" class=\"_attribution-link\">https://rethinkdb.com/docs/cookbook/java/</a>\n  </p>\n</div>\n","docs/start-on-startup/index":"<h1 class=\"title\">Start RethinkDB at system startup</h1> <p>This document explains how to set up RethinkDB to run as a system service on supported operating systems, automatically launching on boot. For general instructions on starting RethinkDB, see <a href=\"../start-a-server/index\">Start a RethinkDB server</a>.</p> <p>In general, you’ll have to follow these steps:</p> <ul> <li>Install RethinkDB as a service for your operating system. (This document describes how to do that for both <code class=\"highlighter-rouge\">init.d</code> and <code class=\"highlighter-rouge\">systemd</code>-based Linux distributions, as well as OS X using <code class=\"highlighter-rouge\">launchd</code>. Depending on how you’ve installed RethinkDB, this may already be done for you.)</li> <li>Create a RethinkDB configuration file for each RethinkDB instance running on this physical server.</li> </ul> <h2 id=\"startup-with-initd\">Startup with init.d</h2> <p>RethinkDB packages automatically install an init script at <code class=\"highlighter-rouge\">/etc/init.d/rethinkdb</code> and add default run-level entries. For RethinkDB to automatically run on system startup, you’ll need to add a config file to <code class=\"highlighter-rouge\">/etc/rethinkdb/instances.d/</code>.</p> <h3 id=\"quick-setup\">Quick setup</h3> <p>Copy the sample configuration file and use the <a href=\"../config-file/index\">configuration file</a> documentation as a guide to customize it. (If you don’t have the sample <code class=\"highlighter-rouge\">.conf</code> file, you can download it <a href=\"https://github.com/rethinkdb/rethinkdb/blob/next/packaging/assets/config/default.conf.sample\">here</a>.)</p> <pre data-language=\"\">sudo cp /etc/rethinkdb/default.conf.sample /etc/rethinkdb/instances.d/instance1.conf\nsudo vim /etc/rethinkdb/instances.d/instance1.conf\n</pre>  <p>Then, restart the service:</p> <pre data-language=\"\">sudo /etc/init.d/rethinkdb restart\n</pre>  <p>The basic setup is complete—<strong>you’ve now got a working server!</strong></p> <h3 id=\"multiple-instances\">Multiple instances</h3> <p>The init.d script supports starting multiple instances on the same server via multiple <code class=\"highlighter-rouge\">.conf</code> files in <code class=\"highlighter-rouge\">/etc/rethinkdb/instances.d</code>. This may be desirable for isolating databases for separate applications running on the same server, or for testing purposes. (There is no performance gain from running multiple nodes of the same cluster on the same physical machine.)</p> <p>In each configuration file, set a different data directory, and include the <code class=\"highlighter-rouge\">join</code> configuration option for each node with the IP address and port of another node in the cluster. If the instances are not running on the same machine, specify <code class=\"highlighter-rouge\">bind=all</code> in the configuration file (or <code class=\"highlighter-rouge\">--bind all</code> on the command line). Take care that each instance on the same machine specifies different values for <code class=\"highlighter-rouge\">driver-port</code>, <code class=\"highlighter-rouge\">cluster-port</code> and <code class=\"highlighter-rouge\">http-port</code>.</p> <blockquote class=\"infobox infobox-alert\">\n<p>The <code class=\"highlighter-rouge\">bind=all</code> option is a security risk if your machine is open to the internet, and you should take steps to prevent unauthorized access. See the <a href=\"../security/index\">security page</a> for more details.</p> </blockquote> <h3 id=\"installing-from-source\">Installing from source</h3> <p>If you compiled from source, get the <code class=\"highlighter-rouge\">init.d</code> script from <a href=\"https://github.com/rethinkdb/rethinkdb/blob/next/packaging/assets/init/rethinkdb\">here</a>. Get the sample <code class=\"highlighter-rouge\">.conf</code> file <a href=\"https://github.com/rethinkdb/rethinkdb/blob/next/packaging/assets/config/default.conf.sample\">here</a>.</p> <h2 id=\"startup-with-systemd\">Startup with systemd</h2> <blockquote class=\"infobox \">\n<p><strong>Running Ubuntu?</strong> Use the <a href=\"#startup-with-initd\">Startup with init.d</a> instructions above, not the <code class=\"highlighter-rouge\">systemd</code> instructions.</p> </blockquote> <p>Full support for systemd is planned—you can track progress on <a href=\"https://github.com/rethinkdb/rethinkdb/issues/2014\">issue 2014</a>. For now, you’ll have to create a couple configuration files manually.</p> <h3 id=\"basic-setup\">Basic setup</h3> <p>Create the file <code class=\"highlighter-rouge\">/usr/lib/tmpfiles.d/rethinkdb.conf</code> with the content:</p> <pre data-language=\"\">d /run/rethinkdb 0755 rethinkdb rethinkdb -\n</pre>  <p>And create the service file, <code class=\"highlighter-rouge\">/usr/lib/systemd/system/rethinkdb@.service</code>:</p> <pre data-language=\"\">[Unit]\nDescription=RethinkDB database server for instance '%i'\n\n[Service]\nUser=rethinkdb\nGroup=rethinkdb\nExecStart=/usr/bin/rethinkdb serve --config-file /etc/rethinkdb/instances.d/%i.conf\nKillMode=process\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\n</pre>  <p>The <code class=\"highlighter-rouge\">chmod</code> for the two files should be 644 (<code class=\"highlighter-rouge\">chmod 644 &lt;file&gt;</code>).</p> <h3 id=\"starting-rethinkdb-instances\">Starting RethinkDB instances</h3> <p>First, create the RethinkDB data directory with the following command and set the ownership to the <code class=\"highlighter-rouge\">rethinkdb</code> user:</p> <pre data-language=\"\">rethinkdb create -d /path/to/your/rethinkdb/directory\nsudo chown -R rethinkdb.rethinkdb /path/to/your/rethinkdb/directory\n</pre>  <p>Then, copy the sample configuration file and use the <a href=\"../config-file/index\">configuration file</a> documentation as a guide to customize it. (If you don’t have the sample <code class=\"highlighter-rouge\">.conf</code> file, you can download it <a href=\"https://github.com/rethinkdb/rethinkdb/blob/next/packaging/assets/config/default.conf.sample\">here</a>.)</p> <pre data-language=\"\">sudo cp /etc/rethinkdb/default.conf.sample /etc/rethinkdb/instances.d/instance1.conf\nsudo vim /etc/rethinkdb/instances.d/instance1.conf\n</pre>  <p>While you may be able to leave many options at their defaults, you’ll definitely need to change the <code class=\"highlighter-rouge\">directory=</code> line in the configuration file to point to your RethinkDB data directory.</p> <pre data-language=\"\">directory=/path/to/your/rethinkdb/directory\n</pre>  <p>Then, enable the service:</p> <pre data-language=\"\">sudo systemctl enable rethinkdb@&lt;name_instance&gt;\nsudo systemctl start rethinkdb@&lt;name_instance&gt;\n</pre>  <p><strong>You’ve now got a working server!</strong></p> <h3 id=\"multiple-instances-1\">Multiple instances</h3> <p>As systemd supports multiple instances on the same server, you simply need to create multiple <code class=\"highlighter-rouge\">.conf</code> files in <code class=\"highlighter-rouge\">/etc/rethinkdb/instances.d</code>. This may be desirable for isolating databases for separate applications running on the same server, or for testing purposes. (There is no performance gain from running multiple nodes of the same cluster on the same physical machine.)</p> <p>In each configuration file, set a different data directory, and include the <code class=\"highlighter-rouge\">join</code> configuration option for each node with the IP address and port of another node in the cluster. If the instances are not running on the same machine, specify <code class=\"highlighter-rouge\">bind=all</code> in the configuration file (or <code class=\"highlighter-rouge\">--bind all</code> on the command line). Take care that each instance on the same machine specifies different values for <code class=\"highlighter-rouge\">driver-port</code>, <code class=\"highlighter-rouge\">cluster-port</code> and <code class=\"highlighter-rouge\">http-port</code>.</p> <blockquote class=\"infobox infobox-alert\">\n<p>The <code class=\"highlighter-rouge\">bind=all</code> option is a security risk if your machine is open to the internet, and you should take steps to prevent unauthorized access. See the <a href=\"../security/index\">security page</a> for more details.</p> </blockquote> <h2 id=\"startup-with-launchd-os-x\">Startup with launchd (OS X)</h2> <p>If you install RethinkDB using <a href=\"http://brew.sh\">Homebrew</a>, a <code class=\"highlighter-rouge\">launchd</code> configuration file will be installed for you in <code class=\"highlighter-rouge\">~/Library/LaunchAgents/</code>, although that file may need to be modified.</p> <h3 id=\"basic-setup-1\">Basic setup</h3> <p>If you didn’t install using Homebrew, you’ll need to create a launchd configuration file, and decide where you want to store your data files. These instructions assume the following locations:</p> <ul> <li>RethinkDB binary installed by the official package in <code class=\"highlighter-rouge\">/usr/local/bin/rethinkdb</code>\n</li> <li>RethinkDB data directory will be <code class=\"highlighter-rouge\">/Library/RethinkDB/data</code>\n</li> <li>RethinkDB log will be <code class=\"highlighter-rouge\">/var/log/rethinkdb.log</code>\n</li> </ul> <p>If you wish other locations, change the text in the file appropriately.</p> <p>Create <code class=\"highlighter-rouge\">/Library/LaunchDaemons/com.rethinkdb.server.plist</code>:</p> <pre data-language=\"\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n&lt;dict&gt;\n  &lt;key&gt;Label&lt;/key&gt;\n  &lt;string&gt;com.rethinkdb.server&lt;/string&gt;\n  &lt;key&gt;ProgramArguments&lt;/key&gt;\n  &lt;array&gt;\n      &lt;string&gt;/usr/local/bin/rethinkdb&lt;/string&gt;\n      &lt;string&gt;-d&lt;/string&gt;\n      &lt;string&gt;/Library/RethinkDB/data&lt;/string&gt;\n  &lt;/array&gt;\n  &lt;key&gt;StandardOutPath&lt;/key&gt;\n  &lt;string&gt;/var/log/rethinkdb.log&lt;/string&gt;\n  &lt;key&gt;StandardErrorPath&lt;/key&gt;\n  &lt;string&gt;/var/log/rethinkdb.log&lt;/string&gt;\n  &lt;key&gt;RunAtLoad&lt;/key&gt;\n  &lt;true/&gt;\n  &lt;key&gt;KeepAlive&lt;/key&gt;\n  &lt;true/&gt;\n  &lt;key&gt;LowPriorityIO&lt;/key&gt;\n  &lt;false/&gt;\n&lt;/dict&gt;\n&lt;/plist&gt;\n</pre>  <p>Set this file to be owned by the <code class=\"highlighter-rouge\">root</code> user:</p> <pre data-language=\"\">sudo chown root:wheel /Library/LaunchDaemons/com.rethinkdb.server.plist\nsudo chmod 644 /Library/LaunchDaemons/com.rethinkdb.server.plist\n</pre>  <p>Then you’ll need to create the RethinkDB data directory.</p> <pre data-language=\"\">sudo mkdir -p /Library/RethinkDB\nsudo rethinkdb create -d /Library/RethinkDB/data\n</pre>  <h3 id=\"using-a-rethinkdb-configuration-file\">Using a RethinkDB configuration file</h3> <p>By default, neither Homebrew nor the example configuration file above will read options from a <a href=\"../config-file/index\">configuration file</a>. If you wish to use one, you’ll need to do the following:</p> <ul> <li>Download the <a href=\"https://github.com/rethinkdb/rethinkdb/blob/next/packaging/assets/config/default.conf.sample\">sample configuration file</a> and copy it to a new location.</li> </ul> <pre data-language=\"\">cp default.conf.sample /etc/rethinkdb.conf\n</pre>  <ul> <li>Edit the configuration file in your favorite editor. While you may be able to leave many options at their defaults, you’ll definitely need to change the <code class=\"highlighter-rouge\">directory=</code> line in the file to point to your data directory.</li> </ul> <pre data-language=\"\">sudo pico /etc/rethinkdb.conf\n</pre>  <ul> <li>Edit <code class=\"highlighter-rouge\">/Library/LaunchDaemons/com.rethinkdb.server.plist</code> to change the <code class=\"highlighter-rouge\">ProgramArguments</code> key so RethinkDB will use your configuration file.</li> </ul> <pre data-language=\"\">&lt;key&gt;ProgramArguments&lt;/key&gt;\n&lt;array&gt;\n    &lt;string&gt;/usr/local/bin/rethinkdb&lt;/string&gt;\n    &lt;string&gt;--config-file&lt;/string&gt;\n    &lt;string&gt;/etc/rethinkdb.conf&lt;/string&gt;\n&lt;/array&gt;\n</pre>  <h3 id=\"starting-rethinkdb-instances-1\">Starting RethinkDB instances</h3> <p>To start RethinkDB, use <code class=\"highlighter-rouge\">launchctl</code>:</p> <pre data-language=\"\">sudo launchctl load /Library/LaunchDaemons/com.rethinkdb.server.plist\n</pre>  <p>RethinkDB will automatically load on startup. To disable this behavior, change the <code class=\"highlighter-rouge\">RunAtLoad</code> key to <code class=\"highlighter-rouge\">&lt;false/&gt;</code> in the <code class=\"highlighter-rouge\">plist</code> file.</p> <h3 id=\"multiple-instances-2\">Multiple instances</h3> <p>Running multiple instances of RethinkDB on the same server may be desirable for isolating databases for separate applications running on the same server, or for testing purposes. (There is no performance gain from running multiple nodes of the same cluster on the same physical machine.)</p> <p>You will need to create new copies of the <code class=\"highlighter-rouge\">com.rethinkdb.server.plist</code> file with different names (e.g., <code class=\"highlighter-rouge\">com.rethinkdb.server2.plist</code>), making the following changes:</p> <ul> <li>Set the <code class=\"highlighter-rouge\">Label</code> key value to the name of the file (e.g., <code class=\"highlighter-rouge\">com.rethinkdb.server2.plist</code>).</li> <li>Set the <code class=\"highlighter-rouge\">ProgramArguments</code> key to a new configuration file (e.g., <code class=\"highlighter-rouge\">/etc/rethinkdb2.conf</code>).</li> <li>Set the <code class=\"highlighter-rouge\">StandardOutPath</code> and <code class=\"highlighter-rouge\">StandardErrorPath</code> keys to a new log file.</li> </ul> <p>In each configuration file, set a different data directory, and include the <code class=\"highlighter-rouge\">join</code> configuration option for each node with the IP address and port of another node in the cluster. If the instances are not running on the same machine, specify <code class=\"highlighter-rouge\">bind=all</code> in the configuration file (or <code class=\"highlighter-rouge\">--bind all</code> on the command line). Take care that each instance on the same machine specifies different values for <code class=\"highlighter-rouge\">driver-port</code>, <code class=\"highlighter-rouge\">cluster-port</code> and <code class=\"highlighter-rouge\">http-port</code>.</p> <blockquote class=\"infobox infobox-alert\">\n<p>The <code class=\"highlighter-rouge\">bind=all</code> option is a security risk if your machine is open to the internet, and you should take steps to prevent unauthorized access. See the <a href=\"../security/index\">security page</a> for more details.</p> <p>Under OS X, the system versions of Python and Ruby link to old versions of OpenSSL which do not support RethinkDB’s defaults for TLS. To use those drivers under OS X, the server must specify:</p> <ul> <li><code class=\"highlighter-rouge\">tls-min-protocol TLSv1</code></li> <li><code class=\"highlighter-rouge\">tls-ciphers EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH:AES256-SHA</code></li> </ul> <p>These may be specified as startup options to <code class=\"highlighter-rouge\">rethinkdb</code> or in the configuration file.</p> </blockquote> <h2 id=\"troubleshooting\">Troubleshooting</h2> <blockquote class=\"infobox \">\n<p><strong>Seeing a ‘received invalid clustering header’ message?</strong> RethinkDB uses three ports to operate—the HTTP web UI port, the client drivers port, and the intracluster traffic port. You can connect the browser to the web UI port to administer the cluster right from your browser, and connect the client drivers to the client driver port to run queries from your application. If you’re running a cluster, different RethinkDB nodes communicate with each other via the intracluster traffic port.</p> <p>The message <code class=\"highlighter-rouge\">received invalid clustering header</code> means there is a port mismatch, and something is connecting to the wrong port. For example, it’s common to get this message if you accidentally point the browser or connect the client drivers to the intracluster traffic port.</p> </blockquote><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/start-on-startup/\" class=\"_attribution-link\">https://rethinkdb.com/docs/start-on-startup/</a>\n  </p>\n</div>\n","docs/security/index":"<h1 class=\"title\">Secure your cluster</h1> <p><img alt=\"Securing your cluster Illustration\" class=\"api_command_illustration\" src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/secure-cluster.png\"></p> <div class=\"toc\">  <ul id=\"markdown-toc\"> <li><a href=\"#using-tls\" id=\"markdown-toc-using-tls\">Using TLS</a></li> <li><a href=\"#the-admin-account\" id=\"markdown-toc-the-admin-account\">The admin account</a></li> <li><a href=\"#binding-the-web-interface-port\" id=\"markdown-toc-binding-the-web-interface-port\">Binding the web interface port</a></li> <li><a href=\"#securing-the-driver-port\" id=\"markdown-toc-securing-the-driver-port\">Securing the driver port</a></li> <li><a href=\"#binding-the-intracluster-port\" id=\"markdown-toc-binding-the-intracluster-port\">Binding the intracluster port</a></li> </ul> </div> <p>The best way to secure a RethinkDB cluster is to run it on a protected network that doesn’t allow access from the outside world. However, this may not always be feasible. For example, cloud deployments often require access from wide area networks.</p> <p>There are two main methods RethinkDB provides for securing the cluster: TLS encryption for connections, and binding the ports the server uses to specific IP addresses to limit outside connections.</p> <h2 id=\"using-tls\">Using TLS</h2> <p>Starting with version 2.3, RethinkDB offers the ability to secure connections between servers, between servers and clients, and to the web UI using <a href=\"https://en.wikipedia.org/wiki/Transport_Layer_Security\">TLS</a> encryption (the successor to SSL). Securing RethinkDB in this fashion is similar to securing a web site with a <a href=\"https://en.wikipedia.org/wiki/Self-signed_certificate\">self-signed SSL certificate</a>: create a private key and a certificate, then tell the server to use them.</p> <h3 id=\"generate-a-key-and-matching-certificate\">Generate a key and matching certificate</h3> <p>The easiest way to do this is with the <code class=\"highlighter-rouge\">openssl</code> command line tool. (Under Linux and OS X, this is already installed; for Windows, you may be able to find <a href=\"https://wiki.openssl.org/index.php/Binaries\">precompiled binaries</a> from the list on the OpenSSL wiki.)</p> <p>First, generate a 2048-bit key and save it to <code class=\"highlighter-rouge\">key.pem</code>:</p> <pre data-language=\"\">openssl genrsa -out key.pem 2048\n</pre>  <p>Then, generate a certificate, <code class=\"highlighter-rouge\">cert.pem</code>, from that key:</p> <pre data-language=\"\">openssl req -new -x509 -key key.pem -out cert.pem -days 3650\n</pre>  <p>OpenSSL will ask you to enter information for the certificate. While some of these questions can be left at their default, the “Common Name” must match the domain name of your server. For local testing purposes you can use <code class=\"highlighter-rouge\">localhost</code>, but not in production.</p> <pre data-language=\"\">Country Name (2 letter code) [AU]:US\nState or Province Name (full name) [Some-State]:California\nLocality Name (eg, city) []:Mountain View\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:RethinkDB\nOrganizational Unit Name (eg, section) []:\nCommon Name (e.g. server FQDN or YOUR name) []:example.com\nEmail Address []:\n</pre>  <h3 id=\"telling-rethinkdb-to-use-your-certificate\">Telling RethinkDB to use your certificate</h3> <p>Certificates and keys may be specified with either <a href=\"../cli-options/index\">command line options</a> or as keys in a <a href=\"../config-file/index\">configuration file</a>. To start RethinkDB and tell it to secure the web administration UI, you can start the server with the following options:</p> <pre data-language=\"\">rethinkdb --http-tls-key key.pem --http-tls-cert cert.pem\n</pre>  <p>Both options are required. In the configuration file, you would specify the key and certificate like so:</p> <pre data-language=\"\">http-tls-key=key.pem\nhttp-tls-cert=cert.pem\n</pre>  <p>To use TLS connections with client drivers, specify:</p> <pre data-language=\"\">rethinkdb --driver-tls-key key.pem --driver-tls-cert cert.pem\n</pre>  <p>If you use this option on the server, the client must use a secure connection as well. Pass the certificate information in the <code class=\"highlighter-rouge\">ssl</code> option to the <code class=\"highlighter-rouge\">connect</code> ReQL command; read the API documentation for <a href=\"https://rethinkdb.com/api/javascript/connect/\">connect</a> for details on your language’s specific syntax.</p> <p>To use TLS connections between servers in the cluster:</p> <pre data-language=\"\">rethindb --cluster-tls-key key.pem --cluster-tls-cert cert.pem --cluster-tls-ca cert.pem\n</pre>  <p>Note that in the last case, you’re required to provide a CA certificate as well. This is a certificate used to sign other certificates. In this case, we’re using the same certificate for both, but we could sign our <code class=\"highlighter-rouge\">cert.pem</code> with a different CA certificate and specify both of them. Servers can only connect to the cluster if the certificates specified by their <code class=\"highlighter-rouge\">cluster-tls-cert</code> value are signed by the CA certificate specified by <code class=\"highlighter-rouge\">cluster-tls-ca</code>.</p> <blockquote class=\"infobox infobox-alert\">\n<p>Under OS X, the system versions of Python and Ruby link to old versions of OpenSSL which do not support RethinkDB’s defaults for TLS. To use those drivers under OS X, the server must specify:</p> <ul> <li><code class=\"highlighter-rouge\">tls-min-protocol TLSv1</code></li> <li><code class=\"highlighter-rouge\">tls-ciphers EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH:AES256-SHA</code></li> </ul> <p>These may be specified as startup options to <code class=\"highlighter-rouge\">rethinkdb</code> or in the configuration file.</p> </blockquote> <h2 id=\"the-admin-account\">The admin account</h2> <p>All RethinkDB servers have an <code class=\"highlighter-rouge\">admin</code> account with full access to the cluster, and by default this account has no password. (For full details on this topic, read <a href=\"../permissions-and-accounts/index\">Permissions and user accounts</a>.) One of the first things you should do to secure a cluster is to assign a password to <code class=\"highlighter-rouge\">admin</code>. You can do this when the first server starts up by using the <code class=\"highlighter-rouge\">--initial-password</code> <a href=\"../cli-options/index\">command line option</a>, or by updating the <code class=\"highlighter-rouge\">admin</code> record with a new password in the user <a href=\"../system-tables/index#users\">system table</a>.</p> <p>When new servers (including proxies) join an existing cluster, it will synchronize with all the user account information, including passwords, from that cluster. This includes the <code class=\"highlighter-rouge\">admin</code> account. However, a server with no admin password set cannot join an existing cluster that <em>does</em> have a password set. Otherwise, it would technically be possible for an attacker to connect to that server as an admin and run arbitrary queries in the time between that server starting and the accounts synchronizing from the rest of the cluster.</p> <p>If you’re setting up a cluster in a secure environment (for instance, the whole cluster is on a local network behind a firewall), you can simply start the servers in the cluster without an admin password, then update the <code class=\"highlighter-rouge\">admin</code> record in the <code class=\"highlighter-rouge\">users</code> table with a new password. However, if you’re joining a new server to a cluster that’s already password-protected, the best way to do it is to specify the <code class=\"highlighter-rouge\">--initial-password auto</code> option.</p> <p>This option creates a random password for that server’s <code class=\"highlighter-rouge\">admin</code> account. Once that server is synchronized with the cluster, the random password will be overwritten by the <code class=\"highlighter-rouge\">admin</code> password, preventing the exploit described above.</p> <pre data-language=\"\">rethinkdb --initial-password auto --join cluster\n</pre>  <h2 id=\"binding-the-web-interface-port\">Binding the web interface port</h2> <p>Binding the web interface port can prevent it from being accessed directly from a remote machine. You can bind it to a specific IP address using the <code class=\"highlighter-rouge\">--bind-http</code> <a href=\"../cli-options/index\">command line option</a>; the most secure method is to bind it to the local machine (<code class=\"highlighter-rouge\">localhost</code>) and then connect via a proxy.</p> <pre data-language=\"\">rethinkdb --bind-http localhost\n</pre>  <p>(You can also specify <code class=\"highlighter-rouge\">bind-http=</code> in the <a href=\"../config-file/index\">configuration file</a>.)</p> <p>Now, use one of the following two methods to enable secure access.</p> <h3 id=\"via-a-socks-proxy\">Via a SOCKS proxy</h3> <p>Once you block the web interface port in the step above, the easiest way to access it is to use ssh to set up a SOCKS proxy. Run the following command on your local server (not the one running RethinkDB):</p> <pre data-language=\"\">ssh -D 3000 USERNAME@HOST\n</pre>  <p>Where,</p> <ul> <li>\n<code class=\"highlighter-rouge\">HOST</code> is the ip of any server on your RethinkDB cluster.</li> <li>\n<code class=\"highlighter-rouge\">3000</code> can be changed to any port that is available on your local server.</li> </ul> <p>Then open your browser:</p> <ul> <li>\n<strong>If you’re using Chrome</strong>, go to <em>Settings &gt; Advanced settings &gt; Network &gt; Change proxy settings</em>, and set the <em>Network proxy</em> option to manual mode with the following settings: <ul> <li>Host: <code class=\"highlighter-rouge\">localhost</code>\n</li> <li>Port: <code class=\"highlighter-rouge\">3000</code>\n</li> <li>Ignored host: (remove everything)</li> </ul> </li> <li>\n<strong>If you are using Firefox</strong>, go to <em>Edit &gt; Preferences</em>. Then click on <em>Advanced &gt; Network &gt; Settings</em> and create a manual proxy configuration with these settings: <ul> <li>Socks host: <code class=\"highlighter-rouge\">localhost</code>\n</li> <li>Port: <code class=\"highlighter-rouge\">3000</code>\n</li> <li>Check socks v5</li> <li>No proxy for: (remove everything)</li> </ul> </li> </ul> <p>You can now visit <code class=\"highlighter-rouge\">localhost:8080</code> to see the RethinkDB web admin.</p> <h3 id=\"via-a-reverse-proxy\">Via a reverse proxy</h3> <p>You can use a reverse HTTP proxy to allow access to the web interface from other servers. Most web servers (such as Apache or Nginx) support this feature. In the following example we’ll use Apache to set up a reverse proxy.</p> <p>You’ll need the following modules installed for Apache:</p> <ul> <li>proxy</li> <li>proxy_http</li> </ul> <p>Depending on your OS, you may need to install a library such as <code class=\"highlighter-rouge\">libapache2-mod-proxy-html</code>.</p> <p>Create a new virtual host:</p> <pre data-language=\"\">&lt;VirtualHost *:80&gt;\n    ServerName domain.net\n\n    ProxyRequests Off\n\n    &lt;Proxy *&gt;\n        Order deny,allow\n        Allow from all\n        AuthType Basic\n        AuthName \"Password Required\"\n        AuthUserFile password.file\n        AuthGroupFile group.file\n        Require group dbadmin\n    &lt;/Proxy&gt;\n\n    ProxyErrorOverride On\n    ProxyPass   /rethinkdb_admin/   http://localhost:8080/\n    ProxyPassReverse   /rethinkdb_admin/   http://localhost:8080/\n\n&lt;/VirtualHost&gt;\n</pre>  <p>Create the password file in <code class=\"highlighter-rouge\">/etc/apache2/</code>:</p> <pre data-language=\"\">htpasswd.exe -c password.file username\n</pre>  <p>Almost done. All we have to do now is create a file <code class=\"highlighter-rouge\">group.file</code> with this the following content:</p> <pre data-language=\"\">dbadmin: username\n</pre>  <p>You can now access the web interface using the following URL: <code class=\"highlighter-rouge\">http://HOST/rethinkdb_admin</code>.</p> <h2 id=\"securing-the-driver-port\">Securing the driver port</h2> <h3 id=\"using-the-rethinkdb-authentication-system\">Using the RethinkDB authentication system</h3> <p>Clients may specify <code class=\"highlighter-rouge\">user</code> and <code class=\"highlighter-rouge\">password</code> values in the <a href=\"https://rethinkdb.com/api/javascript/connect\">connect</a> command. For more information about creating and managing user accounts and permissions, read <a href=\"../permissions-and-accounts/index\">Permissions and user accounts</a>.</p> <p>Note that passwords will be sent in plaintext unless you are using TLS encryption. Instead of (or in addition to) TLS, you can bind the driver port and use SSH tunneling, as described below.</p> <blockquote class=\"infobox \">\n<p><strong>Note</strong>: The authentication system affects <em>client drivers,</em> not the web interface. Follow the directions above to secure the web UI.</p> </blockquote> <h3 id=\"using-ssh-tunneling\">Using SSH tunneling</h3> <p>First, protect the driver port so that it cannot be accessed from the outside world. Use the <code class=\"highlighter-rouge\">--bind-driver</code> <a href=\"../cli-options/index\">command line option</a> or the corresponding <a href=\"../config-file/index\">configuration file option</a> to bind it to <code class=\"highlighter-rouge\">localhost</code>.</p> <pre data-language=\"\">rethinkdb --bind-driver localhost\n</pre>  <p>Now create an SSH tunnel on the server that needs to access the remote RethinkDB driver port:</p> <pre data-language=\"\">ssh -L &lt;local_port&gt;:localhost:&lt;driver_port&gt; &lt;ip_of_rethinkdb_server&gt;\n</pre>  <p>Where,</p> <ul> <li>\n<code class=\"highlighter-rouge\">local_port</code> is the port you are going to specify in the driver - It can be any available port on your server.</li> <li>\n<code class=\"highlighter-rouge\">driver_port</code> is the RethinkDB driver port (28015 by default).</li> <li>\n<code class=\"highlighter-rouge\">ip_of_rethinkdb_server</code> is the IP address of the server that runs the RethinkDB server.</li> </ul> <p>You can now connect to your RethinkDB instance by connecting to the host <code class=\"highlighter-rouge\">localhost</code> and port <code class=\"highlighter-rouge\">local_port</code>:</p> <pre data-language=\"\">r.connect({host: 'localhost', port: &lt;local_port&gt;},\n    function(error, connection) { ... })\n</pre>  <h2 id=\"binding-the-intracluster-port\">Binding the intracluster port</h2> <p>To secure the cluster port, bind it to a specific IP address using the <code class=\"highlighter-rouge\">--bind-cluster</code> <a href=\"../cli-options/index\">command line option</a> or the corresponding <a href=\"../config-file/index\">configuration file option</a>. Bind it to an IP address that is only accessible from within your local network.</p> <pre data-language=\"\">rethinkdb --bind-cluster 192.168.0.100\n</pre>  <p>The intracluster port will be accessible from within the local network where you run RethinkDB nodes, but will not be accessible from the outside world.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/security/\" class=\"_attribution-link\">https://rethinkdb.com/docs/security/</a>\n  </p>\n</div>\n","docs/cli-options/index":"<h1 class=\"title\">RethinkDB command line options</h1> <p>These options can be passed to the <code class=\"highlighter-rouge\">rethinkdb</code> server on the command line on startup. Many of these options can also be set in the configuration file; read <a href=\"../config-file/index\">Configuration file options</a> for a detailed list.</p> <h3 id=\"file-path-options\">File path options</h3> <ul> <li>\n<code class=\"highlighter-rouge\">-d [ --directory ] path</code>: specify directory to store data and metadata</li> <li>\n<code class=\"highlighter-rouge\">--io-threads n</code>: how many simultaneous I/O operations can happen at the same time</li> <li>\n<code class=\"highlighter-rouge\">--direct-io</code>: use direct I/O for file access</li> <li>\n<code class=\"highlighter-rouge\">--cache-size mb</code>: total cache size (in megabytes) for the process. Can be ‘auto’.</li> </ul> <h3 id=\"server-name-options\">Server name options</h3> <ul> <li>\n<code class=\"highlighter-rouge\">-n [ --server-name ] arg</code>: the name for this server (as will appear in the metadata). If not specified, it will be randomly chosen from a short list of names.</li> <li>\n<code class=\"highlighter-rouge\">-t [ --server-tag ] arg</code>: a tag for this server. Can be specified multiple times.</li> </ul> <h3 id=\"network-options\">Network options</h3> <ul> <li>\n<code class=\"highlighter-rouge\">--bind {all | addr}</code>: add the address of a local interface to listen on when accepting connections; loopback addresses are enabled by default</li> <li>\n<code class=\"highlighter-rouge\">--bind-http {all | addr}</code>: bind the web administration UI port to a specific address</li> <li>\n<code class=\"highlighter-rouge\">--bind-cluster {all | addr}</code>: bind the cluster connection port to a specific address</li> <li>\n<code class=\"highlighter-rouge\">--bind-driver {all | addr}</code>: bind the client driver to a specific address</li> <li>\n<code class=\"highlighter-rouge\">--no-default-bind</code>: disable automatic listening on loopback addresses, unless explicitly specified in a separate <code class=\"highlighter-rouge\">--bind</code> option</li> <li>\n<code class=\"highlighter-rouge\">--cluster-port port</code>: port for receiving connections from other nodes</li> <li>\n<code class=\"highlighter-rouge\">--driver-port port</code>: port for RethinkDB protocol client drivers</li> <li>\n<code class=\"highlighter-rouge\">-o [ --port-offset ] offset</code>: all ports used locally will have this value added</li> <li>\n<code class=\"highlighter-rouge\">-j [ --join ] host:port</code>: host and port of a RethinkDB node to connect to</li> <li>\n<code class=\"highlighter-rouge\">--reql-http-proxy [protocol://]host[:port]</code>: HTTP proxy to use for performing <code class=\"highlighter-rouge\">r.http(...)</code> queries, default port is 1080</li> <li>\n<code class=\"highlighter-rouge\">--canonical-address addr</code>: address that other RethinkDB instances will use to connect to us, can be specified multiple times</li> <li>\n<code class=\"highlighter-rouge\">--cluster-reconnect-timeout secs</code>: the amount of time, in seconds, this server will try to reconnect to a cluster if it loses connection before giving up; default <code class=\"highlighter-rouge\">86400</code>\n</li> </ul> <p>The <code class=\"highlighter-rouge\">--bind</code> option controls the default behavior for all RethinkDB ports. If it’s specified, the <code class=\"highlighter-rouge\">--bind-http</code>, <code class=\"highlighter-rouge\">--bind-cluster</code> and <code class=\"highlighter-rouge\">--bind-driver</code> options will override that behavior for a specific port. So:</p> <pre data-language=\"\">rethinkdb --bind all --bind-cluster 192.168.0.1\n</pre>  <p>This will bind the HTTP and driver ports on all available interfaces, while the cluster port will only be bound on the loopback interface and <code class=\"highlighter-rouge\">192.168.0.1</code>.</p> <h3 id=\"tls-options\">TLS options</h3> <ul> <li>\n<code class=\"highlighter-rouge\">--http-tls-key key_filename</code>: private key to use for web administration console TLS</li> <li>\n<code class=\"highlighter-rouge\">--http-tls-cert cert_filename</code>: certificate to use for web administration console TLS</li> </ul> <p><strong>Note:</strong> <code class=\"highlighter-rouge\">--http-tls-key</code> and <code class=\"highlighter-rouge\">--http-tls-cert</code> must be used together.</p> <ul> <li>\n<code class=\"highlighter-rouge\">--driver-tls-key key_filename</code>: private key to use for client driver connection TLS</li> <li>\n<code class=\"highlighter-rouge\">--driver-tls-cert cert_filename</code>: certificate to use for client driver connection TLS</li> <li>\n<code class=\"highlighter-rouge\">--driver-tls-ca ca_filename</code>: CA certificate bundle used to verify client certificates; TLS client authentication disabled if omitted</li> </ul> <p><strong>Note:</strong> <code class=\"highlighter-rouge\">--driver-tls-key</code> and <code class=\"highlighter-rouge\">--driver-tls-cert</code> must be used together; <code class=\"highlighter-rouge\">--driver-tls-ca</code> is optional.</p> <ul> <li>\n<code class=\"highlighter-rouge\">--cluster-tls-key key_filename</code>: private key to use for intra-cluster connection TLS</li> <li>\n<code class=\"highlighter-rouge\">--cluster-tls-cert cert_filename</code>: certificate to use for intra-cluster connection TLS</li> <li>\n<code class=\"highlighter-rouge\">--cluster-tls-ca ca_filename</code>: CA certificate bundle used to verify cluster peer certificates</li> </ul> <p><strong>Note:</strong> all three <code class=\"highlighter-rouge\">--cluster-tls-*</code> options must be used together.</p> <ul> <li>\n<code class=\"highlighter-rouge\">--tls-min-protocol protocol</code>: the minimum TLS protocol version the server accepts, one of <code class=\"highlighter-rouge\">TLSv1</code>, <code class=\"highlighter-rouge\">TLSv1.1</code>, <code class=\"highlighter-rouge\">TLSv1.2</code>; default is <code class=\"highlighter-rouge\">TLSv1.2</code>\n</li> <li>\n<code class=\"highlighter-rouge\">--tls-ciphers cipher_list</code>: specify a list of TLS ciphers to use; default is <code class=\"highlighter-rouge\">EECDH+AESGCM</code>\n</li> <li>\n<code class=\"highlighter-rouge\">--tls-ecdh-curve curve_name</code>: specify a named elliptic curve to use for ECDHE; default is <code class=\"highlighter-rouge\">prime256v1</code>\n</li> <li>\n<code class=\"highlighter-rouge\">--tls-dhparams dhparams_filename</code>: provide parameters for DHE key agreement; REQUIRED if using DHE cipher suites; at least 2048-bit recommended</li> </ul> <p>For details about these options, read <a href=\"../security/index\">Securing your cluster</a>.</p> <h3 id=\"web-options\">Web options</h3> <ul> <li>\n<code class=\"highlighter-rouge\">--web-static-directory directory</code>: the directory containing web resources for the http interface</li> <li>\n<code class=\"highlighter-rouge\">--http-port port</code>: port for web administration console</li> <li>\n<code class=\"highlighter-rouge\">--no-http-admin</code>: disable web administration console</li> </ul> <h3 id=\"cpu-options\">CPU options</h3> <ul> <li>\n<code class=\"highlighter-rouge\">-c [ --cores ] n</code>: the number of cores to use</li> </ul> <h3 id=\"service-options\">Service options</h3> <ul> <li>\n<code class=\"highlighter-rouge\">--pid-file path</code>: a file in which to write the process id when the process is running</li> <li>\n<code class=\"highlighter-rouge\">--daemon</code>: daemonize this rethinkdb process</li> </ul> <h3 id=\"set-usergroup-options\">Set User/Group options</h3> <ul> <li>\n<code class=\"highlighter-rouge\">--runuser user</code>: run as the specified user</li> <li>\n<code class=\"highlighter-rouge\">--rungroup group</code>: run with the specified group</li> </ul> <h3 id=\"security-options\">Security options</h3> <ul> <li>\n<code class=\"highlighter-rouge\">--initial-password</code>: set a password for the <code class=\"highlighter-rouge\">admin</code> user if none has previously been set; use <code class=\"highlighter-rouge\">auto</code> to choose a random password that will be printed to <code class=\"highlighter-rouge\">stdout</code> (see <a href=\"../security/index\">Secure your cluster</a> for more information)</li> </ul> <h3 id=\"help-options\">Help options</h3> <ul> <li>\n<code class=\"highlighter-rouge\">-h [ --help ]</code>: print this help</li> <li>\n<code class=\"highlighter-rouge\">-v [ --version ]</code>: print the version number of rethinkdb</li> </ul> <h3 id=\"log-options\">Log options</h3> <ul> <li>\n<code class=\"highlighter-rouge\">--log-file file</code>: specify the file to log to, defaults to ‘log_file’</li> <li>\n<code class=\"highlighter-rouge\">--no-update-check</code>: disable checking for available updates. Also turns off anonymous usage data collection.</li> </ul> <h3 id=\"configuration-file-options\">Configuration file options</h3> <ul> <li>\n<code class=\"highlighter-rouge\">--config-file</code>: take options from a configuration file</li> </ul> <h3 id=\"subcommands\">Subcommands</h3> <ul> <li>\n<code class=\"highlighter-rouge\">rethinkdb create</code>: prepare files on disk for a new server instance</li> <li>\n<code class=\"highlighter-rouge\">rethinkdb serve</code>: use an existing data directory to host data and serve queries</li> <li>\n<code class=\"highlighter-rouge\">rethinkdb proxy</code>: run a proxy server (serve queries from an existing cluster but don’t host data)</li> <li>\n<code class=\"highlighter-rouge\">rethinkdb export</code>: export data from an existing cluster into a file or directory</li> <li>\n<code class=\"highlighter-rouge\">rethinkdb import</code>: import data from from a file or directory into an existing cluster</li> <li>\n<code class=\"highlighter-rouge\">rethinkdb dump</code>: export and compress data from an existing cluster</li> <li>\n<code class=\"highlighter-rouge\">rethinkdb restore</code>: import compressed data into an existing cluster</li> <li>\n<code class=\"highlighter-rouge\">rethinkdb index-rebuild</code>: rebuild outdated secondary indexes</li> </ul> <p>For more information about subcommands, type <code class=\"highlighter-rouge\">rethinkdb help [subcommand]</code> at the command line.</p> <p>For information about running RethinkDB as a proxy server, read <a href=\"../sharding-and-replication/index#running-a-proxy-node\">Running a proxy node</a> in “Scaling, sharding and replication.”</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/cli-options/\" class=\"_attribution-link\">https://rethinkdb.com/docs/cli-options/</a>\n  </p>\n</div>\n","docs/paas/index":"<h1 class=\"title\">Deploying with PaaS</h1> <p>RethinkDB can be easily deployed on <a href=\"http://compose.io/\">Compose</a> and <a href=\"http://aws.amazon.com/\">Amazon Web Services</a>.</p> <div class=\"toc\">  <ul id=\"markdown-toc\"> <li><a href=\"#deploying-on-compose\" id=\"markdown-toc-deploying-on-compose\">Deploying on Compose</a></li> <li><a href=\"#deploying-on-aws\" id=\"markdown-toc-deploying-on-aws\">Deploying on AWS</a></li> <li><a href=\"#instance-administration\" id=\"markdown-toc-instance-administration\">Instance administration</a></li> <li><a href=\"#security\" id=\"markdown-toc-security\">Security</a></li> </ul> </div> <h2 id=\"deploying-on-compose\">Deploying on Compose</h2> <p>Each deployment provided by Compose is configured as a high-availability cluster with full redundancy. To create a hosted RethinkDB instance:</p> <ol> <li>Click the “Add Deployment” button in the Compose administration panel.</li> <li>Select “RethinkDB.”</li> <li>Enter a name for the deployment.</li> </ol> <p><img src=\"https://rethinkdb.com/assets/images/docs/compose.png\" alt=\"Deploying on Compose\"></p> <p>If you haven’t already added billing information to your Compose account, you’ll be prompted to do so before deployment.</p> <p>You can connect to your hosted cluster on Compose in one of two ways: via SSL or via SSH tunneling. With SSL, you can get a direct Admin URL and driver connection URL to your RethinkDB instance. SSL driver connections are only supported with the official RethinkDB drivers and the community-supported Go driver. For more details, read Compose’s <a href=\"https://www.compose.io/articles/rethinkdb-and-ssl-think-secure/\">RethinkDB and SSL</a> blog post.</p> <p>SSH tunneling lets you connect directly to the virtual private network of your RethinkDB cluster. This is more complicated to set up, but lets you work with the hosted RethinkDB instance the same way you’d work with a local installation, and it can work with any community RethinkDB driver. After your RethinkDB deployment is created, the admin console will give you the host and port information that you need to use to set up the SSH tunnel.</p> <p>Read Compose’s <a href=\"https://docs.compose.io/getting-started/rethinkdb-deployments.html\">overview</a> of RethinkDB support and their <a href=\"https://help.compose.io/docs/connecting-to-rethinkdb\">Connecting to RethinkDB</a> documentation for more information.</p> <h2 id=\"deploying-on-aws\">Deploying on AWS</h2> <h3 id=\"launching-an-instance\">Launching an instance</h3> <p>The smallest recommended instance type is <code class=\"highlighter-rouge\">t2.small</code>. However, <code class=\"highlighter-rouge\">t2.micro</code> works for simple tests. Follow these instructions to set up an AMI:</p> <ol> <li>On the <a href=\"https://aws.amazon.com/marketplace/pp/B013R60Q8Y\">RethinkDB marketplace page</a>, click the <strong>Continue</strong> button.</li> <li>Select the <strong>1-Click Launch</strong> tab, select the size of the instance you wish to configure, and click on the <strong>Launch with 1-Click</strong> button on the right.</li> <li>Click on the link <strong><a href=\"https://aws.amazon.com/marketplace/library\">Your Software</a></strong> in the upper right. RethinkDB should appear as one of your software subscriptions.</li> <li>When the RethinkDB instance is ready, click on its <strong>Access Software</strong> link.</li> <li>You should see a “Setting up a RethinkDB AMI” web page. Click on the <strong>Continue</strong> button to proceed.</li> <li>Accept the self-signed SSL certificate. (How to do this is browser-dependent.)</li> <li>Choose an AMI password.</li> <li>Wait for the instance to initialize.</li> <li>Log in using the username <code class=\"highlighter-rouge\">rethinkdb</code> and the password you chose in step 7.</li> </ol> <p><img src=\"https://rethinkdb.com/assets/images/docs/aws/ami_setup.png\" alt=\"Shard with the web interface\"></p> <blockquote class=\"infobox \">\n<p><strong>Note</strong>: RethinkDB uses a self-signed certificate to encrypt your password. You’ll have to accept the self-signed certificate in your browser to access the instance.</p> </blockquote> <h3 id=\"ami-configuration\">AMI configuration</h3> <p>The RethinkDB AMI is preconfigured with the following options:</p> <ul> <li>Ubuntu Server 12.04 LTS</li> <li>RethinkDB server</li> <li>Official RethinkDB client drivers for Python, JavaScript, Java, and Ruby</li> <li>5 GB of free EBS space for your data</li> </ul> <blockquote class=\"infobox \">\n<p><strong>Note</strong>: it is possible to attach more specialized EBS volumes and have RethinkDB store your data on them, but this option is not yet available out of the box. If you manually attach an EBS volume, you can SSH into the instance and edit the configuration file to point RethinkDB to the custom volume. See the <a href=\"../cluster-on-startup/index\">cluster setup instructions</a> for more details.</p> </blockquote> <h2 id=\"instance-administration\">Instance administration</h2> <p>The primary way to administer a RethinkDB AMI is through the web UI. Advanced tasks can be performed with ReQL administration commands, using the Data Explorer interactively or scripting through any RethinkDB driver. Read <a href=\"../administration-tools/index\">Administration tools</a> for more details about scripting administration tasks.</p> <h3 id=\"ssh-access\">SSH access</h3> <p>To connect to your instance over SSH, log in as the user <code class=\"highlighter-rouge\">ubuntu</code>. Use the private key you chose during the installation process and the public hostname of the instance. For example:</p> <pre data-language=\"\">ssh -i rethinkdb.prv -l ubuntu ec2-184-72-203-271.compute-1.amazonaws.com\n</pre>  <h2 id=\"security\">Security</h2> <p>The default security group opens 4 ports:</p> <ul> <li>Port 22 is for SSH. The server uses public key authentication.</li> <li>Port 80 is for HTTP. It is used during the setup process but otherwise redirects to HTTPS.</li> <li>Port 443 is for HTTPS. An Nginx server sits between RethinkDB and the world and provides basic HTTP authentication and secure HTTPS connections for the web UI.</li> <li>Port 28015 is for client driver access. The only form of authentication is a key that is sent in plain text over the network.</li> </ul> <p>To secure your instance more tightly, we recommend that you perform the following steps:</p> <ul> <li> <p><strong>Change the admin user password.</strong></p> <p>Open the RethinkDB Data Explorer in the web UI and execute the following command:</p> <p><code class=\"highlighter-rouge\">js\n  r.db('rethinkdb').table('users').get('admin').update({password: 'newpass'})\n </code></p> <p>Where “newpass” is the new password you want to use.</p> </li> <li> <p><strong>Restrict access to port 28015</strong> to allow only IP addresses or security groups that should have driver access.</p> </li> </ul> <h3 id=\"changing-the-web-ui-password\">Changing the web UI password</h3> <p>To change the password used to access the web UI, log in over SSH and run the following command:</p> <pre data-language=\"\">htpasswd /etc/nginx/htpasswd rethinkdb\n</pre>  <p>The <code class=\"highlighter-rouge\">htpasswd</code> tool will prompt for your new password.</p> <h3 id=\"set-a-user-account-and-password-for-your-application\">Set a user account and password for your application</h3> <p>For details about this, read <a href=\"../permissions-and-accounts/index\">Permissions and user accounts</a>.</p> <h3 id=\"setting-up-vpc-security-groups\">Setting up VPC security groups</h3> <p>For added security, you can isolate a multi-node RethinkDB cluster on AWS using a Virtual Private Cloud security group. The default security group settings for RethinkDB allow anyone to connect to the database’s driver port, but exclude the intracluster port. Follow the steps below to set up your security groups.</p> <ol> <li>Open the <strong>Security Groups</strong> section of the administration console.</li> <li>Select the security group that your instances belong to and open the <strong>Inbound</strong> tab in the bottom half of the page.</li> <li>Note the id of the security group. It will start with <code class=\"highlighter-rouge\">sg-</code>.</li> <li>Create a new rule to allow instances to connect to one another: <ul> <li>Select <strong>Custom TCP rule</strong>.</li> <li>Enter “29015” as the port range.</li> <li>As the <strong>Source</strong>, enter the id of the security group (see step 3).</li> <li>Click on <strong>Add Rule</strong>, and <strong>Apply rule changes</strong>.</li> </ul> </li> </ol> <p>After the rule has been applied, connect to your instances over SSH and change the RethinkDB configuration file (<code class=\"highlighter-rouge\">/etc/rethinkdb/interfaces.d/default.conf</code>) to join them.</p> <pre data-language=\"\">bind=all\njoin=&lt;IP address&gt;:29015\n</pre>  <p>If you have changed the intracluster port from 29015, use the new number. For more guidance, see RethinkDB’s <a href=\"../cluster-on-startup/index\">cluster setup instructions</a> and Amazon’s documentation on <a href=\"http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html\">Security Groups for your VPC</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/paas/\" class=\"_attribution-link\">https://rethinkdb.com/docs/paas/</a>\n  </p>\n</div>\n","docs/deployment-tools/index":"<h1 class=\"title\">Deployment Tools</h1> <blockquote class=\"infobox \">\n<p><strong>Add your project:</strong> Have you written a cool library or tool for RethinkDB? Shoot us an email at <a href=\"mailto:info@rethinkdb.com\">info@rethinkdb.com</a>.</p> </blockquote> <h2 id=\"deployment-tools\">Deployment tools</h2> <ul> <li> <p><a href=\"https://github.com/RyanAmos/rethinkdb-vagrant\">Rethinkdb-vagrant</a> by <a href=\"https://github.com/RyanAmos\">@RyanAmos</a><br> Lets you install RethinkDB using Vagrant.</p> </li> <li> <p><a href=\"https://github.com/tmont/puppet-rethinkdb\">puppet-rethinkdb</a> by <a href=\"https://github.com/tmont\">@tmont</a><br> A Puppet module for RethinkDB.</p> </li> <li> <p><a href=\"https://github.com/AVVSDevelopment/chef-rethinkdb\">chef-rethinkdb</a> by <a href=\"https://github.com/AVVSDevelopment\">@AVVSDevelopment</a><br> A RethinkDB cookbook for Chef deployment.</p> </li> <li> <p><a href=\"https://github.com/mies/box-rethinkdb\">box-rethinkdb</a><br> Wercker box for RethinkDB, by <a href=\"https://github.com/mies\">@mies</a>.</p> </li> <li> <p><a href=\"https://github.com/pires/rethinkdb-coreos-cluster\">rethinkdb-coreos-cluster</a><br> RethinkDB clustering with CoreOS, etcd2 and Docker, by <a href=\"https://github.com/pires\">@pires</a>.</p> </li> </ul> <h2 id=\"docker-images\">Docker images</h2> <blockquote class=\"infobox \">\n<p>Docker provides an <a href=\"https://registry.hub.docker.com/_/rethinkdb/\">official RethinkDB repository</a> on the Docker Hub. (Read <a href=\"../install/index\">Installing RethinkDB</a> for more details.) This list highlights community-provided Docker images and tools.</p> </blockquote> <ul> <li> <p><a href=\"https://github.com/grzesiek/docker-rethinkdb\">Docker-rethinkdb</a> by <a href=\"https://github.com/grzesiek\">@grzesiek</a><br> A simple Docker image for RethinkDB.</p> </li> <li> <p><a href=\"http://dockerfile.github.io/#/rethinkdb\">Dockerfile/rethinkdb</a> by <a href=\"https://github.com/pilwon\">@pilwon</a><br> Trusted Docker build and instructions for deploying a RethinkDB cluster.</p> </li> <li> <p><a href=\"https://github.com/kstaken/dockerfile-examples\">Dockerfiles-examples</a> by <a href=\"https://github.com/kstaken\">@kstaken</a><br> Includes scripts for building an image for Docker with RethinkDB (and other things).</p> </li> <li> <p><a href=\"https://github.com/crosbymichael/docker-cookbooks\">Docker-cookbooks</a> by <a href=\"https://github.com/crosbymichael\">@crosbymichael</a><br> A collection of Dockerfiles and configurations to build images for RethinkDB.</p> </li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/deployment-tools/\" class=\"_attribution-link\">https://rethinkdb.com/docs/deployment-tools/</a>\n  </p>\n</div>\n","docs/crashes/index":"<h1 class=\"title\">Crash recovery</h1> <p>While we strive to give you perfect uptime, like other complex applications RethinkDB is not immune to crashing. Here are some tips on how to recover from a crash, how to submit a bug report, and how to maximize availability.</p> <h2 id=\"what-to-do-after-a-crash\">What to do after a crash</h2> <h3 id=\"check-if-you-ran-out-of-memory\">Check if you ran out of memory</h3> <p>You may be able to check if the kernel’s out-of-memory killer is responsible for the crash by checking the system message buffer:</p> <pre data-language=\"\">sudo dmesg | grep oom\n</pre>  <p>This may show you messages similar to this:</p> <pre data-language=\"\">rethinkdb invoked oom-killer: gfp_mask=0x201da, order=0, oom_adj=0, oom_score_adj=0\n [&lt;ffffffff8111d272&gt;] ? oom_kill_process+0x82/0x2a0\n</pre>  <p>If this is the case, you may be able to avoid crashes by changing RethinkDB’s cache size. For information on in-memory caches, how to check their current size, and how to change them, read <a href=\"../memory-usage/index\">Understanding RethinkDB memory requirements</a>.</p> <h3 id=\"check-the-log\">Check the log</h3> <p>The log file’s location is dependent on your system configuration and how you started RethinkDB.</p> <ul> <li> <p>If you started <code class=\"highlighter-rouge\">rethinkdb</code> on a terminal rather than from a startup script, it will log to the <code class=\"highlighter-rouge\">rethinkdb_data</code> directory. By default it will write to <code class=\"highlighter-rouge\">log_file</code> but this may be overridden with the <code class=\"highlighter-rouge\">--log-file</code> startup option.</p> </li> <li> <p>If your Linux system uses <code class=\"highlighter-rouge\">systemd</code>, use <code class=\"highlighter-rouge\">journalctl</code> to view the log:</p> <p><code class=\"highlighter-rouge\">journalctl -u rethinkdb@&lt;instance&gt;</code></p> </li> <li> <p>If you installed RethinkDB through a package manager on a system that does <em>not</em> use <code class=\"highlighter-rouge\">systemd</code>, then you may have to check where it’s configured to log. It’s very likely this will be in the <code class=\"highlighter-rouge\">/var/log/</code> directory (i.e., <code class=\"highlighter-rouge\">/var/log/rethinkdb</code>).</p> </li> </ul> <p>The log may give you information as to what caused the crash.</p> <h3 id=\"community-support\">Community support</h3> <p>If it doesn’t appear to be a memory issue and the log provides no clue, you can try asking for support on our official IRC channel, <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">#rethinkdb on freenode</a> or our <a href=\"http://groups.google.com/group/rethinkdb\">Google Group</a>. If your problem is a crash that we’ve seen before—or our users have—this may get you a quick answer.</p> <h2 id=\"how-to-submit-a-bug-report\">How to submit a bug report</h2> <p>We use Github for issue tracking: <a href=\"https://github.com/rethinkdb/rethinkdb/issues\">https://github.com/rethinkdb/rethinkdb/issues</a>. If you want to report a suspected bug in RethinkDB, open an issue there.</p> <p>The most important things for you to provide for us are:</p> <ul> <li> <p>The full output from <code class=\"highlighter-rouge\">rethinkdb --version</code>, something like:</p> <p><code class=\"highlighter-rouge\">\n  rethinkdb 1.13.3 (CLANG 5.1 (clang-503.0.40))\n </code></p> </li> <li> <p>The full output from <code class=\"highlighter-rouge\">uname -a</code>, something like:</p> <p><code class=\"highlighter-rouge\">\n  Darwin rethink.local 13.3.0 Darwin Kernel Version 13.3.0:\n  Tue Jun  3 21:27:35 PDT 2014; root:xnu-2422.110.17~1/RELEASE_X86_64 x86_64\n </code></p> </li> <li> <p>The backtrace from the crash, if it’s available in the logs.</p> </li> </ul> <p>Other things that might be helpful to us, if you have them:</p> <ul> <li>A dump of the <a href=\"../system-tables/index\">system tables</a> (see below)</li> <li>A dump of the <code class=\"highlighter-rouge\">rethinkdb._debug_table_status</code> table (a “hidden” table in the <code class=\"highlighter-rouge\">rethinkdb</code> system database)</li> <li>The core file, if it was dumped on crash</li> <li>The data files if RethinkDB cannot restart¹</li> <li>The output of <code class=\"highlighter-rouge\">rethinkdb</code> on startup</li> <li>Your cluster configuration (number of servers, basic network topology, etc.)</li> <li>Information about the server: <ul> <li>How much memory it has</li> <li>The file system it’s using</li> <li>Are you running RethinkDB in a VM?</li> <li>Other unusual configuration details</li> </ul> </li> <li>Is the crash reproducible, and if so, under what conditions?</li> </ul> <h2 id=\"dumping-the-system-tables\">Dumping the system tables</h2> <p>In the Data Explorer, the following command will output the contents of all the configuration/status tables and the most recent 50 lines of the <code class=\"highlighter-rouge\">logs</code> table:</p> <pre data-language=\"\">r.expr([\"current_issues\", \"jobs\", \"stats\", \"server_config\", \"server_status\",\n\"table_config\", \"table_status\", \"db_config\", \"cluster_config\"]).map(\n    [r.row, r.db('rethinkdb').table(r.row).coerceTo('array')]\n).coerceTo('object').merge(\n    {logs: r.db('rethinkdb').table('logs').limit(50).coerceTo('array')}\n)\n</pre>  <h2 id=\"setting-up-high-availability\">Setting up high availability</h2> <p>RethinkDB supports replication of data: every table in a database can be replicated as many times as you have servers in a cluster. Setting up replication is a simple operation with the web interface or the command line tool. For details, read <a href=\"../sharding-and-replication/index\">Sharding and replication</a>.</p> <p>RethinkDB does not have fully automatic failover (yet), but if a server in a cluster crashes it can be manually removed from the cluster. In most cases, RethinkDB will recover from such a situation automatically. For information on this process, read <a href=\"../failover/index\">Failover</a>.</p>  <ol> <li>We’ll sign an NDA if necessary, and can set up an FTP server for you to transfer the file to if it’s large.</li> </ol><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/crashes/\" class=\"_attribution-link\">https://rethinkdb.com/docs/crashes/</a>\n  </p>\n</div>\n","docs/memory-usage/index":"<h1 class=\"title\">Understanding RethinkDB memory requirements</h1> <p>In this guide we look at what RethinkDB uses memory for, how we can estimate the amount needed, and how to configure the size of RethinkDB’s page cache.</p> <p>There are three major sources of memory use in RethinkDB:</p> <ol> <li>\n<em>Running queries and background processes,</em> such as backfilling between nodes in a cluster.</li> <li><em>The page cache.</em></li> <li>\n<em>Internal metadata</em> proportional to the size of the database.</li> </ol> <p>In the case of the first source, every database process uses memory to store intermediate results and to maintain internal state. The memory used varies significantly depending on the type of queries run and the size of documents stored in the database. As a rough estimate, expect each query and background process to use 1–20 MB of memory.</p> <p>We’ll go over the other two sources in more detail.</p> <h2 id=\"cache-size\">Cache size</h2> <p>RethinkDB’s page cache keeps recently used data in memory to minimize disk access. By default, RethinkDB automatically configures the cache size limit according to the formula <code class=\"highlighter-rouge\">(available_mem - 1024 MB) / 2</code>. <code class=\"highlighter-rouge\">available_mem</code> is the amount of available memory at the time RethinkDB starts, including memory that can be freed up by the operating system if needed (such as the operating system’s disk cache). If there is less than 1224 MB of memory available on the system, a minimum cache size limit of 100 MB is used. You can find the actual size limit used by an instance of RethinkDB in its log.</p> <p><img src=\"https://rethinkdb.com/assets/images/docs/finding-cache-size.png\" alt=\"Finding cache size\"></p> <p>The automatically chosen cache size ensures a reliable operation in most scenarios, but the cache size can be tuned manually to accommodate increased memory usage by other processes or to maximize query performance. A larger cache improves the database’s performance, but you must consider other sources of memory consumption to avoid out of memory conditions.</p> <p>Depending on how you start the RethinkDB server process, there are two ways to set the cache size.</p> <ul> <li> <p>When starting RethinkDB from the command line, the cache size limit is set through the <code class=\"highlighter-rouge\">--cache-size &lt;limit in MB&gt;</code> argument:</p> <p><code class=\"highlighter-rouge\">$ rethinkdb --cache-size 2048</code></p> </li> <li> <p>If you are using configuration files to configure RethinkDB (e.g. <code class=\"highlighter-rouge\">/etc/rethinkdb/instances.d/...</code>), add <code class=\"highlighter-rouge\">cache-size=&lt;limit in MB&gt;</code> to the configuration file to set the size limit manually.</p> </li> </ul> <h2 id=\"internal-metadata\">Internal metadata</h2> <p>RethinkDB can handle databases much larger than the amount of main memory available on a server. However, some internal metadata is always kept in memory to guarantee fast access times. Every table has an overhead of 8 MB per server.</p> <p>RethinkDB organizes data into blocks. Blocks in RethinkDB are sized in steps of 512 bytes up to a maximum of 4 KB. While the content of a block itself can be cleared from main memory to free space, metadata of approximately 10–26 bytes per block is always kept in memory. Thus, this memory overhead is directly proportional to the number of blocks that a given data set requires. (This is in addition to the 8 MB overhead mentioned above.)</p> <p>To understand the number of blocks used by a given data set, we must first distinguish two different modes of how a document can be stored.</p> <ul> <li>Small documents of no more than 250 bytes (including encoding overhead) are stored “in line” in the primary index tree. Many such documents can share a single 4 KB block.</li> <li>Larger documents of more than 250 bytes are stored in blocks of their own. Documents up to 4 KB use a single block; larger documents are split across multiple blocks as needed.</li> </ul> <p>Additional blocks are allocated to store index trees for secondary indexes as well as for the primary index of each table. Roughly one block is used per 30 documents for each index; the exact number depends on the sizes of the index keys.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/memory-usage/\" class=\"_attribution-link\">https://rethinkdb.com/docs/memory-usage/</a>\n  </p>\n</div>\n","docs/troubleshooting/index":"<h1 class=\"title\">Troubleshooting common RethinkDB problems</h1> <h3 id=\"how-can-i-get-a-dump-of-the-rethinkdb-system-tables\">How can I get a dump of the RethinkDB system tables?</h3> <p>This can be useful for diagnostic purposes, as well as for filing bug reports. The easiest way to do this is with ReQL administration commands. Any individual table can be examined with <code class=\"highlighter-rouge\">r.db('rethinkdb').table(&lt;tablename&gt;)</code>.</p> <p>The following command will output the contents of <em>all</em> the configuration/status tables as well as the most recent 50 lines of the <code class=\"highlighter-rouge\">logs</code> table:</p> <pre data-language=\"\">r.expr([\"current_issues\", \"jobs\", \"stats\", \"server_config\", \"server_status\",\n\"table_config\", \"table_status\", \"db_config\", \"cluster_config\"]).map(\n    [r.row, r.db('rethinkdb').table(r.row).coerceTo('array')]\n).coerceTo('object').merge(\n    {logs: r.db('rethinkdb').table('logs').limit(50).coerceTo('array')}\n)\n</pre>  <p>(That command is suitable for running in the Data Explorer, but can be easily adapted into other languages.)</p> <h3 id=\"i-get-a-reqlresourcelimiterror-array-over-size-limit-100000-when-trying-to-order-a-table\">I get a “ReqlResourceLimitError: Array over size limit 100000” when trying to order a table</h3> <p>Ordering without an index requires the server to load the whole sequence in an array, which is limited by default to 100,000 documents. You can use the <code class=\"highlighter-rouge\">arrayLimit</code> option to <a href=\"https://rethinkdb.com/api/javascript/run/\">run</a> to temporarily raise this limit. However, a more efficient option is to use an index. See the documentation for <a href=\"https://rethinkdb.com/api/javascript/order_by/\">orderBy</a> for more information.</p> <h3 id=\"my-insert-queries-are-slow-how-can-i-speed-them-up\">My insert queries are slow. How can I speed them up?</h3> <p>RethinkDB uses a safe default configuration for write acknowledgement. Each write is committed to disk before the server acknowledges it to the client. If you’re running a single thread that inserts documents into RethinkDB in a loop, each insert must wait for the server acknowledgement before proceeding to the next one. This can significantly slow down the overall throughput.</p> <p>This behavior is similar to any other safe database system. Below is a number of steps you can take to speed up insert performance in RethinkDB. Most of these guidelines will also apply to other database systems.</p> <p><strong>Increase concurrency.</strong> Instead of having a single thread inserting data in a loop, create multiple threads with multiple connections. This will allow parallelization of insert queries without spending most of the time waiting on disk acknowledgement.</p> <p><strong>Batch writes.</strong> Instead of doing single writes in a loop, group writes together. This can result in significant increases in throughput. Instead of doing multiple queries like this:</p> <pre data-language=\"\">r.db(\"foo\").table(\"bar\").insert(document_1).run()\nr.db(\"foo\").table(\"bar\").insert(document_2).run()\nr.db(\"foo\").table(\"bar\").insert(document_3).run()\n</pre>  <p>Combine them into a single query:</p> <pre data-language=\"\">r.db(\"foo\").table(\"bar\").insert([document_1, document_2, document_3]).run()\n</pre>  <p>RethinkDB operates at peak performance when the batch size is around two hundred documents.</p> <p><strong>Consider using soft durability mode.</strong> In soft durability mode RethinkDB will acknowledge the write immediately after receiving it, but before the write has been committed to disk. The server will use main memory to absorb the write, and will flush new data to disk in the background.</p> <p>This mode is <strong>not as safe</strong> as the default hard durability mode. If you’re writing using soft durability, a few seconds worth of data might be lost in case of power failure.</p> <p>You can insert data in soft durability mode as follows:</p> <pre data-language=\"\">r.db(\"foo\").table(\"bar\").insert(document).run(durability=\"soft\")\n</pre>  <blockquote class=\"infobox \">\n<p><strong>Note:</strong> while some data may be lost in case of power failure in soft durability mode, the RethinkDB database will not get corrupted.</p> </blockquote> <p><strong>Consider using <code class=\"highlighter-rouge\">noreply</code> mode.</strong> In this mode, the client driver will not wait for the server acknowledgement of the query before moving on to the next query. This mode is even less safe than the soft durability mode, but can result in the highest performance improvement. You can run a command in a <code class=\"highlighter-rouge\">noreply</code> mode as follows:</p> <pre data-language=\"\">r.db(\"foo\").table(\"bar\").insert(document).run(noreply=True)\n</pre>  <p>You can also combine soft durability and <code class=\"highlighter-rouge\">noreply</code> for the highest performance:</p> <pre data-language=\"\">r.db(\"foo\").table(\"bar\").insert(document).run(durability=\"soft\", noreply=True)\n</pre>  <h3 id=\"how-can-i-order-the-output-of-group\">How can I order the output of <code class=\"highlighter-rouge\">group</code>?</h3> <p>Commands chained after <code class=\"highlighter-rouge\">group</code> operate on each group separately. If you want to operate on all the groups at once (e.g. to order them), you need to call <a href=\"https://rethinkdb.com/api/python/ungroup/\"><strong>ungroup</strong></a> before doing so.</p> <h3 id=\"what-does-received-invalid-clustering-header-mean\">What does ‘received invalid clustering header’ mean?</h3> <p>RethinkDB uses three ports to operate—the HTTP web UI port, the client drivers port, and the intracluster traffic port. You can connect the browser to the web UI port to administer the cluster right from your browser, and connect the client drivers to the client driver port to run queries from your application. If you’re running a cluster, different RethinkDB nodes communicate with each other via the intracluster traffic port.</p> <p>The message <code class=\"highlighter-rouge\">received invalid clustering header</code> means there is a port mismatch, and something is connecting to the wrong port. For example, it’s common to get this message if you accidentally point the browser or connect the client drivers to the intracluster traffic port.</p> <h3 id=\"does-the-web-ui-support-my-browser\">Does the web UI support my browser?</h3> <p>The following browsers are supported and known to work with the web UI:</p> <ul> <li>Chrome 9 or higher</li> <li>Firefox 15 or higher</li> <li>Safari 6.02 or higher</li> <li>Opera 1.62 or higher</li> </ul> <blockquote class=\"infobox \">\n<p>The web UI requires <code class=\"highlighter-rouge\">DataView</code> and <code class=\"highlighter-rouge\">Uint8Array</code> JavaScript features to be supported by your browser.</p> </blockquote> <h3 id=\"which-versions-of-nodejs-are-supported\">Which versions of Node.js are supported?</h3> <p>The JavaScript driver currently works with Node.js versions 0.10.0 and above. You can check your node version as follows:</p> <p><code class=\"highlighter-rouge\">node --version</code></p> <p>You can upgrade your version of Node.js via <code class=\"highlighter-rouge\">npm</code>:</p> <p><code class=\"highlighter-rouge\">sudo npm install -g n</code></p> <p>If you’re trying to run the RethinkDB JavaScript driver on an older version of Node.js, you might get an error similar to this one:</p> <pre data-language=\"\">/home/user/rethinkdb.js:13727\nreturn buffer.slice(offset, end);\n             ^\nTypeError: Object #&lt;ArrayBuffer&gt; has no method 'slice'\nat bufferSlice (/home/user/rethinkdb.js:13727:17)\nat Socket.TcpConnection.rawSocket.once.handshake_callback (/home/user/rethinkdb.js:13552:26)\n</pre>  <h3 id=\"i-get-back-a-connection-in-my-callback-with-the-node-driver\">I get back a connection in my callback with the Node driver</h3> <p>Many people have been reporting that they get back a connection object when they run a query, the object being:</p> <pre data-language=\"\">{\n    _conn: {\n        host: 'localhost',\n        port: 28015,\n        db: undefined,\n        authKey: '',\n        timeout: 20,\n        outstandingCallbacks: {},\n        nextToken: 2,\n        open: true,\n        buffer: &lt;Buffer 04 00 00 00 08 02 10 01&gt;,\n        _events: {},\n        rawSocket: { ... }\n    },\n    _token: 1,\n    _chunks: [],\n    _endFlag: true,\n    _contFlag: true,\n    _cont: null,\n    _cbQueue: []\n}\n</pre>  <p>This object is not a connection, but a cursor. To retrieve the results, you can call <code class=\"highlighter-rouge\">next</code>, <code class=\"highlighter-rouge\">each</code> or <code class=\"highlighter-rouge\">toArray</code> on this object.</p> <p>For example you can retrieve all the results and put them in an array with <code class=\"highlighter-rouge\">toArray</code>:</p> <pre data-language=\"\">r.table(\"test\").run( conn, function(error, cursor) {\n    cursor.toArray( function(error, results) {\n        console.log(results) // results is an array of documents\n    })\n})\n</pre>  <h3 id=\"rethinkdb-is-running-out-of-memory\">RethinkDB is running out of memory</h3> <p>You may need to adjust RethinkDB’s page cache size, using the <code class=\"highlighter-rouge\">--cache-size</code> argument or configuration file option. Read “<a href=\"../memory-usage/index\">Understanding RethinkDB memory requirements</a>” for a more detailed explanation of how RethinkDB uses memory and how to tune its performance.</p> <h3 id=\"i-get-incorrect-results-when-i-pass-functions-with-iffor-statements-to-reql\">I get incorrect results when I pass functions with if/for statements to ReQL</h3> <p>When you pass functions to ReQL, your language’s driver serializes those functions into ReQL lambda functions that are run on the server, not in your client language. (See <a href=\"https://rethinkdb.com/blog/lambda-functions/\">All about lambda functions in RethinkDB queries</a> for more details.) A consequence of this is that native language constructs like <code class=\"highlighter-rouge\">if</code> and <code class=\"highlighter-rouge\">for</code> will not produce the expected result when their conditions involve ReQL commands. While they may not cause errors, they will be executed on the client side before the function is compiled for ReQL, and thus give an incorrect result. Instead, you must use equivalent ReQL control functions such as <a href=\"https://rethinkdb.com/api/javascript/branch/\">branch</a> and <a href=\"https://rethinkdb.com/api/javascript/for_each/\">forEach</a>. Here’s an example in Python from the <a href=\"../introduction-to-reql/index\">Introduction to ReQL</a> document:</p> <pre data-language=\"\"># WRONG: Get all users older than 30 using the `if` statement\nr.table('users').filter(lambda user:\n    True if user['age'] &gt; 30 else False\n).run(conn)\n\n# RIGHT: Get all users older than 30 using the `r.branch` command\nr.table('users').filter(lambda user:\n    r.branch(user['age'] &gt; 30, True, False)\n).run(conn)\n</pre>  <p>And an equivalent example in JavaScript:</p> <pre data-language=\"\">// WRONG: Get all users older than 30 using the ternary operator\nr.table('users').filter(function(user) {\n    return (r.row('age').gt(30) ? true : false);\n}).run(conn, callback)\n\n// RIGHT: Get all users older than 30 using the `r.branch` command\nr.table('users').filter(function(user) {\n    r.branch(user('age').gt(30), true, false)\n}).run(conn, callback)\n</pre>  <p>(Note we must use <code class=\"highlighter-rouge\">gt</code> instead of the native <code class=\"highlighter-rouge\">&gt;</code> operator in JavaScript, for the same reason. In Python the <code class=\"highlighter-rouge\">&gt;</code> operator is <a href=\"https://docs.python.org/2/reference/datamodel.html#special-method-names\">overloaded</a> to be translated to ReQL’s <code class=\"highlighter-rouge\">gt</code> command, a trick that is not possible in JavaScript.)</p> <h3 id=\"how-do-i-specify-an-external-canonical-ip-address-of-a-rethinkdb-node\">How do I specify an external canonical IP address of a RethinkDB node?</h3> <p>When a RethinkDB node starts, it will broadcast its “canonical” IP address, the address other nodes should use to connect to it. By default, the canonical address is the server’s primary IP address. However, if this address is an internal IP address that isn’t reachable by other nodes (for example, the nodes are on different networks), the nodes will not be able to reach one another. You may receive an error message such as:</p> <pre data-language=\"\">error: received inconsistent routing information (wrong address) from xxx.xxx.xxx.xxx (expected_address = peer_address{ips=[xxx.xxx.xxx.xxx], port=29015}, other_address = peer_address{ips=[xxx.xxx.xxx.xxx], port=29015}), closing connection\n</pre>  <p>To solve this, specify the canonical address explicitly by using the <code class=\"highlighter-rouge\">--canonical-address</code> argument.</p> <pre data-language=\"\">rethinkdb --canonical-address &lt;external IP&gt;\n</pre>  <p>This may also be specified in the <a href=\"http://rethinkdb.com/docs/cluster-on-startup/\">config file</a>.</p> <h3 id=\"my-secondary-index-is-outdated\">My secondary index is outdated</h3> <p>You may receive a warning message about secondary indexes on startup being “outdated” when you upgrade RethinkDB versions.</p> <pre data-language=\"\">warn: Namespace &lt;x&gt; contains these outdated indexes which should be recreated:\n&lt;index names&gt;\n</pre>  <p>(This may happen, for instance, between v1.13 and v1.14, when the internal format of secondary indexes changed.) Outdated indexes can still be used—they don’t affect availability. However, you should rebuild your index before updating to the next version of RethinkDB.</p> <p>You may rebuild indexes with the <code class=\"highlighter-rouge\">rethinkdb</code> command line utility:</p> <pre data-language=\"\">rethinkdb index-rebuild [-c HOST:PORT] [-r (DB|DB.TABLE)] [-n CONCURRENT_REBUILDS]\n</pre>  <p>The <code class=\"highlighter-rouge\">-c</code> and <code class=\"highlighter-rouge\">-r</code> options are similar to other <code class=\"highlighter-rouge\">rethinkdb</code> options, specifying the cluster host and port (defaulting to <code class=\"highlighter-rouge\">localhost:28015</code>) and either a database or a table to rebuild. The <code class=\"highlighter-rouge\">-n</code> option specifies the number of rebuilds that will be performed concurrently (defaulting to 1).</p> <p>You may also rebuild indexes manually in ReQL:</p> <ul> <li>Use <a href=\"https://rethinkdb.com/api/python/index_status/\">index_status</a> to retrieve a binary representation of the existing secondary index (whether it is simple, compound, multi, or based on an expression)</li> <li>Create a new index using <a href=\"https://rethinkdb.com/api/python/index_create/\">index_create</a>\n</li> <li>Rename the new index to the old index’s name with <a href=\"https://rethinkdb.com/api/python/index_rename\">index_rename</a>.</li> </ul> <p>A simple example in Python:</p> <pre data-language=\"\">old_index = r.table('posts').index_status('old_index').nth(0)['function'].run(conn)\nr.table('posts').index_create('new_index', old_index).run(conn)\nr.table('posts').index_wait('new_index').run(conn)\nr.table('posts').index_rename('new_index', 'old_index', overwrite=True).run(conn)\n</pre>  <p>(The same example can be found in <code class=\"highlighter-rouge\">index_create</code> for both <a href=\"https://rethinkdb.com/api/ruby/index_create\">Ruby</a> and <a href=\"https://rethinkdb.com/api/javascript/index_create\">JavaScript</a>.)</p> <h3 id=\"how-do-i-store-a-ruby-datetime-object-in-rethinkdb\">How do I store a Ruby DateTime object in RethinkDB?</h3> <p>The short answer: you can’t. Use <code class=\"highlighter-rouge\">Time</code> objects instead.</p> <p>The slightly longer answer: there’s only one native <code class=\"highlighter-rouge\">time</code> data type in RethinkDB. When a language supports more than one kind of date/time object, we think it’s better to explicitly support one and only one of them in the client driver to avoid confusion. Otherwise, you might insert a <code class=\"highlighter-rouge\">DateTime</code> object and get a <code class=\"highlighter-rouge\">Time</code> object back.</p> <p>You can use Ruby’s <code class=\"highlighter-rouge\">DateTime.to_time</code> and <code class=\"highlighter-rouge\">Time.to_datetime</code> methods to easily convert between one and the other.</p> <h3 id=\"filters-with-or-return-incorrectunexpected-results\">Filters with <code class=\"highlighter-rouge\">or</code> return incorrect/unexpected results</h3> <p>You might want to use <code class=\"highlighter-rouge\">filter</code> to return documents that have one of two (or more) optional fields set, such as the following:</p> <pre data-language=\"\">r.table('posts').filter(\n    r.row('category').eq('article').or(r.row('genre').eq('mystery'))\n).run(conn, callback);\n</pre>  <p>However, if any document in the <code class=\"highlighter-rouge\">posts</code> table above lacks a <code class=\"highlighter-rouge\">category</code> field, it won’t be included in the result set even if it has a <code class=\"highlighter-rouge\">genre</code> field whose value is <code class=\"highlighter-rouge\">'mystery'</code>. The problem isn’t the <code class=\"highlighter-rouge\">or</code> command; it’s that the invocation of <code class=\"highlighter-rouge\">r.row('category')</code> on a document without that field returns an error, and the rest of the filter predicate isn’t evaluated.</p> <p>The solution is to add a <code class=\"highlighter-rouge\">default</code> to the <code class=\"highlighter-rouge\">row</code> command that always evaluates to something other than what you’re testing for, so it will return <code class=\"highlighter-rouge\">false</code> if the field doesn’t exist:</p> <pre data-language=\"\">r.table('posts').filter(\n    r.row('category').default('foo').eq('article').\n    or(r.row('genre').default('foo').eq('mystery'))\n).run(conn, callback);\n</pre>  <h3 id=\"nesting-depth-limit-exceeded-error\">“Nesting depth limit exceeded” error</h3> <p>Typically, this indicates that a JSON object with subdocuments is too deeply nested:</p> <pre data-language=\"\">{ \"level\": 1,\n  \"data\": {\n    \"level\": 2,\n    \"data\": {\n      \"level\": 3,\n      \"data\": {\n        \"level\": 4\n      }\n    }\n  }\n}\n</pre>  <p>ReQL’s nesting depth is limited to 20 levels. This can be changed with the undocumented <code class=\"highlighter-rouge\">nestingDepth</code> (or <code class=\"highlighter-rouge\">nesting_depth</code>) option to <code class=\"highlighter-rouge\">r.expr()</code>, but before using that, consider whether the document can be reorganized to avoid the error.</p> <p>It’s also possible for this error to be caused by a circular reference, where a document inadvertently contains itself:</p> <pre data-language=\"\">user1 = { id: 1, name: 'Bob' };\nuser2 = { id: 2, name: 'Agatha' };\nuser1['friends'] = [ user1, user2 ];\n</pre>  <p>Trying to access <code class=\"highlighter-rouge\">user1</code> in ReQL will cause a nesting depth error.</p> <p>Depending on the driver, this error may also appear as “Maximum expression depth exceeded.”</p> <h3 id=\"rqltzinfo-object-is-not-json-serializable-error\">“RqlTzinfo object is not JSON serializable” error</h3> <p>If you try to serialize a document containing a ReQL time zone object using Python’s <code class=\"highlighter-rouge\">json</code> library, you may receive this error. Solve this by passing the <code class=\"highlighter-rouge\">time_format=\"raw\"</code> option to <code class=\"highlighter-rouge\">run</code>:</p> <pre data-language=\"\">import json\ntoday = r.expr(datetime.datetime.now(timezone('US/Pacific'))).run(conn,\n    time_format=\"raw\")\njson.dumps(today)\n\n'{\"timezone\": \"-07:00\", \"$reql_type$\": \"TIME\", \"epoch_time\": 1433368112.289}'\n</pre>  <h3 id=\"cannot-use-rrow-in-nested-queries-error\">“Cannot use r.row in nested queries” error</h3> <p>The JavaScript and Python drivers support a convenience command, <code class=\"highlighter-rouge\">row()</code>, which simply returns the currently selected document for use with other ReQL functions in the query. However, <code class=\"highlighter-rouge\">row</code> won’t work within nested queries. The solution to this error is to rewrite the <code class=\"highlighter-rouge\">row</code> clause as an anonymous function. So the following:</p> <pre data-language=\"\">r.table('users').filter(\n    r.row['name'] == r.table('prizes').get('winner')\n).run(conn)\n</pre>  <p>Can be rewritten with this function instead:</p> <pre data-language=\"\">r.table('users').filter(\n    lambda doc: doc['name'] == r.table('prizes').get('winner')\n).run(conn)\n</pre>  <p>Any query, nested or otherwise, can be written with an anonymous function instead of <code class=\"highlighter-rouge\">row</code>. (The official Ruby and Java drivers don’t include <code class=\"highlighter-rouge\">row</code> at all.)</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/troubleshooting/\" class=\"_attribution-link\">https://rethinkdb.com/docs/troubleshooting/</a>\n  </p>\n</div>\n","docs/elasticsearch/index":"<h1 class=\"title\">Full-text search with Elasticsearch</h1> <blockquote class=\"infobox infobox-alert\">\n<p><strong>The Elasticsearch River plugin is not compatible with RethinkDB 2.2 and higher.</strong> We’ll be revisiting this article to update it with the new official Java driver and the <a href=\"https://github.com/rethinkdb/logstash-input-rethinkdb\">RethinkDB Logstash input plugin</a> soon.</p> </blockquote> <p><strong>Q</strong>: What’s the best way to perform <a href=\"http://en.wikipedia.org/wiki/Full_text_search\">full-text searches</a> with RethinkDB?<br> <strong>A</strong>: Use the <a href=\"https://github.com/rethinkdb/elasticsearch-river-rethinkdb\">Elasticsearch River for RethinkDB</a>.</p> <p><strong>Before you start</strong></p> <ul> <li>Ensure you have <a href=\"../install/index\">RethinkDB installed</a> for your platform.</li> <li>Have <a href=\"http://www.elasticsearch.org/overview/elkdownloads/\">Elasticsearch 1.3</a> installed, running on <a href=\"http://www.oracle.com/technetwork/java/javase/downloads/index.html\">Java 8</a>.</li> </ul> <h2 id=\"what-elasticsearch-does\">What Elasticsearch does</h2> <p><a href=\"http://www.elasticsearch.org\">Elasticsearch</a> is a database that stores documents in a crafty way that makes it fast to search large fields of pure text. For instance, it indexes words in different ways depending on how frequent they are in your overall data. It doesn’t waste time checking <a href=\"http://www.elasticsearch.org/blog/stop-stopping-stop-words-a-look-at-common-terms-query/\">common words</a> like “is” and “to” when returning results unless they actually make a difference. It also performs <a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/guide/current/controlling-stemming.html\">stemming</a>, so that a search for “looked” will return results containing the words “looks” and “looking.”</p> <p>It also returns results ordered from most relevant to least, not worrying about small differences. Say you want to ask the question: “What documents best match the phrase ‘Holy guacamole, Batman’?” If the hoped-for guacamole reference isn’t found, a full-text search should reply with documents containing good matches like “Holy smokes, Batman!” and “Holy armadillo, Batman!” In short, you should be using a full-text search database like Elasticsearch if you find yourself writing convoluted regular expressions to grep through big text fields.</p> <p>For those applications that need full-text search, we’ve written a <a href=\"https://github.com/rethinkdb/elasticsearch-river-rethinkdb\">plugin for Elasticsearch</a> (called a river) that keeps RethinkDB synced up with Elasticsearch’s indexes. It uses <a href=\"../changefeeds/java/index\">changefeeds</a> to push new, updated and deleted documents to Elasticsearch in real-time. In addition, it loads existing documents from your RethinkDB tables, so you can get going right away.</p> <blockquote class=\"infobox infobox-alert\">\n<p><strong>Warning!</strong> If the RethinkDB river plugin loses connection with the RethinkDB server it’s pulling data from, there’s no way to guarantee no documents will be lost. This should change in the future with improvements to changefeeds, but currently the only way to be sure is to backfill every time, which will still miss deleted documents.</p> <p>For now, the plugin works best when backfilling or replicating into Elasticsearch is an option, and when it’s all right to risk having some outdated data in the index.</p> </blockquote> <h2 id=\"venturing-into-the-river\">Venturing into the river</h2> <p>To install the river, we’ll use the <code class=\"highlighter-rouge\">plugin</code> program that comes with Elasticsearch. On most platforms the program is named <code class=\"highlighter-rouge\">plugin</code>, but it’s sometimes called <code class=\"highlighter-rouge\">elasticsearch-plugin</code>:</p> <pre data-language=\"\">plugin --install river-rethinkdb --url http://goo.gl/JmMwTf\n</pre>  <p>Depending on how you’ve installed Elasticsearch, you may need to become the elasticsearch user or root to run this command.</p> <p>Now that we’ve installed the plugin, the next step is to actually configure it to connect to our RethinkDB instance. We can do that by talking to Elasticsearch’s REST API. There are three concepts we need to deal with in the API: indexes, types, and documents. A document is the actual data being stored itself and is just JSON. A type contains documents and is similar to a table in RethinkDB. An index contains types and is similar to a database in RethinkDB.</p> <p>To configure our river, we need to create a type called <code class=\"highlighter-rouge\">rethinkdb</code> in the <code class=\"highlighter-rouge\">_river</code> index. Then we need to insert a document with the id <code class=\"highlighter-rouge\">_meta</code> into that type. Elasticsearch lets us create the document and the type in one go with a <code class=\"highlighter-rouge\">PUT</code> request:</p> <pre data-language=\"\">$ curl -XPUT localhost:9200/_river/rethinkdb/_meta -d '\n{\n  \"type\": \"rethinkdb\",\n  \"rethinkdb\": {\n    \"host\": \"localhost\",\n    \"port\": 28015,\n    \"databases\": {\n      \"blog\": {\n        \"posts\": { \"backfill\": true },\n        \"comments\": { \"backfill\": true }\n      }\n    }\n  }\n}\n</pre>  <p>Here we’ve told the river to watch two tables in the <code class=\"highlighter-rouge\">blog</code> database: <code class=\"highlighter-rouge\">posts</code> and <code class=\"highlighter-rouge\">comments</code>. The river should also pull in all existing documents from those tables before it starts watching for updates to the tables. By default, the river inserts documents into a type named after its table, and into an index named after its database. So, in the example above, we’d get a new index named “blog” with two types: “posts” and “comments.”</p> <p>You can also specify explicitly which index and type you want synced documents to go to:</p> <pre data-language=\"\">$ curl -XPUT localhost:9200/_river/rethinkdb/_meta -d '\n{\n  \"type\": \"rethinkdb\",\n  \"rethinkdb\": {\n    \"host\": \"localhost\",\n    \"port\": 28015,\n    \"databases\": {\n      \"blog\": {\n        \"posts\": {\n          \"backfill\": true,\n          \"index\": \"fooBlog\",\n          \"type\": \"barPosts\"\n        }\n      }\n    }\n  }\n}\n</pre>  <p>Once you’ve got the data in your Elasticsearch server, you’re ready to go. Here’s an example of a simple query using the Elasticsearch REST API:</p> <pre data-language=\"\">$ curl localhost:9200/blog/posts/_search?q=body:yams\n</pre>  <p>The results of which might look something like:</p> <pre data-language=\"\">{\n    \"_shards\": {\n        \"failed\": 0,\n        \"successful\": 1,\n        \"total\": 1\n    },\n    \"hits\": {\n        \"hits\": [\n            {\n                \"_id\": \"261f4990-627b-4844-96ed-08b182121c5e\",\n                \"_index\": \"blog\",\n                \"_score\": 1.0,\n                \"_source\": {\n                    \"body\": \"You won't believe these ten amazing ways to cook yams...\",\n                    \"id\": \"261f4990-627b-4844-96ed-08b182121c5e\",\n                    \"title\": \"Thanksgiving dinner blog\",\n                    \"userId\": 10.0\n                },\n                \"_type\": \"posts\"\n            }\n        ],\n        \"max_score\": 1.0,\n        \"total\": 1\n    },\n    \"timed_out\": false,\n    \"took\": 6\n}\n</pre>  <p>For the full details on querying, you’ll want to read up on <a href=\"http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-search.html\">how to query Elasticsearch</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/elasticsearch/\" class=\"_attribution-link\">https://rethinkdb.com/docs/elasticsearch/</a>\n  </p>\n</div>\n","docs/rails/index":"<h1 class=\"title\">Using RethinkDB with Ruby on Rails</h1> <p>It’s easy to use RethinkDB with Ruby on Rails. This guide assumes some familiarity with Rails and ActiveRecord. We’ll be using <a href=\"http://nobrainer.io\">NoBrainer</a>—a RethinkDB ORM, which is an almost drop-in replacement for ActiveRecord.</p> <div class=\"toc\">  <ul id=\"markdown-toc\"> <li><a href=\"#getting-started\" id=\"markdown-toc-getting-started\">Getting started</a></li> <li><a href=\"#models-in-depth\" id=\"markdown-toc-models-in-depth\">Models in depth</a></li> <li><a href=\"#nested-resources-in-views\" id=\"markdown-toc-nested-resources-in-views\">Nested resources in views</a></li> <li><a href=\"#querying\" id=\"markdown-toc-querying\">Querying</a></li> <li><a href=\"#and-thats-it\" id=\"markdown-toc-and-thats-it\">And that’s it!</a></li> </ul> </div> <blockquote class=\"infobox \">\n<p><strong>Before you start</strong></p> <ul> <li>Read the <a href=\"../quickstart/index\">thirty-second quickstart</a>\n</li> <li>Ensure you have <a href=\"../install/index\">RethinkDB installed</a> for your platform.</li> <li>Install <a href=\"http://rubyonrails.org/download/\">Ruby on Rails</a>\n</li> </ul> </blockquote> <h2 id=\"getting-started\">Getting started</h2> <p>First, generate a new Rails application using NoBrainer:</p> <pre data-language=\"\">$ rails new nb_app\n$ cd nb_app\n$ echo \"gem 'nobrainer'\" &gt;&gt; Gemfile\n$ bundle install\n$ rails g nobrainer:install\n</pre>  <p>You can now generate models individually or use the scaffolding mechanism. For example, here’s a scaffold for an Article resource:</p> <pre data-language=\"\">$ rails g scaffold Article title:string text:string tags:array\n</pre>  <p>This yields the following model in <code class=\"highlighter-rouge\">app/models/article.rb</code>:</p> <pre data-language=\"\">class Article\n  include NoBrainer::Document\n  include NoBrainer::Document::Timestamps\n\n  field :title, :type =&gt; String\n  field :text, :type =&gt; String\n  field :tags, :type =&gt; Array\nend\n</pre>  <p>You’re now up and running with RethinkDB and Rails!</p> <h2 id=\"models-in-depth\">Models in depth</h2> <p>Unlike a relational database, RethinkDB doesn’t enforce types, so NoBrainer’s type annotations on the field are validators that are run just before a document is saved to the database. If you don’t want to specify the type for a field, you can use the dummy type <code class=\"highlighter-rouge\">object</code>:</p> <pre data-language=\"\">$ rails g model User name:string:index user_data:object\n</pre>  <p>This allows the <code class=\"highlighter-rouge\">user_data</code> field to contain any legal JSON value, while <code class=\"highlighter-rouge\">name</code> must still be a valid string.</p> <pre data-language=\"\">class User\n  include NoBrainer::Document\n  include NoBrainer::Document::Timestamps\n\n  field :name, :type =&gt; String, :index =&gt; true\n  field :custom_data\nend\n</pre>  <p>The NoBrainer generator automatically includes the <a href=\"http://nobrainer.io/docs/timestamps\">TimeStamps</a> mixin that adds the fields <code class=\"highlighter-rouge\">created_on</code> and <code class=\"highlighter-rouge\">updated_on</code>. You’ll also notice this created a simple secondary index on the <code class=\"highlighter-rouge\">name</code> field. In order to add the index to the database, you can use the Rake task:</p> <pre data-language=\"\">$ rake nobrainer:sync_schema\n</pre>  <h3 id=\"associations\">Associations</h3> <p>You can specify associations between models in the generator:</p> <pre data-language=\"\">$ rails g model Comment body:string liked:boolean \\\n    user:belongs_to article:belongs_to\n</pre>  <p>This will create the following model for comments:</p> <pre data-language=\"\">class Comment\n  include NoBrainer::Document\n  include NoBrainer::Document::Timestamps\n\n  field :body, :type =&gt; String\n  field :liked, :type =&gt; Boolean\n  belongs_to :user\n  belongs_to :article\nend\n</pre>  <p>If we go back into the <code class=\"highlighter-rouge\">Article</code> model and add the <code class=\"highlighter-rouge\">has_many</code> side of the association, it’s important to note that <code class=\"highlighter-rouge\">has_many</code> associations in NoBrainer are read-only. The server doesn’t support transactions, so saving the members of the association is up to the developer.</p> <h3 id=\"validation\">Validation</h3> <p>We can also specify more in-depth validation on fields. We can modify the <code class=\"highlighter-rouge\">Article</code> model in a few ways to ensure the data has the properties we expect:</p> <pre data-language=\"\">class Article\n  include NoBrainer::Document\n  include NoBrainer::Document::Timestamps\n\n  has_many :comments # read only!\n\n  field :title, :type =&gt; String\n  field :text,  :type =&gt; String, :required =&gt; true\n  field :tags,  :type =&gt; Array, :default =&gt; []\n\n  validates :title, :length =&gt; { minimum: 5 }\nend\n</pre>  <p>NoBrainer runs the validations only when saving, but not when retrieving a document. This means you can always retrieve your data, but an invalid model won’t be saved to the database.</p> <p>Read about <a href=\"http://nobrainer.io/docs/validations/\">validation in NoBrainer</a> for more details.</p> <h2 id=\"nested-resources-in-views\">Nested resources in views</h2> <p>Since NoBrainer’s <code class=\"highlighter-rouge\">has_many</code> associations are read-only, handling nested resources changes a little bit. For example, if <code class=\"highlighter-rouge\">Comments</code> are nested in <code class=\"highlighter-rouge\">Articles</code>, the comment form in the Article view would look like this:</p> <pre data-language=\"\">&lt;%= form_for([@article, Comment.new(:article =&gt; @article)]) do |f| %&gt;\n  &lt;b&gt;Make a comment:&lt;/b&gt;&lt;br&gt;\n  &lt;%= f.label \"I liked this article\" %&gt; &lt;%= f.check_box :liked %&gt;&lt;br&gt;\n  &lt;%= f.text_area :body %&gt;\n  &lt;%= f.submit %&gt;\n&lt;% end %&gt;\n</pre>  <p>This just creates a new <code class=\"highlighter-rouge\">Comment</code> and associates it with the current <code class=\"highlighter-rouge\">Article</code>, rather than using the <code class=\"highlighter-rouge\">build</code> method.</p> <h2 id=\"querying\">Querying</h2> <p>NoBrainer adds a light wrapper around ReQL queries. Here are some examples:</p> <pre data-language=\"\"># Find a specific document by its primary key\nArticle.find \"2FrYybOfzezVpT\"\n\n# Find a comment from a user with 'bob' in its name sorted by the name.\n# Note: NoBrainer will use the :name index from User by default\nUser.where(:name =&gt; /bob/).order_by(:name =&gt; :desc).to_a\n\n# Get two random comments that did not like the article\nComment.where(:liked =&gt; false).sample(2)\n</pre>  <p>There is very comprehensive documentation of <a href=\"http://nobrainer.io/docs/querying/\">NoBrainer’s query language</a>, and its capabilities. NoBrainer’s language is built on top of ReQL, so if you know how to do something in ReQL, it should be straightforward to translate it.</p> <h2 id=\"and-thats-it\">And that’s it!</h2> <p>You’re on your way with Ruby on Rails and RethinkDB! Be sure to check out additional resources for more information.</p> <ul> <li>The <a href=\"http://nobrainer.io/\">NoBrainer documentation</a>.</li> <li>The <a href=\"https://rethinkdb.com/api/ruby\">ReQL API docs</a> for information on RethinkDB commands.</li> <li>The <a href=\"https://github.com/rethinkdb/rethinkdb-example-sinatra-pastie\">Sinatra example application</a> for a different style of a Ruby web app using RethinkDB.</li> <li>The <a href=\"../cookbook/java/index\">cookbook section</a> for common queries and example snippets.</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/rails/\" class=\"_attribution-link\">https://rethinkdb.com/docs/rails/</a>\n  </p>\n</div>\n","docs/frameworks-and-libraries/index":"<h1 class=\"title\">Third-party libraries</h1> <div class=\"toc\">  <ul id=\"markdown-toc\"> <li><a href=\"#nodejs-libraries\" id=\"markdown-toc-nodejs-libraries\">Node.js libraries</a></li> <li><a href=\"#python-libraries\" id=\"markdown-toc-python-libraries\">Python libraries</a></li> <li><a href=\"#ruby-libraries\" id=\"markdown-toc-ruby-libraries\">Ruby libraries</a></li> </ul> </div> <blockquote class=\"infobox \">\n<p><strong>Add your project:</strong> Have you written a cool library or tool for RethinkDB? Shoot us an email at <a href=\"mailto:info@rethinkdb.com\">info@rethinkdb.com</a>.</p> </blockquote> <h2 id=\"nodejs-libraries\">Node.js libraries</h2> <h3 id=\"drivers-and-extensions\">Drivers and extensions</h3> <ul> <li> <p><a href=\"https://github.com/neumino/rethinkdbdash\">rethinkdbdash</a> by <a href=\"https://github.com/neumino\">@neumino</a><br> An alternative Node.js driver with native promises and a connection pool.</p> </li> <li> <p><a href=\"https://github.com/hden/rethinkdb-co\">rethinkdb-co</a> by <a href=\"https://github.com/hden\">@hden</a><br> Allows using ECMAScript 6 generators with RethinkDB callbacks.</p> </li> <li> <p><a href=\"https://github.com/guillaumervls/rdb-cursor-stream\">rdb-cursor-stream</a> by <a href=\"https://github.com/guillaumervls\">@guillaumervls</a><br> Replaces cursors with streams.</p> </li> <li> <p><a href=\"https://github.com/guillaumervls/connect-rethinkdb\">connect-rethinkdb</a> by <a href=\"https://github.com/guillaumervls\">@guillaumervls</a><br> A RethinkDB session store for Connect, similar to connect-redis.</p> </li> <li> <p><a href=\"https://www.npmjs.com/package/express-session-rethinkdb\">express-session-rethinkdb</a> by <a href=\"https://github.com/armenfilipetyan\">@armenfilipetyan</a><br> Use RethinkDB as session store with Express 4.x framework. Adapted from connect-rethinkdb.</p> </li> <li> <p><a href=\"https://github.com/hden/rethinkdb-pool\">Rethinkdb-pool</a> by <a href=\"https://github.com/hden\">@hden</a><br> Connection pool for RethinkDB connections.</p> </li> <li> <p><a href=\"https://github.com/robconery/second-thought\">second-thought</a> by <a href=\"https://github.com/robconery\">@robconery</a><br> A light abstraction layer over RethinkDB adding methods you “wished you had.”</p> </li> <li> <p><a href=\"https://github.com/athlite/rethinkdb-fixtures\">rethinkdb-fixtures</a> by <a href=\"https://github.com/athlite\">@athlite</a><br> Easily load fixtures into RethinkDB for testing purposes.</p> </li> </ul> <h3 id=\"orms\">ORMs</h3> <ul> <li> <p><a href=\"https://github.com/js-data/js-data-rethinkdb\">js-data-rethinkdb</a> by <a href=\"https://github.com/jmdobry\">@jmdobry</a><br> A RethinkDB adapter for <a href=\"https://github.com/js-data/js-data\">js-data</a>, a database-agnostic ORM for Node.js and the browser.</p> </li> <li> <p><a href=\"https://github.com/neumino/thinky\">Thinky</a> by <a href=\"https://github.com/neumino\">@neumino</a><br> JavaScript ORM for RethinkDB.</p> </li> <li> <p><a href=\"https://github.com/mbroadst/thinkagain\">ThinkAgain</a> by <a href=\"https://github.com/mbroadst\">@mbroadst</a><br> A fork of <a href=\"https://github.com/neumino/thinky\">Thinky</a> with first-class support for <a href=\"http://json-schema.org\">JSON Schema</a>.</p> </li> <li> <p><a href=\"https://github.com/fuwaneko/jugglingdb-rethink\">JugglingDB-RethinkDB</a> by <a href=\"https://github.com/fuwaneko\">@fuwaneko</a><br> A RethinkDB adapter for <a href=\"https://github.com/1602/jugglingdb\">JugglingDB</a>, a multi-database ORM for Node.js.</p> </li> <li> <p><a href=\"https://github.com/mtabini/osmos\">Osmos</a> by <a href=\"https://github.com/mtabini\">@mtabini</a><br> A store-agnostic object data mapper for Node.js with support for RethinkDB.</p> </li> </ul> <h3 id=\"integrations\">Integrations</h3> <ul> <li> <p><a href=\"../rabbitmq/java/index\">rabbitMQ</a><br> Listen for changes in a RethinkDB table over RabbitMQ.</p> </li> <li> <p><a href=\"https://github.com/hden/koa-rethinkdb\">koa-rethinkdb</a> by <a href=\"https://github.com/hden\">@hden</a><br> Koa middleware that automatically manages connections via a connection pool.</p> </li> <li> <p><a href=\"https://github.com/mwielbut/thinky-loader\">thinky-loader</a> by <a href=\"https://github.com/mwielbut\">@mwielbut</a><br> A general-purpose model loader for the <a href=\"https://github.com/neumino/thinky\">Thinky</a> ORM. (Supersedes sails-hook-thinky.)</p> </li> <li> <p><a href=\"https://github.com/athlite/hapi-rethinkdb-crud\">hapi-rethinkdb-crud</a> by <a href=\"https://github.com/athlite\">@athlite</a><br> Basic CRUD mapping between <a href=\"http://hapijs.com\">hapi</a> and RethinkDB.</p> </li> </ul> <h2 id=\"python-libraries\">Python libraries</h2> <h3 id=\"orms-1\">ORMs</h3> <ul> <li> <p><a href=\"https://github.com/dparlevliet/rwrapper\">rwrapper</a> by <a href=\"https://github.com/dparlevliet\">@dparlevliet</a><br> An ORM designed to emulate the most common usages of Django’s database abstraction.</p> </li> <li> <p><a href=\"https://github.com/JoshAshby/pyRethinkORM\">pyRethinkORM</a> by <a href=\"https://github.com/JoshAshby\">@JoshAshby</a><br> A Python ORM for RethinkDB.</p> </li> <li> <p><a href=\"https://github.com/caoimhghin/rethink\">rethink</a> by <a href=\"https://github.com/caoimhghin\">@caoimhghin</a><br> A Python object mapper in the style of <a href=\"https://cloud.google.com/appengine/docs/python/ndb/\">App Engine NDB</a>.</p> </li> <li> <p><a href=\"https://github.com/linkyndy/remodel\">remodel</a> by <a href=\"https://github.com/linkyndy\">@linkyndy</a><br> A simple but powerful and extensible Object Document Mapper for RethinkDB. (Also see the <a href=\"https://pypi.python.org/pypi/Remodel\">pip package</a>.)</p> </li> </ul> <h3 id=\"integrations-1\">Integrations</h3> <ul> <li> <p><a href=\"../rabbitmq/java/index\">rabbitMQ</a><br> Listen for changes in a RethinkDB table over RabbitMQ.</p> </li> <li> <p><a href=\"https://github.com/pilwon/celery-backends-rethinkdb\">celery-backends-rethinkdb</a> by <a href=\"https://github.com/pilwon\">@pilwon</a><br> <a href=\"http://www.celeryproject.org/\">Celery</a>’s custom result backend for RethinkDB.</p> </li> <li> <p><a href=\"https://github.com/linkyndy/flask-rethinkdb\">flask-rethinkdb</a> by <a href=\"https://github.com/linkyndy\">@linkyndy</a><br> A Flask extension that adds RethinkDB support (also see the <a href=\"https://pypi.python.org/pypi/Flask-RethinkDB/\">pip package</a>).</p> </li> </ul> <h2 id=\"ruby-libraries\">Ruby libraries</h2> <h3 id=\"orms-2\">ORMs</h3> <ul> <li>\n<a href=\"https://github.com/nviennot/nobrainer\">NoBrainer</a> by <a href=\"https://github.com/nviennot\">@nviennot</a><br> A Ruby ORM designed for RethinkDB. (Read our <a href=\"../rails/index\">quickstart tutorial</a>.)</li> </ul> <h3 id=\"integrations-2\">Integrations</h3> <ul> <li> <p><a href=\"https://github.com/kureikain/epiphy\">Epiphy</a> by <a href=\"https://github.com/kureikain\">@kureikain</a> <br> A light persistence framework for RethinkDB.</p> </li> <li> <p><a href=\"../rabbitmq/java/index\">rabbitMQ</a><br> Listen for changes in a RethinkDB table over RabbitMQ.</p> </li> <li> <p><a href=\"https://github.com/angeloashmore/lotus-rethinkdb\">lotus-rethinkdb</a> by <a href=\"https://github.com/angeloashmore\">@angeloashmore</a><br> A RethinkDB adapter for <a href=\"https://github.com/lotus/model\">Lotus::Model</a>, a persistence framework for Ruby.</p> </li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/frameworks-and-libraries/\" class=\"_attribution-link\">https://rethinkdb.com/docs/frameworks-and-libraries/</a>\n  </p>\n</div>\n","docs/consistency/index":"<h1 class=\"title\">Consistency guarantees</h1> <div class=\"toc\">  <ul id=\"markdown-toc\"> <li><a href=\"#settings\" id=\"markdown-toc-settings\">Settings</a></li> <li><a href=\"#linearizability-and-atomicity-guarantees\" id=\"markdown-toc-linearizability-and-atomicity-guarantees\">Linearizability and atomicity guarantees</a></li> <li><a href=\"#availability-guarantees\" id=\"markdown-toc-availability-guarantees\">Availability guarantees</a></li> <li><a href=\"#balancing-safety-and-performance\" id=\"markdown-toc-balancing-safety-and-performance\">Balancing safety and performance</a></li> <li><a href=\"#notes\" id=\"markdown-toc-notes\">Notes</a></li> </ul> </div> <p>Three settings control consistency and durability in RethinkDB: write acknowledgements and durability per table, and the query read mode.</p> <h2 id=\"settings\">Settings</h2> <ul> <li>\n<strong>Write acknowledgements</strong> are set per table with the <code class=\"highlighter-rouge\">write_acks</code> setting, either using the <a href=\"https://rethinkdb.com/api/javascript/config/\">config</a> command or by writing to the <code class=\"highlighter-rouge\">table_config</code> <a href=\"../system-tables/index\">system table</a>. The default is <code class=\"highlighter-rouge\">majority</code>, meaning writes will be acknowledged when a majority of (voting) replicas have confirmed their writes. The other possible option is <code class=\"highlighter-rouge\">single</code>, meaning writes will be acknowledged when a single replica acknowledges it.</li> <li>\n<strong>Durability</strong> is set per table with the <code class=\"highlighter-rouge\">durability</code> setting, again using either <code class=\"highlighter-rouge\">reconfigure</code> or writing to the <code class=\"highlighter-rouge\">table_config</code> system table. In <code class=\"highlighter-rouge\">hard</code> durability mode, writes are committed to disk before acknowledgements are sent; in <code class=\"highlighter-rouge\">soft</code> mode, writes are acknowledged immediately after being stored in memory. The <code class=\"highlighter-rouge\">soft</code> mode is faster but slightly less resilient to failure. The default is <code class=\"highlighter-rouge\">hard</code>.</li> <li>\n<strong>Read mode</strong> is set per query via an optional argument, <code class=\"highlighter-rouge\">read_mode</code> (or <code class=\"highlighter-rouge\">readMode</code>), to <a href=\"https://rethinkdb.com/api/javascript/table/\">table</a>. It has three possible values: <ul> <li>\n<code class=\"highlighter-rouge\">single</code> returns values that are in memory (but not necessarily written to disk) on the primary replica. This is the default.</li> <li>\n<code class=\"highlighter-rouge\">majority</code> will only return values that are safely committed on disk on a majority of replicas. This requires sending a message to every replica on each read, so it is the slowest but most consistent.</li> <li>\n<code class=\"highlighter-rouge\">outdated</code> will return values that are in memory on an arbitrarily-selected replica. This is the fastest but least consistent.</li> </ul> </li> </ul> <p>Note that <a href=\"../changefeeds/java/index\">changefeeds</a> will ignore the <code class=\"highlighter-rouge\">read_mode</code> flag, and will always behave as if it is set to <code class=\"highlighter-rouge\">single</code>.</p> <h2 id=\"linearizability-and-atomicity-guarantees\">Linearizability and atomicity guarantees</h2> <p>With the following settings, RethinkDB guarantees linearizability of individual atomic operations on individual documents:</p> <ul> <li>\n<code class=\"highlighter-rouge\">write_acks</code>: <code class=\"highlighter-rouge\">majority</code>\n</li> <li>\n<code class=\"highlighter-rouge\">durability</code>: <code class=\"highlighter-rouge\">hard</code>\n</li> <li>\n<code class=\"highlighter-rouge\">read_mode</code>: <code class=\"highlighter-rouge\">majority</code>\n</li> </ul> <p>This means that every read will see every previous successful write, and no read will ever see a definitively failed write. (See note about definitively failed vs. indeterminate writes below.)</p> <p>The linearizability guarantee is for <em>atomic operations,</em> not for <em>queries.</em> A single RethinkDB query will not necessarily execute as a single atomic operation. It’s possible that the query:</p> <pre data-language=\"\">r.table(\"foo\").get(\"bar\").eq(r.table(\"foo\").get(\"bar\")).run(conn, callback);\n</pre>  <p>could return <code class=\"highlighter-rouge\">false</code>! Each individual <a href=\"https://rethinkdb.com/api/javascript/get/\">get</a> operation is atomic, but the query as a whole is not. To read and modify a document in a single atomic operation, use the <a href=\"https://rethinkdb.com/api/javascript/update/\">update</a> or <a href=\"https://rethinkdb.com/api/javascript/replace/\">replace</a> commands.</p> <pre data-language=\"\">r.table(\"foo\").get(id).update({hits: r.row(\"hits\") + 1}).run(conn, callback);\n</pre>  <p>This can also be used to implement a check-and-set register. The following query will atomically check whether the <code class=\"highlighter-rouge\">check</code> field is equal to <code class=\"highlighter-rouge\">old_value</code> and change it to <code class=\"highlighter-rouge\">new_value</code> if so:</p> <pre data-language=\"\">r.table(\"foo\").get(register_id).update({\n    check: r.branch(r.row(\"check\").eq(old_value), new_value, r.row(\"check\"))\n}).run(conn, callback);\n</pre>  <blockquote class=\"infobox \">\n<p>RethinkDB operations are never atomic across multiple keys. For this reason, RethinkDB cannot be considered an ACID database.</p> </blockquote> <p>Currently, <code class=\"highlighter-rouge\">filter</code>, <code class=\"highlighter-rouge\">get_all</code> and similar operations execute as separate operations from <code class=\"highlighter-rouge\">update</code> and other mutation operations. Therefore, the following is <em>not</em> a correct implementation of a check-and-set register, since <code class=\"highlighter-rouge\">filter</code> and <code class=\"highlighter-rouge\">update</code> will not execute in one atomic operation:</p> <pre data-language=\"\">r.table(\"foo\").filter({\n    id: register_id, foo: old_val\n}).update({foo: new_val}).run(conn, callback);\n\ntable.filter({id: register_id, foo: old_val}).update({foo: new_val})\n</pre>  <p>This behavior may change in the future. See <a href=\"https://github.com/rethinkdb/rethinkdb/issues/3992\" title=\"Make table.filter.update atomic\">Github issue #3992</a> to track the discussion.</p> <h2 id=\"availability-guarantees\">Availability guarantees</h2> <p>Except for brief periods, a table will remain fully available as long as more than half of the voting replicas for each shard and for the table overall are available. If half or more of the voting replicas for a shard are lost, then read or write operations on that shard will fail.</p> <p>Reconfiguring a table (changing the number of shards, rebalancing, etc.) causes brief losses of availability at various points during the reconfiguration.</p> <p>If the primary replica is lost but more than half of the voting replicas are still available, an arbitrary voting replica will be elected as primary. The new primary will appear in <code class=\"highlighter-rouge\">table_status</code>, but the <code class=\"highlighter-rouge\">primary_replica</code> field of <code class=\"highlighter-rouge\">table_config</code> will not change. If the old primary ever becomes available again, the system will switch back. When the primary changes there will be a brief period of unavailability.</p> <p>If half or more of the voting replicas of a shard are lost, the only way to recover availability is to run <a href=\"https://rethinkdb.com/api/javascript/reconfigure\">reconfigure</a> with the <code class=\"highlighter-rouge\">emergency_repair</code> option. Consult the documentation for <code class=\"highlighter-rouge\">reconfigure</code> for more details.</p> <p>Reads run in <code class=\"highlighter-rouge\">single</code> mode may succeed even if the table is not available, but this is not guaranteed. Reads run in <code class=\"highlighter-rouge\">outdated</code> mode will succeed as long as at least one replica for each of the relevant shards is available.</p> <blockquote class=\"infobox \">\n<p><strong>Voting and non-voting?</strong> All replicas are “voting” replicas by default, which simply means that they’re counted in any operation that requires a majority of replicas to be available. However, the speed at which replicas “vote” is affected by network latency; if you have a faraway data center with higher latency, you might want to set its replicas to be non-voting to improve performance, at the cost of guaranteed availability in that data center. You can set a replica to be “non-voting” by changing its table configuration with <code class=\"highlighter-rouge\">reconfigure</code>.</p> </blockquote> <h2 id=\"balancing-safety-and-performance\">Balancing safety and performance</h2> <p>RethinkDB’s default settings prioritize safety over performance, except in one case: <code class=\"highlighter-rouge\">read_mode</code> defaults to <code class=\"highlighter-rouge\">single</code> rather than <code class=\"highlighter-rouge\">majority</code>. The <code class=\"highlighter-rouge\">majority</code> read mode requires sending a query to all of the replicas and waiting for a majority to reply, which significantly degrades performance.</p> <p>In normal operation, <code class=\"highlighter-rouge\">single</code> read mode produces the same results as <code class=\"highlighter-rouge\">majority</code> read mode, but it might return outdated results in the event of a network failure or crash. It’s also possible that a read run in <code class=\"highlighter-rouge\">single</code> mode could return results from an incomplete write that is later rolled back.</p> <p>The same is true for <code class=\"highlighter-rouge\">single</code> write mode and <code class=\"highlighter-rouge\">soft</code> durability mode. In normal operation these produce the same results as <code class=\"highlighter-rouge\">majority</code> and <code class=\"highlighter-rouge\">hard</code>, but in the event of a network or server failure, recent write operations that were run using these modes might be lost.</p> <p>Note that <code class=\"highlighter-rouge\">write_acks</code> and <code class=\"highlighter-rouge\">durability</code> don’t actually affect how the write is performed; they only affect when the acknowledgement is sent back to the client.</p> <p>Reads run in <code class=\"highlighter-rouge\">\"outdated\"</code> mode will return outdated data even during normal operation, but the data will typically be less than a second out of date. In the event of a network or server failure, the data may be much more out of date. The advantage of running reads in <code class=\"highlighter-rouge\">\"outdated\"</code> mode is that the latency and throughput are often better than in <code class=\"highlighter-rouge\">\"single\"</code> mode, in addition to the availability differences described in the previous section.</p> <h2 id=\"notes\">Notes</h2> <p>Using the <code class=\"highlighter-rouge\">emergency_repair</code> option on a table will invalidate all the guarantees.</p> <p>There are two ways a write operation can fail. If a write fails <strong>definitively,</strong> no read will ever see it, even in the weaker read modes. If it fails <strong>indeterminately,</strong> reads run in <code class=\"highlighter-rouge\">single</code> or <code class=\"highlighter-rouge\">outdated</code> modes might see it, but when the network failure or crash that caused the problem is resolved the write might or might not be rolled back. In general, writes will fail indeterminately if they were running at the exact moment when the network or server issue first happened. Both of these failures will generate errors, and you can examine the error message to see whether the failure was definitive or indeterminate.</p> <p>RethinkDB’s automatic failover has limitations in cases of non-transitive connectivity failure, i.e., server A can contact B and B can contact C, but A cannot contact C. Read the <a href=\"../failover/index\">Failover</a> documentation for more details.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/consistency/\" class=\"_attribution-link\">https://rethinkdb.com/docs/consistency/</a>\n  </p>\n</div>\n","docs/architecture/index":"<h1 class=\"title\">Architecture FAQ</h1> <blockquote class=\"infobox \">\n<p><strong>Want to learn more about the basics?</strong></p> <ul> <li>Read the <a href=\"../guide/java/index\">ten-minute guide</a> to get started with using RethinkDB.</li> <li>\n<a href=\"https://rethinkdb.com/faq/\">Read the FAQ</a>.</li> <li>Jump into the <a href=\"../cookbook/java/index\">cookbook</a> and see dozens of examples of common RethinkDB queries.</li> </ul> </blockquote> <div class=\"toc\">  <ul id=\"markdown-toc\"> <li><a href=\"#sharding-and-replication\" id=\"markdown-toc-sharding-and-replication\">Sharding and replication</a></li> <li><a href=\"#cap-theorem\" id=\"markdown-toc-cap-theorem\">CAP theorem</a></li> <li><a href=\"#indexing\" id=\"markdown-toc-indexing\">Indexing</a></li> <li><a href=\"#availability-and-failover\" id=\"markdown-toc-availability-and-failover\">Availability and failover</a></li> <li><a href=\"#query-execution\" id=\"markdown-toc-query-execution\">Query execution</a></li> <li><a href=\"#data-storage\" id=\"markdown-toc-data-storage\">Data storage</a></li> </ul> </div> <h2 id=\"sharding-and-replication\">Sharding and replication</h2> <h3 id=\"how-does-rethinkdb-partition-data-into-shards\">How does RethinkDB partition data into shards?</h3> <p>RethinkDB uses a range sharding algorithm parameterized on the table’s primary key to partition the data. When the user states they want a given table to use a certain number of shards, the system examines the statistics for the table and finds the optimal set of split points to break up the table evenly. All sharding is currently done based on the table’s primary key, and cannot be done based on any other attribute (in RethinkDB the primary key and the shard key are effectively the same thing).</p> <p>For example, if a given table contains a thousand JSON documents whose primary keys are uniformly distributed, alphabetical, upper-case strings and the user states they want two shards, RethinkDB will likely pick split point ‘M’ to partition the table. Every document with a primary key less than or equal to ‘M’ will go into the first shard, and every document with a primary key greater than ‘M’ will go into the second shard. The split point will be picked such that each shard contains close to five hundred keys, and the shards will automatically be distributed across the cluster.</p> <p>Even if the primary keys contain unevenly distributed data (such as human last names, where some keys are likely to occur much more frequently than others), the system will still pick a correct split point to ensure that each shard has a roughly similar number of documents (there are many more Smiths in the phone book than Akhmechets).</p> <p>Split points will not automatically be changed after table creation, which means that if the primary keys are unevenly distributed, shards may become unbalanced. However, the user can manually rebalance shards when necessary, as well as reconfigure tables with new sharding and replication settings. Users cannot set split points for shards manually.</p> <p>Internally this approach is more difficult to implement than the more commonly used consistent hashing, but it has significant advantages because it allows for an efficient implementation of range queries.</p> <h3 id=\"what-governs-the-location-of-shards-and-replicas-in-the-cluster\">What governs the location of shards and replicas in the cluster?</h3> <p>Sharding and replication is configured through <em>table configurations,</em> which let you simply specify the number of shards and replicas per table or for all tables within a database. Users do not need to manually associate servers with tables. RethinkDB uses a set of heuristics to attempt to satisfy table configurations in an optimal way. It will copy data for new replicas from an available server, evenly distribute replicas of the data across the cluster, try to distribute the load evenly, and so on.</p> <p>For a more fine-grained mechanism, replicas can be associated with servers using <em>server tags.</em> Every server may be assigned one or more tags, and every table may have a specified number of replicas assigned to a server tag. For instance, if you have six servers, you might assign two the tag <code class=\"highlighter-rouge\">us_west</code>, two the tag <code class=\"highlighter-rouge\">us_east</code>, and two the tag <code class=\"highlighter-rouge\">london</code>, and further assign all four servers in the United States the tag <code class=\"highlighter-rouge\">us</code>. Then tables might have their configuration set with <code class=\"highlighter-rouge\">reconfigure</code> to group replicas in specific ways:</p> <pre data-language=\"\">r.table('a').reconfigure(shards=2, replicas={'us_east':2, 'us_west':2,\n    'london':2}, primary_replica_tag='us_east')\nr.table('b').reconfigure(shards=2, replicas={'us':2, 'london':1},\n    primary_replica_tag='london')\n</pre>  <p>In the second example, the two replicas in the <code class=\"highlighter-rouge\">us</code> group may be on any of the four servers in the United States.</p> <p>Note that server tags cannot be configured through RethinkDB’s web administration dashboard. They may be created and assigned through ReQL commands and scripts.</p> <p>RethinkDB keeps an internal directory tracking the current state of the cluster: how many servers are accessible, what data is currently stored on each server, etc. The data structures that keep track of the directory are automatically updated when the cluster changes. For example, if a server dies due to power failure, the directory is updated to represent this change.</p> <h3 id=\"how-does-multi-datacenter-support-work\">How does multi-datacenter support work?</h3> <p>Starting with RethinkDB 1.16, the earlier concept of “data centers” has been replaced by server tags, described above. Servers in a given data center could all be given a tag such as <code class=\"highlighter-rouge\">us_east</code> or <code class=\"highlighter-rouge\">us_west</code>, and a table can be configured to have replicas associated with specific server tags (e.g., 2 replicas on servers tagged with <code class=\"highlighter-rouge\">us_east</code> and 3 on servers tagged with <code class=\"highlighter-rouge\">us_west</code>).</p> <p>RethinkDB uses the same protocol for communication within a datacenter as it does across datacenters. Because the architecture is immediately consistent and does not require quorums on individual document reads and writes, the latency issues commonly associated with cross-datacenter quorums on Dynamo-style systems do not arise in RethinkDB.</p> <h3 id=\"does-rethinkdb-automatically-reshard-the-database-without-the-users-request\">Does RethinkDB automatically reshard the database without the user’s request?</h3> <p>The short answer is no. The longer answer is that the clustering system is designed with three main principles in mind:</p> <ul> <li>Common operations such as scaling up and down, rebalancing shards, and increasing/decreasing replication count should easily be performed in a click of a button.</li> <li>In cases where it matters, the system should give administrators fine-tuned control, such as pinning specific primary and secondary replicas to specific servers in the cluster.</li> <li>Information about the cluster and all operations on the cluster should be programmatically accessible.</li> </ul> <p>We felt that performing automatic maintenance operations on the cluster (such as adding shards) is a higher-level component, and that it’s crucial to have a really good implementation of the lower-level components done first. As a result, the clustering system is organized into three layers:</p> <ul> <li>The first layer implements the distributed infrastructure, placing copies of data on specific servers, routing queries, etc.</li> <li>The second layer builds on the first and implements various automation mechanisms (e.g. automatically determining how to split shards, where to place copies of the data, automatically picking optimal primary replicas, etc.) This is the layer that compiles goals specified by the user into blueprints.</li> <li>The third layers builds on the previous two and provides the user with command line and web-based tools to control the cluster.</li> </ul> <p>Invoking this functionality automatically without the user’s request is the next layer in this hierarchy. Currently the user can control the system via the web UI, manually via the command line, or by writing scripts to call the command line tools to perform server automation.</p> <p>We’re exploring best practices to determine whether it’s possible to build a really good general purpose automation layer that controls the cluster by automatically enforcing user-specified rules (such as resharding the system when the shard balance drops below a certain threshold).</p> <h2 id=\"cap-theorem\">CAP theorem</h2> <h3 id=\"is-rethinkdb-immediately-or-eventually-consistent\">Is RethinkDB immediately or eventually consistent?</h3> <p>Every shard in RethinkDB is assigned to a single authoritative primary replica. All reads and writes to any key in a given shard always get routed to its respective primary, where they’re ordered and evaluated. Data always remains immediately consistent and conflict-free, and a read that follows an acknowledged write is always guaranteed to see the write. However, neither reads nor writes are guaranteed to succeed if the primary replica is unavailable.</p> <p>RethinkDB supports both up-to-date and out-of-date reads. By default, all read queries are executed up-to-date, which means that every read operation for a given shard is routed to the primary replica for that shard and executed in order with other operations on the shard. In this default mode, the client always sees the latest, consistent, artifact-free view of the data.</p> <p>The programmer can also mark a read query to be ok with out-of-date data. In this mode, the query isn’t necessarily routed to the shard’s primary, but is likely to be routed to its closest replica. Out-of-date queries are likely to have lower latency and have stronger availability guarantees, but don’t necessarily return the latest version of the data to the client.</p> <h3 id=\"what-cap-theorem-tradeoffs-are-made-in-rethinkdb\">What CAP theorem tradeoffs are made in RethinkDB?</h3> <p>The essential tradeoff exposed by the CAP theorem is this: in case of network partitioning, does the system maintain availability or data consistency? (Jumping ahead, RethinkDB chooses to maintain data consistency).</p> <p>Dynamo-based systems such as Cassandra and Riak choose to maintain stronger availability. In these systems if there is a network partition, the clients can write to the same row on both sides of the netsplit. In exchange for the write availability, applications built on top of these systems must deal with various complexities such as clock skew, conflict resolution code, conflict repair operations, performance issues for highly contested keys, and latency issues associated with quorums.</p> <p>Authoritative systems such as RethinkDB and MongoDB choose to maintain data consistency. Building applications on top of authoritative primary systems is much simpler because all of the issues associated with data inconsistency do not arise. In exchange, these applications will occasionally experience availability issues.</p> <p>In RethinkDB, if there is a network partition, the behavior of the system from any given client’s perspective depends on which side of the netsplit that client is on. If the client is on the same side of the netsplit as the majority of voting replicas for the shard the client is trying to reach, it will continue operating without any problems. If the client is on the side of the netsplit with half or fewer of the voting replicas for the shard the client is trying to reach, the client’s up-to-date queries and write queries will encounter a failure of availability. For example, if the client is running an up-to-date range query that spans multiple shards, the primaries for all shards must be on the same side of the netsplit as the client, or the client will encounter a failure of availability.</p> <p>If the programmer marks a read query to be ok with out-of-date data, RethinkDB will route the query to the closest available replica instead of routing it to the primary. In this case the client will see the data as long as there are replicas of the data on its side of the netsplit. However, in this case the data has the risk of being out of date. This is usually ok for reports, analytics, cached data, or any scenario in general where having the absolute latest information isn’t imperative.</p> <h3 id=\"how-is-cluster-configuration-propagated\">How is cluster configuration propagated?</h3> <p>Updating the state of a cluster is a surprisingly difficult problem in distributed systems. At any given point different (and potentially) conflicting configurations can be selected on different sides of a netsplit, different configurations can reach different nodes in the cluster at unpredictable times, etc.</p> <p>RethinkDB uses the <a href=\"https://en.wikipedia.org/wiki/Raft_(computer_science)\">Raft algorithm</a> to store and propagate cluster configuration in most cases, although there are some situations it uses semilattices, versioned with internal timestamps. This architecture turns out to have sufficient mathematical properties to address all the issues mentioned above (this result has been known in distributed systems research for quite a while).</p> <h2 id=\"indexing\">Indexing</h2> <h3 id=\"how-does-rethinkdb-index-data\">How does RethinkDB index data?</h3> <p>When the user creates a table, they have the option of specifying the attribute that will serve as the primary key (if the primary key attribute isn’t specified, it defaults to ‘id’). When the user inserts a document into the table, if the document contains the primary key attribute, its value is used to index the document. Otherwise, a random unique ID is generated for the index automatically.</p> <p>The primary key of each document is used by RethinkDB to place the document into an appropriate shard, and index it within that shard using a B-Tree data structure. Querying documents by primary key is extremely efficient, because the query can immediately be routed to the right shard and the document can be looked up in the B-Tree.</p> <h3 id=\"does-rethinkdb-support-secondary-and-compound-indexes\">Does RethinkDB support secondary and compound indexes?</h3> <p>RethinkDB supports both secondary and compound indexes, as well as indexes that compute arbitrary expressions. You can see examples of how to use the secondary index API <a href=\"../secondary-indexes/java/index\">here</a>.</p> <h2 id=\"availability-and-failover\">Availability and failover</h2> <h3 id=\"what-happens-when-a-server-becomes-unreachable\">What happens when a server becomes unreachable?</h3> <p>If your cluster has at least three servers, then in most cases RethinkDB will be able to perform automatic failover and maintain table availability.</p> <ul> <li> <p>If the primary replica for a table fails, as long as more than half of the table’s voting replicas and more than half of the voting replicas for each shard remain available, one of the voting replicas will become the new primary replica.</p> </li> <li> <p>If half or more of the voting replicas for a shard are lost (including the case of a two-server cluster losing one server), the cluster will need to be repaired manually using the <a href=\"https://rethinkdb.com/api/javascript/reconfigure/#emergency-repair-mode\">emergency repair</a> option of <code class=\"highlighter-rouge\">reconfigure</code>.</p> </li> </ul> <p>For more details, read about <a href=\"../failover/index\">Failover</a>.</p> <h3 id=\"what-are-availability-and-performance-impacts-of-sharding-and-replication\">What are availability and performance impacts of sharding and replication?</h3> <p>RethinkDB maintains availability if the user increases or decreases the number of replicas in the cluster. In most cases, the replication process should not have a strong performance impact on the real-time system.</p> <p>RethinkDB may or may not maintain availability if the user modifies the number of shards. In many cases availability will be maintained, but currently it cannot be guaranteed. We’re exploring different solutions to remove this limitation.</p> <h2 id=\"query-execution\">Query execution</h2> <h3 id=\"how-does-rethinkdb-execute-queries\">How does RethinkDB execute queries?</h3> <p>When a node in the cluster receives a query from the client, it evaluates the query in the following way.</p> <p>First, the query is transformed into an execution plan that consists of a stack of internal logical operations. The operation stack fully describes the query in a data structure useful for efficient execution. The bottom-most node of the stack usually deals with data access— it can be a lookup of a single document, a short range scan bounded by an index, or even a full table scan. Nodes closer to the top usually perform transformations on the data – mapping the values, running reductions, grouping, etc. Nodes can be as simple as projections (i.e. returning a subset of the document), or as complex as entire stacks of stacks in case of subqueries.</p> <p>Each node in the stack has a number of methods defined on it. The three most important methods define how to execute a subset of the query on each server in the cluster, how to combine the data from multiple servers into a unified resultset, and how to stream data to the nodes further up in small chunks.</p> <p>As the client attempts to stream data from the server, these stacks are transported to every relevant server in the cluster, and each server begins evaluating the topmost node in the stack, in parallel with other servers. On each server, the topmost node in the stack grabs the first chunk of the data from the node below it, and applies its share of transformations to it. This process proceeds recursively until enough data is collected to send the first chunk to the client. The data from each server is combined into a single resultset, and forwarded to the client. This process continues as the client requests more data from the server.</p> <p>The two most important aspects of the execution engine is that every query is completely parallelized across the cluster, and that queries are evaluated lazily. For instance, if the client requests only one document, RethinkDB will try to do just enough work to return this document, and will not process every shard in its entirety. This allows for large, complicated queries to execute in a very efficient way.</p> <p>The full query execution process is fairly complex and nuanced. For example, some operations cannot be parallelized, some queries cannot be executed lazily (which has implications on runtime and RAM usage), and implementations of some operations could be significantly improved. We will be adding tools to help visualize and understand query execution in a user-friendly way, but at the moment the best way to learn more about it is to ask us or to look at the code.</p> <h3 id=\"how-does-the-atomicity-model-work\">How does the atomicity model work?</h3> <p>Write atomicity is supported on a per-document basis – updates to a single JSON document are guaranteed to be atomic. RethinkDB is different from other NoSQL systems in that atomic document updates aren’t limited to a small subset of possible operations – any combination of operations that can be performed on a single document is guaranteed to update the document atomically. For example, the user may wish to update the value of attribute A to a sum of the values of attributes B and C, increment the value of attribute D by a fixed number, and append an element to an array in attribute E. All of these operations can be applied to the document atomically in a single update operation.</p> <p>However, RethinkDB does come with some restrictions regarding which operations can be performed atomically. Operations that cannot be proven deterministic cannot update the document in an atomic way. Currently, values obtained by executing JavaScript code, random values, and values obtained as a result of a subquery (e.g. incrementing the value of an attribute by the value of an attribute in a different document) cannot be performed atomically. If an update or replace query cannot be executed atomically, by default RethinkDB will throw an error. The user can choose to set the flag on the update operation in the client driver to execute the query in a non-atomic way. Note that non-atomic operations can only be detected when they involve functions (including <code class=\"highlighter-rouge\">row()</code>) being passed to <code class=\"highlighter-rouge\">update</code> or <code class=\"highlighter-rouge\">replace</code>; a non-atomic <code class=\"highlighter-rouge\">insert</code> operation will not throw an error.</p> <p>In addition, like most NoSQL systems, RethinkDB does not support updating multiple documents atomically.</p> <h3 id=\"how-are-concurrent-queries-handled\">How are concurrent queries handled?</h3> <p>To efficiently perform concurrent query execution RethinkDB implements block-level multiversion concurrency control (MVCC). Whenever a write operation occurs while there is an ongoing read, RethinkDB takes a snapshot of the B-Tree for each relevant shard and temporarily maintains different versions of the blocks in order to execute read and write operations concurrently. From the perspective of the applications written on top of RethinkDB, the system is essentially lock-free— you can run an hour-long analytics query on a live system without blocking any real-time reads or writes.</p> <p>RethinkDB does take exclusive block-level locks in case multiple writes are performed on documents that are close together in the B-Tree. If the contested block is cached in memory, these locks are extremely short-lived. If the blocks need to be loaded from disk, these locks take longer. Typically this does not present performance problems because the top levels of the B-Tree are all cached along with the frequently used blocks, so in most cases writes can be performed essentially lock-free.</p> <h2 id=\"data-storage\">Data storage</h2> <h3 id=\"how-is-data-stored-on-disk\">How is data stored on disk?</h3> <p>The data is organized into B-Trees, and stored on disk using a log-structured storage engine built specifically for RethinkDB and inspired by the architecture of BTRFS. The storage engine has a number of benefits over other available options, including an incremental, fully concurrent garbage compactor, low CPU overhead and very efficient multicore operation, a number of SSD optimizations, instantaneous recovery after power failure, full data consistency in case of failures, and support for multiversion concurrency control.</p> <p>The storage engine is used in conjunction with a custom, B-Tree-aware caching engine which allows file sizes many orders of magnitude greater than the amount of available memory. RethinkDB can operate on a terabyte of data with about ten gigabytes of free RAM.</p> <h3 id=\"which-file-systems-are-supported\">Which file systems are supported?</h3> <p>RethinkDB supports most commonly used file systems. It optionally supports direct disk I/O for greater efficiency, but this is not enabled by default.</p> <h3 id=\"how-can-i-perform-a-backup-of-my-cluster\">How can I perform a backup of my cluster?</h3> <p>RethinkDB ships with simple tools to perform a hot backup of a running cluster. See the <a href=\"../backup/index\">backup instructions</a> for more details.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/architecture/\" class=\"_attribution-link\">https://rethinkdb.com/docs/architecture/</a>\n  </p>\n</div>\n","docs/writing-drivers/index":"<h1 class=\"title\">Writing RethinkDB drivers</h1> <div class=\"toc\">  <ul id=\"markdown-toc\"> <li><a href=\"#initial-steps\" id=\"markdown-toc-initial-steps\">Initial steps</a></li> <li><a href=\"#open-a-connection\" id=\"markdown-toc-open-a-connection\">Open a connection</a></li> <li><a href=\"#perform-a-handshake\" id=\"markdown-toc-perform-a-handshake\">Perform a handshake</a></li> <li><a href=\"#serializing-queries\" id=\"markdown-toc-serializing-queries\">Serializing queries</a></li> <li><a href=\"#send-the-message\" id=\"markdown-toc-send-the-message\">Send the message</a></li> <li><a href=\"#receive-responses\" id=\"markdown-toc-receive-responses\">Receive responses</a></li> <li><a href=\"#notes-on-connections\" id=\"markdown-toc-notes-on-connections\">Notes on connections</a></li> <li><a href=\"#get-help\" id=\"markdown-toc-get-help\">Get help</a></li> </ul> </div> <p>RethinkDB client drivers are responsible for serializing queries, sending them to the server using the ReQL wire protocol, and receiving responses from the server and returning them to the calling application. This process takes the following steps:</p> <ul> <li>Open a connection</li> <li>Perform a handshake</li> <li>Serialize the query</li> <li>Send the message</li> <li>Receive responses</li> </ul> <blockquote class=\"infobox \">\n<p>For updates on protocol and behavior changes in new versions of RethinkDB and general assistance with writing drivers, join the <a href=\"https://groups.google.com/forum/?fromgroups#!forum/rethinkdb-dev\">RethinkDB-Dev Google Group</a>.</p> </blockquote> <h2 id=\"initial-steps\">Initial steps</h2> <p>ReQL types and commands are defined in the <a href=\"https://github.com/rethinkdb/rethinkdb/blob/next/src/rdb_protocol/ql2.proto\">ql2.proto</a> file.</p> <p>For a JavaScript version of the file, run <code class=\"highlighter-rouge\">make js-driver</code> in the <code class=\"highlighter-rouge\">rethinkdb</code> repo, and retrieve the JSON version of the file in <code class=\"highlighter-rouge\">build/packages/js/proto-def.js</code>. Alternatively you may grab the equivalent file from <a href=\"https://github.com/neumino/rethinkdbdash/blob/master/lib/protodef.js\">rethinkdbdash</a>.</p> <p>The <code class=\"highlighter-rouge\">ql2.proto</code> file is well-commented, showing arguments and output for each command.</p> <h2 id=\"open-a-connection\">Open a connection</h2> <p>Open a TCP connection to the server on the driver port. The default port is <code class=\"highlighter-rouge\">28015</code>.</p> <h2 id=\"perform-a-handshake\">Perform a handshake</h2> <p>With version <code class=\"highlighter-rouge\">V1_0</code> of the protocol, the handshake protocol has changed from previous versions.</p> <h3 id=\"version-v10\">Version V1_0</h3> <ol> <li> <p>The client sends the “magic number” (<code class=\"highlighter-rouge\">0x34c2bdc3</code>) for the protocol version, as a 32-bit little-endian integer (4 bytes).</p> <pre data-language=\"\"> SEND c3 bd c2 34\n</pre>  </li> <li> <p>On <strong>success,</strong> the server sends a null-terminated JSON response, indicating success, minimum and maximum protocol versions, and the server version.</p> <pre data-language=\"\"> {\n     \"success\": true,\n     \"min_protocol_version\": 0,\n     \"max_protocol_version\": 0,\n     \"server_version\": \"2.3.0\"\n }\n</pre>  <p>On <strong>failure,</strong> the server sends a null-terminated error string (<em>not</em> JSON).</p> <pre data-language=\"\"> ERROR: Received an unsupported protocol version. This port is for RethinkDB queries. Does your client driver version not match the server?\n</pre>  </li> <li> <p>The client sends the protocol version, authentication method, and authentication as a null-terminated JSON response. RethinkDB currently supports only one authentication method, <code class=\"highlighter-rouge\">SCRAM-SHA-256</code>, as specified in <a href=\"https://tools.ietf.org/html/rfc7677\">IETF RFC 7677</a> and <a href=\"https://tools.ietf.org/html/rfc5802\">RFC 5802</a>. The RFC is followed with the exception of error handling (RethinkDB uses its own higher level error reporting rather than the <code class=\"highlighter-rouge\">e=</code> field). RethinkDB does not support channel binding and clients should not request this. The value of <code class=\"highlighter-rouge\">\"authentication\"</code> is the “client-first-message” specified in RFC 5802 (the channel binding flag, optional SASL authorization identity, username (<code class=\"highlighter-rouge\">n=</code>), and random nonce (<code class=\"highlighter-rouge\">r=</code>).</p> <pre data-language=\"\"> {\n     \"protocol_version\": 0,\n     \"authentication_method\": \"SCRAM-SHA-256\",\n     \"authentication\": \"n,,n=user,r=rOprNGfwEbeRWgbNEkqO\"\n }\n</pre>  </li> <li> <p>The server sends a null-terminated JSON response with a <code class=\"highlighter-rouge\">\"success\"</code> value of either <code class=\"highlighter-rouge\">true</code> or <code class=\"highlighter-rouge\">false</code>. On <code class=\"highlighter-rouge\">true</code>, then <code class=\"highlighter-rouge\">\"authentication\"</code> will contain the “server-first-message” containing the iteration count (<code class=\"highlighter-rouge\">i=</code>), salt (<code class=\"highlighter-rouge\">s=</code>) and a concatenation of the client nonce with its own nonce.</p> <pre data-language=\"\"> {\n     \"success\": true,\n     \"authentication\": \"r=rOprNGfwEbeRWgbNEkqO%hvYDpWUa2RaTCAfuxFIlj)hNlF$k0,\n       s=W22ZaJ0SNY7soEsUEjb6gQ==,i=4096\"\n }\n</pre>  <p>On <code class=\"highlighter-rouge\">false</code>, the server will send an error and error code.</p> <pre data-language=\"\"> {\n     \"success\": false,\n     \"error\": \"You mucked up.\",\n     \"error_code\": 12\n }\n</pre>  <p>A <code class=\"highlighter-rouge\">ReqlAuthError</code> should be thrown if the error code is between 10 and 20 (inclusive).</p> </li> <li> <p>The client sends the null-terminated JSON “client-final-message” with the same nonce and the ClientProof computed as specified by the RFC.</p> <pre data-language=\"\"> {\n     \"authentication\": \"c=biws,r=rOprNGfwEbeRWgbNEkqO%hvYDpWUa2RaTCAfuxFIlj)hNlF$k0,\n       p=dHzbZapWIk4jUhN+Ute9ytag9zjfMHgsqmmiz7AndVQ=\"\n }\n</pre>  </li> <li> <p>The server sends a null-terminated JSON response with a <code class=\"highlighter-rouge\">\"success\"</code> value of either <code class=\"highlighter-rouge\">true</code> or <code class=\"highlighter-rouge\">false</code>. On <code class=\"highlighter-rouge\">true</code>, then <code class=\"highlighter-rouge\">\"authentication\"</code> will contain the “server-final-message” with the ServerSignature value. The client should compute a ServerSignature as specified in the RFC and verify the values are identical.</p> <pre data-language=\"\"> {\n     \"success\": true,\n     \"authentication\": \"v=6rriTRBi23WpRR/wtup+mMhUZUn/dB5nLTJRsjl95G4=\"\n }\n</pre>  <p>On <code class=\"highlighter-rouge\">false</code>, the server will send an error and error code as above.</p> </li> </ol> <p><strong>Note:</strong> It is possible to optimize the handshake by sending message #3 immediately after #1 without waiting for the server response, and read messages #2 and #4 afterward, handling them as appropriate.</p> <h3 id=\"versions-v03-and-v04\">Versions V0_3 and V0_4</h3> <p><em><strong>Note:</strong> these versions do not support RethinkDB users and permissions, and may be deprecated in a future release. When communicating with RethinkDB 2.3 or later, the authentication key will be compared to the admin user account password.</em></p> <ol> <li>Send the protocol version, as a 32-bit little-endian integer (4 bytes). <em>Note:</em> All instructions below assume a protocol of <code class=\"highlighter-rouge\">V0_3</code> or higher. The current protocol as of RethinkDB 2.0 is <code class=\"highlighter-rouge\">V0_4</code>.</li> <li>Send the length of the authorization key, as a 32-bit little-endian integer (4 bytes). Send <code class=\"highlighter-rouge\">0</code> if there is no authorization key.</li> <li>Send the authorization key as an ASCII string. <em>If there is no authorization key, skip this step.</em>\n</li> <li>Send the protocol type, as a 32-bit little-endian integer (4 bytes). Protocol types are defined in the <code class=\"highlighter-rouge\">Protocol</code> enum in <code class=\"highlighter-rouge\">ql2.proto</code>. New drivers should use JSON, <code class=\"highlighter-rouge\">0x7e6970c7</code>.</li> </ol> <p>The server will respond with a <code class=\"highlighter-rouge\">null</code>-terminated ASCII string describing the result of the handshake. If the string is <code class=\"highlighter-rouge\">\"SUCCESS\"</code>, the client may proceed to stage 2 and begin sending queries. Any other string indicates an error. The server will close the connection, and the driver should report this error to the user.</p> <h3 id=\"example-1-no-auth-key\">Example 1: No auth key</h3> <table> <thead> <tr> <th>Step</th> <th>Direction</th> <th>Element</th> <th>Bytes</th> </tr> </thead> <tbody> <tr> <td>1</td> <td>SEND</td> <td><code class=\"highlighter-rouge\">V0_4</code></td> <td><code class=\"highlighter-rouge\">20 2d 0c 40</code></td> </tr> <tr> <td>2</td> <td>SEND</td> <td>key size</td> <td><code class=\"highlighter-rouge\">00 00 00 00</code></td> </tr> <tr> <td>3</td> <td>SEND</td> <td>auth key</td> <td> </td> </tr> <tr> <td>4</td> <td>SEND</td> <td>JSON</td> <td><code class=\"highlighter-rouge\">c7 70 69 7e</code></td> </tr> <tr> <td>5</td> <td>RECV</td> <td>success</td> <td><code class=\"highlighter-rouge\">53 55 43 43 45 53 53</code></td> </tr> </tbody> </table> <h3 id=\"example-2-auth-key\">Example 2: Auth key</h3> <table> <thead> <tr> <th>Step</th> <th>Direction</th> <th>Element</th> <th>Bytes</th> </tr> </thead> <tbody> <tr> <td>1</td> <td>SEND</td> <td><code class=\"highlighter-rouge\">V0_4</code></td> <td><code class=\"highlighter-rouge\">20 2d 0c 40</code></td> </tr> <tr> <td>2</td> <td>SEND</td> <td>key size</td> <td><code class=\"highlighter-rouge\">07 00 00 00</code></td> </tr> <tr> <td>3</td> <td>SEND</td> <td>auth key</td> <td><code class=\"highlighter-rouge\">68 75 6e 74 65 72 32</code></td> </tr> <tr> <td>4</td> <td>SEND</td> <td>JSON</td> <td><code class=\"highlighter-rouge\">c7 70 69 7e</code></td> </tr> <tr> <td>5</td> <td>RECV</td> <td>success</td> <td><code class=\"highlighter-rouge\">53 55 43 43 45 53 53</code></td> </tr> </tbody> </table> <h2 id=\"serializing-queries\">Serializing queries</h2> <p>Your driver should assign each query a unique 8-byte token per connection. (The official RethinkDB drivers implement this as an unsigned 8-byte little-endian counter per connection.) The server will send responses to queries using this token as an identifier so the response can be matched to its query. The token can also be used to request more data for the query if all the results were not returned in the first response.</p> <h3 id=\"a-simple-example\">A simple example</h3> <p>The next section will explain how to build complex queries. For now, we will just send the string <code class=\"highlighter-rouge\">\"foo\"</code> (<code class=\"highlighter-rouge\">r.expr(\"foo\")</code>) to the server.</p> <p>Sending a query to the server takes the following steps:</p> <ul> <li>Serialize the query as UTF8-encoded JSON</li> <li>Send the following data to the server: <ul> <li>The 8-byte unique query token</li> <li>The size of the JSON-serialized, UTF8-encoded query, as a 4-byte little-endian integer</li> <li>The wrapped query message (QueryType, serialized query and options)</li> </ul> </li> </ul> <p>The wrapped query message sent to the server is an array of three elements:</p> <pre data-language=\"\">[ QueryType, query, options ]\n</pre>  <p>The next section will go into more detail, but in our example the <code class=\"highlighter-rouge\">QueryType</code> is <code class=\"highlighter-rouge\">1</code> (or <code class=\"highlighter-rouge\">START</code>, as we’ll see later), the <code class=\"highlighter-rouge\">query</code> is simply the string <code class=\"highlighter-rouge\">\"foo\"</code> and there are no options.</p> <pre data-language=\"\">[ 1, \"foo\", {} ]\n</pre>  <p>So, the data we send to the server is as follows:</p> <table> <thead> <tr> <th>Step</th> <th>Element</th> <th>Transmitted bytes</th> </tr> </thead> <tbody> <tr> <td>1</td> <td>query token</td> <td><code class=\"highlighter-rouge\">00 00 00 00 00 00 00 01</code></td> </tr> <tr> <td>2</td> <td>length</td> <td><code class=\"highlighter-rouge\">0c 00 00 00</code></td> </tr> <tr> <td>3</td> <td>query</td> <td><code class=\"highlighter-rouge\">[1,\"foo\",{}]</code></td> </tr> </tbody> </table> <p>Once the query is sent, you can read the response object back from the server. The response object takes the following form:</p> <ul> <li>The 8-byte unique query token</li> <li>The length of the response, as a 4-byte little-endian integer</li> <li>The JSON-encoded response</li> </ul> <table> <thead> <tr> <th>Step</th> <th>Element</th> <th>Bytes on wire</th> </tr> </thead> <tbody> <tr> <td>1</td> <td>query token</td> <td><code class=\"highlighter-rouge\">00 00 00 00 00 00 00 01</code></td> </tr> <tr> <td>2</td> <td>length</td> <td><code class=\"highlighter-rouge\">13 00 00 00</code></td> </tr> <tr> <td>3</td> <td>response</td> <td><code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"s2\">\"t\"</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"s2\">\"r\"</span><span class=\"p\">:[</span><span class=\"s2\">\"foo\"</span><span class=\"p\">]}</span></code></td> </tr> </tbody> </table> <p>When you parse the response string as JSON, you get the object:</p> <pre data-language=\"\">{\n    t: 1,         // protodef.Response.ResponseType.SUCCESS_ATOM\n    r: [\"foo\"]    // the response is the string 'foo\"\n}\n</pre>  <p>Where <code class=\"highlighter-rouge\">t:1</code> means that the response is a value, and <code class=\"highlighter-rouge\">r: [\"foo\"]</code> the string <code class=\"highlighter-rouge\">\"foo\"</code>.</p> <h3 id=\"queries-in-detail\">Queries in detail</h3> <p>ReQL is a <a href=\"http://en.wikipedia.org/wiki/Domain-specific_language\">domain specific language</a> expressed in the host language. The three official drivers follow a very similar syntax; you should stick to that model as closely as your chosen language allows. Typically you are free to use either a prefix or infix notation, or mix the two.</p> <p>Internally, queries are represented as trees. A query of:</p> <pre data-language=\"\">r.db(\"blog\").table(\"users\").filter({name: \"Michel\"})\n</pre>  <p>is represented by this tree:</p> <p><img alt=\"Query tree illustration\" src=\"https://rethinkdb.com/assets/images/docs/query_tree.png\"></p> <h4 id=\"reql-commands\">ReQL commands</h4> <p>ReQL commands are represented as a list of two or three elements.</p> <pre data-language=\"\">[&lt;command&gt;, [&lt;arguments&gt;], {&lt;options&gt;}]\n</pre>  <ul> <li>\n<code class=\"highlighter-rouge\">&lt;command&gt;</code> is the integer representing the command, from <code class=\"highlighter-rouge\">ql2.proto</code>\n</li> <li>\n<code class=\"highlighter-rouge\">&lt;arguments&gt;</code> is a list of all arguments. Each argument is itself a query (a command list, or data).</li> <li>\n<code class=\"highlighter-rouge\">&lt;options&gt;</code> are the command’s optional arguments. This element may be left out if the command has no optional arguments given.</li> </ul> <p>Thus, this is how our previous query is represented:</p> <pre data-language=\"\">r.db(\"blog\").table(\"users\").filter({name: \"Michel\"});\n\nFILTER = 39     // from ql2.proto\nTABLE = 15\nDB = 14\n\nr.db(\"blog\") =&gt;\n    [14, [\"blog\"]]\n\nr.db(\"blog\").table(\"users\") =&gt;\n    [15, [[14, [\"blog\"]], \"users\"]]\n\nr.db(\"blog\").table(\"users\").filter({name: \"Michel\"}) =&gt;\n    [39, [[15, [[14, [\"blog\"]], \"users\"]], {\"name\": \"Michel\"}]]\n</pre>  <h4 id=\"implementation-considerations\">Implementation considerations</h4> <p>If you want to use a prefix notation, you just need to implement all the commands on a module. If you want to use an infix notation, you should implement all the functions on a class “term” and some prefix commands on the module.</p> <p>You can only check arity of the methods to a certain extent. If an <code class=\"highlighter-rouge\">ARGS</code> term is one of the argument, only the server can effectively verify that enough arguments are provided (or not too many). The arity errors reported by the server suppose a prefix notation. Things may change if the solution in <a href=\"https://github.com/rethinkdb/rethinkdb/issues/2463#issuecomment-44584491\">#2463</a> is implemented.</p> <h4 id=\"reql-data\">ReQL data</h4> <p>A <em>datum</em> (the singular of data) is any value that can be represented in JSON: booleans, numbers, strings, objects, arrays and <code class=\"highlighter-rouge\">null</code>. They are sent to the server in JSON form.</p> <p>Arrays, however, are a special case: since ReQL commands (as described above) are sent as arrays, you must send data arrays as arguments to the <code class=\"highlighter-rouge\">MAKE_ARRAY</code> command. So the array</p> <pre data-language=\"\">[10, 20, 30]\n</pre>  <p>Would be sent to the server as</p> <pre data-language=\"\">// MAKE_ARRAY = 2 (from ql2.proto)\n\n[2, [10, 20, 30]]\n</pre>  <h4 id=\"reql-pseudo-types\">ReQL pseudo types</h4> <p>Some native ReQL data types have no direct JSON representations. These are implemented as <em>pseudo types,</em> JSON objects with the special key <code class=\"highlighter-rouge\">$reql_type$</code>. The three official ReQL drivers convert date and binary types to pseudo types.</p> <p><strong>Date pseudo type</strong></p> <pre data-language=\"\">{\n    $reql_type: \"TIME\",\n    epoch_time: &lt;timestamp&gt;,\n    timezone: &lt;string&gt;\n}\n</pre>  <p>The <code class=\"highlighter-rouge\">epoch_time</code> field is a Unix timestamp, the number of seconds since January 1st, 1970, with millisecond precision. The <code class=\"highlighter-rouge\">timezone</code> field is a string in the format <code class=\"highlighter-rouge\">[+-]HH:MM</code>, indicating the offset from UTC. UTC is <code class=\"highlighter-rouge\">+00:00</code>; PST is <code class=\"highlighter-rouge\">-08:00</code>; and so on.</p> <p><strong>Binary pseudo type</strong></p> <pre data-language=\"\">{\n    $reql_type$: \"BINARY\",\n    data: &lt;string&gt;\n}\n</pre>  <p>The <code class=\"highlighter-rouge\">data</code> field is a Base64-encoded string of the binary object.</p> <h4 id=\"anonymous-functions\">Anonymous functions</h4> <p>A <a href=\"http://www.rethinkdb.com/blog/lambda-functions/\" title=\"All about lambda functions in RethinkDB queries\">good article</a> by <a href=\"https://github.com/wmrowan\">Bill Rowan</a> explains anonymous functions (or lambda functions) in the drivers. The article covers why anonymous functions are useful and how they work. Here, we’ll just focus on how to serialize anonymous functions.</p> <p>When the driver finds an anonymous function, it returns a query object like this one:</p> <pre data-language=\"\">// FUNC = 69, MAKE_ARRAY = 2 (from ql2.proto)\n\n[69, [[2, [p1, p2, ...]], function body]]\n</pre>  <p>The parameters are represented as values <code class=\"highlighter-rouge\">&lt;p1&gt;</code>, <code class=\"highlighter-rouge\">&lt;p2&gt;</code>, etc.; the values are arbitrary, but must be unique per query to avoid collisions. Within the function body the values are referred to with the query term <code class=\"highlighter-rouge\">VAR</code>, defined as <code class=\"highlighter-rouge\">10</code> in <code class=\"highlighter-rouge\">ql2.proto</code>. So the value of parameter <code class=\"highlighter-rouge\">1</code> is retrieved with <code class=\"highlighter-rouge\">[10, [1]]</code>.</p> <p>Take the function:</p> <pre data-language=\"\">function(x, y, z) {\n    return r.add(x, y, z)\n}\n</pre>  <p>The function would be serialized as:</p> <pre data-language=\"\">[FUNC, \n [[MAKE_ARRAY, [1, 2, 3]],\n   [ADD,\n    [[VAR, [1]],\n     [VAR, [2]],\n     [VAR, [3]]]]]]\n\n// FUNC = 69, MAKE_ARRAY = 2, ADD = 24, VAR = 10 (from ql2.proto)\n\n[69, [[2, [1, 2, 3]], [24, [[10, [1]], [10, [2]], [10, [3]]]]]]\n</pre>  <h4 id=\"implementation-details\">Implementation details</h4> <p>Serializing functions depends heavily on your driver’s language. The JavaScript driver does it this way:</p> <ul> <li>Look at how many arguments the function takes (<code class=\"highlighter-rouge\">num_args</code>)</li> <li>Create that many <code class=\"highlighter-rouge\">VAR</code> terms</li> <li>Call the function with those terms</li> <li>Serialize the result as the function body</li> </ul> <p>If your driver uses infix notation, you must make sure that the <code class=\"highlighter-rouge\">VAR</code> term implements all the ReQL methods.</p> <h4 id=\"serializing-implicitvar-rrow\">Serializing IMPLICIT_VAR (r.row)</h4> <p>The <code class=\"highlighter-rouge\">IMPLICIT_VAR</code> term is equivalent to the <a href=\"https://rethinkdb.com/api/python/row\">row</a> command in the official JavaScript and Python drivers. It’s useful for languages where anonymous functions are too verbose.</p> <p>If you support <code class=\"highlighter-rouge\">IMPLICIT_VAR</code> in your driver, then every time you parse the argument of a function you should check if the method can take a function. If it can, you should look for an <code class=\"highlighter-rouge\">IMPLICIT_VAR</code> term (i.e., <code class=\"highlighter-rouge\">row</code>). If you find one, wrap the argument in a function that takes one parameter:</p> <pre data-language=\"\">[69, [[2, [1]], argument]]\n</pre>  <p>If you do not find one, treat the argument normally.</p> <p>In the case of nested functions, the <code class=\"highlighter-rouge\">IMPLICIT_VAR</code> term is ambiguous, and should not be used. Your driver should either throw an error or let the server return an error.</p> <h4 id=\"serializing-binary\">Serializing BINARY</h4> <p>Binary objects created with <code class=\"highlighter-rouge\">r.binary</code> can be serialized in two different ways.</p> <p>If the argument is a ReQL term (not including a datum), serialize it using the standard term:</p> <pre data-language=\"\">[BINARY, argument]\n</pre>  <p>If the language’s native binary format is used, use the pseudotype serialization described above.</p> <pre data-language=\"\">{\n    $reql_type$: \"BINARY\",\n    data: &lt;base64 string&gt;\n}\n</pre>  <h4 id=\"serializing-funcall-rdo\">Serializing FUNCALL (r.do)</h4> <p>The <code class=\"highlighter-rouge\">r.do()</code> command is serialized with the <code class=\"highlighter-rouge\">FUNCALL</code> term.</p> <pre data-language=\"\">[FUNCALL, [function], arguments]\n</pre>  <p>Take the <code class=\"highlighter-rouge\">do</code> command:</p> <pre data-language=\"\">r.do(10, 20, function (x, y) {\n  return r.add(x, y);\n})\n</pre>  <p>This would be serialized as:</p> <pre data-language=\"\">[FUNCALL,\n  [FUNC,\n    [[MAKE_ARRAY, [1, 2]],\n      [ADD,\n        [[VAR, [1]],\n         [VAR, [2]]]]]],\n  10,\n  20]\n\n// FUNCALL = 64, FUNC = 69, MAKE_ARRAY = 2, ADD = 24, VAR = 10\n\n[64, [69, [[2, [1, 2]], [24, [[10, [1]], [10, [2]]]]]], 10, 20]\n</pre>  <p>Note that while <code class=\"highlighter-rouge\">r.do()</code> takes the function as its <em>last</em> argument, <code class=\"highlighter-rouge\">FUNCALL</code> serializes the function as its <em>first</em> argument.</p> <h2 id=\"send-the-message\">Send the message</h2> <p>Because you can keep chaining commands (or calling them in prefix notation), you need a command to signify the end of the chain and send the query to the server. This command is <code class=\"highlighter-rouge\">run</code> in the official drivers.</p> <h3 id=\"wrapping-queries\">Wrapping queries</h3> <p>Once the <a href=\"https://rethinkdb.com/api/python/run\">run</a> command is processed, the serialized query needs to be wrapped in the message sent to the server. The complete message takes the form:</p> <pre data-language=\"\">[ QueryType, query, options ]\n</pre>  <p>The query types are defined in <code class=\"highlighter-rouge\">ql2.proto</code>. When a query is first sent to the server, it will be sent with a <code class=\"highlighter-rouge\">QueryType</code> of <code class=\"highlighter-rouge\">START</code> (<code class=\"highlighter-rouge\">1</code>). The options (sometimes referred to as “global optargs”) are options passed to the <code class=\"highlighter-rouge\">run</code> command itself; see the <a href=\"https://rethinkdb.com/api/python/run\">run documentation</a> for a complete list. (Commands sent to the server are snake_case, not camelCase.)</p> <p>The full list of <code class=\"highlighter-rouge\">QueryType</code> values is as follows:</p> <ul> <li>\n<code class=\"highlighter-rouge\">1</code> <code class=\"highlighter-rouge\">START</code>: Start a new query.</li> <li>\n<code class=\"highlighter-rouge\">2</code> <code class=\"highlighter-rouge\">CONTINUE</code>: Continue a query that returned <code class=\"highlighter-rouge\">SUCCESS_PARTIAL</code> (see <a href=\"#receive-responses\">Receive responses</a>).</li> <li>\n<code class=\"highlighter-rouge\">3</code> <code class=\"highlighter-rouge\">STOP</code>: Stop a query that is still executing.</li> <li>\n<code class=\"highlighter-rouge\">4</code> <code class=\"highlighter-rouge\">NOREPLY_WAIT</code>: Wait for noreply operations to finish. The server will return a <code class=\"highlighter-rouge\">WAIT_COMPLETE</code> response.</li> <li>\n<code class=\"highlighter-rouge\">5</code> <code class=\"highlighter-rouge\">SERVER_INFO</code>: Ask for server information. The server will return a <code class=\"highlighter-rouge\">SERVER_INFO</code> response.</li> </ul> <p><code class=\"highlighter-rouge\">CONTINUE</code> and <code class=\"highlighter-rouge\">STOP</code> should be sent on the same connection with the same token generated for that query’s <code class=\"highlighter-rouge\">START</code> message.</p> <h3 id=\"sending-queries\">Sending queries</h3> <p>To recap, sending a query to the server takes the following steps:</p> <ul> <li>Serialize the query as UTF8-encoded JSON</li> <li>Send the following data to the server: <ul> <li>The 8-byte unique query token</li> <li>The size of the JSON-serialized, UTF8-encoded wrapped query, as a 4-byte little-endian integer</li> <li>The wrapped query message (QueryType, serialized query and options)</li> </ul> </li> </ul> <p>The token is a unique integer per connection. Keeping a counter per connection is a simple way to implement it.</p> <p>So, our initial example query of:</p> <pre data-language=\"\">r.db(\"blog\").table(\"users\").filter({name: \"Michel\"})\n</pre>  <p>is sent as follows on the wire:</p> <table> <thead> <tr> <th>Step</th> <th>Semantic command</th> <th>Transmitted</th> </tr> </thead> <tbody> <tr> <td>1</td> <td>query token</td> <td><code class=\"highlighter-rouge\">00 00 00 00 00 00 00 01</code></td> </tr> <tr> <td>2</td> <td>length</td> <td><code class=\"highlighter-rouge\">3C 00 00 00</code></td> </tr> <tr> <td>3</td> <td>query</td> <td><code class=\"highlighter-rouge\">[1,[39,[[15,[[14,[\"blog\"]],\"users\"]],{\"name\":\"Michel\"}]],{}]</code></td> </tr> </tbody> </table> <h3 id=\"wrapping-the-db-query-option\">Wrapping the DB query option</h3> <p>If the <code class=\"highlighter-rouge\">db</code> option is passed to the <code class=\"highlighter-rouge\">run</code> command, its value must be a <code class=\"highlighter-rouge\">DB</code> term. The query:</p> <pre data-language=\"\">r.table(\"users\").run({db: \"blog\"});\n</pre>  <p>should be sent as as if the argument to <code class=\"highlighter-rouge\">db</code> was <code class=\"highlighter-rouge\">r.db(\"blog\")</code>:</p> <pre data-language=\"\">[1,[15,[\"users\"]],{\"db\":[14,[\"blog\"]]}]\n</pre>  <h2 id=\"receive-responses\">Receive responses</h2> <p>Responses from the server take the following form:</p> <ul> <li>The 8-byte unique query token the response corresponds to</li> <li>The size of the JSON-encoded response, as a 4-byte little-endian integer</li> <li>The JSON-encoded <code class=\"highlighter-rouge\">Response</code> object</li> </ul> <p>The <code class=\"highlighter-rouge\">Response</code> object will have the following fields:</p> <ul> <li>\n<code class=\"highlighter-rouge\">t</code>: the <code class=\"highlighter-rouge\">ResponseType</code>, as defined in <code class=\"highlighter-rouge\">ql2.proto</code>\n</li> <li>\n<code class=\"highlighter-rouge\">r</code>: data from the result, as a JSON array</li> <li>\n<code class=\"highlighter-rouge\">b</code>: a backtrace if <code class=\"highlighter-rouge\">t</code> is an error type; this field will not be present otherwise</li> <li>\n<code class=\"highlighter-rouge\">p</code>: a profile if the global optarg <code class=\"highlighter-rouge\">profile: true</code> was specified; this field will not be present otherwise</li> <li>\n<code class=\"highlighter-rouge\">n</code>: an optional array of <code class=\"highlighter-rouge\">ResponseNote</code> values, as defined in <code class=\"highlighter-rouge\">ql2.proto</code>\n</li> </ul> <h3 id=\"response-types\">Response types</h3> <p>These will be numeric values, corresponding to the types in <code class=\"highlighter-rouge\">ql2.proto</code>.</p> <ul> <li>\n<code class=\"highlighter-rouge\">1</code> <code class=\"highlighter-rouge\">SUCCESS_ATOM</code>: The whole query has been returned and the result is in the first (and only) element of <code class=\"highlighter-rouge\">r</code>.</li> <li>\n<code class=\"highlighter-rouge\">2</code> <code class=\"highlighter-rouge\">SUCCESS_SEQUENCE</code>: Either the whole query has been returned in <code class=\"highlighter-rouge\">r</code>, or the last section of a multi-response query has been returned.</li> <li>\n<code class=\"highlighter-rouge\">3</code> <code class=\"highlighter-rouge\">SUCCESS_PARTIAL</code>: The query has returned a stream, which may or may not be complete. To retrieve more results for the query, send a <code class=\"highlighter-rouge\">CONTINUE</code> message (see below).</li> <li>\n<code class=\"highlighter-rouge\">4</code> <code class=\"highlighter-rouge\">WAIT_COMPLETE</code>: This <code class=\"highlighter-rouge\">ResponseType</code> indicates all queries run in <code class=\"highlighter-rouge\">noreply</code> mode have finished executing. <code class=\"highlighter-rouge\">r</code> will be empty.</li> <li>\n<code class=\"highlighter-rouge\">5</code> <code class=\"highlighter-rouge\">SERVER_INFO</code>: The response to a <code class=\"highlighter-rouge\">SERVER_INFO</code> request. The data will be in the first (and only) element of <code class=\"highlighter-rouge\">r</code>.</li> <li>\n<code class=\"highlighter-rouge\">16</code> <code class=\"highlighter-rouge\">CLIENT_ERROR</code>: The server failed to run the query due to a bad client request. The error message will be in the first element of <code class=\"highlighter-rouge\">r</code>.</li> <li>\n<code class=\"highlighter-rouge\">17</code> <code class=\"highlighter-rouge\">COMPILE_ERROR</code>: The server failed to run the query due to an ReQL compilation error. The error message will be in the first element of <code class=\"highlighter-rouge\">r</code>.</li> <li>\n<code class=\"highlighter-rouge\">18</code> <code class=\"highlighter-rouge\">RUNTIME_ERROR</code>: The query compiled correctly, but failed at runtime. The error message will be in the first element of <code class=\"highlighter-rouge\">r</code>.</li> </ul> <h3 id=\"response-notes\">Response notes</h3> <p>The <code class=\"highlighter-rouge\">n</code> field, if present, will be an array of one or more <code class=\"highlighter-rouge\">ResponseNote</code> values, giving further information about the kind of the stream being returned. These will be numeric values, corresponding to the notes in <code class=\"highlighter-rouge\">ql2.proto</code>.</p> <p>All of the response notes involve changefeeds; read <a href=\"../changefeeds/java/index\">Changefeeds in RethinkDB</a> for more detailed information.</p> <ul> <li>\n<code class=\"highlighter-rouge\">1</code> <code class=\"highlighter-rouge\">SEQUENCE_FEED</code>: The stream is a changefeed.</li> <li>\n<code class=\"highlighter-rouge\">2</code> <code class=\"highlighter-rouge\">ATOM_FEED</code>: The stream is a <em>point</em> changefeed, i.e., returning changes from a single document.</li> <li>\n<code class=\"highlighter-rouge\">3</code> <code class=\"highlighter-rouge\">ORDER_BY_LIMIT_FEED</code>: The stream is a changefeed generated with an <code class=\"highlighter-rouge\">order_by().limit()</code> query.</li> <li>\n<code class=\"highlighter-rouge\">4</code> <code class=\"highlighter-rouge\">UNIONED_FEED</code>: The stream is a union of multiple changefeed types that cannot be collapsed to a single type, e.g., <code class=\"highlighter-rouge\">r.table('test').changes().union(r.table('test').get(0).changes())</code>.</li> <li>\n<code class=\"highlighter-rouge\">5</code> <code class=\"highlighter-rouge\">INCLUDES_STATES</code>: The stream is a changefeed that includes states notes, e.g., `{state: ‘initializing’}.</li> </ul> <h3 id=\"multipart-responses\">Multipart responses</h3> <p>Streams and feeds are lazily-computed sequences, and return a <code class=\"highlighter-rouge\">ResponseType</code> of <code class=\"highlighter-rouge\">SUCCESS_PARTIAL</code> (<code class=\"highlighter-rouge\">3</code>), with currently available data in the <code class=\"highlighter-rouge\">r</code> array. When the driver receives a feed or stream, it should return a cursor (or an object with a cursor-like interface). <em>N.B.:</em> <code class=\"highlighter-rouge\">SUCCESS_SEQUENCE</code> and <code class=\"highlighter-rouge\">SUCCESS_PARTIAL</code> responses should be both be represented as cursors. Depending on the size of the query results and the time it takes to return them, you may receive either one <code class=\"highlighter-rouge\">SUCCESS_SEQUENCE</code> result, or one or more <code class=\"highlighter-rouge\">SUCCESS_PARTIAL</code> results followed by a final <code class=\"highlighter-rouge\">SUCCESS_SEQUENCE</code> result.</p> <p>To retrieve more data for the cursor, the driver should send a query with a <code class=\"highlighter-rouge\">QueryType</code> of <code class=\"highlighter-rouge\">CONTINUE</code> <em>on the same connection with the same token.</em> As with other queries, this must be sent with the query token, the size of the query, and the query itself, simply <code class=\"highlighter-rouge\">[2]</code>.</p> <table> <thead> <tr> <th>Step</th> <th>Element</th> <th>Transmitted bytes</th> </tr> </thead> <tbody> <tr> <td>1</td> <td>token</td> <td><code class=\"highlighter-rouge\">00 00 00 00 00 00 00 01</code></td> </tr> <tr> <td>2</td> <td>length</td> <td><code class=\"highlighter-rouge\">03 00 00 00</code></td> </tr> <tr> <td>3</td> <td>query</td> <td><code class=\"highlighter-rouge\">[2]</code></td> </tr> </tbody> </table> <p>You will receive another response of either type <code class=\"highlighter-rouge\">SUCCESS_PARTIAL</code>, indicating there is still more data available, or <code class=\"highlighter-rouge\">SUCCESS_SEQUENCE</code> if you have reached the end of the stream. (This will never be returned for a feed.) Note that these <code class=\"highlighter-rouge\">ResponseType</code>s can be returned without data (an empty array as the <code class=\"highlighter-rouge\">r</code> value). A driver can send <code class=\"highlighter-rouge\">CONTINUE</code> to fetch the next batch of a sequence as soon as the response is received.</p> <p>To close a cursor and stop receiving data from the stream or feed, send a query with a <code class=\"highlighter-rouge\">QueryType</code> of <code class=\"highlighter-rouge\">STOP</code> on the same connection with the same token.</p> <h2 id=\"notes-on-connections\">Notes on connections</h2> <p>Starting with RethinkDB 2.0 (<code class=\"highlighter-rouge\">V0_4</code>), the server will process multiple queries in parallel rather than sequentially, and there is no guarantee that a read following a write on the same connection will “see” the results of the write as long as it’s successful. (Previous versions of the server would process multiple queries on the same connection sequentially.)</p> <p>You should not release a connection in the pool as soon as you receive a response. Only release the connection when you receive a response of a type other than <code class=\"highlighter-rouge\">SUCCESS_PARTIAL</code>.</p> <h2 id=\"get-help\">Get help</h2> <p>You can ask questions and get notes on changes introduced in new versions of RethinkDB on the <a href=\"https://groups.google.com/forum/?fromgroups#!forum/rethinkdb-dev\">RethinkDB-Dev Google Group</a>. You can also visit the <a href=\"irc://irc.freenode.org/rethinkdb\">RethinkDB IRC Channel</a>, where core developers and other driver developers frequently hang out. Also, you can ask questions on <a href=\"http://stackoverflow.com/\">Stack Overflow</a> using the tag “<a href=\"http://stackoverflow.com/questions/tagged/rethinkdb\">rethinkdb</a>.”</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/writing-drivers/\" class=\"_attribution-link\">https://rethinkdb.com/docs/writing-drivers/</a>\n  </p>\n</div>\n","api/java/r/index":"<h1 class=\"title\">ReQL command: r</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r → r\n</pre> <h2 id=\"description\">Description</h2> <p>The top-level ReQL namespace.</p> <p><strong>Example:</strong> Set up your top-level namespace.</p> <pre data-language=\"java\">import com.rethinkdb.RethinkDB;\nimport com.rethinkdb.gen.exc.ReqlError;\nimport com.rethinkdb.gen.exc.ReqlQueryLogicError;\nimport com.rethinkdb.model.MapObject;\nimport com.rethinkdb.net.Connection;\n\n\npublic static final RethinkDB r = RethinkDB.r;\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/r/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/r/</a>\n  </p>\n</div>\n","api/java/close/index":"<h1 class=\"title\">ReQL command: close</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">conn.close([boolean])\n</pre> <h2 id=\"description\">Description</h2> <p>Close an open connection.</p> <p>Closing a connection normally waits until all outstanding requests have finished and then frees any open resources associated with the connection. By passing <code class=\"highlighter-rouge\">false</code> as the boolean argument to <code class=\"highlighter-rouge\">close</code>, the connection will be closed immediately, possibly aborting any outstanding noreply writes.</p> <p>A noreply query is executed by using the <a href=\"../run_noreply/index\">runNoReply</a> command, indicating that the command should not wait for the query to complete before returning. You may also explicitly wait for a noreply query to complete by using the <a href=\"../noreply_wait/index\">noreplyWait</a> command.</p> <p><strong>Example:</strong> Close an open connection, waiting for noreply writes to finish.</p> <pre data-language=\"java\">conn.close();\n</pre>  <p><strong>Example:</strong> Close an open connection immediately.</p> <pre data-language=\"java\">conn.close(false);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../connect/index\">connect</a></li> <li><a href=\"../use/index\">use</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/close/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/close/</a>\n  </p>\n</div>\n","api/java/reconnect/index":"<h1 class=\"title\">ReQL command: reconnect</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">conn.reconnect([boolean, timeout])\n</pre> <h2 id=\"description\">Description</h2> <p>Close and reopen a connection.</p> <p>Closing a connection normally waits until all outstanding requests have finished and then frees any open resources associated with the connection. By passing <code class=\"highlighter-rouge\">false</code> as an optional boolean argument to <code class=\"highlighter-rouge\">reconnect</code>, the connection will be closed immediately, possibly aborting any outstanding noreply writes. An optional second argument is a (long integer) timeout indicating how long you would like <code class=\"highlighter-rouge\">reconnect</code> to wait before closing the existing connection.</p> <p>A noreply query is executed by using the <a href=\"../run_noreply/index\">runNoReply</a> command, indicating that the command should not wait for the query to complete before returning. You may also explicitly wait for a noreply query to complete by using the <a href=\"../noreply_wait/index\">noreplyWait</a> command.</p> <p><strong>Example:</strong> Cancel outstanding requests/queries that are no longer needed.</p> <pre data-language=\"java\">conn.reconnect(false);\n</pre>  <p><strong>Example:</strong> Wait up to 5 seconds for outstanding requests to finish before reconnecting.</p> <pre data-language=\"java\">conn.reconnect(true, 5);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../connect/index\">connect</a></li> <li><a href=\"../use/index\">use</a></li> <li><a href=\"../close/index\">close</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/reconnect/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/reconnect/</a>\n  </p>\n</div>\n","api/java/use/index":"<h1 class=\"title\">ReQL command: use</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">conn.use(dbName)\n</pre> <h2 id=\"description\">Description</h2> <p>Change the default database on this connection.</p> <p><strong>Example:</strong> Change the default database so that we don’t need to specify the database when referencing a table.</p> <pre data-language=\"java\">conn.use(\"marvel\");\nr.table(\"heroes\").run(conn);  // refers to r.db(\"marvel\").table(\"heroes\")\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../connect/index\">connect</a></li> <li><a href=\"../reconnect/index\">reconnect</a></li> <li><a href=\"../close/index\">close</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/use/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/use/</a>\n  </p>\n</div>\n","api/java/noreply_wait/index":"<h1 class=\"title\">ReQL command: noreplyWait</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">conn.noreplyWait()\n</pre> <h2 id=\"description\">Description</h2> <p>Ensure that previous queries executed with <a href=\"../run_noreply/index\">runNoReply</a> have been processed by the server. Note that this guarantee only apples to queries run on the same connection.</p> <p><strong>Example:</strong> We have previously executed queries with <code class=\"highlighter-rouge\">runNoReply</code>. Now wait until the server has processed them.</p> <pre data-language=\"java\">conn.noreplyWait();\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../run/index\">run</a></li> <li><a href=\"../sync/index\">sync</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/noreply_wait/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/noreply_wait/</a>\n  </p>\n</div>\n","api/java/server/index":"<h1 class=\"title\">ReQL command: server</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">conn.server()\n</pre> <h2 id=\"description\">Description</h2> <p>Return information about the server being used by a connection.</p> <p>The <code class=\"highlighter-rouge\">server</code> command returns either two or three fields:</p> <ul> <li>\n<code class=\"highlighter-rouge\">id</code>: the UUID of the server the client is connected to.</li> <li>\n<code class=\"highlighter-rouge\">proxy</code>: a boolean indicating whether the server is a <a href=\"../../../docs/sharding-and-replication/index#running-a-proxy-node\">RethinkDB proxy node</a>.</li> <li>\n<code class=\"highlighter-rouge\">name</code>: the server name. If <code class=\"highlighter-rouge\">proxy</code> is <code class=\"highlighter-rouge\">true</code>, this field will not be returned.</li> </ul> <p><strong>Example:</strong> Return server information.</p> <pre data-language=\"java\">conn.server();\n</pre>  <pre data-language=\"java\">{\n    \"id\": \"404bef53-4b2c-433f-9184-bc3f7bda4a15\",\n    \"name\": \"amadeus\",\n    \"proxy\": false\n}\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/server/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/server/</a>\n  </p>\n</div>\n","api/java/optarg/index":"<h1 class=\"title\">ReQL command: optArg</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">term.optArg(option, value)\n</pre> <h2 id=\"description\">Description</h2> <p>Specify an optional argument to a Java ReQL term.</p> <p>Some terms in ReQL accept optional arguments. Since Java doesn’t support named arguments, the RethinkDB Java driver allows you to pass them by chaining the <code class=\"highlighter-rouge\">optArg</code> command after them.</p> <p><strong>Example:</strong> Pass the <code class=\"highlighter-rouge\">right_bound</code> optional argument to <a href=\"../between/index\">between</a>.</p> <pre data-language=\"java\">r.table(\"marvel\").between(10, 20).optArg(\"right_bound\", \"closed\").run(conn);\n</pre>  <p>To pass more than one optional argument, chain <code class=\"highlighter-rouge\">optArg</code> once for each argument.</p> <p><strong>Example:</strong> Pass the <code class=\"highlighter-rouge\">right_bound</code> and <code class=\"highlighter-rouge\">index</code> optional arguments to <a href=\"../between/index\">between</a>.</p> <pre data-language=\"java\">r.table(\"marvel\").between(10, 20).optArg(\"right_bound\", \"closed\")\n .optArg(\"index\", \"power\").run(conn);\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/optarg/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/optarg/</a>\n  </p>\n</div>\n","docs/2-1-5-performance-report/index":"<h1 class=\"title\">RethinkDB 2.1.5 performance &amp; scaling report</h1> <div class=\"toc\">  <ul id=\"markdown-toc\"> <li><a href=\"#a-quick-overview-of-the-results\" id=\"markdown-toc-a-quick-overview-of-the-results\">A quick overview of the results</a></li> <li><a href=\"#selecting-workloads-and-hardware\" id=\"markdown-toc-selecting-workloads-and-hardware\">Selecting workloads and hardware</a></li> <li><a href=\"#hardware\" id=\"markdown-toc-hardware\">Hardware</a></li> <li><a href=\"#configuration\" id=\"markdown-toc-configuration\">Configuration</a></li> <li><a href=\"#detailed-results\" id=\"markdown-toc-detailed-results\">Detailed results</a></li> <li><a href=\"#workload-c\" id=\"markdown-toc-workload-c\">Workload C</a></li> <li><a href=\"#conclusion\" id=\"markdown-toc-conclusion\">Conclusion</a></li> <li><a href=\"#ongoing\" id=\"markdown-toc-ongoing\">Ongoing</a></li> </ul> </div> <p>This report describes a recent effort that the RethinkDB team took to measure our database product, RethinkDB, under different workloads and in different clustering configurations. We seek to provide a general overview of RethinkDB’s performance metrics for a variety of workloads and potential use cases. In this report some of the questions we’ll address include:</p> <ul> <li>What sort of performance can I expect from a RethinkDB cluster?</li> <li>How well does RethinkDB scale?</li> <li>Can I trade consistency for performance?</li> </ul> <p>We’ll attempt to answer these questions by using workloads from the YCSB benchmark suite. You can <a href=\"https://labs.yahoo.com/news/yahoo-cloud-serving-benchmark\">learn more about YCSB here</a>, and <a href=\"https://github.com/rethinkdb/ycsb\">review the source code here</a>. Expanding beyond the YCSB workloads we selected, we created an additional test which investigates scalability for analytic workloads.</p> <p>In the results, we’ll see how RethinkDB scales to perform 1.3 million individual reads per second. We will also demonstrate how RethinkDB performs well above 100 thousand operations per second in a mixed 50:50 read/write workload - while at the full level of durability and data integrity guarantees. We performed all benchmarks across a range of cluster sizes, scaling up from one to 16 nodes.</p> <blockquote class=\"infobox \">\n<p><strong>Note</strong>: This performance report is based on RethinkDB version 2.1.5. It takes a large amount of effort to create a quality performance report that covers multiple use cases. In the future, we plan to update this report for subsequent releases of RethinkDB.</p> </blockquote> <h2 id=\"a-quick-overview-of-the-results\">A quick overview of the results</h2> <p>We found that in a mixed read/write workload, RethinkDB with two servers was able to perform nearly 16K queries per second (QPS) and scaled to almost 120K QPS while in a 16-node cluster. Under a read only workload and synchronous read settings, RethinkDB was able to scale from about 150K QPS on a single node up to over 550K QPS on 16 nodes. Under the same workload, in an asynchronous “outdated read” setting, RethinkDB went from 150K QPS on one server to 1.3M in a 16-node cluster.</p> <p>Finally, we used a MapReduce query to compute word counts across the whole data set. This test evaluates RethinkDB’s scalability for analytic workloads in a simplistic but very common fashion. These types of workloads involve doing information processing on the server itself versus typical single or ranged reads and writes of information processed at the application level.</p> <p>Here we we show how RethinkDB scales up to 16-nodes with these various workloads:</p> <p><img src=\"https://rethinkdb.com/assets/images/docs/performance-report/w-a.png\" alt=\"\"> <img src=\"https://rethinkdb.com/assets/images/docs/performance-report/w-c-sync.png\" alt=\"\"> <img src=\"https://rethinkdb.com/assets/images/docs/performance-report/w-c-async.png\" alt=\"\"> <img src=\"https://rethinkdb.com/assets/images/docs/performance-report/analytical.png\" alt=\"\"></p> <h2 id=\"selecting-workloads-and-hardware\">Selecting workloads and hardware</h2> <p>YCSB comes with a variety of default workloads, but for the purposes of our testing we chose two of them to run against RethinkDB. Out of the YCSB workload options, we chose to run workload A which comprises 50% reads and 50% update operations, and workload C which performs strictly read operations. All documents stored by the YCSB tests contain 10 fields with randomized 100 byte strings as values, with each document totaling about 1 KB in size.</p> <p>We used a port of YCSB based on our official Java driver and intend to submit a pull request for it in the near future. <a href=\"https://github.com/rethinkdb/ycsb\">Our fork is available for review here</a>.</p> <p>Given the ease of scaling RethinkDB clusters across multiple instances, we deemed it necessary to observe performance when moving from a single RethinkDB instance to a larger cluster. We tested all of our workloads on a single instance of RethinkDB up to a 16-node cluster in varying increments of cluster size.</p> <h2 id=\"hardware\">Hardware</h2> <p>In terms of hardware, we used the <a href=\"https://www.rackspace.com/en-us/cloud/servers/onmetal\">OnMetal offerings from Rackspace</a> to run both RethinkDB server and RethinkDB client nodes. We used different hardware configurations for the server and client nodes as shown below:</p> <table> <thead> <tr> <th>1-16 RethinkDB servers</th> <th>8 RethinkDB clients</th> </tr> </thead> <tbody> <tr> <td>Rackspace OnMetal I/O</td> <td>Rackspace OnMetal Compute</td> </tr> <tr> <td>2x Intel Xeon E5-2680 v2 CPU 2.8 GHz (2x10 cores)</td> <td>Intel Xeon E5-2680 v2 CPU 2.8 GHz (10 cores)</td> </tr> <tr> <td>128 GB RAM</td> <td>32 GB RAM</td> </tr> <tr> <td>10Gbps Ethernet</td> <td>10Gbps Ethernet</td> </tr> <tr> <td>Seagate Nytro WarpDrive BLP4-1600 storage</td> <td> </td> </tr> </tbody> </table> <h2 id=\"configuration\">Configuration</h2> <p>At the time of the test, we used RethinkDB 2.1.5 which was compiled from source on Ubuntu 14.04 LTS. During the performance test we used the RethinkDB Java driver with Oracle Java 1.8.0. A full list of configuration settings follows below:</p> <ul> <li>RethinkDB version 2.1.5</li> <li>Ubuntu 14.04</li> <li>RethinkDB cache size set to 64,000 MB per server, otherwise default parameters</li> <li>Oracle Java 1.8.0 on the client nodes</li> <li>The <a href=\"https://github.com/rethinkdb/YCSB/tree/a15e249d6b10147e615ddfaf03672bad35e85e7f\">RethinkDB port of YCSB</a>\n</li> </ul> <h2 id=\"detailed-results\">Detailed results</h2> <h3 id=\"workload-a\">Workload A</h3> <ul> <li>Simulates a mixed read/write workload with equally many writes as reads</li> <li>Query types: 50% single-document read ops, 50% single-document update ops</li> <li>\n<a href=\"https://en.wikipedia.org/wiki/Zipf%27s_law\">Zipfian</a> key access distribution</li> <li>128 client connections per server</li> <li>Data is replicated to two servers, and sharded across all available servers</li> <li>Writes are performed with “hard” durability (wait for data to be on disk on both replicas)</li> <li>Performs 50 million operations in total</li> </ul> <p>Our first workload from YCSB is workload A. It performs an equal number of get and update operations.</p> <p>The data set generated by YCSB consists of 25 million documents, sized at 1 KB each. All data fits into the server cache in this scenario.</p> <p>Reads and writes are performed by eight client servers, with 128 concurrent connections per database server. This means we have 128 connections with just a single RethinkDB server, and 2048 concurrent connections with a 16-node cluster. We used a replication factor of two per table, meaning each document was replicated to two separate servers.</p> <p>RethinkDB achieves a throughput of 14.6K QPS with two servers, and scales near-linearly as servers are added to the cluster.</p> <p><img src=\"https://rethinkdb.com/assets/images/docs/performance-report/w-a.png\" alt=\"\"></p> <p>Latency is also an important metric to measure when testing performance. We found that in a 16-node cluster, the 95th percentile for Workload A query latencies is 26ms.</p> <p><img src=\"https://rethinkdb.com/assets/images/docs/performance-report/w-a-reads-latency.png\" alt=\"\"></p> <h2 id=\"workload-c\">Workload C</h2> <ul> <li>Simulates a read-only workload</li> <li>Query types: Single-document gets</li> <li>Zipfian key access distribution</li> <li>128 client connections per server</li> <li>Data is replicated and sharded across all available servers</li> <li>In the “synchronous” test, we use the default <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"err\">readMode</span><span class=\"p\">:</span><span class=\"err\">”single”</span><span class=\"p\">}</span></code> setting</li> <li>In the “asynchronous” test, reads use the <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"err\">readMode</span><span class=\"p\">:</span><span class=\"err\">”outdated”</span><span class=\"p\">}</span></code> setting</li> <li>Performs 200 million operations in total</li> </ul> <p>This workload exclusively performs read operations to retrieve individual documents from the database (YCSB workload C). In this workload, we use the same setup and data set as workload A above. Reads are also performed identically using 8 client servers with 128 concurrent connections per database server in the cluster.</p> <p>We first tested this workload in the <a href=\"https://www.rethinkdb.com/api/javascript/run/\">default configuration for RethinkDB which forbids stale reads</a>. In this configuration, RethinkDB is able to perform 134.7K QPS on a single server. While the overhead of network communication between the servers becomes visible when increasing the cluster size from one to two servers, adding further servers to the cluster demonstrates the near-linear scalability of RethinkDB, up to over 500K QPS on 16 servers.</p> <p><img src=\"https://rethinkdb.com/assets/images/docs/performance-report/w-c-sync.png\" alt=\"\"></p> <p>As a variation of this workload, we also tested scalability in the outdated read mode. In this mode, we make the compromise of a higher chance of slightly outdated read results for additional performance, as read operations can be handled directly by secondary replicas. A typical application that exemplifies this kind of access pattern would be an asynchronous cache.</p> <p><img src=\"https://rethinkdb.com/assets/images/docs/performance-report/w-c-async.png\" alt=\"\"></p> <p>RethinkDB demonstrates extremely high scalability in this configuration, reaching throughputs of well over a million queries per second. The slightly sub-linear scalability when going from 12 to 16 database servers is caused by the client servers’ CPUs getting saturated at these throughputs.</p> <p>In terms of latency, we found that in a 16-node cluster and forbidding stale reads, the 95th percentile for latency is 3ms. When doing a heavy read workload, a large majority of reads fell between 0ms and 1ms which can be seen in the graph below.</p> <p><img src=\"https://rethinkdb.com/assets/images/docs/performance-report/w-c-reads-latency.png\" alt=\"\"></p> <h3 id=\"analytic-queries\">Analytic queries</h3> <ul> <li>Tests the response time for analytic MapReduce queries involving string operations</li> <li>Query types: Count the total number of sentences over a single field: table.map(r.row(“field0”).split(“.”).count()).sum()</li> <li>We run one query at a time. Results show the average over five runs.</li> </ul> <p>Finally, we demonstrate RethinkDB’s automatic query parallelization. Analytic queries are transparently distributed over servers in the cluster in a MapReduce-style pattern.</p> <p>In this example, we count the number of sentences over the whole data set of 25 million documents based on one of the fields. We use the following exact query which utilizes the map and sum (reduce) functions of ReQL:</p> <pre data-language=\"\">table.map( r.row(\"field0\").split(\".\").count() ).sum()\n</pre>  <p>We run this query five times for every cluster size and then calculate the average runtime. The results table below shows these averages.</p> <table> <thead> <tr> <th>Nodes</th> <th>1</th> <th>2</th> <th>3</th> <th>4</th> <th>8</th> <th>12</th> <th>16</th> </tr> </thead> <tbody> <tr> <td>Query Runtime (seconds)</td> <td>59</td> <td>32</td> <td>23</td> <td>15</td> <td>9.6</td> <td>7.4</td> <td>4.4</td> </tr> </tbody> </table> <p>With a single server, our query takes 59 seconds to complete. The automatic query parallelization in RethinkDB results in practically linear scalability, as the same query is executed in just above 4 seconds on 16 servers. The graph, shown in the results overview section, demonstrates the inverse execution time (queries per second) of the query.</p> <p><img src=\"https://rethinkdb.com/assets/images/docs/performance-report/analytical.png\" alt=\"\"></p> <h2 id=\"conclusion\">Conclusion</h2> <p>We wanted to provide a reasonably comprehensive RethinkDB test that covers a variety of different workloads. We chose to use the YCSB testing framework as a reliable and community-approved means of conducting rigorous testing on our database. We saw that all of the tests resulted in near-linear scalability as we moved from a single RethinkDB instance to a 16 node cluster. Although most of the tests resulted in performance metrics that suggest horizontal scalability, we know that there are plenty of improvements to make as the database evolves.</p> <h2 id=\"ongoing\">Ongoing</h2> <p>Near to the release of this performance report, we are excited to release RethinkDB 2.3 with plenty of new features. Rigorous performance testing, and properly publishing results is a very time-consuming process, but one we will conduct for future releases on an ongoing basis. We plan to publish our next set of metrics during the lifetime of the RethinkDB 2.3 release. We also would like to test RethinkDB performance when scaled to beyond a 16 node cluster during our next testing cycle. Going forward, we will include a summary of previous reports at the end of each report for comparison.</p> <h3 id=\"notes\">Notes</h3> <ul> <li>We were fortunate enough to receive free credits from Rackspace to perform the majority of these tests and are very grateful for their contributions to open source software. All of <a href=\"https://www.rackspace.com/cloud/servers/onmetal\">Rackspace’s OnMetal offerings can be found here</a>.</li> <li>We’d love to answer any questions you have about these tests. Come join us at <a href=\"http://slack.rethinkdb.com\">http://slack.rethinkdb.com</a> and feel free to ask more specific questions we don’t answer here by pinging @danielmewes or @dalanmiller.</li> <li>Recently, the team behind BigchainDB – a scalable blockchain database built on top of RethinkDB – has benchmarked RethinkDB on a 32-server cluster running on Amazon’s EC2. They measured throughput of more than a million writes per second. Their conclusion: “There is linear scaling in write performance with the number of nodes.” The full report is available at <a href=\"https://www.bigchaindb.com/whitepaper/\">https://www.bigchaindb.com/whitepaper/</a>\n</li> <li>We also recently contracted Kyle Kingsbury, known to the Internet as <a href=\"https://twitter.com/aphyr\">@aphyr</a>, as an independent researcher to evaluate RethinkDB. He wrote <a href=\"https://aphyr.com/tags/RethinkDB\">a pair of blog posts</a> on how he tested and confirmed RethinkDB clustering and consistency guarantees.</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/docs/2-1-5-performance-report/\" class=\"_attribution-link\">https://rethinkdb.com/docs/2-1-5-performance-report/</a>\n  </p>\n</div>\n","api/java/connect/index":"<h1 class=\"title\">ReQL command: connection</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.connection() → builder\n</pre> <h2 id=\"description\">Description</h2> <p><img src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/connect_javascript.png\" class=\"api_command_illustration\"></p> <p>Create a new connection to the database server. <code class=\"highlighter-rouge\">connection</code> returns a builder object with the following methods:</p> <ul> <li>\n<code class=\"highlighter-rouge\">hostname()</code>: the host to connect to (default <code class=\"highlighter-rouge\">localhost</code>).</li> <li>\n<code class=\"highlighter-rouge\">port()</code>: the port to connect on (default <code class=\"highlighter-rouge\">28015</code>).</li> <li>\n<code class=\"highlighter-rouge\">dbname()</code>: the default database (default <code class=\"highlighter-rouge\">test</code>).</li> <li>\n<code class=\"highlighter-rouge\">user()</code>: the user account and password to connect as (default <code class=\"highlighter-rouge\">\"admin\", \"\"</code>).</li> <li>\n<code class=\"highlighter-rouge\">timeout()</code>: timeout period in seconds for the connection to be opened (default <code class=\"highlighter-rouge\">20</code>).</li> <li>\n<code class=\"highlighter-rouge\">connect()</code>: instantiate a connection object with the parameters previously passed to the builder.</li> <li>\n<code class=\"highlighter-rouge\">certFile()</code>: a path to an SSL CA certificate.</li> <li>\n<code class=\"highlighter-rouge\">sslContext()</code>: an instance of an <a href=\"https://docs.oracle.com/javase/8/docs/api/javax/net/ssl/SSLContext.html\">SSLContext</a> class to use for SSL connections.</li> </ul> <p>Either <code class=\"highlighter-rouge\">certFile</code> or <code class=\"highlighter-rouge\">sslContext</code> must be supplied to make an SSL connection to the RethinkDB server. Only one should be used.</p> <p>If the connection cannot be established, a <code class=\"highlighter-rouge\">ReqlDriverError</code> will be thrown.</p>  <blockquote class=\"infobox \">\n<p>Using SSL with RethinkDB requires proxy software on the server, such as <a href=\"http://nginx.org/\">Nginx</a>, <a href=\"http://www.haproxy.org/\">HAProxy</a> or an SSL tunnel. RethinkDB will encrypt traffic and verify the CA certification to prevent <a href=\"http://en.wikipedia.org/wiki/Man-in-the-middle_attack\">man-in-the-middle</a> attacks. Consult your proxy’s documentation for more details.</p> <p>Alternatively, you may use RethinkDB’s built-in <a href=\"../../../docs/security/index\">TLS support</a>.</p> </blockquote> <p><strong>Example:</strong> Open a connection using the default host and port, specifying the default database.</p> <pre data-language=\"java\">Connection conn = r.connection().connect();\n</pre>  <p><strong>Example:</strong> Open a new connection, specifying parameters.</p> <pre data-language=\"java\">Connection conn = r.connection()\n    .hostname(\"localhost\")\n    .port(28015)\n    .dbname(\"marvel\")\n    .connect();\n</pre>  <p><strong>Example:</strong> Open a new connection, specifying a user/password combination for authentication.</p> <pre data-language=\"java\">Connection conn = r.connection()\n    .hostname(\"localhost\")\n    .port(28015)\n    .dbname(\"marvel\")\n    .user(\"herofinder\", \"metropolis\")\n    .connect();\n</pre>  <p><strong>Example:</strong> Open a new connection to the database using an SSL proxy.</p> <pre data-language=\"java\">Connection conn = r.connection()\n    .hostname(\"localhost\")\n    .port(28015)\n    .dbname(\"marvel\")\n    .authKey(\"hunter2\")\n    .certFile(\"/path/to/ca.crt\")\n    .connect();\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../use/index\">use</a></li> <li><a href=\"../close/index\">close</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/connect/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/connect/</a>\n  </p>\n</div>\n","api/java/run/index":"<h1 class=\"title\">ReQL command: run</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">query.run(conn)\n</pre> <p><img src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/run.png\" class=\"api_command_illustration\"></p> <h2 id=\"description\">Description</h2> <p>Run a query on a connection, returning either a single JSON result or a cursor, depending on the query.</p> <p>You can pass the following options using <a href=\"../optarg/index\">optArg</a>. Note that unlike other Java ReQL commands, you must create an OptArg object and pass it as an optional second argument to <code class=\"highlighter-rouge\">run</code>:</p> <pre data-language=\"java\">import com.rethinkdb.model.OptArgs;\n\nr.table(\"table\").run(conn, OptArgs.of(\"read_mode\", \"outdated\"));\n\n// for two or more optArgs, use \"with\"\nr.table(\"table\").run(conn,\n    OptArgs.of(\"read_mode\", \"outdated\").with(\"db\", \"database\"));\n</pre>  <ul> <li>\n<code class=\"highlighter-rouge\">read_mode</code>: One of three possible values affecting the consistency guarantee for the query (default: <code class=\"highlighter-rouge\">'single'</code>). <ul> <li>\n<code class=\"highlighter-rouge\">'single'</code> (the default) returns values that are in memory (but not necessarily written to disk) on the primary replica.</li> <li>\n<code class=\"highlighter-rouge\">'majority'</code> will only return values that are safely committed on disk on a majority of replicas. This requires sending a message to every replica on each read, so it is the slowest but most consistent.</li> <li>\n<code class=\"highlighter-rouge\">'outdated'</code> will return values that are in memory on an arbitrarily-selected replica. This is the fastest but least consistent.</li> </ul> </li> <li>\n<code class=\"highlighter-rouge\">time_format</code>: what format to return times in (default: <code class=\"highlighter-rouge\">native</code>). Set this to <code class=\"highlighter-rouge\">raw</code> if you want times returned as JSON objects for exporting.</li> <li>\n<code class=\"highlighter-rouge\">profile</code>: whether or not to return a profile of the query’s execution (default: <code class=\"highlighter-rouge\">false</code>).</li> <li>\n<code class=\"highlighter-rouge\">durability</code>: possible values are <code class=\"highlighter-rouge\">hard</code> and <code class=\"highlighter-rouge\">soft</code>. In soft durability mode RethinkDB will acknowledge the write immediately after receiving it, but before the write has been committed to disk.</li> <li>\n<code class=\"highlighter-rouge\">group_format</code>: what format to return <code class=\"highlighter-rouge\">grouped_data</code> and <code class=\"highlighter-rouge\">grouped_streams</code> in (default: <code class=\"highlighter-rouge\">native</code>). Set this to <code class=\"highlighter-rouge\">raw</code> if you want the raw pseudotype.</li> <li>\n<code class=\"highlighter-rouge\">db</code>: the database to run this query against as a string. The default is the database specified in the <code class=\"highlighter-rouge\">db</code> <a href=\"../connect/index\">connection</a> method (which defaults to <code class=\"highlighter-rouge\">test</code>). The database may also be specified with the <a href=\"../db/index\">db</a> command.</li> <li>\n<code class=\"highlighter-rouge\">array_limit</code>: the maximum numbers of array elements that can be returned by a query (default: 100,000). This affects all ReQL commands that return arrays. Note that it has no effect on the size of arrays being <em>written</em> to the database; those always have an upper limit of 100,000 elements.</li> <li>\n<code class=\"highlighter-rouge\">binary_format</code>: what format to return binary data in (default: <code class=\"highlighter-rouge\">native</code>). Set this to <code class=\"highlighter-rouge\">raw</code> if you want the raw pseudotype.</li> <li>\n<code class=\"highlighter-rouge\">min_batch_rows</code>: minimum number of rows to wait for before batching a result set (default: 8). This is an integer.</li> <li>\n<code class=\"highlighter-rouge\">max_batch_rows</code>: maximum number of rows to wait for before batching a result set (default: unlimited). This is an integer.</li> <li>\n<code class=\"highlighter-rouge\">max_batch_bytes</code>: maximum number of bytes to wait for before batching a result set (default: 1MB). This is an integer.</li> <li>\n<code class=\"highlighter-rouge\">max_batch_seconds</code>: maximum number of seconds to wait before batching a result set (default: 0.5). This is a float (not an integer) and may be specified to the microsecond.</li> <li>\n<code class=\"highlighter-rouge\">first_batch_scaledown_factor</code>: factor to scale the other parameters down by on the first batch (default: 4). For example, with this set to 8 and <code class=\"highlighter-rouge\">max_batch_rows</code> set to 80, on the first batch <code class=\"highlighter-rouge\">max_batch_rows</code> will be adjusted to 10 (80 / 8). This allows the first batch to return faster.</li> </ul> <p><strong>Example:</strong> If you are OK with potentially out of date data from all the tables involved in this query and want potentially faster reads, pass a flag allowing out of date data in an options object. Settings for individual tables will supercede this global setting for all tables in the query.</p> <pre data-language=\"java\">import com.rethinkdb.model.OptArgs;\n\nr.table(\"marvel\").run(conn, OptArgs.of(\"read_mode\", \"outdated\"));\n</pre>  <p><strong>Example:</strong> If you want to specify whether to wait for a write to be written to disk (overriding the table’s default settings), you can set <code class=\"highlighter-rouge\">durability</code> to <code class=\"highlighter-rouge\">hard</code> or <code class=\"highlighter-rouge\">soft</code> in the options.</p> <pre data-language=\"java\">r.table(\"marvel\").insert(r.hashMap(\"superhero\", \"Iron Man\")\n    .with(\"superpower\", \"Arc Reactor\"))\n    .run(conn, OptArgs.of(\"durability\", \"soft\"));\n</pre>  <p><strong>Example:</strong> If you do not want a time object to be converted to a native date object, you can pass a <code class=\"highlighter-rouge\">time_format</code> flag to prevent it (valid flags are “raw” and “native”). This query returns an object with two fields (<code class=\"highlighter-rouge\">epoch_time</code> and <code class=\"highlighter-rouge\">$reql_type$</code>) instead of a <a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/ZonedDateTime.html\">Java 8 ZonedDateTime</a> object.</p> <pre data-language=\"java\">r.now().run(conn, OptArgs.of(\"time_format\", \"raw\"));\n</pre>  <p><strong>Example:</strong> Specify the database to use for the query.</p> <pre data-language=\"java\">for (Object doc : r.table(\"marvel\").run(conn, OptArgs.of(\"db\", \"heroes\")) {\n    System.out.println(doc);\n}\n</pre>  <p>This is equivalent to using the <code class=\"highlighter-rouge\">db</code> command to specify the database:</p> <pre data-language=\"java\">r.db(\"heroes\").table(\"marvel\").run(conn);\n</pre>  <p><strong>Example:</strong> Change the batching parameters for this query.</p> <pre data-language=\"java\">r.table(\"marvel\").run(conn, OptArgs.of(\"max_batch_rows\", 16).with(\"max_batch_bytes\", 2048));\n</pre>  <blockquote class=\"infobox \">\n<p>If you want to send a write and forget about it—that is, not wait for a reply—use the <a href=\"../run_noreply/index\">runNoReply</a> command. (Unlike other official RethinkDB drivers, Java does not support a <code class=\"highlighter-rouge\">noreply</code> option to <code class=\"highlighter-rouge\">run</code> but instead implements a separate term.)</p> </blockquote>  <h2>Related commands</h2> <ul> <li><a href=\"../connect/index\">connect</a></li> <li><a href=\"../run_noreply/index\">runNoReply</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/run/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/run/</a>\n  </p>\n</div>\n","api/java/run_noreply/index":"<h1 class=\"title\">ReQL command: runNoReply</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">query.runNoReply(conn)\n</pre> <p><img src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/run.png\" class=\"api_command_illustration\"></p> <h2 id=\"description\">Description</h2> <p>Run a query on a connection and immediately return, without waiting for any result data to be returned by the server.</p> <p>You can pass the following options using <a href=\"../optarg/index\">optArg</a>. Note that unlike other Java ReQL commands, you must create an OptArg object and pass it as an optional second argument to <code class=\"highlighter-rouge\">run</code>:</p> <pre data-language=\"java\">import com.rethinkdb.model.OptArgs;\n\nr.table(\"table\").runNoReply(conn, OptArgs.of(\"read_mode\", \"outdated\"));\n\n// for two or more optArgs, use \"with\"\nr.table(\"table\").runNoReply(conn,\n    OptArgs.of(\"read_mode\", \"outdated\").with(\"db\", \"database\"));\n</pre>  <ul> <li>\n<code class=\"highlighter-rouge\">read_mode</code>: One of three possible values affecting the consistency guarantee for the query (default: <code class=\"highlighter-rouge\">'single'</code>). <ul> <li>\n<code class=\"highlighter-rouge\">'single'</code> (the default) returns values that are in memory (but not necessarily written to disk) on the primary replica.</li> <li>\n<code class=\"highlighter-rouge\">'majority'</code> will only return values that are safely committed on disk on a majority of replicas. This requires sending a message to every replica on each read, so it is the slowest but most consistent.</li> <li>\n<code class=\"highlighter-rouge\">'outdated'</code> will return values that are in memory on an arbitrarily-selected replica. This is the fastest but least consistent.</li> </ul> </li> <li>\n<code class=\"highlighter-rouge\">time_format</code>: what format to return times in (default: <code class=\"highlighter-rouge\">native</code>). Set this to <code class=\"highlighter-rouge\">raw</code> if you want times returned as JSON objects for exporting.</li> <li>\n<code class=\"highlighter-rouge\">profile</code>: whether or not to return a profile of the query’s execution (default: <code class=\"highlighter-rouge\">false</code>).</li> <li>\n<code class=\"highlighter-rouge\">durability</code>: possible values are <code class=\"highlighter-rouge\">hard</code> and <code class=\"highlighter-rouge\">soft</code>. In soft durability mode RethinkDB will acknowledge the write immediately after receiving it, but before the write has been committed to disk.</li> <li>\n<code class=\"highlighter-rouge\">group_format</code>: what format to return <code class=\"highlighter-rouge\">grouped_data</code> and <code class=\"highlighter-rouge\">grouped_streams</code> in (default: <code class=\"highlighter-rouge\">native</code>). Set this to <code class=\"highlighter-rouge\">raw</code> if you want the raw pseudotype.</li> <li>\n<code class=\"highlighter-rouge\">db</code>: the database to run this query against as a string. The default is the database specified in the <code class=\"highlighter-rouge\">db</code> <a href=\"../connect/index\">connection</a> method (which defaults to <code class=\"highlighter-rouge\">test</code>). The database may also be specified with the <a href=\"../db/index\">db</a> command.</li> <li>\n<code class=\"highlighter-rouge\">array_limit</code>: the maximum numbers of array elements that can be returned by a query (default: 100,000). This affects all ReQL commands that return arrays. Note that it has no effect on the size of arrays being <em>written</em> to the database; those always have an upper limit of 100,000 elements.</li> <li>\n<code class=\"highlighter-rouge\">binary_format</code>: what format to return binary data in (default: <code class=\"highlighter-rouge\">native</code>). Set this to <code class=\"highlighter-rouge\">raw</code> if you want the raw pseudotype.</li> <li>\n<code class=\"highlighter-rouge\">min_batch_rows</code>: minimum number of rows to wait for before batching a result set (default: 8). This is an integer.</li> <li>\n<code class=\"highlighter-rouge\">max_batch_rows</code>: maximum number of rows to wait for before batching a result set (default: unlimited). This is an integer.</li> <li>\n<code class=\"highlighter-rouge\">max_batch_bytes</code>: maximum number of bytes to wait for before batching a result set (default: 1MB). This is an integer.</li> <li>\n<code class=\"highlighter-rouge\">max_batch_seconds</code>: maximum number of seconds to wait before batching a result set (default: 0.5). This is a float (not an integer) and may be specified to the microsecond.</li> <li>\n<code class=\"highlighter-rouge\">first_batch_scaledown_factor</code>: factor to scale the other parameters down by on the first batch (default: 4). For example, with this set to 8 and <code class=\"highlighter-rouge\">max_batch_rows</code> set to 80, on the first batch <code class=\"highlighter-rouge\">max_batch_rows</code> will be adjusted to 10 (80 / 8). This allows the first batch to return faster.</li> </ul> <p><strong>Example:</strong> Send a write and return immediately.</p> <pre data-language=\"java\">r.table(\"marvel\").insert(document).runNoReply(conn);\n</pre>  <p><strong>Example:</strong> If you want to specify whether to wait for a write to be written to disk (overriding the table’s default settings), you can set <code class=\"highlighter-rouge\">durability</code> to <code class=\"highlighter-rouge\">hard</code> or <code class=\"highlighter-rouge\">soft</code> in the options.</p> <pre data-language=\"java\">r.table(\"marvel\").insert(r.hashMap(\"superhero\", \"Iron Man\")\n    .with(\"superpower\", \"Arc Reactor\"))\n    .runNoReply(conn, OptArgs.of(\"durability\", \"soft\"));\n</pre>  <p>For more examples, read the API documentation for <a href=\"../run/index\">run</a>; the available optArgs are the same, and any query can be executed with <code class=\"highlighter-rouge\">runNoReply</code> rather than <code class=\"highlighter-rouge\">run</code> (although <code class=\"highlighter-rouge\">runNoReply</code> is usually not appropriate for read queries).</p>  <h2>Related commands</h2> <ul> <li><a href=\"../connect/index\">connect</a></li> <li><a href=\"../run/index\">run</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/run_noreply/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/run_noreply/</a>\n  </p>\n</div>\n","api/java/each/index":"<h1 class=\"title\">ReQL command: for</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">for (doc : &lt;Cursor&gt;) { ... }\n</pre> <h2 id=\"description\">Description</h2> <p>Lazily iterate over a result set one element at a time.</p> <p>RethinkDB cursors can be iterated through via the Java <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html\">Iterable</a> and <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html\">Iterator</a> interfaces; use standard Java commands like <code class=\"highlighter-rouge\">for</code> loops to access each item in the sequence.</p> <p><strong>Example:</strong> Let’s process all the elements!</p> <pre data-language=\"java\">Cursor cursor = r.table(\"users\").run(conn);\nfor (Object doc : cursor) {\n    System.out.println(doc);\n}\n</pre>  <p><strong>Example:</strong> Stop the iteration prematurely and close the connection manually.</p> <pre data-language=\"java\">Cursor cursor = r.table(\"users\").run(conn);\nfor (Object doc: cursor) {\n    ok = processRow(doc);\n    if (ok == false) {\n        cursor.close();\n        break;\n    }\n}\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../next/index\">next</a></li> <li><a href=\"../to_array/index\">toList</a></li> <li><a href=\"../close-cursor/index\">close (cursor)</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/each/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/each/</a>\n  </p>\n</div>\n","api/java/changes/index":"<h1 class=\"title\">ReQL command: changes</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">stream.changes() → stream\nsingleSelection.changes() → stream\n</pre> <h2 id=\"description\">Description</h2> <p>Turn a query into a changefeed, an infinite stream of objects representing changes to the query’s results as they occur. A changefeed may return changes to a table or an individual document (a “point” changefeed). Commands such as <code class=\"highlighter-rouge\">filter</code> or <code class=\"highlighter-rouge\">map</code> may be used before the <code class=\"highlighter-rouge\">changes</code> command to transform or filter the output, and many commands that operate on sequences can be chained after <code class=\"highlighter-rouge\">changes</code>.</p> <p>You may specify one of six optional arguments via <a href=\"../optarg/index\">optArg</a>.</p> <ul> <li>\n<code class=\"highlighter-rouge\">squash</code>: Controls how change notifications are batched. Acceptable values are <code class=\"highlighter-rouge\">true</code>, <code class=\"highlighter-rouge\">false</code> and a numeric value: <ul> <li>\n<code class=\"highlighter-rouge\">true</code>: When multiple changes to the same document occur before a batch of notifications is sent, the changes are “squashed” into one change. The client receives a notification that will bring it fully up to date with the server.</li> <li>\n<code class=\"highlighter-rouge\">false</code>: All changes will be sent to the client verbatim. This is the default.</li> <li>\n<code class=\"highlighter-rouge\">n</code>: A numeric value (floating point). Similar to <code class=\"highlighter-rouge\">true</code>, but the server will wait <code class=\"highlighter-rouge\">n</code> seconds to respond in order to squash as many changes together as possible, reducing network traffic. The first batch will always be returned immediately.</li> </ul> </li> <li>\n<code class=\"highlighter-rouge\">changefeed_queue_size</code>: the number of changes the server will buffer between client reads before it starts dropping changes and generates an error (default: 100,000).</li> <li>\n<code class=\"highlighter-rouge\">include_initial</code>: if <code class=\"highlighter-rouge\">true</code>, the changefeed stream will begin with the current contents of the table or selection being monitored. These initial results will have <code class=\"highlighter-rouge\">new_val</code> fields, but no <code class=\"highlighter-rouge\">old_val</code> fields. The initial results may be intermixed with actual changes, as long as an initial result for the changed document has already been given. If an initial result for a document has been sent and a change is made to that document that would move it to the unsent part of the result set (e.g., a changefeed monitors the top 100 posters, the first 50 have been sent, and poster 48 has become poster 52), an “uninitial” notification will be sent, with an <code class=\"highlighter-rouge\">old_val</code> field but no <code class=\"highlighter-rouge\">new_val</code> field.</li> <li>\n<code class=\"highlighter-rouge\">include_states</code>: if <code class=\"highlighter-rouge\">true</code>, the changefeed stream will include special status documents consisting of the field <code class=\"highlighter-rouge\">state</code> and a string indicating a change in the feed’s state. These documents can occur at any point in the feed between the notification documents described below. If <code class=\"highlighter-rouge\">include_states</code> is <code class=\"highlighter-rouge\">false</code> (the default), the status documents will not be sent.</li> <li>\n<code class=\"highlighter-rouge\">include_offsets</code>: if <code class=\"highlighter-rouge\">true</code>, a changefeed stream on an <code class=\"highlighter-rouge\">orderBy.limit</code> changefeed will include <code class=\"highlighter-rouge\">old_offset</code> and <code class=\"highlighter-rouge\">new_offset</code> fields in status documents that include <code class=\"highlighter-rouge\">old_val</code> and <code class=\"highlighter-rouge\">new_val</code>. This allows applications to maintain ordered lists of the stream’s result set. If <code class=\"highlighter-rouge\">old_offset</code> is set and not <code class=\"highlighter-rouge\">null</code>, the element at <code class=\"highlighter-rouge\">old_offset</code> is being deleted; if <code class=\"highlighter-rouge\">new_offset</code> is set and not <code class=\"highlighter-rouge\">null</code>, then <code class=\"highlighter-rouge\">new_val</code> is being inserted at <code class=\"highlighter-rouge\">new_offset</code>. Setting <code class=\"highlighter-rouge\">include_offsets</code> to <code class=\"highlighter-rouge\">true</code> on a changefeed that does not support it will raise an error.</li> <li>\n<code class=\"highlighter-rouge\">include_types</code>: if <code class=\"highlighter-rouge\">true</code>, every result on a changefeed will include a <code class=\"highlighter-rouge\">type</code> field with a string that indicates the kind of change the result represents: <code class=\"highlighter-rouge\">add</code>, <code class=\"highlighter-rouge\">remove</code>, <code class=\"highlighter-rouge\">change</code>, <code class=\"highlighter-rouge\">initial</code>, <code class=\"highlighter-rouge\">uninitial</code>, <code class=\"highlighter-rouge\">state</code>. Defaults to <code class=\"highlighter-rouge\">false</code>.</li> </ul> <p>There are currently two states:</p> <ul> <li>\n<code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"err\">state</span><span class=\"p\">:</span><span class=\"err\">'initializing'</span><span class=\"p\">}</span></code> indicates the following documents represent initial values on the feed rather than changes. This will be the first document of a feed that returns initial values.</li> <li>\n<code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"err\">state</span><span class=\"p\">:</span><span class=\"err\">'ready'</span><span class=\"p\">}</span></code> indicates the following documents represent changes. This will be the first document of a feed that does <em>not</em> return initial values; otherwise, it will indicate the initial values have all been sent.</li> </ul> <p>If the table becomes unavailable, the changefeed will be disconnected, and a runtime exception will be thrown by the driver.</p> <p>Changefeed notifications take the form of a two-field object:</p> <pre data-language=\"java\">{\n    \"old_val\": &lt;document before change&gt;,\n    \"new_val\": &lt;document after change&gt;\n}\n</pre>  <p>When <code class=\"highlighter-rouge\">include_types</code> is <code class=\"highlighter-rouge\">true</code>, there will be three fields:</p> <pre data-language=\"java\">{\n    \"old_val\": &lt;document before change&gt;,\n    \"new_val\": &lt;document after change&gt;,\n    \"type\": &lt;result type&gt;\n}\n</pre>  <p>When a document is deleted, <code class=\"highlighter-rouge\">new_val</code> will be <code class=\"highlighter-rouge\">null</code>; when a document is inserted, <code class=\"highlighter-rouge\">old_val</code> will be <code class=\"highlighter-rouge\">null</code>.</p> <blockquote class=\"infobox \">\n<p>Certain document transformation commands can be chained before changefeeds. For more information, read the <a href=\"../../../docs/changefeeds/java/index\">discussion of changefeeds</a> in the “Query language” documentation.</p> <p><strong>Note:</strong> Changefeeds ignore the <code class=\"highlighter-rouge\">read_mode</code> flag to <code class=\"highlighter-rouge\">run</code>, and always behave as if it is set to <code class=\"highlighter-rouge\">single</code> (i.e., the values they return are in memory on the primary replica, but have not necessarily been written to disk yet). For more details read <a href=\"../../../docs/consistency/index\">Consistency guarantees</a>.</p> </blockquote> <p>The server will buffer up to <code class=\"highlighter-rouge\">changefeed_queue_size</code> elements (default 100,000). If the buffer limit is hit, early changes will be discarded, and the client will receive an object of the form <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"err\">error</span><span class=\"p\">:</span><span class=\"s2\">\"Changefeed cache over array size limit, skipped X elements.\"</span><span class=\"p\">}</span></code> where <code class=\"highlighter-rouge\">X</code> is the number of elements skipped.</p> <p>Commands that operate on streams (such as <a href=\"../filter/index\">filter</a> or <a href=\"../map/index\">map</a>) can usually be chained after <code class=\"highlighter-rouge\">changes</code>. However, since the stream produced by <code class=\"highlighter-rouge\">changes</code> has no ending, commands that need to consume the entire stream before returning (such as <a href=\"../reduce/index\">reduce</a> or <a href=\"../count/index\">count</a>) cannot.</p> <p><strong>Example:</strong> Subscribe to the changes on a table.</p> <p>Start monitoring the changefeed in one client:</p> <pre data-language=\"java\">Cursor changeCursor = r.table(\"games\").changes().run(conn);\nfor (Object change : changeCursor) {\n    System.out.println(change);\n}\n</pre>  <p>As these queries are performed in a second client, the first client would receive and print the following objects:</p> <pre data-language=\"java\">r.table(\"games\").insert(r.hashMap(\"id\", 1)).run(conn);\n</pre>  <pre data-language=\"java\">{\"old_val\": null, \"new_val\": {\"id\": 1}}\n</pre>  <pre data-language=\"java\">r.table(\"games\").get(1).update(r.hashMap(\"player1\", \"Bob\")).run(conn);\n</pre>  <pre data-language=\"java\">{\"old_val\": {\"id\": 1}, \"new_val\": {\"id\": 1, \"player1\": \"Bob\"}}\n</pre>  <pre data-language=\"java\">r.table(\"games\").get(1).replace(\n    r.hashMap(\"id\", 1).with(\"player1\", \"Bob\").with(\"player2\", \"Alice\")\n).run(conn);\n</pre>  <pre data-language=\"java\">{\"old_val\": {\"id\": 1, \"player1\": \"Bob\"},\n \"new_val\": {\"id\": 1, \"player1\": \"Bob\", \"player2\": \"Alice\"}}\n</pre>  <pre data-language=\"java\">r.table(\"games\").get(1).delete().run(conn);\n</pre>  <pre data-language=\"java\">{\"old_val\": {\"id\": 1, \"player1\": \"Bob\", \"player2\": \"Alice\"}, \"new_val\": null}\n</pre>  <pre data-language=\"java\">r.tableDrop(\"games\").run(conn);\n</pre>  <pre data-language=\"java\">ReqlRuntimeError: Changefeed aborted (table unavailable)\n</pre>  <p><strong>Example:</strong> Return all the changes that increase a player’s score.</p> <pre data-language=\"java\">r.table(\"test\").changes().filter(\n    row -&gt; row.g(\"new_val\").g(\"score\").gt(row.g(\"old_val\").g(\"score\"))\n).run(conn);\n</pre>  <p><strong>Example:</strong> Return all the changes to a specific player’s score that increase it past 10.</p> <pre data-language=\"java\">r.table(\"test\").get(1).filter(row -&gt; row.g(\"score\").gt(10)).changes().run(conn);\n</pre>  <p><strong>Example:</strong> Return all the inserts on a table.</p> <pre data-language=\"java\">r.table(\"test\").changes().filter(\n    row -&gt; row.g(\"old_val\").eq(null)\n).run(conn);\n</pre>  <p><strong>Example:</strong> Return all the changes to game 1, with state notifications and initial values.</p> <pre data-language=\"java\">r.table(\"games\").get(1).changes()\n .optArg(\"include_initial\", true).optArg(\"include_states\", true).run(conn);\n</pre>  <p>Result returned on changefeed:</p> <pre data-language=\"java\">{\"state\": \"initializing\"}\n{\"new_val\": {\"id\": 1, \"score\": 12, \"arena\": \"Hobbiton Field\"}}\n{\"state\": \"ready\"}\n{\n\t\"old_val\": {\"id\": 1, \"score\": 12, \"arena\": \"Hobbiton Field\"},\n\t\"new_val\": {\"id\": 1, \"score\": 14, \"arena\": \"Hobbiton Field\"}\n}\n{\n\t\"old_val\": {\"id\": 1, \"score\": 14, \"arena\": \"Hobbiton Field\"},\n\t\"new_val\": {\"id\": 1, \"score\": 17, \"arena\": \"Hobbiton Field\", \"winner\": \"Frodo\"}\n}\n</pre>  <p><strong>Example:</strong> Return all the changes to the top 10 games. This assumes the presence of a <code class=\"highlighter-rouge\">score</code> secondary index on the <code class=\"highlighter-rouge\">games</code> table.</p> <pre data-language=\"java\">r.table(\"games\").orderBy().optArg(\"index\", r.desc(\"score\"))\n .limit(10).changes().run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../table/index\">table</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/changes/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/changes/</a>\n  </p>\n</div>\n","api/java/between/index":"<h1 class=\"title\">ReQL command: between</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">table.between(lowerKey, upperKey) → selection\n</pre> <h2 id=\"description\">Description</h2> <p>Get all documents between two keys. Accepts three <a href=\"../optarg/index\">optArgs</a>: <code class=\"highlighter-rouge\">index</code>, <code class=\"highlighter-rouge\">left_bound</code>, and <code class=\"highlighter-rouge\">right_bound</code>. If <code class=\"highlighter-rouge\">index</code> is set to the name of a secondary index, <code class=\"highlighter-rouge\">between</code> will return all documents where that index’s value is in the specified range (it uses the primary key by default). <code class=\"highlighter-rouge\">left_bound</code> or <code class=\"highlighter-rouge\">right_bound</code> may be set to <code class=\"highlighter-rouge\">open</code> or <code class=\"highlighter-rouge\">closed</code> to indicate whether or not to include that endpoint of the range (by default, <code class=\"highlighter-rouge\">left_bound</code> is closed and <code class=\"highlighter-rouge\">right_bound</code> is open).</p> <p>You may also use the special constants <code class=\"highlighter-rouge\">r.minval</code> and <code class=\"highlighter-rouge\">r.maxval</code> for boundaries, which represent “less than any index key” and “more than any index key” respectively. For instance, if you use <code class=\"highlighter-rouge\">r.minval</code> as the lower key, then <code class=\"highlighter-rouge\">between</code> will return all documents whose primary keys (or indexes) are less than the specified upper key.</p> <p>If you use arrays as indexes (compound indexes), they will be sorted using <a href=\"https://en.wikipedia.org/wiki/Lexicographical_order\">lexicographical order</a>. Take the following range as an example:</p> <pre data-language=\"java\">[[1, \"c\"] ... [5, \"e\"]]\n</pre>  <p>This range includes all compound keys:</p> <ul> <li>whose first item is 1 and second item is equal or greater than “c”;</li> <li>whose first item is between 1 and 5, <em>regardless of the value of the second item</em>;</li> <li>whose first item is 5 and second item is less than or equal to “e”.</li> </ul> <p><strong>Example:</strong> Find all users with primary key &gt;= 10 and &lt; 20 (a normal half-open interval).</p> <pre data-language=\"java\">r.table(\"marvel\").between(10, 20).run(conn);\n</pre>  <p><strong>Example:</strong> Find all users with primary key &gt;= 10 and &lt;= 20 (an interval closed on both sides).</p> <pre data-language=\"java\">r.table(\"marvel\").between(10, 20).optArg(\"right_bound\", \"closed\").run(conn);\n</pre>  <p><strong>Example:</strong> Find all users with primary key &lt; 20.</p> <pre data-language=\"java\">r.table(\"marvel\").between(r.minval(), 20).run(conn);\n</pre>  <p><strong>Example:</strong> Find all users with primary key &gt; 10.</p> <pre data-language=\"java\">r.table(\"marvel\").between(10, r.maxval()).optArg(\"left_bound\", \"open\").run(conn);\n</pre>  <p><strong>Example:</strong> Between can be used on secondary indexes too. Just pass an optional index argument giving the secondary index to query.</p> <pre data-language=\"java\">r.table(\"dc\").between(\"dark_knight\", \"man_of_steel\").optArg(\"index\", \"code_name\").run(conn);\n</pre>  <p><strong>Example:</strong> Get all users whose full name is between “John Smith” and “Wade Welles.”</p> <pre data-language=\"java\">r.table(\"users\").between(r.array(\"Smith\", \"John\"), r.array(\"Welles\", \"Wade\")).optArg(\"index\", \"full_name\").run(conn);\n</pre>  <p><strong>Note:</strong> Between works with secondary indexes on date fields, but will not work with unindexed date fields. To test whether a date value is between two other dates, use the <a href=\"../during/index\">during</a> command, not <code class=\"highlighter-rouge\">between</code>.</p> <p>Secondary indexes can be used in extremely powerful ways with <code class=\"highlighter-rouge\">between</code> and other commands; read the full article on <a href=\"../../../docs/secondary-indexes/java/index\">secondary indexes</a> for examples using boolean operations, <code class=\"highlighter-rouge\">contains</code> and more.</p> <p><strong>Note:</strong> RethinkDB uses byte-wise ordering for <code class=\"highlighter-rouge\">between</code> and does not support Unicode collations; non-ASCII characters will be sorted by UTF-8 codepoint.</p> <p><strong>Note:</strong> If you chain <code class=\"highlighter-rouge\">between</code> after <a href=\"../order_by/index\">orderBy</a>, the <code class=\"highlighter-rouge\">between</code> command must use the index specified in <code class=\"highlighter-rouge\">orderBy</code>, and will default to that index. Trying to specify another index will result in a <code class=\"highlighter-rouge\">ReqlRuntimeError</code>.</p>  <h2>Related commands</h2> <ul> <li><a href=\"../get/index\">get</a></li> <li><a href=\"../get_all/index\">getAll</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/between/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/between/</a>\n  </p>\n</div>\n","api/java/next/index":"<h1 class=\"title\">ReQL command: next</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">cursor.next([wait])\n</pre> <h2 id=\"description\">Description</h2> <p>Get the next element in the cursor.</p> <p>The optional argument specifies whether to wait for the next available element and how long to wait:</p> <ul> <li>\n<code class=\"highlighter-rouge\">true</code>: Wait indefinitely (the default).</li> <li>\n<code class=\"highlighter-rouge\">false</code>: Do not wait at all. If data is immediately available, it will be returned; if it is not available, a <code class=\"highlighter-rouge\">ReqlTimeoutError</code> will be raised.</li> <li>number: Wait up to the specified number of seconds for data to be available before raising <code class=\"highlighter-rouge\">ReqlTimeoutError</code>.</li> </ul> <p>The behavior of <code class=\"highlighter-rouge\">next</code> will be identical with <code class=\"highlighter-rouge\">false</code>, <code class=\"highlighter-rouge\">null</code> or the number <code class=\"highlighter-rouge\">0</code>.</p> <p>Calling <code class=\"highlighter-rouge\">next</code> the first time on a cursor provides the first element of the cursor. If the data set is exhausted (e.g., you have retrieved all the documents in a table), a <code class=\"highlighter-rouge\">NoSuchElementException</code> error will be raised when <code class=\"highlighter-rouge\">next</code> is called.</p> <p><strong>Example:</strong> Retrieve the next element.</p> <pre data-language=\"java\">Cursor cursor = r.table(\"superheroes\").run(conn);\nObject doc = cursor.next();\n</pre>  <p><strong>Example:</strong> Retrieve the next element on a <a href=\"../../../docs/changefeeds/java/index\">changefeed</a>, waiting up to five seconds.</p> <pre data-language=\"java\">Cursor cursor = r.table(\"superheroes\").changes().run(conn);\nObject doc = cursor.next(5);\n</pre>  <p><strong>Note:</strong> RethinkDB cursors can be iterated through via the Java <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html\">Iterable</a> and <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html\">Iterator</a> interfaces. The canonical way to retrieve all the results is to use a <a href=\"../each/index\">for</a> loop or <a href=\"../to_array/index\">toList</a>.</p>  <h2>Related commands</h2> <ul> <li><a href=\"../each/index\">for</a></li> <li><a href=\"../to_array/index\">toList</a></li> <li><a href=\"../close-cursor/index\">close (cursor)</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/next/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/next/</a>\n  </p>\n</div>\n","api/java/to_array/index":"<h1 class=\"title\">ReQL command: toList</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">cursor.toList()\n</pre> <h2 id=\"description\">Description</h2> <p>Retrieve all results from a cursor as a list.</p> <p>RethinkDB cursors can be iterated through via the Java <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html\">Iterable</a> and <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html\">Iterator</a> interfaces; to coerce a cursor into a list, use <code class=\"highlighter-rouge\">toList</code>.</p> <p><strong>Example:</strong> For small result sets it may be more convenient to process them at once as a list.</p> <pre data-language=\"java\">Cursor cursor = r.table(\"users\").run(conn);\nList users = cursor.toList();\nprocessResults(users);\n</pre>   <p>The equivalent query with a <code class=\"highlighter-rouge\">for</code> loop would be:</p> <pre data-language=\"java\">Cursor cursor = r.table(\"users\").run(conn);\nfor (Object doc : cursor) {\n    processResults(doc);\n}\n</pre>  <p><strong>Note:</strong> Because a feed is a cursor that never terminates, using <code class=\"highlighter-rouge\">list</code> with a feed will never return. Use <a href=\"../each/index\">for</a> or <a href=\"../next/index\">next</a> instead. See the <a href=\"../changes/index\">changes</a> command for more information on feeds.</p>  <h2>Related commands</h2> <ul> <li><a href=\"../next/index\">next</a></li> <li><a href=\"../each/index\">for</a></li> <li><a href=\"../close-cursor/index\">close (cursor)</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/to_array/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/to_array/</a>\n  </p>\n</div>\n","api/java/close-cursor/index":"<h1 class=\"title\">ReQL command: close</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">cursor.close()\n</pre> <h2 id=\"description\">Description</h2> <p>Close a cursor. Closing a cursor cancels the corresponding query and frees the memory associated with the open request.</p> <p><strong>Example:</strong> Close a cursor.</p> <pre data-language=\"java\">cursor.close();\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../next/index\">next</a></li> <li><a href=\"../to_array/index\">toArray</a></li> <li><a href=\"../each/index\">each</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/close-cursor/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/close-cursor/</a>\n  </p>\n</div>\n","api/java/db_create/index":"<h1 class=\"title\">ReQL command: dbCreate</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.dbCreate(dbName) → object\n</pre> <h2 id=\"description\">Description</h2> <p>Create a database. A RethinkDB database is a collection of tables, similar to relational databases.</p> <p>If successful, the command returns an object with two fields:</p> <ul> <li>\n<code class=\"highlighter-rouge\">dbs_created</code>: always <code class=\"highlighter-rouge\">1</code>.</li> <li>\n<code class=\"highlighter-rouge\">config_changes</code>: a list containing one object with two fields, <code class=\"highlighter-rouge\">old_val</code> and <code class=\"highlighter-rouge\">new_val</code>: <ul> <li>\n<code class=\"highlighter-rouge\">old_val</code>: always <code class=\"highlighter-rouge\">null</code>.</li> <li>\n<code class=\"highlighter-rouge\">new_val</code>: the database’s new <a href=\"../config/index\">config</a> value.</li> </ul> </li> </ul> <p>If a database with the same name already exists, the command throws <code class=\"highlighter-rouge\">ReqlRuntimeError</code>.</p> <p>Note: Only alphanumeric characters and underscores are valid for the database name.</p> <p><strong>Example:</strong> Create a database named ‘superheroes’.</p> <pre data-language=\"java\">r.dbCreate(\"superheroes\").run(conn);\n</pre>  <p>Return:</p> <pre data-language=\"java\">{\n    \"config_changes\": [\n        {\n            \"new_val\": {\n                \"id\": \"e4689cfc-e903-4532-a0e6-2d6797a43f07\",\n                \"name\": \"superheroes\"\n            },\n            \"old_val\": null\n        }\n    ],\n    \"dbs_created\": 1\n}\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../db_drop/index\">dbDrop</a></li> <li><a href=\"../db_list/index\">dbList</a></li> <li><a href=\"../table_create/index\">tableCreate</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/db_create/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/db_create/</a>\n  </p>\n</div>\n","api/java/db_drop/index":"<h1 class=\"title\">ReQL command: dbDrop</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.dbDrop(dbName) → object\n</pre> <h2 id=\"description\">Description</h2> <p>Drop a database. The database, all its tables, and corresponding data will be deleted.</p> <p>If successful, the command returns an object with two fields:</p> <ul> <li>\n<code class=\"highlighter-rouge\">dbs_dropped</code>: always <code class=\"highlighter-rouge\">1</code>.</li> <li>\n<code class=\"highlighter-rouge\">tables_dropped</code>: the number of tables in the dropped database.</li> <li>\n<code class=\"highlighter-rouge\">config_changes</code>: a list containing one two-field object, <code class=\"highlighter-rouge\">old_val</code> and <code class=\"highlighter-rouge\">new_val</code>: <ul> <li>\n<code class=\"highlighter-rouge\">old_val</code>: the database’s original <a href=\"../config/index\">config</a> value.</li> <li>\n<code class=\"highlighter-rouge\">new_val</code>: always <code class=\"highlighter-rouge\">null</code>.</li> </ul> </li> </ul> <p>If the given database does not exist, the command throws <code class=\"highlighter-rouge\">ReqlRuntimeError</code>.</p> <p><strong>Example:</strong> Drop a database named ‘superheroes’.</p> <pre data-language=\"java\">r.dbDrop(\"superheroes\").run(conn);\n</pre>  <p>Return:</p> <pre data-language=\"java\">{\n    \"config_changes\": [\n        {\n            \"old_val\": {\n                \"id\": \"e4689cfc-e903-4532-a0e6-2d6797a43f07\",\n                \"name\": \"superheroes\"\n            },\n            \"new_val\": null\n        }\n    ],\n    \"tables_dropped\": 3,\n    \"dbs_dropped\": 1\n}\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../db_create/index\">dbCreate</a></li> <li><a href=\"../db_list/index\">dbList</a></li> <li><a href=\"../table_create/index\">tableCreate</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/db_drop/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/db_drop/</a>\n  </p>\n</div>\n","api/java/db_list/index":"<h1 class=\"title\">ReQL command: dbList</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.dbList() → array\n</pre> <h2 id=\"description\">Description</h2> <p>List all database names in the cluster. The result is a list of strings.</p> <p><strong>Example:</strong> List all databases.</p> <pre data-language=\"java\">r.dbList().run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../db_create/index\">dbCreate</a></li> <li><a href=\"../db_drop/index\">dbDrop</a></li> <li><a href=\"../table_create/index\">tableCreate</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/db_list/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/db_list/</a>\n  </p>\n</div>\n","api/java/table_list/index":"<h1 class=\"title\">ReQL command: tableList</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">db.tableList() → array\n</pre> <h2 id=\"description\">Description</h2> <p>List all table names in a database. The result is a list of strings.</p> <p><strong>Example:</strong> List all tables of the ‘test’ database.</p> <pre data-language=\"java\">r.db(\"test\").tableList().run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../table_create/index\">tableCreate</a></li> <li><a href=\"../table_drop/index\">tableDrop</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/table_list/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/table_list/</a>\n  </p>\n</div>\n","api/java/index_drop/index":"<h1 class=\"title\">ReQL command: indexDrop</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">table.indexDrop(indexName) → object\n</pre> <h2 id=\"description\">Description</h2> <p>Delete a previously created secondary index of this table.</p> <p><strong>Example:</strong> Drop a secondary index named ‘code_name’.</p> <pre data-language=\"java\">r.table(\"dc\").indexDrop(\"code_name\").run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../index_create/index\">indexCreate</a></li> <li><a href=\"../index_list/index\">indexList</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/index_drop/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/index_drop/</a>\n  </p>\n</div>\n","api/java/index_list/index":"<h1 class=\"title\">ReQL command: indexList</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">table.indexList() → array\n</pre> <h2 id=\"description\">Description</h2> <p>List all the secondary indexes of this table.</p> <p><strong>Example:</strong> List the available secondary indexes for this table.</p> <pre data-language=\"java\">r.table('marvel').indexList().run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../index_create/index\">indexCreate</a></li> <li><a href=\"../index_drop/index\">indexDrop</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/index_list/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/index_list/</a>\n  </p>\n</div>\n","api/java/index_rename/index":"<h1 class=\"title\">ReQL command: indexRename</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">table.indexRename(oldIndexName, newIndexName) → object\n</pre> <h2 id=\"description\">Description</h2> <p>Rename an existing secondary index on a table. If the <a href=\"../optarg/index\">optArg</a> <code class=\"highlighter-rouge\">overwrite</code> is specified as <code class=\"highlighter-rouge\">true</code>, a previously existing index with the new name will be deleted and the index will be renamed. If <code class=\"highlighter-rouge\">overwrite</code> is <code class=\"highlighter-rouge\">false</code> (the default) an error will be raised if the new index name already exists.</p> <p>The return value on success will be an object of the format <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"s2\">\"renamed\"</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">}</span></code>, or <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"s2\">\"renamed\"</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">}</span></code> if the old and new names are the same.</p> <p>An error will be raised if the old index name does not exist, if the new index name is already in use and <code class=\"highlighter-rouge\">overwrite</code> is <code class=\"highlighter-rouge\">false</code>, or if either the old or new index name are the same as the primary key field name.</p> <p><strong>Example:</strong> Rename an index on the comments table.</p> <pre data-language=\"java\">r.table(\"comments\").indexRename(\"postId\", \"messageId\").run(conn);\n</pre>  <p><strong>Example:</strong> Rename an index on the users table, overwriting any existing index with the new name.</p> <pre data-language=\"java\">r.table(\"users\").indexRename(\"mail\", \"email\").optArg(\"overwrite\", true)\n .run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../index_create/index\">indexCreate</a></li> <li><a href=\"../index_status/index\">indexStatus</a></li> <li><a href=\"../index_list/index\">indexList</a></li> <li><a href=\"../index_drop/index\">indexDrop</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/index_rename/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/index_rename/</a>\n  </p>\n</div>\n","api/java/table_create/index":"<h1 class=\"title\">ReQL command: tableCreate</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">db.tableCreate(tableName) → object\nr.tableCreate(tableName) → object\n</pre> <h2 id=\"description\">Description</h2> <p><img src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/table_create_javascript.png\" class=\"api_command_illustration\"></p> <p>Create a table. A RethinkDB table is a collection of JSON documents.</p> <p>If successful, the command returns an object with two fields:</p> <ul> <li>\n<code class=\"highlighter-rouge\">tables_created</code>: always <code class=\"highlighter-rouge\">1</code>.</li> <li>\n<code class=\"highlighter-rouge\">config_changes</code>: a list containing one two-field object, <code class=\"highlighter-rouge\">old_val</code> and <code class=\"highlighter-rouge\">new_val</code>: <ul> <li>\n<code class=\"highlighter-rouge\">old_val</code>: always <code class=\"highlighter-rouge\">null</code>.</li> <li>\n<code class=\"highlighter-rouge\">new_val</code>: the table’s new <a href=\"../config/index\">config</a> value.</li> </ul> </li> </ul> <p>If a table with the same name already exists, the command throws <code class=\"highlighter-rouge\">ReqlOpFailedError</code>.</p> <blockquote class=\"infobox \">\n<p><strong>Note:</strong> Only alphanumeric characters and underscores are valid for the table name.</p> <p>Invoking <code class=\"highlighter-rouge\">tableCreate</code> without specifying a database using <a href=\"../db/index\">db</a> creates a table in the database specified in <a href=\"../connect/index\">connect</a>, or <code class=\"highlighter-rouge\">test</code> if no database was specified.</p> </blockquote> <p>When creating a table you can specify the following options using <a href=\"../optarg/index\">optArg</a>:</p> <ul> <li>\n<code class=\"highlighter-rouge\">primaryKey</code>: the name of the primary key. The default primary key is <code class=\"highlighter-rouge\">id</code>.</li> <li>\n<code class=\"highlighter-rouge\">durability</code>: if set to <code class=\"highlighter-rouge\">soft</code>, writes will be acknowledged by the server immediately and flushed to disk in the background. The default is <code class=\"highlighter-rouge\">hard</code>: acknowledgment of writes happens after data has been written to disk.</li> <li>\n<code class=\"highlighter-rouge\">shards</code>: the number of shards, an integer from 1-64. Defaults to <code class=\"highlighter-rouge\">1</code>.</li> <li>\n<code class=\"highlighter-rouge\">replicas</code>: either an integer or a mapping object. Defaults to <code class=\"highlighter-rouge\">1</code>. <ul> <li>If <code class=\"highlighter-rouge\">replicas</code> is an integer, it specifies the number of replicas per shard. Specifying more replicas than there are servers will return an error.</li> <li>If <code class=\"highlighter-rouge\">replicas</code> is an object, it specifies key-value pairs of server tags and the number of replicas to assign to those servers: <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"err\">tag1</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"err\">tag2</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"err\">tag3</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"err\">...}</span></code>.</li> </ul> </li> <li>\n<code class=\"highlighter-rouge\">primaryReplicaTag</code>: the primary server specified by its server tag. Required if <code class=\"highlighter-rouge\">replicas</code> is an object; the tag must be in the object. This must <em>not</em> be specified if <code class=\"highlighter-rouge\">replicas</code> is an integer.</li> </ul> <p>The <a href=\"../../../docs/data-types/index\">data type</a> of a primary key is usually a string (like a UUID) or a number, but it can also be a time, binary object, boolean or an array. Data types can be mixed in the primary key field, but all values must be unique. Using an array as a primary key causes the primary key to behave like a compound index; read the documentation on <a href=\"../../../docs/secondary-indexes/java/index\">compound secondary indexes</a> for more information, as it applies to primary keys as well. (Note that the primary index still only covers a single field, while compound secondary indexes can cover multiple fields in a single index.) Primary keys cannot be objects.</p> <p>Tables will be available for writing when the command returns.</p> <p><strong>Example:</strong> Create a table named ‘dc_universe’ with the default settings.</p> <pre data-language=\"java\">r.db(\"heroes\").tableCreate(\"dc_universe\").run(conn);\n</pre>  <p>Result:</p> <pre data-language=\"java\">{\n    \"config_changes\": [\n        {\n            \"new_val\": {\n                \"db\": \"test\",\n                \"durability\":  \"hard\",\n                \"id\": \"20ea60d4-3b76-4817-8828-98a236df0297\",\n                \"name\": \"dc_universe\",\n                \"primary_key\": \"id\",\n                \"shards\": [\n                    {\n                        \"primary_replica\": \"rethinkdb_srv1\",\n                        \"replicas\": [\n                            \"rethinkdb_srv1\",\n                            \"rethinkdb_srv2\"\n                        ]\n                    }\n                ],\n                \"write_acks\": \"majority\"\n            },\n            \"old_val\": null\n        }\n    ],\n    \"tables_created\": 1\n}\n</pre>  <p><strong>Example:</strong> Create a table named ‘dc_universe’ using the field ‘name’ as primary key.</p> <pre data-language=\"java\">r.db(\"test\").tableCreate(\"dc_universe\").optArg(\"primary_key\", \"name\").run(conn);\n</pre>  <p><strong>Example:</strong> Create a table set up for two shards and three replicas per shard. This requires three available servers.</p> <pre data-language=\"java\">r.db(\"test\").tableCreate(\"dc_universe\").optArg(\"shards\", 2).optArg(\"replicas\", 3).run(conn);\n</pre>  <p>Read <a href=\"../../../docs/sharding-and-replication/index\">Sharding and replication</a> for a complete discussion of the subject, including advanced topics.</p>  <h2>Related commands</h2> <ul> <li><a href=\"../table_list/index\">tableList</a></li> <li><a href=\"../table_drop/index\">tableDrop</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/table_create/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/table_create/</a>\n  </p>\n</div>\n","api/java/table_drop/index":"<h1 class=\"title\">ReQL command: tableDrop</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">db.tableDrop(tableName) → object\n</pre> <h2 id=\"description\">Description</h2> <p>Drop a table from a database. The table and all its data will be deleted.</p> <p>If successful, the command returns an object with two fields:</p> <ul> <li>\n<code class=\"highlighter-rouge\">tables_dropped</code>: always <code class=\"highlighter-rouge\">1</code>.</li> <li>\n<code class=\"highlighter-rouge\">config_changes</code>: a list containing one two-field object, <code class=\"highlighter-rouge\">old_val</code> and <code class=\"highlighter-rouge\">new_val</code>: <ul> <li>\n<code class=\"highlighter-rouge\">old_val</code>: the dropped table”s <a href=\"../config/index\">config</a> value.</li> <li>\n<code class=\"highlighter-rouge\">new_val</code>: always <code class=\"highlighter-rouge\">null</code>.</li> </ul> </li> </ul> <p>If the given table does not exist in the database, the command throws <code class=\"highlighter-rouge\">ReqlRuntimeError</code>.</p> <p><strong>Example:</strong> Drop a table named “dc_universe”.</p> <pre data-language=\"java\">r.db(\"test\").tableDrop(\"dc_universe\").run(conn);\n</pre>  <p>Result:</p> <pre data-language=\"java\">{\n    \"config_changes\": [\n        {\n            \"old_val\": {\n                \"db\": \"test\",\n                \"durability\":  \"hard\",\n                \"id\": \"20ea60d4-3b76-4817-8828-98a236df0297\",\n                \"name\": \"dc_universe\",\n                \"primary_key\": \"id\",\n                \"shards\": [\n                    {\n                        \"primary_replica\": \"rethinkdb_srv1\",\n                        \"replicas\": [\n                            \"rethinkdb_srv1\",\n                            \"rethinkdb_srv2\"\n                        ]\n                    }\n                ],\n                \"write_acks\": \"majority\"\n            },\n            \"new_val\": null\n        }\n    ],\n    \"tables_dropped\": 1\n}\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../table_create/index\">tableCreate</a></li> <li><a href=\"../table_list/index\">tableList</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/table_drop/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/table_drop/</a>\n  </p>\n</div>\n","api/java/index_create/index":"<h1 class=\"title\">ReQL command: indexCreate</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">table.indexCreate(indexName[, indexFunction]) → object\n</pre> <h2 id=\"description\">Description</h2> <p>Create a new secondary index on a table. Secondary indexes improve the speed of many read queries at the slight cost of increased storage space and decreased write performance. For more information about secondary indexes, read the article “<a href=\"../../../docs/secondary-indexes/java/index\">Using secondary indexes in RethinkDB</a>.”</p> <p>RethinkDB supports different types of secondary indexes:</p> <ul> <li>\n<em>Simple indexes</em> based on the value of a single field.</li> <li>\n<em>Compound indexes</em> based on multiple fields.</li> <li>\n<em>Multi indexes</em> based on arrays of values, created when the <code class=\"highlighter-rouge\">multi</code> <a href=\"../optarg/index\">optArg</a> argument is <code class=\"highlighter-rouge\">true</code>.</li> <li>\n<em>Geospatial indexes</em> based on indexes of geometry objects, created when the <code class=\"highlighter-rouge\">geo</code> optArg is <code class=\"highlighter-rouge\">true</code>.</li> <li>Indexes based on <em>arbitrary expressions</em>.</li> </ul> <p>The <code class=\"highlighter-rouge\">indexFunction</code> can be an anonymous function or a binary representation obtained from the <code class=\"highlighter-rouge\">function</code> field of <a href=\"../index_status/index\">indexStatus</a>. The function must be deterministic, and so cannot use a subquery or the <code class=\"highlighter-rouge\">r.js</code> command.</p> <p>If successful, <code class=\"highlighter-rouge\">createIndex</code> will return an object of the form <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"s2\">\"created\"</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">}</span></code>. If an index by that name already exists on the table, a <code class=\"highlighter-rouge\">ReqlRuntimeError</code> will be thrown.</p> <blockquote class=\"infobox \">\n<p>Note that an index may not be immediately available after creation. If your application needs to use indexes immediately after creation, use the <a href=\"../index_wait/index\">indexWait</a> command to ensure the indexes are ready before use.</p> </blockquote> <p><strong>Example:</strong> Create a simple index based on the field <code class=\"highlighter-rouge\">postId</code>.</p> <pre data-language=\"java\">r.table(\"comments\").indexCreate(\"postId\").run(conn);\n</pre>  <p><strong>Example:</strong> Create a simple index based on the nested field <code class=\"highlighter-rouge\">author &gt; name</code>.</p> <pre data-language=\"java\">r.table(\"comments\").indexCreate(\"author_name\", row -&gt; row.g(\"author\").g(\"name\"))\n .run(conn);\n</pre>  <p><strong>Example:</strong> Create a geospatial index based on the field <code class=\"highlighter-rouge\">location</code>.</p> <pre data-language=\"java\">r.table(\"places\").indexCreate(\"location\").optArg(\"geo\", true).run(conn);\n</pre>  <p>A geospatial index field should contain only geometry objects. It will work with geometry ReQL terms (<a href=\"../get_intersecting/index\">getIntersecting</a> and <a href=\"../get_nearest/index\">getNearest</a>) as well as index-specific terms (<a href=\"../index_status/index\">indexStatus</a>, <a href=\"../index_wait/index\">indexWait</a>, <a href=\"../index_drop/index\">indexDrop</a> and <a href=\"../index_list/index\">indexList</a>). Using terms that rely on non-geometric ordering such as <a href=\"../get_all/index\">getAll</a>, <a href=\"../order_by/index\">orderBy</a> and <a href=\"../between/index\">between</a> will result in an error.</p> <p><strong>Example:</strong> Create a compound index based on the fields <code class=\"highlighter-rouge\">postId</code> and <code class=\"highlighter-rouge\">date</code>.</p> <pre data-language=\"java\">r.table(\"comments\").indexCreate(\"postAndDate\",\n    row -&gt; r.array(row.g(\"postId\"), row.g(\"date\"))\n).run(conn);\n</pre>  <p><strong>Example:</strong> Create a multi index based on the field <code class=\"highlighter-rouge\">authors</code>.</p> <pre data-language=\"java\">r.table(\"posts\").indexCreate(\"authors\").optArg(\"multi\", true).run(conn);\n</pre>  <p><strong>Example:</strong> Create a geospatial multi index based on the field <code class=\"highlighter-rouge\">towers</code>.</p> <pre data-language=\"java\">r.table(\"networks\").indexCreate(\"towers\")\n .optArg(\"geo\", true).optArg(\"multi\", true).run(conn);\n</pre>  <p><strong>Example:</strong> Create an index based on an arbitrary expression.</p> <pre data-language=\"java\">r.table(\"posts\").indexCreate(\"authors\", doc -&gt; r.branch(\n    doc.hasFields(\"updatedAt\"),\n    doc.g(\"updatedAt\"),\n    doc.g(\"createdAt\")\n)).run(conn);\n</pre>  <p><strong>Example:</strong> Create a new secondary index based on an existing one.</p> <pre data-language=\"java\">byte[] index = r.table(\"posts\").indexStatus(\"authors\").nth(0).g(\"function\")\n    .run(conn);\nr.table(\"newPosts\").indexCreate(\"authors\", index).run(conn);\n</pre>  <p><strong>Example:</strong> Rebuild an outdated secondary index on a table.</p> <pre data-language=\"java\">byte[] oldIndex = r.table(\"posts\")\n    .indexStatus(\"oldIndex\").nth(0).g(\"function\").run(conn);\n\nr.table(\"posts\").indexCreate(\"newIndex\", oldIndex).run(conn);\nr.table(\"posts\").indexWait(\"newIndex\").run(conn);\nr.table(\"posts\").indexRename(\"newIndex\", \"oldIndex\")\n .optArg(\"overwrite\", true).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../index_wait/index\">indexWait</a></li> <li><a href=\"../index_status/index\">indexStatus</a></li> <li><a href=\"../index_list/index\">indexList</a></li> <li><a href=\"../index_drop/index\">indexDrop</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/index_create/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/index_create/</a>\n  </p>\n</div>\n","api/java/index_wait/index":"<h1 class=\"title\">ReQL command: indexWait</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">table.indexWait([, index...]) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Wait for the specified indexes on this table to be ready, or for all indexes on this table to be ready if no indexes are specified.</p> <p>The result is an array containing one object for each table index:</p> <pre data-language=\"java\">{\n    \"index\": &lt;indexName&gt;,\n    \"ready\": true,\n    \"function\": &lt;binary&gt;,\n    \"multi\": &lt;bool&gt;,\n    \"geo\": &lt;bool&gt;,\n    \"outdated\": &lt;bool&gt;\n}\n</pre>  <p>See the <a href=\"../index_status/index\">indexStatus</a> documentation for a description of the field values.</p> <p><strong>Example:</strong> Wait for all indexes on the table <code class=\"highlighter-rouge\">test</code> to be ready:</p> <pre data-language=\"java\">r.table(\"test\").indexWait().run(conn);\n</pre>  <p><strong>Example:</strong> Wait for the index <code class=\"highlighter-rouge\">timestamp</code> to be ready:</p> <pre data-language=\"java\">r.table(\"test\").indexWait(\"timestamp\").run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../index_status/index\">indexStatus</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/index_wait/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/index_wait/</a>\n  </p>\n</div>\n","api/java/index_status/index":"<h1 class=\"title\">ReQL command: indexStatus</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">table.indexStatus([, index...]) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Get the status of the specified indexes on this table, or the status of all indexes on this table if no indexes are specified.</p> <p>The result is an array where for each index, there will be an object like this one (shown as JSON):</p> <pre data-language=\"java\">{\n    \"index\": &lt;indexName&gt;,\n    \"ready\": true,\n    \"function\": &lt;binary&gt;,\n    \"multi\": &lt;bool&gt;,\n    \"geo\": &lt;bool&gt;,\n    \"outdated\": &lt;bool&gt;\n}\n</pre>  <p>or this one:</p> <pre data-language=\"java\">{\n    \"index\": &lt;indexName&gt;,\n    \"ready\": false,\n    \"progress\": &lt;float&gt;,\n    \"function\": &lt;binary&gt;,\n    \"multi\": &lt;bool&gt;,\n    \"geo\": &lt;bool&gt;,\n    \"outdated\": &lt;bool&gt;\n}\n</pre>  <p>The <code class=\"highlighter-rouge\">multi</code> field will be <code class=\"highlighter-rouge\">true</code> or <code class=\"highlighter-rouge\">false</code> depending on whether this index was created as a multi index; the <code class=\"highlighter-rouge\">geo</code> field will be <code class=\"highlighter-rouge\">true</code> or <code class=\"highlighter-rouge\">false</code> depending on whether this index was created as a geospatial index. See <a href=\"../index_create/index\">indexCreate</a> for details. The <code class=\"highlighter-rouge\">outdated</code> field will be true if the index is outdated in the current version of RethinkDB and needs to be rebuilt. The <code class=\"highlighter-rouge\">progress</code> field is a float between <code class=\"highlighter-rouge\">0</code> and <code class=\"highlighter-rouge\">1</code>, indicating how far along the server is in constructing indexes after the most recent change to the table that would affect them. (<code class=\"highlighter-rouge\">0</code> indicates no such indexes have been constructed; <code class=\"highlighter-rouge\">1</code> indicates all of them have.)</p> <p>The <code class=\"highlighter-rouge\">function</code> field is a binary object containing an opaque representation of the secondary index (including the <code class=\"highlighter-rouge\">multi</code> argument if specified). It can be passed as the second argument to <a href=\"../index_create/index\">indexCreate</a> to create a new index with the same function; see <code class=\"highlighter-rouge\">indexCreate</code> for more information.</p> <p><strong>Example:</strong> Get the status of all the indexes on <code class=\"highlighter-rouge\">test</code>:</p> <pre data-language=\"java\">r.table(\"test\").indexStatus().run(conn);\n</pre>  <p><strong>Example:</strong> Get the status of the <code class=\"highlighter-rouge\">timestamp</code> index:</p> <pre data-language=\"java\">r.table(\"test\").indexStatus(\"timestamp\").run(conn);\n</pre>  <p><strong>Example:</strong> Save the binary representation of the index:</p> <pre data-language=\"java\">byte[] func = r.table(\"test\").indexStatus(\"timestamp\").nth(0).g(\"function\")\n    .run(conn);\n\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../index_wait/index\">indexWait</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/index_status/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/index_status/</a>\n  </p>\n</div>\n","api/java/replace/index":"<h1 class=\"title\">ReQL command: replace</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">table.replace(object | function) → object\nselection.replace(object | function) → object\nsingleSelection.replace(object | function) → object\n</pre> <p><img src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/replace.png\" class=\"api_command_illustration\"></p> <h2 id=\"description\">Description</h2> <p>Replace documents in a table. Accepts a JSON document or a ReQL expression, and replaces the original document with the new one. The new document must have the same primary key as the original document.</p> <p>The <code class=\"highlighter-rouge\">replace</code> command can be used to both insert and delete documents. If the “replaced” document has a primary key that doesn’t exist in the table, the document will be inserted; if an existing document is replaced with <code class=\"highlighter-rouge\">null</code>, the document will be deleted. Since <code class=\"highlighter-rouge\">update</code> and <code class=\"highlighter-rouge\">replace</code> operations are performed atomically, this allows atomic inserts and deletes as well.</p> <p>You can pass the following options using <a href=\"../optarg/index\">optArg</a>:</p> <ul> <li>\n<code class=\"highlighter-rouge\">durability</code>: possible values are <code class=\"highlighter-rouge\">hard</code> and <code class=\"highlighter-rouge\">soft</code>. This option will override the table or query’s durability setting (set in <a href=\"../run/index\">run</a>). In soft durability mode RethinkDB will acknowledge the write immediately after receiving it, but before the write has been committed to disk.</li> <li>\n<code class=\"highlighter-rouge\">return_changes</code>: <ul> <li>\n<code class=\"highlighter-rouge\">true</code>: return a <code class=\"highlighter-rouge\">changes</code> array consisting of <code class=\"highlighter-rouge\">old_val</code>/<code class=\"highlighter-rouge\">new_val</code> objects describing the changes made, only including the documents actually updated.</li> <li>\n<code class=\"highlighter-rouge\">false</code>: do not return a <code class=\"highlighter-rouge\">changes</code> array (the default).</li> <li>\n<code class=\"highlighter-rouge\">\"always\"</code>: behave as <code class=\"highlighter-rouge\">true</code>, but include all documents the command tried to update whether or not the update was successful. (This was the behavior of <code class=\"highlighter-rouge\">true</code> pre-2.0.)</li> </ul> </li> <li>\n<code class=\"highlighter-rouge\">non_atomic</code>: if set to <code class=\"highlighter-rouge\">true</code>, executes the replacement and distributes the result to replicas in a non-atomic fashion. This flag is required to perform non-deterministic updates, such as those that require reading data from another table.</li> </ul> <p>Replace returns an object that contains the following attributes:</p> <ul> <li>\n<code class=\"highlighter-rouge\">replaced</code>: the number of documents that were replaced.</li> <li>\n<code class=\"highlighter-rouge\">unchanged</code>: the number of documents that would have been modified, except that the new value was the same as the old value.</li> <li>\n<code class=\"highlighter-rouge\">inserted</code>: the number of new documents added. A document is considered inserted if its primary key did not exist in the table at the time of the <code class=\"highlighter-rouge\">replace</code> operation.</li> <li>\n<code class=\"highlighter-rouge\">deleted</code>: the number of deleted documents when doing a replace with <code class=\"highlighter-rouge\">null</code>.</li> <li>\n<code class=\"highlighter-rouge\">errors</code>: the number of errors encountered while performing the replace.</li> <li>\n<code class=\"highlighter-rouge\">first_error</code>: If errors were encountered, contains the text of the first error.</li> <li>\n<code class=\"highlighter-rouge\">skipped</code>: 0 for a replace operation.</li> <li>\n<code class=\"highlighter-rouge\">changes</code>: if <code class=\"highlighter-rouge\">returnChanges</code> is set to <code class=\"highlighter-rouge\">true</code>, this will be an array of objects, one for each objected affected by the <code class=\"highlighter-rouge\">replace</code> operation. Each object will have two keys: <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"s2\">\"new_val\"</span><span class=\"p\">:</span><span class=\"err\">&lt;new</span><span class=\"err\">value&gt;</span><span class=\"p\">,</span><span class=\"s2\">\"old_val\"</span><span class=\"p\">:</span><span class=\"err\">&lt;old</span><span class=\"err\">value&gt;</span><span class=\"p\">}</span></code>.</li> </ul> <blockquote class=\"infobox infobox-alert\">\n<p>RethinkDB write operations will only throw exceptions if errors occur before any writes. Other errors will be listed in <code class=\"highlighter-rouge\">first_error</code>, and <code class=\"highlighter-rouge\">errors</code> will be set to a non-zero count. To properly handle errors with this term, code must both handle exceptions and check the <code class=\"highlighter-rouge\">errors</code> return value!</p> </blockquote> <p><strong>Example:</strong> Replace the document with the primary key <code class=\"highlighter-rouge\">1</code>.</p> <pre data-language=\"java\">r.table(\"posts\").get(1).replace(\n    r.hashMap(\"id\", 1).with(\"title\", \"Lorem ipsum\")\n     .with(\"content\", \"Aleas jacta est\")\n     .with(\"status\", \"draft\")\n).run(conn);\n</pre>  <p><strong>Example:</strong> Remove the field <code class=\"highlighter-rouge\">status</code> from all posts.</p> <pre data-language=\"java\">r.table(\"posts\").replace(post -&gt; post.without(\"status\")).run(conn);\n</pre>  <p><strong>Example:</strong> Remove all the fields that are not <code class=\"highlighter-rouge\">id</code>, <code class=\"highlighter-rouge\">title</code> or <code class=\"highlighter-rouge\">content</code>.</p> <pre data-language=\"java\">r.table(\"posts\").replace(\n    post -&gt; post.pluck(\"id\", \"title\", \"content\")\n).run(conn);\n</pre>  <p><strong>Example:</strong> Replace the document with the primary key <code class=\"highlighter-rouge\">1</code> using soft durability.</p> <pre data-language=\"java\">r.table(\"posts\").get(1).replace(\n    r.hashMap(\"id\", 1)\n     .with(\"title\", \"Lorem ipsum\")\n     .with(\"content\", \"Aleas jacta est\")\n     .with(\"status\", \"draft\")\n).optArg(\"durability\", \"soft\").run(conn);\n</pre>  <p><strong>Example:</strong> Replace the document with the primary key <code class=\"highlighter-rouge\">1</code> and return the values of the document before and after the replace operation.</p> <pre data-language=\"java\">r.table(\"posts\").get(1).replace(\n    r.hashMap(\"id\", 1)\n     .with(\"title\", \"Lorem ipsum\")\n     .with(\"content\", \"Aleas jacta est\")\n     .with(\"status\", \"published\")\n).optArg(\"return_changes\", true).run(conn);\n</pre>  <p>The result will have a <code class=\"highlighter-rouge\">changes</code> field:</p> <pre data-language=\"java\">{\n    \"deleted\": 0,\n    \"errors\":  0,\n    \"inserted\": 0,\n    \"changes\": [\n        {\n            \"new_val\": {\n                \"id\":1,\n                \"title\": \"Lorem ipsum\"\n                \"content\": \"Aleas jacta est\",\n                \"status\": \"published\",\n            },\n            \"old_val\": {\n                \"id\":1,\n                \"title\": \"Lorem ipsum\"\n                \"content\": \"TODO\",\n                \"status\": \"draft\",\n                \"author\": \"William\",\n            }\n        }\n    ],   \n    \"replaced\": 1,\n    \"skipped\": 0,\n    \"unchanged\": 0\n}\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../insert/index\">insert</a></li> <li><a href=\"../update/index\">update</a></li> <li><a href=\"../delete/index\">delete</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/replace/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/replace/</a>\n  </p>\n</div>\n","api/java/sync/index":"<h1 class=\"title\">ReQL command: sync</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">table.sync() → object\n</pre> <h2 id=\"description\">Description</h2> <p>Ensure that writes on a given table are written to permanent storage. Queries that specify soft durability do not wait for writes to be committed to disk; a call to <code class=\"highlighter-rouge\">sync</code> on a table will not return until all previous writes to the table are completed, guaranteeing the data’s persistence.</p> <p>If successful, the operation returns an object: <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"s2\">\"synced\"</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">}</span></code>.</p> <p><strong>Example:</strong> After having updated multiple heroes with soft durability, we now want to wait until these changes are persisted.</p> <pre data-language=\"java\">r.table(\"marvel\").sync().run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../noreply_wait/index\">noreplyWait</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/sync/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/sync/</a>\n  </p>\n</div>\n","api/java/db/index":"<h1 class=\"title\">ReQL command: db</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.db(dbName) → db\n</pre> <h2 id=\"description\">Description</h2> <p>Reference a database.</p> <p>The <code class=\"highlighter-rouge\">db</code> command is optional. If it is not present in a query, the query will run against the default database for the connection, specified in the <code class=\"highlighter-rouge\">db</code> argument to <a href=\"../connect/index\">connect</a>.</p> <p><strong>Example:</strong> Explicitly specify a database for a query.</p> <pre data-language=\"java\">r.db(\"heroes\").table(\"marvel\").run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../table/index\">table</a></li> <li><a href=\"../db_list/index\">dbList</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/db/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/db/</a>\n  </p>\n</div>\n","api/java/insert/index":"<h1 class=\"title\">ReQL command: insert</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">table.insert(object | [object1, object2, ...]) → object\n</pre> <h2 id=\"description\">Description</h2> <p><img src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/insert_javascript.png\" class=\"api_command_illustration\"></p> <p>You can pass the following options using <a href=\"../optarg/index\">optArg</a>:</p> <ul> <li>\n<code class=\"highlighter-rouge\">durability</code>: possible values are <code class=\"highlighter-rouge\">hard</code> and <code class=\"highlighter-rouge\">soft</code>. This option will override the table or query’s durability setting (set in <a href=\"../run/index\">run</a>). In soft durability mode RethinkDB will acknowledge the write immediately after receiving and caching it, but before the write has been committed to disk.</li> <li>\n<code class=\"highlighter-rouge\">return_changes</code>: <ul> <li>\n<code class=\"highlighter-rouge\">true</code>: return a <code class=\"highlighter-rouge\">changes</code> array consisting of <code class=\"highlighter-rouge\">old_val</code>/<code class=\"highlighter-rouge\">new_val</code> objects describing the changes made, only including the documents actually updated.</li> <li>\n<code class=\"highlighter-rouge\">false</code>: do not return a <code class=\"highlighter-rouge\">changes</code> array (the default).</li> <li>\n<code class=\"highlighter-rouge\">\"always\"</code>: behave as <code class=\"highlighter-rouge\">true</code>, but include all documents the command tried to update whether or not the update was successful. (This was the behavior of <code class=\"highlighter-rouge\">true</code> pre-2.0.)</li> </ul> </li> <li>\n<code class=\"highlighter-rouge\">conflict</code>: Determine handling of inserting documents with the same primary key as existing entries. There are three built-in methods: <code class=\"highlighter-rouge\">\"error\"</code>, <code class=\"highlighter-rouge\">\"replace\"</code> or <code class=\"highlighter-rouge\">\"update\"</code>; alternatively, you may provide a conflict resolution function. <ul> <li>\n<code class=\"highlighter-rouge\">\"error\"</code>: Do not insert the new document and record the conflict as an error. This is the default.</li> <li>\n<code class=\"highlighter-rouge\">\"replace\"</code>: <a href=\"../replace/index\">Replace</a> the old document in its entirety with the new one.</li> <li>\n<code class=\"highlighter-rouge\">\"update\"</code>: <a href=\"../update/index\">Update</a> fields of the old document with fields from the new one.</li> <li>\n<code class=\"highlighter-rouge\">(id, oldDoc, newDoc) -&gt; resolvedDoc</code>: a function that receives the id, old and new documents as arguments and returns a document which will be inserted in place of the conflicted one.</li> </ul> </li> </ul> <p>If <code class=\"highlighter-rouge\">return_changes</code> is set to <code class=\"highlighter-rouge\">true</code> or <code class=\"highlighter-rouge\">\"always\"</code>, the <code class=\"highlighter-rouge\">changes</code> array will follow the same order as the inserted documents. Documents in <code class=\"highlighter-rouge\">changes</code> for which an error occurs (such as a key conflict) will have a third field, <code class=\"highlighter-rouge\">error</code>, with an explanation of the error.</p> <p>Insert returns an object that contains the following attributes:</p> <ul> <li>\n<code class=\"highlighter-rouge\">inserted</code>: the number of documents successfully inserted.</li> <li>\n<code class=\"highlighter-rouge\">replaced</code>: the number of documents updated when <code class=\"highlighter-rouge\">conflict</code> is set to <code class=\"highlighter-rouge\">\"replace\"</code> or <code class=\"highlighter-rouge\">\"update\"</code>.</li> <li>\n<code class=\"highlighter-rouge\">unchanged</code>: the number of documents whose fields are identical to existing documents with the same primary key when <code class=\"highlighter-rouge\">conflict</code> is set to <code class=\"highlighter-rouge\">\"replace\"</code> or <code class=\"highlighter-rouge\">\"update\"</code>.</li> <li>\n<code class=\"highlighter-rouge\">errors</code>: the number of errors encountered while performing the insert.</li> <li>\n<code class=\"highlighter-rouge\">first_error</code>: If errors were encountered, contains the text of the first error.</li> <li>\n<code class=\"highlighter-rouge\">deleted</code> and <code class=\"highlighter-rouge\">skipped</code>: 0 for an insert operation.</li> <li>\n<code class=\"highlighter-rouge\">generated_keys</code>: a list of generated primary keys for inserted documents whose primary keys were not specified (capped to 100,000).</li> <li>\n<code class=\"highlighter-rouge\">warnings</code>: if the field <code class=\"highlighter-rouge\">generated_keys</code> is truncated, you will get the warning <em>“Too many generated keys (&lt;X&gt;), array truncated to 100000.”</em>.</li> <li>\n<code class=\"highlighter-rouge\">changes</code>: if <code class=\"highlighter-rouge\">returnChanges</code> is set to <code class=\"highlighter-rouge\">true</code>, this will be an array of objects, one for each objected affected by the <code class=\"highlighter-rouge\">insert</code> operation. Each object will have two keys: <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"err\">new_val</span><span class=\"p\">:</span><span class=\"err\">&lt;new</span><span class=\"err\">value&gt;</span><span class=\"p\">,</span><span class=\"err\">old_val</span><span class=\"p\">:</span><span class=\"kc\">null</span><span class=\"p\">}</span></code>.</li> </ul> <blockquote class=\"infobox infobox-alert\">\n<p>RethinkDB write operations will only throw exceptions if errors occur before any writes. Other errors will be listed in <code class=\"highlighter-rouge\">first_error</code>, and <code class=\"highlighter-rouge\">errors</code> will be set to a non-zero count. To properly handle errors with this term, code must both handle exceptions and check the <code class=\"highlighter-rouge\">errors</code> return value!</p> </blockquote> <p><strong>Example:</strong> Insert a document into the table <code class=\"highlighter-rouge\">posts</code>.</p> <pre data-language=\"java\">r.table(\"posts\").insert(\n    r.hashMap(\"id\", 1)\n     .with(\"title\", \"Lorem ipsum\")\n     .with(\"content\", \"Dolor sit amet\")\n).run(conn);\n</pre>   <p>The result will be:</p> <pre data-language=\"java\">{\n    \"deleted\": 0,\n    \"errors\": 0,\n    \"inserted\": 1,\n    \"replaced\": 0,\n    \"skipped\": 0,\n    \"unchanged\": 0\n}\n</pre>  <p><strong>Example:</strong> Insert a document without a defined primary key into the table <code class=\"highlighter-rouge\">posts</code> where the primary key is <code class=\"highlighter-rouge\">id</code>.</p> <pre data-language=\"java\">r.table(\"posts\").insert(\n    r.hashMap(\"title\", \"Lorem ipsum\")\n     .with(\"content\", \"Dolor sit amet\")\n).run(conn);\n</pre>  <p>RethinkDB will generate a primary key and return it in <code class=\"highlighter-rouge\">generated_keys</code>.</p> <pre data-language=\"java\">{\n    \"deleted\": 0,\n    \"errors\": 0,\n    \"generated_keys\": [\n        \"dd782b64-70a7-43e4-b65e-dd14ae61d947\"\n    ],\n    \"inserted\": 1,\n    \"replaced\": 0,\n    \"skipped\": 0,\n    \"unchanged\": 0\n}\n</pre>  <p>Retrieve the document you just inserted with:</p> <pre data-language=\"java\">r.table(\"posts\").get(\"dd782b64-70a7-43e4-b65e-dd14ae61d947\").run(conn);\n</pre>  <p>And you will get back:</p> <pre data-language=\"java\">{\n    \"id\": \"dd782b64-70a7-43e4-b65e-dd14ae61d947\",\n    \"title\": \"Lorem ipsum\",\n    \"content\": \"Dolor sit amet\",\n}\n</pre>  <p><strong>Example:</strong> Insert multiple documents into the table <code class=\"highlighter-rouge\">users</code>.</p> <pre data-language=\"java\">r.table(\"users\").insert(r.array(\n    r.hashMap(\"id\", \"william\").with(\"email\", \"william@rethinkdb.com\"),\n    r.hashMap(\"id\", \"lara\").with(\"email\", \"lara@rethinkdb.com\")\n)).run(conn);\n</pre>  <p><strong>Example:</strong> Insert a document into the table <code class=\"highlighter-rouge\">users</code>, replacing the document if it already exists.</p> <pre data-language=\"java\">r.table(\"users\").insert(\n    r.hashMap(\"id\", \"william\").with(\"email\", \"william@rethinkdb.com\")\n).optArg(\"conflict\", \"replace\").run(conn);\n</pre>  <p><strong>Example:</strong> Copy the documents from <code class=\"highlighter-rouge\">posts</code> to <code class=\"highlighter-rouge\">postsBackup</code>.</p> <pre data-language=\"java\">r.table(\"postsBackup\").insert(r.table(\"posts\")).run(conn);\n</pre>  <p><strong>Example:</strong> Get back a copy of the inserted document (with its generated primary key).</p> <pre data-language=\"java\">r.table(\"posts\").insert(\n    r.hashMap(\"title\", \"Lorem ipsum\")\n     .with(\"content\", \"Dolor sit amet\")\n).optArg(\"return_changes\", true).run(conn);\n</pre>  <p>The result will be</p> <pre data-language=\"java\">{\n    \"deleted\": 0,\n    \"errors\": 0,\n    \"generated_keys\": [\n        \"dd782b64-70a7-43e4-b65e-dd14ae61d947\"\n    ],\n    \"inserted\": 1,\n    \"replaced\": 0,\n    \"skipped\": 0,\n    \"unchanged\": 0,\n    \"changes\": [\n        {\n            \"old_val\": null,\n            \"new_val\": {\n                \"id\": \"dd782b64-70a7-43e4-b65e-dd14ae61d947\",\n                \"title\": \"Lorem ipsum\",\n                \"content\": \"Dolor sit amet\"\n            }\n        }\n    ]\n}\n</pre>  <p><strong>Example:</strong> Provide a resolution function that concatenates memo content in case of conflict.</p> <pre data-language=\"java\">// assume newMemos is a list of memo documents to insert\nr.table(\"memos\").insert(new_memos).optArg(\"conflict\",\n    (id, old_doc, new_doc) -&gt; new_doc.merge(\n        r.hashMap(content, old_doc.g(\"content\").add(\"\\n\")\n                  .add(new_doc.g(\"content\")))\n    )\n).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../update/index\">update</a></li> <li><a href=\"../replace/index\">replace</a></li> <li><a href=\"../delete/index\">delete</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/insert/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/insert/</a>\n  </p>\n</div>\n","api/java/update/index":"<h1 class=\"title\">ReQL command: update</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">table.update(object | function) → object\nselection.update(object | function) → object\nsingleSelection.update(object | function) → object\n</pre> <h2 id=\"description\">Description</h2> <p>Update JSON documents in a table. Accepts a JSON document, a ReQL expression, or a combination of the two.</p> <p>You can pass the following options using <a href=\"../optarg/index\">optArg</a>:</p> <ul> <li>\n<code class=\"highlighter-rouge\">durability</code>: possible values are <code class=\"highlighter-rouge\">hard</code> and <code class=\"highlighter-rouge\">soft</code>. This option will override the table or query’s durability setting (set in <a href=\"../run/index\">run</a>). In soft durability mode RethinkDB will acknowledge the write immediately after receiving it, but before the write has been committed to disk.</li> <li>\n<code class=\"highlighter-rouge\">return_changes</code>: <ul> <li>\n<code class=\"highlighter-rouge\">true</code>: return a <code class=\"highlighter-rouge\">changes</code> array consisting of <code class=\"highlighter-rouge\">old_val</code>/<code class=\"highlighter-rouge\">new_val</code> objects describing the changes made, only including the documents actually updated.</li> <li>\n<code class=\"highlighter-rouge\">false</code>: do not return a <code class=\"highlighter-rouge\">changes</code> array (the default).</li> <li>\n<code class=\"highlighter-rouge\">\"always\"</code>: behave as <code class=\"highlighter-rouge\">true</code>, but include all documents the command tried to update whether or not the update was successful. (This was the behavior of <code class=\"highlighter-rouge\">true</code> pre-2.0.)</li> </ul> </li> <li>\n<code class=\"highlighter-rouge\">non_atomic</code>: if set to <code class=\"highlighter-rouge\">true</code>, executes the update and distributes the result to replicas in a non-atomic fashion. This flag is required to perform non-deterministic updates, such as those that require reading data from another table.</li> </ul> <p>Update returns an object that contains the following attributes:</p> <ul> <li>\n<code class=\"highlighter-rouge\">replaced</code>: the number of documents that were updated.</li> <li>\n<code class=\"highlighter-rouge\">unchanged</code>: the number of documents that would have been modified except the new value was the same as the old value.</li> <li>\n<code class=\"highlighter-rouge\">skipped</code>: the number of documents that were skipped because the document didn’t exist.</li> <li>\n<code class=\"highlighter-rouge\">errors</code>: the number of errors encountered while performing the update.</li> <li>\n<code class=\"highlighter-rouge\">first_error</code>: If errors were encountered, contains the text of the first error.</li> <li>\n<code class=\"highlighter-rouge\">deleted</code> and <code class=\"highlighter-rouge\">inserted</code>: 0 for an update operation.</li> <li>\n<code class=\"highlighter-rouge\">changes</code>: if <code class=\"highlighter-rouge\">return_changes</code> is set to <code class=\"highlighter-rouge\">true</code>, this will be an array of objects, one for each objected affected by the <code class=\"highlighter-rouge\">update</code> operation. Each object will have two keys: <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"err\">new_val</span><span class=\"p\">:</span><span class=\"err\">&lt;new</span><span class=\"err\">value&gt;</span><span class=\"p\">,</span><span class=\"err\">old_val</span><span class=\"p\">:</span><span class=\"err\">&lt;old</span><span class=\"err\">value&gt;</span><span class=\"p\">}</span></code>.</li> </ul> <blockquote class=\"infobox infobox-alert\">\n<p>RethinkDB write operations will only throw exceptions if errors occur before any writes. Other errors will be listed in <code class=\"highlighter-rouge\">first_error</code>, and <code class=\"highlighter-rouge\">errors</code> will be set to a non-zero count. To properly handle errors with this term, code must both handle exceptions and check the <code class=\"highlighter-rouge\">errors</code> return value!</p> </blockquote> <p><strong>Example:</strong> Update the status of the post with <code class=\"highlighter-rouge\">id</code> of <code class=\"highlighter-rouge\">1</code> to <code class=\"highlighter-rouge\">published</code>.</p> <pre data-language=\"java\">r.table(\"posts\").get(1).update(r.hashMap(\"status\", \"published\")).run(conn);\n</pre>  <p><strong>Example:</strong> Update the status of all posts to <code class=\"highlighter-rouge\">published</code>.</p> <pre data-language=\"java\">r.table(\"posts\").update(r.hashMap(\"status\", \"published\")).run(conn);\n</pre>  <p><strong>Example:</strong> Update the status of all the posts written by William.</p> <pre data-language=\"java\">r.table(\"posts\").filter(\n    r.hashMap(\"author\", \"William\")).update(r.hashMap(\"status\", \"published\")\n).run(conn);\n</pre>  <blockquote class=\"infobox infobox-alert\">\n<p>Note that <code class=\"highlighter-rouge\">filter</code>, <code class=\"highlighter-rouge\">getAll</code> and similar operations do <em>not</em> execute in an atomic fashion with <code class=\"highlighter-rouge\">update</code>. Read <a href=\"../../../docs/consistency/index\">Consistency guarantees</a> for more details. Also, see the example for conditional updates below for a solution using <code class=\"highlighter-rouge\">branch</code> in an <code class=\"highlighter-rouge\">update</code> clause.</p> </blockquote> <p><strong>Example:</strong> Increment the field <code class=\"highlighter-rouge\">view</code> of the post with <code class=\"highlighter-rouge\">id</code> of <code class=\"highlighter-rouge\">1</code>. This query will throw an error if the field <code class=\"highlighter-rouge\">views</code> doesn’t exist.</p> <pre data-language=\"java\">r.table(\"posts\").get(1).update(\n    post -&gt; r.hashMap(\"views\", post.g(\"views\").add(1))\n).run(conn);\n</pre>  <p><strong>Example:</strong> Increment the field <code class=\"highlighter-rouge\">view</code> of the post with <code class=\"highlighter-rouge\">id</code> of <code class=\"highlighter-rouge\">1</code>. If the field <code class=\"highlighter-rouge\">views</code> does not exist, it will be set to <code class=\"highlighter-rouge\">0</code>.</p> <pre data-language=\"java\">r.table(\"posts\").get(1).update(\n    post -&gt; r.hashMap(\"views\", post.g(\"views\").add(1).default_(0))\n).run(conn);\n</pre>  <p><strong>Example:</strong> Perform a conditional update.<br> If the post has more than 100 views, set the <code class=\"highlighter-rouge\">type</code> of a post to <code class=\"highlighter-rouge\">hot</code>, else set it to <code class=\"highlighter-rouge\">normal</code>.</p> <pre data-language=\"java\">r.table(\"posts\").get(1).update(\n    post -&gt; r.branch(post.g(\"views\").gt(100),\n                     r.hashMap(\"type\", \"hot\"),\n                     r.hashMap(\"type\", \"normal\")\n    )\n).run(conn);\n</pre>  <p><strong>Example:</strong> Update the field <code class=\"highlighter-rouge\">numComments</code> with the result of a sub-query. Because this update is not atomic, you must pass the <code class=\"highlighter-rouge\">non_atomic</code> flag.</p> <pre data-language=\"java\">r.table(\"posts\").get(1).update(\n    r.hashMap(\"numComments\", r.table(\"comments\")\n     .filter(r.hashMap(\"id_post\", 1)).count())\n).optArg(\"non_atomic\", true).run(conn);\n</pre>  <p>If you forget to specify the <code class=\"highlighter-rouge\">non_atomic</code> flag, you will get a <code class=\"highlighter-rouge\">ReqlRuntimeError</code>:</p> <pre data-language=\"java\">ReqlRuntimeError: Could not prove function deterministic.  Maybe you want to use the non_atomic flag? \n</pre>  <p><strong>Example:</strong> Update the field <code class=\"highlighter-rouge\">numComments</code> with a random value between 0 and 100. This update cannot be proven deterministic because of <code class=\"highlighter-rouge\">r.js</code> (and in fact is not), so you must pass the <code class=\"highlighter-rouge\">nonAtomic</code> flag.</p> <pre data-language=\"java\">r.table(\"posts\").get(1).update(\n    r.hashMap(\"numComments\", r.js(\"Math.floor(Math.random()*100)\"))\n).optArg(\"non_atomic\", true).run(conn);\n</pre>  <p><strong>Example:</strong> Update the status of the post with <code class=\"highlighter-rouge\">id</code> of <code class=\"highlighter-rouge\">1</code> using soft durability.</p> <pre data-language=\"java\">r.table(\"posts\").get(1).update(\n    r.hashMap(status, \"published\")\n).optArg(\"durability\", \"soft\").run(conn);\n</pre>  <p><strong>Example:</strong> Increment the field <code class=\"highlighter-rouge\">views</code> and return the values of the document before and after the update operation.</p> <pre data-language=\"java\">r.table(\"posts\").get(1).update(\n    post -&gt; r.hashMap(\"views\", post.g(\"views\").add(1))\n).optArg(\"return_changes\", true).run(conn);\n</pre>  <p>The result will now include a <code class=\"highlighter-rouge\">changes</code> field:</p> <pre data-language=\"java\">{\n    \"deleted\": 1,\n    \"errors\": 0,\n    \"inserted\": 0,\n    \"changes\": [\n        {\n            \"new_val\": {\n                \"id\": 1,\n                \"author\": \"Julius_Caesar\",\n                \"title\": \"Commentarii de Bello Gallico\",\n                \"content\": \"Aleas jacta est\",\n                \"views\": 207\n            },\n            \"old_val\": {\n                \"id\": 1,\n                \"author\": \"Julius_Caesar\",\n                \"title\": \"Commentarii de Bello Gallico\",\n                \"content\": \"Aleas jacta est\",\n                \"views\": 206\n            }\n        }\n    ],\n    \"replaced\": 0,\n    \"skipped\": 0,\n    \"unchanged\": 0\n}\n</pre>  <h3 id=\"updating-nested-fields\">Updating nested fields</h3> <p>The <code class=\"highlighter-rouge\">update</code> command supports RethinkDB’s <a href=\"../../../docs/nested-fields/java/index\">nested field</a> syntax to update subdocuments. Consider a user table with contact information in this format:</p> <pre data-language=\"java\">{\n\t\"id\": 10001,\n\t\"name\": \"Bob Smith\",\n\t\"contact\": {\n\t\t\"phone\": {\n\t\t\t\"work\": \"408-555-1212\",\n\t\t\t\"home\": \"408-555-1213\",\n\t\t\t\"cell\": \"408-555-1214\"\n\t\t},\n\t\t\"email\": {\n\t\t\t\"work\": \"bob@smith.com\",\n\t\t\t\"home\": \"bobsmith@example.com\",\n\t\t\t\"other\": \"bobbys@moosecall.net\"\n\t\t},\n\t\t\"im\": {\n\t\t\t\"skype\": \"Bob Smith\",\n\t\t\t\"aim\": \"bobmoose\",\n\t\t\t\"icq\": \"nobodyremembersicqnumbers\"\n\t\t}\n\t},\n\t\"notes\": [\n\t\t{\n\t\t\t\"date\": r.time(2014,1,1,'Z'),\n\t\t\t\"from\": \"John Doe\",\n\t\t\t\"subject\": \"My name is even more boring than Bob's\"\n\t\t},\n\t\t{\n\t\t\t\"date\": r.time(2014,2,2,'Z'),\n\t\t\t\"from\": \"Bob Smith Sr\",\n\t\t\t\"subject\": \"Happy Second of February\"\n\t\t}\n\t]\n}\n</pre>  <p><strong>Example:</strong> Update Bob Smith’s cell phone number.</p> <pre data-language=\"java\">r.table(\"users\").get(10001).update(\n    r.hashMap(\"contact\",\n        r.hashMap(\"phone\",\n            r.hashMap(\"cell\", \"408-555-4242\")))\n).run(conn);\n</pre>  <p><strong>Example:</strong> Add another note to Bob Smith’s record.</p> <pre data-language=\"java\">import com.rethinkdb.model.MapObject;\n\nMapObject newNote = r.hashMap(\"date\", r.now())\n                     .with(\"from\", \"Admin\")\n                     .with(\"subject\", \"You killed my father\");\n\nr.table(\"users\").get(10001).update(\n    row -&gt; r.hashMap(\"notes\", row.g(\"notes\").append(newNote))\n).run(conn);\n</pre>  <p>This will fail if the <code class=\"highlighter-rouge\">notes</code> field does not exist in the document. To perform this as an “upsert” (update or insert), use the <a href=\"../default/index\">default_</a> command to ensure the field is initialized as an empty list.</p> <pre data-language=\"java\">r.table(\"users\").get(10001).update(\n    row -&gt; r.hashMap(notes, row.g(\"notes\").default_(r.array()).append(newNote))\n).run(conn);\n</pre>  <p><strong>Example:</strong> Send a note to every user with an ICQ number.</p> <pre data-language=\"java\">import com.rethinkdb.model.MapObject;\n\nMapObject icqNote = r.hashMap(\"date\", r.now())\n                     .with(\"from\", \"Admin\")\n                     .with(\"subject\", \"Welcome to the future\");\n\nr.table(\"users\").filter(\n    row -&gt; row.hasFields(r.hashMap(\"contact\", r.hashMap(\"im\", \"icq\")))\n).update(r.hashMap(\"notes\", row.g(\"notes\").append(icqNote))).run(conn);\n</pre>  <p><strong>Example:</strong> Replace all of Bob’s IM records. Normally, <code class=\"highlighter-rouge\">update</code> will merge nested documents together; to replace the entire <code class=\"highlighter-rouge\">\"im\"</code> document, use the <a href=\"../literal/index\">literal</a> command.</p> <pre data-language=\"java\">r.table(\"users\").get(10001).update(\n    r.hashMap(\"contact\",\n        r.hashMap(\"im\",\n            r.literal(r.hashMap(\"aim\", \"themoosemeister\"))))\n).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../insert/index\">insert</a></li> <li><a href=\"../replace/index\">replace</a></li> <li><a href=\"../delete/index\">delete</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/update/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/update/</a>\n  </p>\n</div>\n","api/java/delete/index":"<h1 class=\"title\">ReQL command: delete</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">table.delete() → object\nselection.delete() → object\nsingleSelection.delete() → object\n</pre> <p><img src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/delete-vector.png\" class=\"api_command_illustration\"></p> <h2 id=\"description\">Description</h2> <p>Delete one or more documents from a table.</p> <p>You can pass the following options using <a href=\"../optarg/index\">optArg</a>:</p> <ul> <li>\n<code class=\"highlighter-rouge\">durability</code>: possible values are <code class=\"highlighter-rouge\">hard</code> and <code class=\"highlighter-rouge\">soft</code>. This option will override the table or query’s durability setting (set in <a href=\"../run/index\">run</a>).<br> In soft durability mode RethinkDB will acknowledge the write immediately after receiving it, but before the write has been committed to disk.</li> <li>\n<code class=\"highlighter-rouge\">return_changes</code>: <ul> <li>\n<code class=\"highlighter-rouge\">true</code>: return a <code class=\"highlighter-rouge\">changes</code> array consisting of <code class=\"highlighter-rouge\">old_val</code>/<code class=\"highlighter-rouge\">new_val</code> objects describing the changes made, only including the documents actually updated.</li> <li>\n<code class=\"highlighter-rouge\">false</code>: do not return a <code class=\"highlighter-rouge\">changes</code> array (the default).</li> <li>\n<code class=\"highlighter-rouge\">\"always\"</code>: behave as <code class=\"highlighter-rouge\">true</code>, but include all documents the command tried to update whether or not the update was successful. (This was the behavior of <code class=\"highlighter-rouge\">true</code> pre-2.0.)</li> </ul> </li> </ul> <p><code class=\"highlighter-rouge\">delete</code> returns an object that contains the following attributes:</p> <ul> <li>\n<code class=\"highlighter-rouge\">deleted</code>: the number of documents that were deleted.</li> <li>\n<code class=\"highlighter-rouge\">skipped</code>: the number of documents that were skipped.<br> For example, if you attempt to delete a batch of documents, and another concurrent query deletes some of those documents first, they will be counted as skipped.</li> <li>\n<code class=\"highlighter-rouge\">errors</code>: the number of errors encountered while performing the delete.</li> <li>\n<code class=\"highlighter-rouge\">first_error</code>: If errors were encountered, contains the text of the first error.</li> <li>\n<code class=\"highlighter-rouge\">inserted</code>, <code class=\"highlighter-rouge\">replaced</code>, and <code class=\"highlighter-rouge\">unchanged</code>: all 0 for a delete operation..</li> <li>\n<code class=\"highlighter-rouge\">changes</code>: if <code class=\"highlighter-rouge\">returnChanges</code> is set to <code class=\"highlighter-rouge\">true</code>, this will be an array of objects, one for each objected affected by the <code class=\"highlighter-rouge\">delete</code> operation. Each object will have two keys: <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"err\">new_val</span><span class=\"p\">:</span><span class=\"kc\">null</span><span class=\"p\">,</span><span class=\"err\">old_val</span><span class=\"p\">:</span><span class=\"err\">&lt;old</span><span class=\"err\">value&gt;</span><span class=\"p\">}</span></code>.</li> </ul> <blockquote class=\"infobox infobox-alert\">\n<p>RethinkDB write operations will only throw exceptions if errors occur before any writes. Other errors will be listed in <code class=\"highlighter-rouge\">first_error</code>, and <code class=\"highlighter-rouge\">errors</code> will be set to a non-zero count. To properly handle errors with this term, code must both handle exceptions and check the <code class=\"highlighter-rouge\">errors</code> return value!</p> </blockquote> <p><strong>Example:</strong> Delete a single document from the table <code class=\"highlighter-rouge\">comments</code>.</p> <pre data-language=\"java\">r.table(\"comments\").get(\"7eab9e63-73f1-4f33-8ce4-95cbea626f59\").delete().run(conn);\n</pre>  <p><strong>Example:</strong> Delete all documents from the table <code class=\"highlighter-rouge\">comments</code>.</p> <pre data-language=\"java\">r.table(\"comments\").delete().run(conn);\n</pre>  <p><strong>Example:</strong> Delete all comments where the field <code class=\"highlighter-rouge\">idPost</code> is <code class=\"highlighter-rouge\">3</code>.</p> <pre data-language=\"java\">r.table(\"comments\").filter(r.hashMap(\"idPost\", 3)).delete().run(conn);\n</pre>  <p><strong>Example:</strong> Delete a single document from the table <code class=\"highlighter-rouge\">comments</code> and return its value.</p> <pre data-language=\"java\">r.table(\"comments\").get(\"7eab9e63-73f1-4f33-8ce4-95cbea626f59\")\n .delete().optArg(\"return_changes\", true).run(conn);\n</pre>  <p>The result looks like:</p> <pre data-language=\"java\">{\n    \"deleted\": 1,\n    \"errors\": 0,\n    \"inserted\": 0,\n    \"changes\": [\n        {\n            \"new_val\": null,\n            \"old_val\": {\n                \"id\": \"7eab9e63-73f1-4f33-8ce4-95cbea626f59\",\n                \"author\": \"William\",\n                \"comment\": \"Great post\",\n                \"idPost\": 3\n            }\n        }\n    ],\n    \"replaced\": 0,\n    \"skipped\": 0,\n    \"unchanged\": 0\n}\n</pre>  <p><strong>Example:</strong> Delete all documents from the table <code class=\"highlighter-rouge\">comments</code> without waiting for the operation to be flushed to disk.</p> <pre data-language=\"java\">r.table(\"comments\").delete().optArg(\"durability\", \"soft\").run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../insert/index\">insert</a></li> <li><a href=\"../update/index\">update</a></li> <li><a href=\"../replace/index\">replace</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/delete/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/delete/</a>\n  </p>\n</div>\n","api/java/table/index":"<h1 class=\"title\">ReQL command: table</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">db.table(name) → table\n</pre> <h2 id=\"description\">Description</h2> <p>Return all documents in a table. Other commands may be chained after <code class=\"highlighter-rouge\">table</code> to return a subset of documents (such as <a href=\"../get/index\">get</a> and <a href=\"../filter/index\">filter</a>) or perform further processing.</p> <p><strong>Example:</strong> Return all documents in the table ‘marvel’ of the default database.</p> <pre data-language=\"java\">r.table(\"marvel\").run(conn);\n</pre>  <p><strong>Example:</strong> Return all documents in the table ‘marvel’ of the database ‘heroes’.</p> <pre data-language=\"java\">r.db(\"heroes\").table(\"marvel\").run(conn);\n</pre>  <p>There are two <a href=\"../optarg/index\">optArgs</a> that may be specified.</p> <ul> <li>\n<code class=\"highlighter-rouge\">read_mode</code>: One of three possible values affecting the consistency guarantee for the table read: <ul> <li>\n<code class=\"highlighter-rouge\">single</code> returns values that are in memory (but not necessarily written to disk) on the primary replica. This is the default.</li> <li>\n<code class=\"highlighter-rouge\">majority</code> will only return values that are safely committed on disk on a majority of replicas. This requires sending a message to every replica on each read, so it is the slowest but most consistent.</li> <li>\n<code class=\"highlighter-rouge\">outdated</code> will return values that are in memory on an arbitrarily-selected replica. This is the fastest but least consistent.</li> </ul> </li> <li>\n<code class=\"highlighter-rouge\">identifier_format</code>: possible values are <code class=\"highlighter-rouge\">name</code> and <code class=\"highlighter-rouge\">uuid</code>, with a default of <code class=\"highlighter-rouge\">name</code>. If set to <code class=\"highlighter-rouge\">uuid</code>, then <a href=\"../../../docs/system-tables/index\">system tables</a> will refer to servers, databases and tables by UUID rather than name. (This only has an effect when used with system tables.)</li> </ul> <p><strong>Example:</strong> Allow potentially out-of-date data in exchange for faster reads.</p> <pre data-language=\"java\">r.db(\"heroes\").table(\"marvel\").optArg(\"read_mode\", \"outdated\").run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../filter/index\">filter</a></li> <li><a href=\"../get/index\">get</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/table/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/table/</a>\n  </p>\n</div>\n","api/java/get/index":"<h1 class=\"title\">ReQL command: get</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">table.get(key) → singleRowSelection\n</pre> <h2 id=\"description\">Description</h2> <p>Get a document by primary key.</p> <p>If no document exists with that primary key, <code class=\"highlighter-rouge\">get</code> will return <code class=\"highlighter-rouge\">null</code>.</p> <p><strong>Example:</strong> Find a document by UUID.</p> <pre data-language=\"java\">r.table(\"posts\").get(\"a9849eef-7176-4411-935b-79a6e3c56a74\").run(conn);\n</pre>  <p><strong>Example:</strong> Find a document and merge another document with it.</p> <pre data-language=\"java\">r.table(\"heroes\").get(3).merge(\n    r.hashMap(\"powers\", r.array(\"invisibility\", \"speed\"))\n).run(conn);\n</pre>  <p><strong>_Example:</strong> Subscribe to a document’s <a href=\"../../../docs/changefeeds/java/index\">changefeed</a>.</p> <pre data-language=\"java\">r.table(\"heroes\").get(3).changes().run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../get_all/index\">getAll</a></li> <li><a href=\"../between/index\">between</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/get/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/get/</a>\n  </p>\n</div>\n","api/java/get_all/index":"<h1 class=\"title\">ReQL command: getAll</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">table.getAll([key, key2...]) → selection\n</pre> <p><img src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/get-all.png\" class=\"api_command_illustration\"></p> <h2 id=\"description\">Description</h2> <p>Get all documents where the given value matches the value of the requested index.</p> <p><strong>Example:</strong> Secondary index keys are not guaranteed to be unique so we cannot query via <a href=\"../get/index\">get</a> when using a secondary index.</p> <pre data-language=\"java\">r.table(\"marvel\").getAll(\"man_of_steel\").optArg(\"index\", \"code_name\").run(conn);\n</pre>  <p><strong>Example:</strong> Without an index argument, we default to the primary index. While <code class=\"highlighter-rouge\">get</code> will either return the document or <code class=\"highlighter-rouge\">null</code> when no document with such a primary key value exists, this will return either a one or zero length stream.</p> <pre data-language=\"java\">r.table(\"dc\").getAll(\"superman\").run(conn);\n</pre>  <p><strong>Example:</strong> You can get multiple documents in a single call to <code class=\"highlighter-rouge\">get_all</code>.</p> <pre data-language=\"java\">r.table(\"dc\").getAll(\"superman\", \"ant man\").run(conn);\n</pre>  <blockquote class=\"infobox \">\n<p><strong>Note:</strong> <code class=\"highlighter-rouge\">getAll</code> does not perform any de-duplication. If you pass the same key more than once, the same document will be returned multiple times.</p> </blockquote> <p><strong>Example:</strong> You can use <a href=\"../args/index\">args</a> with <code class=\"highlighter-rouge\">getAll</code> to retrieve multiple documents whose keys are in a list. This uses <code class=\"highlighter-rouge\">getAll</code> to get a list of female superheroes, coerces that to an array, and then gets a list of villains who have those superheroes as enemies.</p> <pre data-language=\"java\">r.do(\n    r.table(\"heroes\").getAll(\"f\").optArg(\"index\", \"gender\")\n        .g(\"id\").coerceTo(\"array\"),\n    heroines -&gt; r.table(\"villains\").getAll(r.args(heroines))\n).run(conn);\n</pre>  <p>Calling <code class=\"highlighter-rouge\">getAll</code> with zero arguments—which could happen in this example if the <code class=\"highlighter-rouge\">heroines</code> list had no elements—will return nothing, i.e., a zero length stream.</p> <p>Secondary indexes can be used in extremely powerful ways with <code class=\"highlighter-rouge\">getAll</code> and other commands; read the full article on <a href=\"../../../docs/secondary-indexes/java/index\">secondary indexes</a> for examples using boolean operations, <code class=\"highlighter-rouge\">contains</code> and more.</p>  <h2>Related commands</h2> <ul> <li><a href=\"../get/index\">get</a></li> <li><a href=\"../between/index\">between</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/get_all/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/get_all/</a>\n  </p>\n</div>\n","api/java/inner_join/index":"<h1 class=\"title\">ReQL command: innerJoin</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">sequence.innerJoin(otherSequence, predicate_function) → stream\narray.innerJoin(otherSequence, predicate_function) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Returns an inner join of two sequences.</p> <p>The returned sequence represents an intersection of the left-hand sequence and the right-hand sequence: each row of the left-hand sequence will be compared with each row of the right-hand sequence to find all pairs of rows which satisfy the predicate. Each matched pair of rows of both sequences are combined into a result row. In most cases, you will want to follow the join with <a href=\"../zip/index\">zip</a> to combine the left and right results.</p> <blockquote class=\"infobox \">\n<p>Note that <code class=\"highlighter-rouge\">innerJoin</code> is slower and much less efficient than using <a href=\"../eq_join/index\">eqJoin</a> or <a href=\"../concat_map/index\">concatMap</a> with <a href=\"../get_all/index\">getAll</a>. You should avoid using <code class=\"highlighter-rouge\">innerJoin</code> in commands when possible.</p> </blockquote> <p><strong>Example:</strong> Return a list of all matchups between Marvel and DC heroes in which the DC hero could beat the Marvel hero in a fight.</p> <pre data-language=\"java\">r.table(\"marvel\").innerJoin(r.table(\"dc\"),\n    (marvel_row, dc_row) -&gt; marvel_row.g(\"strength\").lt(dc_row.g(\"strength\"))\n).zip().run(conn);\n</pre>   <p>(Compare this to an <a href=\"../outer_join/index\">outerJoin</a> with the same inputs and predicate, which would return a list of <em>all</em> Marvel heroes along with any DC heroes with a higher strength.)</p>  <h2>Related commands</h2> <ul> <li><a href=\"../outer_join/index\">outerJoin</a></li> <li><a href=\"../eq_join/index\">eqJoin</a></li> <li><a href=\"../zip/index\">zip</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/inner_join/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/inner_join/</a>\n  </p>\n</div>\n","api/java/outer_join/index":"<h1 class=\"title\">ReQL command: outerJoin</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">sequence.outerJoin(otherSequence, predicate_function) → stream\narray.outerJoin(otherSequence, predicate_function) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Returns a left outer join of two sequences. The returned sequence represents a union of the left-hand sequence and the right-hand sequence: all documents in the left-hand sequence will be returned, each matched with a document in the right-hand sequence if one satisfies the predicate condition. In most cases, you will want to follow the join with <a href=\"../zip/index\">zip</a> to combine the left and right results.</p> <blockquote class=\"infobox \">\n<p>Note that <code class=\"highlighter-rouge\">outerJoin</code> is slower and much less efficient than using <a href=\"../concat_map/index\">concatMap</a> with <a href=\"../get_all/index\">getAll</a>. You should avoid using <code class=\"highlighter-rouge\">outerJoin</code> in commands when possible.</p> </blockquote> <p><strong>Example:</strong> Return a list of all Marvel heroes, paired with any DC heroes who could beat them in a fight.</p> <pre data-language=\"java\">r.table(\"marvel\").outerJoin(r.table(\"dc\"),\n    (marvel_row, dc_row) -&gt; marvel_row.g(\"strength\").lt(dc_row.g(\"strength\"))\n).zip().run(conn);\n</pre>  <p>(Compare this to an <a href=\"../inner_join/index\">innerJoin</a> with the same inputs and predicate, which would return a list only of the matchups in which the DC hero has the higher strength.)</p>  <h2>Related commands</h2> <ul> <li><a href=\"../inner_join/index\">innerJoin</a></li> <li><a href=\"../eq_join/index\">eqJoin</a></li> <li><a href=\"../zip/index\">zip</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/outer_join/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/outer_join/</a>\n  </p>\n</div>\n","api/java/zip/index":"<h1 class=\"title\">ReQL command: zip</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">stream.zip() → stream\narray.zip() → array\n</pre> <h2 id=\"description\">Description</h2> <p>Used to ‘zip’ up the result of a join by merging the ‘right’ fields into ‘left’ fields of each member of the sequence.</p> <p><strong>Example:</strong> ‘zips up’ the sequence by merging the left and right fields produced by a join.</p> <pre data-language=\"java\">r.table(\"marvel\").eqJoin(\"main_dc_collaborator\", r.table(\"dc\")).zip().run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../eq_join/index\">eqJoin</a></li> <li><a href=\"../inner_join/index\">innerJoin</a></li> <li><a href=\"../outer_join/index\">outerJoin</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/zip/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/zip/</a>\n  </p>\n</div>\n","api/java/filter/index":"<h1 class=\"title\">ReQL command: filter</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">selection.filter(predicate_function) → selection\nstream.filter(predicate_function) → stream\narray.filter(predicate_function) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Return all the elements in a sequence for which the given predicate is true. The return value of <code class=\"highlighter-rouge\">filter</code> will be the same as the input (sequence, stream, or array). Documents can be filtered in a variety of ways—ranges, nested values, boolean conditions, and the results of anonymous functions.</p> <p>By default, <code class=\"highlighter-rouge\">filter</code> will silently skip documents with missing fields: if the predicate tries to access a field that doesn’t exist (for instance, the predicate <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"err\">age</span><span class=\"p\">:</span><span class=\"mi\">30</span><span class=\"p\">}</span></code> applied to a document with no <code class=\"highlighter-rouge\">age</code> field), that document will not be returned in the result set, and no error will be generated. This behavior can be changed with the <code class=\"highlighter-rouge\">default</code> <a href=\"../optarg/index\">optArg</a>.</p> <ul> <li>If <code class=\"highlighter-rouge\">default</code> is set to <code class=\"highlighter-rouge\">true</code>, documents with missing fields will be returned rather than skipped.</li> <li>If <code class=\"highlighter-rouge\">default</code> is set to <code class=\"highlighter-rouge\">r.error()</code>, a <code class=\"highlighter-rouge\">ReqlRuntimeError</code> will be thrown when a document with a missing field is tested.</li> <li>If <code class=\"highlighter-rouge\">default</code> is set to <code class=\"highlighter-rouge\">false</code> (the default), documents with missing fields will be skipped.</li> </ul> <blockquote class=\"infobox \">\n<p><strong>Note:</strong> <code class=\"highlighter-rouge\">filter</code> does not use <a href=\"../../../docs/secondary-indexes/java/index\">secondary indexes</a>. For retrieving documents via secondary indexes, consider <a href=\"../get_all/index\">getAll</a>, <a href=\"../between/index\">between</a> and <a href=\"../eq_join/index\">eqJoin</a>.</p> </blockquote> <h3 id=\"basic-predicates\">Basic predicates</h3> <p><strong>Example:</strong> Get all users who are 30 years old.</p> <pre data-language=\"java\">r.table(\"users\").filter(r.hashMap(age, 30)).run(conn);\n</pre>  <p>The predicate <code class=\"highlighter-rouge\">r.hashMap(age, 30)</code> selects documents in the <code class=\"highlighter-rouge\">users</code> table with an <code class=\"highlighter-rouge\">age</code> field whose value is <code class=\"highlighter-rouge\">30</code>. Documents with an <code class=\"highlighter-rouge\">age</code> field set to any other value <em>or</em> with no <code class=\"highlighter-rouge\">age</code> field present are skipped.</p>  <p>While the <code class=\"highlighter-rouge\">r.hashMap(field, value)</code> style of predicate is useful for exact matches, a more general way to write a predicate is to use an anonymous function that returns <code class=\"highlighter-rouge\">true</code> or <code class=\"highlighter-rouge\">false</code>.</p> <pre data-language=\"java\">r.table(\"users\").filter(row -&gt; row.g(\"age\").eq(30)).run(conn);\n</pre>  <p>In this case, the function returns <code class=\"highlighter-rouge\">true</code> if the field <code class=\"highlighter-rouge\">age</code> is equal to 30.</p> <p>Predicates to <code class=\"highlighter-rouge\">filter</code> are evaluated on the server, and must use ReQL expressions. You cannot use standard Java comparison operators such as <code class=\"highlighter-rouge\">==</code>, <code class=\"highlighter-rouge\">&lt;</code>/<code class=\"highlighter-rouge\">&gt;</code> and <code class=\"highlighter-rouge\">||</code>/<code class=\"highlighter-rouge\">&amp;&amp;</code>.</p> <p><strong>Example:</strong> Get all users who are more than 18 years old.</p> <pre data-language=\"java\">r.table(\"users\").filter(row -&gt; row.g(\"age\").gt(18)).run(conn);\n</pre>  <p><strong>Example:</strong> Get all users who are less than 18 years old and more than 13 years old.</p> <pre data-language=\"java\">r.table(\"users\").filter(\n    row -&gt; row.g(\"age\").lt(18).and(row.g(\"age\").gt(13))\n).run(conn);\n</pre>  <p><strong>Example:</strong> Get all users who are more than 18 years old or have their parental consent.</p> <pre data-language=\"java\">r.table(\"users\").filter(\n    row -&gt; row.g(\"age\").ge(18).or(row.g(\"hasParentalConsent\"))\n).run(conn);\n</pre>  <h3 id=\"more-complex-predicates\">More complex predicates</h3> <p><strong>Example:</strong> Retrieve all users who subscribed between January 1st, 2012 (included) and January 1st, 2013 (excluded).</p> <pre data-language=\"java\">r.table(\"users\").filter(\n    user -&gt; user.g(\"subscription_date\").during(\n        r.time(2012, 1, 1, \"Z\"), r.time(2013, 1, 1, \"Z\"))\n).run(conn);\n</pre>  <p><strong>Example:</strong> Retrieve all users who have a gmail account (whose field <code class=\"highlighter-rouge\">email</code> ends with <code class=\"highlighter-rouge\">@gmail.com</code>).</p> <pre data-language=\"java\">r.table(\"users\").filter(\n    user -&gt; user.g(\"email\").match(\"@gmail.com$\")\n).run(conn);\n</pre>  <p><strong>Example:</strong> Filter based on the presence of a value in an array.</p> <p>Given this schema for the <code class=\"highlighter-rouge\">users</code> table:</p> <pre data-language=\"java\">{\n    \"name\": String\n    \"placesVisited\": [String]\n}\n</pre>  <p>Retrieve all users whose field <code class=\"highlighter-rouge\">placesVisited</code> contains <code class=\"highlighter-rouge\">France</code>.</p> <pre data-language=\"java\">r.table(\"users\").filter(\n    user -&gt; user.g(\"placesVisited\").contains(\"France\")\n).run(conn);\n</pre>  <p><strong>Example:</strong> Filter based on nested fields.</p> <p>Given this schema for the <code class=\"highlighter-rouge\">users</code> table:</p> <pre data-language=\"java\">{\n    \"id\": String\n    \"name\": {\n        \"first\": String,\n        \"middle\": String,\n        \"last\": String\n    }\n}\n</pre>  <p>Retrieve all users named “William Adama” (first name “William”, last name “Adama”), with any middle name.</p> <pre data-language=\"java\">r.table(\"users\").filter(\n    r.hashMap(\"name\", r.hashMap(\"first\", \"William\").with(\"last\", \"Adama\"))\n).run(conn);\n</pre>  <p>If you want an exact match for a field that is an object, you will have to use <code class=\"highlighter-rouge\">r.literal</code>.</p> <p>Retrieve all users named “William Adama” (first name “William”, last name “Adama”), and who do not have a middle name.</p> <pre data-language=\"java\">r.table(\"users\").filter(r.literal(\n    r.hashMap(\"name\", r.hashMap(\"first\", \"William\").with(\"last\", \"Adama\"))\n)).run(conn);\n</pre>  <p>You may rewrite these with anonymous functions.</p> <pre data-language=\"java\">r.table(\"users\").filter(\n    user -&gt; user.g(\"name\").g(\"first\").eq(\"William\")\n        .and(user.g(\"name\").g(\"last\").eq(\"Adama\"))\n).run(conn);\n\nr.table(\"users\").filter(\n    user -&gt; user.g(\"name\")\n        .eq(r.hashMap(\"first\", \"William\").with(\"last\", \"Adama\"))\n).run(conn);\n</pre>  <h3 id=\"handling-missing-fields\">Handling missing fields</h3> <p>By default, documents missing fields tested by the <code class=\"highlighter-rouge\">filter</code> predicate are skipped. In the previous examples, users without an <code class=\"highlighter-rouge\">age</code> field are not returned. By passing the optional <code class=\"highlighter-rouge\">default</code> argument to <code class=\"highlighter-rouge\">filter</code>, you can change this behavior.</p> <p><strong>Example:</strong> Get all users less than 18 years old or whose <code class=\"highlighter-rouge\">age</code> field is missing.</p> <pre data-language=\"java\">r.table(\"users\").filter(row -&gt; row.g(\"age\").lt(18)).optArg(\"default\", true).run(conn);\n</pre>  <p><strong>Example:</strong> Get all users more than 18 years old. Throw an error if a document is missing the field <code class=\"highlighter-rouge\">age</code>.</p> <pre data-language=\"java\">r.table(\"users\").filter(row -&gt; row.g(\"age\").gt(18))\n .optArg(\"default\", r.error()).run(conn);\n</pre>  <p><strong>Example:</strong> Get all users who have given their phone number (all the documents whose field <code class=\"highlighter-rouge\">phoneNumber</code> exists and is not <code class=\"highlighter-rouge\">null</code>).</p> <pre data-language=\"java\">r.table(\"users\").filter(user -&gt; user.hasFields(\"phone_number\")).run(conn);\n</pre>  <p><strong>Example:</strong> Get all users with an “editor” role or an “admin” privilege.</p> <pre data-language=\"java\">r.table(\"users\").filter(\n    user -&gt; user.g(\"role\").eq(\"editor\").default_(false)\n        .or(user.g(\"privilege\").eq(\"admin\").default_(false))\n).run(conn);\n</pre>  <p>Instead of using a <code class=\"highlighter-rouge\">default</code> optArg with <code class=\"highlighter-rouge\">filter</code>, we have to use default values on the fields within the <code class=\"highlighter-rouge\">or</code> clause. Why? If the field on the left side of the <code class=\"highlighter-rouge\">or</code> clause is missing from a document—in this case, if the user doesn’t have a <code class=\"highlighter-rouge\">role</code> field—the predicate will generate an error, and will return <code class=\"highlighter-rouge\">false</code> (or the value the <code class=\"highlighter-rouge\">default</code> argument is set to) without evaluating the right side of the <code class=\"highlighter-rouge\">or</code>. By using <code class=\"highlighter-rouge\">.default_(false)</code> on the fields, each side of the <code class=\"highlighter-rouge\">or</code> will evaluate to either the field’s value or <code class=\"highlighter-rouge\">false</code> if the field doesn’t exist.</p>  <h2>Related commands</h2> <ul> <li><a href=\"../get/index\">get</a></li> <li><a href=\"../get_all/index\">getAll</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/filter/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/filter/</a>\n  </p>\n</div>\n","api/java/map/index":"<h1 class=\"title\">ReQL command: map</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">sequence1.map([sequence2, ...], function) → stream\narray1.map([array2, ...], function) → array\nr.map(sequence1[, sequence2, ...], function) → stream\nr.map(array1[, array2, ...], function) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Transform each element of one or more sequences by applying a mapping function to them. If <code class=\"highlighter-rouge\">map</code> is run with two or more sequences, it will iterate for as many items as there are in the shortest sequence.</p> <p>Note that <code class=\"highlighter-rouge\">map</code> can only be applied to sequences, not single values. If you wish to apply a function to a single value/selection (including an array), use the <a href=\"../do/index\">do</a> command.</p> <p><strong>Example:</strong> Return the first five squares.</p> <pre data-language=\"java\">r.expr(r.array(1, 2, 3, 4, 5)).map(val -&gt; r.mul(val, val)).run(conn);\n\n// Result:\n[1, 4, 9, 16, 25]\n</pre>  <p><strong>Example:</strong> Sum the elements of three sequences.</p> <pre data-language=\"java\">int[] sequence1 = { 100, 200, 300, 400 };\nint[] sequence2 = { 10, 20, 30, 40 };\nint[] sequence3 = { 1, 2, 3, 4 };\nr.map(sequence1, sequence2, sequence3,\n    (val1, val2, val3) -&gt; r.add(val1, val2).add(val3)\n).run(conn);\n\n// Result:\n[111, 222, 333, 444]\n</pre>  <p><strong>Example:</strong> Rename a field when retrieving documents using <code class=\"highlighter-rouge\">map</code> and <a href=\"../merge/index\">merge</a>.</p> <p>This example renames the field <code class=\"highlighter-rouge\">id</code> to <code class=\"highlighter-rouge\">userId</code> when retrieving documents from the table <code class=\"highlighter-rouge\">users</code>.</p> <pre data-language=\"java\">r.table(\"users\").map(\n    doc -&gt; doc.merge(r.hashMap(\"user_id\", doc.g(\"id\"))).without(\"id\")\n).run(conn);\n</pre>  <p><strong>Example:</strong> Assign every superhero an archenemy.</p> <pre data-language=\"java\">r.table(\"heroes\").map(r.table(\"villains\"),\n    (hero, villain) -&gt; hero.merge(r.hashMap(\"villain\", villain))\n).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../concat_map/index\">concatMap</a></li> <li><a href=\"../reduce/index\">reduce</a></li> <li><a href=\"../do/index\">do</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/map/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/map/</a>\n  </p>\n</div>\n","api/java/eq_join/index":"<h1 class=\"title\">ReQL command: eqJoin</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">sequence.eqJoin(leftField, rightTable) → sequence\nsequence.eqJoin(function, rightTable) → sequence\n</pre> <h2 id=\"description\">Description</h2> <p><img alt=\"Data Modeling Illustration\" class=\"api_command_illustration\" src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/table-joins.png\"></p> <p>Join tables using a field or function on the left-hand sequence matching primary keys or secondary indexes on the right-hand table. <code class=\"highlighter-rouge\">eqJoin</code> is more efficient than other ReQL join types, and operates much faster. Documents in the result set consist of pairs of left-hand and right-hand documents, matched when the field on the left-hand side exists and is non-null and an entry with that field’s value exists in the specified index on the right-hand side.</p> <p>The result set of <code class=\"highlighter-rouge\">eqJoin</code> is a stream or array of objects. Each object in the returned set will be an object of the form <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"s2\">\"left\"</span><span class=\"p\">:</span><span class=\"err\">&lt;left-document&gt;</span><span class=\"p\">,</span><span class=\"s2\">\"right\"</span><span class=\"p\">:</span><span class=\"err\">&lt;right-document&gt;</span><span class=\"p\">}</span></code>, where the values of <code class=\"highlighter-rouge\">left</code> and <code class=\"highlighter-rouge\">right</code> will be the joined documents. Use the <a href=\"../zip/index\">zip</a> command to merge the <code class=\"highlighter-rouge\">left</code> and <code class=\"highlighter-rouge\">right</code> fields together.</p> <p>The results from <code class=\"highlighter-rouge\">eqJoin</code> are, by default, not ordered. Providing <code><a href=\"../optarg/index\">optArg</a>('ordered', 'true')</code> will cause <code class=\"highlighter-rouge\">eqJoin</code> to order the output based on the left side input stream. (If there are multiple matches on the right side for a document on the left side, their order is not guaranteed even if <code class=\"highlighter-rouge\">ordered</code> is <code class=\"highlighter-rouge\">true</code>.) Requiring ordered results can significantly slow down <code class=\"highlighter-rouge\">eqJoin</code>, and in many circumstances this ordering will not be required. (See the first example, in which ordered results are obtained by using <code class=\"highlighter-rouge\">orderBy</code> after <code class=\"highlighter-rouge\">eqJoin</code>.)</p> <p>Suppose the players table contains these documents (shown in JSON form):</p> <pre data-language=\"java\">[\n    { \"id\": 1, \"player\": \"George\", \"gameId\": 1 },\n    { \"id\": 2, \"player\": \"Agatha\", \"gameId\": 3 },\n    { \"id\": 3, \"player\": \"Fred\", \"gameId\": 2 },\n    { \"id\": 4, \"player\": \"Marie\", \"gameId\": 2 },\n    { \"id\": 5, \"player\": \"Earnest\", \"gameId\": 1 },\n    { \"id\": 6, \"player\": \"Beth\", \"gameId\": 3 }\n]\n</pre>  <p>The games table contains these documents:</p> <pre data-language=\"java\">[\n    { \"id\": 1, \"field\": \"Little Delving\" },\n    { \"id\": 2, \"field\": \"Rushock Bog\" },\n    { \"id\": 3, \"field\": \"Bucklebury\" }\n]\n</pre>  <p><strong>Example:</strong> Match players with the games they’ve played against one another.</p> <p>Join these tables using <code class=\"highlighter-rouge\">gameId</code> on the player table and <code class=\"highlighter-rouge\">id</code> on the games table:</p> <pre data-language=\"java\">r.table(\"players\").eqJoin(\"gameId\", r.table(\"games\")).run(conn);\n</pre>  <p>This will return a result set such as the following:</p> <pre data-language=\"java\">[\n    {\n        \"left\" : { \"gameId\" : 3, \"id\" : 2, \"player\" : \"Agatha\" },\n        \"right\" : { \"id\" : 3, \"field\" : \"Bucklebury\" }\n    },\n    {\n        \"left\" : { \"gameId\" : 2, \"id\" : 3, \"player\" : \"Fred\" },\n        \"right\" : { \"id\" : 2, \"field\" : \"Rushock Bog\" }\n    },\n    ...\n]\n</pre>   <p>What you likely want is the result of using <code class=\"highlighter-rouge\">zip</code> with that. For clarity, we’ll use <code class=\"highlighter-rouge\">without</code> to drop the <code class=\"highlighter-rouge\">id</code> field from the games table (it conflicts with the <code class=\"highlighter-rouge\">id</code> field for the players and it’s redundant anyway), and we’ll order it by the games.</p> <pre data-language=\"java\">r.table(\"players\")\n .eqJoin(\"game_id\", r.table(\"games\"))\n .without(r.hashMap(\"right\", \"id\"))\n .zip()\n .orderBy(\"game_id\")\n .run(conn);\n</pre>  <pre data-language=\"java\">[\n    { \"field\": \"Little Delving\", \"gameId\": 1, \"id\": 5, \"player\": \"Earnest\" },\n    { \"field\": \"Little Delving\", \"gameId\": 1, \"id\": 1, \"player\": \"George\" },\n    { \"field\": \"Rushock Bog\", \"gameId\": 2, \"id\": 3, \"player\": \"Fred\" },\n    { \"field\": \"Rushock Bog\", \"gameId\": 2, \"id\": 4, \"player\": \"Marie\" },\n    { \"field\": \"Bucklebury\", \"gameId\": 3, \"id\": 6, \"player\": \"Beth\" },\n    { \"field\": \"Bucklebury\", \"gameId\": 3, \"id\": 2, \"player\": \"Agatha\" }\n]\n</pre>  <p>For more information, see <a href=\"../../../docs/table-joins/index\">Table joins in RethinkDB</a>.</p> <p><strong>Example:</strong> Use a secondary index on the right table rather than the primary key. If players have a secondary index on their cities, we can get a list of arenas with players in the same area.</p> <pre data-language=\"java\">r.table(\"players\").eqJoin(\"city_id\", r.table(\"arenas\"))\n .optArg(\"index\", \"city_id\").run(conn);\n</pre>  <p><strong>Example:</strong> Use a nested key as the join field. Suppose the documents in the players table were structured like this:</p> <pre data-language=\"java\">{ \"id\": 1, \"player\": \"George\", \"game\": {\"id\": 1} },\n{ \"id\": 2, \"player\": \"Agatha\", \"game\": {\"id\": 3} },\n...\n</pre>  <p>Simply specify the field using a lambda instead of a string.</p> <pre data-language=\"java\">r.table(\"players\").eqJoin(\n    row -&gt; row.g(\"game\").g(\"id\"),\n    r.table(\"games\")\n).without(r.hashMap(\"right\", \"id\")).zip().run(conn);\n</pre>  <pre data-language=\"java\">[\n    { \"field\": \"Little Delving\", \"game\": { \"id\": 1 }, \"id\": 5, \"player\": \"Earnest\" },\n    { \"field\": \"Little Delving\", \"game\": { \"id\": 1 }, \"id\": 1, \"player\": \"George\" },\n    ...\n]\n</pre>  <p><strong>Example:</strong> Use a function instead of a field to join on a more complicated expression. Suppose the players have lists of favorite games ranked in order in a field such as <code class=\"highlighter-rouge\">favorites: [3, 2, 1]</code>. Get a list of players and their top favorite:</p> <pre data-language=\"java\">r.table(\"players\").eqJoin(\n    player -&gt; player.g(\"favorites\").nth(0),\n    r.table(\"games\")\n).without(\n    r.array(r.hashMap(\"left\", r.array(\"favorites\", \"game_id\", \"id\")),\n    r.hashMap(\"right\", \"id\"))\n).zip().run(conn);\n</pre>  <pre data-language=\"java\">[\n\t{ \"field\": \"Rushock Bog\", \"name\": \"Fred\" },\n\t{ \"field\": \"Little Delving\", \"name\": \"George\" },\n\t...\n]\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../inner_join/index\">innerJoin</a></li> <li><a href=\"../outer_join/index\">outerJoin</a></li> <li><a href=\"../without/index\">without</a></li> <li><a href=\"../zip/index\">zip</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/eq_join/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/eq_join/</a>\n  </p>\n</div>\n","api/java/with_fields/index":"<h1 class=\"title\">ReQL command: withFields</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">sequence.withFields([selector1, selector2...]) → stream\narray.withFields([selector1, selector2...]) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Plucks one or more attributes from a sequence of objects, filtering out any objects in the sequence that do not have the specified fields. Functionally, this is identical to <a href=\"../has_fields/index\">hasFields</a> followed by <a href=\"../pluck/index\">pluck</a> on a sequence.</p> <p><strong>Example:</strong> Get a list of users and their posts, excluding any users who have not made any posts.</p> <p>Existing table structure:</p> <pre data-language=\"java\">[\n    { \"id\": 1, \"user\": \"bob\", \"email\": \"bob@foo.com\", \"posts\": [ 1, 4, 5 ] },\n    { \"id\": 2, \"user\": \"george\", \"email\": \"george@foo.com\" },\n    { \"id\": 3, \"user\": \"jane\", \"email\": \"jane@foo.com\", \"posts\": [ 2, 3, 6 ] }\n]\n</pre>  <p>Command and output:</p> <pre data-language=\"java\">r.table(\"users\").withFields(\"id\", \"user\", \"posts\").run(conn);\n\n// Result passed to callback\n[\n    { \"id\": 1, \"user\": \"bob\", \"posts\": [ 1, 4, 5 ] },\n    { \"id\": 3, \"user\": \"jane\", \"posts\": [ 2, 3, 6 ] }\n]\n</pre>  <p><strong>Example:</strong> Use the <a href=\"../../../docs/nested-fields/java/index\">nested field syntax</a> to get a list of users with cell phone numbers in their contacts.</p> <pre data-language=\"java\">r.table(\"users\").withFields(\"id\", \"user\",\n    r.hashMap(\"contact\", r.hashMap(\"phone\", \"work\"))\n).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../pluck/index\">pluck</a></li> <li><a href=\"../has_fields/index\">hasFields</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/with_fields/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/with_fields/</a>\n  </p>\n</div>\n","api/java/has_fields/index":"<h1 class=\"title\">ReQL command: hasFields</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">sequence.hasFields([selector1, selector2...]) → stream\narray.hasFields([selector1, selector2...]) → array\nobject.hasFields([selector1, selector2...]) → boolean\n</pre> <h2 id=\"description\">Description</h2> <p>Test if an object has one or more fields. An object has a field if it has that key and the key has a non-null value. For instance, the object <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"err\">'a'</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"err\">'b'</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"err\">'c'</span><span class=\"p\">:</span><span class=\"kc\">null</span><span class=\"p\">}</span></code> has the fields <code class=\"highlighter-rouge\">a</code> and <code class=\"highlighter-rouge\">b</code>.</p> <p>When applied to a single object, <code class=\"highlighter-rouge\">hasFields</code> returns <code class=\"highlighter-rouge\">true</code> if the object has the fields and <code class=\"highlighter-rouge\">false</code> if it does not. When applied to a sequence, it will return a new sequence (an array or stream) containing the elements that have the specified fields.</p> <p><strong>Example:</strong> Return the players who have won games.</p> <pre data-language=\"java\">r.table(\"players\").hasFields(\"games_won\").run(conn);\n</pre>  <p><strong>Example:</strong> Return the players who have <em>not</em> won games. To do this, use <code class=\"highlighter-rouge\">hasFields</code> with <a href=\"../not/index\">not</a>, wrapped with <a href=\"../filter/index\">filter</a>.</p> <pre data-language=\"java\">r.table(\"players\").filter(\n    row -&gt; row.hasFields(\"games_won\").not()\n).run(conn);\n</pre>  <p><strong>Example:</strong> Test if a specific player has won any games.</p> <pre data-language=\"java\">r.table(\"players\").get(\"b5ec9714-837e-400c-aa74-dbd35c9a7c4c\")\n .hasFields(\"games_won\").run(conn);\n</pre>  <p><strong>Nested Fields</strong></p> <p><code class=\"highlighter-rouge\">hasFields</code> lets you test for nested fields in objects. If the value of a field is itself a set of key/value pairs, you can test for the presence of specific keys.</p> <p><strong>Example:</strong> In the <code class=\"highlighter-rouge\">players</code> table, the <code class=\"highlighter-rouge\">games_won</code> field contains one or more fields for kinds of games won:</p> <pre data-language=\"java\">{\n    \"games_won\": {\n        \"playoffs\": 2,\n        \"championships\": 1\n    }\n}\n</pre>  <p>Return players who have the “championships” field.</p> <pre data-language=\"java\">r.table(\"players\")\n .hasFields(r.hashMap(\"games_won\", r.hashMap(\"championships\", true)))\n .run(conn);\n</pre>  <p>Note that <code class=\"highlighter-rouge\">true</code> in the example above is testing for the existence of <code class=\"highlighter-rouge\">championships</code> as a field, not testing to see if the value of the <code class=\"highlighter-rouge\">championships</code> field is set to <code class=\"highlighter-rouge\">true</code>. There’s a more convenient shorthand form available. (See <a href=\"../pluck/index\">pluck</a> for more details on this.)</p> <pre data-language=\"java\">r.table(\"players\").hasFields(r.hashMap(\"games_won\", \"championships\")).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../get_field/index\">getField</a></li> <li><a href=\"../with_fields/index\">withFields</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/has_fields/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/has_fields/</a>\n  </p>\n</div>\n","api/java/pluck/index":"<h1 class=\"title\">ReQL command: pluck</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">sequence.pluck([selector1, selector2...]) → stream\narray.pluck([selector1, selector2...]) → array\nobject.pluck([selector1, selector2...]) → object\nsingleSelection.pluck([selector1, selector2...]) → object\n</pre> <p><img src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/pluck.png\" class=\"api_command_illustration\"></p> <h2 id=\"description\">Description</h2> <p>Plucks out one or more attributes from either an object or a sequence of objects (projection).</p> <p><strong>Example:</strong> We just need information about IronMan’s reactor and not the rest of the document.</p> <pre data-language=\"java\">r.table(\"marvel\").get(\"IronMan\").pluck(\"reactorState\", \"reactorPower\").run(conn);\n</pre>  <p><strong>Example:</strong> For the hero beauty contest we only care about certain qualities.</p> <pre data-language=\"java\">r.table(\"marvel\").pluck(\"beauty\", \"muscleTone\", \"charm\").run(conn);\n</pre>  <p><strong>Example:</strong> Pluck can also be used on nested objects.</p> <pre data-language=\"java\">// JSON equivalent:\n//   { \"abilities\": { \"damage\": true, \"mana_cost\": true }, \"weapons\": true }\nr.table(\"marvel\").pluck(\n    r.hashMap(\"abilities\",\n        r.hashMap(\"damage\", true).with(\"mana_cost\", true))\n    .with(\"weapons\", true)\n).run(conn);\n</pre>  <p><strong>Example:</strong> The nested syntax can quickly become overly verbose, so there’s a shorthand for it.</p> <pre data-language=\"java\">// JSON equivalent:\n//   { \"abilities\": [ \"damage\", \"mana cost\" ] }, \"weapons\"\nr.table(\"marvel\")\n .pluck(r.hashMap(\"abilities\", r.array(\"damage\", \"mana_cost\")), \"weapons\")\n .run(conn);\n</pre>  <p>For more information read the <a href=\"../../../docs/nested-fields/java/index\">nested field documentation</a>.</p>  <h2>Related commands</h2> <ul> <li><a href=\"../without/index\">without</a></li> <li><a href=\"../map/index\">map</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/pluck/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/pluck/</a>\n  </p>\n</div>\n","api/java/concat_map/index":"<h1 class=\"title\">ReQL command: concatMap</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">stream.concatMap(function) → stream\narray.concatMap(function) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Concatenate one or more elements into a single sequence using a mapping function.</p> <p><code class=\"highlighter-rouge\">concatMap</code> works in a similar fashion to <a href=\"../map/index\">map</a>, applying the given function to each element in a sequence, but it will always return a single sequence. If the mapping function returns a sequence, <code class=\"highlighter-rouge\">map</code> would produce a sequence of sequences:</p> <pre data-language=\"java\">r.expr(r.array(1, 2, 3)).map(x -&gt; r.array(x, x.mul(2))).run(conn);\n</pre>  <p>Result:</p> <pre data-language=\"java\">[[1, 2], [2, 4], [3, 6]]\n</pre>  <p>Whereas <code class=\"highlighter-rouge\">concatMap</code> with the same mapping function would merge those sequences into one:</p> <pre data-language=\"java\">r.expr(r.array(1, 2, 3)).concatMap(x -&gt; r.array(x, x.mul(2))).run(conn);\n</pre>  <p>Result:</p> <pre data-language=\"java\">[1, 2, 2, 4, 3, 6]\n</pre>  <p>The return value, array or stream, will be the same type as the input.</p> <p><strong>Example:</strong> Construct a sequence of all monsters defeated by Marvel heroes. The field “defeatedMonsters” is an array of one or more monster names.</p> <pre data-language=\"java\">r.table(\"marvel\").concatMap(hero -&gt; hero.g(\"defeatedMonsters\")).run(conn);\n</pre>  <p><strong>Example:</strong> Simulate an <a href=\"../eq_join/index\">eqJoin</a> using <code class=\"highlighter-rouge\">concatMap</code>. (This is how ReQL joins are implemented internally.)</p> <pre data-language=\"java\">r.table(\"posts\").concatMap(\n    post -&gt; r.table(\"comments\").getAll(post.g(\"id\")).optArg(\"index\", \"post_id\")\n             .map(comment -&gt; r.hashMap(\"left\", post).with(\"right\", comment))\n).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../map/index\">map</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/concat_map/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/concat_map/</a>\n  </p>\n</div>\n","api/java/skip/index":"<h1 class=\"title\">ReQL command: skip</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">sequence.skip(n) → stream\narray.skip(n) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Skip a number of elements from the head of the sequence.</p> <p><strong>Example:</strong> Here in conjunction with <a href=\"../order_by/index\">orderBy</a> we choose to ignore the most successful heroes.</p> <pre data-language=\"java\">r.table(\"marvel\").orderBy(\"successMetric\").skip(10).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../limit/index\">limit</a></li> <li><a href=\"../slice/index\">slice</a></li> <li><a href=\"../nth/index\">nth</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/skip/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/skip/</a>\n  </p>\n</div>\n","api/java/limit/index":"<h1 class=\"title\">ReQL command: limit</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">sequence.limit(n) → stream\narray.limit(n) → array\n</pre> <h2 id=\"description\">Description</h2> <p>End the sequence after the given number of elements.</p> <p><strong>Example:</strong> Only so many can fit in our Pantheon of heroes.</p> <pre data-language=\"java\">r.table(\"marvel\").orderBy(\"belovedness\").limit(10).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../skip/index\">skip</a></li> <li><a href=\"../slice/index\">slice</a></li> <li><a href=\"../nth/index\">nth</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/limit/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/limit/</a>\n  </p>\n</div>\n","api/java/order_by/index":"<h1 class=\"title\">ReQL command: orderBy</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">table.orderBy([key | function]).optArg(\"index\", index) → selection&lt;stream&gt;\nselection.orderBy(key | function[, ...]) → selection&lt;array&gt;\nsequence.orderBy(key | function[, ...]) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Sort the sequence by document values of the given key(s). To specify the ordering, wrap the attribute with either <code class=\"highlighter-rouge\">r.asc</code> or <code class=\"highlighter-rouge\">r.desc</code> (defaults to ascending).</p> <p><strong>Note:</strong> RethinkDB uses byte-wise ordering for <code class=\"highlighter-rouge\">orderBy</code> and does not support Unicode collations; non-ASCII characters will be sorted by UTF-8 codepoint. For more information on RethinkDB’s sorting order, read the section in <a href=\"../../../docs/data-types/index#sorting-order\">ReQL data types</a>.</p> <p>Sorting without an index requires the server to hold the sequence in memory, and is limited to 100,000 documents (or the setting of the <code class=\"highlighter-rouge\">arrayLimit</code> option for <a href=\"../run/index\">run</a>). Sorting with an index can be done on arbitrarily large tables, or after a <a href=\"../between/index\">between</a> command using the same index. This applies to both secondary indexes and the primary key (e.g., <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"s2\">\"index\"</span><span class=\"p\">:</span><span class=\"s2\">\"id\"</span><span class=\"p\">}</span></code>).</p> <p>Sorting functions passed to <code class=\"highlighter-rouge\">orderBy</code> must be deterministic. You cannot, for instance, order rows using the <a href=\"../random/index\">random</a> command. Using a non-deterministic function with <code class=\"highlighter-rouge\">orderBy</code> will raise a <code class=\"highlighter-rouge\">ReqlQueryLogicError</code>.</p> <p><strong>Example:</strong> Order all the posts using the index <code class=\"highlighter-rouge\">date</code>.</p> <pre data-language=\"java\">r.table(\"posts\").orderBy().optArg(\"index\", \"date\").run(conn);\n</pre>   <p>The index must either be the primary key or have been previously created with <a href=\"../index_create/index\">indexCreate</a>.</p> <pre data-language=\"java\">r.table(\"posts\").indexCreate(\"date\").run(conn);\n</pre>  <p>You can also select a descending ordering:</p> <pre data-language=\"java\">r.table(\"posts\").orderBy().optArg(\"index\", r.desc(\"date\")).run(conn);\n</pre>  <p><strong>Example:</strong> Order a sequence without an index.</p> <pre data-language=\"java\">r.table(\"posts\").get(1).g(\"comments\").orderBy(\"date\").run(conn);\n</pre>  <p>You can also select a descending ordering:</p> <pre data-language=\"java\">r.table(\"posts\").get(1).g(\"comments\").orderBy(r.desc(\"date\")).run(conn);\n</pre>  <p>If you’re doing ad-hoc analysis and know your table won’t have more then 100,000 elements (or you’ve changed the setting of the <code class=\"highlighter-rouge\">array_limit</code> option for <a href=\"../run/index\">run</a>) you can run <code class=\"highlighter-rouge\">orderBy</code> without an index:</p> <pre data-language=\"java\">r.table(\"small_table\").orderBy(\"date\").run(conn);\n</pre>  <p><strong>Example:</strong> You can efficiently order using multiple fields by using a <a href=\"http://www.rethinkdb.com/docs/secondary-indexes/java/\">compound index</a>.</p> <p>Order by date and title.</p> <pre data-language=\"java\">r.table(\"posts\").orderBy().optArg(\"index\", \"date_and_title\").run(conn);\n</pre>  <p>The index must either be the primary key or have been previously created with <a href=\"../index_create/index\">indexCreate</a>.</p> <pre data-language=\"java\">r.table(\"posts\").indexCreate(\"date_and_title\",\n    post -&gt; r.array(post.g(\"date\"), post.g(\"title\"))\n).run(conn);\n</pre>  <p><em>Note</em>: You cannot specify multiple orders in a compound index. See <a href=\"https://github.com/rethinkdb/rethinkdb/issues/2306\">issue #2306</a> to track progress.</p> <p><strong>Example:</strong> If you have a sequence with fewer documents than the <code class=\"highlighter-rouge\">arrayLimit</code>, you can order it by multiple fields without an index.</p> <pre data-language=\"java\">r.table(\"small_table\").orderBy(\"date\", r.desc(\"title\")).run(conn);\n</pre>  <p><strong>Example:</strong> Notice that an index ordering always has highest precedence. The following query orders posts by date, and if multiple posts were published on the same date, they will be ordered by title.</p> <pre data-language=\"java\">r.table(\"post\").orderBy(\"title\").optArg(\"index\", \"date\").run(conn);\n</pre>  <p><strong>Example:</strong> Use <a href=\"../../../docs/cookbook/java/index\">nested field</a> syntax to sort on fields from subdocuments. (You can also create indexes on nested fields using this syntax with <code class=\"highlighter-rouge\">indexCreate</code>.)</p> <pre data-language=\"java\">r.table(\"user\").orderBy(user -&gt; user.g(\"group\").g(\"id\")).run(conn);\n</pre>  <p><strong>Example:</strong> You can efficiently order data on arbitrary expressions using indexes.</p> <pre data-language=\"java\">r.table(\"posts\").orderBy().optArg(\"index\", \"votes\").run(conn);\n</pre>  <p>The index must have been previously created with <a href=\"../index_create/index\">indexCreate</a>.</p> <pre data-language=\"java\">r.table(\"posts\").indexCreate(\"votes\",\n    post -&gt; post.g(\"upvotes\").sub(post.g(\"downvotes\"))\n).run(conn);\n</pre>  <p><strong>Example:</strong> If you have a sequence with fewer documents than the <code class=\"highlighter-rouge\">arrayLimit</code>, you can order it with an arbitrary function directly.</p> <pre data-language=\"java\">r.table(\"small_table\").orderBy(\n    doc -&gt; doc.g(\"upvotes\").sub(doc.g(\"downvotes\"))\n).run(conn);\n</pre>  <p>You can also select a descending ordering:</p> <pre data-language=\"java\">r.table(\"small_table\").orderBy(\n    r.desc(doc -&gt; doc.g(\"upvotes\").sub(doc.g(\"downvotes\")))\n).run(conn);\n</pre>  <p><strong>Example:</strong> Ordering after a <code class=\"highlighter-rouge\">between</code> command can be done as long as the same index is being used.</p> <pre data-language=\"java\">r.table(\"posts\")\n .between(r.time(2013, 1, 1, \"+00:00\"), r.time(2013, 1, 1, \"+00:00\"))\n .optArg(\"index\", \"date\")\n .orderBy().optArg(\"index\", \"date\")\n .run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../skip/index\">skip</a></li> <li><a href=\"../limit/index\">limit</a></li> <li><a href=\"../slice/index\">slice</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/order_by/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/order_by/</a>\n  </p>\n</div>\n","api/java/slice/index":"<h1 class=\"title\">ReQL command: slice</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">selection.slice(startOffset[, endOffset]) → selection\nstream.slice(startOffset[, endOffset]) → stream\narray.slice(startOffset[, endOffset]) → array\nbinary.slice(startOffset[, endOffset]) → binary\nstring.slice(startOffset[, endOffset]) → string\n</pre> <h2 id=\"description\">Description</h2> <p>Return the elements of a sequence within the specified range.</p> <p><code class=\"highlighter-rouge\">slice</code> returns the range between <code class=\"highlighter-rouge\">startOffset</code> and <code class=\"highlighter-rouge\">endOffset</code>. If only <code class=\"highlighter-rouge\">startOffset</code> is specified, <code class=\"highlighter-rouge\">slice</code> returns the range from that index to the end of the sequence. Use the <a href=\"../optarg/index\">optArgs</a> <code class=\"highlighter-rouge\">left_bound</code> or <code class=\"highlighter-rouge\">right_bound</code> as <code class=\"highlighter-rouge\">open</code> or <code class=\"highlighter-rouge\">closed</code> to indicate whether to include that endpoint of the range by default: <code class=\"highlighter-rouge\">closed</code> returns that endpoint, while <code class=\"highlighter-rouge\">open</code> does not. By default, <code class=\"highlighter-rouge\">left_bound</code> is closed and <code class=\"highlighter-rouge\">right_bound</code> is open, so the range <code class=\"highlighter-rouge\">(10,13)</code> will return the tenth, eleventh and twelfth elements in the sequence.</p> <p>If <code class=\"highlighter-rouge\">endOffset</code> is past the end of the sequence, all elements from <code class=\"highlighter-rouge\">startOffset</code> to the end of the sequence will be returned. If <code class=\"highlighter-rouge\">startOffset</code> is past the end of the sequence or <code class=\"highlighter-rouge\">endOffset</code> is less than <code class=\"highlighter-rouge\">startOffset</code>, a zero-element sequence will be returned.</p> <p>Negative <code class=\"highlighter-rouge\">startOffset</code> and <code class=\"highlighter-rouge\">endOffset</code> values are allowed with arrays; in that case, the returned range counts back from the array’s end. That is, the range <code class=\"highlighter-rouge\">(-2)</code> returns the last two elements, and the range of <code class=\"highlighter-rouge\">(2,-1)</code> returns the second element through the next-to-last element of the range. An error will be raised on a negative <code class=\"highlighter-rouge\">startOffset</code> or <code class=\"highlighter-rouge\">endOffset</code> with non-arrays. (An <code class=\"highlighter-rouge\">endOffset</code> of −1 <em>is</em> allowed with a stream if <code class=\"highlighter-rouge\">rightBound</code> is closed; this behaves as if no <code class=\"highlighter-rouge\">endOffset</code> was specified.)</p> <p>If <code class=\"highlighter-rouge\">slice</code> is used with a <a href=\"../binary/index\">binary</a> object, the indexes refer to byte positions within the object. That is, the range <code class=\"highlighter-rouge\">(10,20)</code> will refer to the 10th byte through the 19th byte.</p> <p>With a string, <code class=\"highlighter-rouge\">slice</code> behaves similarly, with the indexes referring to Unicode codepoints. String indexes start at <code class=\"highlighter-rouge\">0</code>. (Note that <a href=\"https://en.wikipedia.org/wiki/Combining_character\">combining codepoints</a> are counted separately.)</p> <p><strong>Example:</strong> Return the fourth, fifth and sixth youngest players. (The youngest player is at index 0, so those are elements 3–5.)</p> <pre data-language=\"java\">r.table(\"players\").orderBy().optArg(\"index\", \"age\").slice(3, 6).run(conn);\n</pre>  <p><strong>Example:</strong> Return all but the top three players who have a red flag.</p> <pre data-language=\"java\">r.table(\"players\").filter(r.hashMap(\"flag\", \"red\")).orderBy()\n .optArg(\"index\", r.desc(\"score\")).slice(3).run(conn);\n</pre>  <p><strong>Example:</strong> Return holders of tickets <code class=\"highlighter-rouge\">X</code> through <code class=\"highlighter-rouge\">Y</code>, assuming tickets are numbered sequentially. We want to include ticket <code class=\"highlighter-rouge\">Y</code>.</p> <pre data-language=\"java\">r.table(\"users\").orderBy().optArg(\"index\", \"ticket\")\n .slice(x, y).optArg(\"right_bound\", \"closed\").run(conn);\n</pre>  <p><strong>Example:</strong> Return the elements of an array from the second through two from the end (that is, not including the last two).</p> <pre data-language=\"java\">r.expr(r.array(0, 1, 2, 3, 4, 5)).slice(2, -2).run(conn);\n</pre>  <p>Result:</p> <pre data-language=\"java\">[2,3]\n</pre>  <p><strong>Example:</strong> Return the third through fifth characters of a string.</p> <pre data-language=\"java\">r.expr(\"rutabaga\").slice(2,5).run(conn);\n</pre>  <p>Result:</p> <pre data-language=\"java\">\"tab\"\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../order_by/index\">orderBy</a></li> <li><a href=\"../skip/index\">skip</a></li> <li><a href=\"../limit/index\">limit</a></li> <li><a href=\"../nth/index\">nth</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/slice/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/slice/</a>\n  </p>\n</div>\n","api/java/nth/index":"<h1 class=\"title\">ReQL command: nth</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">sequence.nth(index) → object\nselection.nth(index) → selection&lt;object&gt;\n</pre> <h2 id=\"description\">Description</h2> <p>Get the <em>nth</em> element of a sequence, counting from zero. If the argument is negative, count from the last element.</p> <p><strong>Example:</strong> Select the second element in the array.</p> <pre data-language=\"java\">r.expr(r.array(1,2,3)).nth(1).run(conn);\n</pre>  <p><strong>Example:</strong> Select the bronze medalist from the competitors.</p> <pre data-language=\"java\">r.table(\"players\").orderBy().optArg(\"index\", r.desc(\"score\")).nth(3).run(conn);\n</pre>  <p><strong>Example:</strong> Select the last place competitor.</p> <pre data-language=\"java\">r.table(\"players\").orderBy().optArg(\"index\", r.desc(\"score\")).nth(-1).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../skip/index\">skip</a></li> <li><a href=\"../limit/index\">limit</a></li> <li><a href=\"../bracket/index\">bracket</a></li> <li><a href=\"../slice/index\">slice</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/nth/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/nth/</a>\n  </p>\n</div>\n","api/java/offsets_of/index":"<h1 class=\"title\">ReQL command: offsetsOf</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">sequence.offsetsOf(datum | predicate_function) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Get the indexes of an element in a sequence. If the argument is a predicate, get the indexes of all elements matching it.</p> <p><strong>Example:</strong> Find the position of the letter ‘c’.</p> <pre data-language=\"java\">r.expr(r.array(\"a\", \"b\", \"c\")).offsetsOf(\"c\").run(conn);\n</pre>  <p><strong>Example:</strong> Find the popularity ranking of invisible heroes.</p> <pre data-language=\"java\">r.table(\"marvel\").union(r.table(\"dc\")).orderBy(\"popularity\").offsetsOf(\n    row -&gt; row.g(\"superpowers\").contains(\"invisibility\")\n).run(conn);\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/offsets_of/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/offsets_of/</a>\n  </p>\n</div>\n","api/java/is_empty/index":"<h1 class=\"title\">ReQL command: isEmpty</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">sequence.isEmpty() → bool\n</pre> <h2 id=\"description\">Description</h2> <p>Test if a sequence is empty.</p> <p><strong>Example:</strong> Are there any documents in the marvel table?</p> <pre data-language=\"java\">r.table(\"marvel\").isEmpty().run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../offsets_of/index\">offsetsOf</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/is_empty/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/is_empty/</a>\n  </p>\n</div>\n","api/java/sample/index":"<h1 class=\"title\">ReQL command: sample</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">sequence.sample(number) → selection\nstream.sample(number) → array\narray.sample(number) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Select a given number of elements from a sequence with uniform random distribution. Selection is done without replacement.</p> <p>If the sequence has less than the requested number of elements (i.e., calling <code class=\"highlighter-rouge\">sample(10)</code> on a sequence with only five elements), <code class=\"highlighter-rouge\">sample</code> will return the entire sequence in a random order.</p> <p><strong>Example:</strong> Select 3 random heroes.</p> <pre data-language=\"java\">r.table(\"marvel\").sample(3).run(conn);\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/sample/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/sample/</a>\n  </p>\n</div>\n","api/java/union/index":"<h1 class=\"title\">ReQL command: union</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">stream.union(sequence[, sequence, ...]) → stream\narray.union(sequence[, sequence, ...]) → array\nr.union(stream, sequence[, sequence, ...]) → stream\nr.union(array, sequence[, sequence, ...]) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Merge two or more sequences.</p> <p>The <code class=\"highlighter-rouge\">interleave</code> <a href=\"../optarg/index\">optArg</a> controls how the sequences will be merged:</p> <ul> <li>\n<code class=\"highlighter-rouge\">true</code>: results will be mixed together; this is the fastest setting, but ordering of elements is not guaranteed. (This is the default.)</li> <li>\n<code class=\"highlighter-rouge\">false</code>: input sequences will be appended to one another, left to right.</li> <li>\n<code class=\"highlighter-rouge\">\"field_name\"</code>: a string will be taken as the name of a field to perform a merge-sort on. The input sequences must be ordered <em>before</em> being passed to <code class=\"highlighter-rouge\">union</code>.</li> <li>function: the <code class=\"highlighter-rouge\">interleave</code> optArg can take a function whose argument is the current row, and whose return value is a string to take as a field name, as with the <code class=\"highlighter-rouge\">\"field_name\"</code> setting described above.</li> </ul> <p><strong>Example:</strong> Construct a stream of all heroes.</p> <pre data-language=\"java\">r.table(\"marvel\").union(r.table(\"dc\")).run(conn);\n</pre>  <p><strong>Example:</strong> Combine four arrays into one.</p> <pre data-language=\"java\">r.expr(r.array(1, 2)).union(r.array(3, 4), r.array(5, 6), r.array(7, 8, 9)).run(conn);\n\n// Result:\n[1, 2, 3, 4, 5, 6, 7, 8, 9]\n</pre>  <p><strong>Example:</strong> Create a <a href=\"../../../docs/changefeeds/java/index\">changefeed</a> from the first example.</p> <pre data-language=\"java\">r.table(\"marvel\").union(r.table(\"dc\")).changes().run(conn);\n</pre>  <p>Now, when any heroes are added, modified or deleted from either table, a change notification will be sent out.</p> <p><strong>Example:</strong> Merge-sort the tables of heroes, ordered by name.</p> <pre data-language=\"java\">r.table(\"marvel\").orderBy(\"name\")\n .union(r.table(\"dc\").orderBy(\"name\")).optArg(\"interleave\", \"name\")\n .run(conn);\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/union/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/union/</a>\n  </p>\n</div>\n","api/java/sum/index":"<h1 class=\"title\">ReQL command: sum</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">sequence.sum([field | function]) → number\nr.sum(sequence, [field | function]) → number\n</pre> <h2 id=\"description\">Description</h2> <p>Sums all the elements of a sequence. If called with a field name, sums all the values of that field in the sequence, skipping elements of the sequence that lack that field. If called with a function, calls that function on every element of the sequence and sums the results, skipping elements of the sequence where that function returns <code class=\"highlighter-rouge\">null</code> or a non-existence error.</p> <p>Returns <code class=\"highlighter-rouge\">0</code> when called on an empty sequence.</p> <p><strong>Example:</strong> What’s 3 + 5 + 7?</p> <pre data-language=\"java\">r.expr(r.array(3, 5, 7)).sum().run(conn);\n</pre>  <p><strong>Example:</strong> How many points have been scored across all games?</p> <pre data-language=\"java\">r.table(\"games\").sum(\"points\").run(conn);\n</pre>  <p><strong>Example:</strong> How many points have been scored across all games, counting bonus points?</p> <pre data-language=\"java\">r.table(\"games\").sum(\n    game -&gt; game.g(\"points\").add(game.g(\"bonus_points\"))\n).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../map/index\">map</a></li> <li><a href=\"../reduce/index\">reduce</a></li> <li><a href=\"../count/index\">count</a></li> <li><a href=\"../avg/index\">avg</a></li> <li><a href=\"../min/index\">min</a></li> <li><a href=\"../max/index\">max</a></li> <li><a href=\"../group/index\">group</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/sum/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/sum/</a>\n  </p>\n</div>\n","api/java/ungroup/index":"<h1 class=\"title\">ReQL command: ungroup</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">grouped_stream.ungroup() → array\ngrouped_data.ungroup() → array\n</pre> <h2 id=\"description\">Description</h2> <p>Takes a grouped stream or grouped data and turns it into an array of objects representing the groups. Any commands chained after <code class=\"highlighter-rouge\">ungroup</code> will operate on this array, rather than operating on each group individually. This is useful if you want to e.g. order the groups by the value of their reduction.</p> <p>The format of the array returned by <code class=\"highlighter-rouge\">ungroup</code> is the same as the default native format of grouped data in the JavaScript driver and Data Explorer.</p> <p>Suppose that the table <code class=\"highlighter-rouge\">games</code> has the following data:</p> <pre data-language=\"java\">[\n    {\"id\": 2, \"player\": \"Bob\", \"points\": 15, \"type\": \"ranked\"},\n    {\"id\": 5, \"player\": \"Alice\", \"points\": 7, \"type\": \"free\"},\n    {\"id\": 11, \"player\": \"Bob\", \"points\": 10, \"type\": \"free\"},\n    {\"id\": 12, \"player\": \"Alice\", \"points\": 2, \"type\": \"free\"}\n]\n</pre>  <p><strong>Example:</strong> What is the maximum number of points scored by each player, with the highest scorers first?</p> <pre data-language=\"java\">r.table(\"games\").group(\"player\").max(\"points\").g(\"points\").ungroup()\n .orderBy(r.desc(\"reduction\")).run(conn);\n</pre>   <p>The result:</p> <pre data-language=\"java\">[\n    {\n        \"group\": \"Bob\",\n        \"reduction\": 15\n    },\n    {\n        \"group\": \"Alice\",\n        \"reduction\": 7\n    }\n]\n</pre>  <p><strong>Example:</strong> Select one random player and all their games.</p> <pre data-language=\"java\">r.table(\"games\").group(\"player\").ungroup().sample(1).run(conn);\n</pre>  <p>Result:</p> <pre data-language=\"java\">[\n    {\n        \"group\": \"Bob\",\n        \"reduction\": 15\n    },\n    {\n        \"group\": \"Alice\",\n        \"reduction\": 7\n    }\n]\n</pre>  <p>Note that if you didn’t call <code class=\"highlighter-rouge\">ungroup</code>, you would instead select one random game from each player:</p> <pre data-language=\"java\">r.table(\"games\").group(\"player\").sample(1).run(conn);\n</pre>  <p>Result: (Note this is a JSON representation of a <code class=\"highlighter-rouge\">List&lt;GroupedResult&gt;</code>; see the <a href=\"../group/index\">group</a> documentation for more details.)</p> <pre data-language=\"java\">[\n    {\n        \"group\": \"Alice\",\n        \"values\": [\n            {\"id\": 5, \"player\": \"Alice\", \"points\": 7, \"type\": \"free\"}\n        ]\n    },\n    {\n        \"group\": \"Bob\",\n        \"values\": [\n            {\"id\": 11, \"player\": \"Bob\", \"points\": 10, \"type\": \"free\"}\n        ]\n    }\n[\n</pre>  <p><strong>Example:</strong> Finding the arithmetic mode of an array of values:</p> <pre data-language=\"java\">r.expr(r.array([1,2,2,2,3,3])).group(\n  row -&gt; row\n).count().ungroup().orderBy(\"reduction\").nth(-1).bracket(\"group\")\n</pre>  <p>Result:</p> <pre data-language=\"java\">2\n</pre>  <p><strong>Example:</strong> Types!</p> <pre data-language=\"java\">r.table('games').group('player').typeOf().run(conn); // Returns \"GROUPED_STREAM\"\nr.table('games').group('player').ungroup().typeOf().run(conn); // Returns \"ARRAY\"\nr.table('games').group('player').avg('points').run(conn); // Returns \"GROUPED_DATA\"\nr.table('games').group('player').avg('points').ungroup().run(conn); // Returns \"ARRAY\"\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../group/index\">group</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/ungroup/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/ungroup/</a>\n  </p>\n</div>\n","api/java/reduce/index":"<h1 class=\"title\">ReQL command: reduce</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">sequence.reduce(function) → value\nr.reduce(sequence, function) → value\n</pre> <h2 id=\"description\">Description</h2> <p>Produce a single value from a sequence through repeated application of a reduction function.</p> <p>The reduction function may be called on:</p> <ul> <li>two elements of the sequence</li> <li>one element of the sequence and one result of a previous reduction</li> <li>two results of previous reductions</li> </ul> <p>The reduction function can be called on the results of two previous reductions because the <code class=\"highlighter-rouge\">reduce</code> command is distributed and parallelized across shards and CPU cores. A common mistaken when using the <code class=\"highlighter-rouge\">reduce</code> command is to suppose that the reduction is executed from left to right. Read the <a href=\"../../../docs/map-reduce/index\">map-reduce in RethinkDB</a> article to see an example.</p> <p>If the sequence is empty, the server will produce a <code class=\"highlighter-rouge\">ReqlRuntimeError</code> that can be caught with <code class=\"highlighter-rouge\">default_</code>. If the sequence has only one element, the first element will be returned.</p> <p><strong>Example:</strong> Return the number of documents in the table <code class=\"highlighter-rouge\">posts</code>.</p> <pre data-language=\"java\">r.table(\"posts\").map(doc -&gt; 1).reduce(\n    (left, right) -&gt; left.add(right)\n).default_(0).run(conn);\n</pre>  <p>A shorter way to execute this query is to use <a href=\"../count/index\">count</a>.</p> <p><strong>Example:</strong> Suppose that each <code class=\"highlighter-rouge\">post</code> has a field <code class=\"highlighter-rouge\">comments</code> that is an array of comments.<br> Return the number of comments for all posts.</p> <pre data-language=\"java\">r.table(\"posts\").map(doc -&gt; doc.g(\"comments\").count()).reduce(\n    (left, right) -&gt; left.add(right)\n).default_(0).run(conn);\n</pre>  <p><strong>Example:</strong> Suppose that each <code class=\"highlighter-rouge\">post</code> has a field <code class=\"highlighter-rouge\">comments</code> that is an array of comments.<br> Return the maximum number comments per post.</p> <pre data-language=\"java\">r.table(\"posts\").map(doc -&gt; doc.g(\"comments\").count()).reduce(\n    (left, right) -&gt; r.branch(left.gt(right), left, right)\n).default_(0).run(conn);\n</pre>  <p>A shorter way to execute this query is to use <a href=\"../max/index\">max</a>.</p>  <h2>Related commands</h2> <ul> <li><a href=\"../group/index\">group</a></li> <li><a href=\"../map/index\">map</a></li> <li><a href=\"../concat_map/index\">concat_map</a></li> <li><a href=\"../sum/index\">sum</a></li> <li><a href=\"../avg/index\">avg</a></li> <li><a href=\"../min/index\">min</a></li> <li><a href=\"../max/index\">max</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/reduce/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/reduce/</a>\n  </p>\n</div>\n","api/java/count/index":"<h1 class=\"title\">ReQL command: count</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">sequence.count([value | predicate_function]) → number\nbinary.count() → number\nstring.count() → number\nobject.count() → number\nr.count(sequence | binary | string | object[, predicate_function]) → number\n</pre> <h2 id=\"description\">Description</h2> <p>Counts the number of elements in a sequence or key/value pairs in an object, or returns the size of a string or binary object.</p> <p>When <code class=\"highlighter-rouge\">count</code> is called on a sequence with a predicate value or function, it returns the number of elements in the sequence equal to that value or where the function returns <code class=\"highlighter-rouge\">true</code>. On a <a href=\"../binary/index\">binary</a> object, <code class=\"highlighter-rouge\">count</code> returns the size of the object in bytes; on strings, <code class=\"highlighter-rouge\">count</code> returns the string’s length. This is determined by counting the number of Unicode codepoints in the string, counting combining codepoints separately.</p> <p><strong>Example:</strong> Count the number of users.</p> <pre data-language=\"java\">r.table(\"users\").count().run(conn);\n</pre>  <p><strong>Example:</strong> Count the number of 18 year old users.</p> <pre data-language=\"java\">r.table(\"users\").g(\"age\").count(18).run(conn);\n</pre>  <p><strong>Example:</strong> Count the number of users over 18.</p> <pre data-language=\"java\">r.table(\"users\").g(\"age\").count(age -&gt; age.gt(18)).run(conn);\n</pre>  <p>Alternatively:</p> <pre data-language=\"java\">r.table(\"users\").count(user -&gt; user.g(\"age\").gt(18)).run(conn);\n</pre>  <p><strong>Example:</strong> Return the length of a Unicode string.</p> <pre data-language=\"java\">r.expr(\"こんにちは\").count().run(conn);\n// returns: 5\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../map/index\">map</a></li> <li><a href=\"../reduce/index\">reduce</a></li> <li><a href=\"../sum/index\">sum</a></li> <li><a href=\"../avg/index\">avg</a></li> <li><a href=\"../min/index\">min</a></li> <li><a href=\"../max/index\">max</a></li> <li><a href=\"../group/index\">group</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/count/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/count/</a>\n  </p>\n</div>\n","api/java/fold/index":"<h1 class=\"title\">ReQL command: fold</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">sequence.fold(base, function) → value\nsequence.fold(base, function).optArg(\"emit\", function)[.optArg(\"final_emit\", function)] → sequence\n</pre> <h2 id=\"description\">Description</h2> <p>Apply a function to a sequence in order, maintaining state via an accumulator. The <code class=\"highlighter-rouge\">fold</code> command returns either a single value or a new sequence.</p> <p>In its first form, <code class=\"highlighter-rouge\">fold</code> operates like <a href=\"../reduce/index\">reduce</a>, returning a value by applying a combining function to each element in a sequence. The combining function takes two parameters: the previous reduction result (the accumulator) and the current element. However, <code class=\"highlighter-rouge\">fold</code> has the following differences from <code class=\"highlighter-rouge\">reduce</code>:</p> <ul> <li>it is guaranteed to proceed through the sequence from first element to last.</li> <li>it passes an initial base value to the function with the first element in place of the previous reduction result.</li> </ul> <pre class=\"command-syntax\" data-language=\"java\">combiningFunction(accumulator | base, element) → newAccumulator\n</pre> <p>In its second form, <code class=\"highlighter-rouge\">fold</code> operates like <a href=\"../concat_map/index\">concat_map</a>, returning a new sequence rather than a single value. When an <code class=\"highlighter-rouge\">emit</code> function is provided, <code class=\"highlighter-rouge\">fold</code> will:</p> <ul> <li>proceed through the sequence in order and take an initial base value, as above.</li> <li>for each element in the sequence, call both the combining function and a separate emitting function. The emitting function takes three parameters: the previous reduction result (the accumulator), the current element, and the output from the combining function (the new value of the accumulator).</li> </ul> <p>If provided, the emitting function must return a list.</p> <pre class=\"command-syntax\" data-language=\"java\">emit(previousAccumulator, element, accumulator) → array\n</pre> <p>A <code class=\"highlighter-rouge\">finalEmit</code> function may also be provided, which will be called at the end of the sequence. It takes a single parameter: the result of the last reduction through the iteration (the accumulator), or the original base value if the input sequence was empty. This function must return a list, which will be appended to <code class=\"highlighter-rouge\">fold</code>’s output stream.</p> <pre class=\"command-syntax\" data-language=\"java\">finalEmit(accumulator | base) → array\n</pre> <p><strong>Example:</strong> Concatenate words from a list.</p> <pre data-language=\"java\">r.table(\"words\").orderBy(\"id\").fold(\"\",\n    (acc, word) -&gt; acc.add(r.branch(r.eq(acc, \"\"), \"\", \", \")).add(word)\n).run(conn);\n</pre>  <p>(This example could be implemented with <code class=\"highlighter-rouge\">reduce</code>, but <code class=\"highlighter-rouge\">fold</code> will preserve the order when <code class=\"highlighter-rouge\">words</code> is a RethinkDB table or other stream, which is not guaranteed with <code class=\"highlighter-rouge\">reduce</code>.)</p> <p><strong>Example:</strong> Return every other row in a table.</p> <pre data-language=\"java\">r.table(\"even_things\").fold(0,\n    (acc, row) -&gt; r.add(acc, 1)\n).optArg(\"emit\",\n    (acc, row, new_acc) -&gt; r.branch(r.mod(new_acc, 2).eq(0),\n                                    r.array(row), r.array())\n).run(conn);\n</pre>  <p>The first function increments the accumulator each time it’s called, starting at <code class=\"highlighter-rouge\">0</code>; the second function, the emitting function, alternates between returning a single-item list containing the current row or an empty list. The <code class=\"highlighter-rouge\">fold</code> command will return a concatenated list of each emitted value.</p> <p><strong>Example:</strong> Compute a five-day running average for a weight tracker.</p> <pre data-language=\"java\">r.table(\"tracker\").filter(\n    r.hashMap(\"name\", \"bob\")\n).orderBy(\"date\").g(\"weight\").fold(r.array(),\n    (acc, row) -&gt; r.add(r.array(row), acc).limit(5)\n).optArg(\"emit\",\n    (acc, row, new_acc) -&gt; r.branch(new_acc.size().eq(5),\n                                    r.array(new_acc.avg()),\n                                    r.array())\n).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../reduce/index\">reduce</a></li> <li><a href=\"../concat_map/index\">concatMap</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/fold/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/fold/</a>\n  </p>\n</div>\n","api/java/distinct/index":"<h1 class=\"title\">ReQL command: distinct</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">sequence.distinct() → array\ntable.distinct() → stream\nr.distinct(sequence) → array\nr.distinct(table) → stream\n</pre> <h2 id=\"description\">Description</h2> <p>Removes duplicates from elements in a sequence.</p> <p>The <code class=\"highlighter-rouge\">distinct</code> command can be called on any sequence or table with an index.</p> <blockquote class=\"infobox \">\n<p>While <code class=\"highlighter-rouge\">distinct</code> can be called on a table without an index, the only effect will be to convert the table into a stream; the content of the stream will not be affected.</p> </blockquote> <p><strong>Example:</strong> Which unique villains have been vanquished by Marvel heroes?</p> <pre data-language=\"java\">r.table(\"marvel\").concatMap(\n    hero -&gt; hero.g(\"villain_list\")\n).distinct().run(conn);\n</pre>  <p><strong>Example:</strong> Topics in a table of messages have a secondary index on them, and more than one message can have the same topic. What are the unique topics in the table?</p> <pre data-language=\"java\">r.table(\"messages\").distinct().optArg(\"index\", \"topics\").run(conn);\n</pre>  <p>The above structure is functionally identical to:</p> <pre data-language=\"java\">r.table(\"messages\").g(\"topics\").distinct().run(conn);\n</pre>  <p>However, the first form (passing the index as an argument to <code class=\"highlighter-rouge\">distinct</code>) is faster, and won’t run into array limit issues since it’s returning a stream.</p>  <h2>Related commands</h2> <ul> <li><a href=\"../map/index\">map</a></li> <li><a href=\"../concat_map/index\">concat_map</a></li> <li><a href=\"../group/index\">group</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/distinct/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/distinct/</a>\n  </p>\n</div>\n","api/java/avg/index":"<h1 class=\"title\">ReQL command: avg</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">sequence.avg([field | function]) → number\nr.avg(sequence, [field | function]) → number\n</pre> <h2 id=\"description\">Description</h2> <p>Averages all the elements of a sequence. If called with a field name, averages all the values of that field in the sequence, skipping elements of the sequence that lack that field. If called with a function, calls that function on every element of the sequence and averages the results, skipping elements of the sequence where that function returns <code class=\"highlighter-rouge\">null</code> or a non-existence error.</p> <p>Produces a non-existence error when called on an empty sequence. You can handle this case with <code class=\"highlighter-rouge\">default</code>.</p> <p><strong>Example:</strong> What’s the average of 3, 5, and 7?</p> <pre data-language=\"java\">r.expr(r.array(3, 5, 7)).avg().run(conn);\n</pre>  <p><strong>Example:</strong> What’s the average number of points scored in a game?</p> <pre data-language=\"java\">r.table(\"games\").avg(\"points\").run(conn);\n</pre>  <p><strong>Example:</strong> What’s the average number of points scored in a game, counting bonus points?</p> <pre data-language=\"java\">r.table(\"games\").avg(\n    game -&gt; game.g(\"points\").add(game.g(\"bonus_points\"))\n).run(conn);\n</pre>  <p><strong>Example:</strong> What’s the average number of points scored in a game? (But return <code class=\"highlighter-rouge\">null</code> instead of raising an error if there are no games where points have been scored.)</p> <pre data-language=\"java\">r.table(\"games\").avg(\"points\").default_(null).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../map/index\">map</a></li> <li><a href=\"../reduce/index\">reduce</a></li> <li><a href=\"../count/index\">count</a></li> <li><a href=\"../sum/index\">sum</a></li> <li><a href=\"../min/index\">min</a></li> <li><a href=\"../max/index\">max</a></li> <li><a href=\"../group/index\">group</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/avg/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/avg/</a>\n  </p>\n</div>\n","api/java/min/index":"<h1 class=\"title\">ReQL command: min</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">sequence.min([field | function]) → element\nr.min(sequence, [field | function]) → element\n</pre> <h2 id=\"description\">Description</h2> <p>Finds the minimum element of a sequence.</p> <p>The <code class=\"highlighter-rouge\">min</code> command can be called with:</p> <ul> <li>a <strong>field name</strong>, to return the element of the sequence with the smallest value in that field;</li> <li>a <strong>function</strong>, to apply the function to every element within the sequence and return the element which returns the smallest value from the function, ignoring any elements where the function produces a non-existence error;</li> <li>an <strong>index</strong> (the primary key or a secondary index) via <a href=\"../optarg/index\">optArg</a>, to return the element of the sequence with the smallest value in that index.</li> </ul> <p>For more information on RethinkDB’s sorting order, read the section in <a href=\"../../../docs/data-types/index#sorting-order\">ReQL data types</a>.</p> <p>Calling <code class=\"highlighter-rouge\">min</code> on an empty sequence will throw a non-existence error; this can be handled using the <a href=\"../default/index\">default_</a> command.</p> <p><strong>Example:</strong> Return the minimum value in the list <code class=\"highlighter-rouge\">[3, 5, 7]</code>.</p> <pre data-language=\"java\">r.expr(r.array(3, 5, 7)).min().run(conn);\n</pre>  <p><strong>Example:</strong> Return the user who has scored the fewest points.</p> <pre data-language=\"java\">r.table(\"users\").min(\"points\").run(conn);\n</pre>  <p><strong>Example:</strong> The same as above, but using a secondary index on the <code class=\"highlighter-rouge\">points</code> field.</p> <pre data-language=\"java\">r.table(\"users\").min().optArg(\"index\", \"points\").run(conn);\n</pre>  <p><strong>Example:</strong> Return the user who has scored the fewest points, adding in bonus points from a separate field using a function.</p> <pre data-language=\"java\">r.table(\"users\").min(\n    user -&gt; user.g(\"points\").add(user.g(\"bonus_points\"))\n).run(conn);\n</pre>  <p><strong>Example:</strong> Return the smallest number of points any user has ever scored. This returns the value of that <code class=\"highlighter-rouge\">points</code> field, not a document.</p> <pre data-language=\"java\">r.table(\"users\").min(\"points\").g(\"points\").run(conn);\n</pre>  <p><strong>Example:</strong> Return the user who has scored the fewest points, but add a default <code class=\"highlighter-rouge\">None</code> return value to prevent an error if no user has ever scored points.</p> <pre data-language=\"java\">r.table(\"users\").min(\"points\").default_(null).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../map/index\">map</a></li> <li><a href=\"../reduce/index\">reduce</a></li> <li><a href=\"../count/index\">count</a></li> <li><a href=\"../sum/index\">sum</a></li> <li><a href=\"../avg/index\">avg</a></li> <li><a href=\"../max/index\">max</a></li> <li><a href=\"../group/index\">group</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/min/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/min/</a>\n  </p>\n</div>\n","api/java/max/index":"<h1 class=\"title\">ReQL command: max</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">sequence.max([field | function]) → element\nr.max(sequence, [field | function]) → element\n</pre> <h2 id=\"description\">Description</h2> <p>Finds the maximum element of a sequence.</p> <p>The <code class=\"highlighter-rouge\">max</code> command can be called with:</p> <ul> <li>a <strong>field name</strong>, to return the element of the sequence with the largest value in that field;</li> <li>a <strong>function</strong>, to apply the function to every element within the sequence and return the element which returns the largest value from the function, ignoring any elements where the function produces a non-existence error;</li> <li>an <strong>index</strong> (the primary key or a secondary index) via <a href=\"../optarg/index\">optArg</a>, to return the element of the sequence with the largest value in that index.</li> </ul> <p>For more information on RethinkDB’s sorting order, read the section in <a href=\"../../../docs/data-types/index#sorting-order\">ReQL data types</a>.</p> <p>Calling <code class=\"highlighter-rouge\">max</code> on an empty sequence will throw a non-existence error; this can be handled using the <a href=\"../default/index\">default_</a> command.</p> <p><strong>Example:</strong> Return the maximum value in the list <code class=\"highlighter-rouge\">[3, 5, 7]</code>.</p> <pre data-language=\"java\">r.expr(r.array(3, 5, 7)).max().run(conn);\n</pre>  <p><strong>Example:</strong> Return the user who has scored the most points.</p> <pre data-language=\"java\">r.table(\"users\").max(\"points\").run(conn);\n</pre>  <p><strong>Example:</strong> The same as above, but using a secondary index on the <code class=\"highlighter-rouge\">points</code> field.</p> <pre data-language=\"java\">r.table(\"users\").max().optArg(\"index\", \"points\").run(conn);\n</pre>  <p><strong>Example:</strong> Return the user who has scored the most points, adding in bonus points from a separate field using a function.</p> <pre data-language=\"java\">r.table(\"users\").max(\n    user -&gt; user.g(\"points\").add(user.g(\"bonus_points\"))\n).run(conn);\n</pre>  <p><strong>Example:</strong> Return the highest number of points any user has ever scored. This returns the value of that <code class=\"highlighter-rouge\">points</code> field, not a document.</p> <pre data-language=\"java\">r.table(\"users\").max(\"points\").g(\"points\").run(conn);\n</pre>  <p><strong>Example:</strong> Return the user who has scored the most points, but add a default <code class=\"highlighter-rouge\">None</code> return value to prevent an error if no user has ever scored points.</p> <pre data-language=\"java\">r.table(\"users\").max(\"points\").default_(null).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../map/index\">map</a></li> <li><a href=\"../reduce/index\">reduce</a></li> <li><a href=\"../count/index\">count</a></li> <li><a href=\"../sum/index\">sum</a></li> <li><a href=\"../avg/index\">avg</a></li> <li><a href=\"../min/index\">min</a></li> <li><a href=\"../group/index\">group</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/max/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/max/</a>\n  </p>\n</div>\n","api/java/contains/index":"<h1 class=\"title\">ReQL command: contains</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">sequence.contains([value | predicate_function, ...]) → bool\nr.contains(sequence, [value | predicate_function, ...]) → bool\n</pre> <h2 id=\"description\">Description</h2> <p>When called with values, returns <code class=\"highlighter-rouge\">true</code> if a sequence contains all the specified values. When called with predicate functions, returns <code class=\"highlighter-rouge\">true</code> if for each predicate there exists at least one element of the stream where that predicate returns <code class=\"highlighter-rouge\">true</code>.</p> <p>Values and predicates may be mixed freely in the argument list.</p> <p><strong>Example:</strong> Has Iron Man ever fought Superman?</p> <pre data-language=\"java\">r.table(\"marvel\").get(\"ironman\").g(\"opponents\").contains(\"superman\").run(conn);\n</pre>  <p><strong>Example:</strong> Has Iron Man ever defeated Superman in battle?</p> <pre data-language=\"java\">r.table(\"marvel\").get(\"ironman\").g(\"battles\").contains(\n    battle -&gt; battle.g(\"winner\").eq(\"ironman\").and(\n              battle.g(\"loser\").eq(\"superman\"))\n).run(conn);\n</pre>  <p><strong>Example:</strong> Use <code class=\"highlighter-rouge\">contains</code> with a predicate function to simulate an <code class=\"highlighter-rouge\">or</code>. Return the Marvel superheroes who live in Detroit, Chicago or Hoboken.</p> <pre data-language=\"java\">r.table(\"marvel\").filter(\n    hero -&gt; r.expr(r.array(\"Detroit\", \"Chicago\", \"Hoboken\"))\n             .contains(hero.g(\"city\"))\n\n).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../map/index\">map</a></li> <li><a href=\"../concat_map/index\">concat_map</a></li> <li><a href=\"../group/index\">group</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/contains/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/contains/</a>\n  </p>\n</div>\n","api/java/without/index":"<h1 class=\"title\">ReQL command: without</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">sequence.without([selector1, selector2...]) → stream\narray.without([selector1, selector2...]) → array\nsingleSelection.without([selector1, selector2...]) → object\nobject.without([selector1, selector2...]) → object\n</pre> <h2 id=\"description\">Description</h2> <p>The opposite of pluck; takes an object or a sequence of objects, and returns them with the specified fields or paths removed.</p> <p><strong>Example:</strong> Since we don’t need it for this computation we’ll save bandwidth and leave out the list of IronMan’s romantic conquests.</p> <pre data-language=\"java\">r.table(\"marvel\").get(\"IronMan\").without(\"personalVictoriesList\").run(conn);\n</pre>  <p><strong>Example:</strong> Without their prized weapons, our enemies will quickly be vanquished.</p> <pre data-language=\"java\">r.table(\"enemies\").without(\"weapons\").run(conn);\n</pre>  <p><strong>Example:</strong> Nested objects can be used to remove the damage subfield from the weapons and abilities fields.</p> <pre data-language=\"java\">r.table(\"marvel\").without(\n    r.hashMap(\"weapons\", r.hashMap(\"damage\", true))\n     .with(\"abilities\", r.hashMap(\"damage\", true))\n).run(conn);\n</pre>  <p><strong>Example:</strong> The nested syntax can quickly become overly verbose so there’s a shorthand for it.</p> <pre data-language=\"java\">r.table(\"marvel\")\n .without(r.hashMap(\"weapons\", \"damage\").with(\"abilities\", \"damage\")).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../pluck/index\">pluck</a></li> <li><a href=\"../map/index\">map</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/without/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/without/</a>\n  </p>\n</div>\n","api/java/merge/index":"<h1 class=\"title\">ReQL command: merge</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">singleSelection.merge([object | function, object | function, ...]) → object\nobject.merge([object | function, object | function, ...]) → object\nsequence.merge([object | function, object | function, ...]) → stream\narray.merge([object | function, object | function, ...]) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Merge two or more objects together to construct a new object with properties from all. When there is a conflict between field names, preference is given to fields in the rightmost object in the argument list. <code class=\"highlighter-rouge\">merge</code> also accepts a function that returns an object, which will be used similarly to a <a href=\"../map/index\">map</a> function.</p> <p><strong>Example:</strong> Equip Thor for battle.</p> <pre data-language=\"java\">r.table(\"marvel\").get(\"thor\")\n .merge(r.table(\"equipment\").get(\"hammer\"),\n        r.table(\"equipment\").get(\"pimento_sandwich\"))\n .run(conn);\n</pre>  <p><strong>Example:</strong> Equip every hero for battle, using a function to retrieve their weapons.</p> <pre data-language=\"java\">r.table(\"marvel\").merge(\n    hero -&gt; r.hashMap(\"weapons\", r.table(\"weapons\").get(hero.g(\"weapon_id\")))\n).run(conn);\n</pre>  <p><strong>Example:</strong> Use <code class=\"highlighter-rouge\">merge</code> to join each blog post with its comments.</p> <p>Note that the sequence being merged—in this example, the comments—must be coerced from a selection to an array. Without <code class=\"highlighter-rouge\">coerceTo</code> the operation will throw an error (“Expected type DATUM but found SELECTION”).</p> <pre data-language=\"java\">r.table(\"posts\").merge(\n    post -&gt; r.hashMap(\"comments\", r.table(\"comments\").getAll(post.g(\"id\"))\n                      .optArg(\"index\", \"post_id\").coerceTo(\"array\"))\n).run(conn);\n</pre>  <p><strong>Example:</strong> Merge can be used recursively to modify sub-objects within objects.</p> <pre data-language=\"java\">r.expr(r.hashMap(\"weapons\", r.hashMap(\"spectacular graviton beam\",\n    r.hashMap(\"dmg\", 10).with(\"cooldown\", 20))))\n .merge(r.hashMap(\"weapons\", r.hashMap(\"spectacular graviton beam\",\n    r.hashMap(\"dmg\", 10))))\n .run(conn);\n</pre>  <p><strong>Example:</strong> To replace a nested object with another object you can use the <a href=\"../literal/index\">literal</a> term.</p> <pre data-language=\"java\">r.expr(r.hashMap(\"weapons\", r.hashMap(\"spectacular graviton beam\",\n    r.hashMap(\"dmg\", 10).with(\"cooldown\", 20))))\n .merge(r.hashMap(\"weapons\", r.literal(r.hashMap(\"repulsor rays\",\n    r.hashMap(\"dmg\", 3).with(\"cooldown\", 0)))))\n .run(conn);\n</pre>  <p><strong>Example:</strong> <code class=\"highlighter-rouge\">literal</code> can be used to remove keys from an object as well.</p> <pre data-language=\"java\">r.expr(r.hashMap(\"weapons\", r.hashMap(\"spectacular graviton beam\",\n    r.hashMap(\"dmg\", 10).with(\"cooldown\", 20))))\n .merge(r.hashMap(\"weapons\", r.hashMap(\"spectacular graviton beam\",\n    r.literal())))\n .run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../pluck/index\">pluck</a></li> <li><a href=\"../without/index\">without</a></li> <li><a href=\"../map/index\">map</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/merge/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/merge/</a>\n  </p>\n</div>\n","api/java/group/index":"<h1 class=\"title\">ReQL command: group</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">sequence.group([field | function...,]) → grouped_stream\nr.group(sequence, [field | function...,]) → grouped_stream\n</pre> <p><img src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/group.png\" class=\"api_command_illustration\"></p> <h2 id=\"description\">Description</h2> <p>Takes a stream and partitions it into multiple groups based on the fields or functions provided.</p> <p>Two options are available via <a href=\"../optarg/index\">optArg</a>: <code class=\"highlighter-rouge\">index</code> can be the name of an index to group on (in place of a field. The <code class=\"highlighter-rouge\">multi</code> flag, a boolean (default <code class=\"highlighter-rouge\">false</code>), allows single documents to be assigned to multiple groups, similar to the behavior of <a href=\"../../../docs/secondary-indexes/java/index\">multi-indexes</a>. When <code class=\"highlighter-rouge\">multi</code> is <code class=\"highlighter-rouge\">true</code> and the grouping value is an array, documents will be placed in each group that corresponds to the elements of the array. If the array is empty the row will be ignored.</p> <p>The data returned by <code class=\"highlighter-rouge\">group</code> will be a <code class=\"highlighter-rouge\">List&lt;GroupedResult&gt;</code>:</p> <pre data-language=\"java\">public class GroupedResult&lt;G,V&gt; {\n    public final G group;\n    public final List&lt;V&gt; values;\n\n    public GroupedResult(G group, List&lt;V&gt; values){\n        this.group = group;\n        this.values = values;\n    }\n}\n</pre>  <p>Suppose that the table <code class=\"highlighter-rouge\">games</code> has the following data:</p> <pre data-language=\"java\">[\n    {\"id\": 2, \"player\": \"Bob\", \"points\": 15, \"type\": \"ranked\"},\n    {\"id\": 5, \"player\": \"Alice\", \"points\": 7, \"type\": \"free\"},\n    {\"id\": 11, \"player\": \"Bob\", \"points\": 10, \"type\": \"free\"},\n    {\"id\": 12, \"player\": \"Alice\", \"points\": 2, \"type\": \"free\"}\n]\n</pre>  <p><strong>Example:</strong> Group games by player.</p> <pre data-language=\"java\">r.table(\"games\").group(\"player\").run(conn);\n</pre>  <p>To show the returned data, we’ll use JSON representation again, with <code class=\"highlighter-rouge\">group</code> and <code class=\"highlighter-rouge\">values</code> as the fields corresponding to the elements in each <code class=\"highlighter-rouge\">GroupedResult</code>.</p> <pre data-language=\"java\">[\n    {\n        \"group\": \"Alice\",\n        \"values\": [\n            {\"id\": 5, \"player\": \"Alice\", \"points\": 7, \"type\": \"free\"},\n            {\"id\": 12, \"player\": \"Alice\", \"points\": 2, \"type\": \"free\"}\n        ]\n    },\n    {\n        \"group\": \"Bob\",\n        \"values\": [\n            {\"id\": 2, \"player\": \"Bob\", \"points\": 15, \"type\": \"ranked\"},\n            {\"id\": 11, \"player\": \"Bob\", \"points\": 10, \"type\": \"free\"}\n        ]\n    }\n]\n</pre>   <p>Commands chained after <code class=\"highlighter-rouge\">group</code> will be called on each of these grouped sub-streams, producing grouped data.</p> <p><strong>Example:</strong> What is each player’s best game?</p> <pre data-language=\"java\">r.table(\"games\").group(\"player\").max(\"points\").run(conn);\n</pre>  <pre data-language=\"java\">[\n    {\n        \"group\": \"Alice\",\n        \"values\": {\"id\": 5, \"player\": \"Alice\", \"points\": 7, \"type\": \"free\"}\n    },\n    {\n        \"group\": \"Bob\",\n        \"values\": {\"id\": 2, \"player\": \"Bob\", \"points\": 15, \"type\": \"ranked\"}\n    }\n]\n</pre>  <p>Commands chained onto grouped data will operate on each grouped datum, producing more grouped data.</p> <p><strong>Example:</strong> What is the maximum number of points scored by each player?</p> <pre data-language=\"java\">r.table(\"games\").group(\"player\").max(\"points\").g(\"points\").run(conn);\n</pre>  <pre data-language=\"java\">[\n    {\n        \"group\": \"Alice\",\n        \"values\": 7\n    },\n    {\n        \"group\": \"Bob\",\n        \"values\": 15\n    }\n]\n</pre>  <p>You can also group by more than one field.</p> <p><strong>Example:</strong> What is the maximum number of points scored by each player for each game type?</p> <pre data-language=\"java\">r.table(\"games\").group(\"player\", \"type\").max(\"points\").g(\"points\").run(conn);\n</pre>  <pre data-language=\"java\">[\n    {\n        \"group\": [\"Alice\", \"free\"],\n        \"values\": 7\n    }\n    {\n        \"group\": [\"Bob\", \"free\"],\n        \"values\": 10,\n    },\n    {\n        \"group\": [\"Bob\", \"ranked\"],\n        \"values\": 15,\n    }\n]\n</pre>  <p>You can also group by a function.</p> <p><strong>Example:</strong> What is the maximum number of points scored by each player for each game type?</p> <pre data-language=\"java\">r.table(\"games\").group(\n    game -&gt; game.pluck(\"player\", \"type\")\n).max(\"points\").g(\"points\").run(conn);\n</pre>  <pre data-language=\"java\">[\n    {\n        \"group\": {\"player\": \"Alice\", \"type\": \"free\"},\n        \"values\": 7\n    },\n    {\n        \"group\": {\"player\": \"Bob\", \"type\": \"free\"},\n        \"values\": 10\n    },\n    {\n        \"group\": {\"player\": \"Bob\", \"type\": \"ranked\"},\n        \"values\": 15\n    }\n]\n</pre>  <p>Using a function, you can also group by date on a ReQL <a href=\"../../../docs/dates-and-times/java/index\">date field</a>.</p> <p><strong>Example:</strong> How many matches have been played this year by month?</p> <pre data-language=\"java\">r.table(\"matches\").group(\n    match -&gt; r.array(match.g(\"date\").year(), match.g(\"date\").month())\n).count().run(conn);\n</pre>  <pre data-language=\"java\">[\n    {\n        \"group\": [2014, 2],\n        \"values\": 2\n    },\n    {\n        \"group\": [2014, 3],\n        \"values\": 2\n    },\n    {\n        \"group\": [2014, 4],\n        \"values\": 1\n    },\n    {\n        \"group\": [2014, 5],\n        \"values\": 3\n    }\n]\n</pre>  <p>You can also group on an index (primary key or secondary).</p> <p><strong>Example:</strong> What is the maximum number of points scored by game type?</p> <pre data-language=\"java\">r.table(\"games\").group().optArg(\"index\", \"type\")\n .max(\"points\").g(\"points\").run(conn);\n</pre>  <pre data-language=\"java\">[\n    {\n        \"group\": \"free\",\n        \"values\": 10\n    },\n    {\n        \"group\": \"ranked\",\n        \"values\": 15\n    }\n]\n</pre>  <h2 id=\"organizing-by-value-with-multi\">Organizing by value with <strong>multi</strong>\n</h2> <p>Suppose that the table <code class=\"highlighter-rouge\">games2</code> has the following data:</p> <pre data-language=\"java\">[\n    { \"id\": 1, \"matches\": {\"a\": [1, 2, 3], \"b\": [4, 5, 6]} },\n    { \"id\": 2, \"matches\": {\"b\": [100], \"c\": [7, 8, 9]} },\n    { \"id\": 3, \"matches\": {\"a\": [10, 20], \"c\": [70, 80]} }\n]\n</pre>  <p>Using the <code class=\"highlighter-rouge\">multi</code> option we can group data by match A, B or C.</p> <pre data-language=\"java\">r.table(\"games2\").group(\n    row -&gt; row.g(\"matches\").keys()\n).optArg(\"multi\", true).run(conn);\n</pre>  <pre data-language=\"java\">[\n    {\n        \"group\": \"a\",\n        \"values\": [ &lt;id 1&gt;, &lt;id 3&gt; ]\n    },\n    {\n        \"group\": \"b\",\n        \"values\": [ &lt;id 1&gt;, &lt;id 2&gt; ]\n    },\n    {\n        \"group\": \"c\",\n        \"values\": [ &lt;id 2&gt;, &lt;id 3&gt; ]\n    }\n]\n</pre>  <p>(The full result set is abbreviated in the figure; <code class=\"highlighter-rouge\">&lt;id 1&gt;, &lt;id 2&gt;</code> and <code class=\"highlighter-rouge\">&lt;id 3&gt;</code> would be the entire documents matching those keys.)</p> <p><strong>Example:</strong> Use <a href=\"../map/index\">map</a> and <a href=\"../sum/index\">sum</a> to get the total points scored for each match.</p> <pre data-language=\"java\">r.table(\"games2\").group(\n    row -&gt; row.g(\"matches\").keys()\n).optArg(\"multi\", true).ungroup().map(\n    doc -&gt; r.hashMap(\"match\", doc.g(\"group\")).with(\n        \"total\", doc.g(\"reduction\").sum(\n            set -&gt; set.g(\"matches\").bracket(doc.g(\"group\")).sum()\n        )\n    )\n).run(conn);\n</pre>  <pre data-language=\"java\">[\n    { \"match\": \"a\", \"total\": 36 },\n    { \"match\": \"b\", \"total\": 115 },\n    { \"match\": \"c\", \"total\": 174 }\n]\n</pre>  <p>The inner <code class=\"highlighter-rouge\">sum</code> adds the scores by match within each document; the outer <code class=\"highlighter-rouge\">sum</code> adds those results together for a total across all the documents.</p> <h2 id=\"ungrouping\">Ungrouping</h2> <p>If you want to operate on all the groups rather than operating on each group (e.g. if you want to order the groups by their reduction), you can use <a href=\"../ungroup/index\">ungroup</a> to turn a grouped stream or grouped data into an array of objects representing the groups.</p> <p>The format of the array returned by <code class=\"highlighter-rouge\">ungroup</code> is the same as the default native format of grouped data in the JavaScript driver and Data Explorer.</p> <p><strong>Example:</strong> Ungrouping grouped data.</p> <pre data-language=\"java\">r.table('games').group('player').max('points')['points'].ungroup().run(conn);\n</pre>  <pre data-language=\"java\">[\n    {\n        \"group\": \"Alice\",\n        \"reduction\": 7\n    },\n    {\n        \"group\": \"Bob\",\n        \"reduction\": 15\n    }\n]\n</pre>  <p>Ungrouping is useful e.g. for ordering grouped data, or for inserting grouped data into a table.</p> <p><strong>Example:</strong> What is the maximum number of points scored by each player, with the highest scorers first?</p> <pre data-language=\"java\">r.table(\"games\").group(\"player\").max(\"points\").g(\"points\").ungroup()\n .orderBy(r.desc(\"reduction\")).run(conn);\n</pre>  <pre data-language=\"java\">[\n    {\n        \"group\": \"Bob\",\n        \"reduction\": 15\n    },\n    {\n        \"group\": \"Alice\",\n        \"reduction\": 7\n    }\n]\n</pre>  <h2 id=\"implementation-details\">Implementation Details</h2> <p>When grouped data are returned to the client, they are transformed into a client-specific native type. (Something similar is done with <a href=\"../../../docs/dates-and-times/java/index\">times</a>.) In Java, grouped data are transformed into an <code class=\"highlighter-rouge\">List</code>. If you instead want to receive the raw pseudotype from the server, you can specify <code class=\"highlighter-rouge\">group_format: \"raw\"</code> as an optional argument to <code class=\"highlighter-rouge\">run</code>:</p> <p><strong>Example:</strong> Get back the raw <code class=\"highlighter-rouge\">GROUPED_DATA</code> pseudotype.</p> <pre data-language=\"java\">r.table(\"games\").group(\"player\").avg(\"points\").run(conn).optArg(\"group_format\", \"raw\");\n</pre>  <pre data-language=\"java\">{\n    \"$reql_type$\": \"GROUPED_DATA\",\n    \"data\": [\n        [\"Alice\", 4.5],\n        [\"Bob\", 12.5]\n    ]\n}\n</pre>  <p>You might also want to use the <a href=\"../ungroup/index\">ungroup</a> command (see above), which will turn the grouped data into an array of objects on the server.</p> <h2 id=\"performance-details\">Performance Details</h2> <p>If you run a query that returns a grouped stream, it will be automatically converted to grouped data before being sent back to you (there is currently no efficient way to stream groups from RethinkDB). This grouped data is subject to the array size limit, by default 100,000 elements (see <a href=\"../run/index\">run</a> for details on how to use the <code class=\"highlighter-rouge\">array_limit</code> argument to change this).</p> <p>In general, operations on grouped streams will be efficiently distributed, and operations on grouped data won’t be. You can figure out what you’re working with by putting <code class=\"highlighter-rouge\">typeOf</code> on the end of your query. Below are efficient and inefficient examples.</p> <p><strong>Example:</strong> Efficient operation.</p> <pre data-language=\"java\">// r.table(\"games\").group(\"player\").typeOf().run(conn);\n// Returns \"GROUPED_STREAM\"\nr.table(\"games\").group(\"player\").min(\"points\").run(conn); // EFFICIENT\n</pre>  <p><strong>Example:</strong> Inefficient operation.</p> <pre data-language=\"java\">// r.table(\"games\").group(\"player\").orderBy(\"score\").typeOf().run(conn);\n// Returns \"GROUPED_DATA\"\nr.table(\"games\").group(\"player\").orderBy(\"score\").nth(0).run(conn); // INEFFICIENT\n</pre>  <p>What does it mean to be inefficient here? When operating on grouped data rather than a grouped stream, <em>all</em> of the data has to be available on the node processing the query. This means that the operation will only use one server’s resources, and will require memory proportional to the size of the grouped data it’s operating on. (In the case of the <a href=\"../order_by/index\">orderBy</a> in the inefficient example, that means memory proportional <strong>to the size of the table</strong>.) The array limit is also enforced for grouped data, so the <code class=\"highlighter-rouge\">orderBy</code> example would fail for tables with more than 100,000 rows without changing the <code class=\"highlighter-rouge\">arrayLimit</code> option to <code class=\"highlighter-rouge\">run</code>.</p> <h2 id=\"more-examples\">More Examples</h2> <p><strong>Example:</strong> What is the maximum number of points scored by each player in free games?</p> <pre data-language=\"java\">r.table(\"games\").filter(\n    game -&gt; game.g(\"type\").eq(\"free\")\n).group(\"player\").max(\"points\").g(\"points\").run(conn);\n</pre>  <pre data-language=\"java\">[\n    {\n        \"group\": \"Alice\",\n        \"values\": 7\n    },\n    {\n        \"group\": \"Bob\",\n        \"values\": 10\n    }\n]\n</pre>  <p><strong>Example:</strong> What is each player’s highest even and odd score?</p> <pre data-language=\"java\">r.table(\"games\").group(\n    \"name\", game -&gt; game.g(\"points\").mod(2)\n).max(\"points\").g(\"points\").run(conn);\n</pre>  <pre data-language=\"java\">[\n    {\n        \"group\": [\"Alice\", 1],\n        \"values\": 7\n    },\n    {\n        \"group\": [\"Bob\", 0],\n        \"values\": 10\n    },\n    {\n        \"group\": [\"Bob\", 1],\n        \"values\": 15\n    }\n]\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../ungroup/index\">ungroup</a></li> <li><a href=\"../map/index\">map</a></li> <li><a href=\"../reduce/index\">reduce</a></li> <li><a href=\"../count/index\">count</a></li> <li><a href=\"../sum/index\">sum</a></li> <li><a href=\"../avg/index\">avg</a></li> <li><a href=\"../min/index\">min</a></li> <li><a href=\"../max/index\">max</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/group/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/group/</a>\n  </p>\n</div>\n","api/java/append/index":"<h1 class=\"title\">ReQL command: append</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">array.append(value) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Append a value to an array.</p> <p><strong>Example:</strong> Retrieve Iron Man’s equipment list with the addition of some new boots.</p> <pre data-language=\"java\">r.table(\"marvel\").get(\"IronMan\").g(\"equipment\").append(\"newBoots\").run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../prepend/index\">prepend</a></li> <li><a href=\"../insert_at/index\">insertAt</a></li> <li><a href=\"../delete_at/index\">deleteAt</a></li> <li><a href=\"../change_at/index\">changeAt</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/append/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/append/</a>\n  </p>\n</div>\n","api/java/prepend/index":"<h1 class=\"title\">ReQL command: prepend</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">array.prepend(value) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Prepend a value to an array.</p> <p><strong>Example:</strong> Retrieve Iron Man’s equipment list with the addition of some new boots.</p> <pre data-language=\"java\">r.table(\"marvel\").get(\"IronMan\").g(\"equipment\").prepend(\"newBoots\").run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../append/index\">append</a></li> <li><a href=\"../insert_at/index\">insertAt</a></li> <li><a href=\"../delete_at/index\">deleteAt</a></li> <li><a href=\"../change_at/index\">changeAt</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/prepend/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/prepend/</a>\n  </p>\n</div>\n","api/java/difference/index":"<h1 class=\"title\">ReQL command: difference</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">array.difference(array) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Remove the elements of one array from another array.</p> <p><strong>Example:</strong> Retrieve Iron Man’s equipment list without boots.</p> <pre data-language=\"java\">r.table(\"marvel\").get(\"IronMan\").g(\"equipment\").difference(r.array(\"Boots\"))\n .run(conn);\n</pre>  <p><strong>Example:</strong> Remove Iron Man’s boots from his equipment.</p> <pre data-language=\"java\">r.table(\"marvel\").get(\"IronMan\").g(\"equipment\").update(\n    doc -&gt; r.hashMap(\"equipment\",\n                     doc.g(\"equipment\").difference(r.array(\"Boots\")))\n).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../set_insert/index\">setInsert</a></li> <li><a href=\"../set_union/index\">setUnion</a></li> <li><a href=\"../set_intersection/index\">setIntersection</a></li> <li><a href=\"../set_difference/index\">setDifference</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/difference/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/difference/</a>\n  </p>\n</div>\n","api/java/set_insert/index":"<h1 class=\"title\">ReQL command: setInsert</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">array.setInsert(value) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Add a value to an array and return it as a set (an array with distinct values).</p> <p><strong>Example:</strong> Retrieve Iron Man’s equipment list with the addition of some new boots.</p> <pre data-language=\"java\">r.table(\"marvel\").get(\"IronMan\").g(\"equipment\").setInsert(\"newBoots\").run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../difference/index\">difference</a></li> <li><a href=\"../set_union/index\">setUnion</a></li> <li><a href=\"../set_intersection/index\">setIntersection</a></li> <li><a href=\"../set_difference/index\">setDifference</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/set_insert/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/set_insert/</a>\n  </p>\n</div>\n","api/java/set_union/index":"<h1 class=\"title\">ReQL command: setUnion</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">array.setUnion(array) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Perform a set intersection of two arrays, returning an array with all unique items from both.</p> <p><strong>Example:</strong> Retrieve Iron Man’s equipment list with the addition of some new boots and an arc reactor.</p> <pre data-language=\"java\">r.table(\"marvel\").get(\"IronMan\").g(\"equipment\")\n .setUnion(r.array(\"newBoots\", \"arc_reactor\")).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../difference/index\">difference</a></li> <li><a href=\"../set_insert/index\">setInsert</a></li> <li><a href=\"../set_intersection/index\">setIntersection</a></li> <li><a href=\"../set_difference/index\">setDifference</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/set_union/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/set_union/</a>\n  </p>\n</div>\n","api/java/set_intersection/index":"<h1 class=\"title\">ReQL command: setIntersection</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">array.setIntersection(array) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Intersect two arrays returning values that occur in both of them as a set (an array with distinct values).</p> <p><strong>Example:</strong> Check which pieces of equipment Iron Man has from a fixed list.</p> <pre data-language=\"java\">r.table(\"marvel\").get(\"IronMan\").g(\"equipment\")\n .setIntersection(r.array(\"newBoots\", \"arc_reactor\")).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../difference/index\">difference</a></li> <li><a href=\"../set_insert/index\">setInsert</a></li> <li><a href=\"../set_union/index\">setUnion</a></li> <li><a href=\"../set_difference/index\">setDifference</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/set_intersection/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/set_intersection/</a>\n  </p>\n</div>\n","api/java/set_difference/index":"<h1 class=\"title\">ReQL command: setDifference</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">array.setDifference(array) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Remove the elements of one array from another and return them as a set (an array with distinct values).</p> <p><strong>Example:</strong> Check which pieces of equipment Iron Man has, excluding a fixed list.</p> <pre data-language=\"java\">r.table(\"marvel\").get(\"IronMan\").g(\"equipment\")\n .setDifference(r.array(\"newBoots\", \"arc_reactor\")).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../difference/index\">difference</a></li> <li><a href=\"../set_insert/index\">setInsert</a></li> <li><a href=\"../set_union/index\">setUnion</a></li> <li><a href=\"index\">setDifference</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/set_difference/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/set_difference/</a>\n  </p>\n</div>\n","api/java/bracket/index":"<h1 class=\"title\">ReQL command: bracket</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">sequence.bracket(attr) → sequence\nsingleSelection.bracket(attr) → value\nobject.bracket(attr) → value\narray.bracket(index) → value\n</pre> <h2 id=\"description\">Description</h2> <p>Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.</p> <blockquote class=\"infobox \">\n<p>Under most circumstances, you’ll want to use <a href=\"../get_field/index\">getField</a> (or its shorthand <code class=\"highlighter-rouge\">g</code>) or <a href=\"../nth/index\">nth</a> rather than <code class=\"highlighter-rouge\">bracket</code>. The <code class=\"highlighter-rouge\">bracket</code> term may be useful in situations where you are unsure of the data type returned by the term you are calling <code class=\"highlighter-rouge\">bracket</code> on.</p> </blockquote> <p><strong>Example:</strong> What was Iron Man’s first appearance in a comic?</p> <pre data-language=\"java\">r.table(\"marvel\").get(\"IronMan\").bracket(\"firstAppearance\").run(conn);\n// more idiomatically:\nr.table(\"marvel\").get(\"IronMan\").g(\"firstAppearance\").run(conn);\n</pre>   <p>The <code class=\"highlighter-rouge\">bracket</code> command also accepts integer arguments as array offsets, like the <a href=\"../nth/index\">nth</a> command.</p> <p><strong>Example:</strong> Get the fourth element in a sequence. (The first element is position <code class=\"highlighter-rouge\">0</code>, so the fourth element is position <code class=\"highlighter-rouge\">3</code>.)</p> <pre data-language=\"java\">r.expr(r.array(10, 20, 30, 40, 50)).bracket(3).run(conn);\n// more idiomatically:\nr.expr(r.array(10, 20, 30, 40, 50)).nth(3).run(conn);\n\n40\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../row/index\">row</a></li> <li><a href=\"../nth/index\">nth</a></li> <li><a href=\"../get_field/index\">getField</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/bracket/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/bracket/</a>\n  </p>\n</div>\n","api/java/get_field/index":"<h1 class=\"title\">ReQL command: getField, g</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">sequence.g(attr) → sequence\nsingleSelection.g(attr) → value\nobject.g(attr) → value\n</pre> <h2 id=\"description\">Description</h2> <p>Get a single field from an object. If called on a sequence, gets that field from every object in the sequence, skipping objects that lack it.</p> <p>You may use either <code class=\"highlighter-rouge\">getField</code> or its shorthand, <code class=\"highlighter-rouge\">g</code>.</p> <p><strong>Example:</strong> What was Iron Man’s first appearance in a comic?</p> <pre data-language=\"java\">r.table(\"marvel\").get(\"IronMan\").g(\"firstAppearance\").run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../bracket/index\">bracket</a></li> <li><a href=\"../nth/index\">nth</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/get_field/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/get_field/</a>\n  </p>\n</div>\n","api/java/insert_at/index":"<h1 class=\"title\">ReQL command: insertAt</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">array.insertAt(offset, value) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Insert a value in to an array at a given index. Returns the modified array.</p> <p><strong>Example:</strong> Hulk decides to join the avengers.</p> <pre data-language=\"java\">r.expr(r.array(\"Iron Man\", \"Spider-Man\")).insertAt(1, \"Hulk\").run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../splice_at/index\">spliceAt</a></li> <li><a href=\"../delete_at/index\">deleteAt</a></li> <li><a href=\"../change_at/index\">changeAt</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/insert_at/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/insert_at/</a>\n  </p>\n</div>\n","api/java/splice_at/index":"<h1 class=\"title\">ReQL command: spliceAt</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">array.spliceAt(offset, array) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Insert several values into an array at the given index. Returns the modified array.</p> <p><strong>Example:</strong> Hulk and Thor decide to join the Avengers.</p> <pre data-language=\"java\">r.expr(r.array(\"Iron Man\", \"Spider-Man\"))\n .spliceAt(1, r.array(\"Hulk\", \"Thor\")).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../insert_at/index\">insertAt</a></li> <li><a href=\"../delete_at/index\">deleteAt</a></li> <li><a href=\"../change_at/index\">changeAt</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/splice_at/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/splice_at/</a>\n  </p>\n</div>\n","api/java/change_at/index":"<h1 class=\"title\">ReQL command: changeAt</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">array.changeAt(offset, value) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Change a value in an array at a given index. Returns the modified array.</p> <p><strong>Example:</strong> Bruce Banner hulks out.</p> <pre data-language=\"java\">r.expr(r.array(\"Iron Man\", \"Bruce\", \"Spider-Man\")).changeAt(1, \"Hulk\")\n .run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../insert_at/index\">insertAt</a></li> <li><a href=\"../splice_at/index\">spliceAt</a></li> <li><a href=\"../delete_at/index\">deleteAt</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/change_at/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/change_at/</a>\n  </p>\n</div>\n","api/java/delete_at/index":"<h1 class=\"title\">ReQL command: deleteAt</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">array.deleteAt(offset [,endOffset]) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Remove one or more elements from an array at a given index. Returns the modified array. (Note: <code class=\"highlighter-rouge\">deleteAt</code> operates on arrays, not documents; to delete documents, see the <a href=\"../delete/index\">delete</a> command.)</p> <p>If only <code class=\"highlighter-rouge\">offset</code> is specified, <code class=\"highlighter-rouge\">deleteAt</code> removes the element at that index. If both <code class=\"highlighter-rouge\">offset</code> and <code class=\"highlighter-rouge\">endOffset</code> are specified, <code class=\"highlighter-rouge\">deleteAt</code> removes the range of elements between <code class=\"highlighter-rouge\">offset</code> and <code class=\"highlighter-rouge\">endOffset</code>, inclusive of <code class=\"highlighter-rouge\">offset</code> but not inclusive of <code class=\"highlighter-rouge\">endOffset</code>.</p> <p>If <code class=\"highlighter-rouge\">endOffset</code> is specified, it must not be less than <code class=\"highlighter-rouge\">offset</code>. Both <code class=\"highlighter-rouge\">offset</code> and <code class=\"highlighter-rouge\">endOffset</code> must be within the array’s bounds (i.e., if the array has 10 elements, an <code class=\"highlighter-rouge\">offset</code> or <code class=\"highlighter-rouge\">endOffset</code> of 10 or higher is invalid).</p> <p>By using a negative <code class=\"highlighter-rouge\">offset</code> you can delete from the end of the array. <code class=\"highlighter-rouge\">-1</code> is the last element in the array, <code class=\"highlighter-rouge\">-2</code> is the second-to-last element, and so on. You may specify a negative <code class=\"highlighter-rouge\">endOffset</code>, although just as with a positive value, this will not be inclusive. The range <code class=\"highlighter-rouge\">(2,-1)</code> specifies the third element through the next-to-last element.</p> <p><strong>Example:</strong> Delete the second element of an array.</p> <pre data-language=\"java\">r.expr(r.array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")).deleteAt(1).run(conn);\n\n// Result:\n[\"a\", \"c\", \"d\", \"e\", \"f\"]\n</pre>  <p><strong>Example:</strong> Delete the second and third elements of an array.</p> <pre data-language=\"java\">r.expr(r.array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")).deleteAt(1, 3).run(conn);\n\n// Result:\n[\"a\", \"d\", \"e\", \"f\"]\n</pre>  <p><strong>Example:</strong> Delete the next-to-last element of an array.</p> <pre data-language=\"java\">r.expr(r.array(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")).deleteAt(-2).run(conn);\n\n// Result:\n[\"a\", \"b\", \"c\", \"d\", \"f\"]\n</pre>  <p><strong>Example:</strong> Delete a comment on a post.</p> <p>Given a post document such as:</p> <pre data-language=\"java\">{\n    \"id\": \"4cf47834-b6f9-438f-9dec-74087e84eb63\",\n    \"title\": \"Post title\",\n    \"author\": \"Bob\",\n    \"comments\": [\n        { \"author\": \"Agatha\", \"text\": \"Comment 1\" },\n        { \"author\": \"Fred\", \"text\": \"Comment 2\" }\n    ]\n}\n</pre>  <p>The second comment can be deleted by using <code class=\"highlighter-rouge\">update</code> and <code class=\"highlighter-rouge\">deleteAt</code> together.</p> <pre data-language=\"java\">r.table(\"posts\").get(\"4cf47834-b6f9-438f-9dec-74087e84eb63\").update(\n    row -&gt; r.hashMap(\"comments\", row.g(\"comments\").deleteAt(1)\n).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../insert_at/index\">insertAt</a></li> <li><a href=\"../splice_at/index\">spliceAt</a></li> <li><a href=\"../change_at/index\">changeAt</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/delete_at/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/delete_at/</a>\n  </p>\n</div>\n","api/java/keys/index":"<h1 class=\"title\">ReQL command: keys</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">singleSelection.keys() → array\nobject.keys() → array\n</pre> <h2 id=\"description\">Description</h2> <p>Return an array containing all of an object’s keys. Note that the keys will be sorted as described in <a href=\"../../../docs/data-types/index#sorting-order\">ReQL data types</a> (for strings, lexicographically).</p> <p><strong>Example:</strong> Get all the keys from a table row.</p> <pre data-language=\"java\">// row: { \"id\": 1, \"mail\": \"fred@example.com\", \"name\": \"fred\" }\n\nr.table(\"users\").get(1).keys().run(conn);\n\n// Result:\n[ \"id\", \"mail\", \"name\" ]\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../values/index\">values</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/keys/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/keys/</a>\n  </p>\n</div>\n","api/java/values/index":"<h1 class=\"title\">ReQL command: values</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">singleSelection.values() → array\nobject.values() → array\n</pre> <h2 id=\"description\">Description</h2> <p>Return an array containing all of an object’s values. <code class=\"highlighter-rouge\">values()</code> guarantees the values will come out in the same order as <a href=\"../keys/index\">keys</a>.</p> <p><strong>Example:</strong> Get all of the values from a table row.</p> <pre data-language=\"java\">// row: { \"id\": 1, \"mail\": \"fred@example.com\", \"name\": \"fred\" }\n\nr.table(\"users\").get(1).values().run(conn);\n\n// Result:\n[ 1, \"fred@example.com\", \"fred\" ]\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../keys/index\">keys</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/values/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/values/</a>\n  </p>\n</div>\n","api/java/object/index":"<h1 class=\"title\">ReQL command: object</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.object([key, value,]...) → object\n</pre> <h2 id=\"description\">Description</h2> <p>Creates an object from a list of key-value pairs, where the keys must be strings. <code class=\"highlighter-rouge\">r.object(A, B, C, D)</code> is equivalent to <code class=\"highlighter-rouge\">r.expr([[A, B], [C, D]]).coerce_to('OBJECT')</code>.</p> <p><strong>Example:</strong> Create a simple object.</p> <pre data-language=\"java\">r.object(\"id\", 5, \"data\", r.array(\"foo\", \"bar\")).run(conn);\n\n// Result:\n{ \"data\": [\"foo\", \"bar\"], \"id\": 5}\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../coerce_to/index\">coerceTo</a></li> <li><a href=\"../merge/index\">merge</a></li> <li><a href=\"../keys/index\">keys</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/object/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/object/</a>\n  </p>\n</div>\n","api/java/literal/index":"<h1 class=\"title\">ReQL command: literal</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.literal(object) → special\n</pre> <h2 id=\"description\">Description</h2> <p>Replace an object in a field instead of merging it with an existing object in a <code class=\"highlighter-rouge\">merge</code> or <code class=\"highlighter-rouge\">update</code> operation. Using <code class=\"highlighter-rouge\">literal</code> with no arguments in a <code class=\"highlighter-rouge\">merge</code> or <code class=\"highlighter-rouge\">update</code> operation will remove the corresponding field.</p> <p>Assume your users table has this structure:</p> <pre data-language=\"java\">[\n    {\n        \"id\": 1,\n        \"name\": \"Alice\",\n        \"data\": {\n            \"age\": 18,\n            \"city\": \"Dallas\"\n        }\n    }       \n    ...\n]\n</pre>  <p>Using <code class=\"highlighter-rouge\">update</code> to modify the <code class=\"highlighter-rouge\">data</code> field will normally merge the nested documents:</p> <pre data-language=\"java\">r.table(\"users\").get(1)\n .update(r.hashMap(\"data\", r.hashMap(\"age\", 19).with(\"job\", \"Engineer\")))\n .run(conn);\n\n// Result:\n{\n    \"id\": 1,\n    \"name\": \"Alice\",\n    \"data\": {\n        \"age\": 19,\n        \"city\": \"Dallas\",\n        \"job\": \"Engineer\"\n    }\n}       \n</pre>  <p>That will preserve <code class=\"highlighter-rouge\">city</code> and other existing fields. But to replace the entire <code class=\"highlighter-rouge\">data</code> document with a new object, use <code class=\"highlighter-rouge\">literal</code>.</p> <p><strong>Example:</strong> Replace one nested document with another rather than merging the fields.</p> <pre data-language=\"java\">r.table(\"users\").get(1)\n .update(r.hashMap(\"data\", r.literal(r.hashMap(\"age\", 19).with(\"job\", \"Engineer\"))))\n .run(conn);\n\n// Result:\n{\n    \"id\": 1,\n    \"name\": \"Alice\",\n    \"data\": {\n        \"age\": 19,\n        \"job\": \"Engineer\"\n    }\n}       \n</pre>  <p><strong>Example:</strong> Use <code class=\"highlighter-rouge\">literal</code> to remove a field from a document.</p> <pre data-language=\"java\">r.table(\"users\").get(1).merge(r.hashMap(\"data\", r.literal())).run(conn);\n\n// Result:\n{\n    \"id\": 1,\n    \"name\": \"Alice\"\n}\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../merge/index\">merge</a></li> <li><a href=\"../filter/index\">filter</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/literal/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/literal/</a>\n  </p>\n</div>\n","api/java/match/index":"<h1 class=\"title\">ReQL command: match</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">string.match(regexp) → null/object\n</pre> <p><img src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/match.png\" class=\"api_command_illustration\"></p> <h2 id=\"description\">Description</h2> <p>Match a string against a regular expression. If there is a match, returns an object with the fields:</p> <ul> <li>\n<code class=\"highlighter-rouge\">str</code>: The matched string</li> <li>\n<code class=\"highlighter-rouge\">start</code>: The matched string’s start</li> <li>\n<code class=\"highlighter-rouge\">end</code>: The matched string’s end</li> <li>\n<code class=\"highlighter-rouge\">groups</code>: The capture groups defined with parentheses</li> </ul> <p>If no match is found, returns <code class=\"highlighter-rouge\">null</code>.</p>  <p>Accepts <a href=\"https://github.com/google/re2/wiki/Syntax\">RE2 syntax</a>. You can enable case-insensitive matching by prefixing the regular expression with <code class=\"highlighter-rouge\">(?i)</code>. See the linked RE2 documentation for more flags.</p> <p>The <code class=\"highlighter-rouge\">match</code> command does not support backreferences.</p> <p><strong>Example:</strong> Get all users whose name starts with “A”. Because <code class=\"highlighter-rouge\">null</code> evaluates to <code class=\"highlighter-rouge\">false</code> in <a href=\"../filter/index\">filter</a>, you can use the result of <code class=\"highlighter-rouge\">match</code> for the predicate.</p> <pre data-language=\"java\">r.table(\"users\").filter(doc -&gt; doc.g(\"name\").match(\"^A\")).run(conn);\n</pre>  <p><strong>Example:</strong> Get all users whose name ends with “n.”</p> <pre data-language=\"java\">r.table(\"users\").filter(doc -&gt; doc.g(\"name\").match(\"n$\")).run(conn);\n</pre>  <p><strong>Example:</strong> Get all users whose name contains “li.”</p> <pre data-language=\"java\">r.table(\"users\").filter(doc -&gt; doc.g(\"name\").match(\"li\")).run(conn);\n</pre>  <p><strong>Example:</strong> Get all users whose name is “John,” performing a case-insensitive search.</p> <pre data-language=\"java\">r.table(\"users\").filter(doc -&gt; doc.g(\"name\").match(\"(?i)^john$\")).run(conn);\n</pre>  <p><strong>Example:</strong> Retrieve the domain of a basic email.</p> <pre data-language=\"java\">r.expr(\"name@domain.com\").match(\".*@(.*)\").run(conn);\n</pre>  <p>Result:</p> <pre data-language=\"java\">{\n    \"start\": 0,\n    \"end\": 20,\n    \"str\": \"name@domain.com\",\n    \"groups\": [\n        {\n            \"end\": 17,\n            \"start\": 7,\n            \"str\": \"domain.com\"\n        }\n    ]\n}\n</pre>  <p>You can then retrieve only the domain with <a href=\"../get_field/index\">g()</a> and <a href=\"../nth/index\">nth</a>.</p> <pre data-language=\"java\">r.expr(\"name@domain.com\").match(\".*@(.*)\").g(\"groups\").nth(0)\n .g(\"str\").run(conn);\n</pre>  <p>Returns <code class=\"highlighter-rouge\">domain.com</code>.</p> <p><strong>Example:</strong> A failure to parse out the domain name will return <code class=\"highlighter-rouge\">null</code>.</p> <pre data-language=\"java\">r.expr(\"name[at]domain.com\").match(\".*@(.*)\").run(conn);\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/match/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/match/</a>\n  </p>\n</div>\n","api/java/split/index":"<h1 class=\"title\">ReQL command: split</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">string.split([separator, [max_splits]]) → array\n</pre> <p><img src=\"https://rethinkdb.com/assets/images/docs/api_illustrations/split.png\" class=\"api_command_illustration\"></p> <h2 id=\"description\">Description</h2> <p>Split a string into substrings. With no arguments, will split on whitespace; when called with a string as the first argument, will split using that string as a separator. A maximum number of splits can also be specified. (To specify <code class=\"highlighter-rouge\">max_splits</code> while still splitting on whitespace, use <code class=\"highlighter-rouge\">null</code> as the separator argument.)</p> <p>Mimics the behavior of Python’s <code class=\"highlighter-rouge\">string.split</code> in edge cases, except for splitting on the empty string, which instead produces an array of single-character strings.</p> <p><strong>Example:</strong> Split on whitespace.</p> <pre data-language=\"java\">r.expr(\"foo  bar bax\").split().run(conn);\n</pre>  <p>Result:</p> <pre data-language=\"java\">[\"foo\", \"bar\", \"bax\"]\n</pre>  <p><strong>Example:</strong> Split the entries in a CSV file.</p> <pre data-language=\"java\">r.expr(\"12,37,,22,\").split(\",\").run(conn);\n</pre>  <p>Result:</p> <pre data-language=\"java\">[\"12\", \"37\", \"\", \"22\", \"\"]\n</pre>  <p><strong>Example:</strong> Split a string into characters.</p> <pre data-language=\"java\">r.expr(\"mlucy\").split(\"\").run(conn);\n</pre>  <p>Result:</p> <pre data-language=\"java\">[\"m\", \"l\", \"u\", \"c\", \"y\"]\n</pre>  <p><strong>Example:</strong> Split the entries in a CSV file, but only at most 3 times.</p> <pre data-language=\"java\">r.expr(\"12,37,,22,\").split(\",\", 3).run(conn);\n</pre>  <p>Result:</p> <pre data-language=\"java\">[\"12\", \"37\", \"\", \"22,\"]\n</pre>  <p><strong>Example:</strong> Split on whitespace at most once (i.e. get the first word).</p> <pre data-language=\"java\">r.expr(\"foo  bar bax\").split(null, 1).run(conn);\n</pre>  <p>Result:</p> <pre data-language=\"java\">[\"foo\", \"bar bax\"]\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../upcase/index\">upcase</a></li> <li><a href=\"../downcase/index\">downcase</a></li> <li><a href=\"../match/index\">match</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/split/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/split/</a>\n  </p>\n</div>\n","api/java/upcase/index":"<h1 class=\"title\">ReQL command: upcase</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">string.upcase() → string\n</pre> <h2 id=\"description\">Description</h2> <p>Uppercases a string.</p> <p><strong>Example:</strong></p> <pre data-language=\"java\">r.expr(\"Sentence about LaTeX.\").upcase().run(conn);\n</pre>  <p>Result:</p> <pre data-language=\"java\">\"SENTENCE ABOUT LATEX.\"\n</pre>  <p><strong>Note:</strong> <code class=\"highlighter-rouge\">upcase</code> and <code class=\"highlighter-rouge\">downcase</code> only affect ASCII characters.</p>  <h2>Related commands</h2> <ul> <li><a href=\"../downcase/index\">downcase</a></li> <li><a href=\"../match/index\">match</a></li> <li><a href=\"../split/index\">split</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/upcase/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/upcase/</a>\n  </p>\n</div>\n","api/java/downcase/index":"<h1 class=\"title\">ReQL command: downcase</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">string.downcase() → string\n</pre> <h2 id=\"description\">Description</h2> <p>Lowercase a string.</p> <p><strong>Example:</strong></p> <pre data-language=\"java\">r.expr(\"Sentence about LaTeX.\").downcase().run(conn);\n</pre>  <p>Result:</p> <pre data-language=\"java\">\"sentence about latex.\"\n</pre>  <p><strong>Note:</strong> <code class=\"highlighter-rouge\">upcase</code> and <code class=\"highlighter-rouge\">downcase</code> only affect ASCII characters.</p>  <h2>Related commands</h2> <ul> <li><a href=\"../upcase/index\">upcase</a></li> <li><a href=\"../match/index\">match</a></li> <li><a href=\"../split/index\">split</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/downcase/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/downcase/</a>\n  </p>\n</div>\n","api/java/sub/index":"<h1 class=\"title\">ReQL command: sub</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">number.sub(number[, number, ...]) → number\ntime.sub(number[, number, ...]) → time\ntime.sub(time) → number\n</pre> <h2 id=\"description\">Description</h2> <p>Subtract two numbers.</p> <p><strong>Example:</strong> It’s as easy as 2 - 2 = 0.</p> <pre data-language=\"java\">r.expr(2).sub(2).run(conn);\n</pre>  <p><strong>Example:</strong> Create a date one year ago today.</p> <pre data-language=\"java\">r.now().sub(365*24*60*60);\n</pre>  <p><strong>Example:</strong> Retrieve how many seconds elapsed between today and <code class=\"highlighter-rouge\">date</code>.</p> <pre data-language=\"java\">r.now().sub(date);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../add/index\">add</a></li> <li><a href=\"../mul/index\">mul</a></li> <li><a href=\"../div/index\">div</a></li> <li><a href=\"../mod/index\">mod</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/sub/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/sub/</a>\n  </p>\n</div>\n","api/java/mul/index":"<h1 class=\"title\">ReQL command: mul</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">number.mul(number[, number, ...]) → number\narray.mul(number[, number, ...]) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Multiply two numbers, or make a periodic array.</p> <p><strong>Example:</strong> It’s as easy as 2 * 2 = 4.</p> <pre data-language=\"java\">r.expr(2).mul(2).run(conn);\n</pre>  <p><strong>Example:</strong> Arrays can be multiplied by numbers as well.</p> <pre data-language=\"java\">r.expr([\"This\", \"is\", \"the\", \"song\", \"that\", \"never\", \"ends.\"]).mul(100).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../add/index\">add</a></li> <li><a href=\"../sub/index\">sub</a></li> <li><a href=\"../div/index\">div</a></li> <li><a href=\"../mod/index\">mod</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/mul/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/mul/</a>\n  </p>\n</div>\n","api/java/div/index":"<h1 class=\"title\">ReQL command: div</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">number.div(number[, number ...]) → number\n</pre> <h2 id=\"description\">Description</h2> <p>Divide two numbers.</p> <p><strong>Example:</strong> It’s as easy as 2 / 2 = 1.</p> <pre data-language=\"java\">r.expr(2).div(2).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../add/index\">add</a></li> <li><a href=\"../sub/index\">sub</a></li> <li><a href=\"../mul/index\">mul</a></li> <li><a href=\"../mod/index\">mod</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/div/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/div/</a>\n  </p>\n</div>\n","api/java/mod/index":"<h1 class=\"title\">ReQL command: mod</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">number.mod(number) → number\n</pre> <p>Find the remainder when dividing two numbers.</p> <p><strong>Example:</strong> It’s as easy as 2 % 2 = 0.</p> <pre data-language=\"java\">r.expr(2).mod(2).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../add/index\">add</a></li> <li><a href=\"../sub/index\">sub</a></li> <li><a href=\"../mul/index\">mul</a></li> <li><a href=\"../div/index\">div</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/mod/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/mod/</a>\n  </p>\n</div>\n","api/java/and/index":"<h1 class=\"title\">ReQL command: and</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">bool.and([bool, bool, ...]) → bool\nr.and([bool, bool, ...]) → bool\n</pre> <h2 id=\"description\">Description</h2> <p>Compute the logical “and” of one or more values.</p> <p>The <code class=\"highlighter-rouge\">and</code> command can be used as an infix operator after its first argument (<code class=\"highlighter-rouge\">r.expr(true).and(false)</code>) or given all of its arguments as parameters (<code class=\"highlighter-rouge\">r.and(true,false)</code>).</p> <p>Calling <code class=\"highlighter-rouge\">and</code> with zero arguments will return <code class=\"highlighter-rouge\">true</code>.</p> <p><strong>Example:</strong> Return whether both <code class=\"highlighter-rouge\">a</code> and <code class=\"highlighter-rouge\">b</code> evaluate to true.</p> <pre data-language=\"java\">boolean a = true;\nboolean b = false;\nr.expr(a).and(b).run(conn);\n\n// Result:\nfalse\n</pre>  <p><strong>Example:</strong> Return whether all of <code class=\"highlighter-rouge\">x</code>, <code class=\"highlighter-rouge\">y</code> and <code class=\"highlighter-rouge\">z</code> evaluate to true.</p> <pre data-language=\"java\">boolean x = true;\nboolean y = true;\nboolean z = true;\n\nr.and(x, y, z).run(conn);\n\n// Result:\ntrue\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../or/index\">or</a></li> <li><a href=\"../eq/index\">eq</a></li> <li><a href=\"../ne/index\">ne</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/and/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/and/</a>\n  </p>\n</div>\n","api/java/add/index":"<h1 class=\"title\">ReQL command: add</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">value.add(value[, value, ...]) → value\ntime.add(number[, number, ...]) → time\n</pre> <h2 id=\"description\">Description</h2> <p>Sum two or more numbers, or concatenate two or more strings or arrays.</p> <p>The <code class=\"highlighter-rouge\">add</code> command can be called in either prefix or infix form; both forms are equivalent. Note that ReQL will not perform type coercion. You cannot, for example, <code class=\"highlighter-rouge\">add</code> a string and a number together.</p> <p><strong>Example:</strong> It’s as easy as 2 + 2 = 4.</p> <pre data-language=\"java\">r.expr(2).add(2).run(conn);\n\n// Result:\n4\n</pre>  <p><strong>Example:</strong> Concatenate strings.</p> <pre data-language=\"java\">r.expr(\"foo\").add(\"bar\", \"baz\").run(conn);\n\n// Result:\n\"foobarbaz\"\n</pre>  <p><strong>Example:</strong> Concatenate arrays.</p> <pre data-language=\"java\">r.expr([\"foo\", \"bar\"]).add([\"buzz\"]).run(conn);\n\n// Result:\n[ \"foo\", \"bar\", \"buzz\" ]\n</pre>  <p><strong>Example:</strong> Create a date one year from now.</p> <pre data-language=\"java\">r.now().add(365*24*60*60).run(conn);\n</pre>  <p><strong>Example:</strong> Use <a href=\"../args/index\">args</a> with <code class=\"highlighter-rouge\">add</code> to sum multiple values.</p> <pre data-language=\"java\">int[] vals = { 10, 20, 30 };\nr.add(r.args(vals)).run(conn);\n\n// Result:\n60\n</pre>  <p><strong>Example:</strong> Concatenate an array of strings with <code class=\"highlighter-rouge\">args</code>.</p> <pre data-language=\"java\">String[] vals = { \"foo\", \"bar\", \"buzz\" };\nr.add(r.args(vals)).run(conn);\n\n// Result:\n\"foobarbuzz\"\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../sub/index\">sub</a></li> <li><a href=\"../mul/index\">mul</a></li> <li><a href=\"../div/index\">div</a></li> <li><a href=\"../mod/index\">mod</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/add/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/add/</a>\n  </p>\n</div>\n","api/java/eq/index":"<h1 class=\"title\">ReQL command: eq</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">value.eq(value[, value, ...]) → bool\n</pre> <h2 id=\"description\">Description</h2> <p>Test if two or more values are equal.</p> <p><strong>Example:</strong> See if a user’s <code class=\"highlighter-rouge\">role</code> field is set to <code class=\"highlighter-rouge\">administrator</code>.</p> <pre data-language=\"java\">r.table(\"users\").get(1).g(\"role\").eq(\"administrator\").run(conn);\n</pre>  <p><strong>Example:</strong> See if three variables contain equal values.</p> <pre data-language=\"java\">r.eq(a, b, c).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../and/index\">and</a></li> <li><a href=\"../or/index\">or</a></li> <li><a href=\"../ne/index\">ne</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/eq/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/eq/</a>\n  </p>\n</div>\n","api/java/ne/index":"<h1 class=\"title\">ReQL command: ne</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">value.ne(value[, value, ...]) → bool\n</pre> <h2 id=\"description\">Description</h2> <p>Test if two or more values are not equal.</p> <p><strong>Example:</strong> See if a user’s <code class=\"highlighter-rouge\">role</code> field is not set to <code class=\"highlighter-rouge\">administrator</code>.</p> <pre data-language=\"java\">r.table(\"users\").get(1).g(\"role\").ne(\"administrator\").run(conn);\n</pre>  <p><strong>Example:</strong> See if three variables do not contain equal values.</p> <pre data-language=\"java\">r.ne(a, b, c).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../and/index\">and</a></li> <li><a href=\"../or/index\">or</a></li> <li><a href=\"../eq/index\">eq</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/ne/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/ne/</a>\n  </p>\n</div>\n","api/java/gt/index":"<h1 class=\"title\">ReQL command: gt</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">value.gt(value[, value, ...]) → bool\n</pre> <h2 id=\"description\">Description</h2> <p>Compare values, testing if the left-hand value is greater than the right-hand.</p> <p><strong>Example:</strong> Test if a player has scored more than 10 points.</p> <pre data-language=\"java\">r.table(\"players\").get(1).g(\"score\").gt(10).run(conn);\n</pre>  <p><strong>Example:</strong> Test if variables are ordered from lowest to highest, with no values being equal to one another.</p> <pre data-language=\"java\">int a = 10;\nint b = 20;\nint c = 15;\nr.gt(a, b, c).run(conn);\n</pre>  <p>This is the equivalent of the following:</p> <pre data-language=\"java\">r.gt(a, b).and(r.gt(b, c)).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../eq/index\">eq</a></li> <li><a href=\"../ne/index\">ne</a></li> <li><a href=\"../ge/index\">ge</a></li> <li><a href=\"../lt/index\">lt</a></li> <li><a href=\"../le/index\">le</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/gt/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/gt/</a>\n  </p>\n</div>\n","api/java/ge/index":"<h1 class=\"title\">ReQL command: ge</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">value.ge(value[, value, ...]) → bool\n</pre> <h2 id=\"description\">Description</h2> <p>Compare values, testing if the left-hand value is greater than or equal to the right-hand.</p> <p><strong>Example:</strong> Test if a player has scored 10 points or more.</p> <pre data-language=\"java\">r.table(\"players\").get(1).g(\"score\").ge(10).run(conn);\n</pre>  <p><strong>Example:</strong> Test if variables are ordered from lowest to highest.</p> <pre data-language=\"java\">int a = 10;\nint b = 20;\nint c = 15;\nr.ge(a, b, c).run(conn);\n</pre>  <p>This is the equivalent of the following:</p> <pre data-language=\"java\">r.ge(a, b).and(r.ge(b, c)).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../eq/index\">eq</a></li> <li><a href=\"../ne/index\">ne</a></li> <li><a href=\"../gt/index\">gt</a></li> <li><a href=\"../lt/index\">lt</a></li> <li><a href=\"../le/index\">le</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/ge/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/ge/</a>\n  </p>\n</div>\n","api/java/or/index":"<h1 class=\"title\">ReQL command: or</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">bool.or([bool, bool, ...]) → bool\nr.or([bool, bool, ...]) → bool\n</pre> <h2 id=\"description\">Description</h2> <p>Compute the logical “or” of one or more values.</p> <p>The <code class=\"highlighter-rouge\">or</code> command can be used as an infix operator after its first argument (<code class=\"highlighter-rouge\">r.expr(true).or(false)</code>) or given all of its arguments as parameters (<code class=\"highlighter-rouge\">r.or(true,false)</code>).</p> <p>Calling <code class=\"highlighter-rouge\">or</code> with zero arguments will return <code class=\"highlighter-rouge\">false</code>.</p> <p><strong>Example:</strong> Return whether either <code class=\"highlighter-rouge\">a</code> or <code class=\"highlighter-rouge\">b</code> evaluate to true.</p> <pre data-language=\"java\">boolean a = true;\nboolean b = false;\nr.expr(a).or(b).run(conn);\n\n// Result:\ntrue\n</pre>  <p><strong>Example:</strong> Return whether any of <code class=\"highlighter-rouge\">x</code>, <code class=\"highlighter-rouge\">y</code> or <code class=\"highlighter-rouge\">z</code> evaluate to true.</p> <pre data-language=\"java\">boolean x = false;\nboolean y = false;\nboolean z = false;\nr.or(x, y, z).run(conn);\n\n// Result:\nfalse\n</pre>  <p><strong>Note:</strong> When using <code class=\"highlighter-rouge\">or</code> inside a <code class=\"highlighter-rouge\">filter</code> predicate to test the values of fields that may not exist on the documents being tested, you should use the <code class=\"highlighter-rouge\">default</code> command with those fields so they explicitly return <code class=\"highlighter-rouge\">false</code>.</p> <pre data-language=\"java\">r.table(\"posts\").filter(row -&gt;\n    row.g(\"category\").default(\"foo\").eq(\"article\").\n    or(row.g(\"genre\").default(\"foo\").eq(\"mystery\"))\n).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../and/index\">and</a></li> <li><a href=\"../eq/index\">eq</a></li> <li><a href=\"../ne/index\">ne</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/or/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/or/</a>\n  </p>\n</div>\n","api/java/lt/index":"<h1 class=\"title\">ReQL command: lt</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">value.lt(value[, value, ...]) → bool\n</pre> <h2 id=\"description\">Description</h2> <p>Compare values, testing if the left-hand value is less than the right-hand.</p> <p><strong>Example:</strong> Test if a player has scored less than 10 points.</p> <pre data-language=\"java\">r.table(\"players\").get(1).g(\"score\").lt(10).run(conn);\n</pre>  <p><strong>Example:</strong> Test if variables are ordered from highest to lowest, with no values being equal to one another.</p> <pre data-language=\"java\">int a = 20;\nint b = 10;\nint c = 15;\nr.lt(a, b, c).run(conn);\n</pre>  <p>This is the equivalent of the following:</p> <pre data-language=\"java\">r.lt(a, b).and(r.lt(b, c)).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../eq/index\">eq</a></li> <li><a href=\"../ne/index\">ne</a></li> <li><a href=\"../gt/index\">gt</a></li> <li><a href=\"../ge/index\">ge</a></li> <li><a href=\"../le/index\">le</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/lt/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/lt/</a>\n  </p>\n</div>\n","api/java/le/index":"<h1 class=\"title\">ReQL command: le</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">value.le(value[, value, ...]) → bool\n</pre> <h2 id=\"description\">Description</h2> <p>Compare values, testing if the left-hand value is less than or equal to the right-hand.</p> <p><strong>Example:</strong> Test if a player has scored 10 points or less.</p> <pre data-language=\"java\">r.table(\"players\").get(1).g(\"score\").le(10).run(conn);\n</pre>  <p><strong>Example:</strong> Test if variables are ordered from highest to lowest.</p> <pre data-language=\"java\">int a = 20;\nint b = 10;\nint c = 15;\nr.le(a, b, c).run(conn);\n</pre>  <p>This is the equivalent of the following:</p> <pre data-language=\"java\">r.le(a, b).and(r.le(b, c)).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../eq/index\">eq</a></li> <li><a href=\"../ne/index\">ne</a></li> <li><a href=\"../gt/index\">gt</a></li> <li><a href=\"../ge/index\">ge</a></li> <li><a href=\"../lt/index\">lt</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/le/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/le/</a>\n  </p>\n</div>\n","api/java/not/index":"<h1 class=\"title\">ReQL command: not</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">bool.not() → bool\nr.not(bool) → bool\n</pre> <h2 id=\"description\">Description</h2> <p>Compute the logical inverse (not) of an expression.</p> <p><code class=\"highlighter-rouge\">not</code> can be called either via method chaining, immediately after an expression that evaluates as a boolean value, or by passing the expression as a parameter to <code class=\"highlighter-rouge\">not</code>. All values that are not <code class=\"highlighter-rouge\">false</code> or <code class=\"highlighter-rouge\">null</code> will be converted to <code class=\"highlighter-rouge\">true</code>.</p> <p><strong>Example:</strong> Not true is false.</p> <pre data-language=\"java\">r(true).not().run(conn);\nr.not(true).run(conn);\n</pre>  <p>These evaluate to <code class=\"highlighter-rouge\">false</code>.</p> <p><strong>Example:</strong> Return all the users that do not have a “flag” field.</p> <pre data-language=\"java\">r.table(\"users\").filter(user -&gt; user.hasFields(\"flag\").not()).run(conn);\n</pre>  <p><strong>Example:</strong> As above, but prefix-style.</p> <pre data-language=\"java\">r.table(\"users\").filter(user -&gt; r.not(user.hasFields(\"flag\")).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../eq/index\">eq</a></li> <li><a href=\"../ne/index\">ne</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/not/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/not/</a>\n  </p>\n</div>\n","api/java/random/index":"<h1 class=\"title\">ReQL command: random</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.random() → number\nr.random(number[, number]) → number\nr.random(integer[, integer]) → integer\n</pre> <h2 id=\"description\">Description</h2> <p>Generate a random number between given (or implied) bounds. <code class=\"highlighter-rouge\">random</code> takes zero, one or two arguments, and can also take an <a href=\"../optarg/index\">optArg</a> of <code class=\"highlighter-rouge\">float</code>.</p> <ul> <li>With <strong>zero</strong> arguments, the result will be a floating-point number in the range <code class=\"highlighter-rouge\">[0,1)</code> (from 0 up to but not including 1).</li> <li>With <strong>one</strong> argument <em>x,</em> the result will be in the range <code class=\"highlighter-rouge\">[0,x)</code>, and will be integer unless <code class=\"highlighter-rouge\">.optArg(\"float\", true)</code> is given as an option. Specifying a floating point number without the <code class=\"highlighter-rouge\">float</code> option will raise an error.</li> <li>With <strong>two</strong> arguments <em>x</em> and <em>y,</em> the result will be in the range <code class=\"highlighter-rouge\">[x,y)</code>, and will be integer unless <code class=\"highlighter-rouge\">.optArg(\"float\", true)</code> is given as an option. If <em>x</em> and <em>y</em> are equal an error will occur, unless the floating-point option has been specified, in which case <em>x</em> will be returned. Specifying a floating point number without the <code class=\"highlighter-rouge\">float</code> option will raise an error.</li> </ul> <p>Note: The last argument given will always be the ‘open’ side of the range, but when generating a floating-point number, the ‘open’ side may be less than the ‘closed’ side.</p> <p><strong>Example:</strong> Generate a random number in the range <code class=\"highlighter-rouge\">[0,1)</code></p> <pre data-language=\"java\">r.random().run(conn);\n</pre>  <p><strong>Example:</strong> Generate a random integer in the range <code class=\"highlighter-rouge\">[0,100)</code></p> <pre data-language=\"java\">r.random(100).run(conn);\nr.random(0, 100).run(conn);\n</pre>  <p><strong>Example:</strong> Generate a random number in the range <code class=\"highlighter-rouge\">(-2.24,1.59]</code></p> <pre data-language=\"java\">r.random(1.59, -2.24).optArg(\"float\", true).run(conn)\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../sample/index\">sample</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/random/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/random/</a>\n  </p>\n</div>\n","api/java/round/index":"<h1 class=\"title\">ReQL command: round</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.round(number) → number\nnumber.round() → number\n</pre> <h2 id=\"description\">Description</h2> <p>Rounds the given value to the nearest whole integer.</p> <p>For example, values of 1.0 up to but not including 1.5 will return 1.0, similar to <a href=\"../floor/index\">floor</a>; values of 1.5 up to 2.0 will return 2.0, similar to <a href=\"../ceil/index\">ceil</a>.</p> <p><strong>Example:</strong> Round 12.345 to the nearest integer.</p> <pre data-language=\"java\">r.round(12.345).run(conn);\n\n// Result:\n12.0\n</pre>  <p>The <code class=\"highlighter-rouge\">round</code> command can also be chained after an expression.</p> <p><strong>Example:</strong> Round -12.345 to the nearest integer.</p> <pre data-language=\"java\">r.expr(-12.345).round().run(conn);\n\n// Result:\n-12.0\n</pre>  <p><strong>Example:</strong> Return Iron Man’s weight, rounded to the nearest integer.</p> <pre data-language=\"java\">r.table(\"superheroes\").get(\"ironman\").g(\"weight\").round().run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../ceil/index\">ceil</a></li> <li><a href=\"../floor/index\">floor</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/round/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/round/</a>\n  </p>\n</div>\n","api/java/ceil/index":"<h1 class=\"title\">ReQL command: ceil</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.ceil(number) → number\nnumber.ceil() → number\n</pre> <h2 id=\"description\">Description</h2> <p>Rounds the given value up, returning the smallest integer greater than or equal to the given value (the value’s ceiling).</p> <p><strong>Example:</strong> Return the ceiling of 12.345.</p> <pre data-language=\"java\">r.ceil(12.345).run(conn);\n\n// Result:\n13.0\n</pre>  <p>The <code class=\"highlighter-rouge\">ceil</code> command can also be chained after an expression.</p> <p><strong>Example:</strong> Return the ceiling of -12.345.</p> <pre data-language=\"java\">r.expr(-12.345).ceil().run(conn);\n\n// Result:\n-12.0\n</pre>  <p><strong>Example:</strong> Return Iron Man’s weight, rounded up with <code class=\"highlighter-rouge\">ceil</code>.</p> <pre data-language=\"java\">r.table(\"superheroes\").get(\"ironman\").g(\"weight\").ceil().run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../floor/index\">floor</a></li> <li><a href=\"../round/index\">round</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/ceil/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/ceil/</a>\n  </p>\n</div>\n","api/java/floor/index":"<h1 class=\"title\">ReQL command: floor</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.floor(number) → number\nnumber.floor() → number\n</pre> <h2 id=\"description\">Description</h2> <p>Rounds the given value down, returning the largest integer value less than or equal to the given value (the value’s floor).</p> <p><strong>Example:</strong> Return the floor of 12.345.</p> <pre data-language=\"java\">r.floor(12.345).run(conn);\n\n// Result:\n12.0\n</pre>  <p>The <code class=\"highlighter-rouge\">floor</code> command can also be chained after an expression.</p> <p><strong>Example:</strong> Return the floor of -12.345.</p> <pre data-language=\"java\">r.expr(-12.345).floor().run(conn);\n\n// Result:\n-13.0\n</pre>  <p><strong>Example:</strong> Return Iron Man’s weight, rounded down with <code class=\"highlighter-rouge\">floor</code>.</p> <pre data-language=\"java\">r.table(\"superheroes\").get(\"ironman\").g(\"weight\").floor().run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../ceil/index\">ceil</a></li> <li><a href=\"../round/index\">round</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/floor/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/floor/</a>\n  </p>\n</div>\n","api/java/now/index":"<h1 class=\"title\">ReQL command: now</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.now() → time\n</pre> <h2 id=\"description\">Description</h2> <p>Return a time object representing the current time in UTC. The command now() is computed once when the server receives the query, so multiple instances of r.now() will always return the same time inside a query.</p> <p><strong>Example:</strong> Add a new user with the time at which he subscribed.</p> <pre data-language=\"java\">r.table(\"users\").insert(\n    r.hashMap(\"name\", \"John\")\n     .with(\"subscription_date\", r.now())\n).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../time/index\">time</a></li> <li><a href=\"../epoch_time/index\">epochTime</a></li> <li><a href=\"../iso8601/index\">ISO8601</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/now/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/now/</a>\n  </p>\n</div>\n","api/java/time/index":"<h1 class=\"title\">ReQL command: time</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.time(year, month, day[, hour, minute, second], timezone) → time\n</pre> <h2 id=\"description\">Description</h2> <p>Create a time object for a specific time.</p> <p>A few restrictions exist on the arguments:</p> <ul> <li>\n<code class=\"highlighter-rouge\">year</code> is an integer between 1400 and 9,999.</li> <li>\n<code class=\"highlighter-rouge\">month</code> is an integer between 1 and 12.</li> <li>\n<code class=\"highlighter-rouge\">day</code> is an integer between 1 and 31.</li> <li>\n<code class=\"highlighter-rouge\">hour</code> is an integer.</li> <li>\n<code class=\"highlighter-rouge\">minutes</code> is an integer.</li> <li>\n<code class=\"highlighter-rouge\">seconds</code> is a double. Its value will be rounded to three decimal places (millisecond-precision).</li> <li>\n<code class=\"highlighter-rouge\">timezone</code> can be <code class=\"highlighter-rouge\">'Z'</code> (for UTC) or a string with the format <code class=\"highlighter-rouge\">±[hh]:[mm]</code>.</li> </ul> <p><strong>Example:</strong> Update the birthdate of the user “John” to November 3rd, 1986 UTC.</p> <pre data-language=\"java\">r.table(\"user\").get(\"John\").update(\n    r.hashMap(\"birthdate\", r.time(1986, 11, 3, 'Z'))\n).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../now/index\">now</a></li> <li><a href=\"../epoch_time/index\">epochTime</a></li> <li><a href=\"../iso8601/index\">iso8601</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/time/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/time/</a>\n  </p>\n</div>\n","api/java/epoch_time/index":"<h1 class=\"title\">ReQL command: epochTime</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.epochTime(number) → time\n</pre> <h2 id=\"description\">Description</h2> <p>Create a time object based on seconds since epoch. The first argument is a double and will be rounded to three decimal places (millisecond-precision).</p> <p><strong>Example:</strong> Update the birthdate of the user “John” to November 3rd, 1986.</p> <pre data-language=\"java\">r.table(\"user\").get(\"John\").update(\n    r.hashMap(birthdate, r.epochTime(531360000))\n).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../now/index\">now</a></li> <li><a href=\"../time/index\">time</a></li> <li><a href=\"../iso8601/index\">ISO8601</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/epoch_time/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/epoch_time/</a>\n  </p>\n</div>\n","api/java/iso8601/index":"<h1 class=\"title\">ReQL command: iso8601</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.iso8601(string) → time\n</pre> <h2 id=\"description\">Description</h2> <p>Create a time object based on an ISO 8601 date-time string (e.g. ‘2013-01-01T01:01:01+00:00’). RethinkDB supports all valid ISO 8601 formats except for week dates. Read more about the ISO 8601 format at <a href=\"http://en.wikipedia.org/wiki/ISO_8601\">Wikipedia</a>.</p> <p>If you pass an ISO 8601 string without a time zone, you must specify the time zone with the <code class=\"highlighter-rouge\">default_timezone</code> <a href=\"../optarg/index\">optArg</a>.</p> <p><strong>Example:</strong> Update the time of John’s birth.</p> <pre data-language=\"java\">r.table(\"user\").get(\"John\").update(\n    r.hashMap(\"birth\", r.iso8601(\"1986-11-03T08:30:00-07:00\"))\n).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../now/index\">now</a></li> <li><a href=\"../time/index\">time</a></li> <li><a href=\"../epoch_time/index\">epochTime</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/iso8601/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/iso8601/</a>\n  </p>\n</div>\n","api/java/in_timezone/index":"<h1 class=\"title\">ReQL command: inTimezone</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">time.inTimezone(timezone) → time\n</pre> <h2 id=\"description\">Description</h2> <p>Return a new time object with a different timezone. While the time stays the same, the results returned by methods such as hours() will change since they take the timezone into account. The timezone argument has to be of the ISO 8601 format.</p> <p><strong>Example:</strong> Hour of the day in San Francisco (UTC/GMT -8, without daylight saving time).</p> <pre data-language=\"java\">r.now().inTimezone(\"-08:00\").hours().run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../timezone/index\">timezone</a></li> <li><a href=\"../now/index\">now</a></li> <li><a href=\"../time/index\">time</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/in_timezone/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/in_timezone/</a>\n  </p>\n</div>\n","api/java/timezone/index":"<h1 class=\"title\">ReQL command: timezone</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">time.timezone() → string\n</pre> <h2 id=\"description\">Description</h2> <p>Return the timezone of the time object.</p> <p><strong>Example:</strong> Return all the users in the “-07:00” timezone.</p> <pre data-language=\"java\">r.table(\"users\").filter(\n    user -&gt; user.g(\"subscriptionDate\").timezone().eq(\"-07:00\")\n).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../in_timezone/index\">inTimezone</a></li> <li><a href=\"../now/index\">now</a></li> <li><a href=\"../time/index\">time</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/timezone/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/timezone/</a>\n  </p>\n</div>\n","api/java/during/index":"<h1 class=\"title\">ReQL command: during</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">time.during(startTime, endTime) → bool\n</pre> <h2 id=\"description\">Description</h2> <p>Return whether a time is between two other times.</p> <p>By default, this is inclusive of the start time and exclusive of the end time. Use the <a href=\"../optarg/index\">optArgs</a> <code class=\"highlighter-rouge\">left_bound</code> and <code class=\"highlighter-rouge\">right_bound</code> to explicitly include (<code class=\"highlighter-rouge\">closed</code>) or exclude (<code class=\"highlighter-rouge\">open</code>) that endpoint of the range.</p> <p><strong>Example:</strong> Retrieve all the posts that were posted between December 1st, 2013 (inclusive) and December 10th, 2013 (exclusive).</p> <pre data-language=\"java\">r.table(\"posts\").filter(\n    row -&gt; row.g(\"date\").during(r.time(2013, 12, 1, \"Z\"), r.time(2013, 12, 10, \"Z\"))\n).run(conn);\n</pre>  <p><strong>Example:</strong> Retrieve all the posts that were posted between December 1st, 2013 (exclusive) and December 10th, 2013 (inclusive).</p> <pre data-language=\"java\">r.table(\"posts\").filter(\n    row -&gt; row.g(\"date\")\n        .during(r.time(2013, 12, 1, \"Z\"), r.time(2013, 12, 10, \"Z\"))\n        .optArg(\"left_bound\", \"open\").optArg(\"right_bound\", \"closed\")\n).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../now/index\">now</a></li> <li><a href=\"../time/index\">time</a></li> <li><a href=\"../in_timezone/index\">inTimezone</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/during/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/during/</a>\n  </p>\n</div>\n","api/java/date/index":"<h1 class=\"title\">ReQL command: date</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">time.date() → time\n</pre> <h2 id=\"description\">Description</h2> <p>Return a new <a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/OffsetDateTime.html\">OffsetDateTime</a> object only based on the day, month and year (ie. the same day at 00:00).</p> <p><strong>Example:</strong> Retrieve all the users whose birthday is today.</p> <pre data-language=\"java\">r.table(\"users\").filter(\n    user -&gt; user.g(\"birthdate\").date().eq(r.now().date())\n).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../now/index\">now</a></li> <li><a href=\"../time/index\">time</a></li> <li><a href=\"../in_timezone/index\">inTimezone</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/date/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/date/</a>\n  </p>\n</div>\n","api/java/time_of_day/index":"<h1 class=\"title\">ReQL command: timeOfDay</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">time.timeOfDay() → number\n</pre> <h2 id=\"description\">Description</h2> <p>Return the number of seconds elapsed since the beginning of the day stored in the time object.</p> <p><strong>Example:</strong> Retrieve posts that were submitted before noon.</p> <pre data-language=\"java\">r.table(\"posts\").filter(\n    post -&gt; post.g(\"date\").timeOfDay().le(12*60*60)\n).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../now/index\">now</a></li> <li><a href=\"../time/index\">time</a></li> <li><a href=\"../in_timezone/index\">inTimezone</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/time_of_day/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/time_of_day/</a>\n  </p>\n</div>\n","api/java/year/index":"<h1 class=\"title\">ReQL command: year</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">time.year() → number\n</pre> <h2 id=\"description\">Description</h2> <p>Return the year of a time object.</p> <p><strong>Example:</strong> Retrieve all the users born in 1986.</p> <pre data-language=\"java\">r.table(\"users\").filter(\n    user -&gt; user.g(\"birthdate\").year().eq(1986)\n}).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../now/index\">now</a></li> <li><a href=\"../time/index\">time</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/year/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/year/</a>\n  </p>\n</div>\n","api/java/month/index":"<h1 class=\"title\">ReQL command: month</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">time.month() → number\n</pre> <h2 id=\"description\">Description</h2> <p>Return the month of a time object as a number between 1 and 12. For your convenience, the terms <code class=\"highlighter-rouge\">r.january</code>, <code class=\"highlighter-rouge\">r.february</code>, etc. are defined and map to the appropriate integer.</p> <p><strong>Example:</strong> Retrieve all the users who were born in November.</p> <pre data-language=\"java\">r.table(\"users\").filter(row -&gt; row.g(\"birthdate\").month().eq(11)).run(conn);\n</pre>  <p><strong>Example:</strong> Retrieve all the users who were born in September.</p> <pre data-language=\"java\">r.table(\"users\").filter(\n    row -&gt; row.g(\"birthdate\").month().eq(r.september())\n).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../now/index\">now</a></li> <li><a href=\"../time/index\">time</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/month/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/month/</a>\n  </p>\n</div>\n","api/java/day/index":"<h1 class=\"title\">ReQL command: day</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">time.day() → number\n</pre> <h2 id=\"description\">Description</h2> <p>Return the day of a time object as a number between 1 and 31.</p> <p><strong>Example:</strong> Return the users born on the 24th of any month.</p> <pre data-language=\"java\">r.table(\"users\").filter(\n    row -&gt; row.g(\"birthdate\").day().eq(24)\n).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../now/index\">now</a></li> <li><a href=\"../time/index\">time</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/day/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/day/</a>\n  </p>\n</div>\n","api/java/day_of_week/index":"<h1 class=\"title\">ReQL command: dayOfWeek</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">time.dayOfWeek() → number\n</pre> <h2 id=\"description\">Description</h2> <p>Return the day of week of a time object as a number between 1 and 7 (following ISO 8601 standard). For your convenience, the terms r.monday, r.tuesday, etc. are defined and map to the appropriate integer.</p> <p><strong>Example:</strong> Return today’s day of week.</p> <pre data-language=\"java\">r.now().dayOfWeek().run(conn);\n</pre>  <p><strong>Example:</strong> Retrieve all the users who were born on a Tuesday.</p> <pre data-language=\"java\">r.table(\"users\").filter(\n    row -&gt; row.g(\"birthdate\").dayOfWeek().eq(r.tuesday())\n).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../now/index\">now</a></li> <li><a href=\"../time/index\">time</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/day_of_week/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/day_of_week/</a>\n  </p>\n</div>\n","api/java/day_of_year/index":"<h1 class=\"title\">ReQL command: dayOfYear</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">time.dayOfYear() → number\n</pre> <h2 id=\"description\">Description</h2> <p>Return the day of the year of a time object as a number between 1 and 366 (following ISO 8601 standard).</p> <p><strong>Example:</strong> Retrieve all the users who were born the first day of a year.</p> <pre data-language=\"java\">r.table(\"users\").filter(\n    row -&gt; row.g(\"birthdate\").dayOfYear().eq(1)\n).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../now/index\">now</a></li> <li><a href=\"../time/index\">time</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/day_of_year/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/day_of_year/</a>\n  </p>\n</div>\n","api/java/hours/index":"<h1 class=\"title\">ReQL command: hours</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">time.hours() → number\n</pre> <h2 id=\"description\">Description</h2> <p>Return the hour in a time object as a number between 0 and 23.</p> <p><strong>Example:</strong> Return all the posts submitted after midnight and before 4am.</p> <pre data-language=\"java\">r.table(\"posts\").filter(post -&gt; post.g(\"date\").hours().lt(4)).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../now/index\">now</a></li> <li><a href=\"../time/index\">time</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/hours/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/hours/</a>\n  </p>\n</div>\n","api/java/minutes/index":"<h1 class=\"title\">ReQL command: minutes</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">time.minutes() → number\n</pre> <h2 id=\"description\">Description</h2> <p>Return the minute in a time object as a number between 0 and 59.</p> <p><strong>Example:</strong> Return all the posts submitted during the first 10 minutes of every hour.</p> <pre data-language=\"java\">r.table(\"posts\").filter(post -&gt; post.g(\"date\").minutes().lt(10)).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../now/index\">now</a></li> <li><a href=\"../time/index\">time</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/minutes/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/minutes/</a>\n  </p>\n</div>\n","api/java/seconds/index":"<h1 class=\"title\">ReQL command: seconds</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">time.seconds() → number\n</pre> <h2 id=\"description\">Description</h2> <p>Return the seconds in a time object as a number between 0 and 59.999 (double precision).</p> <p><strong>Example:</strong> Return the post submitted during the first 30 seconds of every minute.</p> <pre data-language=\"java\">r.table(\"posts\").filter(post -&gt; post.g(\"date\").seconds().lt(30)).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../now/index\">now</a></li> <li><a href=\"../time/index\">time</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/seconds/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/seconds/</a>\n  </p>\n</div>\n","api/java/to_iso8601/index":"<h1 class=\"title\">ReQL command: toIso8601</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">time.toIso8601() → string\n</pre> <h2 id=\"description\">Description</h2> <p>Convert a time object to a string in ISO 8601 format.</p> <p><strong>Example:</strong> Return the current ISO 8601 time.</p> <pre data-language=\"java\">r.now().toIso8601().run(conn);\n\n// Result:\n\"2015-04-20T18:37:52.690+00:00\"\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../now/index\">now</a></li> <li><a href=\"../time/index\">time</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/to_iso8601/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/to_iso8601/</a>\n  </p>\n</div>\n","api/java/to_epoch_time/index":"<h1 class=\"title\">ReQL command: toEpochTime</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">time.toEpochTime() → number\n</pre> <h2 id=\"description\">Description</h2> <p>Convert a time object to its epoch time.</p> <p><strong>Example:</strong> Return the current time in seconds since the Unix Epoch with millisecond-precision.</p> <pre data-language=\"java\">r.now().toEpochTime().run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../now/index\">now</a></li> <li><a href=\"../time/index\">time</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/to_epoch_time/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/to_epoch_time/</a>\n  </p>\n</div>\n","api/java/array/index":"<h1 class=\"title\">ReQL command: array</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.array(value[, value...]) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Take one or more values as arguments and return an array. (Technically, return a <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/List.html\">List</a> object.)</p> <p><strong>Example:</strong> Create an array.</p> <pre data-language=\"java\">r.expr(r.array(10, 20, 30)).run(conn);\n</pre>  <p>This is a ReQL equivalent to:</p> <pre data-language=\"java\">List&lt;Integer&gt; myArray = Arrays.asList(10, 20, 30);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../hashmap/index\">hashMap</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/array/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/array/</a>\n  </p>\n</div>\n","api/java/hashmap/index":"<h1 class=\"title\">ReQL command: hashMap</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.hashMap(key, value)[.with(key, value) ...] → object\n</pre> <h2 id=\"description\">Description</h2> <p>Take a key/value pair, with extra key/value pairs optionally specified by chaining one or more <code class=\"highlighter-rouge\">with(key, value)</code> terms after <code class=\"highlighter-rouge\">hashMap</code>, and return an object.</p> <p><code class=\"highlighter-rouge\">hashMap</code> is a convenience provided by the RethinkDB Java driver, and is not actually a ReQL term. It returns a <code class=\"highlighter-rouge\">MapObject</code>, a RethinkDB-provided class that inherits from <code class=\"highlighter-rouge\">Map&lt;Object,Object&gt;</code>. You can use <code class=\"highlighter-rouge\">hashMap</code> outside the context of a ReQL query.</p> <p><strong>Example:</strong> Create a hashmap.</p> <pre data-language=\"java\">import com.rethinkdb.model.MapObject;\n\nMapObject newData = r.hashMap(\"user\", \"fred\")\n    .with(\"email\", \"fred@example.com\")\n    .with(\"id\", 101)\n    .with(\"admin\", true);\n</pre>  <p>This creates the object (in JSON):</p> <pre data-language=\"java\">{\n    \"admin\": true,\n    \"email\": \"fred@example.com\",\n    \"id\": 101,\n    \"user\": \"fred\"\n}\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../array/index\">array</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/hashmap/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/hashmap/</a>\n  </p>\n</div>\n","api/java/args/index":"<h1 class=\"title\">ReQL command: args</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.args(array) → special\n</pre> <h2 id=\"description\">Description</h2> <p><code class=\"highlighter-rouge\">r.args</code> is a special term that’s used to splice an array of arguments into another term. This is useful when you want to call a variadic term such as <a href=\"../get_all/index\">getAll</a> with a set of arguments produced at runtime.</p> <p>Note that <code class=\"highlighter-rouge\">args</code> evaluates all its arguments before passing them into the parent term, even if the parent term otherwise allows lazy evaluation.</p> <p><strong>Example:</strong> Get Alice and Bob from the table <code class=\"highlighter-rouge\">people</code>.</p> <pre data-language=\"java\">r.table(\"people\").getAll(\"Alice\", \"Bob\").run(conn);\n// or\nr.table(\"people\").getAll(r.args(r.array(\"Alice\", \"Bob\"))).run(conn);\n</pre>  <p><strong>Example:</strong> Get all of Alice’s children from the table <code class=\"highlighter-rouge\">people</code>.</p> <pre data-language=\"java\">// r.table(\"people\").get(\"Alice\") returns (in JSON)\n// { \"id\": \"Alice\", \"children\": [\"Bob, \"Carol\"] }\nr.table(\"people\").getAll(r.args(r.table(\"people\").get(\"Alice\").g(\"children\"))).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../array/index\">array</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/args/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/args/</a>\n  </p>\n</div>\n","api/java/binary/index":"<h1 class=\"title\">ReQL command: binary</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.binary(data) → binary\n</pre> <h2 id=\"description\">Description</h2> <p>Encapsulate binary data within a query.</p> <p>The type of data <code class=\"highlighter-rouge\">binary</code> accepts depends on the client language. In Java, it expects a parameter of <code class=\"highlighter-rouge\">byte[]</code> type (or ReQL queries that return binary data).</p> <p>Binary objects returned to the client in Java will also be <code class=\"highlighter-rouge\">byte[]</code> types. This can be changed with the <code class=\"highlighter-rouge\">binary_format</code> <a href=\"../optarg/index\">optArg</a> provided to <a href=\"../run/index\">run</a> to return “raw” objects.</p> <p>Only a limited subset of ReQL commands may be chained after <code class=\"highlighter-rouge\">binary</code>:</p> <ul> <li>\n<a href=\"../coerce_to/index\">coerceTo</a> can coerce <code class=\"highlighter-rouge\">binary</code> objects to <code class=\"highlighter-rouge\">string</code> types</li> <li>\n<a href=\"../count/index\">count</a> will return the number of bytes in the object</li> <li>\n<a href=\"../slice/index\">slice</a> will treat bytes like array indexes (i.e., <code class=\"highlighter-rouge\">slice(10,20)</code> will return bytes 10–19)</li> <li>\n<a href=\"../type_of/index\">typeOf</a> returns <code class=\"highlighter-rouge\">PTYPE&lt;BINARY&gt;</code>\n</li> <li>\n<a href=\"../info/index\">info</a> will return information on a binary object.</li> </ul> <p><strong>Example:</strong> Save an avatar image to a existing user record.</p> <pre data-language=\"java\">import java.nio.file.*;\n\nPath path = Paths.get(\"./defaultAvatar.png\");\nbyte[] avatarImage = Files.readAllBytes(path);\nr.table(\"users\").get(100).update(r.hashMap(\"avatar\", avatarImage));\n</pre>  <p><strong>Example:</strong> Get the size of an existing avatar image.</p> <pre data-language=\"java\">r.table(\"users\").get(100)(\"avatar\").count().run(conn);\n\n// Result:\n14156\n</pre>  <p>Read more details about RethinkDB’s binary object support: <a href=\"../../../docs/storing-binary/java/index\">Storing binary objects</a>.</p>  <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/binary/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/binary/</a>\n  </p>\n</div>\n","api/java/for_each/index":"<h1 class=\"title\">ReQL command: forEach</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">sequence.forEach(write_function) → object\n</pre> <h2 id=\"description\">Description</h2> <p>Loop over a sequence, evaluating the given write query for each element.</p> <p><strong>Example:</strong> Now that our heroes have defeated their villains, we can safely remove them from the villain table.</p> <pre data-language=\"java\">r.table(\"marvel\").forEach(\n    hero -&gt; r.table(\"villains\").get(hero.g(\"villainDefeated\")).delete()\n).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../map/index\">map</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/for_each/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/for_each/</a>\n  </p>\n</div>\n","api/java/do/index":"<h1 class=\"title\">ReQL command: do_</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">any.do_(function) → any\nr.do_([args]*, function) → any\nany.do_(expr) → any\nr.do_([args]*, expr) → any\n</pre> <h2 id=\"description\">Description</h2> <p>Call an anonymous function using return values from other ReQL commands or queries as arguments.</p> <p>The last argument to <code class=\"highlighter-rouge\">do_</code> (or, in some forms, the only argument) is an expression or an anonymous function which receives values from either the previous arguments or from prefixed commands chained before <code class=\"highlighter-rouge\">do_</code>. The <code class=\"highlighter-rouge\">do_</code> command is essentially a single-element <a href=\"../map/index\">map</a>, letting you map a function over just one document. This allows you to bind a query result to a local variable within the scope of <code class=\"highlighter-rouge\">do_</code>, letting you compute the result just once and reuse it in a complex expression or in a series of ReQL commands.</p> <p>Arguments passed to the <code class=\"highlighter-rouge\">do_</code> function must be basic data types, and cannot be streams or selections. (Read about <a href=\"../../../docs/data-types/index\">ReQL data types</a>.) While the arguments will all be evaluated before the function is executed, they may be evaluated in any order, so their values should not be dependent on one another. The type of <code class=\"highlighter-rouge\">do_</code>’s result is the type of the value returned from the function or last expression.</p> <p><strong>Example:</strong> Compute a golfer’s net score for a game.</p> <pre data-language=\"java\">r.table(\"players\").get(\"86be93eb-a112-48f5-a829-15b2cb49de1d\").do_(\n    player -&gt; player.g(\"gross_score\").sub(player.g(\"course_handicap\"))\n).run(conn);\n</pre>  <p><strong>Example:</strong> Return the best scoring player in a two-player golf match.</p> <pre data-language=\"java\">r.do_(r.table(\"players\").get(id1), r.table(\"players\").get(id2),\n    (player1, player2) -&gt; r.branch(\n        player1.g(\"gross_score\").lt(player2.g(\"gross_score\")),\n        player1,\n        player2\n    )\n).run(conn);\n\n</pre>  <p>Note that <code class=\"highlighter-rouge\">branch</code>, the ReQL conditional command, must be used instead of <code class=\"highlighter-rouge\">if</code>. See the <code class=\"highlighter-rouge\">branch</code> <a href=\"../branch/index\">documentation</a> for more.</p> <p><strong>Example:</strong> Take different actions based on the result of a ReQL <a href=\"../insert/index\">insert</a> command.</p> <pre data-language=\"java\">import com.rethinkdb.model.MapObject;\n\nMapObject newData = r.hashMap(\"id\", 100)\n    .with(\"name\", \"Agatha\")\n    .with(\"gross_score\", 57)\n    .with(\"course_handicap\", 4);\n\nr.table(\"players\").insert(newData).do_(doc -&gt;\n    r.branch(doc.g(\"inserted\").ne(0),\n        r.table(\"log\").insert(\n            r.hashMap(\"time\", r.now())\n               .with(\"response\", doc)\n               .with(\"result\", \"ok\")),\n        r.table(\"log\").insert(\n            r.hashMap(\"time\", r.now())\n               .with(\"response\", doc)\n               .with(\"result\", \"error\"))\n    )\n).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../map/index\">map</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/do/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/do/</a>\n  </p>\n</div>\n","api/java/branch/index":"<h1 class=\"title\">ReQL command: branch</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.branch(test, true_action[, test2, test2_action, ...], false_action) → any\ntest.branch(true_action[, test2, test2_action, ...], false_action) → any\n</pre> <h2 id=\"description\">Description</h2> <p>Perform a branching conditional equivalent to <code class=\"highlighter-rouge\">if-then-else</code>.</p> <p>The <code class=\"highlighter-rouge\">branch</code> command takes 2n+1 arguments: pairs of conditional expressions and commands to be executed if the conditionals return any value but <code class=\"highlighter-rouge\">false</code> or <code class=\"highlighter-rouge\">null</code> (i.e., “truthy” values), with a final “else” command to be evaluated if all of the conditionals are <code class=\"highlighter-rouge\">false</code> or <code class=\"highlighter-rouge\">null</code>.</p>  <p>You may call <code class=\"highlighter-rouge\">branch</code> infix style on the first test. (See the second example for an illustration.)</p> <pre data-language=\"java\">r.branch(test1, val1, test2, val2, elseval)\n</pre>  <p>is the equivalent of the Java statement</p> <pre data-language=\"java\">if (test1) {\n    return val1;\n} else if (test2) {\n    return val2;\n} else {\n    return elseval;\n}\n</pre>  <p><strong>Example:</strong> Test the value of x.</p> <pre data-language=\"java\">int x = 10;\nr.branch(r.expr(x).gt(5), \"big\", \"small\").run(conn);\n\n// Result:\n\"big\"\n</pre>  <p><strong>Example:</strong> As above, infix-style.</p> <pre data-language=\"java\">int x = 10;\nr.expr(x).gt(5).branch(\"big\", \"small\").run(conn);\n\n// Result:\n\"big\"\n</pre>  <p><strong>Example:</strong> Categorize heroes by victory counts.</p> <pre data-language=\"java\">r.table(\"marvel\").map(hero -&gt; r.branch(\n    hero.g(\"victories\").gt(100),\n    hero.g(\"name\").add(\" is a superhero\"),\n    hero.g(\"victories\").gt(10),\n    hero.g(\"name\").add(\" is a hero\"),\n    hero.g(\"name\").add(\" is very nice\")\n)).run(conn);\n\n</pre>  <p>If the documents in the table <code class=\"highlighter-rouge\">marvel</code> are:</p> <pre data-language=\"java\">[\n    { \"name\": \"Iron Man\", \"victories\": 214 },\n    { \"name\": \"Jubilee\", \"victories\": 49 },\n    { \"name\": \"Slava\", \"victories\": 5 }\n]\n</pre>  <p>The results will be:</p> <pre data-language=\"java\">[\n    \"Iron Man is a superhero\",\n    \"Jubilee is a hero\",\n    \"Slava is very nice\"\n]\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../do/index\">do</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/branch/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/branch/</a>\n  </p>\n</div>\n","api/java/range/index":"<h1 class=\"title\">ReQL command: range</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.range() → stream\nr.range([startValue, ]endValue) → stream\n</pre> <h2 id=\"description\">Description</h2> <p>Generate a stream of sequential integers in a specified range.</p> <p><code class=\"highlighter-rouge\">range</code> takes 0, 1 or 2 arguments:</p> <ul> <li>With no arguments, <code class=\"highlighter-rouge\">range</code> returns an “infinite” stream from 0 up to and including the maximum integer value;</li> <li>With one argument, <code class=\"highlighter-rouge\">range</code> returns a stream from 0 up to but not including the end value;</li> <li>With two arguments, <code class=\"highlighter-rouge\">range</code> returns a stream from the start value up to but not including the end value.</li> </ul> <p>Note that the left bound (including the implied left bound of 0 in the 0- and 1-argument form) is always closed and the right bound is always open: the start value will always be included in the returned range and the end value will <em>not</em> be included in the returned range.</p> <p>Any specified arguments must be integers, or a <code class=\"highlighter-rouge\">ReqlRuntimeError</code> will be thrown. If the start value is equal or to higher than the end value, no error will be thrown but a zero-element stream will be returned.</p> <p><strong>Example:</strong> Return a four-element range of <code class=\"highlighter-rouge\">[0, 1, 2, 3]</code>.</p> <pre data-language=\"java\">r.range(4).run(conn);\n</pre>  <p>Result (shown as JSON):</p> <pre data-language=\"java\">[0, 1, 2, 3]\n</pre>   <p>You can also use the <a href=\"../limit/index\">limit</a> command with the no-argument variant to achieve the same result in this case:</p> <pre data-language=\"java\">r.range().limit(4).run(conn);\n</pre>  <p><strong>Example:</strong> Return a range from -5 through 5.</p> <pre data-language=\"java\">r.range(-5, 6).run(conn);\n</pre>  <pre data-language=\"java\">[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/range/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/range/</a>\n  </p>\n</div>\n","api/java/error/index":"<h1 class=\"title\">ReQL command: error</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.error(message) → error\n</pre> <h2 id=\"description\">Description</h2> <p>Throw a runtime error. If called with no arguments inside the second argument to <code class=\"highlighter-rouge\">default</code>, re-throw the current error.</p> <p><strong>Example:</strong> Iron Man can’t possibly have lost a battle:</p> <pre data-language=\"java\">r.table(\"marvel\").get(\"IronMan\").do_(\n    ironman -&gt; r.branch(\n        ironman.g(\"victories\").lt(ironman.g(\"battles\")),\n        r.error(\"impossible code path\"),\n        ironman\n    )\n).run(conn);\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/error/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/error/</a>\n  </p>\n</div>\n","api/java/expr/index":"<h1 class=\"title\">ReQL command: expr</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.expr(value) → value\n</pre> <h2 id=\"description\">Description</h2> <p>Construct a ReQL JSON object from a native object.</p> <p>The native object can be any Java primitive type, as well as Array, List, Map, LocalDateTime, ZonedDateTime, OffsetDateTime, and POJOs (“plain old Java objects”) whose classes are public and whose numeric properties are <code class=\"highlighter-rouge\">Long</code> instead of <code class=\"highlighter-rouge\">Integer</code>.</p> <p>If the native object is of type <code class=\"highlighter-rouge\">bytes[]</code>, then <code class=\"highlighter-rouge\">expr</code> will return a binary object. See <a href=\"../binary/index\">binary</a> for more information.</p> <p><strong>Example:</strong> Objects wrapped with <code class=\"highlighter-rouge\">expr</code> can then be manipulated by ReQL API functions.</p> <pre data-language=\"java\">import com.rethinkdb.model.MapObject;\n\n// Create object { \"a\": \"b\" }\nMapObject newData = r.hashMap(\"a\", \"b\");\n\n// merge with { \"b\": [1, 2, 3] }\nr.expr(newData).merge(r.hashMap(\"b\", r.array(1, 2, 3))).run(conn);\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/expr/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/expr/</a>\n  </p>\n</div>\n","api/java/js/index":"<h1 class=\"title\">ReQL command: js</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.js(jsString) → value\n</pre> <h2 id=\"description\">Description</h2> <p>Create a JavaScript expression.</p> <p>You may use the <code class=\"highlighter-rouge\">timeout</code> <a href=\"../optarg/index\">optArg</a> to specify a number of seconds before <code class=\"highlighter-rouge\">r.js</code> times out. The default value is 5 seconds.</p> <blockquote class=\"infobox \">\n<p>Whenever possible, you should use native ReQL commands rather than <code class=\"highlighter-rouge\">r.js</code> for better performance.</p> </blockquote> <p><strong>Example:</strong> Concatenate two strings using JavaScript.</p> <pre data-language=\"java\">r.js(\"'str1' + 'str2'\").run(conn);\n</pre>  <p><strong>Example:</strong> Select all documents where the ‘magazines’ field is greater than 5 by running JavaScript on the server.</p> <pre data-language=\"java\">r.table(\"marvel\").filter(\n    r.js('(function (row) { return row.magazines.length &gt; 5; })')\n).run(conn);\n</pre>  <p><strong>Example:</strong> You may also specify a timeout in seconds (defaults to 5).</p> <pre data-language=\"java\">r.js(\"while (true) {}\").optArg(\"timeout\", 1.3).run(conn);\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/js/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/js/</a>\n  </p>\n</div>\n","api/java/default/index":"<h1 class=\"title\">ReQL command: default</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">value.default(default_value) → any\nsequence.default(default_value) → any\n</pre> <h2 id=\"description\">Description</h2> <p>Provide a default value in case of non-existence errors. The <code class=\"highlighter-rouge\">default</code> command evaluates its first argument (the value it’s chained to). If that argument returns <code class=\"highlighter-rouge\">null</code> or a non-existence error is thrown in evaluation, then <code class=\"highlighter-rouge\">default</code> returns its second argument. The second argument is usually a default value, but it can be a function that returns a value.</p> <p><strong>Example:</strong> Suppose we want to retrieve the titles and authors of the table <code class=\"highlighter-rouge\">posts</code>. In the case where the author field is missing or <code class=\"highlighter-rouge\">null</code>, we want to retrieve the string <code class=\"highlighter-rouge\">Anonymous</code>.</p> <pre data-language=\"java\">r.table(\"posts\").map(post -&gt;\n    r.hashMap(\"title\", post.g(\"title\"))\n        .with(\"author\", post.g(\"author\").default_(\"Anonymous\"))\n).run(conn);\n</pre>   <p>We can rewrite the previous query with <code class=\"highlighter-rouge\">r.branch</code> too.</p> <pre data-language=\"java\">r.table(\"posts\").map(post -&gt;\n    r.branch(\n        post.hasFields(\"author\"),\n        r.hashMap(\"title\", post.g(\"title\"))\n            .with(\"author\", post.g(\"author\")),\n        r.hashMap(\"title\", post.g(\"title\"))\n            .with(\"author\", \"Anonymous\")\n    )\n).run(conn);\n</pre>  <p><strong>Example:</strong> The <code class=\"highlighter-rouge\">default</code> command can also be used to filter documents. Suppose we want to retrieve all our users who are not grown-ups or whose age is unknown (i.e., the field <code class=\"highlighter-rouge\">age</code> is missing or equals <code class=\"highlighter-rouge\">null</code>). We can do it with this query:</p> <pre data-language=\"java\">r.table(\"users\").filter(\n    user -&gt; user.g(\"age\").lt(18).default_(true)\n).run(conn);\n</pre>  <p>One more way to write the previous query is to set the age to be <code class=\"highlighter-rouge\">-1</code> when the field is missing.</p> <pre data-language=\"java\">r.table(\"users\").filter(\n    user -&gt; user.g(\"age\").default_(-1).lt(18)\n).run(conn);\n</pre>  <p>Another way to do the same query is to use <a href=\"../has_fields/index\">hasFields</a>.</p> <pre data-language=\"java\">r.table(\"users\").filter(\n    user -&gt; user.hasFields(\"age\").not().or(user.g(\"age\").lt(18))\n).run(conn);\n</pre>  <p>The body of every <a href=\"../filter/index\">filter</a> is wrapped in an implicit <code class=\"highlighter-rouge\">.default_(false)</code>. You can overwrite the value <code class=\"highlighter-rouge\">false</code> with the <code class=\"highlighter-rouge\">default</code> <a href=\"../optarg/index\">optArg</a> to <code class=\"highlighter-rouge\">filter</code>, so the previous query can also be written like this.</p> <pre data-language=\"java\">r.table(\"users\").filter(\n    user -&gt; user.g(\"age\").lt(18).default_(true)\n).optArg(\"default\", true).run(conn);\n\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/default/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/default/</a>\n  </p>\n</div>\n","api/java/coerce_to/index":"<h1 class=\"title\">ReQL command: coerceTo</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">sequence.coerceTo(\"array\") → array\nvalue.coerceTo(\"string\") → string\nstring.coerceTo(\"number\") → number\narray.coerceTo(\"object\") → object\nsequence.coerceTo(\"object\") → object\nobject.coerceTo(\"array\") → array\nbinary.coerceTo(\"string\") → string\nstring.coerceTo(\"binary\") → binary\n</pre> <h2 id=\"description\">Description</h2> <p>Convert a value of one type into another.</p> <ul> <li>a sequence, selection or object can be coerced to an array</li> <li>a sequence, selection or an array of key-value pairs can be coerced to an object</li> <li>a string can be coerced to a number</li> <li>any datum (single value) can be coerced to to a string</li> <li>a binary object can be coerced to a string and vice-versa</li> </ul> <p><strong>Example:</strong> Coerce a stream to an array to store its output in a field. (A stream cannot be stored in a field directly.)</p> <pre data-language=\"java\">r.table(\"posts\").map(post -&gt; post.merge(\n    r.hashMap(\"comments\",\n              r.table(\"comments\").getAll(post.g(\"id\")).optArg(\"index\", \"post_id\")\n              .coerceTo(\"array\"))\n)).run(conn);\n</pre>  <p><strong>Example:</strong> Coerce an array of key-value pairs into an object.</p> <pre data-language=\"java\">r.expr(r.array(r.array(\"name\", \"Ironman\"), r.array(\"victories\", 2000)))\n .coerceTo(\"object\").run(conn);\n</pre>  <p><strong>Note:</strong> To coerce a list of key-value pairs like <code class=\"highlighter-rouge\">[\"name\", \"Ironman\", \"victories\", 2000]</code> to an object, use the <a href=\"../object/index\">object</a> command.</p> <p><strong>Example:</strong> Coerce a number to a string.</p> <pre data-language=\"java\">r.expr(1).coerceTo(\"string\").run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../object/index\">object</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/coerce_to/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/coerce_to/</a>\n  </p>\n</div>\n","api/java/type_of/index":"<h1 class=\"title\">ReQL command: typeOf</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">any.typeOf() → string\n</pre> <h2 id=\"description\">Description</h2> <p>Gets the type of a ReQL query’s return value.</p> <p>The type will be returned as a string:</p> <ul> <li><code class=\"highlighter-rouge\">ARRAY</code></li> <li><code class=\"highlighter-rouge\">BOOL</code></li> <li><code class=\"highlighter-rouge\">DB</code></li> <li><code class=\"highlighter-rouge\">FUNCTION</code></li> <li><code class=\"highlighter-rouge\">GROUPED_DATA</code></li> <li><code class=\"highlighter-rouge\">GROUPED_STREAM</code></li> <li><code class=\"highlighter-rouge\">MAXVAL</code></li> <li><code class=\"highlighter-rouge\">MINVAL</code></li> <li><code class=\"highlighter-rouge\">NULL</code></li> <li><code class=\"highlighter-rouge\">NUMBER</code></li> <li><code class=\"highlighter-rouge\">OBJECT</code></li> <li><code class=\"highlighter-rouge\">PTYPE&lt;BINARY&gt;</code></li> <li><code class=\"highlighter-rouge\">PTYPE&lt;GEOMETRY&gt;</code></li> <li><code class=\"highlighter-rouge\">PTYPE&lt;TIME&gt;</code></li> <li><code class=\"highlighter-rouge\">SELECTION&lt;ARRAY&gt;</code></li> <li><code class=\"highlighter-rouge\">SELECTION&lt;OBJECT&gt;</code></li> <li><code class=\"highlighter-rouge\">SELECTION&lt;STREAM&gt;</code></li> <li><code class=\"highlighter-rouge\">STREAM</code></li> <li><code class=\"highlighter-rouge\">STRING</code></li> <li><code class=\"highlighter-rouge\">TABLE_SLICE</code></li> <li><code class=\"highlighter-rouge\">TABLE</code></li> </ul> <p>Read the article on <a href=\"../../../docs/data-types/index\">ReQL data types</a> for a more detailed discussion. Note that some possible return values from <code class=\"highlighter-rouge\">typeOf</code> are internal values, such as <code class=\"highlighter-rouge\">MAXVAL</code>, and unlikely to be returned from queries in standard practice.</p> <p><strong>Example:</strong> Get the type of a string.</p> <pre data-language=\"java\">r.expr(\"foo\").typeOf().run(conn);\n// result: \"STRING\"\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/type_of/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/type_of/</a>\n  </p>\n</div>\n","api/java/info/index":"<h1 class=\"title\">ReQL command: info</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">any.info() → object\nr.info(any) → object\n</pre> <h2 id=\"description\">Description</h2> <p>Get information about a ReQL value.</p> <p><strong>Example:</strong> Get information about a table such as primary key, or cache size.</p> <pre data-language=\"java\">r.table(\"marvel\").info().run(conn);\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/info/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/info/</a>\n  </p>\n</div>\n","api/java/json/index":"<h1 class=\"title\">ReQL command: json</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.json(json_string) → value\n</pre> <h2 id=\"description\">Description</h2> <p>Parse a JSON string on the server.</p> <p><strong>Example:</strong> Send an array to the server.</p> <pre data-language=\"java\">r.json(\"[1,2,3]\").run(conn);\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/json/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/json/</a>\n  </p>\n</div>\n","api/java/to_json_string/index":"<h1 class=\"title\">ReQL command: toJsonString, toJson</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">value.toJsonString() → string\nvalue.toJson() → string\n</pre> <h2 id=\"description\">Description</h2> <p>Convert a ReQL value or object to a JSON string. You may use either <code class=\"highlighter-rouge\">toJsonString</code> or <code class=\"highlighter-rouge\">toJson</code>.</p> <p><strong>Example:</strong> Get a ReQL document as a JSON string.</p> <pre data-language=\"java\">r.table(\"hero\").get(1).toJson().run(conn)\n</pre>  <p>Returned data:</p> <pre data-language=\"java\">'{\"id\": 1, \"name\": \"Batman\", \"city\": \"Gotham\", \"powers\": [\"martial arts\", \"cinematic entrances\"]}'\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../json/index\">json</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/to_json_string/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/to_json_string/</a>\n  </p>\n</div>\n","api/java/http/index":"<h1 class=\"title\">ReQL command: http</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.http(url[, options]) → value\nr.http(url[, options]) → stream\n</pre> <h2 id=\"description\">Description</h2> <p>Retrieve data from the specified URL over HTTP. The return type depends on the <code class=\"highlighter-rouge\">resultFormat</code> option, which checks the <code class=\"highlighter-rouge\">Content-Type</code> of the response by default.</p> <p><strong>Example:</strong> Perform an HTTP <code class=\"highlighter-rouge\">GET</code> and store the result in a table.</p> <pre data-language=\"java\">r.table(\"posts\").insert(r.http(\"http://httpbin.org/get\")).run(conn);\n</pre>   <p>See <a href=\"../../../docs/external-api-access/index\">the tutorial</a> on <code class=\"highlighter-rouge\">r.http</code> for more examples on how to use this command.</p> <h2 id=\"options\">Options</h2> <p>These options are specified with the <a href=\"../optarg/index\">optArg</a> command.</p> <h3 id=\"general-options\">General Options</h3> <ul> <li>\n<code class=\"highlighter-rouge\">timeout</code>: timeout period in seconds to wait before aborting the connect (default <code class=\"highlighter-rouge\">30</code>).</li> <li>\n<code class=\"highlighter-rouge\">attempts</code>: number of retry attempts to make after failed connections (default <code class=\"highlighter-rouge\">5</code>).</li> <li>\n<code class=\"highlighter-rouge\">redirects</code>: number of redirect and location headers to follow (default <code class=\"highlighter-rouge\">1</code>).</li> <li>\n<code class=\"highlighter-rouge\">verify</code>: if <code class=\"highlighter-rouge\">true</code>, verify the server’s SSL certificate (default <code class=\"highlighter-rouge\">true</code>).</li> <li>\n<code class=\"highlighter-rouge\">resultFormat</code>: string specifying the format to return results in. One of the following: <ul> <li>\n<code class=\"highlighter-rouge\">text</code>: always return a string.</li> <li>\n<code class=\"highlighter-rouge\">json</code>: parse the result as JSON, raising an error on failure.</li> <li>\n<code class=\"highlighter-rouge\">jsonp</code>: parse the result as <a href=\"https://en.wikipedia.org/wiki/JSONP\">Padded JSON</a>.</li> <li>\n<code class=\"highlighter-rouge\">binary</code>: return a binary object.</li> <li>\n<code class=\"highlighter-rouge\">auto</code>: parse the result based on its <code class=\"highlighter-rouge\">Content-Type</code> (the default): <ul> <li>\n<code class=\"highlighter-rouge\">application/json</code>: as <code class=\"highlighter-rouge\">json</code>\n</li> <li>\n<code class=\"highlighter-rouge\">application/json-p</code>, <code class=\"highlighter-rouge\">text/json-p</code>, <code class=\"highlighter-rouge\">text/javascript</code>: as <code class=\"highlighter-rouge\">jsonp</code>\n</li> <li>\n<code class=\"highlighter-rouge\">audio/*</code>, <code class=\"highlighter-rouge\">video/*</code>, <code class=\"highlighter-rouge\">image/*</code>, <code class=\"highlighter-rouge\">application/octet-stream</code>: as <code class=\"highlighter-rouge\">binary</code>\n</li> <li>anything else: as <code class=\"highlighter-rouge\">text</code>\n</li> </ul> </li> </ul> </li> </ul> <h3 id=\"request-options\">Request Options</h3> <ul> <li>\n<code class=\"highlighter-rouge\">method</code>: HTTP method to use for the request. One of <code class=\"highlighter-rouge\">GET</code>, <code class=\"highlighter-rouge\">POST</code>, <code class=\"highlighter-rouge\">PUT</code>, <code class=\"highlighter-rouge\">PATCH</code>, <code class=\"highlighter-rouge\">DELETE</code> or <code class=\"highlighter-rouge\">HEAD</code>. Default: <code class=\"highlighter-rouge\">GET</code>.</li> <li>\n<code class=\"highlighter-rouge\">auth</code>: object giving authentication, with the following fields: <ul> <li>\n<code class=\"highlighter-rouge\">type</code>: <code class=\"highlighter-rouge\">basic</code> (default) or <code class=\"highlighter-rouge\">digest</code>\n</li> <li>\n<code class=\"highlighter-rouge\">user</code>: username</li> <li>\n<code class=\"highlighter-rouge\">pass</code>: password in plain text</li> </ul> </li> <li>\n<code class=\"highlighter-rouge\">params</code>: hashMap or object specifying URL parameters to append to the URL as encoded key/value pairs. <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"s2\">\"query\"</span><span class=\"p\">:</span><span class=\"s2\">\"banana\"</span><span class=\"p\">,</span><span class=\"s2\">\"limit\"</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">}</span></code> will be appended as <code class=\"highlighter-rouge\">?query=banana&amp;limit=2</code>. Default: no parameters.</li> <li>\n<code class=\"highlighter-rouge\">header</code>: Extra header lines to include. The value may be an array of strings or an object. Default: <code class=\"highlighter-rouge\">Accept-Encoding: deflate;q=1, gzip;q=0.5</code> and <code class=\"highlighter-rouge\">User-Agent: RethinkDB/&lt;VERSION&gt;</code>.</li> <li>\n<code class=\"highlighter-rouge\">data</code>: Data to send to the server on a <code class=\"highlighter-rouge\">POST</code>, <code class=\"highlighter-rouge\">PUT</code>, <code class=\"highlighter-rouge\">PATCH</code>, or <code class=\"highlighter-rouge\">DELETE</code> request. For <code class=\"highlighter-rouge\">POST</code> requests, data may be either an object (which will be written to the body as form-encoded key/value pairs) or a string; for all other requests, data will be serialized as JSON and placed in the request body, sent as <code class=\"highlighter-rouge\">Content-Type: application/json</code>. Default: no data will be sent.</li> </ul> <p><strong>Example:</strong> Perform multiple requests with different parameters.</p> <pre data-language=\"java\">r.expr(r.array(1, 2, 3)).map(\n    i -&gt; r.http(\"http://httpbin.org/get\")\n          .optArg(\"params\", r.hashMap(\"user\", i))\n).run(conn);\n</pre>  <p><strong>Example:</strong> Perform a <code class=\"highlighter-rouge\">PUT</code> request for each item in a table.</p> <pre data-language=\"java\">r.table(\"data\").map(\n    row -&gt; r.http(\"http://httpbin.org/put\")\n            .optArg(\"method\", \"PUT\")\n            .optArg(\"data\", row)\n).run(conn);\n</pre>  <p><strong>Example:</strong> Perform a <code class=\"highlighter-rouge\">POST</code> request with accompanying data.</p> <p>Using form-encoded data:</p> <pre data-language=\"java\">r.http(\"http://httpbin.org/post\").optArg(\"method\", \"POST\")\n .optArg(\"data\", r.hashMap(\"player\", \"Bob\").with(\"game\", \"tic tac toe\"))\n .run(conn);\n</pre>  <p>Using JSON data:</p> <pre data-language=\"java\">r.http(\"http://httpbin.org/post\").optArg(\"method\", \"POST\")\n .optArg(\"data\", r.expr(value).coerceTo(\"string\"))\n .optArg(\"header\", r.hashMap(\"Content-Type\", \"application/json\"))\n .run(conn);\n</pre>  <h3 id=\"pagination\">Pagination</h3> <p><code class=\"highlighter-rouge\">r.http</code> supports depagination, which will request multiple pages in a row and aggregate the results into a stream. The use of this feature is controlled by the <a href=\"../optarg/index\">optArgs</a> <code class=\"highlighter-rouge\">page</code> and <code class=\"highlighter-rouge\">page_limit</code>. Either none or both of these arguments must be provided.</p> <ul> <li>\n<code class=\"highlighter-rouge\">page</code>: This option may specify either a built-in pagination strategy (see below), or a function to provide the next URL and/or <code class=\"highlighter-rouge\">params</code> to request.</li> <li>\n<code class=\"highlighter-rouge\">page_limit</code>: An integer specifying the maximum number of requests to issue using the <code class=\"highlighter-rouge\">page</code> functionality. This is to prevent overuse of API quotas, and must be specified with <code class=\"highlighter-rouge\">page</code>. <ul> <li>\n<code class=\"highlighter-rouge\">-1</code>: no limit</li> <li>\n<code class=\"highlighter-rouge\">0</code>: no requests will be made, an empty stream will be returned</li> <li>\n<code class=\"highlighter-rouge\">n</code>: <code class=\"highlighter-rouge\">n</code> requests will be made</li> </ul> </li> </ul> <p>At the moment, the only built-in strategy is <code class=\"highlighter-rouge\">link-next</code>, which is equivalent to <code class=\"highlighter-rouge\">info -&gt; info.g(\"header\").g(\"link\").g(\"rel='next'\").default_(null)</code>.</p> <p><strong>Example:</strong> Perform a GitHub search and collect up to 3 pages of results.</p> <pre data-language=\"java\">r.http(\"https://api.github.com/search/code?q=addClass+user:mozilla\")\n .optArg(\"page\", \"link-next\").optArg(\"page_limit\", 3)\n .run(conn);\n</pre>  <p>As a function, <code class=\"highlighter-rouge\">page</code> takes one parameter, an object of the format:</p> <pre data-language=\"java\">{\n    \"params\": object,  // the URL parameters used in the last request\n    \"header\": object,  // the headers of the last response as key/value pairs\n    \"body\": value      // the body of the last response in the format\n}                      //   specified by `resultFormat`\n</pre>  <p>The <code class=\"highlighter-rouge\">header</code> field will be a parsed version of the header with fields lowercased, like so:</p> <pre data-language=\"java\">{\n    \"content-length\": \"1024\",\n    \"content-type\": \"application/json\",\n    \"date\": \"Thu, 1 Jan 1970 00:00:00 GMT\",\n    \"link\": {\n        \"rel=\\\"last\\\"\": \"http://example.com/?page=34\",\n        \"rel=\\\"next\\\"\": \"http://example.com/?page=2\"\n    }\n}\n</pre>  <p>The <code class=\"highlighter-rouge\">page</code> function may return a string corresponding to the next URL to request, <code class=\"highlighter-rouge\">null</code> indicating that there is no more to get, or an object of the format:</p> <pre data-language=\"java\">{\n    \"url\": string,    // the next URL to request, or null for no more pages\n    \"params\": object  // new URL parameters to use, will be merged with the\n}                     //   previous request's params\n</pre>  <p><strong>Example:</strong> Perform depagination with a custom <code class=\"highlighter-rouge\">page</code> function.</p> <pre data-language=\"java\">r.http(\"example.com/pages\")\n .optArg(\"page\", info -&gt; info.g(\"body\").g(\"meta\").g(\"next\").default_(null))\n .optArg(\"page_limit\", 5)\n .run(conn);\n</pre>  <h2 id=\"learn-more\">Learn more</h2> <p>See <a href=\"../../../docs/external-api-access/index\">the tutorial</a> on <code class=\"highlighter-rouge\">r.http</code> for more examples on how to use this command.</p>  <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/http/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/http/</a>\n  </p>\n</div>\n","api/java/uuid/index":"<h1 class=\"title\">ReQL command: uuid</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.uuid([string]) → string\n</pre> <h2 id=\"description\">Description</h2> <p>Return a UUID (universally unique identifier), a string that can be used as a unique ID. If a string is passed to <code class=\"highlighter-rouge\">uuid</code> as an argument, the UUID will be deterministic, derived from the string’s SHA-1 hash.</p> <p>RethinkDB’s UUIDs are standards-compliant. Without the optional argument, a version 4 random UUID will be generated; with that argument, a version 5 UUID will be generated, using a fixed namespace UUID of <code class=\"highlighter-rouge\">91461c99-f89d-49d2-af96-d8e2e14e9b58</code>. For more information, read <a href=\"https://en.wikipedia.org/wiki/Universally_unique_identifier\">Wikipedia’s UUID article</a>.</p> <p><strong>Example:</strong> Generate a UUID.</p> <pre data-language=\"java\">r.uuid().run(conn);\n// returns \"27961a0e-f4e8-4eb3-bf95-c5203e1d87b9\"\n</pre>  <p><strong>Example:</strong> Generate a UUID based on a string.</p> <pre data-language=\"java\">r.uuid(\"slava@example.com\").run(conn);\n// returns \"90691cbc-b5ea-5826-ae98-951e30fc3b2d\"\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/uuid/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/uuid/</a>\n  </p>\n</div>\n","api/java/circle/index":"<h1 class=\"title\">ReQL command: circle</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.circle(r.array(longitude, latitude), radius) → geometry\nr.circle(point, radius) → geometry\n</pre> <h2 id=\"description\">Description</h2> <p>Construct a circular line or polygon. A circle in RethinkDB is a polygon or line <em>approximating</em> a circle of a given radius around a given center, consisting of a specified number of vertices (default 32).</p> <p>The center may be specified either by two floating point numbers, the latitude (−90 to 90) and longitude (−180 to 180) of the point on a perfect sphere (see <a href=\"../../../docs/geo-support/java/index\">Geospatial support</a> for more information on ReQL’s coordinate system), or by a point object. The radius is a floating point number whose units are meters by default, although that may be changed with the <code class=\"highlighter-rouge\">unit</code> argument.</p> <p>Optional arguments that can be specified with <a href=\"../optarg/index\">optArg</a> are:</p> <ul> <li>\n<code class=\"highlighter-rouge\">num_vertices</code>: the number of vertices in the polygon or line. Defaults to 32.</li> <li>\n<code class=\"highlighter-rouge\">geo_system</code>: the reference ellipsoid to use for geographic coordinates. Possible values are <code class=\"highlighter-rouge\">WGS84</code> (the default), a common standard for Earth’s geometry, or <code class=\"highlighter-rouge\">unit_sphere</code>, a perfect sphere of 1 meter radius.</li> <li>\n<code class=\"highlighter-rouge\">unit</code>: Unit for the radius distance. Possible values are <code class=\"highlighter-rouge\">m</code> (meter, the default), <code class=\"highlighter-rouge\">km</code> (kilometer), <code class=\"highlighter-rouge\">mi</code> (international mile), <code class=\"highlighter-rouge\">nm</code> (nautical mile), <code class=\"highlighter-rouge\">ft</code> (international foot).</li> <li>\n<code class=\"highlighter-rouge\">fill</code>: if <code class=\"highlighter-rouge\">true</code> (the default) the circle is filled, creating a polygon; if <code class=\"highlighter-rouge\">false</code> the circle is unfilled (creating a line).</li> </ul> <p><strong>Example:</strong> Define a circle.</p> <pre data-language=\"java\">r.table(\"geo\").insert(\n    r.hashMap(\"id\", 300)\n     .with(\"name\", \"Hayes Valley\")\n     .with(\"neighborhood\", r.circle(r.array(-122.423246, 37.779388), 1000))\n).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../line/index\">line</a></li> <li><a href=\"../polygon/index\">polygon</a></li> <li><a href=\"../point/index\">point</a></li> <li><a href=\"../distance/index\">distance</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/circle/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/circle/</a>\n  </p>\n</div>\n","api/java/distance/index":"<h1 class=\"title\">ReQL command: distance</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">geometry.distance(geometry) → number\nr.distance(geometry, geometry) → number\n</pre> <h2 id=\"description\">Description</h2> <p>Compute the distance between a point and another geometry object. At least one of the geometry objects specified must be a point.</p> <p>Optional arguments available with <code class=\"highlighter-rouge\">distance</code> are:</p> <ul> <li>\n<code class=\"highlighter-rouge\">geo_system</code>: the reference ellipsoid to use for geographic coordinates. Possible values are <code class=\"highlighter-rouge\">WGS84</code> (the default), a common standard for Earth’s geometry, or <code class=\"highlighter-rouge\">unit_sphere</code>, a perfect sphere of 1 meter radius.</li> <li>\n<code class=\"highlighter-rouge\">unit</code>: Unit to return the distance in. Possible values are <code class=\"highlighter-rouge\">m</code> (meter, the default), <code class=\"highlighter-rouge\">km</code> (kilometer), <code class=\"highlighter-rouge\">mi</code> (international mile), <code class=\"highlighter-rouge\">nm</code> (nautical mile), <code class=\"highlighter-rouge\">ft</code> (international foot).</li> </ul> <p>If one of the objects is a polygon or a line, the point will be projected onto the line or polygon assuming a perfect sphere model before the distance is computed (using the model specified with <code class=\"highlighter-rouge\">geo_system</code>). As a consequence, if the polygon or line is extremely large compared to Earth’s radius and the distance is being computed with the default WGS84 model, the results of <code class=\"highlighter-rouge\">distance</code> should be considered approximate due to the deviation between the ellipsoid and spherical models.</p> <p><strong>Example:</strong> Compute the distance between two points on the Earth in kilometers.</p> <pre data-language=\"java\">r.distance(\n    r.point(-122.423246,37.779388),\n    r.point(-117.220406,32.719464)\n).optArg(\"unit\", \"km\").run(conn);\n\n// Result:\n734.1252496021841\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../polygon/index\">polygon</a></li> <li><a href=\"../line/index\">line</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/distance/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/distance/</a>\n  </p>\n</div>\n","api/java/fill/index":"<h1 class=\"title\">ReQL command: fill</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">line.fill() → polygon\n</pre> <h2 id=\"description\">Description</h2> <p>Convert a Line object into a Polygon object. If the last point does not specify the same coordinates as the first point, <code class=\"highlighter-rouge\">polygon</code> will close the polygon by connecting them.</p> <p>Longitude (−180 to 180) and latitude (−90 to 90) of vertices are plotted on a perfect sphere. See <a href=\"../../../docs/geo-support/java/index\">Geospatial support</a> for more information on ReQL’s coordinate system.</p> <p>If the last point does not specify the same coordinates as the first point, <code class=\"highlighter-rouge\">polygon</code> will close the polygon by connecting them. You cannot directly construct a polygon with holes in it using <code class=\"highlighter-rouge\">polygon</code>, but you can use <a href=\"../polygon_sub/index\">polygonSub</a> to use a second polygon within the interior of the first to define a hole.</p> <p><strong>Example:</strong> Create a line object and then convert it to a polygon.</p> <pre data-language=\"java\">r.table(\"geo\").insert(\n    r.hashMap(\"id\", 201)\n     .with(\"rectangle\", r.line(\n        r.array(-122.423246,37.779388),\n        r.array(-122.423246,37.329898),\n        r.array(-121.886420,37.329898),\n        r.array(-121.886420,37.779388)))\n).run(conn);\n\nr.table(\"geo\").get(201).update(\n    r.hashMap(\"rectangle\", row -&gt; row.g(\"rectangle\").fill())\n).optArg(\"non_atomic\", true).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../polygon/index\">polygon</a></li> <li><a href=\"../line/index\">line</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/fill/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/fill/</a>\n  </p>\n</div>\n","api/java/geojson/index":"<h1 class=\"title\">ReQL command: geojson</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.geojson(geojson) → geometry\n</pre> <h2 id=\"description\">Description</h2> <p>Convert a <a href=\"http://geojson.org\">GeoJSON</a> object to a ReQL geometry object.</p> <p>RethinkDB only allows conversion of GeoJSON objects which have ReQL equivalents: <code class=\"highlighter-rouge\">Point</code>, <code class=\"highlighter-rouge\">LineString</code>, and <code class=\"highlighter-rouge\">Polygon</code>. <code class=\"highlighter-rouge\">MultiPoint</code>, <code class=\"highlighter-rouge\">MultiLineString</code>, and <code class=\"highlighter-rouge\">MultiPolygon</code> are not supported. (You could, however, store multiple points, lines and polygons in an array and use a geospatial multi index with them.)</p> <p>Only longitude/latitude coordinates are supported. GeoJSON objects that use Cartesian coordinates, specify an altitude, or specify their own coordinate reference system will be rejected.</p> <p><strong>Example:</strong> Convert a GeoJSON object to a ReQL geometry object.</p> <pre data-language=\"java\">import com.rethinkdb.model.Geojson;\n\n// GeoJSON object:\n//      {\n//          \"type\": \"Point\",\n//          \"coordinates\": [ -122.423246, 37.779388 ]\n//      }\nGeojson geo = r.hashMap(\"type, \"Point\")\n               .with(\"coordinates\", r.array(-122.423246, 37.779388));\n\nr.table(\"geo\").insert(\n    r.hashMap(\"id\", \"sfo\")\n     .with(\"name\", \"San Francisco\")\n     .with(\"location\", r.geojson(geo))\n).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../to_geojson/index\">toGeojson</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/geojson/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/geojson/</a>\n  </p>\n</div>\n","api/java/to_geojson/index":"<h1 class=\"title\">ReQL command: toGeojson</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">geometry.toGeojson() → object\n</pre> <h2 id=\"description\">Description</h2> <p>Convert a ReQL geometry object to a <a href=\"http://geojson.org\">GeoJSON</a> object.</p> <p><strong>Example:</strong> Convert a ReQL geometry object to a GeoJSON object.</p> <pre data-language=\"java\">r.table(\"geo\").get(\"sfo\")(\"location\").toGeojson().run(conn);\n\n// Result:\n{\n    \"type\": \"Point\",\n    \"coordinates\": [ -122.423246, 37.779388 ]\n}\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../geojson/index\">geojson</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/to_geojson/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/to_geojson/</a>\n  </p>\n</div>\n","api/java/get_intersecting/index":"<h1 class=\"title\">ReQL command: getIntersecting</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">table.getIntersecting(geometry).optArg(\"index\", index) → selection&lt;stream&gt;\n</pre> <h2 id=\"description\">Description</h2> <p>Get all documents where the given geometry object intersects the geometry object of the requested geospatial index.</p> <p>The <code class=\"highlighter-rouge\">index</code> <a href=\"../optarg/index\">optarg</a> is mandatory. This command returns the same results as <code class=\"highlighter-rouge\">row -&gt; row.g(index).intersects(geometry)</code>. The total number of results is limited to the array size limit which defaults to 100,000, but can be changed with the <code class=\"highlighter-rouge\">array_limit</code> option to <a href=\"../run/index\">run</a>.</p> <p><strong>Example:</strong> Which of the locations in a list of parks intersect <code class=\"highlighter-rouge\">circle1</code>?</p> <pre data-language=\"java\">import com.rethinkdb.gen.ast.Circle;\n\nCircle circle1 = r.circle(r.array(-117.220406, 32.719464), 10)\n                  .optArg(\"unit\", \"mi\");\n\nr.table(\"parks\").getIntersecting(circle1).optArg(\"index\", \"area\").run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../get_nearest/index\">getNearest</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/get_intersecting/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/get_intersecting/</a>\n  </p>\n</div>\n","api/java/get_nearest/index":"<h1 class=\"title\">ReQL command: getNearest</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">table.getNearest(point).optArg(\"index\", index) → array\n</pre> <h2 id=\"description\">Description</h2> <p>Return a list of documents closest to a specified point based on a geospatial index, sorted in order of increasing distance.</p> <p>The <code class=\"highlighter-rouge\">index</code> <a href=\"../optarg/index\">optArg</a> is mandatory. Optional arguments are:</p> <ul> <li>\n<code class=\"highlighter-rouge\">max_results</code>: the maximum number of results to return (default 100).</li> <li>\n<code class=\"highlighter-rouge\">unit</code>: Unit for the distance. Possible values are <code class=\"highlighter-rouge\">m</code> (meter, the default), <code class=\"highlighter-rouge\">km</code> (kilometer), <code class=\"highlighter-rouge\">mi</code> (international mile), <code class=\"highlighter-rouge\">nm</code> (nautical mile), <code class=\"highlighter-rouge\">ft</code> (international foot).</li> <li>\n<code class=\"highlighter-rouge\">max_dist</code>: the maximum distance from an object to the specified point (default 100 km).</li> <li>\n<code class=\"highlighter-rouge\">geo_system</code>: the reference ellipsoid to use for geographic coordinates. Possible values are <code class=\"highlighter-rouge\">WGS84</code> (the default), a common standard for Earth’s geometry, or <code class=\"highlighter-rouge\">unit_sphere</code>, a perfect sphere of 1 meter radius.</li> </ul> <p>The return value will be an array of two-item objects with the keys <code class=\"highlighter-rouge\">dist</code> and <code class=\"highlighter-rouge\">doc</code>, set to the distance between the specified point and the document (in the units specified with <code class=\"highlighter-rouge\">unit</code>, defaulting to meters) and the document itself, respectively. The array will be sorted by the values of <code class=\"highlighter-rouge\">dist</code>.</p> <p><strong>Example:</strong> Return a list of the closest 25 enemy hideouts to the secret base.</p> <pre data-language=\"java\">import com.rethinkdb.gen.ast.Point;\n\nPoint secretBase = r.point(-122.422876,37.777128);\n\nr.table(\"hideouts\")\n .getNearest(secretBase)\n .optArg(\"index\", \"location\")\n .optArg(\"max_results\", 25)\n .run(conn);\n</pre>   <blockquote class=\"infobox \">\n<p>If you wish to find all points within a certain radius of another point, it’s often faster to use <a href=\"../get_intersecting/index\">getIntersecting</a> with <a href=\"../circle/index\">circle</a>, as long as the approximation of a circle that <code class=\"highlighter-rouge\">circle</code> generates is sufficient.</p> </blockquote>  <h2>Related commands</h2> <ul> <li><a href=\"../get_intersecting/index\">getIntersecting</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/get_nearest/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/get_nearest/</a>\n  </p>\n</div>\n","api/java/intersects/index":"<h1 class=\"title\">ReQL command: intersects</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">sequence.intersects(geometry) → sequence\ngeometry.intersects(geometry) → bool\nr.intersects(sequence, geometry) → sequence\nr.intersects(geometry, geometry) → bool\n</pre> <h2 id=\"description\">Description</h2> <p>Tests whether two geometry objects intersect with one another. When applied to a sequence of geometry objects, <code class=\"highlighter-rouge\">intersects</code> acts as a <a href=\"../filter/index\">filter</a>, returning a sequence of objects from the sequence that intersect with the argument.</p> <p><strong>Example:</strong> Is <code class=\"highlighter-rouge\">point2</code> within a 2000-meter circle around <code class=\"highlighter-rouge\">point1</code>?</p> <pre data-language=\"java\">import com.rethinkdb.gen.ast.Point;\n\nPoint point1 = r.point(-117.220406,32.719464);\nPoint point2 = r.point(-117.206201,32.725186);\n\nr.circle(point1, 2000).intersects(point2).run(conn);\n\n// Result:\ntrue\n</pre>  <p><strong>Example:</strong> Which of the locations in a list of parks intersect a given circle?</p> <pre data-language=\"java\">r.table(\"parks\").g(\"area\")\n .intersects(r.circle(r.array(-117.220406, 32.719464), 10).optArg(\"unit\", \"mi\"))\n .run(conn);\n</pre>  <blockquote class=\"infobox \">\n<p>The <code class=\"highlighter-rouge\">intersects</code> command cannot take advantage of a geospatial <a href=\"../../../docs/secondary-indexes/java/index\">secondary index</a>. If you’re working with large data sets, you should consider using an index and the <a href=\"../get_intersecting/index\">getIntersecting</a> command instead of <code class=\"highlighter-rouge\">intersects</code>.</p> </blockquote>  <h2>Related commands</h2> <ul> <li><a href=\"../includes/index\">includes</a></li> <li><a href=\"../get_intersecting/index\">getIntersecting</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/intersects/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/intersects/</a>\n  </p>\n</div>\n","api/java/line/index":"<h1 class=\"title\">ReQL command: line</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.line([lon1, lat1], [lon2, lat2], ...) → line\nr.line(point1, point2, ...) → line\n</pre> <h2 id=\"description\">Description</h2> <p>Construct a geometry object of type Line. The line can be specified in one of two ways:</p> <ul> <li>Two or more two-item arrays, specifying latitude and longitude numbers of the line’s vertices;</li> <li>Two or more <a href=\"../point/index\">Point</a> objects specifying the line’s vertices.</li> </ul>  <p>Longitude (−180 to 180) and latitude (−90 to 90) of vertices are plotted on a perfect sphere. See <a href=\"../../../docs/geo-support/java/index\">Geospatial support</a> for more information on ReQL’s coordinate system.</p> <p><strong>Example:</strong> Define a line.</p> <pre data-language=\"java\">r.table(\"geo\").insert(\n    r.hashMap(\"id\", 101)\n     .with(\"route\", r.line(r.array(-122.423246, 37.779388),\n                           r.array(-121.88642, 37.329898)))\n).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../point/index\">point</a></li> <li><a href=\"../polygon/index\">polygon</a></li> <li><a href=\"../circle/index\">circle</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/line/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/line/</a>\n  </p>\n</div>\n","api/java/point/index":"<h1 class=\"title\">ReQL command: point</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.point(longitude, latitude) → point\n</pre> <h2 id=\"description\">Description</h2> <p>Construct a geometry object of type Point. The point is specified by two floating point numbers, the longitude (−180 to 180) and latitude (−90 to 90) of the point on a perfect sphere. See <a href=\"../../../docs/geo-support/java/index\">Geospatial support</a> for more information on ReQL’s coordinate system.</p> <p><strong>Example:</strong> Define a point.</p> <pre data-language=\"java\">r.table(\"geo\").insert(\n    r.hashMap(\"id\", 1)\n     .with(\"name\", \"San Francisco\")\n     .with(\"location\", r.point(-122.423246, 37.779388))\n).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../line/index\">line</a></li> <li><a href=\"../polygon/index\">polygon</a></li> <li><a href=\"../circle/index\">circle</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/point/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/point/</a>\n  </p>\n</div>\n","api/java/polygon/index":"<h1 class=\"title\">ReQL command: polygon</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.polygon([lon1, lat1], [lon2, lat2], [lon3, lat3], ...) → polygon\nr.polygon(point1, point2, point3, ...) → polygon\n</pre> <h2 id=\"description\">Description</h2> <p>Construct a geometry object of type Polygon. The Polygon can be specified in one of two ways:</p> <ul> <li>Three or more two-item arrays, specifying latitude and longitude numbers of the polygon’s vertices;</li> <li>Three or more <a href=\"../point/index\">Point</a> objects specifying the polygon’s vertices.</li> </ul>  <p>Longitude (−180 to 180) and latitude (−90 to 90) of vertices are plotted on a perfect sphere. See <a href=\"../../../docs/geo-support/java/index\">Geospatial support</a> for more information on ReQL’s coordinate system.</p> <p>If the last point does not specify the same coordinates as the first point, <code class=\"highlighter-rouge\">polygon</code> will close the polygon by connecting them. You cannot directly construct a polygon with holes in it using <code class=\"highlighter-rouge\">polygon</code>, but you can use <a href=\"../polygon_sub/index\">polygonSub</a> to use a second polygon within the interior of the first to define a hole.</p> <p><strong>Example:</strong> Define a polygon.</p> <pre data-language=\"java\">r.table(\"geo\").insert(\n    r.hashMap(\"id\", 101)\n     .with(\"rectangle\", r.polygon(\n        r.array(-122.423246, 37.779388),\n        r.array(-122.423246, 37.329898),\n        r.array(-121.88642, 37.329898),\n        r.array(-121.88642, 37.779388))\n    )\n).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../point/index\">point</a></li> <li><a href=\"../line/index\">line</a></li> <li><a href=\"../circle/index\">circle</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/polygon/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/polygon/</a>\n  </p>\n</div>\n","api/java/includes/index":"<h1 class=\"title\">ReQL command: includes</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">sequence.includes(geometry) → sequence\ngeometry.includes(geometry) → bool\n</pre> <h2 id=\"description\">Description</h2> <p>Tests whether a geometry object is completely contained within another. When applied to a sequence of geometry objects, <code class=\"highlighter-rouge\">includes</code> acts as a <a href=\"../filter/index\">filter</a>, returning a sequence of objects from the sequence that include the argument.</p> <p><strong>Example:</strong> Is a point included within a 2000-meter circle?</p> <pre data-language=\"java\">Object point1 = r.point(-117.220406,32.719464);\nObject point2 = r.point(-117.206201,32.725186);\n\nr.circle(point1, 2000).includes(point2).run(conn);\n\n// Result:\ntrue\n</pre>  <p><strong>Example:</strong> Which of the locations in a list of parks include a given circle?</p> <pre data-language=\"java\">import com.rethinkdb.gen.ast.Circle;\n\nCircle circle1 = r.circle(r.array(-117.220406, 32.719464), 10)\n                  .optArg(\"unit\", \"mi\");\n\nr.table(\"parks\").g(\"area\").includes(circle1).run(conn);\n</pre>  <blockquote class=\"infobox \">\n<p>The <code class=\"highlighter-rouge\">includes</code> command cannot take advantage of a geospatial <a href=\"../../../docs/secondary-indexes/java/index\">secondary index</a>. If you’re working with large data sets, consider using an index and <a href=\"https://rethinkdb.com/api/javascript/get_intersecting\">getIntersecting</a> before <code class=\"highlighter-rouge\">includes</code> to narrow down the initial result set.</p> </blockquote> <p><strong>Example:</strong> Rewrite the previous example with <code class=\"highlighter-rouge\">getIntersecting</code>.</p> <pre data-language=\"java\">Circle circle1 = r.circle(r.array(-117.220406, 32.719464), 10)\n                  .optArg(\"unit\", \"mi\");\n\nr.table(\"parks\").getIntersecting(circle1)\n .optArg(\"index\", \"area\").g(\"area\")\n .includes(circle1).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../intersects/index\">intersects</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/includes/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/includes/</a>\n  </p>\n</div>\n","api/java/polygon_sub/index":"<h1 class=\"title\">ReQL command: polygonSub</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">polygon1.polygonSub(polygon2) → polygon\n</pre> <h2 id=\"description\">Description</h2> <p>Use <code class=\"highlighter-rouge\">polygon2</code> to “punch out” a hole in <code class=\"highlighter-rouge\">polygon1</code>. <code class=\"highlighter-rouge\">polygon2</code> must be completely contained within <code class=\"highlighter-rouge\">polygon1</code> and must have no holes itself (it must not be the output of <code class=\"highlighter-rouge\">polygonSub</code> itself).</p> <p><strong>Example:</strong> Define a polygon with a hole punched in it.</p> <pre data-language=\"java\">import com.rethinkdb.gen.ast.Polygon;\n\nPolygon outerPolygon = r.polygon(\n    [-122.4,37.7],\n    [-122.4,37.3],\n    [-121.8,37.3],\n    [-121.8,37.7]\n);\nPolygon innerPolygon = r.polygon(\n    [-122.3,37.4],\n    [-122.3,37.6],\n    [-122.0,37.6],\n    [-122.0,37.4]\n);\nouterPolygon.polygonSub(inner_polygon).run(conn);\n</pre>   <h2>Related commands</h2> <ul> <li><a href=\"../polygon/index\">polygon</a></li> </ul>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/polygon_sub/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/polygon_sub/</a>\n  </p>\n</div>\n","api/java/grant/index":"<h1 class=\"title\">ReQL command: grant</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">r.grant(\"username\", r.hashMap(\"permission\", bool[, ...])) → object\ndb.grant(\"username\", r.hashMap(\"permission\", bool[, ...])) → object\ntable.grant(\"username\", r.hashMap(\"permission\", bool[, ...])) → object\n</pre> <h2 id=\"description\">Description</h2> <p>Grant or deny access permissions for a user account, globally or on a per-database or per-table basis.</p> <p>There are four different permissions that can be granted to an account:</p> <ul> <li>\n<code class=\"highlighter-rouge\">read</code> allows reading the data in tables.</li> <li>\n<code class=\"highlighter-rouge\">write</code> allows modifying data, including inserting, replacing/updating, and deleting.</li> <li>\n<code class=\"highlighter-rouge\">connect</code> allows a user to open HTTP connections via the <a href=\"../http/index\">http</a> command. This permission can only be granted in global scope.</li> <li>\n<code class=\"highlighter-rouge\">config</code> allows users to create/drop <a href=\"../../../docs/secondary-indexes/java/index\">secondary indexes</a> on a table and changing the cluster configuration; to create and drop tables, if granted on a database; and to create and drop databases, if granted globally.</li> </ul> <p>Permissions may be granted on a global scope, or granted for a specific table or database. The scope is defined by calling <code class=\"highlighter-rouge\">grant</code> on its own (e.g., <code class=\"highlighter-rouge\">r.grant()</code>, on a table (<code class=\"highlighter-rouge\">r.table().grant()</code>), or on a database (<code class=\"highlighter-rouge\">r.db().grant()</code>).</p> <p>The <code class=\"highlighter-rouge\">grant</code> command returns an object of the following form:</p> <pre data-language=\"java\">{\n    \"granted\": 1,\n    \"permissions_changes\": [\n        {\n            \"new_val\": { new permissions },\n            \"old_val\": { original permissions }\n        }\n    ]\n</pre>  <p>The <code class=\"highlighter-rouge\">granted</code> field will always be <code class=\"highlighter-rouge\">1</code>, and the <code class=\"highlighter-rouge\">permissions_changes</code> list will have one object, describing the new permissions values and the old values they were changed from (which may be <code class=\"highlighter-rouge\">null</code>).</p> <p>Permissions that are not defined on a local scope will be inherited from the next largest scope. For example, a write operation on a table will first check if <code class=\"highlighter-rouge\">write</code> permissions are explicitly set to <code class=\"highlighter-rouge\">true</code> or <code class=\"highlighter-rouge\">false</code> for that table and account combination; if they are not, the <code class=\"highlighter-rouge\">write</code> permissions for the database will be used if those are explicitly set; and if neither table nor database permissions are set for that account, the global <code class=\"highlighter-rouge\">write</code> permissions for that account will be used.</p> <p><strong>Note:</strong> For all accounts other than the special, system-defined <code class=\"highlighter-rouge\">admin</code> account, permissions that are not explicitly set in any scope will effectively be <code class=\"highlighter-rouge\">false</code>. When you create a new user account by inserting a record into the <a href=\"../../../docs/system-tables/index#users\">system table</a>, that account will have <em>no</em> permissions until they are explicitly granted.</p> <p>For a full description of permissions, read <a href=\"../../../docs/permissions-and-accounts/index\">Permissions and user accounts</a>.</p> <p><strong>Example:</strong> Grant the <code class=\"highlighter-rouge\">chatapp</code> user account read and write permissions on the <code class=\"highlighter-rouge\">users</code> database.</p> <pre data-language=\"java\">r.db(\"users\").grant(\"chatapp\", r.hashMap(\"read\", true).with(\"write\", true)).run(conn);\n</pre>  <p>Return:</p> <pre data-language=\"java\">{\n    \"granted\": 1,\n    \"permissions_changes\": [\n        {\n            \"new_val\": { \"read\": true, \"write\": true },\n            \"old_val\": { null }\n        }\n    ]\n</pre>  <p><strong>Example:</strong> Deny write permissions from the <code class=\"highlighter-rouge\">chatapp</code> account for the <code class=\"highlighter-rouge\">admin</code> table.</p> <pre data-language=\"java\">r.db(\"users\").table(\"admin\").grant(\"chatapp\", r.hashMap(\"write\", false)).run(conn);\n</pre>  <p>This will override the <code class=\"highlighter-rouge\">write: true</code> permissions granted in the first example, but for this table only. Other tables in the <code class=\"highlighter-rouge\">users</code> database will inherit from the database permissions.</p> <p><strong>Example:</strong> Delete a table-level permission for the <code class=\"highlighter-rouge\">chatapp</code> account.</p> <pre data-language=\"java\">r.db(\"users\").table(\"admin\").grant(\"chatapp\", r.hashMap(\"write\", null)).run(conn);\n</pre>  <p>By specifying <code class=\"highlighter-rouge\">None</code>, the table scope <code class=\"highlighter-rouge\">write</code> permission is removed, and will again inherit from the next highest scope (database or global).</p> <p><strong>Example:</strong> Grant <code class=\"highlighter-rouge\">chatapp</code> the ability to use HTTP connections.</p> <pre data-language=\"java\">r.grant(\"chatapp\", r.hashMap(\"connect\", true)).run(conn);\n</pre>  <p>This grant can only be given on a global level.</p> <p><strong>Example:</strong> Grant a <code class=\"highlighter-rouge\">monitor</code> account read-only access to all databases.</p> <pre data-language=\"java\">r.grant(\"monitor\", r.hashMap(\"read\", true)).run(conn);\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/grant/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/grant/</a>\n  </p>\n</div>\n","api/java/config/index":"<h1 class=\"title\">ReQL command: config</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">table.config() → selection&lt;object&gt;\ndatabase.config() → selection&lt;object&gt;\n</pre> <h2 id=\"description\">Description</h2> <p>Query (read and/or update) the configurations for individual tables or databases.</p> <p>The <code class=\"highlighter-rouge\">config</code> command is a shorthand way to access the <code class=\"highlighter-rouge\">table_config</code> or <code class=\"highlighter-rouge\">db_config</code> <a href=\"../../../docs/system-tables/index#configuration-tables\">System tables</a>. It will return the single row from the system that corresponds to the database or table configuration, as if <a href=\"../get/index\">get</a> had been called on the system table with the UUID of the database or table in question.</p> <p><strong>Example:</strong> Get the configuration for the <code class=\"highlighter-rouge\">users</code> table.</p> <pre data-language=\"java\">r.table(\"users\").config().run(conn);\n</pre>   <p>Result:</p> <pre data-language=\"java\">{\n    \"id\": \"31c92680-f70c-4a4b-a49e-b238eb12c023\",\n    \"name\": \"users\",\n    \"db\": \"superstuff\",\n    \"primary_key\": \"id\",\n    \"shards\": [\n        {\n            \"primary_replica\": \"a\", \n            \"replicas\": [\"a\", \"b\"],\n            \"nonvoting_replicas\": []\n        },\n        {\n            \"primary_replica\": \"d\",\n            \"replicas\": [\"c\", \"d\"],\n            \"nonvoting_replicas\": []\n        }\n    ],\n    \"indexes\": [],\n    \"write_acks\": \"majority\",\n    \"durability\": \"hard\"\n}\n</pre>  <p><strong>Example:</strong> Change the write acknowledgement requirement of the <code class=\"highlighter-rouge\">users</code> table.</p> <pre data-language=\"java\">r.table(\"users\").config().update(r.hashMap(\"write_acks\", \"single\")).run(conn);\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/config/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/config/</a>\n  </p>\n</div>\n","api/java/rebalance/index":"<h1 class=\"title\">ReQL command: rebalance</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">table.rebalance() → object\ndatabase.rebalance() → object\n</pre> <h2 id=\"description\">Description</h2> <p>Rebalances the shards of a table. When called on a database, all the tables in that database will be rebalanced.</p> <p>The <code class=\"highlighter-rouge\">rebalance</code> command operates by measuring the distribution of primary keys within a table and picking split points that will give each shard approximately the same number of documents. It won’t change the number of shards within a table, or change any other configuration aspect for the table or the database.</p> <p>A table will lose availability temporarily after <code class=\"highlighter-rouge\">rebalance</code> is called; use the <a href=\"../wait/index\">wait</a> command to wait for the table to become available again, or <a href=\"../status/index\">status</a> to check if the table is available for writing.</p> <p>RethinkDB automatically rebalances tables when the number of shards are increased, and as long as your documents have evenly distributed primary keys—such as the default UUIDs—it is rarely necessary to call <code class=\"highlighter-rouge\">rebalance</code> manually. Cases where <code class=\"highlighter-rouge\">rebalance</code> may need to be called include:</p> <ul> <li>Tables with unevenly distributed primary keys, such as incrementing integers</li> <li>Changing a table’s primary key type</li> <li>Increasing the number of shards on an empty table, then using non-UUID primary keys in that table</li> </ul> <p>The <a href=\"../../../docs/administration-tools/index\">web UI</a> (and the <a href=\"../info/index\">info</a> command) can be used to tell you when a table’s shards need to be rebalanced.</p> <p>The return value of <code class=\"highlighter-rouge\">rebalance</code> is an object with two fields:</p> <ul> <li>\n<code class=\"highlighter-rouge\">rebalanced</code>: the number of tables rebalanced.</li> <li>\n<code class=\"highlighter-rouge\">status_changes</code>: a list of new and old table status values. Each element of the list will be an object with two fields: <ul> <li>\n<code class=\"highlighter-rouge\">old_val</code>: The table’s <a href=\"../status/index\">status</a> value before <code class=\"highlighter-rouge\">rebalance</code> was executed.</li> <li>\n<code class=\"highlighter-rouge\">new_val</code>: The table’s <code class=\"highlighter-rouge\">status</code> value after <code class=\"highlighter-rouge\">rebalance</code> was executed. (This value will almost always indicate the table is unavailable.)</li> </ul> </li> </ul> <p>See the <a href=\"../status/index\">status</a> command for an explanation of the objects returned in the <code class=\"highlighter-rouge\">old_val</code> and <code class=\"highlighter-rouge\">new_val</code> fields.</p> <p><strong>Example:</strong> Rebalance a table.</p> <pre data-language=\"java\">&gt; r.table(\"superheroes\").rebalance().run(conn);\n</pre>   <p>Result:</p> <pre data-language=\"java\">{\n  \"rebalanced\": 1,\n  \"status_changes\": [\n    {\n      \"old_val\": {\n        \"db\": \"database\",\n        \"id\": \"5cb35225-81b2-4cec-9eef-bfad15481265\",\n        \"name\": \"superheroes\",\n        \"shards\": [\n          {\n            \"primary_replica\": \"jeeves\",\n            \"replicas\": [\n              {\n                \"server\": \"jeeves\",\n                \"state\": \"ready\"\n              }\n            ]\n          },\n          {\n            \"primary_replica\": \"jeeves\",\n            \"replicas\": [\n              {\n                \"server\": \"jeeves\",\n                \"state\": \"ready\"\n              }\n            ]\n          }\n        ],\n        \"status\": {\n          \"all_replicas_ready\": true,\n          \"ready_for_outdated_reads\": true,\n          \"ready_for_reads\": true,\n          \"ready_for_writes\": true\n        }\n      },\n      \"new_val\": {\n        \"db\": \"database\",\n        \"id\": \"5cb35225-81b2-4cec-9eef-bfad15481265\",\n        \"name\": \"superheroes\",\n        \"shards\": [\n          {\n            \"primary_replica\": \"jeeves\",\n            \"replicas\": [\n              {\n                \"server\": \"jeeves\",\n                \"state\": \"transitioning\"\n              }\n            ]\n          },\n          {\n            \"primary_replica\": \"jeeves\",\n            \"replicas\": [\n              {\n                \"server\": \"jeeves\",\n                \"state\": \"transitioning\"\n              }\n            ]\n          }\n        ],\n        \"status\": {\n          \"all_replicas_ready\": false,\n          \"ready_for_outdated_reads\": false,\n          \"ready_for_reads\": false,\n          \"ready_for_writes\": false\n        }\n      }\n\n    }\n  ]\n}\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/rebalance/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/rebalance/</a>\n  </p>\n</div>\n","api/java/status/index":"<h1 class=\"title\">ReQL command: status</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">table.status() → selection&lt;object&gt;\n</pre> <h2 id=\"description\">Description</h2> <p>Return the status of a table.</p> <p>The return value is an object providing information about the table’s shards, replicas and replica readiness states. For a more complete discussion of the object fields, read about the <code class=\"highlighter-rouge\">table_status</code> table in <a href=\"../../../docs/system-tables/index#status-tables\">System tables</a>.</p> <ul> <li>\n<code class=\"highlighter-rouge\">id</code>: the UUID of the table.</li> <li>\n<code class=\"highlighter-rouge\">name</code>: the table’s name.</li> <li>\n<code class=\"highlighter-rouge\">db</code>: the database the table is in.</li> <li>\n<code class=\"highlighter-rouge\">status</code>: the subfields in this field indicate whether all shards of the table are ready to accept the given type of query: <code class=\"highlighter-rouge\">outdated_reads</code>, <code class=\"highlighter-rouge\">reads</code> and <code class=\"highlighter-rouge\">writes</code>. The <code class=\"highlighter-rouge\">all_replicas_ready</code> field indicates whether all backfills have finished.</li> <li>\n<code class=\"highlighter-rouge\">shards</code>: one entry for each shard in <code class=\"highlighter-rouge\">table_config</code>. Each shard’s object has the following fields: <ul> <li>\n<code class=\"highlighter-rouge\">primary_replicas</code>: a list of zero or more servers acting as primary replicas for the table.</li> <li>\n<code class=\"highlighter-rouge\">replicas</code>: a list of all servers acting as a replica for that shard. The <code class=\"highlighter-rouge\">state</code> field may be one of the following: <code class=\"highlighter-rouge\">ready</code>, <code class=\"highlighter-rouge\">transitioning</code>, <code class=\"highlighter-rouge\">backfilling</code>, <code class=\"highlighter-rouge\">disconnected</code>, <code class=\"highlighter-rouge\">waiting_for_primary</code>, or <code class=\"highlighter-rouge\">waiting_for_quorum</code>.</li> </ul> </li> </ul> <p><strong>Example:</strong> Get a table’s status.</p> <pre data-language=\"java\">r.table(\"superheroes\").status().run(conn);\n</pre>   <p>Result:</p> <pre data-language=\"java\">{\n  \"db\": \"database\",\n  \"id\": \"5cb35225-81b2-4cec-9eef-bfad15481265\",\n  \"name\": \"superheroes\",\n  \"shards\": [\n    {\n      \"primary_replicas\": [\"jeeves\"],\n      \"replicas\": [\n        {\n          \"server\": \"jeeves\",\n          \"state\": \"ready\"\n        }\n      ]\n    },\n    {\n      \"primary_replicas\": [\"jeeves\"],\n      \"replicas\": [\n        {\n          \"server\": \"jeeves\",\n          \"state\": \"ready\"\n        }\n      ]\n    }\n  ],\n  \"status\": {\n    \"all_replicas_ready\": true,\n    \"ready_for_outdated_reads\": true,\n    \"ready_for_reads\": true,\n    \"ready_for_writes\": true\n  }\n}\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/status/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/status/</a>\n  </p>\n</div>\n","api/java/wait/index":"<h1 class=\"title\">ReQL command: wait</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">table.wait() → object\ndatabase.wait() → object\nr.wait(table | database) → object\n</pre> <h2 id=\"description\">Description</h2> <p>Wait for a table or all the tables in a database to be ready. A table may be temporarily unavailable after creation, rebalancing or reconfiguring. The <code class=\"highlighter-rouge\">wait</code> command blocks until the given table (or database) is fully up to date.</p> <p>The <code class=\"highlighter-rouge\">wait</code> command takes two optional arguments using <a href=\"../optarg/index\">optArg</a>:</p> <ul> <li>\n<code class=\"highlighter-rouge\">wait_for</code>: a string indicating a table <a href=\"../status/index\">status</a> to wait on before returning, one of <code class=\"highlighter-rouge\">ready_for_outdated_reads</code>, <code class=\"highlighter-rouge\">ready_for_reads</code>, <code class=\"highlighter-rouge\">ready_for_writes</code>, or <code class=\"highlighter-rouge\">all_replicas_ready</code>. The default is <code class=\"highlighter-rouge\">all_replicas_ready</code>.</li> <li>\n<code class=\"highlighter-rouge\">timeout</code>: a number indicating maximum time, in seconds, to wait for the table to be ready. If this value is exceeded, a <code class=\"highlighter-rouge\">ReqlRuntimeError</code> will be thrown. A value of <code class=\"highlighter-rouge\">0</code> means no timeout. The default is <code class=\"highlighter-rouge\">0</code> (no timeout).</li> </ul> <p>The return value is an object consisting of a single field, <code class=\"highlighter-rouge\">ready</code>. The value is an integer indicating the number of tables waited for. It will always be <code class=\"highlighter-rouge\">1</code> when <code class=\"highlighter-rouge\">wait</code> is called on a table, and the total number of tables when called on a database.</p> <blockquote class=\"infobox \">\n<p>Versions of RethinkDB prior to 2.3 allowed <code class=\"highlighter-rouge\">wait</code> to be called without a table or database specified. This is no longer valid; <code class=\"highlighter-rouge\">wait</code> requires explicit selection of a database or table.</p> </blockquote> <p><strong>Example:</strong> Wait on a table to be ready.</p> <pre data-language=\"java\">r.table(\"superheroes\").wait().run(conn);\n</pre>  <p>Result:</p> <pre data-language=\"java\">{ \"ready\": 1 }\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/wait/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/wait/</a>\n  </p>\n</div>\n","api/java/reconfigure/index":"<h1 class=\"title\">ReQL command: reconfigure</h1>    <h2 id=\"command-syntax\">Command syntax</h2> <pre class=\"command-syntax\" data-language=\"java\">table.reconfigure() → object\ndatabase.reconfigure() → object\n</pre> <h2 id=\"description\">Description</h2> <p>Reconfigure a table’s sharding and replication. Pass the following options using <a href=\"../optarg/index\">optArg</a>:</p> <ul> <li>\n<code class=\"highlighter-rouge\">shards</code>: the number of shards, an integer from 1-64. Required.</li> <li>\n<code class=\"highlighter-rouge\">replicas</code>: either an integer or a mapping object. Required. <ul> <li>If <code class=\"highlighter-rouge\">replicas</code> is an integer, it specifies the number of replicas per shard. Specifying more replicas than there are servers will return an error.</li> <li>If <code class=\"highlighter-rouge\">replicas</code> is an object, it specifies key-value pairs of server tags and the number of replicas to assign to those servers: <code class=\"highlighter-rouge\"><span class=\"p\">{</span><span class=\"err\">tag1</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"err\">tag2</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"err\">tag3</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"err\">...}</span></code>. For more information about server tags, read <a href=\"../../../docs/administration-tools/index\">Administration tools</a>.</li> </ul> </li> <li>\n<code class=\"highlighter-rouge\">primary_replica_tag</code>: the primary server specified by its server tag. Required if <code class=\"highlighter-rouge\">replicas</code> is an object; the tag must be in the object. This must <em>not</em> be specified if <code class=\"highlighter-rouge\">replicas</code> is an integer.</li> <li>\n<code class=\"highlighter-rouge\">dry_run</code>: if <code class=\"highlighter-rouge\">true</code> the generated configuration will not be applied to the table, only returned.</li> <li> <p><code class=\"highlighter-rouge\">nonvoting_replica_tags</code>: replicas with these server tags will be added to the <code class=\"highlighter-rouge\">nonvoting_replicas</code> list of the resulting configuration. (See <a href=\"../../../docs/failover/index\">failover</a> for details about non-voting replicas.)</p> </li> <li>\n<code class=\"highlighter-rouge\">emergency_repair</code>: Used for the Emergency Repair mode. See the separate section below.</li> </ul> <p>The return value of <code class=\"highlighter-rouge\">reconfigure</code> is an object with three fields:</p> <ul> <li>\n<code class=\"highlighter-rouge\">reconfigured</code>: the number of tables reconfigured. This will be <code class=\"highlighter-rouge\">0</code> if <code class=\"highlighter-rouge\">dry_run</code> is <code class=\"highlighter-rouge\">true</code>.</li> <li>\n<code class=\"highlighter-rouge\">config_changes</code>: a list of new and old table configuration values. Each element of the list will be an object with two fields: <ul> <li>\n<code class=\"highlighter-rouge\">old_val</code>: The table’s <a href=\"../config/index\">config</a> value before <code class=\"highlighter-rouge\">reconfigure</code> was executed.</li> <li>\n<code class=\"highlighter-rouge\">new_val</code>: The table’s <code class=\"highlighter-rouge\">config</code> value after <code class=\"highlighter-rouge\">reconfigure</code> was executed.</li> </ul> </li> <li>\n<code class=\"highlighter-rouge\">status_changes</code>: a list of new and old table status values. Each element of the list will be an object with two fields: <ul> <li>\n<code class=\"highlighter-rouge\">old_val</code>: The table’s <a href=\"../status/index\">status</a> value before <code class=\"highlighter-rouge\">reconfigure</code> was executed.</li> <li>\n<code class=\"highlighter-rouge\">new_val</code>: The table’s <code class=\"highlighter-rouge\">status</code> value after <code class=\"highlighter-rouge\">reconfigure</code> was executed.</li> </ul> </li> </ul> <p>For <code class=\"highlighter-rouge\">config_changes</code> and <code class=\"highlighter-rouge\">status_changes</code>, see the <a href=\"../config/index\">config</a> and <a href=\"../status/index\">status</a> commands for an explanation of the objects returned in the <code class=\"highlighter-rouge\">old_val</code> and <code class=\"highlighter-rouge\">new_val</code> fields.</p> <p>A table will lose availability temporarily after <code class=\"highlighter-rouge\">reconfigure</code> is called; use the <a href=\"../wait/index\">wait</a> command to wait for the table to become available again, or <a href=\"../status/index\">status</a> to check if the table is available for writing.</p> <p><strong>Note:</strong> Whenever you call <code class=\"highlighter-rouge\">reconfigure</code>, the write durability will be set to <code class=\"highlighter-rouge\">hard</code> and the write acknowledgments will be set to <code class=\"highlighter-rouge\">majority</code>; these can be changed by using the <code class=\"highlighter-rouge\">config</code> command on the table.</p> <p>If <code class=\"highlighter-rouge\">reconfigure</code> is called on a database, all the tables in the database will have their configurations affected. The return value will be an array of the objects described above, one per table.</p> <p>Read <a href=\"../../../docs/sharding-and-replication/index\">Sharding and replication</a> for a complete discussion of the subject, including advanced topics.</p> <p><strong>Example:</strong> Reconfigure a table.</p> <pre data-language=\"java\">r.table(\"superheroes\").reconfigure().optArg(\"shards\", 2).optArg(\"replicas\", 1).run(conn);\n</pre>   <p>Result:</p> <pre data-language=\"java\">{\n  \"reconfigured\": 1,\n  \"config_changes\": [\n    {\n      \"new_val\": {\n        \"id\": \"31c92680-f70c-4a4b-a49e-b238eb12c023\",\n        \"name\": \"superheroes\",\n        \"db\": \"superstuff\",\n        \"primary_key\": \"id\",\n        \"shards\": [\n          {\n            \"primary_replica\": \"jeeves\",\n            \"replicas\": [\"jeeves\", \"alfred\"],\n            \"nonvoting_replicas\": []\n          },\n          {\n            \"primary_replica\": \"alfred\",\n            \"replicas\": [\"jeeves\", \"alfred\"],\n            \"nonvoting_replicas\": []\n          }\n        ],\n        \"indexes\": [],\n        \"write_acks\": \"majority\",\n        \"durability\": \"hard\"\n      },\n      \"old_val\": {\n        \"id\": \"31c92680-f70c-4a4b-a49e-b238eb12c023\",\n        \"name\": \"superheroes\",\n        \"db\": \"superstuff\",\n        \"primary_key\": \"id\",\n        \"shards\": [\n            \"primary_replica\": \"alfred\",\n            \"replicas\": [\"jeeves\", \"alfred\"],\n            \"nonvoting_replicas\": []\n        ],\n        \"indexes\": [],\n        \"write_acks\": \"majority\",\n        \"durability\": \"hard\"\n      }\n    }\n  ],\n  \"status_changes\": [\n    {\n      \"new_val\": (status object),\n      \"old_val\": (status object)\n    }\n  ]\n}\n</pre>  <p><strong>Example:</strong> Reconfigure a table, specifying replicas by server tags.</p> <pre data-language=\"java\">r.table(\"superheroes\").reconfigure().optArg(\"shards\", 2).optArg(\"replicas\", r.hashMap(\"wooster\", 1).with(\"wayne\", 1)).optArg(\"primary_replica_tag\", \"wooster\").run(conn)\n\n{\n  \"reconfigured\": 1,\n  \"config_changes\": [\n    {\n      \"new_val\": {\n        \"id\": \"31c92680-f70c-4a4b-a49e-b238eb12c023\",\n        \"name\": \"superheroes\",\n        \"db\": \"superstuff\",\n        \"primary_key\": \"id\",\n        \"shards\": [\n          {\n            \"primary_replica\": \"jeeves\",\n            \"replicas\": [\"jeeves\", \"alfred\"],\n            \"nonvoting_replicas\": []\n          },\n          {\n            \"primary_replica\": \"alfred\",\n            \"replicas\": [\"jeeves\", \"alfred\"],\n            \"nonvoting_replicas\": []\n          }\n        ],\n        \"indexes\": [],\n        \"write_acks\": \"majority\",\n        \"durability\": \"hard\"\n      },\n      \"old_val\": {\n        \"id\": \"31c92680-f70c-4a4b-a49e-b238eb12c023\",\n        \"name\": \"superheroes\",\n        \"db\": \"superstuff\",\n        \"primary_key\": \"id\",\n        \"shards\": [\n            \"primary_replica\": \"alfred\",\n            \"replicas\": [\"jeeves\", \"alfred\"],\n            \"nonvoting_replicas\": []\n        ],\n        \"indexes\": [],\n        \"write_acks\": \"majority\",\n        \"durability\": \"hard\"\n      }\n    }\n  ],\n  \"status_changes\": [\n    {\n      \"new_val\": (status object),\n      \"old_val\": (status object)\n    }\n  ]\n}\n</pre>  <h2 id=\"emergency-repair-mode\">Emergency Repair mode</h2> <p>RethinkDB supports automatic failover when more than half of the voting replicas for each shard of a table are still available (see the <a href=\"../../../docs/failover/index\">Failover</a> documentation for more details). However, if half or more of the voting replicas for a shard are lost, failover will not happen automatically, leaving two options:</p> <ul> <li>Bring enough of the missing servers back online to allow automatic failover</li> <li>Use emergency repair mode to reconfigure the table</li> </ul> <p>The <code class=\"highlighter-rouge\">emergency_repair</code> argument is effectively a different command; when it is specified, no other arguments to <code class=\"highlighter-rouge\">reconfigure</code> are allowed except for <code class=\"highlighter-rouge\">dry_run</code>. When it’s executed, each shard of the table is examined and classified into one of three categories:</p> <ul> <li>\n<strong>Healthy:</strong> more than half of the shard’s voting replicas are still available.</li> <li>\n<strong>Repairable:</strong> the shard is not healthy, but has at least one replica, whether voting or non-voting, available.</li> <li>\n<strong>Beyond repair:</strong> the shard has no replicas available.</li> </ul> <p>For each repairable shard, <code class=\"highlighter-rouge\">emergency_repair</code> will convert all unavailable voting replicas into non-voting replicas. If all the voting replicas were removed, an arbitrarily-chosen available non-voting replica will be converted into a voting replica. After this operation, all of the shard’s available replicas will be voting replicas.</p> <p>Specify <code class=\"highlighter-rouge\">emergency_repair</code> with one of two string options:</p> <ul> <li>\n<code class=\"highlighter-rouge\">unsafe_rollback</code>: shards that are beyond repair will be left alone.</li> <li>\n<code class=\"highlighter-rouge\">unsafe_rollback_or_erase</code>: a shard that is beyond repair will be destroyed and recreated on an available server that holds another shard for that table.</li> </ul> <p>The return value of <code class=\"highlighter-rouge\">reconfigure</code> in emergency repair mode is the same as before. Examine the <code class=\"highlighter-rouge\">config_changes</code> field to see the old and new configuration settings for the table. As in the normal mode, if you specify <code class=\"highlighter-rouge\">emergency_repair</code> with <code class=\"highlighter-rouge\">dry_run: true</code>, the table will not actually be reconfigured.</p> <p><strong>Note:</strong> <code class=\"highlighter-rouge\">emergency_repair</code> may only be used on individual tables, not on databases. It cannot be used after the <code class=\"highlighter-rouge\">db</code> command.</p> <blockquote class=\"infobox infobox-alert\">\n<p><strong>The emergency repair mode is extremely dangerous.</strong> It bypasses normal safeguards that prevent data loss and invalidates the <a href=\"../../../docs/consistency/index\">consistency guarantees</a> that RethinkDB normally provides, and can easily lose data in either mode—in <code class=\"highlighter-rouge\">unsafe_rollback_or_erase</code> mode it could lose <em>all</em> of a shard’s data.</p> </blockquote> <p><strong>Example:</strong> Perform an emergency repair on a table.</p> <pre data-language=\"java\">r.table(\"superheroes\").reconfigure().optArg(\"emergency_repair\", \"unsafe_rollback\").run(conn);\n</pre>   <h2>Get more help</h2> <p>Couldn't find what you were looking for?</p> <ul> <li class=\"stack-overflow\">\n<strong>Ask a question</strong> on <a href=\"https://stackoverflow.com/questions/tagged/rethinkdb\">Stack Overflow</a>\n</li> <li class=\"slack\">\n<strong>Chat with us</strong> and our community on <a href=\"http://slack.rethinkdb.com\">Slack</a>\n</li> <li class=\"irc\">\n<strong>Talk to the team on IRC</strong> on <a href=\"irc://freenode.net/#rethinkdb\">#rethinkdb@freenode.net</a> — via <a href=\"http://webchat.freenode.net/?channels=#rethinkdb\">Webchat</a>\n</li> <li class=\"twitter\">\n<strong>Ping</strong> <a href=\"https://twitter.com/rethinkdb\">@rethinkdb</a> on Twitter</li> <li class=\"github\">\n<strong>Post an issue</strong> on the <a href=\"https://github.com/rethinkdb/docs/issues\">documentation issue tracker</a> on GitHub</li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; RethinkDB contributors<br>Licensed under the Creative Commons Attribution-ShareAlike 3.0 Unported License.<br>\n    <a href=\"https://rethinkdb.com/api/java/reconfigure/\" class=\"_attribution-link\">https://rethinkdb.com/api/java/reconfigure/</a>\n  </p>\n</div>\n"}